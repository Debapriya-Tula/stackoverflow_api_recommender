{"name": "Class MetaMessage", "module": "java.desktop", "package": "javax.sound.midi", "text": "A MetaMessage is a MidiMessage that is not meaningful to\n synthesizers, but that can be stored in a MIDI file and interpreted by a\n sequencer program. (See the discussion in the MidiMessage class\n description.) The Standard MIDI Files specification defines various types of\n meta-events, such as sequence number, lyric, cue point, and set tempo. There\n are also meta-events for such information as lyrics, copyrights, tempo\n indications, time and key signatures, markers, etc. For more information, see\n the Standard MIDI Files 1.0 specification, which is part of the Complete MIDI\n 1.0 Detailed Specification published by the MIDI Manufacturer's Association\n (http://www.midi.org).\n \n When data is being transported using MIDI wire protocol, a\n ShortMessage with the status value 0xFF represents a system\n reset message. In MIDI files, this same status value denotes a\n MetaMessage. The types of meta-message are distinguished from each\n other by the first byte that follows the status byte 0xFF. The\n subsequent bytes are data bytes. As with system exclusive messages, there are\n an arbitrary number of data bytes, depending on the type of\n MetaMessage.", "codes": ["public class MetaMessage\nextends MidiMessage"], "fields": [{"field_name": "META", "field_sig": "public static final\u00a0int META", "description": "Status byte for MetaMessage (0xFF, or 255), which is used in MIDI\n files. It has the same value as ShortMessage.SYSTEM_RESET, which\n is used in the real-time \"MIDI wire\" protocol."}], "methods": [{"method_name": "setMessage", "method_sig": "public void setMessage (int type,\n                       byte[] data,\n                       int length)\n                throws InvalidMidiDataException", "description": "Sets the message parameters for a MetaMessage. Since only one\n status byte value, 0xFF, is allowed for meta-messages, it does\n not need to be specified here. Calls to\n getStatus return 0xFF for all\n meta-messages.\n \n The type argument should be a valid value for the byte that\n follows the status byte in the MetaMessage. The data\n argument should contain all the subsequent bytes of the\n MetaMessage. In other words, the byte that specifies the type of\n MetaMessage is not considered a data byte."}, {"method_name": "getType", "method_sig": "public int getType()", "description": "Obtains the type of the MetaMessage."}, {"method_name": "getData", "method_sig": "public byte[] getData()", "description": "Obtains a copy of the data for the meta message. The returned array of\n bytes does not include the status byte or the message length data. The\n length of the data for the meta message is the length of the array. Note\n that the length of the entire message includes the status byte and the\n meta message type byte, and therefore may be longer than the returned\n array."}, {"method_name": "clone", "method_sig": "public Object clone()", "description": "Creates a new object of the same class and with the same contents as this\n object."}]}