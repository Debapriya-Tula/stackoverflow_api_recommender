{"name": "Class SampleModel", "module": "java.desktop", "package": "java.awt.image", "text": "This abstract class defines an interface for extracting samples of pixels\n  in an image.  All image data is expressed as a collection of pixels.\n  Each pixel consists of a number of samples. A sample is a datum\n  for one band of an image and a band consists of all samples of a\n  particular type in an image.  For example, a pixel might contain\n  three samples representing its red, green and blue components.\n  There are three bands in the image containing this pixel.  One band\n  consists of all the red samples from all pixels in the\n  image.  The second band consists of all the green samples and\n  the remaining band consists of all of the blue samples.  The pixel\n  can be stored in various formats.  For example, all samples from\n  a particular band can be stored contiguously or all samples from a\n  single pixel can be stored contiguously.\n  \n  Subclasses of SampleModel specify the types of samples they can\n  represent (e.g. unsigned 8-bit byte, signed 16-bit short, etc.)\n  and may specify how the samples are organized in memory.\n  In the Java 2D(tm) API, built-in image processing operators may\n  not operate on all possible sample types, but generally will work\n  for unsigned integral samples of 16 bits or less.  Some operators\n  support a wider variety of sample types.\n  \n  A collection of pixels is represented as a Raster, which consists of\n  a DataBuffer and a SampleModel.  The SampleModel allows access to\n  samples in the DataBuffer and may provide low-level information that\n  a programmer can use to directly manipulate samples and pixels in the\n  DataBuffer.\n  \n  This class is generally a fall back method for dealing with\n  images.  More efficient code will cast the SampleModel to the\n  appropriate subclass and extract the information needed to directly\n  manipulate pixels in the DataBuffer.", "codes": ["public abstract class SampleModel\nextends Object"], "fields": [{"field_name": "width", "field_sig": "protected\u00a0int width", "description": "Width in pixels of the region of image data that this SampleModel\n  describes."}, {"field_name": "height", "field_sig": "protected\u00a0int height", "description": "Height in pixels of the region of image data that this SampleModel\n  describes."}, {"field_name": "numBands", "field_sig": "protected\u00a0int numBands", "description": "Number of bands of the image data that this SampleModel describes."}, {"field_name": "dataType", "field_sig": "protected\u00a0int dataType", "description": "Data type of the DataBuffer storing the pixel data."}], "methods": [{"method_name": "getWidth", "method_sig": "public final int getWidth()", "description": "Returns the width in pixels."}, {"method_name": "getHeight", "method_sig": "public final int getHeight()", "description": "Returns the height in pixels."}, {"method_name": "getNumBands", "method_sig": "public final int getNumBands()", "description": "Returns the total number of bands of image data."}, {"method_name": "getNumDataElements", "method_sig": "public abstract int getNumDataElements()", "description": "Returns the number of data elements needed to transfer a pixel\n  via the getDataElements and setDataElements methods.  When pixels\n  are transferred via these methods, they may be transferred in a\n  packed or unpacked format, depending on the implementation of the\n  SampleModel.  Using these methods, pixels are transferred as an\n  array of getNumDataElements() elements of a primitive type given\n  by getTransferType().  The TransferType may or may not be the same\n  as the storage DataType."}, {"method_name": "getDataType", "method_sig": "public final int getDataType()", "description": "Returns the data type of the DataBuffer storing the pixel data."}, {"method_name": "getTransferType", "method_sig": "public int getTransferType()", "description": "Returns the TransferType used to transfer pixels via the\n  getDataElements and setDataElements methods.  When pixels\n  are transferred via these methods, they may be transferred in a\n  packed or unpacked format, depending on the implementation of the\n  SampleModel.  Using these methods, pixels are transferred as an\n  array of getNumDataElements() elements of a primitive type given\n  by getTransferType().  The TransferType may or may not be the same\n  as the storage DataType.  The TransferType will be one of the types\n  defined in DataBuffer."}, {"method_name": "getPixel", "method_sig": "public int[] getPixel (int x,\n                      int y,\n                      int[] iArray,\n                      DataBuffer data)", "description": "Returns the samples for a specified pixel in an int array,\n one sample per array element.\n ArrayIndexOutOfBoundsException may be thrown if the coordinates are\n not in bounds."}, {"method_name": "getDataElements", "method_sig": "public abstract Object getDataElements (int x,\n                                       int y,\n                                       Object obj,\n                                       DataBuffer data)", "description": "Returns data for a single pixel in a primitive array of type\n TransferType.  For image data supported by the Java 2D API, this\n will be one of DataBuffer.TYPE_BYTE, DataBuffer.TYPE_USHORT,\n DataBuffer.TYPE_INT, DataBuffer.TYPE_SHORT, DataBuffer.TYPE_FLOAT,\n or DataBuffer.TYPE_DOUBLE.  Data may be returned in a packed format,\n thus increasing efficiency for data transfers. Generally, obj\n should be passed in as null, so that the Object will be created\n automatically and will be of the right primitive data type.\n \n The following code illustrates transferring data for one pixel from\n DataBuffer db1, whose storage layout is described by\n SampleModel sm1, to DataBuffer db2, whose\n storage layout is described by SampleModel sm2.\n The transfer will generally be more efficient than using\n getPixel/setPixel.\n \n       SampleModel sm1, sm2;\n       DataBuffer db1, db2;\n       sm2.setDataElements(x, y, sm1.getDataElements(x, y, null, db1), db2);\n \n Using getDataElements/setDataElements to transfer between two\n DataBuffer/SampleModel pairs is legitimate if the SampleModels have\n the same number of bands, corresponding bands have the same number of\n bits per sample, and the TransferTypes are the same.\n \n If obj is non-null, it should be a primitive array of type TransferType.\n Otherwise, a ClassCastException is thrown.  An\n ArrayIndexOutOfBoundsException may be thrown if the coordinates are\n not in bounds, or if obj is non-null and is not large enough to hold\n the pixel data."}, {"method_name": "getDataElements", "method_sig": "public Object getDataElements (int x,\n                              int y,\n                              int w,\n                              int h,\n                              Object obj,\n                              DataBuffer data)", "description": "Returns the pixel data for the specified rectangle of pixels in a\n primitive array of type TransferType.\n For image data supported by the Java 2D API, this\n will be one of DataBuffer.TYPE_BYTE, DataBuffer.TYPE_USHORT,\n DataBuffer.TYPE_INT, DataBuffer.TYPE_SHORT, DataBuffer.TYPE_FLOAT,\n or DataBuffer.TYPE_DOUBLE.  Data may be returned in a packed format,\n thus increasing efficiency for data transfers. Generally, obj\n should be passed in as null, so that the Object will be created\n automatically and will be of the right primitive data type.\n \n The following code illustrates transferring data for a rectangular\n region of pixels from\n DataBuffer db1, whose storage layout is described by\n SampleModel sm1, to DataBuffer db2, whose\n storage layout is described by SampleModel sm2.\n The transfer will generally be more efficient than using\n getPixels/setPixels.\n \n       SampleModel sm1, sm2;\n       DataBuffer db1, db2;\n       sm2.setDataElements(x, y, w, h, sm1.getDataElements(x, y, w,\n                           h, null, db1), db2);\n \n Using getDataElements/setDataElements to transfer between two\n DataBuffer/SampleModel pairs is legitimate if the SampleModels have\n the same number of bands, corresponding bands have the same number of\n bits per sample, and the TransferTypes are the same.\n \n If obj is non-null, it should be a primitive array of type TransferType.\n Otherwise, a ClassCastException is thrown.  An\n ArrayIndexOutOfBoundsException may be thrown if the coordinates are\n not in bounds, or if obj is non-null and is not large enough to hold\n the pixel data."}, {"method_name": "setDataElements", "method_sig": "public abstract void setDataElements (int x,\n                                     int y,\n                                     Object obj,\n                                     DataBuffer data)", "description": "Sets the data for a single pixel in the specified DataBuffer from a\n primitive array of type TransferType.  For image data supported by\n the Java 2D API, this will be one of DataBuffer.TYPE_BYTE,\n DataBuffer.TYPE_USHORT, DataBuffer.TYPE_INT, DataBuffer.TYPE_SHORT,\n DataBuffer.TYPE_FLOAT, or DataBuffer.TYPE_DOUBLE.  Data in the array\n may be in a packed format, thus increasing efficiency for data\n transfers.\n \n The following code illustrates transferring data for one pixel from\n DataBuffer db1, whose storage layout is described by\n SampleModel sm1, to DataBuffer db2, whose\n storage layout is described by SampleModel sm2.\n The transfer will generally be more efficient than using\n getPixel/setPixel.\n \n       SampleModel sm1, sm2;\n       DataBuffer db1, db2;\n       sm2.setDataElements(x, y, sm1.getDataElements(x, y, null, db1),\n                           db2);\n \n Using getDataElements/setDataElements to transfer between two\n DataBuffer/SampleModel pairs is legitimate if the SampleModels have\n the same number of bands, corresponding bands have the same number of\n bits per sample, and the TransferTypes are the same.\n \n obj must be a primitive array of type TransferType.  Otherwise,\n a ClassCastException is thrown.  An\n ArrayIndexOutOfBoundsException may be thrown if the coordinates are\n not in bounds, or if obj is not large enough to hold the pixel data."}, {"method_name": "setDataElements", "method_sig": "public void setDataElements (int x,\n                            int y,\n                            int w,\n                            int h,\n                            Object obj,\n                            DataBuffer data)", "description": "Sets the data for a rectangle of pixels in the specified DataBuffer\n from a primitive array of type TransferType.  For image data supported\n by the Java 2D API, this will be one of DataBuffer.TYPE_BYTE,\n DataBuffer.TYPE_USHORT, DataBuffer.TYPE_INT, DataBuffer.TYPE_SHORT,\n DataBuffer.TYPE_FLOAT, or DataBuffer.TYPE_DOUBLE.  Data in the array\n may be in a packed format, thus increasing efficiency for data\n transfers.\n \n The following code illustrates transferring data for a rectangular\n region of pixels from\n DataBuffer db1, whose storage layout is described by\n SampleModel sm1, to DataBuffer db2, whose\n storage layout is described by SampleModel sm2.\n The transfer will generally be more efficient than using\n getPixels/setPixels.\n \n       SampleModel sm1, sm2;\n       DataBuffer db1, db2;\n       sm2.setDataElements(x, y, w, h, sm1.getDataElements(x, y, w, h,\n                           null, db1), db2);\n \n Using getDataElements/setDataElements to transfer between two\n DataBuffer/SampleModel pairs is legitimate if the SampleModels have\n the same number of bands, corresponding bands have the same number of\n bits per sample, and the TransferTypes are the same.\n \n obj must be a primitive array of type TransferType.  Otherwise,\n a ClassCastException is thrown.  An\n ArrayIndexOutOfBoundsException may be thrown if the coordinates are\n not in bounds, or if obj is not large enough to hold the pixel data."}, {"method_name": "getPixel", "method_sig": "public float[] getPixel (int x,\n                        int y,\n                        float[] fArray,\n                        DataBuffer data)", "description": "Returns the samples for the specified pixel in an array of float.\n ArrayIndexOutOfBoundsException may be thrown if the coordinates are\n not in bounds."}, {"method_name": "getPixel", "method_sig": "public double[] getPixel (int x,\n                         int y,\n                         double[] dArray,\n                         DataBuffer data)", "description": "Returns the samples for the specified pixel in an array of double.\n ArrayIndexOutOfBoundsException may be thrown if the coordinates are\n not in bounds."}, {"method_name": "getPixels", "method_sig": "public int[] getPixels (int x,\n                       int y,\n                       int w,\n                       int h,\n                       int[] iArray,\n                       DataBuffer data)", "description": "Returns all samples for a rectangle of pixels in an\n int array, one sample per array element.\n ArrayIndexOutOfBoundsException may be thrown if the coordinates are\n not in bounds."}, {"method_name": "getPixels", "method_sig": "public float[] getPixels (int x,\n                         int y,\n                         int w,\n                         int h,\n                         float[] fArray,\n                         DataBuffer data)", "description": "Returns all samples for a rectangle of pixels in a float\n array, one sample per array element.\n ArrayIndexOutOfBoundsException may be thrown if the coordinates are\n not in bounds."}, {"method_name": "getPixels", "method_sig": "public double[] getPixels (int x,\n                          int y,\n                          int w,\n                          int h,\n                          double[] dArray,\n                          DataBuffer data)", "description": "Returns all samples for a rectangle of pixels in a double\n array, one sample per array element.\n ArrayIndexOutOfBoundsException may be thrown if the coordinates are\n not in bounds."}, {"method_name": "getSample", "method_sig": "public abstract int getSample (int x,\n                              int y,\n                              int b,\n                              DataBuffer data)", "description": "Returns the sample in a specified band for the pixel located\n at (x,y) as an int.\n ArrayIndexOutOfBoundsException may be thrown if the coordinates are\n not in bounds."}, {"method_name": "getSampleFloat", "method_sig": "public float getSampleFloat (int x,\n                            int y,\n                            int b,\n                            DataBuffer data)", "description": "Returns the sample in a specified band\n for the pixel located at (x,y) as a float.\n ArrayIndexOutOfBoundsException may be thrown if the coordinates are\n not in bounds."}, {"method_name": "getSampleDouble", "method_sig": "public double getSampleDouble (int x,\n                              int y,\n                              int b,\n                              DataBuffer data)", "description": "Returns the sample in a specified band\n for a pixel located at (x,y) as a double.\n ArrayIndexOutOfBoundsException may be thrown if the coordinates are\n not in bounds."}, {"method_name": "getSamples", "method_sig": "public int[] getSamples (int x,\n                        int y,\n                        int w,\n                        int h,\n                        int b,\n                        int[] iArray,\n                        DataBuffer data)", "description": "Returns the samples for a specified band for the specified rectangle\n of pixels in an int array, one sample per array element.\n ArrayIndexOutOfBoundsException may be thrown if the coordinates are\n not in bounds."}, {"method_name": "getSamples", "method_sig": "public float[] getSamples (int x,\n                          int y,\n                          int w,\n                          int h,\n                          int b,\n                          float[] fArray,\n                          DataBuffer data)", "description": "Returns the samples for a specified band for the specified rectangle\n of pixels in a float array, one sample per array element.\n ArrayIndexOutOfBoundsException may be thrown if the coordinates are\n not in bounds."}, {"method_name": "getSamples", "method_sig": "public double[] getSamples (int x,\n                           int y,\n                           int w,\n                           int h,\n                           int b,\n                           double[] dArray,\n                           DataBuffer data)", "description": "Returns the samples for a specified band for a specified rectangle\n of pixels in a double array, one sample per array element.\n ArrayIndexOutOfBoundsException may be thrown if the coordinates are\n not in bounds."}, {"method_name": "setPixel", "method_sig": "public void setPixel (int x,\n                     int y,\n                     int[] iArray,\n                     DataBuffer data)", "description": "Sets a pixel in  the DataBuffer using an int array of samples for input.\n ArrayIndexOutOfBoundsException may be thrown if the coordinates are\n not in bounds."}, {"method_name": "setPixel", "method_sig": "public void setPixel (int x,\n                     int y,\n                     float[] fArray,\n                     DataBuffer data)", "description": "Sets a pixel in the DataBuffer using a float array of samples for input.\n ArrayIndexOutOfBoundsException may be thrown if the coordinates are\n not in bounds."}, {"method_name": "setPixel", "method_sig": "public void setPixel (int x,\n                     int y,\n                     double[] dArray,\n                     DataBuffer data)", "description": "Sets a pixel in the DataBuffer using a double array of samples\n for input."}, {"method_name": "setPixels", "method_sig": "public void setPixels (int x,\n                      int y,\n                      int w,\n                      int h,\n                      int[] iArray,\n                      DataBuffer data)", "description": "Sets all samples for a rectangle of pixels from an int array containing\n one sample per array element.\n ArrayIndexOutOfBoundsException may be thrown if the coordinates are\n not in bounds."}, {"method_name": "setPixels", "method_sig": "public void setPixels (int x,\n                      int y,\n                      int w,\n                      int h,\n                      float[] fArray,\n                      DataBuffer data)", "description": "Sets all samples for a rectangle of pixels from a float array containing\n one sample per array element.\n ArrayIndexOutOfBoundsException may be thrown if the coordinates are\n not in bounds."}, {"method_name": "setPixels", "method_sig": "public void setPixels (int x,\n                      int y,\n                      int w,\n                      int h,\n                      double[] dArray,\n                      DataBuffer data)", "description": "Sets all samples for a rectangle of pixels from a double array\n containing one sample per array element.\n ArrayIndexOutOfBoundsException may be thrown if the coordinates are\n not in bounds."}, {"method_name": "setSample", "method_sig": "public abstract void setSample (int x,\n                               int y,\n                               int b,\n                               int s,\n                               DataBuffer data)", "description": "Sets a sample in the specified band for the pixel located at (x,y)\n in the DataBuffer using an int for input.\n ArrayIndexOutOfBoundsException may be thrown if the coordinates are\n not in bounds."}, {"method_name": "setSample", "method_sig": "public void setSample (int x,\n                      int y,\n                      int b,\n                      float s,\n                      DataBuffer data)", "description": "Sets a sample in the specified band for the pixel located at (x,y)\n in the DataBuffer using a float for input.\n The default implementation of this method casts the input\n float sample to an int and then calls the\n setSample(int, int, int, DataBuffer) method using\n that int value.\n ArrayIndexOutOfBoundsException may be thrown if the coordinates are\n not in bounds."}, {"method_name": "setSample", "method_sig": "public void setSample (int x,\n                      int y,\n                      int b,\n                      double s,\n                      DataBuffer data)", "description": "Sets a sample in the specified band for the pixel located at (x,y)\n in the DataBuffer using a double for input.\n The default implementation of this method casts the input\n double sample to an int and then calls the\n setSample(int, int, int, DataBuffer) method using\n that int value.\n ArrayIndexOutOfBoundsException may be thrown if the coordinates are\n not in bounds."}, {"method_name": "setSamples", "method_sig": "public void setSamples (int x,\n                       int y,\n                       int w,\n                       int h,\n                       int b,\n                       int[] iArray,\n                       DataBuffer data)", "description": "Sets the samples in the specified band for the specified rectangle\n of pixels from an int array containing one sample per array element.\n ArrayIndexOutOfBoundsException may be thrown if the coordinates are\n not in bounds."}, {"method_name": "setSamples", "method_sig": "public void setSamples (int x,\n                       int y,\n                       int w,\n                       int h,\n                       int b,\n                       float[] fArray,\n                       DataBuffer data)", "description": "Sets the samples in the specified band for the specified rectangle\n of pixels from a float array containing one sample per array element.\n ArrayIndexOutOfBoundsException may be thrown if the coordinates are\n not in bounds."}, {"method_name": "setSamples", "method_sig": "public void setSamples (int x,\n                       int y,\n                       int w,\n                       int h,\n                       int b,\n                       double[] dArray,\n                       DataBuffer data)", "description": "Sets the samples in the specified band for the specified rectangle\n of pixels from a double array containing one sample per array element.\n ArrayIndexOutOfBoundsException may be thrown if the coordinates are\n not in bounds."}, {"method_name": "createCompatibleSampleModel", "method_sig": "public abstract SampleModel createCompatibleSampleModel (int w,\n                                                        int h)", "description": "Creates a SampleModel which describes data in this SampleModel's\n  format, but with a different width and height."}, {"method_name": "createSubsetSampleModel", "method_sig": "public abstract SampleModel createSubsetSampleModel (int[] bands)", "description": "Creates a new SampleModel\n with a subset of the bands of this\n SampleModel."}, {"method_name": "createDataBuffer", "method_sig": "public abstract DataBuffer createDataBuffer()", "description": "Creates a DataBuffer that corresponds to this SampleModel.\n The DataBuffer's width and height will match this SampleModel's."}, {"method_name": "getSampleSize", "method_sig": "public abstract int[] getSampleSize()", "description": "Returns the size in bits of samples for all bands."}, {"method_name": "getSampleSize", "method_sig": "public abstract int getSampleSize (int band)", "description": "Returns the size in bits of samples for the specified band."}]}