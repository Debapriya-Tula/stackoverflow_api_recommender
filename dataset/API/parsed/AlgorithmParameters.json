{"name": "Class AlgorithmParameters", "module": "java.base", "package": "java.security", "text": "This class is used as an opaque representation of cryptographic parameters.\n\n An AlgorithmParameters object for managing the parameters\n for a particular algorithm can be obtained by\n calling one of the getInstance factory methods\n (static methods that return instances of a given class).\n\n Once an AlgorithmParameters object is obtained, it must be\n initialized via a call to init, using an appropriate parameter\n specification or parameter encoding.\n\n A transparent parameter specification is obtained from an\n AlgorithmParameters object via a call to\n getParameterSpec, and a byte encoding of the parameters is\n obtained via a call to getEncoded.\n\n  Every implementation of the Java platform is required to support the\n following standard AlgorithmParameters algorithms:\n \nAES\nDES\nDESede\nDiffieHellman\nDSA\n\n These algorithms are described in the \n AlgorithmParameters section of the\n Java Security Standard Algorithm Names Specification.\n Consult the release documentation for your implementation to see if any\n other algorithms are supported.", "codes": ["public class AlgorithmParameters\nextends Object"], "fields": [], "methods": [{"method_name": "getAlgorithm", "method_sig": "public final String getAlgorithm()", "description": "Returns the name of the algorithm associated with this parameter object."}, {"method_name": "getInstance", "method_sig": "public static AlgorithmParameters getInstance (String algorithm)\n                                       throws NoSuchAlgorithmException", "description": "Returns a parameter object for the specified algorithm.\n\n  This method traverses the list of registered security Providers,\n starting with the most preferred Provider.\n A new AlgorithmParameters object encapsulating the\n AlgorithmParametersSpi implementation from the first\n Provider that supports the specified algorithm is returned.\n\n  Note that the list of registered providers may be retrieved via\n the Security.getProviders() method.\n\n  The returned parameter object must be initialized via a call to\n init, using an appropriate parameter specification or\n parameter encoding."}, {"method_name": "getInstance", "method_sig": "public static AlgorithmParameters getInstance (String algorithm,\n                                              String provider)\n                                       throws NoSuchAlgorithmException,\n                                              NoSuchProviderException", "description": "Returns a parameter object for the specified algorithm.\n\n  A new AlgorithmParameters object encapsulating the\n AlgorithmParametersSpi implementation from the specified provider\n is returned.  The specified provider must be registered\n in the security provider list.\n\n  Note that the list of registered providers may be retrieved via\n the Security.getProviders() method.\n\n The returned parameter object must be initialized via a call to\n init, using an appropriate parameter specification or\n parameter encoding."}, {"method_name": "getInstance", "method_sig": "public static AlgorithmParameters getInstance (String algorithm,\n                                              Provider provider)\n                                       throws NoSuchAlgorithmException", "description": "Returns a parameter object for the specified algorithm.\n\n  A new AlgorithmParameters object encapsulating the\n AlgorithmParametersSpi implementation from the specified Provider\n object is returned.  Note that the specified Provider object\n does not have to be registered in the provider list.\n\n The returned parameter object must be initialized via a call to\n init, using an appropriate parameter specification or\n parameter encoding."}, {"method_name": "getProvider", "method_sig": "public final Provider getProvider()", "description": "Returns the provider of this parameter object."}, {"method_name": "init", "method_sig": "public final void init (AlgorithmParameterSpec paramSpec)\n                throws InvalidParameterSpecException", "description": "Initializes this parameter object using the parameters\n specified in paramSpec."}, {"method_name": "init", "method_sig": "public final void init (byte[] params)\n                throws IOException", "description": "Imports the specified parameters and decodes them according to the\n primary decoding format for parameters. The primary decoding\n format for parameters is ASN.1, if an ASN.1 specification for this type\n of parameters exists."}, {"method_name": "init", "method_sig": "public final void init (byte[] params,\n                       String format)\n                throws IOException", "description": "Imports the parameters from params and decodes them\n according to the specified decoding scheme.\n If format is null, the\n primary decoding format for parameters is used. The primary decoding\n format is ASN.1, if an ASN.1 specification for these parameters\n exists."}, {"method_name": "getParameterSpec", "method_sig": "public final <T extends AlgorithmParameterSpec> T getParameterSpec (Class<T> paramSpec)\n                                                            throws InvalidParameterSpecException", "description": "Returns a (transparent) specification of this parameter object.\n paramSpec identifies the specification class in which\n the parameters should be returned. It could, for example, be\n DSAParameterSpec.class, to indicate that the\n parameters should be returned in an instance of the\n DSAParameterSpec class."}, {"method_name": "getEncoded", "method_sig": "public final byte[] getEncoded()\n                        throws IOException", "description": "Returns the parameters in their primary encoding format.\n The primary encoding format for parameters is ASN.1, if an ASN.1\n specification for this type of parameters exists."}, {"method_name": "getEncoded", "method_sig": "public final byte[] getEncoded (String format)\n                        throws IOException", "description": "Returns the parameters encoded in the specified scheme.\n If format is null, the\n primary encoding format for parameters is used. The primary encoding\n format is ASN.1, if an ASN.1 specification for these parameters\n exists."}, {"method_name": "toString", "method_sig": "public final String toString()", "description": "Returns a formatted string describing the parameters."}]}