{"name": "Annotation Type DescriptorKey", "module": "java.management", "package": "javax.management", "text": "Meta-annotation that describes how an annotation element relates\n to a field in a Descriptor.  This can be the Descriptor for\n an MBean, or for an attribute, operation, or constructor in an\n MBean, or for a parameter of an operation or constructor.\nConsider this annotation for example:\n\n @Documented\n @Target(ElementType.METHOD)\n @Retention(RetentionPolicy.RUNTIME)\n public @interface Units {\n     @DescriptorKey(\"units\")\n     String value();\n }\n \nand this use of the annotation:\n\n public interface CacheControlMBean {\n     @Units(\"bytes\")\n     public long getCacheSize();\n }\n \nWhen a Standard MBean is made from the CacheControlMBean,\n the usual rules mean that it will have an attribute called\n CacheSize of type long.  The @Units\n annotation, given the above definition, will ensure that the\n MBeanAttributeInfo for this attribute will have a\n Descriptor that has a field called units with\n corresponding value bytes.\nSimilarly, if the annotation looks like this:\n\n @Documented\n @Target(ElementType.METHOD)\n @Retention(RetentionPolicy.RUNTIME)\n public @interface Units {\n     @DescriptorKey(\"units\")\n     String value();\n\n     @DescriptorKey(\"descriptionResourceKey\")\n     String resourceKey() default \"\";\n\n     @DescriptorKey(\"descriptionResourceBundleBaseName\")\n     String resourceBundleBaseName() default \"\";\n }\n \nand it is used like this:\n\n public interface CacheControlMBean {\n     @Units(\"bytes\",\n            resourceKey=\"bytes.key\",\n            resourceBundleBaseName=\"com.example.foo.MBeanResources\")\n     public long getCacheSize();\n }\n \nthen the resulting Descriptor will contain the following\n fields:\n\nDescriptor Fields\n\nNameValue\n\n\nunits\"bytes\"\ndescriptionResourceKey\"bytes.key\"\ndescriptionResourceBundleBaseName\n\"com.example.foo.MBeanResources\"\n\n\nAn annotation such as @Units can be applied to:\n\na Standard MBean or MXBean interface;\n a method in such an interface;\n a parameter of a method in a Standard MBean or MXBean interface\n when that method is an operation (not a getter or setter for an attribute);\n a public constructor in the class that implements a Standard MBean\n or MXBean;\n a parameter in such a constructor.\n \nOther uses of the annotation are ignored.\nInterface annotations are checked only on the exact interface\n that defines the management interface of a Standard MBean or an\n MXBean, not on its parent interfaces.  Method annotations are\n checked only in the most specific interface in which the method\n appears; in other words, if a child interface overrides a method\n from a parent interface, only @DescriptorKey annotations in\n the method in the child interface are considered.\n\n The Descriptor fields contributed in this way by different\n annotations on the same program element must be consistent.  That\n is, two different annotations, or two members of the same\n annotation, must not define a different value for the same\n Descriptor field.  Fields from annotations on a getter method must\n also be consistent with fields from annotations on the\n corresponding setter method.\nThe Descriptor resulting from these annotations will be merged\n with any Descriptor fields provided by the implementation, such as\n the \n immutableInfo field for an MBean.  The fields from the annotations\n must be consistent with these fields provided by the implementation.\nAn annotation element to be converted into a descriptor field\n can be of any type allowed by the Java language, except an annotation\n or an array of annotations.  The value of the field is derived from\n the value of the annotation element as follows:\n\nDescriptor Field Types\n\nAnnotation elementDescriptor field\n\n\nPrimitive value (5, false, etc)\nWrapped value (Integer.valueOf(5),\n         Boolean.FALSE, etc)\nClass constant (e.g. Thread.class)\nClass name from Class.getName()\n         (e.g. \"java.lang.Thread\")\nEnum constant (e.g. ElementType.FIELD)\nConstant name from Enum.name()\n         (e.g. \"FIELD\")\nArray of class constants or enum constants\nString array derived by applying these rules to each\n         element\nValue of any other type\n         (String, String[], int[], etc)\nThe same value\n\n", "codes": ["@Documented\n@Retention(RUNTIME)\n@Target(METHOD)\npublic @interface DescriptorKey"], "fields": [], "methods": []}