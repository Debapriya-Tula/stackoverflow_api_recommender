{"name": "Interface EntityResolver2", "module": "java.xml", "package": "org.xml.sax.ext", "text": "Extended interface for mapping external entity references to input\n sources, or providing a missing external subset.  The\n XMLReader.setEntityResolver() method\n is used to provide implementations of this interface to parsers.\n When a parser uses the methods in this interface, the\n EntityResolver2.resolveEntity()\n method (in this interface) is used instead of the older (SAX 1.0)\n EntityResolver.resolveEntity() method.\n\n \nThis module, both source code and documentation, is in the\n Public Domain, and comes with NO WARRANTY.\n\nIf a SAX application requires the customized handling which this\n interface defines for external entities, it must ensure that it uses\n an XMLReader with the\n http://xml.org/sax/features/use-entity-resolver2 feature flag\n set to true (which is its default value when the feature is\n recognized).  If that flag is unrecognized, or its value is false,\n or the resolver does not implement this interface, then only the\n EntityResolver method will be used.\n\n That supports three categories of application that modify entity\n resolution.  Old Style applications won't know about this interface;\n they will provide an EntityResolver.\n Transitional Mode provide an EntityResolver2 and automatically\n get the benefit of its methods in any systems (parsers or other tools)\n supporting it, due to polymorphism.\n Both Old Style and Transitional Mode applications will\n work with any SAX2 parser.\n New style applications will fail to run except on SAX2 parsers\n that support this particular feature.\n They will insist that feature flag have a value of \"true\", and the\n EntityResolver2 implementation they provide  might throw an exception\n if the original SAX 1.0 style entity resolution method is invoked.", "codes": ["public interface EntityResolver2\nextends EntityResolver"], "fields": [], "methods": [{"method_name": "getExternalSubset", "method_sig": "InputSource getExternalSubset (String name,\n                              String baseURI)\n                       throws SAXException,\n                              IOException", "description": "Allows applications to provide an external subset for documents\n that don't explicitly define one.  Documents with DOCTYPE declarations\n that omit an external subset can thus augment the declarations\n available for validation, entity processing, and attribute processing\n (normalization, defaulting, and reporting types including ID).\n This augmentation is reported\n through the startDTD() method as if\n the document text had originally included the external subset;\n this callback is made before any internal subset data or errors\n are reported.\n\n This method can also be used with documents that have no DOCTYPE\n declaration.  When the root element is encountered,\n but no DOCTYPE declaration has been seen, this method is\n invoked.  If it returns a value for the external subset, that root\n element is declared to be the root element, giving the effect of\n splicing a DOCTYPE declaration at the end the prolog of a document\n that could not otherwise be valid.  The sequence of parser callbacks\n in that case logically resembles this:\n\n \n ... comments and PIs from the prolog (as usual)\n startDTD (\"rootName\", source.getPublicId (), source.getSystemId ());\n startEntity (\"[dtd]\");\n ... declarations, comments, and PIs from the external subset\n endEntity (\"[dtd]\");\n endDTD ();\n ... then the rest of the document (as usual)\n startElement (..., \"rootName\", ...);\n \nNote that the InputSource gets no further resolution.\n Implementations of this method may wish to invoke\n resolveEntity() to gain benefits such as use\n of local caches of DTD entities.  Also, this method will never be\n used by a (non-validating) processor that is not including external\n parameter entities.\n\n Uses for this method include facilitating data validation when\n interoperating with XML processors that would always require\n undesirable network accesses for external entities, or which for\n other reasons adopt a \"no DTDs\" policy.\n Non-validation motives include forcing documents to include DTDs so\n that attributes are handled consistently.\n For example, an XPath processor needs to know which attibutes have\n type \"ID\" before it can process a widely used type of reference.\n\n Warning: Returning an external subset modifies\n the input document.  By providing definitions for general entities,\n it can make a malformed document appear to be well formed."}, {"method_name": "resolveEntity", "method_sig": "InputSource resolveEntity (String name,\n                          String publicId,\n                          String baseURI,\n                          String systemId)\n                   throws SAXException,\n                          IOException", "description": "Allows applications to map references to external entities into input\n sources, or tell the parser it should use conventional URI resolution.\n This method is only called for external entities which have been\n properly declared.\n This method provides more flexibility than the EntityResolver\n interface, supporting implementations of more complex catalogue\n schemes such as the one defined by the OASIS XML Catalogs specification.\n\n Parsers configured to use this resolver method will call it\n to determine the input source to use for any external entity\n being included because of a reference in the XML text.\n That excludes the document entity, and any external entity returned\n by getExternalSubset().\n When a (non-validating) processor is configured not to include\n a class of entities (parameter or general) through use of feature\n flags, this method is not invoked for such entities.\n\n Note that the entity naming scheme used here is the same one\n used in the LexicalHandler, or in the ContentHandler.skippedEntity()\n method."}]}