{"name": "Interface DirObjectFactory", "module": "java.naming", "package": "javax.naming.spi", "text": "This interface represents a factory for creating an object given\n an object and attributes about the object.\n\n The JNDI framework allows for object implementations to\n be loaded in dynamically via object factories. See\n ObjectFactory for details.\n \n A DirObjectFactory extends ObjectFactory by allowing\n an Attributes instance\n to be supplied to the getObjectInstance() method.\n DirObjectFactory implementations are intended to be used by DirContext\n service providers. The service provider, in addition reading an\n object from the directory, might already have attributes that\n are useful for the object factory to check to see whether the\n factory is supposed to process the object. For instance, an LDAP-style\n service provider might have read the \"objectclass\" of the object.\n A CORBA object factory might be interested only in LDAP entries\n with \"objectclass=corbaObject\". By using the attributes supplied by\n the LDAP service provider, the CORBA object factory can quickly\n eliminate objects that it need not worry about, and non-CORBA object\n factories can quickly eliminate CORBA-related LDAP entries.", "codes": ["public interface DirObjectFactory\nextends ObjectFactory"], "fields": [], "methods": [{"method_name": "getObjectInstance", "method_sig": "Object getObjectInstance (Object obj,\n                         Name name,\n                         Context nameCtx,\n                         Hashtable<?, ?> environment,\n                         Attributes attrs)\n                  throws Exception", "description": "Creates an object using the location or reference information, and attributes\n specified.\n \n Special requirements of this object are supplied\n using environment.\n An example of such an environment property is user identity\n information.\n\nDirectoryManager.getObjectInstance()\n successively loads in object factories. If it encounters a DirObjectFactory,\n it will invoke DirObjectFactory.getObjectInstance();\n otherwise, it invokes\n ObjectFactory.getObjectInstance(). It does this until a factory\n produces a non-null answer.\n  When an exception\n is thrown by an object factory, the exception is passed on to the caller\n of DirectoryManager.getObjectInstance(). The search for other factories\n that may produce a non-null answer is halted.\n An object factory should only throw an exception if it is sure that\n it is the only intended factory and that no other object factories\n should be tried.\n If this factory cannot create an object using the arguments supplied,\n it should return null.\nSince DirObjectFactory extends ObjectFactory, it\n effectively\n has two getObjectInstance() methods, where one differs from the other by\n the attributes argument. Given a factory that implements DirObjectFactory,\n DirectoryManager.getObjectInstance() will only\n use the method that accepts the attributes argument, while\n NamingManager.getObjectInstance() will only use the one that does not accept\n the attributes argument.\n\n See ObjectFactory for a description URL context factories and other\n properties of object factories that apply equally to DirObjectFactory.\n\n The name, attrs, and environment parameters\n are owned by the caller.\n The implementation will not modify these objects or keep references\n to them, although it may keep references to clones or copies."}]}