{"name": "Interface BiConsumer<T,\u200bU>", "module": "java.base", "package": "java.util.function", "text": "Represents an operation that accepts two input arguments and returns no\n result.  This is the two-arity specialization of Consumer.\n Unlike most other functional interfaces, BiConsumer is expected\n to operate via side-effects.\n\n This is a functional interface\n whose functional method is accept(Object, Object).", "codes": ["@FunctionalInterface\npublic interface BiConsumer<T, U>"], "fields": [], "methods": [{"method_name": "accept", "method_sig": "void accept (T t,\n            U u)", "description": "Performs this operation on the given arguments."}, {"method_name": "andThen", "method_sig": "default BiConsumer<T, U> andThen (BiConsumer<? super T, ? super U> after)", "description": "Returns a composed BiConsumer that performs, in sequence, this\n operation followed by the after operation. If performing either\n operation throws an exception, it is relayed to the caller of the\n composed operation.  If performing this operation throws an exception,\n the after operation will not be performed."}]}