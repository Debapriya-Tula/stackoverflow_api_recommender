{"name": "Class FilteredImageSource", "module": "java.desktop", "package": "java.awt.image", "text": "This class is an implementation of the ImageProducer interface which\n takes an existing image and a filter object and uses them to produce\n image data for a new filtered version of the original image. Furthermore,\n FilteredImageSource is safe for use by multiple threads.\n Here is an example which filters an image by swapping the red and\n blue components:\n \n\n      Image src = getImage(\"doc:///demo/images/duke/T1.gif\");\n      ImageFilter colorfilter = new RedBlueSwapFilter();\n      Image img = createImage(new FilteredImageSource(src.getSource(),\n                                                      colorfilter));\n\n ", "codes": ["public class FilteredImageSource\nextends Object\nimplements ImageProducer"], "fields": [], "methods": [{"method_name": "addConsumer", "method_sig": "public void addConsumer (ImageConsumer ic)", "description": "Adds the specified ImageConsumer\n to the list of consumers interested in data for the filtered image.\n An instance of the original ImageFilter\n is created\n (using the filter's getFilterInstance method)\n to manipulate the image data\n for the specified ImageConsumer.\n The newly created filter instance\n is then passed to the addConsumer method\n of the original ImageProducer.\n\n \n This method is public as a side effect\n of this class implementing\n the ImageProducer interface.\n It should not be called from user code,\n and its behavior if called from user code is unspecified."}, {"method_name": "isConsumer", "method_sig": "public boolean isConsumer (ImageConsumer ic)", "description": "Determines whether an ImageConsumer is on the list of consumers\n currently interested in data for this image.\n\n \n This method is public as a side effect\n of this class implementing\n the ImageProducer interface.\n It should not be called from user code,\n and its behavior if called from user code is unspecified."}, {"method_name": "removeConsumer", "method_sig": "public void removeConsumer (ImageConsumer ic)", "description": "Removes an ImageConsumer from the list of consumers interested in\n data for this image.\n\n \n This method is public as a side effect\n of this class implementing\n the ImageProducer interface.\n It should not be called from user code,\n and its behavior if called from user code is unspecified."}, {"method_name": "startProduction", "method_sig": "public void startProduction (ImageConsumer ic)", "description": "Starts production of the filtered image.\n If the specified ImageConsumer\n isn't already a consumer of the filtered image,\n an instance of the original ImageFilter\n is created\n (using the filter's getFilterInstance method)\n to manipulate the image data\n for the ImageConsumer.\n The filter instance for the ImageConsumer\n is then passed to the startProduction method\n of the original ImageProducer.\n\n \n This method is public as a side effect\n of this class implementing\n the ImageProducer interface.\n It should not be called from user code,\n and its behavior if called from user code is unspecified."}, {"method_name": "requestTopDownLeftRightResend", "method_sig": "public void requestTopDownLeftRightResend (ImageConsumer ic)", "description": "Requests that a given ImageConsumer have the image data delivered\n one more time in top-down, left-right order.  The request is\n handed to the ImageFilter for further processing, since the\n ability to preserve the pixel ordering depends on the filter.\n\n \n This method is public as a side effect\n of this class implementing\n the ImageProducer interface.\n It should not be called from user code,\n and its behavior if called from user code is unspecified."}]}