{"name": "Class RelationSupport", "module": "java.management", "package": "javax.management.relation", "text": "A RelationSupport object is used internally by the Relation Service to\n represent simple relations (only roles, no properties or methods), with an\n unlimited number of roles, of any relation type. As internal representation,\n it is not exposed to the user.\n RelationSupport class conforms to the design patterns of standard MBean. So\n the user can decide to instantiate a RelationSupport object himself as\n a MBean (as it follows the MBean design patterns), to register it in the\n MBean Server, and then to add it in the Relation Service.\n The user can also, when creating his own MBean relation class, have it\n extending RelationSupport, to retrieve the implementations of required\n interfaces (see below).\n It is also possible to have in a user relation MBean class a member\n being a RelationSupport object, and to implement the required interfaces by\n delegating all to this member.\n  RelationSupport implements the Relation interface (to be handled by the\n Relation Service).\n It implements also the MBeanRegistration interface to be able to retrieve\n the MBean Server where it is registered (if registered as a MBean) to access\n to its Relation Service.", "codes": ["public class RelationSupport\nextends Object\nimplements RelationSupportMBean, MBeanRegistration"], "fields": [], "methods": [{"method_name": "getRole", "method_sig": "public List<ObjectName> getRole (String roleName)\n                         throws IllegalArgumentException,\n                                RoleNotFoundException,\n                                RelationServiceNotRegisteredException", "description": "Retrieves role value for given role name.\n Checks if the role exists and is readable according to the relation\n type."}, {"method_name": "getRoles", "method_sig": "public RoleResult getRoles (String[] roleNameArray)\n                    throws IllegalArgumentException,\n                           RelationServiceNotRegisteredException", "description": "Retrieves values of roles with given names.\n Checks for each role if it exists and is readable according to the\n relation type."}, {"method_name": "getAllRoles", "method_sig": "public RoleResult getAllRoles()\n                       throws RelationServiceNotRegisteredException", "description": "Returns all roles present in the relation."}, {"method_name": "retrieveAllRoles", "method_sig": "public RoleList retrieveAllRoles()", "description": "Returns all roles in the relation without checking read mode."}, {"method_name": "getRoleCardinality", "method_sig": "public Integer getRoleCardinality (String roleName)\n                           throws IllegalArgumentException,\n                                  RoleNotFoundException", "description": "Returns the number of MBeans currently referenced in the given role."}, {"method_name": "setRole", "method_sig": "public void setRole (Role role)\n             throws IllegalArgumentException,\n                    RoleNotFoundException,\n                    RelationTypeNotFoundException,\n                    InvalidRoleValueException,\n                    RelationServiceNotRegisteredException,\n                    RelationNotFoundException", "description": "Sets the given role.\n Will check the role according to its corresponding role definition\n provided in relation's relation type\n Will send a notification (RelationNotification with type\n RELATION_BASIC_UPDATE or RELATION_MBEAN_UPDATE, depending if the\n relation is a MBean or not)."}, {"method_name": "setRoles", "method_sig": "public RoleResult setRoles (RoleList list)\n                    throws IllegalArgumentException,\n                           RelationServiceNotRegisteredException,\n                           RelationTypeNotFoundException,\n                           RelationNotFoundException", "description": "Sets the given roles.\n Will check the role according to its corresponding role definition\n provided in relation's relation type\n Will send one notification (RelationNotification with type\n RELATION_BASIC_UPDATE or RELATION_MBEAN_UPDATE, depending if the\n relation is a MBean or not) per updated role."}, {"method_name": "handleMBeanUnregistration", "method_sig": "public void handleMBeanUnregistration (ObjectName objectName,\n                                      String roleName)\n                               throws IllegalArgumentException,\n                                      RoleNotFoundException,\n                                      InvalidRoleValueException,\n                                      RelationServiceNotRegisteredException,\n                                      RelationTypeNotFoundException,\n                                      RelationNotFoundException", "description": "Callback used by the Relation Service when a MBean referenced in a role\n is unregistered.\n The Relation Service will call this method to let the relation\n take action to reflect the impact of such unregistration.\n BEWARE. the user is not expected to call this method.\n Current implementation is to set the role with its current value\n (list of ObjectNames of referenced MBeans) without the unregistered\n one."}, {"method_name": "getReferencedMBeans", "method_sig": "public Map<ObjectName, List<String>> getReferencedMBeans()", "description": "Retrieves MBeans referenced in the various roles of the relation."}, {"method_name": "getRelationTypeName", "method_sig": "public String getRelationTypeName()", "description": "Returns name of associated relation type."}, {"method_name": "getRelationServiceName", "method_sig": "public ObjectName getRelationServiceName()", "description": "Returns ObjectName of the Relation Service handling the relation."}, {"method_name": "getRelationId", "method_sig": "public String getRelationId()", "description": "Returns relation identifier (used to uniquely identify the relation\n inside the Relation Service)."}, {"method_name": "isInRelationService", "method_sig": "public Boolean isInRelationService()", "description": "Returns an internal flag specifying if the object is still handled by\n the Relation Service."}]}