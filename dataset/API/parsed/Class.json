{"name": "Class Class<T>", "module": "java.base", "package": "java.lang", "text": "Instances of the class Class represent classes and interfaces\n in a running Java application. An enum type is a kind of class and an\n annotation type is a kind of interface. Every array also\n belongs to a class that is reflected as a Class object\n that is shared by all arrays with the same element type and number\n of dimensions.  The primitive Java types (boolean,\n byte, char, short,\n int, long, float, and\n double), and the keyword void are also\n represented as Class objects.\n\n  Class has no public constructor. Instead a Class\n object is constructed automatically by the Java Virtual Machine\n when a class loader invokes one of the\n defineClass methods\n and passes the bytes of a class file.\n\n  The methods of class Class expose many characteristics of a\n class or interface. Most characteristics are derived from the class\n file that the class loader passed to the Java Virtual Machine. A few\n characteristics are determined by the class loading environment at run time,\n such as the module returned by getModule().\n\n  Some methods of class Class expose whether the declaration of\n a class or interface in Java source code was enclosed within\n another declaration. Other methods describe how a class or interface\n is situated in a nest. A nest is a set of\n classes and interfaces, in the same run-time package, that\n allow mutual access to their private members.\n The classes and interfaces are known as nestmates.\n One nestmate acts as the\n nest host, and enumerates the other nestmates which\n belong to the nest; each of them in turn records it as the nest host.\n The classes and interfaces which belong to a nest, including its host, are\n determined when\n class files are generated, for example, a Java compiler\n will typically record a top-level class as the host of a nest where the\n other members are the classes and interfaces whose declarations are\n enclosed within the top-level class declaration.\n\n  The following example uses a Class object to print the\n class name of an object:\n\n \n     void printClassName(Object obj) {\n         System.out.println(\"The class of \" + obj +\n                            \" is \" + obj.getClass().getName());\n     }\n \n It is also possible to get the Class object for a named\n type (or for void) using a class literal.  See Section 15.8.2 of\n The Java\u2122 Language Specification.\n For example:\n\n \nSystem.out.println(\"The name of class Foo is: \"+Foo.class.getName());\n", "codes": ["public final class Class<T>\nextends Object\nimplements Serializable, GenericDeclaration, Type, AnnotatedElement"], "fields": [], "methods": [{"method_name": "toString", "method_sig": "public String toString()", "description": "Converts the object to a string. The string representation is the\n string \"class\" or \"interface\", followed by a space, and then by the\n fully qualified name of the class in the format returned by\n getName.  If this Class object represents a\n primitive type, this method returns the name of the primitive type.  If\n this Class object represents void this method returns\n \"void\". If this Class object represents an array type,\n this method returns \"class \" followed by getName."}, {"method_name": "toGenericString", "method_sig": "public String toGenericString()", "description": "Returns a string describing this Class, including\n information about modifiers and type parameters.\n\n The string is formatted as a list of type modifiers, if any,\n followed by the kind of type (empty string for primitive types\n and class, enum, interface, or\n @interface, as appropriate), followed\n by the type's name, followed by an angle-bracketed\n comma-separated list of the type's type parameters, if any.\n\n A space is used to separate modifiers from one another and to\n separate any modifiers from the kind of type. The modifiers\n occur in canonical order. If there are no type parameters, the\n type parameter list is elided.\n\n For an array type, the string starts with the type name,\n followed by an angle-bracketed comma-separated list of the\n type's type parameters, if any, followed by a sequence of\n [] characters, one set of brackets per dimension of\n the array.\n\n Note that since information about the runtime representation\n of a type is being generated, modifiers not present on the\n originating source code or illegal on the originating source\n code may be present."}, {"method_name": "forName", "method_sig": "public static Class<?> forName (String className)\n                        throws ClassNotFoundException", "description": "Returns the Class object associated with the class or\n interface with the given string name.  Invoking this method is\n equivalent to:\n\n \nClass.forName(className, true, currentLoader)\n\n\n where currentLoader denotes the defining class loader of\n the current class.\n\n  For example, the following code fragment returns the\n runtime Class descriptor for the class named\n java.lang.Thread:\n\n \nClass t = Class.forName(\"java.lang.Thread\")\n\n\n A call to forName(\"X\") causes the class named\n X to be initialized."}, {"method_name": "forName", "method_sig": "public static Class<?> forName (String name,\n                               boolean initialize,\n                               ClassLoader loader)\n                        throws ClassNotFoundException", "description": "Returns the Class object associated with the class or\n interface with the given string name, using the given class loader.\n Given the fully qualified name for a class or interface (in the same\n format returned by getName) this method attempts to\n locate, load, and link the class or interface.  The specified class\n loader is used to load the class or interface.  If the parameter\n loader is null, the class is loaded through the bootstrap\n class loader.  The class is initialized only if the\n initialize parameter is true and if it has\n not been initialized earlier.\n\n  If name denotes a primitive type or void, an attempt\n will be made to locate a user-defined class in the unnamed package whose\n name is name. Therefore, this method cannot be used to\n obtain any of the Class objects representing primitive\n types or void.\n\n  If name denotes an array class, the component type of\n the array class is loaded but not initialized.\n\n  For example, in an instance method the expression:\n\n \nClass.forName(\"Foo\")\n\n\n is equivalent to:\n\n \nClass.forName(\"Foo\", true, this.getClass().getClassLoader())\n\n\n Note that this method throws errors related to loading, linking or\n initializing as specified in Sections 12.2, 12.3 and 12.4 of The\n Java Language Specification.\n Note that this method does not check whether the requested class\n is accessible to its caller."}, {"method_name": "forName", "method_sig": "public static Class<?> forName (Module module,\n                               String name)", "description": "Returns the Class with the given \n binary name in the given module.\n\n  This method attempts to locate, load, and link the class or interface.\n It does not run the class initializer.  If the class is not found, this\n method returns null. \n If the class loader of the given module defines other modules and\n the given name is a class defined in a different module, this method\n returns null after the class is loaded. \n This method does not check whether the requested class is\n accessible to its caller. "}, {"method_name": "newInstance", "method_sig": "@Deprecated(since=\"9\")\npublic T newInstance()\n              throws InstantiationException,\n                     IllegalAccessException", "description": "Creates a new instance of the class represented by this Class\n object.  The class is instantiated as if by a new\n expression with an empty argument list.  The class is initialized if it\n has not already been initialized."}, {"method_name": "isInstance", "method_sig": "public boolean isInstance (Object obj)", "description": "Determines if the specified Object is assignment-compatible\n with the object represented by this Class.  This method is\n the dynamic equivalent of the Java language instanceof\n operator. The method returns true if the specified\n Object argument is non-null and can be cast to the\n reference type represented by this Class object without\n raising a ClassCastException. It returns false\n otherwise.\n\n  Specifically, if this Class object represents a\n declared class, this method returns true if the specified\n Object argument is an instance of the represented class (or\n of any of its subclasses); it returns false otherwise. If\n this Class object represents an array class, this method\n returns true if the specified Object argument\n can be converted to an object of the array class by an identity\n conversion or by a widening reference conversion; it returns\n false otherwise. If this Class object\n represents an interface, this method returns true if the\n class or any superclass of the specified Object argument\n implements this interface; it returns false otherwise. If\n this Class object represents a primitive type, this method\n returns false."}, {"method_name": "isAssignableFrom", "method_sig": "public boolean isAssignableFrom (Class<?> cls)", "description": "Determines if the class or interface represented by this\n Class object is either the same as, or is a superclass or\n superinterface of, the class or interface represented by the specified\n Class parameter. It returns true if so;\n otherwise it returns false. If this Class\n object represents a primitive type, this method returns\n true if the specified Class parameter is\n exactly this Class object; otherwise it returns\n false.\n\n  Specifically, this method tests whether the type represented by the\n specified Class parameter can be converted to the type\n represented by this Class object via an identity conversion\n or via a widening reference conversion. See The Java Language\n Specification, sections 5.1.1 and 5.1.4 , for details."}, {"method_name": "isInterface", "method_sig": "public boolean isInterface()", "description": "Determines if the specified Class object represents an\n interface type."}, {"method_name": "isArray", "method_sig": "public boolean isArray()", "description": "Determines if this Class object represents an array class."}, {"method_name": "isPrimitive", "method_sig": "public boolean isPrimitive()", "description": "Determines if the specified Class object represents a\n primitive type.\n\n  There are nine predefined Class objects to represent\n the eight primitive types and void.  These are created by the Java\n Virtual Machine, and have the same names as the primitive types that\n they represent, namely boolean, byte,\n char, short, int,\n long, float, and double.\n\n  These objects may only be accessed via the following public static\n final variables, and are the only Class objects for which\n this method returns true."}, {"method_name": "isAnnotation", "method_sig": "public boolean isAnnotation()", "description": "Returns true if this Class object represents an annotation\n type.  Note that if this method returns true, isInterface()\n would also return true, as all annotation types are also interfaces."}, {"method_name": "isSynthetic", "method_sig": "public boolean isSynthetic()", "description": "Returns true if this class is a synthetic class;\n returns false otherwise."}, {"method_name": "getName", "method_sig": "public String getName()", "description": "Returns the  name of the entity (class, interface, array class,\n primitive type, or void) represented by this Class object,\n as a String.\n\n  If this class object represents a reference type that is not an\n array type then the binary name of the class is returned, as specified\n by\n The Java\u2122 Language Specification.\n\n  If this class object represents a primitive type or void, then the\n name returned is a String equal to the Java language\n keyword corresponding to the primitive type or void.\n\n  If this class object represents a class of arrays, then the internal\n form of the name consists of the name of the element type preceded by\n one or more '[' characters representing the depth of the array\n nesting.  The encoding of element type names is as follows:\n\n \nElement types and encodings\n\n Element Type  Encoding\n \n\n boolean       Z\n  byte          B\n  char          C\n  class or interface\n                                    Lclassname;\n  double        D\n  float         F\n  int           I\n  long          J\n  short         S\n \n\n The class or interface name classname is the binary name of\n the class specified above.\n\n  Examples:\n \n String.class.getName()\n     returns \"java.lang.String\"\n byte.class.getName()\n     returns \"byte\"\n (new Object[3]).getClass().getName()\n     returns \"[Ljava.lang.Object;\"\n (new int[3][4][5][6][7][8][9]).getClass().getName()\n     returns \"[[[[[[[I\"\n "}, {"method_name": "getClassLoader", "method_sig": "public ClassLoader getClassLoader()", "description": "Returns the class loader for the class.  Some implementations may use\n null to represent the bootstrap class loader. This method will return\n null in such implementations if this class was loaded by the bootstrap\n class loader.\n\n If this object\n represents a primitive type or void, null is returned."}, {"method_name": "getModule", "method_sig": "public Module getModule()", "description": "Returns the module that this class or interface is a member of.\n\n If this class represents an array type then this method returns the\n Module for the element type. If this class represents a\n primitive type or void, then the Module object for the\n java.base module is returned.\n\n If this class is in an unnamed module then the unnamed Module of the class\n loader for this class is returned."}, {"method_name": "getTypeParameters", "method_sig": "public TypeVariable<Class<T>>[] getTypeParameters()", "description": "Returns an array of TypeVariable objects that represent the\n type variables declared by the generic declaration represented by this\n GenericDeclaration object, in declaration order.  Returns an\n array of length 0 if the underlying generic declaration declares no type\n variables."}, {"method_name": "getSuperclass", "method_sig": "public Class<? super T> getSuperclass()", "description": "Returns the Class representing the direct superclass of the\n entity (class, interface, primitive type or void) represented by\n this Class.  If this Class represents either the\n Object class, an interface, a primitive type, or void, then\n null is returned.  If this object represents an array class then the\n Class object representing the Object class is\n returned."}, {"method_name": "getGenericSuperclass", "method_sig": "public Type getGenericSuperclass()", "description": "Returns the Type representing the direct superclass of\n the entity (class, interface, primitive type or void) represented by\n this Class.\n\n If the superclass is a parameterized type, the Type\n object returned must accurately reflect the actual type\n parameters used in the source code. The parameterized type\n representing the superclass is created if it had not been\n created before. See the declaration of ParameterizedType for the\n semantics of the creation process for parameterized types.  If\n this Class represents either the Object\n class, an interface, a primitive type, or void, then null is\n returned.  If this object represents an array class then the\n Class object representing the Object class is\n returned."}, {"method_name": "getPackage", "method_sig": "public Package getPackage()", "description": "Gets the package of this class.\n\n If this class represents an array type, a primitive type or void,\n this method returns null."}, {"method_name": "getPackageName", "method_sig": "public String getPackageName()", "description": "Returns the fully qualified package name.\n\n  If this class is a top level class, then this method returns the fully\n qualified name of the package that the class is a member of, or the\n empty string if the class is in an unnamed package.\n\n  If this class is a member class, then this method is equivalent to\n invoking getPackageName() on the enclosing class.\n\n  If this class is a local class or an anonymous class, then this method is equivalent to\n invoking getPackageName() on the declaring class of the enclosing method or\n enclosing constructor.\n\n  If this class represents an array type then this method returns the\n package name of the element type. If this class represents a primitive\n type or void then the package name \"java.lang\" is returned."}, {"method_name": "getInterfaces", "method_sig": "public Class<?>[] getInterfaces()", "description": "Returns the interfaces directly implemented by the class or interface\n represented by this object.\n\n If this object represents a class, the return value is an array\n containing objects representing all interfaces directly implemented by\n the class.  The order of the interface objects in the array corresponds\n to the order of the interface names in the implements clause of\n the declaration of the class represented by this object.  For example,\n given the declaration:\n \nclass Shimmer implements FloorWax, DessertTopping { ... }\n\n suppose the value of s is an instance of\n Shimmer; the value of the expression:\n \ns.getClass().getInterfaces()[0]\n\n is the Class object that represents interface\n FloorWax; and the value of:\n \ns.getClass().getInterfaces()[1]\n\n is the Class object that represents interface\n DessertTopping.\n\n If this object represents an interface, the array contains objects\n representing all interfaces directly extended by the interface.  The\n order of the interface objects in the array corresponds to the order of\n the interface names in the extends clause of the declaration of\n the interface represented by this object.\n\n If this object represents a class or interface that implements no\n interfaces, the method returns an array of length 0.\n\n If this object represents a primitive type or void, the method\n returns an array of length 0.\n\n If this Class object represents an array type, the\n interfaces Cloneable and java.io.Serializable are\n returned in that order."}, {"method_name": "getGenericInterfaces", "method_sig": "public Type[] getGenericInterfaces()", "description": "Returns the Types representing the interfaces\n directly implemented by the class or interface represented by\n this object.\n\n If a superinterface is a parameterized type, the\n Type object returned for it must accurately reflect\n the actual type parameters used in the source code. The\n parameterized type representing each superinterface is created\n if it had not been created before. See the declaration of\n ParameterizedType\n for the semantics of the creation process for parameterized\n types.\n\n If this object represents a class, the return value is an array\n containing objects representing all interfaces directly implemented by\n the class.  The order of the interface objects in the array corresponds\n to the order of the interface names in the implements clause of\n the declaration of the class represented by this object.\n\n If this object represents an interface, the array contains objects\n representing all interfaces directly extended by the interface.  The\n order of the interface objects in the array corresponds to the order of\n the interface names in the extends clause of the declaration of\n the interface represented by this object.\n\n If this object represents a class or interface that implements no\n interfaces, the method returns an array of length 0.\n\n If this object represents a primitive type or void, the method\n returns an array of length 0.\n\n If this Class object represents an array type, the\n interfaces Cloneable and java.io.Serializable are\n returned in that order."}, {"method_name": "getComponentType", "method_sig": "public Class<?> getComponentType()", "description": "Returns the Class representing the component type of an\n array.  If this class does not represent an array class this method\n returns null."}, {"method_name": "getModifiers", "method_sig": "public int getModifiers()", "description": "Returns the Java language modifiers for this class or interface, encoded\n in an integer. The modifiers consist of the Java Virtual Machine's\n constants for public, protected,\n private, final, static,\n abstract and interface; they should be decoded\n using the methods of class Modifier.\n\n  If the underlying class is an array class, then its\n public, private and protected\n modifiers are the same as those of its component type.  If this\n Class represents a primitive type or void, its\n public modifier is always true, and its\n protected and private modifiers are always\n false. If this object represents an array class, a\n primitive type or void, then its final modifier is always\n true and its interface modifier is always\n false. The values of its other modifiers are not determined\n by this specification.\n\n  The modifier encodings are defined in The Java Virtual Machine\n Specification, table 4.1."}, {"method_name": "getSigners", "method_sig": "public Object[] getSigners()", "description": "Gets the signers of this class."}, {"method_name": "getEnclosingMethod", "method_sig": "public Method getEnclosingMethod()\n                          throws SecurityException", "description": "If this Class object represents a local or anonymous\n class within a method, returns a Method object representing the\n immediately enclosing method of the underlying class. Returns\n null otherwise.\n\n In particular, this method returns null if the underlying\n class is a local or anonymous class immediately enclosed by a type\n declaration, instance initializer or static initializer."}, {"method_name": "getEnclosingConstructor", "method_sig": "public Constructor<?> getEnclosingConstructor()\n                                       throws SecurityException", "description": "If this Class object represents a local or anonymous\n class within a constructor, returns a Constructor object representing\n the immediately enclosing constructor of the underlying\n class. Returns null otherwise.  In particular, this\n method returns null if the underlying class is a local\n or anonymous class immediately enclosed by a type declaration,\n instance initializer or static initializer."}, {"method_name": "getDeclaringClass", "method_sig": "public Class<?> getDeclaringClass()\n                           throws SecurityException", "description": "If the class or interface represented by this Class object\n is a member of another class, returns the Class object\n representing the class in which it was declared.  This method returns\n null if this class or interface is not a member of any other class.  If\n this Class object represents an array class, a primitive\n type, or void,then this method returns null."}, {"method_name": "getEnclosingClass", "method_sig": "public Class<?> getEnclosingClass()\n                           throws SecurityException", "description": "Returns the immediately enclosing class of the underlying\n class.  If the underlying class is a top level class this\n method returns null."}, {"method_name": "getSimpleName", "method_sig": "public String getSimpleName()", "description": "Returns the simple name of the underlying class as given in the\n source code. Returns an empty string if the underlying class is\n anonymous.\n\n The simple name of an array is the simple name of the\n component type with \"[]\" appended.  In particular the simple\n name of an array whose component type is anonymous is \"[]\"."}, {"method_name": "getTypeName", "method_sig": "public String getTypeName()", "description": "Return an informative string for the name of this type."}, {"method_name": "getCanonicalName", "method_sig": "public String getCanonicalName()", "description": "Returns the canonical name of the underlying class as\n defined by the Java Language Specification.  Returns null if\n the underlying class does not have a canonical name (i.e., if\n it is a local or anonymous class or an array whose component\n type does not have a canonical name)."}, {"method_name": "isAnonymousClass", "method_sig": "public boolean isAnonymousClass()", "description": "Returns true if and only if the underlying class\n is an anonymous class."}, {"method_name": "isLocalClass", "method_sig": "public boolean isLocalClass()", "description": "Returns true if and only if the underlying class\n is a local class."}, {"method_name": "isMemberClass", "method_sig": "public boolean isMemberClass()", "description": "Returns true if and only if the underlying class\n is a member class."}, {"method_name": "getClasses", "method_sig": "public Class<?>[] getClasses()", "description": "Returns an array containing Class objects representing all\n the public classes and interfaces that are members of the class\n represented by this Class object.  This includes public\n class and interface members inherited from superclasses and public class\n and interface members declared by the class.  This method returns an\n array of length 0 if this Class object has no public member\n classes or interfaces.  This method also returns an array of length 0 if\n this Class object represents a primitive type, an array\n class, or void."}, {"method_name": "getFields", "method_sig": "public Field[] getFields()\n                  throws SecurityException", "description": "Returns an array containing Field objects reflecting all\n the accessible public fields of the class or interface represented by\n this Class object.\n\n  If this Class object represents a class or interface with\n no accessible public fields, then this method returns an array of length\n 0.\n\n  If this Class object represents a class, then this method\n returns the public fields of the class and of all its superclasses and\n superinterfaces.\n\n  If this Class object represents an interface, then this\n method returns the fields of the interface and of all its\n superinterfaces.\n\n  If this Class object represents an array type, a primitive\n type, or void, then this method returns an array of length 0.\n\n  The elements in the returned array are not sorted and are not in any\n particular order."}, {"method_name": "getMethods", "method_sig": "public Method[] getMethods()\n                    throws SecurityException", "description": "Returns an array containing Method objects reflecting all the\n public methods of the class or interface represented by this \n Class object, including those declared by the class or interface and\n those inherited from superclasses and superinterfaces.\n\n  If this Class object represents an array type, then the\n returned array has a Method object for each of the public\n methods inherited by the array type from Object. It does not\n contain a Method object for clone().\n\n  If this Class object represents an interface then the\n returned array does not contain any implicitly declared methods from\n Object. Therefore, if no methods are explicitly declared in\n this interface or any of its superinterfaces then the returned array\n has length 0. (Note that a Class object which represents a class\n always has public methods, inherited from Object.)\n\n  The returned array never contains methods with names \"<init>\"\n or \"<clinit>\".\n\n  The elements in the returned array are not sorted and are not in any\n particular order.\n\n  Generally, the result is computed as with the following 4 step algorithm.\n Let C be the class or interface represented by this Class object:\n \n A union of methods is composed of:\n   \n C's declared public instance and static methods as returned by\n        getDeclaredMethods() and filtered to include only public\n        methods.\n If C is a class other than Object, then include the result\n        of invoking this algorithm recursively on the superclass of C.\n Include the results of invoking this algorithm recursively on all\n        direct superinterfaces of C, but include only instance methods.\n\n Union from step 1 is partitioned into subsets of methods with same\n      signature (name, parameter types) and return type.\n Within each such subset only the most specific methods are selected.\n      Let method M be a method from a set of methods with same signature\n      and return type. M is most specific if there is no such method\n      N != M from the same set, such that N is more specific than M.\n      N is more specific than M if:\n   \n N is declared by a class and M is declared by an interface; or\n N and M are both declared by classes or both by interfaces and\n        N's declaring type is the same as or a subtype of M's declaring type\n        (clearly, if M's and N's declaring types are the same type, then\n        M and N are the same method).\n\n The result of this algorithm is the union of all selected methods from\n      step 3.\n"}, {"method_name": "getConstructors", "method_sig": "public Constructor<?>[] getConstructors()\n                                 throws SecurityException", "description": "Returns an array containing Constructor objects reflecting\n all the public constructors of the class represented by this\n Class object.  An array of length 0 is returned if the\n class has no public constructors, or if the class is an array class, or\n if the class reflects a primitive type or void.\n\n Note that while this method returns an array of \n Constructor<T> objects (that is an array of constructors from\n this class), the return type of this method is \n Constructor<?>[] and not Constructor<T>[] as\n might be expected.  This less informative return type is\n necessary since after being returned from this method, the\n array could be modified to hold Constructor objects for\n different classes, which would violate the type guarantees of\n Constructor<T>[]."}, {"method_name": "getField", "method_sig": "public Field getField (String name)\n               throws NoSuchFieldException,\n                      SecurityException", "description": "Returns a Field object that reflects the specified public member\n field of the class or interface represented by this Class\n object. The name parameter is a String specifying the\n simple name of the desired field.\n\n  The field to be reflected is determined by the algorithm that\n follows.  Let C be the class or interface represented by this object:\n\n \n If C declares a public field with the name specified, that is the\n      field to be reflected.\n If no field was found in step 1 above, this algorithm is applied\n      recursively to each direct superinterface of C. The direct\n      superinterfaces are searched in the order they were declared.\n If no field was found in steps 1 and 2 above, and C has a\n      superclass S, then this algorithm is invoked recursively upon S.\n      If C has no superclass, then a NoSuchFieldException\n      is thrown.\n\n If this Class object represents an array type, then this\n method does not find the length field of the array type."}, {"method_name": "getMethod", "method_sig": "public Method getMethod (String name,\n                        Class<?>... parameterTypes)\n                 throws NoSuchMethodException,\n                        SecurityException", "description": "Returns a Method object that reflects the specified public\n member method of the class or interface represented by this\n Class object. The name parameter is a\n String specifying the simple name of the desired method. The\n parameterTypes parameter is an array of Class\n objects that identify the method's formal parameter types, in declared\n order. If parameterTypes is null, it is\n treated as if it were an empty array.\n\n  If this Class object represents an array type, then this\n method finds any public method inherited by the array type from\n Object except method clone().\n\n  If this Class object represents an interface then this\n method does not find any implicitly declared method from\n Object. Therefore, if no methods are explicitly declared in\n this interface or any of its superinterfaces, then this method does not\n find any method.\n\n  This method does not find any method with name \"<init>\" or\n \"<clinit>\".\n\n  Generally, the method to be reflected is determined by the 4 step\n algorithm that follows.\n Let C be the class or interface represented by this Class object:\n \n A union of methods is composed of:\n   \n C's declared public instance and static methods as returned by\n        getDeclaredMethods() and filtered to include only public\n        methods that match given name and parameterTypes\n If C is a class other than Object, then include the result\n        of invoking this algorithm recursively on the superclass of C.\n Include the results of invoking this algorithm recursively on all\n        direct superinterfaces of C, but include only instance methods.\n\n This union is partitioned into subsets of methods with same\n      return type (the selection of methods from step 1 also guarantees that\n      they have the same method name and parameter types).\n Within each such subset only the most specific methods are selected.\n      Let method M be a method from a set of methods with same VM\n      signature (return type, name, parameter types).\n      M is most specific if there is no such method N != M from the same\n      set, such that N is more specific than M. N is more specific than M\n      if:\n   \n N is declared by a class and M is declared by an interface; or\n N and M are both declared by classes or both by interfaces and\n        N's declaring type is the same as or a subtype of M's declaring type\n        (clearly, if M's and N's declaring types are the same type, then\n        M and N are the same method).\n\n The result of this algorithm is chosen arbitrarily from the methods\n      with most specific return type among all selected methods from step 3.\n      Let R be a return type of a method M from the set of all selected methods\n      from step 3. M is a method with most specific return type if there is\n      no such method N != M from the same set, having return type S != R,\n      such that S is a subtype of R as determined by\n      R.class.isAssignableFrom(java.lang.Class<?>)(S.class).\n "}, {"method_name": "getConstructor", "method_sig": "public Constructor<T> getConstructor (Class<?>... parameterTypes)\n                              throws NoSuchMethodException,\n                                     SecurityException", "description": "Returns a Constructor object that reflects the specified\n public constructor of the class represented by this Class\n object. The parameterTypes parameter is an array of\n Class objects that identify the constructor's formal\n parameter types, in declared order.\n\n If this Class object represents an inner class\n declared in a non-static context, the formal parameter types\n include the explicit enclosing instance as the first parameter.\n\n  The constructor to reflect is the public constructor of the class\n represented by this Class object whose formal parameter\n types match those specified by parameterTypes."}, {"method_name": "getDeclaredClasses", "method_sig": "public Class<?>[] getDeclaredClasses()\n                              throws SecurityException", "description": "Returns an array of Class objects reflecting all the\n classes and interfaces declared as members of the class represented by\n this Class object. This includes public, protected, default\n (package) access, and private classes and interfaces declared by the\n class, but excludes inherited classes and interfaces.  This method\n returns an array of length 0 if the class declares no classes or\n interfaces as members, or if this Class object represents a\n primitive type, an array class, or void."}, {"method_name": "getDeclaredFields", "method_sig": "public Field[] getDeclaredFields()\n                          throws SecurityException", "description": "Returns an array of Field objects reflecting all the fields\n declared by the class or interface represented by this\n Class object. This includes public, protected, default\n (package) access, and private fields, but excludes inherited fields.\n\n  If this Class object represents a class or interface with no\n declared fields, then this method returns an array of length 0.\n\n  If this Class object represents an array type, a primitive\n type, or void, then this method returns an array of length 0.\n\n  The elements in the returned array are not sorted and are not in any\n particular order."}, {"method_name": "getDeclaredMethods", "method_sig": "public Method[] getDeclaredMethods()\n                            throws SecurityException", "description": "Returns an array containing Method objects reflecting all the\n declared methods of the class or interface represented by this \n Class object, including public, protected, default (package)\n access, and private methods, but excluding inherited methods.\n\n  If this Class object represents a type that has multiple\n declared methods with the same name and parameter types, but different\n return types, then the returned array has a Method object for\n each such method.\n\n  If this Class object represents a type that has a class\n initialization method <clinit>, then the returned array does\n not have a corresponding Method object.\n\n  If this Class object represents a class or interface with no\n declared methods, then the returned array has length 0.\n\n  If this Class object represents an array type, a primitive\n type, or void, then the returned array has length 0.\n\n  The elements in the returned array are not sorted and are not in any\n particular order."}, {"method_name": "getDeclaredConstructors", "method_sig": "public Constructor<?>[] getDeclaredConstructors()\n                                         throws SecurityException", "description": "Returns an array of Constructor objects reflecting all the\n constructors declared by the class represented by this\n Class object. These are public, protected, default\n (package) access, and private constructors.  The elements in the array\n returned are not sorted and are not in any particular order.  If the\n class has a default constructor, it is included in the returned array.\n This method returns an array of length 0 if this Class\n object represents an interface, a primitive type, an array class, or\n void.\n\n  See The Java Language Specification, section 8.2."}, {"method_name": "getDeclaredField", "method_sig": "public Field getDeclaredField (String name)\n                       throws NoSuchFieldException,\n                              SecurityException", "description": "Returns a Field object that reflects the specified declared\n field of the class or interface represented by this Class\n object. The name parameter is a String that specifies\n the simple name of the desired field.\n\n  If this Class object represents an array type, then this\n method does not find the length field of the array type."}, {"method_name": "getDeclaredMethod", "method_sig": "public Method getDeclaredMethod (String name,\n                                Class<?>... parameterTypes)\n                         throws NoSuchMethodException,\n                                SecurityException", "description": "Returns a Method object that reflects the specified\n declared method of the class or interface represented by this\n Class object. The name parameter is a\n String that specifies the simple name of the desired\n method, and the parameterTypes parameter is an array of\n Class objects that identify the method's formal parameter\n types, in declared order.  If more than one method with the same\n parameter types is declared in a class, and one of these methods has a\n return type that is more specific than any of the others, that method is\n returned; otherwise one of the methods is chosen arbitrarily.  If the\n name is \"<init>\"or \"<clinit>\" a NoSuchMethodException\n is raised.\n\n  If this Class object represents an array type, then this\n method does not find the clone() method."}, {"method_name": "getDeclaredConstructor", "method_sig": "public Constructor<T> getDeclaredConstructor (Class<?>... parameterTypes)\n                                      throws NoSuchMethodException,\n                                             SecurityException", "description": "Returns a Constructor object that reflects the specified\n constructor of the class or interface represented by this\n Class object.  The parameterTypes parameter is\n an array of Class objects that identify the constructor's\n formal parameter types, in declared order.\n\n If this Class object represents an inner class\n declared in a non-static context, the formal parameter types\n include the explicit enclosing instance as the first parameter."}, {"method_name": "getResourceAsStream", "method_sig": "public InputStream getResourceAsStream (String name)", "description": "Finds a resource with a given name.\n\n  If this class is in a named Module then this method\n will attempt to find the resource in the module. This is done by\n delegating to the module's class loader findResource(String,String)\n method, invoking it with the module name and the absolute name of the\n resource. Resources in named modules are subject to the rules for\n encapsulation specified in the Module getResourceAsStream method and so this\n method returns null when the resource is a\n non-\".class\" resource in a package that is not open to the\n caller's module.\n\n  Otherwise, if this class is not in a named module then the rules for\n searching resources associated with a given class are implemented by the\n defining class loader of the class.  This method\n delegates to this object's class loader.  If this object was loaded by\n the bootstrap class loader, the method delegates to ClassLoader.getSystemResourceAsStream(java.lang.String).\n\n  Before delegation, an absolute resource name is constructed from the\n given resource name using this algorithm:\n\n \n If the name begins with a '/'\n ('\\u002f'), then the absolute name of the resource is the\n portion of the name following the '/'.\n\n  Otherwise, the absolute name is of the following form:\n\n \nmodified_package_name/name\n\n Where the modified_package_name is the package name of this\n object with '/' substituted for '.'\n ('\\u002e').\n\n "}, {"method_name": "getResource", "method_sig": "public URL getResource (String name)", "description": "Finds a resource with a given name.\n\n  If this class is in a named Module then this method\n will attempt to find the resource in the module. This is done by\n delegating to the module's class loader findResource(String,String)\n method, invoking it with the module name and the absolute name of the\n resource. Resources in named modules are subject to the rules for\n encapsulation specified in the Module getResourceAsStream method and so this\n method returns null when the resource is a\n non-\".class\" resource in a package that is not open to the\n caller's module.\n\n  Otherwise, if this class is not in a named module then the rules for\n searching resources associated with a given class are implemented by the\n defining class loader of the class.  This method\n delegates to this object's class loader. If this object was loaded by\n the bootstrap class loader, the method delegates to ClassLoader.getSystemResource(java.lang.String).\n\n  Before delegation, an absolute resource name is constructed from the\n given resource name using this algorithm:\n\n \n If the name begins with a '/'\n ('\\u002f'), then the absolute name of the resource is the\n portion of the name following the '/'.\n\n  Otherwise, the absolute name is of the following form:\n\n \nmodified_package_name/name\n\n Where the modified_package_name is the package name of this\n object with '/' substituted for '.'\n ('\\u002e').\n\n "}, {"method_name": "getProtectionDomain", "method_sig": "public ProtectionDomain getProtectionDomain()", "description": "Returns the ProtectionDomain of this class.  If there is a\n security manager installed, this method first calls the security\n manager's checkPermission method with a\n RuntimePermission(\"getProtectionDomain\") permission to\n ensure it's ok to get the\n ProtectionDomain."}, {"method_name": "desiredAssertionStatus", "method_sig": "public boolean desiredAssertionStatus()", "description": "Returns the assertion status that would be assigned to this\n class if it were to be initialized at the time this method is invoked.\n If this class has had its assertion status set, the most recent\n setting will be returned; otherwise, if any package default assertion\n status pertains to this class, the most recent setting for the most\n specific pertinent package default assertion status is returned;\n otherwise, if this class is not a system class (i.e., it has a\n class loader) its class loader's default assertion status is returned;\n otherwise, the system class default assertion status is returned.\n \n Few programmers will have any need for this method; it is provided\n for the benefit of the JRE itself.  (It allows a class to determine at\n the time that it is initialized whether assertions should be enabled.)\n Note that this method is not guaranteed to return the actual\n assertion status that was (or will be) associated with the specified\n class when it was (or will be) initialized."}, {"method_name": "isEnum", "method_sig": "public boolean isEnum()", "description": "Returns true if and only if this class was declared as an enum in the\n source code."}, {"method_name": "getEnumConstants", "method_sig": "public T[] getEnumConstants()", "description": "Returns the elements of this enum class or null if this\n Class object does not represent an enum type."}, {"method_name": "cast", "method_sig": "public T cast (Object obj)", "description": "Casts an object to the class or interface represented\n by this Class object."}, {"method_name": "asSubclass", "method_sig": "public <U> Class<? extends U> asSubclass (Class<U> clazz)", "description": "Casts this Class object to represent a subclass of the class\n represented by the specified class object.  Checks that the cast\n is valid, and throws a ClassCastException if it is not.  If\n this method succeeds, it always returns a reference to this class object.\n\n This method is useful when a client needs to \"narrow\" the type of\n a Class object to pass it to an API that restricts the\n Class objects that it is willing to accept.  A cast would\n generate a compile-time warning, as the correctness of the cast\n could not be checked at runtime (because generic types are implemented\n by erasure)."}, {"method_name": "getAnnotation", "method_sig": "public <A extends Annotation> A getAnnotation (Class<A> annotationClass)", "description": "Description copied from interface:\u00a0AnnotatedElement"}, {"method_name": "isAnnotationPresent", "method_sig": "public boolean isAnnotationPresent (Class<? extends Annotation> annotationClass)", "description": "Returns true if an annotation for the specified type\n is present on this element, else false.  This method\n is designed primarily for convenient access to marker annotations.\n\n The truth value returned by this method is equivalent to:\n getAnnotation(annotationClass) != null\nThe body of the default method is specified to be the code\n above."}, {"method_name": "getAnnotationsByType", "method_sig": "public <A extends Annotation> A[] getAnnotationsByType (Class<A> annotationClass)", "description": "Description copied from interface:\u00a0AnnotatedElement"}, {"method_name": "getAnnotations", "method_sig": "public Annotation[] getAnnotations()", "description": "Description copied from interface:\u00a0AnnotatedElement"}, {"method_name": "getDeclaredAnnotation", "method_sig": "public <A extends Annotation> A getDeclaredAnnotation (Class<A> annotationClass)", "description": "Description copied from interface:\u00a0AnnotatedElement"}, {"method_name": "getDeclaredAnnotationsByType", "method_sig": "public <A extends Annotation> A[] getDeclaredAnnotationsByType (Class<A> annotationClass)", "description": "Description copied from interface:\u00a0AnnotatedElement"}, {"method_name": "getDeclaredAnnotations", "method_sig": "public Annotation[] getDeclaredAnnotations()", "description": "Description copied from interface:\u00a0AnnotatedElement"}, {"method_name": "getAnnotatedSuperclass", "method_sig": "public AnnotatedType getAnnotatedSuperclass()", "description": "Returns an AnnotatedType object that represents the use of a\n type to specify the superclass of the entity represented by this \n Class object. (The use of type Foo to specify the superclass\n in '...  extends Foo' is distinct from the declaration of type\n Foo.)\n\n  If this Class object represents a type whose declaration\n does not explicitly indicate an annotated superclass, then the return\n value is an AnnotatedType object representing an element with no\n annotations.\n\n  If this Class represents either the Object class, an\n interface type, an array type, a primitive type, or void, the return\n value is null."}, {"method_name": "getAnnotatedInterfaces", "method_sig": "public AnnotatedType[] getAnnotatedInterfaces()", "description": "Returns an array of AnnotatedType objects that represent the use\n of types to specify superinterfaces of the entity represented by this\n Class object. (The use of type Foo to specify a\n superinterface in '... implements Foo' is distinct from the\n declaration of type Foo.)\n\n  If this Class object represents a class, the return value is\n an array containing objects representing the uses of interface types to\n specify interfaces implemented by the class. The order of the objects in\n the array corresponds to the order of the interface types used in the\n 'implements' clause of the declaration of this Class object.\n\n  If this Class object represents an interface, the return\n value is an array containing objects representing the uses of interface\n types to specify interfaces directly extended by the interface. The\n order of the objects in the array corresponds to the order of the\n interface types used in the 'extends' clause of the declaration of this\n Class object.\n\n  If this Class object represents a class or interface whose\n declaration does not explicitly indicate any annotated superinterfaces,\n the return value is an array of length 0.\n\n  If this Class object represents either the Object\n class, an array type, a primitive type, or void, the return value is an\n array of length 0."}, {"method_name": "getNestHost", "method_sig": "public Class<?> getNestHost()", "description": "Returns the nest host of the nest to which the class\n or interface represented by this Class object belongs.\n Every class and interface is a member of exactly one nest.\n A class or interface that is not recorded as belonging to a nest\n belongs to the nest consisting only of itself, and is the nest\n host.\n\n Each of the Class objects representing array types,\n primitive types, and void returns this to indicate\n that the represented entity belongs to the nest consisting only of\n itself, and is the nest host.\n\n If there is a linkage error accessing\n the nest host, or if this class or interface is not enumerated as\n a member of the nest by the nest host, then it is considered to belong\n to its own nest and this is returned as the host."}, {"method_name": "isNestmateOf", "method_sig": "public boolean isNestmateOf (Class<?> c)", "description": "Determines if the given Class is a nestmate of the\n class or interface represented by this Class object.\n Two classes or interfaces are nestmates\n if they have the same nest host."}, {"method_name": "getNestMembers", "method_sig": "public Class<?>[] getNestMembers()", "description": "Returns an array containing Class objects representing all the\n classes and interfaces that are members of the nest to which the class\n or interface represented by this Class object belongs.\n The nest host of that nest is the zeroth\n element of the array. Subsequent elements represent any classes or\n interfaces that are recorded by the nest host as being members of\n the nest; the order of such elements is unspecified. Duplicates are\n permitted.\n If the nest host of that nest does not enumerate any members, then the\n array has a single element containing this.\n\n Each of the Class objects representing array types,\n primitive types, and void returns an array containing only\n this.\n\n This method validates that, for each class or interface which is\n recorded as a member of the nest by the nest host, that class or\n interface records itself as a member of that same nest. Any exceptions\n that occur during this validation are rethrown by this method."}]}