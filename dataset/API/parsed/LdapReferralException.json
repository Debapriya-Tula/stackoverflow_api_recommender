{"name": "Class LdapReferralException", "module": "java.naming", "package": "javax.naming.ldap", "text": "This abstract class is used to represent an LDAP referral exception.\n It extends the base ReferralException by providing a\n getReferralContext() method that accepts request controls.\n LdapReferralException is an abstract class. Concrete implementations of it\n determine its synchronization and serialization properties.\n\n A Control[] array passed as a parameter to\n the getReferralContext() method is owned by the caller.\n The service provider will not modify the array or keep a reference to it,\n although it may keep references to the individual Control objects\n in the array.", "codes": ["public abstract class LdapReferralException\nextends ReferralException"], "fields": [], "methods": [{"method_name": "getReferralContext", "method_sig": "public abstract Context getReferralContext()\n                                    throws NamingException", "description": "Retrieves the context at which to continue the method using the\n context's environment and no controls.\n The referral context is created using the environment properties of\n the context that threw the ReferralException and no controls.\n\n This method is equivalent to\n\n getReferralContext(ctx.getEnvironment(), null);\n\n where ctx is the context that threw the ReferralException.\n\n It is overridden in this class for documentation purposes only.\n See ReferralException for how to use this method."}, {"method_name": "getReferralContext", "method_sig": "public abstract Context getReferralContext (Hashtable<?, ?> env)\n                                    throws NamingException", "description": "Retrieves the context at which to continue the method using\n environment properties and no controls.\n The referral context is created using env as its environment\n properties and no controls.\n\n This method is equivalent to\n\n getReferralContext(env, null);\n\n\n It is overridden in this class for documentation purposes only.\n See ReferralException for how to use this method."}, {"method_name": "getReferralContext", "method_sig": "public abstract Context getReferralContext (Hashtable<?, ?> env,\n                                           Control[] reqCtls)\n                                    throws NamingException", "description": "Retrieves the context at which to continue the method using\n request controls and environment properties.\n Regardless of whether a referral is encountered directly during a\n context operation, or indirectly, for example, during a search\n enumeration, the referral exception should provide a context\n at which to continue the operation.\n To continue the operation, the client program should re-invoke\n the method using the same arguments as the original invocation.\n\nreqCtls is used when creating the connection to the referred\n server. These controls will be used as the connection request controls for\n the context and context instances\n derived from the context.\n reqCtls will also be the context's request controls for\n subsequent context operations. See the LdapContext class\n description for details.\n\n This method should be used instead of the other two overloaded forms\n when the caller needs to supply request controls for creating\n the referral context. It might need to do this, for example, when\n it needs to supply special controls relating to authentication.\n\n Service provider implementors should read the \"Service Provider\" section\n in the LdapContext class description for implementation details."}]}