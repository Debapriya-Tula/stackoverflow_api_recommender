{"name": "Interface RemoteRef", "module": "java.rmi", "package": "java.rmi.server", "text": "RemoteRef represents the handle for a remote object. A\n RemoteStub uses a remote reference to carry out a\n remote method invocation to a remote object.", "codes": ["public interface RemoteRef\nextends Externalizable"], "fields": [{"field_name": "serialVersionUID", "field_sig": "static final\u00a0long serialVersionUID", "description": "indicate compatibility with JDK 1.1.x version of class."}, {"field_name": "packagePrefix", "field_sig": "static final\u00a0String packagePrefix", "description": "Initialize the server package prefix: assumes that the\n implementation of server ref classes (e.g., UnicastRef,\n UnicastServerRef) are located in the package defined by the\n prefix."}], "methods": [{"method_name": "invoke", "method_sig": "Object invoke (Remote obj,\n              Method method,\n              Object[] params,\n              long opnum)\n       throws Exception", "description": "Invoke a method. This form of delegating method invocation\n to the reference allows the reference to take care of\n setting up the connection to the remote host, marshaling\n some representation for the method and parameters, then\n communicating the method invocation to the remote host.\n This method either returns the result of a method invocation\n on the remote object which resides on the remote host or\n throws a RemoteException if the call failed or an\n application-level exception if the remote invocation throws\n an exception."}, {"method_name": "newCall", "method_sig": "@Deprecated\nRemoteCall newCall (RemoteObject obj,\n                   Operation[] op,\n                   int opnum,\n                   long hash)\n            throws RemoteException", "description": "Creates an appropriate call object for a new remote method\n invocation on this object.  Passing operation array and index,\n allows the stubs generator to assign the operation indexes and\n interpret them. The remote reference may need the operation to\n encode in the call."}, {"method_name": "invoke", "method_sig": "@Deprecated\nvoid invoke (RemoteCall call)\n     throws Exception", "description": "Executes the remote call.\n\n Invoke will raise any \"user\" exceptions which\n should pass through and not be caught by the stub.  If any\n exception is raised during the remote invocation, invoke should\n take care of cleaning up the connection before raising the\n \"user\" or remote exception."}, {"method_name": "done", "method_sig": "@Deprecated\nvoid done (RemoteCall call)\n   throws RemoteException", "description": "Allows the remote reference to clean up (or reuse) the connection.\n Done should only be called if the invoke returns successfully\n (non-exceptionally) to the stub."}, {"method_name": "getRefClass", "method_sig": "String getRefClass (ObjectOutput out)", "description": "Returns the class name of the ref type to be serialized onto\n the stream 'out'."}, {"method_name": "remoteHashCode", "method_sig": "int remoteHashCode()", "description": "Returns a hashcode for a remote object.  Two remote object stubs\n that refer to the same remote object will have the same hash code\n (in order to support remote objects as keys in hash tables)."}, {"method_name": "remoteEquals", "method_sig": "boolean remoteEquals (RemoteRef obj)", "description": "Compares two remote objects for equality.\n Returns a boolean that indicates whether this remote object is\n equivalent to the specified Object. This method is used when a\n remote object is stored in a hashtable."}, {"method_name": "remoteToString", "method_sig": "String remoteToString()", "description": "Returns a String that represents the reference of this remote\n object."}]}