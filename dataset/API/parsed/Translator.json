{"name": "Class Translator", "module": "jdk.accessibility", "package": "com.sun.java.accessibility.util", "text": "The Translator class provides a translation to interface\n Accessible\n for objects that do not implement interface Accessible.  Assistive\n technologies can use the getAccessible class method of\n Translator to obtain an object that implements interface Accessible.\n If the object passed in already implements interface Accessible,\n getAccessible merely returns the object.\n\n An example of how an assistive technology might use the Translator\n class is as follows:\n\n \n    Accessible accessible = Translator.getAccessible(someObj);\n    // obtain information from the 'accessible' object.\n \nNote:  This implementation is missing many things and is not a recommended way\n to implement accessibility features for a toolkit.  Instead of relying upon this\n code, a toolkit's components should implement interface Accessible directly.", "codes": ["public class Translator\nextends AccessibleContext\nimplements Accessible, AccessibleComponent"], "fields": [{"field_name": "source", "field_sig": "protected\u00a0Object source", "description": "The source object needing translating."}], "methods": [{"method_name": "getTranslatorClass", "method_sig": "protected static Class<?> getTranslatorClass (Class<?> c)", "description": "Find a translator for this class.  If one doesn't exist for this\n class explicitly, try its superclass and so on."}, {"method_name": "getAccessible", "method_sig": "public static Accessible getAccessible (Object o)", "description": "Obtain an object that implements interface Accessible.  If the object\n passed in already implements interface Accessible, getAccessible\n merely returns the object."}, {"method_name": "getSource", "method_sig": "public Object getSource()", "description": "Get the source Object of the Translator."}, {"method_name": "setSource", "method_sig": "public void setSource (Object o)", "description": "Set the source object of the Translator."}, {"method_name": "equals", "method_sig": "public boolean equals (Object o)", "description": "Returns true if this object is the same as the one passed in."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Return hashcode."}, {"method_name": "getAccessibleContext", "method_sig": "public AccessibleContext getAccessibleContext()", "description": "Returns this object."}, {"method_name": "getAccessibleName", "method_sig": "public String getAccessibleName()", "description": "Get the accessible name of this object."}, {"method_name": "setAccessibleName", "method_sig": "public void setAccessibleName (String s)", "description": "Set the name of this object."}, {"method_name": "getAccessibleDescription", "method_sig": "public String getAccessibleDescription()", "description": "Get the accessible description of this object."}, {"method_name": "setAccessibleDescription", "method_sig": "public void setAccessibleDescription (String s)", "description": "Set the accessible description of this object."}, {"method_name": "getAccessibleRole", "method_sig": "public AccessibleRole getAccessibleRole()", "description": "Get the role of this object."}, {"method_name": "getAccessibleStateSet", "method_sig": "public AccessibleStateSet getAccessibleStateSet()", "description": "Get the state of this object, given an already populated state.\n This method is intended for use by subclasses so they don't have\n to check for everything."}, {"method_name": "getAccessibleParent", "method_sig": "public Accessible getAccessibleParent()", "description": "Get the accessible parent of this object."}, {"method_name": "getAccessibleIndexInParent", "method_sig": "public int getAccessibleIndexInParent()", "description": "Get the index of this object in its accessible parent."}, {"method_name": "getAccessibleChildrenCount", "method_sig": "public int getAccessibleChildrenCount()", "description": "Returns the number of accessible children in the object."}, {"method_name": "getAccessibleChild", "method_sig": "public Accessible getAccessibleChild (int i)", "description": "Return the nth accessible child of the object."}, {"method_name": "getLocale", "method_sig": "public Locale getLocale()\n                 throws IllegalComponentStateException", "description": "Gets the Locale of the component. If the component does not have a\n locale, the locale of its parent is returned."}, {"method_name": "addPropertyChangeListener", "method_sig": "public void addPropertyChangeListener (PropertyChangeListener l)", "description": "Add a PropertyChangeListener to the listener list.  The listener\n is registered for all properties."}, {"method_name": "removePropertyChangeListener", "method_sig": "public void removePropertyChangeListener (PropertyChangeListener l)", "description": "Remove the PropertyChangeListener from the listener list."}, {"method_name": "getBackground", "method_sig": "public Color getBackground()", "description": "Get the background Color of this object."}, {"method_name": "setBackground", "method_sig": "public void setBackground (Color c)", "description": "Set the background Color of this object."}, {"method_name": "getForeground", "method_sig": "public Color getForeground()", "description": "Get the foreground Color of this object."}, {"method_name": "setForeground", "method_sig": "public void setForeground (Color c)", "description": "Set the foreground Color of this object."}, {"method_name": "getCursor", "method_sig": "public Cursor getCursor()", "description": "Get the Cursor of this object."}, {"method_name": "setCursor", "method_sig": "public void setCursor (Cursor c)", "description": "Set the Cursor of this object."}, {"method_name": "getFont", "method_sig": "public Font getFont()", "description": "Get the Font of this object."}, {"method_name": "setFont", "method_sig": "public void setFont (Font f)", "description": "Set the Font of this object."}, {"method_name": "getFontMetrics", "method_sig": "public FontMetrics getFontMetrics (Font f)", "description": "Get the FontMetrics of this object."}, {"method_name": "isEnabled", "method_sig": "public boolean isEnabled()", "description": "Determine if the object is enabled."}, {"method_name": "setEnabled", "method_sig": "public void setEnabled (boolean b)", "description": "Set the enabled state of the object."}, {"method_name": "isVisible", "method_sig": "public boolean isVisible()", "description": "Determine if the object is visible."}, {"method_name": "setVisible", "method_sig": "public void setVisible (boolean b)", "description": "Set the visible state of the object."}, {"method_name": "isShowing", "method_sig": "public boolean isShowing()", "description": "Determine if the object is showing.  This is determined by checking\n the visibility of the object and ancestors of the object."}, {"method_name": "contains", "method_sig": "public boolean contains (Point p)", "description": "Checks whether the specified Point is within this\n object's bounds, where the Point is relative to the coordinate\n system of the object."}, {"method_name": "getLocationOnScreen", "method_sig": "public Point getLocationOnScreen()", "description": "Returns the location of the object on the screen."}, {"method_name": "getLocation", "method_sig": "public Point getLocation()", "description": "Returns the location of the object relative to parent."}, {"method_name": "setLocation", "method_sig": "public void setLocation (Point p)", "description": "Sets the location of the object relative to parent."}, {"method_name": "getBounds", "method_sig": "public Rectangle getBounds()", "description": "Returns the current bounds of this object."}, {"method_name": "setBounds", "method_sig": "public void setBounds (Rectangle r)", "description": "Sets the current bounds of this object."}, {"method_name": "getSize", "method_sig": "public Dimension getSize()", "description": "Returns the current size of this object."}, {"method_name": "setSize", "method_sig": "public void setSize (Dimension d)", "description": "Sets the current size of this object."}, {"method_name": "getAccessibleAt", "method_sig": "public Accessible getAccessibleAt (Point p)", "description": "Returns the accessible child contained at the local coordinate\n Point, if one exists."}, {"method_name": "isFocusTraversable", "method_sig": "public boolean isFocusTraversable()", "description": "Returns whether this object can accept focus or not."}, {"method_name": "requestFocus", "method_sig": "public void requestFocus()", "description": "Requests focus for this object."}, {"method_name": "addFocusListener", "method_sig": "public void addFocusListener (FocusListener l)", "description": "Adds the specified FocusListener to receive focus events from\n this component."}, {"method_name": "removeFocusListener", "method_sig": "public void removeFocusListener (FocusListener l)", "description": "Removes the specified focus listener so it no longer receives focus\n events from this component."}]}