{"name": "Class MidiSystem", "module": "java.desktop", "package": "javax.sound.midi", "text": "The MidiSystem class provides access to the installed MIDI system\n resources, including devices such as synthesizers, sequencers, and MIDI input\n and output ports. A typical simple MIDI application might begin by invoking\n one or more MidiSystem methods to learn what devices are installed\n and to obtain the ones needed in that application.\n \n The class also has methods for reading files, streams, and URLs that contain\n standard MIDI file data or soundbanks. You can query the MidiSystem\n for the format of a specified MIDI file.\n \n You cannot instantiate a MidiSystem; all the methods are static.\n \n Properties can be used to specify default MIDI devices. Both system\n properties and a properties file are considered. The \"sound.properties\"\n properties file is read from an implementation-specific location (typically\n it is the conf directory in the Java installation directory).\n The optional \"javax.sound.config.file\" system property can be used to specify\n the properties file that will be read as the initial configuration. If a\n property exists both as a system property and in the properties file, the\n system property takes precedence. If none is specified, a suitable default is\n chosen among the available devices. The syntax of the properties file is\n specified in Properties.load. The\n following table lists the available property keys and which methods consider\n them:\n\n \nMIDI System Property Keys\n\n\nProperty Key\n     Interface\n     Affected Method\n \n\n\njavax.sound.midi.Receiver\nReceiver\ngetReceiver()\n\njavax.sound.midi.Sequencer\nSequencer\ngetSequencer()\n\njavax.sound.midi.Synthesizer\nSynthesizer\ngetSynthesizer()\n\njavax.sound.midi.Transmitter\nTransmitter\ngetTransmitter()\n\n\n\n The property value consists of the provider class name and the device name,\n separated by the hash mark (\"#\"). The provider class name is the\n fully-qualified name of a concrete\n MIDI device provider class. The device name is\n matched against the String returned by the getName method of\n MidiDevice.Info. Either the class name, or the device name may be\n omitted. If only the class name is specified, the trailing hash mark is\n optional.\n \n If the provider class is specified, and it can be successfully retrieved from\n the installed providers, the list of MidiDevice.Info objects is\n retrieved from the provider. Otherwise, or when these devices do not provide\n a subsequent match, the list is retrieved from getMidiDeviceInfo() to\n contain all available MidiDevice.Info objects.\n \n If a device name is specified, the resulting list of MidiDevice.Info\n objects is searched: the first one with a matching name, and whose\n MidiDevice implements the respective interface, will be returned. If\n no matching MidiDevice.Info object is found, or the device name is\n not specified, the first suitable device from the resulting list will be\n returned. For Sequencer and Synthesizer, a device is suitable if it\n implements the respective interface; whereas for Receiver and Transmitter, a\n device is suitable if it implements neither Sequencer nor Synthesizer and\n provides at least one Receiver or Transmitter, respectively.\n \n For example, the property javax.sound.midi.Receiver with a value\n \"com.sun.media.sound.MidiProvider#SunMIDI1\" will have the following\n consequences when getReceiver is called: if the class\n com.sun.media.sound.MidiProvider exists in the list of installed MIDI\n device providers, the first Receiver device with name\n \"SunMIDI1\" will be returned. If it cannot be found, the first\n Receiver from that provider will be returned, regardless of name. If\n there is none, the first Receiver with name \"SunMIDI1\" in the\n list of all devices (as returned by getMidiDeviceInfo) will be\n returned, or, if not found, the first Receiver that can be found in\n the list of all devices is returned. If that fails, too, a\n MidiUnavailableException is thrown.", "codes": ["public class MidiSystem\nextends Object"], "fields": [], "methods": [{"method_name": "getMidiDeviceInfo", "method_sig": "public static MidiDevice.Info[] getMidiDeviceInfo()", "description": "Obtains an array of information objects representing the set of all MIDI\n devices available on the system. A returned information object can then\n be used to obtain the corresponding device object, by invoking\n getMidiDevice."}, {"method_name": "getMidiDevice", "method_sig": "public static MidiDevice getMidiDevice (MidiDevice.Info info)\n                                throws MidiUnavailableException", "description": "Obtains the requested MIDI device."}, {"method_name": "getReceiver", "method_sig": "public static Receiver getReceiver()\n                            throws MidiUnavailableException", "description": "Obtains a MIDI receiver from an external MIDI port or other default\n device. The returned receiver always implements the\n MidiDeviceReceiver interface.\n \n If the system property javax.sound.midi.Receiver is defined or it\n is defined in the file \"sound.properties\", it is used to identify the\n device that provides the default receiver. For details, refer to the\n class description.\n \n If a suitable MIDI port is not available, the Receiver is retrieved from\n an installed synthesizer.\n \n If a native receiver provided by the default device does not implement\n the MidiDeviceReceiver interface, it will be wrapped in a wrapper\n class that implements the MidiDeviceReceiver interface. The\n corresponding Receiver method calls will be forwarded to the\n native receiver.\n \n If this method returns successfully, the MidiDevice\n the Receiver belongs to is opened implicitly, if it is not\n already open. It is possible to close an implicitly opened device by\n calling close on the returned Receiver.\n All open Receiver instances have to be closed in order to release\n system resources hold by the MidiDevice. For a detailed\n description of open/close behaviour see the class description of\n MidiDevice."}, {"method_name": "getTransmitter", "method_sig": "public static Transmitter getTransmitter()\n                                  throws MidiUnavailableException", "description": "Obtains a MIDI transmitter from an external MIDI port or other default\n source. The returned transmitter always implements the\n MidiDeviceTransmitter interface.\n \n If the system property javax.sound.midi.Transmitter is defined or\n it is defined in the file \"sound.properties\", it is used to identify the\n device that provides the default transmitter. For details, refer to the\n class description.\n \n If a native transmitter provided by the default device does not implement\n the MidiDeviceTransmitter interface, it will be wrapped in a\n wrapper class that implements the MidiDeviceTransmitter\n interface. The corresponding Transmitter method calls will be\n forwarded to the native transmitter.\n \n If this method returns successfully, the MidiDevice\n the Transmitter belongs to is opened implicitly, if it is not\n already open. It is possible to close an implicitly opened device by\n calling close on the returned\n Transmitter. All open Transmitter instances have to be\n closed in order to release system resources hold by the\n MidiDevice. For a detailed description of open/close behaviour\n see the class description of MidiDevice."}, {"method_name": "getSynthesizer", "method_sig": "public static Synthesizer getSynthesizer()\n                                  throws MidiUnavailableException", "description": "Obtains the default synthesizer.\n \n If the system property javax.sound.midi.Synthesizer is defined or\n it is defined in the file \"sound.properties\", it is used to identify the\n default synthesizer. For details, refer to the\n class description."}, {"method_name": "getSequencer", "method_sig": "public static Sequencer getSequencer()\n                              throws MidiUnavailableException", "description": "Obtains the default Sequencer, connected to a default device. The\n returned Sequencer instance is connected to the default\n Synthesizer, as returned by getSynthesizer(). If there is\n no Synthesizer available, or the default Synthesizer\n cannot be opened, the sequencer is connected to the default\n Receiver, as returned by getReceiver(). The connection is\n made by retrieving a Transmitter instance from the\n Sequencer and setting its Receiver. Closing and\n re-opening the sequencer will restore the connection to the default\n device.\n \n This method is equivalent to calling getSequencer(true).\n \n If the system property javax.sound.midi.Sequencer is defined or\n it is defined in the file \"sound.properties\", it is used to identify the\n default sequencer. For details, refer to the\n class description."}, {"method_name": "getSequencer", "method_sig": "public static Sequencer getSequencer (boolean connected)\n                              throws MidiUnavailableException", "description": "Obtains the default Sequencer, optionally connected to a default\n device.\n \n If connected is true, the returned Sequencer instance is\n connected to the default Synthesizer, as returned by\n getSynthesizer(). If there is no Synthesizer available, or\n the default Synthesizer cannot be opened, the sequencer\n is connected to the default Receiver, as returned by\n getReceiver(). The connection is made by retrieving a\n Transmitter instance from the Sequencer and setting its\n Receiver. Closing and re-opening the sequencer will restore the\n connection to the default device.\n \n If connected is false, the returned Sequencer instance is\n not connected, it has no open Transmitters. In order to play the\n sequencer on a MIDI device, or a Synthesizer, it is necessary to\n get a Transmitter and set its Receiver.\n \n If the system property javax.sound.midi.Sequencer is defined or\n it is defined in the file \"sound.properties\", it is used to identify the\n default sequencer. For details, refer to the\n class description."}, {"method_name": "getSoundbank", "method_sig": "public static Soundbank getSoundbank (InputStream stream)\n                              throws InvalidMidiDataException,\n                                     IOException", "description": "Constructs a MIDI sound bank by reading it from the specified stream. The\n stream must point to a valid MIDI soundbank file. In general, MIDI\n soundbank providers may need to read some data from the stream before\n determining whether they support it. These parsers must be able to mark\n the stream, read enough data to determine whether they support the\n stream, and, if not, reset the stream's read pointer to its original\n position. If the input stream does not support this, this method may fail\n with an IOException."}, {"method_name": "getSoundbank", "method_sig": "public static Soundbank getSoundbank (URL url)\n                              throws InvalidMidiDataException,\n                                     IOException", "description": "Constructs a Soundbank by reading it from the specified URL. The\n URL must point to a valid MIDI soundbank file."}, {"method_name": "getSoundbank", "method_sig": "public static Soundbank getSoundbank (File file)\n                              throws InvalidMidiDataException,\n                                     IOException", "description": "Constructs a Soundbank by reading it from the specified\n File. The File must point to a valid MIDI soundbank file."}, {"method_name": "getMidiFileFormat", "method_sig": "public static MidiFileFormat getMidiFileFormat (InputStream stream)\n                                        throws InvalidMidiDataException,\n                                               IOException", "description": "Obtains the MIDI file format of the data in the specified input stream.\n The stream must point to valid MIDI file data for a file type recognized\n by the system.\n \n This method and/or the code it invokes may need to read some data from\n the stream to determine whether its data format is supported. The\n implementation may therefore need to mark the stream, read enough data to\n determine whether it is in a supported format, and reset the stream's\n read pointer to its original position. If the input stream does not\n permit this set of operations, this method may fail with an\n IOException.\n \n This operation can only succeed for files of a type which can be parsed\n by an installed file reader. It may fail with an\n InvalidMidiDataException even for valid files if no compatible\n file reader is installed. It will also fail with an\n InvalidMidiDataException if a compatible file reader is\n installed, but encounters errors while determining the file format."}, {"method_name": "getMidiFileFormat", "method_sig": "public static MidiFileFormat getMidiFileFormat (URL url)\n                                        throws InvalidMidiDataException,\n                                               IOException", "description": "Obtains the MIDI file format of the data in the specified URL. The URL\n must point to valid MIDI file data for a file type recognized by the\n system.\n \n This operation can only succeed for files of a type which can be parsed\n by an installed file reader. It may fail with an\n InvalidMidiDataException even for valid files if no compatible\n file reader is installed. It will also fail with an\n InvalidMidiDataException if a compatible file reader is\n installed, but encounters errors while determining the file format."}, {"method_name": "getMidiFileFormat", "method_sig": "public static MidiFileFormat getMidiFileFormat (File file)\n                                        throws InvalidMidiDataException,\n                                               IOException", "description": "Obtains the MIDI file format of the specified File. The\n File must point to valid MIDI file data for a file type\n recognized by the system.\n \n This operation can only succeed for files of a type which can be parsed\n by an installed file reader. It may fail with an\n InvalidMidiDataException even for valid files if no compatible\n file reader is installed. It will also fail with an\n InvalidMidiDataException if a compatible file reader is\n installed, but encounters errors while determining the file format."}, {"method_name": "getSequence", "method_sig": "public static Sequence getSequence (InputStream stream)\n                            throws InvalidMidiDataException,\n                                   IOException", "description": "Obtains a MIDI sequence from the specified input stream. The stream must\n point to valid MIDI file data for a file type recognized by the system.\n \n This method and/or the code it invokes may need to read some data from\n the stream to determine whether its data format is supported. The\n implementation may therefore need to mark the stream, read enough data to\n determine whether it is in a supported format, and reset the stream's\n read pointer to its original position. If the input stream does not\n permit this set of operations, this method may fail with an\n IOException.\n \n This operation can only succeed for files of a type which can be parsed\n by an installed file reader. It may fail with an\n InvalidMidiDataException even for valid files if no compatible\n file reader is installed. It will also fail with an\n InvalidMidiDataException if a compatible file reader is\n installed, but encounters errors while constructing the Sequence\n object from the file data."}, {"method_name": "getSequence", "method_sig": "public static Sequence getSequence (URL url)\n                            throws InvalidMidiDataException,\n                                   IOException", "description": "Obtains a MIDI sequence from the specified URL. The URL must point to\n valid MIDI file data for a file type recognized by the system.\n \n This operation can only succeed for files of a type which can be parsed\n by an installed file reader. It may fail with an\n InvalidMidiDataException even for valid files if no compatible\n file reader is installed. It will also fail with an\n InvalidMidiDataException if a compatible file reader is\n installed, but encounters errors while constructing the Sequence\n object from the file data."}, {"method_name": "getSequence", "method_sig": "public static Sequence getSequence (File file)\n                            throws InvalidMidiDataException,\n                                   IOException", "description": "Obtains a MIDI sequence from the specified File. The File\n must point to valid MIDI file data for a file type recognized by the\n system.\n \n This operation can only succeed for files of a type which can be parsed\n by an installed file reader. It may fail with an\n InvalidMidiDataException even for valid files if no compatible\n file reader is installed. It will also fail with an\n InvalidMidiDataException if a compatible file reader is\n installed, but encounters errors while constructing the Sequence\n object from the file data."}, {"method_name": "getMidiFileTypes", "method_sig": "public static int[] getMidiFileTypes()", "description": "Obtains the set of MIDI file types for which file writing support is\n provided by the system."}, {"method_name": "isFileTypeSupported", "method_sig": "public static boolean isFileTypeSupported (int fileType)", "description": "Indicates whether file writing support for the specified MIDI file type\n is provided by the system."}, {"method_name": "getMidiFileTypes", "method_sig": "public static int[] getMidiFileTypes (Sequence sequence)", "description": "Obtains the set of MIDI file types that the system can write from the\n sequence specified."}, {"method_name": "isFileTypeSupported", "method_sig": "public static boolean isFileTypeSupported (int fileType,\n                                          Sequence sequence)", "description": "Indicates whether a MIDI file of the file type specified can be written\n from the sequence indicated."}, {"method_name": "write", "method_sig": "public static int write (Sequence in,\n                        int fileType,\n                        OutputStream out)\n                 throws IOException", "description": "Writes a stream of bytes representing a file of the MIDI file type\n indicated to the output stream provided."}, {"method_name": "write", "method_sig": "public static int write (Sequence in,\n                        int type,\n                        File out)\n                 throws IOException", "description": "Writes a stream of bytes representing a file of the MIDI file type\n indicated to the external file provided."}]}