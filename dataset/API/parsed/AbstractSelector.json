{"name": "Class AbstractSelector", "module": "java.base", "package": "java.nio.channels.spi", "text": "Base implementation class for selectors.\n\n  This class encapsulates the low-level machinery required to implement\n the interruption of selection operations.  A concrete selector class must\n invoke the begin and end methods before and\n after, respectively, invoking an I/O operation that might block\n indefinitely.  In order to ensure that the end method is always\n invoked, these methods should be used within a\n try\u00a0...\u00a0finally block:\n\n \n try {\n     begin();\n     // Perform blocking I/O operation here\n     ...\n } finally {\n     end();\n }\n This class also defines methods for maintaining a selector's\n cancelled-key set and for removing a key from its channel's key set, and\n declares the abstract register method that is invoked by a\n selectable channel's register\n method in order to perform the actual work of registering a channel.  ", "codes": ["public abstract class AbstractSelector\nextends Selector"], "fields": [], "methods": [{"method_name": "close", "method_sig": "public final void close()\n                 throws IOException", "description": "Closes this selector.\n\n  If the selector has already been closed then this method returns\n immediately.  Otherwise it marks the selector as closed and then invokes\n the implCloseSelector method in order to\n complete the close operation.  "}, {"method_name": "implCloseSelector", "method_sig": "protected abstract void implCloseSelector()\n                                   throws IOException", "description": "Closes this selector.\n\n  This method is invoked by the close method in order\n to perform the actual work of closing the selector.  This method is only\n invoked if the selector has not yet been closed, and it is never invoked\n more than once.\n\n  An implementation of this method must arrange for any other thread\n that is blocked in a selection operation upon this selector to return\n immediately as if by invoking the wakeup method. "}, {"method_name": "provider", "method_sig": "public final SelectorProvider provider()", "description": "Returns the provider that created this channel."}, {"method_name": "cancelledKeys", "method_sig": "protected final Set<SelectionKey> cancelledKeys()", "description": "Retrieves this selector's cancelled-key set.\n\n  This set should only be used while synchronized upon it.  "}, {"method_name": "register", "method_sig": "protected abstract SelectionKey register (AbstractSelectableChannel ch,\n                                         int ops,\n                                         Object att)", "description": "Registers the given channel with this selector.\n\n  This method is invoked by a channel's register method in order to perform\n the actual work of registering the channel with this selector.  "}, {"method_name": "deregister", "method_sig": "protected final void deregister (AbstractSelectionKey key)", "description": "Removes the given key from its channel's key set.\n\n  This method must be invoked by the selector for each channel that it\n deregisters.  "}, {"method_name": "begin", "method_sig": "protected final void begin()", "description": "Marks the beginning of an I/O operation that might block indefinitely.\n\n  This method should be invoked in tandem with the end\n method, using a try\u00a0...\u00a0finally block as\n shown above, in order to implement interruption for\n this selector.\n\n  Invoking this method arranges for the selector's wakeup method to be invoked if a thread's interrupt method is invoked while the thread is\n blocked in an I/O operation upon the selector.  "}, {"method_name": "end", "method_sig": "protected final void end()", "description": "Marks the end of an I/O operation that might block indefinitely.\n\n  This method should be invoked in tandem with the begin\n method, using a try\u00a0...\u00a0finally block as\n shown above, in order to implement interruption for\n this selector.  "}]}