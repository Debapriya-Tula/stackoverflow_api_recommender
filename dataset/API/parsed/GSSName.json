{"name": "Interface GSSName", "module": "java.security.jgss", "package": "org.ietf.jgss", "text": "This interface encapsulates a single GSS-API principal entity. The\n application obtains an implementation of this interface\n through one of the createName methods that exist in the GSSManager class. Conceptually a GSSName contains many\n representations of the entity or many primitive name elements, one for\n each supported underlying mechanism. In GSS terminology, a GSSName that\n contains an element from just one mechanism is called a Mechanism Name\n (MN)\n\n Since different authentication mechanisms may employ different\n namespaces for identifying their principals, GSS-API's naming support is\n necessarily complex in multi-mechanism environments (or even in some\n single-mechanism environments where the underlying mechanism supports\n multiple namespaces). Different name formats and their definitions are\n identified with Oid's and some standard types\n are defined in this interface. The format of the names can be derived\n based on the unique Oid of its name type.\n\n Included below are code examples utilizing the GSSName interface.\n The code below creates a GSSName, converts it to an MN, performs a\n comparison, obtains a printable representation of the name, exports it\n to a byte array and then re-imports to obtain a\n new GSSName.\n \n      GSSManager manager = GSSManager.getInstance();\n\n      // create a host based service name\n      GSSName name = manager.createName(\"service@host\",\n                   GSSName.NT_HOSTBASED_SERVICE);\n\n      Oid krb5 = new Oid(\"1.2.840.113554.1.2.2\");\n\n      GSSName mechName = name.canonicalize(krb5);\n\n      // the above two steps are equivalent to the following\n      GSSName mechName = manager.createName(\"service@host\",\n                      GSSName.NT_HOSTBASED_SERVICE, krb5);\n\n      // perform name comparison\n      if (name.equals(mechName))\n              print(\"Names are equals.\");\n\n      // obtain textual representation of name and its printable\n      // name type\n      print(mechName.toString() +\n                      mechName.getStringNameType().toString());\n\n      // export and re-import the name\n      byte [] exportName = mechName.export();\n\n      // create a new name object from the exported buffer\n      GSSName newName = manager.createName(exportName,\n                      GSSName.NT_EXPORT_NAME);\n\n \n If a security manager is installed, in order to create a GSSName\n that contains a Kerberos name element without providing its realm,\n a ServicePermission\n must be granted and the service principal of the permission must minimally\n be inside the Kerberos name element's realm. For example, if the result of\n createName(\"user\", NT_USER_NAME)\n contains a Kerberos name element user@EXAMPLE.COM, then\n a ServicePermission with service principal\n host/www.example.com@EXAMPLE.COM (and any action) must be granted.\n Otherwise, the creation will throw a GSSException containing the\n GSSException.FAILURE error code.", "codes": ["public interface GSSName"], "fields": [{"field_name": "NT_HOSTBASED_SERVICE", "field_sig": "static final\u00a0Oid NT_HOSTBASED_SERVICE", "description": "Oid indicating a host-based service name form.  It is used to\n represent services associated with host computers.  This name form\n is constructed using two elements, \"service\" and \"hostname\", as\n follows: service@hostname.\n\n It represents the following Oid value:\n{ iso(1) member-body(2) United\n States(840) mit(113554) infosys(1) gssapi(2) generic(1) service_name(4)\n }"}, {"field_name": "NT_USER_NAME", "field_sig": "static final\u00a0Oid NT_USER_NAME", "description": "Name type to indicate a named user on a local system.\n It represents the following Oid value:\n{ iso(1) member-body(2) United\n States(840) mit(113554) infosys(1) gssapi(2) generic(1) user_name(1)\n }"}, {"field_name": "NT_MACHINE_UID_NAME", "field_sig": "static final\u00a0Oid NT_MACHINE_UID_NAME", "description": "Name type to indicate a numeric user identifier corresponding to a\n user on a local system. (e.g. Uid).\n\n  It represents the following Oid value:\n{ iso(1) member-body(2) United States(840) mit(113554)\n infosys(1) gssapi(2) generic(1) machine_uid_name(2) }"}, {"field_name": "NT_STRING_UID_NAME", "field_sig": "static final\u00a0Oid NT_STRING_UID_NAME", "description": "Name type to indicate a string of digits representing the numeric\n user identifier of a user on a local system.\n\n It represents the following Oid value:\n{ iso(1) member-body(2) United\n States(840) mit(113554) infosys(1) gssapi(2) generic(1)\n string_uid_name(3) }"}, {"field_name": "NT_ANONYMOUS", "field_sig": "static final\u00a0Oid NT_ANONYMOUS", "description": "Name type for representing an anonymous entity.\n It represents the following Oid value:\n{ 1(iso), 3(org), 6(dod), 1(internet),\n 5(security), 6(nametypes), 3(gss-anonymous-name) }"}, {"field_name": "NT_EXPORT_NAME", "field_sig": "static final\u00a0Oid NT_EXPORT_NAME", "description": "Name type used to indicate an exported name produced by the export\n method.\n\n It represents the following Oid value: { 1(iso),\n 3(org), 6(dod), 1(internet), 5(security), 6(nametypes),\n 4(gss-api-exported-name) }"}], "methods": [{"method_name": "equals", "method_sig": "boolean equals (GSSName another)\n        throws GSSException", "description": "Compares two GSSName objects to determine if they refer to the\n same entity."}, {"method_name": "equals", "method_sig": "boolean equals (Object another)", "description": "Compares this GSSName object to another Object that might be a\n GSSName. The behaviour is exactly the same as in equals except that no GSSException is thrown;\n instead, false will be returned in the situation where an error\n occurs."}, {"method_name": "hashCode", "method_sig": "int hashCode()", "description": "Returns a hashcode value for this GSSName."}, {"method_name": "canonicalize", "method_sig": "GSSName canonicalize (Oid mech)\n              throws GSSException", "description": "Creates a name that is canonicalized for some\n mechanism."}, {"method_name": "export", "method_sig": "byte[] export()\n       throws GSSException", "description": "Returns a canonical contiguous byte representation of a mechanism name\n (MN), suitable for direct, byte by byte comparison by authorization\n functions.  If the name is not an MN, implementations may throw a\n GSSException with the NAME_NOT_MN status code.  If an implementation\n chooses not to throw an exception, it should use some system specific\n default mechanism to canonicalize the name and then export\n it. Structurally, an exported name object consists of a header\n containing an OID identifying the mechanism that authenticated the\n name, and a trailer containing the name itself, where the syntax of\n the trailer is defined by the individual mechanism specification. The\n format of the header of the output buffer is specified in RFC 2743.\n\n The exported name is useful when used in large access control lists\n where the overhead of creating a GSSName object on each\n name and invoking the equals method on each name from the ACL may be\n prohibitive.\n\n Exported names may be re-imported by using the byte array factory\n method GSSManager.createName and specifying the NT_EXPORT_NAME as the name\n type object identifier. The resulting GSSName name will\n also be a MN."}, {"method_name": "toString", "method_sig": "String toString()", "description": "Returns a textual representation of the GSSName object.  To retrieve\n the printed name format, which determines the syntax of the returned\n string, use the getStringNameType\n method."}, {"method_name": "getStringNameType", "method_sig": "Oid getStringNameType()\n               throws GSSException", "description": "Returns the name type of the printable\n representation of this name that can be obtained from the \n toString method."}, {"method_name": "isAnonymous", "method_sig": "boolean isAnonymous()", "description": "Tests if this name object represents an anonymous entity."}, {"method_name": "isMN", "method_sig": "boolean isMN()", "description": "Tests if this name object represents a Mechanism Name (MN). An MN is\n a GSSName the contains exactly one mechanism's primitive name\n element."}]}