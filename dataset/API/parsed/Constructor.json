{"name": "Class Constructor<T>", "module": "java.base", "package": "java.lang.reflect", "text": "Constructor provides information about, and access to, a single\n constructor for a class.\n\n Constructor permits widening conversions to occur when matching the\n actual parameters to newInstance() with the underlying\n constructor's formal parameters, but throws an\n IllegalArgumentException if a narrowing conversion would occur.", "codes": ["public final class Constructor<T>\nextends Executable"], "fields": [], "methods": [{"method_name": "setAccessible", "method_sig": "public void setAccessible (boolean flag)", "description": "Set the accessible flag for this reflected object to\n the indicated boolean value.  A value of true indicates that\n the reflected object should suppress checks for Java language access\n control when it is used. A value of false indicates that\n the reflected object should enforce checks for Java language access\n control when it is used, with the variation noted in the class description.\n\n  This method may be used by a caller in class C to enable\n access to a member of declaring class D if any of the following hold: \n\n C and D are in the same module. \n The member is public and D is public in\n     a package that the module containing D exports to at least the module\n     containing C. \n The member is protected static, D is\n     public in a package that the module containing D\n     exports to at least the module containing C, and C\n     is a subclass of D. \n D is in a package that the module containing D\nopens to at least the module\n     containing C.\n     All packages in unnamed and open modules are open to all modules and\n     so this method always succeeds when D is in an unnamed or\n     open module. \n\n This method cannot be used to enable access to private members,\n members with default (package) access, protected instance members, or\n protected constructors when the declaring class is in a different module\n to the caller and the package containing the declaring class is not open\n to the caller's module. \n If there is a security manager, its\n checkPermission method is first called with a\n ReflectPermission(\"suppressAccessChecks\") permission.\n\n  A SecurityException is also thrown if this object is a\n Constructor object for the class Class and flag\n is true. "}, {"method_name": "getDeclaringClass", "method_sig": "public Class<T> getDeclaringClass()", "description": "Returns the Class object representing the class that\n declares the constructor represented by this object."}, {"method_name": "getName", "method_sig": "public String getName()", "description": "Returns the name of this constructor, as a string.  This is\n the binary name of the constructor's declaring class."}, {"method_name": "getTypeParameters", "method_sig": "public TypeVariable<Constructor<T>>[] getTypeParameters()", "description": "Returns an array of TypeVariable objects that represent the\n type variables declared by the generic declaration represented by this\n GenericDeclaration object, in declaration order.  Returns an\n array of length 0 if the underlying generic declaration declares no type\n variables."}, {"method_name": "getParameterCount", "method_sig": "public int getParameterCount()", "description": "Returns the number of formal parameters (whether explicitly\n declared or implicitly declared or neither) for the executable\n represented by this object."}, {"method_name": "getGenericParameterTypes", "method_sig": "public Type[] getGenericParameterTypes()", "description": "Returns an array of Type objects that represent the formal\n parameter types, in declaration order, of the executable represented by\n this object. Returns an array of length 0 if the\n underlying executable takes no parameters.\n\n If a formal parameter type is a parameterized type,\n the Type object returned for it must accurately reflect\n the actual type parameters used in the source code.\n\n If a formal parameter type is a type variable or a parameterized\n type, it is created. Otherwise, it is resolved."}, {"method_name": "getGenericExceptionTypes", "method_sig": "public Type[] getGenericExceptionTypes()", "description": "Returns an array of Type objects that represent the\n exceptions declared to be thrown by this executable object.\n Returns an array of length 0 if the underlying executable declares\n no exceptions in its throws clause.\n\n If an exception type is a type variable or a parameterized\n type, it is created. Otherwise, it is resolved."}, {"method_name": "equals", "method_sig": "public boolean equals (Object obj)", "description": "Compares this Constructor against the specified object.\n Returns true if the objects are the same.  Two Constructor objects are\n the same if they were declared by the same class and have the\n same formal parameter types."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Returns a hashcode for this Constructor. The hashcode is\n the same as the hashcode for the underlying constructor's\n declaring class name."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a string describing this Constructor.  The string is\n formatted as the constructor access modifiers, if any,\n followed by the fully-qualified name of the declaring class,\n followed by a parenthesized, comma-separated list of the\n constructor's formal parameter types.  For example:\n \n    public java.util.Hashtable(int,float)\n \nIf the constructor is declared to throw exceptions, the\n parameter list is followed by a space, followed by the word\n \"throws\" followed by a comma-separated list of the\n thrown exception types.\n\n The only possible modifiers for constructors are the access\n modifiers public, protected or\n private.  Only one of these may appear, or none if the\n constructor has default (package) access."}, {"method_name": "toGenericString", "method_sig": "public String toGenericString()", "description": "Returns a string describing this Constructor,\n including type parameters.  The string is formatted as the\n constructor access modifiers, if any, followed by an\n angle-bracketed comma separated list of the constructor's type\n parameters, if any, followed by the fully-qualified name of the\n declaring class, followed by a parenthesized, comma-separated\n list of the constructor's generic formal parameter types.\n\n If this constructor was declared to take a variable number of\n arguments, instead of denoting the last parameter as\n \"Type[]\", it is denoted as\n \"Type...\".\n\n A space is used to separate access modifiers from one another\n and from the type parameters or class name.  If there are no\n type parameters, the type parameter list is elided; if the type\n parameter list is present, a space separates the list from the\n class name.  If the constructor is declared to throw\n exceptions, the parameter list is followed by a space, followed\n by the word \"throws\" followed by a\n comma-separated list of the generic thrown exception types.\n\n The only possible modifiers for constructors are the access\n modifiers public, protected or\n private.  Only one of these may appear, or none if the\n constructor has default (package) access."}, {"method_name": "newInstance", "method_sig": "public T newInstance (Object... initargs)\n              throws InstantiationException,\n                     IllegalAccessException,\n                     IllegalArgumentException,\n                     InvocationTargetException", "description": "Uses the constructor represented by this Constructor object to\n create and initialize a new instance of the constructor's\n declaring class, with the specified initialization parameters.\n Individual parameters are automatically unwrapped to match\n primitive formal parameters, and both primitive and reference\n parameters are subject to method invocation conversions as necessary.\n\n If the number of formal parameters required by the underlying constructor\n is 0, the supplied initargs array may be of length 0 or null.\n\n If the constructor's declaring class is an inner class in a\n non-static context, the first argument to the constructor needs\n to be the enclosing instance; see section 15.9.3 of\n The Java\u2122 Language Specification.\n\n If the required access and argument checks succeed and the\n instantiation will proceed, the constructor's declaring class\n is initialized if it has not already been initialized.\n\n If the constructor completes normally, returns the newly\n created and initialized instance."}, {"method_name": "isVarArgs", "method_sig": "public boolean isVarArgs()", "description": "Returns true if this executable was declared to take a\n variable number of arguments; returns false otherwise."}, {"method_name": "isSynthetic", "method_sig": "public boolean isSynthetic()", "description": "Returns true if this executable is a synthetic\n construct; returns false otherwise."}, {"method_name": "getAnnotation", "method_sig": "public <T extends Annotation> T getAnnotation (Class<T> annotationClass)", "description": "Returns this element's annotation for the specified type if\n such an annotation is present, else null."}, {"method_name": "getDeclaredAnnotations", "method_sig": "public Annotation[] getDeclaredAnnotations()", "description": "Returns annotations that are directly present on this element.\n This method ignores inherited annotations.\n\n If there are no annotations directly present on this element,\n the return value is an array of length 0.\n\n The caller of this method is free to modify the returned array; it will\n have no effect on the arrays returned to other callers."}, {"method_name": "getParameterAnnotations", "method_sig": "public Annotation[][] getParameterAnnotations()", "description": "Returns an array of arrays of Annotations that\n represent the annotations on the formal parameters, in\n declaration order, of the Executable represented by\n this object.  Synthetic and mandated parameters (see\n explanation below), such as the outer \"this\" parameter to an\n inner class constructor will be represented in the returned\n array.  If the executable has no parameters (meaning no formal,\n no synthetic, and no mandated parameters), a zero-length array\n will be returned.  If the Executable has one or more\n parameters, a nested array of length zero is returned for each\n parameter with no annotations. The annotation objects contained\n in the returned arrays are serializable.  The caller of this\n method is free to modify the returned arrays; it will have no\n effect on the arrays returned to other callers.\n\n A compiler may add extra parameters that are implicitly\n declared in source (\"mandated\"), as well as parameters that\n are neither implicitly nor explicitly declared in source\n (\"synthetic\") to the parameter list for a method.  See Parameter for more information."}, {"method_name": "getAnnotatedReturnType", "method_sig": "public AnnotatedType getAnnotatedReturnType()", "description": "Returns an AnnotatedType object that represents the use of a type to\n specify the return type of the method/constructor represented by this\n Executable.\n\n If this Executable object represents a constructor, the \n AnnotatedType object represents the type of the constructed object.\n\n If this Executable object represents a method, the \n AnnotatedType object represents the use of a type to specify the return\n type of the method."}, {"method_name": "getAnnotatedReceiverType", "method_sig": "public AnnotatedType getAnnotatedReceiverType()", "description": "Returns an AnnotatedType object that represents the use of a\n type to specify the receiver type of the method/constructor represented\n by this Executable object.\n\n The receiver type of a method/constructor is available only if the\n method/constructor has a receiver parameter (JLS 8.4.1). If this \n Executable object represents an instance method or represents a\n constructor of an inner member class, and the\n method/constructor either has no receiver parameter or has a\n receiver parameter with no annotations on its type, then the return\n value is an AnnotatedType object representing an element with no\n annotations.\n\n If this Executable object represents a static method or\n represents a constructor of a top level, static member, local, or\n anonymous class, then the return value is null."}]}