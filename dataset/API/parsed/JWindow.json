{"name": "Class JWindow", "module": "java.desktop", "package": "javax.swing", "text": "A JWindow is a container that can be displayed anywhere on the\n user's desktop. It does not have the title bar, window-management buttons,\n or other trimmings associated with a JFrame, but it is still a\n \"first-class citizen\" of the user's desktop, and can exist anywhere\n on it.\n \n The JWindow component contains a JRootPane\n as its only child.  The contentPane should be the parent\n of any children of the JWindow.\n As a convenience, the add, remove, and setLayout\n methods of this class are overridden, so that they delegate calls\n to the corresponding methods of the ContentPane.\n For example, you can add a child component to a window as follows:\n \n       window.add(child);\n \n And the child will be added to the contentPane.\n The contentPane will always be non-null.\n Attempting to set it to null will cause the JWindow\n to throw an exception. The default contentPane will have a\n BorderLayout manager set on it.\n Refer to RootPaneContainer\n for details on adding, removing and setting the LayoutManager\n of a JWindow.\n \n Please see the JRootPane documentation for a complete description of\n the contentPane, glassPane, and\n layeredPane components.\n \n In a multi-screen environment, you can create a JWindow\n on a different screen device.  See Window for more\n information.\n \nWarning: Swing is not thread safe. For more\n information see Swing's Threading\n Policy.\n \nWarning:\n Serialized objects of this class will not be compatible with\n future Swing releases. The current serialization support is\n appropriate for short term storage or RMI between applications running\n the same version of Swing.  As of 1.4, support for long term storage\n of all JavaBeans\u2122\n has been added to the java.beans package.\n Please see XMLEncoder.", "codes": ["@JavaBean(defaultProperty=\"accessibleContext\",\n          description=\"A toplevel window which has no system border or controls.\")\npublic class JWindow\nextends Window\nimplements Accessible, RootPaneContainer"], "fields": [{"field_name": "rootPane", "field_sig": "protected\u00a0JRootPane rootPane", "description": "The JRootPane instance that manages the\n contentPane\n and optional menuBar for this frame, as well as the\n glassPane."}, {"field_name": "rootPaneCheckingEnabled", "field_sig": "protected\u00a0boolean rootPaneCheckingEnabled", "description": "If true then calls to add and setLayout\n will be forwarded to the contentPane. This is initially\n false, but is set to true when the JWindow is constructed."}, {"field_name": "accessibleContext", "field_sig": "protected\u00a0AccessibleContext accessibleContext", "description": "The accessible context property."}], "methods": [{"method_name": "windowInit", "method_sig": "protected void windowInit()", "description": "Called by the constructors to init the JWindow properly."}, {"method_name": "createRootPane", "method_sig": "protected JRootPane createRootPane()", "description": "Called by the constructor methods to create the default\n rootPane."}, {"method_name": "isRootPaneCheckingEnabled", "method_sig": "protected boolean isRootPaneCheckingEnabled()", "description": "Returns whether calls to add and\n setLayout are forwarded to the contentPane."}, {"method_name": "setTransferHandler", "method_sig": "@BeanProperty(hidden=true,\n              description=\"Mechanism for transfer of data into the component\")\npublic void setTransferHandler (TransferHandler newHandler)", "description": "Sets the transferHandler property, which is a mechanism to\n support transfer of data into this component. Use null\n if the component does not support data transfer operations.\n \n If the system property suppressSwingDropSupport is false\n (the default) and the current drop target on this component is either\n null or not a user-set drop target, this method will change the\n drop target as follows: If newHandler is null it will\n clear the drop target. If not null it will install a new\n DropTarget.\n \n Note: When used with JWindow, TransferHandler only\n provides data import capability, as the data export related methods\n are currently typed to JComponent.\n \n Please see\n \n How to Use Drag and Drop and Data Transfer, a section in\n The Java Tutorial, for more information."}, {"method_name": "getTransferHandler", "method_sig": "public TransferHandler getTransferHandler()", "description": "Gets the transferHandler property."}, {"method_name": "update", "method_sig": "public void update (Graphics g)", "description": "Calls paint(g).  This method was overridden to\n prevent an unnecessary call to clear the background."}, {"method_name": "setRootPaneCheckingEnabled", "method_sig": "@BeanProperty(hidden=true,\n              description=\"Whether the add and setLayout methods are forwarded\")\nprotected void setRootPaneCheckingEnabled (boolean enabled)", "description": "Sets whether calls to add and\n setLayout are forwarded to the contentPane."}, {"method_name": "addImpl", "method_sig": "protected void addImpl (Component comp,\n                       Object constraints,\n                       int index)", "description": "Adds the specified child Component.\n This method is overridden to conditionally forward calls to the\n contentPane.\n By default, children are added to the contentPane instead\n of the frame, refer to RootPaneContainer for\n details."}, {"method_name": "remove", "method_sig": "public void remove (Component comp)", "description": "Removes the specified component from the container. If\n comp is not the rootPane, this will forward\n the call to the contentPane. This will do nothing if\n comp is not a child of the JWindow or\n contentPane."}, {"method_name": "setLayout", "method_sig": "public void setLayout (LayoutManager manager)", "description": "Sets the LayoutManager.\n Overridden to conditionally forward the call to the\n contentPane.\n Refer to RootPaneContainer for\n more information."}, {"method_name": "getRootPane", "method_sig": "@BeanProperty(bound=false,\n              hidden=true,\n              description=\"the RootPane object for this window.\")\npublic JRootPane getRootPane()", "description": "Returns the rootPane object for this window."}, {"method_name": "setRootPane", "method_sig": "protected void setRootPane (JRootPane root)", "description": "Sets the new rootPane object for this window.\n This method is called by the constructor."}, {"method_name": "getContentPane", "method_sig": "public Container getContentPane()", "description": "Returns the Container which is the contentPane\n for this window."}, {"method_name": "setContentPane", "method_sig": "@BeanProperty(bound=false,\n              hidden=true,\n              description=\"The client area of the window where child components are normally inserted.\")\npublic void setContentPane (Container contentPane)", "description": "Sets the contentPane property for this window.\n This method is called by the constructor."}, {"method_name": "getLayeredPane", "method_sig": "public JLayeredPane getLayeredPane()", "description": "Returns the layeredPane object for this window."}, {"method_name": "setLayeredPane", "method_sig": "@BeanProperty(bound=false,\n              hidden=true,\n              description=\"The pane which holds the various window layers.\")\npublic void setLayeredPane (JLayeredPane layeredPane)", "description": "Sets the layeredPane property.\n This method is called by the constructor."}, {"method_name": "getGlassPane", "method_sig": "public Component getGlassPane()", "description": "Returns the glassPane Component for this window."}, {"method_name": "setGlassPane", "method_sig": "@BeanProperty(bound=false,\n              hidden=true,\n              description=\"A transparent pane used for menu rendering.\")\npublic void setGlassPane (Component glassPane)", "description": "Sets the glassPane property.\n This method is called by the constructor."}, {"method_name": "getGraphics", "method_sig": "@BeanProperty(bound=false)\npublic Graphics getGraphics()", "description": "Creates a graphics context for this component. This method will\n return null if this component is currently not\n displayable."}, {"method_name": "repaint", "method_sig": "public void repaint (long time,\n                    int x,\n                    int y,\n                    int width,\n                    int height)", "description": "Repaints the specified rectangle of this component within\n time milliseconds.  Refer to RepaintManager\n for details on how the repaint is handled."}, {"method_name": "paramString", "method_sig": "protected String paramString()", "description": "Returns a string representation of this JWindow.\n This method\n is intended to be used only for debugging purposes, and the\n content and format of the returned string may vary between\n implementations. The returned string may be empty but may not\n be null."}, {"method_name": "getAccessibleContext", "method_sig": "public AccessibleContext getAccessibleContext()", "description": "Gets the AccessibleContext associated with this JWindow.\n For JWindows, the AccessibleContext takes the form of an\n AccessibleJWindow.\n A new AccessibleJWindow instance is created if necessary."}]}