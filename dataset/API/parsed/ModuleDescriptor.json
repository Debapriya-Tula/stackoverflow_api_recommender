{"name": "Class ModuleDescriptor", "module": "java.base", "package": "java.lang.module", "text": "A module descriptor.\n\n  A module descriptor describes a named module and defines methods to\n obtain each of its components. The module descriptor for a named module\n in the Java virtual machine is obtained by invoking the Module's getDescriptor method. Module descriptors can also be created using the\n ModuleDescriptor.Builder class or by reading the binary form of a\n module declaration (module-info.class) using the read methods defined here. \n A module descriptor describes a normal, open, or automatic\n module. Normal modules and open modules describe their dependences, exported-packages, the services\n that they use or provide, and other\n components. Normal modules may open specific\n packages. The module descriptor for an open modules does not declare any\n open packages (its opens method returns an empty set) but when\n instantiated in the Java virtual machine then it is treated as if all\n packages are open. The module descriptor for an automatic module does not\n declare any dependences (except for the mandatory dependency on \n java.base), and does not declare any exported or open packages. Automatic\n module receive special treatment during resolution so that they read all\n other modules in the configuration. When an automatic module is instantiated\n in the Java virtual machine then it reads every unnamed module and is\n treated as if all packages are exported and open. \n ModuleDescriptor objects are immutable and safe for use by\n multiple concurrent threads.", "codes": ["public class ModuleDescriptor\nextends Object\nimplements Comparable<ModuleDescriptor>"], "fields": [], "methods": [{"method_name": "name", "method_sig": "public String name()", "description": " Returns the module name. "}, {"method_name": "modifiers", "method_sig": "public Set<ModuleDescriptor.Modifier> modifiers()", "description": " Returns the set of module modifiers. "}, {"method_name": "isOpen", "method_sig": "public boolean isOpen()", "description": " Returns true if this is an open module. \n This method is equivalent to testing if the set of modifiers contains the OPEN modifier. "}, {"method_name": "isAutomatic", "method_sig": "public boolean isAutomatic()", "description": " Returns true if this is an automatic module. \n This method is equivalent to testing if the set of modifiers contains the AUTOMATIC modifier. "}, {"method_name": "requires", "method_sig": "public Set<ModuleDescriptor.Requires> requires()", "description": " Returns the set of Requires objects representing the module\n dependences. \n The set includes a dependency on \"java.base\" when this\n module is not named \"java.base\". If this module is an automatic\n module then it does not have a dependency on any module other than\n \"java.base\". "}, {"method_name": "exports", "method_sig": "public Set<ModuleDescriptor.Exports> exports()", "description": " Returns the set of Exports objects representing the exported\n packages. \n If this module is an automatic module then the set of exports\n is empty. "}, {"method_name": "opens", "method_sig": "public Set<ModuleDescriptor.Opens> opens()", "description": " Returns the set of Opens objects representing the open\n packages. \n If this module is an open module or an automatic module then the\n set of open packages is empty. "}, {"method_name": "uses", "method_sig": "public Set<String> uses()", "description": " Returns the set of service dependences. \n If this module is an automatic module then the set of service\n dependences is empty. "}, {"method_name": "provides", "method_sig": "public Set<ModuleDescriptor.Provides> provides()", "description": " Returns the set of Provides objects representing the\n services that the module provides. "}, {"method_name": "version", "method_sig": "public Optional<ModuleDescriptor.Version> version()", "description": " Returns the module version. "}, {"method_name": "rawVersion", "method_sig": "public Optional<String> rawVersion()", "description": " Returns the string with the possibly-unparseable version of the\n module "}, {"method_name": "toNameAndVersion", "method_sig": "public String toNameAndVersion()", "description": " Returns a string containing the module name and, if present, its\n version. "}, {"method_name": "mainClass", "method_sig": "public Optional<String> mainClass()", "description": " Returns the module main class. "}, {"method_name": "packages", "method_sig": "public Set<String> packages()", "description": "Returns the set of packages in the module.\n\n  The set of packages includes all exported and open packages, as well\n as the packages of any service providers, and the package for the main\n class. "}, {"method_name": "compareTo", "method_sig": "public int compareTo (ModuleDescriptor that)", "description": "Compares this module descriptor to another.\n\n  Two ModuleDescriptor objects are compared by comparing their\n module names lexicographically. Where the module names are equal then the\n module versions are compared. When comparing the module versions then a\n module descriptor with a version is considered to succeed a module\n descriptor that does not have a version. If both versions are unparseable then the raw version strings are compared lexicographically. Where the module names\n are equal and the versions are equal (or not present in both), then the\n set of modifiers are compared. Sets of modifiers are compared by comparing\n a binary value computed for each set. If a modifier is present\n in the set then the bit at the position of its ordinal is 1\n in the binary value, otherwise 0. If the two set of modifiers\n are also equal then the other components of the module descriptors are\n compared in a manner that is consistent with equals. "}, {"method_name": "equals", "method_sig": "public boolean equals (Object ob)", "description": "Tests this module descriptor for equality with the given object.\n\n  If the given object is not a ModuleDescriptor then this\n method returns false. Two module descriptors are equal if each\n of their corresponding components is equal. \n This method satisfies the general contract of the Object.equals method. "}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Computes a hash code for this module descriptor.\n\n  The hash code is based upon the components of the module descriptor,\n and satisfies the general contract of the Object.hashCode method. "}, {"method_name": "toString", "method_sig": "public String toString()", "description": " Returns a string describing the module. "}, {"method_name": "newModule", "method_sig": "public static ModuleDescriptor.Builder newModule (String name,\n                                                 Set<ModuleDescriptor.Modifier> ms)", "description": "Instantiates a builder to build a module descriptor."}, {"method_name": "newModule", "method_sig": "public static ModuleDescriptor.Builder newModule (String name)", "description": "Instantiates a builder to build a module descriptor for a normal\n module. This method is equivalent to invoking newModule with an empty set of modifiers."}, {"method_name": "newOpenModule", "method_sig": "public static ModuleDescriptor.Builder newOpenModule (String name)", "description": "Instantiates a builder to build a module descriptor for an open module.\n This method is equivalent to invoking newModule with the OPEN modifier.\n\n  The builder for an open module cannot be used to declare any open\n packages. "}, {"method_name": "newAutomaticModule", "method_sig": "public static ModuleDescriptor.Builder newAutomaticModule (String name)", "description": "Instantiates a builder to build a module descriptor for an automatic\n module. This method is equivalent to invoking newModule with the AUTOMATIC\n modifier.\n\n  The builder for an automatic module cannot be used to declare module\n or service dependences. It also cannot be used to declare any exported\n or open packages. "}, {"method_name": "read", "method_sig": "public static ModuleDescriptor read (InputStream in,\n                                    Supplier<Set<String>> packageFinder)\n                             throws IOException", "description": "Reads the binary form of a module declaration from an input stream\n as a module descriptor.\n\n  If the descriptor encoded in the input stream does not indicate a\n set of packages in the module then the packageFinder will be\n invoked. The set of packages that the packageFinder returns\n must include all the packages that the module exports, opens, as well\n as the packages of the service implementations that the module provides,\n and the package of the main class (if the module has a main class). If\n the packageFinder throws an UncheckedIOException then\n IOException cause will be re-thrown. \n If there are bytes following the module descriptor then it is\n implementation specific as to whether those bytes are read, ignored,\n or reported as an InvalidModuleDescriptorException. If this\n method fails with an InvalidModuleDescriptorException or \n IOException then it may do so after some, but not all, bytes have\n been read from the input stream. It is strongly recommended that the\n stream be promptly closed and discarded if an exception occurs. "}, {"method_name": "read", "method_sig": "public static ModuleDescriptor read (InputStream in)\n                             throws IOException", "description": "Reads the binary form of a module declaration from an input stream as a\n module descriptor. This method works exactly as specified by the 2-arg\n read method with the exception that\n a packager finder is not used to find additional packages when the\n module descriptor read from the stream does not indicate the set of\n packages."}, {"method_name": "read", "method_sig": "public static ModuleDescriptor read (ByteBuffer bb,\n                                    Supplier<Set<String>> packageFinder)", "description": "Reads the binary form of a module declaration from a byte buffer\n as a module descriptor.\n\n  If the descriptor encoded in the byte buffer does not indicate a\n set of packages in the module then the packageFinder will be\n invoked. The set of packages that the packageFinder returns\n must include all the packages that the module exports, opens, as well\n as the packages of the service implementations that the module provides,\n and the package of the main class (if the module has a main class). If\n the packageFinder throws an UncheckedIOException then\n IOException cause will be re-thrown. \n The module descriptor is read from the buffer starting at index\n p, where p is the buffer's position when this method is invoked. Upon return the buffer's position\n will be equal to p + n where n is the number of bytes\n read from the buffer. \n If there are bytes following the module descriptor then it is\n implementation specific as to whether those bytes are read, ignored,\n or reported as an InvalidModuleDescriptorException. If this\n method fails with an InvalidModuleDescriptorException then it\n may do so after some, but not all, bytes have been read. "}, {"method_name": "read", "method_sig": "public static ModuleDescriptor read (ByteBuffer bb)", "description": "Reads the binary form of a module declaration from a byte buffer as a\n module descriptor. This method works exactly as specified by the 2-arg\n read method with the exception that a\n packager finder is not used to find additional packages when the module\n descriptor encoded in the buffer does not indicate the set of packages."}]}