{"name": "Interface Range", "module": "java.xml", "package": "org.w3c.dom.ranges", "text": "See also the Document Object Model (DOM) Level 2 Traversal and Range Specification.", "codes": ["public interface Range"], "fields": [{"field_name": "START_TO_START", "field_sig": "static final\u00a0short START_TO_START", "description": "Compare start boundary-point of sourceRange to start\n boundary-point of Range on which compareBoundaryPoints\n is invoked."}, {"field_name": "START_TO_END", "field_sig": "static final\u00a0short START_TO_END", "description": "Compare start boundary-point of sourceRange to end\n boundary-point of Range on which compareBoundaryPoints\n is invoked."}, {"field_name": "END_TO_END", "field_sig": "static final\u00a0short END_TO_END", "description": "Compare end boundary-point of sourceRange to end\n boundary-point of Range on which compareBoundaryPoints\n is invoked."}, {"field_name": "END_TO_START", "field_sig": "static final\u00a0short END_TO_START", "description": "Compare end boundary-point of sourceRange to start\n boundary-point of Range on which compareBoundaryPoints\n is invoked."}], "methods": [{"method_name": "getStartContainer", "method_sig": "Node getStartContainer()\n                throws DOMException", "description": "Node within which the Range begins"}, {"method_name": "getStartOffset", "method_sig": "int getStartOffset()\n            throws DOMException", "description": "Offset within the starting node of the Range."}, {"method_name": "getEndContainer", "method_sig": "Node getEndContainer()\n              throws DOMException", "description": "Node within which the Range ends"}, {"method_name": "getEndOffset", "method_sig": "int getEndOffset()\n          throws DOMException", "description": "Offset within the ending node of the Range."}, {"method_name": "getCollapsed", "method_sig": "boolean getCollapsed()\n              throws DOMException", "description": "TRUE if the Range is collapsed"}, {"method_name": "getCommonAncestorContainer", "method_sig": "Node getCommonAncestorContainer()\n                         throws DOMException", "description": "The deepest common ancestor container of the Range's two\n boundary-points."}, {"method_name": "setStart", "method_sig": "void setStart (Node refNode,\n              int offset)\n       throws RangeException,\n              DOMException", "description": "Sets the attributes describing the start of the Range."}, {"method_name": "setEnd", "method_sig": "void setEnd (Node refNode,\n            int offset)\n     throws RangeException,\n            DOMException", "description": "Sets the attributes describing the end of a Range."}, {"method_name": "setStartBefore", "method_sig": "void setStartBefore (Node refNode)\n             throws RangeException,\n                    DOMException", "description": "Sets the start position to be before a node"}, {"method_name": "setStartAfter", "method_sig": "void setStartAfter (Node refNode)\n            throws RangeException,\n                   DOMException", "description": "Sets the start position to be after a node"}, {"method_name": "setEndBefore", "method_sig": "void setEndBefore (Node refNode)\n           throws RangeException,\n                  DOMException", "description": "Sets the end position to be before a node."}, {"method_name": "setEndAfter", "method_sig": "void setEndAfter (Node refNode)\n          throws RangeException,\n                 DOMException", "description": "Sets the end of a Range to be after a node"}, {"method_name": "collapse", "method_sig": "void collapse (boolean toStart)\n       throws DOMException", "description": "Collapse a Range onto one of its boundary-points"}, {"method_name": "selectNode", "method_sig": "void selectNode (Node refNode)\n         throws RangeException,\n                DOMException", "description": "Select a node and its contents"}, {"method_name": "selectNodeContents", "method_sig": "void selectNodeContents (Node refNode)\n                 throws RangeException,\n                        DOMException", "description": "Select the contents within a node"}, {"method_name": "compareBoundaryPoints", "method_sig": "short compareBoundaryPoints (short how,\n                            Range sourceRange)\n                     throws DOMException", "description": "Compare the boundary-points of two Ranges in a document."}, {"method_name": "deleteContents", "method_sig": "void deleteContents()\n             throws DOMException", "description": "Removes the contents of a Range from the containing document or\n document fragment without returning a reference to the removed\n content."}, {"method_name": "extractContents", "method_sig": "DocumentFragment extractContents()\n                          throws DOMException", "description": "Moves the contents of a Range from the containing document or document\n fragment to a new DocumentFragment."}, {"method_name": "cloneContents", "method_sig": "DocumentFragment cloneContents()\n                        throws DOMException", "description": "Duplicates the contents of a Range"}, {"method_name": "insertNode", "method_sig": "void insertNode (Node newNode)\n         throws DOMException,\n                RangeException", "description": "Inserts a node into the Document or DocumentFragment at the start of\n the Range. If the container is a Text node, this will be split at the\n start of the Range (as if the Text node's splitText method was\n performed at the insertion point) and the insertion will occur\n between the two resulting Text nodes. Adjacent Text nodes will not be\n automatically merged. If the node to be inserted is a\n DocumentFragment node, the children will be inserted rather than the\n DocumentFragment node itself."}, {"method_name": "surroundContents", "method_sig": "void surroundContents (Node newParent)\n               throws DOMException,\n                      RangeException", "description": "Reparents the contents of the Range to the given node and inserts the\n node at the position of the start of the Range."}, {"method_name": "cloneRange", "method_sig": "Range cloneRange()\n          throws DOMException", "description": "Produces a new Range whose boundary-points are equal to the\n boundary-points of the Range."}, {"method_name": "toString", "method_sig": "String toString()\n         throws DOMException", "description": "Returns the contents of a Range as a string. This string contains only\n the data characters, not any markup."}, {"method_name": "detach", "method_sig": "void detach()\n     throws DOMException", "description": "Called to indicate that the Range is no longer in use and that the\n implementation may relinquish any resources associated with this\n Range. Subsequent calls to any methods or attribute getters on this\n Range will result in a DOMException being thrown with an\n error code of INVALID_STATE_ERR."}]}