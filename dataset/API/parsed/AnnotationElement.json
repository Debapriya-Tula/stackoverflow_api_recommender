{"name": "Class AnnotationElement", "module": "jdk.jfr", "package": "jdk.jfr", "text": "Describes event metadata, such as labels, descriptions and units.\n \n The following example shows how AnnotationElement can be used to dynamically define events.\n\n \n \n   List<AnnotationElement> typeAnnotations = new ArrayList<>();\n   typeannotations.add(new AnnotationElement(Name.class, \"com.example.HelloWorld\");\n   typeAnnotations.add(new AnnotationElement(Label.class, \"Hello World\"));\n   typeAnnotations.add(new AnnotationElement(Description.class, \"Helps programmer getting started\"));\n\n   List<AnnotationElement> fieldAnnotations = new ArrayList<>();\n   fieldAnnotations.add(new AnnotationElement(Label.class, \"Message\"));\n\n   List<ValueDescriptor> fields = new ArrayList<>();\n   fields.add(new ValueDescriptor(String.class, \"message\", fieldAnnotations));\n\n   EventFactory f = EventFactory.create(typeAnnotations, fields);\n   Event event = f.newEvent();\n   event.commit();\n \n ", "codes": ["public final class AnnotationElement\nextends Object"], "fields": [], "methods": [{"method_name": "getValues", "method_sig": "public List<Object> getValues()", "description": "Returns an immutable list of annotation values in an order that matches the\n value descriptors for this AnnotationElement."}, {"method_name": "getValueDescriptors", "method_sig": "public List<ValueDescriptor> getValueDescriptors()", "description": "Returns an immutable list of descriptors that describes the annotation values\n for this AnnotationElement."}, {"method_name": "getAnnotationElements", "method_sig": "public List<AnnotationElement> getAnnotationElements()", "description": "Returns an immutable list of annotation elements for this\n AnnotationElement."}, {"method_name": "getTypeName", "method_sig": "public String getTypeName()", "description": "Returns the fully qualified name of the annotation type that corresponds to\n this AnnotationElement (for example, \"jdk.jfr.Label\")."}, {"method_name": "getValue", "method_sig": "public Object getValue (String name)", "description": "Returns a value for this AnnotationElement."}, {"method_name": "hasValue", "method_sig": "public boolean hasValue (String name)", "description": "Returns true if an annotation value with the specified name exists in\n this AnnotationElement."}, {"method_name": "getAnnotation", "method_sig": "public final <A> A getAnnotation (Class<? extends Annotation> annotationType)", "description": "Returns the first annotation for the specified type if an\n AnnotationElement with the same name exists, else null."}, {"method_name": "getTypeId", "method_sig": "public long getTypeId()", "description": "Returns the type ID for this AnnotationElement.\n \n The ID is a unique identifier for the type in the Java Virtual Machine (JVM). The ID might not\n be the same between JVM instances."}]}