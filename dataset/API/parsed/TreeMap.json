{"name": "Class TreeMap<K,\u200bV>", "module": "java.base", "package": "java.util", "text": "A Red-Black tree based NavigableMap implementation.\n The map is sorted according to the natural\n ordering of its keys, or by a Comparator provided at map\n creation time, depending on which constructor is used.\n\n This implementation provides guaranteed log(n) time cost for the\n containsKey, get, put and remove\n operations.  Algorithms are adaptations of those in Cormen, Leiserson, and\n Rivest's Introduction to Algorithms.\n\n Note that the ordering maintained by a tree map, like any sorted map, and\n whether or not an explicit comparator is provided, must be consistent\n with equals if this sorted map is to correctly implement the\n Map interface.  (See Comparable or Comparator for a\n precise definition of consistent with equals.)  This is so because\n the Map interface is defined in terms of the equals\n operation, but a sorted map performs all key comparisons using its \n compareTo (or compare) method, so two keys that are deemed equal by\n this method are, from the standpoint of the sorted map, equal.  The behavior\n of a sorted map is well-defined even if its ordering is\n inconsistent with equals; it just fails to obey the general contract\n of the Map interface.\n\n Note that this implementation is not synchronized.\n If multiple threads access a map concurrently, and at least one of the\n threads modifies the map structurally, it must be synchronized\n externally.  (A structural modification is any operation that adds or\n deletes one or more mappings; merely changing the value associated\n with an existing key is not a structural modification.)  This is\n typically accomplished by synchronizing on some object that naturally\n encapsulates the map.\n If no such object exists, the map should be \"wrapped\" using the\n Collections.synchronizedSortedMap\n method.  This is best done at creation time, to prevent accidental\n unsynchronized access to the map: \n   SortedMap m = Collections.synchronizedSortedMap(new TreeMap(...));\nThe iterators returned by the iterator method of the collections\n returned by all of this class's \"collection view methods\" are\n fail-fast: if the map is structurally modified at any time after\n the iterator is created, in any way except through the iterator's own\n remove method, the iterator will throw a ConcurrentModificationException.  Thus, in the face of concurrent\n modification, the iterator fails quickly and cleanly, rather than risking\n arbitrary, non-deterministic behavior at an undetermined time in the future.\n\n Note that the fail-fast behavior of an iterator cannot be guaranteed\n as it is, generally speaking, impossible to make any hard guarantees in the\n presence of unsynchronized concurrent modification.  Fail-fast iterators\n throw ConcurrentModificationException on a best-effort basis.\n Therefore, it would be wrong to write a program that depended on this\n exception for its correctness:   the fail-fast behavior of iterators\n should be used only to detect bugs.\nAll Map.Entry pairs returned by methods in this class\n and its views represent snapshots of mappings at the time they were\n produced. They do not support the Entry.setValue\n method. (Note however that it is possible to change mappings in the\n associated map using put.)\n\n This class is a member of the\n \n Java Collections Framework.", "codes": ["public class TreeMap<K, V>\nextends AbstractMap<K, V>\nimplements NavigableMap<K, V>, Cloneable, Serializable"], "fields": [], "methods": [{"method_name": "size", "method_sig": "public int size()", "description": "Returns the number of key-value mappings in this map."}, {"method_name": "containsKey", "method_sig": "public boolean containsKey (Object key)", "description": "Returns true if this map contains a mapping for the specified\n key."}, {"method_name": "containsValue", "method_sig": "public boolean containsValue (Object value)", "description": "Returns true if this map maps one or more keys to the\n specified value.  More formally, returns true if and only if\n this map contains at least one mapping to a value v such\n that (value==null ? v==null : value.equals(v)).  This\n operation will probably require time linear in the map size for\n most implementations."}, {"method_name": "get", "method_sig": "public V get (Object key)", "description": "Returns the value to which the specified key is mapped,\n or null if this map contains no mapping for the key.\n\n More formally, if this map contains a mapping from a key\n k to a value v such that key compares\n equal to k according to the map's ordering, then this\n method returns v; otherwise it returns null.\n (There can be at most one such mapping.)\n\n A return value of null does not necessarily\n indicate that the map contains no mapping for the key; it's also\n possible that the map explicitly maps the key to null.\n The containsKey operation may be used to\n distinguish these two cases."}, {"method_name": "firstKey", "method_sig": "public K firstKey()", "description": "Description copied from interface:\u00a0SortedMap"}, {"method_name": "lastKey", "method_sig": "public K lastKey()", "description": "Description copied from interface:\u00a0SortedMap"}, {"method_name": "putAll", "method_sig": "public void putAll (Map<? extends K, ? extends V> map)", "description": "Copies all of the mappings from the specified map to this map.\n These mappings replace any mappings that this map had for any\n of the keys currently in the specified map."}, {"method_name": "put", "method_sig": "public V put (K key,\n             V value)", "description": "Associates the specified value with the specified key in this map.\n If the map previously contained a mapping for the key, the old\n value is replaced."}, {"method_name": "remove", "method_sig": "public V remove (Object key)", "description": "Removes the mapping for this key from this TreeMap if present."}, {"method_name": "clear", "method_sig": "public void clear()", "description": "Removes all of the mappings from this map.\n The map will be empty after this call returns."}, {"method_name": "clone", "method_sig": "public Object clone()", "description": "Returns a shallow copy of this TreeMap instance. (The keys and\n values themselves are not cloned.)"}, {"method_name": "firstEntry", "method_sig": "public Map.Entry<K, V> firstEntry()", "description": "Description copied from interface:\u00a0NavigableMap"}, {"method_name": "lastEntry", "method_sig": "public Map.Entry<K, V> lastEntry()", "description": "Description copied from interface:\u00a0NavigableMap"}, {"method_name": "pollFirstEntry", "method_sig": "public Map.Entry<K, V> pollFirstEntry()", "description": "Description copied from interface:\u00a0NavigableMap"}, {"method_name": "pollLastEntry", "method_sig": "public Map.Entry<K, V> pollLastEntry()", "description": "Description copied from interface:\u00a0NavigableMap"}, {"method_name": "lowerEntry", "method_sig": "public Map.Entry<K, V> lowerEntry (K key)", "description": "Description copied from interface:\u00a0NavigableMap"}, {"method_name": "lowerKey", "method_sig": "public K lowerKey (K key)", "description": "Description copied from interface:\u00a0NavigableMap"}, {"method_name": "floorEntry", "method_sig": "public Map.Entry<K, V> floorEntry (K key)", "description": "Description copied from interface:\u00a0NavigableMap"}, {"method_name": "floorKey", "method_sig": "public K floorKey (K key)", "description": "Description copied from interface:\u00a0NavigableMap"}, {"method_name": "ceilingEntry", "method_sig": "public Map.Entry<K, V> ceilingEntry (K key)", "description": "Description copied from interface:\u00a0NavigableMap"}, {"method_name": "ceilingKey", "method_sig": "public K ceilingKey (K key)", "description": "Description copied from interface:\u00a0NavigableMap"}, {"method_name": "higherEntry", "method_sig": "public Map.Entry<K, V> higherEntry (K key)", "description": "Description copied from interface:\u00a0NavigableMap"}, {"method_name": "higherKey", "method_sig": "public K higherKey (K key)", "description": "Description copied from interface:\u00a0NavigableMap"}, {"method_name": "keySet", "method_sig": "public Set<K> keySet()", "description": "Returns a Set view of the keys contained in this map.\n\n The set's iterator returns the keys in ascending order.\n The set's spliterator is\n late-binding,\n fail-fast, and additionally reports Spliterator.SORTED\n and Spliterator.ORDERED with an encounter order that is ascending\n key order.  The spliterator's comparator (see\n Spliterator.getComparator()) is null if\n the tree map's comparator (see SortedMap.comparator()) is null.\n Otherwise, the spliterator's comparator is the same as or imposes the\n same total ordering as the tree map's comparator.\n\n The set is backed by the map, so changes to the map are\n reflected in the set, and vice-versa.  If the map is modified\n while an iteration over the set is in progress (except through\n the iterator's own remove operation), the results of\n the iteration are undefined.  The set supports element removal,\n which removes the corresponding mapping from the map, via the\n Iterator.remove, Set.remove,\n removeAll, retainAll, and clear\n operations.  It does not support the add or addAll\n operations."}, {"method_name": "navigableKeySet", "method_sig": "public NavigableSet<K> navigableKeySet()", "description": "Description copied from interface:\u00a0NavigableMap"}, {"method_name": "descendingKeySet", "method_sig": "public NavigableSet<K> descendingKeySet()", "description": "Description copied from interface:\u00a0NavigableMap"}, {"method_name": "values", "method_sig": "public Collection<V> values()", "description": "Returns a Collection view of the values contained in this map.\n\n The collection's iterator returns the values in ascending order\n of the corresponding keys. The collection's spliterator is\n late-binding,\n fail-fast, and additionally reports Spliterator.ORDERED\n with an encounter order that is ascending order of the corresponding\n keys.\n\n The collection is backed by the map, so changes to the map are\n reflected in the collection, and vice-versa.  If the map is\n modified while an iteration over the collection is in progress\n (except through the iterator's own remove operation),\n the results of the iteration are undefined.  The collection\n supports element removal, which removes the corresponding\n mapping from the map, via the Iterator.remove,\n Collection.remove, removeAll,\n retainAll and clear operations.  It does not\n support the add or addAll operations."}, {"method_name": "entrySet", "method_sig": "public Set<Map.Entry<K, V>> entrySet()", "description": "Returns a Set view of the mappings contained in this map.\n\n The set's iterator returns the entries in ascending key order. The\n set's spliterator is\n late-binding,\n fail-fast, and additionally reports Spliterator.SORTED and\n Spliterator.ORDERED with an encounter order that is ascending key\n order.\n\n The set is backed by the map, so changes to the map are\n reflected in the set, and vice-versa.  If the map is modified\n while an iteration over the set is in progress (except through\n the iterator's own remove operation, or through the\n setValue operation on a map entry returned by the\n iterator) the results of the iteration are undefined.  The set\n supports element removal, which removes the corresponding\n mapping from the map, via the Iterator.remove,\n Set.remove, removeAll, retainAll and\n clear operations.  It does not support the\n add or addAll operations."}, {"method_name": "descendingMap", "method_sig": "public NavigableMap<K, V> descendingMap()", "description": "Description copied from interface:\u00a0NavigableMap"}, {"method_name": "subMap", "method_sig": "public NavigableMap<K, V> subMap (K fromKey,\n                                      boolean fromInclusive,\n                                      K toKey,\n                                      boolean toInclusive)", "description": "Description copied from interface:\u00a0NavigableMap"}, {"method_name": "headMap", "method_sig": "public NavigableMap<K, V> headMap (K toKey,\n                                       boolean inclusive)", "description": "Description copied from interface:\u00a0NavigableMap"}, {"method_name": "tailMap", "method_sig": "public NavigableMap<K, V> tailMap (K fromKey,\n                                       boolean inclusive)", "description": "Description copied from interface:\u00a0NavigableMap"}, {"method_name": "subMap", "method_sig": "public SortedMap<K, V> subMap (K fromKey,\n                                   K toKey)", "description": "Description copied from interface:\u00a0NavigableMap"}, {"method_name": "headMap", "method_sig": "public SortedMap<K, V> headMap (K toKey)", "description": "Description copied from interface:\u00a0NavigableMap"}, {"method_name": "tailMap", "method_sig": "public SortedMap<K, V> tailMap (K fromKey)", "description": "Description copied from interface:\u00a0NavigableMap"}]}