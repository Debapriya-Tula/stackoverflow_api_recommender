{"name": "Interface RenderedImage", "module": "java.desktop", "package": "java.awt.image", "text": "RenderedImage is a common interface for objects which contain\n or can produce image data in the form of Rasters.  The image\n data may be stored/produced as a single tile or a regular array\n of tiles.", "codes": ["public interface RenderedImage"], "fields": [], "methods": [{"method_name": "getSources", "method_sig": "Vector<RenderedImage> getSources()", "description": "Returns a vector of RenderedImages that are the immediate sources of\n image data for this RenderedImage.  This method returns null if\n the RenderedImage object has no information about its immediate\n sources.  It returns an empty Vector if the RenderedImage object has\n no immediate sources."}, {"method_name": "getProperty", "method_sig": "Object getProperty (String name)", "description": "Gets a property from the property set of this image.  The set of\n properties and whether it is immutable is determined by the\n implementing class.  This method returns\n java.awt.Image.UndefinedProperty if the specified property is\n not defined for this RenderedImage."}, {"method_name": "getPropertyNames", "method_sig": "String[] getPropertyNames()", "description": "Returns an array of names recognized by\n getProperty(String)\n or null, if no property names are recognized."}, {"method_name": "getColorModel", "method_sig": "ColorModel getColorModel()", "description": "Returns the ColorModel associated with this image.  All Rasters\n returned from this image will have this as their ColorModel.  This\n can return null."}, {"method_name": "getSampleModel", "method_sig": "SampleModel getSampleModel()", "description": "Returns the SampleModel associated with this image.  All Rasters\n returned from this image will have this as their SampleModel."}, {"method_name": "getWidth", "method_sig": "int getWidth()", "description": "Returns the width of the RenderedImage."}, {"method_name": "getHeight", "method_sig": "int getHeight()", "description": "Returns the height of the RenderedImage."}, {"method_name": "getMinX", "method_sig": "int getMinX()", "description": "Returns the minimum X coordinate (inclusive) of the RenderedImage."}, {"method_name": "getMinY", "method_sig": "int getMinY()", "description": "Returns the minimum Y coordinate (inclusive) of the RenderedImage."}, {"method_name": "getNumXTiles", "method_sig": "int getNumXTiles()", "description": "Returns the number of tiles in the X direction."}, {"method_name": "getNumYTiles", "method_sig": "int getNumYTiles()", "description": "Returns the number of tiles in the Y direction."}, {"method_name": "getMinTileX", "method_sig": "int getMinTileX()", "description": "Returns the minimum tile index in the X direction."}, {"method_name": "getMinTileY", "method_sig": "int getMinTileY()", "description": "Returns the minimum tile index in the Y direction."}, {"method_name": "getTileWidth", "method_sig": "int getTileWidth()", "description": "Returns the tile width in pixels.  All tiles must have the same\n  width."}, {"method_name": "getTileHeight", "method_sig": "int getTileHeight()", "description": "Returns the tile height in pixels.  All tiles must have the same\n  height."}, {"method_name": "getTileGridXOffset", "method_sig": "int getTileGridXOffset()", "description": "Returns the X offset of the tile grid relative to the origin,\n i.e., the X coordinate of the upper-left pixel of tile (0, 0).\n (Note that tile (0, 0) may not actually exist.)"}, {"method_name": "getTileGridYOffset", "method_sig": "int getTileGridYOffset()", "description": "Returns the Y offset of the tile grid relative to the origin,\n i.e., the Y coordinate of the upper-left pixel of tile (0, 0).\n (Note that tile (0, 0) may not actually exist.)"}, {"method_name": "getTile", "method_sig": "Raster getTile (int tileX,\n               int tileY)", "description": "Returns tile (tileX, tileY).  Note that tileX and tileY are indices\n into the tile array, not pixel locations.  The Raster that is returned\n is live and will be updated if the image is changed."}, {"method_name": "getData", "method_sig": "Raster getData()", "description": "Returns the image as one large tile (for tile based\n images this will require fetching the whole image\n and copying the image data over).  The Raster returned is\n a copy of the image data and will not be updated if the image\n is changed."}, {"method_name": "getData", "method_sig": "Raster getData (Rectangle rect)", "description": "Computes and returns an arbitrary region of the RenderedImage.\n The Raster returned is a copy of the image data and will not\n be updated if the image is changed."}, {"method_name": "copyData", "method_sig": "WritableRaster copyData (WritableRaster raster)", "description": "Computes an arbitrary rectangular region of the RenderedImage\n and copies it into a caller-supplied WritableRaster.  The region\n to be computed is determined from the bounds of the supplied\n WritableRaster.  The supplied WritableRaster must have a\n SampleModel that is compatible with this image.  If raster is null,\n an appropriate WritableRaster is created."}]}