{"name": "Interface Flow.Publisher<T>", "module": "java.base", "package": "java.util.concurrent", "text": "A producer of items (and related control messages) received by\n Subscribers.  Each current Flow.Subscriber receives the same\n items (via method onNext) in the same order, unless\n drops or errors are encountered. If a Publisher encounters an\n error that does not allow items to be issued to a Subscriber,\n that Subscriber receives onError, and then receives no\n further messages.  Otherwise, when it is known that no further\n messages will be issued to it, a subscriber receives \n onComplete.  Publishers ensure that Subscriber method\n invocations for each subscription are strictly ordered in happens-before\n order.\n\n Publishers may vary in policy about whether drops (failures\n to issue an item because of resource limitations) are treated\n as unrecoverable errors.  Publishers may also vary about\n whether Subscribers receive items that were produced or\n available before they subscribed.", "codes": ["@FunctionalInterface\npublic static interface Flow.Publisher<T>"], "fields": [], "methods": [{"method_name": "subscribe", "method_sig": "void subscribe (Flow.Subscriber<? super T> subscriber)", "description": "Adds the given Subscriber if possible.  If already\n subscribed, or the attempt to subscribe fails due to policy\n violations or errors, the Subscriber's onError\n method is invoked with an IllegalStateException.\n Otherwise, the Subscriber's onSubscribe method is\n invoked with a new Flow.Subscription.  Subscribers may\n enable receiving items by invoking the request\n method of this Subscription, and may unsubscribe by\n invoking its cancel method."}]}