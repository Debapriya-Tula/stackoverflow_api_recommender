{"name": "Class Activatable", "module": "java.rmi", "package": "java.rmi.activation", "text": "The Activatable class provides support for remote\n objects that require persistent access over time and that\n can be activated by the system.\n\n For the constructors and static exportObject methods,\n the stub for a remote object being exported is obtained as described in\n UnicastRemoteObject.\n\n An attempt to serialize explicitly an instance of this class will\n fail.", "codes": ["public abstract class Activatable\nextends RemoteServer"], "fields": [], "methods": [{"method_name": "getID", "method_sig": "protected ActivationID getID()", "description": "Returns the object's activation identifier.  The method is\n protected so that only subclasses can obtain an object's\n identifier."}, {"method_name": "register", "method_sig": "public static Remote register (ActivationDesc desc)\n                       throws UnknownGroupException,\n                              ActivationException,\n                              RemoteException", "description": "Register an object descriptor for an activatable remote\n object so that is can be activated on demand."}, {"method_name": "inactive", "method_sig": "public static boolean inactive (ActivationID id)\n                        throws UnknownObjectException,\n                               ActivationException,\n                               RemoteException", "description": "Informs the system that the object with the corresponding activation\n id is currently inactive. If the object is currently\n active, the object is \"unexported\" from the RMI runtime (only if\n there are no pending or in-progress calls)\n so the that it can no longer receive incoming calls. This call\n informs this VM's ActivationGroup that the object is inactive,\n that, in turn, informs its ActivationMonitor. If this call\n completes successfully, a subsequent activate request to the activator\n will cause the object to reactivate. The operation may still\n succeed if the object is considered active but has already\n unexported itself."}, {"method_name": "unregister", "method_sig": "public static void unregister (ActivationID id)\n                       throws UnknownObjectException,\n                              ActivationException,\n                              RemoteException", "description": "Revokes previous registration for the activation descriptor\n associated with id. An object can no longer be\n activated via that id."}, {"method_name": "exportObject", "method_sig": "public static ActivationID exportObject (Remote obj,\n                                        String location,\n                                        MarshalledObject<?> data,\n                                        boolean restart,\n                                        int port)\n                                 throws ActivationException,\n                                        RemoteException", "description": "Registers an activation descriptor (with the specified location,\n data, and restart mode) for the specified object, and exports that\n object with the specified port.\n\n Note: Using this method (as well as the\n Activatable constructors that both register and export\n an activatable remote object) is strongly discouraged because the\n actions of registering and exporting the remote object are\n not guaranteed to be atomic.  Instead, an application should\n register an activation descriptor and export a remote object\n separately, so that exceptions can be handled properly.\n\n This method invokes the exportObject method with the specified object, location, data,\n restart mode, and port, and null for both client and\n server socket factories, and then returns the resulting activation\n identifier."}, {"method_name": "exportObject", "method_sig": "public static ActivationID exportObject (Remote obj,\n                                        String location,\n                                        MarshalledObject<?> data,\n                                        boolean restart,\n                                        int port,\n                                        RMIClientSocketFactory csf,\n                                        RMIServerSocketFactory ssf)\n                                 throws ActivationException,\n                                        RemoteException", "description": "Registers an activation descriptor (with the specified location,\n data, and restart mode) for the specified object, and exports that\n object with the specified port, and the specified client and server\n socket factories.\n\n Note: Using this method (as well as the\n Activatable constructors that both register and export\n an activatable remote object) is strongly discouraged because the\n actions of registering and exporting the remote object are\n not guaranteed to be atomic.  Instead, an application should\n register an activation descriptor and export a remote object\n separately, so that exceptions can be handled properly.\n\n This method first registers an activation descriptor for the\n specified object as follows. It obtains the activation system by\n invoking the method ActivationGroup.getSystem.  This method then obtains an ActivationID for the object by invoking the activation system's\n registerObject method with\n an ActivationDesc constructed with the specified object's\n class name, and the specified location, data, and restart mode.  If\n an exception occurs obtaining the activation system or registering\n the activation descriptor, that exception is thrown to the caller.\n\n Next, this method exports the object by invoking the exportObject method with the specified remote object, the\n activation identifier obtained from registration, the specified\n port, and the specified client and server socket factories.  If an\n exception occurs exporting the object, this method attempts to\n unregister the activation identifier (obtained from registration) by\n invoking the activation system's unregisterObject method with the\n activation identifier.  If an exception occurs unregistering the\n identifier, that exception is ignored, and the original exception\n that occurred exporting the object is thrown to the caller.\n\n Finally, this method invokes the activeObject method on the activation\n group in this VM with the activation identifier and the specified\n remote object, and returns the activation identifier to the caller."}, {"method_name": "exportObject", "method_sig": "public static Remote exportObject (Remote obj,\n                                  ActivationID id,\n                                  int port)\n                           throws RemoteException", "description": "Export the activatable remote object to the RMI runtime to make\n the object available to receive incoming calls. The object is\n exported on an anonymous port, if port is zero. \n\n During activation, this exportObject method should\n be invoked explicitly by an \"activatable\" object, that does not\n extend the Activatable class. There is no need for objects\n that do extend the Activatable class to invoke this\n method directly because the object is exported during construction."}, {"method_name": "exportObject", "method_sig": "public static Remote exportObject (Remote obj,\n                                  ActivationID id,\n                                  int port,\n                                  RMIClientSocketFactory csf,\n                                  RMIServerSocketFactory ssf)\n                           throws RemoteException", "description": "Export the activatable remote object to the RMI runtime to make\n the object available to receive incoming calls. The object is\n exported on an anonymous port, if port is zero. \n\n During activation, this exportObject method should\n be invoked explicitly by an \"activatable\" object, that does not\n extend the Activatable class. There is no need for objects\n that do extend the Activatable class to invoke this\n method directly because the object is exported during construction."}, {"method_name": "unexportObject", "method_sig": "public static boolean unexportObject (Remote obj,\n                                     boolean force)\n                              throws NoSuchObjectException", "description": "Remove the remote object, obj, from the RMI runtime. If\n successful, the object can no longer accept incoming RMI calls.\n If the force parameter is true, the object is forcibly unexported\n even if there are pending calls to the remote object or the\n remote object still has calls in progress.  If the force\n parameter is false, the object is only unexported if there are\n no pending or in progress calls to the object."}]}