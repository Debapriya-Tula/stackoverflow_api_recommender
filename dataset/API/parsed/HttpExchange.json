{"name": "Class HttpExchange", "module": "jdk.httpserver", "package": "com.sun.net.httpserver", "text": "This class encapsulates a HTTP request received and a\n response to be generated in one exchange. It provides methods\n for examining the request from the client, and for building and\n sending the response.\n \n The typical life-cycle of a HttpExchange is shown in the sequence\n below.\n getRequestMethod() to determine the command\n getRequestHeaders() to examine the request headers (if needed)\n getRequestBody() returns a InputStream for reading the request body.\n     After reading the request body, the stream is close.\n getResponseHeaders() to set any response headers, except content-length\n sendResponseHeaders(int,long) to send the response headers. Must be called before\n next step.\n getResponseBody() to get a OutputStream to send the response body.\n      When the response body has been written, the stream must be closed to terminate the exchange.\n \nTerminating exchanges\n\n Exchanges are terminated when both the request InputStream and response OutputStream are closed.\n Closing the OutputStream, implicitly closes the InputStream (if it is not already closed).\n However, it is recommended\n to consume all the data from the InputStream before closing it.\n The convenience method close() does all of these tasks.\n Closing an exchange without consuming all of the request body is not an error\n but may make the underlying TCP connection unusable for following exchanges.\n The effect of failing to terminate an exchange is undefined, but will typically\n result in resources failing to be freed/reused.", "codes": ["public abstract class HttpExchange\nextends Object"], "fields": [], "methods": [{"method_name": "getRequestHeaders", "method_sig": "public abstract Headers getRequestHeaders()", "description": "Returns an immutable Map containing the HTTP headers that were\n included with this request. The keys in this Map will be the header\n names, while the values will be a List of Strings containing each value\n that was included (either for a header that was listed several times,\n or one that accepts a comma-delimited list of values on a single line).\n In either of these cases, the values for the header name will be\n presented in the order that they were included in the request.\n \n The keys in Map are case-insensitive."}, {"method_name": "getResponseHeaders", "method_sig": "public abstract Headers getResponseHeaders()", "description": "Returns a mutable Map into which the HTTP response headers can be stored\n and which will be transmitted as part of this response. The keys in the\n Map will be the header names, while the values must be a List of Strings\n containing each value that should be included multiple times\n (in the order that they should be included).\n \n The keys in Map are case-insensitive."}, {"method_name": "getRequestURI", "method_sig": "public abstract URI getRequestURI()", "description": "Get the request URI"}, {"method_name": "getRequestMethod", "method_sig": "public abstract String getRequestMethod()", "description": "Get the request method"}, {"method_name": "getHttpContext", "method_sig": "public abstract HttpContext getHttpContext()", "description": "Get the HttpContext for this exchange"}, {"method_name": "close", "method_sig": "public abstract void close()", "description": "Ends this exchange by doing the following in sequence:\nclose the request InputStream, if not already closed;\nclose the response OutputStream, if not already closed.\n"}, {"method_name": "getRequestBody", "method_sig": "public abstract InputStream getRequestBody()", "description": "returns a stream from which the request body can be read.\n Multiple calls to this method will return the same stream.\n It is recommended that applications should consume (read) all of the\n data from this stream before closing it. If a stream is closed\n before all data has been read, then the close() call will\n read and discard remaining data (up to an implementation specific\n number of bytes)."}, {"method_name": "getResponseBody", "method_sig": "public abstract OutputStream getResponseBody()", "description": "returns a stream to which the response body must be\n written. sendResponseHeaders(int,long)) must be called prior to calling\n this method. Multiple calls to this method (for the same exchange)\n will return the same stream. In order to correctly terminate\n each exchange, the output stream must be closed, even if no\n response body is being sent.\n \n Closing this stream implicitly\n closes the InputStream returned from getRequestBody()\n (if it is not already closed).\n \n If the call to sendResponseHeaders() specified a fixed response\n body length, then the exact number of bytes specified in that\n call must be written to this stream. If too many bytes are written,\n then write() will throw an IOException. If too few bytes are written\n then the stream close() will throw an IOException. In both cases,\n the exchange is aborted and the underlying TCP connection closed."}, {"method_name": "sendResponseHeaders", "method_sig": "public abstract void sendResponseHeaders (int rCode,\n                                         long responseLength)\n                                  throws IOException", "description": "Starts sending the response back to the client using the current set of response headers\n and the numeric response code as specified in this method. The response body length is also specified\n as follows. If the response length parameter is greater than zero, this specifies an exact\n number of bytes to send and the application must send that exact amount of data.\n If the response length parameter is zero, then chunked transfer encoding is\n used and an arbitrary amount of data may be sent. The application terminates the\n response body by closing the OutputStream. If response length has the value -1\n then no response body is being sent.\n \n If the content-length response header has not already been set then\n this is set to the appropriate value depending on the response length parameter.\n \n This method must be called prior to calling getResponseBody()."}, {"method_name": "getRemoteAddress", "method_sig": "public abstract InetSocketAddress getRemoteAddress()", "description": "Returns the address of the remote entity invoking this request"}, {"method_name": "getResponseCode", "method_sig": "public abstract int getResponseCode()", "description": "Returns the response code, if it has already been set"}, {"method_name": "getLocalAddress", "method_sig": "public abstract InetSocketAddress getLocalAddress()", "description": "Returns the local address on which the request was received"}, {"method_name": "getProtocol", "method_sig": "public abstract String getProtocol()", "description": "Returns the protocol string from the request in the form\n protocol/majorVersion.minorVersion. For example,\n \"HTTP/1.1\""}, {"method_name": "getAttribute", "method_sig": "public abstract Object getAttribute (String name)", "description": "Filter modules may store arbitrary objects with HttpExchange\n instances as an out-of-band communication mechanism. Other Filters\n or the exchange handler may then access these objects.\n \n Each Filter class will document the attributes which they make\n available."}, {"method_name": "setAttribute", "method_sig": "public abstract void setAttribute (String name,\n                                  Object value)", "description": "Filter modules may store arbitrary objects with HttpExchange\n instances as an out-of-band communication mechanism. Other Filters\n or the exchange handler may then access these objects.\n \n Each Filter class will document the attributes which they make\n available."}, {"method_name": "setStreams", "method_sig": "public abstract void setStreams (InputStream i,\n                                OutputStream o)", "description": "Used by Filters to wrap either (or both) of this exchange's InputStream\n and OutputStream, with the given filtered streams so\n that subsequent calls to getRequestBody() will\n return the given InputStream, and calls to\n getResponseBody() will return the given\n OutputStream. The streams provided to this\n call must wrap the original streams, and may be (but are not\n required to be) sub-classes of FilterInputStream\n and FilterOutputStream."}, {"method_name": "getPrincipal", "method_sig": "public abstract HttpPrincipal getPrincipal()", "description": "If an authenticator is set on the HttpContext that owns this exchange,\n then this method will return the HttpPrincipal that represents\n the authenticated user for this HttpExchange."}]}