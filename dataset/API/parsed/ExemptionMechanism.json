{"name": "Class ExemptionMechanism", "module": "java.base", "package": "javax.crypto", "text": "This class provides the functionality of an exemption mechanism, examples\n of which are key recovery, key weakening, and\n key escrow.\n\n Applications or applets that use an exemption mechanism may be granted\n stronger encryption capabilities than those which don't.", "codes": ["public class ExemptionMechanism\nextends Object"], "fields": [], "methods": [{"method_name": "getName", "method_sig": "public final String getName()", "description": "Returns the exemption mechanism name of this\n ExemptionMechanism object.\n\n This is the same name that was specified in one of the\n getInstance calls that created this\n ExemptionMechanism object."}, {"method_name": "getInstance", "method_sig": "public static final ExemptionMechanism getInstance (String algorithm)\n                                            throws NoSuchAlgorithmException", "description": "Returns an ExemptionMechanism object that implements the\n specified exemption mechanism algorithm.\n\n  This method traverses the list of registered security Providers,\n starting with the most preferred Provider.\n A new ExemptionMechanism object encapsulating the\n ExemptionMechanismSpi implementation from the first\n Provider that supports the specified algorithm is returned.\n\n  Note that the list of registered providers may be retrieved via\n the Security.getProviders() method."}, {"method_name": "getInstance", "method_sig": "public static final ExemptionMechanism getInstance (String algorithm,\n                                                   String provider)\n                                            throws NoSuchAlgorithmException,\n                                                   NoSuchProviderException", "description": "Returns an ExemptionMechanism object that implements the\n specified exemption mechanism algorithm.\n\n  A new ExemptionMechanism object encapsulating the\n ExemptionMechanismSpi implementation from the specified provider\n is returned.  The specified provider must be registered\n in the security provider list.\n\n  Note that the list of registered providers may be retrieved via\n the Security.getProviders() method."}, {"method_name": "getInstance", "method_sig": "public static final ExemptionMechanism getInstance (String algorithm,\n                                                   Provider provider)\n                                            throws NoSuchAlgorithmException", "description": "Returns an ExemptionMechanism object that implements the\n specified exemption mechanism algorithm.\n\n  A new ExemptionMechanism object encapsulating the\n ExemptionMechanismSpi implementation from the specified Provider\n object is returned.  Note that the specified Provider object\n does not have to be registered in the provider list."}, {"method_name": "getProvider", "method_sig": "public final Provider getProvider()", "description": "Returns the provider of this ExemptionMechanism object."}, {"method_name": "isCryptoAllowed", "method_sig": "public final boolean isCryptoAllowed (Key key)\n                              throws ExemptionMechanismException", "description": "Returns whether the result blob has been generated successfully by this\n exemption mechanism.\n\n The method also makes sure that the key passed in is the same as\n the one this exemption mechanism used in initializing and generating\n phases."}, {"method_name": "getOutputSize", "method_sig": "public final int getOutputSize (int inputLen)\n                        throws IllegalStateException", "description": "Returns the length in bytes that an output buffer would need to be in\n order to hold the result of the next\n genExemptionBlob\n operation, given the input length inputLen (in bytes).\n\n The actual output length of the next\n genExemptionBlob\n call may be smaller than the length returned by this method."}, {"method_name": "init", "method_sig": "public final void init (Key key)\n                throws InvalidKeyException,\n                       ExemptionMechanismException", "description": "Initializes this exemption mechanism with a key.\n\n If this exemption mechanism requires any algorithm parameters\n that cannot be derived from the given key, the\n underlying exemption mechanism implementation is supposed to\n generate the required parameters itself (using provider-specific\n default values); in the case that algorithm parameters must be\n specified by the caller, an InvalidKeyException is raised."}, {"method_name": "init", "method_sig": "public final void init (Key key,\n                       AlgorithmParameterSpec params)\n                throws InvalidKeyException,\n                       InvalidAlgorithmParameterException,\n                       ExemptionMechanismException", "description": "Initializes this exemption mechanism with a key and a set of algorithm\n parameters.\n\n If this exemption mechanism requires any algorithm parameters\n and params is null, the underlying exemption\n mechanism implementation is supposed to generate the required\n parameters itself (using provider-specific default values); in the case\n that algorithm parameters must be specified by the caller, an\n InvalidAlgorithmParameterException is raised."}, {"method_name": "init", "method_sig": "public final void init (Key key,\n                       AlgorithmParameters params)\n                throws InvalidKeyException,\n                       InvalidAlgorithmParameterException,\n                       ExemptionMechanismException", "description": "Initializes this exemption mechanism with a key and a set of algorithm\n parameters.\n\n If this exemption mechanism requires any algorithm parameters\n and params is null, the underlying exemption mechanism\n implementation is supposed to generate the required parameters itself\n (using provider-specific default values); in the case that algorithm\n parameters must be specified by the caller, an\n InvalidAlgorithmParameterException is raised."}, {"method_name": "genExemptionBlob", "method_sig": "public final byte[] genExemptionBlob()\n                              throws IllegalStateException,\n                                     ExemptionMechanismException", "description": "Generates the exemption mechanism key blob."}, {"method_name": "genExemptionBlob", "method_sig": "public final int genExemptionBlob (byte[] output)\n                           throws IllegalStateException,\n                                  ShortBufferException,\n                                  ExemptionMechanismException", "description": "Generates the exemption mechanism key blob, and stores the result in\n the output buffer.\n\n If the output buffer is too small to hold the result,\n a ShortBufferException is thrown. In this case, repeat this\n call with a larger output buffer. Use\n getOutputSize to determine how big\n the output buffer should be."}, {"method_name": "genExemptionBlob", "method_sig": "public final int genExemptionBlob (byte[] output,\n                                  int outputOffset)\n                           throws IllegalStateException,\n                                  ShortBufferException,\n                                  ExemptionMechanismException", "description": "Generates the exemption mechanism key blob, and stores the result in\n the output buffer, starting at outputOffset\n inclusive.\n\n If the output buffer is too small to hold the result,\n a ShortBufferException is thrown. In this case, repeat this\n call with a larger output buffer. Use\n getOutputSize to determine how big\n the output buffer should be."}]}