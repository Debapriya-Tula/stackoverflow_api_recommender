{"name": "Class CatalogFeatures", "module": "java.xml", "package": "javax.xml.catalog", "text": "The CatalogFeatures holds a collection of features and properties.\n\n\n \nCatalog Features\n\n\nFeature\nDescription\nProperty Name\nSystem Property [1]\njaxp.properties [1]\nValue [2]\nAction\n\n\nType\nValue\n\n\n\n\nFILES\nA semicolon-delimited list of URIs to locate the catalog files.\n The URIs must be absolute and have a URL protocol handler for the URI scheme.\n \njavax.xml.catalog.files\njavax.xml.catalog.files\njavax.xml.catalog.files\nString\nURIs\n\n Reads the first catalog as the current catalog; Loads others if no match\n is found in the current catalog including delegate catalogs if any.\n \n\n\nPREFER\nIndicates the preference between the public and system\n identifiers. The default value is public [3].\njavax.xml.catalog.prefer\nN/A\nN/A\nString\nsystem\n\n Searches system entries for a match; Searches public entries when\n external identifier specifies only a public identifier\n\n\npublic\n\n Searches system entries for a match; Searches public entries when\n there is no matching system entry.\n\n\nDEFER\nIndicates that the alternative catalogs including those\n specified in delegate entries or nextCatalog are not read until they are\n needed. The default value is true.\njavax.xml.catalog.defer [4]\njavax.xml.catalog.defer\njavax.xml.catalog.defer\nString\ntrue\n\n Loads alternative catalogs as needed.\n \n\n\nfalse\n\n Loads all catalogs[5]. \n\n\nRESOLVE\nDetermines the action if there is no matching entry found after\n all of the specified catalogs are exhausted. The default is strict.\njavax.xml.catalog.resolve [4]\njavax.xml.catalog.resolve\njavax.xml.catalog.resolve\nString\nstrict\n\n Throws CatalogException if there is no match.\n \n\n\ncontinue\n\n Allows the XML parser to continue as if there is no match.\n \n\n\nignore\n\n Tells the XML parser to skip the external references if there no match.\n \n\n\n\n\n[1] There is no System property for the features that marked as \"N/A\".\n\n \n[2] The value shall be exactly as listed in this table, case-sensitive.\n Any unspecified value will result in IllegalArgumentException.\n \n[3] The Catalog specification defined complex rules on\n \n the prefer attribute. Although the prefer can be public or system, the\n specification actually made system the preferred option, that is, no matter\n the option, a system entry is always used if found. Public entries are only\n considered if the prefer is public and system entries are not found. It is\n therefore recommended that the prefer attribute be set as public\n (which is the default).\n \n[4] Although non-standard attributes in the OASIS Catalog specification,\n defer and resolve are recognized by the Java Catalog API the\n same as the prefer as being an attribute in the catalog entry of the\n main catalog. Note that only the attributes specified for the catalog entry\n of the main Catalog file will be used.\n \n[5] If the intention is to share an entire catalog store, it may be desirable to\n set the property javax.xml.catalog.defer to false to allow the entire\n catalog to be pre-loaded.\n\n Scope and Order\n Features and properties can be set through the catalog file, the Catalog API,\n system properties, and jaxp.properties, with a preference in the same order.\n \n Properties that are specified as attributes in the catalog file for the\n catalog and group entries shall take preference over any of the other settings.\n For example, if a prefer attribute is set in the catalog file as in\n <catalog prefer=\"public\">, any other input for the \"prefer\" property\n is not necessary or will be ignored.\n \n Properties set through the Catalog API override those that may have been set\n by system properties and/or in jaxp.properties. In case of multiple\n interfaces, the latest in a procedure shall take preference. For\n CatalogFeatures.Feature.FILES, this means that the URI(s) specified through the methods\n of the CatalogManager will override any that may have been entered\n through the CatalogFeatures.Builder.\n\n \n System properties when set shall override those in jaxp.properties.\n \n The jaxp.properties file is typically in the conf directory of the Java\n installation. The file is read only once by the JAXP implementation and\n its values are then cached for future use. If the file does not exist\n when the first attempt is made to read from it, no further attempts are\n made to check for its existence. It is not possible to change the value\n of any properties in jaxp.properties after it has been read.\n \n A CatalogFeatures instance can be created through its builder as illustrated\n in the following sample code:\n \n                CatalogFeatures f = CatalogFeatures.builder()\n                        .with(Feature.FILES, \"file:///etc/xml/catalog\")\n                        .with(Feature.PREFER, \"public\")\n                        .with(Feature.DEFER, \"true\")\n                        .with(Feature.RESOLVE, \"ignore\")\n                        .build();\n \nJAXP XML Processor Support\n The Catalog Features are supported throughout the JAXP processors, including\n SAX and DOM (javax.xml.parsers), and StAX parsers (javax.xml.stream),\n Schema Validation (javax.xml.validation), and XML Transformation\n (javax.xml.transform). The features described above can be set through JAXP\n factories or processors that define a setProperty or setAttribute interface.\n For example, the following code snippet sets a URI to a catalog file on a SAX\n parser through the javax.xml.catalog.files property:\n\n \n      SAXParserFactory spf = SAXParserFactory.newInstance();\n      spf.setFeature(XMLConstants.USE_CATALOG, true); [1]\n      SAXParser parser = spf.newSAXParser();\n      parser.setProperty(CatalogFeatures.Feature.FILES.getPropertyName(), \"file:///etc/xml/catalog\");\n \n\n [1] Note that this statement is not required since the default value of\n USE_CATALOG is true.\n\n \n The JAXP Processors' support for Catalog depends on both the\n USE_CATALOG feature and the\n existence of valid Catalog file(s). A JAXP processor will use the Catalog\n only when the feature is true and valid Catalog file(s) are specified through\n the javax.xml.catalog.files property. It will make no attempt to use\n the Catalog if either USE_CATALOG\n is set to false, or there is no Catalog file specified.\n\n \n The JAXP processors will observe the default settings of the\n CatalogFeatures. The processors, for example, will\n report an Exception by default when no matching entry is found since the\n default value of the javax.xml.catalog.resolve property is strict.\n\n \n The JAXP processors give preference to user-specified custom resolvers. If such\n a resolver is registered, it will be used over the CatalogResolver. If it returns\n null however, the processors will continue resolving with the CatalogResolver.\n If it returns an empty source, no attempt will be made by the CatalogResolver.\n\n \n The Catalog support is available for any process in the JAXP library that\n supports a resolver. The following table lists all such processes.\n\n Processes with Catalog Support\n\nProcesses with Catalog Support\n\n\nProcess\nCatalog Entry Type\nExample\n\n\n\n\nDTDs and external entities\npublic, system\n\n\n   The following DTD reference:\n   <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n\n   Can be resolved using the following Catalog entry:\n   <public publicId=\"-//W3C//DTD XHTML 1.0 Strict//EN\" uri=\"catalog/xhtml1-strict.dtd\"/>\n   or\n   <systemSuffix systemIdSuffix=\"html1-strict.dtd\" uri=\"catalog/xhtml1-strict.dtd\"/>\n \n\n\n\nXInclude\nuri\n\n\n   The following XInclude element:\n   <xi:include href=\"http://openjdk.java.net/xml/disclaimer.xml\"/>\n\n   can be resolved using a URI entry:\n   <uri name=\"http://openjdk.java.net/xml/disclaimer.xml\" uri=\"file:///pathto/local/disclaimer.xml\"/>\n   or\n   <uriSuffix uriSuffix=\"disclaimer.xml\" uri=\"file:///pathto/local/disclaimer.xml\"/>\n \n\n\n\nXSD import\nuri\n\n\n   The following import element:\n    <xsd:import namespace=\"http://openjdk.java.net/xsd/XSDImport_person\"\n                schemaLocation=\"http://openjdk.java.net/xsd/XSDImport_person.xsd\"/>\n\n   can be resolved using a URI entry:\n   <uri name=\"http://openjdk.java.net/xsd/XSDImport_person.xsd\" uri=\"file:///pathto/local/XSDImport_person.xsd\"/>\n   or\n   <uriSuffix uriSuffix=\"XSDImport_person.xsd\" uri=\"file:///pathto/local/XSDImport_person.xsd\"/>\n   or\n   <uriSuffix uriSuffix=\"http://openjdk.java.net/xsd/XSDImport_person\" uri=\"file:///pathto/local/XSDImport_person.xsd\"/>\n \n\n\n\nXSD include\nuri\n\n\n   The following include element:\n   <xsd:include schemaLocation=\"http://openjdk.java.net/xsd/XSDInclude_person.xsd\"/>\n\n   can be resolved using a URI entry:\n   <uri name=\"http://openjdk.java.net/xsd/XSDInclude_person.xsd\" uri=\"file:///pathto/local/XSDInclude_person.xsd\"/>\n   or\n   <uriSuffix uriSuffix=\"XSDInclude_person.xsd\" uri=\"file:///pathto/local/XSDInclude_person.xsd\"/>\n \n\n\n\nXSL import and include\nuri\n\n\n   The following include element:\n   <xsl:include href=\"http://openjdk.java.net/xsl/include.xsl\"/>\n\n   can be resolved using a URI entry:\n   <uri name=\"http://openjdk.java.net/xsl/include.xsl\" uri=\"file:///pathto/local/include.xsl\"/>\n   or\n   <uriSuffix uriSuffix=\"include.xsl\" uri=\"file:///pathto/local/include.xsl\"/>\n \n\n\n\nXSL document function\nuri\n\n\n   The document in the following element:\n   <xsl:variable name=\"dummy\" select=\"document('http://openjdk.java.net/xsl/list.xml')\"/>\n\n   can be resolved using a URI entry:\n   <uri name=\"http://openjdk.java.net/xsl/list.xml\" uri=\"file:///pathto/local/list.xml\"/>\n   or\n   <uriSuffix uriSuffix=\"list.xml\" uri=\"file:///pathto/local/list.xml\"/>\n \n\n\n\n", "codes": ["public class CatalogFeatures\nextends Object"], "fields": [], "methods": [{"method_name": "defaults", "method_sig": "public static CatalogFeatures defaults()", "description": "Returns a CatalogFeatures instance with default settings."}, {"method_name": "get", "method_sig": "public String get (CatalogFeatures.Feature cf)", "description": "Returns the value of the specified feature."}, {"method_name": "builder", "method_sig": "public static CatalogFeatures.Builder builder()", "description": "Returns an instance of the builder for creating the CatalogFeatures object."}]}