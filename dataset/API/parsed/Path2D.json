{"name": "Class Path2D", "module": "java.desktop", "package": "java.awt.geom", "text": "The Path2D class provides a simple, yet flexible\n shape which represents an arbitrary geometric path.\n It can fully represent any path which can be iterated by the\n PathIterator interface including all of its segment\n types and winding rules and it implements all of the\n basic hit testing methods of the Shape interface.\n \n Use Path2D.Float when dealing with data that can be represented\n and used with floating point precision.  Use Path2D.Double\n for data that requires the accuracy or range of double precision.\n \nPath2D provides exactly those facilities required for\n basic construction and management of a geometric path and\n implementation of the above interfaces with little added\n interpretation.\n If it is useful to manipulate the interiors of closed\n geometric shapes beyond simple hit testing then the\n Area class provides additional capabilities\n specifically targeted at closed figures.\n While both classes nominally implement the Shape\n interface, they differ in purpose and together they provide\n two useful views of a geometric shape where Path2D\n deals primarily with a trajectory formed by path segments\n and Area deals more with interpretation and manipulation\n of enclosed regions of 2D geometric space.\n \n The PathIterator interface has more detailed descriptions\n of the types of segments that make up a path and the winding rules\n that control how to determine which regions are inside or outside\n the path.", "codes": ["public abstract class Path2D\nextends Object\nimplements Shape, Cloneable"], "fields": [{"field_name": "WIND_EVEN_ODD", "field_sig": "public static final\u00a0int WIND_EVEN_ODD", "description": "An even-odd winding rule for determining the interior of\n a path."}, {"field_name": "WIND_NON_ZERO", "field_sig": "public static final\u00a0int WIND_NON_ZERO", "description": "A non-zero winding rule for determining the interior of a\n path."}], "methods": [{"method_name": "moveTo", "method_sig": "public abstract void moveTo (double x,\n                            double y)", "description": "Adds a point to the path by moving to the specified\n coordinates specified in double precision."}, {"method_name": "lineTo", "method_sig": "public abstract void lineTo (double x,\n                            double y)", "description": "Adds a point to the path by drawing a straight line from the\n current coordinates to the new specified coordinates\n specified in double precision."}, {"method_name": "quadTo", "method_sig": "public abstract void quadTo (double x1,\n                            double y1,\n                            double x2,\n                            double y2)", "description": "Adds a curved segment, defined by two new points, to the path by\n drawing a Quadratic curve that intersects both the current\n coordinates and the specified coordinates (x2,y2),\n using the specified point (x1,y1) as a quadratic\n parametric control point.\n All coordinates are specified in double precision."}, {"method_name": "curveTo", "method_sig": "public abstract void curveTo (double x1,\n                             double y1,\n                             double x2,\n                             double y2,\n                             double x3,\n                             double y3)", "description": "Adds a curved segment, defined by three new points, to the path by\n drawing a B\u00e9zier curve that intersects both the current\n coordinates and the specified coordinates (x3,y3),\n using the specified points (x1,y1) and (x2,y2) as\n B\u00e9zier control points.\n All coordinates are specified in double precision."}, {"method_name": "closePath", "method_sig": "public final void closePath()", "description": "Closes the current subpath by drawing a straight line back to\n the coordinates of the last moveTo.  If the path is already\n closed then this method has no effect."}, {"method_name": "append", "method_sig": "public final void append (Shape s,\n                         boolean connect)", "description": "Appends the geometry of the specified Shape object to the\n path, possibly connecting the new geometry to the existing path\n segments with a line segment.\n If the connect parameter is true and the\n path is not empty then any initial moveTo in the\n geometry of the appended Shape\n is turned into a lineTo segment.\n If the destination coordinates of such a connecting lineTo\n segment match the ending coordinates of a currently open\n subpath then the segment is omitted as superfluous.\n The winding rule of the specified Shape is ignored\n and the appended geometry is governed by the winding\n rule specified for this path."}, {"method_name": "append", "method_sig": "public abstract void append (PathIterator pi,\n                            boolean connect)", "description": "Appends the geometry of the specified\n PathIterator object\n to the path, possibly connecting the new geometry to the existing\n path segments with a line segment.\n If the connect parameter is true and the\n path is not empty then any initial moveTo in the\n geometry of the appended Shape is turned into a\n lineTo segment.\n If the destination coordinates of such a connecting lineTo\n segment match the ending coordinates of a currently open\n subpath then the segment is omitted as superfluous.\n The winding rule of the specified Shape is ignored\n and the appended geometry is governed by the winding\n rule specified for this path."}, {"method_name": "getWindingRule", "method_sig": "public final int getWindingRule()", "description": "Returns the fill style winding rule."}, {"method_name": "setWindingRule", "method_sig": "public final void setWindingRule (int rule)", "description": "Sets the winding rule for this path to the specified value."}, {"method_name": "getCurrentPoint", "method_sig": "public final Point2D getCurrentPoint()", "description": "Returns the coordinates most recently added to the end of the path\n as a Point2D object."}, {"method_name": "reset", "method_sig": "public final void reset()", "description": "Resets the path to empty.  The append position is set back to the\n beginning of the path and all coordinates and point types are\n forgotten."}, {"method_name": "transform", "method_sig": "public abstract void transform (AffineTransform at)", "description": "Transforms the geometry of this path using the specified\n AffineTransform.\n The geometry is transformed in place, which permanently changes the\n boundary defined by this object."}, {"method_name": "createTransformedShape", "method_sig": "public final Shape createTransformedShape (AffineTransform at)", "description": "Returns a new Shape representing a transformed version\n of this Path2D.\n Note that the exact type and coordinate precision of the return\n value is not specified for this method.\n The method will return a Shape that contains no less precision\n for the transformed geometry than this Path2D currently\n maintains, but it may contain no more precision either.\n If the tradeoff of precision vs. storage size in the result is\n important then the convenience constructors in the\n Path2D.Float\n and\n Path2D.Double\n subclasses should be used to make the choice explicit."}, {"method_name": "getBounds", "method_sig": "public final Rectangle getBounds()", "description": "Returns an integer Rectangle that completely encloses the\n Shape.  Note that there is no guarantee that the\n returned Rectangle is the smallest bounding box that\n encloses the Shape, only that the Shape\n lies entirely within the indicated  Rectangle.  The\n returned Rectangle might also fail to completely\n enclose the Shape if the Shape overflows\n the limited range of the integer data type.  The\n getBounds2D method generally returns a\n tighter bounding box due to its greater flexibility in\n representation.\n\n \n Note that the\n \n definition of insideness can lead to situations where points\n on the defining outline of the shape may not be considered\n contained in the returned bounds object, but only in cases\n where those points are also not considered contained in the original\n shape.\n \n\n If a point is inside the shape according to the\n contains(point) method, then\n it must be inside the returned Rectangle bounds object\n according to the contains(point)\n method of the bounds. Specifically:\n \n\nshape.contains(x,y) requires bounds.contains(x,y)\n\n\n If a point is not inside the shape, then it might\n still be contained in the bounds object:\n \n\nbounds.contains(x,y) does not imply shape.contains(x,y)\n"}, {"method_name": "contains", "method_sig": "public static boolean contains (PathIterator pi,\n                               double x,\n                               double y)", "description": "Tests if the specified coordinates are inside the closed\n boundary of the specified PathIterator.\n \n This method provides a basic facility for implementors of\n the Shape interface to implement support for the\n Shape.contains(double, double) method."}, {"method_name": "contains", "method_sig": "public static boolean contains (PathIterator pi,\n                               Point2D p)", "description": "Tests if the specified Point2D is inside the closed\n boundary of the specified PathIterator.\n \n This method provides a basic facility for implementors of\n the Shape interface to implement support for the\n Shape.contains(Point2D) method."}, {"method_name": "contains", "method_sig": "public final boolean contains (double x,\n                              double y)", "description": "Tests if the specified coordinates are inside the boundary of the\n Shape, as described by the\n \n definition of insideness."}, {"method_name": "contains", "method_sig": "public final boolean contains (Point2D p)", "description": "Tests if a specified Point2D is inside the boundary\n of the Shape, as described by the\n \n definition of insideness."}, {"method_name": "contains", "method_sig": "public static boolean contains (PathIterator pi,\n                               double x,\n                               double y,\n                               double w,\n                               double h)", "description": "Tests if the specified rectangular area is entirely inside the\n closed boundary of the specified PathIterator.\n \n This method provides a basic facility for implementors of\n the Shape interface to implement support for the\n Shape.contains(double, double, double, double) method.\n \n This method object may conservatively return false in\n cases where the specified rectangular area intersects a\n segment of the path, but that segment does not represent a\n boundary between the interior and exterior of the path.\n Such segments could lie entirely within the interior of the\n path if they are part of a path with a WIND_NON_ZERO\n winding rule or if the segments are retraced in the reverse\n direction such that the two sets of segments cancel each\n other out without any exterior area falling between them.\n To determine whether segments represent true boundaries of\n the interior of the path would require extensive calculations\n involving all of the segments of the path and the winding\n rule and are thus beyond the scope of this implementation."}, {"method_name": "contains", "method_sig": "public static boolean contains (PathIterator pi,\n                               Rectangle2D r)", "description": "Tests if the specified Rectangle2D is entirely inside the\n closed boundary of the specified PathIterator.\n \n This method provides a basic facility for implementors of\n the Shape interface to implement support for the\n Shape.contains(Rectangle2D) method.\n \n This method object may conservatively return false in\n cases where the specified rectangular area intersects a\n segment of the path, but that segment does not represent a\n boundary between the interior and exterior of the path.\n Such segments could lie entirely within the interior of the\n path if they are part of a path with a WIND_NON_ZERO\n winding rule or if the segments are retraced in the reverse\n direction such that the two sets of segments cancel each\n other out without any exterior area falling between them.\n To determine whether segments represent true boundaries of\n the interior of the path would require extensive calculations\n involving all of the segments of the path and the winding\n rule and are thus beyond the scope of this implementation."}, {"method_name": "contains", "method_sig": "public final boolean contains (double x,\n                              double y,\n                              double w,\n                              double h)", "description": "Tests if the interior of the Shape entirely contains\n the specified rectangular area.  All coordinates that lie inside\n the rectangular area must lie within the Shape for the\n entire rectangular area to be considered contained within the\n Shape.\n \n The Shape.contains() method allows a Shape\n implementation to conservatively return false when:\n \n\n the intersect method returns true and\n \n the calculations to determine whether or not the\n Shape entirely contains the rectangular area are\n prohibitively expensive.\n \n This means that for some Shapes this method might\n return false even though the Shape contains\n the rectangular area.\n The Area class performs\n more accurate geometric computations than most\n Shape objects and therefore can be used if a more precise\n answer is required.\n \n This method object may conservatively return false in\n cases where the specified rectangular area intersects a\n segment of the path, but that segment does not represent a\n boundary between the interior and exterior of the path.\n Such segments could lie entirely within the interior of the\n path if they are part of a path with a WIND_NON_ZERO\n winding rule or if the segments are retraced in the reverse\n direction such that the two sets of segments cancel each\n other out without any exterior area falling between them.\n To determine whether segments represent true boundaries of\n the interior of the path would require extensive calculations\n involving all of the segments of the path and the winding\n rule and are thus beyond the scope of this implementation."}, {"method_name": "contains", "method_sig": "public final boolean contains (Rectangle2D r)", "description": "Tests if the interior of the Shape entirely contains the\n specified Rectangle2D.\n The Shape.contains() method allows a Shape\n implementation to conservatively return false when:\n \n\n the intersect method returns true and\n \n the calculations to determine whether or not the\n Shape entirely contains the Rectangle2D\n are prohibitively expensive.\n \n This means that for some Shapes this method might\n return false even though the Shape contains\n the Rectangle2D.\n The Area class performs\n more accurate geometric computations than most\n Shape objects and therefore can be used if a more precise\n answer is required.\n \n This method object may conservatively return false in\n cases where the specified rectangular area intersects a\n segment of the path, but that segment does not represent a\n boundary between the interior and exterior of the path.\n Such segments could lie entirely within the interior of the\n path if they are part of a path with a WIND_NON_ZERO\n winding rule or if the segments are retraced in the reverse\n direction such that the two sets of segments cancel each\n other out without any exterior area falling between them.\n To determine whether segments represent true boundaries of\n the interior of the path would require extensive calculations\n involving all of the segments of the path and the winding\n rule and are thus beyond the scope of this implementation."}, {"method_name": "intersects", "method_sig": "public static boolean intersects (PathIterator pi,\n                                 double x,\n                                 double y,\n                                 double w,\n                                 double h)", "description": "Tests if the interior of the specified PathIterator\n intersects the interior of a specified set of rectangular\n coordinates.\n \n This method provides a basic facility for implementors of\n the Shape interface to implement support for the\n Shape.intersects(double, double, double, double) method.\n \n This method object may conservatively return true in\n cases where the specified rectangular area intersects a\n segment of the path, but that segment does not represent a\n boundary between the interior and exterior of the path.\n Such a case may occur if some set of segments of the\n path are retraced in the reverse direction such that the\n two sets of segments cancel each other out without any\n interior area between them.\n To determine whether segments represent true boundaries of\n the interior of the path would require extensive calculations\n involving all of the segments of the path and the winding\n rule and are thus beyond the scope of this implementation."}, {"method_name": "intersects", "method_sig": "public static boolean intersects (PathIterator pi,\n                                 Rectangle2D r)", "description": "Tests if the interior of the specified PathIterator\n intersects the interior of a specified Rectangle2D.\n \n This method provides a basic facility for implementors of\n the Shape interface to implement support for the\n Shape.intersects(Rectangle2D) method.\n \n This method object may conservatively return true in\n cases where the specified rectangular area intersects a\n segment of the path, but that segment does not represent a\n boundary between the interior and exterior of the path.\n Such a case may occur if some set of segments of the\n path are retraced in the reverse direction such that the\n two sets of segments cancel each other out without any\n interior area between them.\n To determine whether segments represent true boundaries of\n the interior of the path would require extensive calculations\n involving all of the segments of the path and the winding\n rule and are thus beyond the scope of this implementation."}, {"method_name": "intersects", "method_sig": "public final boolean intersects (double x,\n                                double y,\n                                double w,\n                                double h)", "description": "Tests if the interior of the Shape intersects the\n interior of a specified rectangular area.\n The rectangular area is considered to intersect the Shape\n if any point is contained in both the interior of the\n Shape and the specified rectangular area.\n \n The Shape.intersects() method allows a Shape\n implementation to conservatively return true when:\n \n\n there is a high probability that the rectangular area and the\n Shape intersect, but\n \n the calculations to accurately determine this intersection\n are prohibitively expensive.\n \n This means that for some Shapes this method might\n return true even though the rectangular area does not\n intersect the Shape.\n The Area class performs\n more accurate computations of geometric intersection than most\n Shape objects and therefore can be used if a more precise\n answer is required.\n \n This method object may conservatively return true in\n cases where the specified rectangular area intersects a\n segment of the path, but that segment does not represent a\n boundary between the interior and exterior of the path.\n Such a case may occur if some set of segments of the\n path are retraced in the reverse direction such that the\n two sets of segments cancel each other out without any\n interior area between them.\n To determine whether segments represent true boundaries of\n the interior of the path would require extensive calculations\n involving all of the segments of the path and the winding\n rule and are thus beyond the scope of this implementation."}, {"method_name": "intersects", "method_sig": "public final boolean intersects (Rectangle2D r)", "description": "Tests if the interior of the Shape intersects the\n interior of a specified Rectangle2D.\n The Shape.intersects() method allows a Shape\n implementation to conservatively return true when:\n \n\n there is a high probability that the Rectangle2D and the\n Shape intersect, but\n \n the calculations to accurately determine this intersection\n are prohibitively expensive.\n \n This means that for some Shapes this method might\n return true even though the Rectangle2D does not\n intersect the Shape.\n The Area class performs\n more accurate computations of geometric intersection than most\n Shape objects and therefore can be used if a more precise\n answer is required.\n \n This method object may conservatively return true in\n cases where the specified rectangular area intersects a\n segment of the path, but that segment does not represent a\n boundary between the interior and exterior of the path.\n Such a case may occur if some set of segments of the\n path are retraced in the reverse direction such that the\n two sets of segments cancel each other out without any\n interior area between them.\n To determine whether segments represent true boundaries of\n the interior of the path would require extensive calculations\n involving all of the segments of the path and the winding\n rule and are thus beyond the scope of this implementation."}, {"method_name": "getPathIterator", "method_sig": "public final PathIterator getPathIterator (AffineTransform at,\n                                          double flatness)", "description": "Returns an iterator object that iterates along the Shape\n boundary and provides access to a flattened view of the\n Shape outline geometry.\n \n Only SEG_MOVETO, SEG_LINETO, and SEG_CLOSE point types are\n returned by the iterator.\n \n If an optional AffineTransform is specified,\n the coordinates returned in the iteration are transformed\n accordingly.\n \n The amount of subdivision of the curved segments is controlled\n by the flatness parameter, which specifies the\n maximum distance that any point on the unflattened transformed\n curve can deviate from the returned flattened path segments.\n Note that a limit on the accuracy of the flattened path might be\n silently imposed, causing very small flattening parameters to be\n treated as larger values.  This limit, if there is one, is\n defined by the particular implementation that is used.\n \n Each call to this method returns a fresh PathIterator\n object that traverses the Shape object geometry\n independently from any other PathIterator objects in use at\n the same time.\n \n It is recommended, but not guaranteed, that objects\n implementing the Shape interface isolate iterations\n that are in process from any changes that might occur to the original\n object's geometry during such iterations.\n \n The iterator for this class is not multi-threaded safe,\n which means that this Path2D class does not\n guarantee that modifications to the geometry of this\n Path2D object do not affect any iterations of\n that geometry that are already in process."}, {"method_name": "clone", "method_sig": "public abstract Object clone()", "description": "Creates a new object of the same class as this object."}, {"method_name": "trimToSize", "method_sig": "public abstract void trimToSize()", "description": "Trims the capacity of this Path2D instance to its current\n size. An application can use this operation to minimize the\n storage of a path."}]}