{"name": "Interface Stream<T>", "module": "java.base", "package": "java.util.stream", "text": "A sequence of elements supporting sequential and parallel aggregate\n operations.  The following example illustrates an aggregate operation using\n Stream and IntStream:\n\n \n     int sum = widgets.stream()\n                      .filter(w -> w.getColor() == RED)\n                      .mapToInt(w -> w.getWeight())\n                      .sum();\n \n\n In this example, widgets is a Collection<Widget>.  We create\n a stream of Widget objects via Collection.stream(),\n filter it to produce a stream containing only the red widgets, and then\n transform it into a stream of int values representing the weight of\n each red widget. Then this stream is summed to produce a total weight.\n\n In addition to Stream, which is a stream of object references,\n there are primitive specializations for IntStream, LongStream,\n and DoubleStream, all of which are referred to as \"streams\" and\n conform to the characteristics and restrictions described here.\n\n To perform a computation, stream\n operations are composed into a\n stream pipeline.  A stream pipeline consists of a source (which\n might be an array, a collection, a generator function, an I/O channel,\n etc), zero or more intermediate operations (which transform a\n stream into another stream, such as filter(Predicate)), and a\n terminal operation (which produces a result or side-effect, such\n as count() or forEach(Consumer)).\n Streams are lazy; computation on the source data is only performed when the\n terminal operation is initiated, and source elements are consumed only\n as needed.\n\n A stream implementation is permitted significant latitude in optimizing\n the computation of the result.  For example, a stream implementation is free\n to elide operations (or entire stages) from a stream pipeline -- and\n therefore elide invocation of behavioral parameters -- if it can prove that\n it would not affect the result of the computation.  This means that\n side-effects of behavioral parameters may not always be executed and should\n not be relied upon, unless otherwise specified (such as by the terminal\n operations forEach and forEachOrdered). (For a specific\n example of such an optimization, see the API note documented on the\n count() operation.  For more detail, see the\n side-effects section of the\n stream package documentation.)\n\n Collections and streams, while bearing some superficial similarities,\n have different goals.  Collections are primarily concerned with the efficient\n management of, and access to, their elements.  By contrast, streams do not\n provide a means to directly access or manipulate their elements, and are\n instead concerned with declaratively describing their source and the\n computational operations which will be performed in aggregate on that source.\n However, if the provided stream operations do not offer the desired\n functionality, the BaseStream.iterator() and BaseStream.spliterator() operations\n can be used to perform a controlled traversal.\n\n A stream pipeline, like the \"widgets\" example above, can be viewed as\n a query on the stream source.  Unless the source was explicitly\n designed for concurrent modification (such as a ConcurrentHashMap),\n unpredictable or erroneous behavior may result from modifying the stream\n source while it is being queried.\n\n Most stream operations accept parameters that describe user-specified\n behavior, such as the lambda expression w -> w.getWeight() passed to\n mapToInt in the example above.  To preserve correct behavior,\n these behavioral parameters:\n \nmust be non-interfering\n (they do not modify the stream source); and\nin most cases must be stateless\n (their result should not depend on any state that might change during execution\n of the stream pipeline).\n\nSuch parameters are always instances of a\n functional interface such\n as Function, and are often lambda expressions or\n method references.  Unless otherwise specified these parameters must be\n non-null.\n\n A stream should be operated on (invoking an intermediate or terminal stream\n operation) only once.  This rules out, for example, \"forked\" streams, where\n the same source feeds two or more pipelines, or multiple traversals of the\n same stream.  A stream implementation may throw IllegalStateException\n if it detects that the stream is being reused. However, since some stream\n operations may return their receiver rather than a new stream object, it may\n not be possible to detect reuse in all cases.\n\n Streams have a BaseStream.close() method and implement AutoCloseable.\n Operating on a stream after it has been closed will throw IllegalStateException.\n Most stream instances do not actually need to be closed after use, as they\n are backed by collections, arrays, or generating functions, which require no\n special resource management. Generally, only streams whose source is an IO channel,\n such as those returned by Files.lines(Path), will require closing. If a\n stream does require closing, it must be opened as a resource within a try-with-resources\n statement or similar control structure to ensure that it is closed promptly after its\n operations have completed.\n\n Stream pipelines may execute either sequentially or in\n parallel.  This\n execution mode is a property of the stream.  Streams are created\n with an initial choice of sequential or parallel execution.  (For example,\n Collection.stream() creates a sequential stream,\n and Collection.parallelStream() creates\n a parallel one.)  This choice of execution mode may be modified by the\n BaseStream.sequential() or BaseStream.parallel() methods, and may be queried with\n the BaseStream.isParallel() method.", "codes": ["public interface Stream<T>\nextends BaseStream<T, Stream<T>>"], "fields": [], "methods": [{"method_name": "filter", "method_sig": "Stream<T> filter (Predicate<? super T> predicate)", "description": "Returns a stream consisting of the elements of this stream that match\n the given predicate.\n\n This is an intermediate\n operation."}, {"method_name": "map", "method_sig": "<R> Stream<R> map (Function<? super T, ? extends R> mapper)", "description": "Returns a stream consisting of the results of applying the given\n function to the elements of this stream.\n\n This is an intermediate\n operation."}, {"method_name": "mapToInt", "method_sig": "IntStream mapToInt (ToIntFunction<? super T> mapper)", "description": "Returns an IntStream consisting of the results of applying the\n given function to the elements of this stream.\n\n This is an \n     intermediate operation."}, {"method_name": "mapToLong", "method_sig": "LongStream mapToLong (ToLongFunction<? super T> mapper)", "description": "Returns a LongStream consisting of the results of applying the\n given function to the elements of this stream.\n\n This is an intermediate\n operation."}, {"method_name": "mapToDouble", "method_sig": "DoubleStream mapToDouble (ToDoubleFunction<? super T> mapper)", "description": "Returns a DoubleStream consisting of the results of applying the\n given function to the elements of this stream.\n\n This is an intermediate\n operation."}, {"method_name": "flatMap", "method_sig": "<R> Stream<R> flatMap (Function<? super T, ? extends Stream<? extends R>> mapper)", "description": "Returns a stream consisting of the results of replacing each element of\n this stream with the contents of a mapped stream produced by applying\n the provided mapping function to each element.  Each mapped stream is\n closed after its contents\n have been placed into this stream.  (If a mapped stream is null\n an empty stream is used, instead.)\n\n This is an intermediate\n operation."}, {"method_name": "flatMapToInt", "method_sig": "IntStream flatMapToInt (Function<? super T, ? extends IntStream> mapper)", "description": "Returns an IntStream consisting of the results of replacing each\n element of this stream with the contents of a mapped stream produced by\n applying the provided mapping function to each element.  Each mapped\n stream is closed after its\n contents have been placed into this stream.  (If a mapped stream is\n null an empty stream is used, instead.)\n\n This is an intermediate\n operation."}, {"method_name": "flatMapToLong", "method_sig": "LongStream flatMapToLong (Function<? super T, ? extends LongStream> mapper)", "description": "Returns an LongStream consisting of the results of replacing each\n element of this stream with the contents of a mapped stream produced by\n applying the provided mapping function to each element.  Each mapped\n stream is closed after its\n contents have been placed into this stream.  (If a mapped stream is\n null an empty stream is used, instead.)\n\n This is an intermediate\n operation."}, {"method_name": "flatMapToDouble", "method_sig": "DoubleStream flatMapToDouble (Function<? super T, ? extends DoubleStream> mapper)", "description": "Returns an DoubleStream consisting of the results of replacing\n each element of this stream with the contents of a mapped stream produced\n by applying the provided mapping function to each element.  Each mapped\n stream is closed after its\n contents have placed been into this stream.  (If a mapped stream is\n null an empty stream is used, instead.)\n\n This is an intermediate\n operation."}, {"method_name": "distinct", "method_sig": "Stream<T> distinct()", "description": "Returns a stream consisting of the distinct elements (according to\n Object.equals(Object)) of this stream.\n\n For ordered streams, the selection of distinct elements is stable\n (for duplicated elements, the element appearing first in the encounter\n order is preserved.)  For unordered streams, no stability guarantees\n are made.\n\n This is a stateful\n intermediate operation."}, {"method_name": "sorted", "method_sig": "Stream<T> sorted()", "description": "Returns a stream consisting of the elements of this stream, sorted\n according to natural order.  If the elements of this stream are not\n Comparable, a java.lang.ClassCastException may be thrown\n when the terminal operation is executed.\n\n For ordered streams, the sort is stable.  For unordered streams, no\n stability guarantees are made.\n\n This is a stateful\n intermediate operation."}, {"method_name": "sorted", "method_sig": "Stream<T> sorted (Comparator<? super T> comparator)", "description": "Returns a stream consisting of the elements of this stream, sorted\n according to the provided Comparator.\n\n For ordered streams, the sort is stable.  For unordered streams, no\n stability guarantees are made.\n\n This is a stateful\n intermediate operation."}, {"method_name": "peek", "method_sig": "Stream<T> peek (Consumer<? super T> action)", "description": "Returns a stream consisting of the elements of this stream, additionally\n performing the provided action on each element as elements are consumed\n from the resulting stream.\n\n This is an intermediate\n operation.\n\n For parallel stream pipelines, the action may be called at\n whatever time and in whatever thread the element is made available by the\n upstream operation.  If the action modifies shared state,\n it is responsible for providing the required synchronization."}, {"method_name": "limit", "method_sig": "Stream<T> limit (long maxSize)", "description": "Returns a stream consisting of the elements of this stream, truncated\n to be no longer than maxSize in length.\n\n This is a short-circuiting\n stateful intermediate operation."}, {"method_name": "skip", "method_sig": "Stream<T> skip (long n)", "description": "Returns a stream consisting of the remaining elements of this stream\n after discarding the first n elements of the stream.\n If this stream contains fewer than n elements then an\n empty stream will be returned.\n\n This is a stateful\n intermediate operation."}, {"method_name": "takeWhile", "method_sig": "default Stream<T> takeWhile (Predicate<? super T> predicate)", "description": "Returns, if this stream is ordered, a stream consisting of the longest\n prefix of elements taken from this stream that match the given predicate.\n Otherwise returns, if this stream is unordered, a stream consisting of a\n subset of elements taken from this stream that match the given predicate.\n\n If this stream is ordered then the longest prefix is a contiguous\n sequence of elements of this stream that match the given predicate.  The\n first element of the sequence is the first element of this stream, and\n the element immediately following the last element of the sequence does\n not match the given predicate.\n\n If this stream is unordered, and some (but not all) elements of this\n stream match the given predicate, then the behavior of this operation is\n nondeterministic; it is free to take any subset of matching elements\n (which includes the empty set).\n\n Independent of whether this stream is ordered or unordered if all\n elements of this stream match the given predicate then this operation\n takes all elements (the result is the same as the input), or if no\n elements of the stream match the given predicate then no elements are\n taken (the result is an empty stream).\n\n This is a short-circuiting\n stateful intermediate operation."}, {"method_name": "dropWhile", "method_sig": "default Stream<T> dropWhile (Predicate<? super T> predicate)", "description": "Returns, if this stream is ordered, a stream consisting of the remaining\n elements of this stream after dropping the longest prefix of elements\n that match the given predicate.  Otherwise returns, if this stream is\n unordered, a stream consisting of the remaining elements of this stream\n after dropping a subset of elements that match the given predicate.\n\n If this stream is ordered then the longest prefix is a contiguous\n sequence of elements of this stream that match the given predicate.  The\n first element of the sequence is the first element of this stream, and\n the element immediately following the last element of the sequence does\n not match the given predicate.\n\n If this stream is unordered, and some (but not all) elements of this\n stream match the given predicate, then the behavior of this operation is\n nondeterministic; it is free to drop any subset of matching elements\n (which includes the empty set).\n\n Independent of whether this stream is ordered or unordered if all\n elements of this stream match the given predicate then this operation\n drops all elements (the result is an empty stream), or if no elements of\n the stream match the given predicate then no elements are dropped (the\n result is the same as the input).\n\n This is a stateful\n intermediate operation."}, {"method_name": "forEach", "method_sig": "void forEach (Consumer<? super T> action)", "description": "Performs an action for each element of this stream.\n\n This is a terminal\n operation.\n\n The behavior of this operation is explicitly nondeterministic.\n For parallel stream pipelines, this operation does not\n guarantee to respect the encounter order of the stream, as doing so\n would sacrifice the benefit of parallelism.  For any given element, the\n action may be performed at whatever time and in whatever thread the\n library chooses.  If the action accesses shared state, it is\n responsible for providing the required synchronization."}, {"method_name": "forEachOrdered", "method_sig": "void forEachOrdered (Consumer<? super T> action)", "description": "Performs an action for each element of this stream, in the encounter\n order of the stream if the stream has a defined encounter order.\n\n This is a terminal\n operation.\n\n This operation processes the elements one at a time, in encounter\n order if one exists.  Performing the action for one element\n happens-before\n performing the action for subsequent elements, but for any given element,\n the action may be performed in whatever thread the library chooses."}, {"method_name": "toArray", "method_sig": "Object[] toArray()", "description": "Returns an array containing the elements of this stream.\n\n This is a terminal\n operation."}, {"method_name": "toArray", "method_sig": "<A> A[] toArray (IntFunction<A[]> generator)", "description": "Returns an array containing the elements of this stream, using the\n provided generator function to allocate the returned array, as\n well as any additional arrays that might be required for a partitioned\n execution or for resizing.\n\n This is a terminal\n operation."}, {"method_name": "reduce", "method_sig": "T reduce (T identity,\n         BinaryOperator<T> accumulator)", "description": "Performs a reduction on the\n elements of this stream, using the provided identity value and an\n associative\n accumulation function, and returns the reduced value.  This is equivalent\n to:\n \n     T result = identity;\n     for (T element : this stream)\n         result = accumulator.apply(result, element)\n     return result;\n \n\n but is not constrained to execute sequentially.\n\n The identity value must be an identity for the accumulator\n function. This means that for all t,\n accumulator.apply(identity, t) is equal to t.\n The accumulator function must be an\n associative function.\n\n This is a terminal\n operation."}, {"method_name": "reduce", "method_sig": "Optional<T> reduce (BinaryOperator<T> accumulator)", "description": "Performs a reduction on the\n elements of this stream, using an\n associative accumulation\n function, and returns an Optional describing the reduced value,\n if any. This is equivalent to:\n \n     boolean foundAny = false;\n     T result = null;\n     for (T element : this stream) {\n         if (!foundAny) {\n             foundAny = true;\n             result = element;\n         }\n         else\n             result = accumulator.apply(result, element);\n     }\n     return foundAny ? Optional.of(result) : Optional.empty();\n \n\n but is not constrained to execute sequentially.\n\n The accumulator function must be an\n associative function.\n\n This is a terminal\n operation."}, {"method_name": "reduce", "method_sig": "<U> U reduce (U identity,\n             BiFunction<U, ? super T, U> accumulator,\n             BinaryOperator<U> combiner)", "description": "Performs a reduction on the\n elements of this stream, using the provided identity, accumulation and\n combining functions.  This is equivalent to:\n \n     U result = identity;\n     for (T element : this stream)\n         result = accumulator.apply(result, element)\n     return result;\n \n\n but is not constrained to execute sequentially.\n\n The identity value must be an identity for the combiner\n function.  This means that for all u, combiner(identity, u)\n is equal to u.  Additionally, the combiner function\n must be compatible with the accumulator function; for all\n u and t, the following must hold:\n \n     combiner.apply(u, accumulator.apply(identity, t)) == accumulator.apply(u, t)\n \nThis is a terminal\n operation."}, {"method_name": "collect", "method_sig": "<R> R collect (Supplier<R> supplier,\n              BiConsumer<R, ? super T> accumulator,\n              BiConsumer<R, R> combiner)", "description": "Performs a mutable\n reduction operation on the elements of this stream.  A mutable\n reduction is one in which the reduced value is a mutable result container,\n such as an ArrayList, and elements are incorporated by updating\n the state of the result rather than by replacing the result.  This\n produces a result equivalent to:\n \n     R result = supplier.get();\n     for (T element : this stream)\n         accumulator.accept(result, element);\n     return result;\n \nLike reduce(Object, BinaryOperator), collect operations\n can be parallelized without requiring additional synchronization.\n\n This is a terminal\n operation."}, {"method_name": "collect", "method_sig": "<R, A> R collect (Collector<? super T, A, R> collector)", "description": "Performs a mutable\n reduction operation on the elements of this stream using a\n Collector.  A Collector\n encapsulates the functions used as arguments to\n collect(Supplier, BiConsumer, BiConsumer), allowing for reuse of\n collection strategies and composition of collect operations such as\n multiple-level grouping or partitioning.\n\n If the stream is parallel, and the Collector\n is concurrent, and\n either the stream is unordered or the collector is\n unordered,\n then a concurrent reduction will be performed (see Collector for\n details on concurrent reduction.)\n\n This is a terminal\n operation.\n\n When executed in parallel, multiple intermediate results may be\n instantiated, populated, and merged so as to maintain isolation of\n mutable data structures.  Therefore, even when executed in parallel\n with non-thread-safe data structures (such as ArrayList), no\n additional synchronization is needed for a parallel reduction."}, {"method_name": "min", "method_sig": "Optional<T> min (Comparator<? super T> comparator)", "description": "Returns the minimum element of this stream according to the provided\n Comparator.  This is a special case of a\n reduction.\n\n This is a terminal operation."}, {"method_name": "max", "method_sig": "Optional<T> max (Comparator<? super T> comparator)", "description": "Returns the maximum element of this stream according to the provided\n Comparator.  This is a special case of a\n reduction.\n\n This is a terminal\n operation."}, {"method_name": "count", "method_sig": "long count()", "description": "Returns the count of elements in this stream.  This is a special case of\n a reduction and is\n equivalent to:\n \n     return mapToLong(e -> 1L).sum();\n \nThis is a terminal operation."}, {"method_name": "anyMatch", "method_sig": "boolean anyMatch (Predicate<? super T> predicate)", "description": "Returns whether any elements of this stream match the provided\n predicate.  May not evaluate the predicate on all elements if not\n necessary for determining the result.  If the stream is empty then\n false is returned and the predicate is not evaluated.\n\n This is a short-circuiting\n terminal operation."}, {"method_name": "allMatch", "method_sig": "boolean allMatch (Predicate<? super T> predicate)", "description": "Returns whether all elements of this stream match the provided predicate.\n May not evaluate the predicate on all elements if not necessary for\n determining the result.  If the stream is empty then true is\n returned and the predicate is not evaluated.\n\n This is a short-circuiting\n terminal operation."}, {"method_name": "noneMatch", "method_sig": "boolean noneMatch (Predicate<? super T> predicate)", "description": "Returns whether no elements of this stream match the provided predicate.\n May not evaluate the predicate on all elements if not necessary for\n determining the result.  If the stream is empty then true is\n returned and the predicate is not evaluated.\n\n This is a short-circuiting\n terminal operation."}, {"method_name": "findFirst", "method_sig": "Optional<T> findFirst()", "description": "Returns an Optional describing the first element of this stream,\n or an empty Optional if the stream is empty.  If the stream has\n no encounter order, then any element may be returned.\n\n This is a short-circuiting\n terminal operation."}, {"method_name": "findAny", "method_sig": "Optional<T> findAny()", "description": "Returns an Optional describing some element of the stream, or an\n empty Optional if the stream is empty.\n\n This is a short-circuiting\n terminal operation.\n\n The behavior of this operation is explicitly nondeterministic; it is\n free to select any element in the stream.  This is to allow for maximal\n performance in parallel operations; the cost is that multiple invocations\n on the same source may not return the same result.  (If a stable result\n is desired, use findFirst() instead.)"}, {"method_name": "builder", "method_sig": "static <T> Stream.Builder<T> builder()", "description": "Returns a builder for a Stream."}, {"method_name": "empty", "method_sig": "static <T> Stream<T> empty()", "description": "Returns an empty sequential Stream."}, {"method_name": "of", "method_sig": "static <T> Stream<T> of (T t)", "description": "Returns a sequential Stream containing a single element."}, {"method_name": "ofNullable", "method_sig": "static <T> Stream<T> ofNullable (T t)", "description": "Returns a sequential Stream containing a single element, if\n non-null, otherwise returns an empty Stream."}, {"method_name": "of", "method_sig": "@SafeVarargs\nstatic <T> Stream<T> of (T... values)", "description": "Returns a sequential ordered stream whose elements are the specified values."}, {"method_name": "iterate", "method_sig": "static <T> Stream<T> iterate (T seed,\n                             UnaryOperator<T> f)", "description": "Returns an infinite sequential ordered Stream produced by iterative\n application of a function f to an initial element seed,\n producing a Stream consisting of seed, f(seed),\n f(f(seed)), etc.\n\n The first element (position 0) in the Stream will be\n the provided seed.  For n > 0, the element at position\n n, will be the result of applying the function f to the\n element at position n - 1.\n\n The action of applying f for one element\n happens-before\n the action of applying f for subsequent elements.  For any given\n element the action may be performed in whatever thread the library\n chooses."}, {"method_name": "iterate", "method_sig": "static <T> Stream<T> iterate (T seed,\n                             Predicate<? super T> hasNext,\n                             UnaryOperator<T> next)", "description": "Returns a sequential ordered Stream produced by iterative\n application of the given next function to an initial element,\n conditioned on satisfying the given hasNext predicate.  The\n stream terminates as soon as the hasNext predicate returns false.\n\n Stream.iterate should produce the same sequence of elements as\n produced by the corresponding for-loop:\n \n     for (T index=seed; hasNext.test(index); index = next.apply(index)) {\n         ...\n     }\n \nThe resulting sequence may be empty if the hasNext predicate\n does not hold on the seed value.  Otherwise the first element will be the\n supplied seed value, the next element (if present) will be the\n result of applying the next function to the seed value,\n and so on iteratively until the hasNext predicate indicates that\n the stream should terminate.\n\n The action of applying the hasNext predicate to an element\n happens-before\n the action of applying the next function to that element.  The\n action of applying the next function for one element\n happens-before the action of applying the hasNext\n predicate for subsequent elements.  For any given element an action may\n be performed in whatever thread the library chooses."}, {"method_name": "generate", "method_sig": "static <T> Stream<T> generate (Supplier<? extends T> s)", "description": "Returns an infinite sequential unordered stream where each element is\n generated by the provided Supplier.  This is suitable for\n generating constant streams, streams of random elements, etc."}, {"method_name": "concat", "method_sig": "static <T> Stream<T> concat (Stream<? extends T> a,\n                            Stream<? extends T> b)", "description": "Creates a lazily concatenated stream whose elements are all the\n elements of the first stream followed by all the elements of the\n second stream.  The resulting stream is ordered if both\n of the input streams are ordered, and parallel if either of the input\n streams is parallel.  When the resulting stream is closed, the close\n handlers for both input streams are invoked.\n\n This method operates on the two input streams and binds each stream\n to its source.  As a result subsequent modifications to an input stream\n source may not be reflected in the concatenated stream result."}]}