{"name": "Class JRadioButton", "module": "java.desktop", "package": "javax.swing", "text": "An implementation of a radio button -- an item that can be selected or\n deselected, and which displays its state to the user.\n Used with a ButtonGroup object to create a group of buttons\n in which only one button at a time can be selected. (Create a ButtonGroup\n object and use its add method to include the JRadioButton objects\n in the group.)\n \nNote:\n The ButtonGroup object is a logical grouping -- not a physical grouping.\n To create a button panel, you should still create a JPanel or similar\n container-object and add a Border to it to set it off from surrounding\n components.\n \n\n Buttons can be configured, and to some degree controlled, by\n Actions.  Using an\n Action with a button has many benefits beyond directly\n configuring a button.  Refer to \n Swing Components Supporting Action for more\n details, and you can find more information in How\n to Use Actions, a section in The Java Tutorial.\n \n See How to Use Buttons, Check Boxes, and Radio Buttons\n in The Java Tutorial\n for further documentation.\n \nWarning: Swing is not thread safe. For more\n information see Swing's Threading\n Policy.\n \nWarning:\n Serialized objects of this class will not be compatible with\n future Swing releases. The current serialization support is\n appropriate for short term storage or RMI between applications running\n the same version of Swing.  As of 1.4, support for long term storage\n of all JavaBeans\u2122\n has been added to the java.beans package.\n Please see XMLEncoder.", "codes": ["@JavaBean(description=\"A component which can display it\\'s state as selected or deselected.\")\npublic class JRadioButton\nextends JToggleButton\nimplements Accessible"], "fields": [], "methods": [{"method_name": "updateUI", "method_sig": "public void updateUI()", "description": "Resets the UI property to a value from the current look and feel."}, {"method_name": "getUIClassID", "method_sig": "@BeanProperty(bound=false,\n              expert=true,\n              description=\"A string that specifies the name of the L&F class.\")\npublic String getUIClassID()", "description": "Returns the name of the L&F class\n that renders this component."}, {"method_name": "paramString", "method_sig": "protected String paramString()", "description": "Returns a string representation of this JRadioButton. This method\n is intended to be used only for debugging purposes, and the\n content and format of the returned string may vary between\n implementations. The returned string may be empty but may not\n be null."}, {"method_name": "getAccessibleContext", "method_sig": "@BeanProperty(bound=false,\n              expert=true,\n              description=\"The AccessibleContext associated with this Button\")\npublic AccessibleContext getAccessibleContext()", "description": "Gets the AccessibleContext associated with this JRadioButton.\n For JRadioButtons, the AccessibleContext takes the form of an\n AccessibleJRadioButton.\n A new AccessibleJRadioButton instance is created if necessary."}]}