{"name": "Class ScrollPaneLayout", "module": "java.desktop", "package": "javax.swing", "text": "The layout manager used by JScrollPane.\n JScrollPaneLayout is\n responsible for nine components: a viewport, two scrollbars,\n a row header, a column header, and four \"corner\" components.\n \nWarning:\n Serialized objects of this class will not be compatible with\n future Swing releases. The current serialization support is\n appropriate for short term storage or RMI between applications running\n the same version of Swing.  As of 1.4, support for long term storage\n of all JavaBeans\u2122\n has been added to the java.beans package.\n Please see XMLEncoder.", "codes": ["public class ScrollPaneLayout\nextends Object\nimplements LayoutManager, ScrollPaneConstants, Serializable"], "fields": [{"field_name": "viewport", "field_sig": "protected\u00a0JViewport viewport", "description": "The scrollpane's viewport child.\n Default is an empty JViewport."}, {"field_name": "vsb", "field_sig": "protected\u00a0JScrollBar vsb", "description": "The scrollpane's vertical scrollbar child.\n Default is a JScrollBar."}, {"field_name": "hsb", "field_sig": "protected\u00a0JScrollBar hsb", "description": "The scrollpane's horizontal scrollbar child.\n Default is a JScrollBar."}, {"field_name": "rowHead", "field_sig": "protected\u00a0JViewport rowHead", "description": "The row header child.  Default is null."}, {"field_name": "colHead", "field_sig": "protected\u00a0JViewport colHead", "description": "The column header child.  Default is null."}, {"field_name": "lowerLeft", "field_sig": "protected\u00a0Component lowerLeft", "description": "The component to display in the lower left corner.\n Default is null."}, {"field_name": "lowerRight", "field_sig": "protected\u00a0Component lowerRight", "description": "The component to display in the lower right corner.\n Default is null."}, {"field_name": "upperLeft", "field_sig": "protected\u00a0Component upperLeft", "description": "The component to display in the upper left corner.\n Default is null."}, {"field_name": "upperRight", "field_sig": "protected\u00a0Component upperRight", "description": "The component to display in the upper right corner.\n Default is null."}, {"field_name": "vsbPolicy", "field_sig": "protected\u00a0int vsbPolicy", "description": "The display policy for the vertical scrollbar.\n The default is ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED.\n \n This field is obsolete, please use the JScrollPane field instead."}, {"field_name": "hsbPolicy", "field_sig": "protected\u00a0int hsbPolicy", "description": "The display policy for the horizontal scrollbar.\n The default is ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED.\n \n This field is obsolete, please use the JScrollPane field instead."}], "methods": [{"method_name": "syncWithScrollPane", "method_sig": "public void syncWithScrollPane (JScrollPane sp)", "description": "This method is invoked after the ScrollPaneLayout is set as the\n LayoutManager of a JScrollPane.\n It initializes all of the internal fields that\n are ordinarily set by addLayoutComponent.  For example:\n \n ScrollPaneLayout mySPLayout = new ScrollPanelLayout() {\n     public void layoutContainer(Container p) {\n         super.layoutContainer(p);\n         // do some extra work here ...\n     }\n };\n scrollpane.setLayout(mySPLayout):\n "}, {"method_name": "addSingletonComponent", "method_sig": "protected Component addSingletonComponent (Component oldC,\n                                          Component newC)", "description": "Removes an existing component.  When a new component, such as\n the left corner, or vertical scrollbar, is added, the old one,\n if it exists, must be removed.\n \n This method returns newC. If oldC is\n not equal to newC and is non-null,\n it will be removed from its parent."}, {"method_name": "addLayoutComponent", "method_sig": "public void addLayoutComponent (String s,\n                               Component c)", "description": "Adds the specified component to the layout. The layout is\n identified using one of:\n \nScrollPaneConstants.VIEWPORT\n ScrollPaneConstants.VERTICAL_SCROLLBAR\n ScrollPaneConstants.HORIZONTAL_SCROLLBAR\n ScrollPaneConstants.ROW_HEADER\n ScrollPaneConstants.COLUMN_HEADER\n ScrollPaneConstants.LOWER_LEFT_CORNER\n ScrollPaneConstants.LOWER_RIGHT_CORNER\n ScrollPaneConstants.UPPER_LEFT_CORNER\n ScrollPaneConstants.UPPER_RIGHT_CORNER\n "}, {"method_name": "removeLayoutComponent", "method_sig": "public void removeLayoutComponent (Component c)", "description": "Removes the specified component from the layout."}, {"method_name": "getVerticalScrollBarPolicy", "method_sig": "public int getVerticalScrollBarPolicy()", "description": "Returns the vertical scrollbar-display policy."}, {"method_name": "setVerticalScrollBarPolicy", "method_sig": "public void setVerticalScrollBarPolicy (int x)", "description": "Sets the vertical scrollbar-display policy. The options\n are:\n \nScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED\n ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER\n ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS\n \n Note: Applications should use the JScrollPane version\n of this method.  It only exists for backwards compatibility\n with the Swing 1.0.2 (and earlier) versions of this class."}, {"method_name": "getHorizontalScrollBarPolicy", "method_sig": "public int getHorizontalScrollBarPolicy()", "description": "Returns the horizontal scrollbar-display policy."}, {"method_name": "setHorizontalScrollBarPolicy", "method_sig": "public void setHorizontalScrollBarPolicy (int x)", "description": "Sets the horizontal scrollbar-display policy.\n The options are:\nScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED\n ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER\n ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS\n \n Note: Applications should use the JScrollPane version\n of this method.  It only exists for backwards compatibility\n with the Swing 1.0.2 (and earlier) versions of this class."}, {"method_name": "getViewport", "method_sig": "public JViewport getViewport()", "description": "Returns the JViewport object that displays the\n scrollable contents."}, {"method_name": "getHorizontalScrollBar", "method_sig": "public JScrollBar getHorizontalScrollBar()", "description": "Returns the JScrollBar object that handles horizontal scrolling."}, {"method_name": "getVerticalScrollBar", "method_sig": "public JScrollBar getVerticalScrollBar()", "description": "Returns the JScrollBar object that handles vertical scrolling."}, {"method_name": "getRowHeader", "method_sig": "public JViewport getRowHeader()", "description": "Returns the JViewport object that is the row header."}, {"method_name": "getColumnHeader", "method_sig": "public JViewport getColumnHeader()", "description": "Returns the JViewport object that is the column header."}, {"method_name": "getCorner", "method_sig": "public Component getCorner (String key)", "description": "Returns the Component at the specified corner."}, {"method_name": "preferredLayoutSize", "method_sig": "public Dimension preferredLayoutSize (Container parent)", "description": "The preferred size of a ScrollPane is the size of the insets,\n plus the preferred size of the viewport, plus the preferred size of\n the visible headers, plus the preferred size of the scrollbars\n that will appear given the current view and the current\n scrollbar displayPolicies.\n Note that the rowHeader is calculated as part of the preferred width\n and the colHeader is calculated as part of the preferred size."}, {"method_name": "minimumLayoutSize", "method_sig": "public Dimension minimumLayoutSize (Container parent)", "description": "The minimum size of a ScrollPane is the size of the insets\n plus minimum size of the viewport, plus the scrollpane's\n viewportBorder insets, plus the minimum size\n of the visible headers, plus the minimum size of the\n scrollbars whose displayPolicy isn't NEVER."}, {"method_name": "layoutContainer", "method_sig": "public void layoutContainer (Container parent)", "description": "Lays out the scrollpane. The positioning of components depends on\n the following constraints:\n \n The row header, if present and visible, gets its preferred\n width and the viewport's height.\n\n  The column header, if present and visible, gets its preferred\n height and the viewport's width.\n\n  If a vertical scrollbar is needed, i.e. if the viewport's extent\n height is smaller than its view height or if the displayPolicy\n is ALWAYS, it's treated like the row header with respect to its\n dimensions and is made visible.\n\n  If a horizontal scrollbar is needed, it is treated like the\n column header (see the paragraph above regarding the vertical scrollbar).\n\n  If the scrollpane has a non-null\nviewportBorder, then space is allocated for that.\n\n  The viewport gets the space available after accounting for\n the previous constraints.\n\n  The corner components, if provided, are aligned with the\n ends of the scrollbars and headers. If there is a vertical\n scrollbar, the right corners appear; if there is a horizontal\n scrollbar, the lower corners appear; a row header gets left\n corners, and a column header gets upper corners.\n "}, {"method_name": "getViewportBorderBounds", "method_sig": "@Deprecated\npublic Rectangle getViewportBorderBounds (JScrollPane scrollpane)", "description": "Returns the bounds of the border around the specified scroll pane's\n viewport."}]}