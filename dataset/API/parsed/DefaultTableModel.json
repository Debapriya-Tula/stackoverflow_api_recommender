{"name": "Class DefaultTableModel", "module": "java.desktop", "package": "javax.swing.table", "text": "This is an implementation of TableModel that\n uses a Vector of Vectors to store the\n cell value objects.\n \nWarning: DefaultTableModel returns a\n column class of Object.  When\n DefaultTableModel is used with a\n TableRowSorter this will result in extensive use of\n toString, which for non-String data types\n is expensive.  If you use DefaultTableModel with a\n TableRowSorter you are strongly encouraged to override\n getColumnClass to return the appropriate type.\n \nWarning:\n Serialized objects of this class will not be compatible with\n future Swing releases. The current serialization support is\n appropriate for short term storage or RMI between applications running\n the same version of Swing.  As of 1.4, support for long term storage\n of all JavaBeans\u2122\n has been added to the java.beans package.\n Please see XMLEncoder.", "codes": ["public class DefaultTableModel\nextends AbstractTableModel\nimplements Serializable"], "fields": [{"field_name": "dataVector", "field_sig": "protected\u00a0Vector<Vector> dataVector", "description": "The Vector of Vectors of\n Object values."}, {"field_name": "columnIdentifiers", "field_sig": "protected\u00a0Vector columnIdentifiers", "description": "The Vector of column identifiers."}], "methods": [{"method_name": "getDataVector", "method_sig": "public Vector<Vector> getDataVector()", "description": "Returns the Vector of Vectors\n  that contains the table's\n  data values.  The vectors contained in the outer vector are\n  each a single row of values.  In other words, to get to the cell\n  at row 1, column 5: \n((Vector)getDataVector().elementAt(1)).elementAt(5);"}, {"method_name": "setDataVector", "method_sig": "public void setDataVector (Vector<? extends Vector> dataVector,\n                          Vector<?> columnIdentifiers)", "description": "Replaces the current dataVector instance variable\n  with the new Vector of rows, dataVector.\n  Each row is represented in dataVector as a\n  Vector of Object values.\n  columnIdentifiers are the names of the new\n  columns.  The first name in columnIdentifiers is\n  mapped to column 0 in dataVector. Each row in\n  dataVector is adjusted to match the number of\n  columns in columnIdentifiers\n  either by truncating the Vector if it is too long,\n  or adding null values if it is too short.\n  Note that passing in a null value for\n  dataVector results in unspecified behavior,\n  an possibly an exception."}, {"method_name": "setDataVector", "method_sig": "public void setDataVector (Object[][] dataVector,\n                          Object[] columnIdentifiers)", "description": "Replaces the value in the dataVector instance\n  variable with the values in the array dataVector.\n  The first index in the Object[][]\n  array is the row index and the second is the column index.\n  columnIdentifiers are the names of the new columns."}, {"method_name": "newDataAvailable", "method_sig": "public void newDataAvailable (TableModelEvent event)", "description": "Equivalent to fireTableChanged."}, {"method_name": "newRowsAdded", "method_sig": "public void newRowsAdded (TableModelEvent e)", "description": "Ensures that the new rows have the correct number of columns.\n  This is accomplished by  using the setSize method in\n  Vector which truncates vectors\n  which are too long, and appends nulls if they\n  are too short.\n  This method also sends out a tableChanged\n  notification message to all the listeners."}, {"method_name": "rowsRemoved", "method_sig": "public void rowsRemoved (TableModelEvent event)", "description": "Equivalent to fireTableChanged."}, {"method_name": "setNumRows", "method_sig": "public void setNumRows (int rowCount)", "description": "Obsolete as of Java 2 platform v1.3.  Please use setRowCount instead."}, {"method_name": "setRowCount", "method_sig": "public void setRowCount (int rowCount)", "description": "Sets the number of rows in the model.  If the new size is greater\n  than the current size, new rows are added to the end of the model\n  If the new size is less than the current size, all\n  rows at index rowCount and greater are discarded."}, {"method_name": "addRow", "method_sig": "public void addRow (Vector<?> rowData)", "description": "Adds a row to the end of the model.  The new row will contain\n  null values unless rowData is specified.\n  Notification of the row being added will be generated."}, {"method_name": "addRow", "method_sig": "public void addRow (Object[] rowData)", "description": "Adds a row to the end of the model.  The new row will contain\n  null values unless rowData is specified.\n  Notification of the row being added will be generated."}, {"method_name": "insertRow", "method_sig": "public void insertRow (int row,\n                      Vector<?> rowData)", "description": "Inserts a row at row in the model.  The new row\n  will contain null values unless rowData\n  is specified.  Notification of the row being added will be generated."}, {"method_name": "insertRow", "method_sig": "public void insertRow (int row,\n                      Object[] rowData)", "description": "Inserts a row at row in the model.  The new row\n  will contain null values unless rowData\n  is specified.  Notification of the row being added will be generated."}, {"method_name": "moveRow", "method_sig": "public void moveRow (int start,\n                    int end,\n                    int to)", "description": "Moves one or more rows from the inclusive range start to\n  end to the to position in the model.\n  After the move, the row that was at index start\n  will be at index to.\n  This method will send a tableChanged notification\n       message to all the listeners.\n\n  \n  Examples of moves:\n\n  1. moveRow(1,3,5);\n          a|B|C|D|e|f|g|h|i|j|k   - before\n          a|e|f|g|h|B|C|D|i|j|k   - after\n\n  2. moveRow(6,7,1);\n          a|b|c|d|e|f|G|H|i|j|k   - before\n          a|G|H|b|c|d|e|f|i|j|k   - after\n  "}, {"method_name": "removeRow", "method_sig": "public void removeRow (int row)", "description": "Removes the row at row from the model.  Notification\n  of the row being removed will be sent to all the listeners."}, {"method_name": "setColumnIdentifiers", "method_sig": "public void setColumnIdentifiers (Vector<?> columnIdentifiers)", "description": "Replaces the column identifiers in the model.  If the number of\n newIdentifiers is greater than the current number\n of columns, new columns are added to the end of each row in the model.\n If the number of newIdentifiers is less than the current\n number of columns, all the extra columns at the end of a row are\n discarded."}, {"method_name": "setColumnIdentifiers", "method_sig": "public void setColumnIdentifiers (Object[] newIdentifiers)", "description": "Replaces the column identifiers in the model.  If the number of\n newIdentifiers is greater than the current number\n of columns, new columns are added to the end of each row in the model.\n If the number of newIdentifiers is less than the current\n number of columns, all the extra columns at the end of a row are\n discarded."}, {"method_name": "setColumnCount", "method_sig": "public void setColumnCount (int columnCount)", "description": "Sets the number of columns in the model.  If the new size is greater\n  than the current size, new columns are added to the end of the model\n  with null cell values.\n  If the new size is less than the current size, all columns at index\n  columnCount and greater are discarded."}, {"method_name": "addColumn", "method_sig": "public void addColumn (Object columnName)", "description": "Adds a column to the model.  The new column will have the\n  identifier columnName, which may be null.  This method\n  will send a\n  tableChanged notification message to all the listeners.\n  This method is a cover for addColumn(Object, Vector) which\n  uses null as the data vector."}, {"method_name": "addColumn", "method_sig": "public void addColumn (Object columnName,\n                      Vector<?> columnData)", "description": "Adds a column to the model.  The new column will have the\n  identifier columnName, which may be null.\n  columnData is the\n  optional vector of data for the column.  If it is null\n  the column is filled with null values.  Otherwise,\n  the new data will be added to model starting with the first\n  element going to row 0, etc.  This method will send a\n  tableChanged notification message to all the listeners."}, {"method_name": "addColumn", "method_sig": "public void addColumn (Object columnName,\n                      Object[] columnData)", "description": "Adds a column to the model.  The new column will have the\n  identifier columnName.  columnData is the\n  optional array of data for the column.  If it is null\n  the column is filled with null values.  Otherwise,\n  the new data will be added to model starting with the first\n  element going to row 0, etc.  This method will send a\n  tableChanged notification message to all the listeners."}, {"method_name": "getRowCount", "method_sig": "public int getRowCount()", "description": "Returns the number of rows in this data table."}, {"method_name": "getColumnCount", "method_sig": "public int getColumnCount()", "description": "Returns the number of columns in this data table."}, {"method_name": "getColumnName", "method_sig": "public String getColumnName (int column)", "description": "Returns the column name."}, {"method_name": "isCellEditable", "method_sig": "public boolean isCellEditable (int row,\n                              int column)", "description": "Returns true regardless of parameter values."}, {"method_name": "getValueAt", "method_sig": "public Object getValueAt (int row,\n                         int column)", "description": "Returns an attribute value for the cell at row\n and column."}, {"method_name": "setValueAt", "method_sig": "public void setValueAt (Object aValue,\n                       int row,\n                       int column)", "description": "Sets the object value for the cell at column and\n row.  aValue is the new value.  This method\n will generate a tableChanged notification."}, {"method_name": "convertToVector", "method_sig": "protected static Vector<Object> convertToVector (Object[] anArray)", "description": "Returns a vector that contains the same objects as the array."}, {"method_name": "convertToVector", "method_sig": "protected static Vector<Vector<Object>> convertToVector (Object[][] anArray)", "description": "Returns a vector of vectors that contains the same objects as the array."}]}