{"name": "Class JSpinner.AccessibleJSpinner", "module": "java.desktop", "package": "javax.swing", "text": "AccessibleJSpinner implements accessibility\n support for the JSpinner class.", "codes": ["protected class JSpinner.AccessibleJSpinner\nextends JComponent.AccessibleJComponent\nimplements AccessibleValue, AccessibleAction, AccessibleText, AccessibleEditableText, ChangeListener"], "fields": [], "methods": [{"method_name": "stateChanged", "method_sig": "public void stateChanged (ChangeEvent e)", "description": "Invoked when the target of the listener has changed its state."}, {"method_name": "getAccessibleRole", "method_sig": "public AccessibleRole getAccessibleRole()", "description": "Gets the role of this object.  The role of the object is the generic\n purpose or use of the class of this object.  For example, the role\n of a push button is AccessibleRole.PUSH_BUTTON.  The roles in\n AccessibleRole are provided so component developers can pick from\n a set of predefined roles.  This enables assistive technologies to\n provide a consistent interface to various tweaked subclasses of\n components (e.g., use AccessibleRole.PUSH_BUTTON for all components\n that act like a push button) as well as distinguish between subclasses\n that behave differently (e.g., AccessibleRole.CHECK_BOX for check boxes\n and AccessibleRole.RADIO_BUTTON for radio buttons).\n Note that the AccessibleRole class is also extensible, so\n custom component developers can define their own AccessibleRole's\n if the set of predefined roles is inadequate."}, {"method_name": "getAccessibleChildrenCount", "method_sig": "public int getAccessibleChildrenCount()", "description": "Returns the number of accessible children of the object."}, {"method_name": "getAccessibleChild", "method_sig": "public Accessible getAccessibleChild (int i)", "description": "Returns the specified Accessible child of the object.  The Accessible\n children of an Accessible object are zero-based, so the first child\n of an Accessible child is at index 0, the second child is at index 1,\n and so on."}, {"method_name": "getAccessibleAction", "method_sig": "public AccessibleAction getAccessibleAction()", "description": "Gets the AccessibleAction associated with this object that supports\n one or more actions."}, {"method_name": "getAccessibleText", "method_sig": "public AccessibleText getAccessibleText()", "description": "Gets the AccessibleText associated with this object presenting\n text on the display."}, {"method_name": "getAccessibleValue", "method_sig": "public AccessibleValue getAccessibleValue()", "description": "Gets the AccessibleValue associated with this object."}, {"method_name": "getCurrentAccessibleValue", "method_sig": "public Number getCurrentAccessibleValue()", "description": "Get the value of this object as a Number.  If the value has not been\n set, the return value will be null."}, {"method_name": "setCurrentAccessibleValue", "method_sig": "public boolean setCurrentAccessibleValue (Number n)", "description": "Set the value of this object as a Number."}, {"method_name": "getMinimumAccessibleValue", "method_sig": "public Number getMinimumAccessibleValue()", "description": "Get the minimum value of this object as a Number."}, {"method_name": "getMaximumAccessibleValue", "method_sig": "public Number getMaximumAccessibleValue()", "description": "Get the maximum value of this object as a Number."}, {"method_name": "getAccessibleActionCount", "method_sig": "public int getAccessibleActionCount()", "description": "Returns the number of accessible actions available in this object\n If there are more than one, the first one is considered the \"default\"\n action of the object.\n\n Two actions are supported: AccessibleAction.INCREMENT which\n increments the spinner value and AccessibleAction.DECREMENT\n which decrements the spinner value"}, {"method_name": "getAccessibleActionDescription", "method_sig": "public String getAccessibleActionDescription (int i)", "description": "Returns a description of the specified action of the object."}, {"method_name": "doAccessibleAction", "method_sig": "public boolean doAccessibleAction (int i)", "description": "Performs the specified Action on the object"}, {"method_name": "getIndexAtPoint", "method_sig": "public int getIndexAtPoint (Point p)", "description": "Given a point in local coordinates, return the zero-based index\n of the character under that Point.  If the point is invalid,\n this method returns -1."}, {"method_name": "getCharacterBounds", "method_sig": "public Rectangle getCharacterBounds (int i)", "description": "Determines the bounding box of the character at the given\n index into the string.  The bounds are returned in local\n coordinates.  If the index is invalid an empty rectangle is\n returned."}, {"method_name": "getCharCount", "method_sig": "public int getCharCount()", "description": "Returns the number of characters (valid indicies)"}, {"method_name": "getCaretPosition", "method_sig": "public int getCaretPosition()", "description": "Returns the zero-based offset of the caret.\n\n Note: That to the right of the caret will have the same index\n value as the offset (the caret is between two characters)."}, {"method_name": "getAtIndex", "method_sig": "public String getAtIndex (int part,\n                         int index)", "description": "Returns the String at a given index."}, {"method_name": "getAfterIndex", "method_sig": "public String getAfterIndex (int part,\n                            int index)", "description": "Returns the String after a given index."}, {"method_name": "getBeforeIndex", "method_sig": "public String getBeforeIndex (int part,\n                             int index)", "description": "Returns the String before a given index."}, {"method_name": "getCharacterAttribute", "method_sig": "public AttributeSet getCharacterAttribute (int i)", "description": "Returns the AttributeSet for a given character at a given index"}, {"method_name": "getSelectionStart", "method_sig": "public int getSelectionStart()", "description": "Returns the start offset within the selected text.\n If there is no selection, but there is\n a caret, the start and end offsets will be the same."}, {"method_name": "getSelectionEnd", "method_sig": "public int getSelectionEnd()", "description": "Returns the end offset within the selected text.\n If there is no selection, but there is\n a caret, the start and end offsets will be the same."}, {"method_name": "getSelectedText", "method_sig": "public String getSelectedText()", "description": "Returns the portion of the text that is selected."}, {"method_name": "setTextContents", "method_sig": "public void setTextContents (String s)", "description": "Sets the text contents to the specified string."}, {"method_name": "insertTextAtIndex", "method_sig": "public void insertTextAtIndex (int index,\n                              String s)", "description": "Inserts the specified string at the given index/"}, {"method_name": "getTextRange", "method_sig": "public String getTextRange (int startIndex,\n                           int endIndex)", "description": "Returns the text string between two indices."}, {"method_name": "delete", "method_sig": "public void delete (int startIndex,\n                   int endIndex)", "description": "Deletes the text between two indices"}, {"method_name": "cut", "method_sig": "public void cut (int startIndex,\n                int endIndex)", "description": "Cuts the text between two indices into the system clipboard."}, {"method_name": "paste", "method_sig": "public void paste (int startIndex)", "description": "Pastes the text from the system clipboard into the text\n starting at the specified index."}, {"method_name": "replaceText", "method_sig": "public void replaceText (int startIndex,\n                        int endIndex,\n                        String s)", "description": "Replaces the text between two indices with the specified\n string."}, {"method_name": "selectText", "method_sig": "public void selectText (int startIndex,\n                       int endIndex)", "description": "Selects the text between two indices."}, {"method_name": "setAttributes", "method_sig": "public void setAttributes (int startIndex,\n                          int endIndex,\n                          AttributeSet as)", "description": "Sets attributes for the text between two indices."}]}