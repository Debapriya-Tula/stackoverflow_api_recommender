{"name": "Interface TreeSelectionModel", "module": "java.desktop", "package": "javax.swing.tree", "text": "This interface represents the current state of the selection for\n the tree component.\n For information and examples of using tree selection models,\n see How to Use Trees\n in The Java Tutorial.\n\n The state of the tree selection is characterized by\n a set of TreePaths, and optionally a set of integers. The mapping\n from TreePath to integer is done by way of an instance of RowMapper.\n It is not necessary for a TreeSelectionModel to have a RowMapper to\n correctly operate, but without a RowMapper getSelectionRows\n will return null.\n\n \n\n A TreeSelectionModel can be configured to allow only one\n path (SINGLE_TREE_SELECTION) a number of\n contiguous paths (CONTIGUOUS_TREE_SELECTION) or a number of\n discontiguous paths (DISCONTIGUOUS_TREE_SELECTION).\n A RowMapper is used to determine if TreePaths are\n contiguous.\n In the absence of a RowMapper CONTIGUOUS_TREE_SELECTION and\n DISCONTIGUOUS_TREE_SELECTION behave the same, that is they\n allow any number of paths to be contained in the TreeSelectionModel.\n\n \n\n For a selection model of CONTIGUOUS_TREE_SELECTION any\n time the paths are changed (setSelectionPath,\n addSelectionPath ...) the TreePaths are again checked to\n make they are contiguous. A check of the TreePaths can also be forced\n by invoking resetRowSelection. How a set of discontiguous\n TreePaths is mapped to a contiguous set is left to implementors of\n this interface to enforce a particular policy.\n\n \n\n Implementations should combine duplicate TreePaths that are\n added to the selection. For example, the following code\n \n   TreePath[] paths = new TreePath[] { treePath, treePath };\n   treeSelectionModel.setSelectionPaths(paths);\n \n should result in only one path being selected:\n treePath, and\n not two copies of treePath.\n\n \n\n The lead TreePath is the last path that was added (or set). The lead\n row is then the row that corresponds to the TreePath as determined\n from the RowMapper.", "codes": ["public interface TreeSelectionModel"], "fields": [{"field_name": "SINGLE_TREE_SELECTION", "field_sig": "static final\u00a0int SINGLE_TREE_SELECTION", "description": "Selection can only contain one path at a time."}, {"field_name": "CONTIGUOUS_TREE_SELECTION", "field_sig": "static final\u00a0int CONTIGUOUS_TREE_SELECTION", "description": "Selection can only be contiguous. This will only be enforced if\n a RowMapper instance is provided. That is, if no RowMapper is set\n this behaves the same as DISCONTIGUOUS_TREE_SELECTION."}, {"field_name": "DISCONTIGUOUS_TREE_SELECTION", "field_sig": "static final\u00a0int DISCONTIGUOUS_TREE_SELECTION", "description": "Selection can contain any number of items that are not necessarily\n contiguous."}], "methods": [{"method_name": "setSelectionMode", "method_sig": "void setSelectionMode (int mode)", "description": "Sets the selection model, which must be one of SINGLE_TREE_SELECTION,\n CONTIGUOUS_TREE_SELECTION or DISCONTIGUOUS_TREE_SELECTION.\n \n This may change the selection if the current selection is not valid\n for the new mode. For example, if three TreePaths are\n selected when the mode is changed to SINGLE_TREE_SELECTION,\n only one TreePath will remain selected. It is up to the particular\n implementation to decide what TreePath remains selected."}, {"method_name": "getSelectionMode", "method_sig": "int getSelectionMode()", "description": "Returns the current selection mode, one of\n SINGLE_TREE_SELECTION,\n CONTIGUOUS_TREE_SELECTION or\n DISCONTIGUOUS_TREE_SELECTION."}, {"method_name": "setSelectionPath", "method_sig": "void setSelectionPath (TreePath path)", "description": "Sets the selection to path. If this represents a change, then\n the TreeSelectionListeners are notified. If path is\n null, this has the same effect as invoking clearSelection."}, {"method_name": "setSelectionPaths", "method_sig": "void setSelectionPaths (TreePath[] paths)", "description": "Sets the selection to path. If this represents a change, then\n the TreeSelectionListeners are notified. If paths is\n null, this has the same effect as invoking clearSelection."}, {"method_name": "addSelectionPath", "method_sig": "void addSelectionPath (TreePath path)", "description": "Adds path to the current selection. If path is not currently\n in the selection the TreeSelectionListeners are notified. This has\n no effect if path is null."}, {"method_name": "addSelectionPaths", "method_sig": "void addSelectionPaths (TreePath[] paths)", "description": "Adds paths to the current selection.  If any of the paths in\n paths are not currently in the selection the TreeSelectionListeners\n are notified. This has\n no effect if paths is null."}, {"method_name": "removeSelectionPath", "method_sig": "void removeSelectionPath (TreePath path)", "description": "Removes path from the selection. If path is in the selection\n The TreeSelectionListeners are notified. This has no effect if\n path is null."}, {"method_name": "removeSelectionPaths", "method_sig": "void removeSelectionPaths (TreePath[] paths)", "description": "Removes paths from the selection.  If any of the paths in\n paths\n are in the selection, the TreeSelectionListeners are notified.\n This method has no effect if paths is null."}, {"method_name": "getSelectionPath", "method_sig": "TreePath getSelectionPath()", "description": "Returns the first path in the selection. How first is defined is\n up to implementors, and may not necessarily be the TreePath with\n the smallest integer value as determined from the\n RowMapper."}, {"method_name": "getSelectionPaths", "method_sig": "TreePath[] getSelectionPaths()", "description": "Returns the paths in the selection. This will return null (or an\n empty array) if nothing is currently selected."}, {"method_name": "getSelectionCount", "method_sig": "int getSelectionCount()", "description": "Returns the number of paths that are selected."}, {"method_name": "isPathSelected", "method_sig": "boolean isPathSelected (TreePath path)", "description": "Returns true if the path, path, is in the current\n selection."}, {"method_name": "isSelectionEmpty", "method_sig": "boolean isSelectionEmpty()", "description": "Returns true if the selection is currently empty."}, {"method_name": "clearSelection", "method_sig": "void clearSelection()", "description": "Empties the current selection.  If this represents a change in the\n current selection, the selection listeners are notified."}, {"method_name": "setRowMapper", "method_sig": "void setRowMapper (RowMapper newMapper)", "description": "Sets the RowMapper instance. This instance is used to determine\n the row for a particular TreePath."}, {"method_name": "getRowMapper", "method_sig": "RowMapper getRowMapper()", "description": "Returns the RowMapper instance that is able to map a TreePath to a\n row."}, {"method_name": "getSelectionRows", "method_sig": "int[] getSelectionRows()", "description": "Returns all of the currently selected rows. This will return\n null (or an empty array) if there are no selected TreePaths or\n a RowMapper has not been set."}, {"method_name": "getMinSelectionRow", "method_sig": "int getMinSelectionRow()", "description": "Returns the smallest value obtained from the RowMapper for the\n current set of selected TreePaths. If nothing is selected,\n or there is no RowMapper, this will return -1."}, {"method_name": "getMaxSelectionRow", "method_sig": "int getMaxSelectionRow()", "description": "Returns the largest value obtained from the RowMapper for the\n current set of selected TreePaths. If nothing is selected,\n or there is no RowMapper, this will return -1."}, {"method_name": "isRowSelected", "method_sig": "boolean isRowSelected (int row)", "description": "Returns true if the row identified by row is selected."}, {"method_name": "resetRowSelection", "method_sig": "void resetRowSelection()", "description": "Updates this object's mapping from TreePaths to rows. This should\n be invoked when the mapping from TreePaths to integers has changed\n (for example, a node has been expanded).\n \n You do not normally have to call this; JTree and its associated\n listeners will invoke this for you. If you are implementing your own\n view class, then you will have to invoke this."}, {"method_name": "getLeadSelectionRow", "method_sig": "int getLeadSelectionRow()", "description": "Returns the lead selection index. That is the last index that was\n added."}, {"method_name": "getLeadSelectionPath", "method_sig": "TreePath getLeadSelectionPath()", "description": "Returns the last path that was added. This may differ from the\n leadSelectionPath property maintained by the JTree."}, {"method_name": "addPropertyChangeListener", "method_sig": "void addPropertyChangeListener (PropertyChangeListener listener)", "description": "Adds a PropertyChangeListener to the listener list.\n The listener is registered for all properties.\n \n A PropertyChangeEvent will get fired when the selection mode\n changes."}, {"method_name": "removePropertyChangeListener", "method_sig": "void removePropertyChangeListener (PropertyChangeListener listener)", "description": "Removes a PropertyChangeListener from the listener list.\n This removes a PropertyChangeListener that was registered\n for all properties."}, {"method_name": "addTreeSelectionListener", "method_sig": "void addTreeSelectionListener (TreeSelectionListener x)", "description": "Adds x to the list of listeners that are notified each time the\n set of selected TreePaths changes."}, {"method_name": "removeTreeSelectionListener", "method_sig": "void removeTreeSelectionListener (TreeSelectionListener x)", "description": "Removes x from the list of listeners that are notified each time\n the set of selected TreePaths changes."}]}