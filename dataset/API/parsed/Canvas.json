{"name": "Class Canvas", "module": "java.desktop", "package": "java.awt", "text": "A Canvas component represents a blank rectangular\n area of the screen onto which the application can draw or from\n which the application can trap input events from the user.\n \n An application must subclass the Canvas class in\n order to get useful functionality such as creating a custom\n component. The paint method must be overridden\n in order to perform custom graphics on the canvas.", "codes": ["public class Canvas\nextends Component\nimplements Accessible"], "fields": [], "methods": [{"method_name": "addNotify", "method_sig": "public void addNotify()", "description": "Creates the peer of the canvas.  This peer allows you to change the\n user interface of the canvas without changing its functionality."}, {"method_name": "paint", "method_sig": "public void paint (Graphics g)", "description": "Paints this canvas.\n \n Most applications that subclass Canvas should\n override this method in order to perform some useful operation\n (typically, custom painting of the canvas).\n The default operation is simply to clear the canvas.\n Applications that override this method need not call\n super.paint(g)."}, {"method_name": "update", "method_sig": "public void update (Graphics g)", "description": "Updates this canvas.\n \n This method is called in response to a call to repaint.\n The canvas is first cleared by filling it with the background\n color, and then completely redrawn by calling this canvas's\n paint method.\n Note: applications that override this method should either call\n super.update(g) or incorporate the functionality described\n above into their own code."}, {"method_name": "createBufferStrategy", "method_sig": "public void createBufferStrategy (int numBuffers)", "description": "Creates a new strategy for multi-buffering on this component.\n Multi-buffering is useful for rendering performance.  This method\n attempts to create the best strategy available with the number of\n buffers supplied.  It will always create a BufferStrategy\n with that number of buffers.\n A page-flipping strategy is attempted first, then a blitting strategy\n using accelerated buffers.  Finally, an unaccelerated blitting\n strategy is used.\n \n Each time this method is called,\n the existing buffer strategy for this component is discarded."}, {"method_name": "createBufferStrategy", "method_sig": "public void createBufferStrategy (int numBuffers,\n                                 BufferCapabilities caps)\n                          throws AWTException", "description": "Creates a new strategy for multi-buffering on this component with the\n required buffer capabilities.  This is useful, for example, if only\n accelerated memory or page flipping is desired (as specified by the\n buffer capabilities).\n \n Each time this method\n is called, the existing buffer strategy for this component is discarded."}, {"method_name": "getBufferStrategy", "method_sig": "public BufferStrategy getBufferStrategy()", "description": "Returns the BufferStrategy used by this component.  This\n method will return null if a BufferStrategy has not yet\n been created or has been disposed."}, {"method_name": "getAccessibleContext", "method_sig": "public AccessibleContext getAccessibleContext()", "description": "Gets the AccessibleContext associated with this Canvas.\n For canvases, the AccessibleContext takes the form of an\n AccessibleAWTCanvas.\n A new AccessibleAWTCanvas instance is created if necessary."}]}