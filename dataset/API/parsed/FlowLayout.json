{"name": "Class FlowLayout", "module": "java.desktop", "package": "java.awt", "text": "A flow layout arranges components in a directional flow, much\n like lines of text in a paragraph. The flow direction is\n determined by the container's componentOrientation\n property and may be one of two values:\n \nComponentOrientation.LEFT_TO_RIGHT\nComponentOrientation.RIGHT_TO_LEFT\n\n Flow layouts are typically used\n to arrange buttons in a panel. It arranges buttons\n horizontally until no more buttons fit on the same line.\n The line alignment is determined by the align\n property. The possible values are:\n \nLEFT\nRIGHT\nCENTER\nLEADING\nTRAILING\n\n\n For example, the following picture shows an applet using the flow\n layout manager (its default layout manager) to position three buttons:\n \n\n\n Here is the code for this applet:\n\n \n import java.awt.*;\n import java.applet.Applet;\n\n public class myButtons extends Applet {\n     Button button1, button2, button3;\n     public void init() {\n         button1 = new Button(\"Ok\");\n         button2 = new Button(\"Open\");\n         button3 = new Button(\"Close\");\n         add(button1);\n         add(button2);\n         add(button3);\n     }\n }\n \n\n A flow layout lets each component assume its natural (preferred) size.", "codes": ["public class FlowLayout\nextends Object\nimplements LayoutManager, Serializable"], "fields": [{"field_name": "LEFT", "field_sig": "public static final\u00a0int LEFT", "description": "This value indicates that each row of components\n should be left-justified."}, {"field_name": "CENTER", "field_sig": "public static final\u00a0int CENTER", "description": "This value indicates that each row of components\n should be centered."}, {"field_name": "RIGHT", "field_sig": "public static final\u00a0int RIGHT", "description": "This value indicates that each row of components\n should be right-justified."}, {"field_name": "LEADING", "field_sig": "public static final\u00a0int LEADING", "description": "This value indicates that each row of components\n should be justified to the leading edge of the container's\n orientation, for example, to the left in left-to-right orientations."}, {"field_name": "TRAILING", "field_sig": "public static final\u00a0int TRAILING", "description": "This value indicates that each row of components\n should be justified to the trailing edge of the container's\n orientation, for example, to the right in left-to-right orientations."}], "methods": [{"method_name": "getAlignment", "method_sig": "public int getAlignment()", "description": "Gets the alignment for this layout.\n Possible values are FlowLayout.LEFT,\n FlowLayout.RIGHT, FlowLayout.CENTER,\n FlowLayout.LEADING,\n or FlowLayout.TRAILING."}, {"method_name": "setAlignment", "method_sig": "public void setAlignment (int align)", "description": "Sets the alignment for this layout.\n Possible values are\n \nFlowLayout.LEFT\nFlowLayout.RIGHT\nFlowLayout.CENTER\nFlowLayout.LEADING\nFlowLayout.TRAILING\n"}, {"method_name": "getHgap", "method_sig": "public int getHgap()", "description": "Gets the horizontal gap between components\n and between the components and the borders\n of the Container"}, {"method_name": "setHgap", "method_sig": "public void setHgap (int hgap)", "description": "Sets the horizontal gap between components and\n between the components and the borders of the\n Container."}, {"method_name": "getVgap", "method_sig": "public int getVgap()", "description": "Gets the vertical gap between components and\n between the components and the borders of the\n Container."}, {"method_name": "setVgap", "method_sig": "public void setVgap (int vgap)", "description": "Sets the vertical gap between components and between\n the components and the borders of the Container."}, {"method_name": "setAlignOnBaseline", "method_sig": "public void setAlignOnBaseline (boolean alignOnBaseline)", "description": "Sets whether or not components should be vertically aligned along their\n baseline.  Components that do not have a baseline will be centered.\n The default is false."}, {"method_name": "getAlignOnBaseline", "method_sig": "public boolean getAlignOnBaseline()", "description": "Returns true if components are to be vertically aligned along\n their baseline.  The default is false."}, {"method_name": "addLayoutComponent", "method_sig": "public void addLayoutComponent (String name,\n                               Component comp)", "description": "Adds the specified component to the layout.\n Not used by this class."}, {"method_name": "removeLayoutComponent", "method_sig": "public void removeLayoutComponent (Component comp)", "description": "Removes the specified component from the layout.\n Not used by this class."}, {"method_name": "preferredLayoutSize", "method_sig": "public Dimension preferredLayoutSize (Container target)", "description": "Returns the preferred dimensions for this layout given the\n visible components in the specified target container."}, {"method_name": "minimumLayoutSize", "method_sig": "public Dimension minimumLayoutSize (Container target)", "description": "Returns the minimum dimensions needed to layout the visible\n components contained in the specified target container."}, {"method_name": "layoutContainer", "method_sig": "public void layoutContainer (Container target)", "description": "Lays out the container. This method lets each\n visible component take\n its preferred size by reshaping the components in the\n target container in order to satisfy the alignment of\n this FlowLayout object."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a string representation of this FlowLayout\n object and its values."}]}