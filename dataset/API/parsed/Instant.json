{"name": "Class Instant", "module": "java.base", "package": "java.time", "text": "An instantaneous point on the time-line.\n \n This class models a single instantaneous point on the time-line.\n This might be used to record event time-stamps in the application.\n \n The range of an instant requires the storage of a number larger than a long.\n To achieve this, the class stores a long representing epoch-seconds and an\n int representing nanosecond-of-second, which will always be between 0 and 999,999,999.\n The epoch-seconds are measured from the standard Java epoch of 1970-01-01T00:00:00Z\n where instants after the epoch have positive values, and earlier instants have negative values.\n For both the epoch-second and nanosecond parts, a larger value is always later on the time-line\n than a smaller value.\n\n Time-scale\n\n The length of the solar day is the standard way that humans measure time.\n This has traditionally been subdivided into 24 hours of 60 minutes of 60 seconds,\n forming a 86400 second day.\n \n Modern timekeeping is based on atomic clocks which precisely define an SI second\n relative to the transitions of a Caesium atom. The length of an SI second was defined\n to be very close to the 86400th fraction of a day.\n \n Unfortunately, as the Earth rotates the length of the day varies.\n In addition, over time the average length of the day is getting longer as the Earth slows.\n As a result, the length of a solar day in 2012 is slightly longer than 86400 SI seconds.\n The actual length of any given day and the amount by which the Earth is slowing\n are not predictable and can only be determined by measurement.\n The UT1 time-scale captures the accurate length of day, but is only available some\n time after the day has completed.\n \n The UTC time-scale is a standard approach to bundle up all the additional fractions\n of a second from UT1 into whole seconds, known as leap-seconds.\n A leap-second may be added or removed depending on the Earth's rotational changes.\n As such, UTC permits a day to have 86399 SI seconds or 86401 SI seconds where\n necessary in order to keep the day aligned with the Sun.\n \n The modern UTC time-scale was introduced in 1972, introducing the concept of whole leap-seconds.\n Between 1958 and 1972, the definition of UTC was complex, with minor sub-second leaps and\n alterations to the length of the notional second. As of 2012, discussions are underway\n to change the definition of UTC again, with the potential to remove leap seconds or\n introduce other changes.\n \n Given the complexity of accurate timekeeping described above, this Java API defines\n its own time-scale, the Java Time-Scale.\n \n The Java Time-Scale divides each calendar day into exactly 86400\n subdivisions, known as seconds.  These seconds may differ from the\n SI second.  It closely matches the de facto international civil time\n scale, the definition of which changes from time to time.\n \n The Java Time-Scale has slightly different definitions for different\n segments of the time-line, each based on the consensus international\n time scale that is used as the basis for civil time. Whenever the\n internationally-agreed time scale is modified or replaced, a new\n segment of the Java Time-Scale must be defined for it.  Each segment\n must meet these requirements:\n \nthe Java Time-Scale shall closely match the underlying international\n  civil time scale;\nthe Java Time-Scale shall exactly match the international civil\n  time scale at noon each day;\nthe Java Time-Scale shall have a precisely-defined relationship to\n  the international civil time scale.\n\n There are currently, as of 2013, two segments in the Java time-scale.\n \n For the segment from 1972-11-03 (exact boundary discussed below) until\n further notice, the consensus international time scale is UTC (with\n leap seconds).  In this segment, the Java Time-Scale is identical to\n UTC-SLS.\n This is identical to UTC on days that do not have a leap second.\n On days that do have a leap second, the leap second is spread equally\n over the last 1000 seconds of the day, maintaining the appearance of\n exactly 86400 seconds per day.\n \n For the segment prior to 1972-11-03, extending back arbitrarily far,\n the consensus international time scale is defined to be UT1, applied\n proleptically, which is equivalent to the (mean) solar time on the\n prime meridian (Greenwich). In this segment, the Java Time-Scale is\n identical to the consensus international time scale. The exact\n boundary between the two segments is the instant where UT1 = UTC\n between 1972-11-03T00:00 and 1972-11-04T12:00.\n \n Implementations of the Java time-scale using the JSR-310 API are not\n required to provide any clock that is sub-second accurate, or that\n progresses monotonically or smoothly. Implementations are therefore\n not required to actually perform the UTC-SLS slew or to otherwise be\n aware of leap seconds. JSR-310 does, however, require that\n implementations must document the approach they use when defining a\n clock representing the current instant.\n See Clock for details on the available clocks.\n \n The Java time-scale is used for all date-time classes.\n This includes Instant, LocalDate, LocalTime, OffsetDateTime,\n ZonedDateTime and Duration.\n\n \n This is a value-based\n class; use of identity-sensitive operations (including reference equality\n (==), identity hash code, or synchronization) on instances of\n Instant may have unpredictable results and should be avoided.\n The equals method should be used for comparisons.", "codes": ["public final class Instant\nextends Object\nimplements Temporal, TemporalAdjuster, Comparable<Instant>, Serializable"], "fields": [{"field_name": "EPOCH", "field_sig": "public static final\u00a0Instant EPOCH", "description": "Constant for the 1970-01-01T00:00:00Z epoch instant."}, {"field_name": "MIN", "field_sig": "public static final\u00a0Instant MIN", "description": "The minimum supported Instant, '-1000000000-01-01T00:00Z'.\n This could be used by an application as a \"far past\" instant.\n \n This is one year earlier than the minimum LocalDateTime.\n This provides sufficient values to handle the range of ZoneOffset\n which affect the instant in addition to the local date-time.\n The value is also chosen such that the value of the year fits in\n an int."}, {"field_name": "MAX", "field_sig": "public static final\u00a0Instant MAX", "description": "The maximum supported Instant, '1000000000-12-31T23:59:59.999999999Z'.\n This could be used by an application as a \"far future\" instant.\n \n This is one year later than the maximum LocalDateTime.\n This provides sufficient values to handle the range of ZoneOffset\n which affect the instant in addition to the local date-time.\n The value is also chosen such that the value of the year fits in\n an int."}], "methods": [{"method_name": "now", "method_sig": "public static Instant now()", "description": "Obtains the current instant from the system clock.\n \n This will query the system UTC clock to\n obtain the current instant.\n \n Using this method will prevent the ability to use an alternate time-source for\n testing because the clock is effectively hard-coded."}, {"method_name": "now", "method_sig": "public static Instant now (Clock clock)", "description": "Obtains the current instant from the specified clock.\n \n This will query the specified clock to obtain the current time.\n \n Using this method allows the use of an alternate clock for testing.\n The alternate clock may be introduced using dependency injection."}, {"method_name": "ofEpochSecond", "method_sig": "public static Instant ofEpochSecond (long epochSecond)", "description": "Obtains an instance of Instant using seconds from the\n epoch of 1970-01-01T00:00:00Z.\n \n The nanosecond field is set to zero."}, {"method_name": "ofEpochSecond", "method_sig": "public static Instant ofEpochSecond (long epochSecond,\n                                    long nanoAdjustment)", "description": "Obtains an instance of Instant using seconds from the\n epoch of 1970-01-01T00:00:00Z and nanosecond fraction of second.\n \n This method allows an arbitrary number of nanoseconds to be passed in.\n The factory will alter the values of the second and nanosecond in order\n to ensure that the stored nanosecond is in the range 0 to 999,999,999.\n For example, the following will result in exactly the same instant:\n \n  Instant.ofEpochSecond(3, 1);\n  Instant.ofEpochSecond(4, -999_999_999);\n  Instant.ofEpochSecond(2, 1000_000_001);\n "}, {"method_name": "ofEpochMilli", "method_sig": "public static Instant ofEpochMilli (long epochMilli)", "description": "Obtains an instance of Instant using milliseconds from the\n epoch of 1970-01-01T00:00:00Z.\n \n The seconds and nanoseconds are extracted from the specified milliseconds."}, {"method_name": "from", "method_sig": "public static Instant from (TemporalAccessor temporal)", "description": "Obtains an instance of Instant from a temporal object.\n \n This obtains an instant based on the specified temporal.\n A TemporalAccessor represents an arbitrary set of date and time information,\n which this factory converts to an instance of Instant.\n \n The conversion extracts the INSTANT_SECONDS\n and NANO_OF_SECOND fields.\n \n This method matches the signature of the functional interface TemporalQuery\n allowing it to be used as a query via method reference, Instant::from."}, {"method_name": "parse", "method_sig": "public static Instant parse (CharSequence text)", "description": "Obtains an instance of Instant from a text string such as\n 2007-12-03T10:15:30.00Z.\n \n The string must represent a valid instant in UTC and is parsed using\n DateTimeFormatter.ISO_INSTANT."}, {"method_name": "isSupported", "method_sig": "public boolean isSupported (TemporalField field)", "description": "Checks if the specified field is supported.\n \n This checks if this instant can be queried for the specified field.\n If false, then calling the range,\n get and with(TemporalField, long)\n methods will throw an exception.\n \n If the field is a ChronoField then the query is implemented here.\n The supported fields are:\n \nNANO_OF_SECOND\nMICRO_OF_SECOND\nMILLI_OF_SECOND\nINSTANT_SECONDS\n\n All other ChronoField instances will return false.\n \n If the field is not a ChronoField, then the result of this method\n is obtained by invoking TemporalField.isSupportedBy(TemporalAccessor)\n passing this as the argument.\n Whether the field is supported is determined by the field."}, {"method_name": "isSupported", "method_sig": "public boolean isSupported (TemporalUnit unit)", "description": "Checks if the specified unit is supported.\n \n This checks if the specified unit can be added to, or subtracted from, this date-time.\n If false, then calling the plus(long, TemporalUnit) and\n minus methods will throw an exception.\n \n If the unit is a ChronoUnit then the query is implemented here.\n The supported units are:\n \nNANOS\nMICROS\nMILLIS\nSECONDS\nMINUTES\nHOURS\nHALF_DAYS\nDAYS\n\n All other ChronoUnit instances will return false.\n \n If the unit is not a ChronoUnit, then the result of this method\n is obtained by invoking TemporalUnit.isSupportedBy(Temporal)\n passing this as the argument.\n Whether the unit is supported is determined by the unit."}, {"method_name": "range", "method_sig": "public ValueRange range (TemporalField field)", "description": "Gets the range of valid values for the specified field.\n \n The range object expresses the minimum and maximum valid values for a field.\n This instant is used to enhance the accuracy of the returned range.\n If it is not possible to return the range, because the field is not supported\n or for some other reason, an exception is thrown.\n \n If the field is a ChronoField then the query is implemented here.\n The supported fields will return\n appropriate range instances.\n All other ChronoField instances will throw an UnsupportedTemporalTypeException.\n \n If the field is not a ChronoField, then the result of this method\n is obtained by invoking TemporalField.rangeRefinedBy(TemporalAccessor)\n passing this as the argument.\n Whether the range can be obtained is determined by the field."}, {"method_name": "get", "method_sig": "public int get (TemporalField field)", "description": "Gets the value of the specified field from this instant as an int.\n \n This queries this instant for the value of the specified field.\n The returned value will always be within the valid range of values for the field.\n If it is not possible to return the value, because the field is not supported\n or for some other reason, an exception is thrown.\n \n If the field is a ChronoField then the query is implemented here.\n The supported fields will return valid\n values based on this date-time, except INSTANT_SECONDS which is too\n large to fit in an int and throws a DateTimeException.\n All other ChronoField instances will throw an UnsupportedTemporalTypeException.\n \n If the field is not a ChronoField, then the result of this method\n is obtained by invoking TemporalField.getFrom(TemporalAccessor)\n passing this as the argument. Whether the value can be obtained,\n and what the value represents, is determined by the field."}, {"method_name": "getLong", "method_sig": "public long getLong (TemporalField field)", "description": "Gets the value of the specified field from this instant as a long.\n \n This queries this instant for the value of the specified field.\n If it is not possible to return the value, because the field is not supported\n or for some other reason, an exception is thrown.\n \n If the field is a ChronoField then the query is implemented here.\n The supported fields will return valid\n values based on this date-time.\n All other ChronoField instances will throw an UnsupportedTemporalTypeException.\n \n If the field is not a ChronoField, then the result of this method\n is obtained by invoking TemporalField.getFrom(TemporalAccessor)\n passing this as the argument. Whether the value can be obtained,\n and what the value represents, is determined by the field."}, {"method_name": "getEpochSecond", "method_sig": "public long getEpochSecond()", "description": "Gets the number of seconds from the Java epoch of 1970-01-01T00:00:00Z.\n \n The epoch second count is a simple incrementing count of seconds where\n second 0 is 1970-01-01T00:00:00Z.\n The nanosecond part is returned by getNano()."}, {"method_name": "getNano", "method_sig": "public int getNano()", "description": "Gets the number of nanoseconds, later along the time-line, from the start\n of the second.\n \n The nanosecond-of-second value measures the total number of nanoseconds from\n the second returned by getEpochSecond()."}, {"method_name": "with", "method_sig": "public Instant with (TemporalAdjuster adjuster)", "description": "Returns an adjusted copy of this instant.\n \n This returns an Instant, based on this one, with the instant adjusted.\n The adjustment takes place using the specified adjuster strategy object.\n Read the documentation of the adjuster to understand what adjustment will be made.\n \n The result of this method is obtained by invoking the\n TemporalAdjuster.adjustInto(Temporal) method on the\n specified adjuster passing this as the argument.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "with", "method_sig": "public Instant with (TemporalField field,\n                    long newValue)", "description": "Returns a copy of this instant with the specified field set to a new value.\n \n This returns an Instant, based on this one, with the value\n for the specified field changed.\n If it is not possible to set the value, because the field is not supported or for\n some other reason, an exception is thrown.\n \n If the field is a ChronoField then the adjustment is implemented here.\n The supported fields behave as follows:\n \nNANO_OF_SECOND -\n  Returns an Instant with the specified nano-of-second.\n  The epoch-second will be unchanged.\n MICRO_OF_SECOND -\n  Returns an Instant with the nano-of-second replaced by the specified\n  micro-of-second multiplied by 1,000. The epoch-second will be unchanged.\n MILLI_OF_SECOND -\n  Returns an Instant with the nano-of-second replaced by the specified\n  milli-of-second multiplied by 1,000,000. The epoch-second will be unchanged.\n INSTANT_SECONDS -\n  Returns an Instant with the specified epoch-second.\n  The nano-of-second will be unchanged.\n \n\n In all cases, if the new value is outside the valid range of values for the field\n then a DateTimeException will be thrown.\n \n All other ChronoField instances will throw an UnsupportedTemporalTypeException.\n \n If the field is not a ChronoField, then the result of this method\n is obtained by invoking TemporalField.adjustInto(Temporal, long)\n passing this as the argument. In this case, the field determines\n whether and how to adjust the instant.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "truncatedTo", "method_sig": "public Instant truncatedTo (TemporalUnit unit)", "description": "Returns a copy of this Instant truncated to the specified unit.\n \n Truncating the instant returns a copy of the original with fields\n smaller than the specified unit set to zero.\n The fields are calculated on the basis of using a UTC offset as seen\n in toString.\n For example, truncating with the MINUTES unit will\n round down to the nearest minute, setting the seconds and nanoseconds to zero.\n \n The unit must have a duration\n that divides into the length of a standard day without remainder.\n This includes all supplied time units on ChronoUnit and\n DAYS. Other units throw an exception.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "plus", "method_sig": "public Instant plus (TemporalAmount amountToAdd)", "description": "Returns a copy of this instant with the specified amount added.\n \n This returns an Instant, based on this one, with the specified amount added.\n The amount is typically Duration but may be any other type implementing\n the TemporalAmount interface.\n \n The calculation is delegated to the amount object by calling\n TemporalAmount.addTo(Temporal). The amount implementation is free\n to implement the addition in any way it wishes, however it typically\n calls back to plus(long, TemporalUnit). Consult the documentation\n of the amount implementation to determine if it can be successfully added.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "plus", "method_sig": "public Instant plus (long amountToAdd,\n                    TemporalUnit unit)", "description": "Returns a copy of this instant with the specified amount added.\n \n This returns an Instant, based on this one, with the amount\n in terms of the unit added. If it is not possible to add the amount, because the\n unit is not supported or for some other reason, an exception is thrown.\n \n If the field is a ChronoUnit then the addition is implemented here.\n The supported fields behave as follows:\n \nNANOS -\n  Returns an Instant with the specified number of nanoseconds added.\n  This is equivalent to plusNanos(long).\n MICROS -\n  Returns an Instant with the specified number of microseconds added.\n  This is equivalent to plusNanos(long) with the amount\n  multiplied by 1,000.\n MILLIS -\n  Returns an Instant with the specified number of milliseconds added.\n  This is equivalent to plusNanos(long) with the amount\n  multiplied by 1,000,000.\n SECONDS -\n  Returns an Instant with the specified number of seconds added.\n  This is equivalent to plusSeconds(long).\n MINUTES -\n  Returns an Instant with the specified number of minutes added.\n  This is equivalent to plusSeconds(long) with the amount\n  multiplied by 60.\n HOURS -\n  Returns an Instant with the specified number of hours added.\n  This is equivalent to plusSeconds(long) with the amount\n  multiplied by 3,600.\n HALF_DAYS -\n  Returns an Instant with the specified number of half-days added.\n  This is equivalent to plusSeconds(long) with the amount\n  multiplied by 43,200 (12 hours).\n DAYS -\n  Returns an Instant with the specified number of days added.\n  This is equivalent to plusSeconds(long) with the amount\n  multiplied by 86,400 (24 hours).\n \n\n All other ChronoUnit instances will throw an UnsupportedTemporalTypeException.\n \n If the field is not a ChronoUnit, then the result of this method\n is obtained by invoking TemporalUnit.addTo(Temporal, long)\n passing this as the argument. In this case, the unit determines\n whether and how to perform the addition.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "plusSeconds", "method_sig": "public Instant plusSeconds (long secondsToAdd)", "description": "Returns a copy of this instant with the specified duration in seconds added.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "plusMillis", "method_sig": "public Instant plusMillis (long millisToAdd)", "description": "Returns a copy of this instant with the specified duration in milliseconds added.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "plusNanos", "method_sig": "public Instant plusNanos (long nanosToAdd)", "description": "Returns a copy of this instant with the specified duration in nanoseconds added.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "minus", "method_sig": "public Instant minus (TemporalAmount amountToSubtract)", "description": "Returns a copy of this instant with the specified amount subtracted.\n \n This returns an Instant, based on this one, with the specified amount subtracted.\n The amount is typically Duration but may be any other type implementing\n the TemporalAmount interface.\n \n The calculation is delegated to the amount object by calling\n TemporalAmount.subtractFrom(Temporal). The amount implementation is free\n to implement the subtraction in any way it wishes, however it typically\n calls back to minus(long, TemporalUnit). Consult the documentation\n of the amount implementation to determine if it can be successfully subtracted.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "minus", "method_sig": "public Instant minus (long amountToSubtract,\n                     TemporalUnit unit)", "description": "Returns a copy of this instant with the specified amount subtracted.\n \n This returns an Instant, based on this one, with the amount\n in terms of the unit subtracted. If it is not possible to subtract the amount,\n because the unit is not supported or for some other reason, an exception is thrown.\n \n This method is equivalent to plus(long, TemporalUnit) with the amount negated.\n See that method for a full description of how addition, and thus subtraction, works.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "minusSeconds", "method_sig": "public Instant minusSeconds (long secondsToSubtract)", "description": "Returns a copy of this instant with the specified duration in seconds subtracted.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "minusMillis", "method_sig": "public Instant minusMillis (long millisToSubtract)", "description": "Returns a copy of this instant with the specified duration in milliseconds subtracted.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "minusNanos", "method_sig": "public Instant minusNanos (long nanosToSubtract)", "description": "Returns a copy of this instant with the specified duration in nanoseconds subtracted.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "query", "method_sig": "public <R> R query (TemporalQuery<R> query)", "description": "Queries this instant using the specified query.\n \n This queries this instant using the specified query strategy object.\n The TemporalQuery object defines the logic to be used to\n obtain the result. Read the documentation of the query to understand\n what the result of this method will be.\n \n The result of this method is obtained by invoking the\n TemporalQuery.queryFrom(TemporalAccessor) method on the\n specified query passing this as the argument."}, {"method_name": "adjustInto", "method_sig": "public Temporal adjustInto (Temporal temporal)", "description": "Adjusts the specified temporal object to have this instant.\n \n This returns a temporal object of the same observable type as the input\n with the instant changed to be the same as this.\n \n The adjustment is equivalent to using Temporal.with(TemporalField, long)\n twice, passing ChronoField.INSTANT_SECONDS and\n ChronoField.NANO_OF_SECOND as the fields.\n \n In most cases, it is clearer to reverse the calling pattern by using\n Temporal.with(TemporalAdjuster):\n \n   // these two lines are equivalent, but the second approach is recommended\n   temporal = thisInstant.adjustInto(temporal);\n   temporal = temporal.with(thisInstant);\n \n\n This instance is immutable and unaffected by this method call."}, {"method_name": "until", "method_sig": "public long until (Temporal endExclusive,\n                  TemporalUnit unit)", "description": "Calculates the amount of time until another instant in terms of the specified unit.\n \n This calculates the amount of time between two Instant\n objects in terms of a single TemporalUnit.\n The start and end points are this and the specified instant.\n The result will be negative if the end is before the start.\n The calculation returns a whole number, representing the number of\n complete units between the two instants.\n The Temporal passed to this method is converted to a\n Instant using from(TemporalAccessor).\n For example, the amount in seconds between two dates can be calculated\n using startInstant.until(endInstant, SECONDS).\n \n There are two equivalent ways of using this method.\n The first is to invoke this method.\n The second is to use TemporalUnit.between(Temporal, Temporal):\n \n   // these two lines are equivalent\n   amount = start.until(end, SECONDS);\n   amount = SECONDS.between(start, end);\n \n The choice should be made based on which makes the code more readable.\n \n The calculation is implemented in this method for ChronoUnit.\n The units NANOS, MICROS, MILLIS, SECONDS,\n MINUTES, HOURS, HALF_DAYS and DAYS\n are supported. Other ChronoUnit values will throw an exception.\n \n If the unit is not a ChronoUnit, then the result of this method\n is obtained by invoking TemporalUnit.between(Temporal, Temporal)\n passing this as the first argument and the converted input temporal\n as the second argument.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "atOffset", "method_sig": "public OffsetDateTime atOffset (ZoneOffset offset)", "description": "Combines this instant with an offset to create an OffsetDateTime.\n \n This returns an OffsetDateTime formed from this instant at the\n specified offset from UTC/Greenwich. An exception will be thrown if the\n instant is too large to fit into an offset date-time.\n \n This method is equivalent to\n OffsetDateTime.ofInstant(this, offset)."}, {"method_name": "atZone", "method_sig": "public ZonedDateTime atZone (ZoneId zone)", "description": "Combines this instant with a time-zone to create a ZonedDateTime.\n \n This returns an ZonedDateTime formed from this instant at the\n specified time-zone. An exception will be thrown if the instant is too\n large to fit into a zoned date-time.\n \n This method is equivalent to\n ZonedDateTime.ofInstant(this, zone)."}, {"method_name": "toEpochMilli", "method_sig": "public long toEpochMilli()", "description": "Converts this instant to the number of milliseconds from the epoch\n of 1970-01-01T00:00:00Z.\n \n If this instant represents a point on the time-line too far in the future\n or past to fit in a long milliseconds, then an exception is thrown.\n \n If this instant has greater than millisecond precision, then the conversion\n will drop any excess precision information as though the amount in nanoseconds\n was subject to integer division by one million."}, {"method_name": "compareTo", "method_sig": "public int compareTo (Instant otherInstant)", "description": "Compares this instant to the specified instant.\n \n The comparison is based on the time-line position of the instants.\n It is \"consistent with equals\", as defined by Comparable."}, {"method_name": "isAfter", "method_sig": "public boolean isAfter (Instant otherInstant)", "description": "Checks if this instant is after the specified instant.\n \n The comparison is based on the time-line position of the instants."}, {"method_name": "isBefore", "method_sig": "public boolean isBefore (Instant otherInstant)", "description": "Checks if this instant is before the specified instant.\n \n The comparison is based on the time-line position of the instants."}, {"method_name": "equals", "method_sig": "public boolean equals (Object otherInstant)", "description": "Checks if this instant is equal to the specified instant.\n \n The comparison is based on the time-line position of the instants."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Returns a hash code for this instant."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "A string representation of this instant using ISO-8601 representation.\n \n The format used is the same as DateTimeFormatter.ISO_INSTANT."}]}