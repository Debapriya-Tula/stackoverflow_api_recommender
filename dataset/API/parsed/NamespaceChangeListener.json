{"name": "Interface NamespaceChangeListener", "module": "java.naming", "package": "javax.naming.event", "text": "Specifies the methods that a listener interested in namespace changes\n must implement.\n Specifically, the listener is interested in NamingEvents\n with event types of OBJECT_ADDED, OBJECT_RENAMED, or\n OBJECT_REMOVED.\n\n Such a listener must:\n\nImplement this interface and its methods.\nImplement NamingListener.namingExceptionThrown() so that\n it will be notified of exceptions thrown while attempting to\n collect information about the events.\nRegister with the source using the source's addNamingListener()\n    method.\n\n A listener that wants to be notified of OBJECT_CHANGED event types\n should also implement the ObjectChangeListener\n interface.", "codes": ["public interface NamespaceChangeListener\nextends NamingListener"], "fields": [], "methods": [{"method_name": "objectAdded", "method_sig": "void objectAdded (NamingEvent evt)", "description": "Called when an object has been added.\n\n The binding of the newly added object can be obtained using\n evt.getNewBinding()."}, {"method_name": "objectRemoved", "method_sig": "void objectRemoved (NamingEvent evt)", "description": "Called when an object has been removed.\n\n The binding of the newly removed object can be obtained using\n evt.getOldBinding()."}, {"method_name": "objectRenamed", "method_sig": "void objectRenamed (NamingEvent evt)", "description": "Called when an object has been renamed.\n\n The binding of the renamed object can be obtained using\n evt.getNewBinding(). Its old binding (before the rename)\n can be obtained using evt.getOldBinding().\n One of these may be null if the old/new binding was outside the\n scope in which the listener has registered interest."}]}