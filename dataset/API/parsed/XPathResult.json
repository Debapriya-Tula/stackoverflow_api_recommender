{"name": "Interface XPathResult", "module": "jdk.xml.dom", "package": "org.w3c.dom.xpath", "text": "The XPathResult interface represents the result of the\n evaluation of an XPath 1.0 expression within the context of a particular\n node. Since evaluation of an XPath expression can result in various\n result types, this object makes it possible to discover and manipulate\n the type and value of the result.\n See also the Document Object Model (DOM) Level 3 XPath Specification.", "codes": ["public interface XPathResult"], "fields": [{"field_name": "ANY_TYPE", "field_sig": "static final\u00a0short ANY_TYPE", "description": "This code does not represent a specific type. An evaluation of an XPath\n expression will never produce this type. If this type is requested,\n then the evaluation returns whatever type naturally results from\n evaluation of the expression.\n If the natural result is a node set when ANY_TYPE was\n requested, then UNORDERED_NODE_ITERATOR_TYPE is always\n the resulting type. Any other representation of a node set must be\n explicitly requested."}, {"field_name": "NUMBER_TYPE", "field_sig": "static final\u00a0short NUMBER_TYPE", "description": "The result is a number as defined by . Document modification does not\n invalidate the number, but may mean that reevaluation would not yield\n the same number."}, {"field_name": "STRING_TYPE", "field_sig": "static final\u00a0short STRING_TYPE", "description": "The result is a string as defined by . Document modification does not\n invalidate the string, but may mean that the string no longer\n corresponds to the current document."}, {"field_name": "BOOLEAN_TYPE", "field_sig": "static final\u00a0short BOOLEAN_TYPE", "description": "The result is a boolean as defined by . Document modification does not\n invalidate the boolean, but may mean that reevaluation would not\n yield the same boolean."}, {"field_name": "UNORDERED_NODE_ITERATOR_TYPE", "field_sig": "static final\u00a0short UNORDERED_NODE_ITERATOR_TYPE", "description": "The result is a node set as defined by  that will be accessed\n iteratively, which may not produce nodes in a particular order.\n Document modification invalidates the iteration.\n This is the default type returned if the result is a node set and\n ANY_TYPE is requested."}, {"field_name": "ORDERED_NODE_ITERATOR_TYPE", "field_sig": "static final\u00a0short ORDERED_NODE_ITERATOR_TYPE", "description": "The result is a node set as defined by  that will be accessed\n iteratively, which will produce document-ordered nodes. Document\n modification invalidates the iteration."}, {"field_name": "UNORDERED_NODE_SNAPSHOT_TYPE", "field_sig": "static final\u00a0short UNORDERED_NODE_SNAPSHOT_TYPE", "description": "The result is a node set as defined by  that will be accessed as a\n snapshot list of nodes that may not be in a particular order.\n Document modification does not invalidate the snapshot but may mean\n that reevaluation would not yield the same snapshot and nodes in the\n snapshot may have been altered, moved, or removed from the document."}, {"field_name": "ORDERED_NODE_SNAPSHOT_TYPE", "field_sig": "static final\u00a0short ORDERED_NODE_SNAPSHOT_TYPE", "description": "The result is a node set as defined by  that will be accessed as a\n snapshot list of nodes that will be in original document order.\n Document modification does not invalidate the snapshot but may mean\n that reevaluation would not yield the same snapshot and nodes in the\n snapshot may have been altered, moved, or removed from the document."}, {"field_name": "ANY_UNORDERED_NODE_TYPE", "field_sig": "static final\u00a0short ANY_UNORDERED_NODE_TYPE", "description": "The result is a node set as defined by  and will be accessed as a\n single node, which may be nullif the node set is empty.\n Document modification does not invalidate the node, but may mean that\n the result node no longer corresponds to the current document. This\n is a convenience that permits optimization since the implementation\n can stop once any node in the in the resulting set has been found.\n If there are more than one node in the actual result, the single\n node returned might not be the first in document order."}, {"field_name": "FIRST_ORDERED_NODE_TYPE", "field_sig": "static final\u00a0short FIRST_ORDERED_NODE_TYPE", "description": "The result is a node set as defined by  and will be accessed as a\n single node, which may be null if the node set is empty.\n Document modification does not invalidate the node, but may mean that\n the result node no longer corresponds to the current document. This\n is a convenience that permits optimization since the implementation\n can stop once the first node in document order of the resulting set\n has been found.\n If there are more than one node in the actual result, the single\n node returned will be the first in document order."}], "methods": [{"method_name": "getResultType", "method_sig": "short getResultType()", "description": "A code representing the type of this result, as defined by the type\n constants."}, {"method_name": "getNumberValue", "method_sig": "double getNumberValue()\n               throws XPathException", "description": "The value of this number result. If the native double type of the DOM\n binding does not directly support the exact IEEE 754 result of the\n XPath expression, then it is up to the definition of the binding\n binding to specify how the XPath number is converted to the native\n binding number."}, {"method_name": "getStringValue", "method_sig": "String getStringValue()\n               throws XPathException", "description": "The value of this string result."}, {"method_name": "getBooleanValue", "method_sig": "boolean getBooleanValue()\n                 throws XPathException", "description": "The value of this boolean result."}, {"method_name": "getSingleNodeValue", "method_sig": "Node getSingleNodeValue()\n                 throws XPathException", "description": "The value of this single node result, which may be null."}, {"method_name": "getInvalidIteratorState", "method_sig": "boolean getInvalidIteratorState()", "description": "Signifies that the iterator has become invalid. True if\n resultType is UNORDERED_NODE_ITERATOR_TYPE\n or ORDERED_NODE_ITERATOR_TYPE and the document has been\n modified since this result was returned."}, {"method_name": "getSnapshotLength", "method_sig": "int getSnapshotLength()\n               throws XPathException", "description": "The number of nodes in the result snapshot. Valid values for\n snapshotItem indices are 0 to\n snapshotLength-1 inclusive."}, {"method_name": "iterateNext", "method_sig": "Node iterateNext()\n          throws XPathException,\n                 DOMException", "description": "Iterates and returns the next node from the node set or\n nullif there are no more nodes."}, {"method_name": "snapshotItem", "method_sig": "Node snapshotItem (int index)\n           throws XPathException", "description": "Returns the indexth item in the snapshot collection. If\n index is greater than or equal to the number of nodes in\n the list, this method returns null. Unlike the iterator\n result, the snapshot does not become invalid, but may not correspond\n to the current document if it is mutated."}]}