{"name": "Class GridBagConstraints", "module": "java.desktop", "package": "java.awt", "text": "The GridBagConstraints class specifies constraints\n for components that are laid out using the\n GridBagLayout class.", "codes": ["public class GridBagConstraints\nextends Object\nimplements Cloneable, Serializable"], "fields": [{"field_name": "RELATIVE", "field_sig": "public static final\u00a0int RELATIVE", "description": "Specifies that this component is the next-to-last component in its\n column or row (gridwidth, gridheight),\n or that this component be placed next to the previously added\n component (gridx, gridy)."}, {"field_name": "REMAINDER", "field_sig": "public static final\u00a0int REMAINDER", "description": "Specifies that this component is the\n last component in its column or row."}, {"field_name": "NONE", "field_sig": "public static final\u00a0int NONE", "description": "Do not resize the component."}, {"field_name": "BOTH", "field_sig": "public static final\u00a0int BOTH", "description": "Resize the component both horizontally and vertically."}, {"field_name": "HORIZONTAL", "field_sig": "public static final\u00a0int HORIZONTAL", "description": "Resize the component horizontally but not vertically."}, {"field_name": "VERTICAL", "field_sig": "public static final\u00a0int VERTICAL", "description": "Resize the component vertically but not horizontally."}, {"field_name": "CENTER", "field_sig": "public static final\u00a0int CENTER", "description": "Put the component in the center of its display area."}, {"field_name": "NORTH", "field_sig": "public static final\u00a0int NORTH", "description": "Put the component at the top of its display area,\n centered horizontally."}, {"field_name": "NORTHEAST", "field_sig": "public static final\u00a0int NORTHEAST", "description": "Put the component at the top-right corner of its display area."}, {"field_name": "EAST", "field_sig": "public static final\u00a0int EAST", "description": "Put the component on the right side of its display area,\n centered vertically."}, {"field_name": "SOUTHEAST", "field_sig": "public static final\u00a0int SOUTHEAST", "description": "Put the component at the bottom-right corner of its display area."}, {"field_name": "SOUTH", "field_sig": "public static final\u00a0int SOUTH", "description": "Put the component at the bottom of its display area, centered\n horizontally."}, {"field_name": "SOUTHWEST", "field_sig": "public static final\u00a0int SOUTHWEST", "description": "Put the component at the bottom-left corner of its display area."}, {"field_name": "WEST", "field_sig": "public static final\u00a0int WEST", "description": "Put the component on the left side of its display area,\n centered vertically."}, {"field_name": "NORTHWEST", "field_sig": "public static final\u00a0int NORTHWEST", "description": "Put the component at the top-left corner of its display area."}, {"field_name": "PAGE_START", "field_sig": "public static final\u00a0int PAGE_START", "description": "Place the component centered along the edge of its display area\n associated with the start of a page for the current\n ComponentOrientation.  Equal to NORTH for horizontal\n orientations."}, {"field_name": "PAGE_END", "field_sig": "public static final\u00a0int PAGE_END", "description": "Place the component centered along the edge of its display area\n associated with the end of a page for the current\n ComponentOrientation.  Equal to SOUTH for horizontal\n orientations."}, {"field_name": "LINE_START", "field_sig": "public static final\u00a0int LINE_START", "description": "Place the component centered along the edge of its display area where\n lines of text would normally begin for the current\n ComponentOrientation.  Equal to WEST for horizontal,\n left-to-right orientations and EAST for horizontal, right-to-left\n orientations."}, {"field_name": "LINE_END", "field_sig": "public static final\u00a0int LINE_END", "description": "Place the component centered along the edge of its display area where\n lines of text would normally end for the current\n ComponentOrientation.  Equal to EAST for horizontal,\n left-to-right orientations and WEST for horizontal, right-to-left\n orientations."}, {"field_name": "FIRST_LINE_START", "field_sig": "public static final\u00a0int FIRST_LINE_START", "description": "Place the component in the corner of its display area where\n the first line of text on a page would normally begin for the current\n ComponentOrientation.  Equal to NORTHWEST for horizontal,\n left-to-right orientations and NORTHEAST for horizontal, right-to-left\n orientations."}, {"field_name": "FIRST_LINE_END", "field_sig": "public static final\u00a0int FIRST_LINE_END", "description": "Place the component in the corner of its display area where\n the first line of text on a page would normally end for the current\n ComponentOrientation.  Equal to NORTHEAST for horizontal,\n left-to-right orientations and NORTHWEST for horizontal, right-to-left\n orientations."}, {"field_name": "LAST_LINE_START", "field_sig": "public static final\u00a0int LAST_LINE_START", "description": "Place the component in the corner of its display area where\n the last line of text on a page would normally start for the current\n ComponentOrientation.  Equal to SOUTHWEST for horizontal,\n left-to-right orientations and SOUTHEAST for horizontal, right-to-left\n orientations."}, {"field_name": "LAST_LINE_END", "field_sig": "public static final\u00a0int LAST_LINE_END", "description": "Place the component in the corner of its display area where\n the last line of text on a page would normally end for the current\n ComponentOrientation.  Equal to SOUTHEAST for horizontal,\n left-to-right orientations and SOUTHWEST for horizontal, right-to-left\n orientations."}, {"field_name": "BASELINE", "field_sig": "public static final\u00a0int BASELINE", "description": "Possible value for the anchor field.  Specifies\n that the component should be horizontally centered and\n vertically aligned along the baseline of the prevailing row.\n If the component does not have a baseline it will be vertically\n centered."}, {"field_name": "BASELINE_LEADING", "field_sig": "public static final\u00a0int BASELINE_LEADING", "description": "Possible value for the anchor field.  Specifies\n that the component should be horizontally placed along the\n leading edge.  For components with a left-to-right orientation,\n the leading edge is the left edge.  Vertically the component is\n aligned along the baseline of the prevailing row.  If the\n component does not have a baseline it will be vertically\n centered."}, {"field_name": "BASELINE_TRAILING", "field_sig": "public static final\u00a0int BASELINE_TRAILING", "description": "Possible value for the anchor field.  Specifies\n that the component should be horizontally placed along the\n trailing edge.  For components with a left-to-right\n orientation, the trailing edge is the right edge.  Vertically\n the component is aligned along the baseline of the prevailing\n row.  If the component does not have a baseline it will be\n vertically centered."}, {"field_name": "ABOVE_BASELINE", "field_sig": "public static final\u00a0int ABOVE_BASELINE", "description": "Possible value for the anchor field.  Specifies\n that the component should be horizontally centered.  Vertically\n the component is positioned so that its bottom edge touches\n the baseline of the starting row.  If the starting row does not\n have a baseline it will be vertically centered."}, {"field_name": "ABOVE_BASELINE_LEADING", "field_sig": "public static final\u00a0int ABOVE_BASELINE_LEADING", "description": "Possible value for the anchor field.  Specifies\n that the component should be horizontally placed along the\n leading edge.  For components with a left-to-right orientation,\n the leading edge is the left edge.  Vertically the component is\n positioned so that its bottom edge touches the baseline of the\n starting row.  If the starting row does not have a baseline it\n will be vertically centered."}, {"field_name": "ABOVE_BASELINE_TRAILING", "field_sig": "public static final\u00a0int ABOVE_BASELINE_TRAILING", "description": "Possible value for the anchor field.  Specifies\n that the component should be horizontally placed along the\n trailing edge.  For components with a left-to-right\n orientation, the trailing edge is the right edge.  Vertically\n the component is positioned so that its bottom edge touches\n the baseline of the starting row.  If the starting row does not\n have a baseline it will be vertically centered."}, {"field_name": "BELOW_BASELINE", "field_sig": "public static final\u00a0int BELOW_BASELINE", "description": "Possible value for the anchor field.  Specifies\n that the component should be horizontally centered.  Vertically\n the component is positioned so that its top edge touches the\n baseline of the starting row.  If the starting row does not\n have a baseline it will be vertically centered."}, {"field_name": "BELOW_BASELINE_LEADING", "field_sig": "public static final\u00a0int BELOW_BASELINE_LEADING", "description": "Possible value for the anchor field.  Specifies\n that the component should be horizontally placed along the\n leading edge.  For components with a left-to-right orientation,\n the leading edge is the left edge.  Vertically the component is\n positioned so that its top edge touches the baseline of the\n starting row.  If the starting row does not have a baseline it\n will be vertically centered."}, {"field_name": "BELOW_BASELINE_TRAILING", "field_sig": "public static final\u00a0int BELOW_BASELINE_TRAILING", "description": "Possible value for the anchor field.  Specifies\n that the component should be horizontally placed along the\n trailing edge.  For components with a left-to-right\n orientation, the trailing edge is the right edge.  Vertically\n the component is positioned so that its top edge touches the\n baseline of the starting row.  If the starting row does not\n have a baseline it will be vertically centered."}, {"field_name": "gridx", "field_sig": "public\u00a0int gridx", "description": "Specifies the cell containing the leading edge of the component's\n display area, where the first cell in a row has gridx=0.\n The leading edge of a component's display area is its left edge for\n a horizontal, left-to-right container and its right edge for a\n horizontal, right-to-left container.\n The value\n RELATIVE specifies that the component be placed\n immediately following the component that was added to the container\n just before this component was added.\n \n The default value is RELATIVE.\n gridx should be a non-negative value."}, {"field_name": "gridy", "field_sig": "public\u00a0int gridy", "description": "Specifies the cell at the top of the component's display area,\n where the topmost cell has gridy=0. The value\n RELATIVE specifies that the component be placed just\n below the component that was added to the container just before\n this component was added.\n \n The default value is RELATIVE.\n gridy should be a non-negative value."}, {"field_name": "gridwidth", "field_sig": "public\u00a0int gridwidth", "description": "Specifies the number of cells in a row for the component's\n display area.\n \n Use REMAINDER to specify that the component's\n display area will be from gridx to the last\n cell in the row.\n Use RELATIVE to specify that the component's\n display area will be from gridx to the next\n to the last one in its row.\n \ngridwidth should be non-negative and the default\n value is 1."}, {"field_name": "gridheight", "field_sig": "public\u00a0int gridheight", "description": "Specifies the number of cells in a column for the component's\n display area.\n \n Use REMAINDER to specify that the component's\n display area will be from gridy to the last\n cell in the column.\n Use RELATIVE to specify that the component's\n display area will be from gridy to the next\n to the last one in its column.\n \ngridheight should be a non-negative value and the\n default value is 1."}, {"field_name": "weightx", "field_sig": "public\u00a0double weightx", "description": "Specifies how to distribute extra horizontal space.\n \n The grid bag layout manager calculates the weight of a column to\n be the maximum weightx of all the components in a\n column. If the resulting layout is smaller horizontally than the area\n it needs to fill, the extra space is distributed to each column in\n proportion to its weight. A column that has a weight of zero receives\n no extra space.\n \n If all the weights are zero, all the extra space appears between\n the grids of the cell and the left and right edges.\n \n The default value of this field is 0.\n weightx should be a non-negative value."}, {"field_name": "weighty", "field_sig": "public\u00a0double weighty", "description": "Specifies how to distribute extra vertical space.\n \n The grid bag layout manager calculates the weight of a row to be\n the maximum weighty of all the components in a row.\n If the resulting layout is smaller vertically than the area it\n needs to fill, the extra space is distributed to each row in\n proportion to its weight. A row that has a weight of zero receives no\n extra space.\n \n If all the weights are zero, all the extra space appears between\n the grids of the cell and the top and bottom edges.\n \n The default value of this field is 0.\n weighty should be a non-negative value."}, {"field_name": "anchor", "field_sig": "public\u00a0int anchor", "description": "This field is used when the component is smaller than its\n display area. It determines where, within the display area, to\n place the component.\n  There are three kinds of possible values: orientation\n relative, baseline relative and absolute.  Orientation relative\n values are interpreted relative to the container's component\n orientation property, baseline relative values are interpreted\n relative to the baseline and absolute values are not.  The\n absolute values are:\n CENTER, NORTH, NORTHEAST,\n EAST, SOUTHEAST, SOUTH,\n SOUTHWEST, WEST, and NORTHWEST.\n The orientation relative values are: PAGE_START,\n PAGE_END,\n LINE_START, LINE_END,\n FIRST_LINE_START, FIRST_LINE_END,\n LAST_LINE_START and LAST_LINE_END.  The\n baseline relative values are:\n BASELINE, BASELINE_LEADING,\n BASELINE_TRAILING,\n ABOVE_BASELINE, ABOVE_BASELINE_LEADING,\n ABOVE_BASELINE_TRAILING,\n BELOW_BASELINE, BELOW_BASELINE_LEADING,\n and BELOW_BASELINE_TRAILING.\n The default value is CENTER."}, {"field_name": "fill", "field_sig": "public\u00a0int fill", "description": "This field is used when the component's display area is larger\n than the component's requested size. It determines whether to\n resize the component, and if so, how.\n \n The following values are valid for fill:\n\n \n\nNONE: Do not resize the component.\n \nHORIZONTAL: Make the component wide enough to fill\n         its display area horizontally, but do not change its height.\n \nVERTICAL: Make the component tall enough to fill its\n         display area vertically, but do not change its width.\n \nBOTH: Make the component fill its display area\n         entirely.\n \n\n The default value is NONE."}, {"field_name": "insets", "field_sig": "public\u00a0Insets insets", "description": "This field specifies the external padding of the component, the\n minimum amount of space between the component and the edges of its\n display area.\n \n The default value is new Insets(0, 0, 0, 0)."}, {"field_name": "ipadx", "field_sig": "public\u00a0int ipadx", "description": "This field specifies the internal padding of the component, how much\n space to add to the minimum width of the component. The width of\n the component is at least its minimum width plus\n ipadx pixels.\n \n The default value is 0."}, {"field_name": "ipady", "field_sig": "public\u00a0int ipady", "description": "This field specifies the internal padding, that is, how much\n space to add to the minimum height of the component. The height of\n the component is at least its minimum height plus\n ipady pixels.\n \n The default value is 0."}], "methods": [{"method_name": "clone", "method_sig": "public Object clone()", "description": "Creates a copy of this grid bag constraint."}]}