{"name": "Interface Attr", "module": "java.xml", "package": "org.w3c.dom", "text": "The Attr interface represents an attribute in an\n Element object. Typically the allowable values for the\n attribute are defined in a schema associated with the document.\n Attr objects inherit the Node interface, but\n since they are not actually child nodes of the element they describe, the\n DOM does not consider them part of the document tree. Thus, the\n Node attributes parentNode,\n previousSibling, and nextSibling have a\n null value for Attr objects. The DOM takes the\n view that attributes are properties of elements rather than having a\n separate identity from the elements they are associated with; this should\n make it more efficient to implement such features as default attributes\n associated with all elements of a given type. Furthermore,\n Attr nodes may not be immediate children of a\n DocumentFragment. However, they can be associated with\n Element nodes contained within a\n DocumentFragment. In short, users and implementors of the\n DOM need to be aware that Attr nodes have some things in\n common with other objects inheriting the Node interface, but\n they also are quite distinct.\n The attribute's effective value is determined as follows: if this\n attribute has been explicitly assigned any value, that value is the\n attribute's effective value; otherwise, if there is a declaration for\n this attribute, and that declaration includes a default value, then that\n default value is the attribute's effective value; otherwise, the\n attribute does not exist on this element in the structure model until it\n has been explicitly added. Note that the Node.nodeValue\n attribute on the Attr instance can also be used to retrieve\n the string version of the attribute's value(s).\n  If the attribute was not explicitly given a value in the instance\n document but has a default value provided by the schema associated with\n the document, an attribute node will be created with\n specified set to false. Removing attribute\n nodes for which a default value is defined in the schema generates a new\n attribute node with the default value and specified set to\n false. If validation occurred while invoking\n Document.normalizeDocument(), attribute nodes with\n specified equals to false are recomputed\n according to the default attribute values provided by the schema. If no\n default value is associate with this attribute in the schema, the\n attribute node is discarded.\n In XML, where the value of an attribute can contain entity references,\n the child nodes of the Attr node may be either\n Text or EntityReference nodes (when these are\n in use; see the description of EntityReference for\n discussion).\n The DOM Core represents all attribute values as simple strings, even if\n the DTD or schema associated with the document declares them of some\n specific type such as tokenized.\n The way attribute value normalization is performed by the DOM\n implementation depends on how much the implementation knows about the\n schema in use. Typically, the value and\n nodeValue attributes of an Attr node initially\n returns the normalized value given by the parser. It is also the case\n after Document.normalizeDocument() is called (assuming the\n right options have been set). But this may not be the case after\n mutation, independently of whether the mutation is performed by setting\n the string value directly or by changing the Attr child\n nodes. In particular, this is true when character\n references are involved, given that they are not represented in the DOM and they\n impact attribute value normalization. On the other hand, if the\n implementation knows about the schema in use when the attribute value is\n changed, and it is of a different type than CDATA, it may normalize it\n again at that time. This is especially true of specialized DOM\n implementations, such as SVG DOM implementations, which store attribute\n values in an internal form different from a string.\n The following table gives some examples of the relations between the\n attribute value in the original document (parsed attribute), the value as\n exposed in the DOM, and the serialization of the value:\n \nExamples of the Original, Normalized and Serialized Values \n\n\nExamples\nParsed\n attribute value\nInitial Attr.value\nSerialized attribute value\n\n\n\n\n\n Character reference\n\n\"x&#178;=5\"\n\n\n\"x\u00b2=5\"\n\n\n\"x&#178;=5\"\n\n\n\nBuilt-in\n character entity\n\n\"y&lt;6\"\n\n\n\"y<6\"\n\n\n\"y&lt;6\"\n\n\n\nLiteral newline between\n\n\n \"x=5&#10;y=6\"\n\n\n\"x=5 y=6\"\n\n\n\"x=5&#10;y=6\"\n\n\n\nNormalized newline between\n\n\"x=5\n y=6\"\n\n\n\"x=5 y=6\"\n\n\n\"x=5 y=6\"\n\n\n\nEntity e with literal newline\n\n\n <!ENTITY e '...&#10;...'> [...]> \"x=5&e;y=6\"\n\nDependent on Implementation and Load Options\nDependent on Implementation and Load/Save Options\n\n\n\nSee also the Document Object Model (DOM) Level 3 Core Specification.", "codes": ["public interface Attr\nextends Node"], "fields": [], "methods": [{"method_name": "getName", "method_sig": "String getName()", "description": "Returns the name of this attribute. If Node.localName is\n different from null, this attribute is a qualified name."}, {"method_name": "getSpecified", "method_sig": "boolean getSpecified()", "description": "True if this attribute was explicitly given a value in\n the instance document, false otherwise. If the\n application changed the value of this attribute node (even if it ends\n up having the same value as the default value) then it is set to\n true. The implementation may handle attributes with\n default values from other schemas similarly but applications should\n use Document.normalizeDocument() to guarantee this\n information is up-to-date."}, {"method_name": "getValue", "method_sig": "String getValue()", "description": "On retrieval, the value of the attribute is returned as a string.\n Character and general entity references are replaced with their\n values. See also the method getAttribute on the\n Element interface.\n On setting, this creates a Text node with the unparsed\n contents of the string, i.e. any characters that an XML processor\n would recognize as markup are instead treated as literal text. See\n also the method Element.setAttribute().\n  Some specialized implementations, such as some [SVG 1.1]\n implementations, may do normalization automatically, even after\n mutation; in such case, the value on retrieval may differ from the\n value on setting."}, {"method_name": "setValue", "method_sig": "void setValue (String value)\n       throws DOMException", "description": "On retrieval, the value of the attribute is returned as a string.\n Character and general entity references are replaced with their\n values. See also the method getAttribute on the\n Element interface.\n On setting, this creates a Text node with the unparsed\n contents of the string, i.e. any characters that an XML processor\n would recognize as markup are instead treated as literal text. See\n also the method Element.setAttribute().\n  Some specialized implementations, such as some [SVG 1.1]\n implementations, may do normalization automatically, even after\n mutation; in such case, the value on retrieval may differ from the\n value on setting."}, {"method_name": "getOwnerElement", "method_sig": "Element getOwnerElement()", "description": "The Element node this attribute is attached to or\n null if this attribute is not in use."}, {"method_name": "getSchemaTypeInfo", "method_sig": "TypeInfo getSchemaTypeInfo()", "description": "The type information associated with this attribute. While the type\n information contained in this attribute is guarantee to be correct\n after loading the document or invoking\n Document.normalizeDocument(), schemaTypeInfo\n  may not be reliable if the node was moved."}, {"method_name": "isId", "method_sig": "boolean isId()", "description": "Returns whether this attribute is known to be of type ID (i.e. to\n contain an identifier for its owner element) or not. When it is and\n its value is unique, the ownerElement of this attribute\n can be retrieved using the method Document.getElementById\n . The implementation could use several ways to determine if an\n attribute node is known to contain an identifier:\n \n If validation\n occurred using an XML Schema [XML Schema Part 1]\n  while loading the document or while invoking\n Document.normalizeDocument(), the post-schema-validation\n infoset contributions (PSVI contributions) values are used to\n determine if this attribute is a schema-determined ID attribute using\n the \n schema-determined ID definition in [XPointer]\n .\n \n If validation occurred using a DTD while loading the document or\n while invoking Document.normalizeDocument(), the infoset [type definition] value is used to determine if this attribute is a DTD-determined ID\n attribute using the \n DTD-determined ID definition in [XPointer]\n .\n \n from the use of the methods Element.setIdAttribute(),\n Element.setIdAttributeNS(), or\n Element.setIdAttributeNode(), i.e. it is an\n user-determined ID attribute;\n Note:  XPointer framework (see section 3.2 in [XPointer]\n ) consider the DOM user-determined ID attribute as being part of the\n XPointer externally-determined ID definition.\n \n using mechanisms that\n are outside the scope of this specification, it is then an\n externally-determined ID attribute. This includes using schema\n languages different from XML schema and DTD.\n \n\n If validation occurred while invoking\n Document.normalizeDocument(), all user-determined ID\n attributes are reset and all attribute nodes ID information are then\n reevaluated in accordance to the schema used. As a consequence, if\n the Attr.schemaTypeInfo attribute contains an ID type,\n isId will always return true."}]}