{"name": "Class Process", "module": "java.base", "package": "java.lang", "text": "Process provides control of native processes started by\n ProcessBuilder.start and Runtime.exec.\n The class provides methods for performing input from the process, performing\n output to the process, waiting for the process to complete,\n checking the exit status of the process, and destroying (killing)\n the process.\n The ProcessBuilder.start() and\n Runtime.exec\n methods create a native process and return an instance of a\n subclass of Process that can be used to control the process\n and obtain information about it.\n\n The methods that create processes may not work well for special\n processes on certain native platforms, such as native windowing\n processes, daemon processes, Win16/DOS processes on Microsoft\n Windows, or shell scripts.\n\n By default, the created process does not have its own terminal\n or console.  All its standard I/O (i.e. stdin, stdout, stderr)\n operations will be redirected to the parent process, where they can\n be accessed via the streams obtained using the methods\n getOutputStream(),\n getInputStream(), and\n getErrorStream().\n The parent process uses these streams to feed input to and get output\n from the process.  Because some native platforms only provide\n limited buffer size for standard input and output streams, failure\n to promptly write the input stream or read the output stream of\n the process may cause the process to block, or even deadlock.\n\n Where desired, \n process I/O can also be redirected\n using methods of the ProcessBuilder class.\n\n The process is not killed when there are no more references to\n the Process object, but rather the process\n continues executing asynchronously.\n\n There is no requirement that the process represented by a \n Process object execute asynchronously or concurrently with respect\n to the Java process that owns the Process object.\n\n As of 1.5, ProcessBuilder.start() is the preferred way\n to create a Process.\n\n Subclasses of Process should override the onExit() and\n toHandle() methods to provide a fully functional Process including the\n process id,\n information about the process,\n direct children, and\n direct children plus descendants of those children of the process.\n Delegating to the underlying Process or ProcessHandle is typically\n easiest and most efficient.", "codes": ["public abstract class Process\nextends Object"], "fields": [], "methods": [{"method_name": "getOutputStream", "method_sig": "public abstract OutputStream getOutputStream()", "description": "Returns the output stream connected to the normal input of the\n process.  Output to the stream is piped into the standard\n input of the process represented by this Process object.\n\n If the standard input of the process has been redirected using\n ProcessBuilder.redirectInput\n then this method will return a\n null output stream.\n\n Implementation note: It is a good idea for the returned\n output stream to be buffered."}, {"method_name": "getInputStream", "method_sig": "public abstract InputStream getInputStream()", "description": "Returns the input stream connected to the normal output of the\n process.  The stream obtains data piped from the standard\n output of the process represented by this Process object.\n\n If the standard output of the process has been redirected using\n ProcessBuilder.redirectOutput\n then this method will return a\n null input stream.\n\n Otherwise, if the standard error of the process has been\n redirected using\n ProcessBuilder.redirectErrorStream\n then the input stream returned by this method will receive the\n merged standard output and the standard error of the process.\n\n Implementation note: It is a good idea for the returned\n input stream to be buffered."}, {"method_name": "getErrorStream", "method_sig": "public abstract InputStream getErrorStream()", "description": "Returns the input stream connected to the error output of the\n process.  The stream obtains data piped from the error output\n of the process represented by this Process object.\n\n If the standard error of the process has been redirected using\n ProcessBuilder.redirectError or\n ProcessBuilder.redirectErrorStream\n then this method will return a\n null input stream.\n\n Implementation note: It is a good idea for the returned\n input stream to be buffered."}, {"method_name": "waitFor", "method_sig": "public abstract int waitFor()\n                     throws InterruptedException", "description": "Causes the current thread to wait, if necessary, until the\n process represented by this Process object has\n terminated.  This method returns immediately if the process\n has already terminated.  If the process has not yet\n terminated, the calling thread will be blocked until the\n process exits."}, {"method_name": "waitFor", "method_sig": "public boolean waitFor (long timeout,\n                       TimeUnit unit)\n                throws InterruptedException", "description": "Causes the current thread to wait, if necessary, until the\n process represented by this Process object has\n terminated, or the specified waiting time elapses.\n\n If the process has already terminated then this method returns\n immediately with the value true.  If the process has not\n terminated and the timeout value is less than, or equal to, zero, then\n this method returns immediately with the value false.\n\n The default implementation of this methods polls the exitValue\n to check if the process has terminated. Concrete implementations of this\n class are strongly encouraged to override this method with a more\n efficient implementation."}, {"method_name": "exitValue", "method_sig": "public abstract int exitValue()", "description": "Returns the exit value for the process."}, {"method_name": "destroy", "method_sig": "public abstract void destroy()", "description": "Kills the process.\n Whether the process represented by this Process object is\n normally terminated or not is\n implementation dependent.\n Forcible process destruction is defined as the immediate termination of a\n process, whereas normal termination allows the process to shut down cleanly.\n If the process is not alive, no action is taken.\n \n The CompletableFuture from onExit() is\n completed\n when the process has terminated."}, {"method_name": "destroyForcibly", "method_sig": "public Process destroyForcibly()", "description": "Kills the process forcibly. The process represented by this\n Process object is forcibly terminated.\n Forcible process destruction is defined as the immediate termination of a\n process, whereas normal termination allows the process to shut down cleanly.\n If the process is not alive, no action is taken.\n \n The CompletableFuture from onExit() is\n completed\n when the process has terminated.\n \n Invoking this method on Process objects returned by\n ProcessBuilder.start() and Runtime.exec(java.lang.String) forcibly terminate\n the process."}, {"method_name": "supportsNormalTermination", "method_sig": "public boolean supportsNormalTermination()", "description": "Returns true if the implementation of destroy() is to\n normally terminate the process,\n Returns false if the implementation of destroy\n forcibly and immediately terminates the process.\n \n Invoking this method on Process objects returned by\n ProcessBuilder.start() and Runtime.exec(java.lang.String) return\n true or false depending on the platform implementation."}, {"method_name": "isAlive", "method_sig": "public boolean isAlive()", "description": "Tests whether the process represented by this Process is\n alive."}, {"method_name": "pid", "method_sig": "public long pid()", "description": "Returns the native process ID of the process.\n The native process ID is an identification number that the operating\n system assigns to the process."}, {"method_name": "onExit", "method_sig": "public CompletableFuture<Process> onExit()", "description": "Returns a CompletableFuture<Process> for the termination of the Process.\n The CompletableFuture provides the ability\n to trigger dependent functions or actions that may be run synchronously\n or asynchronously upon process termination.\n When the process has terminated the CompletableFuture is\n completed regardless\n of the exit status of the process.\n \n Calling onExit().get() waits for the process to terminate and returns\n the Process. The future can be used to check if the process is\n done or to\n wait for it to terminate.\n Cancelling\n the CompletableFuture does not affect the Process.\n \n Processes returned from ProcessBuilder.start() override the\n default implementation to provide an efficient mechanism to wait\n for process exit."}, {"method_name": "toHandle", "method_sig": "public ProcessHandle toHandle()", "description": "Returns a ProcessHandle for the Process.\n\n Process objects returned by ProcessBuilder.start() and\n Runtime.exec(java.lang.String) implement toHandle as the equivalent of\n ProcessHandle.of(pid) including the\n check for a SecurityManager and RuntimePermission(\"manageProcess\")."}, {"method_name": "info", "method_sig": "public ProcessHandle.Info info()", "description": "Returns a snapshot of information about the process.\n\n  A ProcessHandle.Info instance has accessor methods\n that return information about the process if it is available."}, {"method_name": "children", "method_sig": "public Stream<ProcessHandle> children()", "description": "Returns a snapshot of the direct children of the process.\n The parent of a direct child process is the process.\n Typically, a process that is not alive has no children.\n \nNote that processes are created and terminate asynchronously.\n There is no guarantee that a process is alive.\n "}, {"method_name": "descendants", "method_sig": "public Stream<ProcessHandle> descendants()", "description": "Returns a snapshot of the descendants of the process.\n The descendants of a process are the children of the process\n plus the descendants of those children, recursively.\n Typically, a process that is not alive has no children.\n \nNote that processes are created and terminate asynchronously.\n There is no guarantee that a process is alive.\n "}]}