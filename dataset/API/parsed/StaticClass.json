{"name": "Class StaticClass", "module": "jdk.dynalink", "package": "jdk.dynalink.beans", "text": "Object that allows access to the static members of a class (its static\n methods, properties, and fields), as well as construction of instances using\n StandardOperation.NEW operation. In Dynalink, Class objects\n are not treated specially and act as ordinary Java objects; you can use e.g.\n GET:PROPERTY:superclass as a property getter to\n invoke clazz.getSuperclass(). On the other hand, you can not use\n Class objects to access static members of a class, nor to create new\n instances of the class using NEW. This is consistent with how\n Class objects behave in Java: in Java, you write e.g.\n new BitSet() instead of new BitSet.class(). Similarly, you\n write System.out and not System.class.out. It is this aspect\n of using a class name as the constructor and a namespace for static members\n that StaticClass embodies.\n \n Objects of this class are recognized by the BeansLinker as being\n special, and operations on them will be linked against the represented class'\n static members. The \"class\" synthetic property is additionally\n recognized and returns the Java Class object, just as in Java\n System.class evaluates to the Class object for the\n  System class. Conversely, Class objects exposed through\n BeansLinker expose the \"static\" synthetic property which\n returns their StaticClass object (there is no equivalent to this in\n Java).\n \n In summary, instances of this class act as namespaces for static members and\n as constructors for classes, much the same way as specifying a class name in\n Java language does, except that in Java this is just a syntactic element,\n while in Dynalink they are expressed as actual objects.\n StaticClass objects representing Java array types will act as\n constructors taking a single int argument and create an array of the\n specified size.\n \n If the class has several constructors, StandardOperation.NEW on\n StaticClass will try to select the most specific applicable\n constructor. You might want to expose a mechanism in your language for\n selecting a constructor with an explicit signature through\n BeansLinker.getConstructorMethod(Class, String).", "codes": ["public final class StaticClass\nextends Object\nimplements Serializable"], "fields": [], "methods": [{"method_name": "forClass", "method_sig": "public static StaticClass forClass (Class<?> clazz)", "description": "Retrieves the StaticClass instance for the specified class."}, {"method_name": "getRepresentedClass", "method_sig": "public Class<?> getRepresentedClass()", "description": "Returns the represented Java class."}]}