{"name": "Interface Comparable<T>", "module": "java.base", "package": "java.lang", "text": "This interface imposes a total ordering on the objects of each class that\n implements it.  This ordering is referred to as the class's natural\n ordering, and the class's compareTo method is referred to as\n its natural comparison method.\n\n Lists (and arrays) of objects that implement this interface can be sorted\n automatically by Collections.sort (and\n Arrays.sort).  Objects that implement this\n interface can be used as keys in a sorted map or as\n elements in a sorted set, without the need to\n specify a comparator.\n\n The natural ordering for a class C is said to be consistent\n with equals if and only if e1.compareTo(e2) == 0 has\n the same boolean value as e1.equals(e2) for every\n e1 and e2 of class C.  Note that null\n is not an instance of any class, and e.compareTo(null) should\n throw a NullPointerException even though e.equals(null)\n returns false.\n\n It is strongly recommended (though not required) that natural orderings be\n consistent with equals.  This is so because sorted sets (and sorted maps)\n without explicit comparators behave \"strangely\" when they are used with\n elements (or keys) whose natural ordering is inconsistent with equals.  In\n particular, such a sorted set (or sorted map) violates the general contract\n for set (or map), which is defined in terms of the equals\n method.\n\n For example, if one adds two keys a and b such that\n (!a.equals(b) && a.compareTo(b) == 0) to a sorted\n set that does not use an explicit comparator, the second add\n operation returns false (and the size of the sorted set does not increase)\n because a and b are equivalent from the sorted set's\n perspective.\n\n Virtually all Java core classes that implement Comparable have natural\n orderings that are consistent with equals.  One exception is\n java.math.BigDecimal, whose natural ordering equates\n BigDecimal objects with equal values and different precisions\n (such as 4.0 and 4.00).\n\n For the mathematically inclined, the relation that defines\n the natural ordering on a given class C is:\n       {(x, y) such that x.compareTo(y) <= 0}.\n  The quotient for this total order is: \n       {(x, y) such that x.compareTo(y) == 0}.\n \n\n It follows immediately from the contract for compareTo that the\n quotient is an equivalence relation on C, and that the\n natural ordering is a total order on C.  When we say that a\n class's natural ordering is consistent with equals, we mean that the\n quotient for the natural ordering is the equivalence relation defined by\n the class's equals(Object) method:\n     {(x, y) such that x.equals(y)}. \n\n This interface is a member of the\n \n Java Collections Framework.", "codes": ["public interface Comparable<T>"], "fields": [], "methods": [{"method_name": "compareTo", "method_sig": "int compareTo (T o)", "description": "Compares this object with the specified object for order.  Returns a\n negative integer, zero, or a positive integer as this object is less\n than, equal to, or greater than the specified object.\n\n The implementor must ensure\n sgn(x.compareTo(y)) == -sgn(y.compareTo(x))\n for all x and y.  (This\n implies that x.compareTo(y) must throw an exception iff\n y.compareTo(x) throws an exception.)\n\n The implementor must also ensure that the relation is transitive:\n (x.compareTo(y) > 0 && y.compareTo(z) > 0) implies\n x.compareTo(z) > 0.\n\n Finally, the implementor must ensure that x.compareTo(y)==0\n implies that sgn(x.compareTo(z)) == sgn(y.compareTo(z)), for\n all z.\n\n It is strongly recommended, but not strictly required that\n (x.compareTo(y)==0) == (x.equals(y)).  Generally speaking, any\n class that implements the Comparable interface and violates\n this condition should clearly indicate this fact.  The recommended\n language is \"Note: this class has a natural ordering that is\n inconsistent with equals.\"\n\n In the foregoing description, the notation\n sgn(expression) designates the mathematical\n signum function, which is defined to return one of -1,\n 0, or 1 according to whether the value of\n expression is negative, zero, or positive, respectively."}]}