{"name": "Interface SSLSession", "module": "java.base", "package": "javax.net.ssl", "text": "In SSL, sessions are used to describe an ongoing relationship between\n two entities.  Each SSL connection involves one session at a time, but\n that session may be used on many connections between those entities,\n simultaneously or sequentially.  The session used on a connection may\n also be replaced by a different session.  Sessions are created, or\n rejoined, as part of the SSL handshaking protocol. Sessions may be\n invalidated due to policies affecting security or resource usage,\n or by an application explicitly calling invalidate.\n Session management policies are typically used to tune performance.\n\n  In addition to the standard session attributes, SSL sessions expose\n these read-only attributes:  \n Peer Identity.  Sessions are between a particular\n      client and a particular server.  The identity of the peer may\n      have been established as part of session setup.  Peers are\n      generally identified by X.509 certificate chains.\n\n       Cipher Suite Name.  Cipher suites describe the\n      kind of cryptographic protection that's used by connections\n      in a particular session.\n\n       Peer Host.  All connections in a session are\n      between the same two hosts.  The address of the host on the other\n      side of the connection is available.\n\n      \n Sessions may be explicitly invalidated.  Invalidation may also\n be done implicitly, when faced with certain kinds of errors.", "codes": ["public interface SSLSession"], "fields": [], "methods": [{"method_name": "getId", "method_sig": "byte[] getId()", "description": "Returns the identifier assigned to this Session."}, {"method_name": "getSessionContext", "method_sig": "SSLSessionContext getSessionContext()", "description": "Returns the context in which this session is bound.\n \n This context may be unavailable in some environments,\n in which case this method returns null.\n \n If the context is available and there is a\n security manager installed, the caller may require\n permission to access it or a security exception may be thrown.\n In a Java environment, the security manager's\n checkPermission method is called with a\n SSLPermission(\"getSSLSessionContext\") permission."}, {"method_name": "getCreationTime", "method_sig": "long getCreationTime()", "description": "Returns the time at which this Session representation was created,\n in milliseconds since midnight, January 1, 1970 UTC."}, {"method_name": "getLastAccessedTime", "method_sig": "long getLastAccessedTime()", "description": "Returns the last time this Session representation was accessed by the\n session level infrastructure, in milliseconds since\n midnight, January 1, 1970 UTC.\n \n Access indicates a new connection being established using session data.\n Application level operations, such as getting or setting a value\n associated with the session, are not reflected in this access time.\n\n  This information is particularly useful in session management\n policies.  For example, a session manager thread could leave all\n sessions in a given context which haven't been used in a long time;\n or, the sessions might be sorted according to age to optimize some task."}, {"method_name": "invalidate", "method_sig": "void invalidate()", "description": "Invalidates the session.\n \n Future connections will not be able to\n resume or join this session.  However, any existing connection\n using this session can continue to use the session until the\n connection is closed."}, {"method_name": "isValid", "method_sig": "boolean isValid()", "description": "Returns whether this session is valid and available for resuming or\n joining."}, {"method_name": "putValue", "method_sig": "void putValue (String name,\n              Object value)", "description": "Binds the specified value object into the\n session's application layer data\n with the given name.\n \n Any existing binding using the same name is\n replaced.  If the new (or existing) value implements the\n SSLSessionBindingListener interface, the object\n represented by value is notified appropriately.\n \n For security reasons, the same named values may not be\n visible across different access control contexts."}, {"method_name": "getValue", "method_sig": "Object getValue (String name)", "description": "Returns the object bound to the given name in the session's\n application layer data.  Returns null if there is no such binding.\n \n For security reasons, the same named values may not be\n visible across different access control contexts."}, {"method_name": "removeValue", "method_sig": "void removeValue (String name)", "description": "Removes the object bound to the given name in the session's\n application layer data.  Does nothing if there is no object\n bound to the given name.  If the bound existing object\n implements the SessionBindingListener interface,\n it is notified appropriately.\n \n For security reasons, the same named values may not be\n visible across different access control contexts."}, {"method_name": "getValueNames", "method_sig": "String[] getValueNames()", "description": "Returns an array of the names of all the application layer\n data objects bound into the Session.\n \n For security reasons, the same named values may not be\n visible across different access control contexts."}, {"method_name": "getPeerCertificates", "method_sig": "Certificate[] getPeerCertificates()\n                           throws SSLPeerUnverifiedException", "description": "Returns the identity of the peer which was established as part\n of defining the session.\n \n Note: This method can be used only when using certificate-based\n cipher suites; using it with non-certificate-based cipher suites,\n such as Kerberos, will throw an SSLPeerUnverifiedException.\n \n Note: The returned value may not be a valid certificate chain\n and should not be relied on for trust decisions."}, {"method_name": "getLocalCertificates", "method_sig": "Certificate[] getLocalCertificates()", "description": "Returns the certificate(s) that were sent to the peer during\n handshaking.\n \n Note: This method is useful only when using certificate-based\n cipher suites.\n \n When multiple certificates are available for use in a\n handshake, the implementation chooses what it considers the\n \"best\" certificate chain available, and transmits that to\n the other side.  This method allows the caller to know\n which certificate chain was actually used."}, {"method_name": "getPeerCertificateChain", "method_sig": "@Deprecated(since=\"9\")\nX509Certificate[] getPeerCertificateChain()\n                                   throws SSLPeerUnverifiedException", "description": "Returns the identity of the peer which was identified as part\n of defining the session.\n \n Note: This method can be used only when using certificate-based\n cipher suites; using it with non-certificate-based cipher suites,\n such as Kerberos, will throw an SSLPeerUnverifiedException.\n \n Note: The returned value may not be a valid certificate chain\n and should not be relied on for trust decisions.\n\n Note: this method exists for compatibility with previous\n releases. New applications should use\n getPeerCertificates() instead."}, {"method_name": "getPeerPrincipal", "method_sig": "Principal getPeerPrincipal()\n                    throws SSLPeerUnverifiedException", "description": "Returns the identity of the peer which was established as part of\n defining the session."}, {"method_name": "getLocalPrincipal", "method_sig": "Principal getLocalPrincipal()", "description": "Returns the principal that was sent to the peer during handshaking."}, {"method_name": "getCipherSuite", "method_sig": "String getCipherSuite()", "description": "Returns the name of the SSL cipher suite which is used for all\n connections in the session.\n\n  This defines the level of protection\n provided to the data sent on the connection, including the kind\n of encryption used and most aspects of how authentication is done."}, {"method_name": "getProtocol", "method_sig": "String getProtocol()", "description": "Returns the standard name of the protocol used for all\n connections in the session.\n\n  This defines the protocol used in the connection."}, {"method_name": "getPeerHost", "method_sig": "String getPeerHost()", "description": "Returns the host name of the peer in this session.\n \n For the server, this is the client's host;  and for\n the client, it is the server's host. The name may not be\n a fully qualified host name or even a host name at all as\n it may represent a string encoding of the peer's network address.\n If such a name is desired, it might\n be resolved through a name service based on the value returned\n by this method.\n \n This value is not authenticated and should not be relied upon.\n It is mainly used as a hint for SSLSession caching\n strategies."}, {"method_name": "getPeerPort", "method_sig": "int getPeerPort()", "description": "Returns the port number of the peer in this session.\n \n For the server, this is the client's port number;  and for\n the client, it is the server's port number.\n \n This value is not authenticated and should not be relied upon.\n It is mainly used as a hint for SSLSession caching\n strategies."}, {"method_name": "getPacketBufferSize", "method_sig": "int getPacketBufferSize()", "description": "Gets the current size of the largest SSL/TLS/DTLS packet that is\n expected when using this session.\n \n An SSLEngine using this session may generate SSL/TLS/DTLS\n packets of any size up to and including the value returned by this\n method. All SSLEngine network buffers should be sized\n at least this large to avoid insufficient space problems when\n performing wrap and unwrap calls."}, {"method_name": "getApplicationBufferSize", "method_sig": "int getApplicationBufferSize()", "description": "Gets the current size of the largest application data that is\n expected when using this session.\n \nSSLEngine application data buffers must be large\n enough to hold the application data from any inbound network\n application data packet received.  Typically, outbound\n application data buffers can be of any size."}]}