{"name": "Class ConcurrentLinkedDeque<E>", "module": "java.base", "package": "java.util.concurrent", "text": "An unbounded concurrent deque based on linked nodes.\n Concurrent insertion, removal, and access operations execute safely\n across multiple threads.\n A ConcurrentLinkedDeque is an appropriate choice when\n many threads will share access to a common collection.\n Like most other concurrent collection implementations, this class\n does not permit the use of null elements.\n\n Iterators and spliterators are\n weakly consistent.\n\n Beware that, unlike in most collections, the size method\n is NOT a constant-time operation. Because of the\n asynchronous nature of these deques, determining the current number\n of elements requires a traversal of the elements, and so may report\n inaccurate results if this collection is modified during traversal.\n\n Bulk operations that add, remove, or examine multiple elements,\n such as addAll(java.util.Collection<? extends E>), removeIf(java.util.function.Predicate<? super E>) or forEach(java.util.function.Consumer<? super E>),\n are not guaranteed to be performed atomically.\n For example, a forEach traversal concurrent with an \n addAll operation might observe only some of the added elements.\n\n This class and its iterator implement all of the optional\n methods of the Deque and Iterator interfaces.\n\n Memory consistency effects: As with other concurrent collections,\n actions in a thread prior to placing an object into a\n ConcurrentLinkedDeque\nhappen-before\n actions subsequent to the access or removal of that element from\n the ConcurrentLinkedDeque in another thread.\n\n This class is a member of the\n \n Java Collections Framework.", "codes": ["public class ConcurrentLinkedDeque<E>\nextends AbstractCollection<E>\nimplements Deque<E>, Serializable"], "fields": [], "methods": [{"method_name": "addFirst", "method_sig": "public void addFirst (E e)", "description": "Inserts the specified element at the front of this deque.\n As the deque is unbounded, this method will never throw\n IllegalStateException."}, {"method_name": "addLast", "method_sig": "public void addLast (E e)", "description": "Inserts the specified element at the end of this deque.\n As the deque is unbounded, this method will never throw\n IllegalStateException.\n\n This method is equivalent to add(E)."}, {"method_name": "offerFirst", "method_sig": "public boolean offerFirst (E e)", "description": "Inserts the specified element at the front of this deque.\n As the deque is unbounded, this method will never return false."}, {"method_name": "offerLast", "method_sig": "public boolean offerLast (E e)", "description": "Inserts the specified element at the end of this deque.\n As the deque is unbounded, this method will never return false.\n\n This method is equivalent to add(E)."}, {"method_name": "getFirst", "method_sig": "public E getFirst()", "description": "Description copied from interface:\u00a0Deque"}, {"method_name": "getLast", "method_sig": "public E getLast()", "description": "Description copied from interface:\u00a0Deque"}, {"method_name": "removeFirst", "method_sig": "public E removeFirst()", "description": "Description copied from interface:\u00a0Deque"}, {"method_name": "removeLast", "method_sig": "public E removeLast()", "description": "Description copied from interface:\u00a0Deque"}, {"method_name": "offer", "method_sig": "public boolean offer (E e)", "description": "Inserts the specified element at the tail of this deque.\n As the deque is unbounded, this method will never return false."}, {"method_name": "add", "method_sig": "public boolean add (E e)", "description": "Inserts the specified element at the tail of this deque.\n As the deque is unbounded, this method will never throw\n IllegalStateException or return false."}, {"method_name": "remove", "method_sig": "public E remove()", "description": "Description copied from interface:\u00a0Deque"}, {"method_name": "pop", "method_sig": "public E pop()", "description": "Description copied from interface:\u00a0Deque"}, {"method_name": "element", "method_sig": "public E element()", "description": "Description copied from interface:\u00a0Deque"}, {"method_name": "push", "method_sig": "public void push (E e)", "description": "Description copied from interface:\u00a0Deque"}, {"method_name": "removeFirstOccurrence", "method_sig": "public boolean removeFirstOccurrence (Object o)", "description": "Removes the first occurrence of the specified element from this deque.\n If the deque does not contain the element, it is unchanged.\n More formally, removes the first element e such that\n o.equals(e) (if such an element exists).\n Returns true if this deque contained the specified element\n (or equivalently, if this deque changed as a result of the call)."}, {"method_name": "removeLastOccurrence", "method_sig": "public boolean removeLastOccurrence (Object o)", "description": "Removes the last occurrence of the specified element from this deque.\n If the deque does not contain the element, it is unchanged.\n More formally, removes the last element e such that\n o.equals(e) (if such an element exists).\n Returns true if this deque contained the specified element\n (or equivalently, if this deque changed as a result of the call)."}, {"method_name": "contains", "method_sig": "public boolean contains (Object o)", "description": "Returns true if this deque contains the specified element.\n More formally, returns true if and only if this deque contains\n at least one element e such that o.equals(e)."}, {"method_name": "isEmpty", "method_sig": "public boolean isEmpty()", "description": "Returns true if this collection contains no elements."}, {"method_name": "size", "method_sig": "public int size()", "description": "Returns the number of elements in this deque.  If this deque\n contains more than Integer.MAX_VALUE elements, it\n returns Integer.MAX_VALUE.\n\n Beware that, unlike in most collections, this method is\n NOT a constant-time operation. Because of the\n asynchronous nature of these deques, determining the current\n number of elements requires traversing them all to count them.\n Additionally, it is possible for the size to change during\n execution of this method, in which case the returned result\n will be inaccurate. Thus, this method is typically not very\n useful in concurrent applications."}, {"method_name": "remove", "method_sig": "public boolean remove (Object o)", "description": "Removes the first occurrence of the specified element from this deque.\n If the deque does not contain the element, it is unchanged.\n More formally, removes the first element e such that\n o.equals(e) (if such an element exists).\n Returns true if this deque contained the specified element\n (or equivalently, if this deque changed as a result of the call).\n\n This method is equivalent to removeFirstOccurrence(Object)."}, {"method_name": "addAll", "method_sig": "public boolean addAll (Collection<? extends E> c)", "description": "Appends all of the elements in the specified collection to the end of\n this deque, in the order that they are returned by the specified\n collection's iterator.  Attempts to addAll of a deque to\n itself result in IllegalArgumentException."}, {"method_name": "clear", "method_sig": "public void clear()", "description": "Removes all of the elements from this deque."}, {"method_name": "toArray", "method_sig": "public Object[] toArray()", "description": "Returns an array containing all of the elements in this deque, in\n proper sequence (from first to last element).\n\n The returned array will be \"safe\" in that no references to it are\n maintained by this deque.  (In other words, this method must allocate\n a new array).  The caller is thus free to modify the returned array.\n\n This method acts as bridge between array-based and collection-based\n APIs."}, {"method_name": "toArray", "method_sig": "public <T> T[] toArray (T[] a)", "description": "Returns an array containing all of the elements in this deque,\n in proper sequence (from first to last element); the runtime\n type of the returned array is that of the specified array.  If\n the deque fits in the specified array, it is returned therein.\n Otherwise, a new array is allocated with the runtime type of\n the specified array and the size of this deque.\n\n If this deque fits in the specified array with room to spare\n (i.e., the array has more elements than this deque), the element in\n the array immediately following the end of the deque is set to\n null.\n\n Like the toArray() method, this method acts as\n bridge between array-based and collection-based APIs.  Further,\n this method allows precise control over the runtime type of the\n output array, and may, under certain circumstances, be used to\n save allocation costs.\n\n Suppose x is a deque known to contain only strings.\n The following code can be used to dump the deque into a newly\n allocated array of String:\n\n  String[] y = x.toArray(new String[0]);\n\n Note that toArray(new Object[0]) is identical in function to\n toArray()."}, {"method_name": "iterator", "method_sig": "public Iterator<E> iterator()", "description": "Returns an iterator over the elements in this deque in proper sequence.\n The elements will be returned in order from first (head) to last (tail).\n\n The returned iterator is\n weakly consistent."}, {"method_name": "descendingIterator", "method_sig": "public Iterator<E> descendingIterator()", "description": "Returns an iterator over the elements in this deque in reverse\n sequential order.  The elements will be returned in order from\n last (tail) to first (head).\n\n The returned iterator is\n weakly consistent."}, {"method_name": "spliterator", "method_sig": "public Spliterator<E> spliterator()", "description": "Returns a Spliterator over the elements in this deque.\n\n The returned spliterator is\n weakly consistent.\n\n The Spliterator reports Spliterator.CONCURRENT,\n Spliterator.ORDERED, and Spliterator.NONNULL."}, {"method_name": "removeIf", "method_sig": "public boolean removeIf (Predicate<? super E> filter)", "description": "Description copied from interface:\u00a0Collection"}, {"method_name": "removeAll", "method_sig": "public boolean removeAll (Collection<?> c)", "description": "Description copied from class:\u00a0AbstractCollection"}, {"method_name": "retainAll", "method_sig": "public boolean retainAll (Collection<?> c)", "description": "Description copied from class:\u00a0AbstractCollection"}, {"method_name": "forEach", "method_sig": "public void forEach (Consumer<? super E> action)", "description": "Description copied from interface:\u00a0Iterable"}]}