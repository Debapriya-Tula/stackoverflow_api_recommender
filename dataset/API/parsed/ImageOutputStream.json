{"name": "Interface ImageOutputStream", "module": "java.desktop", "package": "javax.imageio.stream", "text": "A seekable output stream interface for use by\n ImageWriters.  Various output destinations, such as\n OutputStreams and Files, as well as\n future fast I/O destinations may be \"wrapped\" by a suitable\n implementation of this interface for use by the Image I/O API.\n\n  Unlike a standard OutputStream, ImageOutputStream\n extends its counterpart, ImageInputStream.  Thus it is\n possible to read from the stream as it is being written.  The same\n seek and flush positions apply to both reading and writing, although\n the semantics for dealing with a non-zero bit offset before a byte-aligned\n write are necessarily different from the semantics for dealing with\n a non-zero bit offset before a byte-aligned read.  When reading bytes,\n any bit offset is set to 0 before the read; when writing bytes, a\n non-zero bit offset causes the remaining bits in the byte to be written\n as 0s. The byte-aligned write then starts at the next byte position.", "codes": ["public interface ImageOutputStream\nextends ImageInputStream, DataOutput"], "fields": [], "methods": [{"method_name": "write", "method_sig": "void write (int b)\n    throws IOException", "description": "Writes a single byte to the stream at the current position.\n The 24 high-order bits of b are ignored.\n\n  If the bit offset within the stream is non-zero, the\n remainder of the current byte is padded with 0s\n and written out first.  The bit offset will be 0 after the\n write.  Implementers can use the\n flushBits\n method of ImageOutputStreamImpl\n to guarantee this."}, {"method_name": "write", "method_sig": "void write (byte[] b)\n    throws IOException", "description": "Writes a sequence of bytes to the stream at the current\n position.  If b.length is 0, nothing is written.\n The byte b[0] is written first, then the byte\n b[1], and so on.\n\n  If the bit offset within the stream is non-zero, the\n remainder of the current byte is padded with 0s\n and written out first.  The bit offset will be 0 after the\n write."}, {"method_name": "write", "method_sig": "void write (byte[] b,\n           int off,\n           int len)\n    throws IOException", "description": "Writes a sequence of bytes to the stream at the current\n position.  If len is 0, nothing is written.\n The byte b[off] is written first, then the byte\n b[off + 1], and so on.\n\n  If the bit offset within the stream is non-zero, the\n remainder of the current byte is padded with 0s\n and written out first.  The bit offset will be 0 after the\n write.  Implementers can use the\n flushBits\n method of ImageOutputStreamImpl\n to guarantee this."}, {"method_name": "writeBoolean", "method_sig": "void writeBoolean (boolean v)\n           throws IOException", "description": "Writes a boolean value to the stream.  If\n v is true, the value (byte)1 is\n written; if v is false, the value\n (byte)0 is written.\n\n  If the bit offset within the stream is non-zero, the\n remainder of the current byte is padded with 0s\n and written out first.  The bit offset will be 0 after the\n write."}, {"method_name": "writeByte", "method_sig": "void writeByte (int v)\n        throws IOException", "description": "Writes the 8 low-order bits of v to the\n stream. The 24 high-order bits of v are ignored.\n (This means that writeByte does exactly the same\n thing as write for an integer argument.)\n\n  If the bit offset within the stream is non-zero, the\n remainder of the current byte is padded with 0s\n and written out first.  The bit offset will be 0 after the\n write."}, {"method_name": "writeShort", "method_sig": "void writeShort (int v)\n         throws IOException", "description": "Writes the 16 low-order bits of v to the\n stream. The 16 high-order bits of v are ignored.\n If the stream uses network byte order, the bytes written, in\n order, will be:\n\n \n (byte)((v >> 8) & 0xff)\n (byte)(v & 0xff)\n \n\n Otherwise, the bytes written will be:\n\n \n (byte)(v & 0xff)\n (byte)((v >> 8) & 0xff)\n \n If the bit offset within the stream is non-zero, the\n remainder of the current byte is padded with 0s\n and written out first.  The bit offset will be 0 after the\n write."}, {"method_name": "writeChar", "method_sig": "void writeChar (int v)\n        throws IOException", "description": "This method is a synonym for writeShort."}, {"method_name": "writeInt", "method_sig": "void writeInt (int v)\n       throws IOException", "description": "Writes the 32 bits of v to the stream.  If the\n stream uses network byte order, the bytes written, in order,\n will be:\n\n \n (byte)((v >> 24) & 0xff)\n (byte)((v >> 16) & 0xff)\n (byte)((v >> 8) & 0xff)\n (byte)(v & 0xff)\n \n\n Otheriwse, the bytes written will be:\n\n \n (byte)(v & 0xff)\n (byte)((v >> 8) & 0xff)\n (byte)((v >> 16) & 0xff)\n (byte)((v >> 24) & 0xff)\n \n If the bit offset within the stream is non-zero, the\n remainder of the current byte is padded with 0s\n and written out first.  The bit offset will be 0 after the\n write."}, {"method_name": "writeLong", "method_sig": "void writeLong (long v)\n        throws IOException", "description": "Writes the 64 bits of v to the stream.  If the\n stream uses network byte order, the bytes written, in order,\n will be:\n\n \n (byte)((v >> 56) & 0xff)\n (byte)((v >> 48) & 0xff)\n (byte)((v >> 40) & 0xff)\n (byte)((v >> 32) & 0xff)\n (byte)((v >> 24) & 0xff)\n (byte)((v >> 16) & 0xff)\n (byte)((v >> 8) & 0xff)\n (byte)(v & 0xff)\n \n\n Otherwise, the bytes written will be:\n\n \n (byte)(v & 0xff)\n (byte)((v >> 8) & 0xff)\n (byte)((v >> 16) & 0xff)\n (byte)((v >> 24) & 0xff)\n (byte)((v >> 32) & 0xff)\n (byte)((v >> 40) & 0xff)\n (byte)((v >> 48) & 0xff)\n (byte)((v >> 56) & 0xff)\n \n If the bit offset within the stream is non-zero, the\n remainder of the current byte is padded with 0s\n and written out first.  The bit offset will be 0 after the\n write."}, {"method_name": "writeFloat", "method_sig": "void writeFloat (float v)\n         throws IOException", "description": "Writes a float value, which is comprised of four\n bytes, to the output stream. It does this as if it first\n converts this float value to an int\n in exactly the manner of the Float.floatToIntBits\n method and then writes the int value in exactly the manner of\n the writeInt method.\n\n  If the bit offset within the stream is non-zero, the\n remainder of the current byte is padded with 0s\n and written out first.  The bit offset will be 0 after the\n write."}, {"method_name": "writeDouble", "method_sig": "void writeDouble (double v)\n          throws IOException", "description": "Writes a double value, which is comprised of four\n bytes, to the output stream. It does this as if it first\n converts this double value to a long\n in exactly the manner of the\n Double.doubleToLongBits method and then writes the\n long value in exactly the manner of the writeLong\n method.\n\n  If the bit offset within the stream is non-zero, the\n remainder of the current byte is padded with 0s\n and written out first.  The bit offset will be 0 after the\n write."}, {"method_name": "writeBytes", "method_sig": "void writeBytes (String s)\n         throws IOException", "description": "Writes a string to the output stream. For every character in\n the string s, taken in order, one byte is written\n to the output stream. If s is null, a\n NullPointerException is thrown.\n\n  If s.length is zero, then no bytes are\n written. Otherwise, the character s[0] is written\n first, then s[1], and so on; the last character\n written is s[s.length-1]. For each character, one\n byte is written, the low-order byte, in exactly the manner of\n the writeByte method. The high-order eight bits of\n each character in the string are ignored.\n\n  If the bit offset within the stream is non-zero, the\n remainder of the current byte is padded with 0s\n and written out first.  The bit offset will be 0 after the\n write."}, {"method_name": "writeChars", "method_sig": "void writeChars (String s)\n         throws IOException", "description": "Writes a string to the output stream. For every character in\n the string s, taken in order, two bytes are\n written to the output stream, ordered according to the current\n byte order setting.  If network byte order is being used, the\n high-order byte is written first; the order is reversed\n otherwise.  If s is null, a\n NullPointerException is thrown.\n\n  If s.length is zero, then no bytes are\n written. Otherwise, the character s[0] is written\n first, then s[1], and so on; the last character\n written is s[s.length-1].\n\n  If the bit offset within the stream is non-zero, the\n remainder of the current byte is padded with 0s\n and written out first.  The bit offset will be 0 after the\n write."}, {"method_name": "writeUTF", "method_sig": "void writeUTF (String s)\n       throws IOException", "description": "Writes two bytes of length information to the output stream in\n network byte order, followed by the\n modified\n UTF-8\n representation of every character in the string s.\n If s is null, a\n NullPointerException is thrown.  Each character in\n the string s is converted to a group of one, two,\n or three bytes, depending on the value of the character.\n\n  If a character c is in the range\n \\u0001 through \\u007f, it is\n represented by one byte:\n\n \n (byte)c\n \n If a character c is \\u0000 or\n is in the range \\u0080 through\n \\u07ff, then it is represented by two bytes,\n to be written in the order shown:\n\n \n (byte)(0xc0 | (0x1f & (c >> 6)))\n (byte)(0x80 | (0x3f & c))\n \n If a character c is in the range\n \\u0800 through uffff, then it is\n represented by three bytes, to be written in the order shown:\n\n \n (byte)(0xe0 | (0x0f & (c >> 12)))\n (byte)(0x80 | (0x3f & (c >> 6)))\n (byte)(0x80 | (0x3f & c))\n \n First, the total number of bytes needed to represent all\n the characters of s is calculated. If this number\n is larger than 65535, then a\n UTFDataFormatException is thrown. Otherwise, this\n length is written to the output stream in exactly the manner of\n the writeShort method; after this, the one-, two-,\n or three-byte representation of each character in the string\n s is written.\n\n  The current byte order setting is ignored.\n\n  If the bit offset within the stream is non-zero, the\n remainder of the current byte is padded with 0s\n and written out first.  The bit offset will be 0 after the\n write.\n\n Note: This method should not be used in\n the  implementation of image formats that use standard UTF-8,\n because  the modified UTF-8 used here is incompatible with\n standard UTF-8."}, {"method_name": "writeShorts", "method_sig": "void writeShorts (short[] s,\n                 int off,\n                 int len)\n          throws IOException", "description": "Writes a sequence of shorts to the stream at the current\n position.  If len is 0, nothing is written.\n The short s[off] is written first, then the short\n s[off + 1], and so on.  The byte order of the\n stream is used to determine the order in which the individual\n bytes are written.\n\n  If the bit offset within the stream is non-zero, the\n remainder of the current byte is padded with 0s\n and written out first.  The bit offset will be 0 after the\n write."}, {"method_name": "writeChars", "method_sig": "void writeChars (char[] c,\n                int off,\n                int len)\n         throws IOException", "description": "Writes a sequence of chars to the stream at the current\n position.  If len is 0, nothing is written.\n The char c[off] is written first, then the char\n c[off + 1], and so on.  The byte order of the\n stream is used to determine the order in which the individual\n bytes are written.\n\n  If the bit offset within the stream is non-zero, the\n remainder of the current byte is padded with 0s\n and written out first.  The bit offset will be 0 after the\n write."}, {"method_name": "writeInts", "method_sig": "void writeInts (int[] i,\n               int off,\n               int len)\n        throws IOException", "description": "Writes a sequence of ints to the stream at the current\n position.  If len is 0, nothing is written.\n The int i[off] is written first, then the int\n i[off + 1], and so on.  The byte order of the\n stream is used to determine the order in which the individual\n bytes are written.\n\n  If the bit offset within the stream is non-zero, the\n remainder of the current byte is padded with 0s\n and written out first.  The bit offset will be 0 after the\n write."}, {"method_name": "writeLongs", "method_sig": "void writeLongs (long[] l,\n                int off,\n                int len)\n         throws IOException", "description": "Writes a sequence of longs to the stream at the current\n position.  If len is 0, nothing is written.\n The long l[off] is written first, then the long\n l[off + 1], and so on.  The byte order of the\n stream is used to determine the order in which the individual\n bytes are written.\n\n  If the bit offset within the stream is non-zero, the\n remainder of the current byte is padded with 0s\n and written out first.  The bit offset will be 0 after the\n write."}, {"method_name": "writeFloats", "method_sig": "void writeFloats (float[] f,\n                 int off,\n                 int len)\n          throws IOException", "description": "Writes a sequence of floats to the stream at the current\n position.  If len is 0, nothing is written.\n The float f[off] is written first, then the float\n f[off + 1], and so on.  The byte order of the\n stream is used to determine the order in which the individual\n bytes are written.\n\n  If the bit offset within the stream is non-zero, the\n remainder of the current byte is padded with 0s\n and written out first.  The bit offset will be 0 after the\n write."}, {"method_name": "writeDoubles", "method_sig": "void writeDoubles (double[] d,\n                  int off,\n                  int len)\n           throws IOException", "description": "Writes a sequence of doubles to the stream at the current\n position.  If len is 0, nothing is written.\n The double d[off] is written first, then the double\n d[off + 1], and so on.  The byte order of the\n stream is used to determine the order in which the individual\n bytes are written.\n\n  If the bit offset within the stream is non-zero, the\n remainder of the current byte is padded with 0s\n and written out first.  The bit offset will be 0 after the\n write."}, {"method_name": "writeBit", "method_sig": "void writeBit (int bit)\n       throws IOException", "description": "Writes a single bit, given by the least significant bit of the\n argument, to the stream at the current bit offset within the\n current byte position.  The upper 31 bits of the argument are\n ignored.  The given bit replaces the previous bit at that\n position.  The bit offset is advanced by one and reduced modulo\n 8.\n\n  If any bits of a particular byte have never been set\n at the time the byte is flushed to the destination, those\n bits will be set to 0 automatically."}, {"method_name": "writeBits", "method_sig": "void writeBits (long bits,\n               int numBits)\n        throws IOException", "description": "Writes a sequence of bits, given by the numBits\n least significant bits of the bits argument in\n left-to-right order, to the stream at the current bit offset\n within the current byte position.  The upper 64 - numBits\n bits of the argument are ignored.  The bit\n offset is advanced by numBits and reduced modulo\n 8.  Note that a bit offset of 0 always indicates the\n most-significant bit of the byte, and bytes of bits are written\n out in sequence as they are encountered.  Thus bit writes are\n always effectively in network byte order.  The actual stream\n byte order setting is ignored.\n\n  Bit data may be accumulated in memory indefinitely, until\n flushBefore is called.  At that time, all bit data\n prior to the flushed position will be written.\n\n  If any bits of a particular byte have never been set\n at the time the byte is flushed to the destination, those\n bits will be set to 0 automatically."}, {"method_name": "flushBefore", "method_sig": "void flushBefore (long pos)\n          throws IOException", "description": "Flushes all data prior to the given position to the underlying\n destination, such as an OutputStream or\n File.  Attempting to seek to the flushed portion\n of the stream will result in an\n IndexOutOfBoundsException."}]}