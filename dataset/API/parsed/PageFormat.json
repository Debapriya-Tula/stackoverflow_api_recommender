{"name": "Class PageFormat", "module": "java.desktop", "package": "java.awt.print", "text": "The PageFormat class describes the size and\n orientation of a page to be printed.", "codes": ["public class PageFormat\nextends Object\nimplements Cloneable"], "fields": [{"field_name": "LANDSCAPE", "field_sig": "@Native\npublic static final\u00a0int LANDSCAPE", "description": "The origin is at the bottom left of the paper with\n  x running bottom to top and y running left to right.\n  Note that this is not the Macintosh landscape but\n  is the Window's and PostScript landscape."}, {"field_name": "PORTRAIT", "field_sig": "@Native\npublic static final\u00a0int PORTRAIT", "description": "The origin is at the top left of the paper with\n  x running to the right and y running down the\n  paper."}, {"field_name": "REVERSE_LANDSCAPE", "field_sig": "@Native\npublic static final\u00a0int REVERSE_LANDSCAPE", "description": "The origin is at the top right of the paper with x\n  running top to bottom and y running right to left.\n  Note that this is the Macintosh landscape."}], "methods": [{"method_name": "clone", "method_sig": "public Object clone()", "description": "Makes a copy of this PageFormat with the same\n contents as this PageFormat."}, {"method_name": "getWidth", "method_sig": "public double getWidth()", "description": "Returns the width, in 1/72nds of an inch, of the page.\n This method takes into account the orientation of the\n page when determining the width."}, {"method_name": "getHeight", "method_sig": "public double getHeight()", "description": "Returns the height, in 1/72nds of an inch, of the page.\n This method takes into account the orientation of the\n page when determining the height."}, {"method_name": "getImageableX", "method_sig": "public double getImageableX()", "description": "Returns the x coordinate of the upper left point of the\n imageable area of the Paper object\n associated with this PageFormat.\n This method takes into account the\n orientation of the page."}, {"method_name": "getImageableY", "method_sig": "public double getImageableY()", "description": "Returns the y coordinate of the upper left point of the\n imageable area of the Paper object\n associated with this PageFormat.\n This method takes into account the\n orientation of the page."}, {"method_name": "getImageableWidth", "method_sig": "public double getImageableWidth()", "description": "Returns the width, in 1/72nds of an inch, of the imageable\n area of the page. This method takes into account the orientation\n of the page."}, {"method_name": "getImageableHeight", "method_sig": "public double getImageableHeight()", "description": "Return the height, in 1/72nds of an inch, of the imageable\n area of the page. This method takes into account the orientation\n of the page."}, {"method_name": "getPaper", "method_sig": "public Paper getPaper()", "description": "Returns a copy of the Paper object associated\n with this PageFormat.  Changes made to the\n Paper object returned from this method do not\n affect the Paper object of this\n PageFormat.  To update the Paper\n object of this PageFormat, create a new\n Paper object and set it into this\n PageFormat by using the setPaper(Paper)\n method."}, {"method_name": "setPaper", "method_sig": "public void setPaper (Paper paper)", "description": "Sets the Paper object for this\n PageFormat."}, {"method_name": "setOrientation", "method_sig": "public void setOrientation (int orientation)\n                    throws IllegalArgumentException", "description": "Sets the page orientation. orientation must be\n one of the constants: PORTRAIT, LANDSCAPE,\n or REVERSE_LANDSCAPE."}, {"method_name": "getOrientation", "method_sig": "public int getOrientation()", "description": "Returns the orientation of this PageFormat."}, {"method_name": "getMatrix", "method_sig": "public double[] getMatrix()", "description": "Returns a transformation matrix that translates user\n space rendering to the requested orientation\n of the page.  The values are placed into the\n array as\n {\u00a0m00,\u00a0m10,\u00a0m01,\u00a0m11,\u00a0m02,\u00a0m12} in\n the form required by the AffineTransform\n constructor."}]}