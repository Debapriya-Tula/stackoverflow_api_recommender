{"name": "Class ServerSocket", "module": "java.base", "package": "java.net", "text": "This class implements server sockets. A server socket waits for\n requests to come in over the network. It performs some operation\n based on that request, and then possibly returns a result to the requester.\n \n The actual work of the server socket is performed by an instance\n of the SocketImpl class. An application can\n change the socket factory that creates the socket\n implementation to configure itself to create sockets\n appropriate to the local firewall.", "codes": ["public class ServerSocket\nextends Object\nimplements Closeable"], "fields": [], "methods": [{"method_name": "bind", "method_sig": "public void bind (SocketAddress endpoint)\n          throws IOException", "description": "Binds the ServerSocket to a specific address\n (IP address and port number).\n \n If the address is null, then the system will pick up\n an ephemeral port and a valid local address to bind the socket."}, {"method_name": "bind", "method_sig": "public void bind (SocketAddress endpoint,\n                 int backlog)\n          throws IOException", "description": "Binds the ServerSocket to a specific address\n (IP address and port number).\n \n If the address is null, then the system will pick up\n an ephemeral port and a valid local address to bind the socket.\n \n The backlog argument is the requested maximum number of\n pending connections on the socket. Its exact semantics are implementation\n specific. In particular, an implementation may impose a maximum length\n or may choose to ignore the parameter altogther. The value provided\n should be greater than 0. If it is less than or equal to\n 0, then an implementation specific default will be used."}, {"method_name": "getInetAddress", "method_sig": "public InetAddress getInetAddress()", "description": "Returns the local address of this server socket.\n \n If the socket was bound prior to being closed,\n then this method will continue to return the local address\n after the socket is closed.\n \n If there is a security manager set, its checkConnect method is\n called with the local address and -1 as its arguments to see\n if the operation is allowed. If the operation is not allowed,\n the loopback address is returned."}, {"method_name": "getLocalPort", "method_sig": "public int getLocalPort()", "description": "Returns the port number on which this socket is listening.\n \n If the socket was bound prior to being closed,\n then this method will continue to return the port number\n after the socket is closed."}, {"method_name": "getLocalSocketAddress", "method_sig": "public SocketAddress getLocalSocketAddress()", "description": "Returns the address of the endpoint this socket is bound to.\n \n If the socket was bound prior to being closed,\n then this method will continue to return the address of the endpoint\n after the socket is closed.\n \n If there is a security manager set, its checkConnect method is\n called with the local address and -1 as its arguments to see\n if the operation is allowed. If the operation is not allowed,\n a SocketAddress representing the\n loopback address and the local\n port to which the socket is bound is returned."}, {"method_name": "accept", "method_sig": "public Socket accept()\n              throws IOException", "description": "Listens for a connection to be made to this socket and accepts\n it. The method blocks until a connection is made.\n\n A new Socket s is created and, if there\n is a security manager,\n the security manager's checkAccept method is called\n with s.getInetAddress().getHostAddress() and\n s.getPort()\n as its arguments to ensure the operation is allowed.\n This could result in a SecurityException."}, {"method_name": "implAccept", "method_sig": "protected final void implAccept (Socket s)\n                         throws IOException", "description": "Subclasses of ServerSocket use this method to override accept()\n to return their own subclass of socket.  So a FooServerSocket\n will typically hand this method an empty FooSocket.  On\n return from implAccept the FooSocket will be connected to a client."}, {"method_name": "close", "method_sig": "public void close()\n           throws IOException", "description": "Closes this socket.\n\n Any thread currently blocked in accept() will throw\n a SocketException.\n\n  If this socket has an associated channel then the channel is closed\n as well."}, {"method_name": "getChannel", "method_sig": "public ServerSocketChannel getChannel()", "description": "Returns the unique ServerSocketChannel object\n associated with this socket, if any.\n\n  A server socket will have a channel if, and only if, the channel\n itself was created via the ServerSocketChannel.open\n method."}, {"method_name": "isBound", "method_sig": "public boolean isBound()", "description": "Returns the binding state of the ServerSocket."}, {"method_name": "isClosed", "method_sig": "public boolean isClosed()", "description": "Returns the closed state of the ServerSocket."}, {"method_name": "setSoTimeout", "method_sig": "public void setSoTimeout (int timeout)\n                  throws SocketException", "description": "Enable/disable SO_TIMEOUT with the\n specified timeout, in milliseconds.  With this option set to a non-zero\n timeout, a call to accept() for this ServerSocket\n will block for only this amount of time.  If the timeout expires,\n a java.net.SocketTimeoutException is raised, though the\n ServerSocket is still valid.  The option must be enabled\n prior to entering the blocking operation to have effect.  The\n timeout must be > 0.\n A timeout of zero is interpreted as an infinite timeout."}, {"method_name": "getSoTimeout", "method_sig": "public int getSoTimeout()\n                 throws IOException", "description": "Retrieve setting for SO_TIMEOUT.\n 0 returns implies that the option is disabled (i.e., timeout of infinity)."}, {"method_name": "setReuseAddress", "method_sig": "public void setReuseAddress (boolean on)\n                     throws SocketException", "description": "Enable/disable the SO_REUSEADDR\n socket option.\n \n When a TCP connection is closed the connection may remain\n in a timeout state for a period of time after the connection\n is closed (typically known as the TIME_WAIT state\n or 2MSL wait state).\n For applications using a well known socket address or port\n it may not be possible to bind a socket to the required\n SocketAddress if there is a connection in the\n timeout state involving the socket address or port.\n \n Enabling SO_REUSEADDR prior to\n binding the socket using bind(SocketAddress) allows the socket\n to be bound even though a previous connection is in a timeout state.\n \n When a ServerSocket is created the initial setting\n of SO_REUSEADDR is not defined.\n Applications can use getReuseAddress() to determine the initial\n setting of SO_REUSEADDR.\n \n The behaviour when SO_REUSEADDR is\n enabled or disabled after a socket is bound (See isBound())\n is not defined."}, {"method_name": "getReuseAddress", "method_sig": "public boolean getReuseAddress()\n                        throws SocketException", "description": "Tests if SO_REUSEADDR is enabled."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns the implementation address and implementation port of\n this socket as a String.\n \n If there is a security manager set, its checkConnect method is\n called with the local address and -1 as its arguments to see\n if the operation is allowed. If the operation is not allowed,\n an InetAddress representing the\n loopback address is returned as\n the implementation address."}, {"method_name": "setSocketFactory", "method_sig": "public static void setSocketFactory (SocketImplFactory fac)\n                             throws IOException", "description": "Sets the server socket implementation factory for the\n application. The factory can be specified only once.\n \n When an application creates a new server socket, the socket\n implementation factory's createSocketImpl method is\n called to create the actual socket implementation.\n \n Passing null to the method is a no-op unless the factory\n was already set.\n \n If there is a security manager, this method first calls\n the security manager's checkSetFactory method\n to ensure the operation is allowed.\n This could result in a SecurityException."}, {"method_name": "setReceiveBufferSize", "method_sig": "public void setReceiveBufferSize (int size)\n                          throws SocketException", "description": "Sets a default proposed value for the\n SO_RCVBUF option for sockets\n accepted from this ServerSocket. The value actually set\n in the accepted socket must be determined by calling\n Socket.getReceiveBufferSize() after the socket\n is returned by accept().\n \n The value of SO_RCVBUF is used both to\n set the size of the internal socket receive buffer, and to set the size\n of the TCP receive window that is advertized to the remote peer.\n \n It is possible to change the value subsequently, by calling\n Socket.setReceiveBufferSize(int). However, if the application\n wishes to allow a receive window larger than 64K bytes, as defined by RFC1323\n then the proposed value must be set in the ServerSocket before\n it is bound to a local address. This implies, that the ServerSocket must be\n created with the no-argument constructor, then setReceiveBufferSize() must\n be called and lastly the ServerSocket is bound to an address by calling bind().\n \n Failure to do this will not cause an error, and the buffer size may be set to the\n requested value but the TCP receive window in sockets accepted from\n this ServerSocket will be no larger than 64K bytes."}, {"method_name": "getReceiveBufferSize", "method_sig": "public int getReceiveBufferSize()\n                         throws SocketException", "description": "Gets the value of the SO_RCVBUF option\n for this ServerSocket, that is the proposed buffer size that\n will be used for Sockets accepted from this ServerSocket.\n\n Note, the value actually set in the accepted socket is determined by\n calling Socket.getReceiveBufferSize()."}, {"method_name": "setPerformancePreferences", "method_sig": "public void setPerformancePreferences (int connectionTime,\n                                      int latency,\n                                      int bandwidth)", "description": "Sets performance preferences for this ServerSocket.\n\n  Sockets use the TCP/IP protocol by default.  Some implementations\n may offer alternative protocols which have different performance\n characteristics than TCP/IP.  This method allows the application to\n express its own preferences as to how these tradeoffs should be made\n when the implementation chooses from the available protocols.\n\n  Performance preferences are described by three integers\n whose values indicate the relative importance of short connection time,\n low latency, and high bandwidth.  The absolute values of the integers\n are irrelevant; in order to choose a protocol the values are simply\n compared, with larger values indicating stronger preferences.  If the\n application prefers short connection time over both low latency and high\n bandwidth, for example, then it could invoke this method with the values\n (1, 0, 0).  If the application prefers high bandwidth above low\n latency, and low latency above short connection time, then it could\n invoke this method with the values (0, 1, 2).\n\n  Invoking this method after this socket has been bound\n will have no effect. This implies that in order to use this capability\n requires the socket to be created with the no-argument constructor."}, {"method_name": "setOption", "method_sig": "public <T> ServerSocket setOption (SocketOption<T> name,\n                                  T value)\n                           throws IOException", "description": "Sets the value of a socket option."}, {"method_name": "getOption", "method_sig": "public <T> T getOption (SocketOption<T> name)\n                throws IOException", "description": "Returns the value of a socket option."}, {"method_name": "supportedOptions", "method_sig": "public Set<SocketOption<?>> supportedOptions()", "description": "Returns a set of the socket options supported by this server socket.\n\n This method will continue to return the set of options even after\n the socket has been closed."}]}