{"name": "Class UID", "module": "java.rmi", "package": "java.rmi.server", "text": "A UID represents an identifier that is unique over time\n with respect to the host it is generated on, or one of 216\n \"well-known\" identifiers.\n\n The UID() constructor can be used to generate an\n identifier that is unique over time with respect to the host it is\n generated on.  The UID(short) constructor can be used to\n create one of 216 well-known identifiers.\n\n A UID instance contains three primitive values:\n \nunique, an int that uniquely identifies\n the VM that this UID was generated in, with respect to its\n host and at the time represented by the time value (an\n example implementation of the unique value would be a\n process identifier),\n  or zero for a well-known UID\ntime, a long equal to a time (as returned\n by System.currentTimeMillis()) at which the VM that this\n UID was generated in was alive,\n or zero for a well-known UID\ncount, a short to distinguish\n UIDs generated in the same VM with the same\n time value\n \nAn independently generated UID instance is unique\n over time with respect to the host it is generated on as long as\n the host requires more than one millisecond to reboot and its system\n clock is never set backward.  A globally unique identifier can be\n constructed by pairing a UID instance with a unique host\n identifier, such as an IP address.", "codes": ["public final class UID\nextends Object\nimplements Serializable"], "fields": [], "methods": [{"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Returns the hash code value for this UID."}, {"method_name": "equals", "method_sig": "public boolean equals (Object obj)", "description": "Compares the specified object with this UID for\n equality.\n\n This method returns true if and only if the\n specified object is a UID instance with the same\n unique, time, and count\n values as this one."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a string representation of this UID."}, {"method_name": "write", "method_sig": "public void write (DataOutput out)\n           throws IOException", "description": "Marshals a binary representation of this UID to\n a DataOutput instance.\n\n Specifically, this method first invokes the given stream's\n DataOutput.writeInt(int) method with this UID's\n unique value, then it invokes the stream's\n DataOutput.writeLong(long) method with this UID's\n time value, and then it invokes the stream's\n DataOutput.writeShort(int) method with this UID's\n count value."}, {"method_name": "read", "method_sig": "public static UID read (DataInput in)\n                throws IOException", "description": "Constructs and returns a new UID instance by\n unmarshalling a binary representation from an\n DataInput instance.\n\n Specifically, this method first invokes the given stream's\n DataInput.readInt() method to read a unique value,\n then it invoke's the stream's\n DataInput.readLong() method to read a time value,\n then it invoke's the stream's\n DataInput.readShort() method to read a count value,\n and then it creates and returns a new UID instance\n that contains the unique, time, and\n count values that were read from the stream."}]}