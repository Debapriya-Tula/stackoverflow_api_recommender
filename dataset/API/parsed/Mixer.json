{"name": "Interface Mixer", "module": "java.desktop", "package": "javax.sound.sampled", "text": "A mixer is an audio device with one or more lines. It need not be designed\n for mixing audio signals. A mixer that actually mixes audio has multiple\n input (source) lines and at least one output (target) line. The former are\n often instances of classes that implement SourceDataLine, and the\n latter, TargetDataLine. Port objects, too, are either source\n lines or target lines. A mixer can accept prerecorded, loopable sound as\n input, by having some of its source lines be instances of objects that\n implement the Clip interface.\n \n Through methods of the Line interface, which Mixer extends, a\n mixer might provide a set of controls that are global to the mixer. For\n example, the mixer can have a master gain control. These global controls are\n distinct from the controls belonging to each of the mixer's individual lines.\n \n Some mixers, especially those with internal digital mixing capabilities, may\n provide additional capabilities by implementing the DataLine\n interface.\n \n A mixer can support synchronization of its lines. When one line in a\n synchronized group is started or stopped, the other lines in the group\n automatically start or stop simultaneously with the explicitly affected one.", "codes": ["public interface Mixer\nextends Line"], "fields": [], "methods": [{"method_name": "getMixerInfo", "method_sig": "Mixer.Info getMixerInfo()", "description": "Obtains information about this mixer, including the product's name,\n version, vendor, etc."}, {"method_name": "getSourceLineInfo", "method_sig": "Line.Info[] getSourceLineInfo()", "description": "Obtains information about the set of source lines supported by this\n mixer. Some source lines may only be available when this mixer is open."}, {"method_name": "getTargetLineInfo", "method_sig": "Line.Info[] getTargetLineInfo()", "description": "Obtains information about the set of target lines supported by this\n mixer. Some target lines may only be available when this mixer is open."}, {"method_name": "getSourceLineInfo", "method_sig": "Line.Info[] getSourceLineInfo (Line.Info info)", "description": "Obtains information about source lines of a particular type supported by\n the mixer. Some source lines may only be available when this mixer is\n open."}, {"method_name": "getTargetLineInfo", "method_sig": "Line.Info[] getTargetLineInfo (Line.Info info)", "description": "Obtains information about target lines of a particular type supported by\n the mixer. Some target lines may only be available when this mixer is\n open."}, {"method_name": "isLineSupported", "method_sig": "boolean isLineSupported (Line.Info info)", "description": "Indicates whether the mixer supports a line (or lines) that match the\n specified Line.Info object. Some lines may only be supported when\n this mixer is open."}, {"method_name": "getLine", "method_sig": "Line getLine (Line.Info info)\n      throws LineUnavailableException", "description": "Obtains a line that is available for use and that matches the description\n in the specified Line.Info object.\n \n If a DataLine is requested, and info is an instance of\n DataLine.Info specifying at least one fully qualified audio\n format, the last one will be used as the default format of the returned\n DataLine."}, {"method_name": "getMaxLines", "method_sig": "int getMaxLines (Line.Info info)", "description": "Obtains the approximate maximum number of lines of the requested type\n that can be open simultaneously on the mixer.\n \n Certain types of mixers do not have a hard bound and may allow opening\n more lines. Since certain lines are a shared resource, a mixer may not be\n able to open the maximum number of lines if another process has opened\n lines of this mixer.\n \n The requested type is any line that matches the description in the\n provided Line.Info object. For example, if the info object\n represents a speaker port, and the mixer supports exactly one speaker\n port, this method should return 1. If the info object represents a source\n data line and the mixer supports the use of 32 source data lines\n simultaneously, the return value should be 32. If there is no limit, this\n function returns AudioSystem.NOT_SPECIFIED."}, {"method_name": "getSourceLines", "method_sig": "Line[] getSourceLines()", "description": "Obtains the set of all source lines currently open to this mixer."}, {"method_name": "getTargetLines", "method_sig": "Line[] getTargetLines()", "description": "Obtains the set of all target lines currently open from this mixer."}, {"method_name": "synchronize", "method_sig": "void synchronize (Line[] lines,\n                 boolean maintainSync)", "description": "Synchronizes two or more lines. Any subsequent command that starts or\n stops audio playback or capture for one of these lines will exert the\n same effect on the other lines in the group, so that they start or stop\n playing or capturing data simultaneously."}, {"method_name": "unsynchronize", "method_sig": "void unsynchronize (Line[] lines)", "description": "Releases synchronization for the specified lines. The array must be\n identical to one for which synchronization has already been established;\n otherwise an exception may be thrown. However, null may be\n specified, in which case all currently synchronized lines that belong to\n this mixer are unsynchronized."}, {"method_name": "isSynchronizationSupported", "method_sig": "boolean isSynchronizationSupported (Line[] lines,\n                                   boolean maintainSync)", "description": "Reports whether this mixer supports synchronization of the specified set\n of lines."}]}