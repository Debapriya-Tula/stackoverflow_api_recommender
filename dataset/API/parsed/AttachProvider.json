{"name": "Class AttachProvider", "module": "jdk.attach", "package": "com.sun.tools.attach.spi", "text": "Attach provider class for attaching to a Java virtual machine.\n\n  An attach provider is a concrete subclass of this class that has a\n zero-argument constructor and implements the abstract methods specified\n below.\n\n  An attach provider implementation is typically tied to a Java virtual\n machine implementation, version, or even mode of operation. That is, a specific\n provider implementation will typically only be capable of attaching to\n a specific Java virtual machine implementation or version. For example, Sun's\n JDK implementation ships with provider implementations that can only attach to\n Sun's HotSpot virtual machine. In general, if an environment\n consists of Java virtual machines of different versions and from different\n vendors then there will be an attach provider implementation for each\n family of implementations or versions.\n\n  An attach provider is identified by its name and\n type. The name is typically, but not required to\n be, a name that corresponds to the VM vendor. The Sun JDK implementation,\n for example, ships with attach providers that use the name \"sun\". The\n type typically corresponds to the attach mechanism. For example, an\n implementation that uses the Doors inter-process communication mechanism\n might use the type \"doors\". The purpose of the name and type is to\n identify providers in environments where there are multiple providers\n installed.\n\n  AttachProvider implementations are loaded and instantiated at the first\n invocation of the providers method. This method\n attempts to load all provider implementations that are installed on the\n platform.\n\n  All of the methods in this class are safe for use by multiple\n concurrent threads.", "codes": ["public abstract class AttachProvider\nextends Object"], "fields": [], "methods": [{"method_name": "name", "method_sig": "public abstract String name()", "description": "Return this provider's name."}, {"method_name": "type", "method_sig": "public abstract String type()", "description": "Return this provider's type."}, {"method_name": "attachVirtualMachine", "method_sig": "public abstract VirtualMachine attachVirtualMachine (String id)\n                                             throws AttachNotSupportedException,\n                                                    IOException", "description": "Attaches to a Java virtual machine.\n\n  A Java virtual machine is identified by an abstract identifier. The\n nature of this identifier is platform dependent but in many cases it will be the\n string representation of the process identifier (or pid).\n\n  This method parses the identifier and maps the identifier to a Java\n virtual machine (in an implementation dependent manner). If the identifier\n cannot be parsed by the provider then an\n AttachNotSupportedException\n is thrown. Once parsed this method attempts to attach to the Java virtual machine.\n If the provider detects that the identifier corresponds to a Java virtual machine\n that does not exist, or it corresponds to a Java virtual machine that does not support\n the attach mechanism implemented by this provider, or it detects that the\n Java virtual machine is a version to which this provider cannot attach, then\n an AttachNotSupportedException is thrown."}, {"method_name": "attachVirtualMachine", "method_sig": "public VirtualMachine attachVirtualMachine (VirtualMachineDescriptor vmd)\n                                    throws AttachNotSupportedException,\n                                           IOException", "description": "Attaches to a Java virtual machine.\n\n  A Java virtual machine can be described using a\n VirtualMachineDescriptor.\n This method invokes the descriptor's\n provider() method\n to check that it is equal to this provider. It then attempts to attach to the\n Java virtual machine."}, {"method_name": "listVirtualMachines", "method_sig": "public abstract List<VirtualMachineDescriptor> listVirtualMachines()", "description": "Lists the Java virtual machines known to this provider.\n\n  This method returns a list of\n VirtualMachineDescriptor elements. Each\n VirtualMachineDescriptor describes a Java virtual machine\n to which this provider can potentially attach.  There isn't any\n guarantee that invoking\n attachVirtualMachine\n on each descriptor in the list will succeed."}, {"method_name": "providers", "method_sig": "public static List<AttachProvider> providers()", "description": "Returns a list of the installed attach providers.\n\n  An AttachProvider is installed on the platform if:\n\n \nIt is installed in a JAR file that is visible to the defining\n   class loader of the AttachProvider type (usually, but not required\n   to be, the system\n   class loader).\nThe JAR file contains a provider configuration named\n   com.sun.tools.attach.spi.AttachProvider in the resource directory\n   META-INF/services.\nThe provider configuration file lists the full-qualified class\n   name of the AttachProvider implementation.\n\n The format of the provider configuration file is one fully-qualified\n class name per line. Space and tab characters surrounding each class name,\n as well as blank lines are ignored. The comment character is\n  '#' (0x23), and on each line all characters following\n the first comment character are ignored. The file must be encoded in\n UTF-8.\n\n  AttachProvider implementations are loaded and instantiated\n (using the zero-arg constructor) at the first invocation of this method.\n The list returned by the first invocation of this method is the list\n of providers. Subsequent invocations of this method return a list of the same\n providers. The list is unmodifiable."}]}