{"name": "Interface LinkRequest", "module": "jdk.dynalink", "package": "jdk.dynalink.linker", "text": "Represents a request to link a particular invocation at a particular call\n site. Instances of these requests will be constructed and passed to all\n GuardingDynamicLinker objects managed by the DynamicLinker\n that is trying to link the call site.", "codes": ["public interface LinkRequest"], "fields": [], "methods": [{"method_name": "getCallSiteDescriptor", "method_sig": "CallSiteDescriptor getCallSiteDescriptor()", "description": "Returns the call site descriptor for the call site being linked."}, {"method_name": "getArguments", "method_sig": "Object[] getArguments()", "description": "Returns the arguments for the invocation being linked. The returned array\n must be a clone; modifications to it must not affect the arguments in\n this request."}, {"method_name": "getReceiver", "method_sig": "Object getReceiver()", "description": "Returns the first argument for the invocation being linked; this is\n typically the receiver object. This is a shorthand for\n getArguments()[0] that also avoids the cloning of the arguments\n array."}, {"method_name": "isCallSiteUnstable", "method_sig": "boolean isCallSiteUnstable()", "description": "Returns true if the call site is considered unstable, that is, it has been relinked more times than was\n specified in DynamicLinkerFactory.setUnstableRelinkThreshold(int). Linkers should use this as a\n hint to prefer producing linkage that is more stable (its guard fails less frequently), even if that assumption\n causes a less effective version of an operation to be linked. This is just a hint, though, and linkers are\n allowed to ignore this property."}, {"method_name": "replaceArguments", "method_sig": "LinkRequest replaceArguments (CallSiteDescriptor callSiteDescriptor,\n                             Object... arguments)", "description": "Returns a request identical to this one with call site descriptor and arguments replaced with the ones specified."}]}