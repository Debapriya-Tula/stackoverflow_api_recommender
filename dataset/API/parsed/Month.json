{"name": "Enum Month", "module": "java.base", "package": "java.time", "text": "A month-of-year, such as 'July'.\n \nMonth is an enum representing the 12 months of the year -\n January, February, March, April, May, June, July, August, September, October,\n November and December.\n \n In addition to the textual enum name, each month-of-year has an int value.\n The int value follows normal usage and the ISO-8601 standard,\n from 1 (January) to 12 (December). It is recommended that applications use the enum\n rather than the int value to ensure code clarity.\n \nDo not use ordinal() to obtain the numeric representation of Month.\n Use getValue() instead.\n\n This enum represents a common concept that is found in many calendar systems.\n As such, this enum may be used by any calendar system that has the month-of-year\n concept defined exactly equivalent to the ISO-8601 calendar system.", "codes": ["public enum Month\nextends Enum<Month>\nimplements TemporalAccessor, TemporalAdjuster"], "fields": [], "methods": [{"method_name": "values", "method_sig": "public static Month[] values()", "description": "Returns an array containing the constants of this enum type, in\nthe order they are declared. This method may be used to iterate\nover the constants as follows:\n\nfor (Month c : Month.values())\n\u00a0   System.out.println(c);\n"}, {"method_name": "valueOf", "method_sig": "public static Month valueOf (String name)", "description": "Returns the enum constant of this type with the specified name.\nThe string must match exactly an identifier used to declare an\nenum constant in this type.  (Extraneous whitespace characters are \nnot permitted.)"}, {"method_name": "of", "method_sig": "public static Month of (int month)", "description": "Obtains an instance of Month from an int value.\n \nMonth is an enum representing the 12 months of the year.\n This factory allows the enum to be obtained from the int value.\n The int value follows the ISO-8601 standard, from 1 (January) to 12 (December)."}, {"method_name": "from", "method_sig": "public static Month from (TemporalAccessor temporal)", "description": "Obtains an instance of Month from a temporal object.\n \n This obtains a month based on the specified temporal.\n A TemporalAccessor represents an arbitrary set of date and time information,\n which this factory converts to an instance of Month.\n \n The conversion extracts the MONTH_OF_YEAR field.\n The extraction is only permitted if the temporal object has an ISO\n chronology, or can be converted to a LocalDate.\n \n This method matches the signature of the functional interface TemporalQuery\n allowing it to be used as a query via method reference, Month::from."}, {"method_name": "getValue", "method_sig": "public int getValue()", "description": "Gets the month-of-year int value.\n \n The values are numbered following the ISO-8601 standard,\n from 1 (January) to 12 (December)."}, {"method_name": "getDisplayName", "method_sig": "public String getDisplayName (TextStyle style,\n                             Locale locale)", "description": "Gets the textual representation, such as 'Jan' or 'December'.\n \n This returns the textual name used to identify the month-of-year,\n suitable for presentation to the user.\n The parameters control the style of the returned text and the locale.\n \n If no textual mapping is found then the numeric value is returned."}, {"method_name": "isSupported", "method_sig": "public boolean isSupported (TemporalField field)", "description": "Checks if the specified field is supported.\n \n This checks if this month-of-year can be queried for the specified field.\n If false, then calling the range and\n get methods will throw an exception.\n \n If the field is MONTH_OF_YEAR then\n this method returns true.\n All other ChronoField instances will return false.\n \n If the field is not a ChronoField, then the result of this method\n is obtained by invoking TemporalField.isSupportedBy(TemporalAccessor)\n passing this as the argument.\n Whether the field is supported is determined by the field."}, {"method_name": "range", "method_sig": "public ValueRange range (TemporalField field)", "description": "Gets the range of valid values for the specified field.\n \n The range object expresses the minimum and maximum valid values for a field.\n This month is used to enhance the accuracy of the returned range.\n If it is not possible to return the range, because the field is not supported\n or for some other reason, an exception is thrown.\n \n If the field is MONTH_OF_YEAR then the\n range of the month-of-year, from 1 to 12, will be returned.\n All other ChronoField instances will throw an UnsupportedTemporalTypeException.\n \n If the field is not a ChronoField, then the result of this method\n is obtained by invoking TemporalField.rangeRefinedBy(TemporalAccessor)\n passing this as the argument.\n Whether the range can be obtained is determined by the field."}, {"method_name": "get", "method_sig": "public int get (TemporalField field)", "description": "Gets the value of the specified field from this month-of-year as an int.\n \n This queries this month for the value of the specified field.\n The returned value will always be within the valid range of values for the field.\n If it is not possible to return the value, because the field is not supported\n or for some other reason, an exception is thrown.\n \n If the field is MONTH_OF_YEAR then the\n value of the month-of-year, from 1 to 12, will be returned.\n All other ChronoField instances will throw an UnsupportedTemporalTypeException.\n \n If the field is not a ChronoField, then the result of this method\n is obtained by invoking TemporalField.getFrom(TemporalAccessor)\n passing this as the argument. Whether the value can be obtained,\n and what the value represents, is determined by the field."}, {"method_name": "getLong", "method_sig": "public long getLong (TemporalField field)", "description": "Gets the value of the specified field from this month-of-year as a long.\n \n This queries this month for the value of the specified field.\n If it is not possible to return the value, because the field is not supported\n or for some other reason, an exception is thrown.\n \n If the field is MONTH_OF_YEAR then the\n value of the month-of-year, from 1 to 12, will be returned.\n All other ChronoField instances will throw an UnsupportedTemporalTypeException.\n \n If the field is not a ChronoField, then the result of this method\n is obtained by invoking TemporalField.getFrom(TemporalAccessor)\n passing this as the argument. Whether the value can be obtained,\n and what the value represents, is determined by the field."}, {"method_name": "plus", "method_sig": "public Month plus (long months)", "description": "Returns the month-of-year that is the specified number of months after this one.\n \n The calculation rolls around the end of the year from December to January.\n The specified period may be negative.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "minus", "method_sig": "public Month minus (long months)", "description": "Returns the month-of-year that is the specified number of months before this one.\n \n The calculation rolls around the start of the year from January to December.\n The specified period may be negative.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "length", "method_sig": "public int length (boolean leapYear)", "description": "Gets the length of this month in days.\n \n This takes a flag to determine whether to return the length for a leap year or not.\n \n February has 28 days in a standard year and 29 days in a leap year.\n April, June, September and November have 30 days.\n All other months have 31 days."}, {"method_name": "minLength", "method_sig": "public int minLength()", "description": "Gets the minimum length of this month in days.\n \n February has a minimum length of 28 days.\n April, June, September and November have 30 days.\n All other months have 31 days."}, {"method_name": "maxLength", "method_sig": "public int maxLength()", "description": "Gets the maximum length of this month in days.\n \n February has a maximum length of 29 days.\n April, June, September and November have 30 days.\n All other months have 31 days."}, {"method_name": "firstDayOfYear", "method_sig": "public int firstDayOfYear (boolean leapYear)", "description": "Gets the day-of-year corresponding to the first day of this month.\n \n This returns the day-of-year that this month begins on, using the leap\n year flag to determine the length of February."}, {"method_name": "firstMonthOfQuarter", "method_sig": "public Month firstMonthOfQuarter()", "description": "Gets the month corresponding to the first month of this quarter.\n \n The year can be divided into four quarters.\n This method returns the first month of the quarter for the base month.\n January, February and March return January.\n April, May and June return April.\n July, August and September return July.\n October, November and December return October."}, {"method_name": "query", "method_sig": "public <R> R query (TemporalQuery<R> query)", "description": "Queries this month-of-year using the specified query.\n \n This queries this month-of-year using the specified query strategy object.\n The TemporalQuery object defines the logic to be used to\n obtain the result. Read the documentation of the query to understand\n what the result of this method will be.\n \n The result of this method is obtained by invoking the\n TemporalQuery.queryFrom(TemporalAccessor) method on the\n specified query passing this as the argument."}, {"method_name": "adjustInto", "method_sig": "public Temporal adjustInto (Temporal temporal)", "description": "Adjusts the specified temporal object to have this month-of-year.\n \n This returns a temporal object of the same observable type as the input\n with the month-of-year changed to be the same as this.\n \n The adjustment is equivalent to using Temporal.with(TemporalField, long)\n passing ChronoField.MONTH_OF_YEAR as the field.\n If the specified temporal object does not use the ISO calendar system then\n a DateTimeException is thrown.\n \n In most cases, it is clearer to reverse the calling pattern by using\n Temporal.with(TemporalAdjuster):\n \n   // these two lines are equivalent, but the second approach is recommended\n   temporal = thisMonth.adjustInto(temporal);\n   temporal = temporal.with(thisMonth);\n \n\n For example, given a date in May, the following are output:\n \n   dateInMay.with(JANUARY);    // four months earlier\n   dateInMay.with(APRIL);      // one months earlier\n   dateInMay.with(MAY);        // same date\n   dateInMay.with(JUNE);       // one month later\n   dateInMay.with(DECEMBER);   // seven months later\n \n\n This instance is immutable and unaffected by this method call."}]}