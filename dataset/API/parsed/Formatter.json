{"name": "Class Formatter", "module": "java.logging", "package": "java.util.logging", "text": "A Formatter provides support for formatting LogRecords.\n \n Typically each logging Handler will have a Formatter associated\n with it.  The Formatter takes a LogRecord and converts it to\n a string.\n \n Some formatters (such as the XMLFormatter) need to wrap head\n and tail strings around a set of formatted records. The getHeader\n and getTail methods can be used to obtain these strings.", "codes": ["public abstract class Formatter\nextends Object"], "fields": [], "methods": [{"method_name": "format", "method_sig": "public abstract String format (LogRecord record)", "description": "Format the given log record and return the formatted string.\n \n The resulting formatted String will normally include a\n localized and formatted version of the LogRecord's message field.\n It is recommended to use the formatMessage(java.util.logging.LogRecord)\n convenience method to localize and format the message field."}, {"method_name": "getHead", "method_sig": "public String getHead (Handler h)", "description": "Return the header string for a set of formatted records.\n \n This base class returns an empty string, but this may be\n overridden by subclasses."}, {"method_name": "getTail", "method_sig": "public String getTail (Handler h)", "description": "Return the tail string for a set of formatted records.\n \n This base class returns an empty string, but this may be\n overridden by subclasses."}, {"method_name": "formatMessage", "method_sig": "public String formatMessage (LogRecord record)", "description": "Localize and format the message string from a log record.  This\n method is provided as a convenience for Formatter subclasses to\n use when they are performing formatting.\n \n The message string is first localized to a format string using\n the record's ResourceBundle.  (If there is no ResourceBundle,\n or if the message key is not found, then the key is used as the\n format string.)  The format String uses java.text style\n formatting.\n \nIf there are no parameters, no formatter is used.\n Otherwise, if the string contains \"{<digit>\"\n     where <digit> is in [0-9],\n     java.text.MessageFormat is used to format the string.\n Otherwise no formatting is performed.\n "}]}