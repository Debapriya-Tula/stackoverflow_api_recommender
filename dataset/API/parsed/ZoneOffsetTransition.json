{"name": "Class ZoneOffsetTransition", "module": "java.base", "package": "java.time.zone", "text": "A transition between two offsets caused by a discontinuity in the local time-line.\n \n A transition between two offsets is normally the result of a daylight savings cutover.\n The discontinuity is normally a gap in spring and an overlap in autumn.\n ZoneOffsetTransition models the transition between the two offsets.\n \n Gaps occur where there are local date-times that simply do not exist.\n An example would be when the offset changes from +03:00 to +04:00.\n This might be described as 'the clocks will move forward one hour tonight at 1am'.\n \n Overlaps occur where there are local date-times that exist twice.\n An example would be when the offset changes from +04:00 to +03:00.\n This might be described as 'the clocks will move back one hour tonight at 2am'.", "codes": ["public final class ZoneOffsetTransition\nextends Object\nimplements Comparable<ZoneOffsetTransition>, Serializable"], "fields": [], "methods": [{"method_name": "of", "method_sig": "public static ZoneOffsetTransition of (LocalDateTime transition,\n                                      ZoneOffset offsetBefore,\n                                      ZoneOffset offsetAfter)", "description": "Obtains an instance defining a transition between two offsets.\n \n Applications should normally obtain an instance from ZoneRules.\n This factory is only intended for use when creating ZoneRules."}, {"method_name": "getInstant", "method_sig": "public Instant getInstant()", "description": "Gets the transition instant.\n \n This is the instant of the discontinuity, which is defined as the first\n instant that the 'after' offset applies.\n \n The methods getInstant(), getDateTimeBefore() and getDateTimeAfter()\n all represent the same instant."}, {"method_name": "toEpochSecond", "method_sig": "public long toEpochSecond()", "description": "Gets the transition instant as an epoch second."}, {"method_name": "getDateTimeBefore", "method_sig": "public LocalDateTime getDateTimeBefore()", "description": "Gets the local transition date-time, as would be expressed with the 'before' offset.\n \n This is the date-time where the discontinuity begins expressed with the 'before' offset.\n At this instant, the 'after' offset is actually used, therefore the combination of this\n date-time and the 'before' offset will never occur.\n \n The combination of the 'before' date-time and offset represents the same instant\n as the 'after' date-time and offset."}, {"method_name": "getDateTimeAfter", "method_sig": "public LocalDateTime getDateTimeAfter()", "description": "Gets the local transition date-time, as would be expressed with the 'after' offset.\n \n This is the first date-time after the discontinuity, when the new offset applies.\n \n The combination of the 'before' date-time and offset represents the same instant\n as the 'after' date-time and offset."}, {"method_name": "getOffsetBefore", "method_sig": "public ZoneOffset getOffsetBefore()", "description": "Gets the offset before the transition.\n \n This is the offset in use before the instant of the transition."}, {"method_name": "getOffsetAfter", "method_sig": "public ZoneOffset getOffsetAfter()", "description": "Gets the offset after the transition.\n \n This is the offset in use on and after the instant of the transition."}, {"method_name": "getDuration", "method_sig": "public Duration getDuration()", "description": "Gets the duration of the transition.\n \n In most cases, the transition duration is one hour, however this is not always the case.\n The duration will be positive for a gap and negative for an overlap.\n Time-zones are second-based, so the nanosecond part of the duration will be zero."}, {"method_name": "isGap", "method_sig": "public boolean isGap()", "description": "Does this transition represent a gap in the local time-line.\n \n Gaps occur where there are local date-times that simply do not exist.\n An example would be when the offset changes from +01:00 to +02:00.\n This might be described as 'the clocks will move forward one hour tonight at 1am'."}, {"method_name": "isOverlap", "method_sig": "public boolean isOverlap()", "description": "Does this transition represent an overlap in the local time-line.\n \n Overlaps occur where there are local date-times that exist twice.\n An example would be when the offset changes from +02:00 to +01:00.\n This might be described as 'the clocks will move back one hour tonight at 2am'."}, {"method_name": "isValidOffset", "method_sig": "public boolean isValidOffset (ZoneOffset offset)", "description": "Checks if the specified offset is valid during this transition.\n \n This checks to see if the given offset will be valid at some point in the transition.\n A gap will always return false.\n An overlap will return true if the offset is either the before or after offset."}, {"method_name": "compareTo", "method_sig": "public int compareTo (ZoneOffsetTransition transition)", "description": "Compares this transition to another based on the transition instant.\n \n This compares the instants of each transition.\n The offsets are ignored, making this order inconsistent with equals."}, {"method_name": "equals", "method_sig": "public boolean equals (Object other)", "description": "Checks if this object equals another.\n \n The entire state of the object is compared."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Returns a suitable hash code."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a string describing this object."}]}