{"name": "Class Size2DSyntax", "module": "java.desktop", "package": "javax.print.attribute", "text": "Class Size2DSyntax is an abstract base class providing the common\n implementation of all attributes denoting a size in two dimensions.\n \n A two-dimensional size attribute's value consists of two items, the X\n dimension and the Y dimension. A two-dimensional size attribute may\n be constructed by supplying the two values and indicating the units in which\n the values are measured. Methods are provided to return a two-dimensional\n size attribute's values, indicating the units in which the values are to be\n returned. The two most common size units are inches (in) and millimeters\n (mm), and exported constants INCH and MM are\n provided for indicating those units.\n \n Once constructed, a two-dimensional size attribute's value is immutable.\n \nDesign\n\n A two-dimensional size attribute's X and Y dimension values\n are stored internally as integers in units of micrometers (\u00b5m), where 1\n micrometer = 10-6 meter = 1/1000 millimeter = 1/25400 inch. This\n permits dimensions to be represented exactly to a precision of 1/1000 mm (= 1\n \u00b5m) or 1/100 inch (= 254 \u00b5m). If fractional inches are expressed in\n negative powers of two, this permits dimensions to be represented exactly to\n a precision of 1/8 inch (= 3175 \u00b5m) but not 1/16 inch (because 1/16 inch\n does not equal an integral number of \u00b5m).\n \n Storing the dimensions internally in common units of \u00b5m lets two size\n attributes be compared without regard to the units in which they were\n created; for example, 8.5 in will compare equal to 215.9 mm, as they both are\n stored as 215900 \u00b5m. For example, a lookup service can match resolution\n attributes based on equality of their serialized representations regardless\n of the units in which they were created. Using integers for internal storage\n allows precise equality comparisons to be done, which would not be guaranteed\n if an internal floating point representation were used. Note that if you're\n looking for U.S. letter sized media in metric units, you have to\n search for a media size of 215.9 x 279.4 mm; rounding off to an integral\n 216 x 279 mm will not match.\n \n The exported constant INCH is actually the conversion factor by\n which to multiply a value in inches to get the value in \u00b5m. Likewise,\n the exported constant MM is the conversion factor by which to\n multiply a value in mm to get the value in \u00b5m. A client can specify a\n resolution value in units other than inches or mm by supplying its own\n conversion factor. However, since the internal units of \u00b5m was chosen\n with supporting only the external units of inch and mm in mind, there is no\n guarantee that the conversion factor for the client's units will be an exact\n integer. If the conversion factor isn't an exact integer, resolution values\n in the client's units won't be stored precisely.", "codes": ["public abstract class Size2DSyntax\nextends Object\nimplements Serializable, Cloneable"], "fields": [{"field_name": "INCH", "field_sig": "public static final\u00a0int INCH", "description": "Value to indicate units of inches (in). It is actually the conversion\n factor by which to multiply inches to yield \u00b5m (25400)."}, {"field_name": "MM", "field_sig": "public static final\u00a0int MM", "description": "Value to indicate units of millimeters (mm). It is actually the\n conversion factor by which to multiply mm to yield \u00b5m (1000)."}], "methods": [{"method_name": "getSize", "method_sig": "public float[] getSize (int units)", "description": "Get this two-dimensional size attribute's dimensions in the given units\n as floating-point values."}, {"method_name": "getX", "method_sig": "public float getX (int units)", "description": "Returns this two-dimensional size attribute's X dimension in the\n given units as a floating-point value."}, {"method_name": "getY", "method_sig": "public float getY (int units)", "description": "Returns this two-dimensional size attribute's Y dimension in the\n given units as a floating-point value."}, {"method_name": "toString", "method_sig": "public String toString (int units,\n                       String unitsName)", "description": "Returns a string version of this two-dimensional size attribute in the\n given units. The string takes the form \"XxY\nU\", where X is the X dimension, Y is\n the Y dimension, and U is the units name. The values are\n displayed in floating point."}, {"method_name": "equals", "method_sig": "public boolean equals (Object object)", "description": "Returns whether this two-dimensional size attribute is equivalent to the\n passed in object. To be equivalent, all of the following conditions must\n be true:\n \nobject is not null.\n   object is an instance of class Size2DSyntax\nThis attribute's X dimension is equal to object's\n   X dimension.\n   This attribute's Y dimension is equal to object's\n   Y dimension.\n "}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Returns a hash code value for this two-dimensional size attribute."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a string version of this two-dimensional size attribute. The\n string takes the form \"XxY um\", where X\n is the X dimension and Y is the Y dimension. The\n values are reported in the internal units of micrometers."}, {"method_name": "getXMicrometers", "method_sig": "protected int getXMicrometers()", "description": "Returns this two-dimensional size attribute's X dimension in\n units of micrometers (\u00b5m). (For use in a subclass.)"}, {"method_name": "getYMicrometers", "method_sig": "protected int getYMicrometers()", "description": "Returns this two-dimensional size attribute's Y dimension in\n units of micrometers (\u00b5m). (For use in a subclass.)"}]}