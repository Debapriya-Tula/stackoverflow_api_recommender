{"name": "Class SortingFocusTraversalPolicy", "module": "java.desktop", "package": "javax.swing", "text": "A FocusTraversalPolicy that determines traversal order by sorting the\n Components of a focus traversal cycle based on a given Comparator. Portions\n of the Component hierarchy that are not visible and displayable will not be\n included.\n \n By default, SortingFocusTraversalPolicy implicitly transfers focus down-\n cycle. That is, during normal focus traversal, the Component\n traversed after a focus cycle root will be the focus-cycle-root's default\n Component to focus. This behavior can be disabled using the\n setImplicitDownCycleTraversal method.\n \n By default, methods of this class with return a Component only if it is\n visible, displayable, enabled, and focusable. Subclasses can modify this\n behavior by overriding the accept method.\n \n This policy takes into account focus traversal\n policy providers.  When searching for first/last/next/previous Component,\n if a focus traversal policy provider is encountered, its focus traversal\n policy is used to perform the search operation.", "codes": ["public class SortingFocusTraversalPolicy\nextends InternalFrameFocusTraversalPolicy"], "fields": [], "methods": [{"method_name": "getComponentAfter", "method_sig": "public Component getComponentAfter (Container aContainer,\n                                   Component aComponent)", "description": "Returns the Component that should receive the focus after aComponent.\n aContainer must be a focus cycle root of aComponent or a focus traversal policy provider.\n \n By default, SortingFocusTraversalPolicy implicitly transfers focus down-\n cycle. That is, during normal focus traversal, the Component\n traversed after a focus cycle root will be the focus-cycle-root's\n default Component to focus. This behavior can be disabled using the\n setImplicitDownCycleTraversal method.\n \n If aContainer is focus\n traversal policy provider, the focus is always transferred down-cycle."}, {"method_name": "getComponentBefore", "method_sig": "public Component getComponentBefore (Container aContainer,\n                                    Component aComponent)", "description": "Returns the Component that should receive the focus before aComponent.\n aContainer must be a focus cycle root of aComponent or a focus traversal policy provider.\n \n By default, SortingFocusTraversalPolicy implicitly transfers focus down-\n cycle. That is, during normal focus traversal, the Component\n traversed after a focus cycle root will be the focus-cycle-root's\n default Component to focus. This behavior can be disabled using the\n setImplicitDownCycleTraversal method.\n \n If aContainer is focus\n traversal policy provider, the focus is always transferred down-cycle."}, {"method_name": "getFirstComponent", "method_sig": "public Component getFirstComponent (Container aContainer)", "description": "Returns the first Component in the traversal cycle. This method is used\n to determine the next Component to focus when traversal wraps in the\n forward direction."}, {"method_name": "getLastComponent", "method_sig": "public Component getLastComponent (Container aContainer)", "description": "Returns the last Component in the traversal cycle. This method is used\n to determine the next Component to focus when traversal wraps in the\n reverse direction."}, {"method_name": "getDefaultComponent", "method_sig": "public Component getDefaultComponent (Container aContainer)", "description": "Returns the default Component to focus. This Component will be the first\n to receive focus when traversing down into a new focus traversal cycle\n rooted at aContainer. The default implementation of this method\n returns the same Component as getFirstComponent."}, {"method_name": "setImplicitDownCycleTraversal", "method_sig": "public void setImplicitDownCycleTraversal (boolean implicitDownCycleTraversal)", "description": "Sets whether this SortingFocusTraversalPolicy transfers focus down-cycle\n implicitly. If true, during normal focus traversal,\n the Component traversed after a focus cycle root will be the focus-\n cycle-root's default Component to focus. If false, the\n next Component in the focus traversal cycle rooted at the specified\n focus cycle root will be traversed instead. The default value for this\n property is true."}, {"method_name": "getImplicitDownCycleTraversal", "method_sig": "public boolean getImplicitDownCycleTraversal()", "description": "Returns whether this SortingFocusTraversalPolicy transfers focus down-\n cycle implicitly. If true, during normal focus\n traversal, the Component traversed after a focus cycle root will be the\n focus-cycle-root's default Component to focus. If false,\n the next Component in the focus traversal cycle rooted at the specified\n focus cycle root will be traversed instead."}, {"method_name": "setComparator", "method_sig": "protected void setComparator (Comparator<? super Component> comparator)", "description": "Sets the Comparator which will be used to sort the Components in a\n focus traversal cycle."}, {"method_name": "getComparator", "method_sig": "protected Comparator<? super Component> getComparator()", "description": "Returns the Comparator which will be used to sort the Components in a\n focus traversal cycle."}, {"method_name": "accept", "method_sig": "protected boolean accept (Component aComponent)", "description": "Determines whether a Component is an acceptable choice as the new\n focus owner. By default, this method will accept a Component if and\n only if it is visible, displayable, enabled, and focusable."}]}