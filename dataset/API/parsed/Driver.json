{"name": "Interface Driver", "module": "java.sql", "package": "java.sql", "text": "The interface that every driver class must implement.\n The Java SQL framework allows for multiple database drivers.\n\n Each driver should supply a class that implements\n the Driver interface.\n\n The DriverManager will try to load as many drivers as it can\n find and then for any given connection request, it will ask each\n driver in turn to try to connect to the target URL.\n\n It is strongly recommended that each Driver class should be\n small and standalone so that the Driver class can be loaded and\n queried without bringing in vast quantities of supporting code.\n\n When a Driver class is loaded, it should create an instance of\n itself and register it with the DriverManager. This means that a\n user can load and register a driver by calling:\n \nClass.forName(\"foo.bah.Driver\")\n\n A JDBC driver may create a DriverAction implementation in order\n to receive notifications when DriverManager.deregisterDriver(java.sql.Driver) has\n been called.", "codes": ["public interface Driver"], "fields": [], "methods": [{"method_name": "connect", "method_sig": "Connection connect (String url,\n                   Properties info)\n            throws SQLException", "description": "Attempts to make a database connection to the given URL.\n The driver should return \"null\" if it realizes it is the wrong kind\n of driver to connect to the given URL.  This will be common, as when\n the JDBC driver manager is asked to connect to a given URL it passes\n the URL to each loaded driver in turn.\n\n The driver should throw an SQLException if it is the right\n driver to connect to the given URL but has trouble connecting to\n the database.\n\n The Properties argument can be used to pass\n arbitrary string tag/value pairs as connection arguments.\n Normally at least \"user\" and \"password\" properties should be\n included in the Properties object.\n \nNote: If a property is specified as part of the url and\n is also specified in the Properties object, it is\n implementation-defined as to which value will take precedence. For\n maximum portability, an application should only specify a property once."}, {"method_name": "acceptsURL", "method_sig": "boolean acceptsURL (String url)\n            throws SQLException", "description": "Retrieves whether the driver thinks that it can open a connection\n to the given URL.  Typically drivers will return true if they\n understand the sub-protocol specified in the URL and false if\n they do not."}, {"method_name": "getPropertyInfo", "method_sig": "DriverPropertyInfo[] getPropertyInfo (String url,\n                                     Properties info)\n                              throws SQLException", "description": "Gets information about the possible properties for this driver.\n \n The getPropertyInfo method is intended to allow a generic\n GUI tool to discover what properties it should prompt\n a human for in order to get\n enough information to connect to a database.  Note that depending on\n the values the human has supplied so far, additional values may become\n necessary, so it may be necessary to iterate though several calls\n to the getPropertyInfo method."}, {"method_name": "getMajorVersion", "method_sig": "int getMajorVersion()", "description": "Retrieves the driver's major version number. Initially this should be 1."}, {"method_name": "getMinorVersion", "method_sig": "int getMinorVersion()", "description": "Gets the driver's minor version number. Initially this should be 0."}, {"method_name": "jdbcCompliant", "method_sig": "boolean jdbcCompliant()", "description": "Reports whether this driver is a genuine JDBC\n Compliant\u2122 driver.\n A driver may only report true here if it passes the JDBC\n compliance tests; otherwise it is required to return false.\n \n JDBC compliance requires full support for the JDBC API and full support\n for SQL 92 Entry Level.  It is expected that JDBC compliant drivers will\n be available for all the major commercial databases.\n \n This method is not intended to encourage the development of non-JDBC\n compliant drivers, but is a recognition of the fact that some vendors\n are interested in using the JDBC API and framework for lightweight\n databases that do not support full database functionality, or for\n special databases such as document information retrieval where a SQL\n implementation may not be feasible."}, {"method_name": "getParentLogger", "method_sig": "Logger getParentLogger()\n                throws SQLFeatureNotSupportedException", "description": "Return the parent Logger of all the Loggers used by this driver. This\n should be the Logger farthest from the root Logger that is\n still an ancestor of all of the Loggers used by this driver. Configuring\n this Logger will affect all of the log messages generated by the driver.\n In the worst case, this may be the root Logger."}]}