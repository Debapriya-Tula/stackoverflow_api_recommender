{"name": "Class Duration", "module": "java.xml", "package": "javax.xml.datatype", "text": "Immutable representation of a time span as defined in\n the W3C XML Schema 1.0 specification.\n\n A Duration object represents a period of Gregorian time,\n which consists of six fields (years, months, days, hours,\n minutes, and seconds) plus a sign (+/-) field.\n\n The first five fields have non-negative (>=0) integers or null\n (which represents that the field is not set),\n and the seconds field has a non-negative decimal or null.\n A negative sign indicates a negative duration.\n\n This class provides a number of methods that make it easy\n to use for the duration datatype of XML Schema 1.0 with\n the errata.\n\n Order relationship\nDuration objects only have partial order, where two values A and B\n maybe either:\n \nA<B (A is shorter than B)\n  A>B (A is longer than B)\n  A==B   (A and B are of the same duration)\n  A<>B (Comparison between A and B is indeterminate)\n \nFor example, 30 days cannot be meaningfully compared to one month.\n The compare(Duration duration) method implements this\n relationship.\n\n See the isLongerThan(Duration) method for details about\n the order relationship among Duration objects.\n\n Operations over Duration\nThis class provides a set of basic arithmetic operations, such\n as addition, subtraction and multiplication.\n Because durations don't have total order, an operation could\n fail for some combinations of operations. For example, you cannot\n subtract 15 days from 1 month. See the javadoc of those methods\n for detailed conditions where this could happen.\n\n Also, division of a duration by a number is not provided because\n the Duration class can only deal with finite precision\n decimal numbers. For example, one cannot represent 1 sec divided by 3.\n\n However, you could substitute a division by 3 with multiplying\n by numbers such as 0.3 or 0.333.\n\n Range of allowed values\n\n Because some operations of Duration rely on Calendar\n even though Duration can hold very large or very small values,\n some of the methods may not work correctly on such Durations.\n The impacted methods document their dependency on Calendar.", "codes": ["public abstract class Duration\nextends Object"], "fields": [], "methods": [{"method_name": "getXMLSchemaType", "method_sig": "public QName getXMLSchemaType()", "description": "Return the name of the XML Schema date/time type that this instance\n maps to. Type is computed based on fields that are set,\n i.e. isSet(DatatypeConstants.Field field) == true.\n\n \nRequired fields for XML Schema 1.0 Date/Time Datatypes.\n(timezone is optional for all date/time datatypes)\n\n\nDatatype\nyear\nmonth\nday\nhour\nminute\nsecond\n\n\n\n\nDatatypeConstants.DURATION\nX\nX\nX\nX\nX\nX\n\n\nDatatypeConstants.DURATION_DAYTIME\n\n\nX\nX\nX\nX\n\n\nDatatypeConstants.DURATION_YEARMONTH\nX\nX\n\n\n\n\n\n\n"}, {"method_name": "getSign", "method_sig": "public abstract int getSign()", "description": "Returns the sign of this duration in -1,0, or 1."}, {"method_name": "getYears", "method_sig": "public int getYears()", "description": "Get the years value of this Duration as an int or 0 if not present.\n\n getYears() is a convenience method for\n getField(DatatypeConstants.YEARS).\n\n As the return value is an int, an incorrect value will be returned for Durations\n with years that go beyond the range of an int.\n Use getField(DatatypeConstants.YEARS) to avoid possible loss of precision."}, {"method_name": "getMonths", "method_sig": "public int getMonths()", "description": "Obtains the value of the MONTHS field as an integer value,\n or 0 if not present.\n\n This method works just like getYears() except\n that this method works on the MONTHS field."}, {"method_name": "getDays", "method_sig": "public int getDays()", "description": "Obtains the value of the DAYS field as an integer value,\n or 0 if not present.\n\n This method works just like getYears() except\n that this method works on the DAYS field."}, {"method_name": "getHours", "method_sig": "public int getHours()", "description": "Obtains the value of the HOURS field as an integer value,\n or 0 if not present.\n\n This method works just like getYears() except\n that this method works on the HOURS field."}, {"method_name": "getMinutes", "method_sig": "public int getMinutes()", "description": "Obtains the value of the MINUTES field as an integer value,\n or 0 if not present.\n\n This method works just like getYears() except\n that this method works on the MINUTES field."}, {"method_name": "getSeconds", "method_sig": "public int getSeconds()", "description": "Obtains the value of the SECONDS field as an integer value,\n or 0 if not present.\n\n This method works just like getYears() except\n that this method works on the SECONDS field."}, {"method_name": "getTimeInMillis", "method_sig": "public long getTimeInMillis (Calendar startInstant)", "description": "Returns the length of the duration in milli-seconds.\n\n If the seconds field carries more digits than milli-second order,\n those will be simply discarded (or in other words, rounded to zero.)\n For example, for any Calendar value x,\n \n new Duration(\"PT10.00099S\").getTimeInMills(x) == 10000\n new Duration(\"-PT10.00099S\").getTimeInMills(x) == -10000\n \n\n Note that this method uses the addTo(Calendar) method,\n which may work incorrectly with Duration objects with\n very large values in its fields. See the addTo(Calendar)\n method for details."}, {"method_name": "getTimeInMillis", "method_sig": "public long getTimeInMillis (Date startInstant)", "description": "Returns the length of the duration in milli-seconds.\n\n If the seconds field carries more digits than milli-second order,\n those will be simply discarded (or in other words, rounded to zero.)\n For example, for any Date value x,\n \n new Duration(\"PT10.00099S\").getTimeInMills(x) == 10000\n new Duration(\"-PT10.00099S\").getTimeInMills(x) == -10000\n \n\n Note that this method uses the addTo(Date) method,\n which may work incorrectly with Duration objects with\n very large values in its fields. See the addTo(Date)\n method for details."}, {"method_name": "getField", "method_sig": "public abstract Number getField (DatatypeConstants.Field field)", "description": "Gets the value of a field.\n\n Fields of a duration object may contain arbitrary large value.\n Therefore this method is designed to return a Number object.\n\n In case of YEARS, MONTHS, DAYS, HOURS, and MINUTES, the returned\n number will be a non-negative integer. In case of seconds,\n the returned number may be a non-negative decimal value."}, {"method_name": "isSet", "method_sig": "public abstract boolean isSet (DatatypeConstants.Field field)", "description": "Checks if a field is set.\n\n A field of a duration object may or may not be present.\n This method can be used to test if a field is present."}, {"method_name": "add", "method_sig": "public abstract Duration add (Duration rhs)", "description": "Computes a new duration whose value is this+rhs.\n\n For example,\n \n \"1 day\" + \"-3 days\" = \"-2 days\"\n \"1 year\" + \"1 day\" = \"1 year and 1 day\"\n \"-(1 hour,50 minutes)\" + \"-20 minutes\" = \"-(1 hours,70 minutes)\"\n \"15 hours\" + \"-3 days\" = \"-(2 days,9 hours)\"\n \"1 year\" + \"-1 day\" = IllegalStateException\n \nSince there's no way to meaningfully subtract 1 day from 1 month,\n there are cases where the operation fails in\n IllegalStateException.\n\n \n Formally, the computation is defined as follows.\n \n Firstly, we can assume that two Durations to be added\n are both positive without losing generality (i.e.,\n (-X)+Y=Y-X, X+(-Y)=X-Y,\n (-X)+(-Y)=-(X+Y))\n\n \n Addition of two positive Durations are simply defined as\n field by field addition where missing fields are treated as 0.\n \n A field of the resulting Duration will be unset if and\n only if respective fields of two input Durations are unset.\n \n Note that lhs.add(rhs) will be always successful if\n lhs.signum()*rhs.signum()!=-1 or both of them are\n normalized."}, {"method_name": "addTo", "method_sig": "public abstract void addTo (Calendar calendar)", "description": "Adds this duration to a Calendar object.\n\n \n Calls Calendar.add(int,int) in the\n order of YEARS, MONTHS, DAYS, HOURS, MINUTES, SECONDS, and MILLISECONDS\n if those fields are present. Because the Calendar class\n uses int to hold values, there are cases where this method\n won't work correctly (for example if values of fields\n exceed the range of int.)\n\n \n Also, since this duration class is a Gregorian duration, this\n method will not work correctly if the given Calendar\n object is based on some other calendar systems.\n\n \n Any fractional parts of this Duration object\n beyond milliseconds will be simply ignored. For example, if\n this duration is \"P1.23456S\", then 1 is added to SECONDS,\n 234 is added to MILLISECONDS, and the rest will be unused.\n\n \n Note that because Calendar.add(int, int) is using\n int, Duration with values beyond the\n range of int in its fields\n will cause overflow/underflow to the given Calendar.\n XMLGregorianCalendar.add(Duration) provides the same\n basic operation as this method while avoiding\n the overflow/underflow issues."}, {"method_name": "addTo", "method_sig": "public void addTo (Date date)", "description": "Adds this duration to a Date object.\n\n \n The given date is first converted into\n a GregorianCalendar, then the duration\n is added exactly like the addTo(Calendar) method.\n\n \n The updated time instant is then converted back into a\n Date object and used to update the given Date object.\n\n \n This somewhat redundant computation is necessary to unambiguously\n determine the duration of months and years."}, {"method_name": "subtract", "method_sig": "public Duration subtract (Duration rhs)", "description": "Computes a new duration whose value is this-rhs.\n\n For example:\n \n \"1 day\" - \"-3 days\" = \"4 days\"\n \"1 year\" - \"1 day\" = IllegalStateException\n \"-(1 hour,50 minutes)\" - \"-20 minutes\" = \"-(1hours,30 minutes)\"\n \"15 hours\" - \"-3 days\" = \"3 days and 15 hours\"\n \"1 year\" - \"-1 day\" = \"1 year and 1 day\"\n \nSince there's no way to meaningfully subtract 1 day from 1 month,\n there are cases where the operation fails in IllegalStateException.\n\n Formally the computation is defined as follows.\n First, we can assume that two Durations are both positive\n without losing generality.  (i.e.,\n (-X)-Y=-(X+Y), X-(-Y)=X+Y,\n (-X)-(-Y)=-(X-Y))\n\n Then two durations are subtracted field by field.\n If the sign of any non-zero field F is different from\n the sign of the most significant field,\n 1 (if F is negative) or -1 (otherwise)\n will be borrowed from the next bigger unit of F.\n\n This process is repeated until all the non-zero fields have\n the same sign.\n\n If a borrow occurs in the days field (in other words, if\n the computation needs to borrow 1 or -1 month to compensate\n days), then the computation fails by throwing an\n IllegalStateException."}, {"method_name": "multiply", "method_sig": "public Duration multiply (int factor)", "description": "Computes a new duration whose value is factor times\n longer than the value of this duration.\n\n This method is provided for the convenience.\n It is functionally equivalent to the following code:\n \n multiply(new BigDecimal(String.valueOf(factor)))\n "}, {"method_name": "multiply", "method_sig": "public abstract Duration multiply (BigDecimal factor)", "description": "Computes a new duration whose value is factor times\n longer than the value of this duration.\n\n \n For example,\n \n \"P1M\" (1 month) * \"12\" = \"P12M\" (12 months)\n \"PT1M\" (1 min) * \"0.3\" = \"PT18S\" (18 seconds)\n \"P1M\" (1 month) * \"1.5\" = IllegalStateException\n \n\n Since the Duration class is immutable, this method\n doesn't change the value of this object. It simply computes\n a new Duration object and returns it.\n\n \n The operation will be performed field by field with the precision\n of BigDecimal. Since all the fields except seconds are\n restricted to hold integers,\n any fraction produced by the computation will be\n carried down toward the next lower unit. For example,\n if you multiply \"P1D\" (1 day) with \"0.5\", then it will be 0.5 day,\n which will be carried down to \"PT12H\" (12 hours).\n When fractions of month cannot be meaningfully carried down\n to days, or year to months, this will cause an\n IllegalStateException to be thrown.\n For example if you multiple one month by 0.5.\n\n \n To avoid IllegalStateException, use\n the normalizeWith(Calendar) method to remove the years\n and months fields."}, {"method_name": "negate", "method_sig": "public abstract Duration negate()", "description": "Returns a new Duration object whose\n value is -this.\n\n \n Since the Duration class is immutable, this method\n doesn't change the value of this object. It simply computes\n a new Duration object and returns it."}, {"method_name": "normalizeWith", "method_sig": "public abstract Duration normalizeWith (Calendar startTimeInstant)", "description": "Converts the years and months fields into the days field\n by using a specific time instant as the reference point.\n\n For example, duration of one month normalizes to 31 days\n given the start time instance \"July 8th 2003, 17:40:32\".\n\n Formally, the computation is done as follows:\n \nthe given Calendar object is cloned\nthe years, months and days fields will be added to the Calendar object\n      by using the Calendar.add(int,int) method\nthe difference between the two Calendars in computed in milliseconds and converted to days,\n     if a remainder occurs due to Daylight Savings Time, it is discarded\nthe computed days, along with the hours, minutes and seconds\n      fields of this duration object is used to construct a new\n      Duration object.\n\nNote that since the Calendar class uses int to\n hold the value of year and month, this method may produce\n an unexpected result if this duration object holds\n a very large value in the years or months fields."}, {"method_name": "compare", "method_sig": "public abstract int compare (Duration duration)", "description": "Partial order relation comparison with this Duration instance.\n\n Comparison result must be in accordance with\n W3C XML Schema 1.0 Part 2, Section 3.2.7.6.2,\n Order relation on duration.\n\n Return:\n \nDatatypeConstants.LESSER if this Duration is shorter than duration parameter\nDatatypeConstants.EQUAL if this Duration is equal to duration parameter\nDatatypeConstants.GREATER if this Duration is longer than duration parameter\nDatatypeConstants.INDETERMINATE if a conclusive partial order relation cannot be determined\n"}, {"method_name": "isLongerThan", "method_sig": "public boolean isLongerThan (Duration duration)", "description": "Checks if this duration object is strictly longer than\n another Duration object.\n\n Duration X is \"longer\" than Y if and only if X > Y\n as defined in the section 3.2.6.2 of the XML Schema 1.0\n specification.\n\n For example, \"P1D\" (one day) > \"PT12H\" (12 hours) and\n \"P2Y\" (two years) > \"P23M\" (23 months)."}, {"method_name": "isShorterThan", "method_sig": "public boolean isShorterThan (Duration duration)", "description": "Checks if this duration object is strictly shorter than\n another Duration object."}, {"method_name": "equals", "method_sig": "public boolean equals (Object duration)", "description": "Checks if this duration object has the same duration\n as another Duration object.\n\n For example, \"P1D\" (1 day) is equal to \"PT24H\" (24 hours).\n\n Duration X is equal to Y if and only if time instant\n t+X and t+Y are the same for all the test time instants\n specified in the section 3.2.6.2 of the XML Schema 1.0\n specification.\n\n Note that there are cases where two Durations are\n \"incomparable\" to each other, like one month and 30 days.\n For example,\n \n !new Duration(\"P1M\").isShorterThan(new Duration(\"P30D\"))\n !new Duration(\"P1M\").isLongerThan(new Duration(\"P30D\"))\n !new Duration(\"P1M\").equals(new Duration(\"P30D\"))\n "}, {"method_name": "hashCode", "method_sig": "public abstract int hashCode()", "description": "Returns a hash code consistent with the definition of the equals method."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a String representation of this Duration Object.\n\n The result is formatted according to the XML Schema 1.0 spec\n and can be always parsed back later into the\n equivalent Duration Object by DatatypeFactory.newDuration(String  lexicalRepresentation).\n\n Formally, the following holds for any Duration\nObject x:\n \n new Duration(x.toString()).equals(x)\n "}]}