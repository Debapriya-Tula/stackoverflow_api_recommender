{"name": "Enum ElementType", "module": "java.base", "package": "java.lang.annotation", "text": "The constants of this enumerated type provide a simple classification of the\n syntactic locations where annotations may appear in a Java program. These\n constants are used in Target\n meta-annotations to specify where it is legal to write annotations of a\n given type.\n\n The syntactic locations where annotations may appear are split into\n declaration contexts , where annotations apply to declarations, and\n type contexts , where annotations apply to types used in\n declarations and expressions.\n\n The constants ANNOTATION_TYPE, CONSTRUCTOR, FIELD, LOCAL_VARIABLE, METHOD, PACKAGE, MODULE, PARAMETER, TYPE, and TYPE_PARAMETER\n correspond to the declaration contexts in JLS 9.6.4.1.\n\n For example, an annotation whose type is meta-annotated with\n @Target(ElementType.FIELD) may only be written as a modifier for a\n field declaration.\n\n The constant TYPE_USE corresponds to the type contexts in JLS\n 4.11, as well as to two declaration contexts: type declarations (including\n annotation type declarations) and type parameter declarations.\n\n For example, an annotation whose type is meta-annotated with\n @Target(ElementType.TYPE_USE) may be written on the type of a field\n (or within the type of the field, if it is a nested, parameterized, or array\n type), and may also appear as a modifier for, say, a class declaration.\n\n The TYPE_USE constant includes type declarations and type\n parameter declarations as a convenience for designers of type checkers which\n give semantics to annotation types. For example, if the annotation type\n NonNull is meta-annotated with\n @Target(ElementType.TYPE_USE), then @NonNull\nclass C {...} could be treated by a type checker as indicating that\n all variables of class C are non-null, while still allowing\n variables of other classes to be non-null or not non-null based on whether\n @NonNull appears at the variable's declaration.", "codes": ["public enum ElementType\nextends Enum<ElementType>"], "fields": [], "methods": [{"method_name": "values", "method_sig": "public static ElementType[] values()", "description": "Returns an array containing the constants of this enum type, in\nthe order they are declared. This method may be used to iterate\nover the constants as follows:\n\nfor (ElementType c : ElementType.values())\n\u00a0   System.out.println(c);\n"}, {"method_name": "valueOf", "method_sig": "public static ElementType valueOf (String name)", "description": "Returns the enum constant of this type with the specified name.\nThe string must match exactly an identifier used to declare an\nenum constant in this type.  (Extraneous whitespace characters are \nnot permitted.)"}]}