{"name": "Class StreamPrintServiceFactory", "module": "java.desktop", "package": "javax.print", "text": "A StreamPrintServiceFactory is the factory for\n StreamPrintService instances, which can print to an output stream in\n a particular document format described as a mime type. A typical output\n document format may be Postscript(TM).\n \n This class is implemented by a service and located by the implementation\n using the ServiceLoader facility.\n \n Applications locate instances of this class by calling the\n lookupStreamPrintServiceFactories(DocFlavor, String) method.\n \n Applications can use a StreamPrintService obtained from a factory in\n place of a PrintService which represents a physical printer device.", "codes": ["public abstract class StreamPrintServiceFactory\nextends Object"], "fields": [], "methods": [{"method_name": "lookupStreamPrintServiceFactories", "method_sig": "public static StreamPrintServiceFactory[] lookupStreamPrintServiceFactories (DocFlavor flavor,\n                                                                            String outputMimeType)", "description": "Locates factories for print services that can be used with a print job to\n output a stream of data in the format specified by\n outputMimeType.\n \n The outputMimeType parameter describes the document type that you\n want to create, whereas the flavor parameter describes the format\n in which the input data will be provided by the application to the\n StreamPrintService.\n \n Although null is an acceptable value to use in the lookup of\n stream printing services, it's typical to search for a particular desired\n format, such as Postscript(TM)."}, {"method_name": "getOutputFormat", "method_sig": "public abstract String getOutputFormat()", "description": "Queries the factory for the document format that is emitted by printers\n obtained from this factory."}, {"method_name": "getSupportedDocFlavors", "method_sig": "public abstract DocFlavor[] getSupportedDocFlavors()", "description": "Queries the factory for the document flavors that can be accepted by\n printers obtained from this factory."}, {"method_name": "getPrintService", "method_sig": "public abstract StreamPrintService getPrintService (OutputStream out)", "description": "Returns a StreamPrintService that can print to the specified\n output stream. The output stream is created and managed by the\n application. It is the application's responsibility to close the stream\n and to ensure that this Printer is not reused. The application\n should not close this stream until any print job created from the printer\n is complete. Doing so earlier may generate a PrinterException and\n an event indicating that the job failed.\n \n Whereas a PrintService connected to a physical printer can be\n reused, a StreamPrintService connected to a stream cannot. The\n underlying StreamPrintService may be disposed by the print system\n with the dispose method before\n returning from the\n print method of\n DocPrintJob so that the print system knows this printer is no\n longer usable. This is equivalent to a physical printer going offline -\n permanently. Applications may supply a null print stream to\n create a queryable service. It is not valid to create a PrintJob\n for such a stream. Implementations which allocate resources on\n construction should examine the stream and may wish to only allocate\n resources if the stream is non-null."}]}