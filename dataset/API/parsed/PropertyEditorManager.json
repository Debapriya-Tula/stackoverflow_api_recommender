{"name": "Class PropertyEditorManager", "module": "java.desktop", "package": "java.beans", "text": "The PropertyEditorManager can be used to locate a property editor for\n any given type name.  This property editor must support the\n java.beans.PropertyEditor interface for editing a given object.\n \n The PropertyEditorManager uses three techniques for locating an editor\n for a given type.  First, it provides a registerEditor method to allow\n an editor to be specifically registered for a given type.  Second it\n tries to locate a suitable class by adding \"Editor\" to the full\n qualified classname of the given type (e.g. \"foo.bah.FozEditor\").\n Finally it takes the simple classname (without the package name) adds\n \"Editor\" to it and looks in a search-path of packages for a matching\n class.\n \n So for an input class foo.bah.Fred, the PropertyEditorManager would\n first look in its tables to see if an editor had been registered for\n foo.bah.Fred and if so use that.  Then it will look for a\n foo.bah.FredEditor class.  Then it will look for (say)\n standardEditorsPackage.FredEditor class.\n \n Default PropertyEditors will be provided for the Java primitive types\n \"boolean\", \"byte\", \"short\", \"int\", \"long\", \"float\", and \"double\"; and\n for the classes java.lang.String. java.awt.Color, and java.awt.Font.", "codes": ["public class PropertyEditorManager\nextends Object"], "fields": [], "methods": [{"method_name": "registerEditor", "method_sig": "public static void registerEditor (Class<?> targetType,\n                                  Class<?> editorClass)", "description": "Registers an editor class to edit values of the given target class.\n If the editor class is null,\n then any existing definition will be removed.\n Thus this method can be used to cancel the registration.\n The registration is canceled automatically\n if either the target or editor class is unloaded.\n \n If there is a security manager, its checkPropertiesAccess\n method is called. This could result in a SecurityException."}, {"method_name": "findEditor", "method_sig": "public static PropertyEditor findEditor (Class<?> targetType)", "description": "Locate a value editor for a given target type."}, {"method_name": "getEditorSearchPath", "method_sig": "public static String[] getEditorSearchPath()", "description": "Gets the package names that will be searched for property editors."}, {"method_name": "setEditorSearchPath", "method_sig": "public static void setEditorSearchPath (String[] path)", "description": "Change the list of package names that will be used for\n          finding property editors.\n\n First, if there is a security manager, its checkPropertiesAccess\n method is called. This could result in a SecurityException."}]}