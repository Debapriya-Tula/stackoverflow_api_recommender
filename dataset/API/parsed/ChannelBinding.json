{"name": "Class ChannelBinding", "module": "java.security.jgss", "package": "org.ietf.jgss", "text": "This class encapsulates the concept of caller-provided channel\n binding information. Channel bindings are used to strengthen the\n quality with which peer entity authentication is provided during\n context establishment.  They enable the GSS-API callers to bind the\n establishment of the security context to relevant characteristics\n like addresses or to application specific data.\n\n The caller initiating the security context must determine the\n appropriate channel binding values to set in the GSSContext object.\n The acceptor must provide an identical binding in order to validate\n that received tokens possess correct channel-related characteristics.\n\n Use of channel bindings is optional in GSS-API. ChannelBinding can be\n set for the GSSContext using the setChannelBinding method\n before the first call to initSecContext or acceptSecContext has been performed.  Unless the setChannelBinding\n method has been used to set the ChannelBinding for a GSSContext object,\n null ChannelBinding will be assumed. \n\n Conceptually, the GSS-API concatenates the initiator and acceptor\n address information, and the application supplied byte array to form an\n octet string.  The mechanism calculates a MIC over this octet string and\n binds the MIC to the context establishment token emitted by\n initSecContext method of the GSSContext\n interface.  The same bindings are set by the context acceptor for its\n GSSContext object and during processing of the\n acceptSecContext method a MIC is calculated in the same\n way. The calculated MIC is compared with that found in the token, and if\n the MICs differ, accept will throw a GSSException with the\n major code set to BAD_BINDINGS, and\n the context will not be established. Some mechanisms may include the\n actual channel binding data in the token (rather than just a MIC);\n applications should therefore not use confidential data as\n channel-binding components.\n\n  Individual mechanisms may impose additional constraints on addresses\n  that may appear in channel bindings.  For example, a mechanism may\n  verify that the initiator address field of the channel binding\n  contains the correct network address of the host system.  Portable\n  applications should therefore ensure that they either provide correct\n  information for the address fields, or omit setting of the addressing\n  information.", "codes": ["public class ChannelBinding\nextends Object"], "fields": [], "methods": [{"method_name": "getInitiatorAddress", "method_sig": "public InetAddress getInitiatorAddress()", "description": "Get the initiator's address for this channel binding."}, {"method_name": "getAcceptorAddress", "method_sig": "public InetAddress getAcceptorAddress()", "description": "Get the acceptor's address for this channel binding."}, {"method_name": "getApplicationData", "method_sig": "public byte[] getApplicationData()", "description": "Get the application specified data for this channel binding."}, {"method_name": "equals", "method_sig": "public boolean equals (Object obj)", "description": "Compares two instances of ChannelBinding."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Returns a hashcode value for this ChannelBinding object."}]}