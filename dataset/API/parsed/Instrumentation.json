{"name": "Interface Instrumentation", "module": "java.instrument", "package": "java.lang.instrument", "text": "This class provides services needed to instrument Java\n programming language code.\n Instrumentation is the addition of byte-codes to methods for the\n purpose of gathering data to be utilized by tools.\n Since the changes are purely additive, these tools do not modify\n application state or behavior.\n Examples of such benign tools include monitoring agents, profilers,\n coverage analyzers, and event loggers.\n\n \n There are two ways to obtain an instance of the\n Instrumentation interface:\n\n \n When a JVM is launched in a way that indicates an agent\n     class. In that case an Instrumentation instance\n     is passed to the premain method of the agent class.\n     \n When a JVM provides a mechanism to start agents sometime\n     after the JVM is launched. In that case an Instrumentation\n     instance is passed to the agentmain method of the\n     agent code.  \n\n\n These mechanisms are described in the\n package specification.\n \n Once an agent acquires an Instrumentation instance,\n the agent may call methods on the instance at any time.", "codes": ["public interface Instrumentation"], "fields": [], "methods": [{"method_name": "addTransformer", "method_sig": "void addTransformer (ClassFileTransformer transformer,\n                    boolean canRetransform)", "description": "Registers the supplied transformer. All future class definitions\n will be seen by the transformer, except definitions of classes upon which any\n registered transformer is dependent.\n The transformer is called when classes are loaded, when they are\n redefined. and if canRetransform is true,\n when they are retransformed.\n ClassFileTransformer defines the order of transform calls.\n\n If a transformer throws\n an exception during execution, the JVM will still call the other registered\n transformers in order. The same transformer may be added more than once,\n but it is strongly discouraged -- avoid this by creating a new instance of\n transformer class.\n \n This method is intended for use in instrumentation, as described in the\n class specification."}, {"method_name": "addTransformer", "method_sig": "void addTransformer (ClassFileTransformer transformer)", "description": "Registers the supplied transformer.\n \n Same as addTransformer(transformer, false)."}, {"method_name": "removeTransformer", "method_sig": "boolean removeTransformer (ClassFileTransformer transformer)", "description": "Unregisters the supplied transformer. Future class definitions will\n not be shown to the transformer. Removes the most-recently-added matching\n instance of the transformer. Due to the multi-threaded nature of\n class loading, it is possible for a transformer to receive calls\n after it has been removed. Transformers should be written defensively\n to expect this situation."}, {"method_name": "isRetransformClassesSupported", "method_sig": "boolean isRetransformClassesSupported()", "description": "Returns whether or not the current JVM configuration supports retransformation\n of classes.\n The ability to retransform an already loaded class is an optional capability\n of a JVM.\n Retransformation will only be supported if the\n Can-Retransform-Classes manifest attribute is set to\n true in the agent JAR file (as described in the\n package specification) and the JVM supports\n this capability.\n During a single instantiation of a single JVM, multiple calls to this\n method will always return the same answer."}, {"method_name": "retransformClasses", "method_sig": "void retransformClasses (Class<?>... classes)\n                 throws UnmodifiableClassException", "description": "Retransform the supplied set of classes.\n\n \n This function facilitates the instrumentation\n of already loaded classes.\n When classes are initially loaded or when they are\n redefined,\n the initial class file bytes can be transformed with the\n ClassFileTransformer.\n This function reruns the transformation process\n (whether or not a transformation has previously occurred).\n This retransformation follows these steps:\n  \nstarting from the initial class file bytes\n    \nfor each transformer that was added with canRetransform\n      false, the bytes returned by\n      transform during the last class load or redefine are\n      reused as the output of the transformation; note that this is\n      equivalent to reapplying the previous transformation, unaltered;\n      except that transform method is not called.\n    \nfor each transformer that was added with canRetransform\n      true, the\n      transform method is called in these transformers\n    \nthe transformed class file bytes are installed as the new\n      definition of the class\n    \n\n\n\n The order of transformation is described in ClassFileTransformer.\n This same order is used in the automatic reapplication of\n retransformation incapable transforms.\n \n\n The initial class file bytes represent the bytes passed to\n ClassLoader.defineClass or\n redefineClasses\n (before any transformations\n  were applied), however they might not exactly match them.\n  The constant pool might not have the same layout or contents.\n  The constant pool may have more or fewer entries.\n  Constant pool entries may be in a different order; however,\n  constant pool indices in the bytecodes of methods will correspond.\n  Some attributes may not be present.\n  Where order is not meaningful, for example the order of methods,\n  order might not be preserved.\n\n \n This method operates on\n a set in order to allow interdependent changes to more than one class at the same time\n (a retransformation of class A can require a retransformation of class B).\n\n \n If a retransformed method has active stack frames, those active frames continue to\n run the bytecodes of the original method.\n The retransformed method will be used on new invokes.\n\n \n This method does not cause any initialization except that which would occur\n under the customary JVM semantics. In other words, redefining a class\n does not cause its initializers to be run. The values of static variables\n will remain as they were prior to the call.\n\n \n Instances of the retransformed class are not affected.\n\n \n The retransformation may change method bodies, the constant pool and\n attributes (unless explicitly prohibited).\n The retransformation must not add, remove or rename fields or methods, change the\n signatures of methods, or change inheritance.\n The retransformation must not change the NestHost or\n NestMembers attributes.\n These restrictions may be lifted in future versions.\n The class file bytes are not checked, verified and installed\n until after the transformations have been applied, if the resultant bytes are in\n error this method will throw an exception.\n\n \n If this method throws an exception, no classes have been retransformed.\n \n This method is intended for use in instrumentation, as described in the\n class specification."}, {"method_name": "isRedefineClassesSupported", "method_sig": "boolean isRedefineClassesSupported()", "description": "Returns whether or not the current JVM configuration supports redefinition\n of classes.\n The ability to redefine an already loaded class is an optional capability\n of a JVM.\n Redefinition will only be supported if the\n Can-Redefine-Classes manifest attribute is set to\n true in the agent JAR file (as described in the\n package specification) and the JVM supports\n this capability.\n During a single instantiation of a single JVM, multiple calls to this\n method will always return the same answer."}, {"method_name": "redefineClasses", "method_sig": "void redefineClasses (ClassDefinition... definitions)\n              throws ClassNotFoundException,\n                     UnmodifiableClassException", "description": "Redefine the supplied set of classes using the supplied class files.\n\n \n This method is used to replace the definition of a class without reference\n to the existing class file bytes, as one might do when recompiling from source\n for fix-and-continue debugging.\n Where the existing class file bytes are to be transformed (for\n example in bytecode instrumentation)\n retransformClasses\n should be used.\n\n \n This method operates on\n a set in order to allow interdependent changes to more than one class at the same time\n (a redefinition of class A can require a redefinition of class B).\n\n \n If a redefined method has active stack frames, those active frames continue to\n run the bytecodes of the original method.\n The redefined method will be used on new invokes.\n\n \n This method does not cause any initialization except that which would occur\n under the customary JVM semantics. In other words, redefining a class\n does not cause its initializers to be run. The values of static variables\n will remain as they were prior to the call.\n\n \n Instances of the redefined class are not affected.\n\n \n The redefinition may change method bodies, the constant pool and attributes\n (unless explicitly prohibited).\n The redefinition must not add, remove or rename fields or methods, change the\n signatures of methods, or change inheritance.\n The redefinition must not change the NestHost or\n NestMembers attributes.\n These restrictions may be lifted in future versions.\n The class file bytes are not checked, verified and installed\n until after the transformations have been applied, if the resultant bytes are in\n error this method will throw an exception.\n\n \n If this method throws an exception, no classes have been redefined.\n \n This method is intended for use in instrumentation, as described in the\n class specification."}, {"method_name": "isModifiableClass", "method_sig": "boolean isModifiableClass (Class<?> theClass)", "description": "Tests whether a class is modifiable by\n retransformation\n or redefinition.\n If a class is modifiable then this method returns true.\n If a class is not modifiable then this method returns false.\n \n For a class to be retransformed, isRetransformClassesSupported() must also be true.\n But the value of isRetransformClassesSupported() does not influence the value\n returned by this function.\n For a class to be redefined, isRedefineClassesSupported() must also be true.\n But the value of isRedefineClassesSupported() does not influence the value\n returned by this function.\n \n Primitive classes (for example, java.lang.Integer.TYPE)\n and array classes are never modifiable."}, {"method_name": "getAllLoadedClasses", "method_sig": "Class[] getAllLoadedClasses()", "description": "Returns an array of all classes currently loaded by the JVM."}, {"method_name": "getInitiatedClasses", "method_sig": "Class[] getInitiatedClasses (ClassLoader loader)", "description": "Returns an array of all classes for which loader is an initiating loader.\n If the supplied loader is null, classes initiated by the bootstrap class\n loader are returned."}, {"method_name": "getObjectSize", "method_sig": "long getObjectSize (Object objectToSize)", "description": "Returns an implementation-specific approximation of the amount of storage consumed by\n the specified object. The result may include some or all of the object's overhead,\n and thus is useful for comparison within an implementation but not between implementations.\n\n The estimate may change during a single invocation of the JVM."}, {"method_name": "appendToBootstrapClassLoaderSearch", "method_sig": "void appendToBootstrapClassLoaderSearch (JarFile jarfile)", "description": "Specifies a JAR file with instrumentation classes to be defined by the\n bootstrap class loader.\n\n  When the virtual machine's built-in class loader, known as the \"bootstrap\n class loader\", unsuccessfully searches for a class, the entries in the JAR file will be searched as well.\n\n  This method may be used multiple times to add multiple JAR files to be\n searched in the order that this method was invoked.\n\n  The agent should take care to ensure that the JAR does not contain any\n classes or resources other than those to be defined by the bootstrap\n class loader for the purpose of instrumentation.\n Failure to observe this warning could result in unexpected\n behavior that is difficult to diagnose. For example, suppose there is a\n loader L, and L's parent for delegation is the bootstrap class loader.\n Furthermore, a method in class C, a class defined by L, makes reference to\n a non-public accessor class C$1. If the JAR file contains a class C$1 then\n the delegation to the bootstrap class loader will cause C$1 to be defined\n by the bootstrap class loader. In this example an IllegalAccessError\n will be thrown that may cause the application to fail. One approach to\n avoiding these types of issues, is to use a unique package name for the\n instrumentation classes.\n\n \nThe Java\u2122 Virtual Machine Specification\n specifies that a subsequent attempt to resolve a symbolic\n reference that the Java virtual machine has previously unsuccessfully attempted\n to resolve always fails with the same error that was thrown as a result of the\n initial resolution attempt. Consequently, if the JAR file contains an entry\n that corresponds to a class for which the Java virtual machine has\n unsuccessfully attempted to resolve a reference, then subsequent attempts to\n resolve that reference will fail with the same error as the initial attempt."}, {"method_name": "appendToSystemClassLoaderSearch", "method_sig": "void appendToSystemClassLoaderSearch (JarFile jarfile)", "description": "Specifies a JAR file with instrumentation classes to be defined by the\n system class loader.\n\n When the system class loader for delegation (see\n getSystemClassLoader())\n unsuccessfully searches for a class, the entries in the JarFile will be searched as well.\n\n  This method may be used multiple times to add multiple JAR files to be\n searched in the order that this method was invoked.\n\n  The agent should take care to ensure that the JAR does not contain any\n classes or resources other than those to be defined by the system class\n loader for the purpose of instrumentation.\n Failure to observe this warning could result in unexpected\n behavior that is difficult to diagnose (see\n appendToBootstrapClassLoaderSearch).\n\n  The system class loader supports adding a JAR file to be searched if\n it implements a method named appendToClassPathForInstrumentation\n which takes a single parameter of type java.lang.String. The\n method is not required to have public access. The name of\n the JAR file is obtained by invoking the getName() method on the jarfile and this is provided as the\n parameter to the appendToClassPathForInstrumentation method.\n\n \nThe Java\u2122 Virtual Machine Specification\n specifies that a subsequent attempt to resolve a symbolic\n reference that the Java virtual machine has previously unsuccessfully attempted\n to resolve always fails with the same error that was thrown as a result of the\n initial resolution attempt. Consequently, if the JAR file contains an entry\n that corresponds to a class for which the Java virtual machine has\n unsuccessfully attempted to resolve a reference, then subsequent attempts to\n resolve that reference will fail with the same error as the initial attempt.\n\n  This method does not change the value of java.class.path\nsystem property."}, {"method_name": "isNativeMethodPrefixSupported", "method_sig": "boolean isNativeMethodPrefixSupported()", "description": "Returns whether the current JVM configuration supports\n setting a native method prefix.\n The ability to set a native method prefix is an optional\n capability of a JVM.\n Setting a native method prefix will only be supported if the\n Can-Set-Native-Method-Prefix manifest attribute is set to\n true in the agent JAR file (as described in the\n package specification) and the JVM supports\n this capability.\n During a single instantiation of a single JVM, multiple\n calls to this method will always return the same answer."}, {"method_name": "setNativeMethodPrefix", "method_sig": "void setNativeMethodPrefix (ClassFileTransformer transformer,\n                           String prefix)", "description": "This method modifies the failure handling of\n native method resolution by allowing retry\n with a prefix applied to the name.\n When used with the\n ClassFileTransformer,\n it enables native methods to be\n instrumented.\n \n Since native methods cannot be directly instrumented\n (they have no bytecodes), they must be wrapped with\n a non-native method which can be instrumented.\n For example, if we had:\n \n   native boolean foo(int x);\n\n We could transform the class file (with the\n ClassFileTransformer during the initial definition\n of the class) so that this becomes:\n \n   boolean foo(int x) {\n     ... record entry to foo ...\n     return wrapped_foo(x);\n   }\n\n   native boolean wrapped_foo(int x);\n\n Where foo becomes a wrapper for the actual native\n method with the appended prefix \"wrapped_\".  Note that\n \"wrapped_\" would be a poor choice of prefix since it\n might conceivably form the name of an existing method\n thus something like \"$$$MyAgentWrapped$$$_\" would be\n better but would make these examples less readable.\n \n The wrapper will allow data to be collected on the native\n method call, but now the problem becomes linking up the\n wrapped method with the native implementation.\n That is, the method wrapped_foo needs to be\n resolved to the native implementation of foo,\n which might be:\n \n   Java_somePackage_someClass_foo(JNIEnv* env, jint x)\n\n This function allows the prefix to be specified and the\n proper resolution to occur.\n Specifically, when the standard resolution fails, the\n resolution is retried taking the prefix into consideration.\n There are two ways that resolution occurs, explicit\n resolution with the JNI function RegisterNatives\n and the normal automatic resolution.  For\n RegisterNatives, the JVM will attempt this\n association:\n \n   method(foo) -> nativeImplementation(foo)\n \n\n When this fails, the resolution will be retried with\n the specified prefix prepended to the method name,\n yielding the correct resolution:\n \n   method(wrapped_foo) -> nativeImplementation(foo)\n \n\n For automatic resolution, the JVM will attempt:\n \n   method(wrapped_foo) -> nativeImplementation(wrapped_foo)\n \n\n When this fails, the resolution will be retried with\n the specified prefix deleted from the implementation name,\n yielding the correct resolution:\n \n   method(wrapped_foo) -> nativeImplementation(foo)\n \n\n Note that since the prefix is only used when standard\n resolution fails, native methods can be wrapped selectively.\n \n Since each ClassFileTransformer\n can do its own transformation of the bytecodes, more\n than one layer of wrappers may be applied. Thus each\n transformer needs its own prefix.  Since transformations\n are applied in order, the prefixes, if applied, will\n be applied in the same order\n (see addTransformer).\n Thus if three transformers applied\n wrappers, foo might become\n $trans3_$trans2_$trans1_foo.  But if, say,\n the second transformer did not apply a wrapper to\n foo it would be just\n $trans3_$trans1_foo.  To be able to\n efficiently determine the sequence of prefixes,\n an intermediate prefix is only applied if its non-native\n wrapper exists.  Thus, in the last example, even though\n $trans1_foo is not a native method, the\n $trans1_ prefix is applied since\n $trans1_foo exists."}, {"method_name": "redefineModule", "method_sig": "void redefineModule (Module module,\n                    Set<Module> extraReads,\n                    Map<String, Set<Module>> extraExports,\n                    Map<String, Set<Module>> extraOpens,\n                    Set<Class<?>> extraUses,\n                    Map<Class<?>, List<Class<?>>> extraProvides)", "description": "Redefine a module to expand the set of modules that it reads, the set of\n packages that it exports or opens, or the services that it uses or\n provides. This method facilitates the instrumentation of code in named\n modules where that instrumentation requires changes to the set of modules\n that are read, the packages that are exported or open, or the services\n that are used or provided.\n\n  This method cannot reduce the set of modules that a module reads, nor\n reduce the set of packages that it exports or opens, nor reduce the set\n of services that it uses or provides. This method is a no-op when invoked\n to redefine an unnamed module. \n When expanding the services that a module uses or provides then the\n onus is on the agent to ensure that the service type will be accessible at\n each instrumentation site where the service type is used. This method\n does not check if the service type is a member of the module or in a\n package exported to the module by another module that it reads. \n The extraExports parameter is the map of additional packages\n to export. The extraOpens parameter is the map of additional\n packages to open. In both cases, the map key is the fully-qualified name\n of the package as defined in section 6.5.3 of\n The Java\u2122 Language Specification , for example, \n \"java.lang\". The map value is the non-empty set of modules that the\n package should be exported or opened to. \n The extraProvides parameter is the additional service providers\n for the module to provide. The map key is the service type. The map value\n is the non-empty list of implementation types, each of which is a member\n of the module and an implementation of the service. \n This method is safe for concurrent use and so allows multiple agents\n to instrument and update the same module at around the same time. "}, {"method_name": "isModifiableModule", "method_sig": "boolean isModifiableModule (Module module)", "description": "Tests whether a module can be modified with redefineModule. If a module is modifiable then this method returns\n true. If a module is not modifiable then this method returns\n false. This method always returns true when the module\n is an unnamed module (as redefining an unnamed module is a no-op)."}]}