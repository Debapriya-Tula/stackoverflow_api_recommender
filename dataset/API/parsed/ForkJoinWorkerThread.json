{"name": "Class ForkJoinWorkerThread", "module": "java.base", "package": "java.util.concurrent", "text": "A thread managed by a ForkJoinPool, which executes\n ForkJoinTasks.\n This class is subclassable solely for the sake of adding\n functionality -- there are no overridable methods dealing with\n scheduling or execution.  However, you can override initialization\n and termination methods surrounding the main task processing loop.\n If you do create such a subclass, you will also need to supply a\n custom ForkJoinPool.ForkJoinWorkerThreadFactory to\n use it in a ForkJoinPool.", "codes": ["public class ForkJoinWorkerThread\nextends Thread"], "fields": [], "methods": [{"method_name": "getPool", "method_sig": "public ForkJoinPool getPool()", "description": "Returns the pool hosting this thread."}, {"method_name": "getPoolIndex", "method_sig": "public int getPoolIndex()", "description": "Returns the unique index number of this thread in its pool.\n The returned value ranges from zero to the maximum number of\n threads (minus one) that may exist in the pool, and does not\n change during the lifetime of the thread.  This method may be\n useful for applications that track status or collect results\n per-worker-thread rather than per-task."}, {"method_name": "onStart", "method_sig": "protected void onStart()", "description": "Initializes internal state after construction but before\n processing any tasks. If you override this method, you must\n invoke super.onStart() at the beginning of the method.\n Initialization requires care: Most fields must have legal\n default values, to ensure that attempted accesses from other\n threads work correctly even before this thread starts\n processing tasks."}, {"method_name": "onTermination", "method_sig": "protected void onTermination (Throwable exception)", "description": "Performs cleanup associated with termination of this worker\n thread.  If you override this method, you must invoke\n super.onTermination at the end of the overridden method."}, {"method_name": "run", "method_sig": "public void run()", "description": "This method is required to be public, but should never be\n called explicitly. It performs the main run loop to execute\n ForkJoinTasks."}]}