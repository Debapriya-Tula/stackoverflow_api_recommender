{"name": "Class Introspector", "module": "java.desktop", "package": "java.beans", "text": "The Introspector class provides a standard way for tools to learn about\n the properties, events, and methods supported by a target Java Bean.\n \n For each of those three kinds of information, the Introspector will\n separately analyze the bean's class and superclasses looking for\n either explicit or implicit information and use that information to\n build a BeanInfo object that comprehensively describes the target bean.\n \n For each class \"Foo\", explicit information may be available if there exists\n a corresponding \"FooBeanInfo\" class that provides a non-null value when\n queried for the information.   We first look for the BeanInfo class by\n taking the full package-qualified name of the target bean class and\n appending \"BeanInfo\" to form a new class name.  If this fails, then\n we take the final classname component of this name, and look for that\n class in each of the packages specified in the BeanInfo package search\n path.\n \n Thus for a class such as \"sun.xyz.OurButton\" we would first look for a\n BeanInfo class called \"sun.xyz.OurButtonBeanInfo\" and if that failed we'd\n look in each package in the BeanInfo search path for an OurButtonBeanInfo\n class.  With the default search path, this would mean looking for\n \"sun.beans.infos.OurButtonBeanInfo\".\n \n If a class provides explicit BeanInfo about itself then we add that to\n the BeanInfo information we obtained from analyzing any derived classes,\n but we regard the explicit information as being definitive for the current\n class and its base classes, and do not proceed any further up the superclass\n chain.\n \n If we don't find explicit BeanInfo on a class, we use low-level\n reflection to study the methods of the class and apply standard design\n patterns to identify property accessors, event sources, or public\n methods.  We then proceed to analyze the class's superclass and add\n in the information from it (and possibly on up the superclass chain).\n \n For more information about introspection and design patterns, please\n consult the\n  JavaBeans\u2122 specification.", "codes": ["public class Introspector\nextends Object"], "fields": [{"field_name": "USE_ALL_BEANINFO", "field_sig": "public static final\u00a0int USE_ALL_BEANINFO", "description": "Flag to indicate to use of all beaninfo."}, {"field_name": "IGNORE_IMMEDIATE_BEANINFO", "field_sig": "public static final\u00a0int IGNORE_IMMEDIATE_BEANINFO", "description": "Flag to indicate to ignore immediate beaninfo."}, {"field_name": "IGNORE_ALL_BEANINFO", "field_sig": "public static final\u00a0int IGNORE_ALL_BEANINFO", "description": "Flag to indicate to ignore all beaninfo."}], "methods": [{"method_name": "getBeanInfo", "method_sig": "public static BeanInfo getBeanInfo (Class<?> beanClass)\n                            throws IntrospectionException", "description": "Introspect on a Java Bean and learn about all its properties, exposed\n methods, and events.\n \n If the BeanInfo class for a Java Bean has been previously Introspected\n then the BeanInfo class is retrieved from the BeanInfo cache."}, {"method_name": "getBeanInfo", "method_sig": "public static BeanInfo getBeanInfo (Class<?> beanClass,\n                                   int flags)\n                            throws IntrospectionException", "description": "Introspect on a Java bean and learn about all its properties, exposed\n methods, and events, subject to some control flags.\n \n If the BeanInfo class for a Java Bean has been previously Introspected\n based on the same arguments then the BeanInfo class is retrieved\n from the BeanInfo cache."}, {"method_name": "getBeanInfo", "method_sig": "public static BeanInfo getBeanInfo (Class<?> beanClass,\n                                   Class<?> stopClass)\n                            throws IntrospectionException", "description": "Introspect on a Java bean and learn all about its properties, exposed\n methods, below a given \"stop\" point.\n \n If the BeanInfo class for a Java Bean has been previously Introspected\n based on the same arguments, then the BeanInfo class is retrieved\n from the BeanInfo cache."}, {"method_name": "getBeanInfo", "method_sig": "public static BeanInfo getBeanInfo (Class<?> beanClass,\n                                   Class<?> stopClass,\n                                   int flags)\n                            throws IntrospectionException", "description": "Introspect on a Java Bean and learn about all its properties,\n exposed methods and events, below a given stopClass point\n subject to some control flags.\n \nUSE_ALL_BEANINFO\nAny BeanInfo that can be discovered will be used.\nIGNORE_IMMEDIATE_BEANINFO\nAny BeanInfo associated with the specified beanClass will be ignored.\nIGNORE_ALL_BEANINFO\nAny BeanInfo associated with the specified beanClass\n      or any of its parent classes will be ignored.\n\n Any methods/properties/events in the stopClass\n or in its parent classes will be ignored in the analysis.\n \n If the BeanInfo class for a Java Bean has been\n previously introspected based on the same arguments then\n the BeanInfo class is retrieved from the BeanInfo cache."}, {"method_name": "decapitalize", "method_sig": "public static String decapitalize (String name)", "description": "Utility method to take a string and convert it to normal Java variable\n name capitalization.  This normally means converting the first\n character from upper case to lower case, but in the (unusual) special\n case when there is more than one character and both the first and\n second characters are upper case, we leave it alone.\n \n Thus \"FooBah\" becomes \"fooBah\" and \"X\" becomes \"x\", but \"URL\" stays\n as \"URL\"."}, {"method_name": "getBeanInfoSearchPath", "method_sig": "public static String[] getBeanInfoSearchPath()", "description": "Gets the list of package names that will be used for\n          finding BeanInfo classes."}, {"method_name": "setBeanInfoSearchPath", "method_sig": "public static void setBeanInfoSearchPath (String[] path)", "description": "Change the list of package names that will be used for\n          finding BeanInfo classes.  The behaviour of\n          this method is undefined if parameter path\n          is null.\n\n First, if there is a security manager, its checkPropertiesAccess\n method is called. This could result in a SecurityException."}, {"method_name": "flushCaches", "method_sig": "public static void flushCaches()", "description": "Flush all of the Introspector's internal caches.  This method is\n not normally required.  It is normally only needed by advanced\n tools that update existing \"Class\" objects in-place and need\n to make the Introspector re-analyze existing Class objects."}, {"method_name": "flushFromCaches", "method_sig": "public static void flushFromCaches (Class<?> clz)", "description": "Flush the Introspector's internal cached information for a given class.\n This method is not normally required.  It is normally only needed\n by advanced tools that update existing \"Class\" objects in-place\n and need to make the Introspector re-analyze an existing Class object.\n\n Note that only the direct state associated with the target Class\n object is flushed.  We do not flush state for other Class objects\n with the same name, nor do we flush state for any related Class\n objects (such as subclasses), even though their state may include\n information indirectly obtained from the target Class object."}]}