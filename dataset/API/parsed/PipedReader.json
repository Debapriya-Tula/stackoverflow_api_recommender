{"name": "Class PipedReader", "module": "java.base", "package": "java.io", "text": "Piped character-input streams.", "codes": ["public class PipedReader\nextends Reader"], "fields": [], "methods": [{"method_name": "connect", "method_sig": "public void connect (PipedWriter src)\n             throws IOException", "description": "Causes this piped reader to be connected\n to the piped  writer src.\n If this object is already connected to some\n other piped writer, an IOException\n is thrown.\n \n If src is an\n unconnected piped writer and snk\n is an unconnected piped reader, they\n may be connected by either the call:\n\n snk.connect(src) \n\n or the call:\n\n src.connect(snk) \n\n The two calls have the same effect."}, {"method_name": "read", "method_sig": "public int read()\n         throws IOException", "description": "Reads the next character of data from this piped stream.\n If no character is available because the end of the stream\n has been reached, the value -1 is returned.\n This method blocks until input data is available, the end of\n the stream is detected, or an exception is thrown."}, {"method_name": "read", "method_sig": "public int read (char[] cbuf,\n                int off,\n                int len)\n         throws IOException", "description": "Reads up to len characters of data from this piped\n stream into an array of characters. Less than len characters\n will be read if the end of the data stream is reached or if\n len exceeds the pipe's buffer size. This method\n blocks until at least one character of input is available."}, {"method_name": "ready", "method_sig": "public boolean ready()\n              throws IOException", "description": "Tell whether this stream is ready to be read.  A piped character\n stream is ready if the circular buffer is not empty."}, {"method_name": "close", "method_sig": "public void close()\n           throws IOException", "description": "Closes this piped stream and releases any system resources\n associated with the stream."}]}