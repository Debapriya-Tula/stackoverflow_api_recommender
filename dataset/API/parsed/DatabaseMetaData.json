{"name": "Interface DatabaseMetaData", "module": "java.sql", "package": "java.sql", "text": "Comprehensive information about the database as a whole.\n \n This interface is implemented by driver vendors to let users know the capabilities\n of a Database Management System (DBMS) in combination with\n the driver based on JDBC\u2122 technology\n (\"JDBC driver\") that is used with it.  Different relational DBMSs often support\n different features, implement features in different ways, and use different\n data types.  In addition, a driver may implement a feature on top of what the\n DBMS offers.  Information returned by methods in this interface applies\n to the capabilities of a particular driver and a particular DBMS working\n together. Note that as used in this documentation, the term \"database\" is\n used generically to refer to both the driver and DBMS.\n \n A user for this interface is commonly a tool that needs to discover how to\n deal with the underlying DBMS.  This is especially true for applications\n that are intended to be used with more than one DBMS. For example, a tool might use the method\n getTypeInfo to find out what data types can be used in a\n CREATE TABLE statement.  Or a user might call the method\n supportsCorrelatedSubqueries to see if it is possible to use\n a correlated subquery or supportsBatchUpdates to see if it is\n possible to use batch updates.\n \n Some DatabaseMetaData methods return lists of information\n in the form of ResultSet objects.\n Regular ResultSet methods, such as\n getString and getInt, can be used\n to retrieve the data from these ResultSet objects.  If\n a given form of metadata is not available, an empty ResultSet\n will be returned. Additional columns beyond the columns defined to be\n returned by the ResultSet object for a given method\n can be defined by the JDBC driver vendor and must be accessed\n by their column label.\n \n Some DatabaseMetaData methods take arguments that are\n String patterns.  These arguments all have names such as fooPattern.\n Within a pattern String, \"%\" means match any substring of 0 or more\n characters, and \"_\" means match any one character. Only metadata\n entries matching the search pattern are returned. If a search pattern\n argument is set to null, that argument's criterion will\n be dropped from the search.", "codes": ["public interface DatabaseMetaData\nextends Wrapper"], "fields": [{"field_name": "procedureResultUnknown", "field_sig": "static final\u00a0int procedureResultUnknown", "description": "Indicates that it is not known whether the procedure returns\n a result.\n \n A possible value for column PROCEDURE_TYPE in the\n ResultSet object returned by the method\n getProcedures."}, {"field_name": "procedureNoResult", "field_sig": "static final\u00a0int procedureNoResult", "description": "Indicates that the procedure does not return a result.\n \n A possible value for column PROCEDURE_TYPE in the\n ResultSet object returned by the method\n getProcedures."}, {"field_name": "procedureReturnsResult", "field_sig": "static final\u00a0int procedureReturnsResult", "description": "Indicates that the procedure returns a result.\n \n A possible value for column PROCEDURE_TYPE in the\n ResultSet object returned by the method\n getProcedures."}, {"field_name": "procedureColumnUnknown", "field_sig": "static final\u00a0int procedureColumnUnknown", "description": "Indicates that type of the column is unknown.\n \n A possible value for the column\n COLUMN_TYPE\n in the ResultSet\n returned by the method getProcedureColumns."}, {"field_name": "procedureColumnIn", "field_sig": "static final\u00a0int procedureColumnIn", "description": "Indicates that the column stores IN parameters.\n \n A possible value for the column\n COLUMN_TYPE\n in the ResultSet\n returned by the method getProcedureColumns."}, {"field_name": "procedureColumnInOut", "field_sig": "static final\u00a0int procedureColumnInOut", "description": "Indicates that the column stores INOUT parameters.\n \n A possible value for the column\n COLUMN_TYPE\n in the ResultSet\n returned by the method getProcedureColumns."}, {"field_name": "procedureColumnOut", "field_sig": "static final\u00a0int procedureColumnOut", "description": "Indicates that the column stores OUT parameters.\n \n A possible value for the column\n COLUMN_TYPE\n in the ResultSet\n returned by the method getProcedureColumns."}, {"field_name": "procedureColumnReturn", "field_sig": "static final\u00a0int procedureColumnReturn", "description": "Indicates that the column stores return values.\n \n A possible value for the column\n COLUMN_TYPE\n in the ResultSet\n returned by the method getProcedureColumns."}, {"field_name": "procedureColumnResult", "field_sig": "static final\u00a0int procedureColumnResult", "description": "Indicates that the column stores results.\n \n A possible value for the column\n COLUMN_TYPE\n in the ResultSet\n returned by the method getProcedureColumns."}, {"field_name": "procedureNoNulls", "field_sig": "static final\u00a0int procedureNoNulls", "description": "Indicates that NULL values are not allowed.\n \n A possible value for the column\n NULLABLE\n in the ResultSet object\n returned by the method getProcedureColumns."}, {"field_name": "procedureNullable", "field_sig": "static final\u00a0int procedureNullable", "description": "Indicates that NULL values are allowed.\n \n A possible value for the column\n NULLABLE\n in the ResultSet object\n returned by the method getProcedureColumns."}, {"field_name": "procedureNullableUnknown", "field_sig": "static final\u00a0int procedureNullableUnknown", "description": "Indicates that whether NULL values are allowed\n is unknown.\n \n A possible value for the column\n NULLABLE\n in the ResultSet object\n returned by the method getProcedureColumns."}, {"field_name": "columnNoNulls", "field_sig": "static final\u00a0int columnNoNulls", "description": "Indicates that the column might not allow NULL values.\n \n A possible value for the column\n NULLABLE\n in the ResultSet returned by the method\n getColumns."}, {"field_name": "columnNullable", "field_sig": "static final\u00a0int columnNullable", "description": "Indicates that the column definitely allows NULL values.\n \n A possible value for the column\n NULLABLE\n in the ResultSet returned by the method\n getColumns."}, {"field_name": "columnNullableUnknown", "field_sig": "static final\u00a0int columnNullableUnknown", "description": "Indicates that the nullability of columns is unknown.\n \n A possible value for the column\n NULLABLE\n in the ResultSet returned by the method\n getColumns."}, {"field_name": "bestRowTemporary", "field_sig": "static final\u00a0int bestRowTemporary", "description": "Indicates that the scope of the best row identifier is\n very temporary, lasting only while the\n row is being used.\n \n A possible value for the column\n SCOPE\n in the ResultSet object\n returned by the method getBestRowIdentifier."}, {"field_name": "bestRowTransaction", "field_sig": "static final\u00a0int bestRowTransaction", "description": "Indicates that the scope of the best row identifier is\n the remainder of the current transaction.\n \n A possible value for the column\n SCOPE\n in the ResultSet object\n returned by the method getBestRowIdentifier."}, {"field_name": "bestRowSession", "field_sig": "static final\u00a0int bestRowSession", "description": "Indicates that the scope of the best row identifier is\n the remainder of the current session.\n \n A possible value for the column\n SCOPE\n in the ResultSet object\n returned by the method getBestRowIdentifier."}, {"field_name": "bestRowUnknown", "field_sig": "static final\u00a0int bestRowUnknown", "description": "Indicates that the best row identifier may or may not be a pseudo column.\n \n A possible value for the column\n PSEUDO_COLUMN\n in the ResultSet object\n returned by the method getBestRowIdentifier."}, {"field_name": "bestRowNotPseudo", "field_sig": "static final\u00a0int bestRowNotPseudo", "description": "Indicates that the best row identifier is NOT a pseudo column.\n \n A possible value for the column\n PSEUDO_COLUMN\n in the ResultSet object\n returned by the method getBestRowIdentifier."}, {"field_name": "bestRowPseudo", "field_sig": "static final\u00a0int bestRowPseudo", "description": "Indicates that the best row identifier is a pseudo column.\n \n A possible value for the column\n PSEUDO_COLUMN\n in the ResultSet object\n returned by the method getBestRowIdentifier."}, {"field_name": "versionColumnUnknown", "field_sig": "static final\u00a0int versionColumnUnknown", "description": "Indicates that this version column may or may not be a pseudo column.\n \n A possible value for the column\n PSEUDO_COLUMN\n in the ResultSet object\n returned by the method getVersionColumns."}, {"field_name": "versionColumnNotPseudo", "field_sig": "static final\u00a0int versionColumnNotPseudo", "description": "Indicates that this version column is NOT a pseudo column.\n \n A possible value for the column\n PSEUDO_COLUMN\n in the ResultSet object\n returned by the method getVersionColumns."}, {"field_name": "versionColumnPseudo", "field_sig": "static final\u00a0int versionColumnPseudo", "description": "Indicates that this version column is a pseudo column.\n \n A possible value for the column\n PSEUDO_COLUMN\n in the ResultSet object\n returned by the method getVersionColumns."}, {"field_name": "importedKeyCascade", "field_sig": "static final\u00a0int importedKeyCascade", "description": "For the column UPDATE_RULE,\n indicates that\n when the primary key is updated, the foreign key (imported key)\n is changed to agree with it.\n For the column DELETE_RULE,\n it indicates that\n when the primary key is deleted, rows that imported that key\n are deleted.\n \n A possible value for the columns UPDATE_RULE\n and DELETE_RULE in the\n ResultSet objects returned by the methods\n getImportedKeys,  getExportedKeys,\n and getCrossReference."}, {"field_name": "importedKeyRestrict", "field_sig": "static final\u00a0int importedKeyRestrict", "description": "For the column UPDATE_RULE, indicates that\n a primary key may not be updated if it has been imported by\n another table as a foreign key.\n For the column DELETE_RULE, indicates that\n a primary key may not be deleted if it has been imported by\n another table as a foreign key.\n \n A possible value for the columns UPDATE_RULE\n and DELETE_RULE in the\n ResultSet objects returned by the methods\n getImportedKeys,  getExportedKeys,\n and getCrossReference."}, {"field_name": "importedKeySetNull", "field_sig": "static final\u00a0int importedKeySetNull", "description": "For the columns UPDATE_RULE\n and DELETE_RULE, indicates that\n when the primary key is updated or deleted, the foreign key (imported key)\n is changed to NULL.\n \n A possible value for the columns UPDATE_RULE\n and DELETE_RULE in the\n ResultSet objects returned by the methods\n getImportedKeys,  getExportedKeys,\n and getCrossReference."}, {"field_name": "importedKeyNoAction", "field_sig": "static final\u00a0int importedKeyNoAction", "description": "For the columns UPDATE_RULE\n and DELETE_RULE, indicates that\n if the primary key has been imported, it cannot be updated or deleted.\n \n A possible value for the columns UPDATE_RULE\n and DELETE_RULE in the\n ResultSet objects returned by the methods\n getImportedKeys,  getExportedKeys,\n and getCrossReference."}, {"field_name": "importedKeySetDefault", "field_sig": "static final\u00a0int importedKeySetDefault", "description": "For the columns UPDATE_RULE\n and DELETE_RULE, indicates that\n if the primary key is updated or deleted, the foreign key (imported key)\n is set to the default value.\n \n A possible value for the columns UPDATE_RULE\n and DELETE_RULE in the\n ResultSet objects returned by the methods\n getImportedKeys,  getExportedKeys,\n and getCrossReference."}, {"field_name": "importedKeyInitiallyDeferred", "field_sig": "static final\u00a0int importedKeyInitiallyDeferred", "description": "Indicates deferrability.  See SQL-92 for a definition.\n \n A possible value for the column DEFERRABILITY\n in the ResultSet objects returned by the methods\n getImportedKeys,  getExportedKeys,\n and getCrossReference."}, {"field_name": "importedKeyInitiallyImmediate", "field_sig": "static final\u00a0int importedKeyInitiallyImmediate", "description": "Indicates deferrability.  See SQL-92 for a definition.\n \n A possible value for the column DEFERRABILITY\n in the ResultSet objects returned by the methods\n getImportedKeys,  getExportedKeys,\n and getCrossReference."}, {"field_name": "importedKeyNotDeferrable", "field_sig": "static final\u00a0int importedKeyNotDeferrable", "description": "Indicates deferrability.  See SQL-92 for a definition.\n \n A possible value for the column DEFERRABILITY\n in the ResultSet objects returned by the methods\n getImportedKeys,  getExportedKeys,\n and getCrossReference."}, {"field_name": "typeNoNulls", "field_sig": "static final\u00a0int typeNoNulls", "description": "Indicates that a NULL value is NOT allowed for this\n data type.\n \n A possible value for column NULLABLE in the\n ResultSet object returned by the method\n getTypeInfo."}, {"field_name": "typeNullable", "field_sig": "static final\u00a0int typeNullable", "description": "Indicates that a NULL value is allowed for this\n data type.\n \n A possible value for column NULLABLE in the\n ResultSet object returned by the method\n getTypeInfo."}, {"field_name": "typeNullableUnknown", "field_sig": "static final\u00a0int typeNullableUnknown", "description": "Indicates that it is not known whether a NULL value\n is allowed for this data type.\n \n A possible value for column NULLABLE in the\n ResultSet object returned by the method\n getTypeInfo."}, {"field_name": "typePredNone", "field_sig": "static final\u00a0int typePredNone", "description": "Indicates that WHERE search clauses are not supported\n for this type.\n \n A possible value for column SEARCHABLE in the\n ResultSet object returned by the method\n getTypeInfo."}, {"field_name": "typePredChar", "field_sig": "static final\u00a0int typePredChar", "description": "Indicates that the data type\n can be only be used in WHERE search clauses\n that  use LIKE predicates.\n \n A possible value for column SEARCHABLE in the\n ResultSet object returned by the method\n getTypeInfo."}, {"field_name": "typePredBasic", "field_sig": "static final\u00a0int typePredBasic", "description": "Indicates that the data type can be only be used in WHERE\n search clauses\n that do not use LIKE predicates.\n \n A possible value for column SEARCHABLE in the\n ResultSet object returned by the method\n getTypeInfo."}, {"field_name": "typeSearchable", "field_sig": "static final\u00a0int typeSearchable", "description": "Indicates that all WHERE search clauses can be\n based on this type.\n \n A possible value for column SEARCHABLE in the\n ResultSet object returned by the method\n getTypeInfo."}, {"field_name": "tableIndexStatistic", "field_sig": "static final\u00a0short tableIndexStatistic", "description": "Indicates that this column contains table statistics that\n are returned in conjunction with a table's index descriptions.\n \n A possible value for column TYPE in the\n ResultSet object returned by the method\n getIndexInfo."}, {"field_name": "tableIndexClustered", "field_sig": "static final\u00a0short tableIndexClustered", "description": "Indicates that this table index is a clustered index.\n \n A possible value for column TYPE in the\n ResultSet object returned by the method\n getIndexInfo."}, {"field_name": "tableIndexHashed", "field_sig": "static final\u00a0short tableIndexHashed", "description": "Indicates that this table index is a hashed index.\n \n A possible value for column TYPE in the\n ResultSet object returned by the method\n getIndexInfo."}, {"field_name": "tableIndexOther", "field_sig": "static final\u00a0short tableIndexOther", "description": "Indicates that this table index is not a clustered\n index, a hashed index, or table statistics;\n it is something other than these.\n \n A possible value for column TYPE in the\n ResultSet object returned by the method\n getIndexInfo."}, {"field_name": "attributeNoNulls", "field_sig": "static final\u00a0short attributeNoNulls", "description": "Indicates that NULL values might not be allowed.\n \n A possible value for the column\n NULLABLE in the ResultSet object\n returned by the method getAttributes."}, {"field_name": "attributeNullable", "field_sig": "static final\u00a0short attributeNullable", "description": "Indicates that NULL values are definitely allowed.\n \n A possible value for the column NULLABLE\n in the ResultSet object\n returned by the method getAttributes."}, {"field_name": "attributeNullableUnknown", "field_sig": "static final\u00a0short attributeNullableUnknown", "description": "Indicates that whether NULL values are allowed is not\n known.\n \n A possible value for the column NULLABLE\n in the ResultSet object\n returned by the method getAttributes."}, {"field_name": "sqlStateXOpen", "field_sig": "static final\u00a0int sqlStateXOpen", "description": "A possible return value for the method\n DatabaseMetaData.getSQLStateType which is used to indicate\n whether the value returned by the method\n SQLException.getSQLState is an\n X/Open (now know as Open Group) SQL CLI SQLSTATE value."}, {"field_name": "sqlStateSQL", "field_sig": "static final\u00a0int sqlStateSQL", "description": "A possible return value for the method\n DatabaseMetaData.getSQLStateType which is used to indicate\n whether the value returned by the method\n SQLException.getSQLState is an SQLSTATE value."}, {"field_name": "sqlStateSQL99", "field_sig": "static final\u00a0int sqlStateSQL99", "description": "A possible return value for the method\n DatabaseMetaData.getSQLStateType which is used to indicate\n whether the value returned by the method\n SQLException.getSQLState is an SQL99 SQLSTATE value.\n \nNote:This constant remains only for compatibility reasons. Developers\n should use the constant sqlStateSQL instead."}, {"field_name": "functionColumnUnknown", "field_sig": "static final\u00a0int functionColumnUnknown", "description": "Indicates that type of the parameter or column is unknown.\n \n A possible value for the column\n COLUMN_TYPE\n in the ResultSet\n returned by the method getFunctionColumns."}, {"field_name": "functionColumnIn", "field_sig": "static final\u00a0int functionColumnIn", "description": "Indicates that the parameter or column is an IN parameter.\n \n  A possible value for the column\n COLUMN_TYPE\n in the ResultSet\n returned by the method getFunctionColumns."}, {"field_name": "functionColumnInOut", "field_sig": "static final\u00a0int functionColumnInOut", "description": "Indicates that the parameter or column is an INOUT parameter.\n \n A possible value for the column\n COLUMN_TYPE\n in the ResultSet\n returned by the method getFunctionColumns."}, {"field_name": "functionColumnOut", "field_sig": "static final\u00a0int functionColumnOut", "description": "Indicates that the parameter or column is an OUT parameter.\n \n A possible value for the column\n COLUMN_TYPE\n in the ResultSet\n returned by the method getFunctionColumns."}, {"field_name": "functionReturn", "field_sig": "static final\u00a0int functionReturn", "description": "Indicates that the parameter or column is a return value.\n \n  A possible value for the column\n COLUMN_TYPE\n in the ResultSet\n returned by the method getFunctionColumns."}, {"field_name": "functionColumnResult", "field_sig": "static final\u00a0int functionColumnResult", "description": "Indicates that the parameter or column is a column in a result set.\n \n  A possible value for the column\n COLUMN_TYPE\n in the ResultSet\n returned by the method getFunctionColumns."}, {"field_name": "functionNoNulls", "field_sig": "static final\u00a0int functionNoNulls", "description": "Indicates that NULL values are not allowed.\n \n A possible value for the column\n NULLABLE\n in the ResultSet object\n returned by the method getFunctionColumns."}, {"field_name": "functionNullable", "field_sig": "static final\u00a0int functionNullable", "description": "Indicates that NULL values are allowed.\n \n A possible value for the column\n NULLABLE\n in the ResultSet object\n returned by the method getFunctionColumns."}, {"field_name": "functionNullableUnknown", "field_sig": "static final\u00a0int functionNullableUnknown", "description": "Indicates that whether NULL values are allowed\n is unknown.\n \n A possible value for the column\n NULLABLE\n in the ResultSet object\n returned by the method getFunctionColumns."}, {"field_name": "functionResultUnknown", "field_sig": "static final\u00a0int functionResultUnknown", "description": "Indicates that it is not known whether the function returns\n a result or a table.\n \n A possible value for column FUNCTION_TYPE in the\n ResultSet object returned by the method\n getFunctions."}, {"field_name": "functionNoTable", "field_sig": "static final\u00a0int functionNoTable", "description": "Indicates that the function  does not return a table.\n \n A possible value for column FUNCTION_TYPE in the\n ResultSet object returned by the method\n getFunctions."}, {"field_name": "functionReturnsTable", "field_sig": "static final\u00a0int functionReturnsTable", "description": "Indicates that the function  returns a table.\n \n A possible value for column FUNCTION_TYPE in the\n ResultSet object returned by the method\n getFunctions."}], "methods": [{"method_name": "allProceduresAreCallable", "method_sig": "boolean allProceduresAreCallable()\n                          throws SQLException", "description": "Retrieves whether the current user can call all the procedures\n returned by the method getProcedures."}, {"method_name": "allTablesAreSelectable", "method_sig": "boolean allTablesAreSelectable()\n                        throws SQLException", "description": "Retrieves whether the current user can use all the tables returned\n by the method getTables in a SELECT\n statement."}, {"method_name": "getURL", "method_sig": "String getURL()\n       throws SQLException", "description": "Retrieves the URL for this DBMS."}, {"method_name": "getUserName", "method_sig": "String getUserName()\n            throws SQLException", "description": "Retrieves the user name as known to this database."}, {"method_name": "isReadOnly", "method_sig": "boolean isReadOnly()\n            throws SQLException", "description": "Retrieves whether this database is in read-only mode."}, {"method_name": "nullsAreSortedHigh", "method_sig": "boolean nullsAreSortedHigh()\n                    throws SQLException", "description": "Retrieves whether NULL values are sorted high.\n Sorted high means that NULL values\n sort higher than any other value in a domain.  In an ascending order,\n if this method returns true,  NULL values\n will appear at the end. By contrast, the method\n nullsAreSortedAtEnd indicates whether NULL values\n are sorted at the end regardless of sort order."}, {"method_name": "nullsAreSortedLow", "method_sig": "boolean nullsAreSortedLow()\n                   throws SQLException", "description": "Retrieves whether NULL values are sorted low.\n Sorted low means that NULL values\n sort lower than any other value in a domain.  In an ascending order,\n if this method returns true,  NULL values\n will appear at the beginning. By contrast, the method\n nullsAreSortedAtStart indicates whether NULL values\n are sorted at the beginning regardless of sort order."}, {"method_name": "nullsAreSortedAtStart", "method_sig": "boolean nullsAreSortedAtStart()\n                       throws SQLException", "description": "Retrieves whether NULL values are sorted at the start regardless\n of sort order."}, {"method_name": "nullsAreSortedAtEnd", "method_sig": "boolean nullsAreSortedAtEnd()\n                     throws SQLException", "description": "Retrieves whether NULL values are sorted at the end regardless of\n sort order."}, {"method_name": "getDatabaseProductName", "method_sig": "String getDatabaseProductName()\n                       throws SQLException", "description": "Retrieves the name of this database product."}, {"method_name": "getDatabaseProductVersion", "method_sig": "String getDatabaseProductVersion()\n                          throws SQLException", "description": "Retrieves the version number of this database product."}, {"method_name": "getDriverName", "method_sig": "String getDriverName()\n              throws SQLException", "description": "Retrieves the name of this JDBC driver."}, {"method_name": "getDriverVersion", "method_sig": "String getDriverVersion()\n                 throws SQLException", "description": "Retrieves the version number of this JDBC driver as a String."}, {"method_name": "getDriverMajorVersion", "method_sig": "int getDriverMajorVersion()", "description": "Retrieves this JDBC driver's major version number."}, {"method_name": "getDriverMinorVersion", "method_sig": "int getDriverMinorVersion()", "description": "Retrieves this JDBC driver's minor version number."}, {"method_name": "usesLocalFiles", "method_sig": "boolean usesLocalFiles()\n                throws SQLException", "description": "Retrieves whether this database stores tables in a local file."}, {"method_name": "usesLocalFilePerTable", "method_sig": "boolean usesLocalFilePerTable()\n                       throws SQLException", "description": "Retrieves whether this database uses a file for each table."}, {"method_name": "supportsMixedCaseIdentifiers", "method_sig": "boolean supportsMixedCaseIdentifiers()\n                              throws SQLException", "description": "Retrieves whether this database treats mixed case unquoted SQL identifiers as\n case sensitive and as a result stores them in mixed case."}, {"method_name": "storesUpperCaseIdentifiers", "method_sig": "boolean storesUpperCaseIdentifiers()\n                            throws SQLException", "description": "Retrieves whether this database treats mixed case unquoted SQL identifiers as\n case insensitive and stores them in upper case."}, {"method_name": "storesLowerCaseIdentifiers", "method_sig": "boolean storesLowerCaseIdentifiers()\n                            throws SQLException", "description": "Retrieves whether this database treats mixed case unquoted SQL identifiers as\n case insensitive and stores them in lower case."}, {"method_name": "storesMixedCaseIdentifiers", "method_sig": "boolean storesMixedCaseIdentifiers()\n                            throws SQLException", "description": "Retrieves whether this database treats mixed case unquoted SQL identifiers as\n case insensitive and stores them in mixed case."}, {"method_name": "supportsMixedCaseQuotedIdentifiers", "method_sig": "boolean supportsMixedCaseQuotedIdentifiers()\n                                    throws SQLException", "description": "Retrieves whether this database treats mixed case quoted SQL identifiers as\n case sensitive and as a result stores them in mixed case."}, {"method_name": "storesUpperCaseQuotedIdentifiers", "method_sig": "boolean storesUpperCaseQuotedIdentifiers()\n                                  throws SQLException", "description": "Retrieves whether this database treats mixed case quoted SQL identifiers as\n case insensitive and stores them in upper case."}, {"method_name": "storesLowerCaseQuotedIdentifiers", "method_sig": "boolean storesLowerCaseQuotedIdentifiers()\n                                  throws SQLException", "description": "Retrieves whether this database treats mixed case quoted SQL identifiers as\n case insensitive and stores them in lower case."}, {"method_name": "storesMixedCaseQuotedIdentifiers", "method_sig": "boolean storesMixedCaseQuotedIdentifiers()\n                                  throws SQLException", "description": "Retrieves whether this database treats mixed case quoted SQL identifiers as\n case insensitive and stores them in mixed case."}, {"method_name": "getIdentifierQuoteString", "method_sig": "String getIdentifierQuoteString()\n                         throws SQLException", "description": "Retrieves the string used to quote SQL identifiers.\n This method returns a space \" \" if identifier quoting is not supported."}, {"method_name": "getSQLKeywords", "method_sig": "String getSQLKeywords()\n               throws SQLException", "description": "Retrieves a comma-separated list of all of this database's SQL keywords\n that are NOT also SQL:2003 keywords."}, {"method_name": "getNumericFunctions", "method_sig": "String getNumericFunctions()\n                    throws SQLException", "description": "Retrieves a comma-separated list of math functions available with\n this database.  These are the Open /Open CLI math function names used in\n the JDBC function escape clause."}, {"method_name": "getStringFunctions", "method_sig": "String getStringFunctions()\n                   throws SQLException", "description": "Retrieves a comma-separated list of string functions available with\n this database.  These are the  Open Group CLI string function names used\n in the JDBC function escape clause."}, {"method_name": "getSystemFunctions", "method_sig": "String getSystemFunctions()\n                   throws SQLException", "description": "Retrieves a comma-separated list of system functions available with\n this database.  These are the  Open Group CLI system function names used\n in the JDBC function escape clause."}, {"method_name": "getTimeDateFunctions", "method_sig": "String getTimeDateFunctions()\n                     throws SQLException", "description": "Retrieves a comma-separated list of the time and date functions available\n with this database."}, {"method_name": "getSearchStringEscape", "method_sig": "String getSearchStringEscape()\n                      throws SQLException", "description": "Retrieves the string that can be used to escape wildcard characters.\n This is the string that can be used to escape '_' or '%' in\n the catalog search parameters that are a pattern (and therefore use one\n of the wildcard characters).\n\n The '_' character represents any single character;\n the '%' character represents any sequence of zero or\n more characters."}, {"method_name": "getExtraNameCharacters", "method_sig": "String getExtraNameCharacters()\n                       throws SQLException", "description": "Retrieves all the \"extra\" characters that can be used in unquoted\n identifier names (those beyond a-z, A-Z, 0-9 and _)."}, {"method_name": "supportsAlterTableWithAddColumn", "method_sig": "boolean supportsAlterTableWithAddColumn()\n                                 throws SQLException", "description": "Retrieves whether this database supports ALTER TABLE\n with add column."}, {"method_name": "supportsAlterTableWithDropColumn", "method_sig": "boolean supportsAlterTableWithDropColumn()\n                                  throws SQLException", "description": "Retrieves whether this database supports ALTER TABLE\n with drop column."}, {"method_name": "supportsColumnAliasing", "method_sig": "boolean supportsColumnAliasing()\n                        throws SQLException", "description": "Retrieves whether this database supports column aliasing.\n\n If so, the SQL AS clause can be used to provide names for\n computed columns or to provide alias names for columns as\n required."}, {"method_name": "nullPlusNonNullIsNull", "method_sig": "boolean nullPlusNonNullIsNull()\n                       throws SQLException", "description": "Retrieves whether this database supports concatenations between\n NULL and non-NULL values being\n NULL."}, {"method_name": "supportsConvert", "method_sig": "boolean supportsConvert()\n                 throws SQLException", "description": "Retrieves whether this database supports the JDBC scalar function\n CONVERT for the conversion of one JDBC type to another.\n The JDBC types are the generic SQL data types defined\n in java.sql.Types."}, {"method_name": "supportsConvert", "method_sig": "boolean supportsConvert (int fromType,\n                        int toType)\n                 throws SQLException", "description": "Retrieves whether this database supports the JDBC scalar function\n CONVERT for conversions between the JDBC types fromType\n and toType.  The JDBC types are the generic SQL data types defined\n in java.sql.Types."}, {"method_name": "supportsTableCorrelationNames", "method_sig": "boolean supportsTableCorrelationNames()\n                               throws SQLException", "description": "Retrieves whether this database supports table correlation names."}, {"method_name": "supportsDifferentTableCorrelationNames", "method_sig": "boolean supportsDifferentTableCorrelationNames()\n                                        throws SQLException", "description": "Retrieves whether, when table correlation names are supported, they\n are restricted to being different from the names of the tables."}, {"method_name": "supportsExpressionsInOrderBy", "method_sig": "boolean supportsExpressionsInOrderBy()\n                              throws SQLException", "description": "Retrieves whether this database supports expressions in\n ORDER BY lists."}, {"method_name": "supportsOrderByUnrelated", "method_sig": "boolean supportsOrderByUnrelated()\n                          throws SQLException", "description": "Retrieves whether this database supports using a column that is\n not in the SELECT statement in an\n ORDER BY clause."}, {"method_name": "supportsGroupBy", "method_sig": "boolean supportsGroupBy()\n                 throws SQLException", "description": "Retrieves whether this database supports some form of\n GROUP BY clause."}, {"method_name": "supportsGroupByUnrelated", "method_sig": "boolean supportsGroupByUnrelated()\n                          throws SQLException", "description": "Retrieves whether this database supports using a column that is\n not in the SELECT statement in a\n GROUP BY clause."}, {"method_name": "supportsGroupByBeyondSelect", "method_sig": "boolean supportsGroupByBeyondSelect()\n                             throws SQLException", "description": "Retrieves whether this database supports using columns not included in\n the SELECT statement in a GROUP BY clause\n provided that all of the columns in the SELECT statement\n are included in the GROUP BY clause."}, {"method_name": "supportsLikeEscapeClause", "method_sig": "boolean supportsLikeEscapeClause()\n                          throws SQLException", "description": "Retrieves whether this database supports specifying a\n LIKE escape clause."}, {"method_name": "supportsMultipleResultSets", "method_sig": "boolean supportsMultipleResultSets()\n                            throws SQLException", "description": "Retrieves whether this database supports getting multiple\n ResultSet objects from a single call to the\n method execute."}, {"method_name": "supportsMultipleTransactions", "method_sig": "boolean supportsMultipleTransactions()\n                              throws SQLException", "description": "Retrieves whether this database allows having multiple\n transactions open at once (on different connections)."}, {"method_name": "supportsNonNullableColumns", "method_sig": "boolean supportsNonNullableColumns()\n                            throws SQLException", "description": "Retrieves whether columns in this database may be defined as non-nullable."}, {"method_name": "supportsMinimumSQLGrammar", "method_sig": "boolean supportsMinimumSQLGrammar()\n                           throws SQLException", "description": "Retrieves whether this database supports the ODBC Minimum SQL grammar."}, {"method_name": "supportsCoreSQLGrammar", "method_sig": "boolean supportsCoreSQLGrammar()\n                        throws SQLException", "description": "Retrieves whether this database supports the ODBC Core SQL grammar."}, {"method_name": "supportsExtendedSQLGrammar", "method_sig": "boolean supportsExtendedSQLGrammar()\n                            throws SQLException", "description": "Retrieves whether this database supports the ODBC Extended SQL grammar."}, {"method_name": "supportsANSI92EntryLevelSQL", "method_sig": "boolean supportsANSI92EntryLevelSQL()\n                             throws SQLException", "description": "Retrieves whether this database supports the ANSI92 entry level SQL\n grammar."}, {"method_name": "supportsANSI92IntermediateSQL", "method_sig": "boolean supportsANSI92IntermediateSQL()\n                               throws SQLException", "description": "Retrieves whether this database supports the ANSI92 intermediate SQL grammar supported."}, {"method_name": "supportsANSI92FullSQL", "method_sig": "boolean supportsANSI92FullSQL()\n                       throws SQLException", "description": "Retrieves whether this database supports the ANSI92 full SQL grammar supported."}, {"method_name": "supportsIntegrityEnhancementFacility", "method_sig": "boolean supportsIntegrityEnhancementFacility()\n                                      throws SQLException", "description": "Retrieves whether this database supports the SQL Integrity\n Enhancement Facility."}, {"method_name": "supportsOuterJoins", "method_sig": "boolean supportsOuterJoins()\n                    throws SQLException", "description": "Retrieves whether this database supports some form of outer join."}, {"method_name": "supportsFullOuterJoins", "method_sig": "boolean supportsFullOuterJoins()\n                        throws SQLException", "description": "Retrieves whether this database supports full nested outer joins."}, {"method_name": "supportsLimitedOuterJoins", "method_sig": "boolean supportsLimitedOuterJoins()\n                           throws SQLException", "description": "Retrieves whether this database provides limited support for outer\n joins.  (This will be true if the method\n supportsFullOuterJoins returns true)."}, {"method_name": "getSchemaTerm", "method_sig": "String getSchemaTerm()\n              throws SQLException", "description": "Retrieves the database vendor's preferred term for \"schema\"."}, {"method_name": "getProcedureTerm", "method_sig": "String getProcedureTerm()\n                 throws SQLException", "description": "Retrieves the database vendor's preferred term for \"procedure\"."}, {"method_name": "getCatalogTerm", "method_sig": "String getCatalogTerm()\n               throws SQLException", "description": "Retrieves the database vendor's preferred term for \"catalog\"."}, {"method_name": "isCatalogAtStart", "method_sig": "boolean isCatalogAtStart()\n                  throws SQLException", "description": "Retrieves whether a catalog appears at the start of a fully qualified\n table name.  If not, the catalog appears at the end."}, {"method_name": "getCatalogSeparator", "method_sig": "String getCatalogSeparator()\n                    throws SQLException", "description": "Retrieves the String that this database uses as the\n separator between a catalog and table name."}, {"method_name": "supportsSchemasInDataManipulation", "method_sig": "boolean supportsSchemasInDataManipulation()\n                                   throws SQLException", "description": "Retrieves whether a schema name can be used in a data manipulation statement."}, {"method_name": "supportsSchemasInProcedureCalls", "method_sig": "boolean supportsSchemasInProcedureCalls()\n                                 throws SQLException", "description": "Retrieves whether a schema name can be used in a procedure call statement."}, {"method_name": "supportsSchemasInTableDefinitions", "method_sig": "boolean supportsSchemasInTableDefinitions()\n                                   throws SQLException", "description": "Retrieves whether a schema name can be used in a table definition statement."}, {"method_name": "supportsSchemasInIndexDefinitions", "method_sig": "boolean supportsSchemasInIndexDefinitions()\n                                   throws SQLException", "description": "Retrieves whether a schema name can be used in an index definition statement."}, {"method_name": "supportsSchemasInPrivilegeDefinitions", "method_sig": "boolean supportsSchemasInPrivilegeDefinitions()\n                                       throws SQLException", "description": "Retrieves whether a schema name can be used in a privilege definition statement."}, {"method_name": "supportsCatalogsInDataManipulation", "method_sig": "boolean supportsCatalogsInDataManipulation()\n                                    throws SQLException", "description": "Retrieves whether a catalog name can be used in a data manipulation statement."}, {"method_name": "supportsCatalogsInProcedureCalls", "method_sig": "boolean supportsCatalogsInProcedureCalls()\n                                  throws SQLException", "description": "Retrieves whether a catalog name can be used in a procedure call statement."}, {"method_name": "supportsCatalogsInTableDefinitions", "method_sig": "boolean supportsCatalogsInTableDefinitions()\n                                    throws SQLException", "description": "Retrieves whether a catalog name can be used in a table definition statement."}, {"method_name": "supportsCatalogsInIndexDefinitions", "method_sig": "boolean supportsCatalogsInIndexDefinitions()\n                                    throws SQLException", "description": "Retrieves whether a catalog name can be used in an index definition statement."}, {"method_name": "supportsCatalogsInPrivilegeDefinitions", "method_sig": "boolean supportsCatalogsInPrivilegeDefinitions()\n                                        throws SQLException", "description": "Retrieves whether a catalog name can be used in a privilege definition statement."}, {"method_name": "supportsPositionedDelete", "method_sig": "boolean supportsPositionedDelete()\n                          throws SQLException", "description": "Retrieves whether this database supports positioned DELETE\n statements."}, {"method_name": "supportsPositionedUpdate", "method_sig": "boolean supportsPositionedUpdate()\n                          throws SQLException", "description": "Retrieves whether this database supports positioned UPDATE\n statements."}, {"method_name": "supportsSelectForUpdate", "method_sig": "boolean supportsSelectForUpdate()\n                         throws SQLException", "description": "Retrieves whether this database supports SELECT FOR UPDATE\n statements."}, {"method_name": "supportsStoredProcedures", "method_sig": "boolean supportsStoredProcedures()\n                          throws SQLException", "description": "Retrieves whether this database supports stored procedure calls\n that use the stored procedure escape syntax."}, {"method_name": "supportsSubqueriesInComparisons", "method_sig": "boolean supportsSubqueriesInComparisons()\n                                 throws SQLException", "description": "Retrieves whether this database supports subqueries in comparison\n expressions."}, {"method_name": "supportsSubqueriesInExists", "method_sig": "boolean supportsSubqueriesInExists()\n                            throws SQLException", "description": "Retrieves whether this database supports subqueries in\n EXISTS expressions."}, {"method_name": "supportsSubqueriesInIns", "method_sig": "boolean supportsSubqueriesInIns()\n                         throws SQLException", "description": "Retrieves whether this database supports subqueries in\n IN expressions."}, {"method_name": "supportsSubqueriesInQuantifieds", "method_sig": "boolean supportsSubqueriesInQuantifieds()\n                                 throws SQLException", "description": "Retrieves whether this database supports subqueries in quantified\n expressions."}, {"method_name": "supportsCorrelatedSubqueries", "method_sig": "boolean supportsCorrelatedSubqueries()\n                              throws SQLException", "description": "Retrieves whether this database supports correlated subqueries."}, {"method_name": "supportsUnion", "method_sig": "boolean supportsUnion()\n               throws SQLException", "description": "Retrieves whether this database supports SQL UNION."}, {"method_name": "supportsUnionAll", "method_sig": "boolean supportsUnionAll()\n                  throws SQLException", "description": "Retrieves whether this database supports SQL UNION ALL."}, {"method_name": "supportsOpenCursorsAcrossCommit", "method_sig": "boolean supportsOpenCursorsAcrossCommit()\n                                 throws SQLException", "description": "Retrieves whether this database supports keeping cursors open\n across commits."}, {"method_name": "supportsOpenCursorsAcrossRollback", "method_sig": "boolean supportsOpenCursorsAcrossRollback()\n                                   throws SQLException", "description": "Retrieves whether this database supports keeping cursors open\n across rollbacks."}, {"method_name": "supportsOpenStatementsAcrossCommit", "method_sig": "boolean supportsOpenStatementsAcrossCommit()\n                                    throws SQLException", "description": "Retrieves whether this database supports keeping statements open\n across commits."}, {"method_name": "supportsOpenStatementsAcrossRollback", "method_sig": "boolean supportsOpenStatementsAcrossRollback()\n                                      throws SQLException", "description": "Retrieves whether this database supports keeping statements open\n across rollbacks."}, {"method_name": "getMaxBinaryLiteralLength", "method_sig": "int getMaxBinaryLiteralLength()\n                       throws SQLException", "description": "Retrieves the maximum number of hex characters this database allows in an\n inline binary literal."}, {"method_name": "getMaxCharLiteralLength", "method_sig": "int getMaxCharLiteralLength()\n                     throws SQLException", "description": "Retrieves the maximum number of characters this database allows\n for a character literal."}, {"method_name": "getMaxColumnNameLength", "method_sig": "int getMaxColumnNameLength()\n                    throws SQLException", "description": "Retrieves the maximum number of characters this database allows\n for a column name."}, {"method_name": "getMaxColumnsInGroupBy", "method_sig": "int getMaxColumnsInGroupBy()\n                    throws SQLException", "description": "Retrieves the maximum number of columns this database allows in a\n GROUP BY clause."}, {"method_name": "getMaxColumnsInIndex", "method_sig": "int getMaxColumnsInIndex()\n                  throws SQLException", "description": "Retrieves the maximum number of columns this database allows in an index."}, {"method_name": "getMaxColumnsInOrderBy", "method_sig": "int getMaxColumnsInOrderBy()\n                    throws SQLException", "description": "Retrieves the maximum number of columns this database allows in an\n ORDER BY clause."}, {"method_name": "getMaxColumnsInSelect", "method_sig": "int getMaxColumnsInSelect()\n                   throws SQLException", "description": "Retrieves the maximum number of columns this database allows in a\n SELECT list."}, {"method_name": "getMaxColumnsInTable", "method_sig": "int getMaxColumnsInTable()\n                  throws SQLException", "description": "Retrieves the maximum number of columns this database allows in a table."}, {"method_name": "getMaxConnections", "method_sig": "int getMaxConnections()\n               throws SQLException", "description": "Retrieves the maximum number of concurrent connections to this\n database that are possible."}, {"method_name": "getMaxCursorNameLength", "method_sig": "int getMaxCursorNameLength()\n                    throws SQLException", "description": "Retrieves the maximum number of characters that this database allows in a\n cursor name."}, {"method_name": "getMaxIndexLength", "method_sig": "int getMaxIndexLength()\n               throws SQLException", "description": "Retrieves the maximum number of bytes this database allows for an\n index, including all of the parts of the index."}, {"method_name": "getMaxSchemaNameLength", "method_sig": "int getMaxSchemaNameLength()\n                    throws SQLException", "description": "Retrieves the maximum number of characters that this database allows in a\n schema name."}, {"method_name": "getMaxProcedureNameLength", "method_sig": "int getMaxProcedureNameLength()\n                       throws SQLException", "description": "Retrieves the maximum number of characters that this database allows in a\n procedure name."}, {"method_name": "getMaxCatalogNameLength", "method_sig": "int getMaxCatalogNameLength()\n                     throws SQLException", "description": "Retrieves the maximum number of characters that this database allows in a\n catalog name."}, {"method_name": "getMaxRowSize", "method_sig": "int getMaxRowSize()\n           throws SQLException", "description": "Retrieves the maximum number of bytes this database allows in\n a single row."}, {"method_name": "doesMaxRowSizeIncludeBlobs", "method_sig": "boolean doesMaxRowSizeIncludeBlobs()\n                            throws SQLException", "description": "Retrieves whether the return value for the method\n getMaxRowSize includes the SQL data types\n LONGVARCHAR and LONGVARBINARY."}, {"method_name": "getMaxStatementLength", "method_sig": "int getMaxStatementLength()\n                   throws SQLException", "description": "Retrieves the maximum number of characters this database allows in\n an SQL statement."}, {"method_name": "getMaxStatements", "method_sig": "int getMaxStatements()\n              throws SQLException", "description": "Retrieves the maximum number of active statements to this database\n that can be open at the same time."}, {"method_name": "getMaxTableNameLength", "method_sig": "int getMaxTableNameLength()\n                   throws SQLException", "description": "Retrieves the maximum number of characters this database allows in\n a table name."}, {"method_name": "getMaxTablesInSelect", "method_sig": "int getMaxTablesInSelect()\n                  throws SQLException", "description": "Retrieves the maximum number of tables this database allows in a\n SELECT statement."}, {"method_name": "getMaxUserNameLength", "method_sig": "int getMaxUserNameLength()\n                  throws SQLException", "description": "Retrieves the maximum number of characters this database allows in\n a user name."}, {"method_name": "getDefaultTransactionIsolation", "method_sig": "int getDefaultTransactionIsolation()\n                            throws SQLException", "description": "Retrieves this database's default transaction isolation level.  The\n possible values are defined in java.sql.Connection."}, {"method_name": "supportsTransactions", "method_sig": "boolean supportsTransactions()\n                      throws SQLException", "description": "Retrieves whether this database supports transactions. If not, invoking the\n method commit is a noop, and the isolation level is\n TRANSACTION_NONE."}, {"method_name": "supportsTransactionIsolationLevel", "method_sig": "boolean supportsTransactionIsolationLevel (int level)\n                                   throws SQLException", "description": "Retrieves whether this database supports the given transaction isolation level."}, {"method_name": "supportsDataDefinitionAndDataManipulationTransactions", "method_sig": "boolean supportsDataDefinitionAndDataManipulationTransactions()\n                                                       throws SQLException", "description": "Retrieves whether this database supports both data definition and\n data manipulation statements within a transaction."}, {"method_name": "supportsDataManipulationTransactionsOnly", "method_sig": "boolean supportsDataManipulationTransactionsOnly()\n                                          throws SQLException", "description": "Retrieves whether this database supports only data manipulation\n statements within a transaction."}, {"method_name": "dataDefinitionCausesTransactionCommit", "method_sig": "boolean dataDefinitionCausesTransactionCommit()\n                                       throws SQLException", "description": "Retrieves whether a data definition statement within a transaction forces\n the transaction to commit."}, {"method_name": "dataDefinitionIgnoredInTransactions", "method_sig": "boolean dataDefinitionIgnoredInTransactions()\n                                     throws SQLException", "description": "Retrieves whether this database ignores a data definition statement\n within a transaction."}, {"method_name": "getProcedures", "method_sig": "ResultSet getProcedures (String catalog,\n                        String schemaPattern,\n                        String procedureNamePattern)\n                 throws SQLException", "description": "Retrieves a description of the stored procedures available in the given\n catalog.\n \n Only procedure descriptions matching the schema and\n procedure name criteria are returned.  They are ordered by\n PROCEDURE_CAT, PROCEDURE_SCHEM,\n PROCEDURE_NAME and SPECIFIC_ NAME.\n\n Each procedure description has the following columns:\n  \nPROCEDURE_CAT String => procedure catalog (may be null)\n  PROCEDURE_SCHEM String => procedure schema (may be null)\n  PROCEDURE_NAME String => procedure name\n   reserved for future use\n   reserved for future use\n   reserved for future use\n  REMARKS String => explanatory comment on the procedure\n  PROCEDURE_TYPE short => kind of procedure:\n      \n procedureResultUnknown - Cannot determine if  a return value\n       will be returned\n       procedureNoResult - Does not return a return value\n       procedureReturnsResult - Returns a return value\n      \nSPECIFIC_NAME String  => The name which uniquely identifies this\n procedure within its schema.\n  \n\n A user may not have permissions to execute any of the procedures that are\n returned by getProcedures"}, {"method_name": "getProcedureColumns", "method_sig": "ResultSet getProcedureColumns (String catalog,\n                              String schemaPattern,\n                              String procedureNamePattern,\n                              String columnNamePattern)\n                       throws SQLException", "description": "Retrieves a description of the given catalog's stored procedure parameter\n and result columns.\n\n Only descriptions matching the schema, procedure and\n parameter name criteria are returned.  They are ordered by\n PROCEDURE_CAT, PROCEDURE_SCHEM, PROCEDURE_NAME and SPECIFIC_NAME. Within this, the return value,\n if any, is first. Next are the parameter descriptions in call\n order. The column descriptions follow in column number order.\n\n Each row in the ResultSet is a parameter description or\n column description with the following fields:\n  \nPROCEDURE_CAT String => procedure catalog (may be null)\n  PROCEDURE_SCHEM String => procedure schema (may be null)\n  PROCEDURE_NAME String => procedure name\n  COLUMN_NAME String => column/parameter name\n  COLUMN_TYPE Short => kind of column/parameter:\n      \n procedureColumnUnknown - nobody knows\n       procedureColumnIn - IN parameter\n       procedureColumnInOut - INOUT parameter\n       procedureColumnOut - OUT parameter\n       procedureColumnReturn - procedure return value\n       procedureColumnResult - result column in ResultSet\n\nDATA_TYPE int => SQL type from java.sql.Types\n  TYPE_NAME String => SQL type name, for a UDT type the\n  type name is fully qualified\n  PRECISION int => precision\n  LENGTH int => length in bytes of data\n  SCALE short => scale -  null is returned for data types where\n SCALE is not applicable.\n  RADIX short => radix\n  NULLABLE short => can it contain NULL.\n      \n procedureNoNulls - does not allow NULL values\n       procedureNullable - allows NULL values\n       procedureNullableUnknown - nullability unknown\n      \nREMARKS String => comment describing parameter/column\n  COLUMN_DEF String => default value for the column, which should be interpreted as a string when the value is enclosed in single quotes (may be null)\n      \n The string NULL (not enclosed in quotes) - if NULL was specified as the default value\n       TRUNCATE (not enclosed in quotes)        - if the specified default value cannot be represented without truncation\n       NULL                                     - if a default value was not specified\n      \nSQL_DATA_TYPE int  => reserved for future use\n  SQL_DATETIME_SUB int  => reserved for future use\n  CHAR_OCTET_LENGTH int  => the maximum length of binary and character based columns.  For any other datatype the returned value is a\n NULL\n  ORDINAL_POSITION int  => the ordinal position, starting from 1, for the input and output parameters for a procedure. A value of 0\nis returned if this row describes the procedure's return value.  For result set columns, it is the\nordinal position of the column in the result set starting from 1.  If there are\nmultiple result sets, the column ordinal positions are implementation\n defined.\n  IS_NULLABLE String  => ISO rules are used to determine the nullability for a column.\n       \n YES           --- if the column can include NULLs\n        NO            --- if the column cannot include NULLs\n        empty string  --- if the nullability for the\n column is unknown\n       \nSPECIFIC_NAME String  => the name which uniquely identifies this procedure within its schema.\n  \nNote: Some databases may not return the column\n descriptions for a procedure.\n\n The PRECISION column represents the specified column size for the given column.\n For numeric data, this is the maximum precision.  For character data, this is the length in characters.\n For datetime datatypes, this is the length in characters of the String representation (assuming the\n maximum allowed precision of the fractional seconds component). For binary data, this is the length in bytes.  For the ROWID datatype,\n this is the length in bytes. Null is returned for data types where the\n column size is not applicable."}, {"method_name": "getTables", "method_sig": "ResultSet getTables (String catalog,\n                    String schemaPattern,\n                    String tableNamePattern,\n                    String[] types)\n             throws SQLException", "description": "Retrieves a description of the tables available in the given catalog.\n Only table descriptions matching the catalog, schema, table\n name and type criteria are returned.  They are ordered by\n TABLE_TYPE, TABLE_CAT,\n TABLE_SCHEM and TABLE_NAME.\n \n Each table description has the following columns:\n  \nTABLE_CAT String => table catalog (may be null)\n  TABLE_SCHEM String => table schema (may be null)\n  TABLE_NAME String => table name\n  TABLE_TYPE String => table type.  Typical types are \"TABLE\",\n                  \"VIEW\", \"SYSTEM TABLE\", \"GLOBAL TEMPORARY\",\n                  \"LOCAL TEMPORARY\", \"ALIAS\", \"SYNONYM\".\n  REMARKS String => explanatory comment on the table (may be null)\n  TYPE_CAT String => the types catalog (may be null)\n  TYPE_SCHEM String => the types schema (may be null)\n  TYPE_NAME String => type name (may be null)\n  SELF_REFERENCING_COL_NAME String => name of the designated\n                  \"identifier\" column of a typed table (may be null)\n  REF_GENERATION String => specifies how values in\n                  SELF_REFERENCING_COL_NAME are created. Values are\n                  \"SYSTEM\", \"USER\", \"DERIVED\". (may be null)\n  \nNote: Some databases may not return information for\n all tables."}, {"method_name": "getSchemas", "method_sig": "ResultSet getSchemas()\n              throws SQLException", "description": "Retrieves the schema names available in this database.  The results\n are ordered by TABLE_CATALOG and\n TABLE_SCHEM.\n\n The schema columns are:\n  \nTABLE_SCHEM String => schema name\n  TABLE_CATALOG String => catalog name (may be null)\n  "}, {"method_name": "getCatalogs", "method_sig": "ResultSet getCatalogs()\n               throws SQLException", "description": "Retrieves the catalog names available in this database.  The results\n are ordered by catalog name.\n\n The catalog column is:\n  \nTABLE_CAT String => catalog name\n  "}, {"method_name": "getTableTypes", "method_sig": "ResultSet getTableTypes()\n                 throws SQLException", "description": "Retrieves the table types available in this database.  The results\n are ordered by table type.\n\n The table type is:\n  \nTABLE_TYPE String => table type.  Typical types are \"TABLE\",\n                  \"VIEW\", \"SYSTEM TABLE\", \"GLOBAL TEMPORARY\",\n                  \"LOCAL TEMPORARY\", \"ALIAS\", \"SYNONYM\".\n  "}, {"method_name": "getColumns", "method_sig": "ResultSet getColumns (String catalog,\n                     String schemaPattern,\n                     String tableNamePattern,\n                     String columnNamePattern)\n              throws SQLException", "description": "Retrieves a description of table columns available in\n the specified catalog.\n\n Only column descriptions matching the catalog, schema, table\n and column name criteria are returned.  They are ordered by\n TABLE_CAT,TABLE_SCHEM,\n TABLE_NAME, and ORDINAL_POSITION.\n\n Each column description has the following columns:\n  \nTABLE_CAT String => table catalog (may be null)\n  TABLE_SCHEM String => table schema (may be null)\n  TABLE_NAME String => table name\n  COLUMN_NAME String => column name\n  DATA_TYPE int => SQL type from java.sql.Types\n  TYPE_NAME String => Data source dependent type name,\n  for a UDT the type name is fully qualified\n  COLUMN_SIZE int => column size.\n  BUFFER_LENGTH is not used.\n  DECIMAL_DIGITS int => the number of fractional digits. Null is returned for data types where\n DECIMAL_DIGITS is not applicable.\n  NUM_PREC_RADIX int => Radix (typically either 10 or 2)\n  NULLABLE int => is NULL allowed.\n      \n columnNoNulls - might not allow NULL values\n       columnNullable - definitely allows NULL values\n       columnNullableUnknown - nullability unknown\n      \nREMARKS String => comment describing column (may be null)\n  COLUMN_DEF String => default value for the column, which should be interpreted as a string when the value is enclosed in single quotes (may be null)\n  SQL_DATA_TYPE int => unused\n  SQL_DATETIME_SUB int => unused\n  CHAR_OCTET_LENGTH int => for char types the\n       maximum number of bytes in the column\n  ORDINAL_POSITION int => index of column in table\n      (starting at 1)\n  IS_NULLABLE String  => ISO rules are used to determine the nullability for a column.\n       \n YES           --- if the column can include NULLs\n        NO            --- if the column cannot include NULLs\n        empty string  --- if the nullability for the\n column is unknown\n       \nSCOPE_CATALOG String => catalog of table that is the scope\n      of a reference attribute (null if DATA_TYPE isn't REF)\n  SCOPE_SCHEMA String => schema of table that is the scope\n      of a reference attribute (null if the DATA_TYPE isn't REF)\n  SCOPE_TABLE String => table name that this the scope\n      of a reference attribute (null if the DATA_TYPE isn't REF)\n  SOURCE_DATA_TYPE short => source type of a distinct type or user-generated\n      Ref type, SQL type from java.sql.Types (null if DATA_TYPE\n      isn't DISTINCT or user-generated REF)\n   IS_AUTOINCREMENT String  => Indicates whether this column is auto incremented\n       \n YES           --- if the column is auto incremented\n        NO            --- if the column is not auto incremented\n        empty string  --- if it cannot be determined whether the column is auto incremented\n       \nIS_GENERATEDCOLUMN String  => Indicates whether this is a generated column\n       \n YES           --- if this a generated column\n        NO            --- if this not a generated column\n        empty string  --- if it cannot be determined whether this is a generated column\n       \n\nThe COLUMN_SIZE column specifies the column size for the given column.\n For numeric data, this is the maximum precision.  For character data, this is the length in characters.\n For datetime datatypes, this is the length in characters of the String representation (assuming the\n maximum allowed precision of the fractional seconds component). For binary data, this is the length in bytes.  For the ROWID datatype,\n this is the length in bytes. Null is returned for data types where the\n column size is not applicable."}, {"method_name": "getColumnPrivileges", "method_sig": "ResultSet getColumnPrivileges (String catalog,\n                              String schema,\n                              String table,\n                              String columnNamePattern)\n                       throws SQLException", "description": "Retrieves a description of the access rights for a table's columns.\n\n Only privileges matching the column name criteria are\n returned.  They are ordered by COLUMN_NAME and PRIVILEGE.\n\n Each privilege description has the following columns:\n  \nTABLE_CAT String => table catalog (may be null)\n  TABLE_SCHEM String => table schema (may be null)\n  TABLE_NAME String => table name\n  COLUMN_NAME String => column name\n  GRANTOR String => grantor of access (may be null)\n  GRANTEE String => grantee of access\n  PRIVILEGE String => name of access (SELECT,\n      INSERT, UPDATE, REFERENCES, ...)\n  IS_GRANTABLE String => \"YES\" if grantee is permitted\n      to grant to others; \"NO\" if not; null if unknown\n  "}, {"method_name": "getTablePrivileges", "method_sig": "ResultSet getTablePrivileges (String catalog,\n                             String schemaPattern,\n                             String tableNamePattern)\n                      throws SQLException", "description": "Retrieves a description of the access rights for each table available\n in a catalog. Note that a table privilege applies to one or\n more columns in the table. It would be wrong to assume that\n this privilege applies to all columns (this may be true for\n some systems but is not true for all.)\n\n Only privileges matching the schema and table name\n criteria are returned.  They are ordered by\n TABLE_CAT,\n TABLE_SCHEM, TABLE_NAME,\n and PRIVILEGE.\n\n Each privilege description has the following columns:\n  \nTABLE_CAT String => table catalog (may be null)\n  TABLE_SCHEM String => table schema (may be null)\n  TABLE_NAME String => table name\n  GRANTOR String => grantor of access (may be null)\n  GRANTEE String => grantee of access\n  PRIVILEGE String => name of access (SELECT,\n      INSERT, UPDATE, REFERENCES, ...)\n  IS_GRANTABLE String => \"YES\" if grantee is permitted\n      to grant to others; \"NO\" if not; null if unknown\n  "}, {"method_name": "getBestRowIdentifier", "method_sig": "ResultSet getBestRowIdentifier (String catalog,\n                               String schema,\n                               String table,\n                               int scope,\n                               boolean nullable)\n                        throws SQLException", "description": "Retrieves a description of a table's optimal set of columns that\n uniquely identifies a row. They are ordered by SCOPE.\n\n Each column description has the following columns:\n  \nSCOPE short => actual scope of result\n      \n bestRowTemporary - very temporary, while using row\n       bestRowTransaction - valid for remainder of current transaction\n       bestRowSession - valid for remainder of current session\n      \nCOLUMN_NAME String => column name\n  DATA_TYPE int => SQL data type from java.sql.Types\n  TYPE_NAME String => Data source dependent type name,\n  for a UDT the type name is fully qualified\n  COLUMN_SIZE int => precision\n  BUFFER_LENGTH int => not used\n  DECIMAL_DIGITS short  => scale - Null is returned for data types where\n DECIMAL_DIGITS is not applicable.\n  PSEUDO_COLUMN short => is this a pseudo column\n      like an Oracle ROWID\n      \n bestRowUnknown - may or may not be pseudo column\n       bestRowNotPseudo - is NOT a pseudo column\n       bestRowPseudo - is a pseudo column\n      \n\nThe COLUMN_SIZE column represents the specified column size for the given column.\n For numeric data, this is the maximum precision.  For character data, this is the length in characters.\n For datetime datatypes, this is the length in characters of the String representation (assuming the\n maximum allowed precision of the fractional seconds component). For binary data, this is the length in bytes.  For the ROWID datatype,\n this is the length in bytes. Null is returned for data types where the\n column size is not applicable."}, {"method_name": "getVersionColumns", "method_sig": "ResultSet getVersionColumns (String catalog,\n                            String schema,\n                            String table)\n                     throws SQLException", "description": "Retrieves a description of a table's columns that are automatically\n updated when any value in a row is updated.  They are\n unordered.\n\n Each column description has the following columns:\n  \nSCOPE short => is not used\n  COLUMN_NAME String => column name\n  DATA_TYPE int => SQL data type from java.sql.Types\nTYPE_NAME String => Data source-dependent type name\n  COLUMN_SIZE int => precision\n  BUFFER_LENGTH int => length of column value in bytes\n  DECIMAL_DIGITS short  => scale - Null is returned for data types where\n DECIMAL_DIGITS is not applicable.\n  PSEUDO_COLUMN short => whether this is pseudo column\n      like an Oracle ROWID\n      \n versionColumnUnknown - may or may not be pseudo column\n       versionColumnNotPseudo - is NOT a pseudo column\n       versionColumnPseudo - is a pseudo column\n      \n\nThe COLUMN_SIZE column represents the specified column size for the given column.\n For numeric data, this is the maximum precision.  For character data, this is the length in characters.\n For datetime datatypes, this is the length in characters of the String representation (assuming the\n maximum allowed precision of the fractional seconds component). For binary data, this is the length in bytes.  For the ROWID datatype,\n this is the length in bytes. Null is returned for data types where the\n column size is not applicable."}, {"method_name": "getPrimaryKeys", "method_sig": "ResultSet getPrimaryKeys (String catalog,\n                         String schema,\n                         String table)\n                  throws SQLException", "description": "Retrieves a description of the given table's primary key columns.  They\n are ordered by COLUMN_NAME.\n\n Each primary key column description has the following columns:\n  \nTABLE_CAT String => table catalog (may be null)\n  TABLE_SCHEM String => table schema (may be null)\n  TABLE_NAME String => table name\n  COLUMN_NAME String => column name\n  KEY_SEQ short => sequence number within primary key( a value\n  of 1 represents the first column of the primary key, a value of 2 would\n  represent the second column within the primary key).\n  PK_NAME String => primary key name (may be null)\n  "}, {"method_name": "getImportedKeys", "method_sig": "ResultSet getImportedKeys (String catalog,\n                          String schema,\n                          String table)\n                   throws SQLException", "description": "Retrieves a description of the primary key columns that are\n referenced by the given table's foreign key columns (the primary keys\n imported by a table).  They are ordered by PKTABLE_CAT,\n PKTABLE_SCHEM, PKTABLE_NAME, and KEY_SEQ.\n\n Each primary key column description has the following columns:\n  \nPKTABLE_CAT String => primary key table catalog\n      being imported (may be null)\n  PKTABLE_SCHEM String => primary key table schema\n      being imported (may be null)\n  PKTABLE_NAME String => primary key table name\n      being imported\n  PKCOLUMN_NAME String => primary key column name\n      being imported\n  FKTABLE_CAT String => foreign key table catalog (may be null)\n  FKTABLE_SCHEM String => foreign key table schema (may be null)\n  FKTABLE_NAME String => foreign key table name\n  FKCOLUMN_NAME String => foreign key column name\n  KEY_SEQ short => sequence number within a foreign key( a value\n  of 1 represents the first column of the foreign key, a value of 2 would\n  represent the second column within the foreign key).\n  UPDATE_RULE short => What happens to a\n       foreign key when the primary key is updated:\n      \n importedNoAction - do not allow update of primary\n               key if it has been imported\n       importedKeyCascade - change imported key to agree\n               with primary key update\n       importedKeySetNull - change imported key to NULL\n               if its primary key has been updated\n       importedKeySetDefault - change imported key to default values\n               if its primary key has been updated\n       importedKeyRestrict - same as importedKeyNoAction\n                                 (for ODBC 2.x compatibility)\n      \nDELETE_RULE short => What happens to\n      the foreign key when primary is deleted.\n      \n importedKeyNoAction - do not allow delete of primary\n               key if it has been imported\n       importedKeyCascade - delete rows that import a deleted key\n       importedKeySetNull - change imported key to NULL if\n               its primary key has been deleted\n       importedKeyRestrict - same as importedKeyNoAction\n                                 (for ODBC 2.x compatibility)\n       importedKeySetDefault - change imported key to default if\n               its primary key has been deleted\n      \nFK_NAME String => foreign key name (may be null)\n  PK_NAME String => primary key name (may be null)\n  DEFERRABILITY short => can the evaluation of foreign key\n      constraints be deferred until commit\n      \n importedKeyInitiallyDeferred - see SQL92 for definition\n       importedKeyInitiallyImmediate - see SQL92 for definition\n       importedKeyNotDeferrable - see SQL92 for definition\n      \n"}, {"method_name": "getExportedKeys", "method_sig": "ResultSet getExportedKeys (String catalog,\n                          String schema,\n                          String table)\n                   throws SQLException", "description": "Retrieves a description of the foreign key columns that reference the\n given table's primary key columns (the foreign keys exported by a\n table).  They are ordered by FKTABLE_CAT, FKTABLE_SCHEM,\n FKTABLE_NAME, and KEY_SEQ.\n\n Each foreign key column description has the following columns:\n  \nPKTABLE_CAT String => primary key table catalog (may be null)\n  PKTABLE_SCHEM String => primary key table schema (may be null)\n  PKTABLE_NAME String => primary key table name\n  PKCOLUMN_NAME String => primary key column name\n  FKTABLE_CAT String => foreign key table catalog (may be null)\n      being exported (may be null)\n  FKTABLE_SCHEM String => foreign key table schema (may be null)\n      being exported (may be null)\n  FKTABLE_NAME String => foreign key table name\n      being exported\n  FKCOLUMN_NAME String => foreign key column name\n      being exported\n  KEY_SEQ short => sequence number within foreign key( a value\n  of 1 represents the first column of the foreign key, a value of 2 would\n  represent the second column within the foreign key).\n  UPDATE_RULE short => What happens to\n       foreign key when primary is updated:\n      \n importedNoAction - do not allow update of primary\n               key if it has been imported\n       importedKeyCascade - change imported key to agree\n               with primary key update\n       importedKeySetNull - change imported key to NULL if\n               its primary key has been updated\n       importedKeySetDefault - change imported key to default values\n               if its primary key has been updated\n       importedKeyRestrict - same as importedKeyNoAction\n                                 (for ODBC 2.x compatibility)\n      \nDELETE_RULE short => What happens to\n      the foreign key when primary is deleted.\n      \n importedKeyNoAction - do not allow delete of primary\n               key if it has been imported\n       importedKeyCascade - delete rows that import a deleted key\n       importedKeySetNull - change imported key to NULL if\n               its primary key has been deleted\n       importedKeyRestrict - same as importedKeyNoAction\n                                 (for ODBC 2.x compatibility)\n       importedKeySetDefault - change imported key to default if\n               its primary key has been deleted\n      \nFK_NAME String => foreign key name (may be null)\n  PK_NAME String => primary key name (may be null)\n  DEFERRABILITY short => can the evaluation of foreign key\n      constraints be deferred until commit\n      \n importedKeyInitiallyDeferred - see SQL92 for definition\n       importedKeyInitiallyImmediate - see SQL92 for definition\n       importedKeyNotDeferrable - see SQL92 for definition\n      \n"}, {"method_name": "getCrossReference", "method_sig": "ResultSet getCrossReference (String parentCatalog,\n                            String parentSchema,\n                            String parentTable,\n                            String foreignCatalog,\n                            String foreignSchema,\n                            String foreignTable)\n                     throws SQLException", "description": "Retrieves a description of the foreign key columns in the given foreign key\n table that reference the primary key or the columns representing a unique constraint of the  parent table (could be the same or a different table).\n The number of columns returned from the parent table must match the number of\n columns that make up the foreign key.  They\n are ordered by FKTABLE_CAT, FKTABLE_SCHEM, FKTABLE_NAME, and\n KEY_SEQ.\n\n Each foreign key column description has the following columns:\n  \nPKTABLE_CAT String => parent key table catalog (may be null)\n  PKTABLE_SCHEM String => parent key table schema (may be null)\n  PKTABLE_NAME String => parent key table name\n  PKCOLUMN_NAME String => parent key column name\n  FKTABLE_CAT String => foreign key table catalog (may be null)\n      being exported (may be null)\n  FKTABLE_SCHEM String => foreign key table schema (may be null)\n      being exported (may be null)\n  FKTABLE_NAME String => foreign key table name\n      being exported\n  FKCOLUMN_NAME String => foreign key column name\n      being exported\n  KEY_SEQ short => sequence number within foreign key( a value\n  of 1 represents the first column of the foreign key, a value of 2 would\n  represent the second column within the foreign key).\n  UPDATE_RULE short => What happens to\n       foreign key when parent key is updated:\n      \n importedNoAction - do not allow update of parent\n               key if it has been imported\n       importedKeyCascade - change imported key to agree\n               with parent key update\n       importedKeySetNull - change imported key to NULL if\n               its parent key has been updated\n       importedKeySetDefault - change imported key to default values\n               if its parent key has been updated\n       importedKeyRestrict - same as importedKeyNoAction\n                                 (for ODBC 2.x compatibility)\n      \nDELETE_RULE short => What happens to\n      the foreign key when parent key is deleted.\n      \n importedKeyNoAction - do not allow delete of parent\n               key if it has been imported\n       importedKeyCascade - delete rows that import a deleted key\n       importedKeySetNull - change imported key to NULL if\n               its primary key has been deleted\n       importedKeyRestrict - same as importedKeyNoAction\n                                 (for ODBC 2.x compatibility)\n       importedKeySetDefault - change imported key to default if\n               its parent key has been deleted\n      \nFK_NAME String => foreign key name (may be null)\n  PK_NAME String => parent key name (may be null)\n  DEFERRABILITY short => can the evaluation of foreign key\n      constraints be deferred until commit\n      \n importedKeyInitiallyDeferred - see SQL92 for definition\n       importedKeyInitiallyImmediate - see SQL92 for definition\n       importedKeyNotDeferrable - see SQL92 for definition\n      \n"}, {"method_name": "getTypeInfo", "method_sig": "ResultSet getTypeInfo()\n               throws SQLException", "description": "Retrieves a description of all the data types supported by\n this database. They are ordered by DATA_TYPE and then by how\n closely the data type maps to the corresponding JDBC SQL type.\n\n If the database supports SQL distinct types, then getTypeInfo() will return\n a single row with a TYPE_NAME of DISTINCT and a DATA_TYPE of Types.DISTINCT.\n If the database supports SQL structured types, then getTypeInfo() will return\n a single row with a TYPE_NAME of STRUCT and a DATA_TYPE of Types.STRUCT.\n\n If SQL distinct or structured types are supported, then information on the\n individual types may be obtained from the getUDTs() method.\n\n\n Each type description has the following columns:\n  \nTYPE_NAME String => Type name\n  DATA_TYPE int => SQL data type from java.sql.Types\n  PRECISION int => maximum precision\n  LITERAL_PREFIX String => prefix used to quote a literal\n      (may be null)\n  LITERAL_SUFFIX String => suffix used to quote a literal\n  (may be null)\n  CREATE_PARAMS String => parameters used in creating\n      the type (may be null)\n  NULLABLE short => can you use NULL for this type.\n      \n typeNoNulls - does not allow NULL values\n       typeNullable - allows NULL values\n       typeNullableUnknown - nullability unknown\n      \nCASE_SENSITIVE boolean=> is it case sensitive.\n  SEARCHABLE short => can you use \"WHERE\" based on this type:\n      \n typePredNone - No support\n       typePredChar - Only supported with WHERE .. LIKE\n       typePredBasic - Supported except for WHERE .. LIKE\n       typeSearchable - Supported for all WHERE ..\n      \nUNSIGNED_ATTRIBUTE boolean => is it unsigned.\n  FIXED_PREC_SCALE boolean => can it be a money value.\n  AUTO_INCREMENT boolean => can it be used for an\n      auto-increment value.\n  LOCAL_TYPE_NAME String => localized version of type name\n      (may be null)\n  MINIMUM_SCALE short => minimum scale supported\n  MAXIMUM_SCALE short => maximum scale supported\n  SQL_DATA_TYPE int => unused\n  SQL_DATETIME_SUB int => unused\n  NUM_PREC_RADIX int => usually 2 or 10\n  \nThe PRECISION column represents the maximum column size that the server supports for the given datatype.\n For numeric data, this is the maximum precision.  For character data, this is the length in characters.\n For datetime datatypes, this is the length in characters of the String representation (assuming the\n maximum allowed precision of the fractional seconds component). For binary data, this is the length in bytes.  For the ROWID datatype,\n this is the length in bytes. Null is returned for data types where the\n column size is not applicable."}, {"method_name": "getIndexInfo", "method_sig": "ResultSet getIndexInfo (String catalog,\n                       String schema,\n                       String table,\n                       boolean unique,\n                       boolean approximate)\n                throws SQLException", "description": "Retrieves a description of the given table's indices and statistics. They are\n ordered by NON_UNIQUE, TYPE, INDEX_NAME, and ORDINAL_POSITION.\n\n Each index column description has the following columns:\n  \nTABLE_CAT String => table catalog (may be null)\n  TABLE_SCHEM String => table schema (may be null)\n  TABLE_NAME String => table name\n  NON_UNIQUE boolean => Can index values be non-unique.\n      false when TYPE is tableIndexStatistic\n  INDEX_QUALIFIER String => index catalog (may be null);\n      null when TYPE is tableIndexStatistic\n  INDEX_NAME String => index name; null when TYPE is\n      tableIndexStatistic\n  TYPE short => index type:\n      \n tableIndexStatistic - this identifies table statistics that are\n           returned in conjunction with a table's index descriptions\n       tableIndexClustered - this is a clustered index\n       tableIndexHashed - this is a hashed index\n       tableIndexOther - this is some other style of index\n      \nORDINAL_POSITION short => column sequence number\n      within index; zero when TYPE is tableIndexStatistic\n  COLUMN_NAME String => column name; null when TYPE is\n      tableIndexStatistic\n  ASC_OR_DESC String => column sort sequence, \"A\" => ascending,\n      \"D\" => descending, may be null if sort sequence is not supported;\n      null when TYPE is tableIndexStatistic\n  CARDINALITY long => When TYPE is tableIndexStatistic, then\n      this is the number of rows in the table; otherwise, it is the\n      number of unique values in the index.\n  PAGES long => When TYPE is  tableIndexStatistic then\n      this is the number of pages used for the table, otherwise it\n      is the number of pages used for the current index.\n  FILTER_CONDITION String => Filter condition, if any.\n      (may be null)\n  "}, {"method_name": "supportsResultSetType", "method_sig": "boolean supportsResultSetType (int type)\n                       throws SQLException", "description": "Retrieves whether this database supports the given result set type."}, {"method_name": "supportsResultSetConcurrency", "method_sig": "boolean supportsResultSetConcurrency (int type,\n                                     int concurrency)\n                              throws SQLException", "description": "Retrieves whether this database supports the given concurrency type\n in combination with the given result set type."}, {"method_name": "ownUpdatesAreVisible", "method_sig": "boolean ownUpdatesAreVisible (int type)\n                      throws SQLException", "description": "Retrieves whether for the given type of ResultSet object,\n the result set's own updates are visible."}, {"method_name": "ownDeletesAreVisible", "method_sig": "boolean ownDeletesAreVisible (int type)\n                      throws SQLException", "description": "Retrieves whether a result set's own deletes are visible."}, {"method_name": "ownInsertsAreVisible", "method_sig": "boolean ownInsertsAreVisible (int type)\n                      throws SQLException", "description": "Retrieves whether a result set's own inserts are visible."}, {"method_name": "othersUpdatesAreVisible", "method_sig": "boolean othersUpdatesAreVisible (int type)\n                         throws SQLException", "description": "Retrieves whether updates made by others are visible."}, {"method_name": "othersDeletesAreVisible", "method_sig": "boolean othersDeletesAreVisible (int type)\n                         throws SQLException", "description": "Retrieves whether deletes made by others are visible."}, {"method_name": "othersInsertsAreVisible", "method_sig": "boolean othersInsertsAreVisible (int type)\n                         throws SQLException", "description": "Retrieves whether inserts made by others are visible."}, {"method_name": "updatesAreDetected", "method_sig": "boolean updatesAreDetected (int type)\n                    throws SQLException", "description": "Retrieves whether or not a visible row update can be detected by\n calling the method ResultSet.rowUpdated."}, {"method_name": "deletesAreDetected", "method_sig": "boolean deletesAreDetected (int type)\n                    throws SQLException", "description": "Retrieves whether or not a visible row delete can be detected by\n calling the method ResultSet.rowDeleted.  If the method\n deletesAreDetected returns false, it means that\n deleted rows are removed from the result set."}, {"method_name": "insertsAreDetected", "method_sig": "boolean insertsAreDetected (int type)\n                    throws SQLException", "description": "Retrieves whether or not a visible row insert can be detected\n by calling the method ResultSet.rowInserted."}, {"method_name": "supportsBatchUpdates", "method_sig": "boolean supportsBatchUpdates()\n                      throws SQLException", "description": "Retrieves whether this database supports batch updates."}, {"method_name": "getUDTs", "method_sig": "ResultSet getUDTs (String catalog,\n                  String schemaPattern,\n                  String typeNamePattern,\n                  int[] types)\n           throws SQLException", "description": "Retrieves a description of the user-defined types (UDTs) defined\n in a particular schema.  Schema-specific UDTs may have type\n JAVA_OBJECT, STRUCT,\n or DISTINCT.\n\n Only types matching the catalog, schema, type name and type\n criteria are returned.  They are ordered by DATA_TYPE,\n TYPE_CAT, TYPE_SCHEM  and\n TYPE_NAME.  The type name parameter may be a fully-qualified\n name.  In this case, the catalog and schemaPattern parameters are\n ignored.\n\n Each type description has the following columns:\n  \nTYPE_CAT String => the type's catalog (may be null)\n  TYPE_SCHEM String => type's schema (may be null)\n  TYPE_NAME String => type name\n  CLASS_NAME String => Java class name\n  DATA_TYPE int => type value defined in java.sql.Types.\n     One of JAVA_OBJECT, STRUCT, or DISTINCT\n  REMARKS String => explanatory comment on the type\n  BASE_TYPE short => type code of the source type of a\n     DISTINCT type or the type that implements the user-generated\n     reference type of the SELF_REFERENCING_COLUMN of a structured\n     type as defined in java.sql.Types (null if DATA_TYPE is not\n     DISTINCT or not STRUCT with REFERENCE_GENERATION = USER_DEFINED)\n  \nNote: If the driver does not support UDTs, an empty\n result set is returned."}, {"method_name": "getConnection", "method_sig": "Connection getConnection()\n                  throws SQLException", "description": "Retrieves the connection that produced this metadata object."}, {"method_name": "supportsSavepoints", "method_sig": "boolean supportsSavepoints()\n                    throws SQLException", "description": "Retrieves whether this database supports savepoints."}, {"method_name": "supportsNamedParameters", "method_sig": "boolean supportsNamedParameters()\n                         throws SQLException", "description": "Retrieves whether this database supports named parameters to callable\n statements."}, {"method_name": "supportsMultipleOpenResults", "method_sig": "boolean supportsMultipleOpenResults()\n                             throws SQLException", "description": "Retrieves whether it is possible to have multiple ResultSet objects\n returned from a CallableStatement object\n simultaneously."}, {"method_name": "supportsGetGeneratedKeys", "method_sig": "boolean supportsGetGeneratedKeys()\n                          throws SQLException", "description": "Retrieves whether auto-generated keys can be retrieved after\n a statement has been executed"}, {"method_name": "getSuperTypes", "method_sig": "ResultSet getSuperTypes (String catalog,\n                        String schemaPattern,\n                        String typeNamePattern)\n                 throws SQLException", "description": "Retrieves a description of the user-defined type (UDT) hierarchies defined in a\n particular schema in this database. Only the immediate super type/\n sub type relationship is modeled.\n \n Only supertype information for UDTs matching the catalog,\n schema, and type name is returned. The type name parameter\n may be a fully-qualified name. When the UDT name supplied is a\n fully-qualified name, the catalog and schemaPattern parameters are\n ignored.\n \n If a UDT does not have a direct super type, it is not listed here.\n A row of the ResultSet object returned by this method\n describes the designated UDT and a direct supertype. A row has the following\n columns:\n  \nTYPE_CAT String => the UDT's catalog (may be null)\n  TYPE_SCHEM String => UDT's schema (may be null)\n  TYPE_NAME String => type name of the UDT\n  SUPERTYPE_CAT String => the direct super type's catalog\n                           (may be null)\n  SUPERTYPE_SCHEM String => the direct super type's schema\n                             (may be null)\n  SUPERTYPE_NAME String => the direct super type's name\n  \nNote: If the driver does not support type hierarchies, an\n empty result set is returned."}, {"method_name": "getSuperTables", "method_sig": "ResultSet getSuperTables (String catalog,\n                         String schemaPattern,\n                         String tableNamePattern)\n                  throws SQLException", "description": "Retrieves a description of the table hierarchies defined in a particular\n schema in this database.\n\n Only supertable information for tables matching the catalog, schema\n and table name are returned. The table name parameter may be a fully-\n qualified name, in which case, the catalog and schemaPattern parameters\n are ignored. If a table does not have a super table, it is not listed here.\n Supertables have to be defined in the same catalog and schema as the\n sub tables. Therefore, the type description does not need to include\n this information for the supertable.\n\n Each type description has the following columns:\n  \nTABLE_CAT String => the type's catalog (may be null)\n  TABLE_SCHEM String => type's schema (may be null)\n  TABLE_NAME String => type name\n  SUPERTABLE_NAME String => the direct super type's name\n  \nNote: If the driver does not support type hierarchies, an\n empty result set is returned."}, {"method_name": "getAttributes", "method_sig": "ResultSet getAttributes (String catalog,\n                        String schemaPattern,\n                        String typeNamePattern,\n                        String attributeNamePattern)\n                 throws SQLException", "description": "Retrieves a description of the given attribute of the given type\n for a user-defined type (UDT) that is available in the given schema\n and catalog.\n \n Descriptions are returned only for attributes of UDTs matching the\n catalog, schema, type, and attribute name criteria. They are ordered by\n TYPE_CAT, TYPE_SCHEM,\n TYPE_NAME and ORDINAL_POSITION. This description\n does not contain inherited attributes.\n \n The ResultSet object that is returned has the following\n columns:\n \nTYPE_CAT String => type catalog (may be null)\n  TYPE_SCHEM String => type schema (may be null)\n  TYPE_NAME String => type name\n  ATTR_NAME String => attribute name\n  DATA_TYPE int => attribute type SQL type from java.sql.Types\n  ATTR_TYPE_NAME String => Data source dependent type name.\n  For a UDT, the type name is fully qualified. For a REF, the type name is\n  fully qualified and represents the target type of the reference type.\n  ATTR_SIZE int => column size.  For char or date\n      types this is the maximum number of characters; for numeric or\n      decimal types this is precision.\n  DECIMAL_DIGITS int => the number of fractional digits. Null is returned for data types where\n DECIMAL_DIGITS is not applicable.\n  NUM_PREC_RADIX int => Radix (typically either 10 or 2)\n  NULLABLE int => whether NULL is allowed\n      \n attributeNoNulls - might not allow NULL values\n       attributeNullable - definitely allows NULL values\n       attributeNullableUnknown - nullability unknown\n      \nREMARKS String => comment describing column (may be null)\n  ATTR_DEF String => default value (may be null)\n  SQL_DATA_TYPE int => unused\n  SQL_DATETIME_SUB int => unused\n  CHAR_OCTET_LENGTH int => for char types the\n       maximum number of bytes in the column\n  ORDINAL_POSITION int => index of the attribute in the UDT\n      (starting at 1)\n  IS_NULLABLE String  => ISO rules are used to determine\n the nullability for a attribute.\n       \n YES           --- if the attribute can include NULLs\n        NO            --- if the attribute cannot include NULLs\n        empty string  --- if the nullability for the\n attribute is unknown\n       \nSCOPE_CATALOG String => catalog of table that is the\n      scope of a reference attribute (null if DATA_TYPE isn't REF)\n  SCOPE_SCHEMA String => schema of table that is the\n      scope of a reference attribute (null if DATA_TYPE isn't REF)\n  SCOPE_TABLE String => table name that is the scope of a\n      reference attribute (null if the DATA_TYPE isn't REF)\n SOURCE_DATA_TYPE short => source type of a distinct type or user-generated\n      Ref type,SQL type from java.sql.Types (null if DATA_TYPE\n      isn't DISTINCT or user-generated REF)\n  "}, {"method_name": "supportsResultSetHoldability", "method_sig": "boolean supportsResultSetHoldability (int holdability)\n                              throws SQLException", "description": "Retrieves whether this database supports the given result set holdability."}, {"method_name": "getResultSetHoldability", "method_sig": "int getResultSetHoldability()\n                     throws SQLException", "description": "Retrieves this database's default holdability for ResultSet\n objects."}, {"method_name": "getDatabaseMajorVersion", "method_sig": "int getDatabaseMajorVersion()\n                     throws SQLException", "description": "Retrieves the major version number of the underlying database."}, {"method_name": "getDatabaseMinorVersion", "method_sig": "int getDatabaseMinorVersion()\n                     throws SQLException", "description": "Retrieves the minor version number of the underlying database."}, {"method_name": "getJDBCMajorVersion", "method_sig": "int getJDBCMajorVersion()\n                 throws SQLException", "description": "Retrieves the major JDBC version number for this\n driver."}, {"method_name": "getJDBCMinorVersion", "method_sig": "int getJDBCMinorVersion()\n                 throws SQLException", "description": "Retrieves the minor JDBC version number for this\n driver."}, {"method_name": "getSQLStateType", "method_sig": "int getSQLStateType()\n             throws SQLException", "description": "Indicates whether the SQLSTATE returned by SQLException.getSQLState\n is X/Open (now known as Open Group) SQL CLI or SQL:2003."}, {"method_name": "locatorsUpdateCopy", "method_sig": "boolean locatorsUpdateCopy()\n                    throws SQLException", "description": "Indicates whether updates made to a LOB are made on a copy or directly\n to the LOB."}, {"method_name": "supportsStatementPooling", "method_sig": "boolean supportsStatementPooling()\n                          throws SQLException", "description": "Retrieves whether this database supports statement pooling."}, {"method_name": "getRowIdLifetime", "method_sig": "RowIdLifetime getRowIdLifetime()\n                        throws SQLException", "description": "Indicates whether this data source supports the SQL  ROWID type,\n and the lifetime for which a RowId object remains valid."}, {"method_name": "getSchemas", "method_sig": "ResultSet getSchemas (String catalog,\n                     String schemaPattern)\n              throws SQLException", "description": "Retrieves the schema names available in this database.  The results\n are ordered by TABLE_CATALOG and\n TABLE_SCHEM.\n\n The schema columns are:\n  \nTABLE_SCHEM String => schema name\n  TABLE_CATALOG String => catalog name (may be null)\n  "}, {"method_name": "supportsStoredFunctionsUsingCallSyntax", "method_sig": "boolean supportsStoredFunctionsUsingCallSyntax()\n                                        throws SQLException", "description": "Retrieves whether this database supports invoking user-defined or vendor functions\n using the stored procedure escape syntax."}, {"method_name": "autoCommitFailureClosesAllResultSets", "method_sig": "boolean autoCommitFailureClosesAllResultSets()\n                                      throws SQLException", "description": "Retrieves whether a SQLException while autoCommit is true indicates\n that all open ResultSets are closed, even ones that are holdable.  When a SQLException occurs while\n autocommit is true, it is vendor specific whether the JDBC driver responds with a commit operation, a\n rollback operation, or by doing neither a commit nor a rollback.  A potential result of this difference\n is in whether or not holdable ResultSets are closed."}, {"method_name": "getClientInfoProperties", "method_sig": "ResultSet getClientInfoProperties()\n                           throws SQLException", "description": "Retrieves a list of the client info properties\n that the driver supports.  The result set contains the following columns\n\n \nNAME String=> The name of the client info property\nMAX_LEN int=> The maximum length of the value for the property\nDEFAULT_VALUE String=> The default value of the property\nDESCRIPTION String=> A description of the property.  This will typically\n                                              contain information as to where this property is\n                                              stored in the database.\n \n\n The ResultSet is sorted by the NAME column"}, {"method_name": "getFunctions", "method_sig": "ResultSet getFunctions (String catalog,\n                       String schemaPattern,\n                       String functionNamePattern)\n                throws SQLException", "description": "Retrieves a description of the  system and user functions available\n in the given catalog.\n \n Only system and user function descriptions matching the schema and\n function name criteria are returned.  They are ordered by\n FUNCTION_CAT, FUNCTION_SCHEM,\n FUNCTION_NAME and\n SPECIFIC_ NAME.\n\n Each function description has the following columns:\n  \nFUNCTION_CAT String => function catalog (may be null)\n  FUNCTION_SCHEM String => function schema (may be null)\n  FUNCTION_NAME String => function name.  This is the name\n used to invoke the function\n  REMARKS String => explanatory comment on the function\n FUNCTION_TYPE short => kind of function:\n      \nfunctionResultUnknown - Cannot determine if a return value\n       or table will be returned\n       functionNoTable- Does not return a table\n       functionReturnsTable - Returns a table\n      \nSPECIFIC_NAME String  => the name which uniquely identifies\n  this function within its schema.  This is a user specified, or DBMS\n generated, name that may be different then the FUNCTION_NAME\n for example with overload functions\n  \n\n A user may not have permission to execute any of the functions that are\n returned by getFunctions"}, {"method_name": "getFunctionColumns", "method_sig": "ResultSet getFunctionColumns (String catalog,\n                             String schemaPattern,\n                             String functionNamePattern,\n                             String columnNamePattern)\n                      throws SQLException", "description": "Retrieves a description of the given catalog's system or user\n function parameters and return type.\n\n Only descriptions matching the schema,  function and\n parameter name criteria are returned. They are ordered by\n FUNCTION_CAT, FUNCTION_SCHEM,\n FUNCTION_NAME and\n SPECIFIC_ NAME. Within this, the return value,\n if any, is first. Next are the parameter descriptions in call\n order. The column descriptions follow in column number order.\n\n Each row in the ResultSet\n is a parameter description, column description or\n return type description with the following fields:\n  \nFUNCTION_CAT String => function catalog (may be null)\n  FUNCTION_SCHEM String => function schema (may be null)\n  FUNCTION_NAME String => function name.  This is the name\n used to invoke the function\n  COLUMN_NAME String => column/parameter name\n  COLUMN_TYPE Short => kind of column/parameter:\n      \n functionColumnUnknown - nobody knows\n       functionColumnIn - IN parameter\n       functionColumnInOut - INOUT parameter\n       functionColumnOut - OUT parameter\n       functionColumnReturn - function return value\n       functionColumnResult - Indicates that the parameter or column\n  is a column in the ResultSet\n\nDATA_TYPE int => SQL type from java.sql.Types\n  TYPE_NAME String => SQL type name, for a UDT type the\n  type name is fully qualified\n  PRECISION int => precision\n  LENGTH int => length in bytes of data\n  SCALE short => scale -  null is returned for data types where\n SCALE is not applicable.\n  RADIX short => radix\n  NULLABLE short => can it contain NULL.\n      \n functionNoNulls - does not allow NULL values\n       functionNullable - allows NULL values\n       functionNullableUnknown - nullability unknown\n      \nREMARKS String => comment describing column/parameter\n  CHAR_OCTET_LENGTH int  => the maximum length of binary\n and character based parameters or columns.  For any other datatype the returned value\n is a NULL\n  ORDINAL_POSITION int  => the ordinal position, starting\n from 1, for the input and output parameters. A value of 0\n is returned if this row describes the function's return value.\n For result set columns, it is the\n ordinal position of the column in the result set starting from 1.\n  IS_NULLABLE String  => ISO rules are used to determine\n the nullability for a parameter or column.\n       \n YES           --- if the parameter or column can include NULLs\n        NO            --- if the parameter or column  cannot include NULLs\n        empty string  --- if the nullability for the\n parameter  or column is unknown\n       \nSPECIFIC_NAME String  => the name which uniquely identifies\n this function within its schema.  This is a user specified, or DBMS\n generated, name that may be different then the FUNCTION_NAME\n for example with overload functions\n  \nThe PRECISION column represents the specified column size for the given\n parameter or column.\n For numeric data, this is the maximum precision.  For character data, this is the length in characters.\n For datetime datatypes, this is the length in characters of the String representation (assuming the\n maximum allowed precision of the fractional seconds component). For binary data, this is the length in bytes.  For the ROWID datatype,\n this is the length in bytes. Null is returned for data types where the\n column size is not applicable."}, {"method_name": "getPseudoColumns", "method_sig": "ResultSet getPseudoColumns (String catalog,\n                           String schemaPattern,\n                           String tableNamePattern,\n                           String columnNamePattern)\n                    throws SQLException", "description": "Retrieves a description of the pseudo or hidden columns available\n in a given table within the specified catalog and schema.\n Pseudo or hidden columns may not always be stored within\n a table and are not visible in a ResultSet unless they are\n specified in the query's outermost SELECT list. Pseudo or hidden\n columns may not necessarily be able to be modified. If there are\n no pseudo or hidden columns, an empty ResultSet is returned.\n\n Only column descriptions matching the catalog, schema, table\n and column name criteria are returned.  They are ordered by\n TABLE_CAT,TABLE_SCHEM, TABLE_NAME\n and COLUMN_NAME.\n\n Each column description has the following columns:\n  \nTABLE_CAT String => table catalog (may be null)\n  TABLE_SCHEM String => table schema (may be null)\n  TABLE_NAME String => table name\n  COLUMN_NAME String => column name\n  DATA_TYPE int => SQL type from java.sql.Types\n  COLUMN_SIZE int => column size.\n  DECIMAL_DIGITS int => the number of fractional digits. Null is returned for data types where\n DECIMAL_DIGITS is not applicable.\n  NUM_PREC_RADIX int => Radix (typically either 10 or 2)\n  COLUMN_USAGE String => The allowed usage for the column.  The\n  value returned will correspond to the enum name returned by PseudoColumnUsage.name()\nREMARKS String => comment describing column (may be null)\n  CHAR_OCTET_LENGTH int => for char types the\n       maximum number of bytes in the column\n  IS_NULLABLE String  => ISO rules are used to determine the nullability for a column.\n       \n YES           --- if the column can include NULLs\n        NO            --- if the column cannot include NULLs\n        empty string  --- if the nullability for the column is unknown\n       \n\nThe COLUMN_SIZE column specifies the column size for the given column.\n For numeric data, this is the maximum precision.  For character data, this is the length in characters.\n For datetime datatypes, this is the length in characters of the String representation (assuming the\n maximum allowed precision of the fractional seconds component). For binary data, this is the length in bytes.  For the ROWID datatype,\n this is the length in bytes. Null is returned for data types where the\n column size is not applicable."}, {"method_name": "generatedKeyAlwaysReturned", "method_sig": "boolean generatedKeyAlwaysReturned()\n                            throws SQLException", "description": "Retrieves whether a generated key will always be returned if the column\n name(s) or index(es) specified for the auto generated key column(s)\n are valid and the statement succeeds.  The key that is returned may or\n may not be based on the column(s) for the auto generated key.\n Consult your JDBC driver documentation for additional details."}, {"method_name": "getMaxLogicalLobSize", "method_sig": "default long getMaxLogicalLobSize()\n                           throws SQLException", "description": "Retrieves the maximum number of bytes this database allows for\n the logical size for a LOB.\n\n The default implementation will return 0"}, {"method_name": "supportsRefCursors", "method_sig": "default boolean supportsRefCursors()\n                            throws SQLException", "description": "Retrieves whether this database supports REF CURSOR.\n\n The default implementation will return false"}, {"method_name": "supportsSharding", "method_sig": "default boolean supportsSharding()\n                          throws SQLException", "description": "Retrieves whether this database supports sharding."}]}