{"name": "Class Color", "module": "java.desktop", "package": "java.awt", "text": "The Color class is used to encapsulate colors in the default\n sRGB color space or colors in arbitrary color spaces identified by a\n ColorSpace.  Every color has an implicit alpha value of 1.0 or\n an explicit one provided in the constructor.  The alpha value\n defines the transparency of a color and can be represented by\n a float value in the range 0.0\u00a0-\u00a01.0 or 0\u00a0-\u00a0255.\n An alpha value of 1.0 or 255 means that the color is completely\n opaque and an alpha value of 0 or 0.0 means that the color is\n completely transparent.\n When constructing a Color with an explicit alpha or\n getting the color/alpha components of a Color, the color\n components are never premultiplied by the alpha component.\n \n The default color space for the Java 2D(tm) API is sRGB, a proposed\n standard RGB color space.  For further information on sRGB,\n see \n http://www.w3.org/pub/WWW/Graphics/Color/sRGB.html\n .", "codes": ["public class Color\nextends Object\nimplements Paint, Serializable"], "fields": [{"field_name": "white", "field_sig": "public static final\u00a0Color white", "description": "The color white.  In the default sRGB space."}, {"field_name": "WHITE", "field_sig": "public static final\u00a0Color WHITE", "description": "The color white.  In the default sRGB space."}, {"field_name": "lightGray", "field_sig": "public static final\u00a0Color lightGray", "description": "The color light gray.  In the default sRGB space."}, {"field_name": "LIGHT_GRAY", "field_sig": "public static final\u00a0Color LIGHT_GRAY", "description": "The color light gray.  In the default sRGB space."}, {"field_name": "gray", "field_sig": "public static final\u00a0Color gray", "description": "The color gray.  In the default sRGB space."}, {"field_name": "GRAY", "field_sig": "public static final\u00a0Color GRAY", "description": "The color gray.  In the default sRGB space."}, {"field_name": "darkGray", "field_sig": "public static final\u00a0Color darkGray", "description": "The color dark gray.  In the default sRGB space."}, {"field_name": "DARK_GRAY", "field_sig": "public static final\u00a0Color DARK_GRAY", "description": "The color dark gray.  In the default sRGB space."}, {"field_name": "black", "field_sig": "public static final\u00a0Color black", "description": "The color black.  In the default sRGB space."}, {"field_name": "BLACK", "field_sig": "public static final\u00a0Color BLACK", "description": "The color black.  In the default sRGB space."}, {"field_name": "red", "field_sig": "public static final\u00a0Color red", "description": "The color red.  In the default sRGB space."}, {"field_name": "RED", "field_sig": "public static final\u00a0Color RED", "description": "The color red.  In the default sRGB space."}, {"field_name": "pink", "field_sig": "public static final\u00a0Color pink", "description": "The color pink.  In the default sRGB space."}, {"field_name": "PINK", "field_sig": "public static final\u00a0Color PINK", "description": "The color pink.  In the default sRGB space."}, {"field_name": "orange", "field_sig": "public static final\u00a0Color orange", "description": "The color orange.  In the default sRGB space."}, {"field_name": "ORANGE", "field_sig": "public static final\u00a0Color ORANGE", "description": "The color orange.  In the default sRGB space."}, {"field_name": "yellow", "field_sig": "public static final\u00a0Color yellow", "description": "The color yellow.  In the default sRGB space."}, {"field_name": "YELLOW", "field_sig": "public static final\u00a0Color YELLOW", "description": "The color yellow.  In the default sRGB space."}, {"field_name": "green", "field_sig": "public static final\u00a0Color green", "description": "The color green.  In the default sRGB space."}, {"field_name": "GREEN", "field_sig": "public static final\u00a0Color GREEN", "description": "The color green.  In the default sRGB space."}, {"field_name": "magenta", "field_sig": "public static final\u00a0Color magenta", "description": "The color magenta.  In the default sRGB space."}, {"field_name": "MAGENTA", "field_sig": "public static final\u00a0Color MAGENTA", "description": "The color magenta.  In the default sRGB space."}, {"field_name": "cyan", "field_sig": "public static final\u00a0Color cyan", "description": "The color cyan.  In the default sRGB space."}, {"field_name": "CYAN", "field_sig": "public static final\u00a0Color CYAN", "description": "The color cyan.  In the default sRGB space."}, {"field_name": "blue", "field_sig": "public static final\u00a0Color blue", "description": "The color blue.  In the default sRGB space."}, {"field_name": "BLUE", "field_sig": "public static final\u00a0Color BLUE", "description": "The color blue.  In the default sRGB space."}], "methods": [{"method_name": "getRed", "method_sig": "public int getRed()", "description": "Returns the red component in the range 0-255 in the default sRGB\n space."}, {"method_name": "getGreen", "method_sig": "public int getGreen()", "description": "Returns the green component in the range 0-255 in the default sRGB\n space."}, {"method_name": "getBlue", "method_sig": "public int getBlue()", "description": "Returns the blue component in the range 0-255 in the default sRGB\n space."}, {"method_name": "getAlpha", "method_sig": "public int getAlpha()", "description": "Returns the alpha component in the range 0-255."}, {"method_name": "getRGB", "method_sig": "public int getRGB()", "description": "Returns the RGB value representing the color in the default sRGB\n ColorModel.\n (Bits 24-31 are alpha, 16-23 are red, 8-15 are green, 0-7 are\n blue)."}, {"method_name": "brighter", "method_sig": "public Color brighter()", "description": "Creates a new Color that is a brighter version of this\n Color.\n \n This method applies an arbitrary scale factor to each of the three RGB\n components of this Color to create a brighter version\n of this Color.\n The alpha value is preserved.\n Although brighter and\n darker are inverse operations, the results of a\n series of invocations of these two methods might be inconsistent\n because of rounding errors."}, {"method_name": "darker", "method_sig": "public Color darker()", "description": "Creates a new Color that is a darker version of this\n Color.\n \n This method applies an arbitrary scale factor to each of the three RGB\n components of this Color to create a darker version of\n this Color.\n The alpha value is preserved.\n Although brighter and\n darker are inverse operations, the results of a series\n of invocations of these two methods might be inconsistent because\n of rounding errors."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Computes the hash code for this Color."}, {"method_name": "equals", "method_sig": "public boolean equals (Object obj)", "description": "Determines whether another object is equal to this\n Color.\n \n The result is true if and only if the argument is not\n null and is a Color object that has the same\n red, green, blue, and alpha values as this object."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a string representation of this Color. This\n method is intended to be used only for debugging purposes.  The\n content and format of the returned string might vary between\n implementations. The returned string might be empty but cannot\n be null."}, {"method_name": "decode", "method_sig": "public static Color decode (String nm)\n                    throws NumberFormatException", "description": "Converts a String to an integer and returns the\n specified opaque Color. This method handles string\n formats that are used to represent octal and hexadecimal numbers."}, {"method_name": "getColor", "method_sig": "public static Color getColor (String nm)", "description": "Finds a color in the system properties.\n \n The argument is treated as the name of a system property to\n be obtained. The string value of this property is then interpreted\n as an integer which is then converted to a Color\n object.\n \n If the specified property is not found or could not be parsed as\n an integer then null is returned."}, {"method_name": "getColor", "method_sig": "public static Color getColor (String nm,\n                             Color v)", "description": "Finds a color in the system properties.\n \n The first argument is treated as the name of a system property to\n be obtained. The string value of this property is then interpreted\n as an integer which is then converted to a Color\n object.\n \n If the specified property is not found or cannot be parsed as\n an integer then the Color specified by the second\n argument is returned instead."}, {"method_name": "getColor", "method_sig": "public static Color getColor (String nm,\n                             int v)", "description": "Finds a color in the system properties.\n \n The first argument is treated as the name of a system property to\n be obtained. The string value of this property is then interpreted\n as an integer which is then converted to a Color\n object.\n \n If the specified property is not found or could not be parsed as\n an integer then the integer value v is used instead,\n and is converted to a Color object."}, {"method_name": "HSBtoRGB", "method_sig": "public static int HSBtoRGB (float hue,\n                           float saturation,\n                           float brightness)", "description": "Converts the components of a color, as specified by the HSB\n model, to an equivalent set of values for the default RGB model.\n \n The saturation and brightness components\n should be floating-point values between zero and one\n (numbers in the range 0.0-1.0).  The hue component\n can be any floating-point number.  The floor of this number is\n subtracted from it to create a fraction between 0 and 1.  This\n fractional number is then multiplied by 360 to produce the hue\n angle in the HSB color model.\n \n The integer that is returned by HSBtoRGB encodes the\n value of a color in bits 0-23 of an integer value that is the same\n format used by the method getRGB.\n This integer can be supplied as an argument to the\n Color constructor that takes a single integer argument."}, {"method_name": "RGBtoHSB", "method_sig": "public static float[] RGBtoHSB (int r,\n                               int g,\n                               int b,\n                               float[] hsbvals)", "description": "Converts the components of a color, as specified by the default RGB\n model, to an equivalent set of values for hue, saturation, and\n brightness that are the three components of the HSB model.\n \n If the hsbvals argument is null, then a\n new array is allocated to return the result. Otherwise, the method\n returns the array hsbvals, with the values put into\n that array."}, {"method_name": "getHSBColor", "method_sig": "public static Color getHSBColor (float h,\n                                float s,\n                                float b)", "description": "Creates a Color object based on the specified values\n for the HSB color model.\n \n The s and b components should be\n floating-point values between zero and one\n (numbers in the range 0.0-1.0).  The h component\n can be any floating-point number.  The floor of this number is\n subtracted from it to create a fraction between 0 and 1.  This\n fractional number is then multiplied by 360 to produce the hue\n angle in the HSB color model."}, {"method_name": "getRGBComponents", "method_sig": "public float[] getRGBComponents (float[] compArray)", "description": "Returns a float array containing the color and alpha\n components of the Color, as represented in the default\n sRGB color space.\n If compArray is null, an array of length\n 4 is created for the return value.  Otherwise,\n compArray must have length 4 or greater,\n and it is filled in with the components and returned."}, {"method_name": "getRGBColorComponents", "method_sig": "public float[] getRGBColorComponents (float[] compArray)", "description": "Returns a float array containing only the color\n components of the Color, in the default sRGB color\n space.  If compArray is null, an array of\n length 3 is created for the return value.  Otherwise,\n compArray must have length 3 or greater, and it is\n filled in with the components and returned."}, {"method_name": "getComponents", "method_sig": "public float[] getComponents (float[] compArray)", "description": "Returns a float array containing the color and alpha\n components of the Color, in the\n ColorSpace of the Color.\n If compArray is null, an array with\n length equal to the number of components in the associated\n ColorSpace plus one is created for\n the return value.  Otherwise, compArray must have at\n least this length and it is filled in with the components and\n returned."}, {"method_name": "getColorComponents", "method_sig": "public float[] getColorComponents (float[] compArray)", "description": "Returns a float array containing only the color\n components of the Color, in the\n ColorSpace of the Color.\n If compArray is null, an array with\n length equal to the number of components in the associated\n ColorSpace is created for\n the return value.  Otherwise, compArray must have at\n least this length and it is filled in with the components and\n returned."}, {"method_name": "getComponents", "method_sig": "public float[] getComponents (ColorSpace cspace,\n                             float[] compArray)", "description": "Returns a float array containing the color and alpha\n components of the Color, in the\n ColorSpace specified by the cspace\n parameter.  If compArray is null, an\n array with length equal to the number of components in\n cspace plus one is created for the return value.\n Otherwise, compArray must have at least this\n length, and it is filled in with the components and returned."}, {"method_name": "getColorComponents", "method_sig": "public float[] getColorComponents (ColorSpace cspace,\n                                  float[] compArray)", "description": "Returns a float array containing only the color\n components of the Color in the\n ColorSpace specified by the cspace\n parameter. If compArray is null, an array\n with length equal to the number of components in\n cspace is created for the return value.  Otherwise,\n compArray must have at least this length, and it is\n filled in with the components and returned."}, {"method_name": "getColorSpace", "method_sig": "public ColorSpace getColorSpace()", "description": "Returns the ColorSpace of this Color."}, {"method_name": "createContext", "method_sig": "public PaintContext createContext (ColorModel cm,\n                                  Rectangle r,\n                                  Rectangle2D r2d,\n                                  AffineTransform xform,\n                                  RenderingHints hints)", "description": "Creates and returns a PaintContext used to\n generate a solid color field pattern.\n See the specification of the\n method in the Paint interface for information\n on null parameter handling."}, {"method_name": "getTransparency", "method_sig": "public int getTransparency()", "description": "Returns the transparency mode for this Color.  This is\n required to implement the Paint interface."}]}