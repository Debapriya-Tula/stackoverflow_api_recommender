{"name": "Class HashSet<E>", "module": "java.base", "package": "java.util", "text": "This class implements the Set interface, backed by a hash table\n (actually a HashMap instance).  It makes no guarantees as to the\n iteration order of the set; in particular, it does not guarantee that the\n order will remain constant over time.  This class permits the null\n element.\n\n This class offers constant time performance for the basic operations\n (add, remove, contains and size),\n assuming the hash function disperses the elements properly among the\n buckets.  Iterating over this set requires time proportional to the sum of\n the HashSet instance's size (the number of elements) plus the\n \"capacity\" of the backing HashMap instance (the number of\n buckets).  Thus, it's very important not to set the initial capacity too\n high (or the load factor too low) if iteration performance is important.\n\n Note that this implementation is not synchronized.\n If multiple threads access a hash set concurrently, and at least one of\n the threads modifies the set, it must be synchronized externally.\n This is typically accomplished by synchronizing on some object that\n naturally encapsulates the set.\n\n If no such object exists, the set should be \"wrapped\" using the\n Collections.synchronizedSet\n method.  This is best done at creation time, to prevent accidental\n unsynchronized access to the set:\n   Set s = Collections.synchronizedSet(new HashSet(...));\nThe iterators returned by this class's iterator method are\n fail-fast: if the set is modified at any time after the iterator is\n created, in any way except through the iterator's own remove\n method, the Iterator throws a ConcurrentModificationException.\n Thus, in the face of concurrent modification, the iterator fails quickly\n and cleanly, rather than risking arbitrary, non-deterministic behavior at\n an undetermined time in the future.\n\n Note that the fail-fast behavior of an iterator cannot be guaranteed\n as it is, generally speaking, impossible to make any hard guarantees in the\n presence of unsynchronized concurrent modification.  Fail-fast iterators\n throw ConcurrentModificationException on a best-effort basis.\n Therefore, it would be wrong to write a program that depended on this\n exception for its correctness: the fail-fast behavior of iterators\n should be used only to detect bugs.\nThis class is a member of the\n \n Java Collections Framework.", "codes": ["public class HashSet<E>\nextends AbstractSet<E>\nimplements Set<E>, Cloneable, Serializable"], "fields": [], "methods": [{"method_name": "iterator", "method_sig": "public Iterator<E> iterator()", "description": "Returns an iterator over the elements in this set.  The elements\n are returned in no particular order."}, {"method_name": "size", "method_sig": "public int size()", "description": "Returns the number of elements in this set (its cardinality)."}, {"method_name": "isEmpty", "method_sig": "public boolean isEmpty()", "description": "Returns true if this set contains no elements."}, {"method_name": "contains", "method_sig": "public boolean contains (Object o)", "description": "Returns true if this set contains the specified element.\n More formally, returns true if and only if this set\n contains an element e such that\n Objects.equals(o, e)."}, {"method_name": "add", "method_sig": "public boolean add (E e)", "description": "Adds the specified element to this set if it is not already present.\n More formally, adds the specified element e to this set if\n this set contains no element e2 such that\n Objects.equals(e, e2).\n If this set already contains the element, the call leaves the set\n unchanged and returns false."}, {"method_name": "remove", "method_sig": "public boolean remove (Object o)", "description": "Removes the specified element from this set if it is present.\n More formally, removes an element e such that\n Objects.equals(o, e),\n if this set contains such an element.  Returns true if\n this set contained the element (or equivalently, if this set\n changed as a result of the call).  (This set will not contain the\n element once the call returns.)"}, {"method_name": "clear", "method_sig": "public void clear()", "description": "Removes all of the elements from this set.\n The set will be empty after this call returns."}, {"method_name": "clone", "method_sig": "public Object clone()", "description": "Returns a shallow copy of this HashSet instance: the elements\n themselves are not cloned."}, {"method_name": "spliterator", "method_sig": "public Spliterator<E> spliterator()", "description": "Creates a late-binding\n and fail-fast Spliterator over the elements in this\n set.\n\n The Spliterator reports Spliterator.SIZED and\n Spliterator.DISTINCT.  Overriding implementations should document\n the reporting of additional characteristic values."}]}