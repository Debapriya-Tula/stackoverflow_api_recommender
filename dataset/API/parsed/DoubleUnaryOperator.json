{"name": "Interface DoubleUnaryOperator", "module": "java.base", "package": "java.util.function", "text": "Represents an operation on a single double-valued operand that produces\n a double-valued result.  This is the primitive type specialization of\n UnaryOperator for double.\n\n This is a functional interface\n whose functional method is applyAsDouble(double).", "codes": ["@FunctionalInterface\npublic interface DoubleUnaryOperator"], "fields": [], "methods": [{"method_name": "applyAsDouble", "method_sig": "double applyAsDouble (double operand)", "description": "Applies this operator to the given operand."}, {"method_name": "compose", "method_sig": "default DoubleUnaryOperator compose (DoubleUnaryOperator before)", "description": "Returns a composed operator that first applies the before\n operator to its input, and then applies this operator to the result.\n If evaluation of either operator throws an exception, it is relayed to\n the caller of the composed operator."}, {"method_name": "andThen", "method_sig": "default DoubleUnaryOperator andThen (DoubleUnaryOperator after)", "description": "Returns a composed operator that first applies this operator to\n its input, and then applies the after operator to the result.\n If evaluation of either operator throws an exception, it is relayed to\n the caller of the composed operator."}, {"method_name": "identity", "method_sig": "static DoubleUnaryOperator identity()", "description": "Returns a unary operator that always returns its input argument."}]}