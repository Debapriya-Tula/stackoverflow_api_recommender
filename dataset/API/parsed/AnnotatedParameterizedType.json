{"name": "Interface AnnotatedParameterizedType", "module": "java.base", "package": "java.lang.reflect", "text": "AnnotatedParameterizedType represents the potentially annotated use\n of a parameterized type, whose type arguments may themselves represent\n annotated uses of types.", "codes": ["public interface AnnotatedParameterizedType\nextends AnnotatedType"], "fields": [], "methods": [{"method_name": "getAnnotatedActualTypeArguments", "method_sig": "AnnotatedType[] getAnnotatedActualTypeArguments()", "description": "Returns the potentially annotated actual type arguments of this parameterized type."}, {"method_name": "getAnnotatedOwnerType", "method_sig": "AnnotatedType getAnnotatedOwnerType()", "description": "Returns the potentially annotated type that this type is a member of, if\n this type represents a nested type. For example, if this type is\n @TA O<T>.I<S>, return a representation of @TA O<T>.\n\n Returns null if this AnnotatedType represents a\n     top-level type, or a local or anonymous class, or a primitive type, or\n     void."}]}