{"name": "Interface AccessibleComponent", "module": "java.desktop", "package": "javax.accessibility", "text": "The AccessibleComponent interface should be supported by any object\n that is rendered on the screen. This interface provides the standard\n mechanism for an assistive technology to determine and set the graphical\n representation of an object. Applications can determine if an object supports\n the AccessibleComponent interface by first obtaining its\n AccessibleContext and then calling the\n AccessibleContext.getAccessibleComponent() method. If the return value\n is not null, the object supports this interface.", "codes": ["public interface AccessibleComponent"], "fields": [], "methods": [{"method_name": "getBackground", "method_sig": "Color getBackground()", "description": "Gets the background color of this object."}, {"method_name": "setBackground", "method_sig": "void setBackground (Color c)", "description": "Sets the background color of this object."}, {"method_name": "getForeground", "method_sig": "Color getForeground()", "description": "Gets the foreground color of this object."}, {"method_name": "setForeground", "method_sig": "void setForeground (Color c)", "description": "Sets the foreground color of this object."}, {"method_name": "getCursor", "method_sig": "Cursor getCursor()", "description": "Gets the cursor of this object."}, {"method_name": "setCursor", "method_sig": "void setCursor (Cursor cursor)", "description": "Sets the cursor of this object."}, {"method_name": "getFont", "method_sig": "Font getFont()", "description": "Gets the font of this object."}, {"method_name": "setFont", "method_sig": "void setFont (Font f)", "description": "Sets the font of this object."}, {"method_name": "getFontMetrics", "method_sig": "FontMetrics getFontMetrics (Font f)", "description": "Gets the FontMetrics of this object."}, {"method_name": "isEnabled", "method_sig": "boolean isEnabled()", "description": "Determines if the object is enabled. Objects that are enabled will also\n have the AccessibleState.ENABLED state set in their\n AccessibleStateSets."}, {"method_name": "setEnabled", "method_sig": "void setEnabled (boolean b)", "description": "Sets the enabled state of the object."}, {"method_name": "isVisible", "method_sig": "boolean isVisible()", "description": "Determines if the object is visible. Note: this means that the object\n intends to be visible; however, it may not be showing on the screen\n because one of the objects that this object is contained by is currently\n not visible. To determine if an object is showing on the screen, use\n isShowing()\n\n Objects that are visible will also have the\n AccessibleState.VISIBLE state set in their\n AccessibleStateSets."}, {"method_name": "setVisible", "method_sig": "void setVisible (boolean b)", "description": "Sets the visible state of the object."}, {"method_name": "isShowing", "method_sig": "boolean isShowing()", "description": "Determines if the object is showing. This is determined by checking the\n visibility of the object and its ancestors. Note: this will return\n true even if the object is obscured by another (for example, it\n is underneath a menu that was pulled down)."}, {"method_name": "contains", "method_sig": "boolean contains (Point p)", "description": "Checks whether the specified point is within this object's bounds, where\n the point's x and y coordinates are defined to be relative to the\n coordinate system of the object."}, {"method_name": "getLocationOnScreen", "method_sig": "Point getLocationOnScreen()", "description": "Returns the location of the object on the screen."}, {"method_name": "getLocation", "method_sig": "Point getLocation()", "description": "Gets the location of the object relative to the parent in the form of a\n point specifying the object's top-left corner in the screen's coordinate\n space."}, {"method_name": "setLocation", "method_sig": "void setLocation (Point p)", "description": "Sets the location of the object relative to the parent."}, {"method_name": "getBounds", "method_sig": "Rectangle getBounds()", "description": "Gets the bounds of this object in the form of a Rectangle object.\n The bounds specify this object's width, height, and location relative to\n its parent."}, {"method_name": "setBounds", "method_sig": "void setBounds (Rectangle r)", "description": "Sets the bounds of this object in the form of a Rectangle object.\n The bounds specify this object's width, height, and location relative to\n its parent."}, {"method_name": "getSize", "method_sig": "Dimension getSize()", "description": "Returns the size of this object in the form of a Dimension\n object. The height field of the Dimension object contains\n this object's height, and the width field of the\n Dimension object contains this object's width."}, {"method_name": "setSize", "method_sig": "void setSize (Dimension d)", "description": "Resizes this object so that it has width and height."}, {"method_name": "getAccessibleAt", "method_sig": "Accessible getAccessibleAt (Point p)", "description": "Returns the Accessible child, if one exists, contained at the\n local coordinate Point."}, {"method_name": "isFocusTraversable", "method_sig": "boolean isFocusTraversable()", "description": "Returns whether this object can accept focus or not. Objects that can\n accept focus will also have the AccessibleState.FOCUSABLE state\n set in their AccessibleStateSets."}, {"method_name": "requestFocus", "method_sig": "void requestFocus()", "description": "Requests focus for this object. If this object cannot accept focus,\n nothing will happen. Otherwise, the object will attempt to take focus."}, {"method_name": "addFocusListener", "method_sig": "void addFocusListener (FocusListener l)", "description": "Adds the specified focus listener to receive focus events from this\n component."}, {"method_name": "removeFocusListener", "method_sig": "void removeFocusListener (FocusListener l)", "description": "Removes the specified focus listener so it no longer receives focus\n events from this component."}]}