{"name": "Class CookieManager", "module": "java.base", "package": "java.net", "text": "CookieManager provides a concrete implementation of CookieHandler,\n which separates the storage of cookies from the policy surrounding accepting\n and rejecting cookies. A CookieManager is initialized with a CookieStore\n which manages storage, and a CookiePolicy object, which makes\n policy decisions on cookie acceptance/rejection.\n\n  The HTTP cookie management in java.net package looks like:\n \n\n                  use\n CookieHandler <------- HttpURLConnection\n       ^\n       | impl\n       |         use\n CookieManager -------> CookiePolicy\n             |   use\n             |--------> HttpCookie\n             |              ^\n             |              | use\n             |   use        |\n             |--------> CookieStore\n                            ^\n                            | impl\n                            |\n                  Internal in-memory implementation\n \n\n\n     CookieHandler is at the core of cookie management. User can call\n     CookieHandler.setDefault to set a concrete CookieHanlder implementation\n     to be used.\n   \n\n     CookiePolicy.shouldAccept will be called by CookieManager.put to see whether\n     or not one cookie should be accepted and put into cookie store. User can use\n     any of three pre-defined CookiePolicy, namely ACCEPT_ALL, ACCEPT_NONE and\n     ACCEPT_ORIGINAL_SERVER, or user can define his own CookiePolicy implementation\n     and tell CookieManager to use it.\n   \n\n     CookieStore is the place where any accepted HTTP cookie is stored in.\n     If not specified when created, a CookieManager instance will use an internal\n     in-memory implementation. Or user can implements one and tell CookieManager\n     to use it.\n   \n\n     Currently, only CookieStore.add(URI, HttpCookie) and CookieStore.get(URI)\n     are used by CookieManager. Others are for completeness and might be needed\n     by a more sophisticated CookieStore implementation, e.g. a NetscapeCookieStore.\n   \n\n\nThere're various ways user can hook up his own HTTP cookie management behavior, e.g.\n \n\nUse CookieHandler.setDefault to set a brand new CookieHandler implementation\n   Let CookieManager be the default CookieHandler implementation,\n       but implement user's own CookieStore and CookiePolicy\n       and tell default CookieManager to use them:\n     \n       // this should be done at the beginning of an HTTP session\n       CookieHandler.setDefault(new CookieManager(new MyCookieStore(), new MyCookiePolicy()));\n     \nLet CookieManager be the default CookieHandler implementation, but\n       use customized CookiePolicy:\n     \n       // this should be done at the beginning of an HTTP session\n       CookieHandler.setDefault(new CookieManager());\n       // this can be done at any point of an HTTP session\n       ((CookieManager)CookieHandler.getDefault()).setCookiePolicy(new MyCookiePolicy());\n     \n\n\nThe implementation conforms to RFC 2965, section 3.3.", "codes": ["public class CookieManager\nextends CookieHandler"], "fields": [], "methods": [{"method_name": "setCookiePolicy", "method_sig": "public void setCookiePolicy (CookiePolicy cookiePolicy)", "description": "To set the cookie policy of this cookie manager.\n\n  A instance of CookieManager will have\n cookie policy ACCEPT_ORIGINAL_SERVER by default. Users always\n can call this method to set another cookie policy."}, {"method_name": "getCookieStore", "method_sig": "public CookieStore getCookieStore()", "description": "To retrieve current cookie store."}]}