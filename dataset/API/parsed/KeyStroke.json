{"name": "Class KeyStroke", "module": "java.desktop", "package": "javax.swing", "text": "A KeyStroke represents a key action on the keyboard, or equivalent input\n device. KeyStrokes can correspond to only a press or release of a particular\n key, just as KEY_PRESSED and KEY_RELEASED KeyEvents do; alternately, they\n can correspond to typing a specific Java character, just as KEY_TYPED\n KeyEvents do. In all cases, KeyStrokes can specify modifiers (alt, shift,\n control, meta, altGraph, or a combination thereof) which must be present during the\n action for an exact match.\n \n KeyStrokes are used to define high-level (semantic) action events. Instead\n of trapping every keystroke and throwing away the ones you are not\n interested in, those keystrokes you care about automatically initiate\n actions on the Components with which they are registered.\n \n KeyStrokes are immutable, and are intended to be unique. Client code cannot\n create a KeyStroke; a variant of getKeyStroke must be used\n instead. These factory methods allow the KeyStroke implementation to cache\n and share instances efficiently.\n \nWarning:\n Serialized objects of this class will not be compatible with\n future Swing releases. The current serialization support is\n appropriate for short term storage or RMI between applications running\n the same version of Swing.  As of 1.4, support for long term storage\n of all JavaBeans\u2122\n has been added to the java.beans package.\n Please see XMLEncoder.", "codes": ["public class KeyStroke\nextends AWTKeyStroke"], "fields": [], "methods": [{"method_name": "getKeyStroke", "method_sig": "public static KeyStroke getKeyStroke (char keyChar)", "description": "Returns a shared instance of a KeyStroke\n that represents a KEY_TYPED event for the\n specified character."}, {"method_name": "getKeyStroke", "method_sig": "@Deprecated\npublic static KeyStroke getKeyStroke (char keyChar,\n                                     boolean onKeyRelease)", "description": "Returns an instance of a KeyStroke, specifying whether the key is\n considered to be activated when it is pressed or released. Unlike all\n other factory methods in this class, the instances returned by this\n method are not necessarily cached or shared."}, {"method_name": "getKeyStroke", "method_sig": "public static KeyStroke getKeyStroke (Character keyChar,\n                                     int modifiers)", "description": "Returns a shared instance of a KeyStroke\n that represents a KEY_TYPED event for the\n specified Character object and a\n set of modifiers. Note that the first parameter is of type Character\n rather than char. This is to avoid inadvertent clashes with calls to\n getKeyStroke(int keyCode, int modifiers).\n\n The modifiers consist of any combination of following:\njava.awt.event.InputEvent.SHIFT_DOWN_MASK\n java.awt.event.InputEvent.CTRL_DOWN_MASK\n java.awt.event.InputEvent.META_DOWN_MASK\n java.awt.event.InputEvent.ALT_DOWN_MASK\n java.awt.event.InputEvent.ALT_GRAPH_DOWN_MASK\n \n The old modifiers listed below also can be used, but they are\n mapped to _DOWN_ modifiers. \njava.awt.event.InputEvent.SHIFT_MASK\n java.awt.event.InputEvent.CTRL_MASK\n java.awt.event.InputEvent.META_MASK\n java.awt.event.InputEvent.ALT_MASK\n java.awt.event.InputEvent.ALT_GRAPH_MASK\n \n also can be used, but they are mapped to _DOWN_ modifiers.\n\n Since these numbers are all different powers of two, any combination of\n them is an integer in which each bit represents a different modifier\n key. Use 0 to specify no modifiers."}, {"method_name": "getKeyStroke", "method_sig": "public static KeyStroke getKeyStroke (int keyCode,\n                                     int modifiers,\n                                     boolean onKeyRelease)", "description": "Returns a shared instance of a KeyStroke, given a numeric key code and a\n set of modifiers, specifying whether the key is activated when it is\n pressed or released.\n \n The \"virtual key\" constants defined in java.awt.event.KeyEvent can be\n used to specify the key code. For example:\njava.awt.event.KeyEvent.VK_ENTER\n java.awt.event.KeyEvent.VK_TAB\n java.awt.event.KeyEvent.VK_SPACE\n \n Alternatively, the key code may be obtained by calling\n java.awt.event.KeyEvent.getExtendedKeyCodeForChar.\n\n The modifiers consist of any combination of:\njava.awt.event.InputEvent.SHIFT_DOWN_MASK\n java.awt.event.InputEvent.CTRL_DOWN_MASK\n java.awt.event.InputEvent.META_DOWN_MASK\n java.awt.event.InputEvent.ALT_DOWN_MASK\n java.awt.event.InputEvent.ALT_GRAPH_DOWN_MASK\n \n The old modifiers \njava.awt.event.InputEvent.SHIFT_MASK\n java.awt.event.InputEvent.CTRL_MASK\n java.awt.event.InputEvent.META_MASK\n java.awt.event.InputEvent.ALT_MASK\n java.awt.event.InputEvent.ALT_GRAPH_MASK\n \n also can be used, but they are mapped to _DOWN_ modifiers.\n\n Since these numbers are all different powers of two, any combination of\n them is an integer in which each bit represents a different modifier\n key. Use 0 to specify no modifiers."}, {"method_name": "getKeyStroke", "method_sig": "public static KeyStroke getKeyStroke (int keyCode,\n                                     int modifiers)", "description": "Returns a shared instance of a KeyStroke, given a numeric key code and a\n set of modifiers. The returned KeyStroke will correspond to a key press.\n \n The \"virtual key\" constants defined in java.awt.event.KeyEvent can be\n used to specify the key code. For example:\njava.awt.event.KeyEvent.VK_ENTER\n java.awt.event.KeyEvent.VK_TAB\n java.awt.event.KeyEvent.VK_SPACE\n \n Alternatively, the key code may be obtained by calling\n java.awt.event.KeyEvent.getExtendedKeyCodeForChar.\n\n The modifiers consist of any combination of:\njava.awt.event.InputEvent.SHIFT_DOWN_MASK\n java.awt.event.InputEvent.CTRL_DOWN_MASK\n java.awt.event.InputEvent.META_DOWN_MASK\n java.awt.event.InputEvent.ALT_DOWN_MASK\n java.awt.event.InputEvent.ALT_GRAPH_DOWN_MASK\n \n The old modifiers \njava.awt.event.InputEvent.SHIFT_MASK\n java.awt.event.InputEvent.CTRL_MASK\n java.awt.event.InputEvent.META_MASK\n java.awt.event.InputEvent.ALT_MASK\n java.awt.event.InputEvent.ALT_GRAPH_MASK\n \n also can be used, but they are mapped to _DOWN_ modifiers.\n\n Since these numbers are all different powers of two, any combination of\n them is an integer in which each bit represents a different modifier\n key. Use 0 to specify no modifiers."}, {"method_name": "getKeyStrokeForEvent", "method_sig": "public static KeyStroke getKeyStrokeForEvent (KeyEvent anEvent)", "description": "Returns a KeyStroke which represents the stroke which generated a given\n KeyEvent.\n \n This method obtains the keyChar from a KeyTyped event, and the keyCode\n from a KeyPressed or KeyReleased event. The KeyEvent modifiers are\n obtained for all three types of KeyEvent."}, {"method_name": "getKeyStroke", "method_sig": "public static KeyStroke getKeyStroke (String s)", "description": "Parses a string and returns a KeyStroke.\n The string must have the following syntax:\n \n    <modifiers>* (<typedID> | <pressedReleasedID>)\n\n    modifiers := shift | control | ctrl | meta | alt | altGraph\n    typedID := typed <typedKey>\n    typedKey := string of length 1 giving Unicode character.\n    pressedReleasedID := (pressed | released) key\n    key := KeyEvent key code name, i.e. the name following \"VK_\".\n \n If typed, pressed or released is not specified, pressed is assumed. Here\n are some examples:\n \n     \"INSERT\" => getKeyStroke(KeyEvent.VK_INSERT, 0);\n     \"control DELETE\" => getKeyStroke(KeyEvent.VK_DELETE, InputEvent.CTRL_MASK);\n     \"alt shift X\" => getKeyStroke(KeyEvent.VK_X, InputEvent.ALT_MASK | InputEvent.SHIFT_MASK);\n     \"alt shift released X\" => getKeyStroke(KeyEvent.VK_X, InputEvent.ALT_MASK | InputEvent.SHIFT_MASK, true);\n     \"typed a\" => getKeyStroke('a');\n \n\n In order to maintain backward-compatibility, specifying a null String,\n or a String which is formatted incorrectly, returns null."}]}