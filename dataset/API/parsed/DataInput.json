{"name": "Interface DataInput", "module": "java.base", "package": "java.io", "text": "The DataInput interface provides\n for reading bytes from a binary stream and\n reconstructing from them data in any of\n the Java primitive types. There is also\n a\n facility for reconstructing a String\n from data in\n modified UTF-8\n format.\n \n It is generally true of all the reading\n routines in this interface that if end of\n file is reached before the desired number\n of bytes has been read, an EOFException\n (which is a kind of IOException)\n is thrown. If any byte cannot be read for\n any reason other than end of file, an IOException\n other than EOFException is\n thrown. In particular, an IOException\n may be thrown if the input stream has been\n closed.\n\n Modified UTF-8\n\n Implementations of the DataInput and DataOutput interfaces represent\n Unicode strings in a format that is a slight modification of UTF-8.\n (For information regarding the standard UTF-8 format, see section\n 3.9 Unicode Encoding Forms of The Unicode Standard, Version\n 4.0)\n\n \nCharacters in the range '\\u0001' to\n         '\\u007F' are represented by a single byte.\n The null character '\\u0000' and characters\n         in the range '\\u0080' to '\\u07FF' are\n         represented by a pair of bytes.\n Characters in the range '\\u0800'\n         to '\\uFFFF' are represented by three bytes.\n \n\nEncoding of UTF-8 values\n\n\nValue\nByte\nBit Values\n\n\n\n\n 7 \n 6 \n 5 \n 4 \n 3 \n 2 \n 1 \n 0 \n\n\n\n\n\\u0001 to \\u007F \n 1 \n0\n       bits 6-0\n     \n\n\n\\u0000,\n\\u0080 to \\u07FF \n 1 \n1\n       1\n       0\n       bits 10-6\n     \n\n\n 2 \n1\n       0\n       bits 5-0\n     \n\n\n\\u0800 to \\uFFFF \n 1 \n1\n       1\n       1\n       0\n       bits 15-12\n     \n\n\n 2 \n1\n       0\n       bits 11-6\n     \n\n\n 3 \n1\n       0\n       bits 5-0\n     \n\n\n\n The differences between this format and the\n standard UTF-8 format are the following:\n \nThe null byte '\\u0000' is encoded in 2-byte format\n     rather than 1-byte, so that the encoded strings never have\n     embedded nulls.\n Only the 1-byte, 2-byte, and 3-byte formats are used.\n Supplementary characters\n     are represented in the form of surrogate pairs.\n ", "codes": ["public interface DataInput"], "fields": [], "methods": [{"method_name": "readFully", "method_sig": "void readFully (byte[] b)\n        throws IOException", "description": "Reads some bytes from an input\n stream and stores them into the buffer\n array b. The number of bytes\n read is equal\n to the length of b.\n \n This method blocks until one of the\n following conditions occurs:\n \nb.length\n bytes of input data are available, in which\n case a normal return is made.\n\n End of\n file is detected, in which case an EOFException\n is thrown.\n\n An I/O error occurs, in\n which case an IOException other\n than EOFException is thrown.\n \n\n If b is null,\n a NullPointerException is thrown.\n If b.length is zero, then\n no bytes are read. Otherwise, the first\n byte read is stored into element b[0],\n the next one into b[1], and\n so on.\n If an exception is thrown from\n this method, then it may be that some but\n not all bytes of b have been\n updated with data from the input stream."}, {"method_name": "readFully", "method_sig": "void readFully (byte[] b,\n               int off,\n               int len)\n        throws IOException", "description": "Reads len\n bytes from\n an input stream.\n \n This method\n blocks until one of the following conditions\n occurs:\n \nlen bytes\n of input data are available, in which case\n a normal return is made.\n\n End of file\n is detected, in which case an EOFException\n is thrown.\n\n An I/O error occurs, in\n which case an IOException other\n than EOFException is thrown.\n \n\n If b is null,\n a NullPointerException is thrown.\n If off is negative, or len\n is negative, or off+len is\n greater than the length of the array b,\n then an IndexOutOfBoundsException\n is thrown.\n If len is zero,\n then no bytes are read. Otherwise, the first\n byte read is stored into element b[off],\n the next one into b[off+1],\n and so on. The number of bytes read is,\n at most, equal to len."}, {"method_name": "skipBytes", "method_sig": "int skipBytes (int n)\n       throws IOException", "description": "Makes an attempt to skip over\n n bytes\n of data from the input\n stream, discarding the skipped bytes. However,\n it may skip\n over some smaller number of\n bytes, possibly zero. This may result from\n any of a\n number of conditions; reaching\n end of file before n bytes\n have been skipped is\n only one possibility.\n This method never throws an EOFException.\n The actual\n number of bytes skipped is returned."}, {"method_name": "readBoolean", "method_sig": "boolean readBoolean()\n             throws IOException", "description": "Reads one input byte and returns\n true if that byte is nonzero,\n false if that byte is zero.\n This method is suitable for reading\n the byte written by the writeBoolean\n method of interface DataOutput."}, {"method_name": "readByte", "method_sig": "byte readByte()\n       throws IOException", "description": "Reads and returns one input byte.\n The byte is treated as a signed value in\n the range -128 through 127,\n inclusive.\n This method is suitable for\n reading the byte written by the writeByte\n method of interface DataOutput."}, {"method_name": "readUnsignedByte", "method_sig": "int readUnsignedByte()\n              throws IOException", "description": "Reads one input byte, zero-extends\n it to type int, and returns\n the result, which is therefore in the range\n 0\n through 255.\n This method is suitable for reading\n the byte written by the writeByte\n method of interface DataOutput\n if the argument to writeByte\n was intended to be a value in the range\n 0 through 255."}, {"method_name": "readShort", "method_sig": "short readShort()\n         throws IOException", "description": "Reads two input bytes and returns\n a short value. Let a\n be the first byte read and b\n be the second byte. The value\n returned\n is:\n (short)((a << 8) | (b & 0xff))\n \n This method\n is suitable for reading the bytes written\n by the writeShort method of\n interface DataOutput."}, {"method_name": "readUnsignedShort", "method_sig": "int readUnsignedShort()\n               throws IOException", "description": "Reads two input bytes and returns\n an int value in the range 0\n through 65535. Let a\n be the first byte read and\n b\n be the second byte. The value returned is:\n (((a & 0xff) << 8) | (b & 0xff))\n \n This method is suitable for reading the bytes\n written by the writeShort method\n of interface DataOutput  if\n the argument to writeShort\n was intended to be a value in the range\n 0 through 65535."}, {"method_name": "readChar", "method_sig": "char readChar()\n       throws IOException", "description": "Reads two input bytes and returns a char value.\n Let a\n be the first byte read and b\n be the second byte. The value\n returned is:\n (char)((a << 8) | (b & 0xff))\n \n This method\n is suitable for reading bytes written by\n the writeChar method of interface\n DataOutput."}, {"method_name": "readInt", "method_sig": "int readInt()\n     throws IOException", "description": "Reads four input bytes and returns an\n int value. Let a-d\n be the first through fourth bytes read. The value returned is:\n \n (((a & 0xff) << 24) | ((b & 0xff) << 16) |\n  ((c & 0xff) <<  8) | (d & 0xff))\n \n This method is suitable\n for reading bytes written by the writeInt\n method of interface DataOutput."}, {"method_name": "readLong", "method_sig": "long readLong()\n       throws IOException", "description": "Reads eight input bytes and returns\n a long value. Let a-h\n be the first through eighth bytes read.\n The value returned is:\n \n (((long)(a & 0xff) << 56) |\n  ((long)(b & 0xff) << 48) |\n  ((long)(c & 0xff) << 40) |\n  ((long)(d & 0xff) << 32) |\n  ((long)(e & 0xff) << 24) |\n  ((long)(f & 0xff) << 16) |\n  ((long)(g & 0xff) <<  8) |\n  ((long)(h & 0xff)))\n \n\n This method is suitable\n for reading bytes written by the writeLong\n method of interface DataOutput."}, {"method_name": "readFloat", "method_sig": "float readFloat()\n         throws IOException", "description": "Reads four input bytes and returns\n a float value. It does this\n by first constructing an int\n value in exactly the manner\n of the readInt\n method, then converting this int\n value to a float in\n exactly the manner of the method Float.intBitsToFloat.\n This method is suitable for reading\n bytes written by the writeFloat\n method of interface DataOutput."}, {"method_name": "readDouble", "method_sig": "double readDouble()\n           throws IOException", "description": "Reads eight input bytes and returns\n a double value. It does this\n by first constructing a long\n value in exactly the manner\n of the readLong\n method, then converting this long\n value to a double in exactly\n the manner of the method Double.longBitsToDouble.\n This method is suitable for reading\n bytes written by the writeDouble\n method of interface DataOutput."}, {"method_name": "readLine", "method_sig": "String readLine()\n         throws IOException", "description": "Reads the next line of text from the input stream.\n It reads successive bytes, converting\n each byte separately into a character,\n until it encounters a line terminator or\n end of\n file; the characters read are then\n returned as a String. Note\n that because this\n method processes bytes,\n it does not support input of the full Unicode\n character set.\n \n If end of file is encountered\n before even one byte can be read, then null\n is returned. Otherwise, each byte that is\n read is converted to type char\n by zero-extension. If the character '\\n'\n is encountered, it is discarded and reading\n ceases. If the character '\\r'\n is encountered, it is discarded and, if\n the following byte converts  to the\n character '\\n', then that is\n discarded also; reading then ceases. If\n end of file is encountered before either\n of the characters '\\n' and\n '\\r' is encountered, reading\n ceases. Once reading has ceased, a String\n is returned that contains all the characters\n read and not discarded, taken in order.\n Note that every character in this string\n will have a value less than \\u0100,\n that is, (char)256."}, {"method_name": "readUTF", "method_sig": "String readUTF()\n        throws IOException", "description": "Reads in a string that has been encoded using a\n modified UTF-8\n format.\n The general contract of readUTF\n is that it reads a representation of a Unicode\n character string encoded in modified\n UTF-8 format; this string of characters\n is then returned as a String.\n \n First, two bytes are read and used to\n construct an unsigned 16-bit integer in\n exactly the manner of the readUnsignedShort\n method . This integer value is called the\n UTF length and specifies the number\n of additional bytes to be read. These bytes\n are then converted to characters by considering\n them in groups. The length of each group\n is computed from the value of the first\n byte of the group. The byte following a\n group, if any, is the first byte of the\n next group.\n \n If the first byte of a group\n matches the bit pattern 0xxxxxxx\n (where x means \"may be 0\n or 1\"), then the group consists\n of just that byte. The byte is zero-extended\n to form a character.\n \n If the first byte\n of a group matches the bit pattern 110xxxxx,\n then the group consists of that byte a\n and a second byte b. If there\n is no byte b (because byte\n a was the last of the bytes\n to be read), or if byte b does\n not match the bit pattern 10xxxxxx,\n then a UTFDataFormatException\n is thrown. Otherwise, the group is converted\n to the character:\n (char)(((a & 0x1F) << 6) | (b & 0x3F))\n \n If the first byte of a group\n matches the bit pattern 1110xxxx,\n then the group consists of that byte a\n and two more bytes b and c.\n If there is no byte c (because\n byte a was one of the last\n two of the bytes to be read), or either\n byte b or byte c\n does not match the bit pattern 10xxxxxx,\n then a UTFDataFormatException\n is thrown. Otherwise, the group is converted\n to the character:\n \n (char)(((a & 0x0F) << 12) | ((b & 0x3F) << 6) | (c & 0x3F))\n \n If the first byte of a group matches the\n pattern 1111xxxx or the pattern\n 10xxxxxx, then a UTFDataFormatException\n is thrown.\n \n If end of file is encountered\n at any time during this entire process,\n then an EOFException is thrown.\n \n After every group has been converted to\n a character by this process, the characters\n are gathered, in the same order in which\n their corresponding groups were read from\n the input stream, to form a String,\n which is returned.\n \n The writeUTF\n method of interface DataOutput\n may be used to write data that is suitable\n for reading by this method."}]}