{"name": "Interface Stream.Builder<T>", "module": "java.base", "package": "java.util.stream", "text": "A mutable builder for a Stream.  This allows the creation of a\n Stream by generating elements individually and adding them to the\n Builder (without the copying overhead that comes from using\n an ArrayList as a temporary buffer.)\n\n A stream builder has a lifecycle, which starts in a building\n phase, during which elements can be added, and then transitions to a built\n phase, after which elements may not be added.  The built phase begins\n when the build() method is called, which creates an ordered\n Stream whose elements are the elements that were added to the stream\n builder, in the order they were added.", "codes": ["public static interface Stream.Builder<T>\nextends Consumer<T>"], "fields": [], "methods": [{"method_name": "accept", "method_sig": "void accept (T t)", "description": "Adds an element to the stream being built."}, {"method_name": "add", "method_sig": "default Stream.Builder<T> add (T t)", "description": "Adds an element to the stream being built."}, {"method_name": "build", "method_sig": "Stream<T> build()", "description": "Builds the stream, transitioning this builder to the built state.\n An IllegalStateException is thrown if there are further attempts\n to operate on the builder after it has entered the built state."}]}