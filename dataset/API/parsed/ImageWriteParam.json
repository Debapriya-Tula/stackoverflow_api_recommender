{"name": "Class ImageWriteParam", "module": "java.desktop", "package": "javax.imageio", "text": "A class describing how a stream is to be encoded.  Instances of\n this class or its subclasses are used to supply prescriptive\n \"how-to\" information to instances of ImageWriter.\n\n  A plug-in for a specific image format may define a subclass of\n this class, and return objects of that class from the\n getDefaultWriteParam method of its\n ImageWriter implementation.  For example, the built-in\n JPEG writer plug-in will return instances of\n javax.imageio.plugins.jpeg.JPEGImageWriteParam.\n\n  The region of the image to be written is determined by first\n intersecting the actual bounds of the image with the rectangle\n specified by IIOParam.setSourceRegion, if any.  If the\n resulting rectangle has a width or height of zero, the writer will\n throw an IIOException. If the intersection is\n non-empty, writing will commence with the first subsampled pixel\n and include additional pixels within the intersected bounds\n according to the horizontal and vertical subsampling factors\n specified by IIOParam.setSourceSubsampling.\n\n  Individual features such as tiling, progressive encoding, and\n compression may be set in one of four modes.\n MODE_DISABLED disables the features;\n MODE_DEFAULT enables the feature with\n writer-controlled parameter values; MODE_EXPLICIT\n enables the feature and allows the use of a set method\n to provide additional parameters; and\n MODE_COPY_FROM_METADATA copies relevant parameter\n values from the stream and image metadata objects passed to the\n writer.  The default for all features is\n MODE_COPY_FROM_METADATA.  Non-standard features\n supplied in subclasses are encouraged, but not required to use a\n similar scheme.\n\n  Plug-in writers may extend the functionality of\n ImageWriteParam by providing a subclass that implements\n additional, plug-in specific interfaces.  It is up to the plug-in\n to document what interfaces are available and how they are to be\n used.  Writers will silently ignore any extended features of an\n ImageWriteParam subclass of which they are not aware.\n Also, they may ignore any optional features that they normally\n disable when creating their own ImageWriteParam\n instances via getDefaultWriteParam.\n\n  Note that unless a query method exists for a capability, it must\n be supported by all ImageWriter implementations\n (e.g. progressive encoding is optional, but subsampling must be\n supported).", "codes": ["public class ImageWriteParam\nextends IIOParam"], "fields": [{"field_name": "MODE_DISABLED", "field_sig": "public static final\u00a0int MODE_DISABLED", "description": "A constant value that may be passed into methods such as\n setTilingMode, setProgressiveMode,\n and setCompressionMode to disable a feature for\n future writes.  That is, when this mode is set the stream will\n not be tiled, progressive, or compressed, and the\n relevant accessor methods will throw an\n IllegalStateException."}, {"field_name": "MODE_DEFAULT", "field_sig": "public static final\u00a0int MODE_DEFAULT", "description": "A constant value that may be passed into methods such as\n setTilingMode,\n setProgressiveMode, and\n setCompressionMode to enable that feature for\n future writes.  That is, when this mode is enabled the stream\n will be tiled, progressive, or compressed according to a\n sensible default chosen internally by the writer in a plug-in\n dependent way, and the relevant accessor methods will\n throw an IllegalStateException."}, {"field_name": "MODE_EXPLICIT", "field_sig": "public static final\u00a0int MODE_EXPLICIT", "description": "A constant value that may be passed into methods such as\n setTilingMode or setCompressionMode\n to enable a feature for future writes. That is, when this mode\n is set the stream will be tiled or compressed according to\n additional information supplied to the corresponding\n set methods in this class and retrievable from the\n corresponding get methods.  Note that this mode is\n not supported for progressive output."}, {"field_name": "MODE_COPY_FROM_METADATA", "field_sig": "public static final\u00a0int MODE_COPY_FROM_METADATA", "description": "A constant value that may be passed into methods such as\n setTilingMode, setProgressiveMode, or\n setCompressionMode to enable that feature for\n future writes.  That is, when this mode is enabled the stream\n will be tiled, progressive, or compressed based on the contents\n of stream and/or image metadata passed into the write\n operation, and any relevant accessor methods will throw an\n IllegalStateException.\n\n  This is the default mode for all features, so that a read\n including metadata followed by a write including metadata will\n preserve as much information as possible."}, {"field_name": "canWriteTiles", "field_sig": "protected\u00a0boolean canWriteTiles", "description": "A boolean that is true if this\n ImageWriteParam allows tile width and tile height\n parameters to be set.  By default, the value is\n false.  Subclasses must set the value manually.\n\n  Subclasses that do not support writing tiles should ensure\n that this value is set to false."}, {"field_name": "tilingMode", "field_sig": "protected\u00a0int tilingMode", "description": "The mode controlling tiling settings, which Must be\n set to one of the four MODE_* values.  The default\n is MODE_COPY_FROM_METADATA.\n\n  Subclasses that do not writing tiles may ignore this value."}, {"field_name": "preferredTileSizes", "field_sig": "protected\u00a0Dimension[] preferredTileSizes", "description": "An array of preferred tile size range pairs.  The default value\n is null, which indicates that there are no\n preferred sizes.  If the value is non-null, it\n must have an even length of at least two.\n\n  Subclasses that do not support writing tiles may ignore\n this value."}, {"field_name": "tilingSet", "field_sig": "protected\u00a0boolean tilingSet", "description": "A boolean that is true if tiling\n parameters have been specified.\n\n  Subclasses that do not support writing tiles may ignore\n this value."}, {"field_name": "tileWidth", "field_sig": "protected\u00a0int tileWidth", "description": "The width of each tile if tiling has been set, or 0 otherwise.\n\n  Subclasses that do not support tiling may ignore this\n value."}, {"field_name": "tileHeight", "field_sig": "protected\u00a0int tileHeight", "description": "The height of each tile if tiling has been set, or 0 otherwise.\n The initial value is 0.\n\n  Subclasses that do not support tiling may ignore this\n value."}, {"field_name": "canOffsetTiles", "field_sig": "protected\u00a0boolean canOffsetTiles", "description": "A boolean that is true if this\n ImageWriteParam allows tiling grid offset\n parameters to be set.  By default, the value is\n false.  Subclasses must set the value manually.\n\n  Subclasses that do not support writing tiles, or that\n support writing but not offsetting tiles must ensure that this\n value is set to false."}, {"field_name": "tileGridXOffset", "field_sig": "protected\u00a0int tileGridXOffset", "description": "The amount by which the tile grid origin should be offset\n horizontally from the image origin if tiling has been set,\n or 0 otherwise.  The initial value is 0.\n\n  Subclasses that do not support offsetting tiles may ignore\n this value."}, {"field_name": "tileGridYOffset", "field_sig": "protected\u00a0int tileGridYOffset", "description": "The amount by which the tile grid origin should be offset\n vertically from the image origin if tiling has been set,\n or 0 otherwise.  The initial value is 0.\n\n  Subclasses that do not support offsetting tiles may ignore\n this value."}, {"field_name": "canWriteProgressive", "field_sig": "protected\u00a0boolean canWriteProgressive", "description": "A boolean that is true if this\n ImageWriteParam allows images to be written as a\n progressive sequence of increasing quality passes.  By default,\n the value is false.  Subclasses must set the value\n manually.\n\n  Subclasses that do not support progressive encoding must\n ensure that this value is set to false."}, {"field_name": "progressiveMode", "field_sig": "protected\u00a0int progressiveMode", "description": "The mode controlling progressive encoding, which must be set to\n one of the four MODE_* values, except\n MODE_EXPLICIT.  The default is\n MODE_COPY_FROM_METADATA.\n\n  Subclasses that do not support progressive encoding may\n ignore this value."}, {"field_name": "canWriteCompressed", "field_sig": "protected\u00a0boolean canWriteCompressed", "description": "A boolean that is true if this writer\n can write images using compression. By default, the value is\n false.  Subclasses must set the value manually.\n\n  Subclasses that do not support compression must ensure that\n this value is set to false."}, {"field_name": "compressionMode", "field_sig": "protected\u00a0int compressionMode", "description": "The mode controlling compression settings, which must be set to\n one of the four MODE_* values.  The default is\n MODE_COPY_FROM_METADATA.\n\n  Subclasses that do not support compression may ignore this\n value."}, {"field_name": "compressionTypes", "field_sig": "protected\u00a0String[] compressionTypes", "description": "An array of Strings containing the names of the\n available compression types.  Subclasses must set the value\n manually.\n\n  Subclasses that do not support compression may ignore this\n value."}, {"field_name": "compressionType", "field_sig": "protected\u00a0String compressionType", "description": "A String containing the name of the current\n compression type, or null if none is set.\n\n  Subclasses that do not support compression may ignore this\n value."}, {"field_name": "compressionQuality", "field_sig": "protected\u00a0float compressionQuality", "description": "A float containing the current compression quality\n setting.  The initial value is 1.0F.\n\n  Subclasses that do not support compression may ignore this\n value."}, {"field_name": "locale", "field_sig": "protected\u00a0Locale locale", "description": "A Locale to be used to localize compression type\n names and quality descriptions, or null to use a\n default Locale.  Subclasses must set the value\n manually."}], "methods": [{"method_name": "getLocale", "method_sig": "public Locale getLocale()", "description": "Returns the currently set Locale, or\n null if only a default Locale is\n supported."}, {"method_name": "canWriteTiles", "method_sig": "public boolean canWriteTiles()", "description": "Returns true if the writer can perform tiling\n while writing.  If this method returns false, then\n setTiling will throw an\n UnsupportedOperationException."}, {"method_name": "canOffsetTiles", "method_sig": "public boolean canOffsetTiles()", "description": "Returns true if the writer can perform tiling with\n non-zero grid offsets while writing.  If this method returns\n false, then setTiling will throw an\n UnsupportedOperationException if the grid offset\n arguments are not both zero.  If canWriteTiles\n returns false, this method will return\n false as well."}, {"method_name": "setTilingMode", "method_sig": "public void setTilingMode (int mode)", "description": "Determines whether the image will be tiled in the output\n stream and, if it will, how the tiling parameters will be\n determined.  The modes are interpreted as follows:\n\n \nMODE_DISABLED - The image will not be tiled.\n setTiling will throw an\n IllegalStateException.\n\n MODE_DEFAULT - The image will be tiled using\n default parameters.  setTiling will throw an\n IllegalStateException.\n\n MODE_EXPLICIT - The image will be tiled\n according to parameters given in the setTiling\n method.  Any previously set tiling parameters are discarded.\n\n MODE_COPY_FROM_METADATA - The image will\n conform to the metadata object passed in to a write.\n setTiling will throw an\n IllegalStateException.\n\n "}, {"method_name": "getTilingMode", "method_sig": "public int getTilingMode()", "description": "Returns the current tiling mode, if tiling is supported.\n Otherwise throws an UnsupportedOperationException."}, {"method_name": "getPreferredTileSizes", "method_sig": "public Dimension[] getPreferredTileSizes()", "description": "Returns an array of Dimensions indicating the\n legal size ranges for tiles as they will be encoded in the\n output file or stream.  The returned array is a copy.\n\n  The information is returned as a set of pairs; the first\n element of a pair contains an (inclusive) minimum width and\n height, and the second element contains an (inclusive) maximum\n width and height.  Together, each pair defines a valid range of\n sizes.  To specify a fixed size, use the same width and height\n for both elements.  To specify an arbitrary range, a value of\n null is used in place of an actual array of\n Dimensions.\n\n  If no array is specified on the constructor, but tiling is\n allowed, then this method returns null."}, {"method_name": "setTiling", "method_sig": "public void setTiling (int tileWidth,\n                      int tileHeight,\n                      int tileGridXOffset,\n                      int tileGridYOffset)", "description": "Specifies that the image should be tiled in the output stream.\n The tileWidth and tileHeight\n parameters specify the width and height of the tiles in the\n file.  If the tile width or height is greater than the width or\n height of the image, the image is not tiled in that dimension.\n\n  If canOffsetTiles returns false,\n then the tileGridXOffset and\n tileGridYOffset parameters must be zero."}, {"method_name": "unsetTiling", "method_sig": "public void unsetTiling()", "description": "Removes any previous tile grid parameters specified by calls to\n setTiling.\n\n  The default implementation sets the instance variables\n tileWidth, tileHeight,\n tileGridXOffset, and\n tileGridYOffset to 0."}, {"method_name": "getTileWidth", "method_sig": "public int getTileWidth()", "description": "Returns the width of each tile in an image as it will be\n written to the output stream.  If tiling parameters have not\n been set, an IllegalStateException is thrown."}, {"method_name": "getTileHeight", "method_sig": "public int getTileHeight()", "description": "Returns the height of each tile in an image as it will be written to\n the output stream.  If tiling parameters have not\n been set, an IllegalStateException is thrown."}, {"method_name": "getTileGridXOffset", "method_sig": "public int getTileGridXOffset()", "description": "Returns the horizontal tile grid offset of an image as it will\n be written to the output stream.  If tiling parameters have not\n been set, an IllegalStateException is thrown."}, {"method_name": "getTileGridYOffset", "method_sig": "public int getTileGridYOffset()", "description": "Returns the vertical tile grid offset of an image as it will\n be written to the output stream.  If tiling parameters have not\n been set, an IllegalStateException is thrown."}, {"method_name": "canWriteProgressive", "method_sig": "public boolean canWriteProgressive()", "description": "Returns true if the writer can write out images\n as a series of passes of progressively increasing quality."}, {"method_name": "setProgressiveMode", "method_sig": "public void setProgressiveMode (int mode)", "description": "Specifies that the writer is to write the image out in a\n progressive mode such that the stream will contain a series of\n scans of increasing quality.  If progressive encoding is not\n supported, an UnsupportedOperationException will\n be thrown.\n\n   The mode argument determines how\n the progression parameters are chosen, and must be either\n MODE_DISABLED,\n MODE_COPY_FROM_METADATA, or\n MODE_DEFAULT.  Otherwise an\n IllegalArgumentException is thrown.\n\n  The modes are interpreted as follows:\n\n \nMODE_DISABLED - No progression.  Use this to\n   turn off progression.\n\n   MODE_COPY_FROM_METADATA - The output image\n   will use whatever progression parameters are found in the\n   metadata objects passed into the writer.\n\n   MODE_DEFAULT - The image will be written\n   progressively, with parameters chosen by the writer.\n \n The default is MODE_COPY_FROM_METADATA."}, {"method_name": "getProgressiveMode", "method_sig": "public int getProgressiveMode()", "description": "Returns the current mode for writing the stream in a\n progressive manner."}, {"method_name": "canWriteCompressed", "method_sig": "public boolean canWriteCompressed()", "description": "Returns true if this writer supports compression."}, {"method_name": "setCompressionMode", "method_sig": "public void setCompressionMode (int mode)", "description": "Specifies whether compression is to be performed, and if so how\n compression parameters are to be determined.  The mode\n argument must be one of the four modes, interpreted as follows:\n\n \nMODE_DISABLED - If the mode is set to\n   MODE_DISABLED, methods that query or modify the\n   compression type or parameters will throw an\n   IllegalStateException (if compression is\n   normally supported by the plug-in). Some writers, such as JPEG,\n   do not normally offer uncompressed output. In this case, attempting\n   to set the mode to MODE_DISABLED will throw an\n   UnsupportedOperationException and the mode will not be\n   changed.\n\n   MODE_EXPLICIT - Compress using the\n   compression type and quality settings specified in this\n   ImageWriteParam.  Any previously set compression\n   parameters are discarded.\n\n   MODE_COPY_FROM_METADATA - Use whatever\n   compression parameters are specified in metadata objects\n   passed in to the writer.\n\n   MODE_DEFAULT - Use default compression\n   parameters.\n \n The default is MODE_COPY_FROM_METADATA."}, {"method_name": "getCompressionMode", "method_sig": "public int getCompressionMode()", "description": "Returns the current compression mode, if compression is\n supported."}, {"method_name": "getCompressionTypes", "method_sig": "public String[] getCompressionTypes()", "description": "Returns a list of available compression types, as an array or\n Strings, or null if a compression\n type may not be chosen using these interfaces.  The array\n returned is a copy.\n\n  If the writer only offers a single, mandatory form of\n compression, it is not necessary to provide any named\n compression types.  Named compression types should only be\n used where the user is able to make a meaningful choice\n between different schemes.\n\n  The default implementation checks if compression is\n supported and throws an\n UnsupportedOperationException if not.  Otherwise,\n it returns a clone of the compressionTypes\n instance variable if it is non-null, or else\n returns null."}, {"method_name": "setCompressionType", "method_sig": "public void setCompressionType (String compressionType)", "description": "Sets the compression type to one of the values indicated by\n getCompressionTypes.  If a value of\n null is passed in, any previous setting is\n removed.\n\n  The default implementation checks whether compression is\n supported and the compression mode is\n MODE_EXPLICIT.  If so, it calls\n getCompressionTypes and checks if\n compressionType is one of the legal values.  If it\n is, the compressionType instance variable is set.\n If compressionType is null, the\n instance variable is set without performing any checking."}, {"method_name": "getCompressionType", "method_sig": "public String getCompressionType()", "description": "Returns the currently set compression type, or\n null if none has been set.  The type is returned\n as a String from among those returned by\n getCompressionTypes.\n If no compression type has been set, null is\n returned.\n\n  The default implementation checks whether compression is\n supported and the compression mode is\n MODE_EXPLICIT.  If so, it returns the value of the\n compressionType instance variable."}, {"method_name": "unsetCompression", "method_sig": "public void unsetCompression()", "description": "Removes any previous compression type and quality settings.\n\n  The default implementation sets the instance variable\n compressionType to null, and the\n instance variable compressionQuality to\n 1.0F."}, {"method_name": "getLocalizedCompressionTypeName", "method_sig": "public String getLocalizedCompressionTypeName()", "description": "Returns a localized version of the name of the current\n compression type, using the Locale returned by\n getLocale.\n\n  The default implementation checks whether compression is\n supported and the compression mode is\n MODE_EXPLICIT.  If so, if\n compressionType is non-null the value\n of getCompressionType is returned as a\n convenience."}, {"method_name": "isCompressionLossless", "method_sig": "public boolean isCompressionLossless()", "description": "Returns true if the current compression type\n provides lossless compression.  If a plug-in provides only\n one mandatory compression type, then this method may be\n called without calling setCompressionType first.\n\n  If there are multiple compression types but none has\n been set, an IllegalStateException is thrown.\n\n  The default implementation checks whether compression is\n supported and the compression mode is\n MODE_EXPLICIT.  If so, if\n getCompressionTypes() is null or\n getCompressionType() is non-null\ntrue is returned as a convenience."}, {"method_name": "setCompressionQuality", "method_sig": "public void setCompressionQuality (float quality)", "description": "Sets the compression quality to a value between 0\n and 1.  Only a single compression quality setting\n is supported by default; writers can provide extended versions\n of ImageWriteParam that offer more control.  For\n lossy compression schemes, the compression quality should\n control the tradeoff between file size and image quality (for\n example, by choosing quantization tables when writing JPEG\n images).  For lossless schemes, the compression quality may be\n used to control the tradeoff between file size and time taken\n to perform the compression (for example, by optimizing row\n filters and setting the ZLIB compression level when writing\n PNG images).\n\n  A compression quality setting of 0.0 is most generically\n interpreted as \"high compression is important,\" while a setting of\n 1.0 is most generically interpreted as \"high image quality is\n important.\"\n\n  If there are multiple compression types but none has been\n set, an IllegalStateException is thrown.\n\n  The default implementation checks that compression is\n supported, and that the compression mode is\n MODE_EXPLICIT.  If so, if\n getCompressionTypes() returns null or\n compressionType is non-null it sets\n the compressionQuality instance variable."}, {"method_name": "getCompressionQuality", "method_sig": "public float getCompressionQuality()", "description": "Returns the current compression quality setting.\n\n  If there are multiple compression types but none has been\n set, an IllegalStateException is thrown.\n\n  The default implementation checks that compression is\n supported and that the compression mode is\n MODE_EXPLICIT.  If so, if\n getCompressionTypes() is null or\n getCompressionType() is non-null, it\n returns the value of the compressionQuality\n instance variable."}, {"method_name": "getBitRate", "method_sig": "public float getBitRate (float quality)", "description": "Returns a float indicating an estimate of the\n number of bits of output data for each bit of input image data\n at the given quality level.  The value will typically lie\n between 0 and 1, with smaller values\n indicating more compression.  A special value of\n -1.0F is used to indicate that no estimate is\n available.\n\n  If there are multiple compression types but none has been set,\n an IllegalStateException is thrown.\n\n  The default implementation checks that compression is\n supported and the compression mode is\n MODE_EXPLICIT.  If so, if\n getCompressionTypes() is null or\n getCompressionType() is non-null, and\n quality is within bounds, it returns\n -1.0."}, {"method_name": "getCompressionQualityDescriptions", "method_sig": "public String[] getCompressionQualityDescriptions()", "description": "Returns an array of Strings that may be used along\n with getCompressionQualityValues as part of a user\n interface for setting or displaying the compression quality\n level.  The String with index i\n provides a description of the range of quality levels between\n getCompressionQualityValues[i] and\n getCompressionQualityValues[i + 1].  Note that the\n length of the array returned from\n getCompressionQualityValues will always be one\n greater than that returned from\n getCompressionQualityDescriptions.\n\n  As an example, the strings \"Good\", \"Better\", and \"Best\"\n could be associated with the ranges [0, .33),\n [.33, .66), and [.66, 1.0].  In this\n case, getCompressionQualityDescriptions would\n return { \"Good\", \"Better\", \"Best\" } and\n getCompressionQualityValues would return\n { 0.0F, .33F, .66F, 1.0F }.\n\n  If no descriptions are available, null is\n returned.  If null is returned from\n getCompressionQualityValues, this method must also\n return null.\n\n  The descriptions should be localized for the\n Locale returned by getLocale, if it\n is non-null.\n\n  If there are multiple compression types but none has been set,\n an IllegalStateException is thrown.\n\n  The default implementation checks that compression is\n supported and that the compression mode is\n MODE_EXPLICIT.  If so, if\n getCompressionTypes() is null or\n getCompressionType() is non-null, it\n returns null."}, {"method_name": "getCompressionQualityValues", "method_sig": "public float[] getCompressionQualityValues()", "description": "Returns an array of floats that may be used along\n with getCompressionQualityDescriptions as part of a user\n interface for setting or displaying the compression quality\n level.  See getCompressionQualityDescriptions for more information.\n\n  If no descriptions are available, null is\n returned.  If null is returned from\n getCompressionQualityDescriptions, this method\n must also return null.\n\n  If there are multiple compression types but none has been set,\n an IllegalStateException is thrown.\n\n  The default implementation checks that compression is\n supported and that the compression mode is\n MODE_EXPLICIT.  If so, if\n getCompressionTypes() is null or\n getCompressionType() is non-null, it\n returns null."}]}