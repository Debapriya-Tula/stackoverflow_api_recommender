{"name": "Class AtomicReference<V>", "module": "java.base", "package": "java.util.concurrent.atomic", "text": "An object reference that may be updated atomically.  See the VarHandle specification for descriptions of the properties of\n atomic accesses.", "codes": ["public class AtomicReference<V>\nextends Object\nimplements Serializable"], "fields": [], "methods": [{"method_name": "get", "method_sig": "public final V get()", "description": "Returns the current value,\n with memory effects as specified by VarHandle.getVolatile(java.lang.Object...)."}, {"method_name": "set", "method_sig": "public final void set (V newValue)", "description": "Sets the value to newValue,\n with memory effects as specified by VarHandle.setVolatile(java.lang.Object...)."}, {"method_name": "lazySet", "method_sig": "public final void lazySet (V newValue)", "description": "Sets the value to newValue,\n with memory effects as specified by VarHandle.setRelease(java.lang.Object...)."}, {"method_name": "compareAndSet", "method_sig": "public final boolean compareAndSet (V expectedValue,\n                                   V newValue)", "description": "Atomically sets the value to newValue\n if the current value == expectedValue,\n with memory effects as specified by VarHandle.compareAndSet(java.lang.Object...)."}, {"method_name": "weakCompareAndSet", "method_sig": "@Deprecated(since=\"9\")\npublic final boolean weakCompareAndSet (V expectedValue,\n                                       V newValue)", "description": "Possibly atomically sets the value to newValue\n if the current value == expectedValue,\n with memory effects as specified by VarHandle.weakCompareAndSetPlain(java.lang.Object...)."}, {"method_name": "weakCompareAndSetPlain", "method_sig": "public final boolean weakCompareAndSetPlain (V expectedValue,\n                                            V newValue)", "description": "Possibly atomically sets the value to newValue\n if the current value == expectedValue,\n with memory effects as specified by VarHandle.weakCompareAndSetPlain(java.lang.Object...)."}, {"method_name": "getAndSet", "method_sig": "public final V getAndSet (V newValue)", "description": "Atomically sets the value to newValue and returns the old value,\n with memory effects as specified by VarHandle.getAndSet(java.lang.Object...)."}, {"method_name": "getAndUpdate", "method_sig": "public final V getAndUpdate (UnaryOperator<V> updateFunction)", "description": "Atomically updates (with memory effects as specified by VarHandle.compareAndSet(java.lang.Object...)) the current value with the results of\n applying the given function, returning the previous value. The\n function should be side-effect-free, since it may be re-applied\n when attempted updates fail due to contention among threads."}, {"method_name": "updateAndGet", "method_sig": "public final V updateAndGet (UnaryOperator<V> updateFunction)", "description": "Atomically updates (with memory effects as specified by VarHandle.compareAndSet(java.lang.Object...)) the current value with the results of\n applying the given function, returning the updated value. The\n function should be side-effect-free, since it may be re-applied\n when attempted updates fail due to contention among threads."}, {"method_name": "getAndAccumulate", "method_sig": "public final V getAndAccumulate (V x,\n                                BinaryOperator<V> accumulatorFunction)", "description": "Atomically updates (with memory effects as specified by VarHandle.compareAndSet(java.lang.Object...)) the current value with the results of\n applying the given function to the current and given values,\n returning the previous value. The function should be\n side-effect-free, since it may be re-applied when attempted\n updates fail due to contention among threads.  The function is\n applied with the current value as its first argument, and the\n given update as the second argument."}, {"method_name": "accumulateAndGet", "method_sig": "public final V accumulateAndGet (V x,\n                                BinaryOperator<V> accumulatorFunction)", "description": "Atomically updates (with memory effects as specified by VarHandle.compareAndSet(java.lang.Object...)) the current value with the results of\n applying the given function to the current and given values,\n returning the updated value. The function should be\n side-effect-free, since it may be re-applied when attempted\n updates fail due to contention among threads.  The function is\n applied with the current value as its first argument, and the\n given update as the second argument."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns the String representation of the current value."}, {"method_name": "getPlain", "method_sig": "public final V getPlain()", "description": "Returns the current value, with memory semantics of reading as\n if the variable was declared non-volatile."}, {"method_name": "setPlain", "method_sig": "public final void setPlain (V newValue)", "description": "Sets the value to newValue, with memory semantics\n of setting as if the variable was declared non-volatile\n and non-final."}, {"method_name": "getOpaque", "method_sig": "public final V getOpaque()", "description": "Returns the current value,\n with memory effects as specified by VarHandle.getOpaque(java.lang.Object...)."}, {"method_name": "setOpaque", "method_sig": "public final void setOpaque (V newValue)", "description": "Sets the value to newValue,\n with memory effects as specified by VarHandle.setOpaque(java.lang.Object...)."}, {"method_name": "getAcquire", "method_sig": "public final V getAcquire()", "description": "Returns the current value,\n with memory effects as specified by VarHandle.getAcquire(java.lang.Object...)."}, {"method_name": "setRelease", "method_sig": "public final void setRelease (V newValue)", "description": "Sets the value to newValue,\n with memory effects as specified by VarHandle.setRelease(java.lang.Object...)."}, {"method_name": "compareAndExchange", "method_sig": "public final V compareAndExchange (V expectedValue,\n                                  V newValue)", "description": "Atomically sets the value to newValue if the current value,\n referred to as the witness value, == expectedValue,\n with memory effects as specified by\n VarHandle.compareAndExchange(java.lang.Object...)."}, {"method_name": "compareAndExchangeAcquire", "method_sig": "public final V compareAndExchangeAcquire (V expectedValue,\n                                         V newValue)", "description": "Atomically sets the value to newValue if the current value,\n referred to as the witness value, == expectedValue,\n with memory effects as specified by\n VarHandle.compareAndExchangeAcquire(java.lang.Object...)."}, {"method_name": "compareAndExchangeRelease", "method_sig": "public final V compareAndExchangeRelease (V expectedValue,\n                                         V newValue)", "description": "Atomically sets the value to newValue if the current value,\n referred to as the witness value, == expectedValue,\n with memory effects as specified by\n VarHandle.compareAndExchangeRelease(java.lang.Object...)."}, {"method_name": "weakCompareAndSetVolatile", "method_sig": "public final boolean weakCompareAndSetVolatile (V expectedValue,\n                                               V newValue)", "description": "Possibly atomically sets the value to newValue\n if the current value == expectedValue,\n with memory effects as specified by\n VarHandle.weakCompareAndSet(java.lang.Object...)."}, {"method_name": "weakCompareAndSetAcquire", "method_sig": "public final boolean weakCompareAndSetAcquire (V expectedValue,\n                                              V newValue)", "description": "Possibly atomically sets the value to newValue\n if the current value == expectedValue,\n with memory effects as specified by\n VarHandle.weakCompareAndSetAcquire(java.lang.Object...)."}, {"method_name": "weakCompareAndSetRelease", "method_sig": "public final boolean weakCompareAndSetRelease (V expectedValue,\n                                              V newValue)", "description": "Possibly atomically sets the value to newValue\n if the current value == expectedValue,\n with memory effects as specified by\n VarHandle.weakCompareAndSetRelease(java.lang.Object...)."}]}