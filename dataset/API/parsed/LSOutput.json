{"name": "Interface LSOutput", "module": "java.xml", "package": "org.w3c.dom.ls", "text": "This interface represents an output destination for data.\n  This interface allows an application to encapsulate information about\n an output destination in a single object, which may include a URI, a byte\n stream (possibly with a specified encoding), a base URI, and/or a\n character stream.\n  The exact definitions of a byte stream and a character stream are\n binding dependent.\n  The application is expected to provide objects that implement this\n interface whenever such objects are needed. The application can either\n provide its own objects that implement this interface, or it can use the\n generic factory method DOMImplementationLS.createLSOutput()\n to create objects that implement this interface.\n  The LSSerializer will use the LSOutput object\n to determine where to serialize the output to. The\n LSSerializer will look at the different outputs specified in\n the LSOutput in the following order to know which one to\n output to, the first one that is not null and not an empty string will be\n used:\n \n LSOutput.characterStream\n\n\nLSOutput.byteStream\n\n LSOutput.systemId\n\n\n LSOutput objects belong to the application. The DOM\n implementation will never modify them (though it may make copies and\n modify the copies, if necessary).\n See also the Document Object Model (DOM) Level 3 Load\nand Save Specification.", "codes": ["public interface LSOutput"], "fields": [], "methods": [{"method_name": "getCharacterStream", "method_sig": "Writer getCharacterStream()", "description": "An attribute of a language and binding dependent type that represents\n a writable stream to which 16-bit units can be output."}, {"method_name": "setCharacterStream", "method_sig": "void setCharacterStream (Writer characterStream)", "description": "An attribute of a language and binding dependent type that represents\n a writable stream to which 16-bit units can be output."}, {"method_name": "getByteStream", "method_sig": "OutputStream getByteStream()", "description": "An attribute of a language and binding dependent type that represents\n a writable stream of bytes."}, {"method_name": "setByteStream", "method_sig": "void setByteStream (OutputStream byteStream)", "description": "An attribute of a language and binding dependent type that represents\n a writable stream of bytes."}, {"method_name": "getSystemId", "method_sig": "String getSystemId()", "description": "The system identifier, a URI reference [IETF RFC 2396], for this\n output destination.\n  If the system ID is a relative URI reference (see section 5 in [IETF RFC 2396]), the\n behavior is implementation dependent."}, {"method_name": "setSystemId", "method_sig": "void setSystemId (String systemId)", "description": "The system identifier, a URI reference [IETF RFC 2396], for this\n output destination.\n  If the system ID is a relative URI reference (see section 5 in [IETF RFC 2396]), the\n behavior is implementation dependent."}, {"method_name": "getEncoding", "method_sig": "String getEncoding()", "description": "The character encoding to use for the output. The encoding must be a\n string acceptable for an XML encoding declaration ([XML 1.0] section\n 4.3.3 \"Character Encoding in Entities\"), it is recommended that\n character encodings registered (as charsets) with the Internet\n Assigned Numbers Authority [IANA-CHARSETS]\n  should be referred to using their registered names."}, {"method_name": "setEncoding", "method_sig": "void setEncoding (String encoding)", "description": "The character encoding to use for the output. The encoding must be a\n string acceptable for an XML encoding declaration ([XML 1.0] section\n 4.3.3 \"Character Encoding in Entities\"), it is recommended that\n character encodings registered (as charsets) with the Internet\n Assigned Numbers Authority [IANA-CHARSETS]\n  should be referred to using their registered names."}]}