{"name": "Class JMenu", "module": "java.desktop", "package": "javax.swing", "text": "An implementation of a menu -- a popup window containing\n JMenuItems that\n is displayed when the user selects an item on the JMenuBar.\n In addition to JMenuItems, a JMenu can\n also contain JSeparators.\n \n In essence, a menu is a button with an associated JPopupMenu.\n When the \"button\" is pressed, the JPopupMenu appears. If the\n \"button\" is on the JMenuBar, the menu is a top-level window.\n If the \"button\" is another menu item, then the JPopupMenu is\n \"pull-right\" menu.\n \n Menus can be configured, and to some degree controlled, by\n Actions.  Using an\n Action with a menu has many benefits beyond directly\n configuring a menu.  Refer to \n Swing Components Supporting Action for more\n details, and you can find more information in How\n to Use Actions, a section in The Java Tutorial.\n \n For information and examples of using menus see\n How to Use Menus,\n a section in The Java Tutorial.\n\nWarning: Swing is not thread safe. For more\n information see Swing's Threading\n Policy.\n \nWarning:\n Serialized objects of this class will not be compatible with\n future Swing releases. The current serialization support is\n appropriate for short term storage or RMI between applications running\n the same version of Swing.  As of 1.4, support for long term storage\n of all JavaBeans\u2122\n has been added to the java.beans package.\n Please see XMLEncoder.", "codes": ["@JavaBean(description=\"A popup window containing menu items displayed in a menu bar.\")\npublic class JMenu\nextends JMenuItem\nimplements Accessible, MenuElement"], "fields": [{"field_name": "popupListener", "field_sig": "protected\u00a0JMenu.WinListener popupListener", "description": "The window-closing listener for the popup."}], "methods": [{"method_name": "updateUI", "method_sig": "public void updateUI()", "description": "Resets the UI property with a value from the current look and feel."}, {"method_name": "getUIClassID", "method_sig": "@BeanProperty(bound=false)\npublic String getUIClassID()", "description": "Returns the name of the L&F class that renders this component."}, {"method_name": "setModel", "method_sig": "public void setModel (ButtonModel newModel)", "description": "Sets the data model for the \"menu button\" -- the label\n that the user clicks to open or close the menu."}, {"method_name": "isSelected", "method_sig": "public boolean isSelected()", "description": "Returns true if the menu is currently selected (highlighted)."}, {"method_name": "setSelected", "method_sig": "@BeanProperty(expert=true,\n              hidden=true,\n              description=\"When the menu is selected, its popup child is shown.\")\npublic void setSelected (boolean b)", "description": "Sets the selection status of the menu."}, {"method_name": "isPopupMenuVisible", "method_sig": "public boolean isPopupMenuVisible()", "description": "Returns true if the menu's popup window is visible."}, {"method_name": "setPopupMenuVisible", "method_sig": "@BeanProperty(bound=false,\n              expert=true,\n              hidden=true,\n              description=\"The popup menu\\'s visibility\")\npublic void setPopupMenuVisible (boolean b)", "description": "Sets the visibility of the menu's popup.  If the menu is\n not enabled, this method will have no effect."}, {"method_name": "getPopupMenuOrigin", "method_sig": "protected Point getPopupMenuOrigin()", "description": "Computes the origin for the JMenu's popup menu.\n This method uses Look and Feel properties named\n Menu.menuPopupOffsetX,\n Menu.menuPopupOffsetY,\n Menu.submenuPopupOffsetX, and\n Menu.submenuPopupOffsetY\n to adjust the exact location of popup."}, {"method_name": "getDelay", "method_sig": "public int getDelay()", "description": "Returns the suggested delay, in milliseconds, before submenus\n are popped up or down.\n Each look and feel (L&F) may determine its own policy for\n observing the delay property.\n In most cases, the delay is not observed for top level menus\n or while dragging.  The default for delay is 0.\n This method is a property of the look and feel code and is used\n to manage the idiosyncrasies of the various UI implementations."}, {"method_name": "setDelay", "method_sig": "@BeanProperty(bound=false,\n              expert=true,\n              description=\"The delay between menu selection and making the popup menu visible\")\npublic void setDelay (int d)", "description": "Sets the suggested delay before the menu's PopupMenu\n is popped up or down.  Each look and feel (L&F) may determine\n it's own policy for observing the delay property.  In most cases,\n the delay is not observed for top level menus or while dragging.\n This method is a property of the look and feel code and is used\n to manage the idiosyncrasies of the various UI implementations."}, {"method_name": "setMenuLocation", "method_sig": "public void setMenuLocation (int x,\n                            int y)", "description": "Sets the location of the popup component."}, {"method_name": "add", "method_sig": "public JMenuItem add (JMenuItem menuItem)", "description": "Appends a menu item to the end of this menu.\n Returns the menu item added."}, {"method_name": "add", "method_sig": "public Component add (Component c)", "description": "Appends a component to the end of this menu.\n Returns the component added."}, {"method_name": "add", "method_sig": "public Component add (Component c,\n                     int index)", "description": "Adds the specified component to this container at the given\n position. If index equals -1, the component will\n be appended to the end."}, {"method_name": "add", "method_sig": "public JMenuItem add (String s)", "description": "Creates a new menu item with the specified text and appends\n it to the end of this menu."}, {"method_name": "add", "method_sig": "public JMenuItem add (Action a)", "description": "Creates a new menu item attached to the specified Action object\n and appends it to the end of this menu."}, {"method_name": "createActionComponent", "method_sig": "protected JMenuItem createActionComponent (Action a)", "description": "Factory method which creates the JMenuItem for\n Actions added to the JMenu."}, {"method_name": "createActionChangeListener", "method_sig": "protected PropertyChangeListener createActionChangeListener (JMenuItem b)", "description": "Returns a properly configured PropertyChangeListener\n which updates the control as changes to the Action occur."}, {"method_name": "addSeparator", "method_sig": "public void addSeparator()", "description": "Appends a new separator to the end of the menu."}, {"method_name": "insert", "method_sig": "public void insert (String s,\n                   int pos)", "description": "Inserts a new menu item with the specified text at a\n given position."}, {"method_name": "insert", "method_sig": "public JMenuItem insert (JMenuItem mi,\n                        int pos)", "description": "Inserts the specified JMenuitem at a given position."}, {"method_name": "insert", "method_sig": "public JMenuItem insert (Action a,\n                        int pos)", "description": "Inserts a new menu item attached to the specified Action\n object at a given position."}, {"method_name": "insertSeparator", "method_sig": "public void insertSeparator (int index)", "description": "Inserts a separator at the specified position."}, {"method_name": "getItem", "method_sig": "public JMenuItem getItem (int pos)", "description": "Returns the JMenuItem at the specified position.\n If the component at pos is not a menu item,\n null is returned.\n This method is included for AWT compatibility."}, {"method_name": "getItemCount", "method_sig": "@BeanProperty(bound=false)\npublic int getItemCount()", "description": "Returns the number of items on the menu, including separators.\n This method is included for AWT compatibility."}, {"method_name": "isTearOff", "method_sig": "@BeanProperty(bound=false)\npublic boolean isTearOff()", "description": "Returns true if the menu can be torn off.  This method is not\n yet implemented."}, {"method_name": "remove", "method_sig": "public void remove (JMenuItem item)", "description": "Removes the specified menu item from this menu.  If there is no\n popup menu, this method will have no effect."}, {"method_name": "remove", "method_sig": "public void remove (int pos)", "description": "Removes the menu item at the specified index from this menu."}, {"method_name": "remove", "method_sig": "public void remove (Component c)", "description": "Removes the component c from this menu."}, {"method_name": "removeAll", "method_sig": "public void removeAll()", "description": "Removes all menu items from this menu."}, {"method_name": "getMenuComponentCount", "method_sig": "@BeanProperty(bound=false)\npublic int getMenuComponentCount()", "description": "Returns the number of components on the menu."}, {"method_name": "getMenuComponent", "method_sig": "public Component getMenuComponent (int n)", "description": "Returns the component at position n."}, {"method_name": "getMenuComponents", "method_sig": "@BeanProperty(bound=false)\npublic Component[] getMenuComponents()", "description": "Returns an array of Components of the menu's\n subcomponents.  Note that this returns all Components\n in the popup menu, including separators."}, {"method_name": "isTopLevelMenu", "method_sig": "@BeanProperty(bound=false)\npublic boolean isTopLevelMenu()", "description": "Returns true if the menu is a 'top-level menu', that is, if it is\n the direct child of a menubar."}, {"method_name": "isMenuComponent", "method_sig": "public boolean isMenuComponent (Component c)", "description": "Returns true if the specified component exists in the\n submenu hierarchy."}, {"method_name": "getPopupMenu", "method_sig": "@BeanProperty(bound=false)\npublic JPopupMenu getPopupMenu()", "description": "Returns the popupmenu associated with this menu.  If there is\n no popupmenu, it will create one."}, {"method_name": "addMenuListener", "method_sig": "public void addMenuListener (MenuListener l)", "description": "Adds a listener for menu events."}, {"method_name": "removeMenuListener", "method_sig": "public void removeMenuListener (MenuListener l)", "description": "Removes a listener for menu events."}, {"method_name": "getMenuListeners", "method_sig": "@BeanProperty(bound=false)\npublic MenuListener[] getMenuListeners()", "description": "Returns an array of all the MenuListeners added\n to this JMenu with addMenuListener()."}, {"method_name": "fireMenuSelected", "method_sig": "protected void fireMenuSelected()", "description": "Notifies all listeners that have registered interest for\n notification on this event type.  The event instance\n is created lazily."}, {"method_name": "fireMenuDeselected", "method_sig": "protected void fireMenuDeselected()", "description": "Notifies all listeners that have registered interest for\n notification on this event type.  The event instance\n is created lazily."}, {"method_name": "fireMenuCanceled", "method_sig": "protected void fireMenuCanceled()", "description": "Notifies all listeners that have registered interest for\n notification on this event type.  The event instance\n is created lazily."}, {"method_name": "createWinListener", "method_sig": "protected JMenu.WinListener createWinListener (JPopupMenu p)", "description": "Creates a window-closing listener for the popup."}, {"method_name": "menuSelectionChanged", "method_sig": "public void menuSelectionChanged (boolean isIncluded)", "description": "Messaged when the menubar selection changes to activate or\n deactivate this menu.\n Overrides JMenuItem.menuSelectionChanged."}, {"method_name": "getSubElements", "method_sig": "@BeanProperty(bound=false)\npublic MenuElement[] getSubElements()", "description": "Returns an array of MenuElements containing the submenu\n for this menu component.  If popup menu is null returns\n an empty array.  This method is required to conform to the\n MenuElement interface.  Note that since\n JSeparators do not conform to the MenuElement\n interface, this array will only contain JMenuItems."}, {"method_name": "getComponent", "method_sig": "public Component getComponent()", "description": "Returns the java.awt.Component used to\n paint this MenuElement.\n The returned component is used to convert events and detect if\n an event is inside a menu component."}, {"method_name": "applyComponentOrientation", "method_sig": "public void applyComponentOrientation (ComponentOrientation o)", "description": "Sets the ComponentOrientation property of this menu\n and all components contained within it. This includes all\n components returned by getMenuComponents."}, {"method_name": "setAccelerator", "method_sig": "public void setAccelerator (KeyStroke keyStroke)", "description": "setAccelerator is not defined for JMenu.\n Use setMnemonic instead."}, {"method_name": "processKeyEvent", "method_sig": "protected void processKeyEvent (KeyEvent evt)", "description": "Processes key stroke events such as mnemonics and accelerators."}, {"method_name": "doClick", "method_sig": "public void doClick (int pressTime)", "description": "Programmatically performs a \"click\".  This overrides the method\n AbstractButton.doClick in order to make the menu pop up."}, {"method_name": "paramString", "method_sig": "protected String paramString()", "description": "Returns a string representation of this JMenu. This\n method is intended to be used only for debugging purposes, and the\n content and format of the returned string may vary between\n implementations. The returned string may be empty but may not\n be null."}, {"method_name": "getAccessibleContext", "method_sig": "@BeanProperty(bound=false)\npublic AccessibleContext getAccessibleContext()", "description": "Gets the AccessibleContext associated with this JMenu.\n For JMenus, the AccessibleContext takes the form of an\n AccessibleJMenu.\n A new AccessibleJMenu instance is created if necessary."}]}