{"name": "Class Level", "module": "java.logging", "package": "java.util.logging", "text": "The Level class defines a set of standard logging levels that\n can be used to control logging output.  The logging Level objects\n are ordered and are specified by ordered integers.  Enabling logging\n at a given level also enables logging at all higher levels.\n \n Clients should normally use the predefined Level constants such\n as Level.SEVERE.\n \n The levels in descending order are:\n \nSEVERE (highest value)\n WARNING\n INFO\n CONFIG\n FINE\n FINER\n FINEST  (lowest value)\n \n In addition there is a level OFF that can be used to turn\n off logging, and a level ALL that can be used to enable\n logging of all messages.\n \n It is possible for third parties to define additional logging\n levels by subclassing Level.  In such cases subclasses should\n take care to chose unique integer level values and to ensure that\n they maintain the Object uniqueness property across serialization\n by defining a suitable readResolve method.", "codes": ["public class Level\nextends Object\nimplements Serializable"], "fields": [{"field_name": "OFF", "field_sig": "public static final\u00a0Level OFF", "description": "OFF is a special level that can be used to turn off logging.\n This level is initialized to Integer.MAX_VALUE."}, {"field_name": "SEVERE", "field_sig": "public static final\u00a0Level SEVERE", "description": "SEVERE is a message level indicating a serious failure.\n \n In general SEVERE messages should describe events that are\n of considerable importance and which will prevent normal\n program execution.   They should be reasonably intelligible\n to end users and to system administrators.\n This level is initialized to 1000."}, {"field_name": "WARNING", "field_sig": "public static final\u00a0Level WARNING", "description": "WARNING is a message level indicating a potential problem.\n \n In general WARNING messages should describe events that will\n be of interest to end users or system managers, or which\n indicate potential problems.\n This level is initialized to 900."}, {"field_name": "INFO", "field_sig": "public static final\u00a0Level INFO", "description": "INFO is a message level for informational messages.\n \n Typically INFO messages will be written to the console\n or its equivalent.  So the INFO level should only be\n used for reasonably significant messages that will\n make sense to end users and system administrators.\n This level is initialized to 800."}, {"field_name": "CONFIG", "field_sig": "public static final\u00a0Level CONFIG", "description": "CONFIG is a message level for static configuration messages.\n \n CONFIG messages are intended to provide a variety of static\n configuration information, to assist in debugging problems\n that may be associated with particular configurations.\n For example, CONFIG message might include the CPU type,\n the graphics depth, the GUI look-and-feel, etc.\n This level is initialized to 700."}, {"field_name": "FINE", "field_sig": "public static final\u00a0Level FINE", "description": "FINE is a message level providing tracing information.\n \n All of FINE, FINER, and FINEST are intended for relatively\n detailed tracing.  The exact meaning of the three levels will\n vary between subsystems, but in general, FINEST should be used\n for the most voluminous detailed output, FINER for somewhat\n less detailed output, and FINE for the  lowest volume (and\n most important) messages.\n \n In general the FINE level should be used for information\n that will be broadly interesting to developers who do not have\n a specialized interest in the specific subsystem.\n \n FINE messages might include things like minor (recoverable)\n failures.  Issues indicating potential performance problems\n are also worth logging as FINE.\n This level is initialized to 500."}, {"field_name": "FINER", "field_sig": "public static final\u00a0Level FINER", "description": "FINER indicates a fairly detailed tracing message.\n By default logging calls for entering, returning, or throwing\n an exception are traced at this level.\n This level is initialized to 400."}, {"field_name": "FINEST", "field_sig": "public static final\u00a0Level FINEST", "description": "FINEST indicates a highly detailed tracing message.\n This level is initialized to 300."}, {"field_name": "ALL", "field_sig": "public static final\u00a0Level ALL", "description": "ALL indicates that all messages should be logged.\n This level is initialized to Integer.MIN_VALUE."}], "methods": [{"method_name": "getResourceBundleName", "method_sig": "public String getResourceBundleName()", "description": "Return the level's localization resource bundle name, or\n null if no localization bundle is defined."}, {"method_name": "getName", "method_sig": "public String getName()", "description": "Return the non-localized string name of the Level."}, {"method_name": "getLocalizedName", "method_sig": "public String getLocalizedName()", "description": "Return the localized string name of the Level, for\n the current default locale.\n \n If no localization information is available, the\n non-localized name is returned."}, {"method_name": "toString", "method_sig": "public final String toString()", "description": "Returns a string representation of this Level."}, {"method_name": "intValue", "method_sig": "public final int intValue()", "description": "Get the integer value for this level.  This integer value\n can be used for efficient ordering comparisons between\n Level objects."}, {"method_name": "parse", "method_sig": "public static Level parse (String name)\n                   throws IllegalArgumentException", "description": "Parse a level name string into a Level.\n \n The argument string may consist of either a level name\n or an integer value.\n \n For example:\n \n     \"SEVERE\"\n      \"1000\"\n "}, {"method_name": "equals", "method_sig": "public boolean equals (Object ox)", "description": "Compare two objects for value equality."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Generate a hashcode."}]}