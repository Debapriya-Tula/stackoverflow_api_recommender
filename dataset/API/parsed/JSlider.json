{"name": "Class JSlider", "module": "java.desktop", "package": "javax.swing", "text": "A component that lets the user graphically select a value by sliding\n a knob within a bounded interval. The knob is always positioned\n at the points that match integer values within the specified interval.\n \n The slider can show both\n major tick marks, and minor tick marks between the major ones.  The number of\n values between the tick marks is controlled with\n setMajorTickSpacing and setMinorTickSpacing.\n Painting of tick marks is controlled by setPaintTicks.\n \n Sliders can also print text labels at regular intervals (or at\n arbitrary locations) along the slider track.  Painting of labels is\n controlled by setLabelTable and setPaintLabels.\n \n For further information and examples see\n How to Use Sliders,\n a section in The Java Tutorial.\n\nWarning: Swing is not thread safe. For more\n information see Swing's Threading\n Policy.\n \nWarning:\n Serialized objects of this class will not be compatible with\n future Swing releases. The current serialization support is\n appropriate for short term storage or RMI between applications running\n the same version of Swing.  As of 1.4, support for long term storage\n of all JavaBeans\u2122\n has been added to the java.beans package.\n Please see XMLEncoder.", "codes": ["@JavaBean(defaultProperty=\"UI\",\n          description=\"A component that supports selecting a integer value from a range.\")\npublic class JSlider\nextends JComponent\nimplements SwingConstants, Accessible"], "fields": [{"field_name": "sliderModel", "field_sig": "protected\u00a0BoundedRangeModel sliderModel", "description": "The data model that handles the numeric maximum value,\n minimum value, and current-position value for the slider."}, {"field_name": "majorTickSpacing", "field_sig": "protected\u00a0int majorTickSpacing", "description": "The number of values between the major tick marks -- the\n larger marks that break up the minor tick marks."}, {"field_name": "minorTickSpacing", "field_sig": "protected\u00a0int minorTickSpacing", "description": "The number of values between the minor tick marks -- the\n smaller marks that occur between the major tick marks."}, {"field_name": "snapToTicks", "field_sig": "protected\u00a0boolean snapToTicks", "description": "If true, the knob (and the data value it represents)\n resolve to the closest tick mark next to where the user\n positioned the knob.  The default is false."}, {"field_name": "orientation", "field_sig": "protected\u00a0int orientation", "description": "Whether the slider is horizontal or vertical\n The default is horizontal."}, {"field_name": "changeListener", "field_sig": "protected\u00a0ChangeListener changeListener", "description": "The changeListener (no suffix) is the listener we add to the\n slider's model.  This listener is initialized to the\n ChangeListener returned from createChangeListener,\n which by default just forwards events\n to ChangeListeners (if any) added directly to the slider."}, {"field_name": "changeEvent", "field_sig": "protected transient\u00a0ChangeEvent changeEvent", "description": "Only one ChangeEvent is needed per slider instance since the\n event's only (read-only) state is the source property.  The source\n of events generated here is always \"this\". The event is lazily\n created the first time that an event notification is fired."}], "methods": [{"method_name": "getUI", "method_sig": "public SliderUI getUI()", "description": "Gets the UI object which implements the L&F for this component."}, {"method_name": "setUI", "method_sig": "@BeanProperty(hidden=true,\n              visualUpdate=true,\n              description=\"The UI object that implements the slider\\'s LookAndFeel.\")\npublic void setUI (SliderUI ui)", "description": "Sets the UI object which implements the L&F for this component."}, {"method_name": "updateUI", "method_sig": "public void updateUI()", "description": "Resets the UI property to a value from the current look and feel."}, {"method_name": "getUIClassID", "method_sig": "@BeanProperty(bound=false)\npublic String getUIClassID()", "description": "Returns the name of the L&F class that renders this component."}, {"method_name": "createChangeListener", "method_sig": "protected ChangeListener createChangeListener()", "description": "Subclasses that want to handle ChangeEvents\n from the model differently\n can override this to return\n an instance of a custom ChangeListener implementation.\n The default ChangeListener simply calls the\n fireStateChanged method to forward ChangeEvents\n to the ChangeListeners that have been added directly to the\n slider."}, {"method_name": "addChangeListener", "method_sig": "public void addChangeListener (ChangeListener l)", "description": "Adds a ChangeListener to the slider."}, {"method_name": "removeChangeListener", "method_sig": "public void removeChangeListener (ChangeListener l)", "description": "Removes a ChangeListener from the slider."}, {"method_name": "getChangeListeners", "method_sig": "@BeanProperty(bound=false)\npublic ChangeListener[] getChangeListeners()", "description": "Returns an array of all the ChangeListeners added\n to this JSlider with addChangeListener()."}, {"method_name": "fireStateChanged", "method_sig": "protected void fireStateChanged()", "description": "Send a ChangeEvent, whose source is this JSlider, to\n all ChangeListeners that have registered interest in\n ChangeEvents.\n This method is called each time a ChangeEvent is received from\n the model.\n \n The event instance is created if necessary, and stored in\n changeEvent."}, {"method_name": "getModel", "method_sig": "public BoundedRangeModel getModel()", "description": "Returns the BoundedRangeModel that handles the slider's three\n fundamental properties: minimum, maximum, value."}, {"method_name": "setModel", "method_sig": "@BeanProperty(description=\"The sliders BoundedRangeModel.\")\npublic void setModel (BoundedRangeModel newModel)", "description": "Sets the BoundedRangeModel that handles the slider's three\n fundamental properties: minimum, maximum, value.\n\n Attempts to pass a null model to this method result in\n undefined behavior, and, most likely, exceptions."}, {"method_name": "getValue", "method_sig": "public int getValue()", "description": "Returns the slider's current value\n from the BoundedRangeModel."}, {"method_name": "setValue", "method_sig": "@BeanProperty(bound=false,\n              preferred=true,\n              description=\"The sliders current value.\")\npublic void setValue (int n)", "description": "Sets the slider's current value to n.  This method\n forwards the new value to the model.\n \n The data model (an instance of BoundedRangeModel)\n handles any mathematical\n issues arising from assigning faulty values.  See the\n BoundedRangeModel documentation for details.\n \n If the new value is different from the previous value,\n all change listeners are notified."}, {"method_name": "getMinimum", "method_sig": "public int getMinimum()", "description": "Returns the minimum value supported by the slider\n from the BoundedRangeModel."}, {"method_name": "setMinimum", "method_sig": "@BeanProperty(preferred=true,\n              description=\"The sliders minimum value.\")\npublic void setMinimum (int minimum)", "description": "Sets the slider's minimum value to minimum.  This method\n forwards the new minimum value to the model.\n \n The data model (an instance of BoundedRangeModel)\n handles any mathematical\n issues arising from assigning faulty values.  See the\n BoundedRangeModel documentation for details.\n \n If the new minimum value is different from the previous minimum value,\n all change listeners are notified."}, {"method_name": "getMaximum", "method_sig": "public int getMaximum()", "description": "Returns the maximum value supported by the slider\n from the BoundedRangeModel."}, {"method_name": "setMaximum", "method_sig": "@BeanProperty(preferred=true,\n              description=\"The sliders maximum value.\")\npublic void setMaximum (int maximum)", "description": "Sets the slider's maximum value to maximum.  This method\n forwards the new maximum value to the model.\n \n The data model (an instance of BoundedRangeModel)\n handles any mathematical\n issues arising from assigning faulty values.  See the\n BoundedRangeModel documentation for details.\n \n If the new maximum value is different from the previous maximum value,\n all change listeners are notified."}, {"method_name": "getValueIsAdjusting", "method_sig": "public boolean getValueIsAdjusting()", "description": "Returns the valueIsAdjusting property from the model.  For\n details on how this is used, see the setValueIsAdjusting\n documentation."}, {"method_name": "setValueIsAdjusting", "method_sig": "@BeanProperty(bound=false,\n              expert=true,\n              description=\"True if the slider knob is being dragged.\")\npublic void setValueIsAdjusting (boolean b)", "description": "Sets the model's valueIsAdjusting property.  Slider look and\n feel implementations should set this property to true when\n a knob drag begins, and to false when the drag ends."}, {"method_name": "getExtent", "method_sig": "public int getExtent()", "description": "Returns the \"extent\" from the BoundedRangeModel.\n This represents the range of values \"covered\" by the knob."}, {"method_name": "setExtent", "method_sig": "@BeanProperty(bound=false,\n              expert=true,\n              description=\"Size of the range covered by the knob.\")\npublic void setExtent (int extent)", "description": "Sets the size of the range \"covered\" by the knob.  Most look\n and feel implementations will change the value by this amount\n if the user clicks on either side of the knob.  This method just\n forwards the new extent value to the model.\n \n The data model (an instance of BoundedRangeModel)\n handles any mathematical\n issues arising from assigning faulty values.  See the\n BoundedRangeModel documentation for details.\n \n If the new extent value is different from the previous extent value,\n all change listeners are notified."}, {"method_name": "getOrientation", "method_sig": "public int getOrientation()", "description": "Return this slider's vertical or horizontal orientation."}, {"method_name": "setOrientation", "method_sig": "@BeanProperty(preferred=true,\n              visualUpdate=true,\n              enumerationValues={\"JSlider.VERTICAL\",\"JSlider.HORIZONTAL\"},\n              description=\"Set the scrollbars orientation to either VERTICAL or HORIZONTAL.\")\npublic void setOrientation (int orientation)", "description": "Set the slider's orientation to either SwingConstants.VERTICAL or\n SwingConstants.HORIZONTAL."}, {"method_name": "setFont", "method_sig": "public void setFont (Font font)", "description": "Sets the font for this component."}, {"method_name": "imageUpdate", "method_sig": "public boolean imageUpdate (Image img,\n                           int infoflags,\n                           int x,\n                           int y,\n                           int w,\n                           int h)", "description": "Repaints the component when the image has changed.\n This imageUpdate method of an ImageObserver\n is called when more information about an\n image which had been previously requested using an asynchronous\n routine such as the drawImage method of\n Graphics becomes available.\n See the definition of imageUpdate for\n more information on this method and its arguments.\n \n The imageUpdate method of Component\n incrementally draws an image on the component as more of the bits\n of the image are available.\n \n If the system property awt.image.incrementaldraw\n is missing or has the value true, the image is\n incrementally drawn. If the system property has any other value,\n then the image is not drawn until it has been completely loaded.\n \n Also, if incremental drawing is in effect, the value of the\n system property awt.image.redrawrate is interpreted\n as an integer to give the maximum redraw rate, in milliseconds. If\n the system property is missing or cannot be interpreted as an\n integer, the redraw rate is once every 100ms.\n \n The interpretation of the x, y,\n width, and height arguments depends on\n the value of the infoflags argument."}, {"method_name": "getLabelTable", "method_sig": "public Dictionary getLabelTable()", "description": "Returns the dictionary of what labels to draw at which values."}, {"method_name": "setLabelTable", "method_sig": "@BeanProperty(hidden=true,\n              visualUpdate=true,\n              description=\"Specifies what labels will be drawn for any given value.\")\npublic void setLabelTable (Dictionary labels)", "description": "Used to specify what label will be drawn at any given value.\n The key-value pairs are of this format:\n { Integer value, java.swing.JComponent label }.\n \n An easy way to generate a standard table of value labels is by using the\n createStandardLabels method.\n \n Once the labels have been set, this method calls updateLabelUIs().\n Note that the labels are only painted if the paintLabels\n property is true."}, {"method_name": "updateLabelUIs", "method_sig": "protected void updateLabelUIs()", "description": "Updates the UIs for the labels in the label table by calling\n updateUI on each label.  The UIs are updated from\n the current look and feel.  The labels are also set to their\n preferred size."}, {"method_name": "createStandardLabels", "method_sig": "public Hashtable<Integer, JComponent> createStandardLabels (int increment)", "description": "Creates a Hashtable of numerical text labels, starting at the\n slider minimum, and using the increment specified.\n For example, if you call createStandardLabels( 10 )\n and the slider minimum is zero,\n then labels will be created for the values 0, 10, 20, 30, and so on.\n \n For the labels to be drawn on the slider, the returned Hashtable\n must be passed into setLabelTable, and setPaintLabels\n must be set to true.\n \n For further details on the makeup of the returned Hashtable, see\n the setLabelTable documentation."}, {"method_name": "createStandardLabels", "method_sig": "public Hashtable<Integer, JComponent> createStandardLabels (int increment,\n                                                                int start)", "description": "Creates a Hashtable of numerical text labels, starting at the\n starting point specified, and using the increment specified.\n For example, if you call\n createStandardLabels( 10, 2 ),\n then labels will be created for the values 2, 12, 22, 32, and so on.\n \n For the labels to be drawn on the slider, the returned Hashtable\n must be passed into setLabelTable, and setPaintLabels\n must be set to true.\n \n For further details on the makeup of the returned Hashtable, see\n the setLabelTable documentation."}, {"method_name": "getInverted", "method_sig": "public boolean getInverted()", "description": "Returns true if the value-range shown for the slider is reversed,"}, {"method_name": "setInverted", "method_sig": "@BeanProperty(visualUpdate=true,\n              description=\"If true reverses the slider values from their normal order\")\npublic void setInverted (boolean b)", "description": "Specify true to reverse the value-range shown for the slider and false to\n put the value range in the normal order.  The order depends on the\n slider's ComponentOrientation property.  Normal (non-inverted)\n horizontal sliders with a ComponentOrientation value of\n LEFT_TO_RIGHT have their maximum on the right.\n Normal horizontal sliders with a ComponentOrientation value of\n RIGHT_TO_LEFT have their maximum on the left.  Normal vertical\n sliders have their maximum on the top.  These labels are reversed when the\n slider is inverted.\n \n By default, the value of this property is false."}, {"method_name": "getMajorTickSpacing", "method_sig": "public int getMajorTickSpacing()", "description": "This method returns the major tick spacing.  The number that is returned\n represents the distance, measured in values, between each major tick mark.\n If you have a slider with a range from 0 to 50 and the major tick spacing\n is set to 10, you will get major ticks next to the following values:\n 0, 10, 20, 30, 40, 50."}, {"method_name": "setMajorTickSpacing", "method_sig": "@BeanProperty(visualUpdate=true,\n              description=\"Sets the number of values between major tick marks.\")\npublic void setMajorTickSpacing (int n)", "description": "This method sets the major tick spacing.  The number that is passed in\n represents the distance, measured in values, between each major tick mark.\n If you have a slider with a range from 0 to 50 and the major tick spacing\n is set to 10, you will get major ticks next to the following values:\n 0, 10, 20, 30, 40, 50.\n \n In order for major ticks to be painted, setPaintTicks must be\n set to true.\n \n This method will also set up a label table for you.\n If there is not already a label table, and the major tick spacing is\n > 0, and getPaintLabels returns\n true, a standard label table will be generated (by calling\n createStandardLabels) with labels at the major tick marks.\n For the example above, you would get text labels: \"0\",\n \"10\", \"20\", \"30\", \"40\", \"50\".\n The label table is then set on the slider by calling\n setLabelTable."}, {"method_name": "getMinorTickSpacing", "method_sig": "public int getMinorTickSpacing()", "description": "This method returns the minor tick spacing.  The number that is returned\n represents the distance, measured in values, between each minor tick mark.\n If you have a slider with a range from 0 to 50 and the minor tick spacing\n is set to 10, you will get minor ticks next to the following values:\n 0, 10, 20, 30, 40, 50."}, {"method_name": "setMinorTickSpacing", "method_sig": "@BeanProperty(visualUpdate=true,\n              description=\"Sets the number of values between minor tick marks.\")\npublic void setMinorTickSpacing (int n)", "description": "This method sets the minor tick spacing.  The number that is passed in\n represents the distance, measured in values, between each minor tick mark.\n If you have a slider with a range from 0 to 50 and the minor tick spacing\n is set to 10, you will get minor ticks next to the following values:\n 0, 10, 20, 30, 40, 50.\n \n In order for minor ticks to be painted, setPaintTicks must be\n set to true."}, {"method_name": "getSnapToTicks", "method_sig": "public boolean getSnapToTicks()", "description": "Returns true if the knob (and the data value it represents)\n resolve to the closest tick mark next to where the user\n positioned the knob."}, {"method_name": "setSnapToTicks", "method_sig": "@BeanProperty(description=\"If true snap the knob to the nearest tick mark.\")\npublic void setSnapToTicks (boolean b)", "description": "Specifying true makes the knob (and the data value it represents)\n resolve to the closest tick mark next to where the user\n positioned the knob.\n By default, this property is false."}, {"method_name": "getPaintTicks", "method_sig": "public boolean getPaintTicks()", "description": "Tells if tick marks are to be painted."}, {"method_name": "setPaintTicks", "method_sig": "@BeanProperty(visualUpdate=true,\n              description=\"If true tick marks are painted on the slider.\")\npublic void setPaintTicks (boolean b)", "description": "Determines whether tick marks are painted on the slider.\n By default, this property is false."}, {"method_name": "getPaintTrack", "method_sig": "public boolean getPaintTrack()", "description": "Tells if the track (area the slider slides in) is to be painted."}, {"method_name": "setPaintTrack", "method_sig": "@BeanProperty(visualUpdate=true,\n              description=\"If true, the track is painted on the slider.\")\npublic void setPaintTrack (boolean b)", "description": "Determines whether the track is painted on the slider. By default, this\n property is true. It is up to the look and feel to honor this\n property, some may choose to ignore it."}, {"method_name": "getPaintLabels", "method_sig": "public boolean getPaintLabels()", "description": "Tells if labels are to be painted."}, {"method_name": "setPaintLabels", "method_sig": "@BeanProperty(visualUpdate=true,\n              description=\"If true labels are painted on the slider.\")\npublic void setPaintLabels (boolean b)", "description": "Determines whether labels are painted on the slider.\n \n This method will also set up a label table for you.\n If there is not already a label table, and the major tick spacing is\n > 0,\n a standard label table will be generated (by calling\n createStandardLabels) with labels at the major tick marks.\n The label table is then set on the slider by calling\n setLabelTable.\n \n By default, this property is false."}, {"method_name": "paramString", "method_sig": "protected String paramString()", "description": "Returns a string representation of this JSlider. This method\n is intended to be used only for debugging purposes, and the\n content and format of the returned string may vary between\n implementations. The returned string may be empty but may not\n be null."}, {"method_name": "getAccessibleContext", "method_sig": "@BeanProperty(bound=false)\npublic AccessibleContext getAccessibleContext()", "description": "Gets the AccessibleContext associated with this JSlider.\n For sliders, the AccessibleContext takes the form of an\n AccessibleJSlider.\n A new AccessibleJSlider instance is created if necessary."}]}