{"name": "Class Year", "module": "java.base", "package": "java.time", "text": "A year in the ISO-8601 calendar system, such as 2007.\n \nYear is an immutable date-time object that represents a year.\n Any field that can be derived from a year can be obtained.\n \nNote that years in the ISO chronology only align with years in the\n Gregorian-Julian system for modern years. Parts of Russia did not switch to the\n modern Gregorian/ISO rules until 1920.\n As such, historical years must be treated with caution.\n\n This class does not store or represent a month, day, time or time-zone.\n For example, the value \"2007\" can be stored in a Year.\n \n Years represented by this class follow the ISO-8601 standard and use\n the proleptic numbering system. Year 1 is preceded by year 0, then by year -1.\n \n The ISO-8601 calendar system is the modern civil calendar system used today\n in most of the world. It is equivalent to the proleptic Gregorian calendar\n system, in which today's rules for leap years are applied for all time.\n For most applications written today, the ISO-8601 rules are entirely suitable.\n However, any application that makes use of historical dates, and requires them\n to be accurate will find the ISO-8601 approach unsuitable.\n\n \n This is a value-based\n class; use of identity-sensitive operations (including reference equality\n (==), identity hash code, or synchronization) on instances of\n Year may have unpredictable results and should be avoided.\n The equals method should be used for comparisons.", "codes": ["public final class Year\nextends Object\nimplements Temporal, TemporalAdjuster, Comparable<Year>, Serializable"], "fields": [{"field_name": "MIN_VALUE", "field_sig": "public static final\u00a0int MIN_VALUE", "description": "The minimum supported year, '-999,999,999'."}, {"field_name": "MAX_VALUE", "field_sig": "public static final\u00a0int MAX_VALUE", "description": "The maximum supported year, '+999,999,999'."}], "methods": [{"method_name": "now", "method_sig": "public static Year now()", "description": "Obtains the current year from the system clock in the default time-zone.\n \n This will query the system clock in the default\n time-zone to obtain the current year.\n \n Using this method will prevent the ability to use an alternate clock for testing\n because the clock is hard-coded."}, {"method_name": "now", "method_sig": "public static Year now (ZoneId zone)", "description": "Obtains the current year from the system clock in the specified time-zone.\n \n This will query the system clock to obtain the current year.\n Specifying the time-zone avoids dependence on the default time-zone.\n \n Using this method will prevent the ability to use an alternate clock for testing\n because the clock is hard-coded."}, {"method_name": "now", "method_sig": "public static Year now (Clock clock)", "description": "Obtains the current year from the specified clock.\n \n This will query the specified clock to obtain the current year.\n Using this method allows the use of an alternate clock for testing.\n The alternate clock may be introduced using dependency injection."}, {"method_name": "of", "method_sig": "public static Year of (int isoYear)", "description": "Obtains an instance of Year.\n \n This method accepts a year value from the proleptic ISO calendar system.\n \n The year 2AD/CE is represented by 2.\n The year 1AD/CE is represented by 1.\n The year 1BC/BCE is represented by 0.\n The year 2BC/BCE is represented by -1."}, {"method_name": "from", "method_sig": "public static Year from (TemporalAccessor temporal)", "description": "Obtains an instance of Year from a temporal object.\n \n This obtains a year based on the specified temporal.\n A TemporalAccessor represents an arbitrary set of date and time information,\n which this factory converts to an instance of Year.\n \n The conversion extracts the year field.\n The extraction is only permitted if the temporal object has an ISO\n chronology, or can be converted to a LocalDate.\n \n This method matches the signature of the functional interface TemporalQuery\n allowing it to be used as a query via method reference, Year::from."}, {"method_name": "parse", "method_sig": "public static Year parse (CharSequence text)", "description": "Obtains an instance of Year from a text string such as 2007.\n \n The string must represent a valid year.\n Years outside the range 0000 to 9999 must be prefixed by the plus or minus symbol."}, {"method_name": "parse", "method_sig": "public static Year parse (CharSequence text,\n                         DateTimeFormatter formatter)", "description": "Obtains an instance of Year from a text string using a specific formatter.\n \n The text is parsed using the formatter, returning a year."}, {"method_name": "isLeap", "method_sig": "public static boolean isLeap (long year)", "description": "Checks if the year is a leap year, according to the ISO proleptic\n calendar system rules.\n \n This method applies the current rules for leap years across the whole time-line.\n In general, a year is a leap year if it is divisible by four without\n remainder. However, years divisible by 100, are not leap years, with\n the exception of years divisible by 400 which are.\n \n For example, 1904 is a leap year it is divisible by 4.\n 1900 was not a leap year as it is divisible by 100, however 2000 was a\n leap year as it is divisible by 400.\n \n The calculation is proleptic - applying the same rules into the far future and far past.\n This is historically inaccurate, but is correct for the ISO-8601 standard."}, {"method_name": "getValue", "method_sig": "public int getValue()", "description": "Gets the year value.\n \n The year returned by this method is proleptic as per get(YEAR)."}, {"method_name": "isSupported", "method_sig": "public boolean isSupported (TemporalField field)", "description": "Checks if the specified field is supported.\n \n This checks if this year can be queried for the specified field.\n If false, then calling the range,\n get and with(TemporalField, long)\n methods will throw an exception.\n \n If the field is a ChronoField then the query is implemented here.\n The supported fields are:\n \nYEAR_OF_ERA\nYEAR\nERA\n\n All other ChronoField instances will return false.\n \n If the field is not a ChronoField, then the result of this method\n is obtained by invoking TemporalField.isSupportedBy(TemporalAccessor)\n passing this as the argument.\n Whether the field is supported is determined by the field."}, {"method_name": "isSupported", "method_sig": "public boolean isSupported (TemporalUnit unit)", "description": "Checks if the specified unit is supported.\n \n This checks if the specified unit can be added to, or subtracted from, this year.\n If false, then calling the plus(long, TemporalUnit) and\n minus methods will throw an exception.\n \n If the unit is a ChronoUnit then the query is implemented here.\n The supported units are:\n \nYEARS\nDECADES\nCENTURIES\nMILLENNIA\nERAS\n\n All other ChronoUnit instances will return false.\n \n If the unit is not a ChronoUnit, then the result of this method\n is obtained by invoking TemporalUnit.isSupportedBy(Temporal)\n passing this as the argument.\n Whether the unit is supported is determined by the unit."}, {"method_name": "range", "method_sig": "public ValueRange range (TemporalField field)", "description": "Gets the range of valid values for the specified field.\n \n The range object expresses the minimum and maximum valid values for a field.\n This year is used to enhance the accuracy of the returned range.\n If it is not possible to return the range, because the field is not supported\n or for some other reason, an exception is thrown.\n \n If the field is a ChronoField then the query is implemented here.\n The supported fields will return\n appropriate range instances.\n All other ChronoField instances will throw an UnsupportedTemporalTypeException.\n \n If the field is not a ChronoField, then the result of this method\n is obtained by invoking TemporalField.rangeRefinedBy(TemporalAccessor)\n passing this as the argument.\n Whether the range can be obtained is determined by the field."}, {"method_name": "get", "method_sig": "public int get (TemporalField field)", "description": "Gets the value of the specified field from this year as an int.\n \n This queries this year for the value of the specified field.\n The returned value will always be within the valid range of values for the field.\n If it is not possible to return the value, because the field is not supported\n or for some other reason, an exception is thrown.\n \n If the field is a ChronoField then the query is implemented here.\n The supported fields will return valid\n values based on this year.\n All other ChronoField instances will throw an UnsupportedTemporalTypeException.\n \n If the field is not a ChronoField, then the result of this method\n is obtained by invoking TemporalField.getFrom(TemporalAccessor)\n passing this as the argument. Whether the value can be obtained,\n and what the value represents, is determined by the field."}, {"method_name": "getLong", "method_sig": "public long getLong (TemporalField field)", "description": "Gets the value of the specified field from this year as a long.\n \n This queries this year for the value of the specified field.\n If it is not possible to return the value, because the field is not supported\n or for some other reason, an exception is thrown.\n \n If the field is a ChronoField then the query is implemented here.\n The supported fields will return valid\n values based on this year.\n All other ChronoField instances will throw an UnsupportedTemporalTypeException.\n \n If the field is not a ChronoField, then the result of this method\n is obtained by invoking TemporalField.getFrom(TemporalAccessor)\n passing this as the argument. Whether the value can be obtained,\n and what the value represents, is determined by the field."}, {"method_name": "isLeap", "method_sig": "public boolean isLeap()", "description": "Checks if the year is a leap year, according to the ISO proleptic\n calendar system rules.\n \n This method applies the current rules for leap years across the whole time-line.\n In general, a year is a leap year if it is divisible by four without\n remainder. However, years divisible by 100, are not leap years, with\n the exception of years divisible by 400 which are.\n \n For example, 1904 is a leap year it is divisible by 4.\n 1900 was not a leap year as it is divisible by 100, however 2000 was a\n leap year as it is divisible by 400.\n \n The calculation is proleptic - applying the same rules into the far future and far past.\n This is historically inaccurate, but is correct for the ISO-8601 standard."}, {"method_name": "isValidMonthDay", "method_sig": "public boolean isValidMonthDay (MonthDay monthDay)", "description": "Checks if the month-day is valid for this year.\n \n This method checks whether this year and the input month and day form\n a valid date."}, {"method_name": "length", "method_sig": "public int length()", "description": "Gets the length of this year in days."}, {"method_name": "with", "method_sig": "public Year with (TemporalAdjuster adjuster)", "description": "Returns an adjusted copy of this year.\n \n This returns a Year, based on this one, with the year adjusted.\n The adjustment takes place using the specified adjuster strategy object.\n Read the documentation of the adjuster to understand what adjustment will be made.\n \n The result of this method is obtained by invoking the\n TemporalAdjuster.adjustInto(Temporal) method on the\n specified adjuster passing this as the argument.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "with", "method_sig": "public Year with (TemporalField field,\n                 long newValue)", "description": "Returns a copy of this year with the specified field set to a new value.\n \n This returns a Year, based on this one, with the value\n for the specified field changed.\n If it is not possible to set the value, because the field is not supported or for\n some other reason, an exception is thrown.\n \n If the field is a ChronoField then the adjustment is implemented here.\n The supported fields behave as follows:\n \nYEAR_OF_ERA -\n  Returns a Year with the specified year-of-era\n  The era will be unchanged.\n YEAR -\n  Returns a Year with the specified year.\n  This completely replaces the date and is equivalent to of(int).\n ERA -\n  Returns a Year with the specified era.\n  The year-of-era will be unchanged.\n \n\n In all cases, if the new value is outside the valid range of values for the field\n then a DateTimeException will be thrown.\n \n All other ChronoField instances will throw an UnsupportedTemporalTypeException.\n \n If the field is not a ChronoField, then the result of this method\n is obtained by invoking TemporalField.adjustInto(Temporal, long)\n passing this as the argument. In this case, the field determines\n whether and how to adjust the instant.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "plus", "method_sig": "public Year plus (TemporalAmount amountToAdd)", "description": "Returns a copy of this year with the specified amount added.\n \n This returns a Year, based on this one, with the specified amount added.\n The amount is typically Period but may be any other type implementing\n the TemporalAmount interface.\n \n The calculation is delegated to the amount object by calling\n TemporalAmount.addTo(Temporal). The amount implementation is free\n to implement the addition in any way it wishes, however it typically\n calls back to plus(long, TemporalUnit). Consult the documentation\n of the amount implementation to determine if it can be successfully added.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "plus", "method_sig": "public Year plus (long amountToAdd,\n                 TemporalUnit unit)", "description": "Returns a copy of this year with the specified amount added.\n \n This returns a Year, based on this one, with the amount\n in terms of the unit added. If it is not possible to add the amount, because the\n unit is not supported or for some other reason, an exception is thrown.\n \n If the field is a ChronoUnit then the addition is implemented here.\n The supported fields behave as follows:\n \nYEARS -\n  Returns a Year with the specified number of years added.\n  This is equivalent to plusYears(long).\n DECADES -\n  Returns a Year with the specified number of decades added.\n  This is equivalent to calling plusYears(long) with the amount\n  multiplied by 10.\n CENTURIES -\n  Returns a Year with the specified number of centuries added.\n  This is equivalent to calling plusYears(long) with the amount\n  multiplied by 100.\n MILLENNIA -\n  Returns a Year with the specified number of millennia added.\n  This is equivalent to calling plusYears(long) with the amount\n  multiplied by 1,000.\n ERAS -\n  Returns a Year with the specified number of eras added.\n  Only two eras are supported so the amount must be one, zero or minus one.\n  If the amount is non-zero then the year is changed such that the year-of-era\n  is unchanged.\n \n\n All other ChronoUnit instances will throw an UnsupportedTemporalTypeException.\n \n If the field is not a ChronoUnit, then the result of this method\n is obtained by invoking TemporalUnit.addTo(Temporal, long)\n passing this as the argument. In this case, the unit determines\n whether and how to perform the addition.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "plusYears", "method_sig": "public Year plusYears (long yearsToAdd)", "description": "Returns a copy of this Year with the specified number of years added.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "minus", "method_sig": "public Year minus (TemporalAmount amountToSubtract)", "description": "Returns a copy of this year with the specified amount subtracted.\n \n This returns a Year, based on this one, with the specified amount subtracted.\n The amount is typically Period but may be any other type implementing\n the TemporalAmount interface.\n \n The calculation is delegated to the amount object by calling\n TemporalAmount.subtractFrom(Temporal). The amount implementation is free\n to implement the subtraction in any way it wishes, however it typically\n calls back to minus(long, TemporalUnit). Consult the documentation\n of the amount implementation to determine if it can be successfully subtracted.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "minus", "method_sig": "public Year minus (long amountToSubtract,\n                  TemporalUnit unit)", "description": "Returns a copy of this year with the specified amount subtracted.\n \n This returns a Year, based on this one, with the amount\n in terms of the unit subtracted. If it is not possible to subtract the amount,\n because the unit is not supported or for some other reason, an exception is thrown.\n \n This method is equivalent to plus(long, TemporalUnit) with the amount negated.\n See that method for a full description of how addition, and thus subtraction, works.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "minusYears", "method_sig": "public Year minusYears (long yearsToSubtract)", "description": "Returns a copy of this Year with the specified number of years subtracted.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "query", "method_sig": "public <R> R query (TemporalQuery<R> query)", "description": "Queries this year using the specified query.\n \n This queries this year using the specified query strategy object.\n The TemporalQuery object defines the logic to be used to\n obtain the result. Read the documentation of the query to understand\n what the result of this method will be.\n \n The result of this method is obtained by invoking the\n TemporalQuery.queryFrom(TemporalAccessor) method on the\n specified query passing this as the argument."}, {"method_name": "adjustInto", "method_sig": "public Temporal adjustInto (Temporal temporal)", "description": "Adjusts the specified temporal object to have this year.\n \n This returns a temporal object of the same observable type as the input\n with the year changed to be the same as this.\n \n The adjustment is equivalent to using Temporal.with(TemporalField, long)\n passing ChronoField.YEAR as the field.\n If the specified temporal object does not use the ISO calendar system then\n a DateTimeException is thrown.\n \n In most cases, it is clearer to reverse the calling pattern by using\n Temporal.with(TemporalAdjuster):\n \n   // these two lines are equivalent, but the second approach is recommended\n   temporal = thisYear.adjustInto(temporal);\n   temporal = temporal.with(thisYear);\n \n\n This instance is immutable and unaffected by this method call."}, {"method_name": "until", "method_sig": "public long until (Temporal endExclusive,\n                  TemporalUnit unit)", "description": "Calculates the amount of time until another year in terms of the specified unit.\n \n This calculates the amount of time between two Year\n objects in terms of a single TemporalUnit.\n The start and end points are this and the specified year.\n The result will be negative if the end is before the start.\n The Temporal passed to this method is converted to a\n Year using from(TemporalAccessor).\n For example, the amount in decades between two year can be calculated\n using startYear.until(endYear, DECADES).\n \n The calculation returns a whole number, representing the number of\n complete units between the two years.\n For example, the amount in decades between 2012 and 2031\n will only be one decade as it is one year short of two decades.\n \n There are two equivalent ways of using this method.\n The first is to invoke this method.\n The second is to use TemporalUnit.between(Temporal, Temporal):\n \n   // these two lines are equivalent\n   amount = start.until(end, YEARS);\n   amount = YEARS.between(start, end);\n \n The choice should be made based on which makes the code more readable.\n \n The calculation is implemented in this method for ChronoUnit.\n The units YEARS, DECADES, CENTURIES,\n MILLENNIA and ERAS are supported.\n Other ChronoUnit values will throw an exception.\n \n If the unit is not a ChronoUnit, then the result of this method\n is obtained by invoking TemporalUnit.between(Temporal, Temporal)\n passing this as the first argument and the converted input temporal\n as the second argument.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "format", "method_sig": "public String format (DateTimeFormatter formatter)", "description": "Formats this year using the specified formatter.\n \n This year will be passed to the formatter to produce a string."}, {"method_name": "atDay", "method_sig": "public LocalDate atDay (int dayOfYear)", "description": "Combines this year with a day-of-year to create a LocalDate.\n \n This returns a LocalDate formed from this year and the specified day-of-year.\n \n The day-of-year value 366 is only valid in a leap year."}, {"method_name": "atMonth", "method_sig": "public YearMonth atMonth (Month month)", "description": "Combines this year with a month to create a YearMonth.\n \n This returns a YearMonth formed from this year and the specified month.\n All possible combinations of year and month are valid.\n \n This method can be used as part of a chain to produce a date:\n \n  LocalDate date = year.atMonth(month).atDay(day);\n "}, {"method_name": "atMonth", "method_sig": "public YearMonth atMonth (int month)", "description": "Combines this year with a month to create a YearMonth.\n \n This returns a YearMonth formed from this year and the specified month.\n All possible combinations of year and month are valid.\n \n This method can be used as part of a chain to produce a date:\n \n  LocalDate date = year.atMonth(month).atDay(day);\n "}, {"method_name": "atMonthDay", "method_sig": "public LocalDate atMonthDay (MonthDay monthDay)", "description": "Combines this year with a month-day to create a LocalDate.\n \n This returns a LocalDate formed from this year and the specified month-day.\n \n A month-day of February 29th will be adjusted to February 28th in the resulting\n date if the year is not a leap year."}, {"method_name": "compareTo", "method_sig": "public int compareTo (Year other)", "description": "Compares this year to another year.\n \n The comparison is based on the value of the year.\n It is \"consistent with equals\", as defined by Comparable."}, {"method_name": "isAfter", "method_sig": "public boolean isAfter (Year other)", "description": "Checks if this year is after the specified year."}, {"method_name": "isBefore", "method_sig": "public boolean isBefore (Year other)", "description": "Checks if this year is before the specified year."}, {"method_name": "equals", "method_sig": "public boolean equals (Object obj)", "description": "Checks if this year is equal to another year.\n \n The comparison is based on the time-line position of the years."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "A hash code for this year."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Outputs this year as a String."}]}