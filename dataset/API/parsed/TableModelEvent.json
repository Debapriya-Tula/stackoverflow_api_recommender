{"name": "Class TableModelEvent", "module": "java.desktop", "package": "javax.swing.event", "text": "TableModelEvent is used to notify listeners that a table model\n has changed. The model event describes changes to a TableModel\n and all references to rows and columns are in the co-ordinate\n system of the model.\n Depending on the parameters used in the constructors, the TableModelevent\n can be used to specify the following types of changes:\n\n \n TableModelEvent(source);              //  The data, ie. all rows changed\n TableModelEvent(source, HEADER_ROW);  //  Structure change, reallocate TableColumns\n TableModelEvent(source, 1);           //  Row 1 changed\n TableModelEvent(source, 3, 6);        //  Rows 3 to 6 inclusive changed\n TableModelEvent(source, 2, 2, 6);     //  Cell at (2, 6) changed\n TableModelEvent(source, 3, 6, ALL_COLUMNS, INSERT); // Rows (3, 6) were inserted\n TableModelEvent(source, 3, 6, ALL_COLUMNS, DELETE); // Rows (3, 6) were deleted\n \n\n It is possible to use other combinations of the parameters, not all of them\n are meaningful. By subclassing, you can add other information, for example:\n whether the event WILL happen or DID happen. This makes the specification\n of rows in DELETE events more useful but has not been included in\n the swing package as the JTable only needs post-event notification.\n \nWarning:\n Serialized objects of this class will not be compatible with\n future Swing releases. The current serialization support is\n appropriate for short term storage or RMI between applications running\n the same version of Swing.  As of 1.4, support for long term storage\n of all JavaBeans\u2122\n has been added to the java.beans package.\n Please see XMLEncoder.", "codes": ["public class TableModelEvent\nextends EventObject"], "fields": [{"field_name": "INSERT", "field_sig": "public static final\u00a0int INSERT", "description": "Identifies the addition of new rows or columns."}, {"field_name": "UPDATE", "field_sig": "public static final\u00a0int UPDATE", "description": "Identifies a change to existing data."}, {"field_name": "DELETE", "field_sig": "public static final\u00a0int DELETE", "description": "Identifies the removal of rows or columns."}, {"field_name": "HEADER_ROW", "field_sig": "public static final\u00a0int HEADER_ROW", "description": "Identifies the header row."}, {"field_name": "ALL_COLUMNS", "field_sig": "public static final\u00a0int ALL_COLUMNS", "description": "Specifies all columns in a row or rows."}, {"field_name": "type", "field_sig": "protected\u00a0int type", "description": "The type of the event."}, {"field_name": "firstRow", "field_sig": "protected\u00a0int firstRow", "description": "The first row that has changed."}, {"field_name": "lastRow", "field_sig": "protected\u00a0int lastRow", "description": "The last row that has changed."}, {"field_name": "column", "field_sig": "protected\u00a0int column", "description": "The column for the event."}], "methods": [{"method_name": "getFirstRow", "method_sig": "public int getFirstRow()", "description": "Returns the first row that changed.  HEADER_ROW means the meta data,\n ie. names, types and order of the columns."}, {"method_name": "getLastRow", "method_sig": "public int getLastRow()", "description": "Returns the last row that changed."}, {"method_name": "getColumn", "method_sig": "public int getColumn()", "description": "Returns the column for the event.  If the return\n  value is ALL_COLUMNS; it means every column in the specified\n  rows changed."}, {"method_name": "getType", "method_sig": "public int getType()", "description": "Returns the type of event - one of: INSERT, UPDATE and DELETE."}]}