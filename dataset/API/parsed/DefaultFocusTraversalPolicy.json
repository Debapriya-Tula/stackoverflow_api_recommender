{"name": "Class DefaultFocusTraversalPolicy", "module": "java.desktop", "package": "java.awt", "text": "A FocusTraversalPolicy that determines traversal order based on the order\n of child Components in a Container. From a particular focus cycle root, the\n policy makes a pre-order traversal of the Component hierarchy, and traverses\n a Container's children according to the ordering of the array returned by\n Container.getComponents(). Portions of the hierarchy that are\n not visible and displayable will not be searched.\n \n If client code has explicitly set the focusability of a Component by either\n overriding Component.isFocusTraversable() or\n Component.isFocusable(), or by calling\n Component.setFocusable(), then a DefaultFocusTraversalPolicy\n behaves exactly like a ContainerOrderFocusTraversalPolicy. If, however, the\n Component is relying on default focusability, then a\n DefaultFocusTraversalPolicy will reject all Components with non-focusable\n peers. This is the default FocusTraversalPolicy for all AWT Containers.\n \n The focusability of a peer is implementation-dependent. Sun recommends that\n all implementations for a particular native platform construct peers with\n the same focusability. The recommendations for Windows and Unix are that\n Canvases, Labels, Panels, Scrollbars, ScrollPanes, Windows, and lightweight\n Components have non-focusable peers, and all other Components have focusable\n peers. These recommendations are used in the Sun AWT implementations. Note\n that the focusability of a Component's peer is different from, and does not\n impact, the focusability of the Component itself.\n \n Please see\n \n How to Use the Focus Subsystem,\n a section in The Java Tutorial, and the\n Focus Specification\n for more information.", "codes": ["public class DefaultFocusTraversalPolicy\nextends ContainerOrderFocusTraversalPolicy"], "fields": [], "methods": [{"method_name": "accept", "method_sig": "protected boolean accept (Component aComponent)", "description": "Determines whether a Component is an acceptable choice as the new\n focus owner. The Component must be visible, displayable, and enabled\n to be accepted. If client code has explicitly set the focusability\n of the Component by either overriding\n Component.isFocusTraversable() or\n Component.isFocusable(), or by calling\n Component.setFocusable(), then the Component will be\n accepted if and only if it is focusable. If, however, the Component is\n relying on default focusability, then all Canvases, Labels, Panels,\n Scrollbars, ScrollPanes, Windows, and lightweight Components will be\n rejected."}]}