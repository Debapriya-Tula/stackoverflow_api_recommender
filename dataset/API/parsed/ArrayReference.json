{"name": "Interface ArrayReference", "module": "jdk.jdi", "package": "com.sun.jdi", "text": "Provides access to an array object and its components in the target VM.\n Each array component is mirrored by a Value object.\n The array components, in aggregate, are placed in List\n objects instead of arrays for consistency with the rest of the API and\n for interoperability with other APIs.", "codes": ["public interface ArrayReference\nextends ObjectReference"], "fields": [], "methods": [{"method_name": "length", "method_sig": "int length()", "description": "Returns the number of components in this array."}, {"method_name": "getValue", "method_sig": "Value getValue (int index)", "description": "Returns an array component value."}, {"method_name": "getValues", "method_sig": "List<Value> getValues()", "description": "Returns all of the components in this array."}, {"method_name": "getValues", "method_sig": "List<Value> getValues (int index,\n                      int length)", "description": "Returns a range of array components."}, {"method_name": "setValue", "method_sig": "void setValue (int index,\n              Value value)\n       throws InvalidTypeException,\n              ClassNotLoadedException", "description": "Replaces an array component with another value.\n \n Object values must be assignment compatible with the component type\n (This implies that the component type must be loaded through the\n declaring class's class loader). Primitive values must be\n either assignment compatible with the component type or must be\n convertible to the component type without loss of information.\n See JLS section 5.2 for more information on assignment\n compatibility."}, {"method_name": "setValues", "method_sig": "void setValues (List<? extends Value> values)\n        throws InvalidTypeException,\n               ClassNotLoadedException", "description": "Replaces all array components with other values. If the given\n list is larger in size than the array, the values at the\n end of the list are ignored.\n \n Object values must be assignment compatible with the element type\n (This implies that the component type must be loaded through the\n enclosing class's class loader). Primitive values must be\n either assignment compatible with the component type or must be\n convertible to the component type without loss of information.\n See JLS section 5.2 for more information on assignment\n compatibility."}, {"method_name": "setValues", "method_sig": "void setValues (int index,\n               List<? extends Value> values,\n               int srcIndex,\n               int length)\n        throws InvalidTypeException,\n               ClassNotLoadedException", "description": "Replaces a range of array components with other values.\n \n Object values must be assignment compatible with the component type\n (This implies that the component type must be loaded through the\n enclosing class's class loader). Primitive values must be\n either assignment compatible with the component type or must be\n convertible to the component type without loss of information.\n See JLS section 5.2 for more information on assignment\n compatibility."}]}