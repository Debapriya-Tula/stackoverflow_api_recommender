{"name": "Class Spliterators", "module": "java.base", "package": "java.util", "text": "Static classes and methods for operating on or creating instances of\n Spliterator and its primitive specializations\n Spliterator.OfInt, Spliterator.OfLong, and\n Spliterator.OfDouble.", "codes": ["public final class Spliterators\nextends Object"], "fields": [], "methods": [{"method_name": "emptySpliterator", "method_sig": "public static <T> Spliterator<T> emptySpliterator()", "description": "Creates an empty Spliterator\nThe empty spliterator reports Spliterator.SIZED and\n Spliterator.SUBSIZED.  Calls to\n Spliterator.trySplit() always return null."}, {"method_name": "emptyIntSpliterator", "method_sig": "public static Spliterator.OfInt emptyIntSpliterator()", "description": "Creates an empty Spliterator.OfInt\nThe empty spliterator reports Spliterator.SIZED and\n Spliterator.SUBSIZED.  Calls to\n Spliterator.trySplit() always return null."}, {"method_name": "emptyLongSpliterator", "method_sig": "public static Spliterator.OfLong emptyLongSpliterator()", "description": "Creates an empty Spliterator.OfLong\nThe empty spliterator reports Spliterator.SIZED and\n Spliterator.SUBSIZED.  Calls to\n Spliterator.trySplit() always return null."}, {"method_name": "emptyDoubleSpliterator", "method_sig": "public static Spliterator.OfDouble emptyDoubleSpliterator()", "description": "Creates an empty Spliterator.OfDouble\nThe empty spliterator reports Spliterator.SIZED and\n Spliterator.SUBSIZED.  Calls to\n Spliterator.trySplit() always return null."}, {"method_name": "spliterator", "method_sig": "public static <T> Spliterator<T> spliterator (Object[] array,\n                                             int additionalCharacteristics)", "description": "Creates a Spliterator covering the elements of a given array,\n using a customized set of spliterator characteristics.\n\n This method is provided as an implementation convenience for\n Spliterators which store portions of their elements in arrays, and need\n fine control over Spliterator characteristics.  Most other situations in\n which a Spliterator for an array is needed should use\n Arrays.spliterator(Object[]).\n\n The returned spliterator always reports the characteristics\n SIZED and SUBSIZED.  The caller may provide additional\n characteristics for the spliterator to report; it is common to\n additionally specify IMMUTABLE and ORDERED."}, {"method_name": "spliterator", "method_sig": "public static <T> Spliterator<T> spliterator (Object[] array,\n                                             int fromIndex,\n                                             int toIndex,\n                                             int additionalCharacteristics)", "description": "Creates a Spliterator covering a range of elements of a given\n array, using a customized set of spliterator characteristics.\n\n This method is provided as an implementation convenience for\n Spliterators which store portions of their elements in arrays, and need\n fine control over Spliterator characteristics.  Most other situations in\n which a Spliterator for an array is needed should use\n Arrays.spliterator(Object[]).\n\n The returned spliterator always reports the characteristics\n SIZED and SUBSIZED.  The caller may provide additional\n characteristics for the spliterator to report; it is common to\n additionally specify IMMUTABLE and ORDERED."}, {"method_name": "spliterator", "method_sig": "public static Spliterator.OfInt spliterator (int[] array,\n                                            int additionalCharacteristics)", "description": "Creates a Spliterator.OfInt covering the elements of a given array,\n using a customized set of spliterator characteristics.\n\n This method is provided as an implementation convenience for\n Spliterators which store portions of their elements in arrays, and need\n fine control over Spliterator characteristics.  Most other situations in\n which a Spliterator for an array is needed should use\n Arrays.spliterator(int[]).\n\n The returned spliterator always reports the characteristics\n SIZED and SUBSIZED.  The caller may provide additional\n characteristics for the spliterator to report; it is common to\n additionally specify IMMUTABLE and ORDERED."}, {"method_name": "spliterator", "method_sig": "public static Spliterator.OfInt spliterator (int[] array,\n                                            int fromIndex,\n                                            int toIndex,\n                                            int additionalCharacteristics)", "description": "Creates a Spliterator.OfInt covering a range of elements of a\n given array, using a customized set of spliterator characteristics.\n\n This method is provided as an implementation convenience for\n Spliterators which store portions of their elements in arrays, and need\n fine control over Spliterator characteristics.  Most other situations in\n which a Spliterator for an array is needed should use\n Arrays.spliterator(int[], int, int).\n\n The returned spliterator always reports the characteristics\n SIZED and SUBSIZED.  The caller may provide additional\n characteristics for the spliterator to report; it is common to\n additionally specify IMMUTABLE and ORDERED."}, {"method_name": "spliterator", "method_sig": "public static Spliterator.OfLong spliterator (long[] array,\n                                             int additionalCharacteristics)", "description": "Creates a Spliterator.OfLong covering the elements of a given array,\n using a customized set of spliterator characteristics.\n\n This method is provided as an implementation convenience for\n Spliterators which store portions of their elements in arrays, and need\n fine control over Spliterator characteristics.  Most other situations in\n which a Spliterator for an array is needed should use\n Arrays.spliterator(long[]).\n\n The returned spliterator always reports the characteristics\n SIZED and SUBSIZED.  The caller may provide additional\n characteristics for the spliterator to report; it is common to\n additionally specify IMMUTABLE and ORDERED."}, {"method_name": "spliterator", "method_sig": "public static Spliterator.OfLong spliterator (long[] array,\n                                             int fromIndex,\n                                             int toIndex,\n                                             int additionalCharacteristics)", "description": "Creates a Spliterator.OfLong covering a range of elements of a\n given array, using a customized set of spliterator characteristics.\n\n This method is provided as an implementation convenience for\n Spliterators which store portions of their elements in arrays, and need\n fine control over Spliterator characteristics.  Most other situations in\n which a Spliterator for an array is needed should use\n Arrays.spliterator(long[], int, int).\n\n The returned spliterator always reports the characteristics\n SIZED and SUBSIZED.  The caller may provide additional\n characteristics for the spliterator to report.  (For example, if it is\n known the array will not be further modified, specify IMMUTABLE;\n if the array data is considered to have an encounter order, specify\n ORDERED).  The method Arrays.spliterator(long[], int, int) can\n often be used instead, which returns a spliterator that reports\n SIZED, SUBSIZED, IMMUTABLE, and ORDERED."}, {"method_name": "spliterator", "method_sig": "public static Spliterator.OfDouble spliterator (double[] array,\n                                               int additionalCharacteristics)", "description": "Creates a Spliterator.OfDouble covering the elements of a given array,\n using a customized set of spliterator characteristics.\n\n This method is provided as an implementation convenience for\n Spliterators which store portions of their elements in arrays, and need\n fine control over Spliterator characteristics.  Most other situations in\n which a Spliterator for an array is needed should use\n Arrays.spliterator(double[]).\n\n The returned spliterator always reports the characteristics\n SIZED and SUBSIZED.  The caller may provide additional\n characteristics for the spliterator to report; it is common to\n additionally specify IMMUTABLE and ORDERED."}, {"method_name": "spliterator", "method_sig": "public static Spliterator.OfDouble spliterator (double[] array,\n                                               int fromIndex,\n                                               int toIndex,\n                                               int additionalCharacteristics)", "description": "Creates a Spliterator.OfDouble covering a range of elements of a\n given array, using a customized set of spliterator characteristics.\n\n This method is provided as an implementation convenience for\n Spliterators which store portions of their elements in arrays, and need\n fine control over Spliterator characteristics.  Most other situations in\n which a Spliterator for an array is needed should use\n Arrays.spliterator(double[], int, int).\n\n The returned spliterator always reports the characteristics\n SIZED and SUBSIZED.  The caller may provide additional\n characteristics for the spliterator to report.  (For example, if it is\n known the array will not be further modified, specify IMMUTABLE;\n if the array data is considered to have an encounter order, specify\n ORDERED).  The method Arrays.spliterator(long[], int, int) can\n often be used instead, which returns a spliterator that reports\n SIZED, SUBSIZED, IMMUTABLE, and ORDERED."}, {"method_name": "spliterator", "method_sig": "public static <T> Spliterator<T> spliterator (Collection<? extends T> c,\n                                             int characteristics)", "description": "Creates a Spliterator using the given collection's\n Collection.iterator() as the source of elements, and\n reporting its Collection.size() as its initial size.\n\n The spliterator is\n late-binding, inherits\n the fail-fast properties of the collection's iterator, and\n implements trySplit to permit limited parallelism."}, {"method_name": "spliterator", "method_sig": "public static <T> Spliterator<T> spliterator (Iterator<? extends T> iterator,\n                                             long size,\n                                             int characteristics)", "description": "Creates a Spliterator using a given Iterator\n as the source of elements, and with a given initially reported size.\n\n The spliterator is not\n late-binding, inherits\n the fail-fast properties of the iterator, and implements\n trySplit to permit limited parallelism.\n\n Traversal of elements should be accomplished through the spliterator.\n The behaviour of splitting and traversal is undefined if the iterator is\n operated on after the spliterator is returned, or the initially reported\n size is not equal to the actual number of elements in the source."}, {"method_name": "spliteratorUnknownSize", "method_sig": "public static <T> Spliterator<T> spliteratorUnknownSize (Iterator<? extends T> iterator,\n                                                        int characteristics)", "description": "Creates a Spliterator using a given Iterator\n as the source of elements, with no initial size estimate.\n\n The spliterator is not\n late-binding, inherits\n the fail-fast properties of the iterator, and implements\n trySplit to permit limited parallelism.\n\n Traversal of elements should be accomplished through the spliterator.\n The behaviour of splitting and traversal is undefined if the iterator is\n operated on after the spliterator is returned."}, {"method_name": "spliterator", "method_sig": "public static Spliterator.OfInt spliterator (PrimitiveIterator.OfInt iterator,\n                                            long size,\n                                            int characteristics)", "description": "Creates a Spliterator.OfInt using a given\n IntStream.IntIterator as the source of elements, and with a given\n initially reported size.\n\n The spliterator is not\n late-binding, inherits\n the fail-fast properties of the iterator, and implements\n trySplit to permit limited parallelism.\n\n Traversal of elements should be accomplished through the spliterator.\n The behaviour of splitting and traversal is undefined if the iterator is\n operated on after the spliterator is returned, or the initially reported\n size is not equal to the actual number of elements in the source."}, {"method_name": "spliteratorUnknownSize", "method_sig": "public static Spliterator.OfInt spliteratorUnknownSize (PrimitiveIterator.OfInt iterator,\n                                                       int characteristics)", "description": "Creates a Spliterator.OfInt using a given\n IntStream.IntIterator as the source of elements, with no initial\n size estimate.\n\n The spliterator is not\n late-binding, inherits\n the fail-fast properties of the iterator, and implements\n trySplit to permit limited parallelism.\n\n Traversal of elements should be accomplished through the spliterator.\n The behaviour of splitting and traversal is undefined if the iterator is\n operated on after the spliterator is returned."}, {"method_name": "spliterator", "method_sig": "public static Spliterator.OfLong spliterator (PrimitiveIterator.OfLong iterator,\n                                             long size,\n                                             int characteristics)", "description": "Creates a Spliterator.OfLong using a given\n LongStream.LongIterator as the source of elements, and with a\n given initially reported size.\n\n The spliterator is not\n late-binding, inherits\n the fail-fast properties of the iterator, and implements\n trySplit to permit limited parallelism.\n\n Traversal of elements should be accomplished through the spliterator.\n The behaviour of splitting and traversal is undefined if the iterator is\n operated on after the spliterator is returned, or the initially reported\n size is not equal to the actual number of elements in the source."}, {"method_name": "spliteratorUnknownSize", "method_sig": "public static Spliterator.OfLong spliteratorUnknownSize (PrimitiveIterator.OfLong iterator,\n                                                        int characteristics)", "description": "Creates a Spliterator.OfLong using a given\n LongStream.LongIterator as the source of elements, with no\n initial size estimate.\n\n The spliterator is not\n late-binding, inherits\n the fail-fast properties of the iterator, and implements\n trySplit to permit limited parallelism.\n\n Traversal of elements should be accomplished through the spliterator.\n The behaviour of splitting and traversal is undefined if the iterator is\n operated on after the spliterator is returned."}, {"method_name": "spliterator", "method_sig": "public static Spliterator.OfDouble spliterator (PrimitiveIterator.OfDouble iterator,\n                                               long size,\n                                               int characteristics)", "description": "Creates a Spliterator.OfDouble using a given\n DoubleStream.DoubleIterator as the source of elements, and with a\n given initially reported size.\n\n The spliterator is not\n late-binding, inherits\n the fail-fast properties of the iterator, and implements\n trySplit to permit limited parallelism.\n\n Traversal of elements should be accomplished through the spliterator.\n The behaviour of splitting and traversal is undefined if the iterator is\n operated on after the spliterator is returned, or the initially reported\n size is not equal to the actual number of elements in the source."}, {"method_name": "spliteratorUnknownSize", "method_sig": "public static Spliterator.OfDouble spliteratorUnknownSize (PrimitiveIterator.OfDouble iterator,\n                                                          int characteristics)", "description": "Creates a Spliterator.OfDouble using a given\n DoubleStream.DoubleIterator as the source of elements, with no\n initial size estimate.\n\n The spliterator is not\n late-binding, inherits\n the fail-fast properties of the iterator, and implements\n trySplit to permit limited parallelism.\n\n Traversal of elements should be accomplished through the spliterator.\n The behaviour of splitting and traversal is undefined if the iterator is\n operated on after the spliterator is returned."}, {"method_name": "iterator", "method_sig": "public static <T> Iterator<T> iterator (Spliterator<? extends T> spliterator)", "description": "Creates an Iterator from a Spliterator.\n\n Traversal of elements should be accomplished through the iterator.\n The behaviour of traversal is undefined if the spliterator is operated\n after the iterator is returned."}, {"method_name": "iterator", "method_sig": "public static PrimitiveIterator.OfInt iterator (Spliterator.OfInt spliterator)", "description": "Creates an PrimitiveIterator.OfInt from a\n Spliterator.OfInt.\n\n Traversal of elements should be accomplished through the iterator.\n The behaviour of traversal is undefined if the spliterator is operated\n after the iterator is returned."}, {"method_name": "iterator", "method_sig": "public static PrimitiveIterator.OfLong iterator (Spliterator.OfLong spliterator)", "description": "Creates an PrimitiveIterator.OfLong from a\n Spliterator.OfLong.\n\n Traversal of elements should be accomplished through the iterator.\n The behaviour of traversal is undefined if the spliterator is operated\n after the iterator is returned."}, {"method_name": "iterator", "method_sig": "public static PrimitiveIterator.OfDouble iterator (Spliterator.OfDouble spliterator)", "description": "Creates an PrimitiveIterator.OfDouble from a\n Spliterator.OfDouble.\n\n Traversal of elements should be accomplished through the iterator.\n The behaviour of traversal is undefined if the spliterator is operated\n after the iterator is returned."}]}