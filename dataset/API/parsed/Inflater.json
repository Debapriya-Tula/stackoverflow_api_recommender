{"name": "Class Inflater", "module": "java.base", "package": "java.util.zip", "text": "This class provides support for general purpose decompression using the\n popular ZLIB compression library. The ZLIB compression library was\n initially developed as part of the PNG graphics standard and is not\n protected by patents. It is fully described in the specifications at\n the java.util.zip\n package description.\n \n This class inflates sequences of ZLIB compressed bytes. The input byte\n sequence is provided in either byte array or byte buffer, via one of the\n setInput() methods. The output byte sequence is written to the\n output byte array or byte buffer passed to the deflate() methods.\n \n The following code fragment demonstrates a trivial compression\n and decompression of a string using Deflater and\n Inflater.\n\n \n try {\n     // Encode a String into bytes\n     String inputString = \"blahblahblah\u20ac\u20ac\";\n     byte[] input = inputString.getBytes(\"UTF-8\");\n\n     // Compress the bytes\n     byte[] output = new byte[100];\n     Deflater compresser = new Deflater();\n     compresser.setInput(input);\n     compresser.finish();\n     int compressedDataLength = compresser.deflate(output);\n\n     // Decompress the bytes\n     Inflater decompresser = new Inflater();\n     decompresser.setInput(output, 0, compressedDataLength);\n     byte[] result = new byte[100];\n     int resultLength = decompresser.inflate(result);\n     decompresser.end();\n\n     // Decode the bytes into a String\n     String outputString = new String(result, 0, resultLength, \"UTF-8\");\n } catch (java.io.UnsupportedEncodingException ex) {\n     // handle\n } catch (java.util.zip.DataFormatException ex) {\n     // handle\n }\n ", "codes": ["public class Inflater\nextends Object"], "fields": [], "methods": [{"method_name": "setInput", "method_sig": "public void setInput (byte[] input,\n                     int off,\n                     int len)", "description": "Sets input data for decompression.\n \n One of the setInput() methods should be called whenever\n needsInput() returns true indicating that more input data\n is required."}, {"method_name": "setInput", "method_sig": "public void setInput (byte[] input)", "description": "Sets input data for decompression.\n \n One of the setInput() methods should be called whenever\n needsInput() returns true indicating that more input data\n is required."}, {"method_name": "setInput", "method_sig": "public void setInput (ByteBuffer input)", "description": "Sets input data for decompression.\n \n One of the setInput() methods should be called whenever\n needsInput() returns true indicating that more input data\n is required.\n \n The given buffer's position will be advanced as inflate\n operations are performed, up to the buffer's limit.\n The input buffer may be modified (refilled) between inflate\n operations; doing so is equivalent to creating a new buffer\n and setting it with this method.\n \n Modifying the input buffer's contents, position, or limit\n concurrently with an inflate operation will result in\n undefined behavior, which may include incorrect operation\n results or operation failure."}, {"method_name": "setDictionary", "method_sig": "public void setDictionary (byte[] dictionary,\n                          int off,\n                          int len)", "description": "Sets the preset dictionary to the given array of bytes. Should be\n called when inflate() returns 0 and needsDictionary() returns true\n indicating that a preset dictionary is required. The method getAdler()\n can be used to get the Adler-32 value of the dictionary needed."}, {"method_name": "setDictionary", "method_sig": "public void setDictionary (byte[] dictionary)", "description": "Sets the preset dictionary to the given array of bytes. Should be\n called when inflate() returns 0 and needsDictionary() returns true\n indicating that a preset dictionary is required. The method getAdler()\n can be used to get the Adler-32 value of the dictionary needed."}, {"method_name": "setDictionary", "method_sig": "public void setDictionary (ByteBuffer dictionary)", "description": "Sets the preset dictionary to the bytes in the given buffer. Should be\n called when inflate() returns 0 and needsDictionary() returns true\n indicating that a preset dictionary is required. The method getAdler()\n can be used to get the Adler-32 value of the dictionary needed.\n \n The bytes in given byte buffer will be fully consumed by this method.  On\n return, its position will equal its limit."}, {"method_name": "getRemaining", "method_sig": "public int getRemaining()", "description": "Returns the total number of bytes remaining in the input buffer.\n This can be used to find out what bytes still remain in the input\n buffer after decompression has finished."}, {"method_name": "needsInput", "method_sig": "public boolean needsInput()", "description": "Returns true if no data remains in the input buffer. This can\n be used to determine if one of the setInput() methods should be\n called in order to provide more input."}, {"method_name": "needsDictionary", "method_sig": "public boolean needsDictionary()", "description": "Returns true if a preset dictionary is needed for decompression."}, {"method_name": "finished", "method_sig": "public boolean finished()", "description": "Returns true if the end of the compressed data stream has been\n reached."}, {"method_name": "inflate", "method_sig": "public int inflate (byte[] output,\n                   int off,\n                   int len)\n            throws DataFormatException", "description": "Uncompresses bytes into specified buffer. Returns actual number\n of bytes uncompressed. A return value of 0 indicates that\n needsInput() or needsDictionary() should be called in order to\n determine if more input data or a preset dictionary is required.\n In the latter case, getAdler() can be used to get the Adler-32\n value of the dictionary required.\n \n If the setInput(ByteBuffer) method was called to provide a buffer\n for input, the input buffer's position will be advanced by the number of bytes\n consumed by this operation, even in the event that a DataFormatException\n is thrown.\n \n The remaining byte count will be reduced by\n the number of consumed input bytes.  If the setInput(ByteBuffer)\n method was called to provide a buffer for input, the input buffer's position\n will be advanced the number of consumed bytes.\n \n These byte totals, as well as\n the total bytes read\n and the total bytes written\n values, will be updated even in the event that a DataFormatException\n is thrown to reflect the amount of data consumed and produced before the\n exception occurred."}, {"method_name": "inflate", "method_sig": "public int inflate (byte[] output)\n            throws DataFormatException", "description": "Uncompresses bytes into specified buffer. Returns actual number\n of bytes uncompressed. A return value of 0 indicates that\n needsInput() or needsDictionary() should be called in order to\n determine if more input data or a preset dictionary is required.\n In the latter case, getAdler() can be used to get the Adler-32\n value of the dictionary required.\n \n The remaining byte count will be reduced by\n the number of consumed input bytes.  If the setInput(ByteBuffer)\n method was called to provide a buffer for input, the input buffer's position\n will be advanced the number of consumed bytes.\n \n These byte totals, as well as\n the total bytes read\n and the total bytes written\n values, will be updated even in the event that a DataFormatException\n is thrown to reflect the amount of data consumed and produced before the\n exception occurred."}, {"method_name": "inflate", "method_sig": "public int inflate (ByteBuffer output)\n            throws DataFormatException", "description": "Uncompresses bytes into specified buffer. Returns actual number\n of bytes uncompressed. A return value of 0 indicates that\n needsInput() or needsDictionary() should be called in order to\n determine if more input data or a preset dictionary is required.\n In the latter case, getAdler() can be used to get the Adler-32\n value of the dictionary required.\n \n On success, the position of the given output byte buffer will be\n advanced by as many bytes as were produced by the operation, which is equal\n to the number returned by this method.  Note that the position of the\n output buffer will be advanced even in the event that a\n DataFormatException is thrown.\n \n The remaining byte count will be reduced by\n the number of consumed input bytes.  If the setInput(ByteBuffer)\n method was called to provide a buffer for input, the input buffer's position\n will be advanced the number of consumed bytes.\n \n These byte totals, as well as\n the total bytes read\n and the total bytes written\n values, will be updated even in the event that a DataFormatException\n is thrown to reflect the amount of data consumed and produced before the\n exception occurred."}, {"method_name": "getAdler", "method_sig": "public int getAdler()", "description": "Returns the ADLER-32 value of the uncompressed data."}, {"method_name": "getTotalIn", "method_sig": "public int getTotalIn()", "description": "Returns the total number of compressed bytes input so far.\n\n Since the number of bytes may be greater than\n Integer.MAX_VALUE, the getBytesRead() method is now\n the preferred means of obtaining this information."}, {"method_name": "getBytesRead", "method_sig": "public long getBytesRead()", "description": "Returns the total number of compressed bytes input so far."}, {"method_name": "getTotalOut", "method_sig": "public int getTotalOut()", "description": "Returns the total number of uncompressed bytes output so far.\n\n Since the number of bytes may be greater than\n Integer.MAX_VALUE, the getBytesWritten() method is now\n the preferred means of obtaining this information."}, {"method_name": "getBytesWritten", "method_sig": "public long getBytesWritten()", "description": "Returns the total number of uncompressed bytes output so far."}, {"method_name": "reset", "method_sig": "public void reset()", "description": "Resets inflater so that a new set of input data can be processed."}, {"method_name": "end", "method_sig": "public void end()", "description": "Closes the decompressor and discards any unprocessed input.\n\n This method should be called when the decompressor is no longer\n being used. Once this method is called, the behavior of the\n Inflater object is undefined."}, {"method_name": "finalize", "method_sig": "@Deprecated(since=\"9\",\n            forRemoval=true)\nprotected void finalize()", "description": "Closes the decompressor when garbage is collected."}]}