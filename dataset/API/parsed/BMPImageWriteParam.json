{"name": "Class BMPImageWriteParam", "module": "java.desktop", "package": "javax.imageio.plugins.bmp", "text": "A subclass of ImageWriteParam for encoding images in\n the BMP format.\n\n  This class allows for the specification of various parameters\n while writing a BMP format image file.  By default, the data layout\n is bottom-up, such that the pixels are stored in bottom-up order,\n the first scanline being stored last.\n\n The particular compression scheme to be used can be specified by using\n the setCompressionType() method with the appropriate type\n string.  The compression scheme specified will be honored if and only if it\n is compatible with the type of image being written. If the specified\n compression scheme is not compatible with the type of image being written\n then the IOException will be thrown by the BMP image writer.\n If the compression type is not set explicitly then getCompressionType()\n will return null. In this case the BMP image writer will select\n a compression type that supports encoding of the given image without loss\n of the color resolution.\n The compression type strings and the image type(s) each supports are\n listed in the following\n table:\n\n \nCompression Types\n\n\nType String\n     Description\n     Image Types\n \n\n\nBI_RGB\n     Uncompressed RLE\n     <=  8-bits/sample\n   \nBI_RLE8\n     8-bit Run Length Encoding\n     <= 8-bits/sample\n   \nBI_RLE4\n     4-bit Run Length Encoding\n     <= 4-bits/sample\n   \nBI_BITFIELDS\n     Packed data\n     16 or 32 bits/sample\n \n", "codes": ["public class BMPImageWriteParam\nextends ImageWriteParam"], "fields": [], "methods": [{"method_name": "setTopDown", "method_sig": "public void setTopDown (boolean topDown)", "description": "If set, the data will be written out in a top-down manner, the first\n scanline being written first."}, {"method_name": "isTopDown", "method_sig": "public boolean isTopDown()", "description": "Returns the value of the topDown parameter.\n The default is false."}]}