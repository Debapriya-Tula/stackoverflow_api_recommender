{"name": "Class DefaultRowSorter<M,\u200bI>", "module": "java.desktop", "package": "javax.swing", "text": "An implementation of RowSorter that provides sorting and\n filtering around a grid-based data model.\n Beyond creating and installing a RowSorter, you very rarely\n need to interact with one directly.  Refer to\n TableRowSorter for a concrete\n implementation of RowSorter for JTable.\n \n Sorting is done based on the current SortKeys, in order.\n If two objects are equal (the Comparator for the\n column returns 0) the next SortKey is used.  If no\n SortKeys remain or the order is UNSORTED, then\n the order of the rows in the model is used.\n \n Sorting of each column is done by way of a Comparator\n that you can specify using the setComparator method.\n If a Comparator has not been specified, the\n Comparator returned by\n Collator.getInstance() is used on the results of\n calling toString on the underlying objects.  The\n Comparator is never passed null.  A\n null value is treated as occurring before a\n non-null value, and two null values are\n considered equal.\n \n If you specify a Comparator that casts its argument to\n a type other than that provided by the model, a\n ClassCastException will be thrown when the data is sorted.\n \n In addition to sorting, DefaultRowSorter provides the\n ability to filter rows.  Filtering is done by way of a\n RowFilter that is specified using the\n setRowFilter method.  If no filter has been specified all\n rows are included.\n \n By default, rows are in unsorted order (the same as the model) and\n every column is sortable. The default Comparators are\n documented in the subclasses (for example, TableRowSorter).\n \n If the underlying model structure changes (the\n modelStructureChanged method is invoked) the following\n are reset to their default values: Comparators by\n column, current sort order, and whether each column is sortable. To\n find the default Comparators, see the concrete\n implementation (for example, TableRowSorter).  The default\n sort order is unsorted (the same as the model), and columns are\n sortable by default.\n \nDefaultRowSorter is an abstract class.  Concrete\n subclasses must provide access to the underlying data by invoking\n setModelWrapper. The setModelWrapper method\n must be invoked soon after the constructor is\n called, ideally from within the subclass's constructor.\n Undefined behavior will result if you use a \n DefaultRowSorter without specifying a ModelWrapper.\n \nDefaultRowSorter has two formal type parameters.  The\n first type parameter corresponds to the class of the model, for example\n DefaultTableModel.  The second type parameter\n corresponds to the class of the identifier passed to the\n RowFilter.  Refer to TableRowSorter and\n RowFilter for more details on the type parameters.", "codes": ["public abstract class DefaultRowSorter<M, I>\nextends RowSorter<M>"], "fields": [], "methods": [{"method_name": "setModelWrapper", "method_sig": "protected final void setModelWrapper (DefaultRowSorter.ModelWrapper<M, I> modelWrapper)", "description": "Sets the model wrapper providing the data that is being sorted and\n filtered."}, {"method_name": "getModelWrapper", "method_sig": "protected final DefaultRowSorter.ModelWrapper<M, I> getModelWrapper()", "description": "Returns the model wrapper providing the data that is being sorted and\n filtered."}, {"method_name": "getModel", "method_sig": "public final M getModel()", "description": "Returns the underlying model."}, {"method_name": "setSortable", "method_sig": "public void setSortable (int column,\n                        boolean sortable)", "description": "Sets whether or not the specified column is sortable.  The specified\n value is only checked when toggleSortOrder is invoked.\n It is still possible to sort on a column that has been marked as\n unsortable by directly setting the sort keys.  The default is\n true."}, {"method_name": "isSortable", "method_sig": "public boolean isSortable (int column)", "description": "Returns true if the specified column is sortable; otherwise, false."}, {"method_name": "setSortKeys", "method_sig": "public void setSortKeys (List<? extends RowSorter.SortKey> sortKeys)", "description": "Sets the sort keys. This creates a copy of the supplied\n List; subsequent changes to the supplied\n List do not effect this DefaultRowSorter.\n If the sort keys have changed this triggers a sort."}, {"method_name": "getSortKeys", "method_sig": "public List<? extends RowSorter.SortKey> getSortKeys()", "description": "Returns the current sort keys.  This returns an unmodifiable\n non-null List. If you need to change the sort keys,\n make a copy of the returned List, mutate the copy\n and invoke setSortKeys with the new list."}, {"method_name": "setMaxSortKeys", "method_sig": "public void setMaxSortKeys (int max)", "description": "Sets the maximum number of sort keys.  The number of sort keys\n determines how equal values are resolved when sorting.  For\n example, assume a table row sorter is created and\n setMaxSortKeys(2) is invoked on it. The user\n clicks the header for column 1, causing the table rows to be\n sorted based on the items in column 1.  Next, the user clicks\n the header for column 2, causing the table to be sorted based\n on the items in column 2; if any items in column 2 are equal,\n then those particular rows are ordered based on the items in\n column 1. In this case, we say that the rows are primarily\n sorted on column 2, and secondarily on column 1.  If the user\n then clicks the header for column 3, then the items are\n primarily sorted on column 3 and secondarily sorted on column\n 2.  Because the maximum number of sort keys has been set to 2\n with setMaxSortKeys, column 1 no longer has an\n effect on the order.\n \n The maximum number of sort keys is enforced by\n toggleSortOrder.  You can specify more sort\n keys by invoking setSortKeys directly and they will\n all be honored.  However if toggleSortOrder is subsequently\n invoked the maximum number of sort keys will be enforced.\n The default value is 3."}, {"method_name": "getMaxSortKeys", "method_sig": "public int getMaxSortKeys()", "description": "Returns the maximum number of sort keys."}, {"method_name": "setSortsOnUpdates", "method_sig": "public void setSortsOnUpdates (boolean sortsOnUpdates)", "description": "If true, specifies that a sort should happen when the underlying\n model is updated (rowsUpdated is invoked).  For\n example, if this is true and the user edits an entry the\n location of that item in the view may change.  The default is\n false."}, {"method_name": "getSortsOnUpdates", "method_sig": "public boolean getSortsOnUpdates()", "description": "Returns true if  a sort should happen when the underlying\n model is updated; otherwise, returns false."}, {"method_name": "setRowFilter", "method_sig": "public void setRowFilter (RowFilter<? super M, ? super I> filter)", "description": "Sets the filter that determines which rows, if any, should be\n hidden from the view.  The filter is applied before sorting.  A value\n of null indicates all values from the model should be\n included.\n \nRowFilter's include method is passed an\n Entry that wraps the underlying model.  The number\n of columns in the Entry corresponds to the\n number of columns in the ModelWrapper.  The identifier\n comes from the ModelWrapper as well.\n \n This method triggers a sort."}, {"method_name": "getRowFilter", "method_sig": "public RowFilter<? super M, ? super I> getRowFilter()", "description": "Returns the filter that determines which rows, if any, should\n be hidden from view."}, {"method_name": "toggleSortOrder", "method_sig": "public void toggleSortOrder (int column)", "description": "Reverses the sort order from ascending to descending (or\n descending to ascending) if the specified column is already the\n primary sorted column; otherwise, makes the specified column\n the primary sorted column, with an ascending sort order.  If\n the specified column is not sortable, this method has no\n effect."}, {"method_name": "convertRowIndexToView", "method_sig": "public int convertRowIndexToView (int index)", "description": "Returns the location of index in terms of the\n view.  That is, for the row index in the\n coordinates of the underlying model this returns the row index\n in terms of the view."}, {"method_name": "convertRowIndexToModel", "method_sig": "public int convertRowIndexToModel (int index)", "description": "Returns the location of index in terms of the\n underlying model.  That is, for the row index in\n the coordinates of the view this returns the row index in terms\n of the underlying model."}, {"method_name": "sort", "method_sig": "public void sort()", "description": "Sorts and filters the rows in the view based on the sort keys\n of the columns currently being sorted and the filter, if any,\n associated with this sorter.  An empty sortKeys list\n indicates that the view should unsorted, the same as the model."}, {"method_name": "useToString", "method_sig": "protected boolean useToString (int column)", "description": "Returns whether or not to convert the value to a string before\n doing comparisons when sorting.  If true\n ModelWrapper.getStringValueAt will be used, otherwise\n ModelWrapper.getValueAt will be used.  It is up to\n subclasses, such as TableRowSorter, to honor this value\n in their ModelWrapper implementation."}, {"method_name": "setComparator", "method_sig": "public void setComparator (int column,\n                          Comparator<?> comparator)", "description": "Sets the Comparator to use when sorting the specified\n column.  This does not trigger a sort.  If you want to sort after\n setting the comparator you need to explicitly invoke sort."}, {"method_name": "getComparator", "method_sig": "public Comparator<?> getComparator (int column)", "description": "Returns the Comparator for the specified\n column.  This will return null if a Comparator\n has not been specified for the column."}, {"method_name": "rowsInserted", "method_sig": "public void rowsInserted (int firstRow,\n                         int endRow)", "description": "Invoked when rows have been inserted into the underlying model\n in the specified range (inclusive).\n \n The arguments give the indices of the effected range.\n The first argument is in terms of the model before the change, and\n must be less than or equal to the size of the model before the change.\n The second argument is in terms of the model after the change and must\n be less than the size of the model after the change. For example,\n if you have a 5-row model and add 3 items to the end of the model\n the indices are 5, 7.\n \n You normally do not call this method.  This method is public\n to allow view classes to call it."}, {"method_name": "rowsDeleted", "method_sig": "public void rowsDeleted (int firstRow,\n                        int endRow)", "description": "Invoked when rows have been deleted from the underlying model\n in the specified range (inclusive).\n \n The arguments give the indices of the effected range and\n are in terms of the model before the change.\n For example, if you have a 5-row model and delete 3 items from the end\n of the model the indices are 2, 4.\n \n You normally do not call this method.  This method is public\n to allow view classes to call it."}, {"method_name": "rowsUpdated", "method_sig": "public void rowsUpdated (int firstRow,\n                        int endRow)", "description": "Invoked when rows have been changed in the underlying model\n between the specified range (inclusive).\n \n You normally do not call this method.  This method is public\n to allow view classes to call it."}, {"method_name": "rowsUpdated", "method_sig": "public void rowsUpdated (int firstRow,\n                        int endRow,\n                        int column)", "description": "Invoked when the column in the rows have been updated in\n the underlying model between the specified range.\n \n You normally do not call this method.  This method is public\n to allow view classes to call it."}]}