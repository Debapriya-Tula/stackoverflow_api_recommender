{"name": "Interface EntityResolver", "module": "java.xml", "package": "org.xml.sax", "text": "Basic interface for resolving entities.\n\n \nThis module, both source code and documentation, is in the\n Public Domain, and comes with NO WARRANTY.\n See http://www.saxproject.org\n for further information.\n \nIf a SAX application needs to implement customized handling\n for external entities, it must implement this interface and\n register an instance with the SAX driver using the\n setEntityResolver\n method.\nThe XML reader will then allow the application to intercept any\n external entities (including the external DTD subset and external\n parameter entities, if any) before including them.\nMany SAX applications will not need to implement this interface,\n but it will be especially useful for applications that build\n XML documents from databases or other specialised input sources,\n or for applications that use URI types other than URLs.\nThe following resolver would provide the application\n with a special character stream for the entity with the system\n identifier \"http://www.myhost.com/today\":\n\n import org.xml.sax.EntityResolver;\n import org.xml.sax.InputSource;\n\n public class MyResolver implements EntityResolver {\n   public InputSource resolveEntity (String publicId, String systemId)\n   {\n     if (systemId.equals(\"http://www.myhost.com/today\")) {\n              // return a special input source\n       MyReader reader = new MyReader();\n       return new InputSource(reader);\n     } else {\n              // use the default behaviour\n       return null;\n     }\n   }\n }\n \nThe application can also use this interface to redirect system\n identifiers to local URIs or to look up replacements in a catalog\n (possibly by using the public identifier).", "codes": ["public interface EntityResolver"], "fields": [], "methods": [{"method_name": "resolveEntity", "method_sig": "InputSource resolveEntity (String publicId,\n                          String systemId)\n                   throws SAXException,\n                          IOException", "description": "Allow the application to resolve external entities.\n\n The parser will call this method before opening any external\n entity except the top-level document entity.  Such entities include\n the external DTD subset and external parameter entities referenced\n within the DTD (in either case, only if the parser reads external\n parameter entities), and external general entities referenced\n within the document element (if the parser reads external general\n entities).  The application may request that the parser locate\n the entity itself, that it use an alternative URI, or that it\n use data provided by the application (as a character or byte\n input stream).\nApplication writers can use this method to redirect external\n system identifiers to secure and/or local URIs, to look up\n public identifiers in a catalogue, or to read an entity from a\n database or other input source (including, for example, a dialog\n box).  Neither XML nor SAX specifies a preferred policy for using\n public or system IDs to resolve resources.  However, SAX specifies\n how to interpret any InputSource returned by this method, and that\n if none is returned, then the system ID will be dereferenced as\n a URL.  \nIf the system identifier is a URL, the SAX parser must\n resolve it fully before reporting it to the application."}]}