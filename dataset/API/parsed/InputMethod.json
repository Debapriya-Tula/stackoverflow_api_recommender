{"name": "Interface InputMethod", "module": "java.desktop", "package": "java.awt.im.spi", "text": "Defines the interface for an input method that supports complex text input.\n Input methods traditionally support text input for languages that have\n more characters than can be represented on a standard-size keyboard,\n such as Chinese, Japanese, and Korean. However, they may also be used to\n support phonetic text input for English or character reordering for Thai.\n \n Subclasses of InputMethod can be loaded by the input method framework; they\n can then be selected either through the API\n (InputContext.selectInputMethod)\n or the user interface (the input method selection menu).", "codes": ["public interface InputMethod"], "fields": [], "methods": [{"method_name": "setInputMethodContext", "method_sig": "void setInputMethodContext (InputMethodContext context)", "description": "Sets the input method context, which is used to dispatch input method\n events to the client component and to request information from\n the client component.\n \n This method is called once immediately after instantiating this input\n method."}, {"method_name": "setLocale", "method_sig": "boolean setLocale (Locale locale)", "description": "Attempts to set the input locale. If the input method supports the\n desired locale, it changes its behavior to support input for the locale\n and returns true.\n Otherwise, it returns false and does not change its behavior.\n \n This method is called\n \nby InputContext.selectInputMethod,\n when switching to this input method through the user interface if the user\n     specified a locale or if the previously selected input method's\n     getLocale method\n     returns a non-null value.\n "}, {"method_name": "getLocale", "method_sig": "Locale getLocale()", "description": "Returns the current input locale. Might return null in exceptional cases.\n \n This method is called\n \nby InputContext.getLocale and\n when switching from this input method to a different one through the\n     user interface.\n "}, {"method_name": "setCharacterSubsets", "method_sig": "void setCharacterSubsets (Character.Subset[] subsets)", "description": "Sets the subsets of the Unicode character set that this input method\n is allowed to input. Null may be passed in to indicate that all\n characters are allowed.\n \n This method is called\n \nimmediately after instantiating this input method,\n when switching to this input method from a different one, and\n by InputContext.setCharacterSubsets.\n "}, {"method_name": "setCompositionEnabled", "method_sig": "void setCompositionEnabled (boolean enable)", "description": "Enables or disables this input method for composition,\n depending on the value of the parameter enable.\n \n An input method that is enabled for composition interprets incoming\n events for both composition and control purposes, while a\n disabled input method does not interpret events for composition.\n Note however that events are passed on to the input method regardless\n whether it is enabled or not, and that an input method that is disabled\n for composition may still interpret events for control purposes,\n including to enable or disable itself for composition.\n \n For input methods provided by host operating systems, it is not always possible to\n determine whether this operation is supported. For example, an input method may enable\n composition only for some locales, and do nothing for other locales. For such input\n methods, it is possible that this method does not throw\n UnsupportedOperationException,\n but also does not affect whether composition is enabled.\n \n This method is called\n \nby InputContext.setCompositionEnabled,\n when switching to this input method from a different one using the\n     user interface or\n     InputContext.selectInputMethod,\n     if the previously selected input method's\n     isCompositionEnabled\n     method returns without throwing an exception.\n "}, {"method_name": "isCompositionEnabled", "method_sig": "boolean isCompositionEnabled()", "description": "Determines whether this input method is enabled.\n An input method that is enabled for composition interprets incoming\n events for both composition and control purposes, while a\n disabled input method does not interpret events for composition.\n \n This method is called\n \nby InputContext.isCompositionEnabled and\n when switching from this input method to a different one using the\n     user interface or\n     InputContext.selectInputMethod.\n "}, {"method_name": "reconvert", "method_sig": "void reconvert()", "description": "Starts the reconversion operation. The input method obtains the\n text to be reconverted from the current client component using the\n InputMethodRequests.getSelectedText\n method. It can use other InputMethodRequests\n methods to request additional information required for the\n reconversion operation. The composed and committed text\n produced by the operation is sent to the client component as a\n sequence of InputMethodEvents. If the given text\n cannot be reconverted, the same text should be sent to the\n client component as committed text.\n \n This method is called by\n InputContext.reconvert."}, {"method_name": "dispatchEvent", "method_sig": "void dispatchEvent (AWTEvent event)", "description": "Dispatches the event to the input method. If input method support is\n enabled for the focused component, incoming events of certain types\n are dispatched to the current input method for this component before\n they are dispatched to the component's methods or event listeners.\n The input method decides whether it needs to handle the event. If it\n does, it also calls the event's consume method; this\n causes the event to not get dispatched to the component's event\n processing methods or event listeners.\n \n Events are dispatched if they are instances of InputEvent or its\n subclasses.\n This includes instances of the AWT classes KeyEvent and MouseEvent.\n \n This method is called by InputContext.dispatchEvent."}, {"method_name": "notifyClientWindowChange", "method_sig": "void notifyClientWindowChange (Rectangle bounds)", "description": "Notifies this input method of changes in the client window\n location or state. This method is called while this input\n method is the current input method of its input context and\n notifications for it are enabled (see InputMethodContext.enableClientWindowNotification). Calls\n to this method are temporarily suspended if the input context's\n removeNotify\n method is called, and resume when the input method is activated\n for a new client component. It is called in the following\n situations:\n \n\n when the window containing the current client component changes\n in location, size, visibility, iconification state, or when the\n window is closed.\n\n from enableClientWindowNotification(inputMethod, true)\n if the current client component exists,\n\n when activating the input method for the first time after it\n called\n enableClientWindowNotification(inputMethod, true)\n if during the call no current client component was\n available,\n\n when activating the input method for a new client component\n after the input context's removeNotify method has been\n called.\n"}, {"method_name": "activate", "method_sig": "void activate()", "description": "Activates the input method for immediate input processing.\n \n If an input method provides its own windows, it should make sure\n at this point that all necessary windows are open and visible.\n \n This method is called\n \nby InputContext.dispatchEvent\n     when a client component receives a FOCUS_GAINED event,\n when switching to this input method from a different one using the\n     user interface or\n     InputContext.selectInputMethod.\n \n The method is only called when the input method is inactive.\n A newly instantiated input method is assumed to be inactive."}, {"method_name": "deactivate", "method_sig": "void deactivate (boolean isTemporary)", "description": "Deactivates the input method.\n The isTemporary argument has the same meaning as in\n FocusEvent.isTemporary.\n \n If an input method provides its own windows, only windows that relate\n to the current composition (such as a lookup choice window) should be\n closed at this point.\n It is possible that the input method will be immediately activated again\n for a different client component, and closing and reopening more\n persistent windows (such as a control panel) would create unnecessary\n screen flicker.\n Before an instance of a different input method class is activated,\n hideWindows() is called on the current input method.\n \n This method is called\n \nby InputContext.dispatchEvent\n     when a client component receives a FOCUS_LOST event,\n when switching from this input method to a different one using the\n     user interface or\n     InputContext.selectInputMethod,\n before removeNotify if the current client component is\n     removed.\n \n The method is only called when the input method is active."}, {"method_name": "hideWindows", "method_sig": "void hideWindows()", "description": "Closes or hides all windows opened by this input method instance or\n its class.\n \n This method is called\n \nbefore calling activate on an instance of a different input\n     method class,\n before calling dispose on this input method.\n \n The method is only called when the input method is inactive."}, {"method_name": "removeNotify", "method_sig": "void removeNotify()", "description": "Notifies the input method that a client component has been\n removed from its containment hierarchy, or that input method\n support has been disabled for the component.\n \n This method is called by InputContext.removeNotify.\n \n The method is only called when the input method is inactive."}, {"method_name": "endComposition", "method_sig": "void endComposition()", "description": "Ends any input composition that may currently be going on in this\n context. Depending on the platform and possibly user preferences,\n this may commit or delete uncommitted text. Any changes to the text\n are communicated to the active component using an input method event.\n\n \n A text editing component may call this in a variety of situations,\n for example, when the user moves the insertion point within the text\n (but outside the composed text), or when the component's text is\n saved to a file or copied to the clipboard.\n \n This method is called\n \nby InputContext.endComposition,\n by InputContext.dispatchEvent\n     when switching to a different client component\n when switching from this input method to a different one using the\n     user interface or\n     InputContext.selectInputMethod.\n "}, {"method_name": "dispose", "method_sig": "void dispose()", "description": "Releases the resources used by this input method.\n In particular, the input method should dispose windows and close files that are no\n longer needed.\n \n This method is called by InputContext.dispose.\n \n The method is only called when the input method is inactive.\n No method of this interface is called on this instance after dispose."}, {"method_name": "getControlObject", "method_sig": "Object getControlObject()", "description": "Returns a control object from this input method, or null. A\n control object provides methods that control the behavior of the\n input method or obtain information from the input method. The type\n of the object is an input method specific class. Clients have to\n compare the result against known input method control object\n classes and cast to the appropriate class to invoke the methods\n provided.\n \n This method is called by\n InputContext.getInputMethodControlObject."}]}