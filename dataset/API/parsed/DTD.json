{"name": "Class DTD", "module": "java.desktop", "package": "javax.swing.text.html.parser", "text": "The representation of an SGML DTD.  DTD describes a document\n syntax and is used in parsing of HTML documents.  It contains\n a list of elements and their attributes as well as a list of\n entities defined in the DTD.", "codes": ["public class DTD\nextends Object\nimplements DTDConstants"], "fields": [{"field_name": "name", "field_sig": "public\u00a0String name", "description": "the name of the DTD"}, {"field_name": "elements", "field_sig": "public\u00a0Vector<Element> elements", "description": "The vector of elements"}, {"field_name": "elementHash", "field_sig": "public\u00a0Hashtable<String,\u200bElement> elementHash", "description": "The hash table contains the name of element and\n the corresponding element."}, {"field_name": "entityHash", "field_sig": "public\u00a0Hashtable<Object,\u200bEntity> entityHash", "description": "The hash table contains an Object and the corresponding Entity"}, {"field_name": "pcdata", "field_sig": "public final\u00a0Element pcdata", "description": "The element corresponding to pcdata."}, {"field_name": "html", "field_sig": "public final\u00a0Element html", "description": "The element corresponding to html."}, {"field_name": "meta", "field_sig": "public final\u00a0Element meta", "description": "The element corresponding to meta."}, {"field_name": "base", "field_sig": "public final\u00a0Element base", "description": "The element corresponding to base."}, {"field_name": "isindex", "field_sig": "public final\u00a0Element isindex", "description": "The element corresponding to isindex."}, {"field_name": "head", "field_sig": "public final\u00a0Element head", "description": "The element corresponding to head."}, {"field_name": "body", "field_sig": "public final\u00a0Element body", "description": "The element corresponding to body."}, {"field_name": "applet", "field_sig": "public final\u00a0Element applet", "description": "The element corresponding to applet."}, {"field_name": "param", "field_sig": "public final\u00a0Element param", "description": "The element corresponding to param."}, {"field_name": "p", "field_sig": "public final\u00a0Element p", "description": "The element corresponding to p."}, {"field_name": "title", "field_sig": "public final\u00a0Element title", "description": "The element corresponding to title."}, {"field_name": "FILE_VERSION", "field_sig": "public static final\u00a0int FILE_VERSION", "description": "The version of a file"}], "methods": [{"method_name": "getName", "method_sig": "public String getName()", "description": "Gets the name of the DTD."}, {"method_name": "getEntity", "method_sig": "public Entity getEntity (String name)", "description": "Gets an entity by name."}, {"method_name": "getEntity", "method_sig": "public Entity getEntity (int ch)", "description": "Gets a character entity."}, {"method_name": "getElement", "method_sig": "public Element getElement (String name)", "description": "Gets an element by name. A new element is\n created if the element doesn't exist."}, {"method_name": "getElement", "method_sig": "public Element getElement (int index)", "description": "Gets an element by index."}, {"method_name": "defineEntity", "method_sig": "public Entity defineEntity (String name,\n                           int type,\n                           char[] data)", "description": "Defines an entity.  If the Entity specified\n by name, type, and data\n exists, it is returned; otherwise a new Entity\n is created and is returned."}, {"method_name": "defineElement", "method_sig": "public Element defineElement (String name,\n                             int type,\n                             boolean omitStart,\n                             boolean omitEnd,\n                             ContentModel content,\n                             BitSet exclusions,\n                             BitSet inclusions,\n                             AttributeList atts)", "description": "Returns the Element which matches the\n specified parameters.  If one doesn't exist, a new\n one is created and returned."}, {"method_name": "defineAttributes", "method_sig": "public void defineAttributes (String name,\n                             AttributeList atts)", "description": "Defines attributes for an Element."}, {"method_name": "defEntity", "method_sig": "public Entity defEntity (String name,\n                        int type,\n                        int ch)", "description": "Creates and returns a character Entity."}, {"method_name": "defEntity", "method_sig": "protected Entity defEntity (String name,\n                           int type,\n                           String str)", "description": "Creates and returns an Entity."}, {"method_name": "defElement", "method_sig": "protected Element defElement (String name,\n                             int type,\n                             boolean omitStart,\n                             boolean omitEnd,\n                             ContentModel content,\n                             String[] exclusions,\n                             String[] inclusions,\n                             AttributeList atts)", "description": "Creates and returns an Element."}, {"method_name": "defAttributeList", "method_sig": "protected AttributeList defAttributeList (String name,\n                                         int type,\n                                         int modifier,\n                                         String value,\n                                         String values,\n                                         AttributeList atts)", "description": "Creates and returns an AttributeList responding to a new attribute."}, {"method_name": "defContentModel", "method_sig": "protected ContentModel defContentModel (int type,\n                                       Object obj,\n                                       ContentModel next)", "description": "Creates and returns a new content model."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a string representation of this DTD."}, {"method_name": "putDTDHash", "method_sig": "public static void putDTDHash (String name,\n                              DTD dtd)", "description": "Put a name and appropriate DTD to hashtable."}, {"method_name": "getDTD", "method_sig": "public static DTD getDTD (String name)\n                  throws IOException", "description": "Returns a DTD with the specified name.  If\n a DTD with that name doesn't exist, one is created\n and returned.  Any uppercase characters in the name\n are converted to lowercase."}, {"method_name": "read", "method_sig": "public void read (DataInputStream in)\n          throws IOException", "description": "Recreates a DTD from an archived format."}]}