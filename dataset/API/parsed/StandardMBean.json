{"name": "Class StandardMBean", "module": "java.management", "package": "javax.management", "text": "An MBean whose management interface is determined by reflection\n on a Java interface.\nThis class brings more flexibility to the notion of Management\n Interface in the use of Standard MBeans.  Straightforward use of\n the patterns for Standard MBeans described in the JMX Specification\n means that there is a fixed relationship between the implementation\n class of an MBean and its management interface (i.e., if the\n implementation class is Thing, the management interface must be\n ThingMBean).  This class makes it possible to keep the convenience\n of specifying the management interface with a Java interface,\n without requiring that there be any naming relationship between the\n implementation and interface classes.\nBy making a DynamicMBean out of an MBean, this class makes\n it possible to select any interface implemented by the MBean as its\n management interface, provided that it complies with JMX patterns\n (i.e., attributes defined by getter/setter etc...).\n This class also provides hooks that make it possible to supply\n custom descriptions and names for the MBeanInfo returned by\n the DynamicMBean interface.\nUsing this class, an MBean can be created with any\n implementation class name Impl and with a management\n interface defined (as for current Standard MBeans) by any interface\n Intf, in one of two general ways:\n\nUsing the public constructor\n     StandardMBean(impl,interface):\n     \n     MBeanServer mbs;\n     ...\n     Impl impl = new Impl(...);\n     StandardMBean mbean = new StandardMBean(impl, Intf.class, false);\n     mbs.registerMBean(mbean, objectName);\n     \nSubclassing StandardMBean:\n     \n     public class Impl extends StandardMBean implements Intf {\n        public Impl() {\n          super(Intf.class, false);\n       }\n       // implement methods of Intf\n     }\n\n     [...]\n\n     MBeanServer mbs;\n     ....\n     Impl impl = new Impl();\n     mbs.registerMBean(impl, objectName);\n     \n\nIn either case, the class Impl must implement the\n interface Intf.\nStandard MBeans based on the naming relationship between\n implementation and interface classes are of course still\n available.\nThis class may also be used to construct MXBeans.  The usage\n is exactly the same as for Standard MBeans except that in the\n examples above, the false parameter to the constructor or\n super(...) invocation is instead true.", "codes": ["public class StandardMBean\nextends Object\nimplements DynamicMBean, MBeanRegistration"], "fields": [], "methods": [{"method_name": "setImplementation", "method_sig": "public void setImplementation (Object implementation)\n                       throws NotCompliantMBeanException", "description": "Replace the implementation object wrapped in this object."}, {"method_name": "getImplementation", "method_sig": "public Object getImplementation()", "description": "Get the implementation of this Standard MBean (or MXBean)."}, {"method_name": "getMBeanInterface", "method_sig": "public final Class<?> getMBeanInterface()", "description": "Get the Management Interface of this Standard MBean (or MXBean)."}, {"method_name": "getImplementationClass", "method_sig": "public Class<?> getImplementationClass()", "description": "Get the class of the implementation of this Standard MBean (or MXBean)."}, {"method_name": "getMBeanInfo", "method_sig": "public MBeanInfo getMBeanInfo()", "description": "Get the MBeanInfo for this MBean.\n \n This method implements\n DynamicMBean.getMBeanInfo().\n \n This method first calls getCachedMBeanInfo() in order to\n retrieve the cached MBeanInfo for this MBean, if any. If the\n MBeanInfo returned by getCachedMBeanInfo() is not null,\n then it is returned.\n Otherwise, this method builds a default MBeanInfo for this MBean,\n using the Management Interface specified for this MBean.\n \n While building the MBeanInfo, this method calls the customization\n hooks that make it possible for subclasses to supply their custom\n descriptions, parameter names, etc...\n Finally, it calls cacheMBeanInfo() in order to cache the new MBeanInfo."}, {"method_name": "getClassName", "method_sig": "protected String getClassName (MBeanInfo info)", "description": "Customization hook:\n Get the className that will be used in the MBeanInfo returned by\n this MBean.\n \n Subclasses may redefine this method in order to supply their\n custom class name.  The default implementation returns\n info.getClassName()."}, {"method_name": "getDescription", "method_sig": "protected String getDescription (MBeanInfo info)", "description": "Customization hook:\n Get the description that will be used in the MBeanInfo returned by\n this MBean.\n \n Subclasses may redefine this method in order to supply their\n custom MBean description.  The default implementation returns\n info.getDescription()."}, {"method_name": "getDescription", "method_sig": "protected String getDescription (MBeanFeatureInfo info)", "description": "Customization hook:\n Get the description that will be used in the MBeanFeatureInfo\n returned by this MBean.\nSubclasses may redefine this method in order to supply\n their custom description.  The default implementation returns\n info.getDescription().\nThis method is called by\n      getDescription(MBeanAttributeInfo),\n      getDescription(MBeanOperationInfo),\n      getDescription(MBeanConstructorInfo)."}, {"method_name": "getDescription", "method_sig": "protected String getDescription (MBeanAttributeInfo info)", "description": "Customization hook:\n Get the description that will be used in the MBeanAttributeInfo\n returned by this MBean.\n\n Subclasses may redefine this method in order to supply their\n custom description.  The default implementation returns getDescription((MBeanFeatureInfo) info)."}, {"method_name": "getDescription", "method_sig": "protected String getDescription (MBeanConstructorInfo info)", "description": "Customization hook:\n Get the description that will be used in the MBeanConstructorInfo\n returned by this MBean.\n \n Subclasses may redefine this method in order to supply their\n custom description.\n The default implementation returns getDescription((MBeanFeatureInfo) info)."}, {"method_name": "getDescription", "method_sig": "protected String getDescription (MBeanConstructorInfo ctor,\n                                MBeanParameterInfo param,\n                                int sequence)", "description": "Customization hook:\n Get the description that will be used for the  sequence\n MBeanParameterInfo of the MBeanConstructorInfo returned by this MBean.\n \n Subclasses may redefine this method in order to supply their\n custom description.  The default implementation returns\n param.getDescription()."}, {"method_name": "getParameterName", "method_sig": "protected String getParameterName (MBeanConstructorInfo ctor,\n                                  MBeanParameterInfo param,\n                                  int sequence)", "description": "Customization hook:\n Get the name that will be used for the sequence\n MBeanParameterInfo of the MBeanConstructorInfo returned by this MBean.\n \n Subclasses may redefine this method in order to supply their\n custom parameter name.  The default implementation returns\n param.getName()."}, {"method_name": "getDescription", "method_sig": "protected String getDescription (MBeanOperationInfo info)", "description": "Customization hook:\n Get the description that will be used in the MBeanOperationInfo\n returned by this MBean.\n \n Subclasses may redefine this method in order to supply their\n custom description.  The default implementation returns\n getDescription((MBeanFeatureInfo) info)."}, {"method_name": "getImpact", "method_sig": "protected int getImpact (MBeanOperationInfo info)", "description": "Customization hook:\n Get the impact flag of the operation that will be used in\n the MBeanOperationInfo returned by this MBean.\n \n Subclasses may redefine this method in order to supply their\n custom impact flag.  The default implementation returns\n info.getImpact()."}, {"method_name": "getParameterName", "method_sig": "protected String getParameterName (MBeanOperationInfo op,\n                                  MBeanParameterInfo param,\n                                  int sequence)", "description": "Customization hook:\n Get the name that will be used for the sequence\n MBeanParameterInfo of the MBeanOperationInfo returned by this MBean.\n \n Subclasses may redefine this method in order to supply their\n custom parameter name.  The default implementation returns\n param.getName()."}, {"method_name": "getDescription", "method_sig": "protected String getDescription (MBeanOperationInfo op,\n                                MBeanParameterInfo param,\n                                int sequence)", "description": "Customization hook:\n Get the description that will be used for the  sequence\n MBeanParameterInfo of the MBeanOperationInfo returned by this MBean.\n \n Subclasses may redefine this method in order to supply their\n custom description.  The default implementation returns\n param.getDescription()."}, {"method_name": "getConstructors", "method_sig": "protected MBeanConstructorInfo[] getConstructors (MBeanConstructorInfo[] ctors,\n                                                 Object impl)", "description": "Customization hook:\n Get the MBeanConstructorInfo[] that will be used in the MBeanInfo\n returned by this MBean.\n \n By default, this method returns null if the wrapped\n implementation is not this. Indeed, if the wrapped\n implementation is not this object itself, it will not be possible\n to recreate a wrapped implementation by calling the implementation\n constructors through MBeanServer.createMBean(...).\n Otherwise, if the wrapped implementation is this,\n ctors is returned.\n \n Subclasses may redefine this method in order to modify this\n behavior, if needed."}, {"method_name": "getCachedMBeanInfo", "method_sig": "protected MBeanInfo getCachedMBeanInfo()", "description": "Customization hook:\n Return the MBeanInfo cached for this object.\n\n Subclasses may redefine this method in order to implement their\n own caching policy.  The default implementation stores one\n MBeanInfo object per instance."}, {"method_name": "cacheMBeanInfo", "method_sig": "protected void cacheMBeanInfo (MBeanInfo info)", "description": "Customization hook:\n cache the MBeanInfo built for this object.\n\n Subclasses may redefine this method in order to implement\n their own caching policy.  The default implementation stores\n info in this instance.  A subclass can define\n other policies, such as not saving info (so it is\n reconstructed every time getMBeanInfo() is called) or\n sharing a unique MBeanInfo object when several\n StandardMBean instances have equal MBeanInfo values."}, {"method_name": "preRegister", "method_sig": "public ObjectName preRegister (MBeanServer server,\n                              ObjectName name)\n                       throws Exception", "description": "Allows the MBean to perform any operations it needs before\n being registered in the MBean server.  If the name of the MBean\n is not specified, the MBean can provide a name for its\n registration.  If any exception is raised, the MBean will not be\n registered in the MBean server.\nThe default implementation of this method returns the name\n parameter.  It does nothing else for\n Standard MBeans.  For MXBeans, it records the MBeanServer\n and ObjectName parameters so they can be used to translate\n inter-MXBean references.\nIt is good practice for a subclass that overrides this method\n to call the overridden method via super.preRegister(...).\n This is necessary if this object is an MXBean that is referenced\n by attributes or operations in other MXBeans."}, {"method_name": "postRegister", "method_sig": "public void postRegister (Boolean registrationDone)", "description": "Allows the MBean to perform any operations needed after having been\n registered in the MBean server or after the registration has failed.\nThe default implementation of this method does nothing for\n Standard MBeans.  For MXBeans, it undoes any work done by\n preRegister if registration fails.\nIt is good practice for a subclass that overrides this method\n to call the overridden method via super.postRegister(...).\n This is necessary if this object is an MXBean that is referenced\n by attributes or operations in other MXBeans."}, {"method_name": "preDeregister", "method_sig": "public void preDeregister()\n                   throws Exception", "description": "Allows the MBean to perform any operations it needs before\n being unregistered by the MBean server.\nThe default implementation of this method does nothing.\nIt is good practice for a subclass that overrides this method\n to call the overridden method via super.preDeregister(...)."}, {"method_name": "postDeregister", "method_sig": "public void postDeregister()", "description": "Allows the MBean to perform any operations needed after having been\n unregistered in the MBean server.\nThe default implementation of this method does nothing for\n Standard MBeans.  For MXBeans, it removes any information that\n was recorded by the preRegister method.\nIt is good practice for a subclass that overrides this method\n to call the overridden method via super.postRegister(...).\n This is necessary if this object is an MXBean that is referenced\n by attributes or operations in other MXBeans."}]}