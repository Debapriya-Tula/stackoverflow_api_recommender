{"name": "Class Polygon", "module": "java.desktop", "package": "java.awt", "text": "The Polygon class encapsulates a description of a\n closed, two-dimensional region within a coordinate space. This\n region is bounded by an arbitrary number of line segments, each of\n which is one side of the polygon. Internally, a polygon\n comprises of a list of (x,y)\n coordinate pairs, where each pair defines a vertex of the\n polygon, and two successive pairs are the endpoints of a\n line that is a side of the polygon. The first and final\n pairs of (x,y) points are joined by a line segment\n that closes the polygon.  This Polygon is defined with\n an even-odd winding rule.  See\n WIND_EVEN_ODD\n for a definition of the even-odd winding rule.\n This class's hit-testing methods, which include the\n contains, intersects and inside\n methods, use the insideness definition described in the\n Shape class comments.", "codes": ["public class Polygon\nextends Object\nimplements Shape, Serializable"], "fields": [{"field_name": "npoints", "field_sig": "public\u00a0int npoints", "description": "The total number of points.  The value of npoints\n represents the number of valid points in this Polygon\n and might be less than the number of elements in\n xpoints or ypoints.\n This value can be 0."}, {"field_name": "xpoints", "field_sig": "public\u00a0int[] xpoints", "description": "The array of X coordinates.  The number of elements in\n this array might be more than the number of X coordinates\n in this Polygon.  The extra elements allow new points\n to be added to this Polygon without re-creating this\n array.  The value of npoints is equal to the\n number of valid points in this Polygon."}, {"field_name": "ypoints", "field_sig": "public\u00a0int[] ypoints", "description": "The array of Y coordinates.  The number of elements in\n this array might be more than the number of Y coordinates\n in this Polygon.  The extra elements allow new points\n to be added to this Polygon without re-creating this\n array.  The value of npoints is equal to the\n number of valid points in this Polygon."}, {"field_name": "bounds", "field_sig": "protected\u00a0Rectangle bounds", "description": "The bounds of this Polygon.\n This value can be null."}], "methods": [{"method_name": "reset", "method_sig": "public void reset()", "description": "Resets this Polygon object to an empty polygon.\n The coordinate arrays and the data in them are left untouched\n but the number of points is reset to zero to mark the old\n vertex data as invalid and to start accumulating new vertex\n data at the beginning.\n All internally-cached data relating to the old vertices\n are discarded.\n Note that since the coordinate arrays from before the reset\n are reused, creating a new empty Polygon might\n be more memory efficient than resetting the current one if\n the number of vertices in the new polygon data is significantly\n smaller than the number of vertices in the data from before the\n reset."}, {"method_name": "invalidate", "method_sig": "public void invalidate()", "description": "Invalidates or flushes any internally-cached data that depends\n on the vertex coordinates of this Polygon.\n This method should be called after any direct manipulation\n of the coordinates in the xpoints or\n ypoints arrays to avoid inconsistent results\n from methods such as getBounds or contains\n that might cache data from earlier computations relating to\n the vertex coordinates."}, {"method_name": "translate", "method_sig": "public void translate (int deltaX,\n                      int deltaY)", "description": "Translates the vertices of the Polygon by\n deltaX along the x axis and by\n deltaY along the y axis."}, {"method_name": "addPoint", "method_sig": "public void addPoint (int x,\n                     int y)", "description": "Appends the specified coordinates to this Polygon.\n \n If an operation that calculates the bounding box of this\n Polygon has already been performed, such as\n getBounds or contains, then this\n method updates the bounding box."}, {"method_name": "getBounds", "method_sig": "public Rectangle getBounds()", "description": "Gets the bounding box of this Polygon.\n The bounding box is the smallest Rectangle whose\n sides are parallel to the x and y axes of the\n coordinate space, and can completely contain the Polygon."}, {"method_name": "getBoundingBox", "method_sig": "@Deprecated\npublic Rectangle getBoundingBox()", "description": "Returns the bounds of this Polygon."}, {"method_name": "contains", "method_sig": "public boolean contains (Point p)", "description": "Determines whether the specified Point is inside this\n Polygon."}, {"method_name": "contains", "method_sig": "public boolean contains (int x,\n                        int y)", "description": "Determines whether the specified coordinates are inside this\n Polygon."}, {"method_name": "inside", "method_sig": "@Deprecated\npublic boolean inside (int x,\n                      int y)", "description": "Determines whether the specified coordinates are contained in this\n Polygon."}, {"method_name": "getBounds2D", "method_sig": "public Rectangle2D getBounds2D()", "description": "Returns a high precision and more accurate bounding box of\n the Shape than the getBounds method.\n Note that there is no guarantee that the returned\n Rectangle2D is the smallest bounding box that encloses\n the Shape, only that the Shape lies\n entirely within the indicated Rectangle2D.  The\n bounding box returned by this method is usually tighter than that\n returned by the getBounds method and never fails due\n to overflow problems since the return value can be an instance of\n the Rectangle2D that uses double precision values to\n store the dimensions.\n\n \n Note that the\n \n definition of insideness can lead to situations where points\n on the defining outline of the shape may not be considered\n contained in the returned bounds object, but only in cases\n where those points are also not considered contained in the original\n shape.\n \n\n If a point is inside the shape according to the\n contains(point) method, then it must\n be inside the returned Rectangle2D bounds object according\n to the contains(point) method of the\n bounds. Specifically:\n \n\nshape.contains(p) requires bounds.contains(p)\n\n\n If a point is not inside the shape, then it might\n still be contained in the bounds object:\n \n\nbounds.contains(p) does not imply shape.contains(p)\n"}, {"method_name": "contains", "method_sig": "public boolean contains (double x,\n                        double y)", "description": "Tests if the specified coordinates are inside the boundary of the\n Shape, as described by the\n \n definition of insideness."}, {"method_name": "contains", "method_sig": "public boolean contains (Point2D p)", "description": "Tests if a specified Point2D is inside the boundary\n of the Shape, as described by the\n \n definition of insideness."}, {"method_name": "intersects", "method_sig": "public boolean intersects (double x,\n                          double y,\n                          double w,\n                          double h)", "description": "Tests if the interior of the Shape intersects the\n interior of a specified rectangular area.\n The rectangular area is considered to intersect the Shape\n if any point is contained in both the interior of the\n Shape and the specified rectangular area.\n \n The Shape.intersects() method allows a Shape\n implementation to conservatively return true when:\n \n\n there is a high probability that the rectangular area and the\n Shape intersect, but\n \n the calculations to accurately determine this intersection\n are prohibitively expensive.\n \n This means that for some Shapes this method might\n return true even though the rectangular area does not\n intersect the Shape.\n The Area class performs\n more accurate computations of geometric intersection than most\n Shape objects and therefore can be used if a more precise\n answer is required."}, {"method_name": "intersects", "method_sig": "public boolean intersects (Rectangle2D r)", "description": "Tests if the interior of the Shape intersects the\n interior of a specified Rectangle2D.\n The Shape.intersects() method allows a Shape\n implementation to conservatively return true when:\n \n\n there is a high probability that the Rectangle2D and the\n Shape intersect, but\n \n the calculations to accurately determine this intersection\n are prohibitively expensive.\n \n This means that for some Shapes this method might\n return true even though the Rectangle2D does not\n intersect the Shape.\n The Area class performs\n more accurate computations of geometric intersection than most\n Shape objects and therefore can be used if a more precise\n answer is required."}, {"method_name": "contains", "method_sig": "public boolean contains (double x,\n                        double y,\n                        double w,\n                        double h)", "description": "Tests if the interior of the Shape entirely contains\n the specified rectangular area.  All coordinates that lie inside\n the rectangular area must lie within the Shape for the\n entire rectangular area to be considered contained within the\n Shape.\n \n The Shape.contains() method allows a Shape\n implementation to conservatively return false when:\n \n\n the intersect method returns true and\n \n the calculations to determine whether or not the\n Shape entirely contains the rectangular area are\n prohibitively expensive.\n \n This means that for some Shapes this method might\n return false even though the Shape contains\n the rectangular area.\n The Area class performs\n more accurate geometric computations than most\n Shape objects and therefore can be used if a more precise\n answer is required."}, {"method_name": "contains", "method_sig": "public boolean contains (Rectangle2D r)", "description": "Tests if the interior of the Shape entirely contains the\n specified Rectangle2D.\n The Shape.contains() method allows a Shape\n implementation to conservatively return false when:\n \n\n the intersect method returns true and\n \n the calculations to determine whether or not the\n Shape entirely contains the Rectangle2D\n are prohibitively expensive.\n \n This means that for some Shapes this method might\n return false even though the Shape contains\n the Rectangle2D.\n The Area class performs\n more accurate geometric computations than most\n Shape objects and therefore can be used if a more precise\n answer is required."}, {"method_name": "getPathIterator", "method_sig": "public PathIterator getPathIterator (AffineTransform at)", "description": "Returns an iterator object that iterates along the boundary of this\n Polygon and provides access to the geometry\n of the outline of this Polygon.  An optional\n AffineTransform can be specified so that the coordinates\n returned in the iteration are transformed accordingly."}, {"method_name": "getPathIterator", "method_sig": "public PathIterator getPathIterator (AffineTransform at,\n                                    double flatness)", "description": "Returns an iterator object that iterates along the boundary of\n the Shape and provides access to the geometry of the\n outline of the Shape.  Only SEG_MOVETO, SEG_LINETO, and\n SEG_CLOSE point types are returned by the iterator.\n Since polygons are already flat, the flatness parameter\n is ignored.  An optional AffineTransform can be specified\n in which case the coordinates returned in the iteration are transformed\n accordingly."}]}