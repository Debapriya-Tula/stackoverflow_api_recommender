{"name": "Interface BiPredicate<T,\u200bU>", "module": "java.base", "package": "java.util.function", "text": "Represents a predicate (boolean-valued function) of two arguments.  This is\n the two-arity specialization of Predicate.\n\n This is a functional interface\n whose functional method is test(Object, Object).", "codes": ["@FunctionalInterface\npublic interface BiPredicate<T, U>"], "fields": [], "methods": [{"method_name": "test", "method_sig": "boolean test (T t,\n             U u)", "description": "Evaluates this predicate on the given arguments."}, {"method_name": "and", "method_sig": "default BiPredicate<T, U> and (BiPredicate<? super T, ? super U> other)", "description": "Returns a composed predicate that represents a short-circuiting logical\n AND of this predicate and another.  When evaluating the composed\n predicate, if this predicate is false, then the other\n predicate is not evaluated.\n\n Any exceptions thrown during evaluation of either predicate are relayed\n to the caller; if evaluation of this predicate throws an exception, the\n other predicate will not be evaluated."}, {"method_name": "negate", "method_sig": "default BiPredicate<T, U> negate()", "description": "Returns a predicate that represents the logical negation of this\n predicate."}, {"method_name": "or", "method_sig": "default BiPredicate<T, U> or (BiPredicate<? super T, ? super U> other)", "description": "Returns a composed predicate that represents a short-circuiting logical\n OR of this predicate and another.  When evaluating the composed\n predicate, if this predicate is true, then the other\n predicate is not evaluated.\n\n Any exceptions thrown during evaluation of either predicate are relayed\n to the caller; if evaluation of this predicate throws an exception, the\n other predicate will not be evaluated."}]}