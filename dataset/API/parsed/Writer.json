{"name": "Class Writer", "module": "java.base", "package": "java.io", "text": "Abstract class for writing to character streams.  The only methods that a\n subclass must implement are write(char[], int, int), flush(), and close().\n Most subclasses, however, will override some of the methods defined here in\n order to provide higher efficiency, additional functionality, or both.", "codes": ["public abstract class Writer\nextends Object\nimplements Appendable, Closeable, Flushable"], "fields": [{"field_name": "lock", "field_sig": "protected\u00a0Object lock", "description": "The object used to synchronize operations on this stream.  For\n efficiency, a character-stream object may use an object other than\n itself to protect critical sections.  A subclass should therefore use\n the object in this field rather than this or a synchronized\n method."}], "methods": [{"method_name": "nullWriter", "method_sig": "public static Writer nullWriter()", "description": "Returns a new Writer which discards all characters.  The\n returned stream is initially open.  The stream is closed by calling\n the close() method.  Subsequent calls to close() have\n no effect.\n\n  While the stream is open, the append(char), \n append(CharSequence), append(CharSequence, int, int),\n flush(), write(int), write(char[]), and\n write(char[], int, int) methods do nothing. After the stream\n has been closed, these methods all throw IOException.\n\n  The object used to synchronize operations on the\n returned Writer is not specified."}, {"method_name": "write", "method_sig": "public void write (int c)\n           throws IOException", "description": "Writes a single character.  The character to be written is contained in\n the 16 low-order bits of the given integer value; the 16 high-order bits\n are ignored.\n\n  Subclasses that intend to support efficient single-character output\n should override this method."}, {"method_name": "write", "method_sig": "public void write (char[] cbuf)\n           throws IOException", "description": "Writes an array of characters."}, {"method_name": "write", "method_sig": "public abstract void write (char[] cbuf,\n                           int off,\n                           int len)\n                    throws IOException", "description": "Writes a portion of an array of characters."}, {"method_name": "write", "method_sig": "public void write (String str)\n           throws IOException", "description": "Writes a string."}, {"method_name": "write", "method_sig": "public void write (String str,\n                  int off,\n                  int len)\n           throws IOException", "description": "Writes a portion of a string."}, {"method_name": "append", "method_sig": "public Writer append (CharSequence csq)\n              throws IOException", "description": "Appends the specified character sequence to this writer.\n\n  An invocation of this method of the form out.append(csq)\n behaves in exactly the same way as the invocation\n\n \n     out.write(csq.toString()) \n Depending on the specification of toString for the\n character sequence csq, the entire sequence may not be\n appended. For instance, invoking the toString method of a\n character buffer will return a subsequence whose content depends upon\n the buffer's position and limit."}, {"method_name": "append", "method_sig": "public Writer append (CharSequence csq,\n                     int start,\n                     int end)\n              throws IOException", "description": "Appends a subsequence of the specified character sequence to this writer.\n Appendable.\n\n  An invocation of this method of the form\n out.append(csq, start, end) when csq\n is not null behaves in exactly the\n same way as the invocation\n\n \n     out.write(csq.subSequence(start, end).toString())\n "}, {"method_name": "append", "method_sig": "public Writer append (char c)\n              throws IOException", "description": "Appends the specified character to this writer.\n\n  An invocation of this method of the form out.append(c)\n behaves in exactly the same way as the invocation\n\n \n     out.write(c) "}, {"method_name": "flush", "method_sig": "public abstract void flush()\n                    throws IOException", "description": "Flushes the stream.  If the stream has saved any characters from the\n various write() methods in a buffer, write them immediately to their\n intended destination.  Then, if that destination is another character or\n byte stream, flush it.  Thus one flush() invocation will flush all the\n buffers in a chain of Writers and OutputStreams.\n\n  If the intended destination of this stream is an abstraction provided\n by the underlying operating system, for example a file, then flushing the\n stream guarantees only that bytes previously written to the stream are\n passed to the operating system for writing; it does not guarantee that\n they are actually written to a physical device such as a disk drive."}, {"method_name": "close", "method_sig": "public abstract void close()\n                    throws IOException", "description": "Closes the stream, flushing it first. Once the stream has been closed,\n further write() or flush() invocations will cause an IOException to be\n thrown. Closing a previously closed stream has no effect."}]}