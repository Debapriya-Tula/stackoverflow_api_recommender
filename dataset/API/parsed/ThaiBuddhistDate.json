{"name": "Class ThaiBuddhistDate", "module": "java.base", "package": "java.time.chrono", "text": "A date in the Thai Buddhist calendar system.\n \n This date operates using the Thai Buddhist calendar.\n This calendar system is primarily used in Thailand.\n Dates are aligned such that 2484-01-01 (Buddhist) is 1941-01-01 (ISO).\n\n \n This is a value-based\n class; use of identity-sensitive operations (including reference equality\n (==), identity hash code, or synchronization) on instances of\n ThaiBuddhistDate may have unpredictable results and should be avoided.\n The equals method should be used for comparisons.", "codes": ["public final class ThaiBuddhistDate\nextends Object\nimplements ChronoLocalDate, Serializable"], "fields": [], "methods": [{"method_name": "now", "method_sig": "public static ThaiBuddhistDate now()", "description": "Obtains the current ThaiBuddhistDate from the system clock in the default time-zone.\n \n This will query the system clock in the default\n time-zone to obtain the current date.\n \n Using this method will prevent the ability to use an alternate clock for testing\n because the clock is hard-coded."}, {"method_name": "now", "method_sig": "public static ThaiBuddhistDate now (ZoneId zone)", "description": "Obtains the current ThaiBuddhistDate from the system clock in the specified time-zone.\n \n This will query the system clock to obtain the current date.\n Specifying the time-zone avoids dependence on the default time-zone.\n \n Using this method will prevent the ability to use an alternate clock for testing\n because the clock is hard-coded."}, {"method_name": "now", "method_sig": "public static ThaiBuddhistDate now (Clock clock)", "description": "Obtains the current ThaiBuddhistDate from the specified clock.\n \n This will query the specified clock to obtain the current date - today.\n Using this method allows the use of an alternate clock for testing.\n The alternate clock may be introduced using dependency injection."}, {"method_name": "of", "method_sig": "public static ThaiBuddhistDate of (int prolepticYear,\n                                  int month,\n                                  int dayOfMonth)", "description": "Obtains a ThaiBuddhistDate representing a date in the Thai Buddhist calendar\n system from the proleptic-year, month-of-year and day-of-month fields.\n \n This returns a ThaiBuddhistDate with the specified fields.\n The day must be valid for the year and month, otherwise an exception will be thrown."}, {"method_name": "from", "method_sig": "public static ThaiBuddhistDate from (TemporalAccessor temporal)", "description": "Obtains a ThaiBuddhistDate from a temporal object.\n \n This obtains a date in the Thai Buddhist calendar system based on the specified temporal.\n A TemporalAccessor represents an arbitrary set of date and time information,\n which this factory converts to an instance of ThaiBuddhistDate.\n \n The conversion typically uses the EPOCH_DAY\n field, which is standardized across calendar systems.\n \n This method matches the signature of the functional interface TemporalQuery\n allowing it to be used as a query via method reference, ThaiBuddhistDate::from."}, {"method_name": "getChronology", "method_sig": "public ThaiBuddhistChronology getChronology()", "description": "Gets the chronology of this date, which is the Thai Buddhist calendar system.\n \n The Chronology represents the calendar system in use.\n The era and other fields in ChronoField are defined by the chronology."}, {"method_name": "getEra", "method_sig": "public ThaiBuddhistEra getEra()", "description": "Gets the era applicable at this date.\n \n The Thai Buddhist calendar system has two eras, 'BE' and 'BEFORE_BE',\n defined by ThaiBuddhistEra."}, {"method_name": "lengthOfMonth", "method_sig": "public int lengthOfMonth()", "description": "Returns the length of the month represented by this date.\n \n This returns the length of the month in days.\n Month lengths match those of the ISO calendar system."}, {"method_name": "with", "method_sig": "public ThaiBuddhistDate with (TemporalAdjuster adjuster)", "description": "Returns an adjusted object of the same type as this object with the adjustment made.\n \n This adjusts this date-time according to the rules of the specified adjuster.\n A simple adjuster might simply set the one of the fields, such as the year field.\n A more complex adjuster might set the date to the last day of the month.\n A selection of common adjustments is provided in\n TemporalAdjusters.\n These include finding the \"last day of the month\" and \"next Wednesday\".\n The adjuster is responsible for handling special cases, such as the varying\n lengths of month and leap years.\n \n Some example code indicating how and why this method is used:\n \n  date = date.with(Month.JULY);        // most key classes implement TemporalAdjuster\n  date = date.with(lastDayOfMonth());  // static import from Adjusters\n  date = date.with(next(WEDNESDAY));   // static import from Adjusters and DayOfWeek\n "}, {"method_name": "plus", "method_sig": "public ThaiBuddhistDate plus (TemporalAmount amount)", "description": "Returns an object of the same type as this object with an amount added.\n \n This adjusts this temporal, adding according to the rules of the specified amount.\n The amount is typically a Period but may be any other type implementing\n the TemporalAmount interface, such as Duration.\n \n Some example code indicating how and why this method is used:\n \n  date = date.plus(period);                // add a Period instance\n  date = date.plus(duration);              // add a Duration instance\n  date = date.plus(workingDays(6));        // example user-written workingDays method\n \n\n Note that calling plus followed by minus is not guaranteed to\n return the same date-time."}, {"method_name": "minus", "method_sig": "public ThaiBuddhistDate minus (TemporalAmount amount)", "description": "Returns an object of the same type as this object with an amount subtracted.\n \n This adjusts this temporal, subtracting according to the rules of the specified amount.\n The amount is typically a Period but may be any other type implementing\n the TemporalAmount interface, such as Duration.\n \n Some example code indicating how and why this method is used:\n \n  date = date.minus(period);               // subtract a Period instance\n  date = date.minus(duration);             // subtract a Duration instance\n  date = date.minus(workingDays(6));       // example user-written workingDays method\n \n\n Note that calling plus followed by minus is not guaranteed to\n return the same date-time."}, {"method_name": "equals", "method_sig": "public boolean equals (Object obj)", "description": "Compares this date to another date, including the chronology.\n \n Compares this ThaiBuddhistDate with another ensuring that the date is the same.\n \n Only objects of type ThaiBuddhistDate are compared, other types return false.\n To compare the dates of two TemporalAccessor instances, including dates\n in two different chronologies, use ChronoField.EPOCH_DAY as a comparator."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "A hash code for this date."}, {"method_name": "until", "method_sig": "public long until (Temporal endExclusive,\n                  TemporalUnit unit)", "description": "Description copied from interface:\u00a0ChronoLocalDate"}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Description copied from class:\u00a0Object"}]}