{"name": "Class TableRowSorter<M extends TableModel>", "module": "java.desktop", "package": "javax.swing.table", "text": "An implementation of RowSorter that provides sorting\n and filtering using a TableModel.\n The following example shows adding sorting to a JTable:\n \n   TableModel myModel = createMyTableModel();\n   JTable table = new JTable(myModel);\n   table.setRowSorter(new TableRowSorter(myModel));\n \n This will do all the wiring such that when the user does the appropriate\n gesture, such as clicking on the column header, the table will\n visually sort.\n \nJTable's row-based methods and JTable's\n selection model refer to the view and not the underlying\n model. Therefore, it is necessary to convert between the two.  For\n example, to get the selection in terms of myModel\n you need to convert the indices:\n \n   int[] selection = table.getSelectedRows();\n   for (int i = 0; i < selection.length; i++) {\n     selection[i] = table.convertRowIndexToModel(selection[i]);\n   }\n \n Similarly to select a row in JTable based on\n a coordinate from the underlying model do the inverse:\n \n   table.setRowSelectionInterval(table.convertRowIndexToView(row),\n                                 table.convertRowIndexToView(row));\n \n\n The previous example assumes you have not enabled filtering.  If you\n have enabled filtering convertRowIndexToView will return\n -1 for locations that are not visible in the view.\n \nTableRowSorter uses Comparators for doing\n comparisons. The following defines how a Comparator is\n chosen for a column:\n \nIf a Comparator has been specified for the column by the\n     setComparator method, use it.\n If the column class as returned by getColumnClass is\n     String, use the Comparator returned by\n     Collator.getInstance().\n If the column class implements Comparable, use a\n     Comparator that invokes the compareTo\n     method.\n If a TableStringConverter has been specified, use it\n     to convert the values to Strings and then use the\n     Comparator returned by Collator.getInstance().\n Otherwise use the Comparator returned by\n     Collator.getInstance() on the results from\n     calling toString on the objects.\n \n\n In addition to sorting TableRowSorter provides the ability\n to filter.  A filter is specified using the setFilter\n method. The following example will only show rows containing the string\n \"foo\":\n \n   TableModel myModel = createMyTableModel();\n   TableRowSorter sorter = new TableRowSorter(myModel);\n   sorter.setRowFilter(RowFilter.regexFilter(\".*foo.*\"));\n   JTable table = new JTable(myModel);\n   table.setRowSorter(sorter);\n \n\n If the underlying model structure changes (the\n modelStructureChanged method is invoked) the following\n are reset to their default values: Comparators by\n column, current sort order, and whether each column is sortable. The default\n sort order is natural (the same as the model), and columns are\n sortable by default.\n \nTableRowSorter has one formal type parameter: the type\n of the model.  Passing in a type that corresponds exactly to your\n model allows you to filter based on your model without casting.\n Refer to the documentation of RowFilter for an example\n of this.\n \nWARNING: DefaultTableModel returns a column\n class of Object.  As such all comparisons will\n be done using toString.  This may be unnecessarily\n expensive.  If the column only contains one type of value, such as\n an Integer, you should override getColumnClass and\n return the appropriate Class.  This will dramatically\n increase the performance of this class.", "codes": ["public class TableRowSorter<M extends TableModel>\nextends DefaultRowSorter<M, Integer>"], "fields": [], "methods": [{"method_name": "setModel", "method_sig": "public void setModel (M model)", "description": "Sets the TableModel to use as the underlying model\n for this TableRowSorter.  A value of null\n can be used to set an empty model."}, {"method_name": "setStringConverter", "method_sig": "public void setStringConverter (TableStringConverter stringConverter)", "description": "Sets the object responsible for converting values from the\n model to strings.  If non-null this\n is used to convert any object values, that do not have a\n registered Comparator, to strings."}, {"method_name": "getStringConverter", "method_sig": "public TableStringConverter getStringConverter()", "description": "Returns the object responsible for converting values from the\n model to strings."}, {"method_name": "getComparator", "method_sig": "public Comparator<?> getComparator (int column)", "description": "Returns the Comparator for the specified\n column.  If a Comparator has not been specified using\n the setComparator method a Comparator\n will be returned based on the column class\n (TableModel.getColumnClass) of the specified column.\n If the column class is String,\n Collator.getInstance is returned.  If the\n column class implements Comparable a private\n Comparator is returned that invokes the\n compareTo method.  Otherwise\n Collator.getInstance is returned."}, {"method_name": "useToString", "method_sig": "protected boolean useToString (int column)", "description": "Returns whether or not to convert the value to a string before\n doing comparisons when sorting.  If true\n ModelWrapper.getStringValueAt will be used, otherwise\n ModelWrapper.getValueAt will be used.  It is up to\n subclasses, such as TableRowSorter, to honor this value\n in their ModelWrapper implementation."}]}