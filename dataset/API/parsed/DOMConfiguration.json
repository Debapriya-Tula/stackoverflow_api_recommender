{"name": "Interface DOMConfiguration", "module": "java.xml", "package": "org.w3c.dom", "text": "The DOMConfiguration interface represents the configuration\n of a document and maintains a table of recognized parameters. Using the\n configuration, it is possible to change\n Document.normalizeDocument() behavior, such as replacing the\n CDATASection nodes with Text nodes or\n specifying the type of the schema that must be used when the validation\n of the Document is requested. DOMConfiguration\n objects are also used in [DOM Level 3 Load and Save]\n  in the DOMParser and DOMSerializer interfaces.\n  The parameter names used by the DOMConfiguration object\n are defined throughout the DOM Level 3 specifications. Names are\n case-insensitive. To avoid possible conflicts, as a convention, names\n referring to parameters defined outside the DOM specification should be\n made unique. Because parameters are exposed as properties in names\n are recommended to follow the section 5.16 Identifiers of [Unicode] with the addition of the character '-' (HYPHEN-MINUS) but it is not\n enforced by the DOM implementation. DOM Level 3 Core Implementations are\n required to recognize all parameters defined in this specification. Some\n parameter values may also be required to be supported by the\n implementation. Refer to the definition of the parameter to know if a\n value must be supported or not.\n Note:  Parameters are similar to features and properties used in\n SAX2 [SAX].\n  The following list of parameters defined in the DOM:\n \n\n\"canonical-form\"\n\n\ntrue\n[optional] Canonicalize the document according to the rules specified in [Canonical XML],\n such as removing the DocumentType node (if any) from the\n tree, or removing superfluous namespace declarations from each element.\n Note that this is limited to what can be represented in the DOM; in\n particular, there is no way to specify the order of the attributes in the\n DOM. In addition,  Setting this parameter to true will also\n set the state of the parameters listed below. Later changes to the state\n of one of those parameters will revert \"canonical-form\" back to\n false. Parameters set to false: \"entities\", \"\n normalize-characters\", \"cdata-sections\". Parameters set to\n true: \"namespaces\", \"namespace-declarations\", \"well-formed\",\n \"element-content-whitespace\". Other parameters are not changed unless\n explicitly specified in the description of the parameters.\n\nfalse\n[required] (default)Do not canonicalize the document.\n\n\"cdata-sections\"\n\n\n\ntrue\n[required] (default)Keep CDATASection nodes in the document.\nfalse\n[required]Transform CDATASection nodes in the document into\n Text nodes. The new Text node is then combined\n with any adjacent Text node.\n\n\n\"check-character-normalization\"\n\n\ntrue\n[optional] Check if the characters in the document are fully\n normalized, as defined in appendix B of [XML 1.1]. When a\n sequence of characters is encountered that fails normalization checking,\n an error with the DOMError.type equals to\n \"check-character-normalization-failure\" is issued. \nfalse\n[required] (default)Do not check if characters are normalized.\n\n\"comments\"\n\n\n\ntrue\n[required] (default)Keep Comment nodes in the document.\nfalse\n[required]Discard Comment nodes in the document.\n\n\n\"datatype-normalization\"\n\n\ntrue\n[optional] Expose schema normalized values in the tree, such as XML\n Schema normalized values in the case of XML Schema. Since this parameter requires to have schema\n information, the \"validate\" parameter will also be set to\n true. Having this parameter activated when \"validate\" is\n false has no effect and no schema-normalization will happen.\n Note:  Since the document contains the result of the XML 1.0\n processing, this parameter does not apply to attribute value\n normalization as defined in section 3.3.3 of [XML 1.0] and is only\n meant for schema languages other than Document Type Definition (DTD). \n\nfalse\n[required] (default) Do not perform schema normalization on the tree. \n\n\n\"element-content-whitespace\"\n\n\ntrue\n[required] (default)Keep all whitespaces in the document.\nfalse\n[optional] Discard all Text nodes that contain whitespaces in element\n content, as described in \n [element content whitespace]. The implementation is expected to use the attribute\n Text.isElementContentWhitespace to determine if a\n Text node should be discarded or not.\n\n\"entities\"\n\n\n\ntrue\n[required] (default)Keep EntityReference nodes in the document.\n\nfalse\n[required] Remove all EntityReference nodes from the document,\n putting the entity expansions directly in their place. Text\n nodes are normalized, as defined in Node.normalize. Only \n unexpanded entity references are kept in the document. \n\nNote:  This parameter does not affect Entity nodes. \n\n\"error-handler\"\n[required] Contains a DOMErrorHandler object. If an error is\n encountered in the document, the implementation will call back the\n DOMErrorHandler registered using this parameter. The\n implementation may provide a default DOMErrorHandler object.\n  When called, DOMError.relatedData will contain the closest\n node to where the error occurred. If the implementation is unable to\n determine the node where the error occurs,\n DOMError.relatedData will contain the Document\n node. Mutations to the document from within an error handler will result\n in implementation dependent behavior. \n\"infoset\"\n\n\n\ntrue\n[required]Keep in the document the information defined in the XML Information Set [XML Information Set]\n .This forces the following parameters to false: \"\n validate-if-schema\", \"entities\", \"datatype-normalization\", \"cdata-sections\n \".This forces the following parameters to true: \"\n namespace-declarations\", \"well-formed\", \"element-content-whitespace\", \"\n comments\", \"namespaces\".Other parameters are not changed unless\n explicitly specified in the description of the parameters. Note that\n querying this parameter with getParameter returns\n true only if the individual parameters specified above are\n appropriately set.\nfalse\nSetting infoset to\n false has no effect.\n\n\"namespaces\"\n\n\n\ntrue\n[required] (default) Perform the namespace processing as defined in . \nfalse\n[optional] Do not perform the namespace processing. \n\n\n\"namespace-declarations\"\n This parameter has no effect if the\n parameter \"namespaces\" is set to false.\n \ntrue\n[required] (default) Include namespace declaration attributes, specified or defaulted from\n the schema, in the document. See also the sections \"Declaring Namespaces\"\n in [XML Namespaces]\n  and [XML Namespaces 1.1]\n .\nfalse\n[required]Discard all namespace declaration attributes. The namespace prefixes (\n Node.prefix) are retained even if this parameter is set to\n false.\n\n\"normalize-characters\"\n\n\ntrue\n[optional] Fully\n normalized the characters in the document as defined in appendix B of [XML 1.1]. \n\nfalse\n[required] (default)Do not perform character normalization.\n\n\"schema-location\"\n[optional] Represent a DOMString object containing a list of URIs,\n separated by whitespaces (characters matching the nonterminal\n production S defined in section 2.3 [XML 1.0]), that\n represents the schemas against which validation should occur, i.e. the\n current schema. The types of schemas referenced in this list must match\n the type specified with schema-type, otherwise the behavior\n of an implementation is undefined.  The schemas specified using this\n property take precedence to the schema information specified in the\n document itself. For namespace aware schema, if a schema specified using\n this property and a schema specified in the document instance (i.e. using\n the schemaLocation attribute) in a schema document (i.e.\n using schema import mechanisms) share the same\n targetNamespace, the schema specified by the user using this\n property will be used. If two schemas specified using this property share\n the same targetNamespace or have no namespace, the behavior\n is implementation dependent.  If no location has been provided, this\n parameter is null.\n Note:  The \"schema-location\" parameter is ignored\n unless the \"schema-type\" parameter value is set. It is strongly\n recommended that Document.documentURI will be set so that an\n implementation can successfully resolve any external entities referenced. \n\n\"schema-type\"\n[optional] Represent a DOMString object containing an absolute URI\n and representing the type of the schema language used to validate a\n document against. Note that no lexical checking is done on the absolute\n URI.  If this parameter is not set, a default value may be provided by\n the implementation, based on the schema languages supported and on the\n schema language used at load time. If no value is provided, this\n parameter is null.\n Note:  For XML Schema [XML Schema Part 1]\n , applications must use the value\n \"http://www.w3.org/2001/XMLSchema\". For XML DTD [XML 1.0],\n applications must use the value\n \"http://www.w3.org/TR/REC-xml\". Other schema languages are\n outside the scope of the W3C and therefore should recommend an absolute\n URI in order to use this method. \n\"split-cdata-sections\"\n\n\n\ntrue\n[required] (default)Split CDATA sections containing the CDATA section termination marker\n ']]>'. When a CDATA section is split a warning is issued with a\n DOMError.type equals to\n \"cdata-sections-splitted\" and\n DOMError.relatedData equals to the first\n CDATASection node in document order resulting from the split.\n\nfalse\n[required]Signal an error if a CDATASection contains an\n unrepresentable character.\n\n\"validate\"\n\n\ntrue\n[optional] Require the validation against a schema (i.e. XML schema, DTD, any\n other type or representation of schema) of the document as it is being\n normalized as defined by [XML 1.0]. If\n validation errors are found, or no schema was found, the error handler is\n notified. Schema-normalized values will not be exposed according to the\n schema in used unless the parameter \"datatype-normalization\" is\n true.  This parameter will reevaluate:\n \n Attribute nodes with\n Attr.specified equals to false, as specified in\n the description of the Attr interface;\n \n The value of the\n attribute Text.isElementContentWhitespace for all\n Text nodes;\n \n The value of the attribute\n Attr.isId for all Attr nodes;\n \n The attributes\n Element.schemaTypeInfo and Attr.schemaTypeInfo.\n \n\nNote:  \"validate-if-schema\" and \"validate\" are mutually\n exclusive, setting one of them to true will set the other\n one to false. Applications should also consider setting the\n parameter \"well-formed\" to true, which is the default for\n that option, when validating the document. \nfalse\n[required] (default) Do not accomplish schema processing, including the internal subset\n processing. Default attribute values information are kept. Note that\n validation might still happen if \"validate-if-schema\" is true\n . \n\n\"validate-if-schema\"\n\n\ntrue\n[optional]Enable validation only if a declaration for the document element can be\n found in a schema (independently of where it is found, i.e. XML schema,\n DTD, or any other type or representation of schema). If validation is\n enabled, this parameter has the same behavior as the parameter \"validate\"\n set to true.\n Note:  \"validate-if-schema\" and \"validate\" are mutually\n exclusive, setting one of them to true will set the other\n one to false. \nfalse\n[required] (default) No schema processing should be performed if the document has a schema,\n including internal subset processing. Default attribute values\n information are kept. Note that validation must still happen if \"validate\n \" is true. \n\n\"well-formed\"\n\n\ntrue\n[required] (default) Check if all nodes are XML well formed according to the XML version in\n use in Document.xmlVersion:\n \n check if the attribute\n Node.nodeName contains invalid characters according to its\n node type and generate a DOMError of type\n \"wf-invalid-character-in-node-name\", with a\n DOMError.SEVERITY_ERROR severity, if necessary;\n \n check if\n the text content inside Attr, Element,\n Comment, Text, CDATASection nodes\n for invalid characters and generate a DOMError of type\n \"wf-invalid-character\", with a\n DOMError.SEVERITY_ERROR severity, if necessary;\n \n check if\n the data inside ProcessingInstruction nodes for invalid\n characters and generate a DOMError of type\n \"wf-invalid-character\", with a\n DOMError.SEVERITY_ERROR severity, if necessary;\n \n\n\nfalse\n[optional] Do not check for XML well-formedness. \n\n\n The resolution of the system identifiers associated with entities is\n done using Document.documentURI. However, when the feature\n \"LS\" defined in [DOM Level 3 Load and Save]\n  is supported by the DOM implementation, the parameter\n \"resource-resolver\" can also be used on DOMConfiguration\n objects attached to Document nodes. If this parameter is\n set, Document.normalizeDocument() will invoke the resource\n resolver instead of using Document.documentURI.\n See also the Document Object Model (DOM) Level 3 Core Specification.", "codes": ["public interface DOMConfiguration"], "fields": [], "methods": [{"method_name": "setParameter", "method_sig": "void setParameter (String name,\n                  Object value)\n           throws DOMException", "description": "Set the value of a parameter."}, {"method_name": "getParameter", "method_sig": "Object getParameter (String name)\n             throws DOMException", "description": "Return the value of a parameter if known."}, {"method_name": "canSetParameter", "method_sig": "boolean canSetParameter (String name,\n                        Object value)", "description": "Check if setting a parameter to a specific value is supported."}, {"method_name": "getParameterNames", "method_sig": "DOMStringList getParameterNames()", "description": "The list of the parameters supported by this\n DOMConfiguration object and for which at least one value\n can be set by the application. Note that this list can also contain\n parameter names defined outside this specification."}]}