{"name": "Class SerializablePermission", "module": "java.base", "package": "java.io", "text": "This class is for Serializable permissions. A SerializablePermission\n contains a name (also referred to as a \"target name\") but\n no actions list; you either have the named permission\n or you don't.\n\n \n The target name is the name of the Serializable permission (see below).\n\n \n The following table lists the standard SerializablePermission target names,\n and for each provides a description of what the permission allows\n and a discussion of the risks of granting code the permission.\n\n \nPermission target name, what the permission allows, and associated risks\n\n\nPermission Target Name\nWhat the Permission Allows\nRisks of Allowing this Permission\n\n\n\n\nenableSubclassImplementation\nSubclass implementation of ObjectOutputStream or ObjectInputStream\n to override the default serialization or deserialization, respectively,\n of objects\nCode can use this to serialize or\n deserialize classes in a purposefully malfeasant manner. For example,\n during serialization, malicious code can use this to\n purposefully store confidential private field data in a way easily accessible\n to attackers. Or, during deserialization it could, for example, deserialize\n a class with all its private fields zeroed out.\n\n\nenableSubstitution\nSubstitution of one object for another during\n serialization or deserialization\nThis is dangerous because malicious code\n can replace the actual object with one which has incorrect or\n malignant data.\n\n\nserialFilter\nSetting a filter for ObjectInputStreams.\nCode could remove a configured filter and remove protections\n       already established.\n\n\n", "codes": ["public final class SerializablePermission\nextends BasicPermission"], "fields": [], "methods": []}