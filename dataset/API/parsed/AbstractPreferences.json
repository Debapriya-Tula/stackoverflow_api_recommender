{"name": "Class AbstractPreferences", "module": "java.prefs", "package": "java.util.prefs", "text": "This class provides a skeletal implementation of the Preferences\n class, greatly easing the task of implementing it.\n\n This class is for Preferences implementers only.\n Normal users of the Preferences facility should have no need to\n consult this documentation.  The Preferences documentation\n should suffice.\nImplementors must override the nine abstract service-provider interface\n (SPI) methods: getSpi(String), putSpi(String,String),\n removeSpi(String), childSpi(String), removeNodeSpi(), keysSpi(), childrenNamesSpi(), syncSpi() and flushSpi().  All of the concrete methods specify\n precisely how they are implemented atop these SPI methods.  The implementor\n may, at his discretion, override one or more of the concrete methods if the\n default implementation is unsatisfactory for any reason, such as\n performance.\n\n The SPI methods fall into three groups concerning exception\n behavior. The getSpi method should never throw exceptions, but it\n doesn't really matter, as any exception thrown by this method will be\n intercepted by get(String,String), which will return the specified\n default value to the caller.  The removeNodeSpi, keysSpi,\n childrenNamesSpi, syncSpi and flushSpi methods are specified\n to throw BackingStoreException, and the implementation is required\n to throw this checked exception if it is unable to perform the operation.\n The exception propagates outward, causing the corresponding API method\n to fail.\n\n The remaining SPI methods putSpi(String,String), removeSpi(String) and childSpi(String) have more complicated\n exception behavior.  They are not specified to throw\n BackingStoreException, as they can generally obey their contracts\n even if the backing store is unavailable.  This is true because they return\n no information and their effects are not required to become permanent until\n a subsequent call to Preferences.flush() or\n Preferences.sync(). Generally speaking, these SPI methods should not\n throw exceptions.  In some implementations, there may be circumstances\n under which these calls cannot even enqueue the requested operation for\n later processing.  Even under these circumstances it is generally better to\n simply ignore the invocation and return, rather than throwing an\n exception.  Under these circumstances, however, subsequently invoking\n flush() or sync would not imply that all previous\n operations had successfully been made permanent.\n\n There is one circumstance under which putSpi, removeSpi and\n childSpi should throw an exception: if the caller lacks\n sufficient privileges on the underlying operating system to perform the\n requested operation.  This will, for instance, occur on most systems\n if a non-privileged user attempts to modify system preferences.\n (The required privileges will vary from implementation to\n implementation.  On some implementations, they are the right to modify the\n contents of some directory in the file system; on others they are the right\n to modify contents of some key in a registry.)  Under any of these\n circumstances, it would generally be undesirable to let the program\n continue executing as if these operations would become permanent at a later\n time.  While implementations are not required to throw an exception under\n these circumstances, they are encouraged to do so.  A SecurityException would be appropriate.\n\n Most of the SPI methods require the implementation to read or write\n information at a preferences node.  The implementor should beware of the\n fact that another VM may have concurrently deleted this node from the\n backing store.  It is the implementation's responsibility to recreate the\n node if it has been deleted.\n\n Implementation note: In Sun's default Preferences\n implementations, the user's identity is inherited from the underlying\n operating system and does not change for the lifetime of the virtual\n machine.  It is recognized that server-side Preferences\n implementations may have the user identity change from request to request,\n implicitly passed to Preferences methods via the use of a\n static ThreadLocal instance.  Authors of such implementations are\n strongly encouraged to determine the user at the time preferences\n are accessed (for example by the get(String,String) or put(String,String) method) rather than permanently associating a user\n with each Preferences instance.  The latter behavior conflicts\n with normal Preferences usage and would lead to great confusion.", "codes": ["public abstract class AbstractPreferences\nextends Preferences"], "fields": [{"field_name": "newNode", "field_sig": "protected\u00a0boolean newNode", "description": "This field should be true if this node did not exist in the\n backing store prior to the creation of this object.  The field\n is initialized to false, but may be set to true by a subclass\n constructor (and should not be modified thereafter).  This field\n indicates whether a node change event should be fired when\n creation is complete."}, {"field_name": "lock", "field_sig": "protected final\u00a0Object lock", "description": "An object whose monitor is used to lock this node.  This object\n is used in preference to the node itself to reduce the likelihood of\n intentional or unintentional denial of service due to a locked node.\n To avoid deadlock, a node is never locked by a thread that\n holds a lock on a descendant of that node."}], "methods": [{"method_name": "put", "method_sig": "public void put (String key,\n                String value)", "description": "Implements the put method as per the specification in\n Preferences.put(String,String).\n\n This implementation checks that the key and value are legal,\n obtains this preference node's lock, checks that the node\n has not been removed, invokes putSpi(String,String), and if\n there are any preference change listeners, enqueues a notification\n event for processing by the event dispatch thread."}, {"method_name": "get", "method_sig": "public String get (String key,\n                  String def)", "description": "Implements the get method as per the specification in\n Preferences.get(String,String).\n\n This implementation first checks to see if key is\n null throwing a NullPointerException if this is\n the case.  Then it obtains this preference node's lock,\n checks that the node has not been removed, invokes getSpi(String), and returns the result, unless the getSpi\n invocation returns null or throws an exception, in which case\n this invocation returns def."}, {"method_name": "remove", "method_sig": "public void remove (String key)", "description": "Implements the remove(String) method as per the specification\n in Preferences.remove(String).\n\n This implementation obtains this preference node's lock,\n checks that the node has not been removed, invokes\n removeSpi(String) and if there are any preference\n change listeners, enqueues a notification event for processing by the\n event dispatch thread."}, {"method_name": "clear", "method_sig": "public void clear()\n           throws BackingStoreException", "description": "Implements the clear method as per the specification in\n Preferences.clear().\n\n This implementation obtains this preference node's lock,\n invokes keys() to obtain an array of keys, and\n iterates over the array invoking remove(String) on each key."}, {"method_name": "putInt", "method_sig": "public void putInt (String key,\n                   int value)", "description": "Implements the putInt method as per the specification in\n Preferences.putInt(String,int).\n\n This implementation translates value to a string with\n Integer.toString(int) and invokes put(String,String)\n on the result."}, {"method_name": "getInt", "method_sig": "public int getInt (String key,\n                  int def)", "description": "Implements the getInt method as per the specification in\n Preferences.getInt(String,int).\n\n This implementation invokes get(key,\n null).  If the return value is non-null, the implementation\n attempts to translate it to an int with\n Integer.parseInt(String).  If the attempt succeeds, the return\n value is returned by this method.  Otherwise, def is returned."}, {"method_name": "putLong", "method_sig": "public void putLong (String key,\n                    long value)", "description": "Implements the putLong method as per the specification in\n Preferences.putLong(String,long).\n\n This implementation translates value to a string with\n Long.toString(long) and invokes put(String,String)\n on the result."}, {"method_name": "getLong", "method_sig": "public long getLong (String key,\n                    long def)", "description": "Implements the getLong method as per the specification in\n Preferences.getLong(String,long).\n\n This implementation invokes get(key,\n null).  If the return value is non-null, the implementation\n attempts to translate it to a long with\n Long.parseLong(String).  If the attempt succeeds, the return\n value is returned by this method.  Otherwise, def is returned."}, {"method_name": "putBoolean", "method_sig": "public void putBoolean (String key,\n                       boolean value)", "description": "Implements the putBoolean method as per the specification in\n Preferences.putBoolean(String,boolean).\n\n This implementation translates value to a string with\n String.valueOf(boolean) and invokes put(String,String)\n on the result."}, {"method_name": "getBoolean", "method_sig": "public boolean getBoolean (String key,\n                          boolean def)", "description": "Implements the getBoolean method as per the specification in\n Preferences.getBoolean(String,boolean).\n\n This implementation invokes get(key,\n null).  If the return value is non-null, it is compared with\n \"true\" using String.equalsIgnoreCase(String).  If the\n comparison returns true, this invocation returns\n true.  Otherwise, the original return value is compared with\n \"false\", again using String.equalsIgnoreCase(String).\n If the comparison returns true, this invocation returns\n false.  Otherwise, this invocation returns def."}, {"method_name": "putFloat", "method_sig": "public void putFloat (String key,\n                     float value)", "description": "Implements the putFloat method as per the specification in\n Preferences.putFloat(String,float).\n\n This implementation translates value to a string with\n Float.toString(float) and invokes put(String,String)\n on the result."}, {"method_name": "getFloat", "method_sig": "public float getFloat (String key,\n                      float def)", "description": "Implements the getFloat method as per the specification in\n Preferences.getFloat(String,float).\n\n This implementation invokes get(key,\n null).  If the return value is non-null, the implementation\n attempts to translate it to an float with\n Float.parseFloat(String).  If the attempt succeeds, the return\n value is returned by this method.  Otherwise, def is returned."}, {"method_name": "putDouble", "method_sig": "public void putDouble (String key,\n                      double value)", "description": "Implements the putDouble method as per the specification in\n Preferences.putDouble(String,double).\n\n This implementation translates value to a string with\n Double.toString(double) and invokes put(String,String)\n on the result."}, {"method_name": "getDouble", "method_sig": "public double getDouble (String key,\n                        double def)", "description": "Implements the getDouble method as per the specification in\n Preferences.getDouble(String,double).\n\n This implementation invokes get(key,\n null).  If the return value is non-null, the implementation\n attempts to translate it to an double with\n Double.parseDouble(String).  If the attempt succeeds, the return\n value is returned by this method.  Otherwise, def is returned."}, {"method_name": "putByteArray", "method_sig": "public void putByteArray (String key,\n                         byte[] value)", "description": "Implements the putByteArray method as per the specification in\n Preferences.putByteArray(String,byte[])."}, {"method_name": "getByteArray", "method_sig": "public byte[] getByteArray (String key,\n                           byte[] def)", "description": "Implements the getByteArray method as per the specification in\n Preferences.getByteArray(String,byte[])."}, {"method_name": "keys", "method_sig": "public String[] keys()\n              throws BackingStoreException", "description": "Implements the keys method as per the specification in\n Preferences.keys().\n\n This implementation obtains this preference node's lock, checks that\n the node has not been removed and invokes keysSpi()."}, {"method_name": "childrenNames", "method_sig": "public String[] childrenNames()\n                       throws BackingStoreException", "description": "Implements the children method as per the specification in\n Preferences.childrenNames().\n\n This implementation obtains this preference node's lock, checks that\n the node has not been removed, constructs a TreeSet initialized\n to the names of children already cached (the children in this node's\n \"child-cache\"), invokes childrenNamesSpi(), and adds all of the\n returned child-names into the set.  The elements of the tree set are\n dumped into a String array using the toArray method,\n and this array is returned."}, {"method_name": "cachedChildren", "method_sig": "protected final AbstractPreferences[] cachedChildren()", "description": "Returns all known unremoved children of this node."}, {"method_name": "parent", "method_sig": "public Preferences parent()", "description": "Implements the parent method as per the specification in\n Preferences.parent().\n\n This implementation obtains this preference node's lock, checks that\n the node has not been removed and returns the parent value that was\n passed to this node's constructor."}, {"method_name": "node", "method_sig": "public Preferences node (String path)", "description": "Implements the node method as per the specification in\n Preferences.node(String).\n\n This implementation obtains this preference node's lock and checks\n that the node has not been removed.  If path is \"\",\n this node is returned; if path is \"/\", this node's\n root is returned.  If the first character in path is\n not '/', the implementation breaks path into\n tokens and recursively traverses the path from this node to the\n named node, \"consuming\" a name and a slash from path at\n each step of the traversal.  At each step, the current node is locked\n and the node's child-cache is checked for the named node.  If it is\n not found, the name is checked to make sure its length does not\n exceed MAX_NAME_LENGTH.  Then the childSpi(String)\n method is invoked, and the result stored in this node's child-cache.\n If the newly created Preferences object's newNode\n field is true and there are any node change listeners,\n a notification event is enqueued for processing by the event dispatch\n thread.\n\n When there are no more tokens, the last value found in the\n child-cache or returned by childSpi is returned by this\n method.  If during the traversal, two \"/\" tokens occur\n consecutively, or the final token is \"/\" (rather than a name),\n an appropriate IllegalArgumentException is thrown.\n\n  If the first character of path is '/'\n (indicating an absolute path name) this preference node's\n lock is dropped prior to breaking path into tokens, and\n this method recursively traverses the path starting from the root\n (rather than starting from this node).  The traversal is otherwise\n identical to the one described for relative path names.  Dropping\n the lock on this node prior to commencing the traversal at the root\n node is essential to avoid the possibility of deadlock, as per the\n locking invariant."}, {"method_name": "nodeExists", "method_sig": "public boolean nodeExists (String path)\n                   throws BackingStoreException", "description": "Implements the nodeExists method as per the specification in\n Preferences.nodeExists(String).\n\n This implementation is very similar to node(String),\n except that getChild(String) is used instead of childSpi(String)."}, {"method_name": "removeNode", "method_sig": "public void removeNode()\n                throws BackingStoreException", "description": "Implements the removeNode() method as per the specification in\n Preferences.removeNode().\n\n This implementation checks to see that this node is the root; if so,\n it throws an appropriate exception.  Then, it locks this node's parent,\n and calls a recursive helper method that traverses the subtree rooted at\n this node.  The recursive method locks the node on which it was called,\n checks that it has not already been removed, and then ensures that all\n of its children are cached: The childrenNamesSpi() method is\n invoked and each returned child name is checked for containment in the\n child-cache.  If a child is not already cached, the childSpi(String) method is invoked to create a Preferences\n instance for it, and this instance is put into the child-cache.  Then\n the helper method calls itself recursively on each node contained in its\n child-cache.  Next, it invokes removeNodeSpi(), marks itself\n as removed, and removes itself from its parent's child-cache.  Finally,\n if there are any node change listeners, it enqueues a notification\n event for processing by the event dispatch thread.\n\n Note that the helper method is always invoked with all ancestors up\n to the \"closest non-removed ancestor\" locked."}, {"method_name": "name", "method_sig": "public String name()", "description": "Implements the name method as per the specification in\n Preferences.name().\n\n This implementation merely returns the name that was\n passed to this node's constructor."}, {"method_name": "absolutePath", "method_sig": "public String absolutePath()", "description": "Implements the absolutePath method as per the specification in\n Preferences.absolutePath().\n\n This implementation merely returns the absolute path name that\n was computed at the time that this node was constructed (based on\n the name that was passed to this node's constructor, and the names\n that were passed to this node's ancestors' constructors)."}, {"method_name": "isUserNode", "method_sig": "public boolean isUserNode()", "description": "Implements the isUserNode method as per the specification in\n Preferences.isUserNode().\n\n This implementation compares this node's root node (which is stored\n in a private field) with the value returned by\n Preferences.userRoot().  If the two object references are\n identical, this method returns true."}, {"method_name": "putSpi", "method_sig": "protected abstract void putSpi (String key,\n                               String value)", "description": "Put the given key-value association into this preference node.  It is\n guaranteed that key and value are non-null and of\n legal length.  Also, it is guaranteed that this node has not been\n removed.  (The implementor needn't check for any of these things.)\n\n This method is invoked with the lock on this node held."}, {"method_name": "getSpi", "method_sig": "protected abstract String getSpi (String key)", "description": "Return the value associated with the specified key at this preference\n node, or null if there is no association for this key, or the\n association cannot be determined at this time.  It is guaranteed that\n key is non-null.  Also, it is guaranteed that this node has\n not been removed.  (The implementor needn't check for either of these\n things.)\n\n  Generally speaking, this method should not throw an exception\n under any circumstances.  If, however, if it does throw an exception,\n the exception will be intercepted and treated as a null\n return value.\n\n This method is invoked with the lock on this node held."}, {"method_name": "removeSpi", "method_sig": "protected abstract void removeSpi (String key)", "description": "Remove the association (if any) for the specified key at this\n preference node.  It is guaranteed that key is non-null.\n Also, it is guaranteed that this node has not been removed.\n (The implementor needn't check for either of these things.)\n\n This method is invoked with the lock on this node held."}, {"method_name": "removeNodeSpi", "method_sig": "protected abstract void removeNodeSpi()\n                               throws BackingStoreException", "description": "Removes this preference node, invalidating it and any preferences that\n it contains.  The named child will have no descendants at the time this\n invocation is made (i.e., the Preferences.removeNode() method\n invokes this method repeatedly in a bottom-up fashion, removing each of\n a node's descendants before removing the node itself).\n\n This method is invoked with the lock held on this node and its\n parent (and all ancestors that are being removed as a\n result of a single invocation to Preferences.removeNode()).\n\n The removal of a node needn't become persistent until the\n flush method is invoked on this node (or an ancestor).\n\n If this node throws a BackingStoreException, the exception\n will propagate out beyond the enclosing removeNode()\n invocation."}, {"method_name": "keysSpi", "method_sig": "protected abstract String[] keysSpi()\n                             throws BackingStoreException", "description": "Returns all of the keys that have an associated value in this\n preference node.  (The returned array will be of size zero if\n this node has no preferences.)  It is guaranteed that this node has not\n been removed.\n\n This method is invoked with the lock on this node held.\n\n If this node throws a BackingStoreException, the exception\n will propagate out beyond the enclosing keys() invocation."}, {"method_name": "childrenNamesSpi", "method_sig": "protected abstract String[] childrenNamesSpi()\n                                      throws BackingStoreException", "description": "Returns the names of the children of this preference node.  (The\n returned array will be of size zero if this node has no children.)\n This method need not return the names of any nodes already cached,\n but may do so without harm.\n\n This method is invoked with the lock on this node held.\n\n If this node throws a BackingStoreException, the exception\n will propagate out beyond the enclosing childrenNames()\n invocation."}, {"method_name": "getChild", "method_sig": "protected AbstractPreferences getChild (String nodeName)\n                                throws BackingStoreException", "description": "Returns the named child if it exists, or null if it does not.\n It is guaranteed that nodeName is non-null, non-empty,\n does not contain the slash character ('/'), and is no longer than\n Preferences.MAX_NAME_LENGTH characters.  Also, it is guaranteed\n that this node has not been removed.  (The implementor needn't check\n for any of these things if he chooses to override this method.)\n\n Finally, it is guaranteed that the named node has not been returned\n by a previous invocation of this method or childSpi(java.lang.String) after the\n last time that it was removed.  In other words, a cached value will\n always be used in preference to invoking this method.  (The implementor\n needn't maintain his own cache of previously returned children if he\n chooses to override this method.)\n\n This implementation obtains this preference node's lock, invokes\n childrenNames() to get an array of the names of this node's\n children, and iterates over the array comparing the name of each child\n with the specified node name.  If a child node has the correct name,\n the childSpi(String) method is invoked and the resulting\n node is returned.  If the iteration completes without finding the\n specified name, null is returned."}, {"method_name": "childSpi", "method_sig": "protected abstract AbstractPreferences childSpi (String name)", "description": "Returns the named child of this preference node, creating it if it does\n not already exist.  It is guaranteed that name is non-null,\n non-empty, does not contain the slash character ('/'), and is no longer\n than Preferences.MAX_NAME_LENGTH characters.  Also, it is guaranteed that\n this node has not been removed.  (The implementor needn't check for any\n of these things.)\n\n Finally, it is guaranteed that the named node has not been returned\n by a previous invocation of this method or getChild(String)\n after the last time that it was removed.  In other words, a cached\n value will always be used in preference to invoking this method.\n Subclasses need not maintain their own cache of previously returned\n children.\n\n The implementer must ensure that the returned node has not been\n removed.  If a like-named child of this node was previously removed, the\n implementer must return a newly constructed AbstractPreferences\n node; once removed, an AbstractPreferences node\n cannot be \"resuscitated.\"\n\n If this method causes a node to be created, this node is not\n guaranteed to be persistent until the flush method is\n invoked on this node or one of its ancestors (or descendants).\n\n This method is invoked with the lock on this node held."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns the absolute path name of this preferences node."}, {"method_name": "sync", "method_sig": "public void sync()\n          throws BackingStoreException", "description": "Implements the sync method as per the specification in\n Preferences.sync().\n\n This implementation calls a recursive helper method that locks this\n node, invokes syncSpi() on it, unlocks this node, and recursively\n invokes this method on each \"cached child.\"  A cached child is a child\n of this node that has been created in this VM and not subsequently\n removed.  In effect, this method does a depth first traversal of the\n \"cached subtree\" rooted at this node, calling syncSpi() on each node in\n the subTree while only that node is locked. Note that syncSpi() is\n invoked top-down."}, {"method_name": "syncSpi", "method_sig": "protected abstract void syncSpi()\n                         throws BackingStoreException", "description": "This method is invoked with this node locked.  The contract of this\n method is to synchronize any cached preferences stored at this node\n with any stored in the backing store.  (It is perfectly possible that\n this node does not exist on the backing store, either because it has\n been deleted by another VM, or because it has not yet been created.)\n Note that this method should not synchronize the preferences in\n any subnodes of this node.  If the backing store naturally syncs an\n entire subtree at once, the implementer is encouraged to override\n sync(), rather than merely overriding this method.\n\n If this node throws a BackingStoreException, the exception\n will propagate out beyond the enclosing sync() invocation."}, {"method_name": "flush", "method_sig": "public void flush()\n           throws BackingStoreException", "description": "Implements the flush method as per the specification in\n Preferences.flush().\n\n This implementation calls a recursive helper method that locks this\n node, invokes flushSpi() on it, unlocks this node, and recursively\n invokes this method on each \"cached child.\"  A cached child is a child\n of this node that has been created in this VM and not subsequently\n removed.  In effect, this method does a depth first traversal of the\n \"cached subtree\" rooted at this node, calling flushSpi() on each node in\n the subTree while only that node is locked. Note that flushSpi() is\n invoked top-down.\n\n  If this method is invoked on a node that has been removed with\n the removeNode() method, flushSpi() is invoked on this node,\n but not on others."}, {"method_name": "flushSpi", "method_sig": "protected abstract void flushSpi()\n                          throws BackingStoreException", "description": "This method is invoked with this node locked.  The contract of this\n method is to force any cached changes in the contents of this\n preference node to the backing store, guaranteeing their persistence.\n (It is perfectly possible that this node does not exist on the backing\n store, either because it has been deleted by another VM, or because it\n has not yet been created.)  Note that this method should not\n flush the preferences in any subnodes of this node.  If the backing\n store naturally flushes an entire subtree at once, the implementer is\n encouraged to override flush(), rather than merely overriding this\n method.\n\n If this node throws a BackingStoreException, the exception\n will propagate out beyond the enclosing flush() invocation."}, {"method_name": "isRemoved", "method_sig": "protected boolean isRemoved()", "description": "Returns true iff this node (or an ancestor) has been\n removed with the removeNode() method.  This method\n locks this node prior to returning the contents of the private\n field used to track this state."}, {"method_name": "exportNode", "method_sig": "public void exportNode (OutputStream os)\n                throws IOException,\n                       BackingStoreException", "description": "Implements the exportNode method as per the specification in\n Preferences.exportNode(OutputStream)."}, {"method_name": "exportSubtree", "method_sig": "public void exportSubtree (OutputStream os)\n                   throws IOException,\n                          BackingStoreException", "description": "Implements the exportSubtree method as per the specification in\n Preferences.exportSubtree(OutputStream)."}]}