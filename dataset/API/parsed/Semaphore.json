{"name": "Class Semaphore", "module": "java.base", "package": "java.util.concurrent", "text": "A counting semaphore.  Conceptually, a semaphore maintains a set of\n permits.  Each acquire() blocks if necessary until a permit is\n available, and then takes it.  Each release() adds a permit,\n potentially releasing a blocking acquirer.\n However, no actual permit objects are used; the Semaphore just\n keeps a count of the number available and acts accordingly.\n\n Semaphores are often used to restrict the number of threads than can\n access some (physical or logical) resource. For example, here is\n a class that uses a semaphore to control access to a pool of items:\n  \n class Pool {\n   private static final int MAX_AVAILABLE = 100;\n   private final Semaphore available = new Semaphore(MAX_AVAILABLE, true);\n\n   public Object getItem() throws InterruptedException {\n     available.acquire();\n     return getNextAvailableItem();\n   }\n\n   public void putItem(Object x) {\n     if (markAsUnused(x))\n       available.release();\n   }\n\n   // Not a particularly efficient data structure; just for demo\n\n   protected Object[] items = ... whatever kinds of items being managed\n   protected boolean[] used = new boolean[MAX_AVAILABLE];\n\n   protected synchronized Object getNextAvailableItem() {\n     for (int i = 0; i < MAX_AVAILABLE; ++i) {\n       if (!used[i]) {\n         used[i] = true;\n         return items[i];\n       }\n     }\n     return null; // not reached\n   }\n\n   protected synchronized boolean markAsUnused(Object item) {\n     for (int i = 0; i < MAX_AVAILABLE; ++i) {\n       if (item == items[i]) {\n         if (used[i]) {\n           used[i] = false;\n           return true;\n         } else\n           return false;\n       }\n     }\n     return false;\n   }\n }\nBefore obtaining an item each thread must acquire a permit from\n the semaphore, guaranteeing that an item is available for use. When\n the thread has finished with the item it is returned back to the\n pool and a permit is returned to the semaphore, allowing another\n thread to acquire that item.  Note that no synchronization lock is\n held when acquire() is called as that would prevent an item\n from being returned to the pool.  The semaphore encapsulates the\n synchronization needed to restrict access to the pool, separately\n from any synchronization needed to maintain the consistency of the\n pool itself.\n\n A semaphore initialized to one, and which is used such that it\n only has at most one permit available, can serve as a mutual\n exclusion lock.  This is more commonly known as a binary\n semaphore, because it only has two states: one permit\n available, or zero permits available.  When used in this way, the\n binary semaphore has the property (unlike many Lock\n implementations), that the \"lock\" can be released by a\n thread other than the owner (as semaphores have no notion of\n ownership).  This can be useful in some specialized contexts, such\n as deadlock recovery.\n\n The constructor for this class optionally accepts a\n fairness parameter. When set false, this class makes no\n guarantees about the order in which threads acquire permits. In\n particular, barging is permitted, that is, a thread\n invoking acquire() can be allocated a permit ahead of a\n thread that has been waiting - logically the new thread places itself at\n the head of the queue of waiting threads. When fairness is set true, the\n semaphore guarantees that threads invoking any of the acquire methods are selected to obtain permits in the order in\n which their invocation of those methods was processed\n (first-in-first-out; FIFO). Note that FIFO ordering necessarily\n applies to specific internal points of execution within these\n methods.  So, it is possible for one thread to invoke\n acquire before another, but reach the ordering point after\n the other, and similarly upon return from the method.\n Also note that the untimed tryAcquire methods do not\n honor the fairness setting, but will take any permits that are\n available.\n\n Generally, semaphores used to control resource access should be\n initialized as fair, to ensure that no thread is starved out from\n accessing a resource. When using semaphores for other kinds of\n synchronization control, the throughput advantages of non-fair\n ordering often outweigh fairness considerations.\n\n This class also provides convenience methods to acquire and release multiple\n permits at a time. These methods are generally more efficient and\n effective than loops. However, they do not establish any preference\n order. For example, if thread A invokes s.acquire(3) and\n thread B invokes s.acquire(2), and two permits become\n available, then there is no guarantee that thread B will obtain\n them unless its acquire came first and Semaphore s is in\n fair mode.\n\n Memory consistency effects: Actions in a thread prior to calling\n a \"release\" method such as release()\nhappen-before\n actions following a successful \"acquire\" method such as acquire()\n in another thread.", "codes": ["public class Semaphore\nextends Object\nimplements Serializable"], "fields": [], "methods": [{"method_name": "acquire", "method_sig": "public void acquire()\n             throws InterruptedException", "description": "Acquires a permit from this semaphore, blocking until one is\n available, or the thread is interrupted.\n\n Acquires a permit, if one is available and returns immediately,\n reducing the number of available permits by one.\n\n If no permit is available then the current thread becomes\n disabled for thread scheduling purposes and lies dormant until\n one of two things happens:\n \nSome other thread invokes the release() method for this\n semaphore and the current thread is next to be assigned a permit; or\n Some other thread interrupts\n the current thread.\n \nIf the current thread:\n \nhas its interrupted status set on entry to this method; or\n is interrupted while waiting\n for a permit,\n \n then InterruptedException is thrown and the current thread's\n interrupted status is cleared."}, {"method_name": "acquireUninterruptibly", "method_sig": "public void acquireUninterruptibly()", "description": "Acquires a permit from this semaphore, blocking until one is\n available.\n\n Acquires a permit, if one is available and returns immediately,\n reducing the number of available permits by one.\n\n If no permit is available then the current thread becomes\n disabled for thread scheduling purposes and lies dormant until\n some other thread invokes the release() method for this\n semaphore and the current thread is next to be assigned a permit.\n\n If the current thread is interrupted\n while waiting for a permit then it will continue to wait, but the\n time at which the thread is assigned a permit may change compared to\n the time it would have received the permit had no interruption\n occurred.  When the thread does return from this method its interrupt\n status will be set."}, {"method_name": "tryAcquire", "method_sig": "public boolean tryAcquire()", "description": "Acquires a permit from this semaphore, only if one is available at the\n time of invocation.\n\n Acquires a permit, if one is available and returns immediately,\n with the value true,\n reducing the number of available permits by one.\n\n If no permit is available then this method will return\n immediately with the value false.\n\n Even when this semaphore has been set to use a\n fair ordering policy, a call to tryAcquire() will\n immediately acquire a permit if one is available, whether or not\n other threads are currently waiting.\n This \"barging\" behavior can be useful in certain\n circumstances, even though it breaks fairness. If you want to honor\n the fairness setting, then use\n tryAcquire(0, TimeUnit.SECONDS)\n which is almost equivalent (it also detects interruption)."}, {"method_name": "tryAcquire", "method_sig": "public boolean tryAcquire (long timeout,\n                          TimeUnit unit)\n                   throws InterruptedException", "description": "Acquires a permit from this semaphore, if one becomes available\n within the given waiting time and the current thread has not\n been interrupted.\n\n Acquires a permit, if one is available and returns immediately,\n with the value true,\n reducing the number of available permits by one.\n\n If no permit is available then the current thread becomes\n disabled for thread scheduling purposes and lies dormant until\n one of three things happens:\n \nSome other thread invokes the release() method for this\n semaphore and the current thread is next to be assigned a permit; or\n Some other thread interrupts\n the current thread; or\n The specified waiting time elapses.\n \nIf a permit is acquired then the value true is returned.\n\n If the current thread:\n \nhas its interrupted status set on entry to this method; or\n is interrupted while waiting\n to acquire a permit,\n \n then InterruptedException is thrown and the current thread's\n interrupted status is cleared.\n\n If the specified waiting time elapses then the value false\n is returned.  If the time is less than or equal to zero, the method\n will not wait at all."}, {"method_name": "release", "method_sig": "public void release()", "description": "Releases a permit, returning it to the semaphore.\n\n Releases a permit, increasing the number of available permits by\n one.  If any threads are trying to acquire a permit, then one is\n selected and given the permit that was just released.  That thread\n is (re)enabled for thread scheduling purposes.\n\n There is no requirement that a thread that releases a permit must\n have acquired that permit by calling acquire().\n Correct usage of a semaphore is established by programming convention\n in the application."}, {"method_name": "acquire", "method_sig": "public void acquire (int permits)\n             throws InterruptedException", "description": "Acquires the given number of permits from this semaphore,\n blocking until all are available,\n or the thread is interrupted.\n\n Acquires the given number of permits, if they are available,\n and returns immediately, reducing the number of available permits\n by the given amount. This method has the same effect as the\n loop for (int i = 0; i < permits; ++i) acquire(); except\n that it atomically acquires the permits all at once:\n\n If insufficient permits are available then the current thread becomes\n disabled for thread scheduling purposes and lies dormant until\n one of two things happens:\n \nSome other thread invokes one of the release\n methods for this semaphore and the current thread is next to be assigned\n permits and the number of available permits satisfies this request; or\n Some other thread interrupts\n the current thread.\n \nIf the current thread:\n \nhas its interrupted status set on entry to this method; or\n is interrupted while waiting\n for a permit,\n \n then InterruptedException is thrown and the current thread's\n interrupted status is cleared.\n Any permits that were to be assigned to this thread are instead\n assigned to other threads trying to acquire permits, as if\n permits had been made available by a call to release()."}, {"method_name": "acquireUninterruptibly", "method_sig": "public void acquireUninterruptibly (int permits)", "description": "Acquires the given number of permits from this semaphore,\n blocking until all are available.\n\n Acquires the given number of permits, if they are available,\n and returns immediately, reducing the number of available permits\n by the given amount. This method has the same effect as the\n loop for (int i = 0; i < permits; ++i) acquireUninterruptibly();\n except that it atomically acquires the permits all at once:\n\n If insufficient permits are available then the current thread becomes\n disabled for thread scheduling purposes and lies dormant until\n some other thread invokes one of the release\n methods for this semaphore and the current thread is next to be assigned\n permits and the number of available permits satisfies this request.\n\n If the current thread is interrupted\n while waiting for permits then it will continue to wait and its\n position in the queue is not affected.  When the thread does return\n from this method its interrupt status will be set."}, {"method_name": "tryAcquire", "method_sig": "public boolean tryAcquire (int permits)", "description": "Acquires the given number of permits from this semaphore, only\n if all are available at the time of invocation.\n\n Acquires the given number of permits, if they are available, and\n returns immediately, with the value true,\n reducing the number of available permits by the given amount.\n\n If insufficient permits are available then this method will return\n immediately with the value false and the number of available\n permits is unchanged.\n\n Even when this semaphore has been set to use a fair ordering\n policy, a call to tryAcquire will\n immediately acquire a permit if one is available, whether or\n not other threads are currently waiting.  This\n \"barging\" behavior can be useful in certain\n circumstances, even though it breaks fairness. If you want to\n honor the fairness setting, then use tryAcquire(permits, 0, TimeUnit.SECONDS)\n which is almost equivalent (it also detects interruption)."}, {"method_name": "tryAcquire", "method_sig": "public boolean tryAcquire (int permits,\n                          long timeout,\n                          TimeUnit unit)\n                   throws InterruptedException", "description": "Acquires the given number of permits from this semaphore, if all\n become available within the given waiting time and the current\n thread has not been interrupted.\n\n Acquires the given number of permits, if they are available and\n returns immediately, with the value true,\n reducing the number of available permits by the given amount.\n\n If insufficient permits are available then\n the current thread becomes disabled for thread scheduling\n purposes and lies dormant until one of three things happens:\n \nSome other thread invokes one of the release\n methods for this semaphore and the current thread is next to be assigned\n permits and the number of available permits satisfies this request; or\n Some other thread interrupts\n the current thread; or\n The specified waiting time elapses.\n \nIf the permits are acquired then the value true is returned.\n\n If the current thread:\n \nhas its interrupted status set on entry to this method; or\n is interrupted while waiting\n to acquire the permits,\n \n then InterruptedException is thrown and the current thread's\n interrupted status is cleared.\n Any permits that were to be assigned to this thread, are instead\n assigned to other threads trying to acquire permits, as if\n the permits had been made available by a call to release().\n\n If the specified waiting time elapses then the value false\n is returned.  If the time is less than or equal to zero, the method\n will not wait at all.  Any permits that were to be assigned to this\n thread, are instead assigned to other threads trying to acquire\n permits, as if the permits had been made available by a call to\n release()."}, {"method_name": "release", "method_sig": "public void release (int permits)", "description": "Releases the given number of permits, returning them to the semaphore.\n\n Releases the given number of permits, increasing the number of\n available permits by that amount.\n If any threads are trying to acquire permits, then one thread\n is selected and given the permits that were just released.\n If the number of available permits satisfies that thread's request\n then that thread is (re)enabled for thread scheduling purposes;\n otherwise the thread will wait until sufficient permits are available.\n If there are still permits available\n after this thread's request has been satisfied, then those permits\n are assigned in turn to other threads trying to acquire permits.\n\n There is no requirement that a thread that releases a permit must\n have acquired that permit by calling acquire.\n Correct usage of a semaphore is established by programming convention\n in the application."}, {"method_name": "availablePermits", "method_sig": "public int availablePermits()", "description": "Returns the current number of permits available in this semaphore.\n\n This method is typically used for debugging and testing purposes."}, {"method_name": "drainPermits", "method_sig": "public int drainPermits()", "description": "Acquires and returns all permits that are immediately\n available, or if negative permits are available, releases them.\n Upon return, zero permits are available."}, {"method_name": "reducePermits", "method_sig": "protected void reducePermits (int reduction)", "description": "Shrinks the number of available permits by the indicated\n reduction. This method can be useful in subclasses that use\n semaphores to track resources that become unavailable. This\n method differs from acquire in that it does not block\n waiting for permits to become available."}, {"method_name": "isFair", "method_sig": "public boolean isFair()", "description": "Returns true if this semaphore has fairness set true."}, {"method_name": "hasQueuedThreads", "method_sig": "public final boolean hasQueuedThreads()", "description": "Queries whether any threads are waiting to acquire. Note that\n because cancellations may occur at any time, a true\n return does not guarantee that any other thread will ever\n acquire.  This method is designed primarily for use in\n monitoring of the system state."}, {"method_name": "getQueueLength", "method_sig": "public final int getQueueLength()", "description": "Returns an estimate of the number of threads waiting to acquire.\n The value is only an estimate because the number of threads may\n change dynamically while this method traverses internal data\n structures.  This method is designed for use in monitoring\n system state, not for synchronization control."}, {"method_name": "getQueuedThreads", "method_sig": "protected Collection<Thread> getQueuedThreads()", "description": "Returns a collection containing threads that may be waiting to acquire.\n Because the actual set of threads may change dynamically while\n constructing this result, the returned collection is only a best-effort\n estimate.  The elements of the returned collection are in no particular\n order.  This method is designed to facilitate construction of\n subclasses that provide more extensive monitoring facilities."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a string identifying this semaphore, as well as its state.\n The state, in brackets, includes the String \"Permits =\"\n followed by the number of permits."}]}