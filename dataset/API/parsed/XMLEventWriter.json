{"name": "Interface XMLEventWriter", "module": "java.xml", "package": "javax.xml.stream", "text": "This is the top level interface for writing XML documents.\n\n Instances of this interface are not required to validate the\n form of the XML.", "codes": ["public interface XMLEventWriter\nextends XMLEventConsumer"], "fields": [], "methods": [{"method_name": "flush", "method_sig": "void flush()\n    throws XMLStreamException", "description": "Writes any cached events to the underlying output mechanism"}, {"method_name": "close", "method_sig": "void close()\n    throws XMLStreamException", "description": "Frees any resources associated with this stream"}, {"method_name": "add", "method_sig": "void add (XMLEvent event)\n  throws XMLStreamException", "description": "Add an event to the output stream\n Adding a START_ELEMENT will open a new namespace scope that\n will be closed when the corresponding END_ELEMENT is written.\n \nRequired and optional fields for events added to the writer\n\n\nEvent Type\nRequired Fields\nOptional Fields\nRequired Behavior\n\n\n\n\n START_ELEMENT  \n QName name \n namespaces , attributes \n A START_ELEMENT will be written by writing the name,\n       namespaces, and attributes of the event in XML 1.0 valid\n       syntax for START_ELEMENTs.\n       The name is written by looking up the prefix for\n       the namespace uri.  The writer can be configured to\n       respect prefixes of QNames.  If the writer is respecting\n       prefixes it must use the prefix set on the QName.  The\n       default behavior is to lookup the value for the prefix\n       on the EventWriter's internal namespace context.\n       Each attribute (if any)\n       is written using the behavior specified in the attribute\n       section of this table.  Each namespace (if any) is written\n       using the behavior specified in the namespace section of this\n       table.\n       \n\n\n END_ELEMENT  \n Qname name  \n None \n A well formed END_ELEMENT tag is written.\n       The name is written by looking up the prefix for\n       the namespace uri.  The writer can be configured to\n       respect prefixes of QNames.  If the writer is respecting\n       prefixes it must use the prefix set on the QName.  The\n       default behavior is to lookup the value for the prefix\n       on the EventWriter's internal namespace context.\n       If the END_ELEMENT name does not match the START_ELEMENT\n       name an XMLStreamException is thrown.\n       \n\n\n ATTRIBUTE  \n QName name , String value \n QName type \n An attribute is written using the same algorithm\n            to find the lexical form as used in START_ELEMENT.\n            The default is to use double quotes to wrap attribute\n            values and to escape any double quotes found in the\n            value.  The type value is ignored.\n       \n\n\n NAMESPACE  \n String prefix, String namespaceURI,\n            boolean isDefaultNamespaceDeclaration\n      \n None  \n A namespace declaration is written.  If the\n            namespace is a default namespace declaration\n            (isDefault is true) then xmlns=\"$namespaceURI\"\n            is written and the prefix is optional.  If\n            isDefault is false, the prefix must be declared\n            and the writer must prepend xmlns to the prefix\n            and write out a standard prefix declaration.\n      \n\n\n PROCESSING_INSTRUCTION  \n   None\n   String target, String data\n   The data does not need to be present and may be\n              null.  Target is required and many not be null.\n              The writer\n              will write data section\n              directly after the target,\n              enclosed in appropriate XML 1.0 syntax\n      \n\n\n COMMENT  \n None  \n String comment  \n If the comment is present (not null) it is written, otherwise an\n            an empty comment is written\n      \n\n\n START_DOCUMENT  \n None  \n String encoding , boolean standalone, String version  \n A START_DOCUMENT event is not required to be written to the\n             stream.  If present the attributes are written inside\n             the appropriate XML declaration syntax\n      \n\n\n END_DOCUMENT  \n None \n None  \n Nothing is written to the output  \n\n\n DTD  \n String DocumentTypeDefinition  \n None  \n The DocumentTypeDefinition is written to the output  \n\n\n"}, {"method_name": "add", "method_sig": "void add (XMLEventReader reader)\n  throws XMLStreamException", "description": "Adds an entire stream to an output stream,\n calls next() on the inputStream argument until hasNext() returns false\n This should be treated as a convenience method that will\n perform the following loop over all the events in an\n event reader and call add on each event."}, {"method_name": "getPrefix", "method_sig": "String getPrefix (String uri)\n          throws XMLStreamException", "description": "Gets the prefix the uri is bound to"}, {"method_name": "setPrefix", "method_sig": "void setPrefix (String prefix,\n               String uri)\n        throws XMLStreamException", "description": "Sets the prefix the uri is bound to.  This prefix is bound\n in the scope of the current START_ELEMENT / END_ELEMENT pair.\n If this method is called before a START_ELEMENT has been written\n the prefix is bound in the root scope."}, {"method_name": "setDefaultNamespace", "method_sig": "void setDefaultNamespace (String uri)\n                  throws XMLStreamException", "description": "Binds a URI to the default namespace\n This URI is bound\n in the scope of the current START_ELEMENT / END_ELEMENT pair.\n If this method is called before a START_ELEMENT has been written\n the uri is bound in the root scope."}, {"method_name": "setNamespaceContext", "method_sig": "void setNamespaceContext (NamespaceContext context)\n                  throws XMLStreamException", "description": "Sets the current namespace context for prefix and uri bindings.\n This context becomes the root namespace context for writing and\n will replace the current root namespace context.  Subsequent calls\n to setPrefix and setDefaultNamespace will bind namespaces using\n the context passed to the method as the root context for resolving\n namespaces."}, {"method_name": "getNamespaceContext", "method_sig": "NamespaceContext getNamespaceContext()", "description": "Returns the current namespace context."}]}