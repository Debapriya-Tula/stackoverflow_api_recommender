{"name": "Enum DayOfWeek", "module": "java.base", "package": "java.time", "text": "A day-of-week, such as 'Tuesday'.\n \nDayOfWeek is an enum representing the 7 days of the week -\n Monday, Tuesday, Wednesday, Thursday, Friday, Saturday and Sunday.\n \n In addition to the textual enum name, each day-of-week has an int value.\n The int value follows the ISO-8601 standard, from 1 (Monday) to 7 (Sunday).\n It is recommended that applications use the enum rather than the int value\n to ensure code clarity.\n \n This enum provides access to the localized textual form of the day-of-week.\n Some locales also assign different numeric values to the days, declaring\n Sunday to have the value 1, however this class provides no support for this.\n See WeekFields for localized week-numbering.\n \nDo not use ordinal() to obtain the numeric representation of DayOfWeek.\n Use getValue() instead.\n\n This enum represents a common concept that is found in many calendar systems.\n As such, this enum may be used by any calendar system that has the day-of-week\n concept defined exactly equivalent to the ISO calendar system.", "codes": ["public enum DayOfWeek\nextends Enum<DayOfWeek>\nimplements TemporalAccessor, TemporalAdjuster"], "fields": [], "methods": [{"method_name": "values", "method_sig": "public static DayOfWeek[] values()", "description": "Returns an array containing the constants of this enum type, in\nthe order they are declared. This method may be used to iterate\nover the constants as follows:\n\nfor (DayOfWeek c : DayOfWeek.values())\n\u00a0   System.out.println(c);\n"}, {"method_name": "valueOf", "method_sig": "public static DayOfWeek valueOf (String name)", "description": "Returns the enum constant of this type with the specified name.\nThe string must match exactly an identifier used to declare an\nenum constant in this type.  (Extraneous whitespace characters are \nnot permitted.)"}, {"method_name": "of", "method_sig": "public static DayOfWeek of (int dayOfWeek)", "description": "Obtains an instance of DayOfWeek from an int value.\n \nDayOfWeek is an enum representing the 7 days of the week.\n This factory allows the enum to be obtained from the int value.\n The int value follows the ISO-8601 standard, from 1 (Monday) to 7 (Sunday)."}, {"method_name": "from", "method_sig": "public static DayOfWeek from (TemporalAccessor temporal)", "description": "Obtains an instance of DayOfWeek from a temporal object.\n \n This obtains a day-of-week based on the specified temporal.\n A TemporalAccessor represents an arbitrary set of date and time information,\n which this factory converts to an instance of DayOfWeek.\n \n The conversion extracts the DAY_OF_WEEK field.\n \n This method matches the signature of the functional interface TemporalQuery\n allowing it to be used as a query via method reference, DayOfWeek::from."}, {"method_name": "getValue", "method_sig": "public int getValue()", "description": "Gets the day-of-week int value.\n \n The values are numbered following the ISO-8601 standard, from 1 (Monday) to 7 (Sunday).\n See WeekFields.dayOfWeek() for localized week-numbering."}, {"method_name": "getDisplayName", "method_sig": "public String getDisplayName (TextStyle style,\n                             Locale locale)", "description": "Gets the textual representation, such as 'Mon' or 'Friday'.\n \n This returns the textual name used to identify the day-of-week,\n suitable for presentation to the user.\n The parameters control the style of the returned text and the locale.\n \n If no textual mapping is found then the numeric value is returned."}, {"method_name": "isSupported", "method_sig": "public boolean isSupported (TemporalField field)", "description": "Checks if the specified field is supported.\n \n This checks if this day-of-week can be queried for the specified field.\n If false, then calling the range and\n get methods will throw an exception.\n \n If the field is DAY_OF_WEEK then\n this method returns true.\n All other ChronoField instances will return false.\n \n If the field is not a ChronoField, then the result of this method\n is obtained by invoking TemporalField.isSupportedBy(TemporalAccessor)\n passing this as the argument.\n Whether the field is supported is determined by the field."}, {"method_name": "range", "method_sig": "public ValueRange range (TemporalField field)", "description": "Gets the range of valid values for the specified field.\n \n The range object expresses the minimum and maximum valid values for a field.\n This day-of-week is used to enhance the accuracy of the returned range.\n If it is not possible to return the range, because the field is not supported\n or for some other reason, an exception is thrown.\n \n If the field is DAY_OF_WEEK then the\n range of the day-of-week, from 1 to 7, will be returned.\n All other ChronoField instances will throw an UnsupportedTemporalTypeException.\n \n If the field is not a ChronoField, then the result of this method\n is obtained by invoking TemporalField.rangeRefinedBy(TemporalAccessor)\n passing this as the argument.\n Whether the range can be obtained is determined by the field."}, {"method_name": "get", "method_sig": "public int get (TemporalField field)", "description": "Gets the value of the specified field from this day-of-week as an int.\n \n This queries this day-of-week for the value of the specified field.\n The returned value will always be within the valid range of values for the field.\n If it is not possible to return the value, because the field is not supported\n or for some other reason, an exception is thrown.\n \n If the field is DAY_OF_WEEK then the\n value of the day-of-week, from 1 to 7, will be returned.\n All other ChronoField instances will throw an UnsupportedTemporalTypeException.\n \n If the field is not a ChronoField, then the result of this method\n is obtained by invoking TemporalField.getFrom(TemporalAccessor)\n passing this as the argument. Whether the value can be obtained,\n and what the value represents, is determined by the field."}, {"method_name": "getLong", "method_sig": "public long getLong (TemporalField field)", "description": "Gets the value of the specified field from this day-of-week as a long.\n \n This queries this day-of-week for the value of the specified field.\n If it is not possible to return the value, because the field is not supported\n or for some other reason, an exception is thrown.\n \n If the field is DAY_OF_WEEK then the\n value of the day-of-week, from 1 to 7, will be returned.\n All other ChronoField instances will throw an UnsupportedTemporalTypeException.\n \n If the field is not a ChronoField, then the result of this method\n is obtained by invoking TemporalField.getFrom(TemporalAccessor)\n passing this as the argument. Whether the value can be obtained,\n and what the value represents, is determined by the field."}, {"method_name": "plus", "method_sig": "public DayOfWeek plus (long days)", "description": "Returns the day-of-week that is the specified number of days after this one.\n \n The calculation rolls around the end of the week from Sunday to Monday.\n The specified period may be negative.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "minus", "method_sig": "public DayOfWeek minus (long days)", "description": "Returns the day-of-week that is the specified number of days before this one.\n \n The calculation rolls around the start of the year from Monday to Sunday.\n The specified period may be negative.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "query", "method_sig": "public <R> R query (TemporalQuery<R> query)", "description": "Queries this day-of-week using the specified query.\n \n This queries this day-of-week using the specified query strategy object.\n The TemporalQuery object defines the logic to be used to\n obtain the result. Read the documentation of the query to understand\n what the result of this method will be.\n \n The result of this method is obtained by invoking the\n TemporalQuery.queryFrom(TemporalAccessor) method on the\n specified query passing this as the argument."}, {"method_name": "adjustInto", "method_sig": "public Temporal adjustInto (Temporal temporal)", "description": "Adjusts the specified temporal object to have this day-of-week.\n \n This returns a temporal object of the same observable type as the input\n with the day-of-week changed to be the same as this.\n \n The adjustment is equivalent to using Temporal.with(TemporalField, long)\n passing ChronoField.DAY_OF_WEEK as the field.\n Note that this adjusts forwards or backwards within a Monday to Sunday week.\n See WeekFields.dayOfWeek() for localized week start days.\n See TemporalAdjuster for other adjusters with more control,\n such as next(MONDAY).\n \n In most cases, it is clearer to reverse the calling pattern by using\n Temporal.with(TemporalAdjuster):\n \n   // these two lines are equivalent, but the second approach is recommended\n   temporal = thisDayOfWeek.adjustInto(temporal);\n   temporal = temporal.with(thisDayOfWeek);\n \n\n For example, given a date that is a Wednesday, the following are output:\n \n   dateOnWed.with(MONDAY);     // two days earlier\n   dateOnWed.with(TUESDAY);    // one day earlier\n   dateOnWed.with(WEDNESDAY);  // same date\n   dateOnWed.with(THURSDAY);   // one day later\n   dateOnWed.with(FRIDAY);     // two days later\n   dateOnWed.with(SATURDAY);   // three days later\n   dateOnWed.with(SUNDAY);     // four days later\n \n\n This instance is immutable and unaffected by this method call."}]}