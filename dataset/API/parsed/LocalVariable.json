{"name": "Interface LocalVariable", "module": "jdk.jdi", "package": "com.sun.jdi", "text": "A local variable in the target VM. Each variable declared within a\n Method has its own LocalVariable object. Variables of the same\n name declared in different scopes have different LocalVariable objects.\n LocalVariables can be used alone to retrieve static information\n about their declaration, or can be used in conjunction with a\n StackFrame to set and get values.", "codes": ["public interface LocalVariable\nextends Mirror, Comparable<LocalVariable>"], "fields": [], "methods": [{"method_name": "name", "method_sig": "String name()", "description": "Gets the name of the local variable."}, {"method_name": "typeName", "method_sig": "String typeName()", "description": "Returns a text representation of the type\n of this variable.\n Where the type is the type specified in the declaration\n of this local variable.\n \n This type name is always available even if\n the type has not yet been created or loaded."}, {"method_name": "type", "method_sig": "Type type()\n   throws ClassNotLoadedException", "description": "Returns the type of this variable.\n Where the type is the type specified in the declaration\n of this local variable.\n \n Note: if the type of this variable is a reference type (class,\n interface, or array) and it has not been created or loaded\n by the class loader of the enclosing class,\n then ClassNotLoadedException will be thrown.\n Also, a reference type may have been loaded but not yet prepared,\n in which case the type will be returned\n but attempts to perform some operations on the returned type\n (e.g. fields()) will throw\n a ClassNotPreparedException.\n Use ReferenceType.isPrepared() to determine if\n a reference type is prepared."}, {"method_name": "signature", "method_sig": "String signature()", "description": "Gets the JNI signature of the local variable."}, {"method_name": "genericSignature", "method_sig": "String genericSignature()", "description": "Gets the generic signature for this variable if there is one.\n Generic signatures are described in the\n The Java\u2122 Virtual Machine Specification."}, {"method_name": "isVisible", "method_sig": "boolean isVisible (StackFrame frame)", "description": "Determines whether this variable can be accessed from the given\n StackFrame.\n\n See StackFrame.visibleVariables() for a complete description\n variable visibility in this interface."}, {"method_name": "isArgument", "method_sig": "boolean isArgument()", "description": "Determines if this variable is an argument to its method."}, {"method_name": "equals", "method_sig": "boolean equals (Object obj)", "description": "Compares the specified Object with this LocalVariable for equality."}, {"method_name": "hashCode", "method_sig": "int hashCode()", "description": "Returns the hash code value for this LocalVariable."}]}