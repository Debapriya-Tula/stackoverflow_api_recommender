{"name": "Class LinkedBlockingQueue<E>", "module": "java.base", "package": "java.util.concurrent", "text": "An optionally-bounded blocking queue based on\n linked nodes.\n This queue orders elements FIFO (first-in-first-out).\n The head of the queue is that element that has been on the\n queue the longest time.\n The tail of the queue is that element that has been on the\n queue the shortest time. New elements\n are inserted at the tail of the queue, and the queue retrieval\n operations obtain elements at the head of the queue.\n Linked queues typically have higher throughput than array-based queues but\n less predictable performance in most concurrent applications.\n\n The optional capacity bound constructor argument serves as a\n way to prevent excessive queue expansion. The capacity, if unspecified,\n is equal to Integer.MAX_VALUE.  Linked nodes are\n dynamically created upon each insertion unless this would bring the\n queue above capacity.\n\n This class and its iterator implement all of the optional\n methods of the Collection and Iterator interfaces.\n\n This class is a member of the\n \n Java Collections Framework.", "codes": ["public class LinkedBlockingQueue<E>\nextends AbstractQueue<E>\nimplements BlockingQueue<E>, Serializable"], "fields": [], "methods": [{"method_name": "size", "method_sig": "public int size()", "description": "Returns the number of elements in this queue."}, {"method_name": "remainingCapacity", "method_sig": "public int remainingCapacity()", "description": "Returns the number of additional elements that this queue can ideally\n (in the absence of memory or resource constraints) accept without\n blocking. This is always equal to the initial capacity of this queue\n less the current size of this queue.\n\n Note that you cannot always tell if an attempt to insert\n an element will succeed by inspecting remainingCapacity\n because it may be the case that another thread is about to\n insert or remove an element."}, {"method_name": "put", "method_sig": "public void put (E e)\n         throws InterruptedException", "description": "Inserts the specified element at the tail of this queue, waiting if\n necessary for space to become available."}, {"method_name": "offer", "method_sig": "public boolean offer (E e,\n                     long timeout,\n                     TimeUnit unit)\n              throws InterruptedException", "description": "Inserts the specified element at the tail of this queue, waiting if\n necessary up to the specified wait time for space to become available."}, {"method_name": "offer", "method_sig": "public boolean offer (E e)", "description": "Inserts the specified element at the tail of this queue if it is\n possible to do so immediately without exceeding the queue's capacity,\n returning true upon success and false if this queue\n is full.\n When using a capacity-restricted queue, this method is generally\n preferable to method add, which can fail to\n insert an element only by throwing an exception."}, {"method_name": "remove", "method_sig": "public boolean remove (Object o)", "description": "Removes a single instance of the specified element from this queue,\n if it is present.  More formally, removes an element e such\n that o.equals(e), if this queue contains one or more such\n elements.\n Returns true if this queue contained the specified element\n (or equivalently, if this queue changed as a result of the call)."}, {"method_name": "contains", "method_sig": "public boolean contains (Object o)", "description": "Returns true if this queue contains the specified element.\n More formally, returns true if and only if this queue contains\n at least one element e such that o.equals(e)."}, {"method_name": "toArray", "method_sig": "public Object[] toArray()", "description": "Returns an array containing all of the elements in this queue, in\n proper sequence.\n\n The returned array will be \"safe\" in that no references to it are\n maintained by this queue.  (In other words, this method must allocate\n a new array).  The caller is thus free to modify the returned array.\n\n This method acts as bridge between array-based and collection-based\n APIs."}, {"method_name": "toArray", "method_sig": "public <T> T[] toArray (T[] a)", "description": "Returns an array containing all of the elements in this queue, in\n proper sequence; the runtime type of the returned array is that of\n the specified array.  If the queue fits in the specified array, it\n is returned therein.  Otherwise, a new array is allocated with the\n runtime type of the specified array and the size of this queue.\n\n If this queue fits in the specified array with room to spare\n (i.e., the array has more elements than this queue), the element in\n the array immediately following the end of the queue is set to\n null.\n\n Like the toArray() method, this method acts as bridge between\n array-based and collection-based APIs.  Further, this method allows\n precise control over the runtime type of the output array, and may,\n under certain circumstances, be used to save allocation costs.\n\n Suppose x is a queue known to contain only strings.\n The following code can be used to dump the queue into a newly\n allocated array of String:\n\n  String[] y = x.toArray(new String[0]);\n\n Note that toArray(new Object[0]) is identical in function to\n toArray()."}, {"method_name": "clear", "method_sig": "public void clear()", "description": "Atomically removes all of the elements from this queue.\n The queue will be empty after this call returns."}, {"method_name": "drainTo", "method_sig": "public int drainTo (Collection<? super E> c)", "description": "Description copied from interface:\u00a0BlockingQueue"}, {"method_name": "drainTo", "method_sig": "public int drainTo (Collection<? super E> c,\n                   int maxElements)", "description": "Description copied from interface:\u00a0BlockingQueue"}, {"method_name": "iterator", "method_sig": "public Iterator<E> iterator()", "description": "Returns an iterator over the elements in this queue in proper sequence.\n The elements will be returned in order from first (head) to last (tail).\n\n The returned iterator is\n weakly consistent."}, {"method_name": "spliterator", "method_sig": "public Spliterator<E> spliterator()", "description": "Returns a Spliterator over the elements in this queue.\n\n The returned spliterator is\n weakly consistent.\n\n The Spliterator reports Spliterator.CONCURRENT,\n Spliterator.ORDERED, and Spliterator.NONNULL."}, {"method_name": "forEach", "method_sig": "public void forEach (Consumer<? super E> action)", "description": "Description copied from interface:\u00a0Iterable"}, {"method_name": "removeIf", "method_sig": "public boolean removeIf (Predicate<? super E> filter)", "description": "Description copied from interface:\u00a0Collection"}, {"method_name": "removeAll", "method_sig": "public boolean removeAll (Collection<?> c)", "description": "Description copied from class:\u00a0AbstractCollection"}, {"method_name": "retainAll", "method_sig": "public boolean retainAll (Collection<?> c)", "description": "Description copied from class:\u00a0AbstractCollection"}]}