{"name": "Class BasicStroke", "module": "java.desktop", "package": "java.awt", "text": "The BasicStroke class defines a basic set of rendering\n attributes for the outlines of graphics primitives, which are rendered\n with a Graphics2D object that has its Stroke attribute set to\n this BasicStroke.\n The rendering attributes defined by BasicStroke describe\n the shape of the mark made by a pen drawn along the outline of a\n Shape and the decorations applied at the ends and joins of\n path segments of the Shape.\n These rendering attributes include:\n \nwidth\nThe pen width, measured perpendicularly to the pen trajectory.\n end caps\nThe decoration applied to the ends of unclosed subpaths and\n dash segments.  Subpaths that start and end on the same point are\n still considered unclosed if they do not have a CLOSE segment.\n See SEG_CLOSE\n for more information on the CLOSE segment.\n The three different decorations are: CAP_BUTT,\n CAP_ROUND, and CAP_SQUARE.\n line joins\nThe decoration applied at the intersection of two path segments\n and at the intersection of the endpoints of a subpath that is closed\n using SEG_CLOSE.\n The three different decorations are: JOIN_BEVEL,\n JOIN_MITER, and JOIN_ROUND.\n miter limit\nThe limit to trim a line join that has a JOIN_MITER decoration.\n A line join is trimmed when the ratio of miter length to stroke\n width is greater than the miterlimit value.  The miter length is\n the diagonal length of the miter, which is the distance between\n the inside corner and the outside corner of the intersection.\n The smaller the angle formed by two line segments, the longer\n the miter length and the sharper the angle of intersection.  The\n default miterlimit value of 10.0f causes all angles less than\n 11 degrees to be trimmed.  Trimming miters converts\n the decoration of the line join to bevel.\n dash attributes\nThe definition of how to make a dash pattern by alternating\n between opaque and transparent sections.\n \n All attributes that specify measurements and distances controlling\n the shape of the returned outline are measured in the same\n coordinate system as the original unstroked Shape\n argument.  When a Graphics2D object uses a\n Stroke object to redefine a path during the execution\n of one of its draw methods, the geometry is supplied\n in its original form before the Graphics2D transform\n attribute is applied.  Therefore, attributes such as the pen width\n are interpreted in the user space coordinate system of the\n Graphics2D object and are subject to the scaling and\n shearing effects of the user-space-to-device-space transform in that\n particular Graphics2D.\n For example, the width of a rendered shape's outline is determined\n not only by the width attribute of this BasicStroke,\n but also by the transform attribute of the\n Graphics2D object.  Consider this code:\n \n      // sets the Graphics2D object's Transform attribute\n      g2d.scale(10, 10);\n      // sets the Graphics2D object's Stroke attribute\n      g2d.setStroke(new BasicStroke(1.5f));\n \n Assuming there are no other scaling transforms added to the\n Graphics2D object, the resulting line\n will be approximately 15 pixels wide.\n As the example code demonstrates, a floating-point line\n offers better precision, especially when large transforms are\n used with a Graphics2D object.\n When a line is diagonal, the exact width depends on how the\n rendering pipeline chooses which pixels to fill as it traces the\n theoretical widened outline.  The choice of which pixels to turn\n on is affected by the antialiasing attribute because the\n antialiasing rendering pipeline can choose to color\n partially-covered pixels.\n \n For more information on the user space coordinate system and the\n rendering process, see the Graphics2D class comments.", "codes": ["public class BasicStroke\nextends Object\nimplements Stroke"], "fields": [{"field_name": "JOIN_MITER", "field_sig": "@Native\npublic static final\u00a0int JOIN_MITER", "description": "Joins path segments by extending their outside edges until\n they meet."}, {"field_name": "JOIN_ROUND", "field_sig": "@Native\npublic static final\u00a0int JOIN_ROUND", "description": "Joins path segments by rounding off the corner at a radius\n of half the line width."}, {"field_name": "JOIN_BEVEL", "field_sig": "@Native\npublic static final\u00a0int JOIN_BEVEL", "description": "Joins path segments by connecting the outer corners of their\n wide outlines with a straight segment."}, {"field_name": "CAP_BUTT", "field_sig": "@Native\npublic static final\u00a0int CAP_BUTT", "description": "Ends unclosed subpaths and dash segments with no added\n decoration."}, {"field_name": "CAP_ROUND", "field_sig": "@Native\npublic static final\u00a0int CAP_ROUND", "description": "Ends unclosed subpaths and dash segments with a round\n decoration that has a radius equal to half of the width\n of the pen."}, {"field_name": "CAP_SQUARE", "field_sig": "@Native\npublic static final\u00a0int CAP_SQUARE", "description": "Ends unclosed subpaths and dash segments with a square\n projection that extends beyond the end of the segment\n to a distance equal to half of the line width."}], "methods": [{"method_name": "createStrokedShape", "method_sig": "public Shape createStrokedShape (Shape s)", "description": "Returns a Shape whose interior defines the\n stroked outline of a specified Shape."}, {"method_name": "getLineWidth", "method_sig": "public float getLineWidth()", "description": "Returns the line width.  Line width is represented in user space,\n which is the default-coordinate space used by Java 2D.  See the\n Graphics2D class comments for more information on\n the user space coordinate system."}, {"method_name": "getEndCap", "method_sig": "public int getEndCap()", "description": "Returns the end cap style."}, {"method_name": "getLineJoin", "method_sig": "public int getLineJoin()", "description": "Returns the line join style."}, {"method_name": "getMiterLimit", "method_sig": "public float getMiterLimit()", "description": "Returns the limit of miter joins."}, {"method_name": "getDashArray", "method_sig": "public float[] getDashArray()", "description": "Returns the array representing the lengths of the dash segments.\n Alternate entries in the array represent the user space lengths\n of the opaque and transparent segments of the dashes.\n As the pen moves along the outline of the Shape\n to be stroked, the user space\n distance that the pen travels is accumulated.  The distance\n value is used to index into the dash array.\n The pen is opaque when its current cumulative distance maps\n to an even element of the dash array and transparent otherwise."}, {"method_name": "getDashPhase", "method_sig": "public float getDashPhase()", "description": "Returns the current dash phase.\n The dash phase is a distance specified in user coordinates that\n represents an offset into the dashing pattern. In other words, the dash\n phase defines the point in the dashing pattern that will correspond to\n the beginning of the stroke."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Returns the hashcode for this stroke."}, {"method_name": "equals", "method_sig": "public boolean equals (Object obj)", "description": "Tests if a specified object is equal to this BasicStroke\n by first testing if it is a BasicStroke and then comparing\n its width, join, cap, miter limit, dash, and dash phase attributes with\n those of this BasicStroke."}]}