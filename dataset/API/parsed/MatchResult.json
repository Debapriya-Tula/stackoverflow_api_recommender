{"name": "Interface MatchResult", "module": "java.base", "package": "java.util.regex", "text": "The result of a match operation.\n\n This interface contains query methods used to determine the\n results of a match against a regular expression. The match boundaries,\n groups and group boundaries can be seen but not modified through\n a MatchResult.", "codes": ["public interface MatchResult"], "fields": [], "methods": [{"method_name": "start", "method_sig": "int start()", "description": "Returns the start index of the match."}, {"method_name": "start", "method_sig": "int start (int group)", "description": "Returns the start index of the subsequence captured by the given group\n during this match.\n\n  Capturing groups are indexed from left\n to right, starting at one.  Group zero denotes the entire pattern, so\n the expression m.start(0) is equivalent to\n m.start().  "}, {"method_name": "end", "method_sig": "int end()", "description": "Returns the offset after the last character matched."}, {"method_name": "end", "method_sig": "int end (int group)", "description": "Returns the offset after the last character of the subsequence\n captured by the given group during this match.\n\n  Capturing groups are indexed from left\n to right, starting at one.  Group zero denotes the entire pattern, so\n the expression m.end(0) is equivalent to\n m.end().  "}, {"method_name": "group", "method_sig": "String group()", "description": "Returns the input subsequence matched by the previous match.\n\n  For a matcher m with input sequence s,\n the expressions m.group() and\n s.substring(m.start(),\u00a0m.end())\n are equivalent.  \n Note that some patterns, for example a*, match the empty\n string.  This method will return the empty string when the pattern\n successfully matches the empty string in the input.  "}, {"method_name": "group", "method_sig": "String group (int group)", "description": "Returns the input subsequence captured by the given group during the\n previous match operation.\n\n  For a matcher m, input sequence s, and group index\n g, the expressions m.group(g) and\n s.substring(m.start(g\n ),\u00a0m.end(g))\n are equivalent.  \n Capturing groups are indexed from left\n to right, starting at one.  Group zero denotes the entire pattern, so\n the expression m.group(0) is equivalent to m.group().\n \n If the match was successful but the group specified failed to match\n any part of the input sequence, then null is returned. Note\n that some groups, for example (a*), match the empty string.\n This method will return the empty string when such a group successfully\n matches the empty string in the input.  "}, {"method_name": "groupCount", "method_sig": "int groupCount()", "description": "Returns the number of capturing groups in this match result's pattern.\n\n  Group zero denotes the entire pattern by convention. It is not\n included in this count.\n\n  Any non-negative integer smaller than or equal to the value\n returned by this method is guaranteed to be a valid group index for\n this matcher.  "}]}