{"name": "Class SSLEngine", "module": "java.base", "package": "javax.net.ssl", "text": "A class which enables secure communications using protocols such as\n the Secure Sockets Layer (SSL) or\n  IETF RFC 2246 \"Transport\n Layer Security\" (TLS)  protocols, but is transport independent.\n \n The secure communications modes include: \n Integrity Protection.  SSL/TLS/DTLS protects against\n      modification of messages by an active wiretapper.\n\n       Authentication.  In most modes, SSL/TLS/DTLS provides\n      peer authentication.  Servers are usually authenticated, and\n      clients may be authenticated as requested by servers.\n\n       Confidentiality (Privacy Protection).  In most\n      modes, SSL/TLS/DTLS encrypts data being sent between client and\n      server.  This protects the confidentiality of data, so that\n      passive wiretappers won't see sensitive data such as financial\n      information or personal information of many kinds.\n\n      \n\n These kinds of protection are specified by a \"cipher suite\", which\n is a combination of cryptographic algorithms used by a given SSL\n connection.  During the negotiation process, the two endpoints must\n agree on a cipher suite that is available in both environments.  If\n there is no such suite in common, no SSL connection can be\n established, and no data can be exchanged.\n \n The cipher suite used is established by a negotiation process called\n \"handshaking\".  The goal of this process is to create or rejoin a\n \"session\", which may protect many connections over time.  After\n handshaking has completed, you can access session attributes by\n using the getSession() method.\n \n The SSLSocket class provides much of the same security\n functionality, but all of the inbound and outbound data is\n automatically transported using the underlying Socket, which by design uses a blocking model.\n While this is appropriate for many applications, this model does not\n provide the scalability required by large servers.\n \n The primary distinction of an SSLEngine is that it\n operates on inbound and outbound byte streams, independent of the\n transport mechanism.  It is the responsibility of the\n SSLEngine user to arrange for reliable I/O transport to\n the peer.  By separating the SSL/TLS/DTLS abstraction from the I/O\n transport mechanism, the SSLEngine can be used for a\n wide variety of I/O types, such as non-blocking I/O (polling), selectable non-blocking I/O, Socket and the\n traditional Input/OutputStreams, local ByteBuffers or byte arrays,  future asynchronous\n I/O models , and so on.\n \n At a high level, the SSLEngine appears thus:\n\n \n                   app data\n\n                |           ^\n                |     |     |\n                v     |     |\n           +----+-----|-----+----+\n           |          |          |\n           |       SSL|Engine    |\n   wrap()  |          |          |  unwrap()\n           | OUTBOUND | INBOUND  |\n           |          |          |\n           +----+-----|-----+----+\n                |     |     ^\n                |     |     |\n                v           |\n\n                   net data\n \n Application data (also known as plaintext or cleartext) is data which\n is produced or consumed by an application.  Its counterpart is\n network data, which consists of either handshaking and/or ciphertext\n (encrypted) data, and destined to be transported via an I/O\n mechanism.  Inbound data is data which has been received from the\n peer, and outbound data is destined for the peer.\n \n (In the context of an SSLEngine, the term \"handshake\n data\" is taken to mean any data exchanged to establish and control a\n secure connection.  Handshake data includes the SSL/TLS/DTLS messages\n \"alert\", \"change_cipher_spec,\" and \"handshake.\")\n \n There are five distinct phases to an SSLEngine.\n\n \n Creation - The SSLEngine has been created and\n     initialized, but has not yet been used.  During this phase, an\n     application may set any SSLEngine-specific settings\n     (enabled cipher suites, whether the SSLEngine should\n     handshake in client or server mode, and so on).  Once\n     handshaking has begun, though, any new settings (except\n     client/server mode, see below) will be used for\n     the next handshake.\n\n      Initial Handshake - The initial handshake is a procedure by\n     which the two peers exchange communication parameters until an\n     SSLSession is established.  Application data can not be sent during\n     this phase.\n\n      Application Data - Once the communication parameters have\n     been established and the handshake is complete, application data\n     may flow through the SSLEngine.  Outbound\n     application messages are encrypted and integrity protected,\n     and inbound messages reverse the process.\n\n      Rehandshaking - Either side may request a renegotiation of\n     the session at any time during the Application Data phase.  New\n     handshaking data can be intermixed among the application data.\n     Before starting the rehandshake phase, the application may\n     reset the SSL/TLS/DTLS communication parameters such as the list of\n     enabled ciphersuites and whether to use client authentication,\n     but can not change between client/server modes.  As before, once\n     handshaking has begun, any new SSLEngine\n     configuration settings will not be used until the next\n     handshake.\n\n      Closure - When the connection is no longer needed, the client\n     and the server applications should each close both sides of their\n     respective connections.  For SSLEngine objects, an\n     application should call closeOutbound() and\n     send any remaining messages to the peer.  Likewise, an application\n     should receive any remaining messages from the peer before calling\n     closeInbound().  The underlying transport mechanism\n     can then be closed after both sides of the SSLEngine have\n     been closed.  If the connection is not closed in an orderly manner\n     (for example closeInbound() is called before the\n     peer's write closure notification has been received), exceptions\n     will be raised to indicate that an error has occurred.  Once an\n     engine is closed, it is not reusable: a new SSLEngine\n     must be created.\n \n An SSLEngine is created by calling SSLContext.createSSLEngine() from an initialized\n SSLContext.  Any configuration\n parameters should be set before making the first call to\n wrap(), unwrap(), or\n beginHandshake().  These methods all trigger the\n initial handshake.\n \n Data moves through the engine by calling wrap() or unwrap() on outbound or inbound data, respectively.  Depending on\n the state of the SSLEngine, a wrap() call\n may consume application data from the source buffer and may produce\n network data in the destination buffer.  The outbound data\n may contain application and/or handshake data.  A call to\n unwrap() will examine the source buffer and may\n advance the handshake if the data is handshaking information, or\n may place application data in the destination buffer if the data\n is application.  The state of the underlying SSL/TLS/DTLS algorithm\n will determine when data is consumed and produced.\n \n Calls to wrap() and unwrap() return an\n SSLEngineResult which indicates the status of the\n operation, and (optionally) how to interact with the engine to make\n progress.\n \n The SSLEngine produces/consumes complete SSL/TLS/DTLS\n packets only, and does not store application data internally between\n calls to wrap()/unwrap().  Thus input and output\n ByteBuffers must be sized appropriately to hold the\n maximum record that can be produced.  Calls to SSLSession.getPacketBufferSize() and SSLSession.getApplicationBufferSize() should be used to determine\n the appropriate buffer sizes.  The size of the outbound application\n data buffer generally does not matter.  If buffer conditions do not\n allow for the proper consumption/production of data, the application\n must determine (via SSLEngineResult) and correct the\n problem, and then try the call again.\n \n For example, unwrap() will return a SSLEngineResult.Status.BUFFER_OVERFLOW result if the engine\n determines that there is not enough destination buffer space available.\n Applications should call SSLSession.getApplicationBufferSize()\n and compare that value with the space available in the destination buffer,\n enlarging the buffer if necessary.  Similarly, if unwrap()\n were to return a SSLEngineResult.Status.BUFFER_UNDERFLOW, the\n application should call SSLSession.getPacketBufferSize() to ensure\n that the source buffer has enough room to hold a record (enlarging if\n necessary), and then obtain more inbound data.\n\n \n   SSLEngineResult r = engine.unwrap(src, dst);\n   switch (r.getStatus()) {\n   BUFFER_OVERFLOW:\n       // Could attempt to drain the dst buffer of any already obtained\n       // data, but we'll just increase it to the size needed.\n       int appSize = engine.getSession().getApplicationBufferSize();\n       ByteBuffer b = ByteBuffer.allocate(appSize + dst.position());\n       dst.flip();\n       b.put(dst);\n       dst = b;\n       // retry the operation.\n       break;\n   BUFFER_UNDERFLOW:\n       int netSize = engine.getSession().getPacketBufferSize();\n       // Resize buffer if needed.\n       if (netSize > dst.capacity()) {\n           ByteBuffer b = ByteBuffer.allocate(netSize);\n           src.flip();\n           b.put(src);\n           src = b;\n       }\n       // Obtain more inbound network data for src,\n       // then retry the operation.\n       break;\n   // other cases: CLOSED, OK.\n   }\n \n\n Unlike SSLSocket, all methods of SSLEngine are\n non-blocking.  SSLEngine implementations may\n require the results of tasks that may take an extended period of\n time to complete, or may even block.  For example, a TrustManager\n may need to connect to a remote certificate validation service,\n or a KeyManager might need to prompt a user to determine which\n certificate to use as part of client authentication.  Additionally,\n creating cryptographic signatures and verifying them can be slow,\n seemingly blocking.\n \n For any operation which may potentially block, the\n SSLEngine will create a Runnable\n delegated task.  When SSLEngineResult indicates that a\n delegated task result is needed, the application must call getDelegatedTask() to obtain an outstanding delegated task and\n call its run() method (possibly using\n a different thread depending on the compute strategy).  The\n application should continue obtaining delegated tasks until no more\n exist, and try the original operation again.\n \n At the end of a communication session, applications should properly\n close the SSL/TLS/DTLS link.  The SSL/TLS/DTLS protocols have closure\n handshake messages, and these messages should be communicated to the\n peer before releasing the SSLEngine and closing the\n underlying transport mechanism.  A close can be initiated by one of:\n an SSLException, an inbound closure handshake message, or one of the\n close methods.  In all cases, closure handshake messages are\n generated by the engine, and wrap() should be repeatedly\n called until the resulting SSLEngineResult's status\n returns \"CLOSED\", or isOutboundDone() returns true.  All\n data obtained from the wrap() method should be sent to the\n peer.\n \ncloseOutbound() is used to signal the engine that the\n application will not be sending any more data.\n \n A peer will signal its intent to close by sending its own closure\n handshake message.  After this message has been received and\n processed by the local SSLEngine's unwrap()\n call, the application can detect the close by calling\n unwrap() and looking for a SSLEngineResult\n with status \"CLOSED\", or if isInboundDone() returns true.\n If for some reason the peer closes the communication link without\n sending the proper SSL/TLS/DTLS closure message, the application can\n detect the end-of-stream and can signal the engine via closeInbound() that there will no more inbound messages to\n process.  Some applications might choose to require orderly shutdown\n messages from a peer, in which case they can check that the closure\n was generated by a handshake message and not by an end-of-stream\n condition.\n \n There are two groups of cipher suites which you will need to know\n about when managing cipher suites:\n\n \n Supported cipher suites:  all the suites which are\n      supported by the SSL implementation.  This list is reported\n      using getSupportedCipherSuites().\n\n       Enabled cipher suites, which may be fewer than\n      the full set of supported suites.  This group is set using the\n      setEnabledCipherSuites(String []) method, and\n      queried using the getEnabledCipherSuites() method.\n      Initially, a default set of cipher suites will be enabled on a\n      new engine that represents the minimum suggested\n      configuration.\n \n\n Implementation defaults require that only cipher suites which\n authenticate servers and provide confidentiality be enabled by\n default.  Only if both sides explicitly agree to unauthenticated\n and/or non-private (unencrypted) communications will such a\n cipher suite be selected.\n \n Each SSL/TLS/DTLS connection must have one client and one server, thus\n each endpoint must decide which role to assume.  This choice determines\n who begins the handshaking process as well as which type of messages\n should be sent by each party.  The method setUseClientMode(boolean) configures the mode.  Once the initial\n handshaking has started, an SSLEngine can not switch\n between client and server modes, even when performing renegotiations.\n \n Applications might choose to process delegated tasks in different\n threads.  When an SSLEngine\n is created, the current AccessControlContext\n is saved.  All future delegated tasks will be processed using this\n context:  that is, all access control decisions will be made using the\n context captured at engine creation.\n\n \nConcurrency Notes:\n There are two concurrency issues to be aware of:\n\n \nThe wrap() and unwrap() methods\n      may execute concurrently of each other.\n\n       The SSL/TLS/DTLS protocols employ ordered packets.\n      Applications must take care to ensure that generated packets\n      are delivered in sequence.  If packets arrive\n      out-of-order, unexpected or fatal results may occur.\n \n      For example:\n\n      \n              synchronized (outboundLock) {\n                  sslEngine.wrap(src, dst);\n                  outboundQueue.put(dst);\n              }\n      \n\n      As a corollary, two threads must not attempt to call the same method\n      (either wrap() or unwrap()) concurrently,\n      because there is no way to guarantee the eventual packet ordering.\n ", "codes": ["public abstract class SSLEngine\nextends Object"], "fields": [], "methods": [{"method_name": "getPeerHost", "method_sig": "public String getPeerHost()", "description": "Returns the host name of the peer.\n \n Note that the value is not authenticated, and should not be\n relied upon."}, {"method_name": "getPeerPort", "method_sig": "public int getPeerPort()", "description": "Returns the port number of the peer.\n \n Note that the value is not authenticated, and should not be\n relied upon."}, {"method_name": "wrap", "method_sig": "public SSLEngineResult wrap (ByteBuffer src,\n                            ByteBuffer dst)\n                     throws SSLException", "description": "Attempts to encode a buffer of plaintext application data into\n SSL/TLS/DTLS network data.\n \n An invocation of this method behaves in exactly the same manner\n as the invocation:\n \n engine.wrap(new ByteBuffer [] { src }, 0, 1, dst);\n "}, {"method_name": "wrap", "method_sig": "public SSLEngineResult wrap (ByteBuffer[] srcs,\n                            ByteBuffer dst)\n                     throws SSLException", "description": "Attempts to encode plaintext bytes from a sequence of data\n buffers into SSL/TLS/DTLS network data.\n \n An invocation of this method behaves in exactly the same manner\n as the invocation:\n \n engine.wrap(srcs, 0, srcs.length, dst);\n "}, {"method_name": "wrap", "method_sig": "public abstract SSLEngineResult wrap (ByteBuffer[] srcs,\n                                     int offset,\n                                     int length,\n                                     ByteBuffer dst)\n                              throws SSLException", "description": "Attempts to encode plaintext bytes from a subsequence of data\n buffers into SSL/TLS/DTLS network data.  This \"gathering\"\n operation encodes, in a single invocation, a sequence of bytes\n from one or more of a given sequence of buffers.  Gathering\n wraps are often useful when implementing network protocols or\n file formats that, for example, group data into segments\n consisting of one or more fixed-length headers followed by a\n variable-length body.  See\n GatheringByteChannel for more\n information on gathering, and GatheringByteChannel.write(ByteBuffer[],\n int, int) for more information on the subsequence\n behavior.\n \n Depending on the state of the SSLEngine, this method may produce\n network data without consuming any application data (for example,\n it may generate handshake data.)\n \n The application is responsible for reliably transporting the\n network data to the peer, and for ensuring that data created by\n multiple calls to wrap() is transported in the same order in which\n it was generated.  The application must properly synchronize\n multiple calls to this method.\n \n If this SSLEngine has not yet started its initial\n handshake, this method will automatically start the handshake.\n \n This method will attempt to produce SSL/TLS/DTLS records, and will\n consume as much source data as possible, but will never consume\n more than the sum of the bytes remaining in each buffer.  Each\n ByteBuffer's position is updated to reflect the\n amount of data consumed or produced.  The limits remain the\n same.\n \n The underlying memory used by the srcs and\n dst ByteBuffers must not be the same.\n \n See the class description for more information on engine closure."}, {"method_name": "unwrap", "method_sig": "public SSLEngineResult unwrap (ByteBuffer src,\n                              ByteBuffer dst)\n                       throws SSLException", "description": "Attempts to decode SSL/TLS/DTLS network data into a plaintext\n application data buffer.\n \n An invocation of this method behaves in exactly the same manner\n as the invocation:\n \n engine.unwrap(src, new ByteBuffer [] { dst }, 0, 1);\n "}, {"method_name": "unwrap", "method_sig": "public SSLEngineResult unwrap (ByteBuffer src,\n                              ByteBuffer[] dsts)\n                       throws SSLException", "description": "Attempts to decode SSL/TLS/DTLS network data into a sequence of plaintext\n application data buffers.\n \n An invocation of this method behaves in exactly the same manner\n as the invocation:\n \n engine.unwrap(src, dsts, 0, dsts.length);\n "}, {"method_name": "unwrap", "method_sig": "public abstract SSLEngineResult unwrap (ByteBuffer src,\n                                       ByteBuffer[] dsts,\n                                       int offset,\n                                       int length)\n                                throws SSLException", "description": "Attempts to decode SSL/TLS/DTLS network data into a subsequence of\n plaintext application data buffers.  This \"scattering\"\n operation decodes, in a single invocation, a sequence of bytes\n into one or more of a given sequence of buffers.  Scattering\n unwraps are often useful when implementing network protocols or\n file formats that, for example, group data into segments\n consisting of one or more fixed-length headers followed by a\n variable-length body.  See\n ScatteringByteChannel for more\n information on scattering, and ScatteringByteChannel.read(ByteBuffer[],\n int, int) for more information on the subsequence\n behavior.\n \n Depending on the state of the SSLEngine, this method may consume\n network data without producing any application data (for example,\n it may consume handshake data.)\n \n The application is responsible for reliably obtaining the network\n data from the peer, and for invoking unwrap() on the data in the\n order it was received.  The application must properly synchronize\n multiple calls to this method.\n \n If this SSLEngine has not yet started its initial\n handshake, this method will automatically start the handshake.\n \n This method will attempt to consume one complete SSL/TLS/DTLS network\n packet, but will never consume more than the sum of the bytes\n remaining in the buffers.  Each ByteBuffer's\n position is updated to reflect the amount of data consumed or\n produced.  The limits remain the same.\n \n The underlying memory used by the src and\n dsts ByteBuffers must not be the same.\n \n The inbound network buffer may be modified as a result of this\n call:  therefore if the network data packet is required for some\n secondary purpose, the data should be duplicated before calling this\n method.  Note:  the network data will not be useful to a second\n SSLEngine, as each SSLEngine contains unique random state which\n influences the SSL/TLS/DTLS messages.\n \n See the class description for more information on engine closure."}, {"method_name": "getDelegatedTask", "method_sig": "public abstract Runnable getDelegatedTask()", "description": "Returns a delegated Runnable task for\n this SSLEngine.\n \nSSLEngine operations may require the results of\n operations that block, or may take an extended period of time to\n complete.  This method is used to obtain an outstanding Runnable operation (task).  Each task must be assigned\n a thread (possibly the current) to perform the run operation.  Once the\n run method returns, the Runnable object\n is no longer needed and may be discarded.\n \n Delegated tasks run in the AccessControlContext\n in place when this object was created.\n \n A call to this method will return each outstanding task\n exactly once.\n \n Multiple delegated tasks can be run in parallel."}, {"method_name": "closeInbound", "method_sig": "public abstract void closeInbound()\n                           throws SSLException", "description": "Signals that no more inbound network data will be sent\n to this SSLEngine.\n \n If the application initiated the closing process by calling\n closeOutbound(), under some circumstances it is not\n required that the initiator wait for the peer's corresponding\n close message.  (See section 7.2.1 of the TLS specification (RFC 2246) for more\n information on waiting for closure alerts.)  In such cases, this\n method need not be called.\n \n But if the application did not initiate the closure process, or\n if the circumstances above do not apply, this method should be\n called whenever the end of the SSL/TLS/DTLS data stream is reached.\n This ensures closure of the inbound side, and checks that the\n peer followed the SSL/TLS/DTLS close procedure properly, thus\n detecting possible truncation attacks.\n \n This method is idempotent:  if the inbound side has already\n been closed, this method does not do anything.\n \nwrap() should be\n called to flush any remaining handshake data."}, {"method_name": "isInboundDone", "method_sig": "public abstract boolean isInboundDone()", "description": "Returns whether unwrap(ByteBuffer, ByteBuffer) will\n accept any more inbound data messages."}, {"method_name": "closeOutbound", "method_sig": "public abstract void closeOutbound()", "description": "Signals that no more outbound application data will be sent\n on this SSLEngine.\n \n This method is idempotent:  if the outbound side has already\n been closed, this method does not do anything.\n \nwrap(ByteBuffer, ByteBuffer) should be\n called to flush any remaining handshake data."}, {"method_name": "isOutboundDone", "method_sig": "public abstract boolean isOutboundDone()", "description": "Returns whether wrap(ByteBuffer, ByteBuffer) will\n produce any more outbound data messages.\n \n Note that during the closure phase, a SSLEngine may\n generate handshake closure data that must be sent to the peer.\n wrap() must be called to generate this data.  When\n this method returns true, no more outbound data will be created."}, {"method_name": "getSupportedCipherSuites", "method_sig": "public abstract String[] getSupportedCipherSuites()", "description": "Returns the names of the cipher suites which could be enabled for use\n on this engine.  Normally, only a subset of these will actually\n be enabled by default, since this list may include cipher suites which\n do not meet quality of service requirements for those defaults.  Such\n cipher suites might be useful in specialized applications.\n \n The returned array includes cipher suites from the list of standard\n cipher suite names in the \n JSSE Cipher Suite Names section of the Java Cryptography\n Architecture Standard Algorithm Name Documentation, and may also\n include other cipher suites that the provider supports."}, {"method_name": "getEnabledCipherSuites", "method_sig": "public abstract String[] getEnabledCipherSuites()", "description": "Returns the names of the SSL cipher suites which are currently\n enabled for use on this engine.  When an SSLEngine is first\n created, all enabled cipher suites support a minimum quality of\n service.  Thus, in some environments this value might be empty.\n \n Note that even if a suite is enabled, it may never be used. This\n can occur if the peer does not support it, or its use is restricted,\n or the requisite certificates (and private keys) for the suite are\n not available, or an anonymous suite is enabled but authentication\n is required.\n \n The returned array includes cipher suites from the list of standard\n cipher suite names in the \n JSSE Cipher Suite Names section of the Java Cryptography\n Architecture Standard Algorithm Name Documentation, and may also\n include other cipher suites that the provider supports."}, {"method_name": "setEnabledCipherSuites", "method_sig": "public abstract void setEnabledCipherSuites (String[] suites)", "description": "Sets the cipher suites enabled for use on this engine.\n \n Each cipher suite in the suites parameter must have\n been listed by getSupportedCipherSuites(), or the method will\n fail.  Following a successful call to this method, only suites\n listed in the suites parameter are enabled for use.\n \n Note that the standard list of cipher suite names may be found in the\n \n JSSE Cipher Suite Names section of the Java Cryptography\n Architecture Standard Algorithm Name Documentation.  Providers\n may support cipher suite names not found in this list or might not\n use the recommended name for a certain cipher suite.\n \n See getEnabledCipherSuites() for more information\n on why a specific cipher suite may never be used on a engine."}, {"method_name": "getSupportedProtocols", "method_sig": "public abstract String[] getSupportedProtocols()", "description": "Returns the names of the protocols which could be enabled for use\n with this SSLEngine."}, {"method_name": "getEnabledProtocols", "method_sig": "public abstract String[] getEnabledProtocols()", "description": "Returns the names of the protocol versions which are currently\n enabled for use with this SSLEngine.\n \n Note that even if a protocol is enabled, it may never be used.\n This can occur if the peer does not support the protocol, or its\n use is restricted, or there are no enabled cipher suites supported\n by the protocol."}, {"method_name": "setEnabledProtocols", "method_sig": "public abstract void setEnabledProtocols (String[] protocols)", "description": "Set the protocol versions enabled for use on this engine.\n \n The protocols must have been listed by getSupportedProtocols()\n as being supported.  Following a successful call to this method,\n only protocols listed in the protocols parameter\n are enabled for use."}, {"method_name": "getSession", "method_sig": "public abstract SSLSession getSession()", "description": "Returns the SSLSession in use in this\n SSLEngine.\n \n These can be long lived, and frequently correspond to an entire\n login session for some user.  The session specifies a particular\n cipher suite which is being actively used by all connections in\n that session, as well as the identities of the session's client\n and server.\n \n Unlike SSLSocket.getSession()\n this method does not block until handshaking is complete.\n \n Until the initial handshake has completed, this method returns\n a session object which reports an invalid cipher suite of\n \"SSL_NULL_WITH_NULL_NULL\"."}, {"method_name": "getHandshakeSession", "method_sig": "public SSLSession getHandshakeSession()", "description": "Returns the SSLSession being constructed during a SSL/TLS/DTLS\n handshake.\n \n TLS/DTLS protocols may negotiate parameters that are needed when using\n an instance of this class, but before the SSLSession has\n been completely initialized and made available via getSession.\n For example, the list of valid signature algorithms may restrict\n the type of certificates that can used during TrustManager\n decisions, or the maximum TLS/DTLS fragment packet sizes can be\n resized to better support the network environment.\n \n This method provides early access to the SSLSession being\n constructed.  Depending on how far the handshake has progressed,\n some data may not yet be available for use.  For example, if a\n remote server will be sending a Certificate chain, but that chain\n has yet not been processed, the getPeerCertificates\n method of SSLSession will throw a\n SSLPeerUnverifiedException.  Once that chain has been processed,\n getPeerCertificates will return the proper value."}, {"method_name": "beginHandshake", "method_sig": "public abstract void beginHandshake()\n                             throws SSLException", "description": "Initiates handshaking (initial or renegotiation) on this SSLEngine.\n \n This method is not needed for the initial handshake, as the\n wrap() and unwrap() methods will\n implicitly call this method if handshaking has not already begun.\n \n Note that the peer may also request a session renegotiation with\n this SSLEngine by sending the appropriate\n session renegotiate handshake message.\n \n Unlike the SSLSocket#startHandshake() method, this method does not block\n until handshaking is completed.\n \n To force a complete SSL/TLS/DTLS session renegotiation, the current\n session should be invalidated prior to calling this method.\n \n Some protocols may not support multiple handshakes on an existing\n engine and may throw an SSLException."}, {"method_name": "getHandshakeStatus", "method_sig": "public abstract SSLEngineResult.HandshakeStatus getHandshakeStatus()", "description": "Returns the current handshake status for this SSLEngine."}, {"method_name": "setUseClientMode", "method_sig": "public abstract void setUseClientMode (boolean mode)", "description": "Configures the engine to use client (or server) mode when\n handshaking.\n \n This method must be called before any handshaking occurs.\n Once handshaking has begun, the mode can not be reset for the\n life of this engine.\n \n Servers normally authenticate themselves, and clients\n are not required to do so."}, {"method_name": "getUseClientMode", "method_sig": "public abstract boolean getUseClientMode()", "description": "Returns true if the engine is set to use client mode when\n handshaking."}, {"method_name": "setNeedClientAuth", "method_sig": "public abstract void setNeedClientAuth (boolean need)", "description": "Configures the engine to require client authentication.  This\n option is only useful for engines in the server mode.\n \n An engine's client authentication setting is one of the following:\n \n client authentication required\n  client authentication requested\n  no client authentication desired\n \n\n Unlike setWantClientAuth(boolean), if this option is set and\n the client chooses not to provide authentication information\n about itself, the negotiations will stop and the engine will\n begin its closure procedure.\n \n Calling this method overrides any previous setting made by\n this method or setWantClientAuth(boolean)."}, {"method_name": "getNeedClientAuth", "method_sig": "public abstract boolean getNeedClientAuth()", "description": "Returns true if the engine will require client authentication.\n This option is only useful to engines in the server mode."}, {"method_name": "setWantClientAuth", "method_sig": "public abstract void setWantClientAuth (boolean want)", "description": "Configures the engine to request client authentication.\n This option is only useful for engines in the server mode.\n \n An engine's client authentication setting is one of the following:\n \n client authentication required\n  client authentication requested\n  no client authentication desired\n \n\n Unlike setNeedClientAuth(boolean), if this option is set and\n the client chooses not to provide authentication information\n about itself, the negotiations will continue.\n \n Calling this method overrides any previous setting made by\n this method or setNeedClientAuth(boolean)."}, {"method_name": "getWantClientAuth", "method_sig": "public abstract boolean getWantClientAuth()", "description": "Returns true if the engine will request client authentication.\n This option is only useful for engines in the server mode."}, {"method_name": "setEnableSessionCreation", "method_sig": "public abstract void setEnableSessionCreation (boolean flag)", "description": "Controls whether new SSL sessions may be established by this engine.\n If session creations are not allowed, and there are no\n existing sessions to resume, there will be no successful\n handshaking."}, {"method_name": "getEnableSessionCreation", "method_sig": "public abstract boolean getEnableSessionCreation()", "description": "Returns true if new SSL sessions may be established by this engine."}, {"method_name": "getSSLParameters", "method_sig": "public SSLParameters getSSLParameters()", "description": "Returns the SSLParameters in effect for this SSLEngine.\n The ciphersuites and protocols of the returned SSLParameters\n are always non-null."}, {"method_name": "setSSLParameters", "method_sig": "public void setSSLParameters (SSLParameters params)", "description": "Applies SSLParameters to this engine.\n\n This means:\n \nIf params.getCipherSuites() is non-null,\n   setEnabledCipherSuites() is called with that value.\nIf params.getProtocols() is non-null,\n   setEnabledProtocols() is called with that value.\nIf params.getNeedClientAuth() or\n   params.getWantClientAuth() return true,\n   setNeedClientAuth(true) and\n   setWantClientAuth(true) are called, respectively;\n   otherwise setWantClientAuth(false) is called.\nIf params.getServerNames() is non-null, the engine will\n   configure its server names with that value.\nIf params.getSNIMatchers() is non-null, the engine will\n   configure its SNI matchers with that value.\n"}, {"method_name": "getApplicationProtocol", "method_sig": "public String getApplicationProtocol()", "description": "Returns the most recent application protocol value negotiated for this\n connection.\n \n If supported by the underlying SSL/TLS/DTLS implementation,\n application name negotiation mechanisms such as  RFC 7301 , the\n Application-Layer Protocol Negotiation (ALPN), can negotiate\n application-level values between peers."}, {"method_name": "getHandshakeApplicationProtocol", "method_sig": "public String getHandshakeApplicationProtocol()", "description": "Returns the application protocol value negotiated on a SSL/TLS\n handshake currently in progress.\n \n Like getHandshakeSession(),\n a connection may be in the middle of a handshake. The\n application protocol may or may not yet be available."}, {"method_name": "setHandshakeApplicationProtocolSelector", "method_sig": "public void setHandshakeApplicationProtocolSelector (BiFunction<SSLEngine, List<String>, String> selector)", "description": "Registers a callback function that selects an application protocol\n value for a SSL/TLS/DTLS handshake.\n The function overrides any values supplied using\n SSLParameters.setApplicationProtocols and it supports the following\n type parameters:\n \n\n SSLEngine\n The function's first argument allows the current SSLEngine\n      to be inspected, including the handshake session and configuration\n      settings.\n  List<String>\n The function's second argument lists the application protocol names\n      advertised by the TLS peer.\n  String\n The function's result is an application protocol name, or null to\n      indicate that none of the advertised names are acceptable.\n      If the return value is an empty String then application\n      protocol indications will not be used.\n      If the return value is null (no value chosen) or is a value that\n      was not advertised by the peer, the underlying protocol will\n      determine what action to take. (For example, ALPN will send a\n      \"no_application_protocol\" alert and terminate the connection.)\n \n\n\n For example, the following call registers a callback function that\n examines the TLS handshake parameters and selects an application protocol\n name:\n \n     serverEngine.setHandshakeApplicationProtocolSelector(\n         (serverEngine, clientProtocols) -> {\n             SSLSession session = serverEngine.getHandshakeSession();\n             return chooseApplicationProtocol(\n                 serverEngine,\n                 clientProtocols,\n                 session.getProtocol(),\n                 session.getCipherSuite());\n         });\n "}, {"method_name": "getHandshakeApplicationProtocolSelector", "method_sig": "public BiFunction<SSLEngine, List<String>, String> getHandshakeApplicationProtocolSelector()", "description": "Retrieves the callback function that selects an application protocol\n value during a SSL/TLS/DTLS handshake.\n See setHandshakeApplicationProtocolSelector\n for the function's type parameters."}]}