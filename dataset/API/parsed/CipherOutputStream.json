{"name": "Class CipherOutputStream", "module": "java.base", "package": "javax.crypto", "text": "A CipherOutputStream is composed of an OutputStream and a Cipher so\n that write() methods first process the data before writing them out\n to the underlying OutputStream.  The cipher must be fully\n initialized before being used by a CipherOutputStream.\n\n  For example, if the cipher is initialized for encryption, the\n CipherOutputStream will attempt to encrypt data before writing out the\n encrypted data.\n\n  This class adheres strictly to the semantics, especially the\n failure semantics, of its ancestor classes\n java.io.OutputStream and java.io.FilterOutputStream.  This class\n has exactly those methods specified in its ancestor classes, and\n overrides them all.  Moreover, this class catches all exceptions\n that are not thrown by its ancestor classes. In particular, this\n class catches BadPaddingException and other exceptions thrown by\n failed integrity checks during decryption. These exceptions are not\n re-thrown, so the client will not be informed that integrity checks\n failed. Because of this behavior, this class may not be suitable\n for use with decryption in an authenticated mode of operation (e.g. GCM)\n if the application requires explicit notification when authentication\n fails. Such an application can use the Cipher API directly as an\n alternative to using this class.\n\n  It is crucial for a programmer using this class not to use\n methods that are not defined or overriden in this class (such as a\n new method or constructor that is later added to one of the super\n classes), because the design and implementation of those methods\n are unlikely to have considered security impact with regard to\n CipherOutputStream.", "codes": ["public class CipherOutputStream\nextends FilterOutputStream"], "fields": [], "methods": [{"method_name": "write", "method_sig": "public void write (int b)\n           throws IOException", "description": "Writes the specified byte to this output stream."}, {"method_name": "write", "method_sig": "public void write (byte[] b)\n           throws IOException", "description": "Writes b.length bytes from the specified byte array\n to this output stream.\n \n The write method of\n CipherOutputStream calls the write\n method of three arguments with the three arguments\n b, 0, and b.length."}, {"method_name": "write", "method_sig": "public void write (byte[] b,\n                  int off,\n                  int len)\n           throws IOException", "description": "Writes len bytes from the specified byte array\n starting at offset off to this output stream."}, {"method_name": "flush", "method_sig": "public void flush()\n           throws IOException", "description": "Flushes this output stream by forcing any buffered output bytes\n that have already been processed by the encapsulated cipher object\n to be written out.\n\n Any bytes buffered by the encapsulated cipher\n and waiting to be processed by it will not be written out. For example,\n if the encapsulated cipher is a block cipher, and the total number of\n bytes written using one of the write methods is less than\n the cipher's block size, no bytes will be written out."}, {"method_name": "close", "method_sig": "public void close()\n           throws IOException", "description": "Closes this output stream and releases any system resources\n associated with this stream.\n \n This method invokes the doFinal method of the encapsulated\n cipher object, which causes any bytes buffered by the encapsulated\n cipher to be processed. The result is written out by calling the\n flush method of this output stream.\n \n This method resets the encapsulated cipher object to its initial state\n and calls the close method of the underlying output\n stream."}]}