{"name": "Class GaugeMonitor", "module": "java.management", "package": "javax.management.monitor", "text": "Defines a monitor MBean designed to observe the values of a gauge attribute.\n\n  A gauge monitor observes an attribute that is continuously\n variable with time. A gauge monitor sends notifications as\n follows:\n\n \n if the attribute value is increasing and becomes equal to or\n greater than the high threshold value, a threshold high\n notification is sent. The notify high flag must be set to\n true.\n\n Subsequent crossings of the high threshold value do not cause\n further notifications unless the attribute value becomes equal to\n or less than the low threshold value.\n if the attribute value is decreasing and becomes equal to or\n less than the low threshold value, a threshold low\n notification is sent. The notify low flag must be set to\n true.\n\n Subsequent crossings of the low threshold value do not cause\n further notifications unless the attribute value becomes equal to\n or greater than the high threshold value.\n\n\n This provides a hysteresis mechanism to avoid repeated triggering\n of notifications when the attribute value makes small oscillations\n around the high or low threshold value.\n\n  If the gauge difference mode is used, the value of the derived\n gauge is calculated as the difference between the observed gauge\n values for two successive observations.\n\n The derived gauge value (V[t]) is calculated using the following method:\n \nV[t] = gauge[t] - gauge[t-GP]\n\n\n This implementation of the gauge monitor requires the observed\n attribute to be of the type integer or floating-point\n (Byte, Integer, Short,\n Long, Float, Double).", "codes": ["public class GaugeMonitor\nextends Monitor\nimplements GaugeMonitorMBean"], "fields": [], "methods": [{"method_name": "start", "method_sig": "public void start()", "description": "Starts the gauge monitor."}, {"method_name": "stop", "method_sig": "public void stop()", "description": "Stops the gauge monitor."}, {"method_name": "getDerivedGauge", "method_sig": "public Number getDerivedGauge (ObjectName object)", "description": "Gets the derived gauge of the specified object, if this object is\n contained in the set of observed MBeans, or null otherwise."}, {"method_name": "getDerivedGaugeTimeStamp", "method_sig": "public long getDerivedGaugeTimeStamp (ObjectName object)", "description": "Gets the derived gauge timestamp of the specified object, if\n this object is contained in the set of observed MBeans, or\n 0 otherwise."}, {"method_name": "getDerivedGauge", "method_sig": "@Deprecated\npublic Number getDerivedGauge()", "description": "Returns the derived gauge of the first object in the set of\n observed MBeans."}, {"method_name": "getDerivedGaugeTimeStamp", "method_sig": "@Deprecated\npublic long getDerivedGaugeTimeStamp()", "description": "Gets the derived gauge timestamp of the first object in the set\n of observed MBeans."}, {"method_name": "getHighThreshold", "method_sig": "public Number getHighThreshold()", "description": "Gets the high threshold value common to all observed MBeans."}, {"method_name": "getLowThreshold", "method_sig": "public Number getLowThreshold()", "description": "Gets the low threshold value common to all observed MBeans."}, {"method_name": "setThresholds", "method_sig": "public void setThresholds (Number highValue,\n                          Number lowValue)\n                   throws IllegalArgumentException", "description": "Sets the high and the low threshold values common to all\n observed MBeans."}, {"method_name": "getNotifyHigh", "method_sig": "public boolean getNotifyHigh()", "description": "Gets the high notification's on/off switch value common to all\n observed MBeans."}, {"method_name": "setNotifyHigh", "method_sig": "public void setNotifyHigh (boolean value)", "description": "Sets the high notification's on/off switch value common to all\n observed MBeans."}, {"method_name": "getNotifyLow", "method_sig": "public boolean getNotifyLow()", "description": "Gets the low notification's on/off switch value common to all\n observed MBeans."}, {"method_name": "setNotifyLow", "method_sig": "public void setNotifyLow (boolean value)", "description": "Sets the low notification's on/off switch value common to all\n observed MBeans."}, {"method_name": "getDifferenceMode", "method_sig": "public boolean getDifferenceMode()", "description": "Gets the difference mode flag value common to all observed MBeans."}, {"method_name": "setDifferenceMode", "method_sig": "public void setDifferenceMode (boolean value)", "description": "Sets the difference mode flag value common to all observed MBeans."}, {"method_name": "getNotificationInfo", "method_sig": "public MBeanNotificationInfo[] getNotificationInfo()", "description": "Returns a NotificationInfo object containing the\n name of the Java class of the notification and the notification\n types sent by the gauge monitor."}]}