{"name": "Class PKIXParameters", "module": "java.base", "package": "java.security.cert", "text": "Parameters used as input for the PKIX CertPathValidator\n algorithm.\n \n A PKIX CertPathValidator uses these parameters to\n validate a CertPath according to the PKIX certification path\n validation algorithm.\n\n To instantiate a PKIXParameters object, an\n application must specify one or more most-trusted CAs as defined by\n the PKIX certification path validation algorithm. The most-trusted CAs\n can be specified using one of two constructors. An application\n can call PKIXParameters(Set),\n specifying a Set of TrustAnchor objects, each\n of which identify a most-trusted CA. Alternatively, an application can call\n PKIXParameters(KeyStore), specifying a\n KeyStore instance containing trusted certificate entries, each\n of which will be considered as a most-trusted CA.\n \n Once a PKIXParameters object has been created, other parameters\n can be specified (by calling setInitialPolicies\n or setDate, for instance) and then the\n PKIXParameters is passed along with the CertPath\n to be validated to CertPathValidator.validate.\n \n Any parameter that is not set (or is set to null) will\n be set to the default value for that parameter. The default value for the\n date parameter is null, which indicates\n the current time when the path is validated. The default for the\n remaining parameters is the least constrained.\n \nConcurrent Access\n\n Unless otherwise specified, the methods defined in this class are not\n thread-safe. Multiple threads that need to access a single\n object concurrently should synchronize amongst themselves and\n provide the necessary locking. Multiple threads each manipulating\n separate objects need not synchronize.", "codes": ["public class PKIXParameters\nextends Object\nimplements CertPathParameters"], "fields": [], "methods": [{"method_name": "getTrustAnchors", "method_sig": "public Set<TrustAnchor> getTrustAnchors()", "description": "Returns an immutable Set of the most-trusted\n CAs."}, {"method_name": "setTrustAnchors", "method_sig": "public void setTrustAnchors (Set<TrustAnchor> trustAnchors)\n                     throws InvalidAlgorithmParameterException", "description": "Sets the Set of most-trusted CAs.\n \n Note that the Set is copied to protect against\n subsequent modifications."}, {"method_name": "getInitialPolicies", "method_sig": "public Set<String> getInitialPolicies()", "description": "Returns an immutable Set of initial\n policy identifiers (OID strings), indicating that any one of these\n policies would be acceptable to the certificate user for the purposes of\n certification path processing. The default return value is an empty\n Set, which is interpreted as meaning that any policy would\n be acceptable."}, {"method_name": "setInitialPolicies", "method_sig": "public void setInitialPolicies (Set<String> initialPolicies)", "description": "Sets the Set of initial policy identifiers\n (OID strings), indicating that any one of these\n policies would be acceptable to the certificate user for the purposes of\n certification path processing. By default, any policy is acceptable\n (i.e. all policies), so a user that wants to allow any policy as\n acceptable does not need to call this method, or can call it\n with an empty Set (or null).\n \n Note that the Set is copied to protect against\n subsequent modifications."}, {"method_name": "setCertStores", "method_sig": "public void setCertStores (List<CertStore> stores)", "description": "Sets the list of CertStores to be used in finding\n certificates and CRLs. May be null, in which case\n no CertStores will be used. The first\n CertStores in the list may be preferred to those that\n appear later.\n \n Note that the List is copied to protect against\n subsequent modifications."}, {"method_name": "addCertStore", "method_sig": "public void addCertStore (CertStore store)", "description": "Adds a CertStore to the end of the list of\n CertStores used in finding certificates and CRLs."}, {"method_name": "getCertStores", "method_sig": "public List<CertStore> getCertStores()", "description": "Returns an immutable List of CertStores that\n are used to find certificates and CRLs."}, {"method_name": "setRevocationEnabled", "method_sig": "public void setRevocationEnabled (boolean val)", "description": "Sets the RevocationEnabled flag. If this flag is true, the default\n revocation checking mechanism of the underlying PKIX service provider\n will be used. If this flag is false, the default revocation checking\n mechanism will be disabled (not used).\n \n When a PKIXParameters object is created, this flag is set\n to true. This setting reflects the most common strategy for checking\n revocation, since each service provider must support revocation\n checking to be PKIX compliant. Sophisticated applications should set\n this flag to false when it is not practical to use a PKIX service\n provider's default revocation checking mechanism or when an alternative\n revocation checking mechanism is to be substituted (by also calling the\n addCertPathChecker or setCertPathCheckers methods)."}, {"method_name": "isRevocationEnabled", "method_sig": "public boolean isRevocationEnabled()", "description": "Checks the RevocationEnabled flag. If this flag is true, the default\n revocation checking mechanism of the underlying PKIX service provider\n will be used. If this flag is false, the default revocation checking\n mechanism will be disabled (not used). See the setRevocationEnabled method for more details on\n setting the value of this flag."}, {"method_name": "setExplicitPolicyRequired", "method_sig": "public void setExplicitPolicyRequired (boolean val)", "description": "Sets the ExplicitPolicyRequired flag. If this flag is true, an\n acceptable policy needs to be explicitly identified in every certificate.\n By default, the ExplicitPolicyRequired flag is false."}, {"method_name": "isExplicitPolicyRequired", "method_sig": "public boolean isExplicitPolicyRequired()", "description": "Checks if explicit policy is required. If this flag is true, an\n acceptable policy needs to be explicitly identified in every certificate.\n By default, the ExplicitPolicyRequired flag is false."}, {"method_name": "setPolicyMappingInhibited", "method_sig": "public void setPolicyMappingInhibited (boolean val)", "description": "Sets the PolicyMappingInhibited flag. If this flag is true, policy\n mapping is inhibited. By default, policy mapping is not inhibited (the\n flag is false)."}, {"method_name": "isPolicyMappingInhibited", "method_sig": "public boolean isPolicyMappingInhibited()", "description": "Checks if policy mapping is inhibited. If this flag is true, policy\n mapping is inhibited. By default, policy mapping is not inhibited (the\n flag is false)."}, {"method_name": "setAnyPolicyInhibited", "method_sig": "public void setAnyPolicyInhibited (boolean val)", "description": "Sets state to determine if the any policy OID should be processed\n if it is included in a certificate. By default, the any policy OID\n is not inhibited (isAnyPolicyInhibited()\n returns false)."}, {"method_name": "isAnyPolicyInhibited", "method_sig": "public boolean isAnyPolicyInhibited()", "description": "Checks whether the any policy OID should be processed if it\n is included in a certificate."}, {"method_name": "setPolicyQualifiersRejected", "method_sig": "public void setPolicyQualifiersRejected (boolean qualifiersRejected)", "description": "Sets the PolicyQualifiersRejected flag. If this flag is true,\n certificates that include policy qualifiers in a certificate\n policies extension that is marked critical are rejected.\n If the flag is false, certificates are not rejected on this basis.\n\n  When a PKIXParameters object is created, this flag is\n set to true. This setting reflects the most common (and simplest)\n strategy for processing policy qualifiers. Applications that want to use\n a more sophisticated policy must set this flag to false.\n \n Note that the PKIX certification path validation algorithm specifies\n that any policy qualifier in a certificate policies extension that is\n marked critical must be processed and validated. Otherwise the\n certification path must be rejected. If the policyQualifiersRejected flag\n is set to false, it is up to the application to validate all policy\n qualifiers in this manner in order to be PKIX compliant."}, {"method_name": "getPolicyQualifiersRejected", "method_sig": "public boolean getPolicyQualifiersRejected()", "description": "Gets the PolicyQualifiersRejected flag. If this flag is true,\n certificates that include policy qualifiers in a certificate policies\n extension that is marked critical are rejected.\n If the flag is false, certificates are not rejected on this basis.\n\n  When a PKIXParameters object is created, this flag is\n set to true. This setting reflects the most common (and simplest)\n strategy for processing policy qualifiers. Applications that want to use\n a more sophisticated policy must set this flag to false."}, {"method_name": "getDate", "method_sig": "public Date getDate()", "description": "Returns the time for which the validity of the certification path\n should be determined. If null, the current time is used.\n \n Note that the Date returned is copied to protect against\n subsequent modifications."}, {"method_name": "setDate", "method_sig": "public void setDate (Date date)", "description": "Sets the time for which the validity of the certification path\n should be determined. If null, the current time is used.\n \n Note that the Date supplied here is copied to protect\n against subsequent modifications."}, {"method_name": "setCertPathCheckers", "method_sig": "public void setCertPathCheckers (List<PKIXCertPathChecker> checkers)", "description": "Sets a List of additional certification path checkers. If\n the specified List contains an object that is not a\n PKIXCertPathChecker, it is ignored.\n \n Each PKIXCertPathChecker specified implements\n additional checks on a certificate. Typically, these are checks to\n process and verify private extensions contained in certificates.\n Each PKIXCertPathChecker should be instantiated with any\n initialization parameters needed to execute the check.\n \n This method allows sophisticated applications to extend a PKIX\n CertPathValidator or CertPathBuilder.\n Each of the specified PKIXCertPathCheckers will be called,\n in turn, by a PKIX CertPathValidator or\n CertPathBuilder for each certificate processed or\n validated.\n \n Regardless of whether these additional PKIXCertPathCheckers\n are set, a PKIX CertPathValidator or\n CertPathBuilder must perform all of the required PKIX\n checks on each certificate. The one exception to this rule is if the\n RevocationEnabled flag is set to false (see the setRevocationEnabled method).\n \n Note that the List supplied here is copied and each\n PKIXCertPathChecker in the list is cloned to protect\n against subsequent modifications."}, {"method_name": "getCertPathCheckers", "method_sig": "public List<PKIXCertPathChecker> getCertPathCheckers()", "description": "Returns the List of certification path checkers.\n The returned List is immutable, and each\n PKIXCertPathChecker in the List is cloned\n to protect against subsequent modifications."}, {"method_name": "addCertPathChecker", "method_sig": "public void addCertPathChecker (PKIXCertPathChecker checker)", "description": "Adds a PKIXCertPathChecker to the list of certification\n path checkers. See the setCertPathCheckers\n method for more details.\n \n Note that the PKIXCertPathChecker is cloned to protect\n against subsequent modifications."}, {"method_name": "getSigProvider", "method_sig": "public String getSigProvider()", "description": "Returns the signature provider's name, or null\n if not set."}, {"method_name": "setSigProvider", "method_sig": "public void setSigProvider (String sigProvider)", "description": "Sets the signature provider's name. The specified provider will be\n preferred when creating Signature\n objects. If null or not set, the first provider found\n supporting the algorithm will be used."}, {"method_name": "getTargetCertConstraints", "method_sig": "public CertSelector getTargetCertConstraints()", "description": "Returns the required constraints on the target certificate.\n The constraints are returned as an instance of CertSelector.\n If null, no constraints are defined.\n\n Note that the CertSelector returned is cloned\n to protect against subsequent modifications."}, {"method_name": "setTargetCertConstraints", "method_sig": "public void setTargetCertConstraints (CertSelector selector)", "description": "Sets the required constraints on the target certificate.\n The constraints are specified as an instance of\n CertSelector. If null, no constraints are\n defined.\n\n Note that the CertSelector specified is cloned\n to protect against subsequent modifications."}, {"method_name": "clone", "method_sig": "public Object clone()", "description": "Makes a copy of this PKIXParameters object. Changes\n to the copy will not affect the original and vice versa."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a formatted string describing the parameters."}]}