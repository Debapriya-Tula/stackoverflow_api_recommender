{"name": "Class AbstractTypeVisitor7<R,\u200bP>", "module": "java.compiler", "package": "javax.lang.model.util", "text": "A skeletal visitor of types with default behavior appropriate for\n the RELEASE_7\n source version.\n\n  WARNING: The TypeVisitor interface implemented\n by this class may have methods added to it in the future to\n accommodate new, currently unknown, language structures added to\n future versions of the Java\u2122 programming language.\n Therefore, methods whose names begin with \"visit\" may be\n added to this class in the future; to avoid incompatibilities,\n classes which extend this class should not declare any instance\n methods with names beginning with \"visit\".\n\n When such a new visit method is added, the default\n implementation in this class will be to call the visitUnknown method.  A new abstract type visitor\n class will also be introduced to correspond to the new language\n level; this visitor will have different default behavior for the\n visit method in question.  When the new visitor is introduced, all\n or portions of this visitor may be deprecated.", "codes": ["@SupportedSourceVersion(RELEASE_7)\npublic abstract class AbstractTypeVisitor7<R, P>\nextends AbstractTypeVisitor6<R, P>"], "fields": [], "methods": [{"method_name": "visitUnion", "method_sig": "public abstract R visitUnion (UnionType t,\n                             P p)", "description": "Visits a UnionType in a manner defined by a subclass."}]}