{"name": "Class RescaleOp", "module": "java.desktop", "package": "java.awt.image", "text": "This class performs a pixel-by-pixel rescaling of the data in the\n source image by multiplying the sample values for each pixel by a scale\n factor and then adding an offset. The scaled sample values are clipped\n to the minimum/maximum representable in the destination image.\n \n The pseudo code for the rescaling operation is as follows:\n \nfor each pixel from Source object {\n    for each band/component of the pixel {\n        dstElement = (srcElement*scaleFactor) + offset\n    }\n}\n \n\n For Rasters, rescaling operates on bands.  The number of\n sets of scaling constants may be one, in which case the same constants\n are applied to all bands, or it must equal the number of Source\n Raster bands.\n \n For BufferedImages, rescaling operates on color and alpha components.\n The number of sets of scaling constants may be one, in which case the\n same constants are applied to all color (but not alpha) components.\n Otherwise, the  number of sets of scaling constants may\n equal the number of Source color components, in which case no\n rescaling of the alpha component (if present) is performed.\n If neither of these cases apply, the number of sets of scaling constants\n must equal the number of Source color components plus alpha components,\n in which case all color and alpha components are rescaled.\n \n BufferedImage sources with premultiplied alpha data are treated in the same\n manner as non-premultiplied images for purposes of rescaling.  That is,\n the rescaling is done per band on the raw data of the BufferedImage source\n without regard to whether the data is premultiplied.  If a color conversion\n is required to the destination ColorModel, the premultiplied state of\n both source and destination will be taken into account for this step.\n \n Images with an IndexColorModel cannot be rescaled.\n \n If a RenderingHints object is specified in the constructor, the\n color rendering hint and the dithering hint may be used when color\n conversion is required.\n \n Note that in-place operation is allowed (i.e. the source and destination can\n be the same object).", "codes": ["public class RescaleOp\nextends Object\nimplements BufferedImageOp, RasterOp"], "fields": [], "methods": [{"method_name": "getScaleFactors", "method_sig": "public final float[] getScaleFactors (float[] scaleFactors)", "description": "Returns the scale factors in the given array. The array is also\n returned for convenience.  If scaleFactors is null, a new array\n will be allocated."}, {"method_name": "getOffsets", "method_sig": "public final float[] getOffsets (float[] offsets)", "description": "Returns the offsets in the given array. The array is also returned\n for convenience.  If offsets is null, a new array\n will be allocated."}, {"method_name": "getNumFactors", "method_sig": "public final int getNumFactors()", "description": "Returns the number of scaling factors and offsets used in this\n RescaleOp."}, {"method_name": "filter", "method_sig": "public final BufferedImage filter (BufferedImage src,\n                                  BufferedImage dst)", "description": "Rescales the source BufferedImage.\n If the color model in the source image is not the same as that\n in the destination image, the pixels will be converted\n in the destination.  If the destination image is null,\n a BufferedImage will be created with the source ColorModel.\n An IllegalArgumentException may be thrown if the number of\n scaling factors/offsets in this object does not meet the\n restrictions stated in the class comments above, or if the\n source image has an IndexColorModel."}, {"method_name": "filter", "method_sig": "public final WritableRaster filter (Raster src,\n                                   WritableRaster dst)", "description": "Rescales the pixel data in the source Raster.\n If the destination Raster is null, a new Raster will be created.\n The source and destination must have the same number of bands.\n Otherwise, an IllegalArgumentException is thrown.\n Note that the number of scaling factors/offsets in this object must\n meet the restrictions stated in the class comments above.\n Otherwise, an IllegalArgumentException is thrown."}, {"method_name": "getBounds2D", "method_sig": "public final Rectangle2D getBounds2D (BufferedImage src)", "description": "Returns the bounding box of the rescaled destination image.  Since\n this is not a geometric operation, the bounding box does not\n change."}, {"method_name": "getBounds2D", "method_sig": "public final Rectangle2D getBounds2D (Raster src)", "description": "Returns the bounding box of the rescaled destination Raster.  Since\n this is not a geometric operation, the bounding box does not\n change."}, {"method_name": "createCompatibleDestImage", "method_sig": "public BufferedImage createCompatibleDestImage (BufferedImage src,\n                                               ColorModel destCM)", "description": "Creates a zeroed destination image with the correct size and number of\n bands."}, {"method_name": "createCompatibleDestRaster", "method_sig": "public WritableRaster createCompatibleDestRaster (Raster src)", "description": "Creates a zeroed-destination Raster with the correct\n size and number of bands, given this source."}, {"method_name": "getPoint2D", "method_sig": "public final Point2D getPoint2D (Point2D srcPt,\n                                Point2D dstPt)", "description": "Returns the location of the destination point given a\n point in the source.  If dstPt is non-null, it will\n be used to hold the return value.  Since this is not a geometric\n operation, the srcPt will equal the dstPt."}, {"method_name": "getRenderingHints", "method_sig": "public final RenderingHints getRenderingHints()", "description": "Returns the rendering hints for this op."}]}