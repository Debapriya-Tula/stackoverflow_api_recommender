{"name": "Interface SourcePositions", "module": "jdk.compiler", "package": "com.sun.source.util", "text": "Provides methods to obtain the position of a Tree within a CompilationUnit.\n A position is defined as a simple character offset from the start of a\n CompilationUnit where the first character is at offset 0.", "codes": ["public interface SourcePositions"], "fields": [], "methods": [{"method_name": "getStartPosition", "method_sig": "long getStartPosition (CompilationUnitTree file,\n                      Tree tree)", "description": "Returns the starting position of tree within file.  If tree is not found within\n file, or if the starting position is not available,\n return Diagnostic.NOPOS.\n The returned position must be at the start of the yield of this tree, that\n is for any sub-tree of this tree, the following must hold:\n\n \ntree.getStartPosition() <= subtree.getStartPosition() or \ntree.getStartPosition() == NOPOS or \nsubtree.getStartPosition() == NOPOS\n"}, {"method_name": "getEndPosition", "method_sig": "long getEndPosition (CompilationUnitTree file,\n                    Tree tree)", "description": "Returns the ending position of tree within file.  If tree is not found within\n file, or if the ending position is not available,\n return Diagnostic.NOPOS.\n The returned position must be at the end of the yield of this tree,\n that is for any sub-tree of this tree, the following must hold:\n\n \ntree.getEndPosition() >= subtree.getEndPosition() or \ntree.getEndPosition() == NOPOS or \nsubtree.getEndPosition() == NOPOS\n\n\n In addition, the following must hold:\n\n \ntree.getStartPosition() <= tree.getEndPosition()  or \ntree.getStartPosition() == NOPOS or \ntree.getEndPosition() == NOPOS\n"}]}