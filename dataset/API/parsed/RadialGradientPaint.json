{"name": "Class RadialGradientPaint", "module": "java.desktop", "package": "java.awt", "text": "The RadialGradientPaint class provides a way to fill a shape with\n a circular radial color gradient pattern. The user may specify 2 or more\n gradient colors, and this paint will provide an interpolation between\n each color.\n \n The user must specify the circle controlling the gradient pattern,\n which is described by a center point and a radius.  The user can also\n specify a separate focus point within that circle, which controls the\n location of the first color of the gradient.  By default the focus is\n set to be the center of the circle.\n \n This paint will map the first color of the gradient to the focus point,\n and the last color to the perimeter of the circle, interpolating\n smoothly for any in-between colors specified by the user.  Any line drawn\n from the focus point to the circumference will thus span all the gradient\n colors.\n \n Specifying a focus point outside of the radius of the circle will cause\n the rings of the gradient pattern to be centered on the point just inside\n the edge of the circle in the direction of the focus point.\n The rendering will internally use this modified location as if it were\n the specified focus point.\n \n The user must provide an array of floats specifying how to distribute the\n colors along the gradient.  These values should range from 0.0 to 1.0 and\n act like keyframes along the gradient (they mark where the gradient should\n be exactly a particular color).\n \n In the event that the user does not set the first keyframe value equal\n to 0 and/or the last keyframe value equal to 1, keyframes will be created\n at these positions and the first and last colors will be replicated there.\n So, if a user specifies the following arrays to construct a gradient:\n\n     {Color.BLUE, Color.RED}, {.3f, .7f}\n \n this will be converted to a gradient with the following keyframes:\n\n     {Color.BLUE, Color.BLUE, Color.RED, Color.RED}, {0f, .3f, .7f, 1f}\n \n\n The user may also select what action the RadialGradientPaint object\n takes when it is filling the space outside the circle's radius by\n setting CycleMethod to either REFLECTION or REPEAT.\n The gradient color proportions are equal for any particular line drawn\n from the focus point. The following figure shows that the distance AB\n is equal to the distance BC, and the distance AD is equal to the distance DE.\n \n\n\n If the gradient and graphics rendering transforms are uniformly scaled and\n the user sets the focus so that it coincides with the center of the circle,\n the gradient color proportions are equal for any line drawn from the center.\n The following figure shows the distances AB, BC, AD, and DE. They are all equal.\n \n\n\n Note that some minor variations in distances may occur due to sampling at\n the granularity of a pixel.\n If no cycle method is specified, NO_CYCLE will be chosen by\n default, which means the last keyframe color will be used to fill the\n remaining area.\n \n The colorSpace parameter allows the user to specify in which colorspace\n the interpolation should be performed, default sRGB or linearized RGB.\n\n \n The following code demonstrates typical usage of\n RadialGradientPaint, where the center and focus points are\n the same:\n \n     Point2D center = new Point2D.Float(50, 50);\n     float radius = 25;\n     float[] dist = {0.0f, 0.2f, 1.0f};\n     Color[] colors = {Color.RED, Color.WHITE, Color.BLUE};\n     RadialGradientPaint p =\n         new RadialGradientPaint(center, radius, dist, colors);\n \n\n This image demonstrates the example code above, with default\n (centered) focus for each of the three cycle methods:\n \n\n\n It is also possible to specify a non-centered focus point, as\n in the following code:\n \n     Point2D center = new Point2D.Float(50, 50);\n     float radius = 25;\n     Point2D focus = new Point2D.Float(40, 40);\n     float[] dist = {0.0f, 0.2f, 1.0f};\n     Color[] colors = {Color.RED, Color.WHITE, Color.BLUE};\n     RadialGradientPaint p =\n         new RadialGradientPaint(center, radius, focus,\n                                 dist, colors,\n                                 CycleMethod.NO_CYCLE);\n \n\n This image demonstrates the previous example code, with non-centered\n focus for each of the three cycle methods:\n \n", "codes": ["public final class RadialGradientPaint\nextends MultipleGradientPaint"], "fields": [], "methods": [{"method_name": "createContext", "method_sig": "public PaintContext createContext (ColorModel cm,\n                                  Rectangle deviceBounds,\n                                  Rectangle2D userBounds,\n                                  AffineTransform transform,\n                                  RenderingHints hints)", "description": "Creates and returns a PaintContext used to\n generate a circular radial color gradient pattern.\n See the description of the createContext method\n for information on null parameter handling."}, {"method_name": "getCenterPoint", "method_sig": "public Point2D getCenterPoint()", "description": "Returns a copy of the center point of the radial gradient."}, {"method_name": "getFocusPoint", "method_sig": "public Point2D getFocusPoint()", "description": "Returns a copy of the focus point of the radial gradient.\n Note that if the focus point specified when the radial gradient\n was constructed lies outside of the radius of the circle, this\n method will still return the original focus point even though\n the rendering may center the rings of color on a different\n point that lies inside the radius."}, {"method_name": "getRadius", "method_sig": "public float getRadius()", "description": "Returns the radius of the circle defining the radial gradient."}]}