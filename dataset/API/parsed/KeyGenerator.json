{"name": "Class KeyGenerator", "module": "java.base", "package": "javax.crypto", "text": "This class provides the functionality of a secret (symmetric) key generator.\n\n Key generators are constructed using one of the getInstance\n class methods of this class.\n\n KeyGenerator objects are reusable, i.e., after a key has been\n generated, the same KeyGenerator object can be re-used to generate further\n keys.\n\n There are two ways to generate a key: in an algorithm-independent\n manner, and in an algorithm-specific manner.\n The only difference between the two is the initialization of the object:\n\n \nAlgorithm-Independent Initialization\nAll key generators share the concepts of a keysize and a\n source of randomness.\n There is an\n init\n method in this KeyGenerator class that takes these two universally\n shared types of arguments. There is also one that takes just a\n keysize argument, and uses the SecureRandom implementation\n of the highest-priority installed provider as the source of randomness\n (or a system-provided source of randomness if none of the installed\n providers supply a SecureRandom implementation), and one that takes just a\n source of randomness.\n\n Since no other parameters are specified when you call the above\n algorithm-independent init methods, it is up to the\n provider what to do about the algorithm-specific parameters (if any) to be\n associated with each of the keys.\n\n Algorithm-Specific Initialization\nFor situations where a set of algorithm-specific parameters already\n exists, there are two\n init\n methods that have an AlgorithmParameterSpec\n argument. One also has a SecureRandom argument, while the\n other uses the SecureRandom implementation\n of the highest-priority installed provider as the source of randomness\n (or a system-provided source of randomness if none of the installed\n providers supply a SecureRandom implementation).\n \nIn case the client does not explicitly initialize the KeyGenerator\n (via a call to an init method), each provider must\n supply (and document) a default initialization.\n See the Keysize Restriction sections of the\n JDK Providers\n document for information on the KeyGenerator defaults used by\n JDK providers.\n However, note that defaults may vary across different providers.\n Additionally, the default value for a provider may change in a future\n version. Therefore, it is recommended to explicitly initialize the\n KeyGenerator instead of relying on provider-specific defaults.\n\n  Every implementation of the Java platform is required to support the\n following standard KeyGenerator algorithms with the keysizes in\n parentheses:\n \nAES (128)\nDES (56)\nDESede (168)\nHmacSHA1\nHmacSHA256\n\n These algorithms are described in the \n KeyGenerator section of the\n Java Security Standard Algorithm Names Specification.\n Consult the release documentation for your implementation to see if any\n other algorithms are supported.", "codes": ["public class KeyGenerator\nextends Object"], "fields": [], "methods": [{"method_name": "getAlgorithm", "method_sig": "public final String getAlgorithm()", "description": "Returns the algorithm name of this KeyGenerator object.\n\n This is the same name that was specified in one of the\n getInstance calls that created this\n KeyGenerator object."}, {"method_name": "getInstance", "method_sig": "public static final KeyGenerator getInstance (String algorithm)\n                                      throws NoSuchAlgorithmException", "description": "Returns a KeyGenerator object that generates secret keys\n for the specified algorithm.\n\n  This method traverses the list of registered security Providers,\n starting with the most preferred Provider.\n A new KeyGenerator object encapsulating the\n KeyGeneratorSpi implementation from the first\n Provider that supports the specified algorithm is returned.\n\n  Note that the list of registered providers may be retrieved via\n the Security.getProviders() method."}, {"method_name": "getInstance", "method_sig": "public static final KeyGenerator getInstance (String algorithm,\n                                             String provider)\n                                      throws NoSuchAlgorithmException,\n                                             NoSuchProviderException", "description": "Returns a KeyGenerator object that generates secret keys\n for the specified algorithm.\n\n  A new KeyGenerator object encapsulating the\n KeyGeneratorSpi implementation from the specified provider\n is returned.  The specified provider must be registered\n in the security provider list.\n\n  Note that the list of registered providers may be retrieved via\n the Security.getProviders() method."}, {"method_name": "getInstance", "method_sig": "public static final KeyGenerator getInstance (String algorithm,\n                                             Provider provider)\n                                      throws NoSuchAlgorithmException", "description": "Returns a KeyGenerator object that generates secret keys\n for the specified algorithm.\n\n  A new KeyGenerator object encapsulating the\n KeyGeneratorSpi implementation from the specified Provider\n object is returned.  Note that the specified Provider object\n does not have to be registered in the provider list."}, {"method_name": "getProvider", "method_sig": "public final Provider getProvider()", "description": "Returns the provider of this KeyGenerator object."}, {"method_name": "init", "method_sig": "public final void init (SecureRandom random)", "description": "Initializes this key generator."}, {"method_name": "init", "method_sig": "public final void init (AlgorithmParameterSpec params)\n                throws InvalidAlgorithmParameterException", "description": "Initializes this key generator with the specified parameter set.\n\n  If this key generator requires any random bytes, it will get them\n using the\n SecureRandom\n implementation of the highest-priority installed\n provider as the source of randomness.\n (If none of the installed providers supply an implementation of\n SecureRandom, a system-provided source of randomness will be used.)"}, {"method_name": "init", "method_sig": "public final void init (AlgorithmParameterSpec params,\n                       SecureRandom random)\n                throws InvalidAlgorithmParameterException", "description": "Initializes this key generator with the specified parameter\n set and a user-provided source of randomness."}, {"method_name": "init", "method_sig": "public final void init (int keysize)", "description": "Initializes this key generator for a certain keysize.\n\n  If this key generator requires any random bytes, it will get them\n using the\n SecureRandom\n implementation of the highest-priority installed\n provider as the source of randomness.\n (If none of the installed providers supply an implementation of\n SecureRandom, a system-provided source of randomness will be used.)"}, {"method_name": "init", "method_sig": "public final void init (int keysize,\n                       SecureRandom random)", "description": "Initializes this key generator for a certain keysize, using a\n user-provided source of randomness."}, {"method_name": "generateKey", "method_sig": "public final SecretKey generateKey()", "description": "Generates a secret key."}]}