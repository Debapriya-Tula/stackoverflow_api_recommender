{"name": "Class InputMethodHighlight", "module": "java.desktop", "package": "java.awt.im", "text": "An InputMethodHighlight is used to describe the highlight\n attributes of text being composed.\n The description can be at two levels:\n at the abstract level it specifies the conversion state and whether the\n text is selected; at the concrete level it specifies style attributes used\n to render the highlight.\n An InputMethodHighlight must provide the description at the\n abstract level; it may or may not provide the description at the concrete\n level.\n If no concrete style is provided, a renderer should use\n Toolkit.mapInputMethodHighlight(java.awt.im.InputMethodHighlight) to map to a concrete style.\n \n The abstract description consists of three fields: selected,\n state, and variation.\n selected indicates whether the text range is the one that the\n input method is currently working on, for example, the segment for which\n conversion candidates are currently shown in a menu.\n state represents the conversion state. State values are defined\n by the input method framework and should be distinguished in all\n mappings from abstract to concrete styles. Currently defined state values\n are raw (unconverted) and converted.\n These state values are recommended for use before and after the\n main conversion step of text composition, say, before and after kana->kanji\n or pinyin->hanzi conversion.\n The variation field allows input methods to express additional\n information about the conversion results.\n \n\n InputMethodHighlight instances are typically used as attribute values\n returned from AttributedCharacterIterator for the INPUT_METHOD_HIGHLIGHT\n attribute. They may be wrapped into Annotation\n instances to indicate separate text segments.", "codes": ["public class InputMethodHighlight\nextends Object"], "fields": [{"field_name": "RAW_TEXT", "field_sig": "public static final\u00a0int RAW_TEXT", "description": "Constant for the raw text state."}, {"field_name": "CONVERTED_TEXT", "field_sig": "public static final\u00a0int CONVERTED_TEXT", "description": "Constant for the converted text state."}, {"field_name": "UNSELECTED_RAW_TEXT_HIGHLIGHT", "field_sig": "public static final\u00a0InputMethodHighlight UNSELECTED_RAW_TEXT_HIGHLIGHT", "description": "Constant for the default highlight for unselected raw text."}, {"field_name": "SELECTED_RAW_TEXT_HIGHLIGHT", "field_sig": "public static final\u00a0InputMethodHighlight SELECTED_RAW_TEXT_HIGHLIGHT", "description": "Constant for the default highlight for selected raw text."}, {"field_name": "UNSELECTED_CONVERTED_TEXT_HIGHLIGHT", "field_sig": "public static final\u00a0InputMethodHighlight UNSELECTED_CONVERTED_TEXT_HIGHLIGHT", "description": "Constant for the default highlight for unselected converted text."}, {"field_name": "SELECTED_CONVERTED_TEXT_HIGHLIGHT", "field_sig": "public static final\u00a0InputMethodHighlight SELECTED_CONVERTED_TEXT_HIGHLIGHT", "description": "Constant for the default highlight for selected converted text."}], "methods": [{"method_name": "isSelected", "method_sig": "public boolean isSelected()", "description": "Returns whether the text range is selected."}, {"method_name": "getState", "method_sig": "public int getState()", "description": "Returns the conversion state of the text range."}, {"method_name": "getVariation", "method_sig": "public int getVariation()", "description": "Returns the variation of the text range."}, {"method_name": "getStyle", "method_sig": "public Map<TextAttribute, ?> getStyle()", "description": "Returns the rendering style attributes for the text range, or null."}]}