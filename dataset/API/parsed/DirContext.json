{"name": "Interface DirContext", "module": "java.naming", "package": "javax.naming.directory", "text": "The directory service interface, containing\n methods for examining and updating attributes\n associated with objects, and for searching the directory.\n\n Names\n Each name passed as an argument to a DirContext method is relative\n to that context.  The empty name is used to name the context itself.\n The name parameter may never be null.\n \n Most of the methods have overloaded versions with one taking a\n Name parameter and one taking a String.\n These overloaded versions are equivalent in that if\n the Name and String parameters are just\n different representations of the same name, then the overloaded\n versions of the same methods behave the same.\n In the method descriptions below, only one version is documented.\n The second version instead has a link to the first:  the same\n documentation applies to both.\n \n See Context for a discussion on the interpretation of the\n name argument to the Context methods. These same rules\n apply to the name argument to the DirContext methods.\n\n Attribute Models\n There are two basic models of what attributes should be\n associated with.  First, attributes may be directly associated with a\n DirContext object.\n In this model, an attribute operation on the named object is\n roughly equivalent\n to a lookup on the name (which returns the DirContext object),\n followed by the attribute operation invoked on the DirContext object\n in which the caller supplies an empty name. The attributes can be viewed\n as being stored along with the object (note that this does not imply that\n the implementation must do so).\n \n The second model is that attributes are associated with a\n name (typically an atomic name) in a DirContext.\n In this model, an attribute operation on the named object is\n roughly equivalent to a lookup on the name of the parent DirContext of the\n named object, followed by the attribute operation invoked on the parent\n in which the caller supplies the terminal atomic name.\n The attributes can be viewed as being stored in the parent DirContext\n (again, this does not imply that the implementation must do so).\n Objects that are not DirContexts can have attributes, as long as\n their parents are DirContexts.\n \n JNDI support both of these models.\n It is up to the individual service providers to decide where to\n \"store\" attributes.\n JNDI clients are safest when they do not make assumptions about\n whether an object's attributes are stored as part of the object, or stored\n within the parent object and associated with the object's name.\n\n Attribute Type Names\n In the getAttributes() and search() methods,\n you can supply the attributes to return by supplying a list of\n attribute names (strings).\n The attributes that you get back might not have the same names as the\n attribute names you have specified. This is because some directories\n support features that cause them to return other attributes.  Such\n features include attribute subclassing, attribute name synonyms, and\n attribute language codes.\n \n In attribute subclassing, attributes are defined in a class hierarchy.\n In some directories, for example, the \"name\" attribute might be the\n superclass of all name-related attributes, including \"commonName\" and\n \"surName\".  Asking for the \"name\" attribute might return both the\n \"commonName\" and \"surName\" attributes.\n \n With attribute type synonyms, a directory can assign multiple names to\n the same attribute. For example, \"cn\" and \"commonName\" might both\n refer to the same attribute. Asking for \"cn\" might return the\n \"commonName\" attribute.\n \n Some directories support the language codes for attributes.\n Asking such a directory for the \"description\" attribute, for example,\n might return all of the following attributes:\n \ndescription\n description;lang-en\n description;lang-de\n description;lang-fr\n \nOperational Attributes\n\n Some directories have the notion of \"operational attributes\" which are\n attributes associated with a directory object for administrative\n purposes. An example of operational attributes is the access control\n list for an object.\n \n In the getAttributes() and search() methods,\n you can specify that all attributes associated with the requested objects\n be returned by supply null as the list of attributes to return.\n The attributes returned do not include operational attributes.\n In order to retrieve operational attributes, you must name them explicitly.\n\n\n Named Context\n\n There are certain methods in which the name must resolve to a context\n (for example, when searching a single level context). The documentation\n of such methods\n use the term named context to describe their name parameter.\n For these methods, if the named object is not a DirContext,\n NotContextException is thrown.\n Aside from these methods, there is no requirement that the\n named object be a DirContext.\n\nParameters\n\n An Attributes, SearchControls, or array object\n passed as a parameter to any method will not be modified by the\n service provider.  The service provider may keep a reference to it\n for the duration of the operation, including any enumeration of the\n method's results and the processing of any referrals generated.\n The caller should not modify the object during this time.\n An Attributes object returned by any method is owned by\n the caller.  The caller may subsequently modify it; the service\n provider will not.\n\nExceptions\n\n All the methods in this interface can throw a NamingException or\n any of its subclasses. See NamingException and their subclasses\n for details on each exception.", "codes": ["public interface DirContext\nextends Context"], "fields": [{"field_name": "ADD_ATTRIBUTE", "field_sig": "static final\u00a0int ADD_ATTRIBUTE", "description": "This constant specifies to add an attribute with the specified values.\n \n If attribute does not exist,\n create the attribute.  The resulting attribute has a union of the\n specified value set and the prior value set.\n Adding an attribute with no value will throw\n InvalidAttributeValueException if the attribute must have\n at least  one value.  For a single-valued attribute where that attribute\n already exists, throws AttributeInUseException.\n If attempting to add more than one value to a single-valued attribute,\n throws InvalidAttributeValueException.\n \n The value of this constant is 1."}, {"field_name": "REPLACE_ATTRIBUTE", "field_sig": "static final\u00a0int REPLACE_ATTRIBUTE", "description": "This constant specifies to replace an attribute with specified values.\n\n If attribute already exists,\n replaces all existing values with new specified values.  If the\n attribute does not exist, creates it.  If no value is specified,\n deletes all the values of the attribute.\n Removal of the last value will remove the attribute if the attribute\n is required to have at least one value.  If\n attempting to add more than one value to a single-valued attribute,\n throws InvalidAttributeValueException.\n \n The value of this constant is 2."}, {"field_name": "REMOVE_ATTRIBUTE", "field_sig": "static final\u00a0int REMOVE_ATTRIBUTE", "description": "This constant specifies to delete\n the specified attribute values from the attribute.\n\n The resulting attribute has the set difference of its prior value set\n and the specified value set.\n If no values are specified, deletes the entire attribute.\n If the attribute does not exist, or if some or all members of the\n specified value set do not exist, this absence may be ignored\n and the operation succeeds, or a NamingException may be thrown to\n indicate the absence.\n Removal of the last value will remove the attribute if the\n attribute is required to have at least one value.\n \n The value of this constant is 3."}], "methods": [{"method_name": "getAttributes", "method_sig": "Attributes getAttributes (Name name)\n                  throws NamingException", "description": "Retrieves all of the attributes associated with a named object.\n See the class description regarding attribute models, attribute\n type names, and operational attributes."}, {"method_name": "getAttributes", "method_sig": "Attributes getAttributes (String name)\n                  throws NamingException", "description": "Retrieves all of the attributes associated with a named object.\n See getAttributes(Name) for details."}, {"method_name": "getAttributes", "method_sig": "Attributes getAttributes (Name name,\n                         String[] attrIds)\n                  throws NamingException", "description": "Retrieves selected attributes associated with a named object.\n See the class description regarding attribute models, attribute\n type names, and operational attributes.\n\n  If the object does not have an attribute\n specified, the directory will ignore the nonexistent attribute\n and return those requested attributes that the object does have.\n\n  A directory might return more attributes than was requested\n (see Attribute Type Names in the class description),\n but is not allowed to return arbitrary, unrelated attributes.\n\n  See also Operational Attributes in the class\n description."}, {"method_name": "getAttributes", "method_sig": "Attributes getAttributes (String name,\n                         String[] attrIds)\n                  throws NamingException", "description": "Retrieves selected attributes associated with a named object.\n See getAttributes(Name, String[]) for details."}, {"method_name": "modifyAttributes", "method_sig": "void modifyAttributes (Name name,\n                      int mod_op,\n                      Attributes attrs)\n               throws NamingException", "description": "Modifies the attributes associated with a named object.\n The order of the modifications is not specified.  Where\n possible, the modifications are performed atomically."}, {"method_name": "modifyAttributes", "method_sig": "void modifyAttributes (String name,\n                      int mod_op,\n                      Attributes attrs)\n               throws NamingException", "description": "Modifies the attributes associated with a named object.\n See modifyAttributes(Name, int, Attributes) for details."}, {"method_name": "modifyAttributes", "method_sig": "void modifyAttributes (Name name,\n                      ModificationItem[] mods)\n               throws NamingException", "description": "Modifies the attributes associated with a named object using\n an ordered list of modifications.\n The modifications are performed\n in the order specified.  Each modification specifies a\n modification operation code and an attribute on which to\n operate.  Where possible, the modifications are\n performed atomically."}, {"method_name": "modifyAttributes", "method_sig": "void modifyAttributes (String name,\n                      ModificationItem[] mods)\n               throws NamingException", "description": "Modifies the attributes associated with a named object using\n an ordered list of modifications.\n See modifyAttributes(Name, ModificationItem[]) for details."}, {"method_name": "bind", "method_sig": "void bind (Name name,\n          Object obj,\n          Attributes attrs)\n   throws NamingException", "description": "Binds a name to an object, along with associated attributes.\n If attrs is null, the resulting binding will have\n the attributes associated with obj if obj is a\n DirContext, and no attributes otherwise.\n If attrs is non-null, the resulting binding will have\n attrs as its attributes; any attributes associated with\n obj are ignored."}, {"method_name": "bind", "method_sig": "void bind (String name,\n          Object obj,\n          Attributes attrs)\n   throws NamingException", "description": "Binds a name to an object, along with associated attributes.\n See bind(Name, Object, Attributes) for details."}, {"method_name": "rebind", "method_sig": "void rebind (Name name,\n            Object obj,\n            Attributes attrs)\n     throws NamingException", "description": "Binds a name to an object, along with associated attributes,\n overwriting any existing binding.\n If attrs is null and obj is a DirContext,\n the attributes from obj are used.\n If attrs is null and obj is not a DirContext,\n any existing attributes associated with the object already bound\n in the directory remain unchanged.\n If attrs is non-null, any existing attributes associated with\n the object already bound in the directory are removed and attrs\n is associated with the named object.  If obj is a\n DirContext and attrs is non-null, the attributes\n of obj are ignored."}, {"method_name": "rebind", "method_sig": "void rebind (String name,\n            Object obj,\n            Attributes attrs)\n     throws NamingException", "description": "Binds a name to an object, along with associated attributes,\n overwriting any existing binding.\n See rebind(Name, Object, Attributes) for details."}, {"method_name": "createSubcontext", "method_sig": "DirContext createSubcontext (Name name,\n                            Attributes attrs)\n                     throws NamingException", "description": "Creates and binds a new context, along with associated attributes.\n This method creates a new subcontext with the given name, binds it in\n the target context (that named by all but terminal atomic\n component of the name), and associates the supplied attributes\n with the newly created object.\n All intermediate and target contexts must already exist.\n If attrs is null, this method is equivalent to\n Context.createSubcontext()."}, {"method_name": "createSubcontext", "method_sig": "DirContext createSubcontext (String name,\n                            Attributes attrs)\n                     throws NamingException", "description": "Creates and binds a new context, along with associated attributes.\n See createSubcontext(Name, Attributes) for details."}, {"method_name": "getSchema", "method_sig": "DirContext getSchema (Name name)\n              throws NamingException", "description": "Retrieves the schema associated with the named object.\n The schema describes rules regarding the structure of the namespace\n and the attributes stored within it.  The schema\n specifies what types of objects can be added to the directory and where\n they can be added; what mandatory and optional attributes an object\n can have. The range of support for schemas is directory-specific.\n\n  This method returns the root of the schema information tree\n that is applicable to the named object. Several named objects\n (or even an entire directory) might share the same schema.\n\n  Issues such as structure and contents of the schema tree,\n permission to modify to the contents of the schema\n tree, and the effect of such modifications on the directory\n are dependent on the underlying directory."}, {"method_name": "getSchema", "method_sig": "DirContext getSchema (String name)\n              throws NamingException", "description": "Retrieves the schema associated with the named object.\n See getSchema(Name) for details."}, {"method_name": "getSchemaClassDefinition", "method_sig": "DirContext getSchemaClassDefinition (Name name)\n                             throws NamingException", "description": "Retrieves a context containing the schema objects of the\n named object's class definitions.\n\n One category of information found in directory schemas is\n class definitions.  An \"object class\" definition\n specifies the object's type and what attributes (mandatory\n and optional) the object must/can have. Note that the term\n \"object class\" being referred to here is in the directory sense\n rather than in the Java sense.\n For example, if the named object is a directory object of\n \"Person\" class, getSchemaClassDefinition() would return a\n DirContext representing the (directory's) object class\n definition of \"Person\".\n\n The information that can be retrieved from an object class definition\n is directory-dependent.\n\n Prior to JNDI 1.2, this method\n returned a single schema object representing the class definition of\n the named object.\n Since JNDI 1.2, this method returns a DirContext containing\n all of the named object's class definitions."}, {"method_name": "getSchemaClassDefinition", "method_sig": "DirContext getSchemaClassDefinition (String name)\n                             throws NamingException", "description": "Retrieves a context containing the schema objects of the\n named object's class definitions.\n See getSchemaClassDefinition(Name) for details."}, {"method_name": "search", "method_sig": "NamingEnumeration<SearchResult> search (Name name,\n                                       Attributes matchingAttributes,\n                                       String[] attributesToReturn)\n                                throws NamingException", "description": "Searches in a single context for objects that contain a\n specified set of attributes, and retrieves selected attributes.\n The search is performed using the default\n SearchControls settings.\n \n For an object to be selected, each attribute in\n matchingAttributes must match some attribute of the\n object.  If matchingAttributes is empty or\n null, all objects in the target context are returned.\n\n An attribute A1 in\n matchingAttributes is considered to match an\n attribute A2 of an object if\n A1 and A2 have the same\n identifier, and each value of A1 is equal\n to some value of A2.  This implies that the\n order of values is not significant, and that\n A2 may contain \"extra\" values not found in\n A1 without affecting the comparison.  It\n also implies that if A1 has no values, then\n testing for a match is equivalent to testing for the presence\n of an attribute A2 with the same\n identifier.\n\n The precise definition of \"equality\" used in comparing attribute values\n is defined by the underlying directory service.  It might use the\n Object.equals method, for example, or might use a schema\n to specify a different equality operation.\n For matching based on operations other than equality (such as\n substring comparison) use the version of the search\n method that takes a filter argument.\n \n When changes are made to this DirContext,\n the effect on enumerations returned by prior calls to this method\n is undefined.\n\n If the object does not have the attribute\n specified, the directory will ignore the nonexistent attribute\n and return the requested attributes that the object does have.\n\n A directory might return more attributes than was requested\n (see Attribute Type Names in the class description),\n but is not allowed to return arbitrary, unrelated attributes.\n\n See also Operational Attributes in the class\n description."}, {"method_name": "search", "method_sig": "NamingEnumeration<SearchResult> search (String name,\n                                       Attributes matchingAttributes,\n                                       String[] attributesToReturn)\n                                throws NamingException", "description": "Searches in a single context for objects that contain a\n specified set of attributes, and retrieves selected attributes.\n See search(Name, Attributes, String[]) for details."}, {"method_name": "search", "method_sig": "NamingEnumeration<SearchResult> search (Name name,\n                                       Attributes matchingAttributes)\n                                throws NamingException", "description": "Searches in a single context for objects that contain a\n specified set of attributes.\n This method returns all the attributes of such objects.\n It is equivalent to supplying null as\n the attributesToReturn parameter to the method\n search(Name, Attributes, String[]).\n \n See search(Name, Attributes, String[]) for a full description."}, {"method_name": "search", "method_sig": "NamingEnumeration<SearchResult> search (String name,\n                                       Attributes matchingAttributes)\n                                throws NamingException", "description": "Searches in a single context for objects that contain a\n specified set of attributes.\n See search(Name, Attributes) for details."}, {"method_name": "search", "method_sig": "NamingEnumeration<SearchResult> search (Name name,\n                                       String filter,\n                                       SearchControls cons)\n                                throws NamingException", "description": "Searches in the named context or object for entries that satisfy the\n given search filter.  Performs the search as specified by\n the search controls.\n \n The format and interpretation of filter follows RFC 2254\n with the\n following interpretations for attr and value\n mentioned in the RFC.\n \nattr is the attribute's identifier.\n \nvalue is the string representation the attribute's value.\n The translation of this string representation into the attribute's value\n is directory-specific.\n \n For the assertion \"someCount=127\", for example, attr\n is \"someCount\" and value is \"127\".\n The provider determines, based on the attribute ID (\"someCount\")\n (and possibly its schema), that the attribute's value is an integer.\n It then parses the string \"127\" appropriately.\n\n Any non-ASCII characters in the filter string should be\n represented by the appropriate Java (Unicode) characters, and\n not encoded as UTF-8 octets.  Alternately, the\n \"backslash-hexcode\" notation described in RFC 2254 may be used.\n\n If the directory does not support a string representation of\n some or all of its attributes, the form of search that\n accepts filter arguments in the form of Objects can be used instead.\n The service provider for such a directory would then translate\n the filter arguments to its service-specific representation\n for filter evaluation.\n See search(Name, String, Object[], SearchControls).\n \n RFC 2254 defines certain operators for the filter, including substring\n matches, equality, approximate match, greater than, less than.  These\n operators are mapped to operators with corresponding semantics in the\n underlying directory. For example, for the equals operator, suppose\n the directory has a matching rule defining \"equality\" of the\n attributes in the filter. This rule would be used for checking\n equality of the attributes specified in the filter with the attributes\n of objects in the directory. Similarly, if the directory has a\n matching rule for ordering, this rule would be used for\n making \"greater than\" and \"less than\" comparisons.\n\n Not all of the operators defined in RFC 2254 are applicable to all\n attributes.  When an operator is not applicable, the exception\n InvalidSearchFilterException is thrown.\n \n The result is returned in an enumeration of SearchResults.\n Each SearchResult contains the name of the object\n and other information about the object (see SearchResult).\n The name is either relative to the target context of the search\n (which is named by the name parameter), or\n it is a URL string. If the target context is included in\n the enumeration (as is possible when\n cons specifies a search scope of\n SearchControls.OBJECT_SCOPE or\n SearchControls.SUBSTREE_SCOPE), its name is the empty\n string. The SearchResult may also contain attributes of the\n matching object if the cons argument specified that attributes\n be returned.\n\n If the object does not have a requested attribute, that\n nonexistent attribute will be ignored.  Those requested\n attributes that the object does have will be returned.\n\n A directory might return more attributes than were requested\n (see Attribute Type Names in the class description)\n but is not allowed to return arbitrary, unrelated attributes.\n\n See also Operational Attributes in the class\n description."}, {"method_name": "search", "method_sig": "NamingEnumeration<SearchResult> search (String name,\n                                       String filter,\n                                       SearchControls cons)\n                                throws NamingException", "description": "Searches in the named context or object for entries that satisfy the\n given search filter.  Performs the search as specified by\n the search controls.\n See search(Name, String, SearchControls) for details."}, {"method_name": "search", "method_sig": "NamingEnumeration<SearchResult> search (Name name,\n                                       String filterExpr,\n                                       Object[] filterArgs,\n                                       SearchControls cons)\n                                throws NamingException", "description": "Searches in the named context or object for entries that satisfy the\n given search filter.  Performs the search as specified by\n the search controls.\n\n The interpretation of filterExpr is based on RFC\n 2254.  It may additionally contain variables of the form\n {i} -- where i is an integer -- that\n refer to objects in the filterArgs array.  The\n interpretation of filterExpr is otherwise\n identical to that of the filter parameter of the\n method search(Name, String, SearchControls).\n\n When a variable {i} appears in a search filter, it\n indicates that the filter argument filterArgs[i]\n is to be used in that place.  Such variables may be used\n wherever an attr, value, or\n matchingrule production appears in the filter grammar\n of RFC 2254, section 4.  When a string-valued filter argument\n is substituted for a variable, the filter is interpreted as if\n the string were given in place of the variable, with any\n characters having special significance within filters (such as\n '*') having been escaped according to the rules of\n RFC 2254.\n\n For directories that do not use a string representation for\n some or all of their attributes, the filter argument\n corresponding to an attribute value may be of a type other than\n String.  Directories that support unstructured binary-valued\n attributes, for example, should accept byte arrays as filter\n arguments.  The interpretation (if any) of filter arguments of\n any other type is determined by the service provider for that\n directory, which maps the filter operations onto operations with\n corresponding semantics in the underlying directory.\n\n This method returns an enumeration of the results.\n Each element in the enumeration contains the name of the object\n and other information about the object (see SearchResult).\n The name is either relative to the target context of the search\n (which is named by the name parameter), or\n it is a URL string. If the target context is included in\n the enumeration (as is possible when\n cons specifies a search scope of\n SearchControls.OBJECT_SCOPE or\n SearchControls.SUBSTREE_SCOPE),\n its name is the empty string.\n\n The SearchResult may also contain attributes of the matching\n object if the cons argument specifies that attributes be\n returned.\n\n If the object does not have a requested attribute, that\n nonexistent attribute will be ignored.  Those requested\n attributes that the object does have will be returned.\n\n A directory might return more attributes than were requested\n (see Attribute Type Names in the class description)\n but is not allowed to return arbitrary, unrelated attributes.\n\n If a search filter with invalid variable substitutions is provided\n to this method, the result is undefined.\n When changes are made to this DirContext,\n the effect on enumerations returned by prior calls to this method\n is undefined.\n\n See also Operational Attributes in the class\n description."}, {"method_name": "search", "method_sig": "NamingEnumeration<SearchResult> search (String name,\n                                       String filterExpr,\n                                       Object[] filterArgs,\n                                       SearchControls cons)\n                                throws NamingException", "description": "Searches in the named context or object for entries that satisfy the\n given search filter.  Performs the search as specified by\n the search controls.\n See search(Name, String, Object[], SearchControls) for details."}]}