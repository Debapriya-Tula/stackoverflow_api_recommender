{"name": "Class ProgressMonitorInputStream", "module": "java.desktop", "package": "javax.swing", "text": "Monitors the progress of reading from some InputStream. This ProgressMonitor\n is normally invoked in roughly this form:\n \n InputStream in = new BufferedInputStream(\n                          new ProgressMonitorInputStream(\n                                  parentComponent,\n                                  \"Reading \" + fileName,\n                                  new FileInputStream(fileName)));\n \n This creates a progress monitor to monitor the progress of reading\n the input stream.  If it's taking a while, a ProgressDialog will\n be popped up to inform the user.  If the user hits the Cancel button\n an InterruptedIOException will be thrown on the next read.\n All the right cleanup is done when the stream is closed.\n\n\n \n\n For further documentation and examples see\n How to Monitor Progress,\n a section in The Java Tutorial.", "codes": ["public class ProgressMonitorInputStream\nextends FilterInputStream"], "fields": [], "methods": [{"method_name": "getProgressMonitor", "method_sig": "public ProgressMonitor getProgressMonitor()", "description": "Get the ProgressMonitor object being used by this stream. Normally\n this isn't needed unless you want to do something like change the\n descriptive text partway through reading the file."}, {"method_name": "read", "method_sig": "public int read()\n         throws IOException", "description": "Overrides FilterInputStream.read\n to update the progress monitor after the read."}, {"method_name": "read", "method_sig": "public int read (byte[] b)\n         throws IOException", "description": "Overrides FilterInputStream.read\n to update the progress monitor after the read."}, {"method_name": "read", "method_sig": "public int read (byte[] b,\n                int off,\n                int len)\n         throws IOException", "description": "Overrides FilterInputStream.read\n to update the progress monitor after the read."}, {"method_name": "skip", "method_sig": "public long skip (long n)\n          throws IOException", "description": "Overrides FilterInputStream.skip\n to update the progress monitor after the skip."}, {"method_name": "close", "method_sig": "public void close()\n           throws IOException", "description": "Overrides FilterInputStream.close\n to close the progress monitor as well as the stream."}, {"method_name": "reset", "method_sig": "public void reset()\n           throws IOException", "description": "Overrides FilterInputStream.reset\n to reset the progress monitor as well as the stream."}]}