{"name": "Interface Iterator<E>", "module": "java.base", "package": "java.util", "text": "An iterator over a collection.  Iterator takes the place of\n Enumeration in the Java Collections Framework.  Iterators\n differ from enumerations in two ways:\n\n \n Iterators allow the caller to remove elements from the\n           underlying collection during the iteration with well-defined\n           semantics.\n       Method names have been improved.\n \nThis interface is a member of the\n \n Java Collections Framework.", "codes": ["public interface Iterator<E>"], "fields": [], "methods": [{"method_name": "hasNext", "method_sig": "boolean hasNext()", "description": "Returns true if the iteration has more elements.\n (In other words, returns true if next() would\n return an element rather than throwing an exception.)"}, {"method_name": "next", "method_sig": "E next()", "description": "Returns the next element in the iteration."}, {"method_name": "remove", "method_sig": "default void remove()", "description": "Removes from the underlying collection the last element returned\n by this iterator (optional operation).  This method can be called\n only once per call to next().\n \n The behavior of an iterator is unspecified if the underlying collection\n is modified while the iteration is in progress in any way other than by\n calling this method, unless an overriding class has specified a\n concurrent modification policy.\n \n The behavior of an iterator is unspecified if this method is called\n after a call to the forEachRemaining method."}, {"method_name": "forEachRemaining", "method_sig": "default void forEachRemaining (Consumer<? super E> action)", "description": "Performs the given action for each remaining element until all elements\n have been processed or the action throws an exception.  Actions are\n performed in the order of iteration, if that order is specified.\n Exceptions thrown by the action are relayed to the caller.\n \n The behavior of an iterator is unspecified if the action modifies the\n collection in any way (even by calling the remove method\n or other mutator methods of Iterator subtypes),\n unless an overriding class has specified a concurrent modification policy.\n \n Subsequent behavior of an iterator is unspecified if the action throws an\n exception."}]}