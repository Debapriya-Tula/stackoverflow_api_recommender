{"name": "Interface PreparedStatement", "module": "java.sql", "package": "java.sql", "text": "An object that represents a precompiled SQL statement.\n A SQL statement is precompiled and stored in a\n PreparedStatement object. This object can then be used to\n efficiently execute this statement multiple times.\n\n Note: The setter methods (setShort, setString,\n and so on) for setting IN parameter values\n must specify types that are compatible with the defined SQL type of\n the input parameter. For instance, if the IN parameter has SQL type\n INTEGER, then the method setInt should be used.\n\n If arbitrary parameter type conversions are required, the method\n setObject should be used with a target SQL type.\n \n In the following example of setting a parameter, con represents\n an active connection:\n \n   PreparedStatement pstmt = con.prepareStatement(\"UPDATE EMPLOYEES\n                                     SET SALARY = ? WHERE ID = ?\");\n   pstmt.setBigDecimal(1, 153833.00)\n   pstmt.setInt(2, 110592)\n ", "codes": ["public interface PreparedStatement\nextends Statement"], "fields": [], "methods": [{"method_name": "executeQuery", "method_sig": "ResultSet executeQuery()\n                throws SQLException", "description": "Executes the SQL query in this PreparedStatement object\n and returns the ResultSet object generated by the query."}, {"method_name": "executeUpdate", "method_sig": "int executeUpdate()\n           throws SQLException", "description": "Executes the SQL statement in this PreparedStatement object,\n which must be an SQL Data Manipulation Language (DML) statement, such as INSERT, UPDATE or\n DELETE; or an SQL statement that returns nothing,\n such as a DDL statement."}, {"method_name": "setNull", "method_sig": "void setNull (int parameterIndex,\n             int sqlType)\n      throws SQLException", "description": "Sets the designated parameter to SQL NULL.\n\n Note: You must specify the parameter's SQL type."}, {"method_name": "setBoolean", "method_sig": "void setBoolean (int parameterIndex,\n                boolean x)\n         throws SQLException", "description": "Sets the designated parameter to the given Java boolean value.\n The driver converts this\n to an SQL BIT or BOOLEAN value when it sends it to the database."}, {"method_name": "setByte", "method_sig": "void setByte (int parameterIndex,\n             byte x)\n      throws SQLException", "description": "Sets the designated parameter to the given Java byte value.\n The driver converts this\n to an SQL TINYINT value when it sends it to the database."}, {"method_name": "setShort", "method_sig": "void setShort (int parameterIndex,\n              short x)\n       throws SQLException", "description": "Sets the designated parameter to the given Java short value.\n The driver converts this\n to an SQL SMALLINT value when it sends it to the database."}, {"method_name": "setInt", "method_sig": "void setInt (int parameterIndex,\n            int x)\n     throws SQLException", "description": "Sets the designated parameter to the given Java int value.\n The driver converts this\n to an SQL INTEGER value when it sends it to the database."}, {"method_name": "setLong", "method_sig": "void setLong (int parameterIndex,\n             long x)\n      throws SQLException", "description": "Sets the designated parameter to the given Java long value.\n The driver converts this\n to an SQL BIGINT value when it sends it to the database."}, {"method_name": "setFloat", "method_sig": "void setFloat (int parameterIndex,\n              float x)\n       throws SQLException", "description": "Sets the designated parameter to the given Java float value.\n The driver converts this\n to an SQL REAL value when it sends it to the database."}, {"method_name": "setDouble", "method_sig": "void setDouble (int parameterIndex,\n               double x)\n        throws SQLException", "description": "Sets the designated parameter to the given Java double value.\n The driver converts this\n to an SQL DOUBLE value when it sends it to the database."}, {"method_name": "setBigDecimal", "method_sig": "void setBigDecimal (int parameterIndex,\n                   BigDecimal x)\n            throws SQLException", "description": "Sets the designated parameter to the given java.math.BigDecimal value.\n The driver converts this to an SQL NUMERIC value when\n it sends it to the database."}, {"method_name": "setString", "method_sig": "void setString (int parameterIndex,\n               String x)\n        throws SQLException", "description": "Sets the designated parameter to the given Java String value.\n The driver converts this\n to an SQL VARCHAR or LONGVARCHAR value\n (depending on the argument's\n size relative to the driver's limits on VARCHAR values)\n when it sends it to the database."}, {"method_name": "setBytes", "method_sig": "void setBytes (int parameterIndex,\n              byte[] x)\n       throws SQLException", "description": "Sets the designated parameter to the given Java array of bytes.  The driver converts\n this to an SQL VARBINARY or LONGVARBINARY\n (depending on the argument's size relative to the driver's limits on\n VARBINARY values) when it sends it to the database."}, {"method_name": "setDate", "method_sig": "void setDate (int parameterIndex,\n             Date x)\n      throws SQLException", "description": "Sets the designated parameter to the given java.sql.Date value\n using the default time zone of the virtual machine that is running\n the application.\n The driver converts this\n to an SQL DATE value when it sends it to the database."}, {"method_name": "setTime", "method_sig": "void setTime (int parameterIndex,\n             Time x)\n      throws SQLException", "description": "Sets the designated parameter to the given java.sql.Time value.\n The driver converts this\n to an SQL TIME value when it sends it to the database."}, {"method_name": "setTimestamp", "method_sig": "void setTimestamp (int parameterIndex,\n                  Timestamp x)\n           throws SQLException", "description": "Sets the designated parameter to the given java.sql.Timestamp value.\n The driver\n converts this to an SQL TIMESTAMP value when it sends it to the\n database."}, {"method_name": "setAsciiStream", "method_sig": "void setAsciiStream (int parameterIndex,\n                    InputStream x,\n                    int length)\n             throws SQLException", "description": "Sets the designated parameter to the given input stream, which will have\n the specified number of bytes.\n When a very large ASCII value is input to a LONGVARCHAR\n parameter, it may be more practical to send it via a\n java.io.InputStream. Data will be read from the stream\n as needed until end-of-file is reached.  The JDBC driver will\n do any necessary conversion from ASCII to the database char format.\n\n Note: This stream object can either be a standard\n Java stream object or your own subclass that implements the\n standard interface."}, {"method_name": "setUnicodeStream", "method_sig": "@Deprecated(since=\"1.2\")\nvoid setUnicodeStream (int parameterIndex,\n                      InputStream x,\n                      int length)\n               throws SQLException", "description": "Sets the designated parameter to the given input stream, which\n will have the specified number of bytes.\n\n When a very large Unicode value is input to a LONGVARCHAR\n parameter, it may be more practical to send it via a\n java.io.InputStream object. The data will be read from the\n stream as needed until end-of-file is reached.  The JDBC driver will\n do any necessary conversion from Unicode to the database char format.\n\nThe byte format of the Unicode stream must be a Java UTF-8, as defined in the\nJava Virtual Machine Specification.\n\n Note: This stream object can either be a standard\n Java stream object or your own subclass that implements the\n standard interface."}, {"method_name": "setBinaryStream", "method_sig": "void setBinaryStream (int parameterIndex,\n                     InputStream x,\n                     int length)\n              throws SQLException", "description": "Sets the designated parameter to the given input stream, which will have\n the specified number of bytes.\n When a very large binary value is input to a LONGVARBINARY\n parameter, it may be more practical to send it via a\n java.io.InputStream object. The data will be read from the\n stream as needed until end-of-file is reached.\n\n Note: This stream object can either be a standard\n Java stream object or your own subclass that implements the\n standard interface."}, {"method_name": "clearParameters", "method_sig": "void clearParameters()\n              throws SQLException", "description": "Clears the current parameter values immediately.\n In general, parameter values remain in force for repeated use of a\n statement. Setting a parameter value automatically clears its\n previous value.  However, in some cases it is useful to immediately\n release the resources used by the current parameter values; this can\n be done by calling the method clearParameters."}, {"method_name": "setObject", "method_sig": "void setObject (int parameterIndex,\n               Object x,\n               int targetSqlType)\n        throws SQLException", "description": "Sets the value of the designated parameter with the given object.\n\n This method is similar to setObject(int parameterIndex,\n Object x, int targetSqlType, int scaleOrLength),\n except that it assumes a scale of zero."}, {"method_name": "setObject", "method_sig": "void setObject (int parameterIndex,\n               Object x)\n        throws SQLException", "description": "Sets the value of the designated parameter using the given object.\n\n The JDBC specification specifies a standard mapping from\n Java Object types to SQL types.  The given argument\n will be converted to the corresponding SQL type before being\n sent to the database.\n\n Note that this method may be used to pass database-\n specific abstract data types, by using a driver-specific Java\n type.\n\n If the object is of a class implementing the interface SQLData,\n the JDBC driver should call the method SQLData.writeSQL\n to write it to the SQL data stream.\n If, on the other hand, the object is of a class implementing\n Ref, Blob, Clob,  NClob,\n  Struct, java.net.URL, RowId, SQLXML\n or Array, the driver should pass it to the database as a\n value of the corresponding SQL type.\n \nNote: Not all databases allow for a non-typed Null to be sent to\n the backend. For maximum portability, the setNull or the\n setObject(int parameterIndex, Object x, int sqlType)\n method should be used\n instead of setObject(int parameterIndex, Object x).\n\nNote: This method throws an exception if there is an ambiguity, for example, if the\n object is of a class implementing more than one of the interfaces named above."}, {"method_name": "execute", "method_sig": "boolean execute()\n         throws SQLException", "description": "Executes the SQL statement in this PreparedStatement object,\n which may be any kind of SQL statement.\n Some prepared statements return multiple results; the execute\n method handles these complex statements as well as the simpler\n form of statements handled by the methods executeQuery\n and executeUpdate.\n \n The execute method returns a boolean to\n indicate the form of the first result.  You must call either the method\n getResultSet or getUpdateCount\n to retrieve the result; you must call getMoreResults to\n move to any subsequent result(s)."}, {"method_name": "addBatch", "method_sig": "void addBatch()\n       throws SQLException", "description": "Adds a set of parameters to this PreparedStatement\n object's batch of commands."}, {"method_name": "setCharacterStream", "method_sig": "void setCharacterStream (int parameterIndex,\n                        Reader reader,\n                        int length)\n                 throws SQLException", "description": "Sets the designated parameter to the given Reader\n object, which is the given number of characters long.\n When a very large UNICODE value is input to a LONGVARCHAR\n parameter, it may be more practical to send it via a\n java.io.Reader object. The data will be read from the stream\n as needed until end-of-file is reached.  The JDBC driver will\n do any necessary conversion from UNICODE to the database char format.\n\n Note: This stream object can either be a standard\n Java stream object or your own subclass that implements the\n standard interface."}, {"method_name": "setRef", "method_sig": "void setRef (int parameterIndex,\n            Ref x)\n     throws SQLException", "description": "Sets the designated parameter to the given\n  REF(<structured-type>) value.\n The driver converts this to an SQL REF value when it\n sends it to the database."}, {"method_name": "setBlob", "method_sig": "void setBlob (int parameterIndex,\n             Blob x)\n      throws SQLException", "description": "Sets the designated parameter to the given java.sql.Blob object.\n The driver converts this to an SQL BLOB value when it\n sends it to the database."}, {"method_name": "setClob", "method_sig": "void setClob (int parameterIndex,\n             Clob x)\n      throws SQLException", "description": "Sets the designated parameter to the given java.sql.Clob object.\n The driver converts this to an SQL CLOB value when it\n sends it to the database."}, {"method_name": "setArray", "method_sig": "void setArray (int parameterIndex,\n              Array x)\n       throws SQLException", "description": "Sets the designated parameter to the given java.sql.Array object.\n The driver converts this to an SQL ARRAY value when it\n sends it to the database."}, {"method_name": "getMetaData", "method_sig": "ResultSetMetaData getMetaData()\n                       throws SQLException", "description": "Retrieves a ResultSetMetaData object that contains\n information about the columns of the ResultSet object\n that will be returned when this PreparedStatement object\n is executed.\n \n Because a PreparedStatement object is precompiled, it is\n possible to know about the ResultSet object that it will\n return without having to execute it.  Consequently, it is possible\n to invoke the method getMetaData on a\n PreparedStatement object rather than waiting to execute\n it and then invoking the ResultSet.getMetaData method\n on the ResultSet object that is returned.\n \nNOTE: Using this method may be expensive for some drivers due\n to the lack of underlying DBMS support."}, {"method_name": "setDate", "method_sig": "void setDate (int parameterIndex,\n             Date x,\n             Calendar cal)\n      throws SQLException", "description": "Sets the designated parameter to the given java.sql.Date value,\n using the given Calendar object.  The driver uses\n the Calendar object to construct an SQL DATE value,\n which the driver then sends to the database.  With\n a Calendar object, the driver can calculate the date\n taking into account a custom timezone.  If no\n Calendar object is specified, the driver uses the default\n timezone, which is that of the virtual machine running the application."}, {"method_name": "setTime", "method_sig": "void setTime (int parameterIndex,\n             Time x,\n             Calendar cal)\n      throws SQLException", "description": "Sets the designated parameter to the given java.sql.Time value,\n using the given Calendar object.  The driver uses\n the Calendar object to construct an SQL TIME value,\n which the driver then sends to the database.  With\n a Calendar object, the driver can calculate the time\n taking into account a custom timezone.  If no\n Calendar object is specified, the driver uses the default\n timezone, which is that of the virtual machine running the application."}, {"method_name": "setTimestamp", "method_sig": "void setTimestamp (int parameterIndex,\n                  Timestamp x,\n                  Calendar cal)\n           throws SQLException", "description": "Sets the designated parameter to the given java.sql.Timestamp value,\n using the given Calendar object.  The driver uses\n the Calendar object to construct an SQL TIMESTAMP value,\n which the driver then sends to the database.  With a\n  Calendar object, the driver can calculate the timestamp\n taking into account a custom timezone.  If no\n Calendar object is specified, the driver uses the default\n timezone, which is that of the virtual machine running the application."}, {"method_name": "setNull", "method_sig": "void setNull (int parameterIndex,\n             int sqlType,\n             String typeName)\n      throws SQLException", "description": "Sets the designated parameter to SQL NULL.\n This version of the method setNull should\n be used for user-defined types and REF type parameters.  Examples\n of user-defined types include: STRUCT, DISTINCT, JAVA_OBJECT, and\n named array types.\n\n Note: To be portable, applications must give the\n SQL type code and the fully-qualified SQL type name when specifying\n a NULL user-defined or REF parameter.  In the case of a user-defined type\n the name is the type name of the parameter itself.  For a REF\n parameter, the name is the type name of the referenced type.  If\n a JDBC driver does not need the type code or type name information,\n it may ignore it.\n\n Although it is intended for user-defined and Ref parameters,\n this method may be used to set a null parameter of any JDBC type.\n If the parameter does not have a user-defined or REF type, the given\n typeName is ignored."}, {"method_name": "setURL", "method_sig": "void setURL (int parameterIndex,\n            URL x)\n     throws SQLException", "description": "Sets the designated parameter to the given java.net.URL value.\n The driver converts this to an SQL DATALINK value\n when it sends it to the database."}, {"method_name": "getParameterMetaData", "method_sig": "ParameterMetaData getParameterMetaData()\n                                throws SQLException", "description": "Retrieves the number, types and properties of this\n PreparedStatement object's parameters."}, {"method_name": "setRowId", "method_sig": "void setRowId (int parameterIndex,\n              RowId x)\n       throws SQLException", "description": "Sets the designated parameter to the given java.sql.RowId object. The\n driver converts this to a SQL ROWID value when it sends it\n to the database"}, {"method_name": "setNString", "method_sig": "void setNString (int parameterIndex,\n                String value)\n         throws SQLException", "description": "Sets the designated parameter to the given String object.\n The driver converts this to a SQL NCHAR or\n NVARCHAR or LONGNVARCHAR value\n (depending on the argument's\n size relative to the driver's limits on NVARCHAR values)\n when it sends it to the database."}, {"method_name": "setNCharacterStream", "method_sig": "void setNCharacterStream (int parameterIndex,\n                         Reader value,\n                         long length)\n                  throws SQLException", "description": "Sets the designated parameter to a Reader object. The\n Reader reads the data till end-of-file is reached. The\n driver does the necessary conversion from Java character format to\n the national character set in the database."}, {"method_name": "setNClob", "method_sig": "void setNClob (int parameterIndex,\n              NClob value)\n       throws SQLException", "description": "Sets the designated parameter to a java.sql.NClob object. The driver converts this to a\n SQL NCLOB value when it sends it to the database."}, {"method_name": "setClob", "method_sig": "void setClob (int parameterIndex,\n             Reader reader,\n             long length)\n      throws SQLException", "description": "Sets the designated parameter to a Reader object.  The reader must contain  the number\n of characters specified by length otherwise a SQLException will be\n generated when the PreparedStatement is executed.\nThis method differs from the setCharacterStream (int, Reader, int) method\n because it informs the driver that the parameter value should be sent to\n the server as a CLOB.  When the setCharacterStream method is used, the\n driver may have to do extra work to determine whether the parameter\n data should be sent to the server as a LONGVARCHAR or a CLOB"}, {"method_name": "setBlob", "method_sig": "void setBlob (int parameterIndex,\n             InputStream inputStream,\n             long length)\n      throws SQLException", "description": "Sets the designated parameter to a InputStream object.\n The Inputstream must contain  the number\n of characters specified by length otherwise a SQLException will be\n generated when the PreparedStatement is executed.\n This method differs from the setBinaryStream (int, InputStream, int)\n method because it informs the driver that the parameter value should be\n sent to the server as a BLOB.  When the setBinaryStream method is used,\n the driver may have to do extra work to determine whether the parameter\n data should be sent to the server as a LONGVARBINARY or a BLOB"}, {"method_name": "setNClob", "method_sig": "void setNClob (int parameterIndex,\n              Reader reader,\n              long length)\n       throws SQLException", "description": "Sets the designated parameter to a Reader object.  The reader must contain  the number\n of characters specified by length otherwise a SQLException will be\n generated when the PreparedStatement is executed.\n This method differs from the setCharacterStream (int, Reader, int) method\n because it informs the driver that the parameter value should be sent to\n the server as a NCLOB.  When the setCharacterStream method is used, the\n driver may have to do extra work to determine whether the parameter\n data should be sent to the server as a LONGNVARCHAR or a NCLOB"}, {"method_name": "setSQLXML", "method_sig": "void setSQLXML (int parameterIndex,\n               SQLXML xmlObject)\n        throws SQLException", "description": "Sets the designated parameter to the given java.sql.SQLXML object.\n The driver converts this to an\n SQL XML value when it sends it to the database."}, {"method_name": "setObject", "method_sig": "void setObject (int parameterIndex,\n               Object x,\n               int targetSqlType,\n               int scaleOrLength)\n        throws SQLException", "description": "Sets the value of the designated parameter with the given object.\n\n If the second argument is an InputStream then the stream must contain\n the number of bytes specified by scaleOrLength.  If the second argument is a\n Reader then the reader must contain the number of characters specified\n by scaleOrLength. If these conditions are not true the driver will generate a\n SQLException when the prepared statement is executed.\n\n The given Java object will be converted to the given targetSqlType\n before being sent to the database.\n\n If the object has a custom mapping (is of a class implementing the\n interface SQLData),\n the JDBC driver should call the method SQLData.writeSQL to\n write it to the SQL data stream.\n If, on the other hand, the object is of a class implementing\n Ref, Blob, Clob,  NClob,\n  Struct, java.net.URL,\n or Array, the driver should pass it to the database as a\n value of the corresponding SQL type.\n\n Note that this method may be used to pass database-specific\n abstract data types."}, {"method_name": "setAsciiStream", "method_sig": "void setAsciiStream (int parameterIndex,\n                    InputStream x,\n                    long length)\n             throws SQLException", "description": "Sets the designated parameter to the given input stream, which will have\n the specified number of bytes.\n When a very large ASCII value is input to a LONGVARCHAR\n parameter, it may be more practical to send it via a\n java.io.InputStream. Data will be read from the stream\n as needed until end-of-file is reached.  The JDBC driver will\n do any necessary conversion from ASCII to the database char format.\n\n Note: This stream object can either be a standard\n Java stream object or your own subclass that implements the\n standard interface."}, {"method_name": "setBinaryStream", "method_sig": "void setBinaryStream (int parameterIndex,\n                     InputStream x,\n                     long length)\n              throws SQLException", "description": "Sets the designated parameter to the given input stream, which will have\n the specified number of bytes.\n When a very large binary value is input to a LONGVARBINARY\n parameter, it may be more practical to send it via a\n java.io.InputStream object. The data will be read from the\n stream as needed until end-of-file is reached.\n\n Note: This stream object can either be a standard\n Java stream object or your own subclass that implements the\n standard interface."}, {"method_name": "setCharacterStream", "method_sig": "void setCharacterStream (int parameterIndex,\n                        Reader reader,\n                        long length)\n                 throws SQLException", "description": "Sets the designated parameter to the given Reader\n object, which is the given number of characters long.\n When a very large UNICODE value is input to a LONGVARCHAR\n parameter, it may be more practical to send it via a\n java.io.Reader object. The data will be read from the stream\n as needed until end-of-file is reached.  The JDBC driver will\n do any necessary conversion from UNICODE to the database char format.\n\n Note: This stream object can either be a standard\n Java stream object or your own subclass that implements the\n standard interface."}, {"method_name": "setAsciiStream", "method_sig": "void setAsciiStream (int parameterIndex,\n                    InputStream x)\n             throws SQLException", "description": "Sets the designated parameter to the given input stream.\n When a very large ASCII value is input to a LONGVARCHAR\n parameter, it may be more practical to send it via a\n java.io.InputStream. Data will be read from the stream\n as needed until end-of-file is reached.  The JDBC driver will\n do any necessary conversion from ASCII to the database char format.\n\n Note: This stream object can either be a standard\n Java stream object or your own subclass that implements the\n standard interface.\n Note: Consult your JDBC driver documentation to determine if\n it might be more efficient to use a version of\n setAsciiStream which takes a length parameter."}, {"method_name": "setBinaryStream", "method_sig": "void setBinaryStream (int parameterIndex,\n                     InputStream x)\n              throws SQLException", "description": "Sets the designated parameter to the given input stream.\n When a very large binary value is input to a LONGVARBINARY\n parameter, it may be more practical to send it via a\n java.io.InputStream object. The data will be read from the\n stream as needed until end-of-file is reached.\n\n Note: This stream object can either be a standard\n Java stream object or your own subclass that implements the\n standard interface.\n Note: Consult your JDBC driver documentation to determine if\n it might be more efficient to use a version of\n setBinaryStream which takes a length parameter."}, {"method_name": "setCharacterStream", "method_sig": "void setCharacterStream (int parameterIndex,\n                        Reader reader)\n                 throws SQLException", "description": "Sets the designated parameter to the given Reader\n object.\n When a very large UNICODE value is input to a LONGVARCHAR\n parameter, it may be more practical to send it via a\n java.io.Reader object. The data will be read from the stream\n as needed until end-of-file is reached.  The JDBC driver will\n do any necessary conversion from UNICODE to the database char format.\n\n Note: This stream object can either be a standard\n Java stream object or your own subclass that implements the\n standard interface.\n Note: Consult your JDBC driver documentation to determine if\n it might be more efficient to use a version of\n setCharacterStream which takes a length parameter."}, {"method_name": "setNCharacterStream", "method_sig": "void setNCharacterStream (int parameterIndex,\n                         Reader value)\n                  throws SQLException", "description": "Sets the designated parameter to a Reader object. The\n Reader reads the data till end-of-file is reached. The\n driver does the necessary conversion from Java character format to\n the national character set in the database.\n\n Note: This stream object can either be a standard\n Java stream object or your own subclass that implements the\n standard interface.\n Note: Consult your JDBC driver documentation to determine if\n it might be more efficient to use a version of\n setNCharacterStream which takes a length parameter."}, {"method_name": "setClob", "method_sig": "void setClob (int parameterIndex,\n             Reader reader)\n      throws SQLException", "description": "Sets the designated parameter to a Reader object.\n This method differs from the setCharacterStream (int, Reader) method\n because it informs the driver that the parameter value should be sent to\n the server as a CLOB.  When the setCharacterStream method is used, the\n driver may have to do extra work to determine whether the parameter\n data should be sent to the server as a LONGVARCHAR or a CLOB\nNote: Consult your JDBC driver documentation to determine if\n it might be more efficient to use a version of\n setClob which takes a length parameter."}, {"method_name": "setBlob", "method_sig": "void setBlob (int parameterIndex,\n             InputStream inputStream)\n      throws SQLException", "description": "Sets the designated parameter to a InputStream object.\n This method differs from the setBinaryStream (int, InputStream)\n method because it informs the driver that the parameter value should be\n sent to the server as a BLOB.  When the setBinaryStream method is used,\n the driver may have to do extra work to determine whether the parameter\n data should be sent to the server as a LONGVARBINARY or a BLOB\nNote: Consult your JDBC driver documentation to determine if\n it might be more efficient to use a version of\n setBlob which takes a length parameter."}, {"method_name": "setNClob", "method_sig": "void setNClob (int parameterIndex,\n              Reader reader)\n       throws SQLException", "description": "Sets the designated parameter to a Reader object.\n This method differs from the setCharacterStream (int, Reader) method\n because it informs the driver that the parameter value should be sent to\n the server as a NCLOB.  When the setCharacterStream method is used, the\n driver may have to do extra work to determine whether the parameter\n data should be sent to the server as a LONGNVARCHAR or a NCLOB\nNote: Consult your JDBC driver documentation to determine if\n it might be more efficient to use a version of\n setNClob which takes a length parameter."}, {"method_name": "setObject", "method_sig": "default void setObject (int parameterIndex,\n                       Object x,\n                       SQLType targetSqlType,\n                       int scaleOrLength)\n                throws SQLException", "description": "Sets the value of the designated parameter with the given object.\n\n If the second argument is an InputStream then the stream\n must contain the number of bytes specified by scaleOrLength.\n If the second argument is a Reader then the reader must\n contain the number of characters specified by scaleOrLength. If these\n conditions are not true the driver will generate a\n SQLException when the prepared statement is executed.\n\n The given Java object will be converted to the given targetSqlType\n before being sent to the database.\n\n If the object has a custom mapping (is of a class implementing the\n interface SQLData),\n the JDBC driver should call the method SQLData.writeSQL to\n write it to the SQL data stream.\n If, on the other hand, the object is of a class implementing\n Ref, Blob, Clob,  NClob,\n  Struct, java.net.URL,\n or Array, the driver should pass it to the database as a\n value of the corresponding SQL type.\n\n Note that this method may be used to pass database-specific\n abstract data types.\n\n The default implementation will throw SQLFeatureNotSupportedException"}, {"method_name": "setObject", "method_sig": "default void setObject (int parameterIndex,\n                       Object x,\n                       SQLType targetSqlType)\n                throws SQLException", "description": "Sets the value of the designated parameter with the given object.\n\n This method is similar to setObject(int parameterIndex,\n Object x, SQLType targetSqlType, int scaleOrLength),\n except that it assumes a scale of zero.\n\n The default implementation will throw SQLFeatureNotSupportedException"}, {"method_name": "executeLargeUpdate", "method_sig": "default long executeLargeUpdate()\n                         throws SQLException", "description": "Executes the SQL statement in this PreparedStatement object,\n which must be an SQL Data Manipulation Language (DML) statement,\n such as INSERT, UPDATE or\n DELETE; or an SQL statement that returns nothing,\n such as a DDL statement.\n \n This method should be used when the returned row count may exceed\n Integer.MAX_VALUE.\n \n The default implementation will throw UnsupportedOperationException"}]}