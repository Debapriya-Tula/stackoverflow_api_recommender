{"name": "Class Inet4Address", "module": "java.base", "package": "java.net", "text": "This class represents an Internet Protocol version 4 (IPv4) address.\n Defined by \nRFC\u00a0790: Assigned Numbers,\n \nRFC\u00a01918: Address Allocation for Private Internets,\n and RFC\u00a02365:\n Administratively Scoped IP Multicast\n Textual representation of IP addresses \n\n Textual representation of IPv4 address used as input to methods\n takes one of the following forms:\n\n \nd.d.d.d\nd.d.d\nd.d\nd\n\n When four parts are specified, each is interpreted as a byte of\n data and assigned, from left to right, to the four bytes of an IPv4\n address.\n\n  When a three part address is specified, the last part is\n interpreted as a 16-bit quantity and placed in the right most two\n bytes of the network address. This makes the three part address\n format convenient for specifying Class B net- work addresses as\n 128.net.host.\n\n  When a two part address is supplied, the last part is\n interpreted as a 24-bit quantity and placed in the right most three\n bytes of the network address. This makes the two part address\n format convenient for specifying Class A network addresses as\n net.host.\n\n  When only one part is given, the value is stored directly in\n the network address without any byte rearrangement.\n\n  For methods that return a textual representation as output\n value, the first form, i.e. a dotted-quad string, is used.\n\n  The Scope of a Multicast Address \n\n Historically the IPv4 TTL field in the IP header has doubled as a\n multicast scope field: a TTL of 0 means node-local, 1 means\n link-local, up through 32 means site-local, up through 64 means\n region-local, up through 128 means continent-local, and up through\n 255 are global. However, the administrative scoping is preferred.\n Please refer to \nRFC\u00a02365: Administratively Scoped IP Multicast", "codes": ["public final class Inet4Address\nextends InetAddress"], "fields": [], "methods": [{"method_name": "isMulticastAddress", "method_sig": "public boolean isMulticastAddress()", "description": "Utility routine to check if the InetAddress is an\n IP multicast address. IP multicast address is a Class D\n address i.e first four bits of the address are 1110."}, {"method_name": "isAnyLocalAddress", "method_sig": "public boolean isAnyLocalAddress()", "description": "Utility routine to check if the InetAddress is a wildcard address."}, {"method_name": "isLoopbackAddress", "method_sig": "public boolean isLoopbackAddress()", "description": "Utility routine to check if the InetAddress is a loopback address."}, {"method_name": "isLinkLocalAddress", "method_sig": "public boolean isLinkLocalAddress()", "description": "Utility routine to check if the InetAddress is an link local address."}, {"method_name": "isSiteLocalAddress", "method_sig": "public boolean isSiteLocalAddress()", "description": "Utility routine to check if the InetAddress is a site local address."}, {"method_name": "isMCGlobal", "method_sig": "public boolean isMCGlobal()", "description": "Utility routine to check if the multicast address has global scope."}, {"method_name": "isMCNodeLocal", "method_sig": "public boolean isMCNodeLocal()", "description": "Utility routine to check if the multicast address has node scope."}, {"method_name": "isMCLinkLocal", "method_sig": "public boolean isMCLinkLocal()", "description": "Utility routine to check if the multicast address has link scope."}, {"method_name": "isMCSiteLocal", "method_sig": "public boolean isMCSiteLocal()", "description": "Utility routine to check if the multicast address has site scope."}, {"method_name": "isMCOrgLocal", "method_sig": "public boolean isMCOrgLocal()", "description": "Utility routine to check if the multicast address has organization scope."}, {"method_name": "getAddress", "method_sig": "public byte[] getAddress()", "description": "Returns the raw IP address of this InetAddress\n object. The result is in network byte order: the highest order\n byte of the address is in getAddress()[0]."}, {"method_name": "getHostAddress", "method_sig": "public String getHostAddress()", "description": "Returns the IP address string in textual presentation form."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Returns a hashcode for this IP address."}, {"method_name": "equals", "method_sig": "public boolean equals (Object obj)", "description": "Compares this object against the specified object.\n The result is true if and only if the argument is\n not null and it represents the same IP address as\n this object.\n \n Two instances of InetAddress represent the same IP\n address if the length of the byte arrays returned by\n getAddress is the same for both, and each of the\n array components is the same for the byte arrays."}]}