{"name": "Class ProcessBuilder", "module": "java.base", "package": "java.lang", "text": "This class is used to create operating system processes.\n\n Each ProcessBuilder instance manages a collection\n of process attributes.  The start() method creates a new\n Process instance with those attributes.  The start() method can be invoked repeatedly from the same instance\n to create new subprocesses with identical or related attributes.\n \n The startPipeline method can be invoked to create\n a pipeline of new processes that send the output of each process\n directly to the next process.  Each process has the attributes of\n its respective ProcessBuilder.\n\n Each process builder manages these process attributes:\n\n \na command, a list of strings which signifies the\n external program file to be invoked and its arguments, if any.\n Which string lists represent a valid operating system command is\n system-dependent.  For example, it is common for each conceptual\n argument to be an element in this list, but there are operating\n systems where programs are expected to tokenize command line\n strings themselves - on such a system a Java implementation might\n require commands to contain exactly two elements.\n\n an environment, which is a system-dependent mapping from\n variables to values.  The initial value is a copy of\n the environment of the current process (see System.getenv()).\n\n a working directory.  The default value is the current\n working directory of the current process, usually the directory\n named by the system property user.dir.\n\n a source of standard input.\n By default, the subprocess reads input from a pipe.  Java code\n can access this pipe via the output stream returned by\n Process.getOutputStream().  However, standard input may\n be redirected to another source using\n redirectInput.\n In this case, Process.getOutputStream() will return a\n null output stream, for which:\n\n \nthe write methods always\n throw IOException\nthe close method does nothing\n \na destination for standard output\n and standard error.  By default, the subprocess writes standard\n output and standard error to pipes.  Java code can access these pipes\n via the input streams returned by Process.getOutputStream() and\n Process.getErrorStream().  However, standard output and\n standard error may be redirected to other destinations using\n redirectOutput and\n redirectError.\n In this case, Process.getInputStream() and/or\n Process.getErrorStream() will return a null input\n stream, for which:\n\n \nthe read methods always return\n -1\nthe available method always returns\n 0\nthe close method does nothing\n \na redirectErrorStream property.  Initially, this property\n is false, meaning that the standard output and error\n output of a subprocess are sent to two separate streams, which can\n be accessed using the Process.getInputStream() and Process.getErrorStream() methods.\n\n If the value is set to true, then:\n\n \nstandard error is merged with the standard output and always sent\n to the same destination (this makes it easier to correlate error\n messages with the corresponding output)\n the common destination of standard error and standard output can be\n redirected using\n redirectOutput\nany redirection set by the\n redirectError\n method is ignored when creating a subprocess\n the stream returned from Process.getErrorStream() will\n always be a null input stream\n\n\nModifying a process builder's attributes will affect processes\n subsequently started by that object's start() method, but\n will never affect previously started processes or the Java process\n itself.\n\n Most error checking is performed by the start() method.\n It is possible to modify the state of an object so that start() will fail.  For example, setting the command attribute to\n an empty list will not throw an exception unless start()\n is invoked.\n\n Note that this class is not synchronized.\n If multiple threads access a ProcessBuilder instance\n concurrently, and at least one of the threads modifies one of the\n attributes structurally, it must be synchronized externally.\n\n Starting a new process which uses the default working directory\n and environment is easy:\n\n  \n Process p = new ProcessBuilder(\"myCommand\", \"myArg\").start();\n \nHere is an example that starts a process with a modified working\n directory and environment, and redirects standard output and error\n to be appended to a log file:\n\n  \n ProcessBuilder pb =\n   new ProcessBuilder(\"myCommand\", \"myArg1\", \"myArg2\");\n Map<String, String> env = pb.environment();\n env.put(\"VAR1\", \"myValue\");\n env.remove(\"OTHERVAR\");\n env.put(\"VAR2\", env.get(\"VAR1\") + \"suffix\");\n pb.directory(new File(\"myDir\"));\n File log = new File(\"log\");\n pb.redirectErrorStream(true);\n pb.redirectOutput(Redirect.appendTo(log));\n Process p = pb.start();\n assert pb.redirectInput() == Redirect.PIPE;\n assert pb.redirectOutput().file() == log;\n assert p.getInputStream().read() == -1;\n \nTo start a process with an explicit set of environment\n variables, first call Map.clear()\n before adding environment variables.\n\n \n Unless otherwise noted, passing a null argument to a constructor\n or method in this class will cause a NullPointerException to be\n thrown.", "codes": ["public final class ProcessBuilder\nextends Object"], "fields": [], "methods": [{"method_name": "command", "method_sig": "public ProcessBuilder command (List<String> command)", "description": "Sets this process builder's operating system program and\n arguments.  This method does not make a copy of the\n command list.  Subsequent updates to the list will\n be reflected in the state of the process builder.  It is not\n checked whether command corresponds to a valid\n operating system command."}, {"method_name": "command", "method_sig": "public ProcessBuilder command (String... command)", "description": "Sets this process builder's operating system program and\n arguments.  This is a convenience method that sets the command\n to a string list containing the same strings as the\n command array, in the same order.  It is not\n checked whether command corresponds to a valid\n operating system command."}, {"method_name": "command", "method_sig": "public List<String> command()", "description": "Returns this process builder's operating system program and\n arguments.  The returned list is not a copy.  Subsequent\n updates to the list will be reflected in the state of this\n process builder."}, {"method_name": "environment", "method_sig": "public Map<String, String> environment()", "description": "Returns a string map view of this process builder's environment.\n\n Whenever a process builder is created, the environment is\n initialized to a copy of the current process environment (see\n System.getenv()).  Subprocesses subsequently started by\n this object's start() method will use this map as\n their environment.\n\n The returned object may be modified using ordinary Map operations.  These modifications will be\n visible to subprocesses started via the start()\n method.  Two ProcessBuilder instances always\n contain independent process environments, so changes to the\n returned map will never be reflected in any other\n ProcessBuilder instance or the values returned by\n System.getenv.\n\n If the system does not support environment variables, an\n empty map is returned.\n\n The returned map does not permit null keys or values.\n Attempting to insert or query the presence of a null key or\n value will throw a NullPointerException.\n Attempting to query the presence of a key or value which is not\n of type String will throw a ClassCastException.\n\n The behavior of the returned map is system-dependent.  A\n system may not allow modifications to environment variables or\n may forbid certain variable names or values.  For this reason,\n attempts to modify the map may fail with\n UnsupportedOperationException or\n IllegalArgumentException\n if the modification is not permitted by the operating system.\n\n Since the external format of environment variable names and\n values is system-dependent, there may not be a one-to-one\n mapping between them and Java's Unicode strings.  Nevertheless,\n the map is implemented in such a way that environment variables\n which are not modified by Java code will have an unmodified\n native representation in the subprocess.\n\n The returned map and its collection views may not obey the\n general contract of the Object.equals(java.lang.Object) and\n Object.hashCode() methods.\n\n The returned map is typically case-sensitive on all platforms.\n\n If a security manager exists, its\n checkPermission method\n is called with a\n RuntimePermission(\"getenv.*\") permission.\n This may result in a SecurityException being thrown.\n\n When passing information to a Java subprocess,\n system properties\n are generally preferred over environment variables."}, {"method_name": "directory", "method_sig": "public File directory()", "description": "Returns this process builder's working directory.\n\n Subprocesses subsequently started by this object's start() method will use this as their working directory.\n The returned value may be null -- this means to use\n the working directory of the current Java process, usually the\n directory named by the system property user.dir,\n as the working directory of the child process."}, {"method_name": "directory", "method_sig": "public ProcessBuilder directory (File directory)", "description": "Sets this process builder's working directory.\n\n Subprocesses subsequently started by this object's start() method will use this as their working directory.\n The argument may be null -- this means to use the\n working directory of the current Java process, usually the\n directory named by the system property user.dir,\n as the working directory of the child process."}, {"method_name": "redirectInput", "method_sig": "public ProcessBuilder redirectInput (ProcessBuilder.Redirect source)", "description": "Sets this process builder's standard input source.\n\n Subprocesses subsequently started by this object's start()\n method obtain their standard input from this source.\n\n If the source is Redirect.PIPE\n (the initial value), then the standard input of a\n subprocess can be written to using the output stream\n returned by Process.getOutputStream().\n If the source is set to any other value, then\n Process.getOutputStream() will return a\n null output stream."}, {"method_name": "redirectOutput", "method_sig": "public ProcessBuilder redirectOutput (ProcessBuilder.Redirect destination)", "description": "Sets this process builder's standard output destination.\n\n Subprocesses subsequently started by this object's start()\n method send their standard output to this destination.\n\n If the destination is Redirect.PIPE\n (the initial value), then the standard output of a subprocess\n can be read using the input stream returned by Process.getInputStream().\n If the destination is set to any other value, then\n Process.getInputStream() will return a\n null input stream."}, {"method_name": "redirectError", "method_sig": "public ProcessBuilder redirectError (ProcessBuilder.Redirect destination)", "description": "Sets this process builder's standard error destination.\n\n Subprocesses subsequently started by this object's start()\n method send their standard error to this destination.\n\n If the destination is Redirect.PIPE\n (the initial value), then the error output of a subprocess\n can be read using the input stream returned by Process.getErrorStream().\n If the destination is set to any other value, then\n Process.getErrorStream() will return a\n null input stream.\n\n If the redirectErrorStream\n attribute has been set true, then the redirection set\n by this method has no effect."}, {"method_name": "redirectInput", "method_sig": "public ProcessBuilder redirectInput (File file)", "description": "Sets this process builder's standard input source to a file.\n\n This is a convenience method.  An invocation of the form\n redirectInput(file)\n behaves in exactly the same way as the invocation\n redirectInput\n(Redirect.from(file))."}, {"method_name": "redirectOutput", "method_sig": "public ProcessBuilder redirectOutput (File file)", "description": "Sets this process builder's standard output destination to a file.\n\n This is a convenience method.  An invocation of the form\n redirectOutput(file)\n behaves in exactly the same way as the invocation\n redirectOutput\n(Redirect.to(file))."}, {"method_name": "redirectError", "method_sig": "public ProcessBuilder redirectError (File file)", "description": "Sets this process builder's standard error destination to a file.\n\n This is a convenience method.  An invocation of the form\n redirectError(file)\n behaves in exactly the same way as the invocation\n redirectError\n(Redirect.to(file))."}, {"method_name": "redirectInput", "method_sig": "public ProcessBuilder.Redirect redirectInput()", "description": "Returns this process builder's standard input source.\n\n Subprocesses subsequently started by this object's start()\n method obtain their standard input from this source.\n The initial value is Redirect.PIPE."}, {"method_name": "redirectOutput", "method_sig": "public ProcessBuilder.Redirect redirectOutput()", "description": "Returns this process builder's standard output destination.\n\n Subprocesses subsequently started by this object's start()\n method redirect their standard output to this destination.\n The initial value is Redirect.PIPE."}, {"method_name": "redirectError", "method_sig": "public ProcessBuilder.Redirect redirectError()", "description": "Returns this process builder's standard error destination.\n\n Subprocesses subsequently started by this object's start()\n method redirect their standard error to this destination.\n The initial value is Redirect.PIPE."}, {"method_name": "inheritIO", "method_sig": "public ProcessBuilder inheritIO()", "description": "Sets the source and destination for subprocess standard I/O\n to be the same as those of the current Java process.\n\n This is a convenience method.  An invocation of the form\n   \n pb.inheritIO()\n \n behaves in exactly the same way as the invocation\n   \n pb.redirectInput(Redirect.INHERIT)\n   .redirectOutput(Redirect.INHERIT)\n   .redirectError(Redirect.INHERIT)\n \n\n This gives behavior equivalent to most operating system\n command interpreters, or the standard C library function\n system()."}, {"method_name": "redirectErrorStream", "method_sig": "public boolean redirectErrorStream()", "description": "Tells whether this process builder merges standard error and\n standard output.\n\n If this property is true, then any error output\n generated by subprocesses subsequently started by this object's\n start() method will be merged with the standard\n output, so that both can be read using the\n Process.getInputStream() method.  This makes it easier\n to correlate error messages with the corresponding output.\n The initial value is false."}, {"method_name": "redirectErrorStream", "method_sig": "public ProcessBuilder redirectErrorStream (boolean redirectErrorStream)", "description": "Sets this process builder's redirectErrorStream property.\n\n If this property is true, then any error output\n generated by subprocesses subsequently started by this object's\n start() method will be merged with the standard\n output, so that both can be read using the\n Process.getInputStream() method.  This makes it easier\n to correlate error messages with the corresponding output.\n The initial value is false."}, {"method_name": "start", "method_sig": "public Process start()\n              throws IOException", "description": "Starts a new process using the attributes of this process builder.\n\n The new process will\n invoke the command and arguments given by command(),\n in a working directory as given by directory(),\n with a process environment as given by environment().\n\n This method checks that the command is a valid operating\n system command.  Which commands are valid is system-dependent,\n but at the very least the command must be a non-empty list of\n non-null strings.\n\n A minimal set of system dependent environment variables may\n be required to start a process on some operating systems.\n As a result, the subprocess may inherit additional environment variable\n settings beyond those in the process builder's environment().\n\n If there is a security manager, its\n checkExec\n method is called with the first component of this object's\n command array as its argument. This may result in\n a SecurityException being thrown.\n\n Starting an operating system process is highly system-dependent.\n Among the many things that can go wrong are:\n \nThe operating system program file was not found.\n Access to the program file was denied.\n The working directory does not exist.\n Invalid character in command argument, such as NUL.\n \nIn such cases an exception will be thrown.  The exact nature\n of the exception is system-dependent, but it will always be a\n subclass of IOException.\n\n If the operating system does not support the creation of\n processes, an UnsupportedOperationException will be thrown.\n\n Subsequent modifications to this process builder will not\n affect the returned Process."}, {"method_name": "startPipeline", "method_sig": "public static List<Process> startPipeline (List<ProcessBuilder> builders)\n                                   throws IOException", "description": "Starts a Process for each ProcessBuilder, creating a pipeline of\n processes linked by their standard output and standard input streams.\n The attributes of each ProcessBuilder are used to start the respective\n process except that as each process is started, its standard output\n is directed to the standard input of the next.  The redirects for standard\n input of the first process and standard output of the last process are\n initialized using the redirect settings of the respective ProcessBuilder.\n All other ProcessBuilder redirects should be\n Redirect.PIPE.\n \n All input and output streams between the intermediate processes are\n not accessible.\n The standard input of all processes\n except the first process are null output streams\n The standard output of all processes\n except the last process are null input streams.\n \n The redirectErrorStream() of each ProcessBuilder applies to the\n respective process.  If set to true, the error stream is written\n to the same stream as standard output.\n \n If starting any of the processes throws an Exception, all processes\n are forcibly destroyed.\n \n The startPipeline method performs the same checks on\n each ProcessBuilder as does the start() method. The new process\n will invoke the command and arguments given by command(),\n in a working directory as given by directory(),\n with a process environment as given by environment().\n \n This method checks that the command is a valid operating\n system command.  Which commands are valid is system-dependent,\n but at the very least the command must be a non-empty list of\n non-null strings.\n \n A minimal set of system dependent environment variables may\n be required to start a process on some operating systems.\n As a result, the subprocess may inherit additional environment variable\n settings beyond those in the process builder's environment().\n \n If there is a security manager, its\n checkExec\n method is called with the first component of this object's\n command array as its argument. This may result in\n a SecurityException being thrown.\n \n Starting an operating system process is highly system-dependent.\n Among the many things that can go wrong are:\n \nThe operating system program file was not found.\n Access to the program file was denied.\n The working directory does not exist.\n Invalid character in command argument, such as NUL.\n \n\n In such cases an exception will be thrown.  The exact nature\n of the exception is system-dependent, but it will always be a\n subclass of IOException.\n \n If the operating system does not support the creation of\n processes, an UnsupportedOperationException will be thrown.\n \n Subsequent modifications to this process builder will not\n affect the returned Process."}]}