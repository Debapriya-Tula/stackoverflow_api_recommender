{"name": "Class ModuleDescriptor.Version", "module": "java.base", "package": "java.lang.module", "text": "A module's version string.\n\n  A version string has three components: The version number itself, an\n optional pre-release version, and an optional build version.  Each\n component is a sequence of tokens; each token is either a non-negative\n integer or a string.  Tokens are separated by the punctuation characters\n '.', '-', or '+', or by transitions from a\n sequence of digits to a sequence of characters that are neither digits\n nor punctuation characters, or vice versa.\n\n \n The version number is a sequence of tokens separated by\n   '.' characters, terminated by the first '-' or \n   '+' character. \n The pre-release version is a sequence of tokens separated\n   by '.' or '-' characters, terminated by the first\n   '+' character. \n The build version is a sequence of tokens separated by\n   '.', '-', or '+' characters.\n\n \n When comparing two version strings, the elements of their\n corresponding components are compared in pointwise fashion.  If one\n component is longer than the other, but otherwise equal to it, then the\n first component is considered the greater of the two; otherwise, if two\n corresponding elements are integers then they are compared as such;\n otherwise, at least one of the elements is a string, so the other is\n converted into a string if it is an integer and the two are compared\n lexicographically.  Trailing integer elements with the value zero are\n ignored.\n\n  Given two version strings, if their version numbers differ then the\n result of comparing them is the result of comparing their version\n numbers; otherwise, if one of them has a pre-release version but the\n other does not then the first is considered to precede the second,\n otherwise the result of comparing them is the result of comparing their\n pre-release versions; otherwise, the result of comparing them is the\n result of comparing their build versions.", "codes": ["public static final class ModuleDescriptor.Version\nextends Object\nimplements Comparable<ModuleDescriptor.Version>"], "fields": [], "methods": [{"method_name": "parse", "method_sig": "public static ModuleDescriptor.Version parse (String v)", "description": "Parses the given string as a version string."}, {"method_name": "compareTo", "method_sig": "public int compareTo (ModuleDescriptor.Version that)", "description": "Compares this module version to another module version. Module\n versions are compared as described in the class description."}, {"method_name": "equals", "method_sig": "public boolean equals (Object ob)", "description": "Tests this module version for equality with the given object.\n\n  If the given object is not a Version then this method\n returns false. Two module version are equal if their\n corresponding components are equal. \n This method satisfies the general contract of the Object.equals method. "}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Computes a hash code for this module version.\n\n  The hash code is based upon the components of the version and\n satisfies the general contract of the Object.hashCode method. "}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns the string from which this version was parsed."}]}