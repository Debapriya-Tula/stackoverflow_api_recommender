{"name": "Interface ObjectChangeListener", "module": "java.naming", "package": "javax.naming.event", "text": "Specifies the method that a listener of a NamingEvent\n with event type of OBJECT_CHANGED must implement.\n\n An OBJECT_CHANGED event type is fired when (the contents of)\n an object has changed. This might mean that its attributes have been modified,\n added, or removed, and/or that the object itself has been replaced.\n How the object has changed can be determined by examining the\n NamingEvent's old and new bindings.\n\n A listener interested in OBJECT_CHANGED event types must:\n\nImplement this interface and its method (objectChanged())\nImplement NamingListener.namingExceptionThrown() so that\n it will be notified of exceptions thrown while attempting to\n collect information about the events.\nRegister with the source using the source's addNamingListener()\n    method.\n\n A listener that wants to be notified of namespace change events\n should also implement the NamespaceChangeListener\n interface.", "codes": ["public interface ObjectChangeListener\nextends NamingListener"], "fields": [], "methods": [{"method_name": "objectChanged", "method_sig": "void objectChanged (NamingEvent evt)", "description": "Called when an object has been changed.\n\n The binding of the changed object can be obtained using\n evt.getNewBinding(). Its old binding (before the change)\n can be obtained using evt.getOldBinding()."}]}