{"name": "Class DefaultDesktopManager", "module": "java.desktop", "package": "javax.swing", "text": "This is an implementation of the DesktopManager.\n It currently implements the basic behaviors for managing\n JInternalFrames in an arbitrary parent.\n JInternalFrames that are not children of a\n JDesktop will use this component\n to handle their desktop-like actions.\n This class provides a policy for the various JInternalFrame methods,\n it is not meant to be called directly rather the various JInternalFrame\n methods will call into the DesktopManager.", "codes": ["public class DefaultDesktopManager\nextends Object\nimplements DesktopManager, Serializable"], "fields": [], "methods": [{"method_name": "openFrame", "method_sig": "public void openFrame (JInternalFrame f)", "description": "Normally this method will not be called. If it is, it\n tries to determine the appropriate parent from the desktopIcon of the frame.\n Will remove the desktopIcon from its parent if it successfully adds the frame."}, {"method_name": "closeFrame", "method_sig": "public void closeFrame (JInternalFrame f)", "description": "Removes the frame, and, if necessary, the\n desktopIcon, from its parent."}, {"method_name": "maximizeFrame", "method_sig": "public void maximizeFrame (JInternalFrame f)", "description": "Resizes the frame to fill its parents bounds."}, {"method_name": "minimizeFrame", "method_sig": "public void minimizeFrame (JInternalFrame f)", "description": "Restores the frame back to its size and position prior\n to a maximizeFrame call."}, {"method_name": "iconifyFrame", "method_sig": "public void iconifyFrame (JInternalFrame f)", "description": "Removes the frame from its parent and adds its\n desktopIcon to the parent."}, {"method_name": "deiconifyFrame", "method_sig": "public void deiconifyFrame (JInternalFrame f)", "description": "Removes the desktopIcon from its parent and adds its frame\n to the parent."}, {"method_name": "activateFrame", "method_sig": "public void activateFrame (JInternalFrame f)", "description": "This will activate f moving it to the front. It will\n set the current active frame's (if any)\n IS_SELECTED_PROPERTY to false.\n There can be only one active frame across all Layers."}, {"method_name": "dragFrame", "method_sig": "public void dragFrame (JComponent f,\n                      int newX,\n                      int newY)", "description": "Moves the visible location of the frame being dragged\n to the location specified.  The means by which this occurs can vary depending\n on the dragging algorithm being used.  The actual logical location of the frame\n might not change until endDraggingFrame is called."}, {"method_name": "resizeFrame", "method_sig": "public void resizeFrame (JComponent f,\n                        int newX,\n                        int newY,\n                        int newWidth,\n                        int newHeight)", "description": "Calls setBoundsForFrame with the new values."}, {"method_name": "setBoundsForFrame", "method_sig": "public void setBoundsForFrame (JComponent f,\n                              int newX,\n                              int newY,\n                              int newWidth,\n                              int newHeight)", "description": "This moves the JComponent and repaints the damaged areas."}, {"method_name": "removeIconFor", "method_sig": "protected void removeIconFor (JInternalFrame f)", "description": "Convenience method to remove the desktopIcon of f is necessary."}, {"method_name": "getBoundsForIconOf", "method_sig": "protected Rectangle getBoundsForIconOf (JInternalFrame f)", "description": "The iconifyFrame() code calls this to determine the proper bounds\n for the desktopIcon."}, {"method_name": "setPreviousBounds", "method_sig": "protected void setPreviousBounds (JInternalFrame f,\n                                 Rectangle r)", "description": "Stores the bounds of the component just before a maximize call."}, {"method_name": "getPreviousBounds", "method_sig": "protected Rectangle getPreviousBounds (JInternalFrame f)", "description": "Gets the normal bounds of the component prior to the component\n being maximized."}, {"method_name": "setWasIcon", "method_sig": "protected void setWasIcon (JInternalFrame f,\n                          Boolean value)", "description": "Sets that the component has been iconized and the bounds of the\n desktopIcon are valid."}, {"method_name": "wasIcon", "method_sig": "protected boolean wasIcon (JInternalFrame f)", "description": "Returns true if the component has been iconized\n and the bounds of the desktopIcon are valid,\n otherwise returns false."}]}