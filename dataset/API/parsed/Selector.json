{"name": "Class Selector", "module": "java.base", "package": "java.nio.channels", "text": "A multiplexor of SelectableChannel objects.\n\n  A selector may be created by invoking the open method of\n this class, which will use the system's default selector provider to\n create a new selector.  A selector may also be created by invoking the\n openSelector\n method of a custom selector provider.  A selector remains open until it is\n closed via its close method.\n\n \n A selectable channel's registration with a selector is represented by a\n SelectionKey object.  A selector maintains three sets of selection\n keys:\n\n \n The key set contains the keys representing the current\n   channel registrations of this selector.  This set is returned by the\n   keys method. \n The selected-key set is the set of keys such that each\n   key's channel was detected to be ready for at least one of the operations\n   identified in the key's interest set during a prior selection operation\n   that adds keys or updates keys in the set.\n   This set is returned by the selectedKeys method.\n   The selected-key set is always a subset of the key set. \n The cancelled-key set is the set of keys that have been\n   cancelled but whose channels have not yet been deregistered.  This set is\n   not directly accessible.  The cancelled-key set is always a subset of the\n   key set. \n\n All three sets are empty in a newly-created selector.\n\n  A key is added to a selector's key set as a side effect of registering a\n channel via the channel's register method.  Cancelled keys are removed from the key set during\n selection operations.  The key set itself is not directly modifiable.\n\n  A key is added to its selector's cancelled-key set when it is cancelled,\n whether by closing its channel or by invoking its cancel method.  Cancelling a key will cause its channel to be deregistered\n during the next selection operation, at which time the key will removed from\n all of the selector's key sets.\n\n  Keys are added to the selected-key set by selection\n operations.  A key may be removed directly from the selected-key set by\n invoking the set's remove\n method or by invoking the remove method\n of an iterator obtained from the set.\n All keys may be removed from the selected-key set by invoking the set's\n clear method.  Keys may not be added directly\n to the selected-key set. \n\nSelection\n A selection operation queries the underlying operating system for an\n update as to the readiness of each registered channel to perform any of the\n operations identified by its key's interest set.  There are two forms of\n selection operation:\n\n \n The select(), select(long), and selectNow()\n   methods add the keys of channels ready to perform an operation to the\n   selected-key set, or update the ready-operation set of keys already in the\n   selected-key set. \n The select(Consumer), select(Consumer, long), and\n   selectNow(Consumer) methods perform an action on the key\n   of each channel that is ready to perform an operation.  These methods do\n   not add to the selected-key set. \n\nSelection operations that add to the selected-key set\n During each selection operation, keys may be added to and removed from a\n selector's selected-key set and may be removed from its key and\n cancelled-key sets.  Selection is performed by the select(), select(long), and selectNow() methods, and involves three steps:\n \n\n Each key in the cancelled-key set is removed from each key set of\n   which it is a member, and its channel is deregistered.  This step leaves\n   the cancelled-key set empty. \n The underlying operating system is queried for an update as to the\n   readiness of each remaining channel to perform any of the operations\n   identified by its key's interest set as of the moment that the selection\n   operation began.  For a channel that is ready for at least one such\n   operation, one of the following two actions is performed: \n\n If the channel's key is not already in the selected-key set then\n     it is added to that set and its ready-operation set is modified to\n     identify exactly those operations for which the channel is now reported\n     to be ready.  Any readiness information previously recorded in the ready\n     set is discarded.  \n Otherwise the channel's key is already in the selected-key set,\n     so its ready-operation set is modified to identify any new operations\n     for which the channel is reported to be ready.  Any readiness\n     information previously recorded in the ready set is preserved; in other\n     words, the ready set returned by the underlying system is\n     bitwise-disjoined into the key's current ready set. \n\n\n   If all of the keys in the key set at the start of this step have empty\n   interest sets then neither the selected-key set nor any of the keys'\n   ready-operation sets will be updated.\n\n    If any keys were added to the cancelled-key set while step (2) was\n   in progress then they are processed as in step (1). \n\n Whether or not a selection operation blocks to wait for one or more\n channels to become ready, and if so for how long, is the only essential\n difference between the three selection methods. \nSelection operations that perform an action on selected keys\n During each selection operation, keys may be removed from the selector's\n key, selected-key, and cancelled-key sets.  Selection is performed by the\n select(Consumer), select(Consumer,long), and selectNow(Consumer) methods, and involves three steps:  \n\n Each key in the cancelled-key set is removed from each key set of\n   which it is a member, and its channel is deregistered.  This step leaves\n   the cancelled-key set empty. \n The underlying operating system is queried for an update as to the\n   readiness of each remaining channel to perform any of the operations\n   identified by its key's interest set as of the moment that the selection\n   operation began.\n\n    For a channel that is ready for at least one such operation, the\n   ready-operation set of the channel's key is set to identify exactly the\n   operations for which the channel is ready and the action specified\n   to the select method is invoked to consume the channel's key.  Any\n   readiness information previously recorded in the ready set is discarded\n   prior to invoking the action.\n\n    Alternatively, where a channel is ready for more than one operation,\n   the action may be invoked more than once with the channel's key and\n   ready-operation set modified to a subset of the operations for which the\n   channel is ready.  Where the action is invoked more than once for\n   the same key then its ready-operation set never contains operation bits\n   that were contained in the set at previous calls to the action\n   in the same selection operation.  \n If any keys were added to the cancelled-key set while step (2) was\n   in progress then they are processed as in step (1). \n\nConcurrency\n A Selector and its key set are safe for use by multiple concurrent\n threads.  Its selected-key set and cancelled-key set, however, are not.\n\n  The selection operations synchronize on the selector itself, on the\n selected-key set, in that order.  They also synchronize on the cancelled-key\n set during steps (1) and (3) above.\n\n  Changes made to the interest sets of a selector's keys while a\n selection operation is in progress have no effect upon that operation; they\n will be seen by the next selection operation.\n\n  Keys may be cancelled and channels may be closed at any time.  Hence the\n presence of a key in one or more of a selector's key sets does not imply\n that the key is valid or that its channel is open. Application code should\n be careful to synchronize and check these conditions as necessary if there\n is any possibility that another thread will cancel a key or close a channel.\n\n  A thread blocked in a selection operation may be interrupted by some\n other thread in one of three ways:\n\n \n By invoking the selector's wakeup method,\n   \n By invoking the selector's close method, or\n   \n By invoking the blocked thread's interrupt method, in which case its\n   interrupt status will be set and the selector's wakeup\n   method will be invoked. \n\n The close method synchronizes on the selector and its\n selected-key set in the same order as in a selection operation.\n\n \n A Selector's key set is safe for use by multiple concurrent threads.\n Retrieval operations from the key set do not generally block and so may\n overlap with new registrations that add to the set, or with the cancellation\n steps of selection operations that remove keys from the set.  Iterators and\n spliterators return elements reflecting the state of the set at some point at\n or since the creation of the iterator/spliterator.  They do not throw\n ConcurrentModificationException.\n\n \n A selector's selected-key set is not, in general, safe for use by\n multiple concurrent threads.  If such a thread might modify the set directly\n then access should be controlled by synchronizing on the set itself.  The\n iterators returned by the set's iterator\n methods are fail-fast: If the set is modified after the iterator is\n created, in any way except by invoking the iterator's own remove method, then a ConcurrentModificationException will be thrown. ", "codes": ["public abstract class Selector\nextends Object\nimplements Closeable"], "fields": [], "methods": [{"method_name": "open", "method_sig": "public static Selector open()\n                     throws IOException", "description": "Opens a selector.\n\n  The new selector is created by invoking the openSelector method\n of the system-wide default SelectorProvider object.  "}, {"method_name": "isOpen", "method_sig": "public abstract boolean isOpen()", "description": "Tells whether or not this selector is open."}, {"method_name": "provider", "method_sig": "public abstract SelectorProvider provider()", "description": "Returns the provider that created this channel."}, {"method_name": "keys", "method_sig": "public abstract Set<SelectionKey> keys()", "description": "Returns this selector's key set.\n\n  The key set is not directly modifiable.  A key is removed only after\n it has been cancelled and its channel has been deregistered.  Any\n attempt to modify the key set will cause an UnsupportedOperationException to be thrown.\n\n  The set is safe for use by multiple concurrent\n threads.  "}, {"method_name": "selectedKeys", "method_sig": "public abstract Set<SelectionKey> selectedKeys()", "description": "Returns this selector's selected-key set.\n\n  Keys may be removed from, but not directly added to, the\n selected-key set.  Any attempt to add an object to the key set will\n cause an UnsupportedOperationException to be thrown.\n\n  The selected-key set is not thread-safe.  "}, {"method_name": "selectNow", "method_sig": "public abstract int selectNow()\n                       throws IOException", "description": "Selects a set of keys whose corresponding channels are ready for I/O\n operations.\n\n  This method performs a non-blocking selection\n operation.  If no channels have become selectable since the previous\n selection operation then this method immediately returns zero.\n\n  Invoking this method clears the effect of any previous invocations\n of the wakeup method.  "}, {"method_name": "select", "method_sig": "public abstract int select (long timeout)\n                    throws IOException", "description": "Selects a set of keys whose corresponding channels are ready for I/O\n operations.\n\n  This method performs a blocking selection\n operation.  It returns only after at least one channel is selected,\n this selector's wakeup method is invoked, the current\n thread is interrupted, or the given timeout period expires, whichever\n comes first.\n\n  This method does not offer real-time guarantees: It schedules the\n timeout as if by invoking the Object.wait(long) method. "}, {"method_name": "select", "method_sig": "public abstract int select()\n                    throws IOException", "description": "Selects a set of keys whose corresponding channels are ready for I/O\n operations.\n\n  This method performs a blocking selection\n operation.  It returns only after at least one channel is selected,\n this selector's wakeup method is invoked, or the current\n thread is interrupted, whichever comes first.  "}, {"method_name": "select", "method_sig": "public int select (Consumer<SelectionKey> action,\n                  long timeout)\n           throws IOException", "description": "Selects and performs an action on the keys whose corresponding channels\n are ready for I/O operations.\n\n  This method performs a blocking selection\n operation.  It wakes up from querying the operating system only when\n at least one channel is selected, this selector's wakeup\n method is invoked, the current thread is interrupted, or the given\n timeout period expires, whichever comes first.\n\n  The specified action's accept\n method is invoked with the key for each channel that is ready to perform\n an operation identified by its key's interest set.  The accept\n method may be invoked more than once for the same key but with the\n ready-operation set containing a subset of the operations for which the\n channel is ready (as described above).  The accept method is\n invoked while synchronized on the selector and its selected-key set.\n Great care must be taken to avoid deadlocking with other threads that\n also synchronize on these objects.  Selection operations are not reentrant\n in general and consequently the action should take great care not\n to attempt a selection operation on the same selector.  The behavior when\n attempting a reentrant selection operation is implementation specific and\n therefore not specified.  If the action closes the selector then\n ClosedSelectorException is thrown when the action completes.\n The action is not prohibited from closing channels registered with\n the selector, nor prohibited from cancelling keys or changing a key's\n interest set.  If a channel is selected but its key is cancelled or its\n interest set changed before the action is performed on the key\n then it is implementation specific as to whether the action is\n invoked (it may be invoked with an invalid\n key).  Exceptions thrown by the action are relayed to the caller.\n\n  This method does not offer real-time guarantees: It schedules the\n timeout as if by invoking the Object.wait(long) method."}, {"method_name": "select", "method_sig": "public int select (Consumer<SelectionKey> action)\n           throws IOException", "description": "Selects and performs an action on the keys whose corresponding channels\n are ready for I/O operations.\n\n  This method performs a blocking selection\n operation.  It wakes up from querying the operating system only when\n at least one channel is selected, this selector's wakeup\n method is invoked, or the current thread is interrupted, whichever comes\n first.\n\n  This method is equivalent to invoking the 2-arg\n select method with a timeout of 0\n to block indefinitely.  "}, {"method_name": "selectNow", "method_sig": "public int selectNow (Consumer<SelectionKey> action)\n              throws IOException", "description": "Selects and performs an action on the keys whose corresponding channels\n are ready for I/O operations.\n\n  This method performs a non-blocking selection\n operation.\n\n  Invoking this method clears the effect of any previous invocations\n of the wakeup method.  "}, {"method_name": "wakeup", "method_sig": "public abstract Selector wakeup()", "description": "Causes the first selection operation that has not yet returned to return\n immediately.\n\n  If another thread is currently blocked in a selection operation then\n that invocation will return immediately.  If no selection operation is\n currently in progress then the next invocation of a selection operation\n will return immediately unless selectNow() or selectNow(Consumer) is invoked in the meantime.  In any case the value\n returned by that invocation may be non-zero.  Subsequent selection\n operations will block as usual unless this method is invoked again in the\n meantime.\n\n  Invoking this method more than once between two successive selection\n operations has the same effect as invoking it just once.  "}, {"method_name": "close", "method_sig": "public abstract void close()\n                    throws IOException", "description": "Closes this selector.\n\n  If a thread is currently blocked in one of this selector's selection\n methods then it is interrupted as if by invoking the selector's wakeup method.\n\n  Any uncancelled keys still associated with this selector are\n invalidated, their channels are deregistered, and any other resources\n associated with this selector are released.\n\n  If this selector is already closed then invoking this method has no\n effect.\n\n  After a selector is closed, any further attempt to use it, except by\n invoking this method or the wakeup method, will cause a\n ClosedSelectorException to be thrown. "}]}