{"name": "Class HTMLWriter", "module": "java.desktop", "package": "javax.swing.text.html", "text": "This is a writer for HTMLDocuments.", "codes": ["public class HTMLWriter\nextends AbstractWriter"], "fields": [], "methods": [{"method_name": "write", "method_sig": "public void write()\n           throws IOException,\n                  BadLocationException", "description": "Iterates over the\n Element tree and controls the writing out of\n all the tags and its attributes."}, {"method_name": "writeAttributes", "method_sig": "protected void writeAttributes (AttributeSet attr)\n                        throws IOException", "description": "Writes out the attribute set.  Ignores all\n attributes with a key of type HTML.Tag,\n attributes with a key of type StyleConstants,\n and attributes with a key of type\n HTML.Attribute.ENDTAG."}, {"method_name": "emptyTag", "method_sig": "protected void emptyTag (Element elem)\n                 throws BadLocationException,\n                        IOException", "description": "Writes out all empty elements (all tags that have no\n corresponding end tag)."}, {"method_name": "isBlockTag", "method_sig": "protected boolean isBlockTag (AttributeSet attr)", "description": "Determines if the HTML.Tag associated with the\n element is a block tag."}, {"method_name": "startTag", "method_sig": "protected void startTag (Element elem)\n                 throws IOException,\n                        BadLocationException", "description": "Writes out a start tag for the element.\n Ignores all synthesized elements."}, {"method_name": "textAreaContent", "method_sig": "protected void textAreaContent (AttributeSet attr)\n                        throws BadLocationException,\n                               IOException", "description": "Writes out text that is contained in a TEXTAREA form\n element."}, {"method_name": "text", "method_sig": "protected void text (Element elem)\n             throws BadLocationException,\n                    IOException", "description": "Writes out text.  If a range is specified when the constructor\n is invoked, then only the appropriate range of text is written\n out."}, {"method_name": "selectContent", "method_sig": "protected void selectContent (AttributeSet attr)\n                      throws IOException", "description": "Writes out the content of the SELECT form element."}, {"method_name": "writeOption", "method_sig": "protected void writeOption (Option option)\n                    throws IOException", "description": "Writes out the content of the Option form element."}, {"method_name": "endTag", "method_sig": "protected void endTag (Element elem)\n               throws IOException", "description": "Writes out an end tag for the element."}, {"method_name": "comment", "method_sig": "protected void comment (Element elem)\n                throws BadLocationException,\n                       IOException", "description": "Writes out comments."}, {"method_name": "synthesizedElement", "method_sig": "protected boolean synthesizedElement (Element elem)", "description": "Returns true if the element is a\n synthesized element.  Currently we are only testing\n for the p-implied tag."}, {"method_name": "matchNameAttribute", "method_sig": "protected boolean matchNameAttribute (AttributeSet attr,\n                                     HTML.Tag tag)", "description": "Returns true if the StyleConstants.NameAttribute is\n equal to the tag that is passed in as a parameter."}, {"method_name": "writeEmbeddedTags", "method_sig": "protected void writeEmbeddedTags (AttributeSet attr)\n                          throws IOException", "description": "Searches for embedded tags in the AttributeSet\n and writes them out.  It also stores these tags in a vector\n so that when appropriate the corresponding end tags can be\n written out."}, {"method_name": "closeOutUnwantedEmbeddedTags", "method_sig": "protected void closeOutUnwantedEmbeddedTags (AttributeSet attr)\n                                     throws IOException", "description": "Searches the attribute set and for each tag\n that is stored in the tag vector.  If the tag is not found,\n then the tag is removed from the vector and a corresponding\n end tag is written out."}, {"method_name": "writeLineSeparator", "method_sig": "protected void writeLineSeparator()\n                           throws IOException", "description": "Writes the line separator. This is overriden to make sure we don't\n replace the newline content in case it is outside normal ascii."}, {"method_name": "output", "method_sig": "protected void output (char[] chars,\n                      int start,\n                      int length)\n               throws IOException", "description": "This method is overriden to map any character entities, such as\n < to &lt;. super.output will be invoked to\n write the content."}]}