{"name": "Class TableColumn", "module": "java.desktop", "package": "javax.swing.table", "text": "A TableColumn represents all the attributes of a column in a\n  JTable, such as width, resizability, minimum and maximum width.\n  In addition, the TableColumn provides slots for a renderer and\n  an editor that can be used to display and edit the values in this column.\n  \n  It is also possible to specify renderers and editors on a per type basis\n  rather than a per column basis - see the\n  setDefaultRenderer method in the JTable class.\n  This default mechanism is only used when the renderer (or\n  editor) in the TableColumn is null.\n \n  The TableColumn stores the link between the columns in the\n  JTable and the columns in the TableModel.\n  The modelIndex is the column in the\n  TableModel, which will be queried for the data values for the\n  cells in this column. As the column moves around in the view this\n  modelIndex does not change.\n  \nNote: Some implementations may assume that all\n    TableColumnModels are unique, therefore we would\n    recommend that the same TableColumn instance\n    not be added more than once to a TableColumnModel.\n    To show TableColumns with the same column of\n    data from the model, create a new instance with the same\n    modelIndex.\n  \nWarning:\n Serialized objects of this class will not be compatible with\n future Swing releases. The current serialization support is\n appropriate for short term storage or RMI between applications running\n the same version of Swing.  As of 1.4, support for long term storage\n of all JavaBeans\u2122\n has been added to the java.beans package.\n Please see XMLEncoder.", "codes": ["public class TableColumn\nextends Object\nimplements Serializable"], "fields": [{"field_name": "COLUMN_WIDTH_PROPERTY", "field_sig": "public static final\u00a0String COLUMN_WIDTH_PROPERTY", "description": "Obsolete as of Java 2 platform v1.3.  Please use string literals to identify\n properties."}, {"field_name": "HEADER_VALUE_PROPERTY", "field_sig": "public static final\u00a0String HEADER_VALUE_PROPERTY", "description": "Obsolete as of Java 2 platform v1.3.  Please use string literals to identify\n properties."}, {"field_name": "HEADER_RENDERER_PROPERTY", "field_sig": "public static final\u00a0String HEADER_RENDERER_PROPERTY", "description": "Obsolete as of Java 2 platform v1.3.  Please use string literals to identify\n properties."}, {"field_name": "CELL_RENDERER_PROPERTY", "field_sig": "public static final\u00a0String CELL_RENDERER_PROPERTY", "description": "Obsolete as of Java 2 platform v1.3.  Please use string literals to identify\n properties."}, {"field_name": "modelIndex", "field_sig": "protected\u00a0int modelIndex", "description": "The index of the column in the model which is to be displayed by\n this TableColumn. As columns are moved around in the\n view modelIndex remains constant."}, {"field_name": "identifier", "field_sig": "protected\u00a0Object identifier", "description": "This object is not used internally by the drawing machinery of\n  the JTable; identifiers may be set in the\n  TableColumn as an\n  optional way to tag and locate table columns. The table package does\n  not modify or invoke any methods in these identifier objects other\n  than the equals method which is used in the\n  getColumnIndex() method in the\n  DefaultTableColumnModel."}, {"field_name": "width", "field_sig": "protected\u00a0int width", "description": "The width of the column."}, {"field_name": "minWidth", "field_sig": "protected\u00a0int minWidth", "description": "The minimum width of the column."}, {"field_name": "maxWidth", "field_sig": "protected\u00a0int maxWidth", "description": "The maximum width of the column."}, {"field_name": "headerRenderer", "field_sig": "protected\u00a0TableCellRenderer headerRenderer", "description": "The renderer used to draw the header of the column."}, {"field_name": "headerValue", "field_sig": "protected\u00a0Object headerValue", "description": "The header value of the column."}, {"field_name": "cellRenderer", "field_sig": "protected\u00a0TableCellRenderer cellRenderer", "description": "The renderer used to draw the data cells of the column."}, {"field_name": "cellEditor", "field_sig": "protected\u00a0TableCellEditor cellEditor", "description": "The editor used to edit the data cells of the column."}, {"field_name": "isResizable", "field_sig": "protected\u00a0boolean isResizable", "description": "If true, the user is allowed to resize the column; the default is true."}, {"field_name": "resizedPostingDisableCount", "field_sig": "@Deprecated\nprotected transient\u00a0int resizedPostingDisableCount", "description": "This field was not used in previous releases and there are\n currently no plans to support it in the future."}], "methods": [{"method_name": "setModelIndex", "method_sig": "@BeanProperty(description=\"The model index.\")\npublic void setModelIndex (int modelIndex)", "description": "Sets the model index for this column. The model index is the\n index of the column in the model that will be displayed by this\n TableColumn. As the TableColumn\n is moved around in the view the model index remains constant."}, {"method_name": "getModelIndex", "method_sig": "public int getModelIndex()", "description": "Returns the model index for this column."}, {"method_name": "setIdentifier", "method_sig": "@BeanProperty(description=\"A unique identifier for this column.\")\npublic void setIdentifier (Object identifier)", "description": "Sets the TableColumn's identifier to\n anIdentifier. \n Note: identifiers are not used by the JTable,\n they are purely a\n convenience for the external tagging and location of columns."}, {"method_name": "getIdentifier", "method_sig": "public Object getIdentifier()", "description": "Returns the identifier object for this column.\n  Note identifiers are not used by JTable,\n  they are purely a convenience for external use.\n  If the identifier is null,\n  getIdentifier() returns getHeaderValue\n  as a default."}, {"method_name": "setHeaderValue", "method_sig": "@BeanProperty(description=\"The text to be used by the header renderer.\")\npublic void setHeaderValue (Object headerValue)", "description": "Sets the Object whose string representation will be\n used as the value for the headerRenderer.  When the\n TableColumn is created, the default headerValue\n is null."}, {"method_name": "getHeaderValue", "method_sig": "public Object getHeaderValue()", "description": "Returns the Object used as the value for the header\n renderer."}, {"method_name": "setHeaderRenderer", "method_sig": "@BeanProperty(description=\"The header renderer.\")\npublic void setHeaderRenderer (TableCellRenderer headerRenderer)", "description": "Sets the TableCellRenderer used to draw the\n TableColumn's header to headerRenderer.\n \n It is the header renderers responsibility to render the sorting\n indicator.  If you are using sorting and specify a renderer your\n renderer must render the sorting indication."}, {"method_name": "getHeaderRenderer", "method_sig": "public TableCellRenderer getHeaderRenderer()", "description": "Returns the TableCellRenderer used to draw the header of the\n TableColumn. When the headerRenderer is\n null, the JTableHeader\n uses its defaultRenderer. The default value for a\n headerRenderer is null."}, {"method_name": "setCellRenderer", "method_sig": "@BeanProperty(description=\"The renderer to use for cell values.\")\npublic void setCellRenderer (TableCellRenderer cellRenderer)", "description": "Sets the TableCellRenderer used by JTable\n to draw individual values for this column."}, {"method_name": "getCellRenderer", "method_sig": "public TableCellRenderer getCellRenderer()", "description": "Returns the TableCellRenderer used by the\n JTable to draw\n values for this column.  The cellRenderer of the column\n not only controls the visual look for the column, but is also used to\n interpret the value object supplied by the TableModel.\n When the cellRenderer is null,\n the JTable uses a default renderer based on the\n class of the cells in that column. The default value for a\n cellRenderer is null."}, {"method_name": "setCellEditor", "method_sig": "@BeanProperty(description=\"The editor to use for cell values.\")\npublic void setCellEditor (TableCellEditor cellEditor)", "description": "Sets the editor to used by when a cell in this column is edited."}, {"method_name": "getCellEditor", "method_sig": "public TableCellEditor getCellEditor()", "description": "Returns the TableCellEditor used by the\n JTable to edit values for this column.  When the\n cellEditor is null, the JTable\n uses a default editor based on the\n class of the cells in that column. The default value for a\n cellEditor is null."}, {"method_name": "setWidth", "method_sig": "@BeanProperty(description=\"The width of the column.\")\npublic void setWidth (int width)", "description": "This method should not be used to set the widths of columns in the\n JTable, use setPreferredWidth instead.\n Like a layout manager in the\n AWT, the JTable adjusts a column's width automatically\n whenever the\n table itself changes size, or a column's preferred width is changed.\n Setting widths programmatically therefore has no long term effect.\n \n This method sets this column's width to width.\n If width exceeds the minimum or maximum width,\n it is adjusted to the appropriate limiting value."}, {"method_name": "getWidth", "method_sig": "public int getWidth()", "description": "Returns the width of the TableColumn. The default width is\n 75."}, {"method_name": "setPreferredWidth", "method_sig": "@BeanProperty(description=\"The preferred width of the column.\")\npublic void setPreferredWidth (int preferredWidth)", "description": "Sets this column's preferred width to preferredWidth.\n If preferredWidth exceeds the minimum or maximum width,\n it is adjusted to the appropriate limiting value.\n \n For details on how the widths of columns in the JTable\n (and JTableHeader) are calculated from the\n preferredWidth,\n see the doLayout method in JTable."}, {"method_name": "getPreferredWidth", "method_sig": "public int getPreferredWidth()", "description": "Returns the preferred width of the TableColumn.\n The default preferred width is 75."}, {"method_name": "setMinWidth", "method_sig": "@BeanProperty(description=\"The minimum width of the column.\")\npublic void setMinWidth (int minWidth)", "description": "Sets the TableColumn's minimum width to\n minWidth,\n adjusting the new minimum width if necessary to ensure that\n 0 <= minWidth <= maxWidth.\n For example, if the minWidth argument is negative,\n this method sets the minWidth property to 0.\n\n \n If the value of the\n width or preferredWidth property\n is less than the new minimum width,\n this method sets that property to the new minimum width."}, {"method_name": "getMinWidth", "method_sig": "public int getMinWidth()", "description": "Returns the minimum width for the TableColumn. The\n TableColumn's width can't be made less than this either\n by the user or programmatically."}, {"method_name": "setMaxWidth", "method_sig": "@BeanProperty(description=\"The maximum width of the column.\")\npublic void setMaxWidth (int maxWidth)", "description": "Sets the TableColumn's maximum width to\n maxWidth or,\n if maxWidth is less than the minimum width,\n to the minimum width.\n\n \n If the value of the\n width or preferredWidth property\n is more than the new maximum width,\n this method sets that property to the new maximum width."}, {"method_name": "getMaxWidth", "method_sig": "public int getMaxWidth()", "description": "Returns the maximum width for the TableColumn. The\n TableColumn's width can't be made larger than this\n either by the user or programmatically.  The default maxWidth\n is Integer.MAX_VALUE."}, {"method_name": "setResizable", "method_sig": "@BeanProperty(description=\"Whether or not this column can be resized.\")\npublic void setResizable (boolean isResizable)", "description": "Sets whether this column can be resized."}, {"method_name": "getResizable", "method_sig": "public boolean getResizable()", "description": "Returns true if the user is allowed to resize the\n TableColumn's\n width, false otherwise. You can change the width programmatically\n regardless of this setting.  The default is true."}, {"method_name": "sizeWidthToFit", "method_sig": "public void sizeWidthToFit()", "description": "Resizes the TableColumn to fit the width of its header cell.\n This method does nothing if the header renderer is null\n (the default case). Otherwise, it sets the minimum, maximum and preferred\n widths of this column to the widths of the minimum, maximum and preferred\n sizes of the Component delivered by the header renderer.\n The transient \"width\" property of this TableColumn is also set to the\n preferred width. Note this method is not used internally by the table\n package."}, {"method_name": "disableResizedPosting", "method_sig": "@Deprecated\npublic void disableResizedPosting()", "description": "This field was not used in previous releases and there are\n currently no plans to support it in the future."}, {"method_name": "enableResizedPosting", "method_sig": "@Deprecated\npublic void enableResizedPosting()", "description": "This field was not used in previous releases and there are\n currently no plans to support it in the future."}, {"method_name": "addPropertyChangeListener", "method_sig": "public void addPropertyChangeListener (PropertyChangeListener listener)", "description": "Adds a PropertyChangeListener to the listener list. The listener\n is registered for all bound properties of this class, including the\n following:\n \nthis TableColumn's modelIndex (\"modelIndex\")\nthis TableColumn's identifier (\"identifier\")\nthis TableColumn's header value (\"headerValue\")\nthis TableColumn's header renderer (\"headerRenderer\")\nthis TableColumn's cell renderer (\"cellRenderer\")\nthis TableColumn's cell editor (\"cellEditor\")\nthis TableColumn's width (\"width\")\nthis TableColumn's preferred width (\"preferredWidth\")\nthis TableColumn's minimum width (\"minWidth\")\nthis TableColumn's maximum width (\"maxWidth\")\nthis TableColumn's resizable state (\"isResizable\")\n"}, {"method_name": "removePropertyChangeListener", "method_sig": "public void removePropertyChangeListener (PropertyChangeListener listener)", "description": "Removes a PropertyChangeListener from the listener list.\n The PropertyChangeListener to be removed was registered\n for all properties."}, {"method_name": "getPropertyChangeListeners", "method_sig": "public PropertyChangeListener[] getPropertyChangeListeners()", "description": "Returns an array of all the PropertyChangeListeners added\n to this TableColumn with addPropertyChangeListener()."}, {"method_name": "createDefaultHeaderRenderer", "method_sig": "protected TableCellRenderer createDefaultHeaderRenderer()", "description": "As of Java 2 platform v1.3, this method is not called by the TableColumn\n constructor.  Previously this method was used by the\n TableColumn to create a default header renderer.\n As of Java 2 platform v1.3, the default header renderer is null.\n JTableHeader now provides its own shared default\n renderer, just as the JTable does for its cell renderers."}]}