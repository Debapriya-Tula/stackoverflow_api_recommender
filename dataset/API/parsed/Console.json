{"name": "Class Console", "module": "java.base", "package": "java.io", "text": "Methods to access the character-based console device, if any, associated\n with the current Java virtual machine.\n\n  Whether a virtual machine has a console is dependent upon the\n underlying platform and also upon the manner in which the virtual\n machine is invoked.  If the virtual machine is started from an\n interactive command line without redirecting the standard input and\n output streams then its console will exist and will typically be\n connected to the keyboard and display from which the virtual machine\n was launched.  If the virtual machine is started automatically, for\n example by a background job scheduler, then it will typically not\n have a console.\n \n If this virtual machine has a console then it is represented by a\n unique instance of this class which can be obtained by invoking the\n System.console() method.  If no console device is\n available then an invocation of that method will return null.\n \n Read and write operations are synchronized to guarantee the atomic\n completion of critical operations; therefore invoking methods\n readLine(), readPassword(), format(),\n printf() as well as the read, format and write operations\n on the objects returned by reader() and writer() may\n block in multithreaded scenarios.\n \n Invoking close() on the objects returned by the reader()\n and the writer() will not close the underlying stream of those\n objects.\n \n The console-read methods return null when the end of the\n console input stream is reached, for example by typing control-D on\n Unix or control-Z on Windows.  Subsequent read operations will succeed\n if additional characters are later entered on the console's input\n device.\n \n Unless otherwise specified, passing a null argument to any method\n in this class will cause a NullPointerException to be thrown.\n \nSecurity note:\n If an application needs to read a password or other secure data, it should\n use readPassword() or readPassword(String, Object...) and\n manually zero the returned character array after processing to minimize the\n lifetime of sensitive data in memory.\n\n \n Console cons;\n char[] passwd;\n if ((cons = System.console()) != null &&\n     (passwd = cons.readPassword(\"[%s]\", \"Password:\")) != null) {\n     ...\n     java.util.Arrays.fill(passwd, ' ');\n }\n ", "codes": ["public final class Console\nextends Object\nimplements Flushable"], "fields": [], "methods": [{"method_name": "writer", "method_sig": "public PrintWriter writer()", "description": "Retrieves the unique PrintWriter object\n associated with this console."}, {"method_name": "reader", "method_sig": "public Reader reader()", "description": "Retrieves the unique Reader object associated\n with this console.\n \n This method is intended to be used by sophisticated applications, for\n example, a Scanner object which utilizes the rich\n parsing/scanning functionality provided by the Scanner:\n \n Console con = System.console();\n if (con != null) {\n     Scanner sc = new Scanner(con.reader());\n     ...\n }\n \n\n For simple applications requiring only line-oriented reading, use\n readLine(java.lang.String, java.lang.Object...).\n \n The bulk read operations read(char[]) ,\n read(char[], int, int)  and\n read(java.nio.CharBuffer)\n on the returned object will not read in characters beyond the line\n bound for each invocation, even if the destination buffer has space for\n more characters. The Reader's read methods may block if a\n line bound has not been entered or reached on the console's input device.\n A line bound is considered to be any one of a line feed ('\\n'),\n a carriage return ('\\r'), a carriage return followed immediately\n by a linefeed, or an end of stream."}, {"method_name": "format", "method_sig": "public Console format (String fmt,\n                      Object... args)", "description": "Writes a formatted string to this console's output stream using\n the specified format string and arguments."}, {"method_name": "printf", "method_sig": "public Console printf (String format,\n                      Object... args)", "description": "A convenience method to write a formatted string to this console's\n output stream using the specified format string and arguments.\n\n  An invocation of this method of the form\n con.printf(format, args) behaves in exactly the same way\n as the invocation of\n con.format(format, args)."}, {"method_name": "readLine", "method_sig": "public String readLine (String fmt,\n                       Object... args)", "description": "Provides a formatted prompt, then reads a single line of text from the\n console."}, {"method_name": "readLine", "method_sig": "public String readLine()", "description": "Reads a single line of text from the console."}, {"method_name": "readPassword", "method_sig": "public char[] readPassword (String fmt,\n                           Object... args)", "description": "Provides a formatted prompt, then reads a password or passphrase from\n the console with echoing disabled."}, {"method_name": "readPassword", "method_sig": "public char[] readPassword()", "description": "Reads a password or passphrase from the console with echoing disabled"}, {"method_name": "flush", "method_sig": "public void flush()", "description": "Flushes the console and forces any buffered output to be written\n immediately ."}]}