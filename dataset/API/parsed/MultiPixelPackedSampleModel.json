{"name": "Class MultiPixelPackedSampleModel", "module": "java.desktop", "package": "java.awt.image", "text": "The MultiPixelPackedSampleModel class represents\n one-banded images and can pack multiple one-sample\n pixels into one data element.  Pixels are not allowed to span data elements.\n The data type can be DataBuffer.TYPE_BYTE, DataBuffer.TYPE_USHORT,\n or DataBuffer.TYPE_INT.  Each pixel must be a power of 2 number of bits\n and a power of 2 number of pixels must fit exactly in one data element.\n Pixel bit stride is equal to the number of bits per pixel.  Scanline\n stride is in data elements and the last several data elements might be\n padded with unused pixels.  Data bit offset is the offset in bits from\n the beginning of the DataBuffer to the first pixel and must be\n a multiple of pixel bit stride.\n \n The following code illustrates extracting the bits for pixel\n x,\u00a0y from DataBuffer data\n and storing the pixel data in data elements of type\n dataType:\n \n      int dataElementSize = DataBuffer.getDataTypeSize(dataType);\n      int bitnum = dataBitOffset + x*pixelBitStride;\n      int element = data.getElem(y*scanlineStride + bitnum/dataElementSize);\n      int shift = dataElementSize - (bitnum & (dataElementSize-1))\n                  - pixelBitStride;\n      int pixel = (element >> shift) & ((1 << pixelBitStride) - 1);\n ", "codes": ["public class MultiPixelPackedSampleModel\nextends SampleModel"], "fields": [], "methods": [{"method_name": "createCompatibleSampleModel", "method_sig": "public SampleModel createCompatibleSampleModel (int w,\n                                               int h)", "description": "Creates a new MultiPixelPackedSampleModel with the\n specified width and height.  The new\n MultiPixelPackedSampleModel has the\n same storage data type and number of bits per pixel as this\n MultiPixelPackedSampleModel."}, {"method_name": "createDataBuffer", "method_sig": "public DataBuffer createDataBuffer()", "description": "Creates a DataBuffer that corresponds to this\n MultiPixelPackedSampleModel.  The\n DataBuffer object's data type and size\n is consistent with this MultiPixelPackedSampleModel.\n The DataBuffer has a single bank."}, {"method_name": "getNumDataElements", "method_sig": "public int getNumDataElements()", "description": "Returns the number of data elements needed to transfer one pixel\n via the getDataElements(int, int, java.lang.Object, java.awt.image.DataBuffer) and setDataElements(int, int, java.lang.Object, java.awt.image.DataBuffer)\n methods.  For a MultiPixelPackedSampleModel, this is\n one."}, {"method_name": "getSampleSize", "method_sig": "public int[] getSampleSize()", "description": "Returns the number of bits per sample for all bands."}, {"method_name": "getSampleSize", "method_sig": "public int getSampleSize (int band)", "description": "Returns the number of bits per sample for the specified band."}, {"method_name": "getOffset", "method_sig": "public int getOffset (int x,\n                     int y)", "description": "Returns the offset of pixel (x,\u00a0y) in data array elements."}, {"method_name": "getBitOffset", "method_sig": "public int getBitOffset (int x)", "description": "Returns the offset, in bits, into the data element in which it is\n  stored for the xth pixel of a scanline.\n  This offset is the same for all scanlines."}, {"method_name": "getScanlineStride", "method_sig": "public int getScanlineStride()", "description": "Returns the scanline stride."}, {"method_name": "getPixelBitStride", "method_sig": "public int getPixelBitStride()", "description": "Returns the pixel bit stride in bits.  This value is the same as\n the number of bits per pixel."}, {"method_name": "getDataBitOffset", "method_sig": "public int getDataBitOffset()", "description": "Returns the data bit offset in bits."}, {"method_name": "getTransferType", "method_sig": "public int getTransferType()", "description": "Returns the TransferType used to transfer pixels by way of the\n  getDataElements and setDataElements\n  methods. The TransferType might or might not be the same as the\n  storage DataType.  The TransferType is one of\n  DataBuffer.TYPE_BYTE, DataBuffer.TYPE_USHORT,\n  or DataBuffer.TYPE_INT."}, {"method_name": "createSubsetSampleModel", "method_sig": "public SampleModel createSubsetSampleModel (int[] bands)", "description": "Creates a new MultiPixelPackedSampleModel with a\n subset of the bands of this\n MultiPixelPackedSampleModel.  Since a\n MultiPixelPackedSampleModel only has one band, the\n bands argument must have a length of one and indicate the zeroth\n band."}, {"method_name": "getSample", "method_sig": "public int getSample (int x,\n                     int y,\n                     int b,\n                     DataBuffer data)", "description": "Returns as int the sample in a specified band for the\n pixel located at (x,\u00a0y).  An\n ArrayIndexOutOfBoundsException is thrown if the\n coordinates are not in bounds."}, {"method_name": "setSample", "method_sig": "public void setSample (int x,\n                      int y,\n                      int b,\n                      int s,\n                      DataBuffer data)", "description": "Sets a sample in the specified band for the pixel located at\n (x,\u00a0y) in the DataBuffer using an\n int for input.\n An ArrayIndexOutOfBoundsException is thrown if the\n coordinates are not in bounds."}, {"method_name": "getDataElements", "method_sig": "public Object getDataElements (int x,\n                              int y,\n                              Object obj,\n                              DataBuffer data)", "description": "Returns data for a single pixel in a primitive array of type\n TransferType.  For a MultiPixelPackedSampleModel,\n the array has one element, and the type is the smallest of\n DataBuffer.TYPE_BYTE, DataBuffer.TYPE_USHORT, or DataBuffer.TYPE_INT\n that can hold a single pixel.  Generally, obj\n should be passed in as null, so that the\n Object is created automatically and is the\n correct primitive data type.\n \n The following code illustrates transferring data for one pixel from\n DataBuffer db1, whose storage layout is\n described by MultiPixelPackedSampleModel\nmppsm1, to DataBuffer db2,\n whose storage layout is described by\n MultiPixelPackedSampleModel mppsm2.\n The transfer is generally more efficient than using\n getPixel or setPixel.\n \n       MultiPixelPackedSampleModel mppsm1, mppsm2;\n       DataBufferInt db1, db2;\n       mppsm2.setDataElements(x, y, mppsm1.getDataElements(x, y, null,\n                              db1), db2);\n \n Using getDataElements or setDataElements\n to transfer between two DataBuffer/SampleModel pairs\n is legitimate if the SampleModels have the same number\n of bands, corresponding bands have the same number of\n bits per sample, and the TransferTypes are the same.\n \n If obj is not null, it should be a\n primitive array of type TransferType.  Otherwise, a\n ClassCastException is thrown.  An\n ArrayIndexOutOfBoundsException is thrown if the\n coordinates are not in bounds, or if obj is not\n null and is not large enough to hold the pixel data."}, {"method_name": "getPixel", "method_sig": "public int[] getPixel (int x,\n                      int y,\n                      int[] iArray,\n                      DataBuffer data)", "description": "Returns the specified single band pixel in the first element\n of an int array.\n ArrayIndexOutOfBoundsException is thrown if the\n coordinates are not in bounds."}, {"method_name": "setDataElements", "method_sig": "public void setDataElements (int x,\n                            int y,\n                            Object obj,\n                            DataBuffer data)", "description": "Sets the data for a single pixel in the specified\n DataBuffer from a primitive array of type\n TransferType.  For a MultiPixelPackedSampleModel,\n only the first element of the array holds valid data,\n and the type must be the smallest of\n DataBuffer.TYPE_BYTE, DataBuffer.TYPE_USHORT, or DataBuffer.TYPE_INT\n that can hold a single pixel.\n \n The following code illustrates transferring data for one pixel from\n DataBuffer db1, whose storage layout is\n described by MultiPixelPackedSampleModel\nmppsm1, to DataBuffer db2,\n whose storage layout is described by\n MultiPixelPackedSampleModel mppsm2.\n The transfer is generally more efficient than using\n getPixel or setPixel.\n \n       MultiPixelPackedSampleModel mppsm1, mppsm2;\n       DataBufferInt db1, db2;\n       mppsm2.setDataElements(x, y, mppsm1.getDataElements(x, y, null,\n                              db1), db2);\n \n Using getDataElements or setDataElements to\n transfer between two DataBuffer/SampleModel pairs is\n legitimate if the SampleModel objects have\n the same number of bands, corresponding bands have the same number of\n bits per sample, and the TransferTypes are the same.\n \nobj must be a primitive array of type TransferType.\n Otherwise, a ClassCastException is thrown.  An\n ArrayIndexOutOfBoundsException is thrown if the\n coordinates are not in bounds, or if obj is not large\n enough to hold the pixel data."}, {"method_name": "setPixel", "method_sig": "public void setPixel (int x,\n                     int y,\n                     int[] iArray,\n                     DataBuffer data)", "description": "Sets a pixel in the DataBuffer using an\n int array for input.\n ArrayIndexOutOfBoundsException is thrown if\n the coordinates are not in bounds."}]}