{"name": "Class HttpResponse.BodySubscribers", "module": "java.net.http", "package": "java.net.http", "text": "Implementations of BodySubscriber that implement\n various useful subscribers, such as converting the response body bytes\n into a String, or streaming the bytes to a file.\n\n The following are examples of using the predefined body subscribers\n to convert a flow of response body data into common high-level Java\n objects:\n\n    // Streams the response body to a File\n   HttpResponse<byte[]> response = client\n     .send(request, responseInfo -> BodySubscribers.ofByteArray());\n\n   // Accumulates the response body and returns it as a byte[]\n   HttpResponse<byte[]> response = client\n     .send(request, responseInfo -> BodySubscribers.ofByteArray());\n\n   // Discards the response body\n   HttpResponse<Void> response = client\n     .send(request, responseInfo -> BodySubscribers.discarding());\n\n   // Accumulates the response body as a String then maps it to its bytes\n   HttpResponse<byte[]> response = client\n     .send(request, responseInfo ->\n        BodySubscribers.mapping(BodySubscribers.ofString(UTF_8), String::getBytes));\n ", "codes": ["public static class HttpResponse.BodySubscribers\nextends Object"], "fields": [], "methods": [{"method_name": "fromSubscriber", "method_sig": "public static HttpResponse.BodySubscriber<Void> fromSubscriber (Flow.Subscriber<? super List<ByteBuffer>> subscriber)", "description": "Returns a body subscriber that forwards all response body to the\n given Flow.Subscriber. The completion stage of the returned body subscriber completes after one\n of the given subscribers onComplete or onError has\n been invoked."}, {"method_name": "fromSubscriber", "method_sig": "public static <S extends Flow.Subscriber<? super List<ByteBuffer>>, T> HttpResponse.BodySubscriber<T> fromSubscriber (S subscriber,\n                                                                                                                          Function<? super S, ? extends T> finisher)", "description": "Returns a body subscriber that forwards all response body to the\n given Flow.Subscriber. The completion stage of the returned body subscriber completes after one\n of the given subscribers onComplete or onError has\n been invoked.\n\n  The given finisher function is applied after the given\n subscriber's onComplete has been invoked. The finisher\n function is invoked with the given subscriber, and returns a value\n that is set as the response's body."}, {"method_name": "fromLineSubscriber", "method_sig": "public static HttpResponse.BodySubscriber<Void> fromLineSubscriber (Flow.Subscriber<? super String> subscriber)", "description": "Returns a body subscriber that forwards all response body to the\n given Flow.Subscriber, line by line.\n The completion\n stage of the returned body subscriber completes after one of the\n given subscribers onComplete or onError has been\n invoked.\n Bytes are decoded using the UTF-8 charset, and lines are delimited in the manner of\n BufferedReader.readLine()."}, {"method_name": "fromLineSubscriber", "method_sig": "public static <S extends Flow.Subscriber<? super String>, T> HttpResponse.BodySubscriber<T> fromLineSubscriber (S subscriber,\n                                                                                                                    Function<? super S, ? extends T> finisher,\n                                                                                                                    Charset charset,\n                                                                                                                    String lineSeparator)", "description": "Returns a body subscriber that forwards all response body to the\n given Flow.Subscriber, line by line. The completion stage of the returned body\n subscriber completes after one of the given subscribers\n onComplete or onError has been invoked.\n\n  The given finisher function is applied after the given\n subscriber's onComplete has been invoked. The finisher\n function is invoked with the given subscriber, and returns a value\n that is set as the response's body."}, {"method_name": "ofString", "method_sig": "public static HttpResponse.BodySubscriber<String> ofString (Charset charset)", "description": "Returns a body subscriber which stores the response body as a \n String converted using the given Charset.\n\n  The HttpResponse using this subscriber is available after\n the entire response has been read."}, {"method_name": "ofByteArray", "method_sig": "public static HttpResponse.BodySubscriber<byte[]> ofByteArray()", "description": "Returns a BodySubscriber which stores the response body as a\n byte array.\n\n  The HttpResponse using this subscriber is available after\n the entire response has been read."}, {"method_name": "ofFile", "method_sig": "public static HttpResponse.BodySubscriber<Path> ofFile (Path file,\n                                                       OpenOption... openOptions)", "description": "Returns a BodySubscriber which stores the response body in a\n file opened with the given options and name. The file will be opened\n with the given options using FileChannel.open just before the body is read. Any exception thrown\n will be returned or thrown from HttpClient::send or HttpClient::sendAsync as appropriate.\n\n  The HttpResponse using this subscriber is available after\n the entire response has been read.\n\n  Security manager permission checks are performed in this factory\n method, when the BodySubscriber is created. Care must be taken\n that the BodyHandler is not shared with untrusted code."}, {"method_name": "ofFile", "method_sig": "public static HttpResponse.BodySubscriber<Path> ofFile (Path file)", "description": "Returns a BodySubscriber which stores the response body in a\n file opened with the given name.\n\n  Equivalent to: ofFile(file, CREATE, WRITE)\n Security manager permission checks are performed in this factory\n method, when the BodySubscriber is created. Care must be taken\n that the BodyHandler is not shared with untrusted code."}, {"method_name": "ofByteArrayConsumer", "method_sig": "public static HttpResponse.BodySubscriber<Void> ofByteArrayConsumer (Consumer<Optional<byte[]>> consumer)", "description": "Returns a BodySubscriber which provides the incoming body\n data to the provided Consumer of Optional<byte[]>. Each\n call to Consumer.accept()\n will contain a non empty Optional, except for the final\n invocation after all body data has been read, when the \n Optional will be empty.\n\n  The HttpResponse using this subscriber is available after\n the entire response has been read."}, {"method_name": "ofInputStream", "method_sig": "public static HttpResponse.BodySubscriber<InputStream> ofInputStream()", "description": "Returns a BodySubscriber which streams the response body as\n an InputStream.\n\n  The HttpResponse using this subscriber is available\n immediately after the response headers have been read, without\n requiring to wait for the entire body to be processed. The response\n body can then be read directly from the InputStream."}, {"method_name": "ofLines", "method_sig": "public static HttpResponse.BodySubscriber<Stream<String>> ofLines (Charset charset)", "description": "Returns a BodySubscriber which streams the response body as\n a Stream, where each string in the stream\n corresponds to a line as defined by BufferedReader.lines().\n\n  The HttpResponse using this subscriber is available\n immediately after the response headers have been read, without\n requiring to wait for the entire body to be processed. The response\n body can then be read directly from the Stream."}, {"method_name": "ofPublisher", "method_sig": "public static HttpResponse.BodySubscriber<Flow.Publisher<List<ByteBuffer>>> ofPublisher()", "description": "Returns a response subscriber which publishes the response body\n through a Publisher<List<ByteBuffer>>.\n\n  The HttpResponse using this subscriber is available\n immediately after the response headers have been read, without\n requiring to wait for the entire body to be processed. The response\n body bytes can then be obtained by subscribing to the publisher\n returned by the HttpResponse body\n method.\n\n The publisher returned by the body\n method can be subscribed to only once. The first subscriber will\n receive the body response bytes if successfully subscribed, or will\n cause the subscription to be cancelled otherwise.\n If more subscriptions are attempted, the subsequent subscribers will\n be immediately subscribed with an empty subscription and their\n onError method\n will be invoked with an IllegalStateException."}, {"method_name": "replacing", "method_sig": "public static <U> HttpResponse.BodySubscriber<U> replacing (U value)", "description": "Returns a response subscriber which discards the response body. The\n supplied value is the value that will be returned from\n HttpResponse.body()."}, {"method_name": "discarding", "method_sig": "public static HttpResponse.BodySubscriber<Void> discarding()", "description": "Returns a response subscriber which discards the response body."}, {"method_name": "buffering", "method_sig": "public static <T> HttpResponse.BodySubscriber<T> buffering (HttpResponse.BodySubscriber<T> downstream,\n                                                           int bufferSize)", "description": "Returns a BodySubscriber which buffers data before delivering\n it to the given downstream subscriber. The subscriber guarantees to\n deliver buffersize bytes of data to each invocation of the\n downstream's onNext method,\n except for the final invocation, just before\n onComplete is invoked. The final\n invocation of onNext may contain fewer than bufferSize\n bytes.\n\n  The returned subscriber delegates its getBody() method to the downstream subscriber."}, {"method_name": "mapping", "method_sig": "public static <T, U> HttpResponse.BodySubscriber<U> mapping (HttpResponse.BodySubscriber<T> upstream,\n                                                                 Function<? super T, ? extends U> mapper)", "description": "Returns a BodySubscriber whose response body value is that of\n the result of applying the given function to the body object of the\n given upstream BodySubscriber.\n\n  The mapping function is executed using the client's executor, and can therefore be used to map any\n response body type, including blocking InputStream, as shown\n in the following example which uses a well-known JSON parser to\n convert an InputStream into any annotated Java type.\n\n For example:\n   public static <W> BodySubscriber<W> asJSON(Class<W> targetType) {\n     BodySubscriber<InputStream> upstream = BodySubscribers.ofInputStream();\n\n     BodySubscriber<W> downstream = BodySubscribers.mapping(\n           upstream,\n           (InputStream is) -> {\n               try (InputStream stream = is) {\n                   ObjectMapper objectMapper = new ObjectMapper();\n                   return objectMapper.readValue(stream, targetType);\n               } catch (IOException e) {\n                   throw new UncheckedIOException(e);\n               }\n           });\n    return downstream;\n } "}]}