{"name": "Class LayoutFocusTraversalPolicy", "module": "java.desktop", "package": "javax.swing", "text": "A SortingFocusTraversalPolicy which sorts Components based on their size,\n position, and orientation. Based on their size and position, Components are\n roughly categorized into rows and columns. For a Container with horizontal\n orientation, columns run left-to-right or right-to-left, and rows run top-\n to-bottom. For a Container with vertical orientation, columns run top-to-\n bottom and rows run left-to-right or right-to-left. See\n ComponentOrientation for more information. All columns in a\n row are fully traversed before proceeding to the next row.", "codes": ["public class LayoutFocusTraversalPolicy\nextends SortingFocusTraversalPolicy\nimplements Serializable"], "fields": [], "methods": [{"method_name": "getComponentAfter", "method_sig": "public Component getComponentAfter (Container aContainer,\n                                   Component aComponent)", "description": "Returns the Component that should receive the focus after aComponent.\n aContainer must be a focus cycle root of aComponent.\n \n By default, LayoutFocusTraversalPolicy implicitly transfers focus down-\n cycle. That is, during normal focus traversal, the Component\n traversed after a focus cycle root will be the focus-cycle-root's\n default Component to focus. This behavior can be disabled using the\n setImplicitDownCycleTraversal method.\n \n If aContainer is focus\n traversal policy provider, the focus is always transferred down-cycle."}, {"method_name": "getComponentBefore", "method_sig": "public Component getComponentBefore (Container aContainer,\n                                    Component aComponent)", "description": "Returns the Component that should receive the focus before aComponent.\n aContainer must be a focus cycle root of aComponent.\n \n By default, LayoutFocusTraversalPolicy implicitly transfers focus down-\n cycle. That is, during normal focus traversal, the Component\n traversed after a focus cycle root will be the focus-cycle-root's\n default Component to focus. This behavior can be disabled using the\n setImplicitDownCycleTraversal method.\n \n If aContainer is focus\n traversal policy provider, the focus is always transferred down-cycle."}, {"method_name": "getFirstComponent", "method_sig": "public Component getFirstComponent (Container aContainer)", "description": "Returns the first Component in the traversal cycle. This method is used\n to determine the next Component to focus when traversal wraps in the\n forward direction."}, {"method_name": "getLastComponent", "method_sig": "public Component getLastComponent (Container aContainer)", "description": "Returns the last Component in the traversal cycle. This method is used\n to determine the next Component to focus when traversal wraps in the\n reverse direction."}, {"method_name": "accept", "method_sig": "protected boolean accept (Component aComponent)", "description": "Determines whether the specified Component\n is an acceptable choice as the new focus owner.\n This method performs the following sequence of operations:\n \nChecks whether aComponent is visible, displayable,\n     enabled, and focusable.  If any of these properties is\n     false, this method returns false.\n If aComponent is an instance of JTable,\n     returns true.\n If aComponent is an instance of JComboBox,\n     then returns the value of\n     aComponent.getUI().isFocusTraversable(aComponent).\n If aComponent is a JComponent\n     with a JComponent.WHEN_FOCUSED\nInputMap that is neither null\n     nor empty, returns true.\n Returns the value of\n     DefaultFocusTraversalPolicy.accept(aComponent).\n "}]}