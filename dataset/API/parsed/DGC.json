{"name": "Interface DGC", "module": "java.rmi", "package": "java.rmi.dgc", "text": "The DGC abstraction is used for the server side of the distributed\n garbage collection algorithm. This interface contains the two\n methods: dirty and clean. A dirty call is made when a remote\n reference is unmarshaled in a client (the client is indicated by\n its VMID). A corresponding clean call is made when no more\n references to the remote reference exist in the client. A failed\n dirty call must schedule a strong clean call so that the call's\n sequence number can be retained in order to detect future calls\n received out of order by the distributed garbage collector.\n\n A reference to a remote object is leased for a period of time by\n the client holding the reference. The lease period starts when the\n dirty call is received. It is the client's responsibility to renew\n the leases, by making additional dirty calls, on the remote\n references it holds before such leases expire. If the client does\n not renew the lease before it expires, the distributed garbage\n collector assumes that the remote object is no longer referenced by\n that client.", "codes": ["public interface DGC\nextends Remote"], "fields": [], "methods": [{"method_name": "dirty", "method_sig": "Lease dirty (ObjID[] ids,\n            long sequenceNum,\n            Lease lease)\n     throws RemoteException", "description": "The dirty call requests leases for the remote object references\n associated with the object identifiers contained in the array\n 'ids'. The 'lease' contains a client's unique VM identifier (VMID)\n and a requested lease period. For each remote object exported\n in the local VM, the garbage collector maintains a reference\n list-a list of clients that hold references to it. If the lease\n is granted, the garbage collector adds the client's VMID to the\n reference list for each remote object indicated in 'ids'. The\n 'sequenceNum' parameter is a sequence number that is used to\n detect and discard late calls to the garbage collector. The\n sequence number should always increase for each subsequent call\n to the garbage collector.\n\n Some clients are unable to generate a VMID, since a VMID is a\n universally unique identifier that contains a host address\n which some clients are unable to obtain due to security\n restrictions. In this case, a client can use a VMID of null,\n and the distributed garbage collector will assign a VMID for\n the client.\n\n The dirty call returns a Lease object that contains the VMID\n used and the lease period granted for the remote references (a\n server may decide to grant a smaller lease period than the\n client requests). A client must use the VMID the garbage\n collector uses in order to make corresponding clean calls when\n the client drops remote object references.\n\n A client VM need only make one initial dirty call for each\n remote reference referenced in the VM (even if it has multiple\n references to the same remote object). The client must also\n make a dirty call to renew leases on remote references before\n such leases expire. When the client no longer has any\n references to a specific remote object, it must schedule a\n clean call for the object ID associated with the reference."}, {"method_name": "clean", "method_sig": "void clean (ObjID[] ids,\n           long sequenceNum,\n           VMID vmid,\n           boolean strong)\n    throws RemoteException", "description": "The clean call removes the 'vmid' from the reference list of\n each remote object indicated in 'id's.  The sequence number is\n used to detect late clean calls.  If the argument 'strong' is\n true, then the clean call is a result of a failed dirty call,\n thus the sequence number for the client 'vmid' needs to be\n remembered."}]}