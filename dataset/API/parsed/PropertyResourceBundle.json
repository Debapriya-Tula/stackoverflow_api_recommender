{"name": "Class PropertyResourceBundle", "module": "java.base", "package": "java.util", "text": "PropertyResourceBundle is a concrete subclass of\n ResourceBundle that manages resources for a locale\n using a set of static strings from a property file. See\n ResourceBundle for more information about resource\n bundles.\n\n \n Unlike other types of resource bundle, you don't subclass\n PropertyResourceBundle.  Instead, you supply properties\n files containing the resource data.  ResourceBundle.getBundle\n will automatically look for the appropriate properties file and create a\n PropertyResourceBundle that refers to it. See\n ResourceBundle.getBundle\n for a complete description of the search and instantiation strategy.\n\n \n The following example shows a member of a resource\n bundle family with the base name \"MyResources\".\n The text defines the bundle \"MyResources_de\",\n the German member of the bundle family.\n This member is based on PropertyResourceBundle, and the text\n therefore is the content of the file \"MyResources_de.properties\"\n (a related example shows\n how you can add bundles to this family that are implemented as subclasses\n of ListResourceBundle).\n The keys in this example are of the form \"s1\" etc. The actual\n keys are entirely up to your choice, so long as they are the same as\n the keys you use in your program to retrieve the objects from the bundle.\n Keys are case-sensitive.\n \n\n # MessageFormat pattern\n s1=Die Platte \\\"{1}\\\" enth\u00e4lt {0}.\n\n # location of {0} in pattern\n s2=1\n\n # sample disk name\n s3=Meine Platte\n\n # first ChoiceFormat choice\n s4=keine Dateien\n\n # second ChoiceFormat choice\n s5=eine Datei\n\n # third ChoiceFormat choice\n s6={0,number} Dateien\n\n # sample date\n s7=3. M\u00e4rz 1996\n \n", "codes": ["public class PropertyResourceBundle\nextends ResourceBundle"], "fields": [], "methods": [{"method_name": "getKeys", "method_sig": "public Enumeration<String> getKeys()", "description": "Returns an Enumeration of the keys contained in\n this ResourceBundle and its parent bundles."}, {"method_name": "handleKeySet", "method_sig": "protected Set<String> handleKeySet()", "description": "Returns a Set of the keys contained\n only in this ResourceBundle."}]}