{"name": "Interface EventRequest", "module": "jdk.jdi", "package": "com.sun.jdi.request", "text": "Represents a request for notification of an event.  Examples include\n BreakpointRequest and ExceptionRequest.\n When an event occurs for which an enabled request is present,\n an  EventSet will\n be placed on the EventQueue.\n The collection of existing event requests is\n managed by the EventRequestManager.\n \n The number of events generated for an event request can be controlled\n through filters. Filters provide additional constraints that an event\n must satisfy before it is placed on the event queue. Multiple filters can\n be used by making multiple calls to filter addition methods such as\n ExceptionRequest.addClassFilter(java.lang.String classPattern).\n Filters are added to an event one at a time only while the event is\n disabled. Multiple filters are applied with CUT-OFF AND, in the order\n it was added to the request. Only events that satisfy all filters are\n placed in the event queue.\n \n The set of available filters is dependent on the event request,\n some examples of filters are:\n \nThread filters allow control over the thread for which events are\n generated.\n Class filters allow control over the class in which the event\n occurs.\n Instance filters allow control over the instance in which\n the event occurs.\n Count filters allow control over the number of times an event\n is reported.\n \n Filters can dramatically improve debugger performance by reducing the\n amount of event traffic sent from the target VM to the debugger VM.\n \n Any method on EventRequest which\n takes EventRequest as an parameter may throw\n VMDisconnectedException if the target VM is\n disconnected and the VMDisconnectEvent has been or is\n available to be read from the EventQueue.\n \n Any method on EventRequest which\n takes EventRequest as an parameter may throw\n VMOutOfMemoryException if the target VM has run out of memory.", "codes": ["public interface EventRequest\nextends Mirror"], "fields": [{"field_name": "SUSPEND_NONE", "field_sig": "static final\u00a0int SUSPEND_NONE", "description": "Suspend no threads when the event occurs"}, {"field_name": "SUSPEND_EVENT_THREAD", "field_sig": "static final\u00a0int SUSPEND_EVENT_THREAD", "description": "Suspend only the thread which generated the event when the event occurs"}, {"field_name": "SUSPEND_ALL", "field_sig": "static final\u00a0int SUSPEND_ALL", "description": "Suspend all threads when the event occurs"}], "methods": [{"method_name": "isEnabled", "method_sig": "boolean isEnabled()", "description": "Determines if this event request is currently enabled."}, {"method_name": "setEnabled", "method_sig": "void setEnabled (boolean val)", "description": "Enables or disables this event request. While this event request is\n disabled, the event request will be ignored and the target VM\n will not be stopped if any of its threads reaches the\n event request.  Disabled event requests still exist,\n and are included in event request lists such as\n EventRequestManager.breakpointRequests()."}, {"method_name": "enable", "method_sig": "void enable()", "description": "Same as setEnabled(true)."}, {"method_name": "disable", "method_sig": "void disable()", "description": "Same as setEnabled(false)."}, {"method_name": "addCountFilter", "method_sig": "void addCountFilter (int count)", "description": "Limit the requested event to be reported at most once after a\n given number of occurrences.  The event is not reported\n the first count - 1 times this filter is reached.\n To request a one-off event, call this method with a count of 1.\n \n Once the count reaches 0, any subsequent filters in this request\n are applied. If none of those filters cause the event to be\n suppressed, the event is reported. Otherwise, the event is not\n reported. In either case subsequent events are never reported for\n this request."}, {"method_name": "setSuspendPolicy", "method_sig": "void setSuspendPolicy (int policy)", "description": "Determines the threads to suspend when the requested event occurs\n in the target VM. Use SUSPEND_ALL to suspend all\n threads in the target VM (the default). Use SUSPEND_EVENT_THREAD\n to suspend only the thread which generated the event. Use\n SUSPEND_NONE to suspend no threads.\n \n Thread suspensions through events have the same functionality\n as explicitly requested suspensions. See\n ThreadReference.suspend() and\n VirtualMachine.suspend() for details."}, {"method_name": "suspendPolicy", "method_sig": "int suspendPolicy()", "description": "Returns a value which describes the threads to suspend when the\n requested event occurs in the target VM.\n The returned value is  SUSPEND_ALL,\n SUSPEND_EVENT_THREAD, or SUSPEND_NONE."}, {"method_name": "putProperty", "method_sig": "void putProperty (Object key,\n                 Object value)", "description": "Add an arbitrary key/value \"property\" to this request.\n The property can be used by a client of the JDI to\n associate application information with the request;\n These client-set properties are not used internally\n by the JDI.\n \n The get/putProperty methods provide access to\n a small per-instance map. This is not to be confused\n with Properties.\n \n If value is null this method will remove the property."}, {"method_name": "getProperty", "method_sig": "Object getProperty (Object key)", "description": "Returns the value of the property with the specified key.  Only\n properties added with putProperty(java.lang.Object, java.lang.Object) will return\n a non-null value."}]}