{"name": "Class CharsetDecoder", "module": "java.base", "package": "java.nio.charset", "text": "An engine that can transform a sequence of bytes in a specific charset into a sequence of\n sixteen-bit Unicode characters.\n\n \n The input byte sequence is provided in a byte buffer or a series\n of such buffers.  The output character sequence is written to a character buffer\n or a series of such buffers.  A decoder should always be used by making\n the following sequence of method invocations, hereinafter referred to as a\n decoding operation:\n\n \n Reset the decoder via the reset method, unless it\n   has not been used before; \n Invoke the decode method zero or more times, as\n   long as additional input may be available, passing false for the\n   endOfInput argument and filling the input buffer and flushing the\n   output buffer between invocations; \n Invoke the decode method one final time, passing\n   true for the endOfInput argument; and then \n Invoke the flush method so that the decoder can\n   flush any internal state to the output buffer. \n\n\n Each invocation of the decode method will decode as many\n bytes as possible from the input buffer, writing the resulting characters\n to the output buffer.  The decode method returns when more\n input is required, when there is not enough room in the output buffer, or\n when a decoding error has occurred.  In each case a CoderResult\n object is returned to describe the reason for termination.  An invoker can\n examine this object and fill the input buffer, flush the output buffer, or\n attempt to recover from a decoding error, as appropriate, and try again.\n\n \n There are two general types of decoding errors.  If the input byte\n sequence is not legal for this charset then the input is considered malformed.  If\n the input byte sequence is legal but cannot be mapped to a valid\n Unicode character then an unmappable character has been encountered.\n\n \n How a decoding error is handled depends upon the action requested for\n that type of error, which is described by an instance of the CodingErrorAction class.  The possible error actions are to ignore the erroneous input, report the error to the invoker via\n the returned CoderResult object, or replace the erroneous input with the current value of the\n replacement string.  The replacement\n\n\n\n\n\n\n has the initial value \"\\uFFFD\";\n\n\n its value may be changed via the replaceWith method.\n\n  The default action for malformed-input and unmappable-character errors\n is to report them.  The\n malformed-input error action may be changed via the onMalformedInput method; the\n unmappable-character action may be changed via the onUnmappableCharacter method.\n\n  This class is designed to handle many of the details of the decoding\n process, including the implementation of error actions.  A decoder for a\n specific charset, which is a concrete subclass of this class, need only\n implement the abstract decodeLoop method, which\n encapsulates the basic decoding loop.  A subclass that maintains internal\n state should, additionally, override the implFlush and\n implReset methods.\n\n  Instances of this class are not safe for use by multiple concurrent\n threads.  ", "codes": ["public abstract class CharsetDecoder\nextends Object"], "fields": [], "methods": [{"method_name": "charset", "method_sig": "public final Charset charset()", "description": "Returns the charset that created this decoder."}, {"method_name": "replacement", "method_sig": "public final String replacement()", "description": "Returns this decoder's replacement value."}, {"method_name": "replaceWith", "method_sig": "public final CharsetDecoder replaceWith (String newReplacement)", "description": "Changes this decoder's replacement value.\n\n  This method invokes the implReplaceWith\n method, passing the new replacement, after checking that the new\n replacement is acceptable.  "}, {"method_name": "implReplaceWith", "method_sig": "protected void implReplaceWith (String newReplacement)", "description": "Reports a change to this decoder's replacement value.\n\n  The default implementation of this method does nothing.  This method\n should be overridden by decoders that require notification of changes to\n the replacement.  "}, {"method_name": "malformedInputAction", "method_sig": "public CodingErrorAction malformedInputAction()", "description": "Returns this decoder's current action for malformed-input errors."}, {"method_name": "onMalformedInput", "method_sig": "public final CharsetDecoder onMalformedInput (CodingErrorAction newAction)", "description": "Changes this decoder's action for malformed-input errors.\n\n  This method invokes the implOnMalformedInput method, passing the new action.  "}, {"method_name": "implOnMalformedInput", "method_sig": "protected void implOnMalformedInput (CodingErrorAction newAction)", "description": "Reports a change to this decoder's malformed-input action.\n\n  The default implementation of this method does nothing.  This method\n should be overridden by decoders that require notification of changes to\n the malformed-input action.  "}, {"method_name": "unmappableCharacterAction", "method_sig": "public CodingErrorAction unmappableCharacterAction()", "description": "Returns this decoder's current action for unmappable-character errors."}, {"method_name": "onUnmappableCharacter", "method_sig": "public final CharsetDecoder onUnmappableCharacter (CodingErrorAction newAction)", "description": "Changes this decoder's action for unmappable-character errors.\n\n  This method invokes the implOnUnmappableCharacter method, passing the new action.  "}, {"method_name": "implOnUnmappableCharacter", "method_sig": "protected void implOnUnmappableCharacter (CodingErrorAction newAction)", "description": "Reports a change to this decoder's unmappable-character action.\n\n  The default implementation of this method does nothing.  This method\n should be overridden by decoders that require notification of changes to\n the unmappable-character action.  "}, {"method_name": "averageCharsPerByte", "method_sig": "public final float averageCharsPerByte()", "description": "Returns the average number of characters that will be produced for each\n byte of input.  This heuristic value may be used to estimate the size\n of the output buffer required for a given input sequence."}, {"method_name": "maxCharsPerByte", "method_sig": "public final float maxCharsPerByte()", "description": "Returns the maximum number of characters that will be produced for each\n byte of input.  This value may be used to compute the worst-case size\n of the output buffer required for a given input sequence."}, {"method_name": "decode", "method_sig": "public final CoderResult decode (ByteBuffer in,\n                                CharBuffer out,\n                                boolean endOfInput)", "description": "Decodes as many bytes as possible from the given input buffer,\n writing the results to the given output buffer.\n\n  The buffers are read from, and written to, starting at their current\n positions.  At most in.remaining() bytes\n will be read and at most out.remaining()\n characters will be written.  The buffers' positions will be advanced to\n reflect the bytes read and the characters written, but their marks and\n limits will not be modified.\n\n  In addition to reading bytes from the input buffer and writing\n characters to the output buffer, this method returns a CoderResult\n object to describe its reason for termination:\n\n \n CoderResult.UNDERFLOW indicates that as much of the\n   input buffer as possible has been decoded.  If there is no further\n   input then the invoker can proceed to the next step of the\n   decoding operation.  Otherwise this method\n   should be invoked again with further input.  \n CoderResult.OVERFLOW indicates that there is\n   insufficient space in the output buffer to decode any more bytes.\n   This method should be invoked again with an output buffer that has\n   more remaining characters. This is\n   typically done by draining any decoded characters from the output\n   buffer.  \n A malformed-input result indicates that a malformed-input\n   error has been detected.  The malformed bytes begin at the input\n   buffer's (possibly incremented) position; the number of malformed\n   bytes may be determined by invoking the result object's length method.  This case applies only if the\n   malformed action of this decoder\n   is CodingErrorAction.REPORT; otherwise the malformed input\n   will be ignored or replaced, as requested.  \n An unmappable-character result indicates that an\n   unmappable-character error has been detected.  The bytes that\n   decode the unmappable character begin at the input buffer's (possibly\n   incremented) position; the number of such bytes may be determined\n   by invoking the result object's length\n   method.  This case applies only if the unmappable action of this decoder is CodingErrorAction.REPORT; otherwise the unmappable character will be\n   ignored or replaced, as requested.  \n\n\n In any case, if this method is to be reinvoked in the same decoding\n operation then care should be taken to preserve any bytes remaining\n in the input buffer so that they are available to the next invocation.\n\n  The endOfInput parameter advises this method as to whether\n the invoker can provide further input beyond that contained in the given\n input buffer.  If there is a possibility of providing additional input\n then the invoker should pass false for this parameter; if there\n is no possibility of providing further input then the invoker should\n pass true.  It is not erroneous, and in fact it is quite\n common, to pass false in one invocation and later discover that\n no further input was actually available.  It is critical, however, that\n the final invocation of this method in a sequence of invocations always\n pass true so that any remaining undecoded input will be treated\n as being malformed.\n\n  This method works by invoking the decodeLoop\n method, interpreting its results, handling error conditions, and\n reinvoking it as necessary.  "}, {"method_name": "flush", "method_sig": "public final CoderResult flush (CharBuffer out)", "description": "Flushes this decoder.\n\n  Some decoders maintain internal state and may need to write some\n final characters to the output buffer once the overall input sequence has\n been read.\n\n  Any additional output is written to the output buffer beginning at\n its current position.  At most out.remaining()\n characters will be written.  The buffer's position will be advanced\n appropriately, but its mark and limit will not be modified.\n\n  If this method completes successfully then it returns CoderResult.UNDERFLOW.  If there is insufficient room in the output\n buffer then it returns CoderResult.OVERFLOW.  If this happens\n then this method must be invoked again, with an output buffer that has\n more room, in order to complete the current decoding\n operation.\n\n  If this decoder has already been flushed then invoking this method\n has no effect.\n\n  This method invokes the implFlush method to\n perform the actual flushing operation.  "}, {"method_name": "implFlush", "method_sig": "protected CoderResult implFlush (CharBuffer out)", "description": "Flushes this decoder.\n\n  The default implementation of this method does nothing, and always\n returns CoderResult.UNDERFLOW.  This method should be overridden\n by decoders that may need to write final characters to the output buffer\n once the entire input sequence has been read. "}, {"method_name": "reset", "method_sig": "public final CharsetDecoder reset()", "description": "Resets this decoder, clearing any internal state.\n\n  This method resets charset-independent state and also invokes the\n implReset method in order to perform any\n charset-specific reset actions.  "}, {"method_name": "implReset", "method_sig": "protected void implReset()", "description": "Resets this decoder, clearing any charset-specific internal state.\n\n  The default implementation of this method does nothing.  This method\n should be overridden by decoders that maintain internal state.  "}, {"method_name": "decodeLoop", "method_sig": "protected abstract CoderResult decodeLoop (ByteBuffer in,\n                                          CharBuffer out)", "description": "Decodes one or more bytes into one or more characters.\n\n  This method encapsulates the basic decoding loop, decoding as many\n bytes as possible until it either runs out of input, runs out of room\n in the output buffer, or encounters a decoding error.  This method is\n invoked by the decode method, which handles result\n interpretation and error recovery.\n\n  The buffers are read from, and written to, starting at their current\n positions.  At most in.remaining() bytes\n will be read, and at most out.remaining()\n characters will be written.  The buffers' positions will be advanced to\n reflect the bytes read and the characters written, but their marks and\n limits will not be modified.\n\n  This method returns a CoderResult object to describe its\n reason for termination, in the same manner as the decode\n method.  Most implementations of this method will handle decoding errors\n by returning an appropriate result object for interpretation by the\n decode method.  An optimized implementation may instead\n examine the relevant error action and implement that action itself.\n\n  An implementation of this method may perform arbitrary lookahead by\n returning CoderResult.UNDERFLOW until it receives sufficient\n input.  "}, {"method_name": "decode", "method_sig": "public final CharBuffer decode (ByteBuffer in)\n                        throws CharacterCodingException", "description": "Convenience method that decodes the remaining content of a single input\n byte buffer into a newly-allocated character buffer.\n\n  This method implements an entire decoding\n operation; that is, it resets this decoder, then it decodes the\n bytes in the given byte buffer, and finally it flushes this\n decoder.  This method should therefore not be invoked if a decoding\n operation is already in progress.  "}, {"method_name": "isAutoDetecting", "method_sig": "public boolean isAutoDetecting()", "description": "Tells whether or not this decoder implements an auto-detecting charset.\n\n  The default implementation of this method always returns\n false; it should be overridden by auto-detecting decoders to\n return true.  "}, {"method_name": "isCharsetDetected", "method_sig": "public boolean isCharsetDetected()", "description": "Tells whether or not this decoder has yet detected a\n charset\u00a0\u00a0(optional operation).\n\n  If this decoder implements an auto-detecting charset then at a\n single point during a decoding operation this method may start returning\n true to indicate that a specific charset has been detected in\n the input byte sequence.  Once this occurs, the detectedCharset method may be invoked to retrieve the detected charset.\n\n  That this method returns false does not imply that no bytes\n have yet been decoded.  Some auto-detecting decoders are capable of\n decoding some, or even all, of an input byte sequence without fixing on\n a particular charset.\n\n  The default implementation of this method always throws an UnsupportedOperationException; it should be overridden by\n auto-detecting decoders to return true once the input charset\n has been determined.  "}, {"method_name": "detectedCharset", "method_sig": "public Charset detectedCharset()", "description": "Retrieves the charset that was detected by this\n decoder\u00a0\u00a0(optional operation).\n\n  If this decoder implements an auto-detecting charset then this\n method returns the actual charset once it has been detected.  After that\n point, this method returns the same value for the duration of the\n current decoding operation.  If not enough input bytes have yet been\n read to determine the actual charset then this method throws an IllegalStateException.\n\n  The default implementation of this method always throws an UnsupportedOperationException; it should be overridden by\n auto-detecting decoders to return the appropriate value.  "}]}