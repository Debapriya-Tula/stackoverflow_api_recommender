{"name": "Interface Deque<E>", "module": "java.base", "package": "java.util", "text": "A linear collection that supports element insertion and removal at\n both ends.  The name deque is short for \"double ended queue\"\n and is usually pronounced \"deck\".  Most Deque\n implementations place no fixed limits on the number of elements\n they may contain, but this interface supports capacity-restricted\n deques as well as those with no fixed size limit.\n\n This interface defines methods to access the elements at both\n ends of the deque.  Methods are provided to insert, remove, and\n examine the element.  Each of these methods exists in two forms:\n one throws an exception if the operation fails, the other returns a\n special value (either null or false, depending on\n the operation).  The latter form of the insert operation is\n designed specifically for use with capacity-restricted\n Deque implementations; in most implementations, insert\n operations cannot fail.\n\n The twelve methods described above are summarized in the\n following table:\n\n \nSummary of Deque methods\n\n\n\n First Element (Head)\n Last Element (Tail)\n\n\nThrows exception\nSpecial value\nThrows exception\nSpecial value\n\n\n\n\nInsert\naddFirst(e)\nofferFirst(e)\naddLast(e)\nofferLast(e)\n\n\nRemove\nremoveFirst()\npollFirst()\nremoveLast()\npollLast()\n\n\nExamine\ngetFirst()\npeekFirst()\ngetLast()\npeekLast()\n\n\n\nThis interface extends the Queue interface.  When a deque is\n used as a queue, FIFO (First-In-First-Out) behavior results.  Elements are\n added at the end of the deque and removed from the beginning.  The methods\n inherited from the Queue interface are precisely equivalent to\n Deque methods as indicated in the following table:\n\n \nComparison of Queue and Deque methods\n\n\n Queue Method\n Equivalent Deque Method\n\n\n\n\nadd(e)\naddLast(e)\n\n\noffer(e)\nofferLast(e)\n\n\nremove()\nremoveFirst()\n\n\npoll()\npollFirst()\n\n\nelement()\ngetFirst()\n\n\npeek()\npeekFirst()\n\n\n\nDeques can also be used as LIFO (Last-In-First-Out) stacks.  This\n interface should be used in preference to the legacy Stack class.\n When a deque is used as a stack, elements are pushed and popped from the\n beginning of the deque.  Stack methods are equivalent to Deque\n methods as indicated in the table below:\n\n \nComparison of Stack and Deque methods\n\n\n Stack Method\n Equivalent Deque Method\n\n\n\n\npush(e)\naddFirst(e)\n\n\npop()\nremoveFirst()\n\n\npeek()\ngetFirst()\n\n\n\nNote that the peek method works equally well when\n a deque is used as a queue or a stack; in either case, elements are\n drawn from the beginning of the deque.\n\n This interface provides two methods to remove interior\n elements, removeFirstOccurrence and\n removeLastOccurrence.\n\n Unlike the List interface, this interface does not\n provide support for indexed access to elements.\n\n While Deque implementations are not strictly required\n to prohibit the insertion of null elements, they are strongly\n encouraged to do so.  Users of any Deque implementations\n that do allow null elements are strongly encouraged not to\n take advantage of the ability to insert nulls.  This is so because\n null is used as a special return value by various methods\n to indicate that the deque is empty.\n\n Deque implementations generally do not define\n element-based versions of the equals and hashCode\n methods, but instead inherit the identity-based versions from class\n Object.\n\n This interface is a member of the\n \n Java Collections Framework.", "codes": ["public interface Deque<E>\nextends Queue<E>"], "fields": [], "methods": [{"method_name": "addFirst", "method_sig": "void addFirst (E e)", "description": "Inserts the specified element at the front of this deque if it is\n possible to do so immediately without violating capacity restrictions,\n throwing an IllegalStateException if no space is currently\n available.  When using a capacity-restricted deque, it is generally\n preferable to use method offerFirst(E)."}, {"method_name": "addLast", "method_sig": "void addLast (E e)", "description": "Inserts the specified element at the end of this deque if it is\n possible to do so immediately without violating capacity restrictions,\n throwing an IllegalStateException if no space is currently\n available.  When using a capacity-restricted deque, it is generally\n preferable to use method offerLast(E).\n\n This method is equivalent to add(E)."}, {"method_name": "offerFirst", "method_sig": "boolean offerFirst (E e)", "description": "Inserts the specified element at the front of this deque unless it would\n violate capacity restrictions.  When using a capacity-restricted deque,\n this method is generally preferable to the addFirst(E) method,\n which can fail to insert an element only by throwing an exception."}, {"method_name": "offerLast", "method_sig": "boolean offerLast (E e)", "description": "Inserts the specified element at the end of this deque unless it would\n violate capacity restrictions.  When using a capacity-restricted deque,\n this method is generally preferable to the addLast(E) method,\n which can fail to insert an element only by throwing an exception."}, {"method_name": "removeFirst", "method_sig": "E removeFirst()", "description": "Retrieves and removes the first element of this deque.  This method\n differs from pollFirst only in that it throws an\n exception if this deque is empty."}, {"method_name": "removeLast", "method_sig": "E removeLast()", "description": "Retrieves and removes the last element of this deque.  This method\n differs from pollLast only in that it throws an\n exception if this deque is empty."}, {"method_name": "pollFirst", "method_sig": "E pollFirst()", "description": "Retrieves and removes the first element of this deque,\n or returns null if this deque is empty."}, {"method_name": "pollLast", "method_sig": "E pollLast()", "description": "Retrieves and removes the last element of this deque,\n or returns null if this deque is empty."}, {"method_name": "getFirst", "method_sig": "E getFirst()", "description": "Retrieves, but does not remove, the first element of this deque.\n\n This method differs from peekFirst only in that it\n throws an exception if this deque is empty."}, {"method_name": "getLast", "method_sig": "E getLast()", "description": "Retrieves, but does not remove, the last element of this deque.\n This method differs from peekLast only in that it\n throws an exception if this deque is empty."}, {"method_name": "peekFirst", "method_sig": "E peekFirst()", "description": "Retrieves, but does not remove, the first element of this deque,\n or returns null if this deque is empty."}, {"method_name": "peekLast", "method_sig": "E peekLast()", "description": "Retrieves, but does not remove, the last element of this deque,\n or returns null if this deque is empty."}, {"method_name": "removeFirstOccurrence", "method_sig": "boolean removeFirstOccurrence (Object o)", "description": "Removes the first occurrence of the specified element from this deque.\n If the deque does not contain the element, it is unchanged.\n More formally, removes the first element e such that\n Objects.equals(o, e) (if such an element exists).\n Returns true if this deque contained the specified element\n (or equivalently, if this deque changed as a result of the call)."}, {"method_name": "removeLastOccurrence", "method_sig": "boolean removeLastOccurrence (Object o)", "description": "Removes the last occurrence of the specified element from this deque.\n If the deque does not contain the element, it is unchanged.\n More formally, removes the last element e such that\n Objects.equals(o, e) (if such an element exists).\n Returns true if this deque contained the specified element\n (or equivalently, if this deque changed as a result of the call)."}, {"method_name": "add", "method_sig": "boolean add (E e)", "description": "Inserts the specified element into the queue represented by this deque\n (in other words, at the tail of this deque) if it is possible to do so\n immediately without violating capacity restrictions, returning\n true upon success and throwing an\n IllegalStateException if no space is currently available.\n When using a capacity-restricted deque, it is generally preferable to\n use offer.\n\n This method is equivalent to addLast(E)."}, {"method_name": "offer", "method_sig": "boolean offer (E e)", "description": "Inserts the specified element into the queue represented by this deque\n (in other words, at the tail of this deque) if it is possible to do so\n immediately without violating capacity restrictions, returning\n true upon success and false if no space is currently\n available.  When using a capacity-restricted deque, this method is\n generally preferable to the add(E) method, which can fail to\n insert an element only by throwing an exception.\n\n This method is equivalent to offerLast(E)."}, {"method_name": "remove", "method_sig": "E remove()", "description": "Retrieves and removes the head of the queue represented by this deque\n (in other words, the first element of this deque).\n This method differs from poll() only in that it\n throws an exception if this deque is empty.\n\n This method is equivalent to removeFirst()."}, {"method_name": "poll", "method_sig": "E poll()", "description": "Retrieves and removes the head of the queue represented by this deque\n (in other words, the first element of this deque), or returns\n null if this deque is empty.\n\n This method is equivalent to pollFirst()."}, {"method_name": "element", "method_sig": "E element()", "description": "Retrieves, but does not remove, the head of the queue represented by\n this deque (in other words, the first element of this deque).\n This method differs from peek only in that it throws an\n exception if this deque is empty.\n\n This method is equivalent to getFirst()."}, {"method_name": "peek", "method_sig": "E peek()", "description": "Retrieves, but does not remove, the head of the queue represented by\n this deque (in other words, the first element of this deque), or\n returns null if this deque is empty.\n\n This method is equivalent to peekFirst()."}, {"method_name": "addAll", "method_sig": "boolean addAll (Collection<? extends E> c)", "description": "Adds all of the elements in the specified collection at the end\n of this deque, as if by calling addLast(E) on each one,\n in the order that they are returned by the collection's iterator.\n\n When using a capacity-restricted deque, it is generally preferable\n to call offer separately on each element.\n\n An exception encountered while trying to add an element may result\n in only some of the elements having been successfully added when\n the associated exception is thrown."}, {"method_name": "push", "method_sig": "void push (E e)", "description": "Pushes an element onto the stack represented by this deque (in other\n words, at the head of this deque) if it is possible to do so\n immediately without violating capacity restrictions, throwing an\n IllegalStateException if no space is currently available.\n\n This method is equivalent to addFirst(E)."}, {"method_name": "pop", "method_sig": "E pop()", "description": "Pops an element from the stack represented by this deque.  In other\n words, removes and returns the first element of this deque.\n\n This method is equivalent to removeFirst()."}, {"method_name": "remove", "method_sig": "boolean remove (Object o)", "description": "Removes the first occurrence of the specified element from this deque.\n If the deque does not contain the element, it is unchanged.\n More formally, removes the first element e such that\n Objects.equals(o, e) (if such an element exists).\n Returns true if this deque contained the specified element\n (or equivalently, if this deque changed as a result of the call).\n\n This method is equivalent to removeFirstOccurrence(Object)."}, {"method_name": "contains", "method_sig": "boolean contains (Object o)", "description": "Returns true if this deque contains the specified element.\n More formally, returns true if and only if this deque contains\n at least one element e such that Objects.equals(o, e)."}, {"method_name": "size", "method_sig": "int size()", "description": "Returns the number of elements in this deque."}, {"method_name": "iterator", "method_sig": "Iterator<E> iterator()", "description": "Returns an iterator over the elements in this deque in proper sequence.\n The elements will be returned in order from first (head) to last (tail)."}, {"method_name": "descendingIterator", "method_sig": "Iterator<E> descendingIterator()", "description": "Returns an iterator over the elements in this deque in reverse\n sequential order.  The elements will be returned in order from\n last (tail) to first (head)."}]}