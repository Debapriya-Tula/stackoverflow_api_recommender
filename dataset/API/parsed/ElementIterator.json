{"name": "Class ElementIterator", "module": "java.desktop", "package": "javax.swing.text", "text": "\n ElementIterator, as the name suggests, iterates over the Element\n tree.  The constructor can be invoked with either Document or an Element\n as an argument.  If the constructor is invoked with a Document as an\n argument then the root of the iteration is the return value of\n document.getDefaultRootElement().\n\n The iteration happens in a depth-first manner.  In terms of how\n boundary conditions are handled:\n a) if next() is called before first() or current(), the\n    root will be returned.\n b) next() returns null to indicate the end of the list.\n c) previous() returns null when the current element is the root\n    or next() has returned null.\n\n The ElementIterator does no locking of the Element tree. This means\n that it does not track any changes.  It is the responsibility of the\n user of this class, to ensure that no changes happen during element\n iteration.\n\n Simple usage example:\n\n    public void iterate() {\n        ElementIterator it = new ElementIterator(root);\n        Element elem;\n        while (true) {\n           if ((elem = next()) != null) {\n               // process element\n               System.out.println(\"elem: \" + elem.getName());\n           } else {\n               break;\n           }\n        }\n    }", "codes": ["public class ElementIterator\nextends Object\nimplements Cloneable"], "fields": [], "methods": [{"method_name": "clone", "method_sig": "public Object clone()", "description": "Clones the ElementIterator."}, {"method_name": "first", "method_sig": "public Element first()", "description": "Fetches the first element."}, {"method_name": "depth", "method_sig": "public int depth()", "description": "Fetches the current depth of element tree."}, {"method_name": "current", "method_sig": "public Element current()", "description": "Fetches the current Element."}, {"method_name": "next", "method_sig": "public Element next()", "description": "Fetches the next Element. The strategy\n used to locate the next element is\n a depth-first search."}, {"method_name": "previous", "method_sig": "public Element previous()", "description": "Fetches the previous Element. If however the current\n element is the last element, or the current element\n is null, then null is returned."}]}