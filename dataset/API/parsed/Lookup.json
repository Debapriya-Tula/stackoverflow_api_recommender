{"name": "Class Lookup", "module": "jdk.dynalink", "package": "jdk.dynalink.linker.support", "text": "A wrapper around MethodHandles.Lookup that masks\n checked exceptions. It is useful in those cases when you're looking up\n methods within your own codebase (therefore it is an error if they are not\n present).", "codes": ["public final class Lookup\nextends Object"], "fields": [{"field_name": "PUBLIC", "field_sig": "public static final\u00a0Lookup PUBLIC", "description": "A canonical Lookup object that wraps MethodHandles.publicLookup()."}], "methods": [{"method_name": "unreflect", "method_sig": "public MethodHandle unreflect (Method m)", "description": "Performs a MethodHandles.Lookup.unreflect(Method),\n converting any encountered IllegalAccessException into an\n IllegalAccessError."}, {"method_name": "unreflect", "method_sig": "public static MethodHandle unreflect (MethodHandles.Lookup lookup,\n                                     Method m)", "description": "Performs a MethodHandles.Lookup.unreflect(Method),\n converting any encountered IllegalAccessException into an\n IllegalAccessError."}, {"method_name": "unreflectGetter", "method_sig": "public MethodHandle unreflectGetter (Field f)", "description": "Performs a MethodHandles.Lookup.unreflectGetter(Field),\n converting any encountered IllegalAccessException into an IllegalAccessError."}, {"method_name": "findGetter", "method_sig": "public MethodHandle findGetter (Class<?> refc,\n                               String name,\n                               Class<?> type)", "description": "Performs a MethodHandles.Lookup.findGetter(Class, String, Class),\n converting any encountered IllegalAccessException into an\n IllegalAccessError and NoSuchFieldException into a\n NoSuchFieldError."}, {"method_name": "unreflectSetter", "method_sig": "public MethodHandle unreflectSetter (Field f)", "description": "Performs a MethodHandles.Lookup.unreflectSetter(Field),\n converting any encountered IllegalAccessException into an\n IllegalAccessError."}, {"method_name": "unreflectConstructor", "method_sig": "public MethodHandle unreflectConstructor (Constructor<?> c)", "description": "Performs a MethodHandles.Lookup.unreflectConstructor(Constructor),\n converting any encountered IllegalAccessException into an\n IllegalAccessError."}, {"method_name": "unreflectConstructor", "method_sig": "public static MethodHandle unreflectConstructor (MethodHandles.Lookup lookup,\n                                                Constructor<?> c)", "description": "Performs a MethodHandles.Lookup.unreflectConstructor(Constructor),\n converting any encountered IllegalAccessException into an\n IllegalAccessError."}, {"method_name": "findSpecial", "method_sig": "public MethodHandle findSpecial (Class<?> declaringClass,\n                                String name,\n                                MethodType type)", "description": "Performs a MethodHandles.Lookup.findSpecial(Class, String, MethodType, Class)\n on the underlying lookup. Converts any encountered\n IllegalAccessException into an IllegalAccessError and\n NoSuchMethodException into a NoSuchMethodError."}, {"method_name": "findStatic", "method_sig": "public MethodHandle findStatic (Class<?> declaringClass,\n                               String name,\n                               MethodType type)", "description": "Performs a MethodHandles.Lookup.findStatic(Class, String, MethodType)\n on the underlying lookup. Converts any encountered\n IllegalAccessException into an IllegalAccessError and\n NoSuchMethodException into a NoSuchMethodError."}, {"method_name": "findVirtual", "method_sig": "public MethodHandle findVirtual (Class<?> declaringClass,\n                                String name,\n                                MethodType type)", "description": "Performs a MethodHandles.Lookup.findVirtual(Class, String, MethodType)\n on the underlying lookup. Converts any encountered\n IllegalAccessException into an IllegalAccessError and\n NoSuchMethodException into a NoSuchMethodError."}, {"method_name": "findOwnSpecial", "method_sig": "public static MethodHandle findOwnSpecial (MethodHandles.Lookup lookup,\n                                          String name,\n                                          Class<?> rtype,\n                                          Class<?>... ptypes)", "description": "Given a lookup, finds using findSpecial(Class, String, MethodType)\n a method on that lookup's class. Useful in classes' code for convenient\n linking to their own privates."}, {"method_name": "findOwnSpecial", "method_sig": "public MethodHandle findOwnSpecial (String name,\n                                   Class<?> rtype,\n                                   Class<?>... ptypes)", "description": "Finds using findSpecial(Class, String, MethodType) a method on\n that lookup's class. Useful in classes' code for convenient linking to\n their own privates. It's also more convenient than findSpecial\n in that you can just list the parameter types, and don't have to specify\n lookup class."}, {"method_name": "findOwnStatic", "method_sig": "public static MethodHandle findOwnStatic (MethodHandles.Lookup lookup,\n                                         String name,\n                                         Class<?> rtype,\n                                         Class<?>... ptypes)", "description": "Given a lookup, finds using findStatic(Class, String, MethodType)\n a method on that lookup's class. Useful in classes' code for convenient\n linking to their own privates. It's easier to use than findStatic\n in that you can just list the parameter types, and don't have to specify\n lookup class."}, {"method_name": "findOwnStatic", "method_sig": "public MethodHandle findOwnStatic (String name,\n                                  Class<?> rtype,\n                                  Class<?>... ptypes)", "description": "Finds using findStatic(Class, String, MethodType) a method on\n that lookup's class. Useful in classes' code for convenient linking to\n their own privates. It's easier to use than findStatic\n in that you can just list the parameter types, and don't have to specify\n lookup class."}]}