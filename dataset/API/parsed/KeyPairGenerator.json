{"name": "Class KeyPairGenerator", "module": "java.base", "package": "java.security", "text": "The KeyPairGenerator class is used to generate pairs of\n public and private keys. Key pair generators are constructed using the\n getInstance factory methods (static methods that\n return instances of a given class).\n\n A Key pair generator for a particular algorithm creates a public/private\n key pair that can be used with this algorithm. It also associates\n algorithm-specific parameters with each of the generated keys.\n\n There are two ways to generate a key pair: in an algorithm-independent\n manner, and in an algorithm-specific manner.\n The only difference between the two is the initialization of the object:\n\n \nAlgorithm-Independent Initialization\nAll key pair generators share the concepts of a keysize and a\n source of randomness. The keysize is interpreted differently for different\n algorithms (e.g., in the case of the DSA algorithm, the keysize\n corresponds to the length of the modulus).\n There is an\n initialize\n method in this KeyPairGenerator class that takes these two universally\n shared types of arguments. There is also one that takes just a\n keysize argument, and uses the SecureRandom\n implementation of the highest-priority installed provider as the source\n of randomness. (If none of the installed providers supply an implementation\n of SecureRandom, a system-provided source of randomness is\n used.)\n\n Since no other parameters are specified when you call the above\n algorithm-independent initialize methods, it is up to the\n provider what to do about the algorithm-specific parameters (if any) to be\n associated with each of the keys.\n\n If the algorithm is the DSA algorithm, and the keysize (modulus\n size) is 512, 768, 1024, or 2048, then the Sun provider uses a set of\n precomputed values for the p, q, and\n g parameters. If the modulus size is not one of the above\n values, the Sun provider creates a new set of parameters. Other\n providers might have precomputed parameter sets for more than just the\n modulus sizes mentioned above. Still others might not have a list of\n precomputed parameters at all and instead always create new parameter sets.\n\n Algorithm-Specific Initialization\nFor situations where a set of algorithm-specific parameters already\n exists (e.g., so-called community parameters in DSA), there are two\n initialize methods that have an AlgorithmParameterSpec\n argument. One also has a SecureRandom argument, while\n the other uses the SecureRandom\n implementation of the highest-priority installed provider as the source\n of randomness. (If none of the installed providers supply an implementation\n of SecureRandom, a system-provided source of randomness is\n used.)\n \nIn case the client does not explicitly initialize the KeyPairGenerator\n (via a call to an initialize method), each provider must\n supply (and document) a default initialization.\n See the Keysize Restriction sections of the\n JDK Providers\n document for information on the KeyPairGenerator defaults used by\n JDK providers.\n However, note that defaults may vary across different providers.\n Additionally, the default value for a provider may change in a future\n version. Therefore, it is recommended to explicitly initialize the\n KeyPairGenerator instead of relying on provider-specific defaults.\n\n Note that this class is abstract and extends from\n KeyPairGeneratorSpi for historical reasons.\n Application developers should only take notice of the methods defined in\n this KeyPairGenerator class; all the methods in\n the superclass are intended for cryptographic service providers who wish to\n supply their own implementations of key pair generators.\n\n  Every implementation of the Java platform is required to support the\n following standard KeyPairGenerator algorithms and keysizes in\n parentheses:\n \nDiffieHellman (1024, 2048, 4096)\nDSA (1024, 2048)\nRSA (1024, 2048, 4096)\n\n These algorithms are described in the \n KeyPairGenerator section of the\n Java Security Standard Algorithm Names Specification.\n Consult the release documentation for your implementation to see if any\n other algorithms are supported.", "codes": ["public abstract class KeyPairGenerator\nextends KeyPairGeneratorSpi"], "fields": [], "methods": [{"method_name": "getAlgorithm", "method_sig": "public String getAlgorithm()", "description": "Returns the standard name of the algorithm for this key pair generator.\n See the KeyPairGenerator section in the \n Java Security Standard Algorithm Names Specification\n for information about standard algorithm names."}, {"method_name": "getInstance", "method_sig": "public static KeyPairGenerator getInstance (String algorithm)\n                                    throws NoSuchAlgorithmException", "description": "Returns a KeyPairGenerator object that generates public/private\n key pairs for the specified algorithm.\n\n  This method traverses the list of registered security Providers,\n starting with the most preferred Provider.\n A new KeyPairGenerator object encapsulating the\n KeyPairGeneratorSpi implementation from the first\n Provider that supports the specified algorithm is returned.\n\n  Note that the list of registered providers may be retrieved via\n the Security.getProviders() method."}, {"method_name": "getInstance", "method_sig": "public static KeyPairGenerator getInstance (String algorithm,\n                                           String provider)\n                                    throws NoSuchAlgorithmException,\n                                           NoSuchProviderException", "description": "Returns a KeyPairGenerator object that generates public/private\n key pairs for the specified algorithm.\n\n  A new KeyPairGenerator object encapsulating the\n KeyPairGeneratorSpi implementation from the specified provider\n is returned.  The specified provider must be registered\n in the security provider list.\n\n  Note that the list of registered providers may be retrieved via\n the Security.getProviders() method."}, {"method_name": "getInstance", "method_sig": "public static KeyPairGenerator getInstance (String algorithm,\n                                           Provider provider)\n                                    throws NoSuchAlgorithmException", "description": "Returns a KeyPairGenerator object that generates public/private\n key pairs for the specified algorithm.\n\n  A new KeyPairGenerator object encapsulating the\n KeyPairGeneratorSpi implementation from the specified Provider\n object is returned.  Note that the specified Provider object\n does not have to be registered in the provider list."}, {"method_name": "getProvider", "method_sig": "public final Provider getProvider()", "description": "Returns the provider of this key pair generator object."}, {"method_name": "initialize", "method_sig": "public void initialize (int keysize)", "description": "Initializes the key pair generator for a certain keysize using\n a default parameter set and the SecureRandom\n implementation of the highest-priority installed provider as the source\n of randomness.\n (If none of the installed providers supply an implementation of\n SecureRandom, a system-provided source of randomness is\n used.)"}, {"method_name": "initialize", "method_sig": "public void initialize (int keysize,\n                       SecureRandom random)", "description": "Initializes the key pair generator for a certain keysize with\n the given source of randomness (and a default parameter set)."}, {"method_name": "initialize", "method_sig": "public void initialize (AlgorithmParameterSpec params)\n                throws InvalidAlgorithmParameterException", "description": "Initializes the key pair generator using the specified parameter\n set and the SecureRandom\n implementation of the highest-priority installed provider as the source\n of randomness.\n (If none of the installed providers supply an implementation of\n SecureRandom, a system-provided source of randomness is\n used.)\n\n This concrete method has been added to this previously-defined\n abstract class.\n This method calls the KeyPairGeneratorSpi\n initialize method,\n passing it params and a source of randomness (obtained\n from the highest-priority installed provider or system-provided if none\n of the installed providers supply one).\n That initialize method always throws an\n UnsupportedOperationException if it is not overridden by the provider."}, {"method_name": "initialize", "method_sig": "public void initialize (AlgorithmParameterSpec params,\n                       SecureRandom random)\n                throws InvalidAlgorithmParameterException", "description": "Initializes the key pair generator with the given parameter\n set and source of randomness.\n\n This concrete method has been added to this previously-defined\n abstract class.\n This method calls the KeyPairGeneratorSpi initialize method,\n passing it params and random.\n That initialize\n method always throws an\n UnsupportedOperationException if it is not overridden by the provider."}, {"method_name": "genKeyPair", "method_sig": "public final KeyPair genKeyPair()", "description": "Generates a key pair.\n\n If this KeyPairGenerator has not been initialized explicitly,\n provider-specific defaults will be used for the size and other\n (algorithm-specific) values of the generated keys.\n\n This will generate a new key pair every time it is called.\n\n This method is functionally equivalent to\n generateKeyPair."}, {"method_name": "generateKeyPair", "method_sig": "public KeyPair generateKeyPair()", "description": "Generates a key pair.\n\n If this KeyPairGenerator has not been initialized explicitly,\n provider-specific defaults will be used for the size and other\n (algorithm-specific) values of the generated keys.\n\n This will generate a new key pair every time it is called.\n\n This method is functionally equivalent to\n genKeyPair."}]}