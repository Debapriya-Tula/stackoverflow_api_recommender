{"name": "Class TrustManagerFactory", "module": "java.base", "package": "javax.net.ssl", "text": "This class acts as a factory for trust managers based on a\n source of trust material. Each trust manager manages a specific\n type of trust material for use by secure sockets. The trust\n material is based on a KeyStore and/or provider-specific sources.\n\n  Every implementation of the Java platform is required to support the\n following standard TrustManagerFactory algorithm:\n \nPKIX\n\n This algorithm is described in the \n TrustManagerFactory section of the\n Java Security Standard Algorithm Names Specification.\n Consult the release documentation for your implementation to see if any\n other algorithms are supported.", "codes": ["public class TrustManagerFactory\nextends Object"], "fields": [], "methods": [{"method_name": "getDefaultAlgorithm", "method_sig": "public static final String getDefaultAlgorithm()", "description": "Obtains the default TrustManagerFactory algorithm name.\n\n The default TrustManager can be changed at runtime by setting\n the value of the ssl.TrustManagerFactory.algorithm\n security property to the desired algorithm name."}, {"method_name": "getAlgorithm", "method_sig": "public final String getAlgorithm()", "description": "Returns the algorithm name of this TrustManagerFactory\n object.\n\n This is the same name that was specified in one of the\n getInstance calls that created this\n TrustManagerFactory object."}, {"method_name": "getInstance", "method_sig": "public static final TrustManagerFactory getInstance (String algorithm)\n                                             throws NoSuchAlgorithmException", "description": "Returns a TrustManagerFactory object that acts as a\n factory for trust managers.\n\n  This method traverses the list of registered security Providers,\n starting with the most preferred Provider.\n A new TrustManagerFactory object encapsulating the\n TrustManagerFactorySpi implementation from the first\n Provider that supports the specified algorithm is returned.\n\n  Note that the list of registered providers may be retrieved via\n the Security.getProviders() method."}, {"method_name": "getInstance", "method_sig": "public static final TrustManagerFactory getInstance (String algorithm,\n                                                    String provider)\n                                             throws NoSuchAlgorithmException,\n                                                    NoSuchProviderException", "description": "Returns a TrustManagerFactory object that acts as a\n factory for trust managers.\n\n  A new KeyManagerFactory object encapsulating the\n KeyManagerFactorySpi implementation from the specified provider\n is returned.  The specified provider must be registered\n in the security provider list.\n\n  Note that the list of registered providers may be retrieved via\n the Security.getProviders() method."}, {"method_name": "getInstance", "method_sig": "public static final TrustManagerFactory getInstance (String algorithm,\n                                                    Provider provider)\n                                             throws NoSuchAlgorithmException", "description": "Returns a TrustManagerFactory object that acts as a\n factory for trust managers.\n\n  A new TrustManagerFactory object encapsulating the\n TrustManagerFactorySpi implementation from the specified Provider\n object is returned.  Note that the specified Provider object\n does not have to be registered in the provider list."}, {"method_name": "getProvider", "method_sig": "public final Provider getProvider()", "description": "Returns the provider of this TrustManagerFactory object."}, {"method_name": "init", "method_sig": "public final void init (KeyStore ks)\n                throws KeyStoreException", "description": "Initializes this factory with a source of certificate\n authorities and related trust material.\n \n The provider typically uses a KeyStore as a basis for making\n trust decisions.\n \n For more flexible initialization, please see\n init(ManagerFactoryParameters)."}, {"method_name": "init", "method_sig": "public final void init (ManagerFactoryParameters spec)\n                throws InvalidAlgorithmParameterException", "description": "Initializes this factory with a source of provider-specific\n trust material.\n \n In some cases, initialization parameters other than a keystore\n may be needed by a provider.  Users of that particular provider\n are expected to pass an implementation of the appropriate\n ManagerFactoryParameters as defined by the\n provider.  The provider can then call the specified methods in\n the ManagerFactoryParameters implementation to obtain the\n needed information."}, {"method_name": "getTrustManagers", "method_sig": "public final TrustManager[] getTrustManagers()", "description": "Returns one trust manager for each type of trust material."}]}