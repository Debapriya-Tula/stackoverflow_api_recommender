{"name": "Interface CompletionStage<T>", "module": "java.base", "package": "java.util.concurrent", "text": "A stage of a possibly asynchronous computation, that performs an\n action or computes a value when another CompletionStage completes.\n A stage completes upon termination of its computation, but this may\n in turn trigger other dependent stages.  The functionality defined\n in this interface takes only a few basic forms, which expand out to\n a larger set of methods to capture a range of usage styles:\n\n \nThe computation performed by a stage may be expressed as a\n Function, Consumer, or Runnable (using methods with names including\n apply, accept, or run, respectively)\n depending on whether it requires arguments and/or produces results.\n For example:\n  \n stage.thenApply(x -> square(x))\n      .thenAccept(x -> System.out.print(x))\n      .thenRun(() -> System.out.println());\n\n An additional form (compose) allows the construction of\n computation pipelines from functions returning completion stages.\n\n Any argument to a stage's computation is the outcome of a\n triggering stage's computation.\n\n One stage's execution may be triggered by completion of a\n single stage, or both of two stages, or either of two stages.\n Dependencies on a single stage are arranged using methods with\n prefix then. Those triggered by completion of\n both of two stages may combine their results or\n effects, using correspondingly named methods. Those triggered by\n either of two stages make no guarantees about which of the\n results or effects are used for the dependent stage's computation.\n\n Dependencies among stages control the triggering of\n computations, but do not otherwise guarantee any particular\n ordering. Additionally, execution of a new stage's computations may\n be arranged in any of three ways: default execution, default\n asynchronous execution (using methods with suffix async\n that employ the stage's default asynchronous execution facility),\n or custom (via a supplied Executor).  The execution\n properties of default and async modes are specified by\n CompletionStage implementations, not this interface. Methods with\n explicit Executor arguments may have arbitrary execution\n properties, and might not even support concurrent execution, but\n are arranged for processing in a way that accommodates asynchrony.\n\n Two method forms (handle and whenComplete) support unconditional computation\n whether the triggering stage completed normally or exceptionally.\n Method exceptionally supports computation\n only when the triggering stage completes exceptionally, computing a\n replacement result, similarly to the java catch keyword.\n In all other cases, if a stage's computation terminates abruptly\n with an (unchecked) exception or error, then all dependent stages\n requiring its completion complete exceptionally as well, with a\n CompletionException holding the exception as its cause.  If\n a stage is dependent on both of two stages, and both\n complete exceptionally, then the CompletionException may correspond\n to either one of these exceptions.  If a stage is dependent on\n either of two others, and only one of them completes\n exceptionally, no guarantees are made about whether the dependent\n stage completes normally or exceptionally. In the case of method\n whenComplete, when the supplied action itself encounters an\n exception, then the stage completes exceptionally with this\n exception unless the source stage also completed exceptionally, in\n which case the exceptional completion from the source stage is\n given preference and propagated to the dependent stage.\n\n \nAll methods adhere to the above triggering, execution, and\n exceptional completion specifications (which are not repeated in\n individual method specifications). Additionally, while arguments\n used to pass a completion result (that is, for parameters of type\n T) for methods accepting them may be null, passing a null\n value for any other parameter will result in a NullPointerException being thrown.\n\n Method form handle is the most general way of\n creating a continuation stage, unconditionally performing a\n computation that is given both the result and exception (if any) of\n the triggering CompletionStage, and computing an arbitrary result.\n Method whenComplete is similar, but preserves\n the result of the triggering stage instead of computing a new one.\n Because a stage's normal result may be null, both methods\n should have a computation structured thus:\n\n (result, exception) -> {\n   if (exception == null) {\n     // triggering stage completed normally\n   } else {\n     // triggering stage completed exceptionally\n   }\n }\nThis interface does not define methods for initially creating,\n forcibly completing normally or exceptionally, probing completion\n status or results, or awaiting completion of a stage.\n Implementations of CompletionStage may provide means of achieving\n such effects, as appropriate.  Method toCompletableFuture()\n enables interoperability among different implementations of this\n interface by providing a common conversion type.", "codes": ["public interface CompletionStage<T>"], "fields": [], "methods": [{"method_name": "thenApply", "method_sig": "<U> CompletionStage<U> thenApply (Function<? super T, ? extends U> fn)", "description": "Returns a new CompletionStage that, when this stage completes\n normally, is executed with this stage's result as the argument\n to the supplied function.\n\n This method is analogous to\n Optional.map and\n Stream.map.\n\n See the CompletionStage documentation for rules\n covering exceptional completion."}, {"method_name": "thenApplyAsync", "method_sig": "<U> CompletionStage<U> thenApplyAsync (Function<? super T, ? extends U> fn)", "description": "Returns a new CompletionStage that, when this stage completes\n normally, is executed using this stage's default asynchronous\n execution facility, with this stage's result as the argument to\n the supplied function.\n\n See the CompletionStage documentation for rules\n covering exceptional completion."}, {"method_name": "thenApplyAsync", "method_sig": "<U> CompletionStage<U> thenApplyAsync (Function<? super T, ? extends U> fn,\n                                      Executor executor)", "description": "Returns a new CompletionStage that, when this stage completes\n normally, is executed using the supplied Executor, with this\n stage's result as the argument to the supplied function.\n\n See the CompletionStage documentation for rules\n covering exceptional completion."}, {"method_name": "thenAccept", "method_sig": "CompletionStage<Void> thenAccept (Consumer<? super T> action)", "description": "Returns a new CompletionStage that, when this stage completes\n normally, is executed with this stage's result as the argument\n to the supplied action.\n\n See the CompletionStage documentation for rules\n covering exceptional completion."}, {"method_name": "thenAcceptAsync", "method_sig": "CompletionStage<Void> thenAcceptAsync (Consumer<? super T> action)", "description": "Returns a new CompletionStage that, when this stage completes\n normally, is executed using this stage's default asynchronous\n execution facility, with this stage's result as the argument to\n the supplied action.\n\n See the CompletionStage documentation for rules\n covering exceptional completion."}, {"method_name": "thenAcceptAsync", "method_sig": "CompletionStage<Void> thenAcceptAsync (Consumer<? super T> action,\n                                      Executor executor)", "description": "Returns a new CompletionStage that, when this stage completes\n normally, is executed using the supplied Executor, with this\n stage's result as the argument to the supplied action.\n\n See the CompletionStage documentation for rules\n covering exceptional completion."}, {"method_name": "thenRun", "method_sig": "CompletionStage<Void> thenRun (Runnable action)", "description": "Returns a new CompletionStage that, when this stage completes\n normally, executes the given action.\n\n See the CompletionStage documentation for rules\n covering exceptional completion."}, {"method_name": "thenRunAsync", "method_sig": "CompletionStage<Void> thenRunAsync (Runnable action)", "description": "Returns a new CompletionStage that, when this stage completes\n normally, executes the given action using this stage's default\n asynchronous execution facility.\n\n See the CompletionStage documentation for rules\n covering exceptional completion."}, {"method_name": "thenRunAsync", "method_sig": "CompletionStage<Void> thenRunAsync (Runnable action,\n                                   Executor executor)", "description": "Returns a new CompletionStage that, when this stage completes\n normally, executes the given action using the supplied Executor.\n\n See the CompletionStage documentation for rules\n covering exceptional completion."}, {"method_name": "thenCombine", "method_sig": "<U, V> CompletionStage<V> thenCombine (CompletionStage<? extends U> other,\n                                           BiFunction<? super T, ? super U, ? extends V> fn)", "description": "Returns a new CompletionStage that, when this and the other\n given stage both complete normally, is executed with the two\n results as arguments to the supplied function.\n\n See the CompletionStage documentation for rules\n covering exceptional completion."}, {"method_name": "thenCombineAsync", "method_sig": "<U, V> CompletionStage<V> thenCombineAsync (CompletionStage<? extends U> other,\n                                                BiFunction<? super T, ? super U, ? extends V> fn)", "description": "Returns a new CompletionStage that, when this and the other\n given stage both complete normally, is executed using this\n stage's default asynchronous execution facility, with the two\n results as arguments to the supplied function.\n\n See the CompletionStage documentation for rules\n covering exceptional completion."}, {"method_name": "thenCombineAsync", "method_sig": "<U, V> CompletionStage<V> thenCombineAsync (CompletionStage<? extends U> other,\n                                                BiFunction<? super T, ? super U, ? extends V> fn,\n                                                Executor executor)", "description": "Returns a new CompletionStage that, when this and the other\n given stage both complete normally, is executed using the\n supplied executor, with the two results as arguments to the\n supplied function.\n\n See the CompletionStage documentation for rules\n covering exceptional completion."}, {"method_name": "thenAcceptBoth", "method_sig": "<U> CompletionStage<Void> thenAcceptBoth (CompletionStage<? extends U> other,\n                                         BiConsumer<? super T, ? super U> action)", "description": "Returns a new CompletionStage that, when this and the other\n given stage both complete normally, is executed with the two\n results as arguments to the supplied action.\n\n See the CompletionStage documentation for rules\n covering exceptional completion."}, {"method_name": "thenAcceptBothAsync", "method_sig": "<U> CompletionStage<Void> thenAcceptBothAsync (CompletionStage<? extends U> other,\n                                              BiConsumer<? super T, ? super U> action)", "description": "Returns a new CompletionStage that, when this and the other\n given stage both complete normally, is executed using this\n stage's default asynchronous execution facility, with the two\n results as arguments to the supplied action.\n\n See the CompletionStage documentation for rules\n covering exceptional completion."}, {"method_name": "thenAcceptBothAsync", "method_sig": "<U> CompletionStage<Void> thenAcceptBothAsync (CompletionStage<? extends U> other,\n                                              BiConsumer<? super T, ? super U> action,\n                                              Executor executor)", "description": "Returns a new CompletionStage that, when this and the other\n given stage both complete normally, is executed using the\n supplied executor, with the two results as arguments to the\n supplied action.\n\n See the CompletionStage documentation for rules\n covering exceptional completion."}, {"method_name": "runAfterBoth", "method_sig": "CompletionStage<Void> runAfterBoth (CompletionStage<?> other,\n                                   Runnable action)", "description": "Returns a new CompletionStage that, when this and the other\n given stage both complete normally, executes the given action.\n\n See the CompletionStage documentation for rules\n covering exceptional completion."}, {"method_name": "runAfterBothAsync", "method_sig": "CompletionStage<Void> runAfterBothAsync (CompletionStage<?> other,\n                                        Runnable action)", "description": "Returns a new CompletionStage that, when this and the other\n given stage both complete normally, executes the given action\n using this stage's default asynchronous execution facility.\n\n See the CompletionStage documentation for rules\n covering exceptional completion."}, {"method_name": "runAfterBothAsync", "method_sig": "CompletionStage<Void> runAfterBothAsync (CompletionStage<?> other,\n                                        Runnable action,\n                                        Executor executor)", "description": "Returns a new CompletionStage that, when this and the other\n given stage both complete normally, executes the given action\n using the supplied executor.\n\n See the CompletionStage documentation for rules\n covering exceptional completion."}, {"method_name": "applyToEither", "method_sig": "<U> CompletionStage<U> applyToEither (CompletionStage<? extends T> other,\n                                     Function<? super T, U> fn)", "description": "Returns a new CompletionStage that, when either this or the\n other given stage complete normally, is executed with the\n corresponding result as argument to the supplied function.\n\n See the CompletionStage documentation for rules\n covering exceptional completion."}, {"method_name": "applyToEitherAsync", "method_sig": "<U> CompletionStage<U> applyToEitherAsync (CompletionStage<? extends T> other,\n                                          Function<? super T, U> fn)", "description": "Returns a new CompletionStage that, when either this or the\n other given stage complete normally, is executed using this\n stage's default asynchronous execution facility, with the\n corresponding result as argument to the supplied function.\n\n See the CompletionStage documentation for rules\n covering exceptional completion."}, {"method_name": "applyToEitherAsync", "method_sig": "<U> CompletionStage<U> applyToEitherAsync (CompletionStage<? extends T> other,\n                                          Function<? super T, U> fn,\n                                          Executor executor)", "description": "Returns a new CompletionStage that, when either this or the\n other given stage complete normally, is executed using the\n supplied executor, with the corresponding result as argument to\n the supplied function.\n\n See the CompletionStage documentation for rules\n covering exceptional completion."}, {"method_name": "acceptEither", "method_sig": "CompletionStage<Void> acceptEither (CompletionStage<? extends T> other,\n                                   Consumer<? super T> action)", "description": "Returns a new CompletionStage that, when either this or the\n other given stage complete normally, is executed with the\n corresponding result as argument to the supplied action.\n\n See the CompletionStage documentation for rules\n covering exceptional completion."}, {"method_name": "acceptEitherAsync", "method_sig": "CompletionStage<Void> acceptEitherAsync (CompletionStage<? extends T> other,\n                                        Consumer<? super T> action)", "description": "Returns a new CompletionStage that, when either this or the\n other given stage complete normally, is executed using this\n stage's default asynchronous execution facility, with the\n corresponding result as argument to the supplied action.\n\n See the CompletionStage documentation for rules\n covering exceptional completion."}, {"method_name": "acceptEitherAsync", "method_sig": "CompletionStage<Void> acceptEitherAsync (CompletionStage<? extends T> other,\n                                        Consumer<? super T> action,\n                                        Executor executor)", "description": "Returns a new CompletionStage that, when either this or the\n other given stage complete normally, is executed using the\n supplied executor, with the corresponding result as argument to\n the supplied action.\n\n See the CompletionStage documentation for rules\n covering exceptional completion."}, {"method_name": "runAfterEither", "method_sig": "CompletionStage<Void> runAfterEither (CompletionStage<?> other,\n                                     Runnable action)", "description": "Returns a new CompletionStage that, when either this or the\n other given stage complete normally, executes the given action.\n\n See the CompletionStage documentation for rules\n covering exceptional completion."}, {"method_name": "runAfterEitherAsync", "method_sig": "CompletionStage<Void> runAfterEitherAsync (CompletionStage<?> other,\n                                          Runnable action)", "description": "Returns a new CompletionStage that, when either this or the\n other given stage complete normally, executes the given action\n using this stage's default asynchronous execution facility.\n\n See the CompletionStage documentation for rules\n covering exceptional completion."}, {"method_name": "runAfterEitherAsync", "method_sig": "CompletionStage<Void> runAfterEitherAsync (CompletionStage<?> other,\n                                          Runnable action,\n                                          Executor executor)", "description": "Returns a new CompletionStage that, when either this or the\n other given stage complete normally, executes the given action\n using the supplied executor.\n\n See the CompletionStage documentation for rules\n covering exceptional completion."}, {"method_name": "thenCompose", "method_sig": "<U> CompletionStage<U> thenCompose (Function<? super T, ? extends CompletionStage<U>> fn)", "description": "Returns a new CompletionStage that is completed with the same\n value as the CompletionStage returned by the given function.\n\n When this stage completes normally, the given function is\n invoked with this stage's result as the argument, returning\n another CompletionStage.  When that stage completes normally,\n the CompletionStage returned by this method is completed with\n the same value.\n\n To ensure progress, the supplied function must arrange\n eventual completion of its result.\n\n This method is analogous to\n Optional.flatMap and\n Stream.flatMap.\n\n See the CompletionStage documentation for rules\n covering exceptional completion."}, {"method_name": "thenComposeAsync", "method_sig": "<U> CompletionStage<U> thenComposeAsync (Function<? super T, ? extends CompletionStage<U>> fn)", "description": "Returns a new CompletionStage that is completed with the same\n value as the CompletionStage returned by the given function,\n executed using this stage's default asynchronous execution\n facility.\n\n When this stage completes normally, the given function is\n invoked with this stage's result as the argument, returning\n another CompletionStage.  When that stage completes normally,\n the CompletionStage returned by this method is completed with\n the same value.\n\n To ensure progress, the supplied function must arrange\n eventual completion of its result.\n\n See the CompletionStage documentation for rules\n covering exceptional completion."}, {"method_name": "thenComposeAsync", "method_sig": "<U> CompletionStage<U> thenComposeAsync (Function<? super T, ? extends CompletionStage<U>> fn,\n                                        Executor executor)", "description": "Returns a new CompletionStage that is completed with the same\n value as the CompletionStage returned by the given function,\n executed using the supplied Executor.\n\n When this stage completes normally, the given function is\n invoked with this stage's result as the argument, returning\n another CompletionStage.  When that stage completes normally,\n the CompletionStage returned by this method is completed with\n the same value.\n\n To ensure progress, the supplied function must arrange\n eventual completion of its result.\n\n See the CompletionStage documentation for rules\n covering exceptional completion."}, {"method_name": "handle", "method_sig": "<U> CompletionStage<U> handle (BiFunction<? super T, Throwable, ? extends U> fn)", "description": "Returns a new CompletionStage that, when this stage completes\n either normally or exceptionally, is executed with this stage's\n result and exception as arguments to the supplied function.\n\n When this stage is complete, the given function is invoked\n with the result (or null if none) and the exception (or\n null if none) of this stage as arguments, and the\n function's result is used to complete the returned stage."}, {"method_name": "handleAsync", "method_sig": "<U> CompletionStage<U> handleAsync (BiFunction<? super T, Throwable, ? extends U> fn)", "description": "Returns a new CompletionStage that, when this stage completes\n either normally or exceptionally, is executed using this stage's\n default asynchronous execution facility, with this stage's\n result and exception as arguments to the supplied function.\n\n When this stage is complete, the given function is invoked\n with the result (or null if none) and the exception (or\n null if none) of this stage as arguments, and the\n function's result is used to complete the returned stage."}, {"method_name": "handleAsync", "method_sig": "<U> CompletionStage<U> handleAsync (BiFunction<? super T, Throwable, ? extends U> fn,\n                                   Executor executor)", "description": "Returns a new CompletionStage that, when this stage completes\n either normally or exceptionally, is executed using the\n supplied executor, with this stage's result and exception as\n arguments to the supplied function.\n\n When this stage is complete, the given function is invoked\n with the result (or null if none) and the exception (or\n null if none) of this stage as arguments, and the\n function's result is used to complete the returned stage."}, {"method_name": "whenComplete", "method_sig": "CompletionStage<T> whenComplete (BiConsumer<? super T, ? super Throwable> action)", "description": "Returns a new CompletionStage with the same result or exception as\n this stage, that executes the given action when this stage completes.\n\n When this stage is complete, the given action is invoked\n with the result (or null if none) and the exception (or\n null if none) of this stage as arguments.  The returned\n stage is completed when the action returns.\n\n Unlike method handle,\n this method is not designed to translate completion outcomes,\n so the supplied action should not throw an exception. However,\n if it does, the following rules apply: if this stage completed\n normally but the supplied action throws an exception, then the\n returned stage completes exceptionally with the supplied\n action's exception. Or, if this stage completed exceptionally\n and the supplied action throws an exception, then the returned\n stage completes exceptionally with this stage's exception."}, {"method_name": "whenCompleteAsync", "method_sig": "CompletionStage<T> whenCompleteAsync (BiConsumer<? super T, ? super Throwable> action)", "description": "Returns a new CompletionStage with the same result or exception as\n this stage, that executes the given action using this stage's\n default asynchronous execution facility when this stage completes.\n\n When this stage is complete, the given action is invoked with the\n result (or null if none) and the exception (or null\n if none) of this stage as arguments.  The returned stage is completed\n when the action returns.\n\n Unlike method handleAsync,\n this method is not designed to translate completion outcomes,\n so the supplied action should not throw an exception. However,\n if it does, the following rules apply: If this stage completed\n normally but the supplied action throws an exception, then the\n returned stage completes exceptionally with the supplied\n action's exception. Or, if this stage completed exceptionally\n and the supplied action throws an exception, then the returned\n stage completes exceptionally with this stage's exception."}, {"method_name": "whenCompleteAsync", "method_sig": "CompletionStage<T> whenCompleteAsync (BiConsumer<? super T, ? super Throwable> action,\n                                     Executor executor)", "description": "Returns a new CompletionStage with the same result or exception as\n this stage, that executes the given action using the supplied\n Executor when this stage completes.\n\n When this stage is complete, the given action is invoked with the\n result (or null if none) and the exception (or null\n if none) of this stage as arguments.  The returned stage is completed\n when the action returns.\n\n Unlike method handleAsync,\n this method is not designed to translate completion outcomes,\n so the supplied action should not throw an exception. However,\n if it does, the following rules apply: If this stage completed\n normally but the supplied action throws an exception, then the\n returned stage completes exceptionally with the supplied\n action's exception. Or, if this stage completed exceptionally\n and the supplied action throws an exception, then the returned\n stage completes exceptionally with this stage's exception."}, {"method_name": "exceptionally", "method_sig": "CompletionStage<T> exceptionally (Function<Throwable, ? extends T> fn)", "description": "Returns a new CompletionStage that, when this stage completes\n exceptionally, is executed with this stage's exception as the\n argument to the supplied function.  Otherwise, if this stage\n completes normally, then the returned stage also completes\n normally with the same value."}, {"method_name": "toCompletableFuture", "method_sig": "CompletableFuture<T> toCompletableFuture()", "description": "Returns a CompletableFuture maintaining the same\n completion properties as this stage. If this stage is already a\n CompletableFuture, this method may return this stage itself.\n Otherwise, invocation of this method may be equivalent in\n effect to thenApply(x -> x), but returning an instance\n of type CompletableFuture."}]}