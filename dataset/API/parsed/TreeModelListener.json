{"name": "Interface TreeModelListener", "module": "java.desktop", "package": "javax.swing.event", "text": "Defines the interface for an object that listens\n to changes in a TreeModel.\n For further information and examples see\n How to Write a Tree Model Listener,\n a section in The Java Tutorial.", "codes": ["public interface TreeModelListener\nextends EventListener"], "fields": [], "methods": [{"method_name": "treeNodesChanged", "method_sig": "void treeNodesChanged (TreeModelEvent e)", "description": "Invoked after a node (or a set of siblings) has changed in some\n way. The node(s) have not changed locations in the tree or\n altered their children arrays, but other attributes have\n changed and may affect presentation. Example: the name of a\n file has changed, but it is in the same location in the file\n system.\n\n To indicate the root has changed, childIndices and children\n will be null.\n\n Use e.getPath() to get the parent of the changed node(s).\n e.getChildIndices() returns the index(es) of the changed node(s)."}, {"method_name": "treeNodesInserted", "method_sig": "void treeNodesInserted (TreeModelEvent e)", "description": "Invoked after nodes have been inserted into the tree.\nUse e.getPath() to get the parent of the new node(s).\n e.getChildIndices() returns the index(es) of the new node(s)\n in ascending order."}, {"method_name": "treeNodesRemoved", "method_sig": "void treeNodesRemoved (TreeModelEvent e)", "description": "Invoked after nodes have been removed from the tree.  Note that\n if a subtree is removed from the tree, this method may only be\n invoked once for the root of the removed subtree, not once for\n each individual set of siblings removed.\nUse e.getPath() to get the former parent of the deleted\n node(s). e.getChildIndices() returns, in ascending order, the\n index(es) the node(s) had before being deleted."}, {"method_name": "treeStructureChanged", "method_sig": "void treeStructureChanged (TreeModelEvent e)", "description": "Invoked after the tree has drastically changed structure from a\n given node down.  If the path returned by e.getPath() is of length\n one and the first element does not identify the current root node\n the first element should become the new root of the tree.\n\n Use e.getPath() to get the path to the node.\n e.getChildIndices() returns null."}]}