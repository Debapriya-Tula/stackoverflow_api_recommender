{"name": "Class MouseWheelEvent", "module": "java.desktop", "package": "java.awt.event", "text": "An event which indicates that the mouse wheel was rotated in a component.\n \n A wheel mouse is a mouse which has a wheel in place of the middle button.\n This wheel can be rotated towards or away from the user.  Mouse wheels are\n most often used for scrolling, though other uses are possible.\n \n A MouseWheelEvent object is passed to every MouseWheelListener\n object which registered to receive the \"interesting\" mouse events using the\n component's addMouseWheelListener method.  Each such listener\n object gets a MouseEvent containing the mouse event.\n \n Due to the mouse wheel's special relationship to scrolling Components,\n MouseWheelEvents are delivered somewhat differently than other MouseEvents.\n This is because while other MouseEvents usually affect a change on\n the Component directly under the mouse\n cursor (for instance, when clicking a button), MouseWheelEvents often have\n an effect away from the mouse cursor (moving the wheel while\n over a Component inside a ScrollPane should scroll one of the\n Scrollbars on the ScrollPane).\n \n MouseWheelEvents start delivery from the Component underneath the\n mouse cursor.  If MouseWheelEvents are not enabled on the\n Component, the event is delivered to the first ancestor\n Container with MouseWheelEvents enabled.  This will usually be\n a ScrollPane with wheel scrolling enabled.  The source\n Component and x,y coordinates will be relative to the event's\n final destination (the ScrollPane).  This allows a complex\n GUI to be installed without modification into a ScrollPane, and\n for all MouseWheelEvents to be delivered to the ScrollPane for\n scrolling.\n \n Some AWT Components are implemented using native widgets which\n display their own scrollbars and handle their own scrolling.\n The particular Components for which this is true will vary from\n platform to platform.  When the mouse wheel is\n moved over one of these Components, the event is delivered straight to\n the native widget, and not propagated to ancestors.\n \n Platforms offer customization of the amount of scrolling that\n should take place when the mouse wheel is moved.  The two most\n common settings are to scroll a certain number of \"units\"\n (commonly lines of text in a text-based component) or an entire \"block\"\n (similar to page-up/page-down).  The MouseWheelEvent offers\n methods for conforming to the underlying platform settings.  These\n platform settings can be changed at any time by the user.  MouseWheelEvents\n reflect the most recent settings.\n \n The MouseWheelEvent class includes methods for\n getting the number of \"clicks\" by which the mouse wheel is rotated.\n The getWheelRotation() method returns the integer number\n of \"clicks\" corresponding to the number of notches by which the wheel was\n rotated. In addition to this method, the MouseWheelEvent\n class provides the getPreciseWheelRotation() method which returns\n a double number of \"clicks\" in case a partial rotation occurred.\n The getPreciseWheelRotation() method is useful if a mouse supports\n a high-resolution wheel, such as a freely rotating wheel with no\n notches. Applications can benefit by using this method to process\n mouse wheel events more precisely, and thus, making visual perception\n smoother.", "codes": ["public class MouseWheelEvent\nextends MouseEvent"], "fields": [{"field_name": "WHEEL_UNIT_SCROLL", "field_sig": "@Native\npublic static final\u00a0int WHEEL_UNIT_SCROLL", "description": "Constant representing scrolling by \"units\" (like scrolling with the\n arrow keys)"}, {"field_name": "WHEEL_BLOCK_SCROLL", "field_sig": "@Native\npublic static final\u00a0int WHEEL_BLOCK_SCROLL", "description": "Constant representing scrolling by a \"block\" (like scrolling\n with page-up, page-down keys)"}], "methods": [{"method_name": "getScrollType", "method_sig": "public int getScrollType()", "description": "Returns the type of scrolling that should take place in response to this\n event.  This is determined by the native platform.  Legal values are:\n \n MouseWheelEvent.WHEEL_UNIT_SCROLL\n  MouseWheelEvent.WHEEL_BLOCK_SCROLL\n "}, {"method_name": "getScrollAmount", "method_sig": "public int getScrollAmount()", "description": "Returns the number of units that should be scrolled per\n click of mouse wheel rotation.\n Only valid if getScrollType returns\n MouseWheelEvent.WHEEL_UNIT_SCROLL"}, {"method_name": "getWheelRotation", "method_sig": "public int getWheelRotation()", "description": "Returns the number of \"clicks\" the mouse wheel was rotated, as an integer.\n A partial rotation may occur if the mouse supports a high-resolution wheel.\n In this case, the method returns zero until a full \"click\" has been accumulated."}, {"method_name": "getPreciseWheelRotation", "method_sig": "public double getPreciseWheelRotation()", "description": "Returns the number of \"clicks\" the mouse wheel was rotated, as a double.\n A partial rotation may occur if the mouse supports a high-resolution wheel.\n In this case, the return value will include a fractional \"click\"."}, {"method_name": "getUnitsToScroll", "method_sig": "public int getUnitsToScroll()", "description": "This is a convenience method to aid in the implementation of\n the common-case MouseWheelListener - to scroll a ScrollPane or\n JScrollPane by an amount which conforms to the platform settings.\n (Note, however, that ScrollPane and\n JScrollPane already have this functionality built in.)\n \n This method returns the number of units to scroll when scroll type is\n MouseWheelEvent.WHEEL_UNIT_SCROLL, and should only be called if\n getScrollType returns MouseWheelEvent.WHEEL_UNIT_SCROLL.\n \n Direction of scroll, amount of wheel movement,\n and platform settings for wheel scrolling are all accounted for.\n This method does not and cannot take into account value of the\n Adjustable/Scrollable unit increment, as this will vary among\n scrolling components.\n \n A simplified example of how this method might be used in a\n listener:\n \n  mouseWheelMoved(MouseWheelEvent event) {\n      ScrollPane sp = getScrollPaneFromSomewhere();\n      Adjustable adj = sp.getVAdjustable()\n      if (MouseWheelEvent.getScrollType() == WHEEL_UNIT_SCROLL) {\n          int totalScrollAmount =\n              event.getUnitsToScroll() *\n              adj.getUnitIncrement();\n          adj.setValue(adj.getValue() + totalScrollAmount);\n      }\n  }\n "}, {"method_name": "paramString", "method_sig": "public String paramString()", "description": "Returns a parameter string identifying this event.\n This method is useful for event-logging and for debugging."}]}