{"name": "Class ServiceRegistry", "module": "java.desktop", "package": "javax.imageio.spi", "text": "A registry for service provider instances for Image I/O service types.\n\n  Service providers are stored in one or more categories,\n each of which is defined by a class or interface (described by a\n Class object) that all of its members must implement.\n\n The set of categories supported by this class is limited\n to the following standard Image I/O service types:\n\n \nImageInputStreamSpi\nImageOutputStreamSpi\nImageReaderSpi\nImageTranscoderSpi\nImageWriterSpi\n\nAn attempt to load a provider that is not a subtype of one of the\n above types will result in IllegalArgumentException.\n  For the general mechanism to load service providers, see\n ServiceLoader, which is\n the underlying standard mechanism used by this class.\n\n  Only a single instance of a given leaf class (that is, the\n actual class returned by getClass(), as opposed to any\n inherited classes or interfaces) may be registered.  That is,\n suppose that the\n com.mycompany.mypkg.GreenImageReaderProvider class\n is a subclass of javax.imageio.spi.ImageReaderSpi.\n If a GreenImageReaderProvider instance is\n registered, it will be stored in the category defined by the\n ImageReaderSpi class.  If a new instance of\n GreenImageReaderProvider is registered, it will replace\n the previous instance.  In practice, service provider objects are\n usually singletons so this behavior is appropriate.\n\n  The service provider classes should be lightweight and\n quick to load.  Implementations of these interfaces should avoid\n complex dependencies on other classes and on native code. The usual\n pattern for more complex services is to register a lightweight\n proxy for the heavyweight service.\n\n  An application may customize the contents of a registry as it\n sees fit, so long as it has the appropriate runtime permission.\n\n  For information on how to create and deploy service providers,\n refer to the documentation on ServiceLoader", "codes": ["public class ServiceRegistry\nextends Object"], "fields": [], "methods": [{"method_name": "lookupProviders", "method_sig": "public static <T> Iterator<T> lookupProviders (Class<T> providerClass,\n                                              ClassLoader loader)", "description": "Searches for implementations of a particular service class\n using the given class loader.\n\n The service class must be one of the service types listed\n in the class specification. If it is not, IllegalArgumentException\n will be thrown.\n\n  This method transforms the name of the given service class\n into a provider-configuration filename as described in the\n class comment and then uses the getResources\n method of the given class loader to find all available files\n with that name.  These files are then read and parsed to\n produce a list of provider-class names.  The iterator that is\n returned uses the given class loader to look up and then\n instantiate each element of the list.\n\n  Because it is possible for extensions to be installed into\n a running Java virtual machine, this method may return\n different results each time it is invoked."}, {"method_name": "lookupProviders", "method_sig": "public static <T> Iterator<T> lookupProviders (Class<T> providerClass)", "description": "Locates and incrementally instantiates the available providers\n of a given service using the context class loader.  This\n convenience method is equivalent to:\n\n \n   ClassLoader cl = Thread.currentThread().getContextClassLoader();\n   return Service.providers(service, cl);\n \nThe service class must be one of the service types listed\n in the class specification. If it is not, IllegalArgumentException\n will be thrown."}, {"method_name": "getCategories", "method_sig": "public Iterator<Class<?>> getCategories()", "description": "Returns an Iterator of Class objects\n indicating the current set of categories.  The iterator will be\n empty if no categories exist."}, {"method_name": "registerServiceProvider", "method_sig": "public <T> boolean registerServiceProvider (T provider,\n                                           Class<T> category)", "description": "Adds a service provider object to the registry.  The provider\n is associated with the given category.\n\n  If provider implements the\n RegisterableService interface, its\n onRegistration method will be called.  Its\n onDeregistration method will be called each time\n it is deregistered from a category, for example if a\n category is removed or the registry is garbage collected."}, {"method_name": "registerServiceProvider", "method_sig": "public void registerServiceProvider (Object provider)", "description": "Adds a service provider object to the registry.  The provider\n is associated within each category present in the registry\n whose Class it implements.\n\n  If provider implements the\n RegisterableService interface, its\n onRegistration method will be called once for each\n category it is registered under.  Its\n onDeregistration method will be called each time\n it is deregistered from a category or when the registry is\n finalized."}, {"method_name": "registerServiceProviders", "method_sig": "public void registerServiceProviders (Iterator<?> providers)", "description": "Adds a set of service provider objects, taken from an\n Iterator to the registry.  Each provider is\n associated within each category present in the registry whose\n Class it implements.\n\n  For each entry of providers that implements\n the RegisterableService interface, its\n onRegistration method will be called once for each\n category it is registered under.  Its\n onDeregistration method will be called each time\n it is deregistered from a category or when the registry is\n finalized."}, {"method_name": "deregisterServiceProvider", "method_sig": "public <T> boolean deregisterServiceProvider (T provider,\n                                             Class<T> category)", "description": "Removes a service provider object from the given category.  If\n the provider was not previously registered, nothing happens and\n false is returned.  Otherwise, true\n is returned.  If an object of the same class as\n provider but not equal (using ==) to\n provider is registered, it will not be\n deregistered.\n\n  If provider implements the\n RegisterableService interface, its\n onDeregistration method will be called."}, {"method_name": "deregisterServiceProvider", "method_sig": "public void deregisterServiceProvider (Object provider)", "description": "Removes a service provider object from all categories that\n contain it."}, {"method_name": "contains", "method_sig": "public boolean contains (Object provider)", "description": "Returns true if provider is currently\n registered."}, {"method_name": "getServiceProviders", "method_sig": "public <T> Iterator<T> getServiceProviders (Class<T> category,\n                                           boolean useOrdering)", "description": "Returns an Iterator containing all registered\n service providers in the given category.  If\n useOrdering is false, the iterator\n will return all of the server provider objects in an arbitrary\n order.  Otherwise, the ordering will respect any pairwise\n orderings that have been set.  If the graph of pairwise\n orderings contains cycles, any providers that belong to a cycle\n will not be returned."}, {"method_name": "getServiceProviders", "method_sig": "public <T> Iterator<T> getServiceProviders (Class<T> category,\n                                           ServiceRegistry.Filter filter,\n                                           boolean useOrdering)", "description": "Returns an Iterator containing service provider\n objects within a given category that satisfy a criterion\n imposed by the supplied ServiceRegistry.Filter\n object's filter method.\n\n  The useOrdering argument controls the\n ordering of the results using the same rules as\n getServiceProviders(Class, boolean)."}, {"method_name": "getServiceProviderByClass", "method_sig": "public <T> T getServiceProviderByClass (Class<T> providerClass)", "description": "Returns the currently registered service provider object that\n is of the given class type.  At most one object of a given\n class is allowed to be registered at any given time.  If no\n registered object has the desired class type, null\n is returned."}, {"method_name": "setOrdering", "method_sig": "public <T> boolean setOrdering (Class<T> category,\n                               T firstProvider,\n                               T secondProvider)", "description": "Sets a pairwise ordering between two service provider objects\n within a given category.  If one or both objects are not\n currently registered within the given category, or if the\n desired ordering is already set, nothing happens and\n false is returned.  If the providers previously\n were ordered in the reverse direction, that ordering is\n removed.\n\n  The ordering will be used by the\n getServiceProviders methods when their\n useOrdering argument is true."}, {"method_name": "unsetOrdering", "method_sig": "public <T> boolean unsetOrdering (Class<T> category,\n                                 T firstProvider,\n                                 T secondProvider)", "description": "Sets a pairwise ordering between two service provider objects\n within a given category.  If one or both objects are not\n currently registered within the given category, or if no\n ordering is currently set between them, nothing happens\n and false is returned.\n\n  The ordering will be used by the\n getServiceProviders methods when their\n useOrdering argument is true."}, {"method_name": "deregisterAll", "method_sig": "public void deregisterAll (Class<?> category)", "description": "Deregisters all service provider object currently registered\n under the given category."}, {"method_name": "deregisterAll", "method_sig": "public void deregisterAll()", "description": "Deregisters all currently registered service providers from all\n categories."}, {"method_name": "finalize", "method_sig": "@Deprecated(since=\"9\")\npublic void finalize()\n              throws Throwable", "description": "Finalizes this object prior to garbage collection.  The\n deregisterAll method is called to deregister all\n currently registered service providers.  This method should not\n be called from application code."}]}