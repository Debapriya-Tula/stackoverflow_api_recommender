{"name": "Class TabularDataSupport", "module": "java.management", "package": "javax.management.openmbean", "text": "The TabularDataSupport class is the open data\n class which implements the TabularData\n and the Map interfaces, and which is internally based on a hash map data structure.", "codes": ["public class TabularDataSupport\nextends Object\nimplements TabularData, Map<Object, Object>, Cloneable, Serializable"], "fields": [], "methods": [{"method_name": "getTabularType", "method_sig": "public TabularType getTabularType()", "description": "Returns the tabular type describing this TabularData instance."}, {"method_name": "calculateIndex", "method_sig": "public Object[] calculateIndex (CompositeData value)", "description": "Calculates the index that would be used in this TabularData instance to refer\n to the specified composite data value parameter if it were added to this instance.\n This method checks for the type validity of the specified value,\n but does not check if the calculated index is already used\n to refer to a value in this TabularData instance."}, {"method_name": "containsKey", "method_sig": "public boolean containsKey (Object key)", "description": "Returns true if and only if this TabularData instance contains a CompositeData value\n (ie a row) whose index is the specified key. If key cannot be cast to a one dimension array\n of Object instances, this method simply returns false; otherwise it returns the result of the call to\n this.containsKey((Object[]) key)."}, {"method_name": "containsKey", "method_sig": "public boolean containsKey (Object[] key)", "description": "Returns true if and only if this TabularData instance contains a CompositeData value\n (ie a row) whose index is the specified key. If key is null or does not conform to\n this TabularData instance's TabularType definition, this method simply returns false."}, {"method_name": "containsValue", "method_sig": "public boolean containsValue (CompositeData value)", "description": "Returns true if and only if this TabularData instance contains the specified\n CompositeData value. If value is null or does not conform to\n this TabularData instance's row type definition, this method simply returns false."}, {"method_name": "containsValue", "method_sig": "public boolean containsValue (Object value)", "description": "Returns true if and only if this TabularData instance contains the specified\n value."}, {"method_name": "get", "method_sig": "public Object get (Object key)", "description": "This method simply calls get((Object[]) key)."}, {"method_name": "get", "method_sig": "public CompositeData get (Object[] key)", "description": "Returns the CompositeData value whose index is\n key, or null if there is no value mapping\n to key, in this TabularData instance."}, {"method_name": "put", "method_sig": "public Object put (Object key,\n                  Object value)", "description": "This method simply calls put((CompositeData) value) and\n therefore ignores its key parameter which can be null."}, {"method_name": "remove", "method_sig": "public Object remove (Object key)", "description": "This method simply calls remove((Object[]) key)."}, {"method_name": "remove", "method_sig": "public CompositeData remove (Object[] key)", "description": "Removes the CompositeData value whose index is key from this TabularData instance,\n and returns the removed value, or returns null if there is no value whose index is key."}, {"method_name": "putAll", "method_sig": "public void putAll (Map<?, ?> t)", "description": "Add all the values contained in the specified map t\n to this TabularData instance.  This method converts\n the collection of values contained in this map into an array of\n CompositeData values, if possible, and then call the\n method putAll(CompositeData[]). Note that the keys\n used in the specified map t are ignored. This method\n allows, for example to add the content of another\n TabularData instance with the same row type (but\n possibly different index names) into this instance."}, {"method_name": "putAll", "method_sig": "public void putAll (CompositeData[] values)", "description": "Add all the elements in values to this\n TabularData instance.  If any element in\n values does not satisfy the constraints defined in\n put, or if any two\n elements in values have the same index calculated\n according to this TabularData instance's\n TabularType definition, then an exception describing\n the failure is thrown and no element of values is\n added, thus leaving this TabularData instance\n unchanged."}, {"method_name": "clear", "method_sig": "public void clear()", "description": "Removes all rows from this TabularDataSupport instance."}, {"method_name": "size", "method_sig": "public int size()", "description": "Returns the number of rows in this TabularDataSupport instance."}, {"method_name": "isEmpty", "method_sig": "public boolean isEmpty()", "description": "Returns true if this TabularDataSupport instance contains no rows."}, {"method_name": "keySet", "method_sig": "public Set<Object> keySet()", "description": "Returns a set view of the keys contained in the underlying map of this\n TabularDataSupport instance used to index the rows.\n Each key contained in this Set is an unmodifiable List<?>\n so the returned set view is a Set<List<?>> but is declared as a\n Set<Object> for compatibility reasons.\n The set is backed by the underlying map of this\n TabularDataSupport instance, so changes to the\n TabularDataSupport instance are reflected in the\n set, and vice-versa.\n\n The set supports element removal, which removes the corresponding\n row from this TabularDataSupport instance, via the\n Iterator.remove(), Set.remove(java.lang.Object), Set.removeAll(java.util.Collection<?>),\n Set.retainAll(java.util.Collection<?>), and Set.clear() operations. It does\n  not support the Set.add(E) or Set.addAll(java.util.Collection<? extends E>) operations."}, {"method_name": "values", "method_sig": "public Collection<Object> values()", "description": "Returns a collection view of the rows contained in this\n TabularDataSupport instance. The returned Collection\n is a Collection<CompositeData> but is declared as a\n Collection<Object> for compatibility reasons.\n The returned collection can be used to iterate over the values.\n The collection is backed by the underlying map, so changes to the\n TabularDataSupport instance are reflected in the collection,\n and vice-versa.\n\n The collection supports element removal, which removes the corresponding\n index to row mapping from this TabularDataSupport instance, via\n the Iterator.remove(), Collection.remove(java.lang.Object),\n Collection.removeAll(java.util.Collection<?>), Collection.retainAll(java.util.Collection<?>),\n and Collection.clear() operations. It does not support\n the Collection.add(E) or Collection.addAll(java.util.Collection<? extends E>) operations."}, {"method_name": "entrySet", "method_sig": "public Set<Map.Entry<Object, Object>> entrySet()", "description": "Returns a collection view of the index to row mappings\n contained in this TabularDataSupport instance.\n Each element in the returned collection is\n a Map.Entry<List<?>,CompositeData> but\n is declared as a Map.Entry<Object,Object>\n for compatibility reasons. Each of the map entry\n keys is an unmodifiable List<?>.\n The collection is backed by the underlying map of this\n TabularDataSupport instance, so changes to the\n TabularDataSupport instance are reflected in\n the collection, and vice-versa.\n The collection supports element removal, which removes\n the corresponding mapping from the map, via the\n Iterator.remove(), Collection.remove(java.lang.Object),\n Collection.removeAll(java.util.Collection<?>), Collection.retainAll(java.util.Collection<?>),\n and Collection.clear() operations. It does not support\n the Collection.add(E) or Collection.addAll(java.util.Collection<? extends E>)\n operations.\n \nIMPORTANT NOTICE: Do not use the setValue method of the\n Map.Entry elements contained in the returned collection view.\n Doing so would corrupt the index to row mappings contained in this\n TabularDataSupport instance."}, {"method_name": "clone", "method_sig": "public Object clone()", "description": "Returns a clone of this TabularDataSupport instance:\n the clone is obtained by calling super.clone(), and then cloning the underlying map.\n Only a shallow clone of the underlying map is made, i.e.\n no cloning of the indexes and row values is made as they are immutable."}, {"method_name": "equals", "method_sig": "public boolean equals (Object obj)", "description": "Compares the specified obj parameter with this TabularDataSupport instance for equality.\n \n Returns true if and only if all of the following statements are true:\n \nobj is non null,\nobj also implements the TabularData interface,\ntheir tabular types are equal\ntheir contents (ie all CompositeData values) are equal.\n\n This ensures that this equals method works properly for obj parameters which are\n different implementations of the TabularData interface.\n \u00a0"}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Returns the hash code value for this TabularDataSupport instance.\n \n The hash code of a TabularDataSupport instance is the sum of the hash codes\n of all elements of information used in equals comparisons\n (ie: its tabular type and its content, where the content is defined as all the CompositeData values).\n \n This ensures that t1.equals(t2) implies that t1.hashCode()==t2.hashCode()\n for any two TabularDataSupport instances t1 and t2,\n as required by the general contract of the method\n Object.hashCode().\n \n However, note that another instance of a class implementing the TabularData interface\n may be equal to this TabularDataSupport instance as defined by equals(java.lang.Object),\n but may have a different hash code if it is calculated differently."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a string representation of this TabularDataSupport instance.\n \n The string representation consists of the name of this class\n (ie javax.management.openmbean.TabularDataSupport),\n the string representation of the tabular type of this instance, and the string representation of the contents\n (ie list the key=value mappings as returned by a call to\n dataMap.toString())."}]}