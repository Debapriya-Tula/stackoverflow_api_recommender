{"name": "Class X509CertSelector", "module": "java.base", "package": "java.security.cert", "text": "A CertSelector that selects X509Certificates that\n match all specified criteria. This class is particularly useful when\n selecting certificates from a CertStore to build a\n PKIX-compliant certification path.\n \n When first constructed, an X509CertSelector has no criteria\n enabled and each of the get methods return a default value\n (null, or -1 for the getBasicConstraints method). Therefore, the match\n method would return true for any X509Certificate.\n Typically, several criteria are enabled (by calling\n setIssuer or\n setKeyUsage, for instance) and then the\n X509CertSelector is passed to\n CertStore.getCertificates or some similar\n method.\n \n Several criteria can be enabled (by calling setIssuer\n and setSerialNumber,\n for example) such that the match method\n usually uniquely matches a single X509Certificate. We say\n usually, since it is possible for two issuing CAs to have the same\n distinguished name and each issue a certificate with the same serial\n number. Other unique combinations include the issuer, subject,\n subjectKeyIdentifier and/or the subjectPublicKey criteria.\n \n Please refer to RFC 5280:\n Internet X.509 Public Key Infrastructure Certificate and CRL Profile for\n definitions of the X.509 certificate extensions mentioned below.\n \nConcurrent Access\n\n Unless otherwise specified, the methods defined in this class are not\n thread-safe. Multiple threads that need to access a single\n object concurrently should synchronize amongst themselves and\n provide the necessary locking. Multiple threads each manipulating\n separate objects need not synchronize.", "codes": ["public class X509CertSelector\nextends Object\nimplements CertSelector"], "fields": [], "methods": [{"method_name": "setCertificate", "method_sig": "public void setCertificate (X509Certificate cert)", "description": "Sets the certificateEquals criterion. The specified\n X509Certificate must be equal to the\n X509Certificate passed to the match method.\n If null, then this check is not applied.\n\n This method is particularly useful when it is necessary to\n match a single certificate. Although other criteria can be specified\n in conjunction with the certificateEquals criterion, it is usually not\n practical or necessary."}, {"method_name": "setSerialNumber", "method_sig": "public void setSerialNumber (BigInteger serial)", "description": "Sets the serialNumber criterion. The specified serial number\n must match the certificate serial number in the\n X509Certificate. If null, any certificate\n serial number will do."}, {"method_name": "setIssuer", "method_sig": "public void setIssuer (X500Principal issuer)", "description": "Sets the issuer criterion. The specified distinguished name\n must match the issuer distinguished name in the\n X509Certificate. If null, any issuer\n distinguished name will do."}, {"method_name": "setIssuer", "method_sig": "public void setIssuer (String issuerDN)\n               throws IOException", "description": "Denigrated, use setIssuer(X500Principal)\n or setIssuer(byte[]) instead. This method should not be\n relied on as it can fail to match some certificates because of a loss of\n encoding information in the\n RFC 2253 String form\n of some distinguished names.\n \n Sets the issuer criterion. The specified distinguished name\n must match the issuer distinguished name in the\n X509Certificate. If null, any issuer\n distinguished name will do.\n \n If issuerDN is not null, it should contain a\n distinguished name, in RFC 2253 format."}, {"method_name": "setIssuer", "method_sig": "public void setIssuer (byte[] issuerDN)\n               throws IOException", "description": "Sets the issuer criterion. The specified distinguished name\n must match the issuer distinguished name in the\n X509Certificate. If null is specified,\n the issuer criterion is disabled and any issuer distinguished name will\n do.\n \n If issuerDN is not null, it should contain a\n single DER encoded distinguished name, as defined in X.501. The ASN.1\n notation for this structure is as follows.\n \n Name ::= CHOICE {\n   RDNSequence }\n\n RDNSequence ::= SEQUENCE OF RelativeDistinguishedName\n\n RelativeDistinguishedName ::=\n   SET SIZE (1 .. MAX) OF AttributeTypeAndValue\n\n AttributeTypeAndValue ::= SEQUENCE {\n   type     AttributeType,\n   value    AttributeValue }\n\n AttributeType ::= OBJECT IDENTIFIER\n\n AttributeValue ::= ANY DEFINED BY AttributeType\n ....\n DirectoryString ::= CHOICE {\n       teletexString           TeletexString (SIZE (1..MAX)),\n       printableString         PrintableString (SIZE (1..MAX)),\n       universalString         UniversalString (SIZE (1..MAX)),\n       utf8String              UTF8String (SIZE (1.. MAX)),\n       bmpString               BMPString (SIZE (1..MAX)) }\n \n\n Note that the byte array specified here is cloned to protect against\n subsequent modifications."}, {"method_name": "setSubject", "method_sig": "public void setSubject (X500Principal subject)", "description": "Sets the subject criterion. The specified distinguished name\n must match the subject distinguished name in the\n X509Certificate. If null, any subject\n distinguished name will do."}, {"method_name": "setSubject", "method_sig": "public void setSubject (String subjectDN)\n                throws IOException", "description": "Denigrated, use setSubject(X500Principal)\n or setSubject(byte[]) instead. This method should not be\n relied on as it can fail to match some certificates because of a loss of\n encoding information in the RFC 2253 String form of some distinguished\n names.\n \n Sets the subject criterion. The specified distinguished name\n must match the subject distinguished name in the\n X509Certificate. If null, any subject\n distinguished name will do.\n \n If subjectDN is not null, it should contain a\n distinguished name, in RFC 2253 format."}, {"method_name": "setSubject", "method_sig": "public void setSubject (byte[] subjectDN)\n                throws IOException", "description": "Sets the subject criterion. The specified distinguished name\n must match the subject distinguished name in the\n X509Certificate. If null, any subject\n distinguished name will do.\n \n If subjectDN is not null, it should contain a\n single DER encoded distinguished name, as defined in X.501. For the ASN.1\n notation for this structure, see\n setIssuer(byte [] issuerDN)."}, {"method_name": "setSubjectKeyIdentifier", "method_sig": "public void setSubjectKeyIdentifier (byte[] subjectKeyID)", "description": "Sets the subjectKeyIdentifier criterion. The\n X509Certificate must contain a SubjectKeyIdentifier\n extension for which the contents of the extension\n matches the specified criterion value.\n If the criterion value is null, no\n subjectKeyIdentifier check will be done.\n \n If subjectKeyID is not null, it\n should contain a single DER encoded value corresponding to the contents\n of the extension value (not including the object identifier,\n criticality setting, and encapsulating OCTET STRING)\n for a SubjectKeyIdentifier extension.\n The ASN.1 notation for this structure follows.\n\n \n SubjectKeyIdentifier ::= KeyIdentifier\n\n KeyIdentifier ::= OCTET STRING\n \n\n Since the format of subject key identifiers is not mandated by\n any standard, subject key identifiers are not parsed by the\n X509CertSelector. Instead, the values are compared using\n a byte-by-byte comparison.\n \n Note that the byte array supplied here is cloned to protect against\n subsequent modifications."}, {"method_name": "setAuthorityKeyIdentifier", "method_sig": "public void setAuthorityKeyIdentifier (byte[] authorityKeyID)", "description": "Sets the authorityKeyIdentifier criterion. The\n X509Certificate must contain an\n AuthorityKeyIdentifier extension for which the contents of the\n extension value matches the specified criterion value.\n If the criterion value is null, no\n authorityKeyIdentifier check will be done.\n \n If authorityKeyID is not null, it\n should contain a single DER encoded value corresponding to the contents\n of the extension value (not including the object identifier,\n criticality setting, and encapsulating OCTET STRING)\n for an AuthorityKeyIdentifier extension.\n The ASN.1 notation for this structure follows.\n\n \n AuthorityKeyIdentifier ::= SEQUENCE {\n    keyIdentifier             [0] KeyIdentifier           OPTIONAL,\n    authorityCertIssuer       [1] GeneralNames            OPTIONAL,\n    authorityCertSerialNumber [2] CertificateSerialNumber OPTIONAL  }\n\n KeyIdentifier ::= OCTET STRING\n \n\n Authority key identifiers are not parsed by the\n X509CertSelector.  Instead, the values are\n compared using a byte-by-byte comparison.\n \n When the keyIdentifier field of\n AuthorityKeyIdentifier is populated, the value is\n usually taken from the SubjectKeyIdentifier extension\n in the issuer's certificate.  Note, however, that the result of\n X509Certificate.getExtensionValue(<SubjectKeyIdentifier Object\n Identifier>) on the issuer's certificate may NOT be used\n directly as the input to setAuthorityKeyIdentifier.\n This is because the SubjectKeyIdentifier contains\n only a KeyIdentifier OCTET STRING, and not a SEQUENCE of\n KeyIdentifier, GeneralNames, and CertificateSerialNumber.\n In order to use the extension value of the issuer certificate's\n SubjectKeyIdentifier\n extension, it will be necessary to extract the value of the embedded\n KeyIdentifier OCTET STRING, then DER encode this OCTET\n STRING inside a SEQUENCE.\n For more details on SubjectKeyIdentifier, see\n setSubjectKeyIdentifier(byte[] subjectKeyID).\n \n Note also that the byte array supplied here is cloned to protect against\n subsequent modifications."}, {"method_name": "setCertificateValid", "method_sig": "public void setCertificateValid (Date certValid)", "description": "Sets the certificateValid criterion. The specified date must fall\n within the certificate validity period for the\n X509Certificate. If null, no certificateValid\n check will be done.\n \n Note that the Date supplied here is cloned to protect\n against subsequent modifications."}, {"method_name": "setPrivateKeyValid", "method_sig": "public void setPrivateKeyValid (Date privateKeyValid)", "description": "Sets the privateKeyValid criterion. The specified date must fall\n within the private key validity period for the\n X509Certificate. If null, no privateKeyValid\n check will be done.\n \n Note that the Date supplied here is cloned to protect\n against subsequent modifications."}, {"method_name": "setSubjectPublicKeyAlgID", "method_sig": "public void setSubjectPublicKeyAlgID (String oid)\n                              throws IOException", "description": "Sets the subjectPublicKeyAlgID criterion. The\n X509Certificate must contain a subject public key\n with the specified algorithm. If null, no\n subjectPublicKeyAlgID check will be done."}, {"method_name": "setSubjectPublicKey", "method_sig": "public void setSubjectPublicKey (PublicKey key)", "description": "Sets the subjectPublicKey criterion. The\n X509Certificate must contain the specified subject public\n key. If null, no subjectPublicKey check will be done."}, {"method_name": "setSubjectPublicKey", "method_sig": "public void setSubjectPublicKey (byte[] key)\n                         throws IOException", "description": "Sets the subjectPublicKey criterion. The X509Certificate\n must contain the specified subject public key. If null,\n no subjectPublicKey check will be done.\n \n Because this method allows the public key to be specified as a byte\n array, it may be used for unknown key types.\n \n If key is not null, it should contain a\n single DER encoded SubjectPublicKeyInfo structure, as defined in X.509.\n The ASN.1 notation for this structure is as follows.\n \n SubjectPublicKeyInfo  ::=  SEQUENCE  {\n   algorithm            AlgorithmIdentifier,\n   subjectPublicKey     BIT STRING  }\n\n AlgorithmIdentifier  ::=  SEQUENCE  {\n   algorithm               OBJECT IDENTIFIER,\n   parameters              ANY DEFINED BY algorithm OPTIONAL  }\n                              -- contains a value of the type\n                              -- registered for use with the\n                              -- algorithm object identifier value\n \n\n Note that the byte array supplied here is cloned to protect against\n subsequent modifications."}, {"method_name": "setKeyUsage", "method_sig": "public void setKeyUsage (boolean[] keyUsage)", "description": "Sets the keyUsage criterion. The X509Certificate\n must allow the specified keyUsage values. If null, no\n keyUsage check will be done. Note that an X509Certificate\n that has no keyUsage extension implicitly allows all keyUsage values.\n \n Note that the boolean array supplied here is cloned to protect against\n subsequent modifications."}, {"method_name": "setExtendedKeyUsage", "method_sig": "public void setExtendedKeyUsage (Set<String> keyPurposeSet)\n                         throws IOException", "description": "Sets the extendedKeyUsage criterion. The X509Certificate\n must allow the specified key purposes in its extended key usage\n extension. If keyPurposeSet is empty or null,\n no extendedKeyUsage check will be done. Note that an\n X509Certificate that has no extendedKeyUsage extension\n implicitly allows all key purposes.\n \n Note that the Set is cloned to protect against\n subsequent modifications."}, {"method_name": "setMatchAllSubjectAltNames", "method_sig": "public void setMatchAllSubjectAltNames (boolean matchAllNames)", "description": "Enables/disables matching all of the subjectAlternativeNames\n specified in the setSubjectAlternativeNames or addSubjectAlternativeName methods. If enabled,\n the X509Certificate must contain all of the\n specified subject alternative names. If disabled, the\n X509Certificate must contain at least one of the\n specified subject alternative names.\n\n The matchAllNames flag is true by default."}, {"method_name": "setSubjectAlternativeNames", "method_sig": "public void setSubjectAlternativeNames (Collection<List<?>> names)\n                                throws IOException", "description": "Sets the subjectAlternativeNames criterion. The\n X509Certificate must contain all or at least one of the\n specified subjectAlternativeNames, depending on the value of\n the matchAllNames flag (see setMatchAllSubjectAltNames).\n \n This method allows the caller to specify, with a single method call,\n the complete set of subject alternative names for the\n subjectAlternativeNames criterion. The specified value replaces\n the previous value for the subjectAlternativeNames criterion.\n \n The names parameter (if not null) is a\n Collection with one\n entry for each name to be included in the subject alternative name\n criterion. Each entry is a List whose first entry is an\n Integer (the name type, 0-8) and whose second\n entry is a String or a byte array (the name, in\n string or ASN.1 DER encoded form, respectively).\n There can be multiple names of the same type. If null\n is supplied as the value for this argument, no\n subjectAlternativeNames check will be performed.\n \n Each subject alternative name in the Collection\n may be specified either as a String or as an ASN.1 encoded\n byte array. For more details about the formats used, see\n addSubjectAlternativeName(int type, String name) and\n addSubjectAlternativeName(int type, byte [] name).\n \nNote: for distinguished names, specify the byte\n array form instead of the String form. See the note in\n addSubjectAlternativeName(int, String) for more information.\n \n Note that the names parameter can contain duplicate\n names (same name and name type), but they may be removed from the\n Collection of names returned by the\n getSubjectAlternativeNames method.\n \n Note that a deep copy is performed on the Collection to\n protect against subsequent modifications."}, {"method_name": "addSubjectAlternativeName", "method_sig": "public void addSubjectAlternativeName (int type,\n                                      String name)\n                               throws IOException", "description": "Adds a name to the subjectAlternativeNames criterion. The\n X509Certificate must contain all or at least one\n of the specified subjectAlternativeNames, depending on the value of\n the matchAllNames flag (see setMatchAllSubjectAltNames).\n \n This method allows the caller to add a name to the set of subject\n alternative names.\n The specified name is added to any previous value for the\n subjectAlternativeNames criterion. If the specified name is a\n duplicate, it may be ignored.\n \n The name is provided in string format.\n RFC 822, DNS, and URI\n names use the well-established string formats for those types (subject to\n the restrictions included in RFC 5280). IPv4 address names are\n supplied using dotted quad notation. OID address names are represented\n as a series of nonnegative integers separated by periods. And\n directory names (distinguished names) are supplied in RFC 2253 format.\n No standard string format is defined for otherNames, X.400 names,\n EDI party names, IPv6 address names, or any other type of names. They\n should be specified using the\n addSubjectAlternativeName(int type, byte [] name)\n method.\n \nNote: for distinguished names, use\n addSubjectAlternativeName(int, byte[]) instead.\n This method should not be relied on as it can fail to match some\n certificates because of a loss of encoding information in the RFC 2253\n String form of some distinguished names."}, {"method_name": "addSubjectAlternativeName", "method_sig": "public void addSubjectAlternativeName (int type,\n                                      byte[] name)\n                               throws IOException", "description": "Adds a name to the subjectAlternativeNames criterion. The\n X509Certificate must contain all or at least one\n of the specified subjectAlternativeNames, depending on the value of\n the matchAllNames flag (see setMatchAllSubjectAltNames).\n \n This method allows the caller to add a name to the set of subject\n alternative names.\n The specified name is added to any previous value for the\n subjectAlternativeNames criterion. If the specified name is a\n duplicate, it may be ignored.\n \n The name is provided as a byte array. This byte array should contain\n the DER encoded name, as it would appear in the GeneralName structure\n defined in RFC 5280 and X.509. The encoded byte array should only contain\n the encoded value of the name, and should not include the tag associated\n with the name in the GeneralName structure. The ASN.1 definition of this\n structure appears below.\n \n  GeneralName ::= CHOICE {\n       otherName                       [0]     OtherName,\n       rfc822Name                      [1]     IA5String,\n       dNSName                         [2]     IA5String,\n       x400Address                     [3]     ORAddress,\n       directoryName                   [4]     Name,\n       ediPartyName                    [5]     EDIPartyName,\n       uniformResourceIdentifier       [6]     IA5String,\n       iPAddress                       [7]     OCTET STRING,\n       registeredID                    [8]     OBJECT IDENTIFIER}\n \n\n Note that the byte array supplied here is cloned to protect against\n subsequent modifications."}, {"method_name": "setNameConstraints", "method_sig": "public void setNameConstraints (byte[] bytes)\n                        throws IOException", "description": "Sets the name constraints criterion. The X509Certificate\n must have subject and subject alternative names that\n meet the specified name constraints.\n \n The name constraints are specified as a byte array. This byte array\n should contain the DER encoded form of the name constraints, as they\n would appear in the NameConstraints structure defined in RFC 5280\n and X.509. The ASN.1 definition of this structure appears below.\n\n \n  NameConstraints ::= SEQUENCE {\n       permittedSubtrees       [0]     GeneralSubtrees OPTIONAL,\n       excludedSubtrees        [1]     GeneralSubtrees OPTIONAL }\n\n  GeneralSubtrees ::= SEQUENCE SIZE (1..MAX) OF GeneralSubtree\n\n  GeneralSubtree ::= SEQUENCE {\n       base                    GeneralName,\n       minimum         [0]     BaseDistance DEFAULT 0,\n       maximum         [1]     BaseDistance OPTIONAL }\n\n  BaseDistance ::= INTEGER (0..MAX)\n\n  GeneralName ::= CHOICE {\n       otherName                       [0]     OtherName,\n       rfc822Name                      [1]     IA5String,\n       dNSName                         [2]     IA5String,\n       x400Address                     [3]     ORAddress,\n       directoryName                   [4]     Name,\n       ediPartyName                    [5]     EDIPartyName,\n       uniformResourceIdentifier       [6]     IA5String,\n       iPAddress                       [7]     OCTET STRING,\n       registeredID                    [8]     OBJECT IDENTIFIER}\n \n\n Note that the byte array supplied here is cloned to protect against\n subsequent modifications."}, {"method_name": "setBasicConstraints", "method_sig": "public void setBasicConstraints (int minMaxPathLen)", "description": "Sets the basic constraints constraint. If the value is greater than or\n equal to zero, X509Certificates must include a\n basicConstraints extension with\n a pathLen of at least this value. If the value is -2, only end-entity\n certificates are accepted. If the value is -1, no check is done.\n \n This constraint is useful when building a certification path forward\n (from the target toward the trust anchor. If a partial path has been\n built, any candidate certificate must have a maxPathLen value greater\n than or equal to the number of certificates in the partial path."}, {"method_name": "setPolicy", "method_sig": "public void setPolicy (Set<String> certPolicySet)\n               throws IOException", "description": "Sets the policy constraint. The X509Certificate must\n include at least one of the specified policies in its certificate\n policies extension. If certPolicySet is empty, then the\n X509Certificate must include at least some specified policy\n in its certificate policies extension. If certPolicySet is\n null, no policy check will be performed.\n \n Note that the Set is cloned to protect against\n subsequent modifications."}, {"method_name": "setPathToNames", "method_sig": "public void setPathToNames (Collection<List<?>> names)\n                    throws IOException", "description": "Sets the pathToNames criterion. The X509Certificate must\n not include name constraints that would prohibit building a\n path to the specified names.\n \n This method allows the caller to specify, with a single method call,\n the complete set of names which the X509Certificates's\n name constraints must permit. The specified value replaces\n the previous value for the pathToNames criterion.\n \n This constraint is useful when building a certification path forward\n (from the target toward the trust anchor. If a partial path has been\n built, any candidate certificate must not include name constraints that\n would prohibit building a path to any of the names in the partial path.\n \n The names parameter (if not null) is a\n Collection with one\n entry for each name to be included in the pathToNames\n criterion. Each entry is a List whose first entry is an\n Integer (the name type, 0-8) and whose second\n entry is a String or a byte array (the name, in\n string or ASN.1 DER encoded form, respectively).\n There can be multiple names of the same type. If null\n is supplied as the value for this argument, no\n pathToNames check will be performed.\n \n Each name in the Collection\n may be specified either as a String or as an ASN.1 encoded\n byte array. For more details about the formats used, see\n addPathToName(int type, String name) and\n addPathToName(int type, byte [] name).\n \nNote: for distinguished names, specify the byte\n array form instead of the String form. See the note in\n addPathToName(int, String) for more information.\n \n Note that the names parameter can contain duplicate\n names (same name and name type), but they may be removed from the\n Collection of names returned by the\n getPathToNames method.\n \n Note that a deep copy is performed on the Collection to\n protect against subsequent modifications."}, {"method_name": "addPathToName", "method_sig": "public void addPathToName (int type,\n                          String name)\n                   throws IOException", "description": "Adds a name to the pathToNames criterion. The X509Certificate\n must not include name constraints that would prohibit building a\n path to the specified name.\n \n This method allows the caller to add a name to the set of names which\n the X509Certificates's name constraints must permit.\n The specified name is added to any previous value for the\n pathToNames criterion.  If the name is a duplicate, it may be ignored.\n \n The name is provided in string format. RFC 822, DNS, and URI names\n use the well-established string formats for those types (subject to\n the restrictions included in RFC 5280). IPv4 address names are\n supplied using dotted quad notation. OID address names are represented\n as a series of nonnegative integers separated by periods. And\n directory names (distinguished names) are supplied in RFC 2253 format.\n No standard string format is defined for otherNames, X.400 names,\n EDI party names, IPv6 address names, or any other type of names. They\n should be specified using the\n addPathToName(int type, byte [] name) method.\n \nNote: for distinguished names, use\n addPathToName(int, byte[]) instead.\n This method should not be relied on as it can fail to match some\n certificates because of a loss of encoding information in the RFC 2253\n String form of some distinguished names."}, {"method_name": "addPathToName", "method_sig": "public void addPathToName (int type,\n                          byte[] name)\n                   throws IOException", "description": "Adds a name to the pathToNames criterion. The X509Certificate\n must not include name constraints that would prohibit building a\n path to the specified name.\n \n This method allows the caller to add a name to the set of names which\n the X509Certificates's name constraints must permit.\n The specified name is added to any previous value for the\n pathToNames criterion. If the name is a duplicate, it may be ignored.\n \n The name is provided as a byte array. This byte array should contain\n the DER encoded name, as it would appear in the GeneralName structure\n defined in RFC 5280 and X.509. The ASN.1 definition of this structure\n appears in the documentation for\n addSubjectAlternativeName(int type, byte [] name).\n \n Note that the byte array supplied here is cloned to protect against\n subsequent modifications."}, {"method_name": "getCertificate", "method_sig": "public X509Certificate getCertificate()", "description": "Returns the certificateEquals criterion. The specified\n X509Certificate must be equal to the\n X509Certificate passed to the match method.\n If null, this check is not applied."}, {"method_name": "getSerialNumber", "method_sig": "public BigInteger getSerialNumber()", "description": "Returns the serialNumber criterion. The specified serial number\n must match the certificate serial number in the\n X509Certificate. If null, any certificate\n serial number will do."}, {"method_name": "getIssuer", "method_sig": "public X500Principal getIssuer()", "description": "Returns the issuer criterion as an X500Principal. This\n distinguished name must match the issuer distinguished name in the\n X509Certificate. If null, the issuer criterion\n is disabled and any issuer distinguished name will do."}, {"method_name": "getIssuerAsString", "method_sig": "public String getIssuerAsString()", "description": "Denigrated, use getIssuer() or\n getIssuerAsBytes() instead. This method should not be\n relied on as it can fail to match some certificates because of a loss of\n encoding information in the RFC 2253 String form of some distinguished\n names.\n \n Returns the issuer criterion as a String. This\n distinguished name must match the issuer distinguished name in the\n X509Certificate. If null, the issuer criterion\n is disabled and any issuer distinguished name will do.\n \n If the value returned is not null, it is a\n distinguished name, in RFC 2253 format."}, {"method_name": "getIssuerAsBytes", "method_sig": "public byte[] getIssuerAsBytes()\n                        throws IOException", "description": "Returns the issuer criterion as a byte array. This distinguished name\n must match the issuer distinguished name in the\n X509Certificate. If null, the issuer criterion\n is disabled and any issuer distinguished name will do.\n \n If the value returned is not null, it is a byte\n array containing a single DER encoded distinguished name, as defined in\n X.501. The ASN.1 notation for this structure is supplied in the\n documentation for\n setIssuer(byte [] issuerDN).\n \n Note that the byte array returned is cloned to protect against\n subsequent modifications."}, {"method_name": "getSubject", "method_sig": "public X500Principal getSubject()", "description": "Returns the subject criterion as an X500Principal. This\n distinguished name must match the subject distinguished name in the\n X509Certificate. If null, the subject criterion\n is disabled and any subject distinguished name will do."}, {"method_name": "getSubjectAsString", "method_sig": "public String getSubjectAsString()", "description": "Denigrated, use getSubject() or\n getSubjectAsBytes() instead. This method should not be\n relied on as it can fail to match some certificates because of a loss of\n encoding information in the RFC 2253 String form of some distinguished\n names.\n \n Returns the subject criterion as a String. This\n distinguished name must match the subject distinguished name in the\n X509Certificate. If null, the subject criterion\n is disabled and any subject distinguished name will do.\n \n If the value returned is not null, it is a\n distinguished name, in RFC 2253 format."}, {"method_name": "getSubjectAsBytes", "method_sig": "public byte[] getSubjectAsBytes()\n                         throws IOException", "description": "Returns the subject criterion as a byte array. This distinguished name\n must match the subject distinguished name in the\n X509Certificate. If null, the subject criterion\n is disabled and any subject distinguished name will do.\n \n If the value returned is not null, it is a byte\n array containing a single DER encoded distinguished name, as defined in\n X.501. The ASN.1 notation for this structure is supplied in the\n documentation for\n setSubject(byte [] subjectDN).\n \n Note that the byte array returned is cloned to protect against\n subsequent modifications."}, {"method_name": "getSubjectKeyIdentifier", "method_sig": "public byte[] getSubjectKeyIdentifier()", "description": "Returns the subjectKeyIdentifier criterion. The\n X509Certificate must contain a SubjectKeyIdentifier\n extension with the specified value. If null, no\n subjectKeyIdentifier check will be done.\n \n Note that the byte array returned is cloned to protect against\n subsequent modifications."}, {"method_name": "getAuthorityKeyIdentifier", "method_sig": "public byte[] getAuthorityKeyIdentifier()", "description": "Returns the authorityKeyIdentifier criterion. The\n X509Certificate must contain a AuthorityKeyIdentifier\n extension with the specified value. If null, no\n authorityKeyIdentifier check will be done.\n \n Note that the byte array returned is cloned to protect against\n subsequent modifications."}, {"method_name": "getCertificateValid", "method_sig": "public Date getCertificateValid()", "description": "Returns the certificateValid criterion. The specified date must fall\n within the certificate validity period for the\n X509Certificate. If null, no certificateValid\n check will be done.\n \n Note that the Date returned is cloned to protect against\n subsequent modifications."}, {"method_name": "getPrivateKeyValid", "method_sig": "public Date getPrivateKeyValid()", "description": "Returns the privateKeyValid criterion. The specified date must fall\n within the private key validity period for the\n X509Certificate. If null, no privateKeyValid\n check will be done.\n \n Note that the Date returned is cloned to protect against\n subsequent modifications."}, {"method_name": "getSubjectPublicKeyAlgID", "method_sig": "public String getSubjectPublicKeyAlgID()", "description": "Returns the subjectPublicKeyAlgID criterion. The\n X509Certificate must contain a subject public key\n with the specified algorithm. If null, no\n subjectPublicKeyAlgID check will be done."}, {"method_name": "getSubjectPublicKey", "method_sig": "public PublicKey getSubjectPublicKey()", "description": "Returns the subjectPublicKey criterion. The\n X509Certificate must contain the specified subject\n public key. If null, no subjectPublicKey check will be done."}, {"method_name": "getKeyUsage", "method_sig": "public boolean[] getKeyUsage()", "description": "Returns the keyUsage criterion. The X509Certificate\n must allow the specified keyUsage values. If null, no keyUsage\n check will be done.\n \n Note that the boolean array returned is cloned to protect against\n subsequent modifications."}, {"method_name": "getExtendedKeyUsage", "method_sig": "public Set<String> getExtendedKeyUsage()", "description": "Returns the extendedKeyUsage criterion. The X509Certificate\n must allow the specified key purposes in its extended key usage\n extension. If the keyPurposeSet returned is empty or\n null, no extendedKeyUsage check will be done. Note that an\n X509Certificate that has no extendedKeyUsage extension\n implicitly allows all key purposes."}, {"method_name": "getMatchAllSubjectAltNames", "method_sig": "public boolean getMatchAllSubjectAltNames()", "description": "Indicates if the X509Certificate must contain all\n or at least one of the subjectAlternativeNames\n specified in the setSubjectAlternativeNames or addSubjectAlternativeName methods. If true,\n the X509Certificate must contain all of the\n specified subject alternative names. If false, the\n X509Certificate must contain at least one of the\n specified subject alternative names."}, {"method_name": "getSubjectAlternativeNames", "method_sig": "public Collection<List<?>> getSubjectAlternativeNames()", "description": "Returns a copy of the subjectAlternativeNames criterion.\n The X509Certificate must contain all or at least one\n of the specified subjectAlternativeNames, depending on the value\n of the matchAllNames flag (see getMatchAllSubjectAltNames). If the value returned is\n null, no subjectAlternativeNames check will be performed.\n \n If the value returned is not null, it is a\n Collection with\n one entry for each name to be included in the subject alternative name\n criterion. Each entry is a List whose first entry is an\n Integer (the name type, 0-8) and whose second\n entry is a String or a byte array (the name, in\n string or ASN.1 DER encoded form, respectively).\n There can be multiple names of the same type.  Note that the\n Collection returned may contain duplicate names (same name\n and name type).\n \n Each subject alternative name in the Collection\n may be specified either as a String or as an ASN.1 encoded\n byte array. For more details about the formats used, see\n addSubjectAlternativeName(int type, String name) and\n addSubjectAlternativeName(int type, byte [] name).\n \n Note that a deep copy is performed on the Collection to\n protect against subsequent modifications."}, {"method_name": "getNameConstraints", "method_sig": "public byte[] getNameConstraints()", "description": "Returns the name constraints criterion. The X509Certificate\n must have subject and subject alternative names that\n meet the specified name constraints.\n \n The name constraints are returned as a byte array. This byte array\n contains the DER encoded form of the name constraints, as they\n would appear in the NameConstraints structure defined in RFC 5280\n and X.509. The ASN.1 notation for this structure is supplied in the\n documentation for\n setNameConstraints(byte [] bytes).\n \n Note that the byte array returned is cloned to protect against\n subsequent modifications."}, {"method_name": "getBasicConstraints", "method_sig": "public int getBasicConstraints()", "description": "Returns the basic constraints constraint. If the value is greater than\n or equal to zero, the X509Certificates must include a\n basicConstraints extension with a pathLen of at least this value.\n If the value is -2, only end-entity certificates are accepted. If\n the value is -1, no basicConstraints check is done."}, {"method_name": "getPolicy", "method_sig": "public Set<String> getPolicy()", "description": "Returns the policy criterion. The X509Certificate must\n include at least one of the specified policies in its certificate policies\n extension. If the Set returned is empty, then the\n X509Certificate must include at least some specified policy\n in its certificate policies extension. If the Set returned is\n null, no policy check will be performed."}, {"method_name": "getPathToNames", "method_sig": "public Collection<List<?>> getPathToNames()", "description": "Returns a copy of the pathToNames criterion. The\n X509Certificate must not include name constraints that would\n prohibit building a path to the specified names. If the value\n returned is null, no pathToNames check will be performed.\n \n If the value returned is not null, it is a\n Collection with one\n entry for each name to be included in the pathToNames\n criterion. Each entry is a List whose first entry is an\n Integer (the name type, 0-8) and whose second\n entry is a String or a byte array (the name, in\n string or ASN.1 DER encoded form, respectively).\n There can be multiple names of the same type. Note that the\n Collection returned may contain duplicate names (same\n name and name type).\n \n Each name in the Collection\n may be specified either as a String or as an ASN.1 encoded\n byte array. For more details about the formats used, see\n addPathToName(int type, String name) and\n addPathToName(int type, byte [] name).\n \n Note that a deep copy is performed on the Collection to\n protect against subsequent modifications."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Return a printable representation of the CertSelector."}, {"method_name": "match", "method_sig": "public boolean match (Certificate cert)", "description": "Decides whether a Certificate should be selected."}, {"method_name": "clone", "method_sig": "public Object clone()", "description": "Returns a copy of this object."}]}