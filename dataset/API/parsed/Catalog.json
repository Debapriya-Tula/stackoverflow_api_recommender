{"name": "Interface Catalog", "module": "java.xml", "package": "javax.xml.catalog", "text": "The Catalog class represents an entity Catalog as defined by\n \n XML Catalogs, OASIS Standard V1.1, 7 October 2005.\n \n A catalog is an XML file that contains a root catalog entry with a list\n of catalog entries. The entries can also be grouped with a group entry.\n The catalog and group entries may specify prefer and xml:base\n attributes that set preference of public or system type of entries and base URI\n to resolve relative URIs.\n\n \n A catalog can be used in two situations:\n \nLocate the external resources with a public or system identifier;\n \nLocate an alternate URI reference with a URI.\n \n\n\n For case 1, the standard defines 6 External Identifier Entries:\npublic, system, rewriteSystem, systemSuffix, delegatePublic, and\n delegateSystem.\n \n While for case 2, it defines 4 URI Entries:\nuri, rewriteURI, uriSuffix and delegateURI.\n \n In addition to the above entry types, a catalog may define nextCatalog\n entries to add additional catalog entry files.", "codes": ["public interface Catalog"], "fields": [], "methods": [{"method_name": "matchSystem", "method_sig": "String matchSystem (String systemId)", "description": "Attempts to find a matching entry in the catalog by systemId.\n\n \n The method searches through the system-type entries, including system,\n rewriteSystem, systemSuffix, delegateSystem, and group entries in the\n current catalog in order to find a match.\n \n Resolution follows the steps listed below: \n\nIf a matching system entry exists, it is returned immediately.\nIf more than one rewriteSystem entry matches, the matching entry with\n the longest normalized systemIdStartString value is returned.\nIf more than one systemSuffix entry matches, the matching entry\n with the longest normalized systemIdSuffix value is returned.\nIf more than one delegateSystem entry matches, the matching entry\n with the longest matching systemIdStartString value is returned.\n"}, {"method_name": "matchPublic", "method_sig": "String matchPublic (String publicId)", "description": "Attempts to find a matching entry in the catalog by publicId. The method\n searches through the public-type entries, including public,\n delegatePublic, and group entries in the current catalog in order to find\n a match.\n \n Refer to the description about \n Feature PREFER in the table Catalog Features in class\n CatalogFeatures. Public entries are only considered if the\n prefer is public and system entries are not found.\n \n Resolution follows the steps listed below: \n\nIf a matching public entry is found, it is returned immediately.\nIf more than one delegatePublic entry matches, the matching entry\n with the longest matching publicIdStartString value is returned.\n"}, {"method_name": "matchURI", "method_sig": "String matchURI (String uri)", "description": "Attempts to find a matching entry in the catalog by the uri element.\n\n \n The method searches through the uri-type entries, including uri,\n rewriteURI, uriSuffix, delegateURI and group entries in the current\n catalog in order to find a match.\n\n \n Resolution follows the steps listed below: \n\nIf a matching uri entry is found, it is returned immediately.\nIf more than one rewriteURI entry matches, the matching entry with\n the longest normalized uriStartString value is returned.\nIf more than one uriSuffix entry matches, the matching entry with\n the longest normalized uriSuffix value is returned.\nIf more than one delegatePublic entry matches, the matching entry\n with the longest matching uriStartString value is returned.\n"}, {"method_name": "catalogs", "method_sig": "Stream<Catalog> catalogs()", "description": "Returns a sequential Stream of alternative Catalogs specified using the\n nextCatalog entries in the current catalog, and as the input of\n catalog files excluding the current catalog (that is, the first in the\n input list) when the Catalog object is created by the CatalogManager.\n \n The order of Catalogs in the returned stream is the same as the order\n in which the corresponding nextCatalog entries appear in the\n current catalog. The alternative catalogs from the input file list are\n appended to the end of the stream in the order they are entered."}]}