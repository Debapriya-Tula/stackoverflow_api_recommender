{"name": "Class AudioSystem", "module": "java.desktop", "package": "javax.sound.sampled", "text": "The AudioSystem class acts as the entry point to the sampled-audio\n system resources. This class lets you query and access the mixers that are\n installed on the system. AudioSystem includes a number of methods for\n converting audio data between different formats, and for translating between\n audio files and streams. It also provides a method for obtaining a\n Line directly from the AudioSystem without dealing explicitly\n with mixers.\n \n Properties can be used to specify the default mixer for specific line types.\n Both system properties and a properties file are considered. The\n \"sound.properties\" properties file is read from an implementation-specific\n location (typically it is the conf directory in the Java installation\n directory). The optional \"javax.sound.config.file\" system property can be\n used to specify the properties file that will be read as the initial\n configuration. If a property exists both as a system property and in the\n properties file, the system property takes precedence. If none is specified,\n a suitable default is chosen among the available devices. The syntax of the\n properties file is specified in\n Properties.load. The following table\n lists the available property keys and which methods consider them:\n\n \nAudio System Property Keys\n\n\nProperty Key\n     Interface\n     Affected Method(s)\n \n\n\njavax.sound.sampled.Clip\nClip\ngetLine(javax.sound.sampled.Line.Info), getClip()\n\njavax.sound.sampled.Port\nPort\ngetLine(javax.sound.sampled.Line.Info)\n\njavax.sound.sampled.SourceDataLine\nSourceDataLine\ngetLine(javax.sound.sampled.Line.Info), getSourceDataLine(javax.sound.sampled.AudioFormat)\n\njavax.sound.sampled.TargetDataLine\nTargetDataLine\ngetLine(javax.sound.sampled.Line.Info), getTargetDataLine(javax.sound.sampled.AudioFormat)\n\n\n\n The property value consists of the provider class name and the mixer name,\n separated by the hash mark (\"#\"). The provider class name is the\n fully-qualified name of a concrete mixer provider\n class. The mixer name is matched against the String returned by the\n getName method of Mixer.Info. Either the class name, or the\n mixer name may be omitted. If only the class name is specified, the trailing\n hash mark is optional.\n \n If the provider class is specified, and it can be successfully retrieved from\n the installed providers, the list of Mixer.Info objects is retrieved\n from the provider. Otherwise, or when these mixers do not provide a\n subsequent match, the list is retrieved from getMixerInfo() to contain\n all available Mixer.Info objects.\n \n If a mixer name is specified, the resulting list of Mixer.Info\n objects is searched: the first one with a matching name, and whose\n Mixer provides the respective line interface, will be returned. If no\n matching Mixer.Info object is found, or the mixer name is not\n specified, the first mixer from the resulting list, which provides the\n respective line interface, will be returned.\n \n For example, the property javax.sound.sampled.Clip with a value\n \"com.sun.media.sound.MixerProvider#SunClip\" will have the following\n consequences when getLine is called requesting a Clip\n instance: if the class com.sun.media.sound.MixerProvider exists in\n the list of installed mixer providers, the first Clip from the first\n mixer with name \"SunClip\" will be returned. If it cannot be found,\n the first Clip from the first mixer of the specified provider will be\n returned, regardless of name. If there is none, the first Clip from\n the first Mixer with name \"SunClip\" in the list of all mixers\n (as returned by getMixerInfo) will be returned, or, if not found, the\n first Clip of the first Mixer that can be found in the list\n of all mixers is returned. If that fails, too, an\n IllegalArgumentException is thrown.", "codes": ["public class AudioSystem\nextends Object"], "fields": [{"field_name": "NOT_SPECIFIED", "field_sig": "public static final\u00a0int NOT_SPECIFIED", "description": "An integer that stands for an unknown numeric value. This value is\n appropriate only for signed quantities that do not normally take negative\n values. Examples include file sizes, frame sizes, buffer sizes, and\n sample rates. A number of Java Sound constructors accept a value of\n NOT_SPECIFIED for such parameters. Other methods may also accept\n or return this value, as documented."}], "methods": [{"method_name": "getMixerInfo", "method_sig": "public static Mixer.Info[] getMixerInfo()", "description": "Obtains an array of mixer info objects that represents the set of audio\n mixers that are currently installed on the system."}, {"method_name": "getMixer", "method_sig": "public static Mixer getMixer (Mixer.Info info)", "description": "Obtains the requested audio mixer."}, {"method_name": "getSourceLineInfo", "method_sig": "public static Line.Info[] getSourceLineInfo (Line.Info info)", "description": "Obtains information about all source lines of a particular type that are\n supported by the installed mixers."}, {"method_name": "getTargetLineInfo", "method_sig": "public static Line.Info[] getTargetLineInfo (Line.Info info)", "description": "Obtains information about all target lines of a particular type that are\n supported by the installed mixers."}, {"method_name": "isLineSupported", "method_sig": "public static boolean isLineSupported (Line.Info info)", "description": "Indicates whether the system supports any lines that match the specified\n Line.Info object. A line is supported if any installed mixer\n supports it."}, {"method_name": "getLine", "method_sig": "public static Line getLine (Line.Info info)\n                    throws LineUnavailableException", "description": "Obtains a line that matches the description in the specified\n Line.Info object.\n \n If a DataLine is requested, and info is an instance of\n DataLine.Info specifying at least one fully qualified audio\n format, the last one will be used as the default format of the returned\n DataLine.\n \n If system properties\n javax.sound.sampled.Clip,\n javax.sound.sampled.Port,\n javax.sound.sampled.SourceDataLine and\n javax.sound.sampled.TargetDataLine are defined or they are\n defined in the file \"sound.properties\", they are used to retrieve default\n lines. For details, refer to the class description.\n\n If the respective property is not set, or the mixer requested in the\n property is not installed or does not provide the requested line, all\n installed mixers are queried for the requested line type. A Line will be\n returned from the first mixer providing the requested line type."}, {"method_name": "getClip", "method_sig": "public static Clip getClip()\n                    throws LineUnavailableException", "description": "Obtains a clip that can be used for playing back an audio file or an\n audio stream. The returned clip will be provided by the default system\n mixer, or, if not possible, by any other mixer installed in the system\n that supports a Clip object.\n \n The returned clip must be opened with the open(AudioFormat) or\n open(AudioInputStream) method.\n \n This is a high-level method that uses getMixer and\n getLine internally.\n \n If the system property javax.sound.sampled.Clip is defined or it\n is defined in the file \"sound.properties\", it is used to retrieve the\n default clip. For details, refer to the\n class description."}, {"method_name": "getClip", "method_sig": "public static Clip getClip (Mixer.Info mixerInfo)\n                    throws LineUnavailableException", "description": "Obtains a clip from the specified mixer that can be used for playing back\n an audio file or an audio stream.\n \n The returned clip must be opened with the open(AudioFormat) or\n open(AudioInputStream) method.\n \n This is a high-level method that uses getMixer and\n getLine internally."}, {"method_name": "getSourceDataLine", "method_sig": "public static SourceDataLine getSourceDataLine (AudioFormat format)\n                                        throws LineUnavailableException", "description": "Obtains a source data line that can be used for playing back audio data\n in the format specified by the AudioFormat object. The returned\n line will be provided by the default system mixer, or, if not possible,\n by any other mixer installed in the system that supports a matching\n SourceDataLine object.\n \n The returned line should be opened with the open(AudioFormat) or\n open(AudioFormat, int) method.\n \n This is a high-level method that uses getMixer and\n getLine internally.\n \n The returned SourceDataLine's default audio format will be\n initialized with format.\n \n If the system property javax.sound.sampled.SourceDataLine is\n defined or it is defined in the file \"sound.properties\", it is used to\n retrieve the default source data line. For details, refer to the\n class description."}, {"method_name": "getSourceDataLine", "method_sig": "public static SourceDataLine getSourceDataLine (AudioFormat format,\n                                               Mixer.Info mixerinfo)\n                                        throws LineUnavailableException", "description": "Obtains a source data line that can be used for playing back audio data\n in the format specified by the AudioFormat object, provided by\n the mixer specified by the Mixer.Info object.\n \n The returned line should be opened with the open(AudioFormat) or\n open(AudioFormat, int) method.\n \n This is a high-level method that uses getMixer and\n getLine internally.\n \n The returned SourceDataLine's default audio format will be\n initialized with format."}, {"method_name": "getTargetDataLine", "method_sig": "public static TargetDataLine getTargetDataLine (AudioFormat format)\n                                        throws LineUnavailableException", "description": "Obtains a target data line that can be used for recording audio data in\n the format specified by the AudioFormat object. The returned line\n will be provided by the default system mixer, or, if not possible, by any\n other mixer installed in the system that supports a matching\n TargetDataLine object.\n \n The returned line should be opened with the open(AudioFormat) or\n open(AudioFormat, int) method.\n \n This is a high-level method that uses getMixer and\n getLine internally.\n \n The returned TargetDataLine's default audio format will be\n initialized with format.\n \n If the system property javax.sound.sampled.TargetDataLine is\n defined or it is defined in the file \"sound.properties\", it is used to\n retrieve the default target data line. For details, refer to the\n class description."}, {"method_name": "getTargetDataLine", "method_sig": "public static TargetDataLine getTargetDataLine (AudioFormat format,\n                                               Mixer.Info mixerinfo)\n                                        throws LineUnavailableException", "description": "Obtains a target data line that can be used for recording audio data in\n the format specified by the AudioFormat object, provided by the\n mixer specified by the Mixer.Info object.\n \n The returned line should be opened with the open(AudioFormat) or\n open(AudioFormat, int) method.\n \n This is a high-level method that uses getMixer and\n getLine internally.\n \n The returned TargetDataLine's default audio format will be\n initialized with format."}, {"method_name": "getTargetEncodings", "method_sig": "public static AudioFormat.Encoding[] getTargetEncodings (AudioFormat.Encoding sourceEncoding)", "description": "Obtains the encodings that the system can obtain from an audio input\n stream with the specified encoding using the set of installed format\n converters."}, {"method_name": "getTargetEncodings", "method_sig": "public static AudioFormat.Encoding[] getTargetEncodings (AudioFormat sourceFormat)", "description": "Obtains the encodings that the system can obtain from an audio input\n stream with the specified format using the set of installed format\n converters."}, {"method_name": "isConversionSupported", "method_sig": "public static boolean isConversionSupported (AudioFormat.Encoding targetEncoding,\n                                            AudioFormat sourceFormat)", "description": "Indicates whether an audio input stream of the specified encoding can be\n obtained from an audio input stream that has the specified format."}, {"method_name": "getAudioInputStream", "method_sig": "public static AudioInputStream getAudioInputStream (AudioFormat.Encoding targetEncoding,\n                                                   AudioInputStream sourceStream)", "description": "Obtains an audio input stream of the indicated encoding, by converting\n the provided audio input stream."}, {"method_name": "getTargetFormats", "method_sig": "public static AudioFormat[] getTargetFormats (AudioFormat.Encoding targetEncoding,\n                                             AudioFormat sourceFormat)", "description": "Obtains the formats that have a particular encoding and that the system\n can obtain from a stream of the specified format using the set of\n installed format converters."}, {"method_name": "isConversionSupported", "method_sig": "public static boolean isConversionSupported (AudioFormat targetFormat,\n                                            AudioFormat sourceFormat)", "description": "Indicates whether an audio input stream of a specified format can be\n obtained from an audio input stream of another specified format."}, {"method_name": "getAudioInputStream", "method_sig": "public static AudioInputStream getAudioInputStream (AudioFormat targetFormat,\n                                                   AudioInputStream sourceStream)", "description": "Obtains an audio input stream of the indicated format, by converting the\n provided audio input stream."}, {"method_name": "getAudioFileFormat", "method_sig": "public static AudioFileFormat getAudioFileFormat (InputStream stream)\n                                          throws UnsupportedAudioFileException,\n                                                 IOException", "description": "Obtains the audio file format of the provided input stream. The stream\n must point to valid audio file data. The implementation of this method\n may require multiple parsers to examine the stream to determine whether\n they support it. These parsers must be able to mark the stream, read\n enough data to determine whether they support the stream, and reset the\n stream's read pointer to its original position. If the input stream does\n not support these operations, this method may fail with an\n IOException."}, {"method_name": "getAudioFileFormat", "method_sig": "public static AudioFileFormat getAudioFileFormat (URL url)\n                                          throws UnsupportedAudioFileException,\n                                                 IOException", "description": "Obtains the audio file format of the specified URL. The\n URL must point to valid audio file data."}, {"method_name": "getAudioFileFormat", "method_sig": "public static AudioFileFormat getAudioFileFormat (File file)\n                                          throws UnsupportedAudioFileException,\n                                                 IOException", "description": "Obtains the audio file format of the specified File. The\n File must point to valid audio file data."}, {"method_name": "getAudioInputStream", "method_sig": "public static AudioInputStream getAudioInputStream (InputStream stream)\n                                            throws UnsupportedAudioFileException,\n                                                   IOException", "description": "Obtains an audio input stream from the provided input stream. The stream\n must point to valid audio file data. The implementation of this method\n may require multiple parsers to examine the stream to determine whether\n they support it. These parsers must be able to mark the stream, read\n enough data to determine whether they support the stream, and reset the\n stream's read pointer to its original position. If the input stream does\n not support these operation, this method may fail with an\n IOException."}, {"method_name": "getAudioInputStream", "method_sig": "public static AudioInputStream getAudioInputStream (URL url)\n                                            throws UnsupportedAudioFileException,\n                                                   IOException", "description": "Obtains an audio input stream from the URL provided. The\n URL must point to valid audio file data."}, {"method_name": "getAudioInputStream", "method_sig": "public static AudioInputStream getAudioInputStream (File file)\n                                            throws UnsupportedAudioFileException,\n                                                   IOException", "description": "Obtains an audio input stream from the provided File. The\n File must point to valid audio file data."}, {"method_name": "getAudioFileTypes", "method_sig": "public static AudioFileFormat.Type[] getAudioFileTypes()", "description": "Obtains the file types for which file writing support is provided by the\n system."}, {"method_name": "isFileTypeSupported", "method_sig": "public static boolean isFileTypeSupported (AudioFileFormat.Type fileType)", "description": "Indicates whether file writing support for the specified file type is\n provided by the system."}, {"method_name": "getAudioFileTypes", "method_sig": "public static AudioFileFormat.Type[] getAudioFileTypes (AudioInputStream stream)", "description": "Obtains the file types that the system can write from the audio input\n stream specified."}, {"method_name": "isFileTypeSupported", "method_sig": "public static boolean isFileTypeSupported (AudioFileFormat.Type fileType,\n                                          AudioInputStream stream)", "description": "Indicates whether an audio file of the specified file type can be written\n from the indicated audio input stream."}, {"method_name": "write", "method_sig": "public static int write (AudioInputStream stream,\n                        AudioFileFormat.Type fileType,\n                        OutputStream out)\n                 throws IOException", "description": "Writes a stream of bytes representing an audio file of the specified file\n type to the output stream provided. Some file types require that the\n length be written into the file header; such files cannot be written from\n start to finish unless the length is known in advance. An attempt to\n write a file of such a type will fail with an IOException if the\n length in the audio file type is AudioSystem.NOT_SPECIFIED."}, {"method_name": "write", "method_sig": "public static int write (AudioInputStream stream,\n                        AudioFileFormat.Type fileType,\n                        File out)\n                 throws IOException", "description": "Writes a stream of bytes representing an audio file of the specified file\n type to the external file provided."}]}