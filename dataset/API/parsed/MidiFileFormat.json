{"name": "Class MidiFileFormat", "module": "java.desktop", "package": "javax.sound.midi", "text": "A MidiFileFormat object encapsulates a MIDI file's type, as well as\n its length and timing information.\n \n A MidiFileFormat object can include a set of properties. A property\n is a pair of key and value: the key is of type String, the associated\n property value is an arbitrary object. Properties specify additional\n informational meta data (like a author, or copyright). Properties are\n optional information, and file reader and file writer implementations are not\n required to provide or recognize properties.\n \n The following table lists some common properties that should be used in\n implementations:\n\n \nMIDI File Format Properties\n\n\nProperty key\n     Value type\n     Description\n \n\n\n\"author\"\n     String\nname of the author of this file\n   \n\"title\"\n     String\ntitle of this file\n   \n\"copyright\"\n     String\ncopyright message\n   \n\"date\"\n     Date\ndate of the recording or release\n   \n\"comment\"\n     String\nan arbitrary text\n \n", "codes": ["public class MidiFileFormat\nextends Object"], "fields": [{"field_name": "UNKNOWN_LENGTH", "field_sig": "public static final\u00a0int UNKNOWN_LENGTH", "description": "Represents unknown length."}, {"field_name": "type", "field_sig": "protected\u00a0int type", "description": "The type of MIDI file."}, {"field_name": "divisionType", "field_sig": "protected\u00a0float divisionType", "description": "The division type of the MIDI file."}, {"field_name": "resolution", "field_sig": "protected\u00a0int resolution", "description": "The timing resolution of the MIDI file."}, {"field_name": "byteLength", "field_sig": "protected\u00a0int byteLength", "description": "The length of the MIDI file in bytes."}, {"field_name": "microsecondLength", "field_sig": "protected\u00a0long microsecondLength", "description": "The duration of the MIDI file in microseconds."}], "methods": [{"method_name": "getType", "method_sig": "public int getType()", "description": "Obtains the MIDI file type."}, {"method_name": "getDivisionType", "method_sig": "public float getDivisionType()", "description": "Obtains the timing division type for the MIDI file."}, {"method_name": "getResolution", "method_sig": "public int getResolution()", "description": "Obtains the timing resolution for the MIDI file. If the division type is\n PPQ, the resolution is specified in ticks per beat. For SMTPE timing, the\n resolution is specified in ticks per frame."}, {"method_name": "getByteLength", "method_sig": "public int getByteLength()", "description": "Obtains the length of the MIDI file, expressed in 8-bit bytes."}, {"method_name": "getMicrosecondLength", "method_sig": "public long getMicrosecondLength()", "description": "Obtains the length of the MIDI file, expressed in microseconds."}, {"method_name": "properties", "method_sig": "public Map<String, Object> properties()", "description": "Obtain an unmodifiable map of properties. The concept of properties is\n further explained in the class description."}, {"method_name": "getProperty", "method_sig": "public Object getProperty (String key)", "description": "Obtain the property value specified by the key. The concept of properties\n is further explained in the class description.\n \n If the specified property is not defined for a particular file format,\n this method returns null."}]}