{"name": "Class AbstractColorChooserPanel", "module": "java.desktop", "package": "javax.swing.colorchooser", "text": "This is the abstract superclass for color choosers.  If you want to add\n a new color chooser panel into a JColorChooser, subclass\n this class.\n \nWarning:\n Serialized objects of this class will not be compatible with\n future Swing releases. The current serialization support is\n appropriate for short term storage or RMI between applications running\n the same version of Swing.  As of 1.4, support for long term storage\n of all JavaBeans\u2122\n has been added to the java.beans package.\n Please see XMLEncoder.", "codes": ["public abstract class AbstractColorChooserPanel\nextends JPanel"], "fields": [{"field_name": "TRANSPARENCY_ENABLED_PROPERTY", "field_sig": "public static final\u00a0String TRANSPARENCY_ENABLED_PROPERTY", "description": "Identifies that the transparency of the color (alpha value) can be\n selected"}], "methods": [{"method_name": "updateChooser", "method_sig": "public abstract void updateChooser()", "description": "Invoked automatically when the model's state changes.\n It is also called by installChooserPanel to allow\n you to set up the initial state of your chooser.\n Override this method to update your ChooserPanel."}, {"method_name": "buildChooser", "method_sig": "protected abstract void buildChooser()", "description": "Builds a new chooser panel."}, {"method_name": "getDisplayName", "method_sig": "public abstract String getDisplayName()", "description": "Returns a string containing the display name of the panel."}, {"method_name": "getMnemonic", "method_sig": "public int getMnemonic()", "description": "Provides a hint to the look and feel as to the\n KeyEvent.VK constant that can be used as a mnemonic to\n access the panel. A return value <= 0 indicates there is no mnemonic.\n \n The return value here is a hint, it is ultimately up to the look\n and feel to honor the return value in some meaningful way.\n \n This implementation returns 0, indicating the\n AbstractColorChooserPanel does not support a mnemonic,\n subclasses wishing a mnemonic will need to override this."}, {"method_name": "getDisplayedMnemonicIndex", "method_sig": "public int getDisplayedMnemonicIndex()", "description": "Provides a hint to the look and feel as to the index of the character in\n getDisplayName that should be visually identified as the\n mnemonic. The look and feel should only use this if\n getMnemonic returns a value > 0.\n \n The return value here is a hint, it is ultimately up to the look\n and feel to honor the return value in some meaningful way. For example,\n a look and feel may wish to render each\n AbstractColorChooserPanel in a JTabbedPane,\n and further use this return value to underline a character in\n the getDisplayName.\n \n This implementation returns -1, indicating the\n AbstractColorChooserPanel does not support a mnemonic,\n subclasses wishing a mnemonic will need to override this."}, {"method_name": "getSmallDisplayIcon", "method_sig": "public abstract Icon getSmallDisplayIcon()", "description": "Returns the small display icon for the panel."}, {"method_name": "getLargeDisplayIcon", "method_sig": "public abstract Icon getLargeDisplayIcon()", "description": "Returns the large display icon for the panel."}, {"method_name": "installChooserPanel", "method_sig": "public void installChooserPanel (JColorChooser enclosingChooser)", "description": "Invoked when the panel is added to the chooser.\n If you override this, be sure to call super."}, {"method_name": "uninstallChooserPanel", "method_sig": "public void uninstallChooserPanel (JColorChooser enclosingChooser)", "description": "Invoked when the panel is removed from the chooser.\n If override this, be sure to call super."}, {"method_name": "getColorSelectionModel", "method_sig": "public ColorSelectionModel getColorSelectionModel()", "description": "Returns the model that the chooser panel is editing."}, {"method_name": "getColorFromModel", "method_sig": "protected Color getColorFromModel()", "description": "Returns the color that is currently selected."}, {"method_name": "setColorTransparencySelectionEnabled", "method_sig": "@BeanProperty(description=\"Sets the transparency of a color selection on or off.\")\npublic void setColorTransparencySelectionEnabled (boolean b)", "description": "Sets whether color chooser panel allows to select the transparency\n (alpha value) of a color.\n This method fires a property-changed event, using the string value of\n TRANSPARENCY_ENABLED_PROPERTY as the name\n of the property.\n\n The value is a hint and may not be applicable to all types of chooser\n panel.\n\n The default value is true."}, {"method_name": "isColorTransparencySelectionEnabled", "method_sig": "public boolean isColorTransparencySelectionEnabled()", "description": "Gets whether color chooser panel allows to select the transparency\n (alpha value) of a color."}, {"method_name": "paint", "method_sig": "public void paint (Graphics g)", "description": "Draws the panel."}]}