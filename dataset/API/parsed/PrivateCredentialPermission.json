{"name": "Class PrivateCredentialPermission", "module": "java.base", "package": "javax.security.auth", "text": "This class is used to protect access to private Credentials\n belonging to a particular Subject.  The Subject\n is represented by a Set of Principals.\n\n  The target name of this Permission specifies\n a Credential class name, and a Set of Principals.\n The only valid value for this Permission's actions is, \"read\".\n The target name must abide by the following syntax:\n\n \n      CredentialClass {PrincipalClass \"PrincipalName\"}*\n \n\n For example, the following permission grants access to the\n com.sun.PrivateCredential owned by Subjects which have\n a com.sun.Principal with the name, \"duke\".  Note that although\n this example, as well as all the examples below, do not contain\n Codebase, SignedBy, or Principal information in the grant statement\n (for simplicity reasons), actual policy configurations should\n specify that information when appropriate.\n\n \n\n    grant {\n      permission javax.security.auth.PrivateCredentialPermission\n              \"com.sun.PrivateCredential com.sun.Principal \\\"duke\\\"\",\n              \"read\";\n    };\n \n\n If CredentialClass is \"*\", then access is granted to\n all private Credentials belonging to the specified\n Subject.\n If \"PrincipalName\" is \"*\", then access is granted to the\n specified Credential owned by any Subject that has the\n specified Principal (the actual PrincipalName doesn't matter).\n For example, the following grants access to the\n a.b.Credential owned by any Subject that has\n an a.b.Principal.\n\n \n    grant {\n      permission javax.security.auth.PrivateCredentialPermission\n              \"a.b.Credential a.b.Principal \"*\"\",\n              \"read\";\n    };\n \n\n If both the PrincipalClass and \"PrincipalName\" are \"*\",\n then access is granted to the specified Credential owned by\n any Subject.\n\n  In addition, the PrincipalClass/PrincipalName pairing may be repeated:\n\n \n    grant {\n      permission javax.security.auth.PrivateCredentialPermission\n              \"a.b.Credential a.b.Principal \"duke\" c.d.Principal \"dukette\"\",\n              \"read\";\n    };\n \n\n The above grants access to the private Credential, \"a.b.Credential\",\n belonging to a Subject with at least two associated Principals:\n \"a.b.Principal\" with the name, \"duke\", and \"c.d.Principal\", with the name,\n \"dukette\".", "codes": ["public final class PrivateCredentialPermission\nextends Permission"], "fields": [], "methods": [{"method_name": "getCredentialClass", "method_sig": "public String getCredentialClass()", "description": "Returns the Class name of the Credential associated with this\n PrivateCredentialPermission."}, {"method_name": "getPrincipals", "method_sig": "public String[][] getPrincipals()", "description": "Returns the Principal classes and names\n associated with this PrivateCredentialPermission.\n The information is returned as a two-dimensional array (array[x][y]).\n The 'x' value corresponds to the number of Principal\n class and name pairs.  When (y==0), it corresponds to\n the Principal class value, and when (y==1),\n it corresponds to the Principal name value.\n For example, array[0][0] corresponds to the class name of\n the first Principal in the array.  array[0][1]\n corresponds to the Principal name of the\n first Principal in the array."}, {"method_name": "implies", "method_sig": "public boolean implies (Permission p)", "description": "Checks if this PrivateCredentialPermission implies\n the specified Permission.\n\n \n\n This method returns true if:\n \n p is an instanceof PrivateCredentialPermission and\n  the target name for p is implied by this object's\n          target name.  For example:\n \n  [* P1 \"duke\"] implies [a.b.Credential P1 \"duke\"].\n  [C1 P1 \"duke\"] implies [C1 P1 \"duke\" P2 \"dukette\"].\n  [C1 P2 \"dukette\"] implies [C1 P1 \"duke\" P2 \"dukette\"].\n \n"}, {"method_name": "equals", "method_sig": "public boolean equals (Object obj)", "description": "Checks two PrivateCredentialPermission objects for\n equality.  Checks that obj is a\n PrivateCredentialPermission,\n and has the same credential class as this object,\n as well as the same Principals as this object.\n The order of the Principals in the respective Permission's\n target names is not relevant."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Returns the hash code value for this object."}, {"method_name": "getActions", "method_sig": "public String getActions()", "description": "Returns the \"canonical string representation\" of the actions.\n This method always returns the String, \"read\"."}, {"method_name": "newPermissionCollection", "method_sig": "public PermissionCollection newPermissionCollection()", "description": "Return a homogeneous collection of PrivateCredentialPermissions\n in a PermissionCollection.\n No such PermissionCollection is defined,\n so this method always returns null."}]}