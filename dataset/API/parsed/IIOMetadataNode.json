{"name": "Class IIOMetadataNode", "module": "java.desktop", "package": "javax.imageio.metadata", "text": "A class representing a node in a meta-data tree, which implements\n the org.w3c.dom.Element interface and additionally allows\n for the storage of non-textual objects via the\n getUserObject and setUserObject methods.\n\n  This class is not intended to be used for general XML\n processing. In particular, Element nodes created\n within the Image I/O API are not compatible with those created by\n Sun's standard implementation of the org.w3.dom API.\n In particular, the implementation is tuned for simple uses and may\n not perform well for intensive processing.\n\n  Namespaces are ignored in this implementation.  The terms \"tag\n name\" and \"node name\" are always considered to be synonymous.\n\n Note:\n The DOM Level 3 specification added a number of new methods to the\n Node, Element and Attr interfaces that are not\n of value to the IIOMetadataNode implementation or specification.\n\n Calling such methods on an IIOMetadataNode, or an Attr\n instance returned from an IIOMetadataNode will result in a\n DOMException being thrown.", "codes": ["public class IIOMetadataNode\nextends Object\nimplements Element, NodeList"], "fields": [], "methods": [{"method_name": "getNodeName", "method_sig": "public String getNodeName()", "description": "Returns the node name associated with this node."}, {"method_name": "getNodeValue", "method_sig": "public String getNodeValue()", "description": "Returns the value associated with this node."}, {"method_name": "setNodeValue", "method_sig": "public void setNodeValue (String nodeValue)", "description": "Sets the String value associated with this node."}, {"method_name": "getNodeType", "method_sig": "public short getNodeType()", "description": "Returns the node type, which is always\n ELEMENT_NODE."}, {"method_name": "getParentNode", "method_sig": "public Node getParentNode()", "description": "Returns the parent of this node.  A null value\n indicates that the node is the root of its own tree.  To add a\n node to an existing tree, use one of the\n insertBefore, replaceChild, or\n appendChild methods."}, {"method_name": "getChildNodes", "method_sig": "public NodeList getChildNodes()", "description": "Returns a NodeList that contains all children of this node.\n If there are no children, this is a NodeList containing\n no nodes."}, {"method_name": "getFirstChild", "method_sig": "public Node getFirstChild()", "description": "Returns the first child of this node, or null if\n the node has no children."}, {"method_name": "getLastChild", "method_sig": "public Node getLastChild()", "description": "Returns the last child of this node, or null if\n the node has no children."}, {"method_name": "getPreviousSibling", "method_sig": "public Node getPreviousSibling()", "description": "Returns the previous sibling of this node, or null\n if this node has no previous sibling."}, {"method_name": "getNextSibling", "method_sig": "public Node getNextSibling()", "description": "Returns the next sibling of this node, or null if\n the node has no next sibling."}, {"method_name": "getAttributes", "method_sig": "public NamedNodeMap getAttributes()", "description": "Returns a NamedNodeMap containing the attributes of\n this node."}, {"method_name": "getOwnerDocument", "method_sig": "public Document getOwnerDocument()", "description": "Returns null, since IIOMetadataNodes\n do not belong to any Document."}, {"method_name": "insertBefore", "method_sig": "public Node insertBefore (Node newChild,\n                         Node refChild)", "description": "Inserts the node newChild before the existing\n child node refChild. If refChild is\n null, insert newChild at the end of\n the list of children."}, {"method_name": "replaceChild", "method_sig": "public Node replaceChild (Node newChild,\n                         Node oldChild)", "description": "Replaces the child node oldChild with\n newChild in the list of children, and returns the\n oldChild node."}, {"method_name": "removeChild", "method_sig": "public Node removeChild (Node oldChild)", "description": "Removes the child node indicated by oldChild from\n the list of children, and returns it."}, {"method_name": "appendChild", "method_sig": "public Node appendChild (Node newChild)", "description": "Adds the node newChild to the end of the list of\n children of this node."}, {"method_name": "hasChildNodes", "method_sig": "public boolean hasChildNodes()", "description": "Returns true if this node has child nodes."}, {"method_name": "cloneNode", "method_sig": "public Node cloneNode (boolean deep)", "description": "Returns a duplicate of this node.  The duplicate node has no\n parent (getParentNode returns null).\n If a shallow clone is being performed (deep is\n false), the new node will not have any children or\n siblings.  If a deep clone is being performed, the new node\n will form the root of a complete cloned subtree."}, {"method_name": "normalize", "method_sig": "public void normalize()", "description": "Does nothing, since IIOMetadataNodes do not\n contain Text children."}, {"method_name": "isSupported", "method_sig": "public boolean isSupported (String feature,\n                           String version)", "description": "Returns false since DOM features are not\n supported."}, {"method_name": "getNamespaceURI", "method_sig": "public String getNamespaceURI()\n                       throws DOMException", "description": "Returns null, since namespaces are not supported."}, {"method_name": "getPrefix", "method_sig": "public String getPrefix()", "description": "Returns null, since namespaces are not supported."}, {"method_name": "setPrefix", "method_sig": "public void setPrefix (String prefix)", "description": "Does nothing, since namespaces are not supported."}, {"method_name": "getLocalName", "method_sig": "public String getLocalName()", "description": "Equivalent to getNodeName."}, {"method_name": "getTagName", "method_sig": "public String getTagName()", "description": "Equivalent to getNodeName."}, {"method_name": "getAttribute", "method_sig": "public String getAttribute (String name)", "description": "Retrieves an attribute value by name."}, {"method_name": "getAttributeNS", "method_sig": "public String getAttributeNS (String namespaceURI,\n                             String localName)", "description": "Equivalent to getAttribute(localName)."}, {"method_name": "setAttributeNS", "method_sig": "public void setAttributeNS (String namespaceURI,\n                           String qualifiedName,\n                           String value)", "description": "Equivalent to setAttribute(qualifiedName, value)."}, {"method_name": "removeAttributeNS", "method_sig": "public void removeAttributeNS (String namespaceURI,\n                              String localName)", "description": "Equivalent to removeAttribute(localName)."}, {"method_name": "getAttributeNodeNS", "method_sig": "public Attr getAttributeNodeNS (String namespaceURI,\n                               String localName)", "description": "Equivalent to getAttributeNode(localName)."}, {"method_name": "setAttributeNodeNS", "method_sig": "public Attr setAttributeNodeNS (Attr newAttr)", "description": "Equivalent to setAttributeNode(newAttr)."}, {"method_name": "getElementsByTagNameNS", "method_sig": "public NodeList getElementsByTagNameNS (String namespaceURI,\n                                       String localName)", "description": "Equivalent to getElementsByTagName(localName)."}, {"method_name": "hasAttributeNS", "method_sig": "public boolean hasAttributeNS (String namespaceURI,\n                              String localName)", "description": "Equivalent to hasAttribute(localName)."}, {"method_name": "getUserObject", "method_sig": "public Object getUserObject()", "description": "Returns the Object value associated with this node."}, {"method_name": "setUserObject", "method_sig": "public void setUserObject (Object userObject)", "description": "Sets the value associated with this node."}, {"method_name": "setIdAttribute", "method_sig": "public void setIdAttribute (String name,\n                           boolean isId)\n                    throws DOMException", "description": "This DOM Level 3 method is not supported for IIOMetadataNode\n and will throw a DOMException."}, {"method_name": "setIdAttributeNS", "method_sig": "public void setIdAttributeNS (String namespaceURI,\n                             String localName,\n                             boolean isId)\n                      throws DOMException", "description": "This DOM Level 3 method is not supported for IIOMetadataNode\n and will throw a DOMException."}, {"method_name": "setIdAttributeNode", "method_sig": "public void setIdAttributeNode (Attr idAttr,\n                               boolean isId)\n                        throws DOMException", "description": "This DOM Level 3 method is not supported for IIOMetadataNode\n and will throw a DOMException."}, {"method_name": "getSchemaTypeInfo", "method_sig": "public TypeInfo getSchemaTypeInfo()\n                           throws DOMException", "description": "This DOM Level 3 method is not supported for IIOMetadataNode\n and will throw a DOMException."}, {"method_name": "setUserData", "method_sig": "public Object setUserData (String key,\n                          Object data,\n                          UserDataHandler handler)\n                   throws DOMException", "description": "This DOM Level 3 method is not supported for IIOMetadataNode\n and will throw a DOMException."}, {"method_name": "getUserData", "method_sig": "public Object getUserData (String key)\n                   throws DOMException", "description": "This DOM Level 3 method is not supported for IIOMetadataNode\n and will throw a DOMException."}, {"method_name": "getFeature", "method_sig": "public Object getFeature (String feature,\n                         String version)\n                  throws DOMException", "description": "This DOM Level 3 method is not supported for IIOMetadataNode\n and will throw a DOMException."}, {"method_name": "isSameNode", "method_sig": "public boolean isSameNode (Node node)\n                   throws DOMException", "description": "This DOM Level 3 method is not supported for IIOMetadataNode\n and will throw a DOMException."}, {"method_name": "isEqualNode", "method_sig": "public boolean isEqualNode (Node node)\n                    throws DOMException", "description": "This DOM Level 3 method is not supported for IIOMetadataNode\n and will throw a DOMException."}, {"method_name": "lookupNamespaceURI", "method_sig": "public String lookupNamespaceURI (String prefix)\n                          throws DOMException", "description": "This DOM Level 3 method is not supported for IIOMetadataNode\n and will throw a DOMException."}, {"method_name": "isDefaultNamespace", "method_sig": "public boolean isDefaultNamespace (String namespaceURI)\n                           throws DOMException", "description": "This DOM Level 3 method is not supported for IIOMetadataNode\n and will throw a DOMException."}, {"method_name": "lookupPrefix", "method_sig": "public String lookupPrefix (String namespaceURI)\n                    throws DOMException", "description": "This DOM Level 3 method is not supported for IIOMetadataNode\n and will throw a DOMException."}, {"method_name": "getTextContent", "method_sig": "public String getTextContent()\n                      throws DOMException", "description": "This DOM Level 3 method is not supported for IIOMetadataNode\n and will throw a DOMException."}, {"method_name": "setTextContent", "method_sig": "public void setTextContent (String textContent)\n                    throws DOMException", "description": "This DOM Level 3 method is not supported for IIOMetadataNode\n and will throw a DOMException."}, {"method_name": "compareDocumentPosition", "method_sig": "public short compareDocumentPosition (Node other)\n                              throws DOMException", "description": "This DOM Level 3 method is not supported for IIOMetadataNode\n and will throw a DOMException."}, {"method_name": "getBaseURI", "method_sig": "public String getBaseURI()\n                  throws DOMException", "description": "This DOM Level 3 method is not supported for IIOMetadataNode\n and will throw a DOMException."}]}