{"name": "Class FocusTraversalPolicy", "module": "java.desktop", "package": "java.awt", "text": "A FocusTraversalPolicy defines the order in which Components with a\n particular focus cycle root are traversed. Instances can apply the policy to\n arbitrary focus cycle roots, allowing themselves to be shared across\n Containers. They do not need to be reinitialized when the focus cycle roots\n of a Component hierarchy change.\n \n The core responsibility of a FocusTraversalPolicy is to provide algorithms\n determining the next and previous Components to focus when traversing\n forward or backward in a UI. Each FocusTraversalPolicy must also provide\n algorithms for determining the first, last, and default Components in a\n traversal cycle. First and last Components are used when normal forward and\n backward traversal, respectively, wraps. The default Component is the first\n to receive focus when traversing down into a new focus traversal cycle.\n A FocusTraversalPolicy can optionally provide an algorithm for determining\n a Window's initial Component. The initial Component is the first to receive\n focus when a Window is first made visible.\n \n FocusTraversalPolicy takes into account focus traversal\n policy providers.  When searching for first/last/next/previous Component,\n if a focus traversal policy provider is encountered, its focus traversal\n policy is used to perform the search operation.\n \n Please see\n \n How to Use the Focus Subsystem,\n a section in The Java Tutorial, and the\n Focus Specification\n for more information.", "codes": ["public abstract class FocusTraversalPolicy\nextends Object"], "fields": [], "methods": [{"method_name": "getComponentAfter", "method_sig": "public abstract Component getComponentAfter (Container aContainer,\n                                            Component aComponent)", "description": "Returns the Component that should receive the focus after aComponent.\n aContainer must be a focus cycle root of aComponent or a focus traversal\n policy provider."}, {"method_name": "getComponentBefore", "method_sig": "public abstract Component getComponentBefore (Container aContainer,\n                                             Component aComponent)", "description": "Returns the Component that should receive the focus before aComponent.\n aContainer must be a focus cycle root of aComponent or a focus traversal\n policy provider."}, {"method_name": "getFirstComponent", "method_sig": "public abstract Component getFirstComponent (Container aContainer)", "description": "Returns the first Component in the traversal cycle. This method is used\n to determine the next Component to focus when traversal wraps in the\n forward direction."}, {"method_name": "getLastComponent", "method_sig": "public abstract Component getLastComponent (Container aContainer)", "description": "Returns the last Component in the traversal cycle. This method is used\n to determine the next Component to focus when traversal wraps in the\n reverse direction."}, {"method_name": "getDefaultComponent", "method_sig": "public abstract Component getDefaultComponent (Container aContainer)", "description": "Returns the default Component to focus. This Component will be the first\n to receive focus when traversing down into a new focus traversal cycle\n rooted at aContainer."}, {"method_name": "getInitialComponent", "method_sig": "public Component getInitialComponent (Window window)", "description": "Returns the Component that should receive the focus when a Window is\n made visible for the first time. Once the Window has been made visible\n by a call to show() or setVisible(true), the\n initial Component will not be used again. Instead, if the Window loses\n and subsequently regains focus, or is made invisible or undisplayable\n and subsequently made visible and displayable, the Window's most\n recently focused Component will become the focus owner. The default\n implementation of this method returns the default Component."}]}