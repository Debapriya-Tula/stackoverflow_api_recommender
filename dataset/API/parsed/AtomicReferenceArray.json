{"name": "Class AtomicReferenceArray<E>", "module": "java.base", "package": "java.util.concurrent.atomic", "text": "An array of object references in which elements may be updated\n atomically.  See the VarHandle specification for\n descriptions of the properties of atomic accesses.", "codes": ["public class AtomicReferenceArray<E>\nextends Object\nimplements Serializable"], "fields": [], "methods": [{"method_name": "length", "method_sig": "public final int length()", "description": "Returns the length of the array."}, {"method_name": "get", "method_sig": "public final E get (int i)", "description": "Returns the current value of the element at index i,\n with memory effects as specified by VarHandle.getVolatile(java.lang.Object...)."}, {"method_name": "set", "method_sig": "public final void set (int i,\n                      E newValue)", "description": "Sets the element at index i to newValue,\n with memory effects as specified by VarHandle.setVolatile(java.lang.Object...)."}, {"method_name": "lazySet", "method_sig": "public final void lazySet (int i,\n                          E newValue)", "description": "Sets the element at index i to newValue,\n with memory effects as specified by VarHandle.setRelease(java.lang.Object...)."}, {"method_name": "getAndSet", "method_sig": "public final E getAndSet (int i,\n                         E newValue)", "description": "Atomically sets the element at index i to \n newValue and returns the old value,\n with memory effects as specified by VarHandle.getAndSet(java.lang.Object...)."}, {"method_name": "compareAndSet", "method_sig": "public final boolean compareAndSet (int i,\n                                   E expectedValue,\n                                   E newValue)", "description": "Atomically sets the element at index i to newValue\n if the element's current value == expectedValue,\n with memory effects as specified by VarHandle.compareAndSet(java.lang.Object...)."}, {"method_name": "weakCompareAndSet", "method_sig": "@Deprecated(since=\"9\")\npublic final boolean weakCompareAndSet (int i,\n                                       E expectedValue,\n                                       E newValue)", "description": "Possibly atomically sets the element at index i to\n newValue if the element's current value == expectedValue,\n with memory effects as specified by VarHandle.weakCompareAndSetPlain(java.lang.Object...)."}, {"method_name": "weakCompareAndSetPlain", "method_sig": "public final boolean weakCompareAndSetPlain (int i,\n                                            E expectedValue,\n                                            E newValue)", "description": "Possibly atomically sets the element at index i to\n newValue if the element's current value == expectedValue,\n with memory effects as specified by VarHandle.weakCompareAndSetPlain(java.lang.Object...)."}, {"method_name": "getAndUpdate", "method_sig": "public final E getAndUpdate (int i,\n                            UnaryOperator<E> updateFunction)", "description": "Atomically updates (with memory effects as specified by VarHandle.compareAndSet(java.lang.Object...)) the element at index i with\n the results of applying the given function, returning the\n previous value. The function should be side-effect-free, since\n it may be re-applied when attempted updates fail due to\n contention among threads."}, {"method_name": "updateAndGet", "method_sig": "public final E updateAndGet (int i,\n                            UnaryOperator<E> updateFunction)", "description": "Atomically updates (with memory effects as specified by VarHandle.compareAndSet(java.lang.Object...)) the element at index i with\n the results of applying the given function, returning the\n updated value. The function should be side-effect-free, since it\n may be re-applied when attempted updates fail due to contention\n among threads."}, {"method_name": "getAndAccumulate", "method_sig": "public final E getAndAccumulate (int i,\n                                E x,\n                                BinaryOperator<E> accumulatorFunction)", "description": "Atomically updates (with memory effects as specified by VarHandle.compareAndSet(java.lang.Object...)) the element at index i with\n the results of applying the given function to the current and\n given values, returning the previous value. The function should\n be side-effect-free, since it may be re-applied when attempted\n updates fail due to contention among threads.  The function is\n applied with the current value of the element at index i\n as its first argument, and the given update as the second\n argument."}, {"method_name": "accumulateAndGet", "method_sig": "public final E accumulateAndGet (int i,\n                                E x,\n                                BinaryOperator<E> accumulatorFunction)", "description": "Atomically updates (with memory effects as specified by VarHandle.compareAndSet(java.lang.Object...)) the element at index i with\n the results of applying the given function to the current and\n given values, returning the updated value. The function should\n be side-effect-free, since it may be re-applied when attempted\n updates fail due to contention among threads.  The function is\n applied with the current value of the element at index i\n as its first argument, and the given update as the second\n argument."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns the String representation of the current values of array."}, {"method_name": "getPlain", "method_sig": "public final E getPlain (int i)", "description": "Returns the current value of the element at index i,\n with memory semantics of reading as if the variable was declared\n non-volatile."}, {"method_name": "setPlain", "method_sig": "public final void setPlain (int i,\n                           E newValue)", "description": "Sets the element at index i to newValue,\n with memory semantics of setting as if the variable was\n declared non-volatile and non-final."}, {"method_name": "getOpaque", "method_sig": "public final E getOpaque (int i)", "description": "Returns the current value of the element at index i,\n with memory effects as specified by VarHandle.getOpaque(java.lang.Object...)."}, {"method_name": "setOpaque", "method_sig": "public final void setOpaque (int i,\n                            E newValue)", "description": "Sets the element at index i to newValue,\n with memory effects as specified by VarHandle.setOpaque(java.lang.Object...)."}, {"method_name": "getAcquire", "method_sig": "public final E getAcquire (int i)", "description": "Returns the current value of the element at index i,\n with memory effects as specified by VarHandle.getAcquire(java.lang.Object...)."}, {"method_name": "setRelease", "method_sig": "public final void setRelease (int i,\n                             E newValue)", "description": "Sets the element at index i to newValue,\n with memory effects as specified by VarHandle.setRelease(java.lang.Object...)."}, {"method_name": "compareAndExchange", "method_sig": "public final E compareAndExchange (int i,\n                                  E expectedValue,\n                                  E newValue)", "description": "Atomically sets the element at index i to newValue\n if the element's current value, referred to as the witness\n value, == expectedValue,\n with memory effects as specified by\n VarHandle.compareAndExchange(java.lang.Object...)."}, {"method_name": "compareAndExchangeAcquire", "method_sig": "public final E compareAndExchangeAcquire (int i,\n                                         E expectedValue,\n                                         E newValue)", "description": "Atomically sets the element at index i to newValue\n if the element's current value, referred to as the witness\n value, == expectedValue,\n with memory effects as specified by\n VarHandle.compareAndExchangeAcquire(java.lang.Object...)."}, {"method_name": "compareAndExchangeRelease", "method_sig": "public final E compareAndExchangeRelease (int i,\n                                         E expectedValue,\n                                         E newValue)", "description": "Atomically sets the element at index i to newValue\n if the element's current value, referred to as the witness\n value, == expectedValue,\n with memory effects as specified by\n VarHandle.compareAndExchangeRelease(java.lang.Object...)."}, {"method_name": "weakCompareAndSetVolatile", "method_sig": "public final boolean weakCompareAndSetVolatile (int i,\n                                               E expectedValue,\n                                               E newValue)", "description": "Possibly atomically sets the element at index i to\n newValue if the element's current value == expectedValue,\n with memory effects as specified by\n VarHandle.weakCompareAndSet(java.lang.Object...)."}, {"method_name": "weakCompareAndSetAcquire", "method_sig": "public final boolean weakCompareAndSetAcquire (int i,\n                                              E expectedValue,\n                                              E newValue)", "description": "Possibly atomically sets the element at index i to\n newValue if the element's current value == expectedValue,\n with memory effects as specified by\n VarHandle.weakCompareAndSetAcquire(java.lang.Object...)."}, {"method_name": "weakCompareAndSetRelease", "method_sig": "public final boolean weakCompareAndSetRelease (int i,\n                                              E expectedValue,\n                                              E newValue)", "description": "Possibly atomically sets the element at index i to\n newValue if the element's current value == expectedValue,\n with memory effects as specified by\n VarHandle.weakCompareAndSetRelease(java.lang.Object...)."}]}