{"name": "Interface Clip", "module": "java.desktop", "package": "javax.sound.sampled", "text": "The Clip interface represents a special kind of data line whose audio\n data can be loaded prior to playback, instead of being streamed in real time.\n \n Because the data is pre-loaded and has a known length, you can set a clip to\n start playing at any position in its audio data. You can also create a loop,\n so that when the clip is played it will cycle repeatedly. Loops are specified\n with a starting and ending sample frame, along with the number of times that\n the loop should be played.\n \n Clips may be obtained from a Mixer that supports lines of this type.\n Data is loaded into a clip when it is opened.\n \n Playback of an audio clip may be started and stopped using the\n start and stop methods. These methods do not\n reset the media position; start causes playback to continue from the\n position where playback was last stopped. To restart playback from the\n beginning of the clip's audio data, simply follow the invocation of\n stop with setFramePosition(0), which rewinds the media to the\n beginning of the clip.", "codes": ["public interface Clip\nextends DataLine"], "fields": [{"field_name": "LOOP_CONTINUOUSLY", "field_sig": "static final\u00a0int LOOP_CONTINUOUSLY", "description": "A value indicating that looping should continue indefinitely rather than\n complete after a specific number of loops."}], "methods": [{"method_name": "open", "method_sig": "void open (AudioFormat format,\n          byte[] data,\n          int offset,\n          int bufferSize)\n   throws LineUnavailableException", "description": "Opens the clip, meaning that it should acquire any required system\n resources and become operational. The clip is opened with the format and\n audio data indicated. If this operation succeeds, the line is marked as\n open and an OPEN event is dispatched to the\n line's listeners.\n \n Invoking this method on a line which is already open is illegal and may\n result in an IllegalStateException.\n \n Note that some lines, once closed, cannot be reopened. Attempts to reopen\n such a line will always result in a LineUnavailableException."}, {"method_name": "open", "method_sig": "void open (AudioInputStream stream)\n   throws LineUnavailableException,\n          IOException", "description": "Opens the clip with the format and audio data present in the provided\n audio input stream. Opening a clip means that it should acquire any\n required system resources and become operational. If this operation input\n stream. If this operation succeeds, the line is marked open and an\n OPEN event is dispatched to the line's\n listeners.\n \n Invoking this method on a line which is already open is illegal and may\n result in an IllegalStateException.\n \n Note that some lines, once closed, cannot be reopened. Attempts to reopen\n such a line will always result in a LineUnavailableException."}, {"method_name": "getFrameLength", "method_sig": "int getFrameLength()", "description": "Obtains the media length in sample frames."}, {"method_name": "getMicrosecondLength", "method_sig": "long getMicrosecondLength()", "description": "Obtains the media duration in microseconds."}, {"method_name": "setFramePosition", "method_sig": "void setFramePosition (int frames)", "description": "Sets the media position in sample frames. The position is zero-based; the\n first frame is frame number zero. When the clip begins playing the next\n time, it will start by playing the frame at this position.\n \n To obtain the current position in sample frames, use the\n getFramePosition method of\n DataLine."}, {"method_name": "setMicrosecondPosition", "method_sig": "void setMicrosecondPosition (long microseconds)", "description": "Sets the media position in microseconds. When the clip begins playing the\n next time, it will start at this position. The level of precision is not\n guaranteed. For example, an implementation might calculate the\n microsecond position from the current frame position and the audio sample\n frame rate. The precision in microseconds would then be limited to the\n number of microseconds per sample frame.\n \n To obtain the current position in microseconds, use the\n getMicrosecondPosition method of\n DataLine."}, {"method_name": "setLoopPoints", "method_sig": "void setLoopPoints (int start,\n                   int end)", "description": "Sets the first and last sample frames that will be played in the loop.\n The ending point must be greater than or equal to the starting point, and\n both must fall within the size of the loaded media. A value of 0 for the\n starting point means the beginning of the loaded media. Similarly, a\n value of -1 for the ending point indicates the last frame of the media."}, {"method_name": "loop", "method_sig": "void loop (int count)", "description": "Starts looping playback from the current position. Playback will continue\n to the loop's end point, then loop back to the loop start point\n count times, and finally continue playback to the end of the\n clip.\n \n If the current position when this method is invoked is greater than the\n loop end point, playback simply continues to the end of the clip without\n looping.\n \n A count value of 0 indicates that any current looping should\n cease and playback should continue to the end of the clip. The behavior\n is undefined when this method is invoked with any other value during a\n loop operation.\n \n If playback is stopped during looping, the current loop status is\n cleared; the behavior of subsequent loop and start requests is not\n affected by an interrupted loop operation."}]}