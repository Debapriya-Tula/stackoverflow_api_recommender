{"name": "Class StreamSupport", "module": "java.base", "package": "java.util.stream", "text": "Low-level utility methods for creating and manipulating streams.\n\n This class is mostly for library writers presenting stream views\n of data structures; most static stream methods intended for end users are in\n the various Stream classes.", "codes": ["public final class StreamSupport\nextends Object"], "fields": [], "methods": [{"method_name": "stream", "method_sig": "public static <T> Stream<T> stream (Spliterator<T> spliterator,\n                                   boolean parallel)", "description": "Creates a new sequential or parallel Stream from a\n Spliterator.\n\n The spliterator is only traversed, split, or queried for estimated\n size after the terminal operation of the stream pipeline commences.\n\n It is strongly recommended the spliterator report a characteristic of\n IMMUTABLE or CONCURRENT, or be\n late-binding.  Otherwise,\n stream(java.util.function.Supplier, int, boolean) should be used\n to reduce the scope of potential interference with the source.  See\n Non-Interference for\n more details."}, {"method_name": "stream", "method_sig": "public static <T> Stream<T> stream (Supplier<? extends Spliterator<T>> supplier,\n                                   int characteristics,\n                                   boolean parallel)", "description": "Creates a new sequential or parallel Stream from a\n Supplier of Spliterator.\n\n The Supplier.get() method will be invoked on the supplier no\n more than once, and only after the terminal operation of the stream pipeline\n commences.\n\n For spliterators that report a characteristic of IMMUTABLE\n or CONCURRENT, or that are\n late-binding, it is likely\n more efficient to use stream(java.util.Spliterator, boolean)\n instead.\n The use of a Supplier in this form provides a level of\n indirection that reduces the scope of potential interference with the\n source.  Since the supplier is only invoked after the terminal operation\n commences, any modifications to the source up to the start of the\n terminal operation are reflected in the stream result.  See\n Non-Interference for\n more details."}, {"method_name": "intStream", "method_sig": "public static IntStream intStream (Spliterator.OfInt spliterator,\n                                  boolean parallel)", "description": "Creates a new sequential or parallel IntStream from a\n Spliterator.OfInt.\n\n The spliterator is only traversed, split, or queried for estimated size\n after the terminal operation of the stream pipeline commences.\n\n It is strongly recommended the spliterator report a characteristic of\n IMMUTABLE or CONCURRENT, or be\n late-binding.  Otherwise,\n intStream(java.util.function.Supplier, int, boolean) should be\n used to reduce the scope of potential interference with the source.  See\n Non-Interference for\n more details."}, {"method_name": "intStream", "method_sig": "public static IntStream intStream (Supplier<? extends Spliterator.OfInt> supplier,\n                                  int characteristics,\n                                  boolean parallel)", "description": "Creates a new sequential or parallel IntStream from a\n Supplier of Spliterator.OfInt.\n\n The Supplier.get() method will be invoked on the supplier no\n more than once, and only after the terminal operation of the stream pipeline\n commences.\n\n For spliterators that report a characteristic of IMMUTABLE\n or CONCURRENT, or that are\n late-binding, it is likely\n more efficient to use intStream(java.util.Spliterator.OfInt, boolean)\n instead.\n The use of a Supplier in this form provides a level of\n indirection that reduces the scope of potential interference with the\n source.  Since the supplier is only invoked after the terminal operation\n commences, any modifications to the source up to the start of the\n terminal operation are reflected in the stream result.  See\n Non-Interference for\n more details."}, {"method_name": "longStream", "method_sig": "public static LongStream longStream (Spliterator.OfLong spliterator,\n                                    boolean parallel)", "description": "Creates a new sequential or parallel LongStream from a\n Spliterator.OfLong.\n\n The spliterator is only traversed, split, or queried for estimated\n size after the terminal operation of the stream pipeline commences.\n\n It is strongly recommended the spliterator report a characteristic of\n IMMUTABLE or CONCURRENT, or be\n late-binding.  Otherwise,\n longStream(java.util.function.Supplier, int, boolean) should be\n used to reduce the scope of potential interference with the source.  See\n Non-Interference for\n more details."}, {"method_name": "longStream", "method_sig": "public static LongStream longStream (Supplier<? extends Spliterator.OfLong> supplier,\n                                    int characteristics,\n                                    boolean parallel)", "description": "Creates a new sequential or parallel LongStream from a\n Supplier of Spliterator.OfLong.\n\n The Supplier.get() method will be invoked on the supplier no\n more than once, and only after the terminal operation of the stream pipeline\n commences.\n\n For spliterators that report a characteristic of IMMUTABLE\n or CONCURRENT, or that are\n late-binding, it is likely\n more efficient to use longStream(java.util.Spliterator.OfLong, boolean)\n instead.\n The use of a Supplier in this form provides a level of\n indirection that reduces the scope of potential interference with the\n source.  Since the supplier is only invoked after the terminal operation\n commences, any modifications to the source up to the start of the\n terminal operation are reflected in the stream result.  See\n Non-Interference for\n more details."}, {"method_name": "doubleStream", "method_sig": "public static DoubleStream doubleStream (Spliterator.OfDouble spliterator,\n                                        boolean parallel)", "description": "Creates a new sequential or parallel DoubleStream from a\n Spliterator.OfDouble.\n\n The spliterator is only traversed, split, or queried for estimated size\n after the terminal operation of the stream pipeline commences.\n\n It is strongly recommended the spliterator report a characteristic of\n IMMUTABLE or CONCURRENT, or be\n late-binding.  Otherwise,\n doubleStream(java.util.function.Supplier, int, boolean) should\n be used to reduce the scope of potential interference with the source.  See\n Non-Interference for\n more details."}, {"method_name": "doubleStream", "method_sig": "public static DoubleStream doubleStream (Supplier<? extends Spliterator.OfDouble> supplier,\n                                        int characteristics,\n                                        boolean parallel)", "description": "Creates a new sequential or parallel DoubleStream from a\n Supplier of Spliterator.OfDouble.\n\n The Supplier.get() method will be invoked on the supplier no\n more than once, and only after the terminal operation of the stream pipeline\n commences.\n\n For spliterators that report a characteristic of IMMUTABLE\n or CONCURRENT, or that are\n late-binding, it is likely\n more efficient to use doubleStream(java.util.Spliterator.OfDouble, boolean)\n instead.\n The use of a Supplier in this form provides a level of\n indirection that reduces the scope of potential interference with the\n source.  Since the supplier is only invoked after the terminal operation\n commences, any modifications to the source up to the start of the\n terminal operation are reflected in the stream result.  See\n Non-Interference for\n more details."}]}