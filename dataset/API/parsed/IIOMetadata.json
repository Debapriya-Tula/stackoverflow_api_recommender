{"name": "Class IIOMetadata", "module": "java.desktop", "package": "javax.imageio.metadata", "text": "An abstract class to be extended by objects that represent metadata\n (non-image data) associated with images and streams.  Plug-ins\n represent metadata using opaque, plug-in specific objects.  These\n objects, however, provide the ability to access their internal\n information as a tree of IIOMetadataNode objects that\n support the XML DOM interfaces as well as additional interfaces for\n storing non-textual data and retrieving information about legal\n data values.  The format of such trees is plug-in dependent, but\n plug-ins may choose to support a plug-in neutral format described\n below.  A single plug-in may support multiple metadata formats,\n whose names maybe determined by calling\n getMetadataFormatNames.  The plug-in may also support\n a single special format, referred to as the \"native\" format, which\n is designed to encode its metadata losslessly.  This format will\n typically be designed specifically to work with a specific file\n format, so that images may be loaded and saved in the same format\n with no loss of metadata, but may be less useful for transferring\n metadata between an ImageReader and an\n ImageWriter for different image formats.  To convert\n between two native formats as losslessly as the image file formats\n will allow, an ImageTranscoder object must be used.", "codes": ["public abstract class IIOMetadata\nextends Object"], "fields": [{"field_name": "standardFormatSupported", "field_sig": "protected\u00a0boolean standardFormatSupported", "description": "A boolean indicating whether the concrete subclass supports the\n standard metadata format, set via the constructor."}, {"field_name": "nativeMetadataFormatName", "field_sig": "protected\u00a0String nativeMetadataFormatName", "description": "The name of the native metadata format for this object,\n initialized to null and set via the constructor."}, {"field_name": "nativeMetadataFormatClassName", "field_sig": "protected\u00a0String nativeMetadataFormatClassName", "description": "The name of the class implementing IIOMetadataFormat\n and representing the native metadata format, initialized to\n null and set via the constructor."}, {"field_name": "extraMetadataFormatNames", "field_sig": "protected\u00a0String[] extraMetadataFormatNames", "description": "An array of names of formats, other than the standard and\n native formats, that are supported by this plug-in,\n initialized to null and set via the constructor."}, {"field_name": "extraMetadataFormatClassNames", "field_sig": "protected\u00a0String[] extraMetadataFormatClassNames", "description": "An array of names of classes implementing IIOMetadataFormat\n and representing the metadata formats, other than the standard and\n native formats, that are supported by this plug-in,\n initialized to null and set via the constructor."}, {"field_name": "defaultController", "field_sig": "protected\u00a0IIOMetadataController defaultController", "description": "An IIOMetadataController that is suggested for use\n as the controller for this IIOMetadata object.  It\n may be retrieved via getDefaultController.  To\n install the default controller, call\n setController(getDefaultController()).  This\n instance variable should be set by subclasses that choose to\n provide their own default controller, usually a GUI, for\n setting parameters."}, {"field_name": "controller", "field_sig": "protected\u00a0IIOMetadataController controller", "description": "The IIOMetadataController that will be\n used to provide settings for this IIOMetadata\n object when the activateController method\n is called.  This value overrides any default controller,\n even when null."}], "methods": [{"method_name": "isStandardMetadataFormatSupported", "method_sig": "public boolean isStandardMetadataFormatSupported()", "description": "Returns true if the standard metadata format is\n supported by getMetadataFormat,\n getAsTree, setFromTree, and\n mergeTree.\n\n  The default implementation returns the value of the\n standardFormatSupported instance variable."}, {"method_name": "isReadOnly", "method_sig": "public abstract boolean isReadOnly()", "description": "Returns true if this object does not support the\n mergeTree, setFromTree, and\n reset methods."}, {"method_name": "getNativeMetadataFormatName", "method_sig": "public String getNativeMetadataFormatName()", "description": "Returns the name of the \"native\" metadata format for this\n plug-in, which typically allows for lossless encoding and\n transmission of the metadata stored in the format handled by\n this plug-in.  If no such format is supported,\n null will be returned.\n\n  The structure and contents of the \"native\" metadata format\n are defined by the plug-in that created this\n IIOMetadata object.  Plug-ins for simple formats\n will usually create a dummy node for the root, and then a\n series of child nodes representing individual tags, chunks, or\n keyword/value pairs.  A plug-in may choose whether or not to\n document its native format.\n\n  The default implementation returns the value of the\n nativeMetadataFormatName instance variable."}, {"method_name": "getExtraMetadataFormatNames", "method_sig": "public String[] getExtraMetadataFormatNames()", "description": "Returns an array of Strings containing the names\n of additional metadata formats, other than the native and standard\n formats, recognized by this plug-in's\n getAsTree, setFromTree, and\n mergeTree methods.  If there are no such additional\n formats, null is returned.\n\n  The default implementation returns a clone of the\n extraMetadataFormatNames instance variable."}, {"method_name": "getMetadataFormatNames", "method_sig": "public String[] getMetadataFormatNames()", "description": "Returns an array of Strings containing the names\n of all metadata formats, including the native and standard\n formats, recognized by this plug-in's getAsTree,\n setFromTree, and mergeTree methods.\n If there are no such formats, null is returned.\n\n  The default implementation calls\n getNativeMetadataFormatName,\n isStandardMetadataFormatSupported, and\n getExtraMetadataFormatNames and returns the\n combined results."}, {"method_name": "getMetadataFormat", "method_sig": "public IIOMetadataFormat getMetadataFormat (String formatName)", "description": "Returns an IIOMetadataFormat object describing the\n given metadata format, or null if no description\n is available.  The supplied name must be one of those returned\n by getMetadataFormatNames (i.e., either the\n native format name, the standard format name, or one of those\n returned by getExtraMetadataFormatNames).\n\n  The default implementation checks the name against the\n global standard metadata format name, and returns that format\n if it is supported.  Otherwise, it checks against the native\n format names followed by any additional format names.  If a\n match is found, it retrieves the name of the\n IIOMetadataFormat class from\n nativeMetadataFormatClassName or\n extraMetadataFormatClassNames as appropriate, and\n constructs an instance of that class using its\n getInstance method."}, {"method_name": "getAsTree", "method_sig": "public abstract Node getAsTree (String formatName)", "description": "Returns an XML DOM Node object that represents the\n root of a tree of metadata contained within this object\n according to the conventions defined by a given metadata\n format.\n\n  The names of the available metadata formats may be queried\n using the getMetadataFormatNames method."}, {"method_name": "mergeTree", "method_sig": "public abstract void mergeTree (String formatName,\n                               Node root)\n                        throws IIOInvalidTreeException", "description": "Alters the internal state of this IIOMetadata\n object from a tree of XML DOM Nodes whose syntax\n is defined by the given metadata format.  The previous state is\n altered only as necessary to accommodate the nodes that are\n present in the given tree.  If the tree structure or contents\n are invalid, an IIOInvalidTreeException will be\n thrown.\n\n  As the semantics of how a tree or subtree may be merged with\n another tree are completely format-specific, plug-in authors may\n implement this method in whatever manner is most appropriate for\n the format, including simply replacing all existing state with the\n contents of the given tree."}, {"method_name": "getStandardChromaNode", "method_sig": "protected IIOMetadataNode getStandardChromaNode()", "description": "Returns an IIOMetadataNode representing the chroma\n information of the standard javax_imageio_1.0\n metadata format, or null if no such information is\n available.  This method is intended to be called by the utility\n routine getStandardTree.\n\n  The default implementation returns null.\n\n  Subclasses should override this method to produce an\n appropriate subtree if they wish to support the standard\n metadata format."}, {"method_name": "getStandardCompressionNode", "method_sig": "protected IIOMetadataNode getStandardCompressionNode()", "description": "Returns an IIOMetadataNode representing the\n compression information of the standard\n javax_imageio_1.0 metadata format, or\n null if no such information is available.  This\n method is intended to be called by the utility routine\n getStandardTree.\n\n  The default implementation returns null.\n\n  Subclasses should override this method to produce an\n appropriate subtree if they wish to support the standard\n metadata format."}, {"method_name": "getStandardDataNode", "method_sig": "protected IIOMetadataNode getStandardDataNode()", "description": "Returns an IIOMetadataNode representing the data\n format information of the standard\n javax_imageio_1.0 metadata format, or\n null if no such information is available.  This\n method is intended to be called by the utility routine\n getStandardTree.\n\n  The default implementation returns null.\n\n  Subclasses should override this method to produce an\n appropriate subtree if they wish to support the standard\n metadata format."}, {"method_name": "getStandardDimensionNode", "method_sig": "protected IIOMetadataNode getStandardDimensionNode()", "description": "Returns an IIOMetadataNode representing the\n dimension information of the standard\n javax_imageio_1.0 metadata format, or\n null if no such information is available.  This\n method is intended to be called by the utility routine\n getStandardTree.\n\n  The default implementation returns null.\n\n  Subclasses should override this method to produce an\n appropriate subtree if they wish to support the standard\n metadata format."}, {"method_name": "getStandardDocumentNode", "method_sig": "protected IIOMetadataNode getStandardDocumentNode()", "description": "Returns an IIOMetadataNode representing the document\n information of the standard javax_imageio_1.0\n metadata format, or null if no such information is\n available.  This method is intended to be called by the utility\n routine getStandardTree.\n\n  The default implementation returns null.\n\n  Subclasses should override this method to produce an\n appropriate subtree if they wish to support the standard\n metadata format."}, {"method_name": "getStandardTextNode", "method_sig": "protected IIOMetadataNode getStandardTextNode()", "description": "Returns an IIOMetadataNode representing the textual\n information of the standard javax_imageio_1.0\n metadata format, or null if no such information is\n available.  This method is intended to be called by the utility\n routine getStandardTree.\n\n  The default implementation returns null.\n\n  Subclasses should override this method to produce an\n appropriate subtree if they wish to support the standard\n metadata format."}, {"method_name": "getStandardTileNode", "method_sig": "protected IIOMetadataNode getStandardTileNode()", "description": "Returns an IIOMetadataNode representing the tiling\n information of the standard javax_imageio_1.0\n metadata format, or null if no such information is\n available.  This method is intended to be called by the utility\n routine getStandardTree.\n\n  The default implementation returns null.\n\n  Subclasses should override this method to produce an\n appropriate subtree if they wish to support the standard\n metadata format."}, {"method_name": "getStandardTransparencyNode", "method_sig": "protected IIOMetadataNode getStandardTransparencyNode()", "description": "Returns an IIOMetadataNode representing the\n transparency information of the standard\n javax_imageio_1.0 metadata format, or\n null if no such information is available.  This\n method is intended to be called by the utility routine\n getStandardTree.\n\n  The default implementation returns null.\n\n  Subclasses should override this method to produce an\n appropriate subtree if they wish to support the standard\n metadata format."}, {"method_name": "getStandardTree", "method_sig": "protected final IIOMetadataNode getStandardTree()", "description": "A utility method to return a tree of\n IIOMetadataNodes representing the metadata\n contained within this object according to the conventions of\n the standard javax_imageio_1.0 metadata format.\n\n  This method calls the various getStandard*Node\n methods to supply each of the subtrees rooted at the children\n of the root node.  If any of those methods returns\n null, the corresponding subtree will be omitted.\n If all of them return null, a tree consisting of a\n single root node will be returned."}, {"method_name": "setFromTree", "method_sig": "public void setFromTree (String formatName,\n                        Node root)\n                 throws IIOInvalidTreeException", "description": "Sets the internal state of this IIOMetadata object\n from a tree of XML DOM Nodes whose syntax is\n defined by the given metadata format.  The previous state is\n discarded.  If the tree's structure or contents are invalid, an\n IIOInvalidTreeException will be thrown.\n\n  The default implementation calls reset\n followed by mergeTree(formatName, root)."}, {"method_name": "reset", "method_sig": "public abstract void reset()", "description": "Resets all the data stored in this object to default values,\n usually to the state this object was in immediately after\n construction, though the precise semantics are plug-in specific.\n Note that there are many possible default values, depending on\n how the object was created."}, {"method_name": "setController", "method_sig": "public void setController (IIOMetadataController controller)", "description": "Sets the IIOMetadataController to be used\n to provide settings for this IIOMetadata\n object when the activateController method\n is called, overriding any default controller.  If the\n argument is null, no controller will be\n used, including any default.  To restore the default, use\n setController(getDefaultController()).\n\n  The default implementation sets the controller\n instance variable to the supplied value."}, {"method_name": "getController", "method_sig": "public IIOMetadataController getController()", "description": "Returns whatever IIOMetadataController is currently\n installed.  This could be the default if there is one,\n null, or the argument of the most recent call\n to setController.\n\n  The default implementation returns the value of the\n controller instance variable."}, {"method_name": "getDefaultController", "method_sig": "public IIOMetadataController getDefaultController()", "description": "Returns the default IIOMetadataController, if there\n is one, regardless of the currently installed controller.  If\n there is no default controller, returns null.\n\n  The default implementation returns the value of the\n defaultController instance variable."}, {"method_name": "hasController", "method_sig": "public boolean hasController()", "description": "Returns true if there is a controller installed\n for this IIOMetadata object.\n\n  The default implementation returns true if the\n getController method returns a\n non-null value."}, {"method_name": "activateController", "method_sig": "public boolean activateController()", "description": "Activates the installed IIOMetadataController for\n this IIOMetadata object and returns the resulting\n value.  When this method returns true, all values for this\n IIOMetadata object will be ready for the next write\n operation.  If false is\n returned, no settings in this object will have been disturbed\n (i.e., the user canceled the operation).\n\n  Ordinarily, the controller will be a GUI providing a user\n interface for a subclass of IIOMetadata for a\n particular plug-in.  Controllers need not be GUIs, however.\n\n  The default implementation calls getController\n and the calls activate on the returned object if\n hasController returns true."}]}