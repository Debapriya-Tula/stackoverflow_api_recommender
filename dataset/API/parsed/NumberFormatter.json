{"name": "Class NumberFormatter", "module": "java.desktop", "package": "javax.swing.text", "text": "NumberFormatter subclasses InternationalFormatter\n adding special behavior for numbers. Among the specializations are\n (these are only used if the NumberFormatter does not display\n invalid numbers, for example, setAllowsInvalid(false)):\n \nPressing +/- (- is determined from the\n       DecimalFormatSymbols associated with the\n       DecimalFormat) in any field but the exponent\n       field will attempt to change the sign of the number to\n       positive/negative.\n   Pressing +/- (- is determined from the\n       DecimalFormatSymbols associated with the\n       DecimalFormat) in the exponent field will\n       attempt to change the sign of the exponent to positive/negative.\n \n\n If you are displaying scientific numbers, you may wish to turn on\n overwrite mode, setOverwriteMode(true). For example:\n \n DecimalFormat decimalFormat = new DecimalFormat(\"0.000E0\");\n NumberFormatter textFormatter = new NumberFormatter(decimalFormat);\n textFormatter.setOverwriteMode(true);\n textFormatter.setAllowsInvalid(false);\n \n\n If you are going to allow the user to enter decimal\n values, you should either force the DecimalFormat to contain at least\n one decimal (#.0###), or allow the value to be invalid\n setAllowsInvalid(true). Otherwise users may not be able to\n input decimal values.\n \nNumberFormatter provides slightly different behavior to\n stringToValue than that of its superclass. If you have\n specified a Class for values, DefaultFormatter.setValueClass(java.lang.Class<?>), that is one of\n of Integer, Long, Float,\n Double, Byte or Short and\n the Format's parseObject returns an instance of\n Number, the corresponding instance of the value class\n will be created using the constructor appropriate for the primitive\n type the value class represents. For example:\n setValueClass(Integer.class) will cause the resulting\n value to be created via\n Integer.valueOf(((Number)formatter.parseObject(string)).intValue()).\n This is typically useful if you\n wish to set a min/max value as the various Number\n implementations are generally not comparable to each other. This is also\n useful if for some reason you need a specific Number\n implementation for your values.\n \nWarning:\n Serialized objects of this class will not be compatible with\n future Swing releases. The current serialization support is\n appropriate for short term storage or RMI between applications running\n the same version of Swing.  As of 1.4, support for long term storage\n of all JavaBeans\u2122\n has been added to the java.beans package.\n Please see XMLEncoder.", "codes": ["public class NumberFormatter\nextends InternationalFormatter"], "fields": [], "methods": [{"method_name": "setFormat", "method_sig": "public void setFormat (Format format)", "description": "Sets the format that dictates the legal values that can be edited\n and displayed.\n \n If you have used the nullary constructor the value of this property\n will be determined for the current locale by way of the\n NumberFormat.getNumberInstance() method."}]}