{"name": "Class FutureTask<V>", "module": "java.base", "package": "java.util.concurrent", "text": "A cancellable asynchronous computation.  This class provides a base\n implementation of Future, with methods to start and cancel\n a computation, query to see if the computation is complete, and\n retrieve the result of the computation.  The result can only be\n retrieved when the computation has completed; the get\n methods will block if the computation has not yet completed.  Once\n the computation has completed, the computation cannot be restarted\n or cancelled (unless the computation is invoked using\n runAndReset()).\n\n A FutureTask can be used to wrap a Callable or\n Runnable object.  Because FutureTask implements\n Runnable, a FutureTask can be submitted to an\n Executor for execution.\n\n In addition to serving as a standalone class, this class provides\n protected functionality that may be useful when creating\n customized task classes.", "codes": ["public class FutureTask<V>\nextends Object\nimplements RunnableFuture<V>"], "fields": [], "methods": [{"method_name": "get", "method_sig": "public V get()\n      throws InterruptedException,\n             ExecutionException", "description": "Description copied from interface:\u00a0Future"}, {"method_name": "get", "method_sig": "public V get (long timeout,\n             TimeUnit unit)\n      throws InterruptedException,\n             ExecutionException,\n             TimeoutException", "description": "Description copied from interface:\u00a0Future"}, {"method_name": "done", "method_sig": "protected void done()", "description": "Protected method invoked when this task transitions to state\n isDone (whether normally or via cancellation). The\n default implementation does nothing.  Subclasses may override\n this method to invoke completion callbacks or perform\n bookkeeping. Note that you can query status inside the\n implementation of this method to determine whether this task\n has been cancelled."}, {"method_name": "set", "method_sig": "protected void set (V v)", "description": "Sets the result of this future to the given value unless\n this future has already been set or has been cancelled.\n\n This method is invoked internally by the RunnableFuture.run() method\n upon successful completion of the computation."}, {"method_name": "setException", "method_sig": "protected void setException (Throwable t)", "description": "Causes this future to report an ExecutionException\n with the given throwable as its cause, unless this future has\n already been set or has been cancelled.\n\n This method is invoked internally by the RunnableFuture.run() method\n upon failure of the computation."}, {"method_name": "runAndReset", "method_sig": "protected boolean runAndReset()", "description": "Executes the computation without setting its result, and then\n resets this future to initial state, failing to do so if the\n computation encounters an exception or is cancelled.  This is\n designed for use with tasks that intrinsically execute more\n than once."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a string representation of this FutureTask."}]}