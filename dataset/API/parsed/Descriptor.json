{"name": "Interface Descriptor", "module": "java.management", "package": "javax.management", "text": "Additional metadata for a JMX element.  A Descriptor\n is associated with a MBeanInfo, MBeanAttributeInfo, etc.\n It consists of a collection of fields.  A field is a name and an\n associated value.\nField names are not case-sensitive.  The names descriptorType,\n descriptortype, and DESCRIPTORTYPE are all equivalent.\n However, the case that was used when the field was first set is preserved\n in the result of the getFields() and getFieldNames()\n methods.\nNot all field names and values are predefined.\n New fields can be defined and added by any program.\nA descriptor can be mutable or immutable.\n An immutable descriptor, once created, never changes.\n The Descriptor methods that could modify the contents\n of the descriptor will throw an exception\n for an immutable descriptor.  Immutable descriptors are usually\n instances of ImmutableDescriptor or a subclass.  Mutable\n descriptors are usually instances of\n DescriptorSupport or a subclass.\n\n Certain fields are used by the JMX implementation.  This means\n either that the presence of the field may change the behavior of\n the JMX API or that the field may be set in descriptors returned by\n the JMX API.  These fields appear in italics in the table\n below, and each one has a corresponding constant in the JMX\n class.  For example, the field defaultValue is represented\n by the constant JMX.DEFAULT_VALUE_FIELD.\nCertain other fields have conventional meanings described in the\n table below but they are not required to be understood or set by\n the JMX implementation.\nField names defined by the JMX specification in this and all\n future versions will never contain a period (.).  Users can safely\n create their own fields by including a period in the name and be\n sure that these names will not collide with any future version of\n the JMX API.  It is recommended to follow the Java package naming\n convention to avoid collisions between field names from different\n origins.  For example, a field created by example.com might\n have the name com.example.interestLevel.\nNote that the values in the defaultValue, \n legalValues, maxValue, and minValue fields should\n be consistent with the type returned by the getType()\n method for the associated MBeanAttributeInfo or \n MBeanParameterInfo.  For MXBeans, this means that they should be\n of the mapped Java type, called opendata(J) in the MXBean type mapping rules.\n\nDescriptor Fields\n\nName\nType\nUsed in\nMeaning\n\n\ndefaultValueObject\nMBeanAttributeInfoMBeanParameterInfo\nDefault value for an attribute or parameter.  See\n javax.management.openmbean.\ndeprecatedStringAny\nAn indication that this element of the information model is no\n longer recommended for use.  A set of MBeans defined by an\n application is collectively called an information model.\n The convention is for the value of this field to contain a string\n that is the version of the model in which the element was first\n deprecated, followed by a space, followed by an explanation of the\n deprecation, for example \"1.3 Replaced by the Capacity\n attribute\".\ndescriptionResource\n BundleBaseNameStringAny\nThe base name for the ResourceBundle in which the key given in\n the descriptionResourceKey field can be found, for example\n \"com.example.myapp.MBeanResources\".  The meaning of this\n field is defined by this specification but the field is not set or\n used by the JMX API itself.\ndescriptionResourceKey\nStringAny\nA resource key for the description of this element.  In\n conjunction with the descriptionResourceBundleBaseName,\n this can be used to find a localized version of the description.\n The meaning of this field is defined by this specification but the\n field is not set or used by the JMX API itself.\nenabledString\nMBeanAttributeInfoMBeanNotificationInfoMBeanOperationInfo\nThe string \"true\" or \"false\" according as this\n item is enabled.  When an attribute or operation is not enabled, it\n exists but cannot currently be accessed.  A user interface might\n present it as a greyed-out item.  For example, an attribute might\n only be meaningful after the start() method of an MBean has\n been called, and is otherwise disabled.  Likewise, a notification\n might be disabled if it cannot currently be emitted but could be in\n other circumstances.\nexceptionsString[]\nMBeanAttributeInfo, MBeanConstructorInfo, MBeanOperationInfo\nThe class names of the exceptions that can be thrown when invoking a\n constructor or operation, or getting an attribute. The meaning of this field\n is defined by this specification but the field is not set or used by the\n JMX API itself. Exceptions thrown when\n setting an attribute are specified by the field\n setExceptions.\n\n immutableInfoString\nMBeanInfo\nThe string \"true\" or \"false\" according as this\n MBean's MBeanInfo is immutable.  When this field is true,\n the MBeanInfo for the given MBean is guaranteed not to change over\n the lifetime of the MBean.  Hence, a client can read it once and\n cache the read value.  When this field is false or absent, there is\n no such guarantee, although that does not mean that the MBeanInfo\n will necessarily change.  See also the \"jmx.mbean.info.changed\"\n notification.\ninfoTimeoutStringLongMBeanInfo\nThe time in milli-seconds that the MBeanInfo can reasonably be\n expected to be unchanged.  The value can be a Long or a\n decimal string.  This provides a hint from a DynamicMBean or any\n MBean that does not define immutableInfo as true\n that the MBeanInfo is not likely to change within this period and\n therefore can be cached.  When this field is missing or has the\n value zero, it is not recommended to cache the MBeanInfo unless it\n has the immutableInfo set to true or it has \"jmx.mbean.info.changed\" in\n its MBeanNotificationInfo array.\ninterfaceClassName\nStringMBeanInfo\nThe Java interface name for a Standard MBean or MXBean, as\n returned by Class.getName().  A Standard MBean or MXBean\n registered directly in the MBean Server or created using the StandardMBean class will have this field in its MBeanInfo\n Descriptor.\nlegalValues\nSet<?>MBeanAttributeInfoMBeanParameterInfo\nLegal values for an attribute or parameter.  See\n javax.management.openmbean.\nlocale\nStringAny\nThe locale of the description in this\n MBeanInfo, MBeanAttributeInfo, etc, as returned\n by Locale.toString().\nmaxValueObject\nMBeanAttributeInfoMBeanParameterInfo\nMaximum legal value for an attribute or parameter.  See\n javax.management.openmbean.\nmetricTypeString\nMBeanAttributeInfoMBeanOperationInfo\nThe type of a metric, one of the strings \"counter\" or \"gauge\".\n A metric is a measurement exported by an MBean, usually an\n attribute but sometimes the result of an operation.  A metric that\n is a counter has a value that never decreases except by\n being reset to a starting value.  Counter metrics are almost always\n non-negative integers.  An example might be the number of requests\n received.  A metric that is a gauge has a numeric value\n that can increase or decrease.  Examples might be the number of\n open connections or a cache hit rate or a temperature reading.\n\n minValueObject\nMBeanAttributeInfoMBeanParameterInfo\nMinimum legal value for an attribute or parameter.  See\n javax.management.openmbean.\nmxbeanString\nMBeanInfo\nThe string \"true\" or \"false\" according as this\n MBean is an MXBean.  A Standard MBean or MXBean registered\n directly with the MBean Server or created using the StandardMBean class will have this field in its MBeanInfo\n Descriptor.\nopenTypeOpenType\nMBeanAttributeInfoMBeanOperationInfoMBeanParameterInfo\nThe Open Type of this element.  In the case of \n MBeanAttributeInfo and MBeanParameterInfo, this is the\n Open Type of the attribute or parameter.  In the case of \n MBeanOperationInfo, it is the Open Type of the return value.  This\n field is set in the Descriptor for all instances of OpenMBeanAttributeInfoSupport, OpenMBeanOperationInfoSupport, and OpenMBeanParameterInfoSupport.  It is also set for attributes,\n operations, and parameters of MXBeans.\nThis field can be set for an MBeanNotificationInfo, in\n which case it indicates the Open Type that the user data will have.\noriginalTypeString\nMBeanAttributeInfoMBeanOperationInfoMBeanParameterInfo\nThe original Java type of this element as it appeared in the\n MXBean interface method that produced this \n MBeanAttributeInfo (etc).  For example, a method public\n  MemoryUsage getHeapMemoryUsage();\n in an MXBean interface defines an attribute called \n HeapMemoryUsage of type CompositeData.  The \n originalType field in the Descriptor for this attribute will have\n the value \"java.lang.management.MemoryUsage\".\n\n The format of this string is described in the section Type Names of the MXBean\n specification.\nsetExceptionsString[]\nMBeanAttributeInfo\nThe class names of the exceptions that can be thrown when setting\n an attribute. The meaning of this field\n is defined by this specification but the field is not set or used by the\n JMX API itself.  Exceptions thrown when getting an attribute are specified\n by the field exceptions.\n\n severityStringInteger\nMBeanNotificationInfo\nThe severity of this notification.  It can be 0 to mean\n unknown severity or a value from 1 to 6 representing decreasing\n levels of severity.  It can be represented as a decimal string or\n an Integer.\nsinceStringAny\nThe version of the information model in which this element\n was introduced.  A set of MBeans defined by an application is\n collectively called an information model.  The\n application may also define versions of this model, and use the\n \"since\" field to record the version in which an element\n first appeared.\nunitsString\nMBeanAttributeInfoMBeanParameterInfoMBeanOperationInfo\nThe units in which an attribute, parameter, or operation return\n value is measured, for example \"bytes\" or \n \"seconds\".\n\n\nSome additional fields are defined by Model MBeans.  See the\n information for ModelMBeanInfo,\n ModelMBeanAttributeInfo,\n ModelMBeanConstructorInfo,\n ModelMBeanNotificationInfo, and\n ModelMBeanOperationInfo, as\n well as the chapter \"Model MBeans\" of the JMX\n Specification.  The following table summarizes these fields.  Note\n that when the Type in this table is Number, a String that is the decimal\n representation of a Long can also be used.\nNothing prevents the use of these fields in MBeans that are not Model\n MBeans.  The displayName, severity, and visibility fields are of\n interest outside Model MBeans, for example.  But only Model MBeans have\n a predefined behavior for these fields.\n\nModelMBean Fields\n\nName\nType\nUsed in\nMeaning\n\n\nclassStringModelMBeanOperationInfo\nClass where method is defined (fully qualified).\ncurrencyTimeLimitNumber\nModelMBeanInfoModelMBeanAttributeInfoModelMBeanOperationInfo\nHow long cached value is valid: <0 never, =0 always,\n         >0 seconds.\ndefaultObjectModelMBeanAttributeInfo\nDefault value for attribute.\ndescriptorTypeStringAny\nType of descriptor, \"mbean\", \"attribute\", \"constructor\", \"operation\",\n         or \"notification\".\ndisplayNameStringAny\nHuman readable name of this item.\nexportStringModelMBeanInfo\nName to be used to export/expose this MBean so that it is\n         findable by other JMX Agents.\ngetMethodStringModelMBeanAttributeInfo\nName of operation descriptor for get method.\nlastUpdatedTimeStampNumber\nModelMBeanAttributeInfoModelMBeanOperationInfo\nWhen value was set.\nlogStringModelMBeanInfoModelMBeanNotificationInfo\nt or T: log all notifications, f or F: log no notifications.\nlogFileStringModelMBeanInfoModelMBeanNotificationInfo\nFully qualified filename to log events to.\nmessageIDStringModelMBeanNotificationInfo\nUnique key for message text (to allow translation, analysis).\nmessageTextStringModelMBeanNotificationInfo\nText of notification.\nnameStringAny\nName of this item.\npersistFileStringModelMBeanInfo\nFile name into which the MBean should be persisted.\npersistLocationStringModelMBeanInfo\nThe fully qualified directory name where the MBean should be\n         persisted (if appropriate).\npersistPeriodNumber\nModelMBeanInfoModelMBeanAttributeInfo\nFrequency of persist cycle in seconds. Used when persistPolicy is\n         \"OnTimer\" or \"NoMoreOftenThan\".\npersistPolicyString\nModelMBeanInfoModelMBeanAttributeInfo\nOne of: OnUpdate|OnTimer|NoMoreOftenThan|OnUnregister|Always|Never.\n         See the section \"MBean Descriptor Fields\" in the JMX specification\n         document.\npresentationStringStringAny\nXML formatted string to allow presentation of data.\nprotocolMapDescriptorModelMBeanAttributeInfo\nSee the section \"Protocol Map Support\" in the JMX specification\n         document.  Mappings must be appropriate for the attribute and entries\n         can be updated or augmented at runtime.\nroleString\nModelMBeanConstructorInfoModelMBeanOperationInfo\nOne of \"constructor\", \"operation\", \"getter\", or \"setter\".\nsetMethodStringModelMBeanAttributeInfo\nName of operation descriptor for set method.\nseverityNumber\nModelMBeanNotificationInfo\n0-6 where 0: unknown; 1: non-recoverable;\n         2: critical, failure; 3: major, severe;\n         4: minor, marginal, error; 5: warning;\n         6: normal, cleared, informative\ntargetObjectObjectModelMBeanOperationInfo\nObject on which to execute this method.\ntargetTypeStringModelMBeanOperationInfo\ntype of object reference for targetObject. Can be:\n         ObjectReference | Handle | EJBHandle | IOR | RMIReference.\nvalueObject\nModelMBeanAttributeInfoModelMBeanOperationInfo\nCurrent (cached) value for attribute or operation.\nvisibilityNumberAny\n1-4 where 1: always visible, 4: rarely visible.\n\n", "codes": ["public interface Descriptor\nextends Serializable, Cloneable"], "fields": [], "methods": [{"method_name": "getFieldValue", "method_sig": "Object getFieldValue (String fieldName)\n              throws RuntimeOperationsException", "description": "Returns the value for a specific field name, or null if no value\n is present for that name."}, {"method_name": "setField", "method_sig": "void setField (String fieldName,\n              Object fieldValue)\n       throws RuntimeOperationsException", "description": "Sets the value for a specific field name. This will\n modify an existing field or add a new field.\nThe field value will be validated before it is set.\n If it is not valid, then an exception will be thrown.\n The meaning of validity is dependent on the descriptor\n implementation."}, {"method_name": "getFields", "method_sig": "String[] getFields()", "description": "Returns all of the fields contained in this descriptor as a string array."}, {"method_name": "getFieldNames", "method_sig": "String[] getFieldNames()", "description": "Returns all the field names in the descriptor."}, {"method_name": "getFieldValues", "method_sig": "Object[] getFieldValues (String... fieldNames)", "description": "Returns all the field values in the descriptor as an array of Objects. The\n returned values are in the same order as the fieldNames String array parameter."}, {"method_name": "removeField", "method_sig": "void removeField (String fieldName)", "description": "Removes a field from the descriptor."}, {"method_name": "setFields", "method_sig": "void setFields (String[] fieldNames,\n               Object[] fieldValues)\n        throws RuntimeOperationsException", "description": "Sets all fields in the field names array to the new value with\n the same index in the field values array. Array sizes must match.\nThe field value will be validated before it is set.\n If it is not valid, then an exception will be thrown.\n If the arrays are empty, then no change will take effect."}, {"method_name": "clone", "method_sig": "Object clone()\n      throws RuntimeOperationsException", "description": "Returns a descriptor which is equal to this descriptor.\n Changes to the returned descriptor will have no effect on this\n descriptor, and vice versa.  If this descriptor is immutable,\n it may fulfill this condition by returning itself."}, {"method_name": "isValid", "method_sig": "boolean isValid()\n         throws RuntimeOperationsException", "description": "Returns true if all of the fields have legal values given their\n names."}, {"method_name": "equals", "method_sig": "boolean equals (Object obj)", "description": "Compares this descriptor to the given object.  The objects are equal if\n the given object is also a Descriptor, and if the two Descriptors have\n the same field names (possibly differing in case) and the same\n associated values.  The respective values for a field in the two\n Descriptors are equal if the following conditions hold:\n\nIf one value is null then the other must be too.\nIf one value is a primitive array then the other must be a primitive\n array of the same type with the same elements.\nIf one value is an object array then the other must be too and\n Arrays.deepEquals(Object[],Object[]) must return true.\nOtherwise Object.equals(Object) must return true.\n"}, {"method_name": "hashCode", "method_sig": "int hashCode()", "description": "Returns the hash code value for this descriptor.  The hash\n code is computed as the sum of the hash codes for each field in\n the descriptor.  The hash code of a field with name n\n and value v is n.toLowerCase().hashCode() ^ h.\n Here h is the hash code of v, computed as\n follows:\n\nIf v is null then h is 0.\nIf v is a primitive array then h is computed using\n the appropriate overloading of java.util.Arrays.hashCode.\nIf v is an object array then h is computed using\n Arrays.deepHashCode(Object[]).\nOtherwise h is v.hashCode().\n"}]}