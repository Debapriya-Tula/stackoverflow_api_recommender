{"name": "Class Short", "module": "java.base", "package": "java.lang", "text": "The Short class wraps a value of primitive type \n short in an object.  An object of type Short contains a\n single field whose type is short.\n\n In addition, this class provides several methods for converting\n a short to a String and a String to a\n short, as well as other constants and methods useful when\n dealing with a short.", "codes": ["public final class Short\nextends Number\nimplements Comparable<Short>"], "fields": [{"field_name": "MIN_VALUE", "field_sig": "public static final\u00a0short MIN_VALUE", "description": "A constant holding the minimum value a short can\n have, -215."}, {"field_name": "MAX_VALUE", "field_sig": "public static final\u00a0short MAX_VALUE", "description": "A constant holding the maximum value a short can\n have, 215-1."}, {"field_name": "TYPE", "field_sig": "public static final\u00a0Class<Short> TYPE", "description": "The Class instance representing the primitive type\n short."}, {"field_name": "SIZE", "field_sig": "public static final\u00a0int SIZE", "description": "The number of bits used to represent a short value in two's\n complement binary form."}, {"field_name": "BYTES", "field_sig": "public static final\u00a0int BYTES", "description": "The number of bytes used to represent a short value in two's\n complement binary form."}], "methods": [{"method_name": "toString", "method_sig": "public static String toString (short s)", "description": "Returns a new String object representing the\n specified short. The radix is assumed to be 10."}, {"method_name": "parseShort", "method_sig": "public static short parseShort (String s,\n                               int radix)\n                        throws NumberFormatException", "description": "Parses the string argument as a signed short in the\n radix specified by the second argument. The characters in the\n string must all be digits, of the specified radix (as\n determined by whether Character.digit(char,\n int) returns a nonnegative value) except that the first\n character may be an ASCII minus sign '-'\n ('\\u002D') to indicate a negative value or an\n ASCII plus sign '+' ('\\u002B') to\n indicate a positive value.  The resulting short value\n is returned.\n\n An exception of type NumberFormatException is\n thrown if any of the following situations occurs:\n \n The first argument is null or is a string of\n length zero.\n\n  The radix is either smaller than Character.MIN_RADIX or larger than Character.MAX_RADIX.\n\n  Any character of the string is not a digit of the\n specified radix, except that the first character may be a minus\n sign '-' ('\\u002D') or plus sign\n '+' ('\\u002B') provided that the\n string is longer than length 1.\n\n  The value represented by the string is not a value of type\n short.\n "}, {"method_name": "parseShort", "method_sig": "public static short parseShort (String s)\n                        throws NumberFormatException", "description": "Parses the string argument as a signed decimal \n short. The characters in the string must all be decimal\n digits, except that the first character may be an ASCII minus\n sign '-' ('\\u002D') to indicate a\n negative value or an ASCII plus sign '+'\n ('\\u002B') to indicate a positive value.  The\n resulting short value is returned, exactly as if the\n argument and the radix 10 were given as arguments to the parseShort(java.lang.String, int) method."}, {"method_name": "valueOf", "method_sig": "public static Short valueOf (String s,\n                            int radix)\n                     throws NumberFormatException", "description": "Returns a Short object holding the value\n extracted from the specified String when parsed\n with the radix given by the second argument. The first argument\n is interpreted as representing a signed short in\n the radix specified by the second argument, exactly as if the\n argument were given to the parseShort(java.lang.String,\n int) method. The result is a Short object that\n represents the short value specified by the string.\n\n In other words, this method returns a Short object\n equal to the value of:\n\n \nnew Short(Short.parseShort(s, radix))\n"}, {"method_name": "valueOf", "method_sig": "public static Short valueOf (String s)\n                     throws NumberFormatException", "description": "Returns a Short object holding the\n value given by the specified String. The argument\n is interpreted as representing a signed decimal\n short, exactly as if the argument were given to\n the parseShort(java.lang.String) method. The result is\n a Short object that represents the\n short value specified by the string.\n\n In other words, this method returns a Short object\n equal to the value of:\n\n \nnew Short(Short.parseShort(s))\n"}, {"method_name": "valueOf", "method_sig": "public static Short valueOf (short s)", "description": "Returns a Short instance representing the specified\n short value.\n If a new Short instance is not required, this method\n should generally be used in preference to the constructor\n Short(short), as this method is likely to yield\n significantly better space and time performance by caching\n frequently requested values.\n\n This method will always cache values in the range -128 to 127,\n inclusive, and may cache other values outside of this range."}, {"method_name": "decode", "method_sig": "public static Short decode (String nm)\n                    throws NumberFormatException", "description": "Decodes a String into a Short.\n Accepts decimal, hexadecimal, and octal numbers given by\n the following grammar:\n\n \n\nDecodableString:\nSignopt DecimalNumeral\nSignopt 0x HexDigits\nSignopt 0X HexDigits\nSignopt # HexDigits\nSignopt 0 OctalDigits\nSign:\n-\n+\n\n\nDecimalNumeral, HexDigits, and OctalDigits\n are as defined in section 3.10.1 of\n The Java\u2122 Language Specification,\n except that underscores are not accepted between digits.\n\n The sequence of characters following an optional\n sign and/or radix specifier (\"0x\", \"0X\",\n \"#\", or leading zero) is parsed as by the \n Short.parseShort method with the indicated radix (10, 16, or\n 8).  This sequence of characters must represent a positive\n value or a NumberFormatException will be thrown.  The\n result is negated if first character of the specified \n String is the minus sign.  No whitespace characters are\n permitted in the String."}, {"method_name": "byteValue", "method_sig": "public byte byteValue()", "description": "Returns the value of this Short as a byte after\n a narrowing primitive conversion."}, {"method_name": "shortValue", "method_sig": "public short shortValue()", "description": "Returns the value of this Short as a\n short."}, {"method_name": "intValue", "method_sig": "public int intValue()", "description": "Returns the value of this Short as an int after\n a widening primitive conversion."}, {"method_name": "longValue", "method_sig": "public long longValue()", "description": "Returns the value of this Short as a long after\n a widening primitive conversion."}, {"method_name": "floatValue", "method_sig": "public float floatValue()", "description": "Returns the value of this Short as a float\n after a widening primitive conversion."}, {"method_name": "doubleValue", "method_sig": "public double doubleValue()", "description": "Returns the value of this Short as a double\n after a widening primitive conversion."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a String object representing this\n Short's value.  The value is converted to signed\n decimal representation and returned as a string, exactly as if\n the short value were given as an argument to the\n toString(short) method."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Returns a hash code for this Short; equal to the result\n of invoking intValue()."}, {"method_name": "hashCode", "method_sig": "public static int hashCode (short value)", "description": "Returns a hash code for a short value; compatible with\n Short.hashCode()."}, {"method_name": "equals", "method_sig": "public boolean equals (Object obj)", "description": "Compares this object to the specified object.  The result is\n true if and only if the argument is not\n null and is a Short object that\n contains the same short value as this object."}, {"method_name": "compareTo", "method_sig": "public int compareTo (Short anotherShort)", "description": "Compares two Short objects numerically."}, {"method_name": "compare", "method_sig": "public static int compare (short x,\n                          short y)", "description": "Compares two short values numerically.\n The value returned is identical to what would be returned by:\n \n    Short.valueOf(x).compareTo(Short.valueOf(y))\n "}, {"method_name": "compareUnsigned", "method_sig": "public static int compareUnsigned (short x,\n                                  short y)", "description": "Compares two short values numerically treating the values\n as unsigned."}, {"method_name": "reverseBytes", "method_sig": "public static short reverseBytes (short i)", "description": "Returns the value obtained by reversing the order of the bytes in the\n two's complement representation of the specified short value."}, {"method_name": "toUnsignedInt", "method_sig": "public static int toUnsignedInt (short x)", "description": "Converts the argument to an int by an unsigned\n conversion.  In an unsigned conversion to an int, the\n high-order 16 bits of the int are zero and the\n low-order 16 bits are equal to the bits of the short argument.\n\n Consequently, zero and positive short values are mapped\n to a numerically equal int value and negative \n short values are mapped to an int value equal to the\n input plus 216."}, {"method_name": "toUnsignedLong", "method_sig": "public static long toUnsignedLong (short x)", "description": "Converts the argument to a long by an unsigned\n conversion.  In an unsigned conversion to a long, the\n high-order 48 bits of the long are zero and the\n low-order 16 bits are equal to the bits of the short argument.\n\n Consequently, zero and positive short values are mapped\n to a numerically equal long value and negative \n short values are mapped to a long value equal to the\n input plus 216."}]}