{"name": "Interface CancelablePrintJob", "module": "java.desktop", "package": "javax.print", "text": "This interface is used by a printing application to cancel a print job. This\n interface extends DocPrintJob. A DocPrintJob implementation\n returned from a print service implements this interface if the print job can\n be cancelled. Before trying to cancel a print job, the client needs to test\n if the DocPrintJob object returned from the print service actually\n implements this interface. Clients should never assume that a\n DocPrintJob implements this interface. A print service might support\n cancellation only for certain types of print data and representation class\n names. This means that only some of the DocPrintJob objects returned\n from a service will implement this interface.\n \n Service implementors are encouraged to implement this optional interface and\n to deliver a PrintJobEvent.JOB_CANCELED event to\n any listeners if a job is successfully cancelled with an implementation of\n this interface. Services should also note that an implementation of this\n method may be made from a separate client thread than that which made the\n print request. Thus the implementation of this interface must be made thread\n safe.", "codes": ["public interface CancelablePrintJob\nextends DocPrintJob"], "fields": [], "methods": [{"method_name": "cancel", "method_sig": "void cancel()\n     throws PrintException", "description": "Stops further processing of a print job.\n \n If a service supports this method it cannot be concluded that job\n cancellation will always succeed. A job may not be able to be cancelled\n once it has reached and passed some point in its processing. A successful\n cancellation means only that the entire job was not printed, some portion\n may already have printed when cancel returns.\n \n The service will throw a PrintException if the cancellation did\n not succeed. A job which has not yet been submitted for printing should\n throw this exception. Cancelling an already successfully cancelled Print\n Job is not considered an error and will always succeed.\n \n Cancellation in some services may be a lengthy process, involving\n requests to a server and processing of its print queue. Clients may wish\n to execute cancel in a thread which does not affect application\n execution."}]}