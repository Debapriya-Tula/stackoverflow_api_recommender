{"name": "Class JTextComponent", "module": "java.desktop", "package": "javax.swing.text", "text": "JTextComponent is the base class for swing text\n components.  It tries to be compatible with the\n java.awt.TextComponent class\n where it can reasonably do so.  Also provided are other services\n for additional flexibility (beyond the pluggable UI and bean\n support).\n You can find information on how to use the functionality\n this class provides in\n General Rules for Using Text Components,\n a section in The Java Tutorial.\n\nCaret Changes\n\n The caret is a pluggable object in swing text components.\n Notification of changes to the caret position and the selection\n are sent to implementations of the CaretListener\n interface that have been registered with the text component.\n The UI will install a default caret unless a customized caret\n has been set. \n By default the caret tracks all the document changes\n performed on the Event Dispatching Thread and updates it's position\n accordingly if an insertion occurs before or at the caret position\n or a removal occurs before the caret position. DefaultCaret\n tries to make itself visible which may lead to scrolling\n of a text component within JScrollPane. The default caret\n behavior can be changed by the DefaultCaret.setUpdatePolicy(int) method.\n \nNote: Non-editable text components also have a caret though\n it may not be painted.\n\n Commands\n\n Text components provide a number of commands that can be used\n to manipulate the component.  This is essentially the way that\n the component expresses its capabilities.  These are expressed\n in terms of the swing Action interface,\n using the TextAction implementation.\n The set of commands supported by the text component can be\n found with the getActions() method.  These actions\n can be bound to key events, fired from buttons, etc.\n\n Text Input\n\n The text components support flexible and internationalized text input, using\n keymaps and the input method framework, while maintaining compatibility with\n the AWT listener model.\n \n A Keymap lets an application bind key\n strokes to actions.\n In order to allow keymaps to be shared across multiple text components, they\n can use actions that extend TextAction.\n TextAction can determine which JTextComponent\n most recently has or had focus and therefore is the subject of\n the action (In the case that the ActionEvent\n sent to the action doesn't contain the target text component as its source).\n \n The Input Method Framework\n lets text components interact with input methods, separate software\n components that preprocess events to let users enter thousands of\n different characters using keyboards with far fewer keys.\n JTextComponent is an active client of\n the framework, so it implements the preferred user interface for interacting\n with input methods. As a consequence, some key events do not reach the text\n component because they are handled by an input method, and some text input\n reaches the text component as committed text within an InputMethodEvent instead of as a key event.\n The complete text input is the combination of the characters in\n keyTyped key events and committed text in input method events.\n \n The AWT listener model lets applications attach event listeners to\n components in order to bind events to actions. Swing encourages the\n use of keymaps instead of listeners, but maintains compatibility\n with listeners by giving the listeners a chance to steal an event\n by consuming it.\n \n Keyboard event and input method events are handled in the following stages,\n with each stage capable of consuming the event:\n\n \nStages of keyboard and input method event handling\n\n\nStage\n     KeyEvent\n     InputMethodEvent\n \n\n\n1.\n     input methods\n     (generated here)\n   \n2.\n     focus manager\n     \n\n\n3.\n     registered key listeners\n     registered input method listeners\n   \n4.\n     \ninput method handling in JTextComponent\n   \n5.\n     keymap handling using the current keymap\n   \n6.\n     keyboard handling in JComponent (e.g. accelerators, component\n     navigation, etc.)\n     \n\n\n\n To maintain compatibility with applications that listen to key\n events but are not aware of input method events, the input\n method handling in stage 4 provides a compatibility mode for\n components that do not process input method events. For these\n components, the committed text is converted to keyTyped key events\n and processed in the key event pipeline starting at stage 3\n instead of in the input method event pipeline.\n \n By default the component will create a keymap (named DEFAULT_KEYMAP)\n that is shared by all JTextComponent instances as the default keymap.\n Typically a look-and-feel implementation will install a different keymap\n that resolves to the default keymap for those bindings not found in the\n different keymap. The minimal bindings include:\n \ninserting content into the editor for the\n  printable keys.\n removing content with the backspace and del\n  keys.\n caret movement forward and backward\n \nModel/View Split\n\n The text components have a model-view split.  A text component pulls\n together the objects used to represent the model, view, and controller.\n The text document model may be shared by other views which act as observers\n of the model (e.g. a document may be shared by multiple components).\n\n \n\n The model is defined by the Document interface.\n This is intended to provide a flexible text storage mechanism\n that tracks change during edits and can be extended to more sophisticated\n models.  The model interfaces are meant to capture the capabilities of\n expression given by SGML, a system used to express a wide variety of\n content.\n Each modification to the document causes notification of the\n details of the change to be sent to all observers in the form of a\n DocumentEvent which allows the views to stay up to date with the model.\n This event is sent to observers that have implemented the\n DocumentListener\n interface and registered interest with the model being observed.\n\n Location Information\n\n The capability of determining the location of text in\n the view is provided.  There are two methods, modelToView(int)\n and viewToModel(java.awt.Point) for determining this information.\n\n Undo/Redo support\n\n Support for an edit history mechanism is provided to allow\n undo/redo operations.  The text component does not itself\n provide the history buffer by default, but does provide\n the UndoableEdit records that can be used in conjunction\n with a history buffer to provide the undo/redo support.\n The support is provided by the Document model, which allows\n one to attach UndoableEditListener implementations.\n\n Thread Safety\n\n The swing text components provide some support of thread\n safe operations.  Because of the high level of configurability\n of the text components, it is possible to circumvent the\n protection provided.  The protection primarily comes from\n the model, so the documentation of AbstractDocument\n describes the assumptions of the protection provided.\n The methods that are safe to call asynchronously are marked\n with comments.\n\n Newlines\n\n For a discussion on how newlines are handled, see\n DefaultEditorKit.\n\n\n Printing support\n\n Several print methods are provided for basic\n document printing.  If more advanced printing is needed, use the\n getPrintable(java.text.MessageFormat, java.text.MessageFormat) method.\n \n\nWarning:\n Serialized objects of this class will not be compatible with\n future Swing releases. The current serialization support is\n appropriate for short term storage or RMI between applications running\n the same version of Swing.  As of 1.4, support for long term storage\n of all JavaBeans\u2122\n has been added to the java.beans package.\n Please see XMLEncoder.", "codes": ["@JavaBean(defaultProperty=\"UI\")\npublic abstract class JTextComponent\nextends JComponent\nimplements Scrollable, Accessible"], "fields": [{"field_name": "FOCUS_ACCELERATOR_KEY", "field_sig": "public static final\u00a0String FOCUS_ACCELERATOR_KEY", "description": "The bound property name for the focus accelerator."}, {"field_name": "DEFAULT_KEYMAP", "field_sig": "public static final\u00a0String DEFAULT_KEYMAP", "description": "The default keymap that will be shared by all\n JTextComponent instances unless they\n have had a different keymap set."}], "methods": [{"method_name": "getUI", "method_sig": "public TextUI getUI()", "description": "Fetches the user-interface factory for this text-oriented editor."}, {"method_name": "setUI", "method_sig": "public void setUI (TextUI ui)", "description": "Sets the user-interface factory for this text-oriented editor."}, {"method_name": "updateUI", "method_sig": "public void updateUI()", "description": "Reloads the pluggable UI.  The key used to fetch the\n new interface is getUIClassID().  The type of\n the UI is TextUI.  invalidate\n is called after setting the UI."}, {"method_name": "addCaretListener", "method_sig": "public void addCaretListener (CaretListener listener)", "description": "Adds a caret listener for notification of any changes\n to the caret."}, {"method_name": "removeCaretListener", "method_sig": "public void removeCaretListener (CaretListener listener)", "description": "Removes a caret listener."}, {"method_name": "getCaretListeners", "method_sig": "@BeanProperty(bound=false)\npublic CaretListener[] getCaretListeners()", "description": "Returns an array of all the caret listeners\n registered on this text component."}, {"method_name": "fireCaretUpdate", "method_sig": "protected void fireCaretUpdate (CaretEvent e)", "description": "Notifies all listeners that have registered interest for\n notification on this event type.  The event instance\n is lazily created using the parameters passed into\n the fire method.  The listener list is processed in a\n last-to-first manner."}, {"method_name": "setDocument", "method_sig": "@BeanProperty(expert=true,\n              description=\"the text document model\")\npublic void setDocument (Document doc)", "description": "Associates the editor with a text document.\n The currently registered factory is used to build a view for\n the document, which gets displayed by the editor after revalidation.\n A PropertyChange event (\"document\") is propagated to each listener."}, {"method_name": "getDocument", "method_sig": "public Document getDocument()", "description": "Fetches the model associated with the editor.  This is\n primarily for the UI to get at the minimal amount of\n state required to be a text editor.  Subclasses will\n return the actual type of the model which will typically\n be something that extends Document."}, {"method_name": "getActions", "method_sig": "@BeanProperty(bound=false)\npublic Action[] getActions()", "description": "Fetches the command list for the editor.  This is\n the list of commands supported by the plugged-in UI\n augmented by the collection of commands that the\n editor itself supports.  These are useful for binding\n to events, such as in a keymap."}, {"method_name": "setMargin", "method_sig": "@BeanProperty(description=\"desired space between the border and text area\")\npublic void setMargin (Insets m)", "description": "Sets margin space between the text component's border\n and its text.  The text component's default Border\n object will use this value to create the proper margin.\n However, if a non-default border is set on the text component,\n it is that Border object's responsibility to create the\n appropriate margin space (else this property will effectively\n be ignored).  This causes a redraw of the component.\n A PropertyChange event (\"margin\") is sent to all listeners."}, {"method_name": "getMargin", "method_sig": "public Insets getMargin()", "description": "Returns the margin between the text component's border and\n its text."}, {"method_name": "setNavigationFilter", "method_sig": "public void setNavigationFilter (NavigationFilter filter)", "description": "Sets the NavigationFilter. NavigationFilter\n is used by DefaultCaret and the default cursor movement\n actions as a way to restrict the cursor movement."}, {"method_name": "getNavigationFilter", "method_sig": "public NavigationFilter getNavigationFilter()", "description": "Returns the NavigationFilter. NavigationFilter\n is used by DefaultCaret and the default cursor movement\n actions as a way to restrict the cursor movement. A null return value\n implies the cursor movement and selection should not be restricted."}, {"method_name": "getCaret", "method_sig": "public Caret getCaret()", "description": "Fetches the caret that allows text-oriented navigation over\n the view."}, {"method_name": "setCaret", "method_sig": "@BeanProperty(expert=true,\n              description=\"the caret used to select/navigate\")\npublic void setCaret (Caret c)", "description": "Sets the caret to be used.  By default this will be set\n by the UI that gets installed.  This can be changed to\n a custom caret if desired.  Setting the caret results in a\n PropertyChange event (\"caret\") being fired."}, {"method_name": "getHighlighter", "method_sig": "public Highlighter getHighlighter()", "description": "Fetches the object responsible for making highlights."}, {"method_name": "setHighlighter", "method_sig": "@BeanProperty(expert=true,\n              description=\"object responsible for background highlights\")\npublic void setHighlighter (Highlighter h)", "description": "Sets the highlighter to be used.  By default this will be set\n by the UI that gets installed.  This can be changed to\n a custom highlighter if desired.  The highlighter can be set to\n null to disable it.\n A PropertyChange event (\"highlighter\") is fired\n when a new highlighter is installed."}, {"method_name": "setKeymap", "method_sig": "@BeanProperty(description=\"set of key event to action bindings to use\")\npublic void setKeymap (Keymap map)", "description": "Sets the keymap to use for binding events to\n actions.  Setting to null effectively disables\n keyboard input.\n A PropertyChange event (\"keymap\") is fired when a new keymap\n is installed."}, {"method_name": "setDragEnabled", "method_sig": "@BeanProperty(bound=false,\n              description=\"determines whether automatic drag handling is enabled\")\npublic void setDragEnabled (boolean b)", "description": "Turns on or off automatic drag handling. In order to enable automatic\n drag handling, this property should be set to true, and the\n component's TransferHandler needs to be non-null.\n The default value of the dragEnabled property is false.\n \n The job of honoring this property, and recognizing a user drag gesture,\n lies with the look and feel implementation, and in particular, the component's\n TextUI. When automatic drag handling is enabled, most look and\n feels (including those that subclass BasicLookAndFeel) begin a\n drag and drop operation whenever the user presses the mouse button over\n a selection and then moves the mouse a few pixels. Setting this property to\n true can therefore have a subtle effect on how selections behave.\n \n If a look and feel is used that ignores this property, you can still\n begin a drag and drop operation by calling exportAsDrag on the\n component's TransferHandler."}, {"method_name": "getDragEnabled", "method_sig": "public boolean getDragEnabled()", "description": "Returns whether or not automatic drag handling is enabled."}, {"method_name": "setDropMode", "method_sig": "public final void setDropMode (DropMode dropMode)", "description": "Sets the drop mode for this component. For backward compatibility,\n the default for this property is DropMode.USE_SELECTION.\n Usage of DropMode.INSERT is recommended, however,\n for an improved user experience. It offers similar behavior of dropping\n between text locations, but does so without affecting the actual text\n selection and caret location.\n \nJTextComponents support the following drop modes:\n \nDropMode.USE_SELECTION\nDropMode.INSERT\n\n\n The drop mode is only meaningful if this component has a\n TransferHandler that accepts drops."}, {"method_name": "getDropMode", "method_sig": "public final DropMode getDropMode()", "description": "Returns the drop mode for this component."}, {"method_name": "getDropLocation", "method_sig": "@BeanProperty(bound=false)\npublic final JTextComponent.DropLocation getDropLocation()", "description": "Returns the location that this component should visually indicate\n as the drop location during a DnD operation over the component,\n or null if no location is to currently be shown.\n \n This method is not meant for querying the drop location\n from a TransferHandler, as the drop location is only\n set after the TransferHandler's canImport\n has returned and has allowed for the location to be shown.\n \n When this property changes, a property change event with\n name \"dropLocation\" is fired by the component."}, {"method_name": "getKeymap", "method_sig": "public Keymap getKeymap()", "description": "Fetches the keymap currently active in this text\n component."}, {"method_name": "addKeymap", "method_sig": "public static Keymap addKeymap (String nm,\n                               Keymap parent)", "description": "Adds a new keymap into the keymap hierarchy.  Keymap bindings\n resolve from bottom up so an attribute specified in a child\n will override an attribute specified in the parent."}, {"method_name": "removeKeymap", "method_sig": "public static Keymap removeKeymap (String nm)", "description": "Removes a named keymap previously added to the document.  Keymaps\n with null names may not be removed in this way."}, {"method_name": "getKeymap", "method_sig": "public static Keymap getKeymap (String nm)", "description": "Fetches a named keymap previously added to the document.\n This does not work with null-named keymaps."}, {"method_name": "loadKeymap", "method_sig": "public static void loadKeymap (Keymap map,\n                              JTextComponent.KeyBinding[] bindings,\n                              Action[] actions)", "description": "\n Loads a keymap with a bunch of\n bindings.  This can be used to take a static table of\n definitions and load them into some keymap.  The following\n example illustrates an example of binding some keys to\n the cut, copy, and paste actions associated with a\n JTextComponent.  A code fragment to accomplish\n this might look as follows:\n \n\n   static final JTextComponent.KeyBinding[] defaultBindings = {\n     new JTextComponent.KeyBinding(\n       KeyStroke.getKeyStroke(KeyEvent.VK_C, InputEvent.CTRL_MASK),\n       DefaultEditorKit.copyAction),\n     new JTextComponent.KeyBinding(\n       KeyStroke.getKeyStroke(KeyEvent.VK_V, InputEvent.CTRL_MASK),\n       DefaultEditorKit.pasteAction),\n     new JTextComponent.KeyBinding(\n       KeyStroke.getKeyStroke(KeyEvent.VK_X, InputEvent.CTRL_MASK),\n       DefaultEditorKit.cutAction),\n   };\n\n   JTextComponent c = new JTextPane();\n   Keymap k = c.getKeymap();\n   JTextComponent.loadKeymap(k, defaultBindings, c.getActions());\n\n \n The sets of bindings and actions may be empty but must be\n non-null."}, {"method_name": "getCaretColor", "method_sig": "public Color getCaretColor()", "description": "Fetches the current color used to render the\n caret."}, {"method_name": "setCaretColor", "method_sig": "@BeanProperty(preferred=true,\n              description=\"the color used to render the caret\")\npublic void setCaretColor (Color c)", "description": "Sets the current color used to render the caret.\n Setting to null effectively restores the default color.\n Setting the color results in a PropertyChange event (\"caretColor\")\n being fired."}, {"method_name": "getSelectionColor", "method_sig": "public Color getSelectionColor()", "description": "Fetches the current color used to render the\n selection."}, {"method_name": "setSelectionColor", "method_sig": "@BeanProperty(preferred=true,\n              description=\"color used to render selection background\")\npublic void setSelectionColor (Color c)", "description": "Sets the current color used to render the selection.\n Setting the color to null is the same as setting\n Color.white.  Setting the color results in a\n PropertyChange event (\"selectionColor\")."}, {"method_name": "getSelectedTextColor", "method_sig": "public Color getSelectedTextColor()", "description": "Fetches the current color used to render the\n selected text."}, {"method_name": "setSelectedTextColor", "method_sig": "@BeanProperty(preferred=true,\n              description=\"color used to render selected text\")\npublic void setSelectedTextColor (Color c)", "description": "Sets the current color used to render the selected text.\n Setting the color to null is the same as\n Color.black. Setting the color results in a\n PropertyChange event (\"selectedTextColor\") being fired."}, {"method_name": "getDisabledTextColor", "method_sig": "public Color getDisabledTextColor()", "description": "Fetches the current color used to render the\n disabled text."}, {"method_name": "setDisabledTextColor", "method_sig": "@BeanProperty(preferred=true,\n              description=\"color used to render disabled text\")\npublic void setDisabledTextColor (Color c)", "description": "Sets the current color used to render the\n disabled text.  Setting the color fires off a\n PropertyChange event (\"disabledTextColor\")."}, {"method_name": "replaceSelection", "method_sig": "public void replaceSelection (String content)", "description": "Replaces the currently selected content with new content\n represented by the given string.  If there is no selection\n this amounts to an insert of the given text.  If there\n is no replacement text this amounts to a removal of the\n current selection.\n \n This is the method that is used by the default implementation\n of the action for inserting content that gets bound to the\n keymap actions."}, {"method_name": "getText", "method_sig": "public String getText (int offs,\n                      int len)\n               throws BadLocationException", "description": "Fetches a portion of the text represented by the\n component.  Returns an empty string if length is 0."}, {"method_name": "modelToView", "method_sig": "@Deprecated(since=\"9\")\npublic Rectangle modelToView (int pos)\n                      throws BadLocationException", "description": "Converts the given location in the model to a place in\n the view coordinate system.\n The component must have a positive size for\n this translation to be computed (i.e. layout cannot\n be computed until the component has been sized).  The\n component does not have to be visible or painted."}, {"method_name": "modelToView2D", "method_sig": "public Rectangle2D modelToView2D (int pos)\n                          throws BadLocationException", "description": "Converts the given location in the model to a place in\n the view coordinate system.\n The component must have a positive size for\n this translation to be computed (i.e. layout cannot\n be computed until the component has been sized).  The\n component does not have to be visible or painted."}, {"method_name": "viewToModel", "method_sig": "@Deprecated(since=\"9\")\npublic int viewToModel (Point pt)", "description": "Converts the given place in the view coordinate system\n to the nearest representative location in the model.\n The component must have a positive size for\n this translation to be computed (i.e. layout cannot\n be computed until the component has been sized).  The\n component does not have to be visible or painted."}, {"method_name": "viewToModel2D", "method_sig": "public int viewToModel2D (Point2D pt)", "description": "Converts the given place in the view coordinate system\n to the nearest representative location in the model.\n The component must have a positive size for\n this translation to be computed (i.e. layout cannot\n be computed until the component has been sized).  The\n component does not have to be visible or painted."}, {"method_name": "cut", "method_sig": "public void cut()", "description": "Transfers the currently selected range in the associated\n text model to the system clipboard, removing the contents\n from the model.  The current selection is reset.  Does nothing\n for null selections."}, {"method_name": "copy", "method_sig": "public void copy()", "description": "Transfers the currently selected range in the associated\n text model to the system clipboard, leaving the contents\n in the text model.  The current selection remains intact.\n Does nothing for null selections."}, {"method_name": "paste", "method_sig": "public void paste()", "description": "Transfers the contents of the system clipboard into the\n associated text model.  If there is a selection in the\n associated view, it is replaced with the contents of the\n clipboard.  If there is no selection, the clipboard contents\n are inserted in front of the current insert position in\n the associated view.  If the clipboard is empty, does nothing."}, {"method_name": "moveCaretPosition", "method_sig": "public void moveCaretPosition (int pos)", "description": "Moves the caret to a new position, leaving behind a mark\n defined by the last time setCaretPosition was\n called.  This forms a selection.\n If the document is null, does nothing. The position\n must be between 0 and the length of the component's text or else\n an exception is thrown."}, {"method_name": "setFocusAccelerator", "method_sig": "@BeanProperty(description=\"accelerator character used to grab focus\")\npublic void setFocusAccelerator (char aKey)", "description": "Sets the key accelerator that will cause the receiving text\n component to get the focus.  The accelerator will be the\n key combination of the platform-specific modifier key and\n the character given (converted to upper case).  For example,\n the ALT key is used as a modifier on Windows and the CTRL+ALT\n combination is used on Mac.  By default, there is no focus\n accelerator key.  Any previous key accelerator setting will be\n superseded.  A '\\0' key setting will be registered, and has the\n effect of turning off the focus accelerator.  When the new key\n is set, a PropertyChange event (FOCUS_ACCELERATOR_KEY) will be fired."}, {"method_name": "getFocusAccelerator", "method_sig": "public char getFocusAccelerator()", "description": "Returns the key accelerator that will cause the receiving\n text component to get the focus.  Return '\\0' if no focus\n accelerator has been set."}, {"method_name": "read", "method_sig": "public void read (Reader in,\n                 Object desc)\n          throws IOException", "description": "Initializes from a stream.  This creates a\n model of the type appropriate for the component\n and initializes the model from the stream.\n By default this will load the model as plain\n text.  Previous contents of the model are discarded."}, {"method_name": "write", "method_sig": "public void write (Writer out)\n           throws IOException", "description": "Stores the contents of the model into the given\n stream.  By default this will store the model as plain\n text."}, {"method_name": "setCaretPosition", "method_sig": "@BeanProperty(bound=false,\n              description=\"the caret position\")\npublic void setCaretPosition (int position)", "description": "Sets the position of the text insertion caret for the\n TextComponent.  Note that the caret tracks change,\n so this may move if the underlying text of the component is changed.\n If the document is null, does nothing. The position\n must be between 0 and the length of the component's text or else\n an exception is thrown."}, {"method_name": "getCaretPosition", "method_sig": "public int getCaretPosition()", "description": "Returns the position of the text insertion caret for the\n text component."}, {"method_name": "setText", "method_sig": "@BeanProperty(bound=false,\n              description=\"the text of this component\")\npublic void setText (String t)", "description": "Sets the text of this TextComponent\n to the specified text.  If the text is null\n or empty, has the effect of simply deleting the old text.\n When text has been inserted, the resulting caret location\n is determined by the implementation of the caret class.\n\n \n Note that text is not a bound property, so no PropertyChangeEvent\n  is fired when it changes. To listen for changes to the text,\n use DocumentListener."}, {"method_name": "getText", "method_sig": "public String getText()", "description": "Returns the text contained in this TextComponent.\n If the underlying document is null,\n will give a NullPointerException.\n\n Note that text is not a bound property, so no PropertyChangeEvent\n  is fired when it changes. To listen for changes to the text,\n use DocumentListener."}, {"method_name": "getSelectedText", "method_sig": "@BeanProperty(bound=false)\npublic String getSelectedText()", "description": "Returns the selected text contained in this\n TextComponent.  If the selection is\n null or the document empty, returns null."}, {"method_name": "isEditable", "method_sig": "public boolean isEditable()", "description": "Returns the boolean indicating whether this\n TextComponent is editable or not."}, {"method_name": "setEditable", "method_sig": "@BeanProperty(description=\"specifies if the text can be edited\")\npublic void setEditable (boolean b)", "description": "Sets the specified boolean to indicate whether or not this\n TextComponent should be editable.\n A PropertyChange event (\"editable\") is fired when the\n state is changed."}, {"method_name": "getSelectionStart", "method_sig": "public int getSelectionStart()", "description": "Returns the selected text's start position.  Return 0 for an\n empty document, or the value of dot if no selection."}, {"method_name": "setSelectionStart", "method_sig": "@BeanProperty(bound=false,\n              description=\"starting location of the selection.\")\npublic void setSelectionStart (int selectionStart)", "description": "Sets the selection start to the specified position.  The new\n starting point is constrained to be before or at the current\n selection end.\n \n This is available for backward compatibility to code\n that called this method on java.awt.TextComponent.\n This is implemented to forward to the Caret\n implementation which is where the actual selection is maintained."}, {"method_name": "getSelectionEnd", "method_sig": "public int getSelectionEnd()", "description": "Returns the selected text's end position.  Return 0 if the document\n is empty, or the value of dot if there is no selection."}, {"method_name": "setSelectionEnd", "method_sig": "@BeanProperty(bound=false,\n              description=\"ending location of the selection.\")\npublic void setSelectionEnd (int selectionEnd)", "description": "Sets the selection end to the specified position.  The new\n end point is constrained to be at or after the current\n selection start.\n \n This is available for backward compatibility to code\n that called this method on java.awt.TextComponent.\n This is implemented to forward to the Caret\n implementation which is where the actual selection is maintained."}, {"method_name": "select", "method_sig": "public void select (int selectionStart,\n                   int selectionEnd)", "description": "Selects the text between the specified start and end positions.\n \n This method sets the start and end positions of the\n selected text, enforcing the restriction that the start position\n must be greater than or equal to zero.  The end position must be\n greater than or equal to the start position, and less than or\n equal to the length of the text component's text.\n \n If the caller supplies values that are inconsistent or out of\n bounds, the method enforces these constraints silently, and\n without failure. Specifically, if the start position or end\n position is greater than the length of the text, it is reset to\n equal the text length. If the start position is less than zero,\n it is reset to zero, and if the end position is less than the\n start position, it is reset to the start position.\n \n This call is provided for backward compatibility.\n It is routed to a call to setCaretPosition\n followed by a call to moveCaretPosition.\n The preferred way to manage selection is by calling\n those methods directly."}, {"method_name": "selectAll", "method_sig": "public void selectAll()", "description": "Selects all the text in the TextComponent.\n Does nothing on a null or empty document."}, {"method_name": "getToolTipText", "method_sig": "public String getToolTipText (MouseEvent event)", "description": "Returns the string to be used as the tooltip for event.\n This will return one of:\n \nIf setToolTipText has been invoked with a\n      non-null\n      value, it will be returned, otherwise\n  The value from invoking getToolTipText on\n      the UI will be returned.\n \n By default JTextComponent does not register\n itself with the ToolTipManager.\n This means that tooltips will NOT be shown from the\n TextUI unless registerComponent has\n been invoked on the ToolTipManager."}, {"method_name": "getPreferredScrollableViewportSize", "method_sig": "@BeanProperty(bound=false)\npublic Dimension getPreferredScrollableViewportSize()", "description": "Returns the preferred size of the viewport for a view component.\n This is implemented to do the default behavior of returning\n the preferred size of the component."}, {"method_name": "getScrollableUnitIncrement", "method_sig": "public int getScrollableUnitIncrement (Rectangle visibleRect,\n                                      int orientation,\n                                      int direction)", "description": "Components that display logical rows or columns should compute\n the scroll increment that will completely expose one new row\n or column, depending on the value of orientation.  Ideally,\n components should handle a partially exposed row or column by\n returning the distance required to completely expose the item.\n \n The default implementation of this is to simply return 10% of\n the visible area.  Subclasses are likely to be able to provide\n a much more reasonable value."}, {"method_name": "getScrollableBlockIncrement", "method_sig": "public int getScrollableBlockIncrement (Rectangle visibleRect,\n                                       int orientation,\n                                       int direction)", "description": "Components that display logical rows or columns should compute\n the scroll increment that will completely expose one block\n of rows or columns, depending on the value of orientation.\n \n The default implementation of this is to simply return the visible\n area.  Subclasses will likely be able to provide a much more\n reasonable value."}, {"method_name": "getScrollableTracksViewportWidth", "method_sig": "@BeanProperty(bound=false)\npublic boolean getScrollableTracksViewportWidth()", "description": "Returns true if a viewport should always force the width of this\n Scrollable to match the width of the viewport.\n For example a normal text view that supported line wrapping\n would return true here, since it would be undesirable for\n wrapped lines to disappear beyond the right\n edge of the viewport.  Note that returning true for a\n Scrollable whose ancestor is a JScrollPane\n effectively disables horizontal scrolling.\n \n Scrolling containers, like JViewport,\n will use this method each time they are validated."}, {"method_name": "getScrollableTracksViewportHeight", "method_sig": "@BeanProperty(bound=false)\npublic boolean getScrollableTracksViewportHeight()", "description": "Returns true if a viewport should always force the height of this\n Scrollable to match the height of the viewport.\n For example a columnar text view that flowed text in left to\n right columns could effectively disable vertical scrolling by\n returning true here.\n \n Scrolling containers, like JViewport,\n will use this method each time they are validated."}, {"method_name": "print", "method_sig": "public boolean print()\n              throws PrinterException", "description": "A convenience print method that displays a print dialog, and then\n prints this JTextComponent in interactive mode with no\n header or footer text. Note: this method\n blocks until printing is done.\n \n Note: In headless mode, no dialogs will be shown.\n\n  This method calls the full featured\n print method to perform printing."}, {"method_name": "print", "method_sig": "public boolean print (MessageFormat headerFormat,\n                     MessageFormat footerFormat)\n              throws PrinterException", "description": "A convenience print method that displays a print dialog, and then\n prints this JTextComponent in interactive mode with\n the specified header and footer text. Note: this method\n blocks until printing is done.\n \n Note: In headless mode, no dialogs will be shown.\n\n  This method calls the full featured\n print method to perform printing."}, {"method_name": "print", "method_sig": "public boolean print (MessageFormat headerFormat,\n                     MessageFormat footerFormat,\n                     boolean showPrintDialog,\n                     PrintService service,\n                     PrintRequestAttributeSet attributes,\n                     boolean interactive)\n              throws PrinterException", "description": "Prints the content of this JTextComponent. Note: this method\n blocks until printing is done.\n\n \n Page header and footer text can be added to the output by providing\n MessageFormat arguments. The printing code requests\n Strings from the formats, providing a single item which may be\n included in the formatted string: an Integer representing the\n current page number.\n\n \nshowPrintDialog boolean parameter allows you to specify whether\n a print dialog is displayed to the user. When it is, the user\n may use the dialog to change printing attributes or even cancel the\n print.\n\n \nservice allows you to provide the initial\n PrintService for the print dialog, or to specify\n PrintService to print to when the dialog is not shown.\n\n \nattributes can be used to provide the\n initial values for the print dialog, or to supply any needed\n attributes when the dialog is not shown. attributes can\n be used to control how the job will print, for example\n duplex or single-sided.\n\n \ninteractive boolean parameter allows you to specify\n whether to perform printing in interactive\n mode. If true, a progress dialog, with an abort option,\n is displayed for the duration of printing.  This dialog is\n modal when print is invoked on the Event Dispatch\n Thread and non-modal otherwise. Warning:\n calling this method on the Event Dispatch Thread with \n interactive false blocks all events, including repaints, from\n being processed until printing is complete. It is only\n recommended when printing from an application with no\n visible GUI.\n\n \n Note: In headless mode, showPrintDialog and\n interactive parameters are ignored and no dialogs are\n shown.\n\n \n This method ensures the document is not mutated during printing.\n To indicate it visually, setEnabled(false) is set for the\n duration of printing.\n\n \n This method uses getPrintable(java.text.MessageFormat, java.text.MessageFormat) to render document content.\n\n \n This method is thread-safe, although most Swing methods are not. Please\n see \n Concurrency in Swing for more information.\n\n \nSample Usage. This code snippet shows a cross-platform print\n dialog and then prints the JTextComponent in interactive mode\n unless the user cancels the dialog:\n\n \n textComponent.print(new MessageFormat(\"My text component header\"),\n     new MessageFormat(\"Footer. Page - {0}\"), true, null, null, true);\n \n\n Executing this code off the Event Dispatch Thread\n performs printing on the background.\n The following pattern might be used for background\n printing:\n \n     FutureTask<Boolean> future =\n         new FutureTask<Boolean>(\n             new Callable<Boolean>() {\n                 public Boolean call() {\n                     return textComponent.print(.....);\n                 }\n             });\n     executor.execute(future);\n "}, {"method_name": "getPrintable", "method_sig": "public Printable getPrintable (MessageFormat headerFormat,\n                              MessageFormat footerFormat)", "description": "Returns a Printable to use for printing the content of this\n JTextComponent. The returned Printable prints\n the document as it looks on the screen except being reformatted\n to fit the paper.\n The returned Printable can be wrapped inside another\n Printable in order to create complex reports and\n documents.\n\n\n \n The returned Printable shares the document with this\n JTextComponent. It is the responsibility of the developer to\n ensure that the document is not mutated while this Printable\n is used. Printing behavior is undefined when the document is\n mutated during printing.\n\n \n Page header and footer text can be added to the output by providing\n MessageFormat arguments. The printing code requests\n Strings from the formats, providing a single item which may be\n included in the formatted string: an Integer representing the\n current page number.\n\n \n The returned Printable when printed, formats the\n document content appropriately for the page size. For correct\n line wrapping the imageable width of all pages must be the\n same. See PageFormat.getImageableWidth().\n\n \n This method is thread-safe, although most Swing methods are not. Please\n see \n Concurrency in Swing for more information.\n\n \n The returned Printable can be printed on any thread.\n\n \n This implementation returned Printable performs all painting on\n the Event Dispatch Thread, regardless of what thread it is\n used on."}, {"method_name": "getAccessibleContext", "method_sig": "@BeanProperty(bound=false)\npublic AccessibleContext getAccessibleContext()", "description": "Gets the AccessibleContext associated with this\n JTextComponent. For text components,\n the AccessibleContext takes the form of an\n AccessibleJTextComponent.\n A new AccessibleJTextComponent instance\n is created if necessary."}, {"method_name": "paramString", "method_sig": "protected String paramString()", "description": "Returns a string representation of this JTextComponent.\n This method is intended to be used only for debugging purposes, and the\n content and format of the returned string may vary between\n implementations. The returned string may be empty but may not\n be null.\n \n Overriding paramString to provide information about the\n specific new aspects of the JFC components."}, {"method_name": "saveComposedText", "method_sig": "protected boolean saveComposedText (int pos)", "description": "Saves composed text around the specified position.\n\n The composed text (if any) around the specified position is saved\n in a backing store and removed from the document."}, {"method_name": "restoreComposedText", "method_sig": "protected void restoreComposedText()", "description": "Restores composed text previously saved by saveComposedText.\n\n The saved composed text is inserted back into the document. This method\n should be invoked only if saveComposedText returns true."}]}