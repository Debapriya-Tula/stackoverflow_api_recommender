{"name": "Interface Collector<T,\u200bA,\u200bR>", "module": "java.base", "package": "java.util.stream", "text": "A mutable reduction operation that\n accumulates input elements into a mutable result container, optionally transforming\n the accumulated result into a final representation after all input elements\n have been processed.  Reduction operations can be performed either sequentially\n or in parallel.\n\n Examples of mutable reduction operations include:\n accumulating elements into a Collection; concatenating\n strings using a StringBuilder; computing summary information about\n elements such as sum, min, max, or average; computing \"pivot table\" summaries\n such as \"maximum valued transaction by seller\", etc.  The class Collectors\n provides implementations of many common mutable reductions.\n\n A Collector is specified by four functions that work together to\n accumulate entries into a mutable result container, and optionally perform\n a final transform on the result.  They are: \ncreation of a new result container (supplier())\nincorporating a new data element into a result container (accumulator())\ncombining two result containers into one (combiner())\nperforming an optional final transform on the container (finisher())\n\nCollectors also have a set of characteristics, such as\n Collector.Characteristics.CONCURRENT, that provide hints that can be used by a\n reduction implementation to provide better performance.\n\n A sequential implementation of a reduction using a collector would\n create a single result container using the supplier function, and invoke the\n accumulator function once for each input element.  A parallel implementation\n would partition the input, create a result container for each partition,\n accumulate the contents of each partition into a subresult for that partition,\n and then use the combiner function to merge the subresults into a combined\n result.\n\n To ensure that sequential and parallel executions produce equivalent\n results, the collector functions must satisfy an identity and an\n associativity constraints.\n\n The identity constraint says that for any partially accumulated result,\n combining it with an empty result container must produce an equivalent\n result.  That is, for a partially accumulated result a that is the\n result of any series of accumulator and combiner invocations, a must\n be equivalent to combiner.apply(a, supplier.get()).\n\n The associativity constraint says that splitting the computation must\n produce an equivalent result.  That is, for any input elements t1\n and t2, the results r1 and r2 in the computation\n below must be equivalent:\n \n     A a1 = supplier.get();\n     accumulator.accept(a1, t1);\n     accumulator.accept(a1, t2);\n     R r1 = finisher.apply(a1);  // result without splitting\n\n     A a2 = supplier.get();\n     accumulator.accept(a2, t1);\n     A a3 = supplier.get();\n     accumulator.accept(a3, t2);\n     R r2 = finisher.apply(combiner.apply(a2, a3));  // result with splitting\n  \nFor collectors that do not have the UNORDERED characteristic,\n two accumulated results a1 and a2 are equivalent if\n finisher.apply(a1).equals(finisher.apply(a2)).  For unordered\n collectors, equivalence is relaxed to allow for non-equality related to\n differences in order.  (For example, an unordered collector that accumulated\n elements to a List would consider two lists equivalent if they\n contained the same elements, ignoring order.)\n\n Libraries that implement reduction based on Collector, such as\n Stream.collect(Collector), must adhere to the following constraints:\n \nThe first argument passed to the accumulator function, both\n     arguments passed to the combiner function, and the argument passed to the\n     finisher function must be the result of a previous invocation of the\n     result supplier, accumulator, or combiner functions.\nThe implementation should not do anything with the result of any of\n     the result supplier, accumulator, or combiner functions other than to\n     pass them again to the accumulator, combiner, or finisher functions,\n     or return them to the caller of the reduction operation.\nIf a result is passed to the combiner or finisher\n     function, and the same object is not returned from that function, it is\n     never used again.\nOnce a result is passed to the combiner or finisher function, it\n     is never passed to the accumulator function again.\nFor non-concurrent collectors, any result returned from the result\n     supplier, accumulator, or combiner functions must be serially\n     thread-confined.  This enables collection to occur in parallel without\n     the Collector needing to implement any additional synchronization.\n     The reduction implementation must manage that the input is properly\n     partitioned, that partitions are processed in isolation, and combining\n     happens only after accumulation is complete.\nFor concurrent collectors, an implementation is free to (but not\n     required to) implement reduction concurrently.  A concurrent reduction\n     is one where the accumulator function is called concurrently from\n     multiple threads, using the same concurrently-modifiable result container,\n     rather than keeping the result isolated during accumulation.\n     A concurrent reduction should only be applied if the collector has the\n     Collector.Characteristics.UNORDERED characteristics or if the\n     originating data is unordered.\n\nIn addition to the predefined implementations in Collectors, the\n static factory methods of(Supplier, BiConsumer, BinaryOperator, Characteristics...)\n can be used to construct collectors.  For example, you could create a collector\n that accumulates widgets into a TreeSet with:\n\n \n     Collector<Widget, ?, TreeSet<Widget>> intoSet =\n         Collector.of(TreeSet::new, TreeSet::add,\n                      (left, right) -> { left.addAll(right); return left; });\n \n\n (This behavior is also implemented by the predefined collector\n Collectors.toCollection(Supplier)).", "codes": ["public interface Collector<T, A, R>"], "fields": [], "methods": [{"method_name": "supplier", "method_sig": "Supplier<A> supplier()", "description": "A function that creates and returns a new mutable result container."}, {"method_name": "accumulator", "method_sig": "BiConsumer<A, T> accumulator()", "description": "A function that folds a value into a mutable result container."}, {"method_name": "combiner", "method_sig": "BinaryOperator<A> combiner()", "description": "A function that accepts two partial results and merges them.  The\n combiner function may fold state from one argument into the other and\n return that, or may return a new result container."}, {"method_name": "finisher", "method_sig": "Function<A, R> finisher()", "description": "Perform the final transformation from the intermediate accumulation type\n A to the final result type R.\n\n If the characteristic IDENTITY_FINISH is\n set, this function may be presumed to be an identity transform with an\n unchecked cast from A to R."}, {"method_name": "characteristics", "method_sig": "Set<Collector.Characteristics> characteristics()", "description": "Returns a Set of Collector.Characteristics indicating\n the characteristics of this Collector.  This set should be immutable."}, {"method_name": "of", "method_sig": "static <T, R> Collector<T, R, R> of (Supplier<R> supplier,\n                                                   BiConsumer<R, T> accumulator,\n                                                   BinaryOperator<R> combiner,\n                                                   Collector.Characteristics... characteristics)", "description": "Returns a new Collector described by the given supplier,\n accumulator, and combiner functions.  The resulting\n Collector has the Collector.Characteristics.IDENTITY_FINISH\n characteristic."}, {"method_name": "of", "method_sig": "static <T, A, R> Collector<T, A, R> of (Supplier<A> supplier,\n                                                           BiConsumer<A, T> accumulator,\n                                                           BinaryOperator<A> combiner,\n                                                           Function<A, R> finisher,\n                                                           Collector.Characteristics... characteristics)", "description": "Returns a new Collector described by the given supplier,\n accumulator, combiner, and finisher functions."}]}