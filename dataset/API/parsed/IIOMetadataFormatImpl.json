{"name": "Class IIOMetadataFormatImpl", "module": "java.desktop", "package": "javax.imageio.metadata", "text": "A concrete class providing a reusable implementation of the\n IIOMetadataFormat interface.  In addition, a static\n instance representing the standard, plug-in neutral\n javax_imageio_1.0 format is provided by the\n getStandardFormatInstance method.\n\n  In order to supply localized descriptions of elements and\n attributes, a ResourceBundle with a base name of\n this.getClass().getName() + \"Resources\" should be\n supplied via the usual mechanism used by\n ResourceBundle.getBundle.  Briefly, the subclasser\n supplies one or more additional classes according to a naming\n convention (by default, the fully-qualified name of the subclass\n extending IIMetadataFormatImpl, plus the string\n \"Resources\", plus the country, language, and variant codes\n separated by underscores).  At run time, calls to\n getElementDescription or\n getAttributeDescription will attempt to load such\n classes dynamically according to the supplied locale, and will use\n either the element name, or the element name followed by a '/'\n character followed by the attribute name as a key.  This key will\n be supplied to the ResourceBundle's\n getString method, and the resulting localized\n description of the node or attribute is returned.\n\n  The subclass may supply a different base name for the resource\n bundles using the setResourceBaseName method.\n\n  A subclass may choose its own localization mechanism, if so\n desired, by overriding the supplied implementations of\n getElementDescription and\n getAttributeDescription.", "codes": ["public abstract class IIOMetadataFormatImpl\nextends Object\nimplements IIOMetadataFormat"], "fields": [{"field_name": "standardMetadataFormatName", "field_sig": "public static final\u00a0String standardMetadataFormatName", "description": "A String constant containing the standard format\n name, \"javax_imageio_1.0\"."}], "methods": [{"method_name": "setResourceBaseName", "method_sig": "protected void setResourceBaseName (String resourceBaseName)", "description": "Sets a new base name for locating ResourceBundles\n containing descriptions of elements and attributes for this\n format.\n\n  Prior to the first time this method is called, the base\n name will be equal to\n this.getClass().getName() + \"Resources\"."}, {"method_name": "getResourceBaseName", "method_sig": "protected String getResourceBaseName()", "description": "Returns the currently set base name for locating\n ResourceBundles."}, {"method_name": "addElement", "method_sig": "protected void addElement (String elementName,\n                          String parentName,\n                          int childPolicy)", "description": "Adds a new element type to this metadata document format with a\n child policy other than CHILD_POLICY_REPEAT."}, {"method_name": "addElement", "method_sig": "protected void addElement (String elementName,\n                          String parentName,\n                          int minChildren,\n                          int maxChildren)", "description": "Adds a new element type to this metadata document format with a\n child policy of CHILD_POLICY_REPEAT."}, {"method_name": "addChildElement", "method_sig": "protected void addChildElement (String elementName,\n                               String parentName)", "description": "Adds an existing element to the list of legal children for a\n given parent node type."}, {"method_name": "removeElement", "method_sig": "protected void removeElement (String elementName)", "description": "Removes an element from the format.  If no element with the\n given name was present, nothing happens and no exception is\n thrown."}, {"method_name": "addAttribute", "method_sig": "protected void addAttribute (String elementName,\n                            String attrName,\n                            int dataType,\n                            boolean required,\n                            String defaultValue)", "description": "Adds a new attribute to a previously defined element that may\n be set to an arbitrary value."}, {"method_name": "addAttribute", "method_sig": "protected void addAttribute (String elementName,\n                            String attrName,\n                            int dataType,\n                            boolean required,\n                            String defaultValue,\n                            List<String> enumeratedValues)", "description": "Adds a new attribute to a previously defined element that will\n be defined by a set of enumerated values."}, {"method_name": "addAttribute", "method_sig": "protected void addAttribute (String elementName,\n                            String attrName,\n                            int dataType,\n                            boolean required,\n                            String defaultValue,\n                            String minValue,\n                            String maxValue,\n                            boolean minInclusive,\n                            boolean maxInclusive)", "description": "Adds a new attribute to a previously defined element that will\n be defined by a range of values."}, {"method_name": "addAttribute", "method_sig": "protected void addAttribute (String elementName,\n                            String attrName,\n                            int dataType,\n                            boolean required,\n                            int listMinLength,\n                            int listMaxLength)", "description": "Adds a new attribute to a previously defined element that will\n be defined by a list of values."}, {"method_name": "addBooleanAttribute", "method_sig": "protected void addBooleanAttribute (String elementName,\n                                   String attrName,\n                                   boolean hasDefaultValue,\n                                   boolean defaultValue)", "description": "Adds a new attribute to a previously defined element that will\n be defined by the enumerated values TRUE and\n FALSE, with a datatype of\n DATATYPE_BOOLEAN."}, {"method_name": "removeAttribute", "method_sig": "protected void removeAttribute (String elementName,\n                               String attrName)", "description": "Removes an attribute from a previously defined element.  If no\n attribute with the given name was present in the given element,\n nothing happens and no exception is thrown."}, {"method_name": "addObjectValue", "method_sig": "protected <T> void addObjectValue (String elementName,\n                                  Class<T> classType,\n                                  boolean required,\n                                  T defaultValue)", "description": "Allows an Object reference of a given class type\n to be stored in nodes implementing the named element.  The\n value of the Object is unconstrained other than by\n its class type.\n\n  If an Object reference was previously allowed,\n the previous settings are overwritten."}, {"method_name": "addObjectValue", "method_sig": "protected <T> void addObjectValue (String elementName,\n                                  Class<T> classType,\n                                  boolean required,\n                                  T defaultValue,\n                                  List<? extends T> enumeratedValues)", "description": "Allows an Object reference of a given class type\n to be stored in nodes implementing the named element.  The\n value of the Object must be one of the values\n given by enumeratedValues.\n\n  If an Object reference was previously allowed,\n the previous settings are overwritten."}, {"method_name": "addObjectValue", "method_sig": "protected <T extends Object & Comparable<? super T>> void addObjectValue (String elementName,\n                                                                         Class<T> classType,\n                                                                         T defaultValue,\n                                                                         Comparable<? super T> minValue,\n                                                                         Comparable<? super T> maxValue,\n                                                                         boolean minInclusive,\n                                                                         boolean maxInclusive)", "description": "Allows an Object reference of a given class type\n to be stored in nodes implementing the named element.  The\n value of the Object must be within the range given\n by minValue and maxValue.\n Furthermore, the class type must implement the\n Comparable interface.\n\n  If an Object reference was previously allowed,\n the previous settings are overwritten."}, {"method_name": "addObjectValue", "method_sig": "protected void addObjectValue (String elementName,\n                              Class<?> classType,\n                              int arrayMinLength,\n                              int arrayMaxLength)", "description": "Allows an Object reference of a given class type\n to be stored in nodes implementing the named element.  The\n value of the Object must an array of objects of\n class type given by classType, with at least\n arrayMinLength and at most\n arrayMaxLength elements.\n\n  If an Object reference was previously allowed,\n the previous settings are overwritten."}, {"method_name": "removeObjectValue", "method_sig": "protected void removeObjectValue (String elementName)", "description": "Disallows an Object reference from being stored in\n nodes implementing the named element."}, {"method_name": "getElementDescription", "method_sig": "public String getElementDescription (String elementName,\n                                    Locale locale)", "description": "Returns a String containing a description of the\n named element, or null.  The description will be\n localized for the supplied Locale if possible.\n\n  The default implementation will first locate a\n ResourceBundle using the current resource base\n name set by setResourceBaseName and the supplied\n Locale, using the fallback mechanism described in\n the comments for ResourceBundle.getBundle.  If a\n ResourceBundle is found, the element name will be\n used as a key to its getString method, and the\n result returned.  If no ResourceBundle is found,\n or no such key is present, null will be returned.\n\n  If locale is null, the current\n default Locale returned by Locale.getLocale\n will be used."}, {"method_name": "getAttributeDescription", "method_sig": "public String getAttributeDescription (String elementName,\n                                      String attrName,\n                                      Locale locale)", "description": "Returns a String containing a description of the\n named attribute, or null.  The description will be\n localized for the supplied Locale if possible.\n\n  The default implementation will first locate a\n ResourceBundle using the current resource base\n name set by setResourceBaseName and the supplied\n Locale, using the fallback mechanism described in\n the comments for ResourceBundle.getBundle.  If a\n ResourceBundle is found, the element name followed\n by a \"/\" character followed by the attribute name\n (elementName + \"/\" + attrName) will be used as a\n key to its getString method, and the result\n returned.  If no ResourceBundle is found, or no\n such key is present, null will be returned.\n\n  If locale is null, the current\n default Locale returned by Locale.getLocale\n will be used."}, {"method_name": "getStandardFormatInstance", "method_sig": "public static IIOMetadataFormat getStandardFormatInstance()", "description": "Returns an IIOMetadataFormat object describing the\n standard, plug-in neutral javax.imageio_1.0\n metadata document format described in the comment of the\n javax.imageio.metadata package."}]}