{"name": "Class DefaultHandler", "module": "java.xml", "package": "org.xml.sax.helpers", "text": "Default base class for SAX2 event handlers.\n\n \nThis module, both source code and documentation, is in the\n Public Domain, and comes with NO WARRANTY.\n See http://www.saxproject.org\n for further information.\n \nThis class is available as a convenience base class for SAX2\n applications: it provides default implementations for all of the\n callbacks in the four core SAX2 handler classes:\n\nEntityResolver\nDTDHandler\nContentHandler\nErrorHandler\n\nApplication writers can extend this class when they need to\n implement only part of an interface; parser writers can\n instantiate this class to provide default handlers when the\n application has not supplied its own.\nThis class replaces the deprecated SAX1\n HandlerBase class.", "codes": ["public class DefaultHandler\nextends Object\nimplements EntityResolver, DTDHandler, ContentHandler, ErrorHandler"], "fields": [], "methods": [{"method_name": "resolveEntity", "method_sig": "public InputSource resolveEntity (String publicId,\n                                 String systemId)\n                          throws IOException,\n                                 SAXException", "description": "Resolve an external entity.\n\n Always return null, so that the parser will use the system\n identifier provided in the XML document.  This method implements\n the SAX default behaviour: application writers can override it\n in a subclass to do special translations such as catalog lookups\n or URI redirection."}, {"method_name": "notationDecl", "method_sig": "public void notationDecl (String name,\n                         String publicId,\n                         String systemId)\n                  throws SAXException", "description": "Receive notification of a notation declaration.\n\n By default, do nothing.  Application writers may override this\n method in a subclass if they wish to keep track of the notations\n declared in a document."}, {"method_name": "unparsedEntityDecl", "method_sig": "public void unparsedEntityDecl (String name,\n                               String publicId,\n                               String systemId,\n                               String notationName)\n                        throws SAXException", "description": "Receive notification of an unparsed entity declaration.\n\n By default, do nothing.  Application writers may override this\n method in a subclass to keep track of the unparsed entities\n declared in a document."}, {"method_name": "setDocumentLocator", "method_sig": "public void setDocumentLocator (Locator locator)", "description": "Receive a Locator object for document events.\n\n By default, do nothing.  Application writers may override this\n method in a subclass if they wish to store the locator for use\n with other document events."}, {"method_name": "startDocument", "method_sig": "public void startDocument()\n                   throws SAXException", "description": "Receive notification of the beginning of the document.\n\n By default, do nothing.  Application writers may override this\n method in a subclass to take specific actions at the beginning\n of a document (such as allocating the root node of a tree or\n creating an output file)."}, {"method_name": "endDocument", "method_sig": "public void endDocument()\n                 throws SAXException", "description": "Receive notification of the end of the document.\n\n By default, do nothing.  Application writers may override this\n method in a subclass to take specific actions at the end\n of a document (such as finalising a tree or closing an output\n file)."}, {"method_name": "startPrefixMapping", "method_sig": "public void startPrefixMapping (String prefix,\n                               String uri)\n                        throws SAXException", "description": "Receive notification of the start of a Namespace mapping.\n\n By default, do nothing.  Application writers may override this\n method in a subclass to take specific actions at the start of\n each Namespace prefix scope (such as storing the prefix mapping)."}, {"method_name": "endPrefixMapping", "method_sig": "public void endPrefixMapping (String prefix)\n                      throws SAXException", "description": "Receive notification of the end of a Namespace mapping.\n\n By default, do nothing.  Application writers may override this\n method in a subclass to take specific actions at the end of\n each prefix mapping."}, {"method_name": "startElement", "method_sig": "public void startElement (String uri,\n                         String localName,\n                         String qName,\n                         Attributes attributes)\n                  throws SAXException", "description": "Receive notification of the start of an element.\n\n By default, do nothing.  Application writers may override this\n method in a subclass to take specific actions at the start of\n each element (such as allocating a new tree node or writing\n output to a file)."}, {"method_name": "endElement", "method_sig": "public void endElement (String uri,\n                       String localName,\n                       String qName)\n                throws SAXException", "description": "Receive notification of the end of an element.\n\n By default, do nothing.  Application writers may override this\n method in a subclass to take specific actions at the end of\n each element (such as finalising a tree node or writing\n output to a file)."}, {"method_name": "characters", "method_sig": "public void characters (char[] ch,\n                       int start,\n                       int length)\n                throws SAXException", "description": "Receive notification of character data inside an element.\n\n By default, do nothing.  Application writers may override this\n method to take specific actions for each chunk of character data\n (such as adding the data to a node or buffer, or printing it to\n a file)."}, {"method_name": "ignorableWhitespace", "method_sig": "public void ignorableWhitespace (char[] ch,\n                                int start,\n                                int length)\n                         throws SAXException", "description": "Receive notification of ignorable whitespace in element content.\n\n By default, do nothing.  Application writers may override this\n method to take specific actions for each chunk of ignorable\n whitespace (such as adding data to a node or buffer, or printing\n it to a file)."}, {"method_name": "processingInstruction", "method_sig": "public void processingInstruction (String target,\n                                  String data)\n                           throws SAXException", "description": "Receive notification of a processing instruction.\n\n By default, do nothing.  Application writers may override this\n method in a subclass to take specific actions for each\n processing instruction, such as setting status variables or\n invoking other methods."}, {"method_name": "skippedEntity", "method_sig": "public void skippedEntity (String name)\n                   throws SAXException", "description": "Receive notification of a skipped entity.\n\n By default, do nothing.  Application writers may override this\n method in a subclass to take specific actions for each\n processing instruction, such as setting status variables or\n invoking other methods."}, {"method_name": "warning", "method_sig": "public void warning (SAXParseException e)\n             throws SAXException", "description": "Receive notification of a parser warning.\n\n The default implementation does nothing.  Application writers\n may override this method in a subclass to take specific actions\n for each warning, such as inserting the message in a log file or\n printing it to the console."}, {"method_name": "error", "method_sig": "public void error (SAXParseException e)\n           throws SAXException", "description": "Receive notification of a recoverable parser error.\n\n The default implementation does nothing.  Application writers\n may override this method in a subclass to take specific actions\n for each error, such as inserting the message in a log file or\n printing it to the console."}, {"method_name": "fatalError", "method_sig": "public void fatalError (SAXParseException e)\n                throws SAXException", "description": "Report a fatal XML parsing error.\n\n The default implementation throws a SAXParseException.\n Application writers may override this method in a subclass if\n they need to take specific actions for each fatal error (such as\n collecting all of the errors into a single report): in any case,\n the application must stop all regular processing when this\n method is invoked, since the document is no longer reliable, and\n the parser may no longer report parsing events."}]}