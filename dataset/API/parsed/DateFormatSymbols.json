{"name": "Class DateFormatSymbols", "module": "java.base", "package": "java.text", "text": "DateFormatSymbols is a public class for encapsulating\n localizable date-time formatting data, such as the names of the\n months, the names of the days of the week, and the time zone data.\n SimpleDateFormat uses\n DateFormatSymbols to encapsulate this information.\n\n \n Typically you shouldn't use DateFormatSymbols directly.\n Rather, you are encouraged to create a date-time formatter with the\n DateFormat class's factory methods: getTimeInstance,\n getDateInstance, or getDateTimeInstance.\n These methods automatically create a DateFormatSymbols for\n the formatter so that you don't have to. After the\n formatter is created, you may modify its format pattern using the\n setPattern method. For more information about\n creating formatters using DateFormat's factory methods,\n see DateFormat.\n\n \n If you decide to create a date-time formatter with a specific\n format pattern for a specific locale, you can do so with:\n \n\n new SimpleDateFormat(aPattern, DateFormatSymbols.getInstance(aLocale)).\n \n\nIf the locale contains \"rg\" (region override)\n Unicode extension,\n the symbols are overridden for the designated region.\n\n \nDateFormatSymbols objects are cloneable. When you obtain\n a DateFormatSymbols object, feel free to modify the\n date-time formatting data. For instance, you can replace the localized\n date-time format pattern characters with the ones that you feel easy\n to remember. Or you can change the representative cities\n to your favorite ones.\n\n \n New DateFormatSymbols subclasses may be added to support\n SimpleDateFormat for date-time formatting for additional locales.", "codes": ["public class DateFormatSymbols\nextends Object\nimplements Serializable, Cloneable"], "fields": [], "methods": [{"method_name": "getAvailableLocales", "method_sig": "public static Locale[] getAvailableLocales()", "description": "Returns an array of all locales for which the\n getInstance methods of this class can return\n localized instances.\n The returned array represents the union of locales supported by the\n Java runtime and by installed\n DateFormatSymbolsProvider\n implementations.  It must contain at least a Locale\n instance equal to Locale.US."}, {"method_name": "getInstance", "method_sig": "public static final DateFormatSymbols getInstance()", "description": "Gets the DateFormatSymbols instance for the default\n locale.  This method provides access to DateFormatSymbols\n instances for locales supported by the Java runtime itself as well\n as for those supported by installed\n DateFormatSymbolsProvider\n implementations.\n This is equivalent to calling getInstance(Locale.getDefault(Locale.Category.FORMAT))."}, {"method_name": "getInstance", "method_sig": "public static final DateFormatSymbols getInstance (Locale locale)", "description": "Gets the DateFormatSymbols instance for the specified\n locale.  This method provides access to DateFormatSymbols\n instances for locales supported by the Java runtime itself as well\n as for those supported by installed\n DateFormatSymbolsProvider\n implementations."}, {"method_name": "getEras", "method_sig": "public String[] getEras()", "description": "Gets era strings. For example: \"AD\" and \"BC\"."}, {"method_name": "setEras", "method_sig": "public void setEras (String[] newEras)", "description": "Sets era strings. For example: \"AD\" and \"BC\"."}, {"method_name": "getMonths", "method_sig": "public String[] getMonths()", "description": "Gets month strings. For example: \"January\", \"February\", etc.\n An array with either 12 or 13 elements will be returned depending\n on whether or not Calendar.UNDECIMBER\n is supported. Use\n Calendar.JANUARY,\n Calendar.FEBRUARY,\n etc. to index the result array.\n\n If the language requires different forms for formatting and\n stand-alone usages, this method returns month names in the\n formatting form. For example, the preferred month name for\n January in the Czech language is ledna in the\n formatting form, while it is leden in the stand-alone\n form. This method returns \"ledna\" in this case. Refer\n to the \n Calendar Elements in the Unicode Locale Data Markup Language\n (LDML) specification for more details."}, {"method_name": "setMonths", "method_sig": "public void setMonths (String[] newMonths)", "description": "Sets month strings. For example: \"January\", \"February\", etc."}, {"method_name": "getShortMonths", "method_sig": "public String[] getShortMonths()", "description": "Gets short month strings. For example: \"Jan\", \"Feb\", etc.\n An array with either 12 or 13 elements will be returned depending\n on whether or not Calendar.UNDECIMBER\n is supported. Use\n Calendar.JANUARY,\n Calendar.FEBRUARY,\n etc. to index the result array.\n\n If the language requires different forms for formatting and\n stand-alone usages, this method returns short month names in\n the formatting form. For example, the preferred abbreviation\n for January in the Catalan language is de gen. in the\n formatting form, while it is gen. in the stand-alone\n form. This method returns \"de gen.\" in this case. Refer\n to the \n Calendar Elements in the Unicode Locale Data Markup Language\n (LDML) specification for more details."}, {"method_name": "setShortMonths", "method_sig": "public void setShortMonths (String[] newShortMonths)", "description": "Sets short month strings. For example: \"Jan\", \"Feb\", etc."}, {"method_name": "getWeekdays", "method_sig": "public String[] getWeekdays()", "description": "Gets weekday strings. For example: \"Sunday\", \"Monday\", etc."}, {"method_name": "setWeekdays", "method_sig": "public void setWeekdays (String[] newWeekdays)", "description": "Sets weekday strings. For example: \"Sunday\", \"Monday\", etc."}, {"method_name": "getShortWeekdays", "method_sig": "public String[] getShortWeekdays()", "description": "Gets short weekday strings. For example: \"Sun\", \"Mon\", etc."}, {"method_name": "setShortWeekdays", "method_sig": "public void setShortWeekdays (String[] newShortWeekdays)", "description": "Sets short weekday strings. For example: \"Sun\", \"Mon\", etc."}, {"method_name": "getAmPmStrings", "method_sig": "public String[] getAmPmStrings()", "description": "Gets ampm strings. For example: \"AM\" and \"PM\"."}, {"method_name": "setAmPmStrings", "method_sig": "public void setAmPmStrings (String[] newAmpms)", "description": "Sets ampm strings. For example: \"AM\" and \"PM\"."}, {"method_name": "getZoneStrings", "method_sig": "public String[][] getZoneStrings()", "description": "Gets time zone strings.  Use of this method is discouraged; use\n TimeZone.getDisplayName()\n instead.\n \n The value returned is a\n two-dimensional array of strings of size n by m,\n where m is at least 5.  Each of the n rows is an\n entry containing the localized names for a single TimeZone.\n Each such row contains (with i ranging from\n 0..n-1):\n \nzoneStrings[i][0] - time zone ID\nzoneStrings[i][1] - long name of zone in standard\n time\nzoneStrings[i][2] - short name of zone in\n standard time\nzoneStrings[i][3] - long name of zone in daylight\n saving time\nzoneStrings[i][4] - short name of zone in daylight\n saving time\n\n The zone ID is not localized; it's one of the valid IDs of\n the TimeZone class that are not\n custom IDs.\n All other entries are localized names.  If a zone does not implement\n daylight saving time, the daylight saving time names should not be used.\n \n If setZoneStrings has been called\n on this DateFormatSymbols instance, then the strings\n provided by that call are returned. Otherwise, the returned array\n contains names provided by the Java runtime and by installed\n TimeZoneNameProvider\n implementations."}, {"method_name": "setZoneStrings", "method_sig": "public void setZoneStrings (String[][] newZoneStrings)", "description": "Sets time zone strings.  The argument must be a\n two-dimensional array of strings of size n by m,\n where m is at least 5.  Each of the n rows is an\n entry containing the localized names for a single TimeZone.\n Each such row contains (with i ranging from\n 0..n-1):\n \nzoneStrings[i][0] - time zone ID\nzoneStrings[i][1] - long name of zone in standard\n time\nzoneStrings[i][2] - short name of zone in\n standard time\nzoneStrings[i][3] - long name of zone in daylight\n saving time\nzoneStrings[i][4] - short name of zone in daylight\n saving time\n\n The zone ID is not localized; it's one of the valid IDs of\n the TimeZone class that are not\n custom IDs.\n All other entries are localized names."}, {"method_name": "getLocalPatternChars", "method_sig": "public String getLocalPatternChars()", "description": "Gets localized date-time pattern characters. For example: 'u', 't', etc."}, {"method_name": "setLocalPatternChars", "method_sig": "public void setLocalPatternChars (String newLocalPatternChars)", "description": "Sets localized date-time pattern characters. For example: 'u', 't', etc."}, {"method_name": "clone", "method_sig": "public Object clone()", "description": "Overrides Cloneable"}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Override hashCode.\n Generates a hash code for the DateFormatSymbols object."}, {"method_name": "equals", "method_sig": "public boolean equals (Object obj)", "description": "Override equals"}]}