{"name": "Class WeakHashMap<K,\u200bV>", "module": "java.base", "package": "java.util", "text": "Hash table based implementation of the Map interface, with\n weak keys.\n An entry in a WeakHashMap will automatically be removed when\n its key is no longer in ordinary use.  More precisely, the presence of a\n mapping for a given key will not prevent the key from being discarded by the\n garbage collector, that is, made finalizable, finalized, and then reclaimed.\n When a key has been discarded its entry is effectively removed from the map,\n so this class behaves somewhat differently from other Map\n implementations.\n\n  Both null values and the null key are supported. This class has\n performance characteristics similar to those of the HashMap\n class, and has the same efficiency parameters of initial capacity\n and load factor.\n\n  Like most collection classes, this class is not synchronized.\n A synchronized WeakHashMap may be constructed using the\n Collections.synchronizedMap\n method.\n\n  This class is intended primarily for use with key objects whose\n equals methods test for object identity using the\n == operator.  Once such a key is discarded it can never be\n recreated, so it is impossible to do a lookup of that key in a\n WeakHashMap at some later time and be surprised that its entry\n has been removed.  This class will work perfectly well with key objects\n whose equals methods are not based upon object identity, such\n as String instances.  With such recreatable key objects,\n however, the automatic removal of WeakHashMap entries whose\n keys have been discarded may prove to be confusing.\n\n  The behavior of the WeakHashMap class depends in part upon\n the actions of the garbage collector, so several familiar (though not\n required) Map invariants do not hold for this class.  Because\n the garbage collector may discard keys at any time, a\n WeakHashMap may behave as though an unknown thread is silently\n removing entries.  In particular, even if you synchronize on a\n WeakHashMap instance and invoke none of its mutator methods, it\n is possible for the size method to return smaller values over\n time, for the isEmpty method to return false and\n then true, for the containsKey method to return\n true and later false for a given key, for the\n get method to return a value for a given key but later return\n null, for the put method to return\n null and the remove method to return\n false for a key that previously appeared to be in the map, and\n for successive examinations of the key set, the value collection, and\n the entry set to yield successively smaller numbers of elements.\n\n  Each key object in a WeakHashMap is stored indirectly as\n the referent of a weak reference.  Therefore a key will automatically be\n removed only after the weak references to it, both inside and outside of the\n map, have been cleared by the garbage collector.\n\n  Implementation note: The value objects in a\n WeakHashMap are held by ordinary strong references.  Thus care\n should be taken to ensure that value objects do not strongly refer to their\n own keys, either directly or indirectly, since that will prevent the keys\n from being discarded.  Note that a value object may refer indirectly to its\n key via the WeakHashMap itself; that is, a value object may\n strongly refer to some other key object whose associated value object, in\n turn, strongly refers to the key of the first value object.  If the values\n in the map do not rely on the map holding strong references to them, one way\n to deal with this is to wrap values themselves within\n WeakReferences before\n inserting, as in: m.put(key, new WeakReference(value)),\n and then unwrapping upon each get.\n\n The iterators returned by the iterator method of the collections\n returned by all of this class's \"collection view methods\" are\n fail-fast: if the map is structurally modified at any time after the\n iterator is created, in any way except through the iterator's own\n remove method, the iterator will throw a ConcurrentModificationException.  Thus, in the face of concurrent\n modification, the iterator fails quickly and cleanly, rather than risking\n arbitrary, non-deterministic behavior at an undetermined time in the future.\n\n Note that the fail-fast behavior of an iterator cannot be guaranteed\n as it is, generally speaking, impossible to make any hard guarantees in the\n presence of unsynchronized concurrent modification.  Fail-fast iterators\n throw ConcurrentModificationException on a best-effort basis.\n Therefore, it would be wrong to write a program that depended on this\n exception for its correctness:  the fail-fast behavior of iterators\n should be used only to detect bugs.\nThis class is a member of the\n \n Java Collections Framework.", "codes": ["public class WeakHashMap<K, V>\nextends AbstractMap<K, V>\nimplements Map<K, V>"], "fields": [], "methods": [{"method_name": "size", "method_sig": "public int size()", "description": "Returns the number of key-value mappings in this map.\n This result is a snapshot, and may not reflect unprocessed\n entries that will be removed before next attempted access\n because they are no longer referenced."}, {"method_name": "isEmpty", "method_sig": "public boolean isEmpty()", "description": "Returns true if this map contains no key-value mappings.\n This result is a snapshot, and may not reflect unprocessed\n entries that will be removed before next attempted access\n because they are no longer referenced."}, {"method_name": "get", "method_sig": "public V get (Object key)", "description": "Returns the value to which the specified key is mapped,\n or null if this map contains no mapping for the key.\n\n More formally, if this map contains a mapping from a key\n k to a value v such that\n Objects.equals(key, k),\n then this method returns v; otherwise\n it returns null.  (There can be at most one such mapping.)\n\n A return value of null does not necessarily\n indicate that the map contains no mapping for the key; it's also\n possible that the map explicitly maps the key to null.\n The containsKey operation may be used to\n distinguish these two cases."}, {"method_name": "containsKey", "method_sig": "public boolean containsKey (Object key)", "description": "Returns true if this map contains a mapping for the\n specified key."}, {"method_name": "put", "method_sig": "public V put (K key,\n             V value)", "description": "Associates the specified value with the specified key in this map.\n If the map previously contained a mapping for this key, the old\n value is replaced."}, {"method_name": "putAll", "method_sig": "public void putAll (Map<? extends K, ? extends V> m)", "description": "Copies all of the mappings from the specified map to this map.\n These mappings will replace any mappings that this map had for any\n of the keys currently in the specified map."}, {"method_name": "remove", "method_sig": "public V remove (Object key)", "description": "Removes the mapping for a key from this weak hash map if it is present.\n More formally, if this map contains a mapping from key k to\n value v such that (key==null ?  k==null :\n key.equals(k)), that mapping is removed.  (The map can contain\n at most one such mapping.)\n\n Returns the value to which this map previously associated the key,\n or null if the map contained no mapping for the key.  A\n return value of null does not necessarily indicate\n that the map contained no mapping for the key; it's also possible\n that the map explicitly mapped the key to null.\n\n The map will not contain a mapping for the specified key once the\n call returns."}, {"method_name": "clear", "method_sig": "public void clear()", "description": "Removes all of the mappings from this map.\n The map will be empty after this call returns."}, {"method_name": "containsValue", "method_sig": "public boolean containsValue (Object value)", "description": "Returns true if this map maps one or more keys to the\n specified value."}, {"method_name": "keySet", "method_sig": "public Set<K> keySet()", "description": "Returns a Set view of the keys contained in this map.\n The set is backed by the map, so changes to the map are\n reflected in the set, and vice-versa.  If the map is modified\n while an iteration over the set is in progress (except through\n the iterator's own remove operation), the results of\n the iteration are undefined.  The set supports element removal,\n which removes the corresponding mapping from the map, via the\n Iterator.remove, Set.remove,\n removeAll, retainAll, and clear\n operations.  It does not support the add or addAll\n operations."}, {"method_name": "values", "method_sig": "public Collection<V> values()", "description": "Returns a Collection view of the values contained in this map.\n The collection is backed by the map, so changes to the map are\n reflected in the collection, and vice-versa.  If the map is\n modified while an iteration over the collection is in progress\n (except through the iterator's own remove operation),\n the results of the iteration are undefined.  The collection\n supports element removal, which removes the corresponding\n mapping from the map, via the Iterator.remove,\n Collection.remove, removeAll,\n retainAll and clear operations.  It does not\n support the add or addAll operations."}, {"method_name": "entrySet", "method_sig": "public Set<Map.Entry<K, V>> entrySet()", "description": "Returns a Set view of the mappings contained in this map.\n The set is backed by the map, so changes to the map are\n reflected in the set, and vice-versa.  If the map is modified\n while an iteration over the set is in progress (except through\n the iterator's own remove operation, or through the\n setValue operation on a map entry returned by the\n iterator) the results of the iteration are undefined.  The set\n supports element removal, which removes the corresponding\n mapping from the map, via the Iterator.remove,\n Set.remove, removeAll, retainAll and\n clear operations.  It does not support the\n add or addAll operations."}]}