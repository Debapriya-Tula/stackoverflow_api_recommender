{"name": "Class DriverManager", "module": "java.sql", "package": "java.sql", "text": "The basic service for managing a set of JDBC drivers.\n \nNOTE: The DataSource interface, provides\n another way to connect to a data source.\n The use of a DataSource object is the preferred means of\n connecting to a data source.\n \n As part of its initialization, the DriverManager class will\n attempt to load available JDBC drivers by using:\n \nThe jdbc.drivers system property which contains a\n colon separated list of fully qualified class names of JDBC drivers. Each\n driver is loaded using the system class loader:\n \njdbc.drivers=foo.bah.Driver:wombat.sql.Driver:bad.taste.ourDriver\n\nService providers of the java.sql.Driver class, that are loaded\n via the service-provider loading mechanism.\n", "codes": ["public class DriverManager\nextends Object"], "fields": [], "methods": [{"method_name": "getLogWriter", "method_sig": "public static PrintWriter getLogWriter()", "description": "Retrieves the log writer.\n\n The getLogWriter and setLogWriter\n methods should be used instead\n of the get/setlogStream methods, which are deprecated."}, {"method_name": "setLogWriter", "method_sig": "public static void setLogWriter (PrintWriter out)", "description": "Sets the logging/tracing PrintWriter object\n that is used by the DriverManager and all drivers.\n\n If a security manager exists, its checkPermission\n method is first called with a SQLPermission(\"setLog\")\n permission to check that the caller is allowed to call setLogWriter."}, {"method_name": "getConnection", "method_sig": "public static Connection getConnection (String url,\n                                       Properties info)\n                                throws SQLException", "description": "Attempts to establish a connection to the given database URL.\n The DriverManager attempts to select an appropriate driver from\n the set of registered JDBC drivers.\n\nNote: If a property is specified as part of the url and\n is also specified in the Properties object, it is\n implementation-defined as to which value will take precedence.\n For maximum portability, an application should only specify a\n property once."}, {"method_name": "getConnection", "method_sig": "public static Connection getConnection (String url,\n                                       String user,\n                                       String password)\n                                throws SQLException", "description": "Attempts to establish a connection to the given database URL.\n The DriverManager attempts to select an appropriate driver from\n the set of registered JDBC drivers.\n\nNote: If the user or password property are\n also specified as part of the url, it is\n implementation-defined as to which value will take precedence.\n For maximum portability, an application should only specify a\n property once."}, {"method_name": "getConnection", "method_sig": "public static Connection getConnection (String url)\n                                throws SQLException", "description": "Attempts to establish a connection to the given database URL.\n The DriverManager attempts to select an appropriate driver from\n the set of registered JDBC drivers."}, {"method_name": "getDriver", "method_sig": "public static Driver getDriver (String url)\n                        throws SQLException", "description": "Attempts to locate a driver that understands the given URL.\n The DriverManager attempts to select an appropriate driver from\n the set of registered JDBC drivers."}, {"method_name": "registerDriver", "method_sig": "public static void registerDriver (Driver driver)\n                           throws SQLException", "description": "Registers the given driver with the DriverManager.\n A newly-loaded driver class should call\n the method registerDriver to make itself\n known to the DriverManager. If the driver is currently\n registered, no action is taken."}, {"method_name": "registerDriver", "method_sig": "public static void registerDriver (Driver driver,\n                                  DriverAction da)\n                           throws SQLException", "description": "Registers the given driver with the DriverManager.\n A newly-loaded driver class should call\n the method registerDriver to make itself\n known to the DriverManager. If the driver is currently\n registered, no action is taken."}, {"method_name": "deregisterDriver", "method_sig": "public static void deregisterDriver (Driver driver)\n                             throws SQLException", "description": "Removes the specified driver from the DriverManager's list of\n registered drivers.\n \n If a null value is specified for the driver to be removed, then no\n action is taken.\n \n If a security manager exists, its checkPermission\n method is first called with a SQLPermission(\"deregisterDriver\")\n permission to check that the caller is allowed to deregister a JDBC Driver.\n \n If the specified driver is not found in the list of registered drivers,\n then no action is taken.  If the driver was found, it will be removed\n from the list of registered drivers.\n \n If a DriverAction instance was specified when the JDBC driver was\n registered, its deregister method will be called\n prior to the driver being removed from the list of registered drivers."}, {"method_name": "getDrivers", "method_sig": "public static Enumeration<Driver> getDrivers()", "description": "Retrieves an Enumeration with all of the currently loaded JDBC drivers\n to which the current caller has access.\n\n Note: The classname of a driver can be found using\n d.getClass().getName()"}, {"method_name": "drivers", "method_sig": "public static Stream<Driver> drivers()", "description": "Retrieves a Stream with all of the currently loaded JDBC drivers\n to which the current caller has access."}, {"method_name": "setLoginTimeout", "method_sig": "public static void setLoginTimeout (int seconds)", "description": "Sets the maximum time in seconds that a driver will wait\n while attempting to connect to a database once the driver has\n been identified."}, {"method_name": "getLoginTimeout", "method_sig": "public static int getLoginTimeout()", "description": "Gets the maximum time in seconds that a driver can wait\n when attempting to log in to a database."}, {"method_name": "setLogStream", "method_sig": "@Deprecated(since=\"1.2\")\npublic static void setLogStream (PrintStream out)", "description": "Sets the logging/tracing PrintStream that is used\n by the DriverManager\n and all drivers.\n\n If a security manager exists, its checkPermission\n method is first called with a SQLPermission(\"setLog\")\n permission to check that the caller is allowed to call setLogStream."}, {"method_name": "getLogStream", "method_sig": "@Deprecated(since=\"1.2\")\npublic static PrintStream getLogStream()", "description": "Retrieves the logging/tracing PrintStream that is used by the DriverManager\n and all drivers."}, {"method_name": "println", "method_sig": "public static void println (String message)", "description": "Prints a message to the current JDBC log stream."}]}