{"name": "Class UnresolvedPermission", "module": "java.base", "package": "java.security", "text": "The UnresolvedPermission class is used to hold Permissions that\n were \"unresolved\" when the Policy was initialized.\n An unresolved permission is one whose actual Permission class\n does not yet exist at the time the Policy is initialized (see below).\n\n The policy for a Java runtime (specifying\n which permissions are available for code from various principals)\n is represented by a Policy object.\n Whenever a Policy is initialized or refreshed, Permission objects of\n appropriate classes are created for all permissions\n allowed by the Policy.\n\n Many permission class types\n referenced by the policy configuration are ones that exist\n locally (i.e., ones that can be found on CLASSPATH).\n Objects for such permissions can be instantiated during\n Policy initialization. For example, it is always possible\n to instantiate a java.io.FilePermission, since the\n FilePermission class is found on the CLASSPATH.\n\n Other permission classes may not yet exist during Policy\n initialization. For example, a referenced permission class may\n be in a JAR file that will later be loaded.\n For each such class, an UnresolvedPermission is instantiated.\n Thus, an UnresolvedPermission is essentially a \"placeholder\"\n containing information about the permission.\n\n Later, when code calls AccessController.checkPermission\n on a permission of a type that was previously unresolved,\n but whose class has since been loaded, previously-unresolved\n permissions of that type are \"resolved\". That is,\n for each such UnresolvedPermission, a new object of\n the appropriate class type is instantiated, based on the\n information in the UnresolvedPermission.\n\n  To instantiate the new class, UnresolvedPermission assumes\n the class provides a zero, one, and/or two-argument constructor.\n The zero-argument constructor would be used to instantiate\n a permission without a name and without actions.\n A one-arg constructor is assumed to take a String\n name as input, and a two-arg constructor is assumed to take a\n String name and String actions\n as input.  UnresolvedPermission may invoke a\n constructor with a null name and/or actions.\n If an appropriate permission constructor is not available,\n the UnresolvedPermission is ignored and the relevant permission\n will not be granted to executing code.\n\n  The newly created permission object replaces the\n UnresolvedPermission, which is removed.\n\n  Note that the getName method for an\n UnresolvedPermission returns the\n type (class name) for the underlying permission\n that has not been resolved.", "codes": ["public final class UnresolvedPermission\nextends Permission\nimplements Serializable"], "fields": [], "methods": [{"method_name": "implies", "method_sig": "public boolean implies (Permission p)", "description": "This method always returns false for unresolved permissions.\n That is, an UnresolvedPermission is never considered to\n imply another permission."}, {"method_name": "equals", "method_sig": "public boolean equals (Object obj)", "description": "Checks two UnresolvedPermission objects for equality.\n Checks that obj is an UnresolvedPermission, and has\n the same type (class) name, permission name, actions, and\n certificates as this object.\n\n  To determine certificate equality, this method only compares\n actual signer certificates.  Supporting certificate chains\n are not taken into consideration by this method."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Returns the hash code value for this object."}, {"method_name": "getActions", "method_sig": "public String getActions()", "description": "Returns the canonical string representation of the actions,\n which currently is the empty string \"\", since there are no actions for\n an UnresolvedPermission. That is, the actions for the\n permission that will be created when this UnresolvedPermission\n is resolved may be non-null, but an UnresolvedPermission\n itself is never considered to have any actions."}, {"method_name": "getUnresolvedType", "method_sig": "public String getUnresolvedType()", "description": "Get the type (class name) of the underlying permission that\n has not been resolved."}, {"method_name": "getUnresolvedName", "method_sig": "public String getUnresolvedName()", "description": "Get the target name of the underlying permission that\n has not been resolved."}, {"method_name": "getUnresolvedActions", "method_sig": "public String getUnresolvedActions()", "description": "Get the actions for the underlying permission that\n has not been resolved."}, {"method_name": "getUnresolvedCerts", "method_sig": "public Certificate[] getUnresolvedCerts()", "description": "Get the signer certificates (without any supporting chain)\n for the underlying permission that has not been resolved."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a string describing this UnresolvedPermission.  The convention\n is to specify the class name, the permission name, and the actions, in\n the following format: '(unresolved \"ClassName\" \"name\" \"actions\")'."}, {"method_name": "newPermissionCollection", "method_sig": "public PermissionCollection newPermissionCollection()", "description": "Returns a new PermissionCollection object for storing\n UnresolvedPermission  objects."}]}