{"name": "Class StringTokenizer", "module": "java.base", "package": "java.util", "text": "The string tokenizer class allows an application to break a\n string into tokens. The tokenization method is much simpler than\n the one used by the StreamTokenizer class. The\n StringTokenizer methods do not distinguish among\n identifiers, numbers, and quoted strings, nor do they recognize\n and skip comments.\n \n The set of delimiters (the characters that separate tokens) may\n be specified either at creation time or on a per-token basis.\n \n An instance of StringTokenizer behaves in one of two\n ways, depending on whether it was created with the\n returnDelims flag having the value true\n or false:\n \nIf the flag is false, delimiter characters serve to\n     separate tokens. A token is a maximal sequence of consecutive\n     characters that are not delimiters.\n If the flag is true, delimiter characters are themselves\n     considered to be tokens. A token is thus either one delimiter\n     character, or a maximal sequence of consecutive characters that are\n     not delimiters.\n \n A StringTokenizer object internally maintains a current\n position within the string to be tokenized. Some operations advance this\n current position past the characters processed.\n A token is returned by taking a substring of the string that was used to\n create the StringTokenizer object.\n \n The following is one example of the use of the tokenizer. The code:\n \n     StringTokenizer st = new StringTokenizer(\"this is a test\");\n     while (st.hasMoreTokens()) {\n         System.out.println(st.nextToken());\n     }\n \n\n prints the following output:\n \n     this\n     is\n     a\n     test\n \n\nStringTokenizer is a legacy class that is retained for\n compatibility reasons although its use is discouraged in new code. It is\n recommended that anyone seeking this functionality use the split\n method of String or the java.util.regex package instead.\n \n The following example illustrates how the String.split\n method can be used to break up a string into its basic tokens:\n \n     String[] result = \"this is a test\".split(\"\\\\s\");\n     for (int x=0; x<result.length; x++)\n         System.out.println(result[x]);\n \n\n prints the following output:\n \n     this\n     is\n     a\n     test\n ", "codes": ["public class StringTokenizer\nextends Object\nimplements Enumeration<Object>"], "fields": [], "methods": [{"method_name": "hasMoreTokens", "method_sig": "public boolean hasMoreTokens()", "description": "Tests if there are more tokens available from this tokenizer's string.\n If this method returns true, then a subsequent call to\n nextToken with no argument will successfully return a token."}, {"method_name": "nextToken", "method_sig": "public String nextToken()", "description": "Returns the next token from this string tokenizer."}, {"method_name": "nextToken", "method_sig": "public String nextToken (String delim)", "description": "Returns the next token in this string tokenizer's string. First,\n the set of characters considered to be delimiters by this\n StringTokenizer object is changed to be the characters in\n the string delim. Then the next token in the string\n after the current position is returned. The current position is\n advanced beyond the recognized token.  The new delimiter set\n remains the default after this call."}, {"method_name": "hasMoreElements", "method_sig": "public boolean hasMoreElements()", "description": "Returns the same value as the hasMoreTokens\n method. It exists so that this class can implement the\n Enumeration interface."}, {"method_name": "nextElement", "method_sig": "public Object nextElement()", "description": "Returns the same value as the nextToken method,\n except that its declared return value is Object rather than\n String. It exists so that this class can implement the\n Enumeration interface."}, {"method_name": "countTokens", "method_sig": "public int countTokens()", "description": "Calculates the number of times that this tokenizer's\n nextToken method can be called before it generates an\n exception. The current position is not advanced."}]}