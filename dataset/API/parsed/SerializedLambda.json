{"name": "Class SerializedLambda", "module": "java.base", "package": "java.lang.invoke", "text": "Serialized form of a lambda expression.  The properties of this class\n represent the information that is present at the lambda factory site, including\n static metafactory arguments such as the identity of the primary functional\n interface method and the identity of the implementation method, as well as\n dynamic metafactory arguments such as values captured from the lexical scope\n at the time of lambda capture.\n\n Implementors of serializable lambdas, such as compilers or language\n runtime libraries, are expected to ensure that instances deserialize properly.\n One means to do so is to ensure that the writeReplace method returns\n an instance of SerializedLambda, rather than allowing default\n serialization to proceed.\n\n SerializedLambda has a readResolve method that looks for\n a (possibly private) static method called\n $deserializeLambda$(SerializedLambda) in the capturing class, invokes\n that with itself as the first argument, and returns the result.  Lambda classes\n implementing $deserializeLambda$ are responsible for validating\n that the properties of the SerializedLambda are consistent with a\n lambda actually captured by that class.\n\n The identity of a function object produced by deserializing the serialized\n form is unpredictable, and therefore identity-sensitive operations (such as\n reference equality, object locking, and System.identityHashCode() may\n produce different results in different implementations, or even upon\n different deserializations in the same implementation.", "codes": ["public final class SerializedLambda\nextends Object\nimplements Serializable"], "fields": [], "methods": [{"method_name": "getCapturingClass", "method_sig": "public String getCapturingClass()", "description": "Get the name of the class that captured this lambda."}, {"method_name": "getFunctionalInterfaceClass", "method_sig": "public String getFunctionalInterfaceClass()", "description": "Get the name of the invoked type to which this\n lambda has been converted"}, {"method_name": "getFunctionalInterfaceMethodName", "method_sig": "public String getFunctionalInterfaceMethodName()", "description": "Get the name of the primary method for the functional interface\n to which this lambda has been converted."}, {"method_name": "getFunctionalInterfaceMethodSignature", "method_sig": "public String getFunctionalInterfaceMethodSignature()", "description": "Get the signature of the primary method for the functional\n interface to which this lambda has been converted."}, {"method_name": "getImplClass", "method_sig": "public String getImplClass()", "description": "Get the name of the class containing the implementation\n method."}, {"method_name": "getImplMethodName", "method_sig": "public String getImplMethodName()", "description": "Get the name of the implementation method."}, {"method_name": "getImplMethodSignature", "method_sig": "public String getImplMethodSignature()", "description": "Get the signature of the implementation method."}, {"method_name": "getImplMethodKind", "method_sig": "public int getImplMethodKind()", "description": "Get the method handle kind (see MethodHandleInfo) of\n the implementation method."}, {"method_name": "getInstantiatedMethodType", "method_sig": "public final String getInstantiatedMethodType()", "description": "Get the signature of the primary functional interface method\n after type variables are substituted with their instantiation\n from the capture site."}, {"method_name": "getCapturedArgCount", "method_sig": "public int getCapturedArgCount()", "description": "Get the count of dynamic arguments to the lambda capture site."}, {"method_name": "getCapturedArg", "method_sig": "public Object getCapturedArg (int i)", "description": "Get a dynamic argument to the lambda capture site."}]}