{"name": "Interface Array", "module": "java.sql", "package": "java.sql", "text": "The mapping in the Java programming language for the SQL type\n ARRAY.\n By default, an Array value is a transaction-duration\n reference to an SQL ARRAY value.  By default, an Array\n object is implemented using an SQL LOCATOR(array) internally, which\n means that an Array object contains a logical pointer\n to the data in the SQL ARRAY value rather\n than containing the ARRAY value's data.\n \n The Array interface provides methods for bringing an SQL\n ARRAY value's data to the client as either an array or a\n ResultSet object.\n If the elements of the SQL ARRAY\n are a UDT, they may be custom mapped.  To create a custom mapping,\n a programmer must do two things:\n \ncreate a class that implements the SQLData\n interface for the UDT to be custom mapped.\n make an entry in a type map that contains\n   \nthe fully-qualified SQL type name of the UDT\n   the Class object for the class implementing\n       SQLData\n\n\n\n When a type map with an entry for\n the base type is supplied to the methods getArray\n and getResultSet, the mapping\n it contains will be used to map the elements of the ARRAY value.\n If no type map is supplied, which would typically be the case,\n the connection's type map is used by default.\n If the connection's type map or a type map supplied to a method has no entry\n for the base type, the elements are mapped according to the standard mapping.\n \n All methods on the Array interface must be fully implemented if the\n JDBC driver supports the data type.", "codes": ["public interface Array"], "fields": [], "methods": [{"method_name": "getBaseTypeName", "method_sig": "String getBaseTypeName()\n                throws SQLException", "description": "Retrieves the SQL type name of the elements in\n the array designated by this Array object.\n If the elements are a built-in type, it returns\n the database-specific type name of the elements.\n If the elements are a user-defined type (UDT),\n this method returns the fully-qualified SQL type name."}, {"method_name": "getBaseType", "method_sig": "int getBaseType()\n         throws SQLException", "description": "Retrieves the JDBC type of the elements in the array designated\n by this Array object."}, {"method_name": "getArray", "method_sig": "Object getArray()\n         throws SQLException", "description": "Retrieves the contents of the SQL ARRAY value designated\n by this\n Array object in the form of an array in the Java\n programming language. This version of the method getArray\n uses the type map associated with the connection for customizations of\n the type mappings.\n \nNote: When getArray is used to materialize\n a base type that maps to a primitive data type, then it is\n implementation-defined whether the array returned is an array of\n that primitive data type or an array of Object."}, {"method_name": "getArray", "method_sig": "Object getArray (Map<String, Class<?>> map)\n         throws SQLException", "description": "Retrieves the contents of the SQL ARRAY value designated by this\n Array object.\n This method uses\n the specified map for type map customizations\n unless the base type of the array does not match a user-defined\n type in map, in which case it\n uses the standard mapping. This version of the method\n getArray uses either the given type map or the standard mapping;\n it never uses the type map associated with the connection.\n \nNote: When getArray is used to materialize\n a base type that maps to a primitive data type, then it is\n implementation-defined whether the array returned is an array of\n that primitive data type or an array of Object."}, {"method_name": "getArray", "method_sig": "Object getArray (long index,\n                int count)\n         throws SQLException", "description": "Retrieves a slice of the SQL ARRAY\n value designated by this Array object, beginning with the\n specified index and containing up to count\n successive elements of the SQL array.  This method uses the type map\n associated with the connection for customizations of the type mappings.\n \nNote: When getArray is used to materialize\n a base type that maps to a primitive data type, then it is\n implementation-defined whether the array returned is an array of\n that primitive data type or an array of Object."}, {"method_name": "getArray", "method_sig": "Object getArray (long index,\n                int count,\n                Map<String, Class<?>> map)\n         throws SQLException", "description": "Retrieves a slice of the SQL ARRAY value\n designated by this Array object, beginning with the specified\n index and containing up to count\n successive elements of the SQL array.\n \n This method uses\n the specified map for type map customizations\n unless the base type of the array does not match a user-defined\n type in map, in which case it\n uses the standard mapping. This version of the method\n getArray uses either the given type map or the standard mapping;\n it never uses the type map associated with the connection.\n \nNote: When getArray is used to materialize\n a base type that maps to a primitive data type, then it is\n implementation-defined whether the array returned is an array of\n that primitive data type or an array of Object."}, {"method_name": "getResultSet", "method_sig": "ResultSet getResultSet()\n                throws SQLException", "description": "Retrieves a result set that contains the elements of the SQL\n ARRAY value\n designated by this Array object.  If appropriate,\n the elements of the array are mapped using the connection's type\n map; otherwise, the standard mapping is used.\n \n The result set contains one row for each array element, with\n two columns in each row.  The second column stores the element\n value; the first column stores the index into the array for\n that element (with the first array element being at index 1).\n The rows are in ascending order corresponding to\n the order of the indices."}, {"method_name": "getResultSet", "method_sig": "ResultSet getResultSet (Map<String, Class<?>> map)\n                throws SQLException", "description": "Retrieves a result set that contains the elements of the SQL\n ARRAY value designated by this Array object.\n This method uses\n the specified map for type map customizations\n unless the base type of the array does not match a user-defined\n type in map, in which case it\n uses the standard mapping. This version of the method\n getResultSet uses either the given type map or the standard mapping;\n it never uses the type map associated with the connection.\n \n The result set contains one row for each array element, with\n two columns in each row.  The second column stores the element\n value; the first column stores the index into the array for\n that element (with the first array element being at index 1).\n The rows are in ascending order corresponding to\n the order of the indices."}, {"method_name": "getResultSet", "method_sig": "ResultSet getResultSet (long index,\n                       int count)\n                throws SQLException", "description": "Retrieves a result set holding the elements of the subarray that\n starts at index index and contains up to\n count successive elements.  This method uses\n the connection's type map to map the elements of the array if\n the map contains an entry for the base type. Otherwise, the\n standard mapping is used.\n \n The result set has one row for each element of the SQL array\n designated by this object, with the first row containing the\n element at index index.  The result set has\n up to count rows in ascending order based on the\n indices.  Each row has two columns:  The second column stores\n the element value; the first column stores the index into the\n array for that element."}, {"method_name": "getResultSet", "method_sig": "ResultSet getResultSet (long index,\n                       int count,\n                       Map<String, Class<?>> map)\n                throws SQLException", "description": "Retrieves a result set holding the elements of the subarray that\n starts at index index and contains up to\n count successive elements.\n This method uses\n the specified map for type map customizations\n unless the base type of the array does not match a user-defined\n type in map, in which case it\n uses the standard mapping. This version of the method\n getResultSet uses either the given type map or the standard mapping;\n it never uses the type map associated with the connection.\n \n The result set has one row for each element of the SQL array\n designated by this object, with the first row containing the\n element at index index.  The result set has\n up to count rows in ascending order based on the\n indices.  Each row has two columns:  The second column stores\n the element value; the first column stores the index into the\n array for that element."}, {"method_name": "free", "method_sig": "void free()\n   throws SQLException", "description": "This method frees the Array object and releases the resources that\n it holds. The object is invalid once the free\n method is called.\n \n After free has been called, any attempt to invoke a\n method other than free will result in a SQLException\n being thrown.  If free is called multiple times, the subsequent\n calls to free are treated as a no-op."}]}