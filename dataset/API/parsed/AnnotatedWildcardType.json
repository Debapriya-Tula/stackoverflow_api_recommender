{"name": "Interface AnnotatedWildcardType", "module": "java.base", "package": "java.lang.reflect", "text": "AnnotatedWildcardType represents the potentially annotated use of a\n wildcard type argument, whose upper or lower bounds may themselves represent\n annotated uses of types.", "codes": ["public interface AnnotatedWildcardType\nextends AnnotatedType"], "fields": [], "methods": [{"method_name": "getAnnotatedLowerBounds", "method_sig": "AnnotatedType[] getAnnotatedLowerBounds()", "description": "Returns the potentially annotated lower bounds of this wildcard type.\n If no lower bound is explicitly declared, the lower bound is the\n type of null. In this case, a zero length array is returned."}, {"method_name": "getAnnotatedUpperBounds", "method_sig": "AnnotatedType[] getAnnotatedUpperBounds()", "description": "Returns the potentially annotated upper bounds of this wildcard type.\n If no upper bound is explicitly declared, the upper bound is\n unannotated Object"}, {"method_name": "getAnnotatedOwnerType", "method_sig": "AnnotatedType getAnnotatedOwnerType()", "description": "Returns the potentially annotated type that this type is a member of, if\n this type represents a nested type. For example, if this type is\n @TA O<T>.I<S>, return a representation of @TA O<T>.\n\n Returns null for an AnnotatedType that is an instance\n     of AnnotatedWildcardType."}]}