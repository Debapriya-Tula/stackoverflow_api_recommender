{"name": "Interface MBeanServer", "module": "java.management", "package": "javax.management", "text": "This is the interface for MBean manipulation on the agent\n side. It contains the methods necessary for the creation,\n registration, and deletion of MBeans as well as the access methods\n for registered MBeans.  This is the core component of the JMX\n infrastructure.\nUser code does not usually implement this interface.  Instead,\n an object that implements this interface is obtained with one of\n the methods in the MBeanServerFactory class.\nEvery MBean which is added to the MBean server becomes\n manageable: its attributes and operations become remotely\n accessible through the connectors/adaptors connected to that MBean\n server.  A Java object cannot be registered in the MBean server\n unless it is a JMX compliant MBean.\nWhen an MBean is registered or unregistered in the\n MBean server a MBeanServerNotification Notification is emitted. To register an\n object as listener to MBeanServerNotifications you should call the\n MBean server method addNotificationListener with ObjectName the\n ObjectName of the MBeanServerDelegate.  This\n ObjectName is: \nJMImplementation:type=MBeanServerDelegate.\nAn object obtained from the createMBeanServer or\n newMBeanServer\n methods of the MBeanServerFactory class applies security\n checks to its methods, as follows.\nFirst, if there is no security manager (System.getSecurityManager() is null), then an implementation of\n this interface is free not to make any checks.\nAssuming that there is a security manager, or that the\n implementation chooses to make checks anyway, the checks are made\n as detailed below.  In what follows, and unless otherwise specified,\n className is the\n string returned by MBeanInfo.getClassName() for the target\n MBean.\nIf a security check fails, the method throws SecurityException.\nFor methods that can throw InstanceNotFoundException,\n this exception is thrown for a non-existent MBean, regardless of\n permissions.  This is because a non-existent MBean has no\n className.\n\nFor the invoke method, the caller's\n permissions must imply MBeanPermission(className, operationName, name, \"invoke\").\nFor the getAttribute method, the\n caller's permissions must imply MBeanPermission(className, attribute, name, \"getAttribute\").\nFor the getAttributes method, the\n caller's permissions must imply MBeanPermission(className, null, name, \"getAttribute\").\n Additionally, for each attribute a in the AttributeList, if the caller's permissions do not imply MBeanPermission(className, a, name, \"getAttribute\"), the\n MBean server will behave as if that attribute had not been in the\n supplied list.\nFor the setAttribute method, the\n caller's permissions must imply MBeanPermission(className, attrName, name, \"setAttribute\"), where\n attrName is attribute.getName().\nFor the setAttributes method, the\n caller's permissions must imply MBeanPermission(className, null, name, \"setAttribute\").\n Additionally, for each attribute a in the AttributeList, if the caller's permissions do not imply MBeanPermission(className, a, name, \"setAttribute\"), the\n MBean server will behave as if that attribute had not been in the\n supplied list.\nFor the addNotificationListener methods,\n the caller's permissions must imply MBeanPermission(className, null, name,\n \"addNotificationListener\").\nFor the removeNotificationListener methods,\n the caller's permissions must imply MBeanPermission(className, null, name,\n \"removeNotificationListener\").\nFor the getMBeanInfo method, the\n caller's permissions must imply MBeanPermission(className, null, name, \"getMBeanInfo\").\nFor the getObjectInstance method,\n the caller's permissions must imply MBeanPermission(className, null, name, \"getObjectInstance\").\nFor the isInstanceOf method, the\n caller's permissions must imply MBeanPermission(className, null, name, \"isInstanceOf\").\nFor the queryMBeans method, the\n caller's permissions must imply MBeanPermission(null, null, null, \"queryMBeans\").\n Additionally, for each MBean n that matches name,\n if the caller's permissions do not imply MBeanPermission(className, null, n, \"queryMBeans\"), the\n MBean server will behave as if that MBean did not exist.\nCertain query elements perform operations on the MBean server.\n If the caller does not have the required permissions for a given\n MBean, that MBean will not be included in the result of the query.\n The standard query elements that are affected are Query.attr(String), Query.attr(String,String), and Query.classattr().\nFor the queryNames method, the checks\n are the same as for queryMBeans except that\n \"queryNames\" is used instead of\n \"queryMBeans\" in the MBeanPermission\n objects.  Note that a \"queryMBeans\" permission implies\n the corresponding \"queryNames\" permission.\nFor the getDomains method, the caller's\n permissions must imply MBeanPermission(null, null, null, \"getDomains\").  Additionally,\n for each domain d in the returned array, if the caller's\n permissions do not imply MBeanPermission(null, null, new ObjectName(\"d:x=x\"),\n \"getDomains\"), the domain is eliminated from the array.  Here,\n x=x is any key=value pair, needed to\n satisfy ObjectName's constructor but not otherwise relevant.\nFor the getClassLoader method, the\n caller's permissions must imply MBeanPermission(className, null, loaderName,\n \"getClassLoader\").\nFor the getClassLoaderFor method,\n the caller's permissions must imply MBeanPermission(className, null, mbeanName,\n \"getClassLoaderFor\").\nFor the getClassLoaderRepository method, the caller's permissions must\n imply MBeanPermission(null, null, null, \"getClassLoaderRepository\").\nFor the deprecated deserialize methods, the\n required permissions are the same as for the methods that replace\n them.\nFor the instantiate methods, the caller's\n permissions must imply MBeanPermission(className, null, null, \"instantiate\"),\n where className is the name of the class which is to\n be instantiated.\nFor the registerMBean method, the\n caller's permissions must imply MBeanPermission(className, null, name, \"registerMBean\").\n\n If the MBeanPermission check succeeds, the MBean's\n class is validated by checking that its ProtectionDomain implies MBeanTrustPermission(\"register\").\nFinally, if the name argument is null, another\n MBeanPermission check is made using the\n ObjectName returned by MBeanRegistration.preRegister.\nFor the createMBean methods, the caller's\n permissions must imply the permissions needed by the equivalent\n instantiate followed by\n registerMBean.\nFor the unregisterMBean method,\n the caller's permissions must imply MBeanPermission(className, null, name, \"unregisterMBean\").\n", "codes": ["public interface MBeanServer\nextends MBeanServerConnection"], "fields": [], "methods": [{"method_name": "createMBean", "method_sig": "ObjectInstance createMBean (String className,\n                           ObjectName name)\n                    throws ReflectionException,\n                           InstanceAlreadyExistsException,\n                           MBeanRegistrationException,\n                           MBeanException,\n                           NotCompliantMBeanException", "description": "Instantiates and registers an MBean in the MBean server.  The\n MBean server will use its Default Loader\n Repository to load the class of the MBean.  An object name is\n associated with the MBean.  If the object name given is null, the\n MBean must provide its own name by implementing the MBeanRegistration interface\n and returning the name from the preRegister method.\nThis method is equivalent to createMBean(className, name, (Object[]) null, (String[])\n null).\nIf this method successfully creates an MBean, a notification\n is sent as described above."}, {"method_name": "createMBean", "method_sig": "ObjectInstance createMBean (String className,\n                           ObjectName name,\n                           ObjectName loaderName)\n                    throws ReflectionException,\n                           InstanceAlreadyExistsException,\n                           MBeanRegistrationException,\n                           MBeanException,\n                           NotCompliantMBeanException,\n                           InstanceNotFoundException", "description": "Instantiates and registers an MBean in the MBean server.  The\n class loader to be used is identified by its object name. An\n object name is associated with the MBean. If the object name of\n the loader is null, the ClassLoader that loaded the MBean\n server will be used.  If the MBean's object name given is null,\n the MBean must provide its own name by implementing the MBeanRegistration interface\n and returning the name from the preRegister method.\nThis method is equivalent to createMBean(className, name, loaderName, (Object[]) null,\n (String[]) null).\nIf this method successfully creates an MBean, a notification\n is sent as described above."}, {"method_name": "createMBean", "method_sig": "ObjectInstance createMBean (String className,\n                           ObjectName name,\n                           Object[] params,\n                           String[] signature)\n                    throws ReflectionException,\n                           InstanceAlreadyExistsException,\n                           MBeanRegistrationException,\n                           MBeanException,\n                           NotCompliantMBeanException", "description": "Instantiates and registers an MBean in the MBean server.  The\n MBean server will use its Default Loader\n Repository to load the class of the MBean.  An object name is\n associated with the MBean.  If the object name given is null, the\n MBean must provide its own name by implementing the MBeanRegistration interface\n and returning the name from the preRegister method.\n If this method successfully creates an MBean, a notification\n is sent as described above."}, {"method_name": "createMBean", "method_sig": "ObjectInstance createMBean (String className,\n                           ObjectName name,\n                           ObjectName loaderName,\n                           Object[] params,\n                           String[] signature)\n                    throws ReflectionException,\n                           InstanceAlreadyExistsException,\n                           MBeanRegistrationException,\n                           MBeanException,\n                           NotCompliantMBeanException,\n                           InstanceNotFoundException", "description": "Instantiates and registers an MBean in the MBean server.  The\n class loader to be used is identified by its object name. An\n object name is associated with the MBean. If the object name of\n the loader is not specified, the ClassLoader that loaded the\n MBean server will be used.  If the MBean object name given is\n null, the MBean must provide its own name by implementing the\n MBeanRegistration\n interface and returning the name from the preRegister method.\n If this method successfully creates an MBean, a notification\n is sent as described above."}, {"method_name": "registerMBean", "method_sig": "ObjectInstance registerMBean (Object object,\n                             ObjectName name)\n                      throws InstanceAlreadyExistsException,\n                             MBeanRegistrationException,\n                             NotCompliantMBeanException", "description": "Registers a pre-existing object as an MBean with the MBean\n server. If the object name given is null, the MBean must\n provide its own name by implementing the MBeanRegistration interface\n and returning the name from the preRegister method.\n\n If this method successfully registers an MBean, a notification\n is sent as described above."}, {"method_name": "unregisterMBean", "method_sig": "void unregisterMBean (ObjectName name)\n              throws InstanceNotFoundException,\n                     MBeanRegistrationException", "description": "Unregisters an MBean from the MBean server. The MBean is\n identified by its object name. Once the method has been\n invoked, the MBean may no longer be accessed by its object\n name.\n\n If this method successfully unregisters an MBean, a notification\n is sent as described above."}, {"method_name": "queryMBeans", "method_sig": "Set<ObjectInstance> queryMBeans (ObjectName name,\n                                QueryExp query)", "description": "Gets MBeans controlled by the MBean server. This method allows\n any of the following to be obtained: All MBeans, a set of\n MBeans specified by pattern matching on the\n ObjectName and/or a Query expression, a specific\n MBean. When the object name is null or no domain and key\n properties are specified, all objects are to be selected (and\n filtered if a query is specified). It returns the set of\n ObjectInstance objects (containing the\n ObjectName and the Java Class name) for the\n selected MBeans."}, {"method_name": "queryNames", "method_sig": "Set<ObjectName> queryNames (ObjectName name,\n                           QueryExp query)", "description": "Gets the names of MBeans controlled by the MBean server. This\n method enables any of the following to be obtained: The names\n of all MBeans, the names of a set of MBeans specified by\n pattern matching on the ObjectName and/or a Query\n expression, a specific MBean name (equivalent to testing\n whether an MBean is registered). When the object name is null\n or no domain and key properties are specified, all objects are\n selected (and filtered if a query is specified). It returns the\n set of ObjectNames for the MBeans selected."}, {"method_name": "isRegistered", "method_sig": "boolean isRegistered (ObjectName name)", "description": "Description copied from interface:\u00a0MBeanServerConnection"}, {"method_name": "getMBeanCount", "method_sig": "Integer getMBeanCount()", "description": "Returns the number of MBeans registered in the MBean server."}, {"method_name": "getAttribute", "method_sig": "Object getAttribute (ObjectName name,\n                    String attribute)\n             throws MBeanException,\n                    AttributeNotFoundException,\n                    InstanceNotFoundException,\n                    ReflectionException", "description": "Description copied from interface:\u00a0MBeanServerConnection"}, {"method_name": "getAttributes", "method_sig": "AttributeList getAttributes (ObjectName name,\n                            String[] attributes)\n                     throws InstanceNotFoundException,\n                            ReflectionException", "description": "Description copied from interface:\u00a0MBeanServerConnection"}, {"method_name": "setAttribute", "method_sig": "void setAttribute (ObjectName name,\n                  Attribute attribute)\n           throws InstanceNotFoundException,\n                  AttributeNotFoundException,\n                  InvalidAttributeValueException,\n                  MBeanException,\n                  ReflectionException", "description": "Description copied from interface:\u00a0MBeanServerConnection"}, {"method_name": "setAttributes", "method_sig": "AttributeList setAttributes (ObjectName name,\n                            AttributeList attributes)\n                     throws InstanceNotFoundException,\n                            ReflectionException", "description": "Description copied from interface:\u00a0MBeanServerConnection"}, {"method_name": "addNotificationListener", "method_sig": "void addNotificationListener (ObjectName name,\n                             NotificationListener listener,\n                             NotificationFilter filter,\n                             Object handback)\n                      throws InstanceNotFoundException", "description": "Adds a listener to a registered MBean.\n Notifications emitted by the MBean will be forwarded to the listener.\n If the source of the notification\n is a reference to an MBean object, the MBean server will replace it\n by that MBean's ObjectName.  Otherwise the source is unchanged."}, {"method_name": "addNotificationListener", "method_sig": "void addNotificationListener (ObjectName name,\n                             ObjectName listener,\n                             NotificationFilter filter,\n                             Object handback)\n                      throws InstanceNotFoundException", "description": "Adds a listener to a registered MBean.\nA notification emitted by an MBean will be forwarded by the\n MBeanServer to the listener.  If the source of the notification\n is a reference to an MBean object, the MBean server will\n replace it by that MBean's ObjectName.  Otherwise the source is\n unchanged.\nThe listener object that receives notifications is the one\n that is registered with the given name at the time this method\n is called.  Even if it is subsequently unregistered, it will\n continue to receive notifications."}, {"method_name": "instantiate", "method_sig": "Object instantiate (String className)\n            throws ReflectionException,\n                   MBeanException", "description": "Instantiates an object using the list of all class loaders\n registered in the MBean server's Class Loader\n Repository.  The object's class should have a public\n constructor.  This method returns a reference to the newly\n created object.  The newly created object is not registered in\n the MBean server.\nThis method is equivalent to instantiate(className, (Object[]) null, (String[]) null)."}, {"method_name": "instantiate", "method_sig": "Object instantiate (String className,\n                   ObjectName loaderName)\n            throws ReflectionException,\n                   MBeanException,\n                   InstanceNotFoundException", "description": "Instantiates an object using the class Loader specified by its\n ObjectName.  If the loader name is null, the\n ClassLoader that loaded the MBean Server will be used.  The\n object's class should have a public constructor.  This method\n returns a reference to the newly created object.  The newly\n created object is not registered in the MBean server.\nThis method is equivalent to instantiate(className, loaderName, (Object[]) null, (String[])\n null)."}, {"method_name": "instantiate", "method_sig": "Object instantiate (String className,\n                   Object[] params,\n                   String[] signature)\n            throws ReflectionException,\n                   MBeanException", "description": "Instantiates an object using the list of all class loaders\n registered in the MBean server Class Loader\n Repository.  The object's class should have a public\n constructor.  The call returns a reference to the newly created\n object.  The newly created object is not registered in the\n MBean server."}, {"method_name": "instantiate", "method_sig": "Object instantiate (String className,\n                   ObjectName loaderName,\n                   Object[] params,\n                   String[] signature)\n            throws ReflectionException,\n                   MBeanException,\n                   InstanceNotFoundException", "description": "Instantiates an object. The class loader to be used is\n identified by its object name. If the object name of the loader\n is null, the ClassLoader that loaded the MBean server will be\n used.  The object's class should have a public constructor.\n The call returns a reference to the newly created object.  The\n newly created object is not registered in the MBean server."}, {"method_name": "deserialize", "method_sig": "@Deprecated(since=\"1.5\")\ndefault ObjectInputStream deserialize (ObjectName name,\n                                      byte[] data)\n                               throws InstanceNotFoundException,\n                                      OperationsException", "description": "De-serializes a byte array in the context of the class loader\n of an MBean."}, {"method_name": "deserialize", "method_sig": "@Deprecated(since=\"1.5\")\ndefault ObjectInputStream deserialize (String className,\n                                      byte[] data)\n                               throws OperationsException,\n                                      ReflectionException", "description": "De-serializes a byte array in the context of a given MBean\n class loader.  The class loader is found by loading the class\n className through the Class Loader\n Repository.  The resultant class's class loader is the one to\n use."}, {"method_name": "deserialize", "method_sig": "@Deprecated(since=\"1.5\")\ndefault ObjectInputStream deserialize (String className,\n                                      ObjectName loaderName,\n                                      byte[] data)\n                               throws InstanceNotFoundException,\n                                      OperationsException,\n                                      ReflectionException", "description": "De-serializes a byte array in the context of a given MBean\n class loader.  The class loader is the one that loaded the\n class with name \"className\".  The name of the class loader to\n be used for loading the specified class is specified.  If null,\n the MBean Server's class loader will be used."}, {"method_name": "getClassLoaderFor", "method_sig": "ClassLoader getClassLoaderFor (ObjectName mbeanName)\n                       throws InstanceNotFoundException", "description": "Return the ClassLoader that was used for\n loading the class of the named MBean."}, {"method_name": "getClassLoader", "method_sig": "ClassLoader getClassLoader (ObjectName loaderName)\n                    throws InstanceNotFoundException", "description": "Return the named ClassLoader."}, {"method_name": "getClassLoaderRepository", "method_sig": "ClassLoaderRepository getClassLoaderRepository()", "description": "Return the ClassLoaderRepository for this MBeanServer."}]}