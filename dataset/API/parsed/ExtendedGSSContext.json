{"name": "Interface ExtendedGSSContext", "module": "jdk.security.jgss", "package": "com.sun.security.jgss", "text": "The extended GSSContext interface for supporting additional\n functionalities not defined by org.ietf.jgss.GSSContext,\n such as querying context-specific attributes.", "codes": ["public interface ExtendedGSSContext\nextends GSSContext"], "fields": [], "methods": [{"method_name": "inquireSecContext", "method_sig": "Object inquireSecContext (InquireType type)\n                  throws GSSException", "description": "Return the mechanism-specific attribute associated with type.\n \n If there is a security manager, an InquireSecContextPermission\n with the name type.mech must be granted. Otherwise, this could\n result in a SecurityException.\n \n Example:\n \n      GSSContext ctxt = m.createContext(...)\n      // Establishing the context\n      if (ctxt instanceof ExtendedGSSContext) {\n          ExtendedGSSContext ex = (ExtendedGSSContext)ctxt;\n          try {\n              Key key = (key)ex.inquireSecContext(\n                      InquireType.KRB5_GET_SESSION_KEY);\n              // read key info\n          } catch (GSSException gsse) {\n              // deal with exception\n          }\n      }\n "}, {"method_name": "requestDelegPolicy", "method_sig": "void requestDelegPolicy (boolean state)\n                 throws GSSException", "description": "Requests that the delegation policy be respected. When a true value is\n requested, the underlying context would use the delegation policy\n defined by the environment as a hint to determine whether credentials\n delegation should be performed. This request can only be made on the\n context initiator's side and it has to be done prior to the first\n call to initSecContext.\n \n When this flag is false, delegation will only be tried when the\n credentials delegation flag\n is true.\n \n When this flag is true but the\n credentials delegation flag\n is false, delegation will be only tried if the delegation policy permits\n delegation.\n \n When both this flag and the\n credentials delegation flag\n are true, delegation will be always tried. However, if the delegation\n policy does not permit delegation, the value of\n getDelegPolicyState() will be false, even\n if delegation is performed successfully.\n \n In any case, if the delegation is not successful, the value returned\n by GSSContext.getCredDelegState() is false, and the value\n returned by getDelegPolicyState() is also false.\n \n Not all mechanisms support delegation policy. Therefore, the\n application should check to see if the request was honored with the\n getDelegPolicyState method. When\n delegation policy is not supported, requestDelegPolicy\n should return silently without throwing an exception.\n \n Note: for the Kerberos 5 mechanism, the delegation policy is expressed\n through the OK-AS-DELEGATE flag in the service ticket. When it's true,\n the KDC permits delegation to the target server. In a cross-realm\n environment, in order for delegation be permitted, all cross-realm TGTs\n on the authentication path must also have the OK-AS-DELAGATE flags set."}, {"method_name": "getDelegPolicyState", "method_sig": "boolean getDelegPolicyState()", "description": "Returns the delegation policy response. Called after a security context\n is established. This method can be only called on the initiator's side.\n See requestDelegPolicy(boolean)."}]}