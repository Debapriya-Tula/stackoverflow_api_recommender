{"name": "Class Locale", "module": "java.base", "package": "java.util", "text": "A Locale object represents a specific geographical, political,\n or cultural region. An operation that requires a Locale to perform\n its task is called locale-sensitive and uses the Locale\n to tailor information for the user. For example, displaying a number\n is a locale-sensitive operation\u2014 the number should be formatted\n according to the customs and conventions of the user's native country,\n region, or culture.\n\n  The Locale class implements IETF BCP 47 which is composed of\n RFC 4647 \"Matching of Language\n Tags\" and RFC 5646 \"Tags\n for Identifying Languages\" with support for the LDML (UTS#35, \"Unicode\n Locale Data Markup Language\") BCP 47-compatible extensions for locale data\n exchange.\n\n  A Locale object logically consists of the fields\n described below.\n\n \nlanguage\nISO 639 alpha-2 or alpha-3 language code, or registered\n   language subtags up to 8 alpha letters (for future enhancements).\n   When a language has both an alpha-2 code and an alpha-3 code, the\n   alpha-2 code must be used.  You can find a full list of valid\n   language codes in the IANA Language Subtag Registry (search for\n   \"Type: language\").  The language field is case insensitive, but\n   Locale always canonicalizes to lower case.\nWell-formed language values have the form\n   [a-zA-Z]{2,8}.  Note that this is not the full\n   BCP47 language production, since it excludes extlang.  They are\n   not needed since modern three-letter language codes replace\n   them.\nExample: \"en\" (English), \"ja\" (Japanese), \"kok\" (Konkani)\nscript\nISO 15924 alpha-4 script code.  You can find a full list of\n   valid script codes in the IANA Language Subtag Registry (search\n   for \"Type: script\").  The script field is case insensitive, but\n   Locale always canonicalizes to title case (the first\n   letter is upper case and the rest of the letters are lower\n   case).\nWell-formed script values have the form\n   [a-zA-Z]{4}\nExample: \"Latn\" (Latin), \"Cyrl\" (Cyrillic)\ncountry (region)\nISO 3166 alpha-2 country code or UN M.49 numeric-3 area code.\n   You can find a full list of valid country and region codes in the\n   IANA Language Subtag Registry (search for \"Type: region\").  The\n   country (region) field is case insensitive, but\n   Locale always canonicalizes to upper case.\nWell-formed country/region values have\n   the form [a-zA-Z]{2} | [0-9]{3}\nExample: \"US\" (United States), \"FR\" (France), \"029\"\n   (Caribbean)\nvariant\nAny arbitrary value used to indicate a variation of a\n   Locale.  Where there are two or more variant values\n   each indicating its own semantics, these values should be ordered\n   by importance, with most important first, separated by\n   underscore('_').  The variant field is case sensitive.\nNote: IETF BCP 47 places syntactic restrictions on variant\n   subtags.  Also BCP 47 subtags are strictly used to indicate\n   additional variations that define a language or its dialects that\n   are not covered by any combinations of language, script and\n   region subtags.  You can find a full list of valid variant codes\n   in the IANA Language Subtag Registry (search for \"Type: variant\").\n\n   However, the variant field in Locale has\n   historically been used for any kind of variation, not just\n   language variations.  For example, some supported variants\n   available in Java SE Runtime Environments indicate alternative\n   cultural behaviors such as calendar type or number script.  In\n   BCP 47 this kind of information, which does not identify the\n   language, is supported by extension subtags or private use\n   subtags.\nWell-formed variant values have the form SUBTAG\n   (('_'|'-') SUBTAG)* where SUBTAG =\n   [0-9][0-9a-zA-Z]{3} | [0-9a-zA-Z]{5,8}. (Note: BCP 47 only\n   uses hyphen ('-') as a delimiter, this is more lenient).\nExample: \"polyton\" (Polytonic Greek), \"POSIX\"\nextensions\nA map from single character keys to string values, indicating\n   extensions apart from language identification.  The extensions in\n   Locale implement the semantics and syntax of BCP 47\n   extension subtags and private use subtags. The extensions are\n   case insensitive, but Locale canonicalizes all\n   extension keys and values to lower case. Note that extensions\n   cannot have empty values.\nWell-formed keys are single characters from the set\n   [0-9a-zA-Z].  Well-formed values have the form\n   SUBTAG ('-' SUBTAG)* where for the key 'x'\n   SUBTAG = [0-9a-zA-Z]{1,8} and for other keys\n   SUBTAG = [0-9a-zA-Z]{2,8} (that is, 'x' allows\n   single-character subtags).\nExample: key=\"u\"/value=\"ca-japanese\" (Japanese Calendar),\n   key=\"x\"/value=\"java-1-7\"\n\nNote: Although BCP 47 requires field values to be registered\n in the IANA Language Subtag Registry, the Locale class\n does not provide any validation features.  The Builder\n only checks if an individual field satisfies the syntactic\n requirement (is well-formed), but does not validate the value\n itself.  See Locale.Builder for details.\n\n Unicode locale/language extension\nUTS#35, \"Unicode Locale Data Markup Language\" defines optional\n attributes and keywords to override or refine the default behavior\n associated with a locale.  A keyword is represented by a pair of\n key and type.  For example, \"nu-thai\" indicates that Thai local\n digits (value:\"thai\") should be used for formatting numbers\n (key:\"nu\").\n\n The keywords are mapped to a BCP 47 extension value using the\n extension key 'u' (UNICODE_LOCALE_EXTENSION).  The above\n example, \"nu-thai\", becomes the extension \"u-nu-thai\".\n\n Thus, when a Locale object contains Unicode locale\n attributes and keywords,\n getExtension(UNICODE_LOCALE_EXTENSION) will return a\n String representing this information, for example, \"nu-thai\".  The\n Locale class also provides getUnicodeLocaleAttributes(), getUnicodeLocaleKeys(), and\n getUnicodeLocaleType(java.lang.String) which allow you to access Unicode\n locale attributes and key/type pairs directly.  When represented as\n a string, the Unicode Locale Extension lists attributes\n alphabetically, followed by key/type sequences with keys listed\n alphabetically (the order of subtags comprising a key's type is\n fixed when the type is defined)\n\n A well-formed locale key has the form\n [0-9a-zA-Z]{2}.  A well-formed locale type has the\n form \"\" | [0-9a-zA-Z]{3,8} ('-' [0-9a-zA-Z]{3,8})* (it\n can be empty, or a series of subtags 3-8 alphanums in length).  A\n well-formed locale attribute has the form\n [0-9a-zA-Z]{3,8} (it is a single subtag with the same\n form as a locale type subtag).\n\n The Unicode locale extension specifies optional behavior in\n locale-sensitive services.  Although the LDML specification defines\n various keys and values, actual locale-sensitive service\n implementations in a Java Runtime Environment might not support any\n particular Unicode locale attributes or key/type pairs.\n\n Creating a Locale\nThere are several different ways to create a Locale\n object.\n\n Builder\nUsing Locale.Builder you can construct a Locale object\n that conforms to BCP 47 syntax.\n\n Constructors\nThe Locale class provides three constructors:\n \n\n     Locale(String language)\n     Locale(String language, String country)\n     Locale(String language, String country, String variant)\n \n\n These constructors allow you to create a Locale object\n with language, country and variant, but you cannot specify\n script or extensions.\n\n Factory Methods\nThe method forLanguageTag(java.lang.String) creates a Locale\n object for a well-formed BCP 47 language tag.\n\n Locale Constants\nThe Locale class provides a number of convenient constants\n that you can use to create Locale objects for commonly used\n locales. For example, the following creates a Locale object\n for the United States:\n \n\n     Locale.US\n \n\nLocale Matching\nIf an application or a system is internationalized and provides localized\n resources for multiple locales, it sometimes needs to find one or more\n locales (or language tags) which meet each user's specific preferences. Note\n that a term \"language tag\" is used interchangeably with \"locale\" in this\n locale matching documentation.\n\n In order to do matching a user's preferred locales to a set of language\n tags, RFC 4647 Matching of\n Language Tags defines two mechanisms: filtering and lookup.\n Filtering is used to get all matching locales, whereas\n lookup is to choose the best matching locale.\n Matching is done case-insensitively. These matching mechanisms are described\n in the following sections.\n\n A user's preference is called a Language Priority List and is\n expressed as a list of language ranges. There are syntactically two types of\n language ranges: basic and extended. See\n Locale.LanguageRange for details.\n\n Filtering\nThe filtering operation returns all matching language tags. It is defined\n in RFC 4647 as follows:\n \"In filtering, each language range represents the least specific language\n tag (that is, the language tag with fewest number of subtags) that is an\n acceptable match. All of the language tags in the matching set of tags will\n have an equal or greater number of subtags than the language range. Every\n non-wildcard subtag in the language range will appear in every one of the\n matching language tags.\"\n\n There are two types of filtering: filtering for basic language ranges\n (called \"basic filtering\") and filtering for extended language ranges\n (called \"extended filtering\"). They may return different results by what\n kind of language ranges are included in the given Language Priority List.\n Locale.FilteringMode is a parameter to specify how filtering should\n be done.\n\n Lookup\nThe lookup operation returns the best matching language tags. It is\n defined in RFC 4647 as follows:\n \"By contrast with filtering, each language range represents the most\n specific tag that is an acceptable match.  The first matching tag found,\n according to the user's priority, is considered the closest match and is the\n item returned.\"\n\n For example, if a Language Priority List consists of two language ranges,\n \"zh-Hant-TW\" and \"en-US\", in prioritized order, lookup\n method progressively searches the language tags below in order to find the\n best matching language tag.\n \n\n    1. zh-Hant-TW\n    2. zh-Hant\n    3. zh\n    4. en-US\n    5. en\n \n\n If there is a language tag which matches completely to a language range\n above, the language tag is returned.\n\n \"*\" is the special language range, and it is ignored in lookup.\n\n If multiple language tags match as a result of the subtag '*'\n included in a language range, the first matching language tag returned by\n an Iterator over a Collection of language tags is treated as\n the best matching one.\n\n Use of Locale\nOnce you've created a Locale you can query it for information\n about itself. Use getCountry to get the country (or region)\n code and getLanguage to get the language code.\n You can use getDisplayCountry to get the\n name of the country suitable for displaying to the user. Similarly,\n you can use getDisplayLanguage to get the name of\n the language suitable for displaying to the user. Interestingly,\n the getDisplayXXX methods are themselves locale-sensitive\n and have two versions: one that uses the default\n DISPLAY locale and one\n that uses the locale specified as an argument.\n\n The Java Platform provides a number of classes that perform locale-sensitive\n operations. For example, the NumberFormat class formats\n numbers, currency, and percentages in a locale-sensitive manner. Classes\n such as NumberFormat have several convenience methods\n for creating a default object of that type. For example, the\n NumberFormat class provides these three convenience methods\n for creating a default NumberFormat object:\n \n\n     NumberFormat.getInstance()\n     NumberFormat.getCurrencyInstance()\n     NumberFormat.getPercentInstance()\n \n\n Each of these methods has two variants; one with an explicit locale\n and one without; the latter uses the default\n FORMAT locale:\n \n\n     NumberFormat.getInstance(myLocale)\n     NumberFormat.getCurrencyInstance(myLocale)\n     NumberFormat.getPercentInstance(myLocale)\n \n\n A Locale is the mechanism for identifying the kind of object\n (NumberFormat) that you would like to get. The locale is\n just a mechanism for identifying objects,\n not a container for the objects themselves.\n\n Compatibility\nIn order to maintain compatibility with existing usage, Locale's\n constructors retain their behavior prior to the Java Runtime\n Environment version 1.7.  The same is largely true for the\n toString method. Thus Locale objects can continue to\n be used as they were. In particular, clients who parse the output\n of toString into language, country, and variant fields can continue\n to do so (although this is strongly discouraged), although the\n variant field will have additional information in it if script or\n extensions are present.\n\n In addition, BCP 47 imposes syntax restrictions that are not\n imposed by Locale's constructors. This means that conversions\n between some Locales and BCP 47 language tags cannot be made without\n losing information. Thus toLanguageTag cannot\n represent the state of locales whose language, country, or variant\n do not conform to BCP 47.\n\n Because of these issues, it is recommended that clients migrate\n away from constructing non-conforming locales and use the\n forLanguageTag and Locale.Builder APIs instead.\n Clients desiring a string representation of the complete locale can\n then always rely on toLanguageTag for this purpose.\n\n Special cases\nFor compatibility reasons, two\n non-conforming locales are treated as special cases.  These are\n ja_JP_JP and th_TH_TH. These are ill-formed\n in BCP 47 since the variants are too short. To ease migration to BCP 47,\n these are treated specially during construction.  These two cases (and only\n these) cause a constructor to generate an extension, all other values behave\n exactly as they did prior to Java 7.\n\n Java has used ja_JP_JP to represent Japanese as used in\n Japan together with the Japanese Imperial calendar. This is now\n representable using a Unicode locale extension, by specifying the\n Unicode locale key ca (for \"calendar\") and type\n japanese. When the Locale constructor is called with the\n arguments \"ja\", \"JP\", \"JP\", the extension \"u-ca-japanese\" is\n automatically added.\n\n Java has used th_TH_TH to represent Thai as used in\n Thailand together with Thai digits. This is also now representable using\n a Unicode locale extension, by specifying the Unicode locale key\n nu (for \"number\") and value thai. When the Locale\n constructor is called with the arguments \"th\", \"TH\", \"TH\", the\n extension \"u-nu-thai\" is automatically added.\n\n Serialization\nDuring serialization, writeObject writes all fields to the output\n stream, including extensions.\n\n During deserialization, readResolve adds extensions as described\n in Special Cases, only\n for the two cases th_TH_TH and ja_JP_JP.\n\n Legacy language codes\nLocale's constructor has always converted three language codes to\n their earlier, obsoleted forms: he maps to iw,\n yi maps to ji, and id maps to\n in.  This continues to be the case, in order to not break\n backwards compatibility.\n\n The APIs added in 1.7 map between the old and new language codes,\n maintaining the old codes internal to Locale (so that\n getLanguage and toString reflect the old\n code), but using the new codes in the BCP 47 language tag APIs (so\n that toLanguageTag reflects the new one). This\n preserves the equivalence between Locales no matter which code or\n API is used to construct them. Java's default resource bundle\n lookup mechanism also implements this mapping, so that resources\n can be named using either convention, see ResourceBundle.Control.\n\n Three-letter language/country(region) codes\nThe Locale constructors have always specified that the language\n and the country param be two characters in length, although in\n practice they have accepted any length.  The specification has now\n been relaxed to allow language codes of two to eight characters and\n country (region) codes of two to three characters, and in\n particular, three-letter language codes and three-digit region\n codes as specified in the IANA Language Subtag Registry.  For\n compatibility, the implementation still does not impose a length\n constraint.", "codes": ["public final class Locale\nextends Object\nimplements Cloneable, Serializable"], "fields": [{"field_name": "ENGLISH", "field_sig": "public static final\u00a0Locale ENGLISH", "description": "Useful constant for language."}, {"field_name": "FRENCH", "field_sig": "public static final\u00a0Locale FRENCH", "description": "Useful constant for language."}, {"field_name": "GERMAN", "field_sig": "public static final\u00a0Locale GERMAN", "description": "Useful constant for language."}, {"field_name": "ITALIAN", "field_sig": "public static final\u00a0Locale ITALIAN", "description": "Useful constant for language."}, {"field_name": "JAPANESE", "field_sig": "public static final\u00a0Locale JAPANESE", "description": "Useful constant for language."}, {"field_name": "KOREAN", "field_sig": "public static final\u00a0Locale KOREAN", "description": "Useful constant for language."}, {"field_name": "CHINESE", "field_sig": "public static final\u00a0Locale CHINESE", "description": "Useful constant for language."}, {"field_name": "SIMPLIFIED_CHINESE", "field_sig": "public static final\u00a0Locale SIMPLIFIED_CHINESE", "description": "Useful constant for language."}, {"field_name": "TRADITIONAL_CHINESE", "field_sig": "public static final\u00a0Locale TRADITIONAL_CHINESE", "description": "Useful constant for language."}, {"field_name": "FRANCE", "field_sig": "public static final\u00a0Locale FRANCE", "description": "Useful constant for country."}, {"field_name": "GERMANY", "field_sig": "public static final\u00a0Locale GERMANY", "description": "Useful constant for country."}, {"field_name": "ITALY", "field_sig": "public static final\u00a0Locale ITALY", "description": "Useful constant for country."}, {"field_name": "JAPAN", "field_sig": "public static final\u00a0Locale JAPAN", "description": "Useful constant for country."}, {"field_name": "KOREA", "field_sig": "public static final\u00a0Locale KOREA", "description": "Useful constant for country."}, {"field_name": "CHINA", "field_sig": "public static final\u00a0Locale CHINA", "description": "Useful constant for country."}, {"field_name": "PRC", "field_sig": "public static final\u00a0Locale PRC", "description": "Useful constant for country."}, {"field_name": "TAIWAN", "field_sig": "public static final\u00a0Locale TAIWAN", "description": "Useful constant for country."}, {"field_name": "UK", "field_sig": "public static final\u00a0Locale UK", "description": "Useful constant for country."}, {"field_name": "US", "field_sig": "public static final\u00a0Locale US", "description": "Useful constant for country."}, {"field_name": "CANADA", "field_sig": "public static final\u00a0Locale CANADA", "description": "Useful constant for country."}, {"field_name": "CANADA_FRENCH", "field_sig": "public static final\u00a0Locale CANADA_FRENCH", "description": "Useful constant for country."}, {"field_name": "ROOT", "field_sig": "public static final\u00a0Locale ROOT", "description": "Useful constant for the root locale.  The root locale is the locale whose\n language, country, and variant are empty (\"\") strings.  This is regarded\n as the base locale of all locales, and is used as the language/country\n neutral locale for the locale sensitive operations."}, {"field_name": "PRIVATE_USE_EXTENSION", "field_sig": "public static final\u00a0char PRIVATE_USE_EXTENSION", "description": "The key for the private use extension ('x')."}, {"field_name": "UNICODE_LOCALE_EXTENSION", "field_sig": "public static final\u00a0char UNICODE_LOCALE_EXTENSION", "description": "The key for Unicode locale extension ('u')."}], "methods": [{"method_name": "getDefault", "method_sig": "public static Locale getDefault()", "description": "Gets the current value of the default locale for this instance\n of the Java Virtual Machine.\n \n The Java Virtual Machine sets the default locale during startup\n based on the host environment. It is used by many locale-sensitive\n methods if no locale is explicitly specified.\n It can be changed using the\n setDefault method."}, {"method_name": "getDefault", "method_sig": "public static Locale getDefault (Locale.Category category)", "description": "Gets the current value of the default locale for the specified Category\n for this instance of the Java Virtual Machine.\n \n The Java Virtual Machine sets the default locale during startup based\n on the host environment. It is used by many locale-sensitive methods\n if no locale is explicitly specified. It can be changed using the\n setDefault(Locale.Category, Locale) method."}, {"method_name": "setDefault", "method_sig": "public static void setDefault (Locale newLocale)", "description": "Sets the default locale for this instance of the Java Virtual Machine.\n This does not affect the host locale.\n \n If there is a security manager, its checkPermission\n method is called with a PropertyPermission(\"user.language\", \"write\")\n permission before the default locale is changed.\n \n The Java Virtual Machine sets the default locale during startup\n based on the host environment. It is used by many locale-sensitive\n methods if no locale is explicitly specified.\n \n Since changing the default locale may affect many different areas\n of functionality, this method should only be used if the caller\n is prepared to reinitialize locale-sensitive code running\n within the same Java Virtual Machine.\n \n By setting the default locale with this method, all of the default\n locales for each Category are also set to the specified default locale."}, {"method_name": "setDefault", "method_sig": "public static void setDefault (Locale.Category category,\n                              Locale newLocale)", "description": "Sets the default locale for the specified Category for this instance\n of the Java Virtual Machine. This does not affect the host locale.\n \n If there is a security manager, its checkPermission method is called\n with a PropertyPermission(\"user.language\", \"write\") permission before\n the default locale is changed.\n \n The Java Virtual Machine sets the default locale during startup based\n on the host environment. It is used by many locale-sensitive methods\n if no locale is explicitly specified.\n \n Since changing the default locale may affect many different areas of\n functionality, this method should only be used if the caller is\n prepared to reinitialize locale-sensitive code running within the\n same Java Virtual Machine."}, {"method_name": "getAvailableLocales", "method_sig": "public static Locale[] getAvailableLocales()", "description": "Returns an array of all installed locales.\n The returned array represents the union of locales supported\n by the Java runtime environment and by installed\n LocaleServiceProvider\n implementations.  It must contain at least a Locale\n instance equal to Locale.US."}, {"method_name": "getISOCountries", "method_sig": "public static String[] getISOCountries()", "description": "Returns a list of all 2-letter country codes defined in ISO 3166.\n Can be used to create Locales.\n This method is equivalent to getISOCountries(Locale.IsoCountryCode type)\n with type Locale.IsoCountryCode.PART1_ALPHA2.\n \nNote: The Locale class also supports other codes for\n country (region), such as 3-letter numeric UN M.49 area codes.\n Therefore, the list returned by this method does not contain ALL valid\n codes that can be used to create Locales.\n \n Note that this method does not return obsolete 2-letter country codes.\n ISO3166-3 codes which designate country codes for those obsolete codes,\n can be retrieved from getISOCountries(Locale.IsoCountryCode type) with\n type Locale.IsoCountryCode.PART3."}, {"method_name": "getISOCountries", "method_sig": "public static Set<String> getISOCountries (Locale.IsoCountryCode type)", "description": "Returns a Set of ISO3166 country codes for the specified type."}, {"method_name": "getISOLanguages", "method_sig": "public static String[] getISOLanguages()", "description": "Returns a list of all 2-letter language codes defined in ISO 639.\n Can be used to create Locales.\n \nNote:\n\nISO 639 is not a stable standard\u2014 some languages' codes have changed.\n The list this function returns includes both the new and the old codes for the\n languages whose codes have changed.\n The Locale class also supports language codes up to\n 8 characters in length.  Therefore, the list returned by this method does\n not contain ALL valid codes that can be used to create Locales.\n "}, {"method_name": "getLanguage", "method_sig": "public String getLanguage()", "description": "Returns the language code of this Locale.\n\n Note: ISO 639 is not a stable standard\u2014 some languages' codes have changed.\n Locale's constructor recognizes both the new and the old codes for the languages\n whose codes have changed, but this function always returns the old code.  If you\n want to check for a specific language whose code has changed, don't do\n \n if (locale.getLanguage().equals(\"he\")) // BAD!\n    ...\n \n Instead, do\n \n if (locale.getLanguage().equals(new Locale(\"he\").getLanguage()))\n    ...\n "}, {"method_name": "getScript", "method_sig": "public String getScript()", "description": "Returns the script for this locale, which should\n either be the empty string or an ISO 15924 4-letter script\n code. The first letter is uppercase and the rest are\n lowercase, for example, 'Latn', 'Cyrl'."}, {"method_name": "getCountry", "method_sig": "public String getCountry()", "description": "Returns the country/region code for this locale, which should\n either be the empty string, an uppercase ISO 3166 2-letter code,\n or a UN M.49 3-digit code."}, {"method_name": "getVariant", "method_sig": "public String getVariant()", "description": "Returns the variant code for this locale."}, {"method_name": "hasExtensions", "method_sig": "public boolean hasExtensions()", "description": "Returns true if this Locale has any \n extensions."}, {"method_name": "stripExtensions", "method_sig": "public Locale stripExtensions()", "description": "Returns a copy of this Locale with no \n extensions. If this Locale has no extensions, this Locale\n is returned."}, {"method_name": "getExtension", "method_sig": "public String getExtension (char key)", "description": "Returns the extension (or private use) value associated with\n the specified key, or null if there is no extension\n associated with the key. To be well-formed, the key must be one\n of [0-9A-Za-z]. Keys are case-insensitive, so\n for example 'z' and 'Z' represent the same extension."}, {"method_name": "getExtensionKeys", "method_sig": "public Set<Character> getExtensionKeys()", "description": "Returns the set of extension keys associated with this locale, or the\n empty set if it has no extensions. The returned set is unmodifiable.\n The keys will all be lower-case."}, {"method_name": "getUnicodeLocaleAttributes", "method_sig": "public Set<String> getUnicodeLocaleAttributes()", "description": "Returns the set of unicode locale attributes associated with\n this locale, or the empty set if it has no attributes. The\n returned set is unmodifiable."}, {"method_name": "getUnicodeLocaleType", "method_sig": "public String getUnicodeLocaleType (String key)", "description": "Returns the Unicode locale type associated with the specified Unicode locale key\n for this locale. Returns the empty string for keys that are defined with no type.\n Returns null if the key is not defined. Keys are case-insensitive. The key must\n be two alphanumeric characters ([0-9a-zA-Z]), or an IllegalArgumentException is\n thrown."}, {"method_name": "getUnicodeLocaleKeys", "method_sig": "public Set<String> getUnicodeLocaleKeys()", "description": "Returns the set of Unicode locale keys defined by this locale, or the empty set if\n this locale has none.  The returned set is immutable.  Keys are all lower case."}, {"method_name": "toString", "method_sig": "public final String toString()", "description": "Returns a string representation of this Locale\n object, consisting of language, country, variant, script,\n and extensions as below:\n \n language + \"_\" + country + \"_\" + (variant + \"_#\" | \"#\") + script + \"_\" + extensions\n \n\n Language is always lower case, country is always upper case, script is always title\n case, and extensions are always lower case.  Extensions and private use subtags\n will be in canonical order as explained in toLanguageTag().\n\n When the locale has neither script nor extensions, the result is the same as in\n Java 6 and prior.\n\n If both the language and country fields are missing, this function will return\n the empty string, even if the variant, script, or extensions field is present (you\n can't have a locale with just a variant, the variant must accompany a well-formed\n language or country code).\n\n If script or extensions are present and variant is missing, no underscore is\n added before the \"#\".\n\n This behavior is designed to support debugging and to be compatible with\n previous uses of toString that expected language, country, and variant\n fields only.  To represent a Locale as a String for interchange purposes, use\n toLanguageTag().\n\n Examples: \nen\nde_DE\n_GB\nen_US_WIN\nde__POSIX\nzh_CN_#Hans\nzh_TW_#Hant_x-java\nth_TH_TH_#u-nu-thai"}, {"method_name": "toLanguageTag", "method_sig": "public String toLanguageTag()", "description": "Returns a well-formed IETF BCP 47 language tag representing\n this locale.\n\n If this Locale has a language, country, or\n variant that does not satisfy the IETF BCP 47 language tag\n syntax requirements, this method handles these fields as\n described below:\n\n Language: If language is empty, or not well-formed (for example \"a\" or\n \"e2\"), it will be emitted as \"und\" (Undetermined).\n\n Country: If country is not well-formed (for example \"12\" or \"USA\"),\n it will be omitted.\n\n Variant: If variant is well-formed, each sub-segment\n (delimited by '-' or '_') is emitted as a subtag.  Otherwise:\n \nif all sub-segments match [0-9a-zA-Z]{1,8}\n (for example \"WIN\" or \"Oracle_JDK_Standard_Edition\"), the first\n ill-formed sub-segment and all following will be appended to\n the private use subtag.  The first appended subtag will be\n \"lvariant\", followed by the sub-segments in order, separated by\n hyphen. For example, \"x-lvariant-WIN\",\n \"Oracle-x-lvariant-JDK-Standard-Edition\".\n\n if any sub-segment does not match\n [0-9a-zA-Z]{1,8}, the variant will be truncated\n and the problematic sub-segment and all following sub-segments\n will be omitted.  If the remainder is non-empty, it will be\n emitted as a private use subtag as above (even if the remainder\n turns out to be well-formed).  For example,\n \"Solaris_isjustthecoolestthing\" is emitted as\n \"x-lvariant-Solaris\", not as \"solaris\".\nSpecial Conversions: Java supports some old locale\n representations, including deprecated ISO language codes,\n for compatibility. This method performs the following\n conversions:\n \nDeprecated ISO language codes \"iw\", \"ji\", and \"in\" are\n converted to \"he\", \"yi\", and \"id\", respectively.\n\n A locale with language \"no\", country \"NO\", and variant\n \"NY\", representing Norwegian Nynorsk (Norway), is converted\n to a language tag \"nn-NO\".\nNote: Although the language tag created by this\n method is well-formed (satisfies the syntax requirements\n defined by the IETF BCP 47 specification), it is not\n necessarily a valid BCP 47 language tag.  For example,\n \n   new Locale(\"xx\", \"YY\").toLanguageTag();\n\n will return \"xx-YY\", but the language subtag \"xx\" and the\n region subtag \"YY\" are invalid because they are not registered\n in the IANA Language Subtag Registry."}, {"method_name": "forLanguageTag", "method_sig": "public static Locale forLanguageTag (String languageTag)", "description": "Returns a locale for the specified IETF BCP 47 language tag string.\n\n If the specified language tag contains any ill-formed subtags,\n the first such subtag and all following subtags are ignored.  Compare\n to Locale.Builder.setLanguageTag(java.lang.String) which throws an exception\n in this case.\n\n The following conversions are performed:\nThe language code \"und\" is mapped to language \"\".\n\n The language codes \"he\", \"yi\", and \"id\" are mapped to \"iw\",\n \"ji\", and \"in\" respectively. (This is the same canonicalization\n that's done in Locale's constructors.)\n\n The portion of a private use subtag prefixed by \"lvariant\",\n if any, is removed and appended to the variant field in the\n result locale (without case normalization).  If it is then\n empty, the private use subtag is discarded:\n\n \n     Locale loc;\n     loc = Locale.forLanguageTag(\"en-US-x-lvariant-POSIX\");\n     loc.getVariant(); // returns \"POSIX\"\n     loc.getExtension('x'); // returns null\n\n     loc = Locale.forLanguageTag(\"de-POSIX-x-URP-lvariant-Abc-Def\");\n     loc.getVariant(); // returns \"POSIX_Abc_Def\"\n     loc.getExtension('x'); // returns \"urp\"\n \nWhen the languageTag argument contains an extlang subtag,\n the first such subtag is used as the language, and the primary\n language subtag and other extlang subtags are ignored:\n\n \n     Locale.forLanguageTag(\"ar-aao\").getLanguage(); // returns \"aao\"\n     Locale.forLanguageTag(\"en-abc-def-us\").toString(); // returns \"abc_US\"\n \nCase is normalized except for variant tags, which are left\n unchanged.  Language is normalized to lower case, script to\n title case, country to upper case, and extensions to lower\n case.\n\n If, after processing, the locale would exactly match either\n ja_JP_JP or th_TH_TH with no extensions, the appropriate\n extensions are added as though the constructor had been called:\n\n \n    Locale.forLanguageTag(\"ja-JP-x-lvariant-JP\").toLanguageTag();\n    // returns \"ja-JP-u-ca-japanese-x-lvariant-JP\"\n    Locale.forLanguageTag(\"th-TH-x-lvariant-TH\").toLanguageTag();\n    // returns \"th-TH-u-nu-thai-x-lvariant-TH\"\n \nThis implements the 'Language-Tag' production of BCP47, and\n so supports grandfathered (regular and irregular) as well as\n private use language tags.  Stand alone private use tags are\n represented as empty language and extension 'x-whatever',\n and grandfathered tags are converted to their canonical replacements\n where they exist.\n\n Grandfathered tags with canonical replacements are as follows:\n\n \nGrandfathered tags with canonical replacements\n\ngrandfathered tagmodern replacement\n\n\nart-lojbanjbo\ni-amiami\ni-bnnbnn\ni-hakhak\ni-klingontlh\ni-luxlb\ni-navajonv\ni-pwnpwn\ni-taotao\ni-taytay\ni-tsutsu\nno-boknb\nno-nynnn\nsgn-BE-FRsfb\nsgn-BE-NLvgt\nsgn-CH-DEsgg\nzh-guoyucmn\nzh-hakkahak\nzh-min-nannan\nzh-xianghsn\n\n\nGrandfathered tags with no modern replacement will be\n converted as follows:\n\n \nGrandfathered tags with no modern replacement\n\ngrandfathered tagconverts to\n\n\ncel-gaulishxtg-x-cel-gaulish\nen-GB-oeden-GB-x-oed\ni-defaulten-x-i-default\ni-enochianund-x-i-enochian\ni-mingosee-x-i-mingo\nzh-minnan-x-zh-min\n\n\nFor a list of all grandfathered tags, see the\n IANA Language Subtag Registry (search for \"Type: grandfathered\").\n\n Note: there is no guarantee that toLanguageTag\n and forLanguageTag will round-trip."}, {"method_name": "getISO3Language", "method_sig": "public String getISO3Language()\n                       throws MissingResourceException", "description": "Returns a three-letter abbreviation of this locale's language.\n If the language matches an ISO 639-1 two-letter code, the\n corresponding ISO 639-2/T three-letter lowercase code is\n returned.  The ISO 639-2 language codes can be found on-line,\n see \"Codes for the Representation of Names of Languages Part 2:\n Alpha-3 Code\".  If the locale specifies a three-letter\n language, the language is returned as is.  If the locale does\n not specify a language the empty string is returned."}, {"method_name": "getISO3Country", "method_sig": "public String getISO3Country()\n                      throws MissingResourceException", "description": "Returns a three-letter abbreviation for this locale's country.\n If the country matches an ISO 3166-1 alpha-2 code, the\n corresponding ISO 3166-1 alpha-3 uppercase code is returned.\n If the locale doesn't specify a country, this will be the empty\n string.\n\n The ISO 3166-1 codes can be found on-line."}, {"method_name": "getDisplayLanguage", "method_sig": "public final String getDisplayLanguage()", "description": "Returns a name for the locale's language that is appropriate for display to the\n user.\n If possible, the name returned will be localized for the default\n DISPLAY locale.\n For example, if the locale is fr_FR and the default\n DISPLAY locale\n is en_US, getDisplayLanguage() will return \"French\"; if the locale is en_US and\n the default DISPLAY locale is fr_FR,\n getDisplayLanguage() will return \"anglais\".\n If the name returned cannot be localized for the default\n DISPLAY locale,\n (say, we don't have a Japanese name for Croatian),\n this function falls back on the English name, and uses the ISO code as a last-resort\n value.  If the locale doesn't specify a language, this function returns the empty string."}, {"method_name": "getDisplayLanguage", "method_sig": "public String getDisplayLanguage (Locale inLocale)", "description": "Returns a name for the locale's language that is appropriate for display to the\n user.\n If possible, the name returned will be localized according to inLocale.\n For example, if the locale is fr_FR and inLocale\n is en_US, getDisplayLanguage() will return \"French\"; if the locale is en_US and\n inLocale is fr_FR, getDisplayLanguage() will return \"anglais\".\n If the name returned cannot be localized according to inLocale,\n (say, we don't have a Japanese name for Croatian),\n this function falls back on the English name, and finally\n on the ISO code as a last-resort value.  If the locale doesn't specify a language,\n this function returns the empty string."}, {"method_name": "getDisplayScript", "method_sig": "public String getDisplayScript()", "description": "Returns a name for the locale's script that is appropriate for display to\n the user. If possible, the name will be localized for the default\n DISPLAY locale.  Returns\n the empty string if this locale doesn't specify a script code."}, {"method_name": "getDisplayScript", "method_sig": "public String getDisplayScript (Locale inLocale)", "description": "Returns a name for the locale's script that is appropriate\n for display to the user. If possible, the name will be\n localized for the given locale. Returns the empty string if\n this locale doesn't specify a script code."}, {"method_name": "getDisplayCountry", "method_sig": "public final String getDisplayCountry()", "description": "Returns a name for the locale's country that is appropriate for display to the\n user.\n If possible, the name returned will be localized for the default\n DISPLAY locale.\n For example, if the locale is fr_FR and the default\n DISPLAY locale\n is en_US, getDisplayCountry() will return \"France\"; if the locale is en_US and\n the default DISPLAY locale is fr_FR,\n getDisplayCountry() will return \"Etats-Unis\".\n If the name returned cannot be localized for the default\n DISPLAY locale,\n (say, we don't have a Japanese name for Croatia),\n this function falls back on the English name, and uses the ISO code as a last-resort\n value.  If the locale doesn't specify a country, this function returns the empty string."}, {"method_name": "getDisplayCountry", "method_sig": "public String getDisplayCountry (Locale inLocale)", "description": "Returns a name for the locale's country that is appropriate for display to the\n user.\n If possible, the name returned will be localized according to inLocale.\n For example, if the locale is fr_FR and inLocale\n is en_US, getDisplayCountry() will return \"France\"; if the locale is en_US and\n inLocale is fr_FR, getDisplayCountry() will return \"Etats-Unis\".\n If the name returned cannot be localized according to inLocale.\n (say, we don't have a Japanese name for Croatia),\n this function falls back on the English name, and finally\n on the ISO code as a last-resort value.  If the locale doesn't specify a country,\n this function returns the empty string."}, {"method_name": "getDisplayVariant", "method_sig": "public final String getDisplayVariant()", "description": "Returns a name for the locale's variant code that is appropriate for display to the\n user.  If possible, the name will be localized for the default\n DISPLAY locale.  If the locale\n doesn't specify a variant code, this function returns the empty string."}, {"method_name": "getDisplayVariant", "method_sig": "public String getDisplayVariant (Locale inLocale)", "description": "Returns a name for the locale's variant code that is appropriate for display to the\n user.  If possible, the name will be localized for inLocale.  If the locale\n doesn't specify a variant code, this function returns the empty string."}, {"method_name": "getDisplayName", "method_sig": "public final String getDisplayName()", "description": "Returns a name for the locale that is appropriate for display to the\n user. This will be the values returned by getDisplayLanguage(),\n getDisplayScript(), getDisplayCountry(), getDisplayVariant() and\n optional Unicode extensions\n assembled into a single string. The non-empty values are used in order, with\n the second and subsequent names in parentheses.  For example:\n \n language (script, country, variant(, extension)*)\n language (country(, extension)*)\n language (variant(, extension)*)\n script (country(, extension)*)\n country (extension)*\n\n depending on which fields are specified in the locale. The field\n separator in the above parentheses, denoted as a comma character, may\n be localized depending on the locale. If the language, script, country,\n and variant fields are all empty, this function returns the empty string."}, {"method_name": "getDisplayName", "method_sig": "public String getDisplayName (Locale inLocale)", "description": "Returns a name for the locale that is appropriate for display\n to the user.  This will be the values returned by\n getDisplayLanguage(), getDisplayScript(),getDisplayCountry()\n getDisplayVariant(), and optional \n Unicode extensions assembled into a single string. The non-empty\n values are used in order, with the second and subsequent names in\n parentheses.  For example:\n \n language (script, country, variant(, extension)*)\n language (country(, extension)*)\n language (variant(, extension)*)\n script (country(, extension)*)\n country (extension)*\n\n depending on which fields are specified in the locale. The field\n separator in the above parentheses, denoted as a comma character, may\n be localized depending on the locale. If the language, script, country,\n and variant fields are all empty, this function returns the empty string."}, {"method_name": "clone", "method_sig": "public Object clone()", "description": "Overrides Cloneable."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Override hashCode.\n Since Locales are often used in hashtables, caches the value\n for speed."}, {"method_name": "equals", "method_sig": "public boolean equals (Object obj)", "description": "Returns true if this Locale is equal to another object.  A Locale is\n deemed equal to another Locale with identical language, script, country,\n variant and extensions, and unequal to all other objects."}, {"method_name": "filter", "method_sig": "public static List<Locale> filter (List<Locale.LanguageRange> priorityList,\n                                  Collection<Locale> locales,\n                                  Locale.FilteringMode mode)", "description": "Returns a list of matching Locale instances using the filtering\n mechanism defined in RFC 4647.\n\n This filter operation on the given locales ensures that only\n unique matching locale(s) are returned."}, {"method_name": "filter", "method_sig": "public static List<Locale> filter (List<Locale.LanguageRange> priorityList,\n                                  Collection<Locale> locales)", "description": "Returns a list of matching Locale instances using the filtering\n mechanism defined in RFC 4647. This is equivalent to\n filter(List, Collection, FilteringMode) when mode is\n Locale.FilteringMode.AUTOSELECT_FILTERING.\n\n This filter operation on the given locales ensures that only\n unique matching locale(s) are returned."}, {"method_name": "filterTags", "method_sig": "public static List<String> filterTags (List<Locale.LanguageRange> priorityList,\n                                      Collection<String> tags,\n                                      Locale.FilteringMode mode)", "description": "Returns a list of matching languages tags using the basic filtering\n mechanism defined in RFC 4647.\n\n This filter operation on the given tags ensures that only\n unique matching tag(s) are returned with preserved case. In case of\n duplicate matching tags with the case difference, the first matching\n tag with preserved case is returned.\n For example, \"de-ch\" is returned out of the duplicate matching tags\n \"de-ch\" and \"de-CH\", if \"de-ch\" is checked first for matching in the\n given tags. Note that if the given tags is an unordered\n Collection, the returned matching tag out of duplicate tags is\n subject to change, depending on the implementation of the\n Collection."}, {"method_name": "filterTags", "method_sig": "public static List<String> filterTags (List<Locale.LanguageRange> priorityList,\n                                      Collection<String> tags)", "description": "Returns a list of matching languages tags using the basic filtering\n mechanism defined in RFC 4647. This is equivalent to\n filterTags(List, Collection, FilteringMode) when mode\n is Locale.FilteringMode.AUTOSELECT_FILTERING.\n\n This filter operation on the given tags ensures that only\n unique matching tag(s) are returned with preserved case. In case of\n duplicate matching tags with the case difference, the first matching\n tag with preserved case is returned.\n For example, \"de-ch\" is returned out of the duplicate matching tags\n \"de-ch\" and \"de-CH\", if \"de-ch\" is checked first for matching in the\n given tags. Note that if the given tags is an unordered\n Collection, the returned matching tag out of duplicate tags is\n subject to change, depending on the implementation of the\n Collection."}, {"method_name": "lookup", "method_sig": "public static Locale lookup (List<Locale.LanguageRange> priorityList,\n                            Collection<Locale> locales)", "description": "Returns a Locale instance for the best-matching language\n tag using the lookup mechanism defined in RFC 4647."}, {"method_name": "lookupTag", "method_sig": "public static String lookupTag (List<Locale.LanguageRange> priorityList,\n                               Collection<String> tags)", "description": "Returns the best-matching language tag using the lookup mechanism\n defined in RFC 4647.\n\n This lookup operation on the given tags ensures that the\n first matching tag with preserved case is returned."}]}