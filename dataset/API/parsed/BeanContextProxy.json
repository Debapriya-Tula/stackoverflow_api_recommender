{"name": "Interface BeanContextProxy", "module": "java.desktop", "package": "java.beans.beancontext", "text": "\n This interface is implemented by a JavaBean that does\n not directly have a BeanContext(Child) associated with\n it (via implementing that interface or a subinterface thereof),\n but has a public BeanContext(Child) delegated from it.\n For example, a subclass of java.awt.Container may have a BeanContext\n associated with it that all Component children of that Container shall\n be contained within.\n \n\n An Object may not implement this interface and the\n BeanContextChild interface\n (or any subinterfaces thereof) they are mutually exclusive.\n \n\n Callers of this interface shall examine the return type in order to\n obtain a particular subinterface of BeanContextChild as follows:\n \n BeanContextChild bcc = o.getBeanContextProxy();\n\n if (bcc instanceof BeanContext) {\n      // ...\n }\n \n or\n \n BeanContextChild bcc = o.getBeanContextProxy();\n BeanContext      bc  = null;\n\n try {\n     bc = (BeanContext)bcc;\n } catch (ClassCastException cce) {\n     // cast failed, bcc is not an instanceof BeanContext\n }\n \n\n The return value is a constant for the lifetime of the implementing\n instance\n ", "codes": ["public interface BeanContextProxy"], "fields": [], "methods": [{"method_name": "getBeanContextProxy", "method_sig": "BeanContextChild getBeanContextProxy()", "description": "Gets the BeanContextChild (or subinterface)\n associated with this object."}]}