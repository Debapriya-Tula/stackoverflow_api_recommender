{"name": "Class HTMLDocument.HTMLReader", "module": "java.desktop", "package": "javax.swing.text.html", "text": "An HTML reader to load an HTML document with an HTML\n element structure.  This is a set of callbacks from\n the parser, implemented to create a set of elements\n tagged with attributes.  The parse builds up tokens\n (ElementSpec) that describe the element subtree desired,\n and burst it into the document under the protection of\n a write lock using the insert method on the document\n outer class.\n \n The reader can be configured by registering actions\n (of type HTMLDocument.HTMLReader.TagAction)\n that describe how to handle the action.  The idea behind\n the actions provided is that the most natural text editing\n operations can be provided if the element structure boils\n down to paragraphs with runs of some kind of style\n in them.  Some things are more naturally specified\n structurally, so arbitrary structure should be allowed\n above the paragraphs, but will need to be edited with structural\n actions.  The implication of this is that some of the\n HTML elements specified in the stream being parsed will\n be collapsed into attributes, and in some cases paragraphs\n will be synthesized.  When HTML elements have been\n converted to attributes, the attribute key will be of\n type HTML.Tag, and the value will be of type AttributeSet\n so that no information is lost.  This enables many of the\n existing actions to work so that the user can type input,\n hit the return key, backspace, delete, etc and have a\n reasonable result.  Selections can be created, and attributes\n applied or removed, etc.  With this in mind, the work done\n by the reader can be categorized into the following kinds\n of tasks:\n \nBlock\n Build the structure like it's specified in the stream.\n This produces elements that contain other elements.\n Paragraph\n Like block except that it's expected that the element\n will be used with a paragraph view so a paragraph element\n won't need to be synthesized.\n Character\n Contribute the element as an attribute that will start\n and stop at arbitrary text locations.  This will ultimately\n be mixed into a run of text, with all of the currently\n flattened HTML character elements.\n Special\n Produce an embedded graphical element.\n Form\n Produce an element that is like the embedded graphical\n element, except that it also has a component model associated\n with it.\n Hidden\n Create an element that is hidden from view when the\n document is being viewed read-only, and visible when the\n document is being edited.  This is useful to keep the\n model from losing information, and used to store things\n like comments and unrecognized tags.\n\n \n\n Currently, <APPLET>, <PARAM>, <MAP>, <AREA>, <LINK>,\n <SCRIPT> and <STYLE> are unsupported.\n\n \n The assignment of the actions described is shown in the\n following table for the tags defined in HTML.Tag.\n\n \nHTML tags and assigned actions\n\n\nTag\n     Action\n \n\n\nHTML.Tag.A\nCharacterAction\n   \nHTML.Tag.ADDRESS\nCharacterAction\n   \nHTML.Tag.APPLET\nHiddenAction\n   \nHTML.Tag.AREA\nAreaAction\n   \nHTML.Tag.B\nCharacterAction\n   \nHTML.Tag.BASE\nBaseAction\n   \nHTML.Tag.BASEFONT\nCharacterAction\n   \nHTML.Tag.BIG\nCharacterAction\n   \nHTML.Tag.BLOCKQUOTE\nBlockAction\n   \nHTML.Tag.BODY\nBlockAction\n   \nHTML.Tag.BR\nSpecialAction\n   \nHTML.Tag.CAPTION\nBlockAction\n   \nHTML.Tag.CENTER\nBlockAction\n   \nHTML.Tag.CITE\nCharacterAction\n   \nHTML.Tag.CODE\nCharacterAction\n   \nHTML.Tag.DD\nBlockAction\n   \nHTML.Tag.DFN\nCharacterAction\n   \nHTML.Tag.DIR\nBlockAction\n   \nHTML.Tag.DIV\nBlockAction\n   \nHTML.Tag.DL\nBlockAction\n   \nHTML.Tag.DT\nParagraphAction\n   \nHTML.Tag.EM\nCharacterAction\n   \nHTML.Tag.FONT\nCharacterAction\n   \nHTML.Tag.FORM\nAs of 1.4 a BlockAction\n   \nHTML.Tag.FRAME\nSpecialAction\n   \nHTML.Tag.FRAMESET\nBlockAction\n   \nHTML.Tag.H1\nParagraphAction\n   \nHTML.Tag.H2\nParagraphAction\n   \nHTML.Tag.H3\nParagraphAction\n   \nHTML.Tag.H4\nParagraphAction\n   \nHTML.Tag.H5\nParagraphAction\n   \nHTML.Tag.H6\nParagraphAction\n   \nHTML.Tag.HEAD\nHeadAction\n   \nHTML.Tag.HR\nSpecialAction\n   \nHTML.Tag.HTML\nBlockAction\n   \nHTML.Tag.I\nCharacterAction\n   \nHTML.Tag.IMG\nSpecialAction\n   \nHTML.Tag.INPUT\nFormAction\n   \nHTML.Tag.ISINDEX\nIsndexAction\n   \nHTML.Tag.KBD\nCharacterAction\n   \nHTML.Tag.LI\nBlockAction\n   \nHTML.Tag.LINK\nLinkAction\n   \nHTML.Tag.MAP\nMapAction\n   \nHTML.Tag.MENU\nBlockAction\n   \nHTML.Tag.META\nMetaAction\n   \nHTML.Tag.NOFRAMES\nBlockAction\n   \nHTML.Tag.OBJECT\nSpecialAction\n   \nHTML.Tag.OL\nBlockAction\n   \nHTML.Tag.OPTION\nFormAction\n   \nHTML.Tag.P\nParagraphAction\n   \nHTML.Tag.PARAM\nHiddenAction\n   \nHTML.Tag.PRE\nPreAction\n   \nHTML.Tag.SAMP\nCharacterAction\n   \nHTML.Tag.SCRIPT\nHiddenAction\n   \nHTML.Tag.SELECT\nFormAction\n   \nHTML.Tag.SMALL\nCharacterAction\n   \nHTML.Tag.STRIKE\nCharacterAction\n   \nHTML.Tag.S\nCharacterAction\n   \nHTML.Tag.STRONG\nCharacterAction\n   \nHTML.Tag.STYLE\nStyleAction\n   \nHTML.Tag.SUB\nCharacterAction\n   \nHTML.Tag.SUP\nCharacterAction\n   \nHTML.Tag.TABLE\nBlockAction\n   \nHTML.Tag.TD\nBlockAction\n   \nHTML.Tag.TEXTAREA\nFormAction\n   \nHTML.Tag.TH\nBlockAction\n   \nHTML.Tag.TITLE\nTitleAction\n   \nHTML.Tag.TR\nBlockAction\n   \nHTML.Tag.TT\nCharacterAction\n   \nHTML.Tag.U\nCharacterAction\n   \nHTML.Tag.UL\nBlockAction\n   \nHTML.Tag.VAR\nCharacterAction\n \n\n\n Once </html> is encountered, the Actions are no longer notified.", "codes": ["public class HTMLDocument.HTMLReader\nextends HTMLEditorKit.ParserCallback"], "fields": [{"field_name": "parseBuffer", "field_sig": "protected\u00a0Vector<DefaultStyledDocument.ElementSpec> parseBuffer", "description": "Buffer to keep building elements."}, {"field_name": "charAttr", "field_sig": "protected\u00a0MutableAttributeSet charAttr", "description": "Current character attribute set."}], "methods": [{"method_name": "flush", "method_sig": "public void flush()\n           throws BadLocationException", "description": "The last method called on the reader.  It allows\n any pending changes to be flushed into the document.\n Since this is currently loading synchronously, the entire\n set of changes are pushed in at this point."}, {"method_name": "handleText", "method_sig": "public void handleText (char[] data,\n                       int pos)", "description": "Called by the parser to indicate a block of text was\n encountered."}, {"method_name": "handleStartTag", "method_sig": "public void handleStartTag (HTML.Tag t,\n                           MutableAttributeSet a,\n                           int pos)", "description": "Callback from the parser.  Route to the appropriate\n handler for the tag."}, {"method_name": "handleEndTag", "method_sig": "public void handleEndTag (HTML.Tag t,\n                         int pos)", "description": "Callback from the parser.  Route to the appropriate\n handler for the tag."}, {"method_name": "handleSimpleTag", "method_sig": "public void handleSimpleTag (HTML.Tag t,\n                            MutableAttributeSet a,\n                            int pos)", "description": "Callback from the parser.  Route to the appropriate\n handler for the tag."}, {"method_name": "handleEndOfLineString", "method_sig": "public void handleEndOfLineString (String eol)", "description": "This is invoked after the stream has been parsed, but before\n flush. eol will be one of \\n, \\r\n or \\r\\n, which ever is encountered the most in parsing the\n stream."}, {"method_name": "registerTag", "method_sig": "protected void registerTag (HTML.Tag t,\n                           HTMLDocument.HTMLReader.TagAction a)", "description": "Registers a handler for the given tag.  By default\n all of the well-known tags will have been registered.\n This can be used to change the handling of a particular\n tag or to add support for custom tags."}, {"method_name": "pushCharacterStyle", "method_sig": "protected void pushCharacterStyle()", "description": "Pushes the current character style on a stack in preparation\n for forming a new nested character style."}, {"method_name": "popCharacterStyle", "method_sig": "protected void popCharacterStyle()", "description": "Pops a previously pushed character style off the stack\n to return to a previous style."}, {"method_name": "textAreaContent", "method_sig": "protected void textAreaContent (char[] data)", "description": "Adds the given content to the textarea document.\n This method gets called when we are in a textarea\n context.  Therefore all text that is seen belongs\n to the text area and is hence added to the\n TextAreaDocument associated with the text area."}, {"method_name": "preContent", "method_sig": "protected void preContent (char[] data)", "description": "Adds the given content that was encountered in a\n PRE element.  This synthesizes lines to hold the\n runs of text, and makes calls to addContent to\n actually add the text."}, {"method_name": "blockOpen", "method_sig": "protected void blockOpen (HTML.Tag t,\n                         MutableAttributeSet attr)", "description": "Adds an instruction to the parse buffer to create a\n block element with the given attributes."}, {"method_name": "blockClose", "method_sig": "protected void blockClose (HTML.Tag t)", "description": "Adds an instruction to the parse buffer to close out\n a block element of the given type."}, {"method_name": "addContent", "method_sig": "protected void addContent (char[] data,\n                          int offs,\n                          int length)", "description": "Adds some text with the current character attributes."}, {"method_name": "addContent", "method_sig": "protected void addContent (char[] data,\n                          int offs,\n                          int length,\n                          boolean generateImpliedPIfNecessary)", "description": "Adds some text with the current character attributes."}, {"method_name": "addSpecialElement", "method_sig": "protected void addSpecialElement (HTML.Tag t,\n                                 MutableAttributeSet a)", "description": "Adds content that is basically specified entirely\n in the attribute set."}]}