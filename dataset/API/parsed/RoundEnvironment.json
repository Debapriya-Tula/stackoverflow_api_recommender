{"name": "Interface RoundEnvironment", "module": "java.compiler", "package": "javax.annotation.processing", "text": "An annotation processing tool framework will provide an annotation processor with an object\n implementing this interface so that the processor can query for\n information about a round of annotation processing.", "codes": ["public interface RoundEnvironment"], "fields": [], "methods": [{"method_name": "processingOver", "method_sig": "boolean processingOver()", "description": "Returns true if types generated by this round will not\n be subject to a subsequent round of annotation processing;\n returns false otherwise."}, {"method_name": "errorRaised", "method_sig": "boolean errorRaised()", "description": "Returns true if an error was raised in the prior round\n of processing; returns false otherwise."}, {"method_name": "getRootElements", "method_sig": "Set<? extends Element> getRootElements()", "description": "Returns the root elements for annotation processing generated\n by the prior round."}, {"method_name": "getElementsAnnotatedWith", "method_sig": "Set<? extends Element> getElementsAnnotatedWith (TypeElement a)", "description": "Returns the elements annotated with the given annotation type.\n The annotation may appear directly or be inherited.  Only\n package elements, module elements, and type elements included in this\n round of annotation processing, or declarations of members,\n constructors, parameters, or type parameters declared within\n those, are returned.  Included type elements are root types and any member types nested within\n them.  Elements of a package are not considered included simply\n because a package-info file for that package was\n created.\n Likewise, elements of a module are not considered included\n simply because a module-info file for that module was\n created"}, {"method_name": "getElementsAnnotatedWithAny", "method_sig": "default Set<? extends Element> getElementsAnnotatedWithAny (TypeElement... annotations)", "description": "Returns the elements annotated with one or more of the given\n annotation types."}, {"method_name": "getElementsAnnotatedWith", "method_sig": "Set<? extends Element> getElementsAnnotatedWith (Class<? extends Annotation> a)", "description": "Returns the elements annotated with the given annotation type.\n The annotation may appear directly or be inherited.  Only\n package elements, module elements, and type elements included in this\n round of annotation processing, or declarations of members,\n constructors, parameters, or type parameters declared within\n those, are returned.  Included type elements are root types and any member types nested within\n them.  Elements in a package are not considered included simply\n because a package-info file for that package was\n created.\n Likewise, elements of a module are not considered included\n simply because a module-info file for that module was\n created"}, {"method_name": "getElementsAnnotatedWithAny", "method_sig": "default Set<? extends Element> getElementsAnnotatedWithAny (Set<Class<? extends Annotation>> annotations)", "description": "Returns the elements annotated with one or more of the given\n annotation types."}]}