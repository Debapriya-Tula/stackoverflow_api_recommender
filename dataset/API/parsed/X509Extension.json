{"name": "Interface X509Extension", "module": "java.base", "package": "java.security.cert", "text": "Interface for an X.509 extension.\n\n The extensions defined for X.509 v3\n Certificates and v2\n CRLs (Certificate Revocation\n Lists) provide methods\n for associating additional attributes with users or public keys,\n for managing the certification hierarchy, and for managing CRL\n distribution. The X.509 extensions format also allows communities\n to define private extensions to carry information unique to those\n communities.\n\n Each extension in a certificate/CRL may be designated as\n critical or non-critical.  A certificate/CRL-using system (an application\n validating a certificate/CRL) must reject the certificate/CRL if it\n encounters a critical extension it does not recognize.  A non-critical\n extension may be ignored if it is not recognized.\n \n The ASN.1 definition for this is:\n \n Extensions  ::=  SEQUENCE SIZE (1..MAX) OF Extension\n\n Extension  ::=  SEQUENCE  {\n     extnId        OBJECT IDENTIFIER,\n     critical      BOOLEAN DEFAULT FALSE,\n     extnValue     OCTET STRING\n                   -- contains a DER encoding of a value\n                   -- of the type registered for use with\n                   -- the extnId object identifier value\n }\n \n Since not all extensions are known, the getExtensionValue\n method returns the DER-encoded OCTET STRING of the\n extension value (i.e., the extnValue). This can then\n be handled by a Class that understands the extension.", "codes": ["public interface X509Extension"], "fields": [], "methods": [{"method_name": "hasUnsupportedCriticalExtension", "method_sig": "boolean hasUnsupportedCriticalExtension()", "description": "Check if there is a critical extension that is not supported."}, {"method_name": "getCriticalExtensionOIDs", "method_sig": "Set<String> getCriticalExtensionOIDs()", "description": "Gets a Set of the OID strings for the extension(s) marked\n CRITICAL in the certificate/CRL managed by the object\n implementing this interface.\n\n Here is sample code to get a Set of critical extensions from an\n X509Certificate and print the OIDs:\n \n X509Certificate cert = null;\n try (InputStream inStrm = new FileInputStream(\"DER-encoded-Cert\")) {\n     CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n     cert = (X509Certificate)cf.generateCertificate(inStrm);\n }\n\n Set<String> critSet = cert.getCriticalExtensionOIDs();\n if (critSet != null && !critSet.isEmpty()) {\n     System.out.println(\"Set of critical extensions:\");\n     for (String oid : critSet) {\n         System.out.println(oid);\n     }\n }\n "}, {"method_name": "getNonCriticalExtensionOIDs", "method_sig": "Set<String> getNonCriticalExtensionOIDs()", "description": "Gets a Set of the OID strings for the extension(s) marked\n NON-CRITICAL in the certificate/CRL managed by the object\n implementing this interface.\n\n Here is sample code to get a Set of non-critical extensions from an\n X509CRL revoked certificate entry and print the OIDs:\n \n CertificateFactory cf = null;\n X509CRL crl = null;\n try (InputStream inStrm = new FileInputStream(\"DER-encoded-CRL\")) {\n     cf = CertificateFactory.getInstance(\"X.509\");\n     crl = (X509CRL)cf.generateCRL(inStrm);\n }\n\n byte[] certData = <DER-encoded certificate data>\n ByteArrayInputStream bais = new ByteArrayInputStream(certData);\n X509Certificate cert = (X509Certificate)cf.generateCertificate(bais);\n X509CRLEntry badCert =\n              crl.getRevokedCertificate(cert.getSerialNumber());\n\n if (badCert != null) {\n     Set<String> nonCritSet = badCert.getNonCriticalExtensionOIDs();\n     if (nonCritSet != null)\n         for (String oid : nonCritSet) {\n             System.out.println(oid);\n         }\n }\n "}, {"method_name": "getExtensionValue", "method_sig": "byte[] getExtensionValue (String oid)", "description": "Gets the DER-encoded OCTET string for the extension value\n (extnValue) identified by the passed-in oid\n String.\n The oid string is\n represented by a set of nonnegative whole numbers separated\n by periods.\n\n For example:\n\nExamples of OIDs and extension names\n\n\nOID (Object Identifier)\nExtension Name\n\n\n2.5.29.14\nSubjectKeyIdentifier\n2.5.29.15\nKeyUsage\n2.5.29.16\nPrivateKeyUsage\n2.5.29.17\nSubjectAlternativeName\n2.5.29.18\nIssuerAlternativeName\n2.5.29.19\nBasicConstraints\n2.5.29.30\nNameConstraints\n2.5.29.33\nPolicyMappings\n2.5.29.35\nAuthorityKeyIdentifier\n2.5.29.36\nPolicyConstraints\n\n"}]}