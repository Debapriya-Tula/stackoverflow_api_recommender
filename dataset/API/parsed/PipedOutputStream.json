{"name": "Class PipedOutputStream", "module": "java.base", "package": "java.io", "text": "A piped output stream can be connected to a piped input stream\n to create a communications pipe. The piped output stream is the\n sending end of the pipe. Typically, data is written to a\n PipedOutputStream object by one thread and data is\n read from the connected PipedInputStream by some\n other thread. Attempting to use both objects from a single thread\n is not recommended as it may deadlock the thread.\n The pipe is said to be  broken  if a\n thread that was reading data bytes from the connected piped input\n stream is no longer alive.", "codes": ["public class PipedOutputStream\nextends OutputStream"], "fields": [], "methods": [{"method_name": "connect", "method_sig": "public void connect (PipedInputStream snk)\n             throws IOException", "description": "Connects this piped output stream to a receiver. If this object\n is already connected to some other piped input stream, an\n IOException is thrown.\n \n If snk is an unconnected piped input stream and\n src is an unconnected piped output stream, they may\n be connected by either the call:\n \n src.connect(snk)\n or the call:\n \n snk.connect(src)\n The two calls have the same effect."}, {"method_name": "write", "method_sig": "public void write (int b)\n           throws IOException", "description": "Writes the specified byte to the piped output stream.\n \n Implements the write method of OutputStream."}, {"method_name": "write", "method_sig": "public void write (byte[] b,\n                  int off,\n                  int len)\n           throws IOException", "description": "Writes len bytes from the specified byte array\n starting at offset off to this piped output stream.\n This method blocks until all the bytes are written to the output\n stream."}, {"method_name": "flush", "method_sig": "public void flush()\n           throws IOException", "description": "Flushes this output stream and forces any buffered output bytes\n to be written out.\n This will notify any readers that bytes are waiting in the pipe."}, {"method_name": "close", "method_sig": "public void close()\n           throws IOException", "description": "Closes this piped output stream and releases any system resources\n associated with this stream. This stream may no longer be used for\n writing bytes."}]}