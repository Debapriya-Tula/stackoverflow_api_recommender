{"name": "Enum SourceVersion", "module": "java.compiler", "package": "javax.lang.model", "text": "Source versions of the Java\u2122 programming language.\n\n See the appropriate edition of\n The Java\u2122 Language Specification\n for information about a particular source version.\n\n Note that additional source version constants will be added to\n model future releases of the language.", "codes": ["public enum SourceVersion\nextends Enum<SourceVersion>"], "fields": [], "methods": [{"method_name": "values", "method_sig": "public static SourceVersion[] values()", "description": "Returns an array containing the constants of this enum type, in\nthe order they are declared. This method may be used to iterate\nover the constants as follows:\n\nfor (SourceVersion c : SourceVersion.values())\n\u00a0   System.out.println(c);\n"}, {"method_name": "valueOf", "method_sig": "public static SourceVersion valueOf (String name)", "description": "Returns the enum constant of this type with the specified name.\nThe string must match exactly an identifier used to declare an\nenum constant in this type.  (Extraneous whitespace characters are \nnot permitted.)"}, {"method_name": "latest", "method_sig": "public static SourceVersion latest()", "description": "Returns the latest source version that can be modeled."}, {"method_name": "latestSupported", "method_sig": "public static SourceVersion latestSupported()", "description": "Returns the latest source version fully supported by the\n current execution environment.  RELEASE_5 or later must\n be returned."}, {"method_name": "isIdentifier", "method_sig": "public static boolean isIdentifier (CharSequence name)", "description": "Returns whether or not name is a syntactically valid\n identifier (simple name) or keyword in the latest source\n version.  The method returns true if the name consists\n of an initial character for which Character.isJavaIdentifierStart(int) returns true,\n followed only by characters for which Character.isJavaIdentifierPart(int) returns true.\n This pattern matches regular identifiers, keywords, restricted\n keywords, and the literals \"true\", \"false\",\n \"null\", and \"var\".\n\n The method returns false for all other strings."}, {"method_name": "isName", "method_sig": "public static boolean isName (CharSequence name)", "description": "Returns whether or not name is a syntactically valid\n qualified name in the latest source version.  Unlike isIdentifier, this method returns false\n for keywords, boolean literals, and the null literal.\n\n This method returns true for restricted\n keywords and \"var\"."}, {"method_name": "isName", "method_sig": "public static boolean isName (CharSequence name,\n                             SourceVersion version)", "description": "Returns whether or not name is a syntactically valid\n qualified name in the given source version.  Unlike isIdentifier, this method returns false\n for keywords, boolean literals, and the null literal.\n\n This method returns true for restricted\n keywords and \"var\"."}, {"method_name": "isKeyword", "method_sig": "public static boolean isKeyword (CharSequence s)", "description": "Returns whether or not s is a keyword, boolean literal,\n or null literal in the latest source version.\n This method returns false for restricted\n keywords and \"var\"."}, {"method_name": "isKeyword", "method_sig": "public static boolean isKeyword (CharSequence s,\n                                SourceVersion version)", "description": "Returns whether or not s is a keyword, boolean literal,\n or null literal in the given source version.\n This method returns false for restricted\n keywords and \"var\"."}]}