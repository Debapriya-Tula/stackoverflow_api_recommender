{"name": "Class StringReader", "module": "java.base", "package": "java.io", "text": "A character stream whose source is a string.", "codes": ["public class StringReader\nextends Reader"], "fields": [], "methods": [{"method_name": "read", "method_sig": "public int read()\n         throws IOException", "description": "Reads a single character."}, {"method_name": "read", "method_sig": "public int read (char[] cbuf,\n                int off,\n                int len)\n         throws IOException", "description": "Reads characters into a portion of an array."}, {"method_name": "skip", "method_sig": "public long skip (long ns)\n          throws IOException", "description": "Skips the specified number of characters in the stream. Returns\n the number of characters that were skipped.\n\n The ns parameter may be negative, even though the\n skip method of the Reader superclass throws\n an exception in this case. Negative values of ns cause the\n stream to skip backwards. Negative return values indicate a skip\n backwards. It is not possible to skip backwards past the beginning of\n the string.\n\n If the entire string has been read or skipped, then this method has\n no effect and always returns 0."}, {"method_name": "ready", "method_sig": "public boolean ready()\n              throws IOException", "description": "Tells whether this stream is ready to be read."}, {"method_name": "markSupported", "method_sig": "public boolean markSupported()", "description": "Tells whether this stream supports the mark() operation, which it does."}, {"method_name": "mark", "method_sig": "public void mark (int readAheadLimit)\n          throws IOException", "description": "Marks the present position in the stream.  Subsequent calls to reset()\n will reposition the stream to this point."}, {"method_name": "reset", "method_sig": "public void reset()\n           throws IOException", "description": "Resets the stream to the most recent mark, or to the beginning of the\n string if it has never been marked."}, {"method_name": "close", "method_sig": "public void close()", "description": "Closes the stream and releases any system resources associated with\n it. Once the stream has been closed, further read(),\n ready(), mark(), or reset() invocations will throw an IOException.\n Closing a previously closed stream has no effect. This method will block\n while there is another thread blocking on the reader."}]}