{"name": "Class BaseRowSet", "module": "java.sql.rowset", "package": "javax.sql.rowset", "text": "An abstract class providing a RowSet object with its basic functionality.\n The basic functions include having properties and sending event notifications,\n which all JavaBeans\u2122 components must implement.\n\n 1.0 Overview\n The BaseRowSet class provides the core functionality\n for all RowSet implementations,\n and all standard implementations may use this class in combination with\n one or more RowSet interfaces in order to provide a standard\n vendor-specific implementation.  To clarify, all implementations must implement\n at least one of the RowSet interfaces (JdbcRowSet,\n CachedRowSet, JoinRowSet, FilteredRowSet,\n or WebRowSet). This means that any implementation that extends\n the BaseRowSet class must also implement one of the RowSet\n interfaces.\n \n The BaseRowSet class provides the following:\n\n \nProperties\n\nFields for storing current properties\n     Methods for getting and setting properties\n     \nEvent notification\nA complete set of setter methods for setting the parameters in a\n      RowSet object's command\n\n  Streams\n\nFields for storing stream instances\n  Constants for indicating the type of a stream\n  \n\n2.0 Setting Properties\n All rowsets maintain a set of properties, which will usually be set using\n a tool.  The number and kinds of properties a rowset has will vary,\n depending on what the RowSet implementation does and how it gets\n its data.  For example,\n rowsets that get their data from a ResultSet object need to\n set the properties that are required for making a database connection.\n If a RowSet object uses the DriverManager facility to make a\n connection, it needs to set a property for the JDBC URL that identifies the\n appropriate driver, and it needs to set the properties that give the\n user name and password.\n If, on the other hand, the rowset uses a DataSource object\n to make the connection, which is the preferred method, it does not need to\n set the property for the JDBC URL.  Instead, it needs to set the property\n for the logical name of the data source along with the properties for\n the user name and password.\n \n NOTE:  In order to use a DataSource object for making a\n connection, the DataSource object must have been registered\n with a naming service that uses the Java Naming and Directory\n Interface\u2122 (JNDI) API.  This registration\n is usually done by a person acting in the capacity of a system administrator.\n\n 3.0 Setting the Command and Its Parameters\n When a rowset gets its data from a relational database, it executes a command (a query)\n that produces a ResultSet object.  This query is the command that is set\n for the RowSet object's command property.  The rowset populates itself with data by reading the\n data from the ResultSet object into itself. If the query\n contains placeholders for values to be set, the BaseRowSet setter methods\n are used to set these values. All setter methods allow these values to be set\n to null if required.\n \n The following code fragment illustrates how the\n CachedRowSet\u2122\n object crs might have its command property set.  Note that if a\n tool is used to set properties, this is the code that the tool would use.\n \n    crs.setCommand(\"SELECT FIRST_NAME, LAST_NAME, ADDRESS FROM CUSTOMERS\" +\n                   \"WHERE CREDIT_LIMIT > ? AND REGION = ?\");\n \n\n In this example, the values for CREDIT_LIMIT and\n REGION are placeholder parameters, which are indicated with a\n question mark (?).  The first question mark is placeholder parameter number\n 1, the second question mark is placeholder parameter number\n 2, and so on.  Any placeholder parameters must be set with\n values before the query can be executed. To set these\n placeholder parameters, the BaseRowSet class provides a set of setter\n methods, similar to those provided by the PreparedStatement\n interface, for setting values of each data type.  A RowSet object stores the\n parameter values internally, and its execute method uses them internally\n to set values for the placeholder parameters\n before it sends the command to the DBMS to be executed.\n \n The following code fragment demonstrates\n setting the two parameters in the query from the previous example.\n \n    crs.setInt(1, 5000);\n    crs.setString(2, \"West\");\n \n If the execute method is called at this point, the query\n sent to the DBMS will be:\n \n    \"SELECT FIRST_NAME, LAST_NAME, ADDRESS FROM CUSTOMERS\" +\n                   \"WHERE CREDIT_LIMIT > 5000 AND REGION = 'West'\"\n \n NOTE: Setting Array, Clob, Blob and\n Ref objects as a command parameter, stores these values as\n SerialArray, SerialClob, SerialBlob\n and SerialRef objects respectively.\n\n 4.0 Handling of Parameters Behind the Scenes\n\n NOTE: The BaseRowSet class provides two kinds of setter methods,\n those that set properties and those that set placeholder parameters. The setter\n methods discussed in this section are those that set placeholder parameters.\n \n The placeholder parameters set with the BaseRowSet setter methods\n are stored as objects in an internal Hashtable object.\n Primitives are stored as their Object type. For example, byte\n is stored as Byte object, and int is stored as\n an Integer object.\n When the method execute is called, the values in the\n Hashtable object are substituted for the appropriate placeholder\n parameters in the command.\n \n A call to the method getParams returns the values stored in the\n Hashtable object as an array of Object instances.\n An element in this array may be a simple Object instance or an\n array (which is a type of Object). The particular setter method used\n determines whether an element in this array is an Object or an array.\n \n The majority of methods for setting placeholder parameters take two parameters,\n  with the first parameter\n indicating which placeholder parameter is to be set, and the second parameter\n giving the value to be set.  Methods such as setInt,\n setString, setBoolean, and setLong fall into\n this category.  After these methods have been called, a call to the method\n getParams will return an array with the values that have been set. Each\n element in the array is an Object instance representing the\n values that have been set. The order of these values in the array is determined by the\n int (the first parameter) passed to the setter method. The values in the\n array are the values (the second parameter) passed to the setter method.\n In other words, the first element in the array is the value\n to be set for the first placeholder parameter in the RowSet object's\n command. The second element is the value to\n be set for the second placeholder parameter, and so on.\n \n Several setter methods send the driver and DBMS information beyond the value to be set.\n When the method getParams is called after one of these setter methods has\n been used, the elements in the array will themselves be arrays to accommodate the\n additional information. In this category, the method setNull is a special case\n because one version takes only\n two parameters (setNull(int parameterIndex, int SqlType)). Nevertheless,\n it requires\n an array to contain the information that will be passed to the driver and DBMS.  The first\n element in this array is the value to be set, which is null, and the\n second element is the int supplied for sqlType, which\n indicates the type of SQL value that is being set to null. This information\n is needed by some DBMSs and is therefore required in order to ensure that applications\n are portable.\n The other version is intended to be used when the value to be set to null\n is a user-defined type. It takes three parameters\n (setNull(int parameterIndex, int sqlType, String typeName)) and also\n requires an array to contain the information to be passed to the driver and DBMS.\n The first two elements in this array are the same as for the first version of\n setNull.  The third element, typeName, gives the SQL name of\n the user-defined type. As is true with the other setter methods, the number of the\n placeholder parameter to be set is indicated by an element's position in the array\n returned by getParams.  So, for example, if the parameter\n supplied to setNull is 2, the second element in the array\n returned by getParams will be an array of two or three elements.\n \n Some methods, such as setObject and setDate have versions\n that take more than two parameters, with the extra parameters giving information\n to the driver or the DBMS. For example, the methods setDate,\n setTime, and setTimestamp can take a Calendar\n object as their third parameter.  If the DBMS does not store time zone information,\n the driver uses the Calendar object to construct the Date,\n Time, or Timestamp object being set. As is true with other\n methods that provide additional information, the element in the array returned\n by getParams is an array instead of a simple Object instance.\n \n The methods setAsciiStream, setBinaryStream,\n setCharacterStream, and setUnicodeStream (which is\n deprecated, so applications should use getCharacterStream instead)\n take three parameters, so for them, the element in the array returned by\n getParams is also an array.  What is different about these setter\n methods is that in addition to the information provided by parameters, the array contains\n one of the BaseRowSet constants indicating the type of stream being set.\n \n NOTE: The method getParams is called internally by\n RowSet implementations extending this class; it is not normally called by an\n application programmer directly.\n\n 5.0 Event Notification\n The BaseRowSet class provides the event notification\n mechanism for rowsets.  It contains the field\n listeners, methods for adding and removing listeners, and\n methods for notifying listeners of changes.\n \n A listener is an object that has implemented the RowSetListener interface.\n If it has been added to a RowSet object's list of listeners, it will be notified\n  when an event occurs on that RowSet object.  Each listener's\n implementation of the RowSetListener methods defines what that object\n will do when it is notified that an event has occurred.\n \n There are three possible events for a RowSet object:\n \nthe cursor moves\n an individual row is changed (updated, deleted, or inserted)\n the contents of the entire RowSet object  are changed\n \n\n The BaseRowSet method used for the notification indicates the\n type of event that has occurred.  For example, the method\n notifyRowChanged indicates that a row has been updated,\n deleted, or inserted.  Each of the notification methods creates a\n RowSetEvent object, which is supplied to the listener in order to\n identify the RowSet object on which the event occurred.\n What the listener does with this information, which may be nothing, depends on how it was\n implemented.\n\n 6.0 Default Behavior\n A default BaseRowSet object is initialized with many starting values.\n\n The following is true of a default RowSet instance that extends\n the BaseRowSet class:\n \nHas a scrollable cursor and does not show changes\n       made by others.\n   Is updatable.\n   Does not show rows that have been deleted.\n   Has no time limit for how long a driver may take to\n       execute the RowSet object's command.\n   Has no limit for the number of rows it may contain.\n   Has no limit for the number of bytes a column may contain. NOTE: This\n   limit applies only to columns that hold values of the\n   following types:  BINARY, VARBINARY,\n   LONGVARBINARY, CHAR, VARCHAR,\n   and LONGVARCHAR.\n   Will not see uncommitted data (make \"dirty\" reads).\n   Has escape processing turned on.\n   Has its connection's type map set to null.\n   Has an empty Vector object for storing the values set\n       for the placeholder parameters in the RowSet object's command.\n \n\n If other values are desired, an application must set the property values\n explicitly. For example, the following line of code sets the maximum number\n of rows for the CachedRowSet object crs to 500.\n \n    crs.setMaxRows(500);\n \n Methods implemented in extensions of this BaseRowSet class must throw an\n SQLException object for any violation of the defined assertions.  Also, if the\n extending class overrides and reimplements any BaseRowSet method and encounters\n connectivity or underlying data source issues, that method may in addition throw an\n SQLException object for that reason.", "codes": ["public abstract class BaseRowSet\nextends Object\nimplements Serializable, Cloneable"], "fields": [{"field_name": "UNICODE_STREAM_PARAM", "field_sig": "public static final\u00a0int UNICODE_STREAM_PARAM", "description": "A constant indicating to a RowSetReaderImpl object\n that a given parameter is a Unicode stream. This\n RowSetReaderImpl object is provided as an extension of the\n SyncProvider abstract class defined in the\n SyncFactory static factory SPI mechanism."}, {"field_name": "BINARY_STREAM_PARAM", "field_sig": "public static final\u00a0int BINARY_STREAM_PARAM", "description": "A constant indicating to a RowSetReaderImpl object\n that a given parameter is a binary stream. A\n RowSetReaderImpl object is provided as an extension of the\n SyncProvider abstract class defined in the\n SyncFactory static factory SPI mechanism."}, {"field_name": "ASCII_STREAM_PARAM", "field_sig": "public static final\u00a0int ASCII_STREAM_PARAM", "description": "A constant indicating to a RowSetReaderImpl object\n that a given parameter is an ASCII stream. A\n RowSetReaderImpl object is provided as an extension of the\n SyncProvider abstract class defined in the\n SyncFactory static factory SPI mechanism."}, {"field_name": "binaryStream", "field_sig": "protected\u00a0InputStream binaryStream", "description": "The InputStream object that will be\n returned by the method getBinaryStream, which is\n specified in the ResultSet interface."}, {"field_name": "unicodeStream", "field_sig": "protected\u00a0InputStream unicodeStream", "description": "The InputStream object that will be\n returned by the method getUnicodeStream,\n which is specified in the ResultSet interface."}, {"field_name": "asciiStream", "field_sig": "protected\u00a0InputStream asciiStream", "description": "The InputStream object that will be\n returned by the method getAsciiStream,\n which is specified in the ResultSet interface."}, {"field_name": "charStream", "field_sig": "protected\u00a0Reader charStream", "description": "The Reader object that will be\n returned by the method getCharacterStream,\n which is specified in the ResultSet interface."}], "methods": [{"method_name": "initParams", "method_sig": "protected void initParams()", "description": "Performs the necessary internal configurations and initializations\n to allow any JDBC RowSet implementation to start using\n the standard facilities provided by a BaseRowSet\n instance. This method should be called after the RowSet object\n has been instantiated to correctly initialize all parameters. This method\n should never be called by an application, but is called from with\n a RowSet implementation extending this class."}, {"method_name": "addRowSetListener", "method_sig": "public void addRowSetListener (RowSetListener listener)", "description": "The listener will be notified whenever an event occurs on this RowSet\n object.\n \n A listener might, for example, be a table or graph that needs to\n be updated in order to accurately reflect the current state of\n the RowSet object.\n \nNote: if the RowSetListener object is\n null, this method silently discards the null\n value and does not add a null reference to the set of listeners.\n \nNote: if the listener is already set, and the new RowSetListener\n instance is added to the set of listeners already registered to receive\n event notifications from this RowSet."}, {"method_name": "removeRowSetListener", "method_sig": "public void removeRowSetListener (RowSetListener listener)", "description": "Removes the designated object from this RowSet object's list of listeners.\n If the given argument is not a registered listener, this method\n does nothing.\n\n  Note: if the RowSetListener object is\n null, this method silently discards the null\n value."}, {"method_name": "notifyCursorMoved", "method_sig": "protected void notifyCursorMoved()\n                          throws SQLException", "description": "Notifies all of the listeners registered with this\n RowSet object that its cursor has moved.\n \n When an application calls a method to move the cursor,\n that method moves the cursor and then calls this method\n internally. An application should never invoke\n this method directly."}, {"method_name": "notifyRowChanged", "method_sig": "protected void notifyRowChanged()\n                         throws SQLException", "description": "Notifies all of the listeners registered with this RowSet object that\n one of its rows has changed.\n \n When an application calls a method that changes a row, such as\n the CachedRowSet methods insertRow,\n updateRow, or deleteRow,\n that method calls notifyRowChanged\n internally. An application should never invoke\n this method directly."}, {"method_name": "notifyRowSetChanged", "method_sig": "protected void notifyRowSetChanged()\n                            throws SQLException", "description": "Notifies all of the listeners registered with this RowSet\n object that its entire contents have changed.\n \n When an application calls methods that change the entire contents\n of the RowSet object, such as the CachedRowSet methods\n execute, populate, restoreOriginal,\n or release, that method calls notifyRowSetChanged\n internally (either directly or indirectly). An application should\n never invoke this method directly."}, {"method_name": "getCommand", "method_sig": "public String getCommand()", "description": "Retrieves the SQL query that is the command for this\n RowSet object. The command property contains the query that\n will be executed to populate this RowSet object.\n \n The SQL query returned by this method is used by RowSet methods\n such as execute and populate, which may be implemented\n by any class that extends the BaseRowSet abstract class and\n implements one or more of the standard JSR-114 RowSet\n interfaces.\n \n The command is used by the RowSet object's\n reader to obtain a ResultSet object.  The reader then\n reads the data from the ResultSet object and uses it to\n to populate this RowSet object.\n \n The default value for the command property is null."}, {"method_name": "setCommand", "method_sig": "public void setCommand (String cmd)\n                throws SQLException", "description": "Sets this RowSet object's command property to\n the given String object and clears the parameters, if any,\n that were set for the previous command.\n \n The command property may not be needed if the RowSet\n object gets its data from a source that does not support commands,\n such as a spreadsheet or other tabular file.\n Thus, this property is optional and may be null."}, {"method_name": "getUrl", "method_sig": "public String getUrl()\n              throws SQLException", "description": "Retrieves the JDBC URL that this RowSet object's\n javax.sql.Reader object uses to make a connection\n with a relational database using a JDBC technology-enabled driver.\n\n The Url property will be null if the underlying data\n source is a non-SQL data source, such as a spreadsheet or an XML\n data source."}, {"method_name": "setUrl", "method_sig": "public void setUrl (String url)\n            throws SQLException", "description": "Sets the Url property for this RowSet object\n to the given String object and sets the dataSource name\n property to null. The Url property is a\n JDBC URL that is used when\n the connection is created using a JDBC technology-enabled driver\n (\"JDBC driver\") and the DriverManager.\n The correct JDBC URL for the specific driver to be used can be found\n in the driver documentation.  Although there are guidelines for how\n a JDBC URL is formed,\n a driver vendor can specify any String object except\n one with a length of 0 (an empty string).\n \n Setting the Url property is optional if connections are established using\n a DataSource object instead of the DriverManager.\n The driver will use either the URL property or the\n dataSourceName property to create a connection, whichever was\n specified most recently. If an application uses a JDBC URL, it\n must load a JDBC driver that accepts the JDBC URL before it uses the\n RowSet object to connect to a database.  The RowSet\n object will use the URL internally to create a database connection in order\n to read or write data."}, {"method_name": "getDataSourceName", "method_sig": "public String getDataSourceName()", "description": "Returns the logical name that when supplied to a naming service\n that uses the Java Naming and Directory Interface (JNDI) API, will\n retrieve a javax.sql.DataSource object. This\n DataSource object can be used to establish a connection\n to the data source that it represents.\n \n Users should set either the url or the data source name property.\n The driver will use the property set most recently to establish a\n connection."}, {"method_name": "setDataSourceName", "method_sig": "public void setDataSourceName (String name)\n                       throws SQLException", "description": "Sets the DataSource name property for this RowSet\n object to the given logical name and sets this RowSet object's\n Url property to null. The name must have been bound to a\n DataSource object in a JNDI naming service so that an\n application can do a lookup using that name to retrieve the\n DataSource object bound to it. The DataSource\n object can then be used to establish a connection to the data source it\n represents.\n \n Users should set either the Url property or the dataSourceName property.\n If both properties are set, the driver will use the property set most recently."}, {"method_name": "getUsername", "method_sig": "public String getUsername()", "description": "Returns the user name used to create a database connection.  Because it\n is not serialized, the username property is set at runtime before\n calling the method execute."}, {"method_name": "setUsername", "method_sig": "public void setUsername (String name)", "description": "Sets the username property for this RowSet object\n to the given user name. Because it\n is not serialized, the username property is set at run time before\n calling the method execute."}, {"method_name": "getPassword", "method_sig": "public String getPassword()", "description": "Returns the password used to create a database connection for this\n RowSet object.  Because the password property is not\n serialized, it is set at run time before calling the method\n execute. The default value is null"}, {"method_name": "setPassword", "method_sig": "public void setPassword (String pass)", "description": "Sets the password used to create a database connection for this\n RowSet object to the given String\n object.  Because the password property is not\n serialized, it is set at run time before calling the method\n execute."}, {"method_name": "setType", "method_sig": "public void setType (int type)\n             throws SQLException", "description": "Sets the type for this RowSet object to the specified type.\n The default type is ResultSet.TYPE_SCROLL_INSENSITIVE."}, {"method_name": "getType", "method_sig": "public int getType()\n            throws SQLException", "description": "Returns the type of this RowSet object. The type is initially\n determined by the statement that created the RowSet object.\n The RowSet object can call the method\n setType at any time to change its\n type.  The default is TYPE_SCROLL_INSENSITIVE."}, {"method_name": "setConcurrency", "method_sig": "public void setConcurrency (int concurrency)\n                    throws SQLException", "description": "Sets the concurrency for this RowSet object to\n the specified concurrency. The default concurrency for any RowSet\n object (connected or disconnected) is ResultSet.CONCUR_UPDATABLE,\n but this method may be called at any time to change the concurrency."}, {"method_name": "isReadOnly", "method_sig": "public boolean isReadOnly()", "description": "Returns a boolean indicating whether this\n RowSet object is read-only.\n Any attempts to update a read-only RowSet object will result in an\n SQLException being thrown. By default,\n rowsets are updatable if updates are possible."}, {"method_name": "setReadOnly", "method_sig": "public void setReadOnly (boolean value)", "description": "Sets this RowSet object's readOnly  property to the given boolean."}, {"method_name": "getTransactionIsolation", "method_sig": "public int getTransactionIsolation()", "description": "Returns the transaction isolation property for this\n RowSet object's connection. This property represents\n the transaction isolation level requested for use in transactions.\n \n For RowSet implementations such as\n the CachedRowSet that operate in a disconnected environment,\n the SyncProvider object\n offers complementary locking and data integrity options. The\n options described below are pertinent only to connected RowSet\n objects (JdbcRowSet objects)."}, {"method_name": "setTransactionIsolation", "method_sig": "public void setTransactionIsolation (int level)\n                             throws SQLException", "description": "Sets the transaction isolation property for this JDBC RowSet object to the given\n constant. The DBMS will use this transaction isolation level for\n transactions if it can.\n \n For RowSet implementations such as\n the CachedRowSet that operate in a disconnected environment,\n the SyncProvider object being used\n offers complementary locking and data integrity options. The\n options described below are pertinent only to connected RowSet\n objects (JdbcRowSet objects)."}, {"method_name": "getTypeMap", "method_sig": "public Map<String, Class<?>> getTypeMap()", "description": "Retrieves the type map associated with the Connection\n object for this RowSet object.\n \n Drivers that support the JDBC 3.0 API will create\n Connection objects with an associated type map.\n This type map, which is initially empty, can contain one or more\n fully-qualified SQL names and Class objects indicating\n the class to which the named SQL value will be mapped. The type mapping\n specified in the connection's type map is used for custom type mapping\n when no other type map supersedes it.\n \n If a type map is explicitly supplied to a method that can perform\n custom mapping, that type map supersedes the connection's type map."}, {"method_name": "setTypeMap", "method_sig": "public void setTypeMap (Map<String, Class<?>> map)", "description": "Installs the given java.util.Map object as the type map\n associated with the Connection object for this\n RowSet object.  The custom mapping indicated in\n this type map will be used unless a different type map is explicitly\n supplied to a method, in which case the type map supplied will be used."}, {"method_name": "getMaxFieldSize", "method_sig": "public int getMaxFieldSize()\n                    throws SQLException", "description": "Retrieves the maximum number of bytes that can be used for a column\n value in this RowSet object.\n This limit applies only to columns that hold values of the\n following types:  BINARY, VARBINARY,\n LONGVARBINARY, CHAR, VARCHAR,\n and LONGVARCHAR.  If the limit is exceeded, the excess\n data is silently discarded."}, {"method_name": "setMaxFieldSize", "method_sig": "public void setMaxFieldSize (int max)\n                     throws SQLException", "description": "Sets the maximum number of bytes that can be used for a column\n value in this RowSet object to the given number.\n This limit applies only to columns that hold values of the\n following types:  BINARY, VARBINARY,\n LONGVARBINARY, CHAR, VARCHAR,\n and LONGVARCHAR.  If the limit is exceeded, the excess\n data is silently discarded. For maximum portability, it is advisable to\n use values greater than 256."}, {"method_name": "getMaxRows", "method_sig": "public int getMaxRows()\n               throws SQLException", "description": "Retrieves the maximum number of rows that this RowSet object may contain. If\n this limit is exceeded, the excess rows are silently dropped."}, {"method_name": "setMaxRows", "method_sig": "public void setMaxRows (int max)\n                throws SQLException", "description": "Sets the maximum number of rows that this RowSet object may contain to\n the given number. If this limit is exceeded, the excess rows are\n silently dropped."}, {"method_name": "setEscapeProcessing", "method_sig": "public void setEscapeProcessing (boolean enable)\n                         throws SQLException", "description": "Sets to the given boolean whether or not the driver will\n scan for escape syntax and do escape substitution before sending SQL\n statements to the database. The default is for the driver to do escape\n processing.\n \n Note: Since PreparedStatement objects have usually been\n parsed prior to making this call, disabling escape processing for\n prepared statements will likely have no effect."}, {"method_name": "getQueryTimeout", "method_sig": "public int getQueryTimeout()\n                    throws SQLException", "description": "Retrieves the maximum number of seconds the driver will wait for a\n query to execute. If the limit is exceeded, an SQLException\n is thrown."}, {"method_name": "setQueryTimeout", "method_sig": "public void setQueryTimeout (int seconds)\n                     throws SQLException", "description": "Sets to the given number the maximum number of seconds the driver will\n wait for a query to execute. If the limit is exceeded, an\n SQLException is thrown."}, {"method_name": "getShowDeleted", "method_sig": "public boolean getShowDeleted()\n                       throws SQLException", "description": "Retrieves a boolean indicating whether rows marked\n for deletion appear in the set of current rows.\n The default value is false.\n \n Note: Allowing deleted rows to remain visible complicates the behavior\n of some of the methods.  However, most RowSet object users\n can simply ignore this extra detail because only sophisticated\n applications will likely want to take advantage of this feature."}, {"method_name": "setShowDeleted", "method_sig": "public void setShowDeleted (boolean value)\n                    throws SQLException", "description": "Sets the property showDeleted to the given\n boolean value, which determines whether\n rows marked for deletion appear in the set of current rows."}, {"method_name": "getEscapeProcessing", "method_sig": "public boolean getEscapeProcessing()\n                            throws SQLException", "description": "Ascertains whether escape processing is enabled for this\n RowSet object."}, {"method_name": "setFetchDirection", "method_sig": "public void setFetchDirection (int direction)\n                       throws SQLException", "description": "Gives the driver a performance hint as to the direction in\n which the rows in this RowSet object will be\n processed.  The driver may ignore this hint.\n \n A RowSet object inherits the default properties of the\n ResultSet object from which it got its data.  That\n ResultSet object's default fetch direction is set by\n the Statement object that created it.\n \n This method applies to a RowSet object only while it is\n connected to a database using a JDBC driver.\n \n A RowSet object may use this method at any time to change\n its setting for the fetch direction."}, {"method_name": "getFetchDirection", "method_sig": "public int getFetchDirection()\n                      throws SQLException", "description": "Retrieves this RowSet object's current setting for the\n fetch direction. The default type is ResultSet.FETCH_FORWARD"}, {"method_name": "setFetchSize", "method_sig": "public void setFetchSize (int rows)\n                  throws SQLException", "description": "Sets the fetch size for this RowSet object to the given number of\n rows.  The fetch size gives a JDBC technology-enabled driver (\"JDBC driver\")\n a hint as to the\n number of rows that should be fetched from the database when more rows\n are needed for this RowSet object. If the fetch size specified\n is zero, the driver ignores the value and is free to make its own best guess\n as to what the fetch size should be.\n \n A RowSet object inherits the default properties of the\n ResultSet object from which it got its data.  That\n ResultSet object's default fetch size is set by\n the Statement object that created it.\n \n This method applies to a RowSet object only while it is\n connected to a database using a JDBC driver.\n For connected RowSet implementations such as\n JdbcRowSet, this method has a direct and immediate effect\n on the underlying JDBC driver.\n \n A RowSet object may use this method at any time to change\n its setting for the fetch size.\n \n For RowSet implementations such as\n CachedRowSet, which operate in a disconnected environment,\n the SyncProvider object being used\n may leverage the fetch size to poll the data source and\n retrieve a number of rows that do not exceed the fetch size and that may\n form a subset of the actual rows returned by the original query. This is\n an implementation variance determined by the specific SyncProvider\n object employed by the disconnected RowSet object."}, {"method_name": "getFetchSize", "method_sig": "public int getFetchSize()\n                 throws SQLException", "description": "Returns the fetch size for this RowSet object. The default\n value is zero."}, {"method_name": "getConcurrency", "method_sig": "public int getConcurrency()\n                   throws SQLException", "description": "Returns the concurrency for this RowSet object.\n The default is CONCUR_UPDATABLE for both connected and\n disconnected RowSet objects.\n \n An application can call the method setConcurrency at any time\n to change a RowSet object's concurrency."}, {"method_name": "setNull", "method_sig": "public void setNull (int parameterIndex,\n                    int sqlType)\n             throws SQLException", "description": "Sets the designated parameter to SQL NULL.\n Note that the parameter's SQL type must be specified using one of the\n type codes defined in java.sql.Types.  This SQL type is\n specified in the second parameter.\n \n Note that the second parameter tells the DBMS the data type of the value being\n set to NULL. Some DBMSs require this information, so it is required\n in order to make code more portable.\n \n The parameter value set by this method is stored internally and\n will be supplied as the appropriate parameter in this RowSet\n object's command when the method execute is called.\n Methods such as execute and populate must be\n provided in any class that extends this class and implements one or\n more of the standard JSR-114 RowSet interfaces.\n \n NOTE: JdbcRowSet does not require the populate method\n as it is undefined in this class.\n \n Calls made to the method getParams after this version of\n setNull\n has been called will return an Object array containing the parameter values that\n have been set.  In that array, the element that represents the values\n set with this method will itself be an array. The first element of that array\n is null.\n The second element is the value set for sqlType.\n The parameter number is indicated by an element's position in the array\n returned by the method getParams,\n with the first element being the value for the first placeholder parameter, the\n second element being the value for the second placeholder parameter, and so on.\n In other words, if the second placeholder parameter is being set to\n null, the array containing it will be the second element in\n the array returned by getParams.\n \n Note that because the numbering of elements in an array starts at zero,\n the array element that corresponds to placeholder parameter number\n parameterIndex is parameterIndex -1."}, {"method_name": "setNull", "method_sig": "public void setNull (int parameterIndex,\n                    int sqlType,\n                    String typeName)\n             throws SQLException", "description": "Sets the designated parameter to SQL NULL.\n\n Although this version of the  method setNull is intended\n for user-defined\n and REF parameters, this method may be used to set a null\n parameter for any JDBC type. The following are user-defined types:\n STRUCT, DISTINCT, and JAVA_OBJECT,\n and named array types.\n\n Note: To be portable, applications must give the\n SQL type code and the fully qualified SQL type name when specifying\n a NULL user-defined or REF parameter.\n In the case of a user-defined type, the name is the type name of\n the parameter itself.  For a REF parameter, the name is\n the type name of the referenced type.  If a JDBC technology-enabled\n driver does not need the type code or type name information,\n it may ignore it.\n \n If the parameter does not have a user-defined or REF type,\n the given typeName parameter is ignored.\n \n The parameter value set by this method is stored internally and\n will be supplied as the appropriate parameter in this RowSet\n object's command when the method execute is called.\n Methods such as execute and populate must be\n provided in any class that extends this class and implements one or\n more of the standard JSR-114 RowSet interfaces.\n \n NOTE: JdbcRowSet does not require the populate method\n as it is undefined in this class.\n \n Calls made to the method getParams after this version of\n setNull\n has been called will return an Object array containing the parameter values that\n have been set.  In that array, the element that represents the values\n set with this method will itself be an array. The first element of that array\n is null.\n The second element is the value set for sqlType, and the third\n element is the value set for typeName.\n The parameter number is indicated by an element's position in the array\n returned by the method getParams,\n with the first element being the value for the first placeholder parameter, the\n second element being the value for the second placeholder parameter, and so on.\n In other words, if the second placeholder parameter is being set to\n null, the array containing it will be the second element in\n the array returned by getParams.\n \n Note that because the numbering of elements in an array starts at zero,\n the array element that corresponds to placeholder parameter number\n parameterIndex is parameterIndex -1."}, {"method_name": "setBoolean", "method_sig": "public void setBoolean (int parameterIndex,\n                       boolean x)\n                throws SQLException", "description": "Sets the designated parameter to the given boolean in the\n Java programming language.  The driver converts this to an SQL\n BIT value when it sends it to the database.\n \n The parameter value set by this method is stored internally and\n will be supplied as the appropriate parameter in this RowSet\n object's command when the method execute is called.\n Methods such as execute, populate must be\n provided in any class that extends this class and implements one or\n more of the standard JSR-114 RowSet interfaces.\n \n NOTE: JdbcRowSet does not require the populate method\n as it is undefined in this class."}, {"method_name": "setByte", "method_sig": "public void setByte (int parameterIndex,\n                    byte x)\n             throws SQLException", "description": "Sets the designated parameter to the given byte in the Java\n programming language.  The driver converts this to an SQL\n TINYINT value when it sends it to the database.\n \n The parameter value set by this method is stored internally and\n will be supplied as the appropriate parameter in this RowSet\n object's command when the method execute is called.\n Methods such as execute and populate must be\n provided in any class that extends this class and implements one or\n more of the standard JSR-114 RowSet interfaces.\n \n NOTE: JdbcRowSet does not require the populate method\n as it is undefined in this class."}, {"method_name": "setShort", "method_sig": "public void setShort (int parameterIndex,\n                     short x)\n              throws SQLException", "description": "Sets the designated parameter to the given short in the\n Java programming language.  The driver converts this to an SQL\n SMALLINT value when it sends it to the database.\n \n The parameter value set by this method is stored internally and\n will be supplied as the appropriate parameter in this RowSet\n object's command when the method execute is called.\n Methods such as execute and populate must be\n provided in any class that extends this class and implements one or\n more of the standard JSR-114 RowSet interfaces.\n \n NOTE: JdbcRowSet does not require the populate method\n as it is undefined in this class."}, {"method_name": "setInt", "method_sig": "public void setInt (int parameterIndex,\n                   int x)\n            throws SQLException", "description": "Sets the designated parameter to an int in the Java\n programming language.  The driver converts this to an SQL\n INTEGER value when it sends it to the database.\n \n The parameter value set by this method is stored internally and\n will be supplied as the appropriate parameter in this RowSet\n object's command when the method execute is called.\n Methods such as execute and populate must be\n provided in any class that extends this class and implements one or\n more of the standard JSR-114 RowSet interfaces.\n \n NOTE: JdbcRowSet does not require the populate method\n as it is undefined in this class."}, {"method_name": "setLong", "method_sig": "public void setLong (int parameterIndex,\n                    long x)\n             throws SQLException", "description": "Sets the designated parameter to the given long in the Java\n programming language.  The driver converts this to an SQL\n BIGINT value when it sends it to the database.\n \n The parameter value set by this method is stored internally and\n will be supplied as the appropriate parameter in this RowSet\n object's command when the method execute is called.\n Methods such as execute and populate must be\n provided in any class that extends this class and implements one or\n more of the standard JSR-114 RowSet interfaces.\n \n NOTE: JdbcRowSet does not require the populate method\n as it is undefined in this class."}, {"method_name": "setFloat", "method_sig": "public void setFloat (int parameterIndex,\n                     float x)\n              throws SQLException", "description": "Sets the designated parameter to the given float in the\n Java programming language.  The driver converts this to an SQL\n FLOAT value when it sends it to the database.\n \n The parameter value set by this method is stored internally and\n will be supplied as the appropriate parameter in this RowSet\n object's command when the method execute is called.\n Methods such as execute and populate must be\n provided in any class that extends this class and implements one or\n more of the standard JSR-114 RowSet interfaces.\n \n NOTE: JdbcRowSet does not require the populate method\n as it is undefined in this class."}, {"method_name": "setDouble", "method_sig": "public void setDouble (int parameterIndex,\n                      double x)\n               throws SQLException", "description": "Sets the designated parameter to the given double in the\n Java programming language.  The driver converts this to an SQL\n DOUBLE value when it sends it to the database.\n \n The parameter value set by this method is stored internally and\n will be supplied as the appropriate parameter in this RowSet\n object's command when the method execute is called.\n Methods such as execute and populate must be\n provided in any class that extends this class and implements one or\n more of the standard JSR-114 RowSet interfaces.\n \n NOTE: JdbcRowSet does not require the populate method\n as it is undefined in this class."}, {"method_name": "setBigDecimal", "method_sig": "public void setBigDecimal (int parameterIndex,\n                          BigDecimal x)\n                   throws SQLException", "description": "Sets the designated parameter to the given\n java.lang.BigDecimal value.  The driver converts this to\n an SQL NUMERIC value when it sends it to the database.\n \n The parameter value set by this method is stored internally and\n will be supplied as the appropriate parameter in this RowSet\n object's command when the method execute is called.\n Methods such as execute and populate must be\n provided in any class that extends this class and implements one or\n more of the standard JSR-114 RowSet interfaces.\n \n Note: JdbcRowSet does not require the populate method\n as it is undefined in this class."}, {"method_name": "setString", "method_sig": "public void setString (int parameterIndex,\n                      String x)\n               throws SQLException", "description": "Sets the designated parameter to the given String\n value.  The driver converts this to an SQL\n VARCHAR or LONGVARCHAR value\n (depending on the argument's size relative to the driver's limits\n on VARCHAR values) when it sends it to the database.\n \n The parameter value set by this method is stored internally and\n will be supplied as the appropriate parameter in this RowSet\n object's command when the method execute is called.\n Methods such as execute and populate must be\n provided in any class that extends this class and implements one or\n more of the standard JSR-114 RowSet interfaces.\n \n NOTE: JdbcRowSet does not require the populate method\n as it is undefined in this class."}, {"method_name": "setBytes", "method_sig": "public void setBytes (int parameterIndex,\n                     byte[] x)\n              throws SQLException", "description": "Sets the designated parameter to the given array of bytes.\n The driver converts this to an SQL\n VARBINARY or LONGVARBINARY value\n (depending on the argument's size relative to the driver's limits\n on VARBINARY values) when it sends it to the database.\n \n The parameter value set by this method is stored internally and\n will be supplied as the appropriate parameter in this RowSet\n object's command when the method execute is called.\n Methods such as execute and populate must be\n provided in any class that extends this class and implements one or\n more of the standard JSR-114 RowSet interfaces.\n \n NOTE: JdbcRowSet does not require the populate method\n as it is undefined in this class."}, {"method_name": "setDate", "method_sig": "public void setDate (int parameterIndex,\n                    Date x)\n             throws SQLException", "description": "Sets the designated parameter to the given java.sql.Date\n value. The driver converts this to an SQL\n DATE value when it sends it to the database.\n \n The parameter value set by this method is stored internally and\n will be supplied as the appropriate parameter in this RowSet\n object's command when the method execute is called.\n Methods such as execute and populate must be\n provided in any class that extends this class and implements one or\n more of the standard JSR-114 RowSet interfaces.\n \n NOTE: JdbcRowSet does not require the populate method\n as it is undefined in this class.\n \n Calls made to the method getParams after this version\n of setDate\n has been called will return an array with the value to be set for\n placeholder parameter number parameterIndex being the Date\n object supplied as the second parameter.\n Note that because the numbering of elements in an array starts at zero,\n the array element that corresponds to placeholder parameter number\n parameterIndex is parameterIndex -1."}, {"method_name": "setTime", "method_sig": "public void setTime (int parameterIndex,\n                    Time x)\n             throws SQLException", "description": "Sets the designated parameter to the given java.sql.Time\n value.  The driver converts this to an SQL TIME value\n when it sends it to the database.\n \n The parameter value set by this method is stored internally and\n will be supplied as the appropriate parameter in this RowSet\n object's command when the method execute is called.\n Methods such as execute and populate must be\n provided in any class that extends this class and implements one or\n more of the standard JSR-114 RowSet interfaces.\n \n NOTE: JdbcRowSet does not require the populate method\n as it is undefined in this class.\n \n Calls made to the method getParams after this version\n of the method setTime\n has been called will return an array of the parameters that have been set.\n The parameter to be set for parameter placeholder number parameterIndex\n will be the Time object that was set as the second parameter\n to this method.\n \n Note that because the numbering of elements in an array starts at zero,\n the array element that corresponds to placeholder parameter number\n parameterIndex is parameterIndex -1."}, {"method_name": "setTimestamp", "method_sig": "public void setTimestamp (int parameterIndex,\n                         Timestamp x)\n                  throws SQLException", "description": "Sets the designated parameter to the given\n java.sql.Timestamp value.\n The driver converts this to an SQL TIMESTAMP value when it\n sends it to the database.\n \n The parameter value set by this method is stored internally and\n will be supplied as the appropriate parameter in this RowSet\n object's command when the method execute is called.\n Methods such as execute and populate must be\n provided in any class that extends this class and implements one or\n more of the standard JSR-114 RowSet interfaces.\n \n NOTE: JdbcRowSet does not require the populate method\n as it is undefined in this class.\n \n Calls made to the method getParams after this version of\n setTimestamp\n has been called will return an array with the value for parameter placeholder\n number parameterIndex being the Timestamp object that was\n supplied as the second parameter to this method.\n Note that because the numbering of elements in an array starts at zero,\n the array element that corresponds to placeholder parameter number\n parameterIndex is parameterIndex -1."}, {"method_name": "setAsciiStream", "method_sig": "public void setAsciiStream (int parameterIndex,\n                           InputStream x,\n                           int length)\n                    throws SQLException", "description": "Sets the designated parameter to the given\n java.io.InputStream object,\n which will have the specified number of bytes.\n The contents of the stream will be read and sent to the database.\n This method throws an SQLException object if the number of bytes\n read and sent to the database is not equal to length.\n \n When a very large ASCII value is input to a LONGVARCHAR\n parameter, it may be more practical to send it via a\n java.io.InputStream object. A JDBC technology-enabled\n driver will read the data from the stream as needed until it reaches\n end-of-file. The driver will do any necessary conversion from ASCII to\n the database CHAR format.\n\n Note: This stream object can be either a standard\n Java stream object or your own subclass that implements the\n standard interface.\n \n The parameter value set by this method is stored internally and\n will be supplied as the appropriate parameter in this RowSet\n object's command when the method execute is called.\n Methods such as execute and populate must be\n provided in any class that extends this class and implements one or\n more of the standard JSR-114 RowSet interfaces.\n \n Note: JdbcRowSet does not require the populate method\n as it is undefined in this class.\n \n Calls made to the method getParams after setAsciiStream\n has been called will return an array containing the parameter values that\n have been set.  The element in the array that represents the values\n set with this method will itself be an array. The first element of that array\n is the given java.io.InputStream object.\n The second element is the value set for length.\n The third element is an internal BaseRowSet constant\n specifying that the stream passed to this method is an ASCII stream.\n The parameter number is indicated by an element's position in the array\n returned by the method getParams,\n with the first element being the value for the first placeholder parameter, the\n second element being the value for the second placeholder parameter, and so on.\n In other words, if the input stream being set is the value for the second\n placeholder parameter, the array containing it will be the second element in\n the array returned by getParams.\n \n Note that because the numbering of elements in an array starts at zero,\n the array element that corresponds to placeholder parameter number\n parameterIndex is element number parameterIndex -1."}, {"method_name": "setAsciiStream", "method_sig": "public void setAsciiStream (int parameterIndex,\n                           InputStream x)\n                    throws SQLException", "description": "Sets the designated parameter in this RowSet object's command\n to the given input stream.\n When a very large ASCII value is input to a LONGVARCHAR\n parameter, it may be more practical to send it via a\n java.io.InputStream. Data will be read from the stream\n as needed until end-of-file is reached.  The JDBC driver will\n do any necessary conversion from ASCII to the database char format.\n\n Note: This stream object can either be a standard\n Java stream object or your own subclass that implements the\n standard interface.\n Note: Consult your JDBC driver documentation to determine if\n it might be more efficient to use a version of\n setAsciiStream which takes a length parameter."}, {"method_name": "setBinaryStream", "method_sig": "public void setBinaryStream (int parameterIndex,\n                            InputStream x,\n                            int length)\n                     throws SQLException", "description": "Sets the designated parameter to the given java.io.InputStream\n object, which will have the specified number of bytes.\n The contents of the stream will be read and sent to the database.\n This method throws an SQLException object if the number of bytes\n read and sent to the database is not equal to length.\n \n When a very large binary value is input to a\n LONGVARBINARY parameter, it may be more practical\n to send it via a java.io.InputStream object.\n A JDBC technology-enabled driver will read the data from the\n stream as needed until it reaches end-of-file.\n\n Note: This stream object can be either a standard\n Java stream object or your own subclass that implements the\n standard interface.\n \n The parameter value set by this method is stored internally and\n will be supplied as the appropriate parameter in this RowSet\n object's command when the method execute is called.\n Methods such as execute and populate must be\n provided in any class that extends this class and implements one or\n more of the standard JSR-114 RowSet interfaces.\n\n NOTE: JdbcRowSet does not require the populate method\n as it is undefined in this class.\n \n Calls made to the method getParams after setBinaryStream\n has been called will return an array containing the parameter values that\n have been set.  In that array, the element that represents the values\n set with this method will itself be an array. The first element of that array\n is the given java.io.InputStream object.\n The second element is the value set for length.\n The third element is an internal BaseRowSet constant\n specifying that the stream passed to this method is a binary stream.\n The parameter number is indicated by an element's position in the array\n returned by the method getParams,\n with the first element being the value for the first placeholder parameter, the\n second element being the value for the second placeholder parameter, and so on.\n In other words, if the input stream being set is the value for the second\n placeholder parameter, the array containing it will be the second element in\n the array returned by getParams.\n \n Note that because the numbering of elements in an array starts at zero,\n the array element that corresponds to placeholder parameter number\n parameterIndex is element number parameterIndex -1."}, {"method_name": "setBinaryStream", "method_sig": "public void setBinaryStream (int parameterIndex,\n                            InputStream x)\n                     throws SQLException", "description": "Sets the designated parameter in this RowSet object's command\n to the given input stream.\n When a very large binary value is input to a LONGVARBINARY\n parameter, it may be more practical to send it via a\n java.io.InputStream object. The data will be read from the\n stream as needed until end-of-file is reached.\n\n Note: This stream object can either be a standard\n Java stream object or your own subclass that implements the\n standard interface.\n Note: Consult your JDBC driver documentation to determine if\n it might be more efficient to use a version of\n setBinaryStream which takes a length parameter."}, {"method_name": "setUnicodeStream", "method_sig": "@Deprecated\npublic void setUnicodeStream (int parameterIndex,\n                             InputStream x,\n                             int length)\n                      throws SQLException", "description": "Sets the designated parameter to the given\n java.io.InputStream object, which will have the specified\n number of bytes. The contents of the stream will be read and sent\n to the database.\n This method throws an SQLException if the number of bytes\n read and sent to the database is not equal to length.\n \n When a very large Unicode value is input to a\n LONGVARCHAR parameter, it may be more practical\n to send it via a java.io.InputStream object.\n A JDBC technology-enabled driver will read the data from the\n stream as needed, until it reaches end-of-file.\n The driver will do any necessary conversion from Unicode to the\n database CHAR format.\n The byte format of the Unicode stream must be Java UTF-8, as\n defined in the Java Virtual Machine Specification.\n\n Note: This stream object can be either a standard\n Java stream object or your own subclass that implements the\n standard interface.\n \n This method is deprecated; the method getCharacterStream\n should be used in its place.\n \n The parameter value set by this method is stored internally and\n will be supplied as the appropriate parameter in this RowSet\n object's command when the method execute is called.\n Calls made to the method getParams after setUnicodeStream\n has been called will return an array containing the parameter values that\n have been set.  In that array, the element that represents the values\n set with this method will itself be an array. The first element of that array\n is the given java.io.InputStream object.\n The second element is the value set for length.\n The third element is an internal BaseRowSet constant\n specifying that the stream passed to this method is a Unicode stream.\n The parameter number is indicated by an element's position in the array\n returned by the method getParams,\n with the first element being the value for the first placeholder parameter, the\n second element being the value for the second placeholder parameter, and so on.\n In other words, if the input stream being set is the value for the second\n placeholder parameter, the array containing it will be the second element in\n the array returned by getParams.\n \n Note that because the numbering of elements in an array starts at zero,\n the array element that corresponds to placeholder parameter number\n parameterIndex is element number parameterIndex -1."}, {"method_name": "setCharacterStream", "method_sig": "public void setCharacterStream (int parameterIndex,\n                               Reader reader,\n                               int length)\n                        throws SQLException", "description": "Sets the designated parameter to the given java.io.Reader\n object, which will have the specified number of characters. The\n contents of the reader will be read and sent to the database.\n This method throws an SQLException if the number of bytes\n read and sent to the database is not equal to length.\n \n When a very large Unicode value is input to a\n LONGVARCHAR parameter, it may be more practical\n to send it via a Reader object.\n A JDBC technology-enabled driver will read the data from the\n stream as needed until it reaches end-of-file.\n The driver will do any necessary conversion from Unicode to the\n database CHAR format.\n The byte format of the Unicode stream must be Java UTF-8, as\n defined in the Java Virtual Machine Specification.\n\n Note: This stream object can be either a standard\n Java stream object or your own subclass that implements the\n standard interface.\n \n The parameter value set by this method is stored internally and\n will be supplied as the appropriate parameter in this RowSet\n object's command when the method execute is called.\n Methods such as execute and populate must be\n provided in any class that extends this class and implements one or\n more of the standard JSR-114 RowSet interfaces.\n \n NOTE: JdbcRowSet does not require the populate method\n as it is undefined in this class.\n \n Calls made to the method getParams after\n setCharacterStream\n has been called will return an array containing the parameter values that\n have been set.  In that array, the element that represents the values\n set with this method will itself be an array. The first element of that array\n is the given java.io.Reader object.\n The second element is the value set for length.\n The parameter number is indicated by an element's position in the array\n returned by the method getParams,\n with the first element being the value for the first placeholder parameter, the\n second element being the value for the second placeholder parameter, and so on.\n In other words, if the reader being set is the value for the second\n placeholder parameter, the array containing it will be the second element in\n the array returned by getParams.\n \n Note that because the numbering of elements in an array starts at zero,\n the array element that corresponds to placeholder parameter number\n parameterIndex is element number parameterIndex -1."}, {"method_name": "setCharacterStream", "method_sig": "public void setCharacterStream (int parameterIndex,\n                               Reader reader)\n                        throws SQLException", "description": "Sets the designated parameter in this RowSet object's command\n to the given Reader\n object.\n When a very large UNICODE value is input to a LONGVARCHAR\n parameter, it may be more practical to send it via a\n java.io.Reader object. The data will be read from the stream\n as needed until end-of-file is reached.  The JDBC driver will\n do any necessary conversion from UNICODE to the database char format.\n\n Note: This stream object can either be a standard\n Java stream object or your own subclass that implements the\n standard interface.\n Note: Consult your JDBC driver documentation to determine if\n it might be more efficient to use a version of\n setCharacterStream which takes a length parameter."}, {"method_name": "setObject", "method_sig": "public void setObject (int parameterIndex,\n                      Object x,\n                      int targetSqlType,\n                      int scale)\n               throws SQLException", "description": "Sets the designated parameter to an Object in the Java\n programming language. The second parameter must be an\n Object type.  For integral values, the\n java.lang equivalent\n objects should be used. For example, use the class Integer\n for an int.\n \n The driver converts this object to the specified\n target SQL type before sending it to the database.\n If the object has a custom mapping (is of a class implementing\n SQLData), the driver should call the method\n SQLData.writeSQL to write the object to the SQL\n data stream. If, on the other hand, the object is of a class\n implementing Ref, Blob, Clob,\n Struct, or Array,\n the driver should pass it to the database as a value of the\n corresponding SQL type.\n\n Note that this method may be used to pass database-\n specific abstract data types.\n \n The parameter value set by this method is stored internally and\n will be supplied as the appropriate parameter in this RowSet\n object's command when the method execute is called.\n Methods such as execute and populate must be\n provided in any class that extends this class and implements one or\n more of the standard JSR-114 RowSet interfaces.\n \n NOTE: JdbcRowSet does not require the populate method\n as it is undefined in this class.\n \n Calls made to the method getParams after this version of\n setObject\n has been called will return an array containing the parameter values that\n have been set.  In that array, the element that represents the values\n set with this method will itself be an array. The first element of that array\n is the given Object instance, and the\n second element is the value set for targetSqlType.  The\n third element is the value set for scale, which the driver will\n ignore if the type of the object being set is not\n java.sql.Types.NUMERIC or java.sql.Types.DECIMAL.\n The parameter number is indicated by an element's position in the array\n returned by the method getParams,\n with the first element being the value for the first placeholder parameter, the\n second element being the value for the second placeholder parameter, and so on.\n In other words, if the object being set is the value for the second\n placeholder parameter, the array containing it will be the second element in\n the array returned by getParams.\n\n Note that because the numbering of elements in an array starts at zero,\n the array element that corresponds to placeholder parameter number\n parameterIndex is element number parameterIndex -1."}, {"method_name": "setObject", "method_sig": "public void setObject (int parameterIndex,\n                      Object x,\n                      int targetSqlType)\n               throws SQLException", "description": "Sets the value of the designated parameter with the given\n Object value.\n This method is like setObject(int parameterIndex, Object x, int\n targetSqlType, int scale) except that it assumes a scale of zero.\n \n The parameter value set by this method is stored internally and\n will be supplied as the appropriate parameter in this RowSet\n object's command when the method execute is called.\n Methods such as execute and populate must be\n provided in any class that extends this class and implements one or\n more of the standard JSR-114 RowSet interfaces.\n \n NOTE: JdbcRowSet does not require the populate method\n as it is undefined in this class.\n \n Calls made to the method getParams after this version of\n setObject\n has been called will return an array containing the parameter values that\n have been set.  In that array, the element that represents the values\n set with this method will itself be an array. The first element of that array\n is the given Object instance.\n The second element is the value set for targetSqlType.\n The parameter number is indicated by an element's position in the array\n returned by the method getParams,\n with the first element being the value for the first placeholder parameter, the\n second element being the value for the second placeholder parameter, and so on.\n In other words, if the object being set is the value for the second\n placeholder parameter, the array containing it will be the second element in\n the array returned by getParams.\n \n Note that because the numbering of elements in an array starts at zero,\n the array element that corresponds to placeholder parameter number\n parameterIndex is element number parameterIndex -1."}, {"method_name": "setObject", "method_sig": "public void setObject (int parameterIndex,\n                      Object x)\n               throws SQLException", "description": "Sets the designated parameter to an Object in the Java\n programming language. The second parameter must be an\n Object\n type.  For integral values, the java.lang equivalent\n objects should be used. For example, use the class Integer\n for an int.\n \n The JDBC specification defines a standard mapping from\n Java Object types to SQL types.  The driver will\n use this standard mapping to  convert the given object\n to its corresponding SQL type before sending it to the database.\n If the object has a custom mapping (is of a class implementing\n SQLData), the driver should call the method\n SQLData.writeSQL to write the object to the SQL\n data stream.\n \n If, on the other hand, the object is of a class\n implementing Ref, Blob, Clob,\n Struct, or Array,\n the driver should pass it to the database as a value of the\n corresponding SQL type.\n \n This method throws an exception if there\n is an ambiguity, for example, if the object is of a class\n implementing more than one interface.\n \n Note that this method may be used to pass database-specific\n abstract data types.\n \n The parameter value set by this method is stored internally and\n will be supplied as the appropriate parameter in this RowSet\n object's command when the method execute is called.\n Methods such as execute and populate must be\n provided in any class that extends this class and implements one or\n more of the standard JSR-114 RowSet interfaces.\n \n NOTE: JdbcRowSet does not require the populate method\n as it is undefined in this class.\n \n After this method has been called, a call to the\n method getParams\n will return an object array of the current command parameters, which will\n include the Object set for placeholder parameter number\n parameterIndex.\n Note that because the numbering of elements in an array starts at zero,\n the array element that corresponds to placeholder parameter number\n parameterIndex is element number parameterIndex -1."}, {"method_name": "setRef", "method_sig": "public void setRef (int parameterIndex,\n                   Ref ref)\n            throws SQLException", "description": "Sets the designated parameter to the given Ref object in\n the Java programming language.  The driver converts this to an SQL\n REF value when it sends it to the database. Internally, the\n Ref is represented as a SerialRef to ensure\n serializability.\n \n The parameter value set by this method is stored internally and\n will be supplied as the appropriate parameter in this RowSet\n object's command when the method execute is called.\n Methods such as execute and populate must be\n provided in any class that extends this class and implements one or\n more of the standard JSR-114 RowSet interfaces.\n \n NOTE: JdbcRowSet does not require the populate method\n as it is undefined in this class.\n \n After this method has been called, a call to the\n method getParams\n will return an object array of the current command parameters, which will\n include the Ref object set for placeholder parameter number\n parameterIndex.\n Note that because the numbering of elements in an array starts at zero,\n the array element that corresponds to placeholder parameter number\n parameterIndex is element number parameterIndex -1."}, {"method_name": "setBlob", "method_sig": "public void setBlob (int parameterIndex,\n                    Blob x)\n             throws SQLException", "description": "Sets the designated parameter to the given Blob object in\n the Java programming language.  The driver converts this to an SQL\n BLOB value when it sends it to the database. Internally,\n the Blob is represented as a SerialBlob\n to ensure serializability.\n \n The parameter value set by this method is stored internally and\n will be supplied as the appropriate parameter in this RowSet\n object's command when the method execute is called.\n Methods such as execute and populate must be\n provided in any class that extends this class and implements one or\n more of the standard JSR-114 RowSet interfaces.\n NOTE: JdbcRowSet does not require the populate method\n as it is undefined in this class.\n \n After this method has been called, a call to the\n method getParams\n will return an object array of the current command parameters, which will\n include the Blob object set for placeholder parameter number\n parameterIndex.\n Note that because the numbering of elements in an array starts at zero,\n the array element that corresponds to placeholder parameter number\n parameterIndex is element number parameterIndex -1."}, {"method_name": "setClob", "method_sig": "public void setClob (int parameterIndex,\n                    Clob x)\n             throws SQLException", "description": "Sets the designated parameter to the given Clob object in\n the Java programming language.  The driver converts this to an SQL\n CLOB value when it sends it to the database. Internally, the\n Clob is represented as a SerialClob to ensure\n serializability.\n \n The parameter value set by this method is stored internally and\n will be supplied as the appropriate parameter in this RowSet\n object's command when the method execute is called.\n Methods such as execute and populate must be\n provided in any class that extends this class and implements one or\n more of the standard JSR-114 RowSet interfaces.\n \n NOTE: JdbcRowSet does not require the populate method\n as it is undefined in this class.\n \n After this method has been called, a call to the\n method getParams\n will return an object array of the current command parameters, which will\n include the Clob object set for placeholder parameter number\n parameterIndex.\n Note that because the numbering of elements in an array starts at zero,\n the array element that corresponds to placeholder parameter number\n parameterIndex is element number parameterIndex -1."}, {"method_name": "setArray", "method_sig": "public void setArray (int parameterIndex,\n                     Array array)\n              throws SQLException", "description": "Sets the designated parameter to an Array object in the\n Java programming language.  The driver converts this to an SQL\n ARRAY value when it sends it to the database. Internally,\n the Array is represented as a SerialArray\n to ensure serializability.\n \n The parameter value set by this method is stored internally and\n will be supplied as the appropriate parameter in this RowSet\n object's command when the method execute is called.\n Methods such as execute and populate must be\n provided in any class that extends this class and implements one or\n more of the standard JSR-114 RowSet interfaces.\n \n Note: JdbcRowSet does not require the populate method\n as it is undefined in this class.\n \n After this method has been called, a call to the\n method getParams\n will return an object array of the current command parameters, which will\n include the Array object set for placeholder parameter number\n parameterIndex.\n Note that because the numbering of elements in an array starts at zero,\n the array element that corresponds to placeholder parameter number\n parameterIndex is element number parameterIndex -1."}, {"method_name": "setDate", "method_sig": "public void setDate (int parameterIndex,\n                    Date x,\n                    Calendar cal)\n             throws SQLException", "description": "Sets the designated parameter to the given java.sql.Date\n object.\n When the DBMS does not store time zone information, the driver will use\n the given Calendar object to construct the SQL DATE\n value to send to the database. With a\n Calendar object, the driver can calculate the date\n taking into account a custom time zone.  If no Calendar\n object is specified, the driver uses the time zone of the Virtual Machine\n that is running the application.\n \n The parameter value set by this method is stored internally and\n will be supplied as the appropriate parameter in this RowSet\n object's command when the method execute is called.\n Methods such as execute and populate must be\n provided in any class that extends this class and implements one or\n more of the standard JSR-114 RowSet interfaces.\n \n NOTE: JdbcRowSet does not require the populate method\n as it is undefined in this class.\n \n Calls made to the method getParams after this version of\n setDate\n has been called will return an array containing the parameter values that\n have been set.  In that array, the element that represents the values\n set with this method will itself be an array. The first element of that array\n is the given java.sql.Date object.\n The second element is the value set for cal.\n The parameter number is indicated by an element's position in the array\n returned by the method getParams,\n with the first element being the value for the first placeholder parameter, the\n second element being the value for the second placeholder parameter, and so on.\n In other words, if the date being set is the value for the second\n placeholder parameter, the array containing it will be the second element in\n the array returned by getParams.\n \n Note that because the numbering of elements in an array starts at zero,\n the array element that corresponds to placeholder parameter number\n parameterIndex is parameterIndex -1."}, {"method_name": "setTime", "method_sig": "public void setTime (int parameterIndex,\n                    Time x,\n                    Calendar cal)\n             throws SQLException", "description": "Sets the designated parameter to the given java.sql.Time\n object.  The driver converts this\n to an SQL TIME value when it sends it to the database.\n \n When the DBMS does not store time zone information, the driver will use\n the given Calendar object to construct the SQL TIME\n value to send to the database. With a\n Calendar object, the driver can calculate the date\n taking into account a custom time zone.  If no Calendar\n object is specified, the driver uses the time zone of the Virtual Machine\n that is running the application.\n \n The parameter value set by this method is stored internally and\n will be supplied as the appropriate parameter in this RowSet\n object's command when the method execute is called.\n Methods such as execute and populate must be\n provided in any class that extends this class and implements one or\n more of the standard JSR-114 RowSet interfaces.\n \n NOTE: JdbcRowSet does not require the populate method\n as it is undefined in this class.\n \n Calls made to the method getParams after this version of\n setTime\n has been called will return an array containing the parameter values that\n have been set.  In that array, the element that represents the values\n set with this method will itself be an array. The first element of that array\n is the given java.sql.Time object.\n The second element is the value set for cal.\n The parameter number is indicated by an element's position in the array\n returned by the method getParams,\n with the first element being the value for the first placeholder parameter, the\n second element being the value for the second placeholder parameter, and so on.\n In other words, if the time being set is the value for the second\n placeholder parameter, the array containing it will be the second element in\n the array returned by getParams.\n \n Note that because the numbering of elements in an array starts at zero,\n the array element that corresponds to placeholder parameter number\n parameterIndex is parameterIndex -1."}, {"method_name": "setTimestamp", "method_sig": "public void setTimestamp (int parameterIndex,\n                         Timestamp x,\n                         Calendar cal)\n                  throws SQLException", "description": "Sets the designated parameter to the given\n java.sql.Timestamp object.  The driver converts this\n to an SQL TIMESTAMP value when it sends it to the database.\n \n When the DBMS does not store time zone information, the driver will use\n the given Calendar object to construct the SQL TIMESTAMP\n value to send to the database. With a\n Calendar object, the driver can calculate the timestamp\n taking into account a custom time zone.  If no Calendar\n object is specified, the driver uses the time zone of the Virtual Machine\n that is running the application.\n \n The parameter value set by this method is stored internally and\n will be supplied as the appropriate parameter in this RowSet\n object's command when the method execute is called.\n Methods such as execute and populate must be\n provided in any class that extends this class and implements one or\n more of the standard JSR-114 RowSet interfaces.\n \n NOTE: JdbcRowSet does not require the populate method\n as it is undefined in this class.\n \n Calls made to the method getParams after this version of\n setTimestamp\n has been called will return an array containing the parameter values that\n have been set.  In that array, the element that represents the values\n set with this method will itself be an array. The first element of that array\n is the given java.sql.Timestamp object.\n The second element is the value set for cal.\n The parameter number is indicated by an element's position in the array\n returned by the method getParams,\n with the first element being the value for the first placeholder parameter, the\n second element being the value for the second placeholder parameter, and so on.\n In other words, if the timestamp being set is the value for the second\n placeholder parameter, the array containing it will be the second element in\n the array returned by getParams.\n \n Note that because the numbering of elements in an array starts at zero,\n the array element that corresponds to placeholder parameter number\n parameterIndex is parameterIndex -1."}, {"method_name": "clearParameters", "method_sig": "public void clearParameters()\n                     throws SQLException", "description": "Clears all of the current parameter values in this RowSet\n object's internal representation of the parameters to be set in\n this RowSet object's command when it is executed.\n \n In general, parameter values remain in force for repeated use in\n this RowSet object's command. Setting a parameter value with the\n setter methods automatically clears the value of the\n designated parameter and replaces it with the new specified value.\n \n This method is called internally by the setCommand\n method to clear all of the parameters set for the previous command.\n \n Furthermore, this method differs from the initParams\n method in that it maintains the schema of the RowSet object."}, {"method_name": "getParams", "method_sig": "public Object[] getParams()\n                   throws SQLException", "description": "Retrieves an array containing the parameter values (both Objects and\n primitives) that have been set for this\n RowSet object's command and throws an SQLException object\n if all parameters have not been set.   Before the command is sent to the\n DBMS to be executed, these parameters will be substituted\n for placeholder parameters in the  PreparedStatement object\n that is the command for a RowSet implementation extending\n the BaseRowSet class.\n \n Each element in the array that is returned is an Object instance\n that contains the values of the parameters supplied to a setter method.\n The order of the elements is determined by the value supplied for\n parameterIndex.  If the setter method takes only the parameter index\n and the value to be set (possibly null), the array element will contain the value to be set\n (which will be expressed as an Object).  If there are additional\n parameters, the array element will itself be an array containing the value to be set\n plus any additional parameter values supplied to the setter method. If the method\n sets a stream, the array element includes the type of stream being supplied to the\n method. These additional parameters are for the use of the driver or the DBMS and may or\n may not be used.\n \n NOTE: Stored parameter values of types Array, Blob,\n Clob and Ref are returned as SerialArray,\n SerialBlob, SerialClob and SerialRef\n respectively."}, {"method_name": "setNull", "method_sig": "public void setNull (String parameterName,\n                    int sqlType)\n             throws SQLException", "description": "Sets the designated parameter to SQL NULL.\n\n Note: You must specify the parameter's SQL type."}, {"method_name": "setNull", "method_sig": "public void setNull (String parameterName,\n                    int sqlType,\n                    String typeName)\n             throws SQLException", "description": "Sets the designated parameter to SQL NULL.\n This version of the method setNull should\n be used for user-defined types and REF type parameters.  Examples\n of user-defined types include: STRUCT, DISTINCT, JAVA_OBJECT, and\n named array types.\n\n Note: To be portable, applications must give the\n SQL type code and the fully-qualified SQL type name when specifying\n a NULL user-defined or REF parameter.  In the case of a user-defined type\n the name is the type name of the parameter itself.  For a REF\n parameter, the name is the type name of the referenced type.  If\n a JDBC driver does not need the type code or type name information,\n it may ignore it.\n\n Although it is intended for user-defined and Ref parameters,\n this method may be used to set a null parameter of any JDBC type.\n If the parameter does not have a user-defined or REF type, the given\n typeName is ignored."}, {"method_name": "setBoolean", "method_sig": "public void setBoolean (String parameterName,\n                       boolean x)\n                throws SQLException", "description": "Sets the designated parameter to the given Java boolean value.\n The driver converts this\n to an SQL BIT or BOOLEAN value when it sends it to the database."}, {"method_name": "setByte", "method_sig": "public void setByte (String parameterName,\n                    byte x)\n             throws SQLException", "description": "Sets the designated parameter to the given Java byte value.\n The driver converts this\n to an SQL TINYINT value when it sends it to the database."}, {"method_name": "setShort", "method_sig": "public void setShort (String parameterName,\n                     short x)\n              throws SQLException", "description": "Sets the designated parameter to the given Java short value.\n The driver converts this\n to an SQL SMALLINT value when it sends it to the database."}, {"method_name": "setInt", "method_sig": "public void setInt (String parameterName,\n                   int x)\n            throws SQLException", "description": "Sets the designated parameter to the given Java int value.\n The driver converts this\n to an SQL INTEGER value when it sends it to the database."}, {"method_name": "setLong", "method_sig": "public void setLong (String parameterName,\n                    long x)\n             throws SQLException", "description": "Sets the designated parameter to the given Java long value.\n The driver converts this\n to an SQL BIGINT value when it sends it to the database."}, {"method_name": "setFloat", "method_sig": "public void setFloat (String parameterName,\n                     float x)\n              throws SQLException", "description": "Sets the designated parameter to the given Java float value.\n The driver converts this\n to an SQL FLOAT value when it sends it to the database."}, {"method_name": "setDouble", "method_sig": "public void setDouble (String parameterName,\n                      double x)\n               throws SQLException", "description": "Sets the designated parameter to the given Java double value.\n The driver converts this\n to an SQL DOUBLE value when it sends it to the database."}, {"method_name": "setBigDecimal", "method_sig": "public void setBigDecimal (String parameterName,\n                          BigDecimal x)\n                   throws SQLException", "description": "Sets the designated parameter to the given\n java.math.BigDecimal value.\n The driver converts this to an SQL NUMERIC value when\n it sends it to the database."}, {"method_name": "setString", "method_sig": "public void setString (String parameterName,\n                      String x)\n               throws SQLException", "description": "Sets the designated parameter to the given Java String value.\n The driver converts this\n to an SQL VARCHAR or LONGVARCHAR value\n (depending on the argument's\n size relative to the driver's limits on VARCHAR values)\n when it sends it to the database."}, {"method_name": "setBytes", "method_sig": "public void setBytes (String parameterName,\n                     byte[] x)\n              throws SQLException", "description": "Sets the designated parameter to the given Java array of bytes.\n The driver converts this to an SQL VARBINARY or\n LONGVARBINARY (depending on the argument's size relative\n to the driver's limits on VARBINARY values) when it sends\n it to the database."}, {"method_name": "setTimestamp", "method_sig": "public void setTimestamp (String parameterName,\n                         Timestamp x)\n                  throws SQLException", "description": "Sets the designated parameter to the given java.sql.Timestamp value.\n The driver\n converts this to an SQL TIMESTAMP value when it sends it to the\n database."}, {"method_name": "setAsciiStream", "method_sig": "public void setAsciiStream (String parameterName,\n                           InputStream x,\n                           int length)\n                    throws SQLException", "description": "Sets the designated parameter to the given input stream, which will have\n the specified number of bytes.\n When a very large ASCII value is input to a LONGVARCHAR\n parameter, it may be more practical to send it via a\n java.io.InputStream. Data will be read from the stream\n as needed until end-of-file is reached.  The JDBC driver will\n do any necessary conversion from ASCII to the database char format.\n\n Note: This stream object can either be a standard\n Java stream object or your own subclass that implements the\n standard interface."}, {"method_name": "setBinaryStream", "method_sig": "public void setBinaryStream (String parameterName,\n                            InputStream x,\n                            int length)\n                     throws SQLException", "description": "Sets the designated parameter to the given input stream, which will have\n the specified number of bytes.\n When a very large binary value is input to a LONGVARBINARY\n parameter, it may be more practical to send it via a\n java.io.InputStream object. The data will be read from the stream\n as needed until end-of-file is reached.\n\n Note: This stream object can either be a standard\n Java stream object or your own subclass that implements the\n standard interface."}, {"method_name": "setCharacterStream", "method_sig": "public void setCharacterStream (String parameterName,\n                               Reader reader,\n                               int length)\n                        throws SQLException", "description": "Sets the designated parameter to the given Reader\n object, which is the given number of characters long.\n When a very large UNICODE value is input to a LONGVARCHAR\n parameter, it may be more practical to send it via a\n java.io.Reader object. The data will be read from the stream\n as needed until end-of-file is reached.  The JDBC driver will\n do any necessary conversion from UNICODE to the database char format.\n\n Note: This stream object can either be a standard\n Java stream object or your own subclass that implements the\n standard interface."}, {"method_name": "setAsciiStream", "method_sig": "public void setAsciiStream (String parameterName,\n                           InputStream x)\n                    throws SQLException", "description": "Sets the designated parameter to the given input stream.\n When a very large ASCII value is input to a LONGVARCHAR\n parameter, it may be more practical to send it via a\n java.io.InputStream. Data will be read from the stream\n as needed until end-of-file is reached.  The JDBC driver will\n do any necessary conversion from ASCII to the database char format.\n\n Note: This stream object can either be a standard\n Java stream object or your own subclass that implements the\n standard interface.\n Note: Consult your JDBC driver documentation to determine if\n it might be more efficient to use a version of\n setAsciiStream which takes a length parameter."}, {"method_name": "setBinaryStream", "method_sig": "public void setBinaryStream (String parameterName,\n                            InputStream x)\n                     throws SQLException", "description": "Sets the designated parameter to the given input stream.\n When a very large binary value is input to a LONGVARBINARY\n parameter, it may be more practical to send it via a\n java.io.InputStream object. The data will be read from the\n stream as needed until end-of-file is reached.\n\n Note: This stream object can either be a standard\n Java stream object or your own subclass that implements the\n standard interface.\n Note: Consult your JDBC driver documentation to determine if\n it might be more efficient to use a version of\n setBinaryStream which takes a length parameter."}, {"method_name": "setCharacterStream", "method_sig": "public void setCharacterStream (String parameterName,\n                               Reader reader)\n                        throws SQLException", "description": "Sets the designated parameter to the given Reader\n object.\n When a very large UNICODE value is input to a LONGVARCHAR\n parameter, it may be more practical to send it via a\n java.io.Reader object. The data will be read from the stream\n as needed until end-of-file is reached.  The JDBC driver will\n do any necessary conversion from UNICODE to the database char format.\n\n Note: This stream object can either be a standard\n Java stream object or your own subclass that implements the\n standard interface.\n Note: Consult your JDBC driver documentation to determine if\n it might be more efficient to use a version of\n setCharacterStream which takes a length parameter."}, {"method_name": "setNCharacterStream", "method_sig": "public void setNCharacterStream (int parameterIndex,\n                                Reader value)\n                         throws SQLException", "description": "Sets the designated parameter in this RowSet object's command\n to a Reader object. The\n Reader reads the data till end-of-file is reached. The\n driver does the necessary conversion from Java character format to\n the national character set in the database.\n\n Note: This stream object can either be a standard\n Java stream object or your own subclass that implements the\n standard interface.\n Note: Consult your JDBC driver documentation to determine if\n it might be more efficient to use a version of\n setNCharacterStream which takes a length parameter."}, {"method_name": "setObject", "method_sig": "public void setObject (String parameterName,\n                      Object x,\n                      int targetSqlType,\n                      int scale)\n               throws SQLException", "description": "Sets the value of the designated parameter with the given object. The second\n argument must be an object type; for integral values, the\n java.lang equivalent objects should be used.\n\n The given Java object will be converted to the given targetSqlType\n before being sent to the database.\n\n If the object has a custom mapping (is of a class implementing the\n interface SQLData),\n the JDBC driver should call the method SQLData.writeSQL to write it\n to the SQL data stream.\n If, on the other hand, the object is of a class implementing\n Ref, Blob, Clob,  NClob,\n  Struct, java.net.URL,\n or Array, the driver should pass it to the database as a\n value of the corresponding SQL type.\n \n Note that this method may be used to pass database-\n specific abstract data types."}, {"method_name": "setObject", "method_sig": "public void setObject (String parameterName,\n                      Object x,\n                      int targetSqlType)\n               throws SQLException", "description": "Sets the value of the designated parameter with the given object.\n This method is like the method setObject\n above, except that it assumes a scale of zero."}, {"method_name": "setObject", "method_sig": "public void setObject (String parameterName,\n                      Object x)\n               throws SQLException", "description": "Sets the value of the designated parameter with the given object.\n The second parameter must be of type Object; therefore, the\n java.lang equivalent objects should be used for built-in types.\n\n The JDBC specification specifies a standard mapping from\n Java Object types to SQL types.  The given argument\n will be converted to the corresponding SQL type before being\n sent to the database.\n\n Note that this method may be used to pass database-\n specific abstract data types, by using a driver-specific Java\n type.\n\n If the object is of a class implementing the interface SQLData,\n the JDBC driver should call the method SQLData.writeSQL\n to write it to the SQL data stream.\n If, on the other hand, the object is of a class implementing\n Ref, Blob, Clob,  NClob,\n  Struct, java.net.URL,\n or Array, the driver should pass it to the database as a\n value of the corresponding SQL type.\n \n This method throws an exception if there is an ambiguity, for example, if the\n object is of a class implementing more than one of the interfaces named above."}, {"method_name": "setBlob", "method_sig": "public void setBlob (int parameterIndex,\n                    InputStream inputStream,\n                    long length)\n             throws SQLException", "description": "Sets the designated parameter to a InputStream object.\n The InputStream must contain  the number\n of characters specified by length otherwise a SQLException will be\n generated when the PreparedStatement is executed.\n This method differs from the setBinaryStream (int, InputStream, int)\n method because it informs the driver that the parameter value should be\n sent to the server as a BLOB.  When the setBinaryStream method is used,\n the driver may have to do extra work to determine whether the parameter\n data should be sent to the server as a LONGVARBINARY or a BLOB"}, {"method_name": "setBlob", "method_sig": "public void setBlob (int parameterIndex,\n                    InputStream inputStream)\n             throws SQLException", "description": "Sets the designated parameter to a InputStream object.\n This method differs from the setBinaryStream (int, InputStream)\n method because it informs the driver that the parameter value should be\n sent to the server as a BLOB.  When the setBinaryStream method is used,\n the driver may have to do extra work to determine whether the parameter\n data should be sent to the server as a LONGVARBINARY or a BLOB\nNote: Consult your JDBC driver documentation to determine if\n it might be more efficient to use a version of\n setBlob which takes a length parameter."}, {"method_name": "setBlob", "method_sig": "public void setBlob (String parameterName,\n                    InputStream inputStream,\n                    long length)\n             throws SQLException", "description": "Sets the designated parameter to a InputStream object.\n The Inputstream must contain  the number\n of characters specified by length, otherwise a SQLException will be\n generated when the CallableStatement is executed.\n This method differs from the setBinaryStream (int, InputStream, int)\n method because it informs the driver that the parameter value should be\n sent to the server as a BLOB.  When the setBinaryStream method is used,\n the driver may have to do extra work to determine whether the parameter\n data should be sent to the server as a LONGVARBINARY or a BLOB"}, {"method_name": "setBlob", "method_sig": "public void setBlob (String parameterName,\n                    Blob x)\n             throws SQLException", "description": "Sets the designated parameter to the given java.sql.Blob object.\n The driver converts this to an SQL BLOB value when it\n sends it to the database."}, {"method_name": "setBlob", "method_sig": "public void setBlob (String parameterName,\n                    InputStream inputStream)\n             throws SQLException", "description": "Sets the designated parameter to a InputStream object.\n This method differs from the setBinaryStream (int, InputStream)\n method because it informs the driver that the parameter value should be\n sent to the server as a BLOB.  When the setBinaryStream method is used,\n the driver may have to do extra work to determine whether the parameter\n data should be send to the server as a LONGVARBINARY or a BLOB\nNote: Consult your JDBC driver documentation to determine if\n it might be more efficient to use a version of\n setBlob which takes a length parameter."}, {"method_name": "setClob", "method_sig": "public void setClob (int parameterIndex,\n                    Reader reader,\n                    long length)\n             throws SQLException", "description": "Sets the designated parameter to a Reader object.\n The reader must contain  the number\n of characters specified by length otherwise a SQLException will be\n generated when the PreparedStatement is executed.\n This method differs from the setCharacterStream (int, Reader, int) method\n because it informs the driver that the parameter value should be sent to\n the server as a CLOB.  When the setCharacterStream method is used, the\n driver may have to do extra work to determine whether the parameter\n data should be sent to the server as a LONGVARCHAR or a CLOB"}, {"method_name": "setClob", "method_sig": "public void setClob (int parameterIndex,\n                    Reader reader)\n             throws SQLException", "description": "Sets the designated parameter to a Reader object.\n This method differs from the setCharacterStream (int, Reader) method\n because it informs the driver that the parameter value should be sent to\n the server as a CLOB.  When the setCharacterStream method is used, the\n driver may have to do extra work to determine whether the parameter\n data should be sent to the server as a LONGVARCHAR or a CLOB\nNote: Consult your JDBC driver documentation to determine if\n it might be more efficient to use a version of\n setClob which takes a length parameter."}, {"method_name": "setClob", "method_sig": "public void setClob (String parameterName,\n                    Reader reader,\n                    long length)\n             throws SQLException", "description": "Sets the designated parameter to a Reader object.\n The reader must contain  the number\n of characters specified by length otherwise a SQLException will be\n generated when the CallableStatement is executed.\n This method differs from the setCharacterStream (int, Reader, int) method\n because it informs the driver that the parameter value should be sent to\n the server as a CLOB.  When the setCharacterStream method is used, the\n driver may have to do extra work to determine whether the parameter\n data should be send to the server as a LONGVARCHAR or a CLOB"}, {"method_name": "setClob", "method_sig": "public void setClob (String parameterName,\n                    Clob x)\n             throws SQLException", "description": "Sets the designated parameter to the given java.sql.Clob object.\n The driver converts this to an SQL CLOB value when it\n sends it to the database."}, {"method_name": "setClob", "method_sig": "public void setClob (String parameterName,\n                    Reader reader)\n             throws SQLException", "description": "Sets the designated parameter to a Reader object.\n This method differs from the setCharacterStream (int, Reader) method\n because it informs the driver that the parameter value should be sent to\n the server as a CLOB.  When the setCharacterStream method is used, the\n driver may have to do extra work to determine whether the parameter\n data should be send to the server as a LONGVARCHAR or a CLOB\nNote: Consult your JDBC driver documentation to determine if\n it might be more efficient to use a version of\n setClob which takes a length parameter."}, {"method_name": "setDate", "method_sig": "public void setDate (String parameterName,\n                    Date x)\n             throws SQLException", "description": "Sets the designated parameter to the given java.sql.Date value\n using the default time zone of the virtual machine that is running\n the application.\n The driver converts this\n to an SQL DATE value when it sends it to the database."}, {"method_name": "setDate", "method_sig": "public void setDate (String parameterName,\n                    Date x,\n                    Calendar cal)\n             throws SQLException", "description": "Sets the designated parameter to the given java.sql.Date value,\n using the given Calendar object.  The driver uses\n the Calendar object to construct an SQL DATE value,\n which the driver then sends to the database.  With a\n a Calendar object, the driver can calculate the date\n taking into account a custom timezone.  If no\n Calendar object is specified, the driver uses the default\n timezone, which is that of the virtual machine running the application."}, {"method_name": "setTime", "method_sig": "public void setTime (String parameterName,\n                    Time x)\n             throws SQLException", "description": "Sets the designated parameter to the given java.sql.Time value.\n The driver converts this\n to an SQL TIME value when it sends it to the database."}, {"method_name": "setTime", "method_sig": "public void setTime (String parameterName,\n                    Time x,\n                    Calendar cal)\n             throws SQLException", "description": "Sets the designated parameter to the given java.sql.Time value,\n using the given Calendar object.  The driver uses\n the Calendar object to construct an SQL TIME value,\n which the driver then sends to the database.  With a\n a Calendar object, the driver can calculate the time\n taking into account a custom timezone.  If no\n Calendar object is specified, the driver uses the default\n timezone, which is that of the virtual machine running the application."}, {"method_name": "setTimestamp", "method_sig": "public void setTimestamp (String parameterName,\n                         Timestamp x,\n                         Calendar cal)\n                  throws SQLException", "description": "Sets the designated parameter to the given java.sql.Timestamp value,\n using the given Calendar object.  The driver uses\n the Calendar object to construct an SQL TIMESTAMP value,\n which the driver then sends to the database.  With a\n a Calendar object, the driver can calculate the timestamp\n taking into account a custom timezone.  If no\n Calendar object is specified, the driver uses the default\n timezone, which is that of the virtual machine running the application."}, {"method_name": "setSQLXML", "method_sig": "public void setSQLXML (int parameterIndex,\n                      SQLXML xmlObject)\n               throws SQLException", "description": "Sets the designated parameter to the given java.sql.SQLXML object. The driver converts this to an\n SQL XML value when it sends it to the database."}, {"method_name": "setSQLXML", "method_sig": "public void setSQLXML (String parameterName,\n                      SQLXML xmlObject)\n               throws SQLException", "description": "Sets the designated parameter to the given java.sql.SQLXML object. The driver converts this to an\n SQL XML value when it sends it to the database."}, {"method_name": "setRowId", "method_sig": "public void setRowId (int parameterIndex,\n                     RowId x)\n              throws SQLException", "description": "Sets the designated parameter to the given java.sql.RowId object. The\n driver converts this to a SQL ROWID value when it sends it\n to the database"}, {"method_name": "setRowId", "method_sig": "public void setRowId (String parameterName,\n                     RowId x)\n              throws SQLException", "description": "Sets the designated parameter to the given java.sql.RowId object. The\n driver converts this to a SQL ROWID when it sends it to the\n database."}, {"method_name": "setNString", "method_sig": "public void setNString (int parameterIndex,\n                       String value)\n                throws SQLException", "description": "Sets the designated parameter to the given String object.\n The driver converts this to a SQL NCHAR or\n NVARCHAR or LONGNVARCHAR value\n (depending on the argument's\n size relative to the driver's limits on NVARCHAR values)\n when it sends it to the database."}, {"method_name": "setNString", "method_sig": "public void setNString (String parameterName,\n                       String value)\n                throws SQLException", "description": "Sets the designated parameter to the given String object.\n The driver converts this to a SQL NCHAR or\n NVARCHAR or LONGNVARCHAR"}, {"method_name": "setNCharacterStream", "method_sig": "public void setNCharacterStream (int parameterIndex,\n                                Reader value,\n                                long length)\n                         throws SQLException", "description": "Sets the designated parameter to a Reader object. The\n Reader reads the data till end-of-file is reached. The\n driver does the necessary conversion from Java character format to\n the national character set in the database."}, {"method_name": "setNCharacterStream", "method_sig": "public void setNCharacterStream (String parameterName,\n                                Reader value,\n                                long length)\n                         throws SQLException", "description": "Sets the designated parameter to a Reader object. The\n Reader reads the data till end-of-file is reached. The\n driver does the necessary conversion from Java character format to\n the national character set in the database."}, {"method_name": "setNCharacterStream", "method_sig": "public void setNCharacterStream (String parameterName,\n                                Reader value)\n                         throws SQLException", "description": "Sets the designated parameter to a Reader object. The\n Reader reads the data till end-of-file is reached. The\n driver does the necessary conversion from Java character format to\n the national character set in the database.\n Note: This stream object can either be a standard\n Java stream object or your own subclass that implements the\n standard interface.\n Note: Consult your JDBC driver documentation to determine if\n it might be more efficient to use a version of\n setNCharacterStream which takes a length parameter."}, {"method_name": "setNClob", "method_sig": "public void setNClob (String parameterName,\n                     NClob value)\n              throws SQLException", "description": "Sets the designated parameter to a java.sql.NClob object. The object\n implements the java.sql.NClob interface. This NClob\n object maps to a SQL NCLOB."}, {"method_name": "setNClob", "method_sig": "public void setNClob (String parameterName,\n                     Reader reader,\n                     long length)\n              throws SQLException", "description": "Sets the designated parameter to a Reader object.  The reader must contain\n the number\n of characters specified by length otherwise a SQLException will be\n generated when the CallableStatement is executed.\n This method differs from the setCharacterStream (int, Reader, int) method\n because it informs the driver that the parameter value should be sent to\n the server as a NCLOB.  When the setCharacterStream method is used, the\n driver may have to do extra work to determine whether the parameter\n data should be send to the server as a LONGNVARCHAR or a NCLOB"}, {"method_name": "setNClob", "method_sig": "public void setNClob (String parameterName,\n                     Reader reader)\n              throws SQLException", "description": "Sets the designated parameter to a Reader object.\n This method differs from the setCharacterStream (int, Reader) method\n because it informs the driver that the parameter value should be sent to\n the server as a NCLOB.  When the setCharacterStream method is used, the\n driver may have to do extra work to determine whether the parameter\n data should be send to the server as a LONGNVARCHAR or a NCLOB\nNote: Consult your JDBC driver documentation to determine if\n it might be more efficient to use a version of\n setNClob which takes a length parameter."}, {"method_name": "setNClob", "method_sig": "public void setNClob (int parameterIndex,\n                     Reader reader,\n                     long length)\n              throws SQLException", "description": "Sets the designated parameter to a Reader object.  The reader must contain  the number\n of characters specified by length otherwise a SQLException will be\n generated when the PreparedStatement is executed.\n This method differs from the setCharacterStream (int, Reader, int) method\n because it informs the driver that the parameter value should be sent to\n the server as a NCLOB.  When the setCharacterStream method is used, the\n driver may have to do extra work to determine whether the parameter\n data should be sent to the server as a LONGNVARCHAR or a NCLOB"}, {"method_name": "setNClob", "method_sig": "public void setNClob (int parameterIndex,\n                     NClob value)\n              throws SQLException", "description": "Sets the designated parameter to a java.sql.NClob object. The driver converts this oa\n SQL NCLOB value when it sends it to the database."}, {"method_name": "setNClob", "method_sig": "public void setNClob (int parameterIndex,\n                     Reader reader)\n              throws SQLException", "description": "Sets the designated parameter to a Reader object.\n This method differs from the setCharacterStream (int, Reader) method\n because it informs the driver that the parameter value should be sent to\n the server as a NCLOB.  When the setCharacterStream method is used, the\n driver may have to do extra work to determine whether the parameter\n data should be sent to the server as a LONGNVARCHAR or a NCLOB\nNote: Consult your JDBC driver documentation to determine if\n it might be more efficient to use a version of\n setNClob which takes a length parameter."}, {"method_name": "setURL", "method_sig": "public void setURL (int parameterIndex,\n                   URL x)\n            throws SQLException", "description": "Sets the designated parameter to the given java.net.URL value.\n The driver converts this to an SQL DATALINK value\n when it sends it to the database."}]}