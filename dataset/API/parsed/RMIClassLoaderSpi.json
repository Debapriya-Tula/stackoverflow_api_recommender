{"name": "Class RMIClassLoaderSpi", "module": "java.rmi", "package": "java.rmi.server", "text": "RMIClassLoaderSpi is the service provider interface for\n RMIClassLoader.\n\n In particular, an RMIClassLoaderSpi instance provides an\n implementation of the following static methods of\n RMIClassLoader:\n\n \nRMIClassLoader.loadClass(URL,String)\nRMIClassLoader.loadClass(String,String)\nRMIClassLoader.loadClass(String,String,ClassLoader)\nRMIClassLoader.loadProxyClass(String,String[],ClassLoader)\nRMIClassLoader.getClassLoader(String)\nRMIClassLoader.getClassAnnotation(Class)\n\n\n When one of those methods is invoked, its behavior is to delegate\n to a corresponding method on an instance of this class.\n The details of how each method delegates to the provider instance is\n described in the documentation for each particular method.\n See the documentation for RMIClassLoader for a description\n of how a provider instance is chosen.", "codes": ["public abstract class RMIClassLoaderSpi\nextends Object"], "fields": [], "methods": [{"method_name": "loadClass", "method_sig": "public abstract Class<?> loadClass (String codebase,\n                                   String name,\n                                   ClassLoader defaultLoader)\n                            throws MalformedURLException,\n                                   ClassNotFoundException", "description": "Provides the implementation for\n RMIClassLoader.loadClass(URL,String),\n RMIClassLoader.loadClass(String,String), and\n RMIClassLoader.loadClass(String,String,ClassLoader).\n\n Loads a class from a codebase URL path, optionally using the\n supplied loader.\n\n Typically, a provider implementation will attempt to\n resolve the named class using the given defaultLoader,\n if specified, before attempting to resolve the class from the\n codebase URL path.\n\n An implementation of this method must either return a class\n with the given name or throw an exception."}, {"method_name": "loadProxyClass", "method_sig": "public abstract Class<?> loadProxyClass (String codebase,\n                                        String[] interfaces,\n                                        ClassLoader defaultLoader)\n                                 throws MalformedURLException,\n                                        ClassNotFoundException", "description": "Provides the implementation for\n RMIClassLoader.loadProxyClass(String,String[],ClassLoader).\n\n Loads a dynamic proxy class (see Proxy\n that implements a set of interfaces with the given names\n from a codebase URL path, optionally using the supplied loader.\n\n An implementation of this method must either return a proxy\n class that implements the named interfaces or throw an exception."}, {"method_name": "getClassLoader", "method_sig": "public abstract ClassLoader getClassLoader (String codebase)\n                                    throws MalformedURLException", "description": "Provides the implementation for\n RMIClassLoader.getClassLoader(String).\n\n Returns a class loader that loads classes from the given codebase\n URL path.\n\n If there is a security manger, its checkPermission\n method will be invoked with a\n RuntimePermission(\"getClassLoader\") permission;\n this could result in a SecurityException.\n The implementation of this method may also perform further security\n checks to verify that the calling context has permission to connect\n to all of the URLs in the codebase URL path."}, {"method_name": "getClassAnnotation", "method_sig": "public abstract String getClassAnnotation (Class<?> cl)", "description": "Provides the implementation for\n RMIClassLoader.getClassAnnotation(Class).\n\n Returns the annotation string (representing a location for\n the class definition) that RMI will use to annotate the class\n descriptor when marshalling objects of the given class."}]}