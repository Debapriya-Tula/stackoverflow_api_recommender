{"name": "Class SealedObject", "module": "java.base", "package": "javax.crypto", "text": "This class enables a programmer to create an object and protect its\n confidentiality with a cryptographic algorithm.\n\n  Given any Serializable object, one can create a SealedObject\n that encapsulates the original object, in serialized\n format (i.e., a \"deep copy\"), and seals (encrypts) its serialized contents,\n using a cryptographic algorithm such as AES, to protect its\n confidentiality.  The encrypted content can later be decrypted (with\n the corresponding algorithm using the correct decryption key) and\n de-serialized, yielding the original object.\n\n  Note that the Cipher object must be fully initialized with the\n correct algorithm, key, padding scheme, etc., before being applied\n to a SealedObject.\n\n  The original object that was sealed can be recovered in two different\n ways:\n\n \nby using the getObject\n method that takes a Cipher object.\n\n  This method requires a fully initialized Cipher object,\n initialized with the\n exact same algorithm, key, padding scheme, etc., that were used to seal the\n object.\n\n  This approach has the advantage that the party who unseals the\n sealed object does not require knowledge of the decryption key. For example,\n after one party has initialized the cipher object with the required\n decryption key, it could hand over the cipher object to\n another party who then unseals the sealed object.\n\n by using one of the\n getObject methods\n that take a Key object.\n\n  In this approach, the getObject method creates a cipher\n object for the appropriate decryption algorithm and initializes it with the\n given decryption key and the algorithm parameters (if any) that were stored\n in the sealed object.\n\n  This approach has the advantage that the party who\n unseals the object does not need to keep track of the parameters (e.g., an\n IV) that were used to seal the object.\n\n ", "codes": ["public class SealedObject\nextends Object\nimplements Serializable"], "fields": [{"field_name": "encodedParams", "field_sig": "protected\u00a0byte[] encodedParams", "description": "The cryptographic parameters used by the sealing Cipher,\n encoded in the default format.\n \n That is, cipher.getParameters().getEncoded()."}], "methods": [{"method_name": "getAlgorithm", "method_sig": "public final String getAlgorithm()", "description": "Returns the algorithm that was used to seal this object."}, {"method_name": "getObject", "method_sig": "public final Object getObject (Key key)\n                       throws IOException,\n                              ClassNotFoundException,\n                              NoSuchAlgorithmException,\n                              InvalidKeyException", "description": "Retrieves the original (encapsulated) object.\n\n This method creates a cipher for the algorithm that had been used in\n the sealing operation.\n If the default provider package provides an implementation of that\n algorithm, an instance of Cipher containing that implementation is used.\n If the algorithm is not available in the default package, other\n packages are searched.\n The Cipher object is initialized for decryption, using the given\n key and the parameters (if any) that had been used in the\n sealing operation.\n\n The encapsulated object is unsealed and de-serialized, before it is\n returned."}, {"method_name": "getObject", "method_sig": "public final Object getObject (Cipher c)\n                       throws IOException,\n                              ClassNotFoundException,\n                              IllegalBlockSizeException,\n                              BadPaddingException", "description": "Retrieves the original (encapsulated) object.\n\n The encapsulated object is unsealed (using the given Cipher,\n assuming that the Cipher is already properly initialized) and\n de-serialized, before it is returned."}, {"method_name": "getObject", "method_sig": "public final Object getObject (Key key,\n                              String provider)\n                       throws IOException,\n                              ClassNotFoundException,\n                              NoSuchAlgorithmException,\n                              NoSuchProviderException,\n                              InvalidKeyException", "description": "Retrieves the original (encapsulated) object.\n\n This method creates a cipher for the algorithm that had been used in\n the sealing operation, using an implementation of that algorithm from\n the given provider.\n The Cipher object is initialized for decryption, using the given\n key and the parameters (if any) that had been used in the\n sealing operation.\n\n The encapsulated object is unsealed and de-serialized, before it is\n returned."}]}