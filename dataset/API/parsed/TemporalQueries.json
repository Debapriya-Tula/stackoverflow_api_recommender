{"name": "Class TemporalQueries", "module": "java.base", "package": "java.time.temporal", "text": "Common implementations of TemporalQuery.\n \n This class provides common implementations of TemporalQuery.\n These are defined here as they must be constants, and the definition\n of lambdas does not guarantee that. By assigning them once here,\n they become 'normal' Java constants.\n \n Queries are a key tool for extracting information from temporal objects.\n They exist to externalize the process of querying, permitting different\n approaches, as per the strategy design pattern.\n Examples might be a query that checks if the date is the day before February 29th\n in a leap year, or calculates the number of days to your next birthday.\n \n The TemporalField interface provides another mechanism for querying\n temporal objects. That interface is limited to returning a long.\n By contrast, queries can return any type.\n \n There are two equivalent ways of using a TemporalQuery.\n The first is to invoke the method on this interface directly.\n The second is to use TemporalAccessor.query(TemporalQuery):\n \n   // these two lines are equivalent, but the second approach is recommended\n   temporal = thisQuery.queryFrom(temporal);\n   temporal = temporal.query(thisQuery);\n \n It is recommended to use the second approach, query(TemporalQuery),\n as it is a lot clearer to read in code.\n \n The most common implementations are method references, such as\n LocalDate::from and ZoneId::from.\n Additional common queries are provided to return:\n \n a Chronology,\n  a LocalDate,\n  a LocalTime,\n  a ZoneOffset,\n  a precision,\n  a zone, or\n  a zoneId.\n ", "codes": ["public final class TemporalQueries\nextends Object"], "fields": [], "methods": [{"method_name": "zoneId", "method_sig": "public static TemporalQuery<ZoneId> zoneId()", "description": "A strict query for the ZoneId.\n \n This queries a TemporalAccessor for the zone.\n The zone is only returned if the date-time conceptually contains a ZoneId.\n It will not be returned if the date-time only conceptually has an ZoneOffset.\n Thus a ZonedDateTime will return the result of getZone(),\n but an OffsetDateTime will return null.\n \n In most cases, applications should use zone() as this query is too strict.\n \n The result from JDK classes implementing TemporalAccessor is as follows:\nLocalDate returns null\nLocalTime returns null\nLocalDateTime returns null\nZonedDateTime returns the associated zone\nOffsetTime returns null\nOffsetDateTime returns null\nChronoLocalDate returns null\nChronoLocalDateTime returns null\nChronoZonedDateTime returns the associated zone\nEra returns null\nDayOfWeek returns null\nMonth returns null\nYear returns null\nYearMonth returns null\nMonthDay returns null\nZoneOffset returns null\nInstant returns null"}, {"method_name": "chronology", "method_sig": "public static TemporalQuery<Chronology> chronology()", "description": "A query for the Chronology.\n \n This queries a TemporalAccessor for the chronology.\n If the target TemporalAccessor represents a date, or part of a date,\n then it should return the chronology that the date is expressed in.\n As a result of this definition, objects only representing time, such as\n LocalTime, will return null.\n \n The result from JDK classes implementing TemporalAccessor is as follows:\nLocalDate returns IsoChronology.INSTANCE\nLocalTime returns null (does not represent a date)\nLocalDateTime returns IsoChronology.INSTANCE\nZonedDateTime returns IsoChronology.INSTANCE\nOffsetTime returns null (does not represent a date)\nOffsetDateTime returns IsoChronology.INSTANCE\nChronoLocalDate returns the associated chronology\nChronoLocalDateTime returns the associated chronology\nChronoZonedDateTime returns the associated chronology\nEra returns the associated chronology\nDayOfWeek returns null (shared across chronologies)\nMonth returns IsoChronology.INSTANCE\nYear returns IsoChronology.INSTANCE\nYearMonth returns IsoChronology.INSTANCE\nMonthDay returns null IsoChronology.INSTANCE\nZoneOffset returns null (does not represent a date)\nInstant returns null (does not represent a date)\n\n The method Chronology.from(TemporalAccessor) can be used as a\n TemporalQuery via a method reference, Chronology::from.\n That method is equivalent to this query, except that it throws an\n exception if a chronology cannot be obtained."}, {"method_name": "precision", "method_sig": "public static TemporalQuery<TemporalUnit> precision()", "description": "A query for the smallest supported unit.\n \n This queries a TemporalAccessor for the time precision.\n If the target TemporalAccessor represents a consistent or complete date-time,\n date or time then this must return the smallest precision actually supported.\n Note that fields such as NANO_OF_DAY and NANO_OF_SECOND\n are defined to always return ignoring the precision, thus this is the only\n way to find the actual smallest supported unit.\n For example, were GregorianCalendar to implement TemporalAccessor\n it would return a precision of MILLIS.\n \n The result from JDK classes implementing TemporalAccessor is as follows:\nLocalDate returns DAYS\nLocalTime returns NANOS\nLocalDateTime returns NANOS\nZonedDateTime returns NANOS\nOffsetTime returns NANOS\nOffsetDateTime returns NANOS\nChronoLocalDate returns DAYS\nChronoLocalDateTime returns NANOS\nChronoZonedDateTime returns NANOS\nEra returns ERAS\nDayOfWeek returns DAYS\nMonth returns MONTHS\nYear returns YEARS\nYearMonth returns MONTHS\nMonthDay returns null (does not represent a complete date or time)\nZoneOffset returns null (does not represent a date or time)\nInstant returns NANOS"}, {"method_name": "zone", "method_sig": "public static TemporalQuery<ZoneId> zone()", "description": "A lenient query for the ZoneId, falling back to the ZoneOffset.\n \n This queries a TemporalAccessor for the zone.\n It first tries to obtain the zone, using zoneId().\n If that is not found it tries to obtain the offset().\n Thus a ZonedDateTime will return the result of getZone(),\n while an OffsetDateTime will return the result of getOffset().\n \n In most cases, applications should use this query rather than #zoneId().\n \n The method ZoneId.from(TemporalAccessor) can be used as a\n TemporalQuery via a method reference, ZoneId::from.\n That method is equivalent to this query, except that it throws an\n exception if a zone cannot be obtained."}, {"method_name": "offset", "method_sig": "public static TemporalQuery<ZoneOffset> offset()", "description": "A query for ZoneOffset returning null if not found.\n \n This returns a TemporalQuery that can be used to query a temporal\n object for the offset. The query will return null if the temporal\n object cannot supply an offset.\n \n The query implementation examines the OFFSET_SECONDS\n field and uses it to create a ZoneOffset.\n \n The method ZoneOffset.from(TemporalAccessor) can be used as a\n TemporalQuery via a method reference, ZoneOffset::from.\n This query and ZoneOffset::from will return the same result if the\n temporal object contains an offset. If the temporal object does not contain\n an offset, then the method reference will throw an exception, whereas this\n query will return null."}, {"method_name": "localDate", "method_sig": "public static TemporalQuery<LocalDate> localDate()", "description": "A query for LocalDate returning null if not found.\n \n This returns a TemporalQuery that can be used to query a temporal\n object for the local date. The query will return null if the temporal\n object cannot supply a local date.\n \n The query implementation examines the EPOCH_DAY\n field and uses it to create a LocalDate.\n \n The method ZoneOffset.from(TemporalAccessor) can be used as a\n TemporalQuery via a method reference, LocalDate::from.\n This query and LocalDate::from will return the same result if the\n temporal object contains a date. If the temporal object does not contain\n a date, then the method reference will throw an exception, whereas this\n query will return null."}, {"method_name": "localTime", "method_sig": "public static TemporalQuery<LocalTime> localTime()", "description": "A query for LocalTime returning null if not found.\n \n This returns a TemporalQuery that can be used to query a temporal\n object for the local time. The query will return null if the temporal\n object cannot supply a local time.\n \n The query implementation examines the NANO_OF_DAY\n field and uses it to create a LocalTime.\n \n The method ZoneOffset.from(TemporalAccessor) can be used as a\n TemporalQuery via a method reference, LocalTime::from.\n This query and LocalTime::from will return the same result if the\n temporal object contains a time. If the temporal object does not contain\n a time, then the method reference will throw an exception, whereas this\n query will return null."}]}