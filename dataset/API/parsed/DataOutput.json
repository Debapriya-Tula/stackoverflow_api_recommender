{"name": "Interface DataOutput", "module": "java.base", "package": "java.io", "text": "The DataOutput interface provides\n for converting data from any of the Java\n primitive types to a series of bytes and\n writing these bytes to a binary stream.\n There is  also a facility for converting\n a String into\n modified UTF-8\n format and writing the resulting series\n of bytes.\n \n For all the methods in this interface that\n write bytes, it is generally true that if\n a byte cannot be written for any reason,\n an IOException is thrown.", "codes": ["public interface DataOutput"], "fields": [], "methods": [{"method_name": "write", "method_sig": "void write (int b)\n    throws IOException", "description": "Writes to the output stream the eight\n low-order bits of the argument b.\n The 24 high-order  bits of b\n are ignored."}, {"method_name": "write", "method_sig": "void write (byte[] b)\n    throws IOException", "description": "Writes to the output stream all the bytes in array b.\n If b is null,\n a NullPointerException is thrown.\n If b.length is zero, then\n no bytes are written. Otherwise, the byte\n b[0] is written first, then\n b[1], and so on; the last byte\n written is b[b.length-1]."}, {"method_name": "write", "method_sig": "void write (byte[] b,\n           int off,\n           int len)\n    throws IOException", "description": "Writes len bytes from array\n b, in order,  to\n the output stream.  If b\n is null, a NullPointerException\n is thrown.  If off is negative,\n or len is negative, or off+len\n is greater than the length of the array\n b, then an IndexOutOfBoundsException\n is thrown.  If len is zero,\n then no bytes are written. Otherwise, the\n byte b[off] is written first,\n then b[off+1], and so on; the\n last byte written is b[off+len-1]."}, {"method_name": "writeBoolean", "method_sig": "void writeBoolean (boolean v)\n           throws IOException", "description": "Writes a boolean value to this output stream.\n If the argument v\n is true, the value (byte)1\n is written; if v is false,\n the  value (byte)0 is written.\n The byte written by this method may\n be read by the readBoolean\n method of interface DataInput,\n which will then return a boolean\n equal to v."}, {"method_name": "writeByte", "method_sig": "void writeByte (int v)\n        throws IOException", "description": "Writes to the output stream the eight low-\n order bits of the argument v.\n The 24 high-order bits of v\n are ignored. (This means  that writeByte\n does exactly the same thing as write\n for an integer argument.) The byte written\n by this method may be read by the readByte\n method of interface DataInput,\n which will then return a byte\n equal to (byte)v."}, {"method_name": "writeShort", "method_sig": "void writeShort (int v)\n         throws IOException", "description": "Writes two bytes to the output\n stream to represent the value of the argument.\n The byte values to be written, in the  order\n shown, are:\n \n (byte)(0xff & (v >> 8))\n (byte)(0xff & v)\n  \n The bytes written by this method may be\n read by the readShort method\n of interface DataInput , which\n will then return a short equal\n to (short)v."}, {"method_name": "writeChar", "method_sig": "void writeChar (int v)\n        throws IOException", "description": "Writes a char value, which\n is comprised of two bytes, to the\n output stream.\n The byte values to be written, in the  order\n shown, are:\n \n (byte)(0xff & (v >> 8))\n (byte)(0xff & v)\n \n The bytes written by this method may be\n read by the readChar method\n of interface DataInput , which\n will then return a char equal\n to (char)v."}, {"method_name": "writeInt", "method_sig": "void writeInt (int v)\n       throws IOException", "description": "Writes an int value, which is\n comprised of four bytes, to the output stream.\n The byte values to be written, in the  order\n shown, are:\n \n (byte)(0xff & (v >> 24))\n (byte)(0xff & (v >> 16))\n (byte)(0xff & (v >>  8))\n (byte)(0xff & v)\n \n The bytes written by this method may be read\n by the readInt method of interface\n DataInput , which will then\n return an int equal to v."}, {"method_name": "writeLong", "method_sig": "void writeLong (long v)\n        throws IOException", "description": "Writes a long value, which is\n comprised of eight bytes, to the output stream.\n The byte values to be written, in the  order\n shown, are:\n \n (byte)(0xff & (v >> 56))\n (byte)(0xff & (v >> 48))\n (byte)(0xff & (v >> 40))\n (byte)(0xff & (v >> 32))\n (byte)(0xff & (v >> 24))\n (byte)(0xff & (v >> 16))\n (byte)(0xff & (v >>  8))\n (byte)(0xff & v)\n \n The bytes written by this method may be\n read by the readLong method\n of interface DataInput , which\n will then return a long equal\n to v."}, {"method_name": "writeFloat", "method_sig": "void writeFloat (float v)\n         throws IOException", "description": "Writes a float value,\n which is comprised of four bytes, to the output stream.\n It does this as if it first converts this\n float value to an int\n in exactly the manner of the Float.floatToIntBits\n method  and then writes the int\n value in exactly the manner of the  writeInt\n method.  The bytes written by this method\n may be read by the readFloat\n method of interface DataInput,\n which will then return a float\n equal to v."}, {"method_name": "writeDouble", "method_sig": "void writeDouble (double v)\n          throws IOException", "description": "Writes a double value,\n which is comprised of eight bytes, to the output stream.\n It does this as if it first converts this\n double value to a long\n in exactly the manner of the Double.doubleToLongBits\n method  and then writes the long\n value in exactly the manner of the  writeLong\n method. The bytes written by this method\n may be read by the readDouble\n method of interface DataInput,\n which will then return a double\n equal to v."}, {"method_name": "writeBytes", "method_sig": "void writeBytes (String s)\n         throws IOException", "description": "Writes a string to the output stream.\n For every character in the string\n s,  taken in order, one byte\n is written to the output stream.  If\n s is null, a NullPointerException\n is thrown.  If s.length\n is zero, then no bytes are written. Otherwise,\n the character s[0] is written\n first, then s[1], and so on;\n the last character written is s[s.length-1].\n For each character, one byte is written,\n the low-order byte, in exactly the manner\n of the writeByte method . The\n high-order eight bits of each character\n in the string are ignored."}, {"method_name": "writeChars", "method_sig": "void writeChars (String s)\n         throws IOException", "description": "Writes every character in the string s,\n to the output stream, in order,\n two bytes per character. If s\n is null, a NullPointerException\n is thrown.  If s.length\n is zero, then no characters are written.\n Otherwise, the character s[0]\n is written first, then s[1],\n and so on; the last character written is\n s[s.length-1]. For each character,\n two bytes are actually written, high-order\n byte first, in exactly the manner of the\n writeChar method."}, {"method_name": "writeUTF", "method_sig": "void writeUTF (String s)\n       throws IOException", "description": "Writes two bytes of length information\n to the output stream, followed\n by the\n modified UTF-8\n representation\n of  every character in the string s.\n If s is null,\n a NullPointerException is thrown.\n Each character in the string s\n is converted to a group of one, two, or\n three bytes, depending on the value of the\n character.\n If a character c\n is in the range \\u0001 through\n \\u007f, it is represented\n by one byte:\n (byte)c  \n If a character c is \\u0000\n or is in the range \\u0080\n through \\u07ff, then it is\n represented by two bytes, to be written\n in the order shown: \n (byte)(0xc0 | (0x1f & (c >> 6)))\n (byte)(0x80 | (0x3f & c))\n   If a character\n c is in the range \\u0800\n through uffff, then it is\n represented by three bytes, to be written\n in the order shown: \n (byte)(0xe0 | (0x0f & (c >> 12)))\n (byte)(0x80 | (0x3f & (c >>  6)))\n (byte)(0x80 | (0x3f & c))\n   First,\n the total number of bytes needed to represent\n all the characters of s is\n calculated. If this number is larger than\n 65535, then a UTFDataFormatException\n is thrown. Otherwise, this length is written\n to the output stream in exactly the manner\n of the writeShort method;\n after this, the one-, two-, or three-byte\n representation of each character in the\n string s is written.  The\n bytes written by this method may be read\n by the readUTF method of interface\n DataInput , which will then\n return a String equal to s."}]}