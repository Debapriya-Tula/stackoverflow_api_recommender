{"name": "Class LinkedTransferQueue<E>", "module": "java.base", "package": "java.util.concurrent", "text": "An unbounded TransferQueue based on linked nodes.\n This queue orders elements FIFO (first-in-first-out) with respect\n to any given producer.  The head of the queue is that\n element that has been on the queue the longest time for some\n producer.  The tail of the queue is that element that has\n been on the queue the shortest time for some producer.\n\n Beware that, unlike in most collections, the size method\n is NOT a constant-time operation. Because of the\n asynchronous nature of these queues, determining the current number\n of elements requires a traversal of the elements, and so may report\n inaccurate results if this collection is modified during traversal.\n\n Bulk operations that add, remove, or examine multiple elements,\n such as AbstractQueue.addAll(java.util.Collection<? extends E>), removeIf(java.util.function.Predicate<? super E>) or forEach(java.util.function.Consumer<? super E>),\n are not guaranteed to be performed atomically.\n For example, a forEach traversal concurrent with an \n addAll operation might observe only some of the added elements.\n\n This class and its iterator implement all of the optional\n methods of the Collection and Iterator interfaces.\n\n Memory consistency effects: As with other concurrent\n collections, actions in a thread prior to placing an object into a\n LinkedTransferQueue\nhappen-before\n actions subsequent to the access or removal of that element from\n the LinkedTransferQueue in another thread.\n\n This class is a member of the\n \n Java Collections Framework.", "codes": ["public class LinkedTransferQueue<E>\nextends AbstractQueue<E>\nimplements TransferQueue<E>, Serializable"], "fields": [], "methods": [{"method_name": "toArray", "method_sig": "public Object[] toArray()", "description": "Returns an array containing all of the elements in this queue, in\n proper sequence.\n\n The returned array will be \"safe\" in that no references to it are\n maintained by this queue.  (In other words, this method must allocate\n a new array).  The caller is thus free to modify the returned array.\n\n This method acts as bridge between array-based and collection-based\n APIs."}, {"method_name": "toArray", "method_sig": "public <T> T[] toArray (T[] a)", "description": "Returns an array containing all of the elements in this queue, in\n proper sequence; the runtime type of the returned array is that of\n the specified array.  If the queue fits in the specified array, it\n is returned therein.  Otherwise, a new array is allocated with the\n runtime type of the specified array and the size of this queue.\n\n If this queue fits in the specified array with room to spare\n (i.e., the array has more elements than this queue), the element in\n the array immediately following the end of the queue is set to\n null.\n\n Like the toArray() method, this method acts as bridge between\n array-based and collection-based APIs.  Further, this method allows\n precise control over the runtime type of the output array, and may,\n under certain circumstances, be used to save allocation costs.\n\n Suppose x is a queue known to contain only strings.\n The following code can be used to dump the queue into a newly\n allocated array of String:\n\n  String[] y = x.toArray(new String[0]);\n\n Note that toArray(new Object[0]) is identical in function to\n toArray()."}, {"method_name": "spliterator", "method_sig": "public Spliterator<E> spliterator()", "description": "Returns a Spliterator over the elements in this queue.\n\n The returned spliterator is\n weakly consistent.\n\n The Spliterator reports Spliterator.CONCURRENT,\n Spliterator.ORDERED, and Spliterator.NONNULL."}, {"method_name": "put", "method_sig": "public void put (E e)", "description": "Inserts the specified element at the tail of this queue.\n As the queue is unbounded, this method will never block."}, {"method_name": "offer", "method_sig": "public boolean offer (E e,\n                     long timeout,\n                     TimeUnit unit)", "description": "Inserts the specified element at the tail of this queue.\n As the queue is unbounded, this method will never block or\n return false."}, {"method_name": "offer", "method_sig": "public boolean offer (E e)", "description": "Inserts the specified element at the tail of this queue.\n As the queue is unbounded, this method will never return false."}, {"method_name": "add", "method_sig": "public boolean add (E e)", "description": "Inserts the specified element at the tail of this queue.\n As the queue is unbounded, this method will never throw\n IllegalStateException or return false."}, {"method_name": "tryTransfer", "method_sig": "public boolean tryTransfer (E e)", "description": "Transfers the element to a waiting consumer immediately, if possible.\n\n More precisely, transfers the specified element immediately\n if there exists a consumer already waiting to receive it (in\n BlockingQueue.take() or timed poll),\n otherwise returning false without enqueuing the element."}, {"method_name": "transfer", "method_sig": "public void transfer (E e)\n              throws InterruptedException", "description": "Transfers the element to a consumer, waiting if necessary to do so.\n\n More precisely, transfers the specified element immediately\n if there exists a consumer already waiting to receive it (in\n BlockingQueue.take() or timed poll),\n else inserts the specified element at the tail of this queue\n and waits until the element is received by a consumer."}, {"method_name": "tryTransfer", "method_sig": "public boolean tryTransfer (E e,\n                           long timeout,\n                           TimeUnit unit)\n                    throws InterruptedException", "description": "Transfers the element to a consumer if it is possible to do so\n before the timeout elapses.\n\n More precisely, transfers the specified element immediately\n if there exists a consumer already waiting to receive it (in\n BlockingQueue.take() or timed poll),\n else inserts the specified element at the tail of this queue\n and waits until the element is received by a consumer,\n returning false if the specified wait time elapses\n before the element can be transferred."}, {"method_name": "drainTo", "method_sig": "public int drainTo (Collection<? super E> c)", "description": "Description copied from interface:\u00a0BlockingQueue"}, {"method_name": "drainTo", "method_sig": "public int drainTo (Collection<? super E> c,\n                   int maxElements)", "description": "Description copied from interface:\u00a0BlockingQueue"}, {"method_name": "iterator", "method_sig": "public Iterator<E> iterator()", "description": "Returns an iterator over the elements in this queue in proper sequence.\n The elements will be returned in order from first (head) to last (tail).\n\n The returned iterator is\n weakly consistent."}, {"method_name": "isEmpty", "method_sig": "public boolean isEmpty()", "description": "Returns true if this queue contains no elements."}, {"method_name": "size", "method_sig": "public int size()", "description": "Returns the number of elements in this queue.  If this queue\n contains more than Integer.MAX_VALUE elements, returns\n Integer.MAX_VALUE.\n\n Beware that, unlike in most collections, this method is\n NOT a constant-time operation. Because of the\n asynchronous nature of these queues, determining the current\n number of elements requires an O(n) traversal."}, {"method_name": "remove", "method_sig": "public boolean remove (Object o)", "description": "Removes a single instance of the specified element from this queue,\n if it is present.  More formally, removes an element e such\n that o.equals(e), if this queue contains one or more such\n elements.\n Returns true if this queue contained the specified element\n (or equivalently, if this queue changed as a result of the call)."}, {"method_name": "contains", "method_sig": "public boolean contains (Object o)", "description": "Returns true if this queue contains the specified element.\n More formally, returns true if and only if this queue contains\n at least one element e such that o.equals(e)."}, {"method_name": "remainingCapacity", "method_sig": "public int remainingCapacity()", "description": "Always returns Integer.MAX_VALUE because a\n LinkedTransferQueue is not capacity constrained."}, {"method_name": "removeIf", "method_sig": "public boolean removeIf (Predicate<? super E> filter)", "description": "Description copied from interface:\u00a0Collection"}, {"method_name": "removeAll", "method_sig": "public boolean removeAll (Collection<?> c)", "description": "Description copied from class:\u00a0AbstractCollection"}, {"method_name": "retainAll", "method_sig": "public boolean retainAll (Collection<?> c)", "description": "Description copied from class:\u00a0AbstractCollection"}, {"method_name": "forEach", "method_sig": "public void forEach (Consumer<? super E> action)", "description": "Description copied from interface:\u00a0Iterable"}]}