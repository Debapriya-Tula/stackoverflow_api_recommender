{"name": "Class CountDownLatch", "module": "java.base", "package": "java.util.concurrent", "text": "A synchronization aid that allows one or more threads to wait until\n a set of operations being performed in other threads completes.\n\n A CountDownLatch is initialized with a given count.\n The await methods block until the current count reaches\n zero due to invocations of the countDown() method, after which\n all waiting threads are released and any subsequent invocations of\n await return immediately.  This is a one-shot phenomenon\n -- the count cannot be reset.  If you need a version that resets the\n count, consider using a CyclicBarrier.\n\n A CountDownLatch is a versatile synchronization tool\n and can be used for a number of purposes.  A\n CountDownLatch initialized with a count of one serves as a\n simple on/off latch, or gate: all threads invoking await\n wait at the gate until it is opened by a thread invoking countDown().  A CountDownLatch initialized to N\n can be used to make one thread wait until N threads have\n completed some action, or some action has been completed N times.\n\n A useful property of a CountDownLatch is that it\n doesn't require that threads calling countDown wait for\n the count to reach zero before proceeding, it simply prevents any\n thread from proceeding past an await until all\n threads could pass.\n\n Sample usage: Here is a pair of classes in which a group\n of worker threads use two countdown latches:\n \nThe first is a start signal that prevents any worker from proceeding\n until the driver is ready for them to proceed;\n The second is a completion signal that allows the driver to wait\n until all workers have completed.\n \n \n class Driver { // ...\n   void main() throws InterruptedException {\n     CountDownLatch startSignal = new CountDownLatch(1);\n     CountDownLatch doneSignal = new CountDownLatch(N);\n\n     for (int i = 0; i < N; ++i) // create and start threads\n       new Thread(new Worker(startSignal, doneSignal)).start();\n\n     doSomethingElse();            // don't let run yet\n     startSignal.countDown();      // let all threads proceed\n     doSomethingElse();\n     doneSignal.await();           // wait for all to finish\n   }\n }\n\n class Worker implements Runnable {\n   private final CountDownLatch startSignal;\n   private final CountDownLatch doneSignal;\n   Worker(CountDownLatch startSignal, CountDownLatch doneSignal) {\n     this.startSignal = startSignal;\n     this.doneSignal = doneSignal;\n   }\n   public void run() {\n     try {\n       startSignal.await();\n       doWork();\n       doneSignal.countDown();\n     } catch (InterruptedException ex) {} // return;\n   }\n\n   void doWork() { ... }\n }\nAnother typical usage would be to divide a problem into N parts,\n describe each part with a Runnable that executes that portion and\n counts down on the latch, and queue all the Runnables to an\n Executor.  When all sub-parts are complete, the coordinating thread\n will be able to pass through await. (When threads must repeatedly\n count down in this way, instead use a CyclicBarrier.)\n\n  \n class Driver2 { // ...\n   void main() throws InterruptedException {\n     CountDownLatch doneSignal = new CountDownLatch(N);\n     Executor e = ...\n\n     for (int i = 0; i < N; ++i) // create and start threads\n       e.execute(new WorkerRunnable(doneSignal, i));\n\n     doneSignal.await();           // wait for all to finish\n   }\n }\n\n class WorkerRunnable implements Runnable {\n   private final CountDownLatch doneSignal;\n   private final int i;\n   WorkerRunnable(CountDownLatch doneSignal, int i) {\n     this.doneSignal = doneSignal;\n     this.i = i;\n   }\n   public void run() {\n     try {\n       doWork(i);\n       doneSignal.countDown();\n     } catch (InterruptedException ex) {} // return;\n   }\n\n   void doWork() { ... }\n }\nMemory consistency effects: Until the count reaches\n zero, actions in a thread prior to calling\n countDown()\nhappen-before\n actions following a successful return from a corresponding\n await() in another thread.", "codes": ["public class CountDownLatch\nextends Object"], "fields": [], "methods": [{"method_name": "await", "method_sig": "public void await()\n           throws InterruptedException", "description": "Causes the current thread to wait until the latch has counted down to\n zero, unless the thread is interrupted.\n\n If the current count is zero then this method returns immediately.\n\n If the current count is greater than zero then the current\n thread becomes disabled for thread scheduling purposes and lies\n dormant until one of two things happen:\n \nThe count reaches zero due to invocations of the\n countDown() method; or\n Some other thread interrupts\n the current thread.\n \nIf the current thread:\n \nhas its interrupted status set on entry to this method; or\n is interrupted while waiting,\n \n then InterruptedException is thrown and the current thread's\n interrupted status is cleared."}, {"method_name": "await", "method_sig": "public boolean await (long timeout,\n                     TimeUnit unit)\n              throws InterruptedException", "description": "Causes the current thread to wait until the latch has counted down to\n zero, unless the thread is interrupted,\n or the specified waiting time elapses.\n\n If the current count is zero then this method returns immediately\n with the value true.\n\n If the current count is greater than zero then the current\n thread becomes disabled for thread scheduling purposes and lies\n dormant until one of three things happen:\n \nThe count reaches zero due to invocations of the\n countDown() method; or\n Some other thread interrupts\n the current thread; or\n The specified waiting time elapses.\n \nIf the count reaches zero then the method returns with the\n value true.\n\n If the current thread:\n \nhas its interrupted status set on entry to this method; or\n is interrupted while waiting,\n \n then InterruptedException is thrown and the current thread's\n interrupted status is cleared.\n\n If the specified waiting time elapses then the value false\n is returned.  If the time is less than or equal to zero, the method\n will not wait at all."}, {"method_name": "countDown", "method_sig": "public void countDown()", "description": "Decrements the count of the latch, releasing all waiting threads if\n the count reaches zero.\n\n If the current count is greater than zero then it is decremented.\n If the new count is zero then all waiting threads are re-enabled for\n thread scheduling purposes.\n\n If the current count equals zero then nothing happens."}, {"method_name": "getCount", "method_sig": "public long getCount()", "description": "Returns the current count.\n\n This method is typically used for debugging and testing purposes."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a string identifying this latch, as well as its state.\n The state, in brackets, includes the String \"Count =\"\n followed by the current count."}]}