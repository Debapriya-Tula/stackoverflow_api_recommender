{"name": "Class LongAccumulator", "module": "java.base", "package": "java.util.concurrent.atomic", "text": "One or more variables that together maintain a running long\n value updated using a supplied function.  When updates (method\n accumulate(long)) are contended across threads, the set of variables\n may grow dynamically to reduce contention.  Method get()\n (or, equivalently, longValue()) returns the current value\n across the variables maintaining updates.\n\n This class is usually preferable to AtomicLong when\n multiple threads update a common value that is used for purposes such\n as collecting statistics, not for fine-grained synchronization\n control.  Under low update contention, the two classes have similar\n characteristics. But under high contention, expected throughput of\n this class is significantly higher, at the expense of higher space\n consumption.\n\n The order of accumulation within or across threads is not\n guaranteed and cannot be depended upon, so this class is only\n applicable to functions for which the order of accumulation does\n not matter. The supplied accumulator function should be\n side-effect-free, since it may be re-applied when attempted updates\n fail due to contention among threads. For predictable results, the\n accumulator function should be associative and commutative. The\n function is applied with an existing value (or identity) as one\n argument, and a given update as the other argument.  For example,\n to maintain a running maximum value, you could supply \n Long::max along with Long.MIN_VALUE as the identity.\n\n Class LongAdder provides analogs of the functionality of\n this class for the common special case of maintaining counts and\n sums.  The call new LongAdder() is equivalent to new\n LongAccumulator((x, y) -> x + y, 0L).\n\n This class extends Number, but does not define\n methods such as equals, hashCode and \n compareTo because instances are expected to be mutated, and so are\n not useful as collection keys.", "codes": ["public class LongAccumulator\nextends Number\nimplements Serializable"], "fields": [], "methods": [{"method_name": "accumulate", "method_sig": "public void accumulate (long x)", "description": "Updates with the given value."}, {"method_name": "get", "method_sig": "public long get()", "description": "Returns the current value.  The returned value is NOT\n an atomic snapshot; invocation in the absence of concurrent\n updates returns an accurate result, but concurrent updates that\n occur while the value is being calculated might not be\n incorporated."}, {"method_name": "reset", "method_sig": "public void reset()", "description": "Resets variables maintaining updates to the identity value.\n This method may be a useful alternative to creating a new\n updater, but is only effective if there are no concurrent\n updates.  Because this method is intrinsically racy, it should\n only be used when it is known that no threads are concurrently\n updating."}, {"method_name": "getThenReset", "method_sig": "public long getThenReset()", "description": "Equivalent in effect to get() followed by reset(). This method may apply for example during quiescent\n points between multithreaded computations.  If there are\n updates concurrent with this method, the returned value is\n not guaranteed to be the final value occurring before\n the reset."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns the String representation of the current value."}, {"method_name": "longValue", "method_sig": "public long longValue()", "description": "Equivalent to get()."}, {"method_name": "intValue", "method_sig": "public int intValue()", "description": "Returns the current value as an int\n after a narrowing primitive conversion."}, {"method_name": "floatValue", "method_sig": "public float floatValue()", "description": "Returns the current value as a float\n after a widening primitive conversion."}, {"method_name": "doubleValue", "method_sig": "public double doubleValue()", "description": "Returns the current value as a double\n after a widening primitive conversion."}]}