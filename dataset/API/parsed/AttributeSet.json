{"name": "Interface AttributeSet", "module": "java.desktop", "package": "javax.swing.text", "text": "A collection of unique attributes.  This is a read-only,\n immutable interface.  An attribute is basically a key and\n a value assigned to the key.  The collection may represent\n something like a style run, a logical style, etc.  These\n are generally used to describe features that will contribute\n to some graphical representation such as a font.  The\n set of possible keys is unbounded and can be anything.\n Typically View implementations will respond to attribute\n definitions and render something to represent the attributes.\n \n Attributes can potentially resolve in a hierarchy.  If a\n key doesn't resolve locally, and a resolving parent\n exists, the key will be resolved through the parent.", "codes": ["public interface AttributeSet"], "fields": [{"field_name": "NameAttribute", "field_sig": "static final\u00a0Object NameAttribute", "description": "Attribute name used to name the collection of\n attributes."}, {"field_name": "ResolveAttribute", "field_sig": "static final\u00a0Object ResolveAttribute", "description": "Attribute name used to identify the resolving parent\n set of attributes, if one is defined."}], "methods": [{"method_name": "getAttributeCount", "method_sig": "int getAttributeCount()", "description": "Returns the number of attributes that are defined locally in this set.\n Attributes that are defined in the parent set are not included."}, {"method_name": "isDefined", "method_sig": "boolean isDefined (Object attrName)", "description": "Checks whether the named attribute has a value specified in\n the set without resolving through another attribute\n set."}, {"method_name": "isEqual", "method_sig": "boolean isEqual (AttributeSet attr)", "description": "Determines if the two attribute sets are equivalent."}, {"method_name": "copyAttributes", "method_sig": "AttributeSet copyAttributes()", "description": "Returns an attribute set that is guaranteed not\n to change over time."}, {"method_name": "getAttribute", "method_sig": "Object getAttribute (Object key)", "description": "Fetches the value of the given attribute. If the value is not found\n locally, the search is continued upward through the resolving\n parent (if one exists) until the value is either\n found or there are no more parents.  If the value is not found,\n null is returned."}, {"method_name": "getAttributeNames", "method_sig": "Enumeration<?> getAttributeNames()", "description": "Returns an enumeration over the names of the attributes that are\n defined locally in the set. Names of attributes defined in the\n resolving parent, if any, are not included. The values of the\n Enumeration may be anything and are not constrained to\n a particular Object type.\n \n This method never returns null. For a set with no attributes, it\n returns an empty Enumeration."}, {"method_name": "containsAttribute", "method_sig": "boolean containsAttribute (Object name,\n                          Object value)", "description": "Returns true if this set defines an attribute with the same\n name and an equal value. If such an attribute is not found locally,\n it is searched through in the resolving parent hierarchy."}, {"method_name": "containsAttributes", "method_sig": "boolean containsAttributes (AttributeSet attributes)", "description": "Returns true if this set defines all the attributes from the\n given set with equal values. If an attribute is not found locally,\n it is searched through in the resolving parent hierarchy."}, {"method_name": "getResolveParent", "method_sig": "AttributeSet getResolveParent()", "description": "Gets the resolving parent."}]}