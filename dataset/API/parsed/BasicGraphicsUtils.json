{"name": "Class BasicGraphicsUtils", "module": "java.desktop", "package": "javax.swing.plaf.basic", "text": "Convenient util class.", "codes": ["public class BasicGraphicsUtils\nextends Object"], "fields": [], "methods": [{"method_name": "drawEtchedRect", "method_sig": "public static void drawEtchedRect (Graphics g,\n                                  int x,\n                                  int y,\n                                  int w,\n                                  int h,\n                                  Color shadow,\n                                  Color darkShadow,\n                                  Color highlight,\n                                  Color lightHighlight)", "description": "Draws an etched rectangle."}, {"method_name": "getEtchedInsets", "method_sig": "public static Insets getEtchedInsets()", "description": "Returns the amount of space taken up by a border drawn by\n drawEtchedRect()"}, {"method_name": "drawGroove", "method_sig": "public static void drawGroove (Graphics g,\n                              int x,\n                              int y,\n                              int w,\n                              int h,\n                              Color shadow,\n                              Color highlight)", "description": "Draws a groove."}, {"method_name": "getGrooveInsets", "method_sig": "public static Insets getGrooveInsets()", "description": "Returns the amount of space taken up by a border drawn by\n drawGroove()"}, {"method_name": "drawBezel", "method_sig": "public static void drawBezel (Graphics g,\n                             int x,\n                             int y,\n                             int w,\n                             int h,\n                             boolean isPressed,\n                             boolean isDefault,\n                             Color shadow,\n                             Color darkShadow,\n                             Color highlight,\n                             Color lightHighlight)", "description": "Draws a bezel."}, {"method_name": "drawLoweredBezel", "method_sig": "public static void drawLoweredBezel (Graphics g,\n                                    int x,\n                                    int y,\n                                    int w,\n                                    int h,\n                                    Color shadow,\n                                    Color darkShadow,\n                                    Color highlight,\n                                    Color lightHighlight)", "description": "Draws a lowered bezel."}, {"method_name": "drawString", "method_sig": "public static void drawString (Graphics g,\n                              String text,\n                              int underlinedChar,\n                              int x,\n                              int y)", "description": "Draw a string with the graphics g at location (x,y)\n just like g.drawString would. The first occurrence\n of underlineChar in text will be underlined.\n The matching algorithm is not case sensitive."}, {"method_name": "drawStringUnderlineCharAt", "method_sig": "public static void drawStringUnderlineCharAt (Graphics g,\n                                             String text,\n                                             int underlinedIndex,\n                                             int x,\n                                             int y)", "description": "Draw a string with the graphics g at location\n (x, y)\n just like g.drawString would.\n The character at index underlinedIndex\n in text will be underlined. If index is beyond the\n bounds of text (including < 0), nothing will be\n underlined."}, {"method_name": "drawDashedRect", "method_sig": "public static void drawDashedRect (Graphics g,\n                                  int x,\n                                  int y,\n                                  int width,\n                                  int height)", "description": "Draws dashed rectangle."}, {"method_name": "getPreferredButtonSize", "method_sig": "public static Dimension getPreferredButtonSize (AbstractButton b,\n                                               int textIconGap)", "description": "Returns the preferred size of the button."}, {"method_name": "drawString", "method_sig": "public static void drawString (JComponent c,\n                              Graphics2D g,\n                              String string,\n                              float x,\n                              float y)", "description": "Draws the given string at the specified location using text properties\n and anti-aliasing hints from the provided component.\n Nothing is drawn for the null string."}, {"method_name": "drawStringUnderlineCharAt", "method_sig": "public static void drawStringUnderlineCharAt (JComponent c,\n                                             Graphics2D g,\n                                             String string,\n                                             int underlinedIndex,\n                                             float x,\n                                             float y)", "description": "Draws the given string at the specified location underlining\n the specified character. The provided component is used to query text\n properties and anti-aliasing hints.\n \n The underlinedIndex parameter points to a char value\n (Unicode code unit) in the given string.\n If the char value specified at the underlined index is in\n the high-surrogate range and the char value at the following index is in\n the low-surrogate range then the supplementary character corresponding\n to this surrogate pair is underlined.\n \n No character is underlined if the index is negative or greater\n than the string length (index < 0 || index >= string.length())\n or if the char value specified at the given index\n is in the low-surrogate range."}, {"method_name": "getClippedString", "method_sig": "public static String getClippedString (JComponent c,\n                                      FontMetrics fm,\n                                      String string,\n                                      int availTextWidth)", "description": "Clips the passed in string to the space provided.\n The provided component is used to query text properties and anti-aliasing hints.\n The unchanged string is returned if the space provided is greater than\n the string width."}, {"method_name": "getStringWidth", "method_sig": "public static float getStringWidth (JComponent c,\n                                   FontMetrics fm,\n                                   String string)", "description": "Returns the width of the passed in string using text properties\n and anti-aliasing hints from the provided component.\n If the passed string is null, returns zero."}]}