{"name": "Interface AnnotatedType", "module": "java.base", "package": "java.lang.reflect", "text": "AnnotatedType represents the potentially annotated use of a type in\n the program currently running in this VM. The use may be of any type in the\n Java programming language, including an array type, a parameterized type, a\n type variable, or a wildcard type.", "codes": ["public interface AnnotatedType\nextends AnnotatedElement"], "fields": [], "methods": [{"method_name": "getAnnotatedOwnerType", "method_sig": "default AnnotatedType getAnnotatedOwnerType()", "description": "Returns the potentially annotated type that this type is a member of, if\n this type represents a nested type. For example, if this type is\n @TA O<T>.I<S>, return a representation of @TA O<T>.\n\n Returns null if this AnnotatedType represents a\n     top-level type, or a local or anonymous class, or a primitive type, or\n     void.\n\n Returns null if this AnnotatedType is an instance of\n     AnnotatedArrayType, AnnotatedTypeVariable, or\n     AnnotatedWildcardType."}, {"method_name": "getType", "method_sig": "Type getType()", "description": "Returns the underlying type that this annotated type represents."}]}