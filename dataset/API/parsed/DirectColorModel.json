{"name": "Class DirectColorModel", "module": "java.desktop", "package": "java.awt.image", "text": "The DirectColorModel class is a ColorModel\n class that works with pixel values that represent RGB\n color and alpha information as separate samples and that pack all\n samples for a single pixel into a single int, short, or byte quantity.\n This class can be used only with ColorSpaces of type ColorSpace.TYPE_RGB.\n In addition, for each component of the ColorSpace, the minimum\n normalized component value obtained via the getMinValue()\n method of ColorSpace must be 0.0, and the maximum value obtained via\n the getMaxValue() method must be 1.0 (these min/max\n values are typical for RGB spaces).\n There must be three color samples in the pixel values and there can\n be a single alpha sample.  For those methods that use a primitive array\n pixel representation of type transferType, the array\n length is always one.  The transfer\n types supported are DataBuffer.TYPE_BYTE,\n DataBuffer.TYPE_USHORT, and DataBuffer.TYPE_INT.\n Color and alpha samples are stored in the single\n element of the array in bits indicated by bit masks.  Each bit mask\n must be contiguous and masks must not overlap.  The same masks apply to\n the single int pixel representation used by other methods.  The\n correspondence of masks and color/alpha samples is as follows:\n \n Masks are identified by indices running from 0 through 2\n if no alpha is present, or 3 if an alpha is present.\n  The first three indices refer to color samples;\n index 0 corresponds to red, index 1 to green, and index 2 to blue.\n  Index 3 corresponds to the alpha sample, if present.\n \n\n The translation from pixel values to color/alpha components for\n display or processing purposes is a one-to-one correspondence of\n samples to components.  A DirectColorModel is\n typically used with image data which uses masks to define packed\n samples.  For example, a DirectColorModel can be used in\n conjunction with a SinglePixelPackedSampleModel to\n construct a BufferedImage.  Normally the masks used by the\n SampleModel and the ColorModel would be the\n same.  However, if they are different, the color interpretation\n of pixel data will be done according to the masks of the\n ColorModel.\n \n A single int pixel representation is valid for all objects of this\n class, since it is always possible to represent pixel values used with\n this class in a single int.  Therefore, methods which use this\n representation will not throw an IllegalArgumentException\n due to an invalid pixel value.\n \n This color model is similar to an X11 TrueColor visual.\n The default RGB ColorModel specified by the\n getRGBdefault method is a\n DirectColorModel with the following parameters:\n \n Number of bits:        32\n Red mask:              0x00ff0000\n Green mask:            0x0000ff00\n Blue mask:             0x000000ff\n Alpha mask:            0xff000000\n Color space:           sRGB\n isAlphaPremultiplied:  False\n Transparency:          Transparency.TRANSLUCENT\n transferType:          DataBuffer.TYPE_INT\n \n\n Many of the methods in this class are final. This is because the\n underlying native graphics code makes assumptions about the layout\n and operation of this class and those assumptions are reflected in\n the implementations of the methods here that are marked final.  You\n can subclass this class for other reasons, but you cannot override\n or modify the behavior of those methods.", "codes": ["public class DirectColorModel\nextends PackedColorModel"], "fields": [], "methods": [{"method_name": "getRedMask", "method_sig": "public final int getRedMask()", "description": "Returns the mask indicating which bits in an int pixel\n representation contain the red color component."}, {"method_name": "getGreenMask", "method_sig": "public final int getGreenMask()", "description": "Returns the mask indicating which bits in an int pixel\n representation contain the green color component."}, {"method_name": "getBlueMask", "method_sig": "public final int getBlueMask()", "description": "Returns the mask indicating which bits in an int pixel\n representation contain the blue color component."}, {"method_name": "getAlphaMask", "method_sig": "public final int getAlphaMask()", "description": "Returns the mask indicating which bits in an int pixel\n representation contain the alpha component."}, {"method_name": "getRed", "method_sig": "public final int getRed (int pixel)", "description": "Returns the red color component for the specified pixel, scaled\n from 0 to 255 in the default RGB ColorSpace, sRGB.  A\n color conversion is done if necessary.  The pixel value is specified\n as an int.\n The returned value is a non pre-multiplied value.  Thus, if the\n alpha is premultiplied, this method divides it out before returning\n the value.  If the alpha value is 0, for example, the red value\n is 0."}, {"method_name": "getGreen", "method_sig": "public final int getGreen (int pixel)", "description": "Returns the green color component for the specified pixel, scaled\n from 0 to 255 in the default RGB ColorSpace, sRGB.  A\n color conversion is done if necessary.  The pixel value is specified\n as an int.\n The returned value is a non pre-multiplied value.  Thus, if the\n alpha is premultiplied, this method divides it out before returning\n the value.  If the alpha value is 0, for example, the green value\n is 0."}, {"method_name": "getBlue", "method_sig": "public final int getBlue (int pixel)", "description": "Returns the blue color component for the specified pixel, scaled\n from 0 to 255 in the default RGB ColorSpace, sRGB.  A\n color conversion is done if necessary.  The pixel value is specified\n as an int.\n The returned value is a non pre-multiplied value.  Thus, if the\n alpha is premultiplied, this method divides it out before returning\n the value.  If the alpha value is 0, for example, the blue value\n is 0."}, {"method_name": "getAlpha", "method_sig": "public final int getAlpha (int pixel)", "description": "Returns the alpha component for the specified pixel, scaled\n from 0 to 255.  The pixel value is specified as an int."}, {"method_name": "getRGB", "method_sig": "public final int getRGB (int pixel)", "description": "Returns the color/alpha components of the pixel in the default\n RGB color model format.  A color conversion is done if necessary.\n The pixel value is specified as an int.\n The returned value is in a non pre-multiplied format.  Thus, if\n the alpha is premultiplied, this method divides it out of the\n color components.  If the alpha value is 0, for example, the color\n values are each 0."}, {"method_name": "getRed", "method_sig": "public int getRed (Object inData)", "description": "Returns the red color component for the specified pixel, scaled\n from 0 to 255 in the default RGB ColorSpace, sRGB.  A\n color conversion is done if necessary.  The pixel value is specified\n by an array of data elements of type transferType passed\n in as an object reference.\n The returned value is a non pre-multiplied value.  Thus, if the\n alpha is premultiplied, this method divides it out before returning\n the value.  If the alpha value is 0, for example, the red value\n is 0.\n If inData is not a primitive array of type\n transferType, a ClassCastException is\n thrown.  An ArrayIndexOutOfBoundsException is\n thrown if inData is not large enough to hold a\n pixel value for this ColorModel.  Since\n DirectColorModel can be subclassed, subclasses inherit\n the implementation of this method and if they don't override it\n then they throw an exception if they use an unsupported\n transferType.\n An UnsupportedOperationException is thrown if this\n transferType is not supported by this\n ColorModel."}, {"method_name": "getGreen", "method_sig": "public int getGreen (Object inData)", "description": "Returns the green color component for the specified pixel, scaled\n from 0 to 255 in the default RGB ColorSpace, sRGB.  A\n color conversion is done if necessary.  The pixel value is specified\n by an array of data elements of type transferType passed\n in as an object reference.\n The returned value is a non pre-multiplied value.  Thus, if the\n alpha is premultiplied, this method divides it out before returning\n the value.  If the alpha value is 0, for example, the green value\n is 0.  If inData is not a primitive array of type\n transferType, a ClassCastException is thrown.\n  An ArrayIndexOutOfBoundsException is\n thrown if inData is not large enough to hold a pixel\n value for this ColorModel.  Since\n DirectColorModel can be subclassed, subclasses inherit\n the implementation of this method and if they don't override it\n then they throw an exception if they use an unsupported\n transferType.\n An UnsupportedOperationException is\n thrown if this transferType is not supported by this\n ColorModel."}, {"method_name": "getBlue", "method_sig": "public int getBlue (Object inData)", "description": "Returns the blue color component for the specified pixel, scaled\n from 0 to 255 in the default RGB ColorSpace, sRGB.  A\n color conversion is done if necessary.  The pixel value is specified\n by an array of data elements of type transferType passed\n in as an object reference.\n The returned value is a non pre-multiplied value.  Thus, if the\n alpha is premultiplied, this method divides it out before returning\n the value.  If the alpha value is 0, for example, the blue value\n is 0.  If inData is not a primitive array of type\n transferType, a ClassCastException is thrown.\n  An ArrayIndexOutOfBoundsException is\n thrown if inData is not large enough to hold a pixel\n value for this ColorModel.  Since\n DirectColorModel can be subclassed, subclasses inherit\n the implementation of this method and if they don't override it\n then they throw an exception if they use an unsupported\n transferType.\n An UnsupportedOperationException is\n thrown if this transferType is not supported by this\n ColorModel."}, {"method_name": "getAlpha", "method_sig": "public int getAlpha (Object inData)", "description": "Returns the alpha component for the specified pixel, scaled\n from 0 to 255.  The pixel value is specified by an array of data\n elements of type transferType passed in as an object\n reference.\n If inData is not a primitive array of type\n transferType, a ClassCastException is\n thrown.  An ArrayIndexOutOfBoundsException is\n thrown if inData is not large enough to hold a pixel\n value for this ColorModel.  Since\n DirectColorModel can be subclassed, subclasses inherit\n the implementation of this method and if they don't override it\n then they throw an exception if they use an unsupported\n transferType.\n If this transferType is not supported, an\n UnsupportedOperationException is thrown."}, {"method_name": "getRGB", "method_sig": "public int getRGB (Object inData)", "description": "Returns the color/alpha components for the specified pixel in the\n default RGB color model format.  A color conversion is done if\n necessary.  The pixel value is specified by an array of data\n elements of type transferType passed in as an object\n reference.  If inData is not a primitive array of type\n transferType, a ClassCastException is\n thrown.  An ArrayIndexOutOfBoundsException is\n thrown if inData is not large enough to hold a pixel\n value for this ColorModel.\n The returned value is in a non pre-multiplied format.  Thus, if\n the alpha is premultiplied, this method divides it out of the\n color components.  If the alpha value is 0, for example, the color\n values is 0.  Since DirectColorModel can be\n subclassed, subclasses inherit the implementation of this method\n and if they don't override it then\n they throw an exception if they use an unsupported\n transferType."}, {"method_name": "getDataElements", "method_sig": "public Object getDataElements (int rgb,\n                              Object pixel)", "description": "Returns a data element array representation of a pixel in this\n ColorModel, given an integer pixel representation in the\n default RGB color model.\n This array can then be passed to the setDataElements\n method of a WritableRaster object.  If the pixel variable\n is null, a new array is allocated.  If pixel\n is not null, it must be a primitive array of type\n transferType; otherwise, a\n ClassCastException is thrown.  An\n ArrayIndexOutOfBoundsException is\n thrown if pixel is not large enough to hold a pixel\n value for this ColorModel.  The pixel array is returned.\n Since DirectColorModel can be subclassed, subclasses\n inherit the implementation of this method and if they don't\n override it then they throw an exception if they use an unsupported\n transferType."}, {"method_name": "getComponents", "method_sig": "public final int[] getComponents (int pixel,\n                                 int[] components,\n                                 int offset)", "description": "Returns an array of unnormalized color/alpha components given a pixel\n in this ColorModel.  The pixel value is specified as an\n int.  If the components array is\n null, a new array is allocated.  The\n components array is returned.  Color/alpha components are\n stored in the components array starting at\n offset, even if the array is allocated by this method.\n An ArrayIndexOutOfBoundsException is thrown if the\n components array is not null and is not large\n enough to hold all the color and alpha components, starting at\n offset."}, {"method_name": "getComponents", "method_sig": "public final int[] getComponents (Object pixel,\n                                 int[] components,\n                                 int offset)", "description": "Returns an array of unnormalized color/alpha components given a pixel\n in this ColorModel.  The pixel value is specified by an\n array of data elements of type transferType passed in as\n an object reference.  If pixel is not a primitive array\n of type transferType, a ClassCastException\n is thrown.  An ArrayIndexOutOfBoundsException is\n thrown if pixel is not large enough to hold a\n pixel value for this ColorModel.  If the\n components array is null, a new\n array is allocated.  The components array is returned.\n Color/alpha components are stored in the components array\n starting at offset, even if the array is allocated by\n this method.  An ArrayIndexOutOfBoundsException\n is thrown if the components array is not\n null and is not large enough to hold all the color and\n alpha components, starting at offset.\n Since DirectColorModel can be subclassed, subclasses\n inherit the implementation of this method and if they don't\n override it then they throw an exception if they use an unsupported\n transferType."}, {"method_name": "createCompatibleWritableRaster", "method_sig": "public final WritableRaster createCompatibleWritableRaster (int w,\n                                                           int h)", "description": "Creates a WritableRaster with the specified width and\n height that has a data layout (SampleModel) compatible\n with this ColorModel."}, {"method_name": "getDataElement", "method_sig": "public int getDataElement (int[] components,\n                          int offset)", "description": "Returns a pixel value represented as an int in this\n ColorModel, given an array of unnormalized color/alpha\n components.   An ArrayIndexOutOfBoundsException is\n thrown if the components array is\n not large enough to hold all the color and alpha components, starting\n at offset."}, {"method_name": "getDataElements", "method_sig": "public Object getDataElements (int[] components,\n                              int offset,\n                              Object obj)", "description": "Returns a data element array representation of a pixel in this\n ColorModel, given an array of unnormalized color/alpha\n components.\n This array can then be passed to the setDataElements\n method of a WritableRaster object.\n An ArrayIndexOutOfBoundsException is thrown if the\n components array\n is not large enough to hold all the color and alpha components,\n starting at offset.  If the obj variable is\n null, a new array is allocated.  If obj is\n not null, it must be a primitive array\n of type transferType; otherwise, a\n ClassCastException is thrown.\n An ArrayIndexOutOfBoundsException is thrown if\n obj is not large enough to hold a pixel value for this\n ColorModel.\n Since DirectColorModel can be subclassed, subclasses\n inherit the implementation of this method and if they don't\n override it then they throw an exception if they use an unsupported\n transferType."}, {"method_name": "coerceData", "method_sig": "public final ColorModel coerceData (WritableRaster raster,\n                                   boolean isAlphaPremultiplied)", "description": "Forces the raster data to match the state specified in the\n isAlphaPremultiplied variable, assuming the data is\n currently correctly described by this ColorModel.  It\n may multiply or divide the color raster data by alpha, or do\n nothing if the data is in the correct state.  If the data needs to\n be coerced, this method will also return an instance of this\n ColorModel with the isAlphaPremultiplied\n flag set appropriately.  This method will throw a\n UnsupportedOperationException if this transferType is\n not supported by this ColorModel.  Since\n ColorModel can be subclassed, subclasses inherit the\n implementation of this method and if they don't override it then\n they throw an exception if they use an unsupported transferType."}, {"method_name": "isCompatibleRaster", "method_sig": "public boolean isCompatibleRaster (Raster raster)", "description": "Returns true if raster is compatible\n with this ColorModel and false if it is\n not."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a String that represents this\n DirectColorModel."}]}