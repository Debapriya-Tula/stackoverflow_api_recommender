{"name": "Class DefaultTreeSelectionModel", "module": "java.desktop", "package": "javax.swing.tree", "text": "Default implementation of TreeSelectionModel.  Listeners are notified\n whenever\n the paths in the selection change, not the rows. In order\n to be able to track row changes you may wish to become a listener\n for expansion events on the tree and test for changes from there.\n resetRowSelection is called from any of the methods that update\n the selected paths. If you subclass any of these methods to\n filter what is allowed to be selected, be sure and message\n resetRowSelection if you do not message super.\n\n Warning:\n Serialized objects of this class will not be compatible with\n future Swing releases. The current serialization support is\n appropriate for short term storage or RMI between applications running\n the same version of Swing.  As of 1.4, support for long term storage\n of all JavaBeans\u2122\n has been added to the java.beans package.\n Please see XMLEncoder.", "codes": ["public class DefaultTreeSelectionModel\nextends Object\nimplements Cloneable, Serializable, TreeSelectionModel"], "fields": [{"field_name": "SELECTION_MODE_PROPERTY", "field_sig": "public static final\u00a0String SELECTION_MODE_PROPERTY", "description": "Property name for selectionMode."}, {"field_name": "changeSupport", "field_sig": "protected\u00a0SwingPropertyChangeSupport changeSupport", "description": "Used to messaged registered listeners."}, {"field_name": "selection", "field_sig": "protected\u00a0TreePath[] selection", "description": "Paths that are currently selected.  Will be null if nothing is\n currently selected."}, {"field_name": "listenerList", "field_sig": "protected\u00a0EventListenerList listenerList", "description": "Event listener list."}, {"field_name": "rowMapper", "field_sig": "protected transient\u00a0RowMapper rowMapper", "description": "Provides a row for a given path."}, {"field_name": "listSelectionModel", "field_sig": "protected\u00a0DefaultListSelectionModel listSelectionModel", "description": "Handles maintaining the list selection model. The RowMapper is used\n to map from a TreePath to a row, and the value is then placed here."}, {"field_name": "selectionMode", "field_sig": "protected\u00a0int selectionMode", "description": "Mode for the selection, will be either SINGLE_TREE_SELECTION,\n CONTIGUOUS_TREE_SELECTION or DISCONTIGUOUS_TREE_SELECTION."}, {"field_name": "leadPath", "field_sig": "protected\u00a0TreePath leadPath", "description": "Last path that was added."}, {"field_name": "leadIndex", "field_sig": "protected\u00a0int leadIndex", "description": "Index of the lead path in selection."}, {"field_name": "leadRow", "field_sig": "protected\u00a0int leadRow", "description": "Lead row."}], "methods": [{"method_name": "setRowMapper", "method_sig": "public void setRowMapper (RowMapper newMapper)", "description": "Sets the RowMapper instance. This instance is used to determine\n the row for a particular TreePath."}, {"method_name": "getRowMapper", "method_sig": "public RowMapper getRowMapper()", "description": "Returns the RowMapper instance that is able to map a TreePath to a\n row."}, {"method_name": "setSelectionMode", "method_sig": "public void setSelectionMode (int mode)", "description": "Sets the selection model, which must be one of SINGLE_TREE_SELECTION,\n CONTIGUOUS_TREE_SELECTION or DISCONTIGUOUS_TREE_SELECTION. If mode\n is not one of the defined value,\n DISCONTIGUOUS_TREE_SELECTION is assumed.\n This may change the selection if the current selection is not valid\n for the new mode. For example, if three TreePaths are\n selected when the mode is changed to SINGLE_TREE_SELECTION,\n only one TreePath will remain selected. It is up to the particular\n implementation to decide what TreePath remains selected.\n \n Setting the mode to something other than the defined types will\n result in the mode becoming DISCONTIGUOUS_TREE_SELECTION."}, {"method_name": "getSelectionMode", "method_sig": "public int getSelectionMode()", "description": "Returns the selection mode, one of SINGLE_TREE_SELECTION,\n DISCONTIGUOUS_TREE_SELECTION or\n CONTIGUOUS_TREE_SELECTION."}, {"method_name": "setSelectionPath", "method_sig": "public void setSelectionPath (TreePath path)", "description": "Sets the selection to path. If this represents a change, then\n the TreeSelectionListeners are notified. If path is\n null, this has the same effect as invoking clearSelection."}, {"method_name": "setSelectionPaths", "method_sig": "public void setSelectionPaths (TreePath[] pPaths)", "description": "Sets the selection. Whether the supplied paths are taken as the\n new selection depends upon the selection mode. If the supplied\n array is null, or empty, the selection is cleared. If\n the selection mode is SINGLE_TREE_SELECTION, only the\n first path in pPaths is used. If the selection\n mode is CONTIGUOUS_TREE_SELECTION and the supplied paths\n are not contiguous, then only the first path in pPaths is\n used. If the selection mode is\n DISCONTIGUOUS_TREE_SELECTION, then all paths are used.\n \n All null paths in pPaths are ignored.\n \n If this represents a change, all registered \n TreeSelectionListeners are notified.\n \n The lead path is set to the last unique path.\n \n The paths returned from getSelectionPaths are in the same\n order as those supplied to this method."}, {"method_name": "addSelectionPath", "method_sig": "public void addSelectionPath (TreePath path)", "description": "Adds path to the current selection. If path is not currently\n in the selection the TreeSelectionListeners are notified. This has\n no effect if path is null."}, {"method_name": "addSelectionPaths", "method_sig": "public void addSelectionPaths (TreePath[] paths)", "description": "Adds paths to the current selection. If any of the paths in\n paths are not currently in the selection the TreeSelectionListeners\n are notified. This has\n no effect if paths is null.\n The lead path is set to the last element in paths.\n If the selection mode is CONTIGUOUS_TREE_SELECTION,\n and adding the new paths would make the selection discontiguous.\n Then two things can result: if the TreePaths in paths\n are contiguous, then the selection becomes these TreePaths,\n otherwise the TreePaths aren't contiguous and the selection becomes\n the first TreePath in paths."}, {"method_name": "removeSelectionPath", "method_sig": "public void removeSelectionPath (TreePath path)", "description": "Removes path from the selection. If path is in the selection\n The TreeSelectionListeners are notified. This has no effect if\n path is null."}, {"method_name": "removeSelectionPaths", "method_sig": "public void removeSelectionPaths (TreePath[] paths)", "description": "Removes paths from the selection.  If any of the paths in paths\n are in the selection the TreeSelectionListeners are notified.\n This has no effect if paths is null."}, {"method_name": "getSelectionPath", "method_sig": "public TreePath getSelectionPath()", "description": "Returns the first path in the selection. This is useful if there\n if only one item currently selected."}, {"method_name": "getSelectionPaths", "method_sig": "public TreePath[] getSelectionPaths()", "description": "Returns the selection."}, {"method_name": "getSelectionCount", "method_sig": "public int getSelectionCount()", "description": "Returns the number of paths that are selected."}, {"method_name": "isPathSelected", "method_sig": "public boolean isPathSelected (TreePath path)", "description": "Returns true if the path, path,\n is in the current selection."}, {"method_name": "isSelectionEmpty", "method_sig": "public boolean isSelectionEmpty()", "description": "Returns true if the selection is currently empty."}, {"method_name": "clearSelection", "method_sig": "public void clearSelection()", "description": "Empties the current selection.  If this represents a change in the\n current selection, the selection listeners are notified."}, {"method_name": "addTreeSelectionListener", "method_sig": "public void addTreeSelectionListener (TreeSelectionListener x)", "description": "Adds x to the list of listeners that are notified each time the\n set of selected TreePaths changes."}, {"method_name": "removeTreeSelectionListener", "method_sig": "public void removeTreeSelectionListener (TreeSelectionListener x)", "description": "Removes x from the list of listeners that are notified each time\n the set of selected TreePaths changes."}, {"method_name": "getTreeSelectionListeners", "method_sig": "public TreeSelectionListener[] getTreeSelectionListeners()", "description": "Returns an array of all the tree selection listeners\n registered on this model."}, {"method_name": "fireValueChanged", "method_sig": "protected void fireValueChanged (TreeSelectionEvent e)", "description": "Notifies all listeners that are registered for\n tree selection events on this object."}, {"method_name": "getListeners", "method_sig": "public <T extends EventListener> T[] getListeners (Class<T> listenerType)", "description": "Returns an array of all the objects currently registered\n as FooListeners\n upon this model.\n FooListeners are registered using the\n addFooListener method.\n\n \n\n You can specify the listenerType argument\n with a class literal,\n such as\n FooListener.class.\n For example, you can query a\n DefaultTreeSelectionModel m\n for its tree selection listeners with the following code:\n\n TreeSelectionListener[] tsls = (TreeSelectionListener[])(m.getListeners(TreeSelectionListener.class));\n\n If no such listeners exist, this method returns an empty array."}, {"method_name": "getSelectionRows", "method_sig": "public int[] getSelectionRows()", "description": "Returns the selection in terms of rows. There is not\n necessarily a one-to-one mapping between the TreePaths\n returned from getSelectionPaths and this method. In\n particular, if a TreePath is not viewable (the \n RowMapper returns -1 for the row corresponding to the\n TreePath), then the corresponding row is not included\n in the returned array. For example, if the selection consists\n of two paths, A and B, with A at row\n 10, and B not currently viewable, then this method\n returns an array with the single entry 10."}, {"method_name": "getMinSelectionRow", "method_sig": "public int getMinSelectionRow()", "description": "Returns the smallest value obtained from the RowMapper for the\n current set of selected TreePaths. If nothing is selected,\n or there is no RowMapper, this will return -1."}, {"method_name": "getMaxSelectionRow", "method_sig": "public int getMaxSelectionRow()", "description": "Returns the largest value obtained from the RowMapper for the\n current set of selected TreePaths. If nothing is selected,\n or there is no RowMapper, this will return -1."}, {"method_name": "isRowSelected", "method_sig": "public boolean isRowSelected (int row)", "description": "Returns true if the row identified by row is selected."}, {"method_name": "resetRowSelection", "method_sig": "public void resetRowSelection()", "description": "Updates this object's mapping from TreePath to rows. This should\n be invoked when the mapping from TreePaths to integers has changed\n (for example, a node has been expanded).\n You do not normally have to call this, JTree and its associated\n Listeners will invoke this for you. If you are implementing your own\n View class, then you will have to invoke this.\n This will invoke insureRowContinuity to make sure\n the currently selected TreePaths are still valid based on the\n selection mode."}, {"method_name": "getLeadSelectionRow", "method_sig": "public int getLeadSelectionRow()", "description": "Returns the lead selection index. That is the last index that was\n added."}, {"method_name": "getLeadSelectionPath", "method_sig": "public TreePath getLeadSelectionPath()", "description": "Returns the last path that was added. This may differ from the\n leadSelectionPath property maintained by the JTree."}, {"method_name": "addPropertyChangeListener", "method_sig": "public void addPropertyChangeListener (PropertyChangeListener listener)", "description": "Adds a PropertyChangeListener to the listener list.\n The listener is registered for all properties.\n \n A PropertyChangeEvent will get fired when the selection mode\n changes."}, {"method_name": "removePropertyChangeListener", "method_sig": "public void removePropertyChangeListener (PropertyChangeListener listener)", "description": "Removes a PropertyChangeListener from the listener list.\n This removes a PropertyChangeListener that was registered\n for all properties."}, {"method_name": "getPropertyChangeListeners", "method_sig": "public PropertyChangeListener[] getPropertyChangeListeners()", "description": "Returns an array of all the property change listeners\n registered on this DefaultTreeSelectionModel."}, {"method_name": "insureRowContinuity", "method_sig": "protected void insureRowContinuity()", "description": "Makes sure the currently selected TreePaths are valid\n for the current selection mode.\n If the selection mode is CONTIGUOUS_TREE_SELECTION\n and a RowMapper exists, this will make sure all\n the rows are contiguous, that is, when sorted all the rows are\n in order with no gaps.\n If the selection isn't contiguous, the selection is\n reset to contain the first set, when sorted, of contiguous rows.\n \n If the selection mode is SINGLE_TREE_SELECTION and\n more than one TreePath is selected, the selection is reset to\n contain the first path currently selected."}, {"method_name": "arePathsContiguous", "method_sig": "protected boolean arePathsContiguous (TreePath[] paths)", "description": "Returns true if the paths are contiguous,\n or this object has no RowMapper."}, {"method_name": "canPathsBeAdded", "method_sig": "protected boolean canPathsBeAdded (TreePath[] paths)", "description": "Used to test if a particular set of TreePaths can\n be added. This will return true if paths is null (or\n empty), or this object has no RowMapper, or nothing is currently selected,\n or the selection mode is DISCONTIGUOUS_TREE_SELECTION, or\n adding the paths to the current selection still results in a\n contiguous set of TreePaths."}, {"method_name": "canPathsBeRemoved", "method_sig": "protected boolean canPathsBeRemoved (TreePath[] paths)", "description": "Returns true if the paths can be removed without breaking the\n continuity of the model.\n This is rather expensive."}, {"method_name": "notifyPathChange", "method_sig": "@Deprecated\nprotected void notifyPathChange (Vector<?> changedPaths,\n                                TreePath oldLeadSelection)", "description": "Notifies listeners of a change in path. changePaths should contain\n instances of PathPlaceHolder."}, {"method_name": "updateLeadIndex", "method_sig": "protected void updateLeadIndex()", "description": "Updates the leadIndex instance variable."}, {"method_name": "insureUniqueness", "method_sig": "protected void insureUniqueness()", "description": "This method is obsolete and its implementation is now a noop.  It's\n still called by setSelectionPaths and addSelectionPaths, but only\n for backwards compatibility."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a string that displays and identifies this\n object's properties."}, {"method_name": "clone", "method_sig": "public Object clone()\n             throws CloneNotSupportedException", "description": "Returns a clone of this object with the same selection.\n This method does not duplicate\n selection listeners and property listeners."}]}