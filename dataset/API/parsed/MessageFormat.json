{"name": "Class MessageFormat", "module": "java.base", "package": "java.text", "text": "MessageFormat provides a means to produce concatenated\n messages in a language-neutral way. Use this to construct messages\n displayed for end users.\n\n \nMessageFormat takes a set of objects, formats them, then\n inserts the formatted strings into the pattern at the appropriate places.\n\n \nNote:\nMessageFormat differs from the other Format\n classes in that you create a MessageFormat object with one\n of its constructors (not with a getInstance style factory\n method). The factory methods aren't necessary because MessageFormat\n itself doesn't implement locale specific behavior. Any locale specific\n behavior is defined by the pattern that you provide as well as the\n subformats used for inserted arguments.\n\n Patterns and Their Interpretation\nMessageFormat uses patterns of the following form:\n \n MessageFormatPattern:\n         String\n         MessageFormatPattern FormatElement String\n\n FormatElement:\n         { ArgumentIndex }\n         { ArgumentIndex , FormatType }\n         { ArgumentIndex , FormatType , FormatStyle }\n\n FormatType: one of \n         number date time choice\n\n FormatStyle:\n         short\n         medium\n         long\n         full\n         integer\n         currency\n         percent\n         SubformatPattern\n \nWithin a String, a pair of single quotes can be used to\n quote any arbitrary characters except single quotes. For example,\n pattern string \"'{0}'\" represents string\n \"{0}\", not a FormatElement. A single quote itself\n must be represented by doubled single quotes '' throughout a\n String.  For example, pattern string \"'{''}'\" is\n interpreted as a sequence of '{ (start of quoting and a\n left curly brace), '' (a single quote), and\n }' (a right curly brace and end of quoting),\n not '{' and '}' (quoted left and\n right curly braces): representing string \"{'}\",\n not \"{}\".\n\n A SubformatPattern is interpreted by its corresponding\n subformat, and subformat-dependent pattern rules apply. For example,\n pattern string \"{1,number,$'#',##}\"\n (SubformatPattern with underline) will produce a number format\n with the pound-sign quoted, with a result such as: \n \"$#31,45\". Refer to each Format subclass documentation for\n details.\n\n Any unmatched quote is treated as closed at the end of the given\n pattern. For example, pattern string \"'{0}\" is treated as\n pattern \"'{0}'\".\n\n Any curly braces within an unquoted pattern must be balanced. For\n example, \"ab {0} de\" and \"ab '}' de\" are\n valid patterns, but \"ab {0'}' de\", \"ab } de\"\n and \"''{''\" are not.\n\n Warning:The rules for using quotes within message\n format patterns unfortunately have shown to be somewhat confusing.\n In particular, it isn't always obvious to localizers whether single\n quotes need to be doubled or not. Make sure to inform localizers about\n the rules, and tell them (for example, by using comments in resource\n bundle source files) which strings will be processed by MessageFormat.\n Note that localizers may need to use single quotes in translated\n strings where the original version doesn't have them.\n \n\n The ArgumentIndex value is a non-negative integer written\n using the digits '0' through '9', and represents an index into the\n arguments array passed to the format methods\n or the result array returned by the parse methods.\n \n The FormatType and FormatStyle values are used to create\n a Format instance for the format element. The following\n table shows how the values map to Format instances. Combinations not\n shown in the table are illegal. A SubformatPattern must\n be a valid pattern string for the Format subclass used.\n\n \nShows how FormatType and FormatStyle values map to Format instances\n\n\nFormatType\n       FormatStyle\n       Subformat Created\n \n\n\n(none)\n(none)\nnull\n\nnumber\n(none)\nNumberFormat.getInstance(getLocale())\n\ninteger\nNumberFormat.getIntegerInstance(getLocale())\n\ncurrency\nNumberFormat.getCurrencyInstance(getLocale())\n\npercent\nNumberFormat.getPercentInstance(getLocale())\n\nSubformatPattern\nnew DecimalFormat(subformatPattern, DecimalFormatSymbols.getInstance(getLocale()))\n\ndate\n(none)\nDateFormat.getDateInstance(DateFormat.DEFAULT, getLocale())\n\nshort\nDateFormat.getDateInstance(DateFormat.SHORT, getLocale())\n\nmedium\nDateFormat.getDateInstance(DateFormat.DEFAULT, getLocale())\n\nlong\nDateFormat.getDateInstance(DateFormat.LONG, getLocale())\n\nfull\nDateFormat.getDateInstance(DateFormat.FULL, getLocale())\n\nSubformatPattern\nnew SimpleDateFormat(subformatPattern, getLocale())\n\ntime\n(none)\nDateFormat.getTimeInstance(DateFormat.DEFAULT, getLocale())\n\nshort\nDateFormat.getTimeInstance(DateFormat.SHORT, getLocale())\n\nmedium\nDateFormat.getTimeInstance(DateFormat.DEFAULT, getLocale())\n\nlong\nDateFormat.getTimeInstance(DateFormat.LONG, getLocale())\n\nfull\nDateFormat.getTimeInstance(DateFormat.FULL, getLocale())\n\nSubformatPattern\nnew SimpleDateFormat(subformatPattern, getLocale())\n\nchoice\nSubformatPattern\nnew ChoiceFormat(subformatPattern)\n\n\nUsage Information\n\n Here are some examples of usage.\n In real internationalized programs, the message format pattern and other\n static strings will, of course, be obtained from resource bundles.\n Other parameters will be dynamically determined at runtime.\n \n The first example uses the static method MessageFormat.format,\n which internally creates a MessageFormat for one-time use:\n \n int planet = 7;\n String event = \"a disturbance in the Force\";\n\n String result = MessageFormat.format(\n     \"At {1,time} on {1,date}, there was {2} on planet {0,number,integer}.\",\n     planet, new Date(), event);\n \n The output is:\n \n At 12:30 PM on Jul 3, 2053, there was a disturbance in the Force on planet 7.\n \n\n The following example creates a MessageFormat instance that\n can be used repeatedly:\n \n int fileCount = 1273;\n String diskName = \"MyDisk\";\n Object[] testArgs = {new Long(fileCount), diskName};\n\n MessageFormat form = new MessageFormat(\n     \"The disk \\\"{1}\\\" contains {0} file(s).\");\n\n System.out.println(form.format(testArgs));\n \n The output with different values for fileCount:\n \n The disk \"MyDisk\" contains 0 file(s).\n The disk \"MyDisk\" contains 1 file(s).\n The disk \"MyDisk\" contains 1,273 file(s).\n \n\n For more sophisticated patterns, you can use a ChoiceFormat\n to produce correct forms for singular and plural:\n \n MessageFormat form = new MessageFormat(\"The disk \\\"{1}\\\" contains {0}.\");\n double[] filelimits = {0,1,2};\n String[] filepart = {\"no files\",\"one file\",\"{0,number} files\"};\n ChoiceFormat fileform = new ChoiceFormat(filelimits, filepart);\n form.setFormatByArgumentIndex(0, fileform);\n\n int fileCount = 1273;\n String diskName = \"MyDisk\";\n Object[] testArgs = {new Long(fileCount), diskName};\n\n System.out.println(form.format(testArgs));\n \n The output with different values for fileCount:\n \n The disk \"MyDisk\" contains no files.\n The disk \"MyDisk\" contains one file.\n The disk \"MyDisk\" contains 1,273 files.\n \n\n You can create the ChoiceFormat programmatically, as in the\n above example, or by using a pattern. See ChoiceFormat\n for more information.\n \n form.applyPattern(\n    \"There {0,choice,0#are no files|1#is one file|1<are {0,number,integer} files}.\");\n \n\nNote: As we see above, the string produced\n by a ChoiceFormat in MessageFormat is treated as special;\n occurrences of '{' are used to indicate subformats, and cause recursion.\n If you create both a MessageFormat and ChoiceFormat\n programmatically (instead of using the string patterns), then be careful not to\n produce a format that recurses on itself, which will cause an infinite loop.\n \n When a single argument is parsed more than once in the string, the last match\n will be the final result of the parsing.  For example,\n \n MessageFormat mf = new MessageFormat(\"{0,number,#.##}, {0,number,#.#}\");\n Object[] objs = {new Double(3.1415)};\n String result = mf.format( objs );\n // result now equals \"3.14, 3.1\"\n objs = null;\n objs = mf.parse(result, new ParsePosition(0));\n // objs now equals {new Double(3.1)}\n \n\n Likewise, parsing with a MessageFormat object using patterns containing\n multiple occurrences of the same argument would return the last match.  For\n example,\n \n MessageFormat mf = new MessageFormat(\"{0}, {0}, {0}\");\n String forParsing = \"x, y, z\";\n Object[] objs = mf.parse(forParsing, new ParsePosition(0));\n // result now equals {new String(\"z\")}\n \nSynchronization\n\n Message formats are not synchronized.\n It is recommended to create separate format instances for each thread.\n If multiple threads access a format concurrently, it must be synchronized\n externally.", "codes": ["public class MessageFormat\nextends Format"], "fields": [], "methods": [{"method_name": "setLocale", "method_sig": "public void setLocale (Locale locale)", "description": "Sets the locale to be used when creating or comparing subformats.\n This affects subsequent calls\n \nto the applyPattern\n     and toPattern methods if format elements specify\n     a format type and therefore have the subformats created in the\n     applyPattern method, as well as\n to the format and\n     formatToCharacterIterator methods\n     if format elements do not specify a format type and therefore have\n     the subformats created in the formatting methods.\n \n Subformats that have already been created are not affected."}, {"method_name": "getLocale", "method_sig": "public Locale getLocale()", "description": "Gets the locale that's used when creating or comparing subformats."}, {"method_name": "applyPattern", "method_sig": "public void applyPattern (String pattern)", "description": "Sets the pattern used by this message format.\n The method parses the pattern and creates a list of subformats\n for the format elements contained in it.\n Patterns and their interpretation are specified in the\n class description."}, {"method_name": "toPattern", "method_sig": "public String toPattern()", "description": "Returns a pattern representing the current state of the message format.\n The string is constructed from internal information and therefore\n does not necessarily equal the previously applied pattern."}, {"method_name": "setFormatsByArgumentIndex", "method_sig": "public void setFormatsByArgumentIndex (Format[] newFormats)", "description": "Sets the formats to use for the values passed into\n format methods or returned from parse\n methods. The indices of elements in newFormats\n correspond to the argument indices used in the previously set\n pattern string.\n The order of formats in newFormats thus corresponds to\n the order of elements in the arguments array passed\n to the format methods or the result array returned\n by the parse methods.\n \n If an argument index is used for more than one format element\n in the pattern string, then the corresponding new format is used\n for all such format elements. If an argument index is not used\n for any format element in the pattern string, then the\n corresponding new format is ignored. If fewer formats are provided\n than needed, then only the formats for argument indices less\n than newFormats.length are replaced."}, {"method_name": "setFormats", "method_sig": "public void setFormats (Format[] newFormats)", "description": "Sets the formats to use for the format elements in the\n previously set pattern string.\n The order of formats in newFormats corresponds to\n the order of format elements in the pattern string.\n \n If more formats are provided than needed by the pattern string,\n the remaining ones are ignored. If fewer formats are provided\n than needed, then only the first newFormats.length\n formats are replaced.\n \n Since the order of format elements in a pattern string often\n changes during localization, it is generally better to use the\n setFormatsByArgumentIndex\n method, which assumes an order of formats corresponding to the\n order of elements in the arguments array passed to\n the format methods or the result array returned by\n the parse methods."}, {"method_name": "setFormatByArgumentIndex", "method_sig": "public void setFormatByArgumentIndex (int argumentIndex,\n                                     Format newFormat)", "description": "Sets the format to use for the format elements within the\n previously set pattern string that use the given argument\n index.\n The argument index is part of the format element definition and\n represents an index into the arguments array passed\n to the format methods or the result array returned\n by the parse methods.\n \n If the argument index is used for more than one format element\n in the pattern string, then the new format is used for all such\n format elements. If the argument index is not used for any format\n element in the pattern string, then the new format is ignored."}, {"method_name": "setFormat", "method_sig": "public void setFormat (int formatElementIndex,\n                      Format newFormat)", "description": "Sets the format to use for the format element with the given\n format element index within the previously set pattern string.\n The format element index is the zero-based number of the format\n element counting from the start of the pattern string.\n \n Since the order of format elements in a pattern string often\n changes during localization, it is generally better to use the\n setFormatByArgumentIndex\n method, which accesses format elements based on the argument\n index they specify."}, {"method_name": "getFormatsByArgumentIndex", "method_sig": "public Format[] getFormatsByArgumentIndex()", "description": "Gets the formats used for the values passed into\n format methods or returned from parse\n methods. The indices of elements in the returned array\n correspond to the argument indices used in the previously set\n pattern string.\n The order of formats in the returned array thus corresponds to\n the order of elements in the arguments array passed\n to the format methods or the result array returned\n by the parse methods.\n \n If an argument index is used for more than one format element\n in the pattern string, then the format used for the last such\n format element is returned in the array. If an argument index\n is not used for any format element in the pattern string, then\n null is returned in the array."}, {"method_name": "getFormats", "method_sig": "public Format[] getFormats()", "description": "Gets the formats used for the format elements in the\n previously set pattern string.\n The order of formats in the returned array corresponds to\n the order of format elements in the pattern string.\n \n Since the order of format elements in a pattern string often\n changes during localization, it's generally better to use the\n getFormatsByArgumentIndex\n method, which assumes an order of formats corresponding to the\n order of elements in the arguments array passed to\n the format methods or the result array returned by\n the parse methods."}, {"method_name": "format", "method_sig": "public final StringBuffer format (Object[] arguments,\n                                 StringBuffer result,\n                                 FieldPosition pos)", "description": "Formats an array of objects and appends the MessageFormat's\n pattern, with format elements replaced by the formatted objects, to the\n provided StringBuffer.\n \n The text substituted for the individual format elements is derived from\n the current subformat of the format element and the\n arguments element at the format element's argument index\n as indicated by the first matching line of the following table. An\n argument is unavailable if arguments is\n null or has fewer than argumentIndex+1 elements.\n\n \nExamples of subformat,argument,and formatted text\n\n\nSubformat\n       Argument\n       Formatted Text\n \n\n\nany\nunavailable\n\"{\" + argumentIndex + \"}\"\n\nnull\n\"null\"\n\ninstanceof ChoiceFormat\nany\nsubformat.format(argument).indexOf('{') >= 0 ?\n           (new MessageFormat(subformat.format(argument), getLocale())).format(argument) :\n           subformat.format(argument)\n\n!= null\nany\nsubformat.format(argument)\n\nnull\ninstanceof Number\nNumberFormat.getInstance(getLocale()).format(argument)\n\ninstanceof Date\nDateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, getLocale()).format(argument)\n\ninstanceof String\nargument\n\nany\nargument.toString()\n\n\n\n If pos is non-null, and refers to\n Field.ARGUMENT, the location of the first formatted\n string will be returned."}, {"method_name": "format", "method_sig": "public static String format (String pattern,\n                            Object... arguments)", "description": "Creates a MessageFormat with the given pattern and uses it\n to format the given arguments. This is equivalent to\n \n(new MessageFormat(pattern)).format(arguments, new StringBuffer(), null).toString()\n"}, {"method_name": "format", "method_sig": "public final StringBuffer format (Object arguments,\n                                 StringBuffer result,\n                                 FieldPosition pos)", "description": "Formats an array of objects and appends the MessageFormat's\n pattern, with format elements replaced by the formatted objects, to the\n provided StringBuffer.\n This is equivalent to\n \nformat((Object[]) arguments, result, pos)\n"}, {"method_name": "formatToCharacterIterator", "method_sig": "public AttributedCharacterIterator formatToCharacterIterator (Object arguments)", "description": "Formats an array of objects and inserts them into the\n MessageFormat's pattern, producing an\n AttributedCharacterIterator.\n You can use the returned AttributedCharacterIterator\n to build the resulting String, as well as to determine information\n about the resulting String.\n \n The text of the returned AttributedCharacterIterator is\n the same that would be returned by\n \nformat(arguments, new StringBuffer(), null).toString()\n\n\n In addition, the AttributedCharacterIterator contains at\n least attributes indicating where text was generated from an\n argument in the arguments array. The keys of these attributes are of\n type MessageFormat.Field, their values are\n Integer objects indicating the index in the arguments\n array of the argument from which the text was generated.\n \n The attributes/value from the underlying Format\n instances that MessageFormat uses will also be\n placed in the resulting AttributedCharacterIterator.\n This allows you to not only find where an argument is placed in the\n resulting String, but also which fields it contains in turn."}, {"method_name": "parse", "method_sig": "public Object[] parse (String source,\n                      ParsePosition pos)", "description": "Parses the string.\n\n Caveats: The parse may fail in a number of circumstances.\n For example:\n \nIf one of the arguments does not occur in the pattern.\n If the format of an argument loses information, such as\n     with a choice format where a large number formats to \"many\".\n Does not yet handle recursion (where\n     the substituted strings contain {n} references.)\n Will not always find a match (or the correct match)\n     if some part of the parse is ambiguous.\n     For example, if the pattern \"{1},{2}\" is used with the\n     string arguments {\"a,b\", \"c\"}, it will format as \"a,b,c\".\n     When the result is parsed, it will return {\"a\", \"b,c\"}.\n If a single argument is parsed more than once in the string,\n     then the later parse wins.\n \n When the parse fails, use ParsePosition.getErrorIndex() to find out\n where in the string the parsing failed.  The returned error\n index is the starting offset of the sub-patterns that the string\n is comparing with.  For example, if the parsing string \"AAA {0} BBB\"\n is comparing against the pattern \"AAD {0} BBB\", the error index is\n 0. When an error occurs, the call to this method will return null.\n If the source is null, return an empty array."}, {"method_name": "parse", "method_sig": "public Object[] parse (String source)\n               throws ParseException", "description": "Parses text from the beginning of the given string to produce an object\n array.\n The method may not use the entire text of the given string.\n \n See the parse(String, ParsePosition) method for more information\n on message parsing."}, {"method_name": "parseObject", "method_sig": "public Object parseObject (String source,\n                          ParsePosition pos)", "description": "Parses text from a string to produce an object array.\n \n The method attempts to parse text starting at the index given by\n pos.\n If parsing succeeds, then the index of pos is updated\n to the index after the last character used (parsing does not necessarily\n use all characters up to the end of the string), and the parsed\n object array is returned. The updated pos can be used to\n indicate the starting point for the next call to this method.\n If an error occurs, then the index of pos is not\n changed, the error index of pos is set to the index of\n the character where the error occurred, and null is returned.\n \n See the parse(String, ParsePosition) method for more information\n on message parsing."}, {"method_name": "clone", "method_sig": "public Object clone()", "description": "Creates and returns a copy of this object."}, {"method_name": "equals", "method_sig": "public boolean equals (Object obj)", "description": "Equality comparison between two message format objects"}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Generates a hash code for the message format object."}]}