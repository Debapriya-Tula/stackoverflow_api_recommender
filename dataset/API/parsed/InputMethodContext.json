{"name": "Interface InputMethodContext", "module": "java.desktop", "package": "java.awt.im.spi", "text": "Provides methods that input methods\n can use to communicate with their client components or to request\n other services.  This interface is implemented by the input method\n framework, and input methods call its methods on the instance they\n receive through\n InputMethod.setInputMethodContext(java.awt.im.spi.InputMethodContext).\n There should be no other implementors or callers.", "codes": ["public interface InputMethodContext\nextends InputMethodRequests"], "fields": [], "methods": [{"method_name": "dispatchInputMethodEvent", "method_sig": "void dispatchInputMethodEvent (int id,\n                              AttributedCharacterIterator text,\n                              int committedCharacterCount,\n                              TextHitInfo caret,\n                              TextHitInfo visiblePosition)", "description": "Creates an input method event from the arguments given\n and dispatches it to the client component. For arguments,\n see InputMethodEvent(java.awt.Component, int, java.awt.font.TextHitInfo, java.awt.font.TextHitInfo)."}, {"method_name": "createInputMethodWindow", "method_sig": "Window createInputMethodWindow (String title,\n                               boolean attachToInputContext)", "description": "Creates a top-level window for use by the input method.\n The intended behavior of this window is:\n \nit floats above all document windows and dialogs\n it and all components that it contains do not receive the focus\n it has lightweight decorations, such as a reduced drag region without title\n \n However, the actual behavior with respect to these three items is platform dependent.\n \n The title may or may not be displayed, depending on the actual type of window created.\n \n If attachToInputContext is true, the new window will share the input context that\n corresponds to this input method context, so that events for components in the window\n are automatically dispatched to the input method.\n Also, when the window is opened using setVisible(true), the input context will prevent\n deactivate and activate calls to the input method that might otherwise be caused.\n \n Input methods must call Window.dispose on the\n returned input method window when it is no longer needed."}, {"method_name": "createInputMethodJFrame", "method_sig": "JFrame createInputMethodJFrame (String title,\n                               boolean attachToInputContext)", "description": "Creates a top-level Swing JFrame for use by the input method.\n The intended behavior of this window is:\n \nit floats above all document windows and dialogs\n it and all components that it contains do not receive the focus\n it has lightweight decorations, such as a reduced drag region without title\n \n However, the actual behavior with respect to these three items is platform dependent.\n \n The title may or may not be displayed, depending on the actual type of window created.\n \n If attachToInputContext is true, the new window will share the input context that\n corresponds to this input method context, so that events for components in the window\n are automatically dispatched to the input method.\n Also, when the window is opened using setVisible(true), the input context will prevent\n deactivate and activate calls to the input method that might otherwise be caused.\n \n Input methods must call Window.dispose on the\n returned input method window when it is no longer needed."}, {"method_name": "enableClientWindowNotification", "method_sig": "void enableClientWindowNotification (InputMethod inputMethod,\n                                    boolean enable)", "description": "Enables or disables notification of the current client window's\n location and state for the specified input method. When\n notification is enabled, the input method's notifyClientWindowChange method is called as described in that\n method's specification. Notification is automatically disabled\n when the input method is disposed."}]}