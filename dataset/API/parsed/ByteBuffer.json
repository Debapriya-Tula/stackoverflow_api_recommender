{"name": "Class ByteBuffer", "module": "java.base", "package": "java.nio", "text": "A byte buffer.\n\n  This class defines six categories of operations upon\n byte buffers:\n\n \n Absolute and relative get and\n   put methods that read and write\n   single bytes; \n Relative bulk get\n   methods that transfer contiguous sequences of bytes from this buffer\n   into an array; \n Relative bulk put\n   methods that transfer contiguous sequences of bytes from a\n   byte array or some other byte\n   buffer into this buffer; \n Absolute and relative get\n   and put methods that read and\n   write values of other primitive types, translating them to and from\n   sequences of bytes in a particular byte order; \n Methods for creating view buffers,\n   which allow a byte buffer to be viewed as a buffer containing values of\n   some other primitive type; and \n A method for compacting\n   a byte buffer.  \n\n Byte buffers can be created either by allocation, which allocates space for the buffer's\n\n\n\n content, or by wrapping an\n existing byte array  into a buffer.\n\n\n\n\n\n\n\n\n\n\n\n \n Direct vs. non-direct buffers \n A byte buffer is either direct or non-direct.  Given a\n direct byte buffer, the Java virtual machine will make a best effort to\n perform native I/O operations directly upon it.  That is, it will attempt to\n avoid copying the buffer's content to (or from) an intermediate buffer\n before (or after) each invocation of one of the underlying operating\n system's native I/O operations.\n\n  A direct byte buffer may be created by invoking the allocateDirect factory method of this class.  The\n buffers returned by this method typically have somewhat higher allocation\n and deallocation costs than non-direct buffers.  The contents of direct\n buffers may reside outside of the normal garbage-collected heap, and so\n their impact upon the memory footprint of an application might not be\n obvious.  It is therefore recommended that direct buffers be allocated\n primarily for large, long-lived buffers that are subject to the underlying\n system's native I/O operations.  In general it is best to allocate direct\n buffers only when they yield a measureable gain in program performance.\n\n  A direct byte buffer may also be created by mapping a region of a file\n directly into memory.  An implementation of the Java platform may optionally\n support the creation of direct byte buffers from native code via JNI.  If an\n instance of one of these kinds of buffers refers to an inaccessible region\n of memory then an attempt to access that region will not change the buffer's\n content and will cause an unspecified exception to be thrown either at the\n time of the access or at some later time.\n\n  Whether a byte buffer is direct or non-direct may be determined by\n invoking its isDirect method.  This method is provided so\n that explicit buffer management can be done in performance-critical code.\n\n\n \n Access to binary data \n This class defines methods for reading and writing values of all other\n primitive types, except boolean.  Primitive values are translated\n to (or from) sequences of bytes according to the buffer's current byte\n order, which may be retrieved and modified via the order\n methods.  Specific byte orders are represented by instances of the ByteOrder class.  The initial order of a byte buffer is always BIG_ENDIAN.\n\n  For access to heterogeneous binary data, that is, sequences of values of\n different types, this class defines a family of absolute and relative\n get and put methods for each type.  For 32-bit floating-point\n values, for example, this class defines:\n\n \n float  getFloat()\n float  getFloat(int index)\n  void  putFloat(float f)\n  void  putFloat(int index, float f)\n Corresponding methods are defined for the types char,\n short, int, long, and double.  The index\n parameters of the absolute get and put methods are in terms of\n bytes rather than of the type being read or written.\n\n \n For access to homogeneous binary data, that is, sequences of values of\n the same type, this class defines methods that can create views of a\n given byte buffer.  A view buffer is simply another buffer whose\n content is backed by the byte buffer.  Changes to the byte buffer's content\n will be visible in the view buffer, and vice versa; the two buffers'\n position, limit, and mark values are independent.  The asFloatBuffer method, for example, creates an instance of\n the FloatBuffer class that is backed by the byte buffer upon which\n the method is invoked.  Corresponding view-creation methods are defined for\n the types char, short, int, long, and double.\n\n  View buffers have three important advantages over the families of\n type-specific get and put methods described above:\n\n \n A view buffer is indexed not in terms of bytes but rather in terms\n   of the type-specific size of its values;  \n A view buffer provides relative bulk get and put\n   methods that can transfer contiguous sequences of values between a buffer\n   and an array or some other buffer of the same type; and  \n A view buffer is potentially much more efficient because it will\n   be direct if, and only if, its backing byte buffer is direct.  \n\n The byte order of a view buffer is fixed to be that of its byte buffer\n at the time that the view is created.  \n Invocation chaining \n Methods in this class that do not otherwise have a value to return are\n specified to return the buffer upon which they are invoked.  This allows\n method invocations to be chained.\n\n\n\n The sequence of statements\n\n \n bb.putInt(0xCAFEBABE);\n bb.putShort(3);\n bb.putShort(45);\n\n can, for example, be replaced by the single statement\n\n \n bb.putInt(0xCAFEBABE).putShort(3).putShort(45);", "codes": ["public abstract class ByteBuffer\nextends Buffer\nimplements Comparable<ByteBuffer>"], "fields": [], "methods": [{"method_name": "allocateDirect", "method_sig": "public static ByteBuffer allocateDirect (int capacity)", "description": "Allocates a new direct byte buffer.\n\n  The new buffer's position will be zero, its limit will be its\n capacity, its mark will be undefined, each of its elements will be\n initialized to zero, and its byte order will be\n BIG_ENDIAN.  Whether or not it has a\n backing array is unspecified."}, {"method_name": "allocate", "method_sig": "public static ByteBuffer allocate (int capacity)", "description": "Allocates a new byte buffer.\n\n  The new buffer's position will be zero, its limit will be its\n capacity, its mark will be undefined, each of its elements will be\n initialized to zero, and its byte order will be\n\n BIG_ENDIAN.\n\n\n\n\n It will have a backing array, and its\n array offset will be zero."}, {"method_name": "wrap", "method_sig": "public static ByteBuffer wrap (byte[] array,\n                              int offset,\n                              int length)", "description": "Wraps a byte array into a buffer.\n\n  The new buffer will be backed by the given byte array;\n that is, modifications to the buffer will cause the array to be modified\n and vice versa.  The new buffer's capacity will be\n array.length, its position will be offset, its limit\n will be offset + length, its mark will be undefined, and its\n byte order will be\n\n BIG_ENDIAN.\n\n\n\n\n Its backing array will be the given array, and\n its array offset will be zero.  "}, {"method_name": "wrap", "method_sig": "public static ByteBuffer wrap (byte[] array)", "description": "Wraps a byte array into a buffer.\n\n  The new buffer will be backed by the given byte array;\n that is, modifications to the buffer will cause the array to be modified\n and vice versa.  The new buffer's capacity and limit will be\n array.length, its position will be zero, its mark will be\n undefined, and its byte order will be\n\n BIG_ENDIAN.\n\n\n\n\n Its backing array will be the given array, and its\n array offset will be zero.  "}, {"method_name": "slice", "method_sig": "public abstract ByteBuffer slice()", "description": "Creates a new byte buffer whose content is a shared subsequence of\n this buffer's content.\n\n  The content of the new buffer will start at this buffer's current\n position.  Changes to this buffer's content will be visible in the new\n buffer, and vice versa; the two buffers' position, limit, and mark\n values will be independent.\n\n  The new buffer's position will be zero, its capacity and its limit\n will be the number of bytes remaining in this buffer, its mark will be\n undefined, and its byte order will be\n\n BIG_ENDIAN.\n\n\n\n The new buffer will be direct if, and only if, this buffer is direct, and\n it will be read-only if, and only if, this buffer is read-only.  "}, {"method_name": "duplicate", "method_sig": "public abstract ByteBuffer duplicate()", "description": "Creates a new byte buffer that shares this buffer's content.\n\n  The content of the new buffer will be that of this buffer.  Changes\n to this buffer's content will be visible in the new buffer, and vice\n versa; the two buffers' position, limit, and mark values will be\n independent.\n\n  The new buffer's capacity, limit, position,\n\n and mark values will be identical to those of this buffer, and its byte\n order will be BIG_ENDIAN.\n\n\n\n The new buffer will be direct if, and only if, this buffer is direct, and\n it will be read-only if, and only if, this buffer is read-only.  "}, {"method_name": "asReadOnlyBuffer", "method_sig": "public abstract ByteBuffer asReadOnlyBuffer()", "description": "Creates a new, read-only byte buffer that shares this buffer's\n content.\n\n  The content of the new buffer will be that of this buffer.  Changes\n to this buffer's content will be visible in the new buffer; the new\n buffer itself, however, will be read-only and will not allow the shared\n content to be modified.  The two buffers' position, limit, and mark\n values will be independent.\n\n  The new buffer's capacity, limit, position,\n\n and mark values will be identical to those of this buffer, and its byte\n order will be BIG_ENDIAN.\n\n\n\n\n  If this buffer is itself read-only then this method behaves in\n exactly the same way as the duplicate method.  "}, {"method_name": "get", "method_sig": "public abstract byte get()", "description": "Relative get method.  Reads the byte at this buffer's\n current position, and then increments the position."}, {"method_name": "put", "method_sig": "public abstract ByteBuffer put (byte b)", "description": "Relative put method\u00a0\u00a0(optional operation).\n\n  Writes the given byte into this buffer at the current\n position, and then increments the position. "}, {"method_name": "get", "method_sig": "public abstract byte get (int index)", "description": "Absolute get method.  Reads the byte at the given\n index."}, {"method_name": "put", "method_sig": "public abstract ByteBuffer put (int index,\n                               byte b)", "description": "Absolute put method\u00a0\u00a0(optional operation).\n\n  Writes the given byte into this buffer at the given\n index. "}, {"method_name": "get", "method_sig": "public ByteBuffer get (byte[] dst,\n                      int offset,\n                      int length)", "description": "Relative bulk get method.\n\n  This method transfers bytes from this buffer into the given\n destination array.  If there are fewer bytes remaining in the\n buffer than are required to satisfy the request, that is, if\n length\u00a0>\u00a0remaining(), then no\n bytes are transferred and a BufferUnderflowException is\n thrown.\n\n  Otherwise, this method copies length bytes from this\n buffer into the given array, starting at the current position of this\n buffer and at the given offset in the array.  The position of this\n buffer is then incremented by length.\n\n  In other words, an invocation of this method of the form\n src.get(dst,\u00a0off,\u00a0len) has exactly the same effect as\n the loop\n\n \n     for (int i = off; i < off + len; i++)\n         dst[i] = src.get();\n \n\n except that it first checks that there are sufficient bytes in\n this buffer and it is potentially much more efficient."}, {"method_name": "get", "method_sig": "public ByteBuffer get (byte[] dst)", "description": "Relative bulk get method.\n\n  This method transfers bytes from this buffer into the given\n destination array.  An invocation of this method of the form\n src.get(a) behaves in exactly the same way as the invocation\n\n \n     src.get(a, 0, a.length) "}, {"method_name": "put", "method_sig": "public ByteBuffer put (ByteBuffer src)", "description": "Relative bulk put method\u00a0\u00a0(optional operation).\n\n  This method transfers the bytes remaining in the given source\n buffer into this buffer.  If there are more bytes remaining in the\n source buffer than in this buffer, that is, if\n src.remaining()\u00a0>\u00a0remaining(),\n then no bytes are transferred and a BufferOverflowException is thrown.\n\n  Otherwise, this method copies\n n\u00a0=\u00a0src.remaining() bytes from the given\n buffer into this buffer, starting at each buffer's current position.\n The positions of both buffers are then incremented by n.\n\n  In other words, an invocation of this method of the form\n dst.put(src) has exactly the same effect as the loop\n\n \n     while (src.hasRemaining())\n         dst.put(src.get()); \n\n except that it first checks that there is sufficient space in this\n buffer and it is potentially much more efficient."}, {"method_name": "put", "method_sig": "public ByteBuffer put (byte[] src,\n                      int offset,\n                      int length)", "description": "Relative bulk put method\u00a0\u00a0(optional operation).\n\n  This method transfers bytes into this buffer from the given\n source array.  If there are more bytes to be copied from the array\n than remain in this buffer, that is, if\n length\u00a0>\u00a0remaining(), then no\n bytes are transferred and a BufferOverflowException is\n thrown.\n\n  Otherwise, this method copies length bytes from the\n given array into this buffer, starting at the given offset in the array\n and at the current position of this buffer.  The position of this buffer\n is then incremented by length.\n\n  In other words, an invocation of this method of the form\n dst.put(src,\u00a0off,\u00a0len) has exactly the same effect as\n the loop\n\n \n     for (int i = off; i < off + len; i++)\n         dst.put(a[i]);\n \n\n except that it first checks that there is sufficient space in this\n buffer and it is potentially much more efficient."}, {"method_name": "put", "method_sig": "public final ByteBuffer put (byte[] src)", "description": "Relative bulk put method\u00a0\u00a0(optional operation).\n\n  This method transfers the entire content of the given source\n byte array into this buffer.  An invocation of this method of the\n form dst.put(a) behaves in exactly the same way as the\n invocation\n\n \n     dst.put(a, 0, a.length) "}, {"method_name": "hasArray", "method_sig": "public final boolean hasArray()", "description": "Tells whether or not this buffer is backed by an accessible byte\n array.\n\n  If this method returns true then the array\n and arrayOffset methods may safely be invoked.\n "}, {"method_name": "array", "method_sig": "public final byte[] array()", "description": "Returns the byte array that backs this\n buffer\u00a0\u00a0(optional operation).\n\n  Modifications to this buffer's content will cause the returned\n array's content to be modified, and vice versa.\n\n  Invoke the hasArray method before invoking this\n method in order to ensure that this buffer has an accessible backing\n array.  "}, {"method_name": "arrayOffset", "method_sig": "public final int arrayOffset()", "description": "Returns the offset within this buffer's backing array of the first\n element of the buffer\u00a0\u00a0(optional operation).\n\n  If this buffer is backed by an array then buffer position p\n corresponds to array index p\u00a0+\u00a0arrayOffset().\n\n  Invoke the hasArray method before invoking this\n method in order to ensure that this buffer has an accessible backing\n array.  "}, {"method_name": "compact", "method_sig": "public abstract ByteBuffer compact()", "description": "Compacts this buffer\u00a0\u00a0(optional operation).\n\n  The bytes between the buffer's current position and its limit,\n if any, are copied to the beginning of the buffer.  That is, the\n byte at index p\u00a0=\u00a0position() is copied\n to index zero, the byte at index p\u00a0+\u00a01 is copied\n to index one, and so forth until the byte at index\n limit()\u00a0-\u00a01 is copied to index\n n\u00a0=\u00a0limit()\u00a0-\u00a01\u00a0-\u00a0p.\n The buffer's position is then set to n+1 and its limit is set to\n its capacity.  The mark, if defined, is discarded.\n\n  The buffer's position is set to the number of bytes copied,\n rather than to zero, so that an invocation of this method can be\n followed immediately by an invocation of another relative put\n method. \n Invoke this method after writing data from a buffer in case the\n write was incomplete.  The following loop, for example, copies bytes\n from one channel to another via the buffer buf:\n\n \n   buf.clear();          // Prepare buffer for use\n   while (in.read(buf) >= 0 || buf.position != 0) {\n       buf.flip();\n       out.write(buf);\n       buf.compact();    // In case of partial write\n   }\n "}, {"method_name": "isDirect", "method_sig": "public abstract boolean isDirect()", "description": "Tells whether or not this byte buffer is direct."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a string summarizing the state of this buffer."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Returns the current hash code of this buffer.\n\n  The hash code of a byte buffer depends only upon its remaining\n elements; that is, upon the elements from position() up to, and\n including, the element at limit()\u00a0-\u00a01.\n\n  Because buffer hash codes are content-dependent, it is inadvisable\n to use buffers as keys in hash maps or similar data structures unless it\n is known that their contents will not change.  "}, {"method_name": "equals", "method_sig": "public boolean equals (Object ob)", "description": "Tells whether or not this buffer is equal to another object.\n\n  Two byte buffers are equal if, and only if,\n\n \n They have the same element type,  \n They have the same number of remaining elements, and\n   \n The two sequences of remaining elements, considered\n   independently of their starting positions, are pointwise equal.\n\n\n\n\n\n\n\n   \n\n A byte buffer is not equal to any other type of object.  "}, {"method_name": "compareTo", "method_sig": "public int compareTo (ByteBuffer that)", "description": "Compares this buffer to another.\n\n  Two byte buffers are compared by comparing their sequences of\n remaining elements lexicographically, without regard to the starting\n position of each sequence within its corresponding buffer.\n\n\n\n\n\n\n\n\n Pairs of byte elements are compared as if by invoking\n Byte.compare(byte,byte).\n\n\n  A byte buffer is not comparable to any other type of object."}, {"method_name": "mismatch", "method_sig": "public int mismatch (ByteBuffer that)", "description": "Finds and returns the relative index of the first mismatch between this\n buffer and a given buffer.  The index is relative to the\n position of each buffer and will be in the range of\n 0 (inclusive) up to the smaller of the remaining\n elements in each buffer (exclusive).\n\n  If the two buffers share a common prefix then the returned index is\n the length of the common prefix and it follows that there is a mismatch\n between the two buffers at that index within the respective buffers.\n If one buffer is a proper prefix of the other then the returned index is\n the smaller of the remaining elements in each buffer, and it follows that\n the index is only valid for the buffer with the larger number of\n remaining elements.\n Otherwise, there is no mismatch."}, {"method_name": "order", "method_sig": "public final ByteOrder order()", "description": "Retrieves this buffer's byte order.\n\n  The byte order is used when reading or writing multibyte values, and\n when creating buffers that are views of this byte buffer.  The order of\n a newly-created byte buffer is always BIG_ENDIAN.  "}, {"method_name": "order", "method_sig": "public final ByteBuffer order (ByteOrder bo)", "description": "Modifies this buffer's byte order."}, {"method_name": "alignmentOffset", "method_sig": "public final int alignmentOffset (int index,\n                                 int unitSize)", "description": "Returns the memory address, pointing to the byte at the given index,\n modulus the given unit size.\n\n  A return value greater than zero indicates the address of the byte at\n the index is misaligned for the unit size, and the value's quantity\n indicates how much the index should be rounded up or down to locate a\n byte at an aligned address.  Otherwise, a value of 0 indicates\n that the address of the byte at the index is aligned for the unit size."}, {"method_name": "alignedSlice", "method_sig": "public final ByteBuffer alignedSlice (int unitSize)", "description": "Creates a new byte buffer whose content is a shared and aligned\n subsequence of this buffer's content.\n\n  The content of the new buffer will start at this buffer's current\n position rounded up to the index of the nearest aligned byte for the\n given unit size, and end at this buffer's limit rounded down to the index\n of the nearest aligned byte for the given unit size.\n If rounding results in out-of-bound values then the new buffer's capacity\n and limit will be zero.  If rounding is within bounds the following\n expressions will be true for a new buffer nb and unit size\n unitSize:\n \n nb.alignmentOffset(0, unitSize) == 0\n nb.alignmentOffset(nb.limit(), unitSize) == 0\n \n Changes to this buffer's content will be visible in the new\n buffer, and vice versa; the two buffers' position, limit, and mark\n values will be independent.\n\n  The new buffer's position will be zero, its capacity and its limit\n will be the number of bytes remaining in this buffer or fewer subject to\n alignment, its mark will be undefined, and its byte order will be\n BIG_ENDIAN.\n\n The new buffer will be direct if, and only if, this buffer is direct, and\n it will be read-only if, and only if, this buffer is read-only.  "}, {"method_name": "getChar", "method_sig": "public abstract char getChar()", "description": "Relative get method for reading a char value.\n\n  Reads the next two bytes at this buffer's current position,\n composing them into a char value according to the current byte order,\n and then increments the position by two.  "}, {"method_name": "putChar", "method_sig": "public abstract ByteBuffer putChar (char value)", "description": "Relative put method for writing a char\n value\u00a0\u00a0(optional operation).\n\n  Writes two bytes containing the given char value, in the\n current byte order, into this buffer at the current position, and then\n increments the position by two.  "}, {"method_name": "getChar", "method_sig": "public abstract char getChar (int index)", "description": "Absolute get method for reading a char value.\n\n  Reads two bytes at the given index, composing them into a\n char value according to the current byte order.  "}, {"method_name": "putChar", "method_sig": "public abstract ByteBuffer putChar (int index,\n                                   char value)", "description": "Absolute put method for writing a char\n value\u00a0\u00a0(optional operation).\n\n  Writes two bytes containing the given char value, in the\n current byte order, into this buffer at the given index.  "}, {"method_name": "asCharBuffer", "method_sig": "public abstract CharBuffer asCharBuffer()", "description": "Creates a view of this byte buffer as a char buffer.\n\n  The content of the new buffer will start at this buffer's current\n position.  Changes to this buffer's content will be visible in the new\n buffer, and vice versa; the two buffers' position, limit, and mark\n values will be independent.\n\n  The new buffer's position will be zero, its capacity and its limit\n will be the number of bytes remaining in this buffer divided by\n two, its mark will be undefined, and its byte order will be that\n of the byte buffer at the moment the view is created.  The new buffer\n will be direct if, and only if, this buffer is direct, and it will be\n read-only if, and only if, this buffer is read-only.  "}, {"method_name": "getShort", "method_sig": "public abstract short getShort()", "description": "Relative get method for reading a short value.\n\n  Reads the next two bytes at this buffer's current position,\n composing them into a short value according to the current byte order,\n and then increments the position by two.  "}, {"method_name": "putShort", "method_sig": "public abstract ByteBuffer putShort (short value)", "description": "Relative put method for writing a short\n value\u00a0\u00a0(optional operation).\n\n  Writes two bytes containing the given short value, in the\n current byte order, into this buffer at the current position, and then\n increments the position by two.  "}, {"method_name": "getShort", "method_sig": "public abstract short getShort (int index)", "description": "Absolute get method for reading a short value.\n\n  Reads two bytes at the given index, composing them into a\n short value according to the current byte order.  "}, {"method_name": "putShort", "method_sig": "public abstract ByteBuffer putShort (int index,\n                                    short value)", "description": "Absolute put method for writing a short\n value\u00a0\u00a0(optional operation).\n\n  Writes two bytes containing the given short value, in the\n current byte order, into this buffer at the given index.  "}, {"method_name": "asShortBuffer", "method_sig": "public abstract ShortBuffer asShortBuffer()", "description": "Creates a view of this byte buffer as a short buffer.\n\n  The content of the new buffer will start at this buffer's current\n position.  Changes to this buffer's content will be visible in the new\n buffer, and vice versa; the two buffers' position, limit, and mark\n values will be independent.\n\n  The new buffer's position will be zero, its capacity and its limit\n will be the number of bytes remaining in this buffer divided by\n two, its mark will be undefined, and its byte order will be that\n of the byte buffer at the moment the view is created.  The new buffer\n will be direct if, and only if, this buffer is direct, and it will be\n read-only if, and only if, this buffer is read-only.  "}, {"method_name": "getInt", "method_sig": "public abstract int getInt()", "description": "Relative get method for reading an int value.\n\n  Reads the next four bytes at this buffer's current position,\n composing them into an int value according to the current byte order,\n and then increments the position by four.  "}, {"method_name": "putInt", "method_sig": "public abstract ByteBuffer putInt (int value)", "description": "Relative put method for writing an int\n value\u00a0\u00a0(optional operation).\n\n  Writes four bytes containing the given int value, in the\n current byte order, into this buffer at the current position, and then\n increments the position by four.  "}, {"method_name": "getInt", "method_sig": "public abstract int getInt (int index)", "description": "Absolute get method for reading an int value.\n\n  Reads four bytes at the given index, composing them into a\n int value according to the current byte order.  "}, {"method_name": "putInt", "method_sig": "public abstract ByteBuffer putInt (int index,\n                                  int value)", "description": "Absolute put method for writing an int\n value\u00a0\u00a0(optional operation).\n\n  Writes four bytes containing the given int value, in the\n current byte order, into this buffer at the given index.  "}, {"method_name": "asIntBuffer", "method_sig": "public abstract IntBuffer asIntBuffer()", "description": "Creates a view of this byte buffer as an int buffer.\n\n  The content of the new buffer will start at this buffer's current\n position.  Changes to this buffer's content will be visible in the new\n buffer, and vice versa; the two buffers' position, limit, and mark\n values will be independent.\n\n  The new buffer's position will be zero, its capacity and its limit\n will be the number of bytes remaining in this buffer divided by\n four, its mark will be undefined, and its byte order will be that\n of the byte buffer at the moment the view is created.  The new buffer\n will be direct if, and only if, this buffer is direct, and it will be\n read-only if, and only if, this buffer is read-only.  "}, {"method_name": "getLong", "method_sig": "public abstract long getLong()", "description": "Relative get method for reading a long value.\n\n  Reads the next eight bytes at this buffer's current position,\n composing them into a long value according to the current byte order,\n and then increments the position by eight.  "}, {"method_name": "putLong", "method_sig": "public abstract ByteBuffer putLong (long value)", "description": "Relative put method for writing a long\n value\u00a0\u00a0(optional operation).\n\n  Writes eight bytes containing the given long value, in the\n current byte order, into this buffer at the current position, and then\n increments the position by eight.  "}, {"method_name": "getLong", "method_sig": "public abstract long getLong (int index)", "description": "Absolute get method for reading a long value.\n\n  Reads eight bytes at the given index, composing them into a\n long value according to the current byte order.  "}, {"method_name": "putLong", "method_sig": "public abstract ByteBuffer putLong (int index,\n                                   long value)", "description": "Absolute put method for writing a long\n value\u00a0\u00a0(optional operation).\n\n  Writes eight bytes containing the given long value, in the\n current byte order, into this buffer at the given index.  "}, {"method_name": "asLongBuffer", "method_sig": "public abstract LongBuffer asLongBuffer()", "description": "Creates a view of this byte buffer as a long buffer.\n\n  The content of the new buffer will start at this buffer's current\n position.  Changes to this buffer's content will be visible in the new\n buffer, and vice versa; the two buffers' position, limit, and mark\n values will be independent.\n\n  The new buffer's position will be zero, its capacity and its limit\n will be the number of bytes remaining in this buffer divided by\n eight, its mark will be undefined, and its byte order will be that\n of the byte buffer at the moment the view is created.  The new buffer\n will be direct if, and only if, this buffer is direct, and it will be\n read-only if, and only if, this buffer is read-only.  "}, {"method_name": "getFloat", "method_sig": "public abstract float getFloat()", "description": "Relative get method for reading a float value.\n\n  Reads the next four bytes at this buffer's current position,\n composing them into a float value according to the current byte order,\n and then increments the position by four.  "}, {"method_name": "putFloat", "method_sig": "public abstract ByteBuffer putFloat (float value)", "description": "Relative put method for writing a float\n value\u00a0\u00a0(optional operation).\n\n  Writes four bytes containing the given float value, in the\n current byte order, into this buffer at the current position, and then\n increments the position by four.  "}, {"method_name": "getFloat", "method_sig": "public abstract float getFloat (int index)", "description": "Absolute get method for reading a float value.\n\n  Reads four bytes at the given index, composing them into a\n float value according to the current byte order.  "}, {"method_name": "putFloat", "method_sig": "public abstract ByteBuffer putFloat (int index,\n                                    float value)", "description": "Absolute put method for writing a float\n value\u00a0\u00a0(optional operation).\n\n  Writes four bytes containing the given float value, in the\n current byte order, into this buffer at the given index.  "}, {"method_name": "asFloatBuffer", "method_sig": "public abstract FloatBuffer asFloatBuffer()", "description": "Creates a view of this byte buffer as a float buffer.\n\n  The content of the new buffer will start at this buffer's current\n position.  Changes to this buffer's content will be visible in the new\n buffer, and vice versa; the two buffers' position, limit, and mark\n values will be independent.\n\n  The new buffer's position will be zero, its capacity and its limit\n will be the number of bytes remaining in this buffer divided by\n four, its mark will be undefined, and its byte order will be that\n of the byte buffer at the moment the view is created.  The new buffer\n will be direct if, and only if, this buffer is direct, and it will be\n read-only if, and only if, this buffer is read-only.  "}, {"method_name": "getDouble", "method_sig": "public abstract double getDouble()", "description": "Relative get method for reading a double value.\n\n  Reads the next eight bytes at this buffer's current position,\n composing them into a double value according to the current byte order,\n and then increments the position by eight.  "}, {"method_name": "putDouble", "method_sig": "public abstract ByteBuffer putDouble (double value)", "description": "Relative put method for writing a double\n value\u00a0\u00a0(optional operation).\n\n  Writes eight bytes containing the given double value, in the\n current byte order, into this buffer at the current position, and then\n increments the position by eight.  "}, {"method_name": "getDouble", "method_sig": "public abstract double getDouble (int index)", "description": "Absolute get method for reading a double value.\n\n  Reads eight bytes at the given index, composing them into a\n double value according to the current byte order.  "}, {"method_name": "putDouble", "method_sig": "public abstract ByteBuffer putDouble (int index,\n                                     double value)", "description": "Absolute put method for writing a double\n value\u00a0\u00a0(optional operation).\n\n  Writes eight bytes containing the given double value, in the\n current byte order, into this buffer at the given index.  "}, {"method_name": "asDoubleBuffer", "method_sig": "public abstract DoubleBuffer asDoubleBuffer()", "description": "Creates a view of this byte buffer as a double buffer.\n\n  The content of the new buffer will start at this buffer's current\n position.  Changes to this buffer's content will be visible in the new\n buffer, and vice versa; the two buffers' position, limit, and mark\n values will be independent.\n\n  The new buffer's position will be zero, its capacity and its limit\n will be the number of bytes remaining in this buffer divided by\n eight, its mark will be undefined, and its byte order will be that\n of the byte buffer at the moment the view is created.  The new buffer\n will be direct if, and only if, this buffer is direct, and it will be\n read-only if, and only if, this buffer is read-only.  "}]}