{"name": "Class Krb5LoginModule", "module": "jdk.security.auth", "package": "com.sun.security.auth.module", "text": "This LoginModule authenticates users using\n Kerberos protocols.\n\n  The configuration entry for Krb5LoginModule has\n several options that control the authentication process and\n additions to the Subject's private credential\n set. Irrespective of these options, the Subject's\n principal set and private credentials set are updated only when\n commit is called.\n When commit is called, the KerberosPrincipal\n is added to the Subject's principal set (unless the\n principal is specified as \"*\"). If isInitiator\n is true, the KerberosTicket is\n added to the Subject's private credentials.\n\n  If the configuration entry for KerberosLoginModule\n has the option storeKey set to true, then\n KerberosKey or KeyTab will also be added to the\n subject's private credentials. KerberosKey, the principal's\n key(s) will be derived from user's password, and KeyTab is\n the keytab used when useKeyTab is set to true. The\n KeyTab object is restricted to be used by the specified\n principal unless the principal value is \"*\".\n\n  This LoginModule recognizes the doNotPrompt\n option. If set to true the user will not be prompted for the password.\n\n  The user can  specify the location of the ticket cache by using\n the option ticketCache in the configuration entry.\n\n The user can specify the keytab location by using\n the option keyTab\n in the configuration entry.\n\n  The principal name can be specified in the configuration entry\n by using the option principal. The principal name\n can either be a simple user name, a service name such as\n host/mission.eng.sun.com, or \"*\". The principal can also\n be set using the system property sun.security.krb5.principal.\n This property is checked during login. If this property is not set, then\n the principal name from the configuration is used. In the\n case where the principal property is not set and the principal\n entry also does not exist, the user is prompted for the name.\n When this property of entry is set, and useTicketCache\n is set to true, only TGT belonging to this principal is used.\n\n  The following is a list of configuration options supported\n for Krb5LoginModule:\n \nrefreshKrb5Config:\n Set this to true, if you want the configuration\n to be refreshed before the login method is called.\nuseTicketCache:\nSet this to true, if you want the\n TGT to be obtained from the ticket cache. Set this option\n to false if you do not want this module to use the ticket cache.\n (Default is False).\n This module will search for the ticket\n cache in the following locations: On Solaris and Linux\n it will look for the ticket cache in /tmp/krb5cc_uid\n where the uid is numeric user identifier. If the ticket cache is\n not available in the above location, or if we are on a\n Windows platform, it will look for the cache as\n {user.home}{file.separator}krb5cc_{user.name}.\n You can override the ticket cache location by using\n ticketCache.\n For Windows, if a ticket cannot be retrieved from the file ticket cache,\n it will use Local Security Authority (LSA) API to get the TGT.\n ticketCache:\nSet this to the name of the ticket\n cache that  contains user's TGT.\n If this is set,  useTicketCache\n must also be set to true; Otherwise a configuration error will\n be returned.\nrenewTGT:\nSet this to true, if you want to renew the TGT when it's more than\n half-way expired (the time until expiration is less than the time\n since start time). If this is set, useTicketCache must also be\n set to true; otherwise a configuration error will be returned.\ndoNotPrompt:\nSet this to true if you do not want to be\n prompted for the password\n if credentials can not be obtained from the cache, the keytab,\n or through shared state.(Default is false)\n If set to true, credential must be obtained through cache, keytab,\n or shared state. Otherwise, authentication will fail.\nuseKeyTab:\nSet this to true if you\n want the module to get the principal's key from the\n the keytab.(default value is False)\n If keytab is not set then\n the module will locate the keytab from the\n Kerberos configuration file.\n If it is not specified in the Kerberos configuration file\n then it will look for the file\n {user.home}{file.separator}krb5.keytab.\nkeyTab:\nSet this to the file name of the\n keytab to get principal's secret key.\nstoreKey:\nSet this to true to if you want the keytab or the\n principal's key to be stored in the Subject's private credentials.\n For isInitiator being false, if principal\n is \"*\", the KeyTab stored can be used by anyone, otherwise,\n it's restricted to be used by the specified principal only.\nprincipal:\nThe name of the principal that should\n be used. The principal can be a simple username such as\n \"testuser\" or a service name such as\n \"host/testhost.eng.sun.com\". You can use the\n principal  option to set the principal when there are\n credentials for multiple principals in the\n keyTab or when you want a specific ticket cache only.\n The principal can also be set using the system property\n sun.security.krb5.principal. In addition, if this\n system property is defined, then it will be used. If this property\n is not set, then the principal name from the configuration will be\n used.\n The principal name can be set to \"*\" when isInitiator is false.\n In this case, the acceptor is not bound to a single principal. It can\n act as any principal an initiator requests if keys for that principal\n can be found. When isInitiator is true, the principal name\n cannot be set to \"*\".\n \nisInitiator:\nSet this to true, if initiator. Set this to false, if acceptor only.\n (Default is true).\n Note: Do not set this value to false for initiators.\n\n This LoginModule also recognizes the following additional\n Configuration\n options that enable you to share username and passwords across different\n authentication modules:\n \nuseFirstPass:\nif, true, this LoginModule retrieves the\n                   username and password from the module's shared state,\n                   using \"javax.security.auth.login.name\" and\n                   \"javax.security.auth.login.password\" as the respective\n                   keys. The retrieved values are used for authentication.\n                   If authentication fails, no attempt for a retry\n                   is made, and the failure is reported back to the\n                   calling application.\ntryFirstPass:\nif, true, this LoginModule retrieves the\n                   the username and password from the module's shared\n                   state using \"javax.security.auth.login.name\" and\n                   \"javax.security.auth.login.password\" as the respective\n                   keys.  The retrieved values are used for\n                   authentication.\n                   If authentication fails, the module uses the\n                   CallbackHandler to retrieve a new username\n                   and password, and another attempt to authenticate\n                   is made. If the authentication fails,\n                   the failure is reported back to the calling application\nstorePass:\nif, true, this LoginModule stores the username and\n                   password obtained from the CallbackHandler in the\n                   modules shared state, using\n                   \"javax.security.auth.login.name\" and\n                   \"javax.security.auth.login.password\" as the respective\n                   keys.  This is not performed if existing values already\n                   exist for the username and password in the shared\n                   state, or if authentication fails.\nclearPass:\nif, true, this LoginModule clears the\n                   username and password stored in the module's shared\n                   state  after both phases of authentication\n                   (login and commit) have completed.\n\nIf the principal system property or key is already provided, the value of\n \"javax.security.auth.login.name\" in the shared state is ignored.\n When multiple mechanisms to retrieve a ticket or key is provided, the\n preference order is:\n \nticket cache\n keytab\n shared state\n user prompt\n \nNote that if any step fails, it will fallback to the next step.\n There's only one exception, if the shared state step fails and\n useFirstPass = true, no user prompt is made.\n Examples of some configuration values for Krb5LoginModule in\n JAAS config file and the results are:\n \n\n doNotPrompt = true\n This is an illegal combination since none of useTicketCache,\n useKeyTab, useFirstPass and tryFirstPass\n is set and the user can not be prompted for the password.\n\n \n ticketCache = <filename>\n This is an illegal combination since useTicketCache\n is not set to true and the ticketCache is set. A configuration error\n will occur.\n\n \n renewTGT = true\n This is an illegal combination since useTicketCache is\n not set to true and renewTGT is set. A configuration error will occur.\n\n \n storeKey = true  useTicketCache = true  doNotPrompt = true\n This is an illegal combination since  storeKey is set to\n true but the key can not be obtained either by prompting the user or from\n the keytab, or from the shared state. A configuration error will occur.\n\n \n keyTab = <filename>  doNotPrompt = true\n This is an illegal combination since useKeyTab is not set to true and\n the keyTab is set. A configuration error will occur.\n\n \n debug = true\n Prompt the user for the principal name and the password.\n Use the authentication exchange to get TGT from the KDC and\n populate the Subject with the principal and TGT.\n Output debug messages.\n\n \n useTicketCache = true  doNotPrompt = true\n Check the default cache for TGT and populate the Subject\n with the principal and TGT. If the TGT is not available,\n do not prompt the user, instead fail the authentication.\n\n \n principal = <name>  useTicketCache = true  doNotPrompt = true\n Get the TGT from the default cache for the principal and populate the\n Subject's principal and private creds set. If ticket cache is\n not available or does not contain the principal's TGT\n authentication will fail.\n\n \n useTicketCache = true\n ticketCache = <file name>\n useKeyTab = true\n keyTab = <keytab filename>\n principal = <principal name>\n doNotPrompt = true\n Search the cache for the principal's TGT. If it is not available\n use the key in the keytab to perform authentication exchange with the\n KDC and acquire the TGT.\n The Subject will be populated with the principal and the TGT.\n If the key is not available or valid then authentication will fail.\n\n \n useTicketCache = true  ticketCache = <filename>\n The TGT will be obtained from the cache specified.\n The Kerberos principal name used will be the principal name in\n the Ticket cache. If the TGT is not available in the\n ticket cache the user will be prompted for the principal name\n and the password. The TGT will be obtained using the authentication\n exchange with the KDC.\n The Subject will be populated with the TGT.\n\n \n useKeyTab = true  keyTab=<keytab filename>  principal = <principal name>  storeKey = true\n The key for the principal will be retrieved from the keytab.\n If the key is not available in the keytab the user will be prompted\n for the principal's password. The Subject will be populated\n with the principal's key either from the keytab or derived from the\n password entered.\n\n \n useKeyTab = true  keyTab = <keytabname>  storeKey = true  doNotPrompt = false\n The user will be prompted for the service principal name.\n If the principal's\n longterm key is available in the keytab , it will be added to the\n Subject's private credentials. An authentication exchange will be\n attempted with the principal name and the key from the Keytab.\n If successful the TGT will be added to the\n Subject's private credentials set. Otherwise the authentication will fail.\n\n \n isInitiator = false  useKeyTab = true  keyTab = <keytabname>  storeKey = true  principal = *\n The acceptor will be an unbound acceptor and it can act as any principal\n as long that principal has keys in the keytab.\n\n \n useTicketCache = true\n ticketCache = <file name>\n useKeyTab = true\n keyTab = <file name>\n storeKey = true\n principal = <principal name>\n The client's TGT will be retrieved from the ticket cache and added to the\n Subject's private credentials. If the TGT is not available\n in the ticket cache, or the TGT's client name does not match the principal\n name, Java will use a secret key to obtain the TGT using the authentication\n exchange and added to the Subject's private credentials.\n This secret key will be first retrieved from the keytab. If the key\n is not available, the user will be prompted for the password. In either\n case, the key derived from the password will be added to the\n Subject's private credentials set.\n\n \n isInitiator = false\n Configured to act as acceptor only, credentials are not acquired\n via AS exchange. For acceptors only, set this value to false.\n For initiators, do not set this value to false.\n\n \n isInitiator = true\n Configured to act as initiator, credentials are acquired\n via AS exchange. For initiators, set this value to true, or leave this\n option unset, in which case default value (true) will be used.\n\n ", "codes": ["public class Krb5LoginModule\nextends Object\nimplements LoginModule"], "fields": [], "methods": [{"method_name": "initialize", "method_sig": "public void initialize (Subject subject,\n                       CallbackHandler callbackHandler,\n                       Map<String, ?> sharedState,\n                       Map<String, ?> options)", "description": "Initialize this LoginModule."}, {"method_name": "login", "method_sig": "public boolean login()\n              throws LoginException", "description": "Authenticate the user"}, {"method_name": "commit", "method_sig": "public boolean commit()\n               throws LoginException", "description": "This method is called if the LoginContext's\n overall authentication succeeded\n (the relevant REQUIRED, REQUISITE, SUFFICIENT and OPTIONAL\n LoginModules succeeded).\n\n  If this LoginModule's own authentication attempt\n succeeded (checked by retrieving the private state saved by the\n login method), then this method associates a\n Krb5Principal\n with the Subject located in the\n LoginModule. It adds Kerberos Credentials to the\n  the Subject's private credentials set. If this LoginModule's own\n authentication attempted failed, then this method removes\n any state that was originally saved."}, {"method_name": "abort", "method_sig": "public boolean abort()\n              throws LoginException", "description": "This method is called if the LoginContext's\n overall authentication failed.\n (the relevant REQUIRED, REQUISITE, SUFFICIENT and OPTIONAL\n LoginModules did not succeed).\n\n  If this LoginModule's own authentication attempt\n succeeded (checked by retrieving the private state saved by the\n login and commit methods),\n then this method cleans up any state that was originally saved."}, {"method_name": "logout", "method_sig": "public boolean logout()\n               throws LoginException", "description": "Logout the user.\n\n  This method removes the Krb5Principal\n that was added by the commit method."}]}