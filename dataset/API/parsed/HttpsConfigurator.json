{"name": "Class HttpsConfigurator", "module": "jdk.httpserver", "package": "com.sun.net.httpserver", "text": "This class is used to configure the https parameters for each incoming\n https connection on a HttpsServer. Applications need to override\n the configure(HttpsParameters) method in order to change\n the default configuration.\n \n The following example shows how this may be done:\n\n \n SSLContext sslContext = SSLContext.getInstance (....);\n HttpsServer server = HttpsServer.create();\n\n server.setHttpsConfigurator (new HttpsConfigurator(sslContext) {\n     public void configure (HttpsParameters params) {\n\n         // get the remote address if needed\n         InetSocketAddress remote = params.getClientAddress();\n\n         SSLContext c = getSSLContext();\n\n         // get the default parameters\n         SSLParameters sslparams = c.getDefaultSSLParameters();\n         if (remote.equals (...) ) {\n             // modify the default set for client x\n         }\n\n         params.setSSLParameters(sslparams);\n     }\n });\n ", "codes": ["public class HttpsConfigurator\nextends Object"], "fields": [], "methods": [{"method_name": "getSSLContext", "method_sig": "public SSLContext getSSLContext()", "description": "Returns the SSLContext for this HttpsConfigurator."}, {"method_name": "configure", "method_sig": "public void configure (HttpsParameters params)", "description": "Called by the HttpsServer to configure the parameters\n for a https connection currently being established.\n The implementation of configure() must call\n HttpsParameters.setSSLParameters(SSLParameters)\n in order to set the SSL parameters for the connection.\n \n The default implementation of this method uses the\n SSLParameters returned from \ngetSSLContext().getDefaultSSLParameters()\n\n configure() may be overridden in order to modify this behavior.\n See, the example above."}]}