{"name": "Interface DriverAction", "module": "java.sql", "package": "java.sql", "text": "An interface that must be implemented when a Driver wants to be\n notified by DriverManager.\n\n A DriverAction implementation is not intended to be used\n directly by applications. A JDBC Driver  may choose\n to create its DriverAction implementation in a private class\n to avoid it being called directly.\n \n The JDBC driver's static initialization block must call\n DriverManager.registerDriver(java.sql.Driver, java.sql.DriverAction) in order\n to inform DriverManager which DriverAction implementation to\n call when the JDBC driver is de-registered.", "codes": ["public interface DriverAction"], "fields": [], "methods": [{"method_name": "deregister", "method_sig": "void deregister()", "description": "Method called by\n DriverManager.deregisterDriver(Driver)\n  to notify the JDBC driver that it was de-registered.\n \n The deregister method is intended only to be used by JDBC Drivers\n and not by applications.  JDBC drivers are recommended to not implement\n DriverAction in a public class.  If there are active\n connections to the database at the time that the deregister\n method is called, it is implementation specific as to whether the\n connections are closed or allowed to continue. Once this method is\n called, it is implementation specific as to whether the driver may\n limit the ability to create new connections to the database, invoke\n other Driver methods or throw a SQLException.\n Consult your JDBC driver's documentation for additional information\n on its behavior."}]}