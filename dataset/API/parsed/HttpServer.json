{"name": "Class HttpServer", "module": "jdk.httpserver", "package": "com.sun.net.httpserver", "text": "This class implements a simple HTTP server. A HttpServer is bound to an IP address\n and port number and listens for incoming TCP connections from clients on this address.\n The sub-class HttpsServer implements a server which handles HTTPS requests.\n \n One or more HttpHandler objects must be associated with a server\n in order to process requests. Each such HttpHandler is registered\n with a root URI path which represents the\n location of the application or service on this server. The mapping of a handler\n to a HttpServer is encapsulated by a HttpContext object. HttpContexts\n are created by calling createContext(String,HttpHandler).\n Any request for which no handler can be found is rejected with a 404 response.\n Management of threads can be done external to this object by providing a\n Executor object. If none is provided a default\n implementation is used.\n \n\nMapping request URIs to HttpContext paths\n When a HTTP request is received,\n the appropriate HttpContext (and handler) is located by finding the context\n whose path is the longest matching prefix of the request URI's path.\n Paths are matched literally, which means that the strings are compared\n case sensitively, and with no conversion to or from any encoded forms.\n For example. Given a HttpServer with the following HttpContexts configured.\n description\n\nContextContext path\n\n\nctx1\"/\"\nctx2\"/apps/\"\nctx3\"/apps/foo/\"\n\n\n\n the following table shows some request URIs and which, if any context they would\n match with.\n description\n\nRequest URIMatches context\n\n\n\"http://foo.com/apps/foo/bar\"ctx3\n\"http://foo.com/apps/Foo/bar\"no match, wrong case\n\"http://foo.com/apps/app1\"ctx2\n\"http://foo.com/foo\"ctx1\n\n\n\nNote about socket backlogs\n When binding to an address and port number, the application can also specify an integer\n backlog parameter. This represents the maximum number of incoming TCP connections\n which the system will queue internally. Connections are queued while they are waiting to\n be accepted by the HttpServer. When the limit is reached, further connections may be\n rejected (or possibly ignored) by the underlying TCP implementation. Setting the right\n backlog value is a compromise between efficient resource usage in the TCP layer (not setting\n it too high) and allowing adequate throughput of incoming requests (not setting it too low).", "codes": ["public abstract class HttpServer\nextends Object"], "fields": [], "methods": [{"method_name": "create", "method_sig": "public static HttpServer create()\n                         throws IOException", "description": "creates a HttpServer instance which is initially not bound to any local address/port.\n The HttpServer is acquired from the currently installed HttpServerProvider\n The server must be bound using bind(InetSocketAddress,int) before it can be used."}, {"method_name": "create", "method_sig": "public static HttpServer create (InetSocketAddress addr,\n                                int backlog)\n                         throws IOException", "description": "Create a HttpServer instance which will bind to the\n specified InetSocketAddress (IP address and port number)\n\n A maximum backlog can also be specified. This is the maximum number of\n queued incoming connections to allow on the listening socket.\n Queued TCP connections exceeding this limit may be rejected by the TCP implementation.\n The HttpServer is acquired from the currently installed HttpServerProvider"}, {"method_name": "bind", "method_sig": "public abstract void bind (InetSocketAddress addr,\n                          int backlog)\n                   throws IOException", "description": "Binds a currently unbound HttpServer to the given address and port number.\n A maximum backlog can also be specified. This is the maximum number of\n queued incoming connections to allow on the listening socket.\n Queued TCP connections exceeding this limit may be rejected by the TCP implementation."}, {"method_name": "start", "method_sig": "public abstract void start()", "description": "Starts this server in a new background thread. The background thread\n inherits the priority, thread group and context class loader\n of the caller."}, {"method_name": "setExecutor", "method_sig": "public abstract void setExecutor (Executor executor)", "description": "sets this server's Executor object. An\n Executor must be established before start() is called.\n All HTTP requests are handled in tasks given to the executor.\n If this method is not called (before start()) or if it is\n called with a null Executor, then\n a default implementation is used, which uses the thread\n which was created by the start() method."}, {"method_name": "getExecutor", "method_sig": "public abstract Executor getExecutor()", "description": "returns this server's Executor object if one was specified with\n setExecutor(Executor), or null if none was\n specified."}, {"method_name": "stop", "method_sig": "public abstract void stop (int delay)", "description": "stops this server by closing the listening socket and disallowing\n any new exchanges from being processed. The method will then block\n until all current exchange handlers have completed or else when\n approximately delay seconds have elapsed (whichever happens\n sooner). Then, all open TCP connections are closed, the background\n thread created by start() exits, and the method returns.\n Once stopped, a HttpServer cannot be re-used."}, {"method_name": "createContext", "method_sig": "public abstract HttpContext createContext (String path,\n                                          HttpHandler handler)", "description": "Creates a HttpContext. A HttpContext represents a mapping from a\n URI path to a exchange handler on this HttpServer. Once created, all requests\n received by the server for the path will be handled by calling\n the given handler object. The context is identified by the path, and\n can later be removed from the server using this with the removeContext(String) method.\n \n The path specifies the root URI path for this context. The first character of path must be\n '/'. \n The class overview describes how incoming request URIs are mapped\n to HttpContext instances."}, {"method_name": "createContext", "method_sig": "public abstract HttpContext createContext (String path)", "description": "Creates a HttpContext without initially specifying a handler. The handler must later be specified using\n HttpContext.setHandler(HttpHandler).  A HttpContext represents a mapping from a\n URI path to an exchange handler on this HttpServer. Once created, and when\n the handler has been set, all requests\n received by the server for the path will be handled by calling\n the handler object. The context is identified by the path, and\n can later be removed from the server using this with the removeContext(String) method.\n \n The path specifies the root URI path for this context. The first character of path must be\n '/'. \n The class overview describes how incoming request URIs are mapped\n to HttpContext instances."}, {"method_name": "removeContext", "method_sig": "public abstract void removeContext (String path)\n                            throws IllegalArgumentException", "description": "Removes the context identified by the given path from the server.\n Removing a context does not affect exchanges currently being processed\n but prevents new ones from being accepted."}, {"method_name": "removeContext", "method_sig": "public abstract void removeContext (HttpContext context)", "description": "Removes the given context from the server.\n Removing a context does not affect exchanges currently being processed\n but prevents new ones from being accepted."}, {"method_name": "getAddress", "method_sig": "public abstract InetSocketAddress getAddress()", "description": "returns the address this server is listening on"}]}