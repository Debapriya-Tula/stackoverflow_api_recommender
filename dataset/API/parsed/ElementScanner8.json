{"name": "Class ElementScanner8<R,\u200bP>", "module": "java.compiler", "package": "javax.lang.model.util", "text": "A scanning visitor of program elements with default behavior\n appropriate for the RELEASE_8\n source version.  The visitXyz methods in this\n class scan their component elements by calling scan on\n their enclosed elements,\n parameters, etc., as\n indicated in the individual method specifications.  A subclass can\n control the order elements are visited by overriding the\n visitXyz methods.  Note that clients of a scanner\n may get the desired behavior be invoking v.scan(e, p) rather\n than v.visit(e, p) on the root objects of interest.\n\n When a subclass overrides a visitXyz method, the\n new method can cause the enclosed elements to be scanned in the\n default way by calling super.visitXyz.  In this\n fashion, the concrete visitor can control the ordering of traversal\n over the component elements with respect to the additional\n processing; for example, consistently calling\n super.visitXyz at the start of the overridden\n methods will yield a preorder traversal, etc.  If the component\n elements should be traversed in some other order, instead of\n calling super.visitXyz, an overriding visit method\n should call scan with the elements in the desired order.\n\n  Methods in this class may be overridden subject to their\n general contract.  Note that annotating methods in concrete\n subclasses with @Override will help\n ensure that methods are overridden as intended.\n\n  WARNING: The ElementVisitor interface\n implemented by this class may have methods added to it in the\n future to accommodate new, currently unknown, language structures\n added to future versions of the Java\u2122 programming language.\n Therefore, methods whose names begin with \"visit\" may be\n added to this class in the future; to avoid incompatibilities,\n classes which extend this class should not declare any instance\n methods with names beginning with \"visit\".\n\n When such a new visit method is added, the default\n implementation in this class will be to call the visitUnknown method.  A new element scanner visitor\n class will also be introduced to correspond to the new language\n level; this visitor will have different default behavior for the\n visit method in question.  When the new visitor is introduced, all\n or portions of this visitor may be deprecated.", "codes": ["@SupportedSourceVersion(RELEASE_8)\npublic class ElementScanner8<R, P>\nextends ElementScanner7<R, P>"], "fields": [], "methods": []}