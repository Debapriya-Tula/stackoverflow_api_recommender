{"name": "Class CertPath", "module": "java.base", "package": "java.security.cert", "text": "An immutable sequence of certificates (a certification path).\n \n This is an abstract class that defines the methods common to all\n CertPaths. Subclasses can handle different kinds of\n certificates (X.509, PGP, etc.).\n \n All CertPath objects have a type, a list of\n Certificates, and one or more supported encodings. Because the\n CertPath class is immutable, a CertPath cannot\n change in any externally visible way after being constructed. This\n stipulation applies to all public fields and methods of this class and any\n added or overridden by subclasses.\n \n The type is a String that identifies the type of\n Certificates in the certification path. For each\n certificate cert in a certification path certPath,\n cert.getType().equals(certPath.getType()) must be\n true.\n \n The list of Certificates is an ordered List of\n zero or more Certificates. This List and all\n of the Certificates contained in it must be immutable.\n \n Each CertPath object must support one or more encodings\n so that the object can be translated into a byte array for storage or\n transmission to other parties. Preferably, these encodings should be\n well-documented standards (such as PKCS#7). One of the encodings supported\n by a CertPath is considered the default encoding. This\n encoding is used if no encoding is explicitly requested (for the\n getEncoded() method, for instance).\n \n All CertPath objects are also Serializable.\n CertPath objects are resolved into an alternate\n CertPathRep object during serialization. This allows\n a CertPath object to be serialized into an equivalent\n representation regardless of its underlying implementation.\n \nCertPath objects can be created with a\n CertificateFactory or they can be returned by other classes,\n such as a CertPathBuilder.\n \n By convention, X.509 CertPaths (consisting of\n X509Certificates), are ordered starting with the target\n certificate and ending with a certificate issued by the trust anchor. That\n is, the issuer of one certificate is the subject of the following one. The\n certificate representing the TrustAnchor should not be\n included in the certification path. Unvalidated X.509 CertPaths\n may not follow these conventions. PKIX CertPathValidators will\n detect any departure from these conventions that cause the certification\n path to be invalid and throw a CertPathValidatorException.\n\n  Every implementation of the Java platform is required to support the\n following standard CertPath encodings:\n \nPKCS7\nPkiPath\n\n These encodings are described in the \n CertPath Encodings section of the\n Java Security Standard Algorithm Names Specification.\n Consult the release documentation for your implementation to see if any\n other encodings are supported.\n \nConcurrent Access\n\n All CertPath objects must be thread-safe. That is, multiple\n threads may concurrently invoke the methods defined in this class on a\n single CertPath object (or more than one) with no\n ill effects. This is also true for the List returned by\n CertPath.getCertificates.\n \n Requiring CertPath objects to be immutable and thread-safe\n allows them to be passed around to various pieces of code without worrying\n about coordinating access.  Providing this thread-safety is\n generally not difficult, since the CertPath and\n List objects in question are immutable.", "codes": ["public abstract class CertPath\nextends Object\nimplements Serializable"], "fields": [], "methods": [{"method_name": "getType", "method_sig": "public String getType()", "description": "Returns the type of Certificates in this certification\n path. This is the same string that would be returned by\n cert.getType()\n for all Certificates in the certification path."}, {"method_name": "getEncodings", "method_sig": "public abstract Iterator<String> getEncodings()", "description": "Returns an iteration of the encodings supported by this certification\n path, with the default encoding first. Attempts to modify the returned\n Iterator via its remove method result in an\n UnsupportedOperationException."}, {"method_name": "equals", "method_sig": "public boolean equals (Object other)", "description": "Compares this certification path for equality with the specified\n object. Two CertPaths are equal if and only if their\n types are equal and their certificate Lists (and by\n implication the Certificates in those Lists)\n are equal. A CertPath is never equal to an object that is\n not a CertPath.\n \n This algorithm is implemented by this method. If it is overridden,\n the behavior specified here must be maintained."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Returns the hashcode for this certification path. The hash code of\n a certification path is defined to be the result of the following\n calculation:\n \n  hashCode = path.getType().hashCode();\n  hashCode = 31*hashCode + path.getCertificates().hashCode();\n \n This ensures that path1.equals(path2) implies that\n path1.hashCode()==path2.hashCode() for any two certification\n paths, path1 and path2, as required by the\n general contract of Object.hashCode."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a string representation of this certification path.\n This calls the toString method on each of the\n Certificates in the path."}, {"method_name": "getEncoded", "method_sig": "public abstract byte[] getEncoded()\n                           throws CertificateEncodingException", "description": "Returns the encoded form of this certification path, using the default\n encoding."}, {"method_name": "getEncoded", "method_sig": "public abstract byte[] getEncoded (String encoding)\n                           throws CertificateEncodingException", "description": "Returns the encoded form of this certification path, using the\n specified encoding."}, {"method_name": "getCertificates", "method_sig": "public abstract List<? extends Certificate> getCertificates()", "description": "Returns the list of certificates in this certification path.\n The List returned must be immutable and thread-safe."}, {"method_name": "writeReplace", "method_sig": "protected Object writeReplace()\n                       throws ObjectStreamException", "description": "Replaces the CertPath to be serialized with a\n CertPathRep object."}]}