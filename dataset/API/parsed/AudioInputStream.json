{"name": "Class AudioInputStream", "module": "java.desktop", "package": "javax.sound.sampled", "text": "An audio input stream is an input stream with a specified audio format and\n length. The length is expressed in sample frames, not bytes. Several methods\n are provided for reading a certain number of bytes from the stream, or an\n unspecified number of bytes. The audio input stream keeps track of the last\n byte that was read. You can skip over an arbitrary number of bytes to get to\n a later position for reading. An audio input stream may support marks. When\n you set a mark, the current position is remembered so that you can return to\n it later.\n \n The AudioSystem class includes many methods that manipulate\n AudioInputStream objects. For example, the methods let you:\n \nobtain an audio input stream from an external audio file, stream, or\n   URL\nwrite an external file from an audio input stream\n   convert an audio input stream to a different audio format\n ", "codes": ["public class AudioInputStream\nextends InputStream"], "fields": [{"field_name": "format", "field_sig": "protected\u00a0AudioFormat format", "description": "The format of the audio data contained in the stream."}, {"field_name": "frameLength", "field_sig": "protected\u00a0long frameLength", "description": "This stream's length, in sample frames."}, {"field_name": "frameSize", "field_sig": "protected\u00a0int frameSize", "description": "The size of each frame, in bytes."}, {"field_name": "framePos", "field_sig": "protected\u00a0long framePos", "description": "The current position in this stream, in sample frames (zero-based)."}], "methods": [{"method_name": "getFormat", "method_sig": "public AudioFormat getFormat()", "description": "Obtains the audio format of the sound data in this audio input stream."}, {"method_name": "getFrameLength", "method_sig": "public long getFrameLength()", "description": "Obtains the length of the stream, expressed in sample frames rather than\n bytes."}, {"method_name": "read", "method_sig": "public int read()\n         throws IOException", "description": "Reads the next byte of data from the audio input stream. The audio input\n stream's frame size must be one byte, or an IOException will be\n thrown."}, {"method_name": "read", "method_sig": "public int read (byte[] b)\n         throws IOException", "description": "Reads some number of bytes from the audio input stream and stores them\n into the buffer array b. The number of bytes actually read is\n returned as an integer. This method blocks until input data is available,\n the end of the stream is detected, or an exception is thrown.\n \n This method will always read an integral number of frames. If the length\n of the array is not an integral number of frames, a maximum of\n b.length - (b.length % frameSize) bytes will be read."}, {"method_name": "read", "method_sig": "public int read (byte[] b,\n                int off,\n                int len)\n         throws IOException", "description": "Reads up to a specified maximum number of bytes of data from the audio\n stream, putting them into the given byte array.\n \n This method will always read an integral number of frames. If len\n does not specify an integral number of frames, a maximum of\n len - (len % frameSize) bytes will be read."}, {"method_name": "skip", "method_sig": "public long skip (long n)\n          throws IOException", "description": "Skips over and discards a specified number of bytes from this audio input\n stream.\n \n This method will always skip an integral number of frames. If n\n does not specify an integral number of frames, a maximum of\n n - (n % frameSize) bytes will be skipped."}, {"method_name": "available", "method_sig": "public int available()\n              throws IOException", "description": "Returns the maximum number of bytes that can be read (or skipped over)\n from this audio input stream without blocking. This limit applies only to\n the next invocation of a read or skip method for this\n audio input stream; the limit can vary each time these methods are\n invoked. Depending on the underlying stream, an IOException may\n be thrown if this stream is closed."}, {"method_name": "close", "method_sig": "public void close()\n           throws IOException", "description": "Closes this audio input stream and releases any system resources\n associated with the stream."}, {"method_name": "mark", "method_sig": "public void mark (int readlimit)", "description": "Marks the current position in this audio input stream."}, {"method_name": "reset", "method_sig": "public void reset()\n           throws IOException", "description": "Repositions this audio input stream to the position it had at the time\n its mark method was last invoked."}, {"method_name": "markSupported", "method_sig": "public boolean markSupported()", "description": "Tests whether this audio input stream supports the mark and\n reset methods."}]}