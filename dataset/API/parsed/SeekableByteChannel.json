{"name": "Interface SeekableByteChannel", "module": "java.base", "package": "java.nio.channels", "text": "A byte channel that maintains a current position and allows the\n position to be changed.\n\n  A seekable byte channel is connected to an entity, typically a file,\n that contains a variable-length sequence of bytes that can be read and\n written. The current position can be queried and\n modified. The channel also provides access to\n the current size of the entity to which the channel is connected. The\n size increases when bytes are written beyond its current size; the size\n decreases when it is truncated.\n\n  The position and truncate methods\n which do not otherwise have a value to return are specified to return the\n channel upon which they are invoked. This allows method invocations to be\n chained. Implementations of this interface should specialize the return type\n so that method invocations on the implementation class can be chained.", "codes": ["public interface SeekableByteChannel\nextends ByteChannel"], "fields": [], "methods": [{"method_name": "read", "method_sig": "int read (ByteBuffer dst)\n  throws IOException", "description": "Reads a sequence of bytes from this channel into the given buffer.\n\n  Bytes are read starting at this channel's current position, and\n then the position is updated with the number of bytes actually read.\n Otherwise this method behaves exactly as specified in the ReadableByteChannel interface."}, {"method_name": "write", "method_sig": "int write (ByteBuffer src)\n   throws IOException", "description": "Writes a sequence of bytes to this channel from the given buffer.\n\n  Bytes are written starting at this channel's current position, unless\n the channel is connected to an entity such as a file that is opened with\n the APPEND option, in\n which case the position is first advanced to the end. The entity to which\n the channel is connected is grown, if necessary, to accommodate the\n written bytes, and then the position is updated with the number of bytes\n actually written. Otherwise this method behaves exactly as specified by\n the WritableByteChannel interface."}, {"method_name": "position", "method_sig": "long position()\n       throws IOException", "description": "Returns this channel's position."}, {"method_name": "position", "method_sig": "SeekableByteChannel position (long newPosition)\n                      throws IOException", "description": "Sets this channel's position.\n\n  Setting the position to a value that is greater than the current size\n is legal but does not change the size of the entity.  A later attempt to\n read bytes at such a position will immediately return an end-of-file\n indication.  A later attempt to write bytes at such a position will cause\n the entity to grow to accommodate the new bytes; the values of any bytes\n between the previous end-of-file and the newly-written bytes are\n unspecified.\n\n  Setting the channel's position is not recommended when connected to\n an entity, typically a file, that is opened with the APPEND option. When opened for\n append, the position is first advanced to the end before writing."}, {"method_name": "size", "method_sig": "long size()\n   throws IOException", "description": "Returns the current size of entity to which this channel is connected."}, {"method_name": "truncate", "method_sig": "SeekableByteChannel truncate (long size)\n                      throws IOException", "description": "Truncates the entity, to which this channel is connected, to the given\n size.\n\n  If the given size is less than the current size then the entity is\n truncated, discarding any bytes beyond the new end. If the given size is\n greater than or equal to the current size then the entity is not modified.\n In either case, if the current position is greater than the given size\n then it is set to that size.\n\n  An implementation of this interface may prohibit truncation when\n connected to an entity, typically a file, opened with the APPEND option."}]}