{"name": "Class PageAttributes", "module": "java.desktop", "package": "java.awt", "text": "A set of attributes which control the output of a printed page.\n \n Instances of this class control the color state, paper size (media type),\n orientation, logical origin, print quality, and resolution of every\n page which uses the instance. Attribute names are compliant with the\n Internet Printing Protocol (IPP) 1.1 where possible. Attribute values\n are partially compliant where possible.\n \n To use a method which takes an inner class type, pass a reference to\n one of the constant fields of the inner class. Client code cannot create\n new instances of the inner class types because none of those classes\n has a public constructor. For example, to set the color state to\n monochrome, use the following code:\n \n import java.awt.PageAttributes;\n\n public class MonochromeExample {\n     public void setMonochrome(PageAttributes pageAttributes) {\n         pageAttributes.setColor(PageAttributes.ColorType.MONOCHROME);\n     }\n }\n \n\n Every IPP attribute which supports an attributeName-default value\n has a corresponding setattributeNameToDefault method.\n Default value fields are not provided.", "codes": ["public final class PageAttributes\nextends Object\nimplements Cloneable"], "fields": [], "methods": [{"method_name": "clone", "method_sig": "public Object clone()", "description": "Creates and returns a copy of this PageAttributes."}, {"method_name": "set", "method_sig": "public void set (PageAttributes obj)", "description": "Sets all of the attributes of this PageAttributes to the same values as\n the attributes of obj."}, {"method_name": "getColor", "method_sig": "public PageAttributes.ColorType getColor()", "description": "Returns whether pages using these attributes will be rendered in\n color or monochrome. This attribute is updated to the value chosen\n by the user."}, {"method_name": "setColor", "method_sig": "public void setColor (PageAttributes.ColorType color)", "description": "Specifies whether pages using these attributes will be rendered in\n color or monochrome. Not specifying this attribute is equivalent to\n specifying ColorType.MONOCHROME."}, {"method_name": "getMedia", "method_sig": "public PageAttributes.MediaType getMedia()", "description": "Returns the paper size for pages using these attributes. This\n attribute is updated to the value chosen by the user."}, {"method_name": "setMedia", "method_sig": "public void setMedia (PageAttributes.MediaType media)", "description": "Specifies the desired paper size for pages using these attributes. The\n actual paper size will be determined by the limitations of the target\n printer. If an exact match cannot be found, an implementation will\n choose the closest possible match. Not specifying this attribute is\n equivalent to specifying the default size for the default locale. The\n default size for locales in the United States and Canada is\n MediaType.NA_LETTER. The default size for all other locales is\n MediaType.ISO_A4."}, {"method_name": "setMediaToDefault", "method_sig": "public void setMediaToDefault()", "description": "Sets the paper size for pages using these attributes to the default\n size for the default locale. The default size for locales in the\n United States and Canada is MediaType.NA_LETTER. The default size for\n all other locales is MediaType.ISO_A4."}, {"method_name": "getOrientationRequested", "method_sig": "public PageAttributes.OrientationRequestedType getOrientationRequested()", "description": "Returns the print orientation for pages using these attributes. This\n attribute is updated to the value chosen by the user."}, {"method_name": "setOrientationRequested", "method_sig": "public void setOrientationRequested (PageAttributes.OrientationRequestedType orientationRequested)", "description": "Specifies the print orientation for pages using these attributes. Not\n specifying the property is equivalent to specifying\n OrientationRequestedType.PORTRAIT."}, {"method_name": "setOrientationRequested", "method_sig": "public void setOrientationRequested (int orientationRequested)", "description": "Specifies the print orientation for pages using these attributes.\n Specifying 3 denotes portrait. Specifying 4\n denotes landscape. Specifying any other value will generate an\n IllegalArgumentException. Not specifying the property is equivalent\n to calling setOrientationRequested(OrientationRequestedType.PORTRAIT)."}, {"method_name": "setOrientationRequestedToDefault", "method_sig": "public void setOrientationRequestedToDefault()", "description": "Sets the print orientation for pages using these attributes to the\n default. The default orientation is portrait."}, {"method_name": "getOrigin", "method_sig": "public PageAttributes.OriginType getOrigin()", "description": "Returns whether drawing at (0, 0) to pages using these attributes\n draws at the upper-left corner of the physical page, or at the\n upper-left corner of the printable area. (Note that these locations\n could be equivalent.) This attribute cannot be modified by,\n and is not subject to any limitations of, the implementation or the\n target printer."}, {"method_name": "setOrigin", "method_sig": "public void setOrigin (PageAttributes.OriginType origin)", "description": "Specifies whether drawing at (0, 0) to pages using these attributes\n draws at the upper-left corner of the physical page, or at the\n upper-left corner of the printable area. (Note that these locations\n could be equivalent.) Not specifying the property is equivalent to\n specifying OriginType.PHYSICAL."}, {"method_name": "getPrintQuality", "method_sig": "public PageAttributes.PrintQualityType getPrintQuality()", "description": "Returns the print quality for pages using these attributes. This\n attribute is updated to the value chosen by the user."}, {"method_name": "setPrintQuality", "method_sig": "public void setPrintQuality (PageAttributes.PrintQualityType printQuality)", "description": "Specifies the print quality for pages using these attributes. Not\n specifying the property is equivalent to specifying\n PrintQualityType.NORMAL."}, {"method_name": "setPrintQuality", "method_sig": "public void setPrintQuality (int printQuality)", "description": "Specifies the print quality for pages using these attributes.\n Specifying 3 denotes draft. Specifying 4\n denotes normal. Specifying 5 denotes high. Specifying\n any other value will generate an IllegalArgumentException. Not\n specifying the property is equivalent to calling\n setPrintQuality(PrintQualityType.NORMAL)."}, {"method_name": "setPrintQualityToDefault", "method_sig": "public void setPrintQualityToDefault()", "description": "Sets the print quality for pages using these attributes to the default.\n The default print quality is normal."}, {"method_name": "getPrinterResolution", "method_sig": "public int[] getPrinterResolution()", "description": "Returns the print resolution for pages using these attributes.\n Index 0 of the array specifies the cross feed direction resolution\n (typically the horizontal resolution). Index 1 of the array specifies\n the feed direction resolution (typically the vertical resolution).\n Index 2 of the array specifies whether the resolutions are in dots per\n inch or dots per centimeter. 3 denotes dots per inch.\n 4 denotes dots per centimeter."}, {"method_name": "setPrinterResolution", "method_sig": "public void setPrinterResolution (int[] printerResolution)", "description": "Specifies the desired print resolution for pages using these attributes.\n The actual resolution will be determined by the limitations of the\n implementation and the target printer. Index 0 of the array specifies\n the cross feed direction resolution (typically the horizontal\n resolution). Index 1 of the array specifies the feed direction\n resolution (typically the vertical resolution). Index 2 of the array\n specifies whether the resolutions are in dots per inch or dots per\n centimeter. 3 denotes dots per inch. 4\n denotes dots per centimeter. Note that the 1.1 printing implementation\n (Toolkit.getPrintJob) requires that the feed and cross feed resolutions\n be the same. Not specifying the property is equivalent to calling\n setPrinterResolution(72)."}, {"method_name": "setPrinterResolution", "method_sig": "public void setPrinterResolution (int printerResolution)", "description": "Specifies the desired cross feed and feed print resolutions in dots per\n inch for pages using these attributes. The same value is used for both\n resolutions. The actual resolutions will be determined by the\n limitations of the implementation and the target printer. Not\n specifying the property is equivalent to specifying 72."}, {"method_name": "setPrinterResolutionToDefault", "method_sig": "public void setPrinterResolutionToDefault()", "description": "Sets the printer resolution for pages using these attributes to the\n default. The default is 72 dpi for both the feed and cross feed\n resolutions."}, {"method_name": "equals", "method_sig": "public boolean equals (Object obj)", "description": "Determines whether two PageAttributes are equal to each other.\n \n Two PageAttributes are equal if and only if each of their attributes are\n equal. Attributes of enumeration type are equal if and only if the\n fields refer to the same unique enumeration object. This means that\n an aliased media is equal to its underlying unique media. Printer\n resolutions are equal if and only if the feed resolution, cross feed\n resolution, and units are equal."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Returns a hash code value for this PageAttributes."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a string representation of this PageAttributes."}]}