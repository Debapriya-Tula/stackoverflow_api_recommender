{"name": "Class PhantomReference<T>", "module": "java.base", "package": "java.lang.ref", "text": "Phantom reference objects, which are enqueued after the collector\n determines that their referents may otherwise be reclaimed.  Phantom\n references are most often used to schedule post-mortem cleanup actions.\n\n  Suppose the garbage collector determines at a certain point in time\n that an object is \n phantom reachable.  At that time it will atomically clear\n all phantom references to that object and all phantom references to\n any other phantom-reachable objects from which that object is reachable.\n At the same time or at some later time it will enqueue those newly-cleared\n phantom references that are registered with reference queues.\n\n  In order to ensure that a reclaimable object remains so, the referent of\n a phantom reference may not be retrieved: The get method of a\n phantom reference always returns null.", "codes": ["public class PhantomReference<T>\nextends Reference<T>"], "fields": [], "methods": [{"method_name": "get", "method_sig": "public T get()", "description": "Returns this reference object's referent.  Because the referent of a\n phantom reference is always inaccessible, this method always returns\n null."}]}