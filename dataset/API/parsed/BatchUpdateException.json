{"name": "Class BatchUpdateException", "module": "java.sql", "package": "java.sql", "text": "The subclass of SQLException thrown when an error\n occurs during a batch update operation.  In addition to the\n information provided by SQLException, a\n BatchUpdateException provides the update\n counts for all commands that were executed successfully during the\n batch update, that is, all commands that were executed before the error\n occurred.  The order of elements in an array of update counts\n corresponds to the order in which commands were added to the batch.\n \n After a command in a batch update fails to execute properly\n and a BatchUpdateException is thrown, the driver\n may or may not continue to process the remaining commands in\n the batch.  If the driver continues processing after a failure,\n the array returned by the method\n BatchUpdateException.getUpdateCounts will have\n an element for every command in the batch rather than only\n elements for the commands that executed successfully before\n the error.  In the case where the driver continues processing\n commands, the array element for any command\n that failed is Statement.EXECUTE_FAILED.\n \n A JDBC driver implementation should use\n the constructor BatchUpdateException(String reason, String SQLState,\n int vendorCode, long []updateCounts,Throwable cause)  instead of\n constructors that take int[] for the update counts to avoid the\n possibility of overflow.\n \n If Statement.executeLargeBatch method is invoked it is recommended that\n getLargeUpdateCounts be called instead of getUpdateCounts\n in order to avoid a possible overflow of the integer update count.", "codes": ["public class BatchUpdateException\nextends SQLException"], "fields": [], "methods": [{"method_name": "getUpdateCounts", "method_sig": "public int[] getUpdateCounts()", "description": "Retrieves the update count for each update statement in the batch\n update that executed successfully before this exception occurred.\n A driver that implements batch updates may or may not continue to\n process the remaining commands in a batch when one of the commands\n fails to execute properly. If the driver continues processing commands,\n the array returned by this method will have as many elements as\n there are commands in the batch; otherwise, it will contain an\n update count for each command that executed successfully before\n the BatchUpdateException was thrown.\n \n The possible return values for this method were modified for\n the Java 2 SDK, Standard Edition, version 1.3.  This was done to\n accommodate the new option of continuing to process commands\n in a batch update after a BatchUpdateException object\n has been thrown."}, {"method_name": "getLargeUpdateCounts", "method_sig": "public long[] getLargeUpdateCounts()", "description": "Retrieves the update count for each update statement in the batch\n update that executed successfully before this exception occurred.\n A driver that implements batch updates may or may not continue to\n process the remaining commands in a batch when one of the commands\n fails to execute properly. If the driver continues processing commands,\n the array returned by this method will have as many elements as\n there are commands in the batch; otherwise, it will contain an\n update count for each command that executed successfully before\n the BatchUpdateException was thrown.\n \n This method should be used when Statement.executeLargeBatch is\n invoked and the returned update count may exceed Integer.MAX_VALUE."}]}