{"name": "Interface RuntimeMXBean", "module": "java.management", "package": "java.lang.management", "text": "The management interface for the runtime system of\n the Java virtual machine.\n\n  A Java virtual machine has a single instance of the implementation\n class of this interface.  This instance implementing this interface is\n an MXBean\n that can be obtained by calling\n the ManagementFactory.getRuntimeMXBean() method or\n from the platform MBeanServer method.\n\n The ObjectName for uniquely identifying the MXBean for\n the runtime system within an MBeanServer is:\n \njava.lang:type=Runtime\n\n\n It can be obtained by calling the\n PlatformManagedObject.getObjectName() method.\n\n  This interface defines several convenient methods for accessing\n system properties about the Java virtual machine.", "codes": ["public interface RuntimeMXBean\nextends PlatformManagedObject"], "fields": [], "methods": [{"method_name": "getPid", "method_sig": "default long getPid()", "description": "Returns the process ID representing\n the running Java virtual machine."}, {"method_name": "getName", "method_sig": "String getName()", "description": "Returns the name representing the running Java virtual machine.\n The returned name string can be any arbitrary string and\n a Java virtual machine implementation can choose\n to embed platform-specific useful information in the\n returned name string.  Each running virtual machine could have\n a different name."}, {"method_name": "getVmName", "method_sig": "String getVmName()", "description": "Returns the Java virtual machine implementation name.\n This method is equivalent to System.getProperty(\"java.vm.name\")."}, {"method_name": "getVmVendor", "method_sig": "String getVmVendor()", "description": "Returns the Java virtual machine implementation vendor.\n This method is equivalent to System.getProperty(\"java.vm.vendor\")."}, {"method_name": "getVmVersion", "method_sig": "String getVmVersion()", "description": "Returns the Java virtual machine implementation version.\n This method is equivalent to System.getProperty(\"java.vm.version\")."}, {"method_name": "getSpecName", "method_sig": "String getSpecName()", "description": "Returns the Java virtual machine specification name.\n This method is equivalent to System.getProperty(\"java.vm.specification.name\")."}, {"method_name": "getSpecVendor", "method_sig": "String getSpecVendor()", "description": "Returns the Java virtual machine specification vendor.\n This method is equivalent to System.getProperty(\"java.vm.specification.vendor\")."}, {"method_name": "getSpecVersion", "method_sig": "String getSpecVersion()", "description": "Returns the Java virtual machine specification version.\n This method is equivalent to System.getProperty(\"java.vm.specification.version\")."}, {"method_name": "getManagementSpecVersion", "method_sig": "String getManagementSpecVersion()", "description": "Returns the version of the specification for the management interface\n implemented by the running Java virtual machine."}, {"method_name": "getClassPath", "method_sig": "String getClassPath()", "description": "Returns the Java class path that is used by the system class loader\n to search for class files.\n This method is equivalent to System.getProperty(\"java.class.path\").\n\n  Multiple paths in the Java class path are separated by the\n path separator character of the platform of the Java virtual machine\n being monitored."}, {"method_name": "getLibraryPath", "method_sig": "String getLibraryPath()", "description": "Returns the Java library path.\n This method is equivalent to System.getProperty(\"java.library.path\").\n\n  Multiple paths in the Java library path are separated by the\n path separator character of the platform of the Java virtual machine\n being monitored."}, {"method_name": "isBootClassPathSupported", "method_sig": "boolean isBootClassPathSupported()", "description": "Tests if the Java virtual machine supports the boot class path\n mechanism used by the bootstrap class loader to search for class\n files."}, {"method_name": "getBootClassPath", "method_sig": "String getBootClassPath()", "description": "Returns the boot class path that is used by the bootstrap class loader\n to search for class files.\n\n  Multiple paths in the boot class path are separated by the\n path separator character of the platform on which the Java\n virtual machine is running.\n\n A Java virtual machine implementation may not support\n the boot class path mechanism for the bootstrap class loader\n to search for class files.\n The isBootClassPathSupported() method can be used\n to determine if the Java virtual machine supports this method."}, {"method_name": "getInputArguments", "method_sig": "List<String> getInputArguments()", "description": "Returns the input arguments passed to the Java virtual machine\n which does not include the arguments to the main method.\n This method returns an empty list if there is no input argument\n to the Java virtual machine.\n \n Some Java virtual machine implementations may take input arguments\n from multiple different sources: for examples, arguments passed from\n the application that launches the Java virtual machine such as\n the 'java' command, environment variables, configuration files, etc.\n \n Typically, not all command-line options to the 'java' command\n are passed to the Java virtual machine.\n Thus, the returned input arguments may not\n include all command-line options.\n\n \nMBeanServer access:\n The mapped type of List<String> is String[]."}, {"method_name": "getUptime", "method_sig": "long getUptime()", "description": "Returns the uptime of the Java virtual machine in milliseconds."}, {"method_name": "getStartTime", "method_sig": "long getStartTime()", "description": "Returns the start time of the Java virtual machine in milliseconds.\n This method returns the approximate time when the Java virtual\n machine started."}, {"method_name": "getSystemProperties", "method_sig": "Map<String, String> getSystemProperties()", "description": "Returns a map of names and values of all system properties.\n This method calls System.getProperties() to get all\n system properties.  Properties whose name or value is not\n a String are omitted.\n\n \nMBeanServer access:\n The mapped type of Map<String,String> is\n TabularData\n with two items in each row as follows:\n \nName and Type for each item\n\n\nItem Name\nItem Type\n\n\n\n\nkey\nString\n\n\nvalue\nString\n\n\n"}]}