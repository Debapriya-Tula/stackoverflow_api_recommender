{"name": "Class Inet6Address", "module": "java.base", "package": "java.net", "text": "This class represents an Internet Protocol version 6 (IPv6) address.\n Defined by \nRFC\u00a02373: IP Version 6 Addressing Architecture.\n\n  Textual representation of IP addresses \n\n Textual representation of IPv6 address used as input to methods\n takes one of the following forms:\n\n \n The preferred form is x:x:x:x:x:x:x:x,\n   where the 'x's are\n   the hexadecimal values of the eight 16-bit pieces of the\n   address. This is the full form.  For example,\n\n   \n1080:0:0:0:8:800:200C:417A\n\n Note that it is not necessary to write the leading zeros in\n   an individual field. However, there must be at least one numeral\n   in every field, except as described below.\n Due to some methods of allocating certain styles of IPv6\n   addresses, it will be common for addresses to contain long\n   strings of zero bits. In order to make writing addresses\n   containing zero bits easier, a special syntax is available to\n   compress the zeros. The use of \"::\" indicates multiple groups\n   of 16-bits of zeros. The \"::\" can only appear once in an address.\n   The \"::\" can also be used to compress the leading and/or trailing\n   zeros in an address. For example,\n\n   \n1080::8:800:200C:417A\n\n An alternative form that is sometimes more convenient\n   when dealing with a mixed environment of IPv4 and IPv6 nodes is\n   x:x:x:x:x:x:d.d.d.d, where the 'x's are the hexadecimal values\n   of the six high-order 16-bit pieces of the address, and the 'd's\n   are the decimal values of the four low-order 8-bit pieces of the\n   standard IPv4 representation address, for example,\n\n   \n::FFFF:129.144.52.38\n::129.144.52.38\n\n where \"::FFFF:d.d.d.d\" and \"::d.d.d.d\" are, respectively, the\n   general forms of an IPv4-mapped IPv6 address and an\n   IPv4-compatible IPv6 address. Note that the IPv4 portion must be\n   in the \"d.d.d.d\" form. The following forms are invalid:\n\n   \n::FFFF:d.d.d\n::FFFF:d.d\n::d.d.d\n::d.d\n\n The following form:\n\n   \n::FFFF:d\n\n is valid, however it is an unconventional representation of\n   the IPv4-compatible IPv6 address,\n\n   \n::255.255.0.d\n\n while \"::d\" corresponds to the general IPv6 address\n   \"0:0:0:0:0:0:0:d\".\n\n For methods that return a textual representation as output\n value, the full form is used. Inet6Address will return the full\n form because it is unambiguous when used in combination with other\n textual data.\n\n  Special IPv6 address \n\n\nDescription of IPv4-mapped address\nIPv4-mapped address\nOf the form ::ffff:w.x.y.z, this IPv6 address is used to\n         represent an IPv4 address. It allows the native program to\n         use the same address data structure and also the same\n         socket when communicating with both IPv4 and IPv6 nodes.\n\n         In InetAddress and Inet6Address, it is used for internal\n         representation; it has no functional role. Java will never\n         return an IPv4-mapped address.  These classes can take an\n         IPv4-mapped address as input, both in byte array and text\n         representation. However, it will be converted into an IPv4\n         address.\n\nTextual representation of IPv6 scoped addresses\n The textual representation of IPv6 addresses as described above can be\n extended to specify IPv6 scoped addresses. This extension to the basic\n addressing architecture is described in [draft-ietf-ipngwg-scoping-arch-04.txt].\n\n  Because link-local and site-local addresses are non-global, it is possible\n that different hosts may have the same destination address and may be\n reachable through different interfaces on the same originating system. In\n this case, the originating system is said to be connected to multiple zones\n of the same scope. In order to disambiguate which is the intended destination\n zone, it is possible to append a zone identifier (or scope_id) to an\n IPv6 address.\n\n  The general format for specifying the scope_id is the following:\n\n IPv6-address%scope_id\n The IPv6-address is a literal IPv6 address as described above.\n The scope_id refers to an interface on the local system, and it can be\n specified in two ways.\n As a numeric identifier. This must be a positive integer\n that identifies the particular interface and scope as understood by the\n system. Usually, the numeric values can be determined through administration\n tools on the system. Each interface may have multiple values, one for each\n scope. If the scope is unspecified, then the default value used is zero.\nAs a string. This must be the exact string that is returned by\n NetworkInterface.getName() for the particular interface in\n question. When an Inet6Address is created in this way, the numeric scope-id\n is determined at the time the object is created by querying the relevant\n NetworkInterface.\n Note also, that the numeric scope_id can be retrieved from\n Inet6Address instances returned from the NetworkInterface class. This can be\n used to find out the current scope ids configured on the system.", "codes": ["public final class Inet6Address\nextends InetAddress"], "fields": [], "methods": [{"method_name": "getByAddress", "method_sig": "public static Inet6Address getByAddress (String host,\n                                        byte[] addr,\n                                        NetworkInterface nif)\n                                 throws UnknownHostException", "description": "Create an Inet6Address in the exact manner of InetAddress.getByAddress(String,byte[]) except that the IPv6 scope_id is\n set to the value corresponding to the given interface for the address\n type specified in addr. The call will fail with an\n UnknownHostException if the given interface does not have a numeric\n scope_id assigned for the given address type (eg. link-local or site-local).\n See here for a description of IPv6\n scoped addresses."}, {"method_name": "getByAddress", "method_sig": "public static Inet6Address getByAddress (String host,\n                                        byte[] addr,\n                                        int scope_id)\n                                 throws UnknownHostException", "description": "Create an Inet6Address in the exact manner of InetAddress.getByAddress(String,byte[]) except that the IPv6 scope_id is\n set to the given numeric value. The scope_id is not checked to determine\n if it corresponds to any interface on the system.\n See here for a description of IPv6\n scoped addresses."}, {"method_name": "isMulticastAddress", "method_sig": "public boolean isMulticastAddress()", "description": "Utility routine to check if the InetAddress is an IP multicast\n address. 11111111 at the start of the address identifies the\n address as being a multicast address."}, {"method_name": "isAnyLocalAddress", "method_sig": "public boolean isAnyLocalAddress()", "description": "Utility routine to check if the InetAddress is a wildcard address."}, {"method_name": "isLoopbackAddress", "method_sig": "public boolean isLoopbackAddress()", "description": "Utility routine to check if the InetAddress is a loopback address."}, {"method_name": "isLinkLocalAddress", "method_sig": "public boolean isLinkLocalAddress()", "description": "Utility routine to check if the InetAddress is an link local address."}, {"method_name": "isSiteLocalAddress", "method_sig": "public boolean isSiteLocalAddress()", "description": "Utility routine to check if the InetAddress is a site local address."}, {"method_name": "isMCGlobal", "method_sig": "public boolean isMCGlobal()", "description": "Utility routine to check if the multicast address has global scope."}, {"method_name": "isMCNodeLocal", "method_sig": "public boolean isMCNodeLocal()", "description": "Utility routine to check if the multicast address has node scope."}, {"method_name": "isMCLinkLocal", "method_sig": "public boolean isMCLinkLocal()", "description": "Utility routine to check if the multicast address has link scope."}, {"method_name": "isMCSiteLocal", "method_sig": "public boolean isMCSiteLocal()", "description": "Utility routine to check if the multicast address has site scope."}, {"method_name": "isMCOrgLocal", "method_sig": "public boolean isMCOrgLocal()", "description": "Utility routine to check if the multicast address has organization scope."}, {"method_name": "getAddress", "method_sig": "public byte[] getAddress()", "description": "Returns the raw IP address of this InetAddress object. The result\n is in network byte order: the highest order byte of the address is in\n getAddress()[0]."}, {"method_name": "getScopeId", "method_sig": "public int getScopeId()", "description": "Returns the numeric scopeId, if this instance is associated with\n an interface. If no scoped_id is set, the returned value is zero."}, {"method_name": "getScopedInterface", "method_sig": "public NetworkInterface getScopedInterface()", "description": "Returns the scoped interface, if this instance was created with\n with a scoped interface."}, {"method_name": "getHostAddress", "method_sig": "public String getHostAddress()", "description": "Returns the IP address string in textual presentation. If the instance\n was created specifying a scope identifier then the scope id is appended\n to the IP address preceded by a \"%\" (per-cent) character. This can be\n either a numeric value or a string, depending on which was used to create\n the instance."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Returns a hashcode for this IP address."}, {"method_name": "equals", "method_sig": "public boolean equals (Object obj)", "description": "Compares this object against the specified object. The result is \n true if and only if the argument is not null and it represents\n the same IP address as this object.\n\n  Two instances of InetAddress represent the same IP address\n if the length of the byte arrays returned by getAddress is the\n same for both, and each of the array components is the same for the byte\n arrays."}, {"method_name": "isIPv4CompatibleAddress", "method_sig": "public boolean isIPv4CompatibleAddress()", "description": "Utility routine to check if the InetAddress is an\n IPv4 compatible IPv6 address."}]}