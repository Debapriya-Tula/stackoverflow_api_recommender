{"name": "Class StringBuilder", "module": "java.base", "package": "java.lang", "text": "A mutable sequence of characters.  This class provides an API compatible\n with StringBuffer, but with no guarantee of synchronization.\n This class is designed for use as a drop-in replacement for\n StringBuffer in places where the string buffer was being\n used by a single thread (as is generally the case).   Where possible,\n it is recommended that this class be used in preference to\n StringBuffer as it will be faster under most implementations.\n\n The principal operations on a StringBuilder are the\n append and insert methods, which are\n overloaded so as to accept data of any type. Each effectively\n converts a given datum to a string and then appends or inserts the\n characters of that string to the string builder. The\n append method always adds these characters at the end\n of the builder; the insert method adds the characters at\n a specified point.\n \n For example, if z refers to a string builder object\n whose current contents are \"start\", then\n the method call z.append(\"le\") would cause the string\n builder to contain \"startle\", whereas\n z.insert(4, \"le\") would alter the string builder to\n contain \"starlet\".\n \n In general, if sb refers to an instance of a StringBuilder,\n then sb.append(x) has the same effect as\n sb.insert(sb.length(), x).\n \n Every string builder has a capacity. As long as the length of the\n character sequence contained in the string builder does not exceed\n the capacity, it is not necessary to allocate a new internal\n buffer. If the internal buffer overflows, it is automatically made larger.\n\n Instances of StringBuilder are not safe for\n use by multiple threads. If such synchronization is required then it is\n recommended that StringBuffer be used.\n\n Unless otherwise noted, passing a null argument to a constructor\n or method in this class will cause a NullPointerException to be\n thrown.", "codes": ["public final class StringBuilder\nextends Object\nimplements Serializable, Comparable<StringBuilder>, CharSequence"], "fields": [], "methods": [{"method_name": "compareTo", "method_sig": "public int compareTo (StringBuilder another)", "description": "Compares two StringBuilder instances lexicographically. This method\n follows the same rules for lexicographical comparison as defined in the\n CharSequence.compare(this, another) method.\n\n \n For finer-grained, locale-sensitive String comparison, refer to\n Collator."}, {"method_name": "append", "method_sig": "public StringBuilder append (Object obj)", "description": "Appends the string representation of the Object argument.\n \n The overall effect is exactly as if the argument were converted\n to a string by the method String.valueOf(Object),\n and the characters of that string were then\n appended to this character sequence."}, {"method_name": "append", "method_sig": "public StringBuilder append (String str)", "description": "Appends the specified string to this character sequence.\n \n The characters of the String argument are appended, in\n order, increasing the length of this sequence by the length of the\n argument. If str is null, then the four\n characters \"null\" are appended.\n \n Let n be the length of this character sequence just prior to\n execution of the append method. Then the character at\n index k in the new character sequence is equal to the character\n at index k in the old character sequence, if k is less\n than n; otherwise, it is equal to the character at index\n k-n in the argument str."}, {"method_name": "append", "method_sig": "public StringBuilder append (StringBuffer sb)", "description": "Appends the specified StringBuffer to this sequence.\n \n The characters of the StringBuffer argument are appended,\n in order, to this sequence, increasing the\n length of this sequence by the length of the argument.\n If sb is null, then the four characters\n \"null\" are appended to this sequence.\n \n Let n be the length of this character sequence just prior to\n execution of the append method. Then the character at index\n k in the new character sequence is equal to the character at\n index k in the old character sequence, if k is less than\n n; otherwise, it is equal to the character at index k-n\n in the argument sb."}, {"method_name": "append", "method_sig": "public StringBuilder append (CharSequence s)", "description": "Description copied from interface:\u00a0Appendable"}, {"method_name": "append", "method_sig": "public StringBuilder append (CharSequence s,\n                            int start,\n                            int end)", "description": "Appends a subsequence of the specified CharSequence to this\n sequence.\n \n Characters of the argument s, starting at\n index start, are appended, in order, to the contents of\n this sequence up to the (exclusive) index end. The length\n of this sequence is increased by the value of end - start.\n \n Let n be the length of this character sequence just prior to\n execution of the append method. Then the character at\n index k in this character sequence becomes equal to the\n character at index k in this sequence, if k is less than\n n; otherwise, it is equal to the character at index\n k+start-n in the argument s.\n \n If s is null, then this method appends\n characters as if the s parameter was a sequence containing the four\n characters \"null\"."}, {"method_name": "append", "method_sig": "public StringBuilder append (char[] str)", "description": "Appends the string representation of the char array\n argument to this sequence.\n \n The characters of the array argument are appended, in order, to\n the contents of this sequence. The length of this sequence\n increases by the length of the argument.\n \n The overall effect is exactly as if the argument were converted\n to a string by the method String.valueOf(char[]),\n and the characters of that string were then\n appended to this character sequence."}, {"method_name": "append", "method_sig": "public StringBuilder append (char[] str,\n                            int offset,\n                            int len)", "description": "Appends the string representation of a subarray of the\n char array argument to this sequence.\n \n Characters of the char array str, starting at\n index offset, are appended, in order, to the contents\n of this sequence. The length of this sequence increases\n by the value of len.\n \n The overall effect is exactly as if the arguments were converted\n to a string by the method String.valueOf(char[],int,int),\n and the characters of that string were then\n appended to this character sequence."}, {"method_name": "append", "method_sig": "public StringBuilder append (boolean b)", "description": "Appends the string representation of the boolean\n argument to the sequence.\n \n The overall effect is exactly as if the argument were converted\n to a string by the method String.valueOf(boolean),\n and the characters of that string were then\n appended to this character sequence."}, {"method_name": "append", "method_sig": "public StringBuilder append (char c)", "description": "Appends the string representation of the char\n argument to this sequence.\n \n The argument is appended to the contents of this sequence.\n The length of this sequence increases by 1.\n \n The overall effect is exactly as if the argument were converted\n to a string by the method String.valueOf(char),\n and the character in that string were then\n appended to this character sequence."}, {"method_name": "append", "method_sig": "public StringBuilder append (int i)", "description": "Appends the string representation of the int\n argument to this sequence.\n \n The overall effect is exactly as if the argument were converted\n to a string by the method String.valueOf(int),\n and the characters of that string were then\n appended to this character sequence."}, {"method_name": "append", "method_sig": "public StringBuilder append (long lng)", "description": "Appends the string representation of the long\n argument to this sequence.\n \n The overall effect is exactly as if the argument were converted\n to a string by the method String.valueOf(long),\n and the characters of that string were then\n appended to this character sequence."}, {"method_name": "append", "method_sig": "public StringBuilder append (float f)", "description": "Appends the string representation of the float\n argument to this sequence.\n \n The overall effect is exactly as if the argument were converted\n to a string by the method String.valueOf(float),\n and the characters of that string were then\n appended to this character sequence."}, {"method_name": "append", "method_sig": "public StringBuilder append (double d)", "description": "Appends the string representation of the double\n argument to this sequence.\n \n The overall effect is exactly as if the argument were converted\n to a string by the method String.valueOf(double),\n and the characters of that string were then\n appended to this character sequence."}, {"method_name": "appendCodePoint", "method_sig": "public StringBuilder appendCodePoint (int codePoint)", "description": "Appends the string representation of the codePoint\n argument to this sequence.\n\n  The argument is appended to the contents of this sequence.\n The length of this sequence increases by\n Character.charCount(codePoint).\n\n  The overall effect is exactly as if the argument were\n converted to a char array by the method\n Character.toChars(int) and the character in that array\n were then appended to this character\n sequence."}, {"method_name": "delete", "method_sig": "public StringBuilder delete (int start,\n                            int end)", "description": "Removes the characters in a substring of this sequence.\n The substring begins at the specified start and extends to\n the character at index end - 1 or to the end of the\n sequence if no such character exists. If\n start is equal to end, no changes are made."}, {"method_name": "deleteCharAt", "method_sig": "public StringBuilder deleteCharAt (int index)", "description": "Removes the char at the specified position in this\n sequence. This sequence is shortened by one char.\n\n Note: If the character at the given index is a supplementary\n character, this method does not remove the entire character. If\n correct handling of supplementary characters is required,\n determine the number of chars to remove by calling\n Character.charCount(thisSequence.codePointAt(index)),\n where thisSequence is this sequence."}, {"method_name": "replace", "method_sig": "public StringBuilder replace (int start,\n                             int end,\n                             String str)", "description": "Replaces the characters in a substring of this sequence\n with characters in the specified String. The substring\n begins at the specified start and extends to the character\n at index end - 1 or to the end of the\n sequence if no such character exists. First the\n characters in the substring are removed and then the specified\n String is inserted at start. (This\n sequence will be lengthened to accommodate the\n specified String if necessary.)"}, {"method_name": "insert", "method_sig": "public StringBuilder insert (int index,\n                            char[] str,\n                            int offset,\n                            int len)", "description": "Inserts the string representation of a subarray of the str\n array argument into this sequence. The subarray begins at the\n specified offset and extends len chars.\n The characters of the subarray are inserted into this sequence at\n the position indicated by index. The length of this\n sequence increases by len chars."}, {"method_name": "insert", "method_sig": "public StringBuilder insert (int offset,\n                            Object obj)", "description": "Inserts the string representation of the Object\n argument into this character sequence.\n \n The overall effect is exactly as if the second argument were\n converted to a string by the method String.valueOf(Object),\n and the characters of that string were then\n inserted into this character\n sequence at the indicated offset.\n \n The offset argument must be greater than or equal to\n 0, and less than or equal to the length\n of this sequence."}, {"method_name": "insert", "method_sig": "public StringBuilder insert (int offset,\n                            String str)", "description": "Inserts the string into this character sequence.\n \n The characters of the String argument are inserted, in\n order, into this sequence at the indicated offset, moving up any\n characters originally above that position and increasing the length\n of this sequence by the length of the argument. If\n str is null, then the four characters\n \"null\" are inserted into this sequence.\n \n The character at index k in the new character sequence is\n equal to:\n \nthe character at index k in the old character sequence, if\n k is less than offset\nthe character at index k-offset in the\n argument str, if k is not less than\n offset but is less than offset+str.length()\nthe character at index k-str.length() in the\n old character sequence, if k is not less than\n offset+str.length()\n\n The offset argument must be greater than or equal to\n 0, and less than or equal to the length\n of this sequence."}, {"method_name": "insert", "method_sig": "public StringBuilder insert (int offset,\n                            char[] str)", "description": "Inserts the string representation of the char array\n argument into this sequence.\n \n The characters of the array argument are inserted into the\n contents of this sequence at the position indicated by\n offset. The length of this sequence increases by\n the length of the argument.\n \n The overall effect is exactly as if the second argument were\n converted to a string by the method String.valueOf(char[]),\n and the characters of that string were then\n inserted into this character\n sequence at the indicated offset.\n \n The offset argument must be greater than or equal to\n 0, and less than or equal to the length\n of this sequence."}, {"method_name": "insert", "method_sig": "public StringBuilder insert (int dstOffset,\n                            CharSequence s)", "description": "Inserts the specified CharSequence into this sequence.\n \n The characters of the CharSequence argument are inserted,\n in order, into this sequence at the indicated offset, moving up\n any characters originally above that position and increasing the length\n of this sequence by the length of the argument s.\n \n The result of this method is exactly the same as if it were an\n invocation of this object's\n insert(dstOffset, s, 0, s.length())\n method.\n\n If s is null, then the four characters\n \"null\" are inserted into this sequence."}, {"method_name": "insert", "method_sig": "public StringBuilder insert (int dstOffset,\n                            CharSequence s,\n                            int start,\n                            int end)", "description": "Inserts a subsequence of the specified CharSequence into\n this sequence.\n \n The subsequence of the argument s specified by\n start and end are inserted,\n in order, into this sequence at the specified destination offset, moving\n up any characters originally above that position. The length of this\n sequence is increased by end - start.\n \n The character at index k in this sequence becomes equal to:\n \nthe character at index k in this sequence, if\n k is less than dstOffset\nthe character at index k+start-dstOffset in\n the argument s, if k is greater than or equal to\n dstOffset but is less than dstOffset+end-start\nthe character at index k-(end-start) in this\n sequence, if k is greater than or equal to\n dstOffset+end-start\n\n The dstOffset argument must be greater than or equal to\n 0, and less than or equal to the length\n of this sequence.\n The start argument must be nonnegative, and not greater than\n end.\n The end argument must be greater than or equal to\n start, and less than or equal to the length of s.\n\n If s is null, then this method inserts\n characters as if the s parameter was a sequence containing the four\n characters \"null\"."}, {"method_name": "insert", "method_sig": "public StringBuilder insert (int offset,\n                            boolean b)", "description": "Inserts the string representation of the boolean\n argument into this sequence.\n \n The overall effect is exactly as if the second argument were\n converted to a string by the method String.valueOf(boolean),\n and the characters of that string were then\n inserted into this character\n sequence at the indicated offset.\n \n The offset argument must be greater than or equal to\n 0, and less than or equal to the length\n of this sequence."}, {"method_name": "insert", "method_sig": "public StringBuilder insert (int offset,\n                            char c)", "description": "Inserts the string representation of the char\n argument into this sequence.\n \n The overall effect is exactly as if the second argument were\n converted to a string by the method String.valueOf(char),\n and the character in that string were then\n inserted into this character\n sequence at the indicated offset.\n \n The offset argument must be greater than or equal to\n 0, and less than or equal to the length\n of this sequence."}, {"method_name": "insert", "method_sig": "public StringBuilder insert (int offset,\n                            int i)", "description": "Inserts the string representation of the second int\n argument into this sequence.\n \n The overall effect is exactly as if the second argument were\n converted to a string by the method String.valueOf(int),\n and the characters of that string were then\n inserted into this character\n sequence at the indicated offset.\n \n The offset argument must be greater than or equal to\n 0, and less than or equal to the length\n of this sequence."}, {"method_name": "insert", "method_sig": "public StringBuilder insert (int offset,\n                            long l)", "description": "Inserts the string representation of the long\n argument into this sequence.\n \n The overall effect is exactly as if the second argument were\n converted to a string by the method String.valueOf(long),\n and the characters of that string were then\n inserted into this character\n sequence at the indicated offset.\n \n The offset argument must be greater than or equal to\n 0, and less than or equal to the length\n of this sequence."}, {"method_name": "insert", "method_sig": "public StringBuilder insert (int offset,\n                            float f)", "description": "Inserts the string representation of the float\n argument into this sequence.\n \n The overall effect is exactly as if the second argument were\n converted to a string by the method String.valueOf(float),\n and the characters of that string were then\n inserted into this character\n sequence at the indicated offset.\n \n The offset argument must be greater than or equal to\n 0, and less than or equal to the length\n of this sequence."}, {"method_name": "insert", "method_sig": "public StringBuilder insert (int offset,\n                            double d)", "description": "Inserts the string representation of the double\n argument into this sequence.\n \n The overall effect is exactly as if the second argument were\n converted to a string by the method String.valueOf(double),\n and the characters of that string were then\n inserted into this character\n sequence at the indicated offset.\n \n The offset argument must be greater than or equal to\n 0, and less than or equal to the length\n of this sequence."}, {"method_name": "indexOf", "method_sig": "public int indexOf (String str)", "description": "Returns the index within this string of the first occurrence of the\n specified substring.\n\n The returned index is the smallest value k for which:\n \n this.toString().startsWith(str, k)\n \n If no such value of k exists, then -1 is returned."}, {"method_name": "indexOf", "method_sig": "public int indexOf (String str,\n                   int fromIndex)", "description": "Returns the index within this string of the first occurrence of the\n specified substring, starting at the specified index.\n\n The returned index is the smallest value k for which:\n \n     k >= Math.min(fromIndex, this.length()) &&\n                   this.toString().startsWith(str, k)\n \n If no such value of k exists, then -1 is returned."}, {"method_name": "lastIndexOf", "method_sig": "public int lastIndexOf (String str)", "description": "Returns the index within this string of the last occurrence of the\n specified substring.  The last occurrence of the empty string \"\" is\n considered to occur at the index value this.length().\n\n The returned index is the largest value k for which:\n \n this.toString().startsWith(str, k)\n \n If no such value of k exists, then -1 is returned."}, {"method_name": "lastIndexOf", "method_sig": "public int lastIndexOf (String str,\n                       int fromIndex)", "description": "Returns the index within this string of the last occurrence of the\n specified substring, searching backward starting at the specified index.\n\n The returned index is the largest value k for which:\n \n     k <= Math.min(fromIndex, this.length()) &&\n                   this.toString().startsWith(str, k)\n \n If no such value of k exists, then -1 is returned."}, {"method_name": "reverse", "method_sig": "public StringBuilder reverse()", "description": "Causes this character sequence to be replaced by the reverse of\n the sequence. If there are any surrogate pairs included in the\n sequence, these are treated as single characters for the\n reverse operation. Thus, the order of the high-low surrogates\n is never reversed.\n\n Let n be the character length of this character sequence\n (not the length in char values) just prior to\n execution of the reverse method. Then the\n character at index k in the new character sequence is\n equal to the character at index n-k-1 in the old\n character sequence.\n\n Note that the reverse operation may result in producing\n surrogate pairs that were unpaired low-surrogates and\n high-surrogates before the operation. For example, reversing\n \"\\uDC00\\uD800\" produces \"\\uD800\\uDC00\" which is\n a valid surrogate pair."}, {"method_name": "length", "method_sig": "public int length()", "description": "Returns the length (character count)."}, {"method_name": "capacity", "method_sig": "public int capacity()", "description": "Returns the current capacity. The capacity is the amount of storage\n available for newly inserted characters, beyond which an allocation\n will occur."}, {"method_name": "ensureCapacity", "method_sig": "public void ensureCapacity (int minimumCapacity)", "description": "Ensures that the capacity is at least equal to the specified minimum.\n If the current capacity is less than the argument, then a new internal\n array is allocated with greater capacity. The new capacity is the\n larger of:\n \nThe minimumCapacity argument.\n Twice the old capacity, plus 2.\n \n If the minimumCapacity argument is nonpositive, this\n method takes no action and simply returns.\n Note that subsequent operations on this object can reduce the\n actual capacity below that requested here."}, {"method_name": "trimToSize", "method_sig": "public void trimToSize()", "description": "Attempts to reduce storage used for the character sequence.\n If the buffer is larger than necessary to hold its current sequence of\n characters, then it may be resized to become more space efficient.\n Calling this method may, but is not required to, affect the value\n returned by a subsequent call to the capacity() method."}, {"method_name": "setLength", "method_sig": "public void setLength (int newLength)", "description": "Sets the length of the character sequence.\n The sequence is changed to a new character sequence\n whose length is specified by the argument. For every nonnegative\n index k less than newLength, the character at\n index k in the new character sequence is the same as the\n character at index k in the old sequence if k is less\n than the length of the old character sequence; otherwise, it is the\n null character '\\u0000'.\n\n In other words, if the newLength argument is less than\n the current length, the length is changed to the specified length.\n \n If the newLength argument is greater than or equal\n to the current length, sufficient null characters\n ('\\u0000') are appended so that\n length becomes the newLength argument.\n \n The newLength argument must be greater than or equal\n to 0."}, {"method_name": "charAt", "method_sig": "public char charAt (int index)", "description": "Returns the char value in this sequence at the specified index.\n The first char value is at index 0, the next at index\n 1, and so on, as in array indexing.\n \n The index argument must be greater than or equal to\n 0, and less than the length of this sequence.\n\n If the char value specified by the index is a\n surrogate, the surrogate\n value is returned."}, {"method_name": "codePointAt", "method_sig": "public int codePointAt (int index)", "description": "Returns the character (Unicode code point) at the specified\n index. The index refers to char values\n (Unicode code units) and ranges from 0 to\n CharSequence.length() - 1.\n\n  If the char value specified at the given index\n is in the high-surrogate range, the following index is less\n than the length of this sequence, and the\n char value at the following index is in the\n low-surrogate range, then the supplementary code point\n corresponding to this surrogate pair is returned. Otherwise,\n the char value at the given index is returned."}, {"method_name": "codePointBefore", "method_sig": "public int codePointBefore (int index)", "description": "Returns the character (Unicode code point) before the specified\n index. The index refers to char values\n (Unicode code units) and ranges from 1 to CharSequence.length().\n\n  If the char value at (index - 1)\n is in the low-surrogate range, (index - 2) is not\n negative, and the char value at (index -\n 2) is in the high-surrogate range, then the\n supplementary code point value of the surrogate pair is\n returned. If the char value at index -\n 1 is an unpaired low-surrogate or a high-surrogate, the\n surrogate value is returned."}, {"method_name": "codePointCount", "method_sig": "public int codePointCount (int beginIndex,\n                          int endIndex)", "description": "Returns the number of Unicode code points in the specified text\n range of this sequence. The text range begins at the specified\n beginIndex and extends to the char at\n index endIndex - 1. Thus the length (in\n chars) of the text range is\n endIndex-beginIndex. Unpaired surrogates within\n this sequence count as one code point each."}, {"method_name": "offsetByCodePoints", "method_sig": "public int offsetByCodePoints (int index,\n                              int codePointOffset)", "description": "Returns the index within this sequence that is offset from the\n given index by codePointOffset code\n points. Unpaired surrogates within the text range given by\n index and codePointOffset count as\n one code point each."}, {"method_name": "getChars", "method_sig": "public void getChars (int srcBegin,\n                     int srcEnd,\n                     char[] dst,\n                     int dstBegin)", "description": "Characters are copied from this sequence into the\n destination character array dst. The first character to\n be copied is at index srcBegin; the last character to\n be copied is at index srcEnd-1. The total number of\n characters to be copied is srcEnd-srcBegin. The\n characters are copied into the subarray of dst starting\n at index dstBegin and ending at index:\n \n dstbegin + (srcEnd-srcBegin) - 1\n "}, {"method_name": "setCharAt", "method_sig": "public void setCharAt (int index,\n                      char ch)", "description": "The character at the specified index is set to ch. This\n sequence is altered to represent a new character sequence that is\n identical to the old character sequence, except that it contains the\n character ch at position index.\n \n The index argument must be greater than or equal to\n 0, and less than the length of this sequence."}, {"method_name": "substring", "method_sig": "public String substring (int start)", "description": "Returns a new String that contains a subsequence of\n characters currently contained in this character sequence. The\n substring begins at the specified index and extends to the end of\n this sequence."}, {"method_name": "subSequence", "method_sig": "public CharSequence subSequence (int start,\n                                int end)", "description": "Returns a new character sequence that is a subsequence of this sequence.\n\n  An invocation of this method of the form\n\n \n sb.subSequence(begin,&nbsp;end)\n\n behaves in exactly the same way as the invocation\n\n \n sb.substring(begin,&nbsp;end)\n\n This method is provided so that this class can\n implement the CharSequence interface."}, {"method_name": "substring", "method_sig": "public String substring (int start,\n                        int end)", "description": "Returns a new String that contains a subsequence of\n characters currently contained in this sequence. The\n substring begins at the specified start and\n extends to the character at index end - 1."}, {"method_name": "chars", "method_sig": "public IntStream chars()", "description": "Returns a stream of int zero-extending the char values\n from this sequence.  Any char which maps to a surrogate code\n point is passed through uninterpreted.\n\n The stream binds to this sequence when the terminal stream operation\n commences (specifically, for mutable sequences the spliterator for the\n stream is late-binding).\n If the sequence is modified during that operation then the result is\n undefined."}, {"method_name": "codePoints", "method_sig": "public IntStream codePoints()", "description": "Returns a stream of code point values from this sequence.  Any surrogate\n pairs encountered in the sequence are combined as if by Character.toCodePoint and the result is passed\n to the stream. Any other code units, including ordinary BMP characters,\n unpaired surrogates, and undefined code units, are zero-extended to\n int values which are then passed to the stream.\n\n The stream binds to this sequence when the terminal stream operation\n commences (specifically, for mutable sequences the spliterator for the\n stream is late-binding).\n If the sequence is modified during that operation then the result is\n undefined."}]}