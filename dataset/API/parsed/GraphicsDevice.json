{"name": "Class GraphicsDevice", "module": "java.desktop", "package": "java.awt", "text": "The GraphicsDevice class describes the graphics devices\n that might be available in a particular graphics environment.  These\n include screen and printer devices. Note that there can be many screens\n and many printers in an instance of GraphicsEnvironment. Each\n graphics device has one or more GraphicsConfiguration objects\n associated with it.  These objects specify the different configurations\n in which the GraphicsDevice can be used.\n \n In a multi-screen environment, the GraphicsConfiguration\n objects can be used to render components on multiple screens.  The\n following code sample demonstrates how to create a JFrame\n object for each GraphicsConfiguration on each screen\n device in the GraphicsEnvironment:\n \n   GraphicsEnvironment ge = GraphicsEnvironment.\n   getLocalGraphicsEnvironment();\n   GraphicsDevice[] gs = ge.getScreenDevices();\n   for (int j = 0; j < gs.length; j++) {\n      GraphicsDevice gd = gs[j];\n      GraphicsConfiguration[] gc =\n      gd.getConfigurations();\n      for (int i=0; i < gc.length; i++) {\n         JFrame f = new\n         JFrame(gs[j].getDefaultConfiguration());\n         Canvas c = new Canvas(gc[i]);\n         Rectangle gcBounds = gc[i].getBounds();\n         int xoffs = gcBounds.x;\n         int yoffs = gcBounds.y;\n         f.getContentPane().add(c);\n         f.setLocation((i*50)+xoffs, (i*60)+yoffs);\n         f.show();\n      }\n   }\n \n\n For more information on full-screen exclusive mode API, see the\n \n Full-Screen Exclusive Mode API Tutorial.", "codes": ["public abstract class GraphicsDevice\nextends Object"], "fields": [{"field_name": "TYPE_RASTER_SCREEN", "field_sig": "public static final\u00a0int TYPE_RASTER_SCREEN", "description": "Device is a raster screen."}, {"field_name": "TYPE_PRINTER", "field_sig": "public static final\u00a0int TYPE_PRINTER", "description": "Device is a printer."}, {"field_name": "TYPE_IMAGE_BUFFER", "field_sig": "public static final\u00a0int TYPE_IMAGE_BUFFER", "description": "Device is an image buffer.  This buffer can reside in device\n or system memory but it is not physically viewable by the user."}], "methods": [{"method_name": "getType", "method_sig": "public abstract int getType()", "description": "Returns the type of this GraphicsDevice."}, {"method_name": "getIDstring", "method_sig": "public abstract String getIDstring()", "description": "Returns the identification string associated with this\n GraphicsDevice.\n \n A particular program might use more than one\n GraphicsDevice in a GraphicsEnvironment.\n This method returns a String identifying a\n particular GraphicsDevice in the local\n GraphicsEnvironment.  Although there is\n no public method to set this String, a programmer can\n use the String for debugging purposes.  Vendors of\n the Java\u2122 Runtime Environment can\n format the return value of the String.  To determine\n how to interpret the value of the String, contact the\n vendor of your Java Runtime.  To find out who the vendor is, from\n your program, call the\n getProperty method of the\n System class with \"java.vendor\"."}, {"method_name": "getConfigurations", "method_sig": "public abstract GraphicsConfiguration[] getConfigurations()", "description": "Returns all of the GraphicsConfiguration\n objects associated with this GraphicsDevice."}, {"method_name": "getDefaultConfiguration", "method_sig": "public abstract GraphicsConfiguration getDefaultConfiguration()", "description": "Returns the default GraphicsConfiguration\n associated with this GraphicsDevice."}, {"method_name": "getBestConfiguration", "method_sig": "public GraphicsConfiguration getBestConfiguration (GraphicsConfigTemplate gct)", "description": "Returns the \"best\" configuration possible that passes the\n criteria defined in the GraphicsConfigTemplate."}, {"method_name": "isFullScreenSupported", "method_sig": "public boolean isFullScreenSupported()", "description": "Returns true if this GraphicsDevice\n supports full-screen exclusive mode.\n If a SecurityManager is installed, its\n checkPermission method will be called\n with AWTPermission(\"fullScreenExclusive\").\n isFullScreenSupported returns true only if\n that permission is granted."}, {"method_name": "setFullScreenWindow", "method_sig": "public void setFullScreenWindow (Window w)", "description": "Enter full-screen mode, or return to windowed mode.  The entered\n full-screen mode may be either exclusive or simulated.  Exclusive\n mode is only available if isFullScreenSupported\n returns true.\n \n Exclusive mode implies:\n \nWindows cannot overlap the full-screen window.  All other application\n windows will always appear beneath the full-screen window in the Z-order.\n There can be only one full-screen window on a device at any time,\n so calling this method while there is an existing full-screen Window\n will cause the existing full-screen window to\n return to windowed mode.\n Input method windows are disabled.  It is advisable to call\n Component.enableInputMethods(false) to make a component\n a non-client of the input method framework.\n \n\n The simulated full-screen mode places and resizes the window to the maximum\n possible visible area of the screen. However, the native windowing system\n may modify the requested geometry-related data, so that the Window object\n is placed and sized in a way that corresponds closely to the desktop settings.\n \n When entering full-screen mode, if the window to be used as a\n full-screen window is not visible, this method will make it visible.\n It will remain visible when returning to windowed mode.\n \n When entering full-screen mode, all the translucency effects are reset for\n the window. Its shape is set to null, the opacity value is set to\n 1.0f, and the background color alpha is set to 255 (completely opaque).\n These values are not restored when returning to windowed mode.\n \n It is unspecified and platform-dependent how decorated windows operate\n in full-screen mode. For this reason, it is recommended to turn off\n the decorations in a Frame or Dialog object by using the\n setUndecorated method.\n \n When returning to windowed mode from an exclusive full-screen window,\n any display changes made by calling setDisplayMode are\n automatically restored to their original state."}, {"method_name": "getFullScreenWindow", "method_sig": "public Window getFullScreenWindow()", "description": "Returns the Window object representing the\n full-screen window if the device is in full-screen mode."}, {"method_name": "isDisplayChangeSupported", "method_sig": "public boolean isDisplayChangeSupported()", "description": "Returns true if this GraphicsDevice\n supports low-level display changes.\n On some platforms low-level display changes may only be allowed in\n full-screen exclusive mode (i.e., if isFullScreenSupported()\n returns true and the application has already entered\n full-screen mode using setFullScreenWindow(java.awt.Window))."}, {"method_name": "setDisplayMode", "method_sig": "public void setDisplayMode (DisplayMode dm)", "description": "Sets the display mode of this graphics device. This is only allowed\n if isDisplayChangeSupported() returns true and may\n require first entering full-screen exclusive mode using\n setFullScreenWindow(java.awt.Window) providing that full-screen exclusive mode is\n supported (i.e., isFullScreenSupported() returns\n true).\n \n\n The display mode must be one of the display modes returned by\n getDisplayModes(), with one exception: passing a display mode\n with DisplayMode.REFRESH_RATE_UNKNOWN refresh rate will result in\n selecting a display mode from the list of available display modes with\n matching width, height and bit depth.\n However, passing a display mode with DisplayMode.BIT_DEPTH_MULTI\n for bit depth is only allowed if such mode exists in the list returned by\n getDisplayModes().\n \n Example code:\n \n Frame frame;\n DisplayMode newDisplayMode;\n GraphicsDevice gd;\n // create a Frame, select desired DisplayMode from the list of modes\n // returned by gd.getDisplayModes() ...\n\n if (gd.isFullScreenSupported()) {\n     gd.setFullScreenWindow(frame);\n } else {\n    // proceed in non-full-screen mode\n    frame.setSize(...);\n    frame.setLocation(...);\n    frame.setVisible(true);\n }\n\n if (gd.isDisplayChangeSupported()) {\n     gd.setDisplayMode(newDisplayMode);\n }\n "}, {"method_name": "getDisplayMode", "method_sig": "public DisplayMode getDisplayMode()", "description": "Returns the current display mode of this\n GraphicsDevice.\n The returned display mode is allowed to have a refresh rate\n DisplayMode.REFRESH_RATE_UNKNOWN if it is indeterminate.\n Likewise, the returned display mode is allowed to have a bit depth\n DisplayMode.BIT_DEPTH_MULTI if it is indeterminate or if multiple\n bit depths are supported."}, {"method_name": "getDisplayModes", "method_sig": "public DisplayMode[] getDisplayModes()", "description": "Returns all display modes available for this\n GraphicsDevice.\n The returned display modes are allowed to have a refresh rate\n DisplayMode.REFRESH_RATE_UNKNOWN if it is indeterminate.\n Likewise, the returned display modes are allowed to have a bit depth\n DisplayMode.BIT_DEPTH_MULTI if it is indeterminate or if multiple\n bit depths are supported."}, {"method_name": "getAvailableAcceleratedMemory", "method_sig": "public int getAvailableAcceleratedMemory()", "description": "This method returns the number of bytes available in\n accelerated memory on this device.\n Some images are created or cached\n in accelerated memory on a first-come,\n first-served basis.  On some operating systems,\n this memory is a finite resource.  Calling this method\n and scheduling the creation and flushing of images carefully may\n enable applications to make the most efficient use of\n that finite resource.\n \n Note that the number returned is a snapshot of how much\n memory is available; some images may still have problems\n being allocated into that memory.  For example, depending\n on operating system, driver, memory configuration, and\n thread situations, the full extent of the size reported\n may not be available for a given image.  There are further\n inquiry methods on the ImageCapabilities object\n associated with a VolatileImage that can be used to determine\n whether a particular VolatileImage has been created in accelerated\n memory."}, {"method_name": "isWindowTranslucencySupported", "method_sig": "public boolean isWindowTranslucencySupported (GraphicsDevice.WindowTranslucency translucencyKind)", "description": "Returns whether the given level of translucency is supported by\n this graphics device."}]}