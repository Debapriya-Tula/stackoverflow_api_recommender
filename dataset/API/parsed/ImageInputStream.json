{"name": "Interface ImageInputStream", "module": "java.desktop", "package": "javax.imageio.stream", "text": "A seekable input stream interface for use by\n ImageReaders. Various input sources, such as\n InputStreams and Files,\n as well as future fast I/O sources may be \"wrapped\" by a suitable\n implementation of this interface for use by the Image I/O API.", "codes": ["public interface ImageInputStream\nextends DataInput, Closeable"], "fields": [], "methods": [{"method_name": "setByteOrder", "method_sig": "void setByteOrder (ByteOrder byteOrder)", "description": "Sets the desired byte order for future reads of data values\n from this stream.  For example, the sequence of bytes '0x01\n 0x02 0x03 0x04' if read as a 4-byte integer would have the\n value '0x01020304' using network byte order and the value\n '0x04030201' under the reverse byte order.\n\n  The enumeration class java.nio.ByteOrder is\n used to specify the byte order.  A value of\n ByteOrder.BIG_ENDIAN specifies so-called\n big-endian or network byte order, in which the high-order byte\n comes first.  Motorola and Sparc processors store data in this\n format, while Intel processors store data in the reverse\n ByteOrder.LITTLE_ENDIAN order.\n\n  The byte order has no effect on the results returned from\n the readBits method (or the value written by\n ImageOutputStream.writeBits)."}, {"method_name": "getByteOrder", "method_sig": "ByteOrder getByteOrder()", "description": "Returns the byte order with which data values will be read from\n this stream as an instance of the\n java.nio.ByteOrder enumeration."}, {"method_name": "read", "method_sig": "int read()\n  throws IOException", "description": "Reads a single byte from the stream and returns it as an\n integer between 0 and 255.  If the end of the stream is\n reached, -1 is returned.\n\n  The bit offset within the stream is reset to zero before\n the read occurs."}, {"method_name": "read", "method_sig": "int read (byte[] b)\n  throws IOException", "description": "Reads up to b.length bytes from the stream, and\n stores them into b starting at index 0.  The\n number of bytes read is returned.  If no bytes can be read\n because the end of the stream has been reached, -1 is returned.\n\n  The bit offset within the stream is reset to zero before\n the read occurs."}, {"method_name": "read", "method_sig": "int read (byte[] b,\n         int off,\n         int len)\n  throws IOException", "description": "Reads up to len bytes from the stream, and stores\n them into b starting at index off.\n The number of bytes read is returned.  If no bytes can be read\n because the end of the stream has been reached, -1\n is returned.\n\n  The bit offset within the stream is reset to zero before\n the read occurs."}, {"method_name": "readBytes", "method_sig": "void readBytes (IIOByteBuffer buf,\n               int len)\n        throws IOException", "description": "Reads up to len bytes from the stream, and\n modifies the supplied IIOByteBuffer to indicate\n the byte array, offset, and length where the data may be found.\n The caller should not attempt to modify the data found in the\n IIOByteBuffer.\n\n  The bit offset within the stream is reset to zero before\n the read occurs."}, {"method_name": "readBoolean", "method_sig": "boolean readBoolean()\n             throws IOException", "description": "Reads a byte from the stream and returns a boolean\n value of true if it is nonzero, false\n if it is zero.\n\n  The bit offset within the stream is reset to zero before\n the read occurs."}, {"method_name": "readByte", "method_sig": "byte readByte()\n       throws IOException", "description": "Reads a byte from the stream and returns it as a\n byte value.  Byte values between 0x00\n and 0x7f represent integer values between\n 0 and 127.  Values between\n 0x80 and 0xff represent negative\n values from -128 to /1.\n\n  The bit offset within the stream is reset to zero before\n the read occurs."}, {"method_name": "readUnsignedByte", "method_sig": "int readUnsignedByte()\n              throws IOException", "description": "Reads a byte from the stream, and (conceptually) converts it to\n an int, masks it with 0xff in order to strip off\n any sign-extension bits, and returns it as a byte\n value.\n\n  Thus, byte values between 0x00 and\n 0x7f are simply returned as integer values between\n 0 and 127.  Values between\n 0x80 and 0xff, which normally\n represent negative byte values, will be mapped into\n positive integers between 128 and\n 255.\n\n  The bit offset within the stream is reset to zero before\n the read occurs."}, {"method_name": "readShort", "method_sig": "short readShort()\n         throws IOException", "description": "Reads two bytes from the stream, and (conceptually)\n concatenates them according to the current byte order, and\n returns the result as a short value.\n\n  The bit offset within the stream is reset to zero before\n the read occurs."}, {"method_name": "readUnsignedShort", "method_sig": "int readUnsignedShort()\n               throws IOException", "description": "Reads two bytes from the stream, and (conceptually)\n concatenates them according to the current byte order, converts\n the resulting value to an int, masks it with\n 0xffff in order to strip off any sign-extension\n buts, and returns the result as an unsigned int\n value.\n\n  The bit offset within the stream is reset to zero before\n the read occurs."}, {"method_name": "readChar", "method_sig": "char readChar()\n       throws IOException", "description": "Equivalent to readUnsignedShort, except that the\n result is returned using the char datatype.\n\n  The bit offset within the stream is reset to zero before\n the read occurs."}, {"method_name": "readInt", "method_sig": "int readInt()\n     throws IOException", "description": "Reads 4 bytes from the stream, and (conceptually) concatenates\n them according to the current byte order and returns the result\n as an int.\n\n  The bit offset within the stream is ignored and treated as\n though it were zero."}, {"method_name": "readUnsignedInt", "method_sig": "long readUnsignedInt()\n              throws IOException", "description": "Reads 4 bytes from the stream, and (conceptually) concatenates\n them according to the current byte order, converts the result\n to a long, masks it with 0xffffffffL in order to\n strip off any sign-extension bits, and returns the result as an\n unsigned long value.\n\n  The bit offset within the stream is reset to zero before\n the read occurs."}, {"method_name": "readLong", "method_sig": "long readLong()\n       throws IOException", "description": "Reads 8 bytes from the stream, and (conceptually) concatenates\n them according to the current byte order and returns the result\n as a long.\n\n  The bit offset within the stream is reset to zero before\n the read occurs."}, {"method_name": "readFloat", "method_sig": "float readFloat()\n         throws IOException", "description": "Reads 4 bytes from the stream, and (conceptually) concatenates\n them according to the current byte order and returns the result\n as a float.\n\n  The bit offset within the stream is reset to zero before\n the read occurs."}, {"method_name": "readDouble", "method_sig": "double readDouble()\n           throws IOException", "description": "Reads 8 bytes from the stream, and (conceptually) concatenates\n them according to the current byte order and returns the result\n as a double.\n\n  The bit offset within the stream is reset to zero before\n the read occurs."}, {"method_name": "readLine", "method_sig": "String readLine()\n         throws IOException", "description": "Reads the next line of text from the input stream.  It reads\n successive bytes, converting each byte separately into a\n character, until it encounters a line terminator or end of\n file; the characters read are then returned as a\n String. Note that because this method processes\n bytes, it does not support input of the full Unicode character\n set.\n\n  If end of file is encountered before even one byte can be\n read, then null is returned. Otherwise, each byte\n that is read is converted to type char by\n zero-extension. If the character '\\n' is\n encountered, it is discarded and reading ceases. If the\n character '\\r' is encountered, it is discarded\n and, if the following byte converts  to the character\n '\\n', then that is discarded also; reading then\n ceases. If end of file is encountered before either of the\n characters '\\n' and '\\r' is\n encountered, reading ceases. Once reading has ceased, a\n String is returned that contains all the\n characters read and not discarded, taken in order.  Note that\n every character in this string will have a value less than\n \\u0100, that is, (char)256.\n\n  The bit offset within the stream is reset to zero before\n the read occurs."}, {"method_name": "readUTF", "method_sig": "String readUTF()\n        throws IOException", "description": "Reads in a string that has been encoded using a\n modified\n UTF-8\n format.  The general contract of readUTF is that\n it reads a representation of a Unicode character string encoded\n in modified UTF-8 format; this string of characters is\n then returned as a String.\n\n  First, two bytes are read and used to construct an unsigned\n 16-bit integer in the manner of the\n readUnsignedShort method, using network byte order\n (regardless of the current byte order setting). This integer\n value is called the UTF length and specifies the number\n of additional bytes to be read. These bytes are then converted\n to characters by considering them in groups. The length of each\n group is computed from the value of the first byte of the\n group. The byte following a group, if any, is the first byte of\n the next group.\n\n  If the first byte of a group matches the bit pattern\n 0xxxxxxx (where x means \"may be\n 0 or 1\"), then the group consists of\n just that byte. The byte is zero-extended to form a character.\n\n  If the first byte of a group matches the bit pattern\n 110xxxxx, then the group consists of that byte\n a and a second byte b. If there is no\n byte b (because byte a was the last\n of the bytes to be read), or if byte b does not\n match the bit pattern 10xxxxxx, then a\n UTFDataFormatException is thrown. Otherwise, the\n group is converted to the character:\n\n \n (char)(((a& 0x1F) << 6) | (b & 0x3F))\n \n\n If the first byte of a group matches the bit pattern\n 1110xxxx, then the group consists of that byte\n a and two more bytes b and\n c.  If there is no byte c (because\n byte a was one of the last two of the bytes to be\n read), or either byte b or byte c\n does not match the bit pattern 10xxxxxx, then a\n UTFDataFormatException is thrown. Otherwise, the\n group is converted to the character:\n\n \n (char)(((a & 0x0F) << 12) | ((b & 0x3F) << 6) | (c & 0x3F))\n \n\n If the first byte of a group matches the pattern\n 1111xxxx or the pattern 10xxxxxx,\n then a UTFDataFormatException is thrown.\n\n  If end of file is encountered at any time during this\n entire process, then a java.io.EOFException is thrown.\n\n  After every group has been converted to a character by this\n process, the characters are gathered, in the same order in\n which their corresponding groups were read from the input\n stream, to form a String, which is returned.\n\n  The current byte order setting is ignored.\n\n  The bit offset within the stream is reset to zero before\n the read occurs.\n\n Note: This method should not be used in\n the  implementation of image formats that use standard UTF-8,\n because  the modified UTF-8 used here is incompatible with\n standard UTF-8."}, {"method_name": "readFully", "method_sig": "void readFully (byte[] b,\n               int off,\n               int len)\n        throws IOException", "description": "Reads len bytes from the stream, and stores them\n into b starting at index off.\n If the end of the stream is reached, a java.io.EOFException\n will be thrown.\n\n  The bit offset within the stream is reset to zero before\n the read occurs."}, {"method_name": "readFully", "method_sig": "void readFully (byte[] b)\n        throws IOException", "description": "Reads b.length bytes from the stream, and stores them\n into b starting at index 0.\n If the end of the stream is reached, a java.io.EOFException\n will be thrown.\n\n  The bit offset within the stream is reset to zero before\n the read occurs."}, {"method_name": "readFully", "method_sig": "void readFully (short[] s,\n               int off,\n               int len)\n        throws IOException", "description": "Reads len shorts (signed 16-bit integers) from the\n stream according to the current byte order, and\n stores them into s starting at index\n off.  If the end of the stream is reached,\n a java.io.EOFException will be thrown.\n\n  The bit offset within the stream is reset to zero before\n the read occurs."}, {"method_name": "readFully", "method_sig": "void readFully (char[] c,\n               int off,\n               int len)\n        throws IOException", "description": "Reads len chars (unsigned 16-bit integers) from the\n stream according to the current byte order, and\n stores them into c starting at index\n off.  If the end of the stream is reached,\n a java.io.EOFException will be thrown.\n\n  The bit offset within the stream is reset to zero before\n the read occurs."}, {"method_name": "readFully", "method_sig": "void readFully (int[] i,\n               int off,\n               int len)\n        throws IOException", "description": "Reads len ints (signed 32-bit integers) from the\n stream according to the current byte order, and\n stores them into i starting at index\n off.  If the end of the stream is reached,\n a java.io.EOFException will be thrown.\n\n  The bit offset within the stream is reset to zero before\n the read occurs."}, {"method_name": "readFully", "method_sig": "void readFully (long[] l,\n               int off,\n               int len)\n        throws IOException", "description": "Reads len longs (signed 64-bit integers) from the\n stream according to the current byte order, and\n stores them into l starting at index\n off.  If the end of the stream is reached,\n a java.io.EOFException will be thrown.\n\n  The bit offset within the stream is reset to zero before\n the read occurs."}, {"method_name": "readFully", "method_sig": "void readFully (float[] f,\n               int off,\n               int len)\n        throws IOException", "description": "Reads len floats (32-bit IEEE single-precision\n floats) from the stream according to the current byte order,\n and stores them into f starting at\n index off.  If the end of the stream is reached,\n a java.io.EOFException will be thrown.\n\n  The bit offset within the stream is reset to zero before\n the read occurs."}, {"method_name": "readFully", "method_sig": "void readFully (double[] d,\n               int off,\n               int len)\n        throws IOException", "description": "Reads len doubles (64-bit IEEE double-precision\n floats) from the stream according to the current byte order,\n and stores them into d starting at\n index off.  If the end of the stream is reached,\n a java.io.EOFException will be thrown.\n\n  The bit offset within the stream is reset to zero before\n the read occurs."}, {"method_name": "getStreamPosition", "method_sig": "long getStreamPosition()\n                throws IOException", "description": "Returns the current byte position of the stream.  The next read\n will take place starting at this offset."}, {"method_name": "getBitOffset", "method_sig": "int getBitOffset()\n          throws IOException", "description": "Returns the current bit offset, as an integer between 0 and 7,\n inclusive.  The bit offset is updated implicitly by calls to\n the readBits method.  A value of 0 indicates the\n most-significant bit, and a value of 7 indicates the least\n significant bit, of the byte being read.\n\n  The bit offset is set to 0 when a stream is first\n opened, and is reset to 0 by calls to seek,\n skipBytes, or any read or\n readFully method."}, {"method_name": "setBitOffset", "method_sig": "void setBitOffset (int bitOffset)\n           throws IOException", "description": "Sets the bit offset to an integer between 0 and 7, inclusive.\n The byte offset within the stream, as returned by\n getStreamPosition, is left unchanged.\n A value of 0 indicates the\n most-significant bit, and a value of 7 indicates the least\n significant bit, of the byte being read."}, {"method_name": "readBit", "method_sig": "int readBit()\n     throws IOException", "description": "Reads a single bit from the stream and returns it as an\n int with the value 0 or\n 1.  The bit offset is advanced by one and reduced\n modulo 8."}, {"method_name": "readBits", "method_sig": "long readBits (int numBits)\n       throws IOException", "description": "Reads a bitstring from the stream and returns it as a\n long, with the first bit read becoming the most\n significant bit of the output.  The read starts within the byte\n indicated by getStreamPosition, at the bit given\n by getBitOffset.  The bit offset is advanced by\n numBits and reduced modulo 8.\n\n  The byte order of the stream has no effect on this\n method.  The return value of this method is constructed as\n though the bits were read one at a time, and shifted into\n the right side of the return value, as shown by the following\n pseudo-code:\n\n \n long accum = 0L;\n for (int i = 0; i < numBits; i++) {\n   accum <<= 1; // Shift left one bit to make room\n   accum |= readBit();\n }\n \n\n Note that the result of readBits(32) may thus not\n be equal to that of readInt() if a reverse network\n byte order is being used (i.e., getByteOrder() == false).\n\n  If the end of the stream is encountered before all the bits\n have been read, a java.io.EOFException is thrown."}, {"method_name": "length", "method_sig": "long length()\n     throws IOException", "description": "Returns the total length of the stream, if known.  Otherwise,\n -1 is returned."}, {"method_name": "skipBytes", "method_sig": "int skipBytes (int n)\n       throws IOException", "description": "Moves the stream position forward by a given number of bytes.  It\n is possible that this method will only be able to skip forward\n by a smaller number of bytes than requested, for example if the\n end of the stream is reached.  In all cases, the actual number\n of bytes skipped is returned.  The bit offset is set to zero\n prior to advancing the position."}, {"method_name": "skipBytes", "method_sig": "long skipBytes (long n)\n        throws IOException", "description": "Moves the stream position forward by a given number of bytes.\n This method is identical to skipBytes(int) except\n that it allows for a larger skip distance."}, {"method_name": "seek", "method_sig": "void seek (long pos)\n   throws IOException", "description": "Sets the current stream position to the desired location.  The\n next read will occur at this location.  The bit offset is set\n to 0.\n\n  An IndexOutOfBoundsException will be thrown if\n pos is smaller than the flushed position (as\n returned by getflushedPosition).\n\n  It is legal to seek past the end of the file;\n a java.io.EOFException will be thrown only if a read is\n performed."}, {"method_name": "mark", "method_sig": "void mark()", "description": "Marks a position in the stream to be returned to by a\n subsequent call to reset.  Unlike a standard\n InputStream, all ImageInputStreams\n support marking.  Additionally, calls to mark and\n reset may be nested arbitrarily.\n\n  Unlike the mark methods declared by the\n Reader and InputStream interfaces, no\n readLimit parameter is used.  An arbitrary amount\n of data may be read following the call to mark.\n\n  The bit position used by the readBits method\n is saved and restored by each pair of calls to\n mark and reset.\n\n  Note that it is valid for an ImageReader to call\n flushBefore as part of a read operation.\n Therefore, if an application calls mark prior to\n passing that stream to an ImageReader, the application\n should not assume that the marked position will remain valid after\n the read operation has completed."}, {"method_name": "reset", "method_sig": "void reset()\n    throws IOException", "description": "Returns the stream pointer to its previous position, including\n the bit offset, at the time of the most recent unmatched call\n to mark.\n\n  Calls to reset without a corresponding call\n to mark have no effect.\n\n  An IOException will be thrown if the previous\n marked position lies in the discarded portion of the stream."}, {"method_name": "flushBefore", "method_sig": "void flushBefore (long pos)\n          throws IOException", "description": "Discards the initial portion of the stream prior to the\n indicated position.  Attempting to seek to an offset within the\n flushed portion of the stream will result in an\n IndexOutOfBoundsException.\n\n  Calling flushBefore may allow classes\n implementing this interface to free up resources such as memory\n or disk space that are being used to store data from the\n stream."}, {"method_name": "flush", "method_sig": "void flush()\n    throws IOException", "description": "Discards the initial position of the stream prior to the current\n stream position.  Equivalent to\n flushBefore(getStreamPosition())."}, {"method_name": "getFlushedPosition", "method_sig": "long getFlushedPosition()", "description": "Returns the earliest position in the stream to which seeking\n may be performed.  The returned value will be the maximum of\n all values passed into previous calls to\n flushBefore."}, {"method_name": "isCached", "method_sig": "boolean isCached()", "description": "Returns true if this ImageInputStream\n caches data itself in order to allow seeking backwards.\n Applications may consult this in order to decide how frequently,\n or whether, to flush in order to conserve cache resources."}, {"method_name": "isCachedMemory", "method_sig": "boolean isCachedMemory()", "description": "Returns true if this ImageInputStream\n caches data itself in order to allow seeking backwards, and\n the cache is kept in main memory.  Applications may consult\n this in order to decide how frequently, or whether, to flush\n in order to conserve cache resources."}, {"method_name": "isCachedFile", "method_sig": "boolean isCachedFile()", "description": "Returns true if this ImageInputStream\n caches data itself in order to allow seeking backwards, and\n the cache is kept in a temporary file.  Applications may consult\n this in order to decide how frequently, or whether, to flush\n in order to conserve cache resources."}, {"method_name": "close", "method_sig": "void close()\n    throws IOException", "description": "Closes the stream.  Attempts to access a stream that has been\n closed may result in IOExceptions or incorrect\n behavior.  Calling this method may allow classes implementing\n this interface to release resources associated with the stream\n such as memory, disk space, or file descriptors."}]}