{"name": "Class RowSorter<M>", "module": "java.desktop", "package": "javax.swing", "text": "RowSorter provides the basis for sorting and filtering.\n Beyond creating and installing a RowSorter, you very rarely\n need to interact with one directly.  Refer to\n TableRowSorter for a concrete\n implementation of RowSorter for JTable.\n \nRowSorter's primary role is to provide a mapping between\n two coordinate systems: that of the view (for example a\n JTable) and that of the underlying data source, typically a\n model.\n \n The view invokes the following methods on the RowSorter:\n \ntoggleSortOrder \u2014 The view invokes this when the\n     appropriate user gesture has occurred to trigger a sort.  For example,\n     the user clicked a column header in a table.\n One of the model change methods \u2014 The view invokes a model\n     change method when the underlying model\n     has changed.  There may be order dependencies in how the events are\n     delivered, so a RowSorter should not update its mapping\n     until one of these methods is invoked.\n \n Because the view makes extensive use of  the\n convertRowIndexToModel,\n convertRowIndexToView and getViewRowCount methods,\n these methods need to be fast.\n \nRowSorter provides notification of changes by way of\n RowSorterListener.  Two types of notification are sent:\n \nRowSorterEvent.Type.SORT_ORDER_CHANGED \u2014 notifies\n     listeners that the sort order has changed.  This is typically followed\n     by a notification that the sort has changed.\n RowSorterEvent.Type.SORTED \u2014 notifies listeners that\n     the mapping maintained by the RowSorter has changed in\n     some way.\n \nRowSorter implementations typically don't have a one-to-one\n mapping with the underlying model, but they can.\n For example, if a database does the sorting,\n toggleSortOrder might call through to the database\n (on a background thread), and override the mapping methods to return the\n argument that is passed in.\n \n Concrete implementations of RowSorter\n need to reference a model such as TableModel or\n ListModel.  The view classes, such as\n JTable and JList, will also have a\n reference to the model.  To avoid ordering dependencies,\n RowSorter implementations should not install a\n listener on the model.  Instead the view class will call into the\n RowSorter when the model changes.  For\n example, if a row is updated in a TableModel\nJTable invokes rowsUpdated.\n When the model changes, the view may call into any of the following methods:\n modelStructureChanged, allRowsChanged,\n rowsInserted, rowsDeleted and\n rowsUpdated.", "codes": ["public abstract class RowSorter<M>\nextends Object"], "fields": [], "methods": [{"method_name": "getModel", "method_sig": "public abstract M getModel()", "description": "Returns the underlying model."}, {"method_name": "toggleSortOrder", "method_sig": "public abstract void toggleSortOrder (int column)", "description": "Reverses the sort order of the specified column.  It is up to\n subclasses to provide the exact behavior when invoked.  Typically\n this will reverse the sort order from ascending to descending (or\n descending to ascending) if the specified column is already the\n primary sorted column; otherwise, makes the specified column\n the primary sorted column, with an ascending sort order.  If\n the specified column is not sortable, this method has no\n effect.\n \n If this results in changing the sort order and sorting, the\n appropriate RowSorterListener notification will be\n sent."}, {"method_name": "convertRowIndexToModel", "method_sig": "public abstract int convertRowIndexToModel (int index)", "description": "Returns the location of index in terms of the\n underlying model.  That is, for the row index in\n the coordinates of the view this returns the row index in terms\n of the underlying model."}, {"method_name": "convertRowIndexToView", "method_sig": "public abstract int convertRowIndexToView (int index)", "description": "Returns the location of index in terms of the\n view.  That is, for the row index in the\n coordinates of the underlying model this returns the row index\n in terms of the view."}, {"method_name": "setSortKeys", "method_sig": "public abstract void setSortKeys (List<? extends RowSorter.SortKey> keys)", "description": "Sets the current sort keys."}, {"method_name": "getSortKeys", "method_sig": "public abstract List<? extends RowSorter.SortKey> getSortKeys()", "description": "Returns the current sort keys.  This must return a \n non-null List and may return an unmodifiable List. If\n you need to change the sort keys, make a copy of the returned\n List, mutate the copy and invoke setSortKeys\n with the new list."}, {"method_name": "getViewRowCount", "method_sig": "public abstract int getViewRowCount()", "description": "Returns the number of rows in the view.  If the contents have\n been filtered this might differ from the row count of the\n underlying model."}, {"method_name": "getModelRowCount", "method_sig": "public abstract int getModelRowCount()", "description": "Returns the number of rows in the underlying model."}, {"method_name": "modelStructureChanged", "method_sig": "public abstract void modelStructureChanged()", "description": "Invoked when the underlying model structure has completely\n changed.  For example, if the number of columns in a\n TableModel changed, this method would be invoked.\n \n You normally do not call this method.  This method is public\n to allow view classes to call it."}, {"method_name": "allRowsChanged", "method_sig": "public abstract void allRowsChanged()", "description": "Invoked when the contents of the underlying model have\n completely changed. The structure of the table is the same,\n only the contents have changed. This is typically sent when it\n is too expensive to characterize the change in terms of the\n other methods.\n \n You normally do not call this method.  This method is public\n to allow view classes to call it."}, {"method_name": "rowsInserted", "method_sig": "public abstract void rowsInserted (int firstRow,\n                                  int endRow)", "description": "Invoked when rows have been inserted into the underlying model\n in the specified range (inclusive).\n \n The arguments give the indices of the effected range.\n The first argument is in terms of the model before the change, and\n must be less than or equal to the size of the model before the change.\n The second argument is in terms of the model after the change and must\n be less than the size of the model after the change. For example,\n if you have a 5-row model and add 3 items to the end of the model\n the indices are 5, 7.\n \n You normally do not call this method.  This method is public\n to allow view classes to call it."}, {"method_name": "rowsDeleted", "method_sig": "public abstract void rowsDeleted (int firstRow,\n                                 int endRow)", "description": "Invoked when rows have been deleted from the underlying model\n in the specified range (inclusive).\n \n The arguments give the indices of the effected range and\n are in terms of the model before the change.\n For example, if you have a 5-row model and delete 3 items from the end\n of the model the indices are 2, 4.\n \n You normally do not call this method.  This method is public\n to allow view classes to call it."}, {"method_name": "rowsUpdated", "method_sig": "public abstract void rowsUpdated (int firstRow,\n                                 int endRow)", "description": "Invoked when rows have been changed in the underlying model\n between the specified range (inclusive).\n \n You normally do not call this method.  This method is public\n to allow view classes to call it."}, {"method_name": "rowsUpdated", "method_sig": "public abstract void rowsUpdated (int firstRow,\n                                 int endRow,\n                                 int column)", "description": "Invoked when the column in the rows have been updated in\n the underlying model between the specified range.\n \n You normally do not call this method.  This method is public\n to allow view classes to call it."}, {"method_name": "addRowSorterListener", "method_sig": "public void addRowSorterListener (RowSorterListener l)", "description": "Adds a RowSorterListener to receive notification\n about this RowSorter.  If the same\n listener is added more than once it will receive multiple\n notifications.  If l is null nothing\n is done."}, {"method_name": "removeRowSorterListener", "method_sig": "public void removeRowSorterListener (RowSorterListener l)", "description": "Removes a RowSorterListener.  If\n l is null nothing is done."}, {"method_name": "fireSortOrderChanged", "method_sig": "protected void fireSortOrderChanged()", "description": "Notifies listener that the sort order has changed."}, {"method_name": "fireRowSorterChanged", "method_sig": "protected void fireRowSorterChanged (int[] lastRowIndexToModel)", "description": "Notifies listener that the mapping has changed."}]}