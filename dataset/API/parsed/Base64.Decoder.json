{"name": "Class Base64.Decoder", "module": "java.base", "package": "java.util", "text": "This class implements a decoder for decoding byte data using the\n Base64 encoding scheme as specified in RFC 4648 and RFC 2045.\n\n  The Base64 padding character '=' is accepted and\n interpreted as the end of the encoded byte data, but is not\n required. So if the final unit of the encoded byte data only has\n two or three Base64 characters (without the corresponding padding\n character(s) padded), they are decoded as if followed by padding\n character(s). If there is a padding character present in the\n final unit, the correct number of padding character(s) must be\n present, otherwise IllegalArgumentException (\n IOException when reading from a Base64 stream) is thrown\n during decoding.\n\n  Instances of Base64.Decoder class are safe for use by\n multiple concurrent threads.\n\n  Unless otherwise noted, passing a null argument to\n a method of this class will cause a\n NullPointerException to\n be thrown.", "codes": ["public static class Base64.Decoder\nextends Object"], "fields": [], "methods": [{"method_name": "decode", "method_sig": "public byte[] decode (byte[] src)", "description": "Decodes all bytes from the input byte array using the Base64\n encoding scheme, writing the results into a newly-allocated output\n byte array. The returned byte array is of the length of the resulting\n bytes."}, {"method_name": "decode", "method_sig": "public byte[] decode (String src)", "description": "Decodes a Base64 encoded String into a newly-allocated byte array\n using the Base64 encoding scheme.\n\n  An invocation of this method has exactly the same effect as invoking\n decode(src.getBytes(StandardCharsets.ISO_8859_1))"}, {"method_name": "decode", "method_sig": "public int decode (byte[] src,\n                  byte[] dst)", "description": "Decodes all bytes from the input byte array using the Base64\n encoding scheme, writing the results into the given output byte array,\n starting at offset 0.\n\n  It is the responsibility of the invoker of this method to make\n sure the output byte array dst has enough space for decoding\n all bytes from the input byte array. No bytes will be written to\n the output byte array if the output byte array is not big enough.\n\n  If the input byte array is not in valid Base64 encoding scheme\n then some bytes may have been written to the output byte array before\n IllegalargumentException is thrown."}, {"method_name": "decode", "method_sig": "public ByteBuffer decode (ByteBuffer buffer)", "description": "Decodes all bytes from the input byte buffer using the Base64\n encoding scheme, writing the results into a newly-allocated ByteBuffer.\n\n  Upon return, the source buffer's position will be updated to\n its limit; its limit will not have been changed. The returned\n output buffer's position will be zero and its limit will be the\n number of resulting decoded bytes\n\n  IllegalArgumentException is thrown if the input buffer\n is not in valid Base64 encoding scheme. The position of the input\n buffer will not be advanced in this case."}, {"method_name": "wrap", "method_sig": "public InputStream wrap (InputStream is)", "description": "Returns an input stream for decoding Base64 encoded byte stream.\n\n  The read  methods of the returned InputStream will\n throw IOException when reading bytes that cannot be decoded.\n\n  Closing the returned input stream will close the underlying\n input stream."}]}