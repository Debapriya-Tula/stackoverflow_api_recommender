{"name": "Class Collectors", "module": "java.base", "package": "java.util.stream", "text": "Implementations of Collector that implement various useful reduction\n operations, such as accumulating elements into collections, summarizing\n elements according to various criteria, etc.\n\n The following are examples of using the predefined collectors to perform\n common mutable reduction tasks:\n\n \n // Accumulate names into a List\n List<String> list = people.stream()\n   .map(Person::getName)\n   .collect(Collectors.toList());\n\n // Accumulate names into a TreeSet\n Set<String> set = people.stream()\n   .map(Person::getName)\n   .collect(Collectors.toCollection(TreeSet::new));\n\n // Convert elements to strings and concatenate them, separated by commas\n String joined = things.stream()\n   .map(Object::toString)\n   .collect(Collectors.joining(\", \"));\n\n // Compute sum of salaries of employee\n int total = employees.stream()\n   .collect(Collectors.summingInt(Employee::getSalary));\n\n // Group employees by department\n Map<Department, List<Employee>> byDept = employees.stream()\n   .collect(Collectors.groupingBy(Employee::getDepartment));\n\n // Compute sum of salaries by department\n Map<Department, Integer> totalByDept = employees.stream()\n   .collect(Collectors.groupingBy(Employee::getDepartment,\n                                  Collectors.summingInt(Employee::getSalary)));\n\n // Partition students into passing and failing\n Map<Boolean, List<Student>> passingFailing = students.stream()\n   .collect(Collectors.partitioningBy(s -> s.getGrade() >= PASS_THRESHOLD));\n\n ", "codes": ["public final class Collectors\nextends Object"], "fields": [], "methods": [{"method_name": "toCollection", "method_sig": "public static <T, C extends Collection<T>> Collector<T, ?, C> toCollection (Supplier<C> collectionFactory)", "description": "Returns a Collector that accumulates the input elements into a\n new Collection, in encounter order.  The Collection is\n created by the provided factory."}, {"method_name": "toList", "method_sig": "public static <T> Collector<T, ?, List<T>> toList()", "description": "Returns a Collector that accumulates the input elements into a\n new List. There are no guarantees on the type, mutability,\n serializability, or thread-safety of the List returned; if more\n control over the returned List is required, use toCollection(Supplier)."}, {"method_name": "toUnmodifiableList", "method_sig": "public static <T> Collector<T, ?, List<T>> toUnmodifiableList()", "description": "Returns a Collector that accumulates the input elements into an\n unmodifiable List in encounter\n order. The returned Collector disallows null values and will throw\n NullPointerException if it is presented with a null value."}, {"method_name": "toSet", "method_sig": "public static <T> Collector<T, ?, Set<T>> toSet()", "description": "Returns a Collector that accumulates the input elements into a\n new Set. There are no guarantees on the type, mutability,\n serializability, or thread-safety of the Set returned; if more\n control over the returned Set is required, use\n toCollection(Supplier).\n\n This is an unordered\n Collector."}, {"method_name": "toUnmodifiableSet", "method_sig": "public static <T> Collector<T, ?, Set<T>> toUnmodifiableSet()", "description": "Returns a Collector that accumulates the input elements into an\n unmodifiable Set. The returned\n Collector disallows null values and will throw NullPointerException\n if it is presented with a null value. If the input contains duplicate elements,\n an arbitrary element of the duplicates is preserved.\n\n This is an unordered\n Collector."}, {"method_name": "joining", "method_sig": "public static Collector<CharSequence, ?, String> joining()", "description": "Returns a Collector that concatenates the input elements into a\n String, in encounter order."}, {"method_name": "joining", "method_sig": "public static Collector<CharSequence, ?, String> joining (CharSequence delimiter)", "description": "Returns a Collector that concatenates the input elements,\n separated by the specified delimiter, in encounter order."}, {"method_name": "joining", "method_sig": "public static Collector<CharSequence, ?, String> joining (CharSequence delimiter,\n                                                                   CharSequence prefix,\n                                                                   CharSequence suffix)", "description": "Returns a Collector that concatenates the input elements,\n separated by the specified delimiter, with the specified prefix and\n suffix, in encounter order."}, {"method_name": "mapping", "method_sig": "public static <T, U, A, R> Collector<T, ?, R> mapping (Function<? super T, ? extends U> mapper,\n                                                                               Collector<? super U, A, R> downstream)", "description": "Adapts a Collector accepting elements of type U to one\n accepting elements of type T by applying a mapping function to\n each input element before accumulation."}, {"method_name": "flatMapping", "method_sig": "public static <T, U, A, R> Collector<T, ?, R> flatMapping (Function<? super T, ? extends Stream<? extends U>> mapper,\n                                                                                   Collector<? super U, A, R> downstream)", "description": "Adapts a Collector accepting elements of type U to one\n accepting elements of type T by applying a flat mapping function\n to each input element before accumulation.  The flat mapping function\n maps an input element to a stream covering zero or more\n output elements that are then accumulated downstream.  Each mapped stream\n is closed after its contents\n have been placed downstream.  (If a mapped stream is null\n an empty stream is used, instead.)"}, {"method_name": "filtering", "method_sig": "public static <T, A, R> Collector<T, ?, R> filtering (Predicate<? super T> predicate,\n                                                                         Collector<? super T, A, R> downstream)", "description": "Adapts a Collector to one accepting elements of the same type\n T by applying the predicate to each input element and only\n accumulating if the predicate returns true."}, {"method_name": "collectingAndThen", "method_sig": "public static <T, A, R, RR> Collector<T, A, RR> collectingAndThen (Collector<T, A, R> downstream,\n                                                                                           Function<R, RR> finisher)", "description": "Adapts a Collector to perform an additional finishing\n transformation.  For example, one could adapt the toList()\n collector to always produce an immutable list with:\n \n List<String> list = people.stream().collect(\n   collectingAndThen(toList(),\n                     Collections::unmodifiableList));\n "}, {"method_name": "counting", "method_sig": "public static <T> Collector<T, ?, Long> counting()", "description": "Returns a Collector accepting elements of type T that\n counts the number of input elements.  If no elements are present, the\n result is 0."}, {"method_name": "minBy", "method_sig": "public static <T> Collector<T, ?, Optional<T>> minBy (Comparator<? super T> comparator)", "description": "Returns a Collector that produces the minimal element according\n to a given Comparator, described as an Optional<T>."}, {"method_name": "maxBy", "method_sig": "public static <T> Collector<T, ?, Optional<T>> maxBy (Comparator<? super T> comparator)", "description": "Returns a Collector that produces the maximal element according\n to a given Comparator, described as an Optional<T>."}, {"method_name": "summingInt", "method_sig": "public static <T> Collector<T, ?, Integer> summingInt (ToIntFunction<? super T> mapper)", "description": "Returns a Collector that produces the sum of a integer-valued\n function applied to the input elements.  If no elements are present,\n the result is 0."}, {"method_name": "summingLong", "method_sig": "public static <T> Collector<T, ?, Long> summingLong (ToLongFunction<? super T> mapper)", "description": "Returns a Collector that produces the sum of a long-valued\n function applied to the input elements.  If no elements are present,\n the result is 0."}, {"method_name": "summingDouble", "method_sig": "public static <T> Collector<T, ?, Double> summingDouble (ToDoubleFunction<? super T> mapper)", "description": "Returns a Collector that produces the sum of a double-valued\n function applied to the input elements.  If no elements are present,\n the result is 0.\n\n The sum returned can vary depending upon the order in which\n values are recorded, due to accumulated rounding error in\n addition of values of differing magnitudes. Values sorted by increasing\n absolute magnitude tend to yield more accurate results.  If any recorded\n value is a NaN or the sum is at any point a NaN then the\n sum will be NaN."}, {"method_name": "averagingInt", "method_sig": "public static <T> Collector<T, ?, Double> averagingInt (ToIntFunction<? super T> mapper)", "description": "Returns a Collector that produces the arithmetic mean of an integer-valued\n function applied to the input elements.  If no elements are present,\n the result is 0."}, {"method_name": "averagingLong", "method_sig": "public static <T> Collector<T, ?, Double> averagingLong (ToLongFunction<? super T> mapper)", "description": "Returns a Collector that produces the arithmetic mean of a long-valued\n function applied to the input elements.  If no elements are present,\n the result is 0."}, {"method_name": "averagingDouble", "method_sig": "public static <T> Collector<T, ?, Double> averagingDouble (ToDoubleFunction<? super T> mapper)", "description": "Returns a Collector that produces the arithmetic mean of a double-valued\n function applied to the input elements.  If no elements are present,\n the result is 0.\n\n The average returned can vary depending upon the order in which\n values are recorded, due to accumulated rounding error in\n addition of values of differing magnitudes. Values sorted by increasing\n absolute magnitude tend to yield more accurate results.  If any recorded\n value is a NaN or the sum is at any point a NaN then the\n average will be NaN."}, {"method_name": "reducing", "method_sig": "public static <T> Collector<T, ?, T> reducing (T identity,\n                                                        BinaryOperator<T> op)", "description": "Returns a Collector which performs a reduction of its\n input elements under a specified BinaryOperator using the\n provided identity."}, {"method_name": "reducing", "method_sig": "public static <T> Collector<T, ?, Optional<T>> reducing (BinaryOperator<T> op)", "description": "Returns a Collector which performs a reduction of its\n input elements under a specified BinaryOperator.  The result\n is described as an Optional<T>."}, {"method_name": "reducing", "method_sig": "public static <T, U> Collector<T, ?, U> reducing (U identity,\n                                                                Function<? super T, ? extends U> mapper,\n                                                                BinaryOperator<U> op)", "description": "Returns a Collector which performs a reduction of its\n input elements under a specified mapping function and\n BinaryOperator. This is a generalization of\n reducing(Object, BinaryOperator) which allows a transformation\n of the elements before reduction."}, {"method_name": "groupingBy", "method_sig": "public static <T, K> Collector<T, ?, Map<K, List<T>>> groupingBy (Function<? super T, ? extends K> classifier)", "description": "Returns a Collector implementing a \"group by\" operation on\n input elements of type T, grouping elements according to a\n classification function, and returning the results in a Map.\n\n The classification function maps elements to some key type K.\n The collector produces a Map<K, List<T>> whose keys are the\n values resulting from applying the classification function to the input\n elements, and whose corresponding values are Lists containing the\n input elements which map to the associated key under the classification\n function.\n\n There are no guarantees on the type, mutability, serializability, or\n thread-safety of the Map or List objects returned."}, {"method_name": "groupingBy", "method_sig": "public static <T, K, A, D> Collector<T, ?, Map<K, D>> groupingBy (Function<? super T, ? extends K> classifier,\n                                                                                               Collector<? super T, A, D> downstream)", "description": "Returns a Collector implementing a cascaded \"group by\" operation\n on input elements of type T, grouping elements according to a\n classification function, and then performing a reduction operation on\n the values associated with a given key using the specified downstream\n Collector.\n\n The classification function maps elements to some key type K.\n The downstream collector operates on elements of type T and\n produces a result of type D. The resulting collector produces a\n Map<K, D>.\n\n There are no guarantees on the type, mutability,\n serializability, or thread-safety of the Map returned.\n\n For example, to compute the set of last names of people in each city:\n \n Map<City, Set<String>> namesByCity\n   = people.stream().collect(\n     groupingBy(Person::getCity,\n                mapping(Person::getLastName,\n                        toSet())));\n "}, {"method_name": "groupingBy", "method_sig": "public static <T, K, D, A, M extends Map<K, D>> Collector<T, ?, M> groupingBy (Function<? super T, ? extends K> classifier,\n                                                                                                                 Supplier<M> mapFactory,\n                                                                                                                 Collector<? super T, A, D> downstream)", "description": "Returns a Collector implementing a cascaded \"group by\" operation\n on input elements of type T, grouping elements according to a\n classification function, and then performing a reduction operation on\n the values associated with a given key using the specified downstream\n Collector.  The Map produced by the Collector is created\n with the supplied factory function.\n\n The classification function maps elements to some key type K.\n The downstream collector operates on elements of type T and\n produces a result of type D. The resulting collector produces a\n Map<K, D>.\n\n For example, to compute the set of last names of people in each city,\n where the city names are sorted:\n \n Map<City, Set<String>> namesByCity\n   = people.stream().collect(\n     groupingBy(Person::getCity,\n                TreeMap::new,\n                mapping(Person::getLastName,\n                        toSet())));\n "}, {"method_name": "groupingByConcurrent", "method_sig": "public static <T, K> Collector<T, ?, ConcurrentMap<K, List<T>>> groupingByConcurrent (Function<? super T, ? extends K> classifier)", "description": "Returns a concurrent Collector implementing a \"group by\"\n operation on input elements of type T, grouping elements\n according to a classification function.\n\n This is a concurrent and\n unordered Collector.\n\n The classification function maps elements to some key type K.\n The collector produces a ConcurrentMap<K, List<T>> whose keys are the\n values resulting from applying the classification function to the input\n elements, and whose corresponding values are Lists containing the\n input elements which map to the associated key under the classification\n function.\n\n There are no guarantees on the type, mutability, or serializability\n of the ConcurrentMap or List objects returned, or of the\n thread-safety of the List objects returned."}, {"method_name": "groupingByConcurrent", "method_sig": "public static <T, K, A, D> Collector<T, ?, ConcurrentMap<K, D>> groupingByConcurrent (Function<? super T, ? extends K> classifier,\n                                                                                                                   Collector<? super T, A, D> downstream)", "description": "Returns a concurrent Collector implementing a cascaded \"group by\"\n operation on input elements of type T, grouping elements\n according to a classification function, and then performing a reduction\n operation on the values associated with a given key using the specified\n downstream Collector.\n\n This is a concurrent and\n unordered Collector.\n\n The classification function maps elements to some key type K.\n The downstream collector operates on elements of type T and\n produces a result of type D. The resulting collector produces a\n ConcurrentMap<K, D>.\n\n There are no guarantees on the type, mutability, or serializability\n of the ConcurrentMap returned.\n\n For example, to compute the set of last names of people in each city,\n where the city names are sorted:\n \n ConcurrentMap<City, Set<String>> namesByCity\n   = people.stream().collect(\n     groupingByConcurrent(Person::getCity,\n                          mapping(Person::getLastName,\n                                  toSet())));\n "}, {"method_name": "groupingByConcurrent", "method_sig": "public static <T, K, A, D, M extends ConcurrentMap<K, D>> Collector<T, ?, M> groupingByConcurrent (Function<? super T, ? extends K> classifier,\n                                                                                                                                     Supplier<M> mapFactory,\n                                                                                                                                     Collector<? super T, A, D> downstream)", "description": "Returns a concurrent Collector implementing a cascaded \"group by\"\n operation on input elements of type T, grouping elements\n according to a classification function, and then performing a reduction\n operation on the values associated with a given key using the specified\n downstream Collector.  The ConcurrentMap produced by the\n Collector is created with the supplied factory function.\n\n This is a concurrent and\n unordered Collector.\n\n The classification function maps elements to some key type K.\n The downstream collector operates on elements of type T and\n produces a result of type D. The resulting collector produces a\n ConcurrentMap<K, D>.\n\n For example, to compute the set of last names of people in each city,\n where the city names are sorted:\n \n ConcurrentMap<City, Set<String>> namesByCity\n   = people.stream().collect(\n     groupingByConcurrent(Person::getCity,\n                          ConcurrentSkipListMap::new,\n                          mapping(Person::getLastName,\n                                  toSet())));\n "}, {"method_name": "partitioningBy", "method_sig": "public static <T> Collector<T, ?, Map<Boolean, List<T>>> partitioningBy (Predicate<? super T> predicate)", "description": "Returns a Collector which partitions the input elements according\n to a Predicate, and organizes them into a\n Map<Boolean, List<T>>.\n\n The returned Map always contains mappings for both\n false and true keys.\n There are no guarantees on the type, mutability,\n serializability, or thread-safety of the Map or List\n returned."}, {"method_name": "partitioningBy", "method_sig": "public static <T, D, A> Collector<T, ?, Map<Boolean, D>> partitioningBy (Predicate<? super T> predicate,\n                                                                                                 Collector<? super T, A, D> downstream)", "description": "Returns a Collector which partitions the input elements according\n to a Predicate, reduces the values in each partition according to\n another Collector, and organizes them into a\n Map<Boolean, D> whose values are the result of the downstream\n reduction.\n\n \n The returned Map always contains mappings for both\n false and true keys.\n There are no guarantees on the type, mutability,\n serializability, or thread-safety of the Map returned."}, {"method_name": "toMap", "method_sig": "public static <T, K, U> Collector<T, ?, Map<K, U>> toMap (Function<? super T, ? extends K> keyMapper,\n                                                                                  Function<? super T, ? extends U> valueMapper)", "description": "Returns a Collector that accumulates elements into a\n Map whose keys and values are the result of applying the provided\n mapping functions to the input elements.\n\n If the mapped keys contain duplicates (according to\n Object.equals(Object)), an IllegalStateException is\n thrown when the collection operation is performed.  If the mapped keys\n might have duplicates, use toMap(Function, Function, BinaryOperator)\n instead.\n\n There are no guarantees on the type, mutability, serializability,\n or thread-safety of the Map returned."}, {"method_name": "toUnmodifiableMap", "method_sig": "public static <T, K, U> Collector<T, ?, Map<K, U>> toUnmodifiableMap (Function<? super T, ? extends K> keyMapper,\n                                                                                              Function<? super T, ? extends U> valueMapper)", "description": "Returns a Collector that accumulates the input elements into an\n unmodifiable Map,\n whose keys and values are the result of applying the provided\n mapping functions to the input elements.\n\n If the mapped keys contain duplicates (according to\n Object.equals(Object)), an IllegalStateException is\n thrown when the collection operation is performed.  If the mapped keys\n might have duplicates, use toUnmodifiableMap(Function, Function, BinaryOperator)\n to handle merging of the values.\n\n The returned Collector disallows null keys and values. If either mapping function\n returns null, NullPointerException will be thrown."}, {"method_name": "toMap", "method_sig": "public static <T, K, U> Collector<T, ?, Map<K, U>> toMap (Function<? super T, ? extends K> keyMapper,\n                                                                                  Function<? super T, ? extends U> valueMapper,\n                                                                                  BinaryOperator<U> mergeFunction)", "description": "Returns a Collector that accumulates elements into a\n Map whose keys and values are the result of applying the provided\n mapping functions to the input elements.\n\n If the mapped\n keys contain duplicates (according to Object.equals(Object)),\n the value mapping function is applied to each equal element, and the\n results are merged using the provided merging function.\n\n There are no guarantees on the type, mutability, serializability,\n or thread-safety of the Map returned."}, {"method_name": "toUnmodifiableMap", "method_sig": "public static <T, K, U> Collector<T, ?, Map<K, U>> toUnmodifiableMap (Function<? super T, ? extends K> keyMapper,\n                                                                                              Function<? super T, ? extends U> valueMapper,\n                                                                                              BinaryOperator<U> mergeFunction)", "description": "Returns a Collector that accumulates the input elements into an\n unmodifiable Map,\n whose keys and values are the result of applying the provided\n mapping functions to the input elements.\n\n If the mapped\n keys contain duplicates (according to Object.equals(Object)),\n the value mapping function is applied to each equal element, and the\n results are merged using the provided merging function.\n\n The returned Collector disallows null keys and values. If either mapping function\n returns null, NullPointerException will be thrown."}, {"method_name": "toMap", "method_sig": "public static <T, K, U, M extends Map<K, U>> Collector<T, ?, M> toMap (Function<? super T, ? extends K> keyMapper,\n                                                                                                    Function<? super T, ? extends U> valueMapper,\n                                                                                                    BinaryOperator<U> mergeFunction,\n                                                                                                    Supplier<M> mapFactory)", "description": "Returns a Collector that accumulates elements into a\n Map whose keys and values are the result of applying the provided\n mapping functions to the input elements.\n\n If the mapped\n keys contain duplicates (according to Object.equals(Object)),\n the value mapping function is applied to each equal element, and the\n results are merged using the provided merging function.  The Map\n is created by a provided supplier function."}, {"method_name": "toConcurrentMap", "method_sig": "public static <T, K, U> Collector<T, ?, ConcurrentMap<K, U>> toConcurrentMap (Function<? super T, ? extends K> keyMapper,\n                                                                                                      Function<? super T, ? extends U> valueMapper)", "description": "Returns a concurrent Collector that accumulates elements into a\n ConcurrentMap whose keys and values are the result of applying\n the provided mapping functions to the input elements.\n\n If the mapped keys contain duplicates (according to\n Object.equals(Object)), an IllegalStateException is\n thrown when the collection operation is performed.  If the mapped keys\n may have duplicates, use\n toConcurrentMap(Function, Function, BinaryOperator) instead.\n\n There are no guarantees on the type, mutability, or serializability\n of the ConcurrentMap returned."}, {"method_name": "toConcurrentMap", "method_sig": "public static <T, K, U> Collector<T, ?, ConcurrentMap<K, U>> toConcurrentMap (Function<? super T, ? extends K> keyMapper,\n                                                                                                      Function<? super T, ? extends U> valueMapper,\n                                                                                                      BinaryOperator<U> mergeFunction)", "description": "Returns a concurrent Collector that accumulates elements into a\n ConcurrentMap whose keys and values are the result of applying\n the provided mapping functions to the input elements.\n\n If the mapped keys contain duplicates (according to Object.equals(Object)),\n the value mapping function is applied to each equal element, and the\n results are merged using the provided merging function.\n\n There are no guarantees on the type, mutability, or serializability\n of the ConcurrentMap returned."}, {"method_name": "toConcurrentMap", "method_sig": "public static <T, K, U, M extends ConcurrentMap<K, U>> Collector<T, ?, M> toConcurrentMap (Function<? super T, ? extends K> keyMapper,\n                                                                                                                        Function<? super T, ? extends U> valueMapper,\n                                                                                                                        BinaryOperator<U> mergeFunction,\n                                                                                                                        Supplier<M> mapFactory)", "description": "Returns a concurrent Collector that accumulates elements into a\n ConcurrentMap whose keys and values are the result of applying\n the provided mapping functions to the input elements.\n\n If the mapped keys contain duplicates (according to Object.equals(Object)),\n the value mapping function is applied to each equal element, and the\n results are merged using the provided merging function.  The\n ConcurrentMap is created by a provided supplier function.\n\n This is a concurrent and\n unordered Collector."}, {"method_name": "summarizingInt", "method_sig": "public static <T> Collector<T, ?, IntSummaryStatistics> summarizingInt (ToIntFunction<? super T> mapper)", "description": "Returns a Collector which applies an int-producing\n mapping function to each input element, and returns summary statistics\n for the resulting values."}, {"method_name": "summarizingLong", "method_sig": "public static <T> Collector<T, ?, LongSummaryStatistics> summarizingLong (ToLongFunction<? super T> mapper)", "description": "Returns a Collector which applies an long-producing\n mapping function to each input element, and returns summary statistics\n for the resulting values."}, {"method_name": "summarizingDouble", "method_sig": "public static <T> Collector<T, ?, DoubleSummaryStatistics> summarizingDouble (ToDoubleFunction<? super T> mapper)", "description": "Returns a Collector which applies an double-producing\n mapping function to each input element, and returns summary statistics\n for the resulting values."}]}