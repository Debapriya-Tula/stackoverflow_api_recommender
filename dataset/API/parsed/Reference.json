{"name": "Class Reference", "module": "java.naming", "package": "javax.naming", "text": "This class represents a reference to an object that is found outside of\n the naming/directory system.\n\n Reference provides a way of recording address information about\n objects which themselves are not directly bound to the naming/directory system.\n\n A Reference consists of an ordered list of addresses and class information\n about the object being referenced.\n Each address in the list identifies a communications endpoint\n for the same conceptual object.  The \"communications endpoint\"\n is information that indicates how to contact the object. It could\n be, for example, a network address, a location in memory on the\n local machine, another process on the same machine, etc.\n The order of the addresses in the list may be of significance\n to object factories that interpret the reference.\n\n Multiple addresses may arise for\n various reasons, such as replication or the object offering interfaces\n over more than one communication mechanism.  The addresses are indexed\n starting with zero.\n\n A Reference also contains information to assist in creating an instance\n of the object to which this Reference refers.  It contains the class name\n of that object, and the class name and location of the factory to be used\n to create the object.\n The class factory location is a space-separated list of URLs representing\n the class path used to load the factory.  When the factory class (or\n any class or resource upon which it depends) needs to be loaded,\n each URL is used (in order) to attempt to load the class.\n\n A Reference instance is not synchronized against concurrent access by multiple\n threads. Threads that need to access a single Reference concurrently should\n synchronize amongst themselves and provide the necessary locking.", "codes": ["public class Reference\nextends Object\nimplements Cloneable, Serializable"], "fields": [{"field_name": "className", "field_sig": "protected\u00a0String className", "description": "Contains the fully-qualified name of the class of the object to which\n this Reference refers."}, {"field_name": "addrs", "field_sig": "protected\u00a0Vector<RefAddr> addrs", "description": "Contains the addresses contained in this Reference.\n Initialized by constructor."}, {"field_name": "classFactory", "field_sig": "protected\u00a0String classFactory", "description": "Contains the name of the factory class for creating\n an instance of the object to which this Reference refers.\n Initialized to null."}, {"field_name": "classFactoryLocation", "field_sig": "protected\u00a0String classFactoryLocation", "description": "Contains the location of the factory class.\n Initialized to null."}], "methods": [{"method_name": "getClassName", "method_sig": "public String getClassName()", "description": "Retrieves the class name of the object to which this reference refers."}, {"method_name": "getFactoryClassName", "method_sig": "public String getFactoryClassName()", "description": "Retrieves the class name of the factory of the object\n to which this reference refers."}, {"method_name": "getFactoryClassLocation", "method_sig": "public String getFactoryClassLocation()", "description": "Retrieves the location of the factory of the object\n to which this reference refers.\n If it is a codebase, then it is an ordered list of URLs,\n separated by spaces, listing locations from where the factory\n class definition should be loaded."}, {"method_name": "get", "method_sig": "public RefAddr get (String addrType)", "description": "Retrieves the first address that has the address type 'addrType'.\n String.compareTo() is used to test the equality of the address types."}, {"method_name": "get", "method_sig": "public RefAddr get (int posn)", "description": "Retrieves the address at index posn."}, {"method_name": "getAll", "method_sig": "public Enumeration<RefAddr> getAll()", "description": "Retrieves an enumeration of the addresses in this reference.\n When addresses are added, changed or removed from this reference,\n its effects on this enumeration are undefined."}, {"method_name": "size", "method_sig": "public int size()", "description": "Retrieves the number of addresses in this reference."}, {"method_name": "add", "method_sig": "public void add (RefAddr addr)", "description": "Adds an address to the end of the list of addresses."}, {"method_name": "add", "method_sig": "public void add (int posn,\n                RefAddr addr)", "description": "Adds an address to the list of addresses at index posn.\n All addresses at index posn or greater are shifted up\n the list by one (away from index 0)."}, {"method_name": "remove", "method_sig": "public Object remove (int posn)", "description": "Deletes the address at index posn from the list of addresses.\n All addresses at index greater than posn are shifted down\n the list by one (towards index 0)."}, {"method_name": "clear", "method_sig": "public void clear()", "description": "Deletes all addresses from this reference."}, {"method_name": "equals", "method_sig": "public boolean equals (Object obj)", "description": "Determines whether obj is a reference with the same addresses\n (in same order) as this reference.\n The addresses are checked using RefAddr.equals().\n In addition to having the same addresses, the Reference also needs to\n have the same class name as this reference.\n The class factory and class factory location are not checked.\n If obj is null or not an instance of Reference, null is returned."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Computes the hash code of this reference.\n The hash code is the sum of the hash code of its addresses."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Generates the string representation of this reference.\n The string consists of the class name to which this reference refers,\n and the string representation of each of its addresses.\n This representation is intended for display only and not to be parsed."}, {"method_name": "clone", "method_sig": "public Object clone()", "description": "Makes a copy of this reference using its class name\n list of addresses, class factory name and class factory location.\n Changes to the newly created copy does not affect this Reference\n and vice versa."}]}