{"name": "Class Beans", "module": "java.desktop", "package": "java.beans", "text": "This class provides some general purpose beans control methods.", "codes": ["public class Beans\nextends Object"], "fields": [], "methods": [{"method_name": "instantiate", "method_sig": "public static Object instantiate (ClassLoader cls,\n                                 String beanName)\n                          throws IOException,\n                                 ClassNotFoundException", "description": "\n Instantiate a JavaBean.\n "}, {"method_name": "instantiate", "method_sig": "public static Object instantiate (ClassLoader cls,\n                                 String beanName,\n                                 BeanContext beanContext)\n                          throws IOException,\n                                 ClassNotFoundException", "description": "\n Instantiate a JavaBean.\n "}, {"method_name": "instantiate", "method_sig": "@Deprecated(since=\"9\")\npublic static Object instantiate (ClassLoader cls,\n                                 String beanName,\n                                 BeanContext beanContext,\n                                 AppletInitializer initializer)\n                          throws IOException,\n                                 ClassNotFoundException", "description": "Instantiate a bean.\n \n The bean is created based on a name relative to a class-loader.\n This name should be a dot-separated name such as \"a.b.c\".\n \n In Beans 1.0 the given name can indicate either a serialized object\n or a class.  Other mechanisms may be added in the future.  In\n beans 1.0 we first try to treat the beanName as a serialized object\n name then as a class name.\n \n When using the beanName as a serialized object name we convert the\n given beanName to a resource pathname and add a trailing \".ser\" suffix.\n We then try to load a serialized object from that resource.\n \n For example, given a beanName of \"x.y\", Beans.instantiate would first\n try to read a serialized object from the resource \"x/y.ser\" and if\n that failed it would try to load the class \"x.y\" and create an\n instance of that class.\n \n If the bean is a subtype of java.applet.Applet, then it is given\n some special initialization.  First, it is supplied with a default\n AppletStub and AppletContext.  Second, if it was instantiated from\n a classname the applet's \"init\" method is called.  (If the bean was\n deserialized this step is skipped.)\n \n Note that for beans which are applets, it is the caller's responsiblity\n to call \"start\" on the applet.  For correct behaviour, this should be done\n after the applet has been added into a visible AWT container.\n \n Note that applets created via beans.instantiate run in a slightly\n different environment than applets running inside browsers.  In\n particular, bean applets have no access to \"parameters\", so they may\n wish to provide property get/set methods to set parameter values.  We\n advise bean-applet developers to test their bean-applets against both\n the JDK appletviewer (for a reference browser environment) and the\n BDK BeanBox (for a reference bean container)."}, {"method_name": "getInstanceOf", "method_sig": "public static Object getInstanceOf (Object bean,\n                                   Class<?> targetType)", "description": "From a given bean, obtain an object representing a specified\n type view of that source object.\n \n The result may be the same object or a different object.  If\n the requested target view isn't available then the given\n bean is returned.\n \n This method is provided in Beans 1.0 as a hook to allow the\n addition of more flexible bean behaviour in the future."}, {"method_name": "isInstanceOf", "method_sig": "public static boolean isInstanceOf (Object bean,\n                                   Class<?> targetType)", "description": "Check if a bean can be viewed as a given target type.\n The result will be true if the Beans.getInstanceof method\n can be used on the given bean to obtain an object that\n represents the specified targetType type view."}, {"method_name": "isDesignTime", "method_sig": "public static boolean isDesignTime()", "description": "Test if we are in design-mode."}, {"method_name": "isGuiAvailable", "method_sig": "public static boolean isGuiAvailable()", "description": "Determines whether beans can assume a GUI is available."}, {"method_name": "setDesignTime", "method_sig": "public static void setDesignTime (boolean isDesignTime)\n                          throws SecurityException", "description": "Used to indicate whether of not we are running in an application\n builder environment.\n\n Note that this method is security checked\n and is not available to (for example) untrusted applets.\n More specifically, if there is a security manager,\n its checkPropertiesAccess\n method is called. This could result in a SecurityException."}, {"method_name": "setGuiAvailable", "method_sig": "public static void setGuiAvailable (boolean isGuiAvailable)\n                            throws SecurityException", "description": "Used to indicate whether of not we are running in an environment\n where GUI interaction is available.\n\n Note that this method is security checked\n and is not available to (for example) untrusted applets.\n More specifically, if there is a security manager,\n its checkPropertiesAccess\n method is called. This could result in a SecurityException."}]}