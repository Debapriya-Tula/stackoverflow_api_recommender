{"name": "Interface Sequencer", "module": "java.desktop", "package": "javax.sound.midi", "text": "A hardware or software device that plays back a MIDI\n sequence is known as a sequencer. A MIDI sequence\n contains lists of time-stamped MIDI data, such as might be read from a\n standard MIDI file. Most sequencers also provide functions for creating and\n editing sequences.\n \n The Sequencer interface includes methods for the following basic MIDI\n sequencer operations:\n \nobtaining a sequence from MIDI file data\n   starting and stopping playback\n   moving to an arbitrary position in the sequence\n   changing the tempo (speed) of playback\n   synchronizing playback to an internal clock or to received MIDI\n   messages\n   controlling the timing of another device\n \n In addition, the following operations are supported, either directly, or\n indirectly through objects that the Sequencer has access to:\n \nediting the data by adding or deleting individual MIDI events or entire\n   tracks\n   muting or soloing individual tracks in the sequence\n   notifying listener objects about any meta-events or control-change\n   events encountered while playing back the sequence\n ", "codes": ["public interface Sequencer\nextends MidiDevice"], "fields": [{"field_name": "LOOP_CONTINUOUSLY", "field_sig": "static final\u00a0int LOOP_CONTINUOUSLY", "description": "A value indicating that looping should continue indefinitely rather than\n complete after a specific number of loops."}], "methods": [{"method_name": "setSequence", "method_sig": "void setSequence (Sequence sequence)\n          throws InvalidMidiDataException", "description": "Sets the current sequence on which the sequencer operates.\n \n This method can be called even if the Sequencer is closed."}, {"method_name": "setSequence", "method_sig": "void setSequence (InputStream stream)\n          throws IOException,\n                 InvalidMidiDataException", "description": "Sets the current sequence on which the sequencer operates. The stream\n must point to MIDI file data.\n \n This method can be called even if the Sequencer is closed."}, {"method_name": "getSequence", "method_sig": "Sequence getSequence()", "description": "Obtains the sequence on which the Sequencer is currently operating.\n \n This method can be called even if the Sequencer is closed."}, {"method_name": "start", "method_sig": "void start()", "description": "Starts playback of the MIDI data in the currently loaded sequence.\n Playback will begin from the current position. If the playback position\n reaches the loop end point, and the loop count is greater than 0,\n playback will resume at the loop start point for the number of\n repetitions set with setLoopCount. After that, or if the loop\n count is 0, playback will continue to play to the end of the sequence.\n \n The implementation ensures that the synthesizer is brought to a\n consistent state when jumping to the loop start point by sending\n appropriate controllers, pitch bend, and program change events."}, {"method_name": "stop", "method_sig": "void stop()", "description": "Stops recording, if active, and playback of the currently loaded\n sequence, if any."}, {"method_name": "isRunning", "method_sig": "boolean isRunning()", "description": "Indicates whether the Sequencer is currently running. The default is\n false. The Sequencer starts running when eitherstart() or\n startRecording() is called. isRunning then returns\n true until playback of the sequence completes or stop() is\n called."}, {"method_name": "startRecording", "method_sig": "void startRecording()", "description": "Starts recording and playback of MIDI data. Data is recorded to all\n enabled tracks, on the channel(s) for which they were enabled. Recording\n begins at the current position of the sequencer. Any events already in\n the track are overwritten for the duration of the recording session.\n Events from the currently loaded sequence, if any, are delivered to the\n sequencer's transmitter(s) along with messages received during recording.\n \n Note that tracks are not by default enabled for recording. In order to\n record MIDI data, at least one track must be specifically enabled for\n recording."}, {"method_name": "stopRecording", "method_sig": "void stopRecording()", "description": "Stops recording, if active. Playback of the current sequence continues."}, {"method_name": "isRecording", "method_sig": "boolean isRecording()", "description": "Indicates whether the Sequencer is currently recording. The default is\n false. The Sequencer begins recording when\n startRecording() is called, and then returns true until\n stop() or stopRecording() is called."}, {"method_name": "recordEnable", "method_sig": "void recordEnable (Track track,\n                  int channel)", "description": "Prepares the specified track for recording events received on a\n particular channel. Once enabled, a track will receive events when\n recording is active."}, {"method_name": "recordDisable", "method_sig": "void recordDisable (Track track)", "description": "Disables recording to the specified track. Events will no longer be\n recorded into this track."}, {"method_name": "getTempoInBPM", "method_sig": "float getTempoInBPM()", "description": "Obtains the current tempo, expressed in beats per minute. The actual\n tempo of playback is the product of the returned value and the tempo\n factor."}, {"method_name": "setTempoInBPM", "method_sig": "void setTempoInBPM (float bpm)", "description": "Sets the tempo in beats per minute. The actual tempo of playback is the\n product of the specified value and the tempo factor."}, {"method_name": "getTempoInMPQ", "method_sig": "float getTempoInMPQ()", "description": "Obtains the current tempo, expressed in microseconds per quarter note.\n The actual tempo of playback is the product of the returned value and the\n tempo factor."}, {"method_name": "setTempoInMPQ", "method_sig": "void setTempoInMPQ (float mpq)", "description": "Sets the tempo in microseconds per quarter note. The actual tempo of\n playback is the product of the specified value and the tempo factor."}, {"method_name": "setTempoFactor", "method_sig": "void setTempoFactor (float factor)", "description": "Scales the sequencer's actual playback tempo by the factor provided. The\n default is 1.0. A value of 1.0 represents the natural rate (the tempo\n specified in the sequence), 2.0 means twice as fast, etc. The tempo\n factor does not affect the values returned by getTempoInMPQ() and\n getTempoInBPM(). Those values indicate the tempo prior to scaling.\n \n Note that the tempo factor cannot be adjusted when external\n synchronization is used. In that situation, setTempoFactor always\n sets the tempo factor to 1.0."}, {"method_name": "getTempoFactor", "method_sig": "float getTempoFactor()", "description": "Returns the current tempo factor for the sequencer. The default is 1.0."}, {"method_name": "getTickLength", "method_sig": "long getTickLength()", "description": "Obtains the length of the current sequence, expressed in MIDI ticks, or 0\n if no sequence is set."}, {"method_name": "getTickPosition", "method_sig": "long getTickPosition()", "description": "Obtains the current position in the sequence, expressed in MIDI ticks.\n (The duration of a tick in seconds is determined both by the tempo and by\n the timing resolution stored in the Sequence.)"}, {"method_name": "setTickPosition", "method_sig": "void setTickPosition (long tick)", "description": "Sets the current sequencer position in MIDI ticks."}, {"method_name": "getMicrosecondLength", "method_sig": "long getMicrosecondLength()", "description": "Obtains the length of the current sequence, expressed in microseconds, or\n 0 if no sequence is set."}, {"method_name": "getMicrosecondPosition", "method_sig": "long getMicrosecondPosition()", "description": "Obtains the current position in the sequence, expressed in microseconds."}, {"method_name": "setMicrosecondPosition", "method_sig": "void setMicrosecondPosition (long microseconds)", "description": "Sets the current position in the sequence, expressed in microseconds."}, {"method_name": "setMasterSyncMode", "method_sig": "void setMasterSyncMode (Sequencer.SyncMode sync)", "description": "Sets the source of timing information used by this sequencer. The\n sequencer synchronizes to the master, which is the internal clock, MIDI\n clock, or MIDI time code, depending on the value of sync. The\n sync argument must be one of the supported modes, as returned by\n getMasterSyncModes()."}, {"method_name": "getMasterSyncMode", "method_sig": "Sequencer.SyncMode getMasterSyncMode()", "description": "Obtains the current master synchronization mode for this sequencer."}, {"method_name": "getMasterSyncModes", "method_sig": "Sequencer.SyncMode[] getMasterSyncModes()", "description": "Obtains the set of master synchronization modes supported by this\n sequencer."}, {"method_name": "setSlaveSyncMode", "method_sig": "void setSlaveSyncMode (Sequencer.SyncMode sync)", "description": "Sets the slave synchronization mode for the sequencer. This indicates the\n type of timing information sent by the sequencer to its receiver. The\n sync argument must be one of the supported modes, as returned by\n getSlaveSyncModes()."}, {"method_name": "getSlaveSyncMode", "method_sig": "Sequencer.SyncMode getSlaveSyncMode()", "description": "Obtains the current slave synchronization mode for this sequencer."}, {"method_name": "getSlaveSyncModes", "method_sig": "Sequencer.SyncMode[] getSlaveSyncModes()", "description": "Obtains the set of slave synchronization modes supported by the\n sequencer."}, {"method_name": "setTrackMute", "method_sig": "void setTrackMute (int track,\n                  boolean mute)", "description": "Sets the mute state for a track. This method may fail for a number of\n reasons. For example, the track number specified may not be valid for the\n current sequence, or the sequencer may not support this functionality. An\n application which needs to verify whether this operation succeeded should\n follow this call with a call to getTrackMute(int)."}, {"method_name": "getTrackMute", "method_sig": "boolean getTrackMute (int track)", "description": "Obtains the current mute state for a track. The default mute state for\n all tracks which have not been muted is false. In any case where the\n specified track has not been muted, this method should return false. This\n applies if the sequencer does not support muting of tracks, and if the\n specified track index is not valid."}, {"method_name": "setTrackSolo", "method_sig": "void setTrackSolo (int track,\n                  boolean solo)", "description": "Sets the solo state for a track. If solo is true only\n this track and other solo'd tracks will sound. If solo is\n false then only other solo'd tracks will sound, unless no tracks\n are solo'd in which case all un-muted tracks will sound.\n \n This method may fail for a number of reasons. For example, the track\n number specified may not be valid for the current sequence, or the\n sequencer may not support this functionality. An application which needs\n to verify whether this operation succeeded should follow this call with a\n call to getTrackSolo(int)."}, {"method_name": "getTrackSolo", "method_sig": "boolean getTrackSolo (int track)", "description": "Obtains the current solo state for a track. The default mute state for\n all tracks which have not been solo'd is false. In any case where the\n specified track has not been solo'd, this method should return false.\n This applies if the sequencer does not support soloing of tracks, and if\n the specified track index is not valid."}, {"method_name": "addMetaEventListener", "method_sig": "boolean addMetaEventListener (MetaEventListener listener)", "description": "Registers a meta-event listener to receive notification whenever a\n meta-event is encountered in the sequence and processed by the sequencer.\n This method can fail if, for instance,this class of sequencer does not\n support meta-event notification."}, {"method_name": "removeMetaEventListener", "method_sig": "void removeMetaEventListener (MetaEventListener listener)", "description": "Removes the specified meta-event listener from this sequencer's list of\n registered listeners, if in fact the listener is registered."}, {"method_name": "addControllerEventListener", "method_sig": "int[] addControllerEventListener (ControllerEventListener listener,\n                                 int[] controllers)", "description": "Registers a controller event listener to receive notification whenever\n the sequencer processes a control-change event of the requested type or\n types. The types are specified by the controllers argument, which\n should contain an array of MIDI controller numbers. (Each number should\n be between 0 and 127, inclusive. See the MIDI 1.0 Specification for the\n numbers that correspond to various types of controllers.)\n \n The returned array contains the MIDI controller numbers for which the\n listener will now receive events. Some sequencers might not support\n controller event notification, in which case the array has a length of 0.\n Other sequencers might support notification for some controllers but not\n all. This method may be invoked repeatedly. Each time, the returned array\n indicates all the controllers that the listener will be notified about,\n not only the controllers requested in that particular invocation."}, {"method_name": "removeControllerEventListener", "method_sig": "int[] removeControllerEventListener (ControllerEventListener listener,\n                                    int[] controllers)", "description": "Removes a controller event listener's interest in one or more types of\n controller event. The controllers argument is an array of MIDI\n numbers corresponding to the controllers for which the listener should no\n longer receive change notifications. To completely remove this listener\n from the list of registered listeners, pass in null for\n controllers. The returned array contains the MIDI controller\n numbers for which the listener will now receive events. The array has a\n length of 0 if the listener will not receive change notifications for any\n controllers."}, {"method_name": "setLoopStartPoint", "method_sig": "void setLoopStartPoint (long tick)", "description": "Sets the first MIDI tick that will be played in the loop. If the loop\n count is greater than 0, playback will jump to this point when reaching\n the loop end point.\n \n A value of 0 for the starting point means the beginning of the loaded\n sequence. The starting point must be lower than or equal to the ending\n point, and it must fall within the size of the loaded sequence.\n \n A sequencer's loop start point defaults to start of the sequence."}, {"method_name": "getLoopStartPoint", "method_sig": "long getLoopStartPoint()", "description": "Obtains the start position of the loop, in MIDI ticks."}, {"method_name": "setLoopEndPoint", "method_sig": "void setLoopEndPoint (long tick)", "description": "Sets the last MIDI tick that will be played in the loop. If the loop\n count is 0, the loop end point has no effect and playback continues to\n play when reaching the loop end point.\n \n A value of -1 for the ending point indicates the last tick of the\n sequence. Otherwise, the ending point must be greater than or equal to\n the starting point, and it must fall within the size of the loaded\n sequence.\n \n A sequencer's loop end point defaults to -1, meaning the end of the\n sequence."}, {"method_name": "getLoopEndPoint", "method_sig": "long getLoopEndPoint()", "description": "Obtains the end position of the loop, in MIDI ticks."}, {"method_name": "setLoopCount", "method_sig": "void setLoopCount (int count)", "description": "Sets the number of repetitions of the loop for playback. When the\n playback position reaches the loop end point, it will loop back to the\n loop start point count times, after which playback will continue\n to play to the end of the sequence.\n \n If the current position when this method is invoked is greater than the\n loop end point, playback continues to the end of the sequence without\n looping, unless the loop end point is changed subsequently.\n \n A count value of 0 disables looping: playback will continue at\n the loop end point, and it will not loop back to the loop start point.\n This is a sequencer's default.\n \n If playback is stopped during looping, the current loop status is\n cleared; subsequent start requests are not affected by an interrupted\n loop operation."}, {"method_name": "getLoopCount", "method_sig": "int getLoopCount()", "description": "Obtains the number of repetitions for playback."}]}