{"name": "Class AttributeChangeNotification", "module": "java.management", "package": "javax.management", "text": "Provides definitions of the attribute change notifications sent by MBeans.\n \n It's up to the MBean owning the attribute of interest to create and send\n attribute change notifications when the attribute change occurs.\n So the NotificationBroadcaster interface has to be implemented\n by any MBean for which an attribute change is of interest.\n \n Example:\n If an MBean called myMbean needs to notify registered listeners\n when its attribute:\n \n      String myString\n \n is modified, myMbean creates and emits the following notification:\n \n new AttributeChangeNotification(myMbean, sequenceNumber, timeStamp, msg,\n                                 \"myString\", \"String\", oldValue, newValue);\n ", "codes": ["public class AttributeChangeNotification\nextends Notification"], "fields": [{"field_name": "ATTRIBUTE_CHANGE", "field_sig": "public static final\u00a0String ATTRIBUTE_CHANGE", "description": "Notification type which indicates that the observed MBean attribute value has changed.\n The value of this type string is jmx.attribute.change."}], "methods": [{"method_name": "getAttributeName", "method_sig": "public String getAttributeName()", "description": "Gets the name of the attribute which has changed."}, {"method_name": "getAttributeType", "method_sig": "public String getAttributeType()", "description": "Gets the type of the attribute which has changed."}, {"method_name": "getOldValue", "method_sig": "public Object getOldValue()", "description": "Gets the old value of the attribute which has changed."}, {"method_name": "getNewValue", "method_sig": "public Object getNewValue()", "description": "Gets the new value of the attribute which has changed."}]}