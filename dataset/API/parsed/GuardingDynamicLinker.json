{"name": "Interface GuardingDynamicLinker", "module": "jdk.dynalink", "package": "jdk.dynalink.linker", "text": "The base interface for language-specific dynamic linkers. Such linkers\n always have to produce method handles with guards, as the validity of the\n method handle for calls at a call site inevitably depends on some condition\n (at the very least, it depends on the receiver belonging to the language\n runtime of the linker). Language runtime implementors will normally implement\n the linking logic for their own language as one or more\n GuardingDynamicLinker classes. They will typically set them as\n prioritized linkers\n in the DynamicLinkerFactory they configure for themselves, and maybe also\n set some as fallback\n linkers to handle language-specific \"property not found\" etc. conditions.\n \n Consider implementing TypeBasedGuardingDynamicLinker interface\n instead of this interface for those linkers that are based on the Java class\n of the objects. If you need to implement language-specific type conversions,\n have your GuardingDynamicLinker also implement the\n GuardingTypeConverterFactory interface.\n \n Languages can export linkers to other language runtimes for\n automatic discovery\n using a GuardingDynamicLinkerExporter.", "codes": ["public interface GuardingDynamicLinker"], "fields": [], "methods": [{"method_name": "getGuardedInvocation", "method_sig": "GuardedInvocation getGuardedInvocation (LinkRequest linkRequest,\n                                       LinkerServices linkerServices)\n                                throws Exception", "description": "Creates a guarded invocation appropriate for a particular invocation with\n the specified arguments at a call site."}]}