{"name": "Class DefaultTreeCellEditor", "module": "java.desktop", "package": "javax.swing.tree", "text": "A TreeCellEditor. You need to supply an\n instance of DefaultTreeCellRenderer\n so that the icons can be obtained. You can optionally supply\n a TreeCellEditor that will be layed out according\n to the icon in the DefaultTreeCellRenderer.\n If you do not supply a TreeCellEditor,\n a TextField will be used. Editing is started\n on a triple mouse click, or after a click, pause, click and\n a delay of 1200 milliseconds.\n\nWarning:\n Serialized objects of this class will not be compatible with\n future Swing releases. The current serialization support is\n appropriate for short term storage or RMI between applications running\n the same version of Swing.  As of 1.4, support for long term storage\n of all JavaBeans\u2122\n has been added to the java.beans package.\n Please see XMLEncoder.", "codes": ["public class DefaultTreeCellEditor\nextends Object\nimplements ActionListener, TreeCellEditor, TreeSelectionListener"], "fields": [{"field_name": "realEditor", "field_sig": "protected\u00a0TreeCellEditor realEditor", "description": "Editor handling the editing."}, {"field_name": "renderer", "field_sig": "protected\u00a0DefaultTreeCellRenderer renderer", "description": "Renderer, used to get border and offsets from."}, {"field_name": "editingContainer", "field_sig": "protected\u00a0Container editingContainer", "description": "Editing container, will contain the editorComponent."}, {"field_name": "editingComponent", "field_sig": "protected transient\u00a0Component editingComponent", "description": "Component used in editing, obtained from the\n editingContainer."}, {"field_name": "canEdit", "field_sig": "protected\u00a0boolean canEdit", "description": "As of Java 2 platform v1.4 this field should no longer be used. If\n you wish to provide similar behavior you should directly override\n isCellEditable."}, {"field_name": "offset", "field_sig": "protected transient\u00a0int offset", "description": "Used in editing. Indicates x position to place\n editingComponent."}, {"field_name": "tree", "field_sig": "protected transient\u00a0JTree tree", "description": "JTree instance listening too."}, {"field_name": "lastPath", "field_sig": "protected transient\u00a0TreePath lastPath", "description": "Last path that was selected."}, {"field_name": "timer", "field_sig": "protected transient\u00a0Timer timer", "description": "Used before starting the editing session."}, {"field_name": "lastRow", "field_sig": "protected transient\u00a0int lastRow", "description": "Row that was last passed into\n getTreeCellEditorComponent."}, {"field_name": "borderSelectionColor", "field_sig": "protected\u00a0Color borderSelectionColor", "description": "True if the border selection color should be drawn."}, {"field_name": "editingIcon", "field_sig": "protected transient\u00a0Icon editingIcon", "description": "Icon to use when editing."}, {"field_name": "font", "field_sig": "protected\u00a0Font font", "description": "Font to paint with, null indicates\n font of renderer is to be used."}], "methods": [{"method_name": "setBorderSelectionColor", "method_sig": "public void setBorderSelectionColor (Color newColor)", "description": "Sets the color to use for the border."}, {"method_name": "getBorderSelectionColor", "method_sig": "public Color getBorderSelectionColor()", "description": "Returns the color the border is drawn."}, {"method_name": "setFont", "method_sig": "public void setFont (Font font)", "description": "Sets the font to edit with. null indicates\n the renderers font should be used. This will NOT\n override any font you have set in the editor\n the receiver was instantiated with. If null\n for an editor was passed in a default editor will be\n created that will pick up this font."}, {"method_name": "getFont", "method_sig": "public Font getFont()", "description": "Gets the font used for editing."}, {"method_name": "getTreeCellEditorComponent", "method_sig": "public Component getTreeCellEditorComponent (JTree tree,\n                                            Object value,\n                                            boolean isSelected,\n                                            boolean expanded,\n                                            boolean leaf,\n                                            int row)", "description": "Configures the editor.  Passed onto the realEditor."}, {"method_name": "getCellEditorValue", "method_sig": "public Object getCellEditorValue()", "description": "Returns the value currently being edited."}, {"method_name": "isCellEditable", "method_sig": "public boolean isCellEditable (EventObject event)", "description": "If the realEditor returns true to this\n message, prepareForEditing\n is messaged and true is returned."}, {"method_name": "shouldSelectCell", "method_sig": "public boolean shouldSelectCell (EventObject event)", "description": "Messages the realEditor for the return value."}, {"method_name": "stopCellEditing", "method_sig": "public boolean stopCellEditing()", "description": "If the realEditor will allow editing to stop,\n the realEditor is removed and true is returned,\n otherwise false is returned."}, {"method_name": "cancelCellEditing", "method_sig": "public void cancelCellEditing()", "description": "Messages cancelCellEditing to the\n realEditor and removes it from this instance."}, {"method_name": "addCellEditorListener", "method_sig": "public void addCellEditorListener (CellEditorListener l)", "description": "Adds the CellEditorListener."}, {"method_name": "removeCellEditorListener", "method_sig": "public void removeCellEditorListener (CellEditorListener l)", "description": "Removes the previously added CellEditorListener."}, {"method_name": "getCellEditorListeners", "method_sig": "public CellEditorListener[] getCellEditorListeners()", "description": "Returns an array of all the CellEditorListeners added\n to this DefaultTreeCellEditor with addCellEditorListener()."}, {"method_name": "valueChanged", "method_sig": "public void valueChanged (TreeSelectionEvent e)", "description": "Resets lastPath."}, {"method_name": "actionPerformed", "method_sig": "public void actionPerformed (ActionEvent e)", "description": "Messaged when the timer fires, this will start the editing\n session."}, {"method_name": "setTree", "method_sig": "protected void setTree (JTree newTree)", "description": "Sets the tree currently editing for. This is needed to add\n a selection listener."}, {"method_name": "shouldStartEditingTimer", "method_sig": "protected boolean shouldStartEditingTimer (EventObject event)", "description": "Returns true if event is a MouseEvent\n and the click count is 1."}, {"method_name": "startEditingTimer", "method_sig": "protected void startEditingTimer()", "description": "Starts the editing timer."}, {"method_name": "canEditImmediately", "method_sig": "protected boolean canEditImmediately (EventObject event)", "description": "Returns true if event is null,\n or it is a MouseEvent with a click count > 2\n and inHitRegion returns true."}, {"method_name": "inHitRegion", "method_sig": "protected boolean inHitRegion (int x,\n                              int y)", "description": "Returns true if the passed in location is a valid mouse location\n to start editing from. This is implemented to return false if\n x is <= the width of the icon and icon gap displayed\n by the renderer. In other words this returns true if the user\n clicks over the text part displayed by the renderer, and false\n otherwise."}, {"method_name": "determineOffset", "method_sig": "protected void determineOffset (JTree tree,\n                               Object value,\n                               boolean isSelected,\n                               boolean expanded,\n                               boolean leaf,\n                               int row)", "description": "Determine the offset."}, {"method_name": "prepareForEditing", "method_sig": "protected void prepareForEditing()", "description": "Invoked just before editing is to start. Will add the\n editingComponent to the\n editingContainer."}, {"method_name": "createContainer", "method_sig": "protected Container createContainer()", "description": "Creates the container to manage placement of\n editingComponent."}, {"method_name": "createTreeCellEditor", "method_sig": "protected TreeCellEditor createTreeCellEditor()", "description": "This is invoked if a TreeCellEditor\n is not supplied in the constructor.\n It returns a TextField editor."}]}