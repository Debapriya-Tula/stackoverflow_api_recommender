{"name": "Interface BiFunction<T,\u200bU,\u200bR>", "module": "java.base", "package": "java.util.function", "text": "Represents a function that accepts two arguments and produces a result.\n This is the two-arity specialization of Function.\n\n This is a functional interface\n whose functional method is apply(Object, Object).", "codes": ["@FunctionalInterface\npublic interface BiFunction<T, U, R>"], "fields": [], "methods": [{"method_name": "apply", "method_sig": "R apply (T t,\n        U u)", "description": "Applies this function to the given arguments."}, {"method_name": "andThen", "method_sig": "default <V> BiFunction<T, U, V> andThen (Function<? super R, ? extends V> after)", "description": "Returns a composed function that first applies this function to\n its input, and then applies the after function to the result.\n If evaluation of either function throws an exception, it is relayed to\n the caller of the composed function."}]}