{"name": "Class BasicSliderUI", "module": "java.desktop", "package": "javax.swing.plaf.basic", "text": "A Basic L&F implementation of SliderUI.", "codes": ["public class BasicSliderUI\nextends SliderUI"], "fields": [{"field_name": "POSITIVE_SCROLL", "field_sig": "public static final\u00a0int POSITIVE_SCROLL", "description": "Positive scroll"}, {"field_name": "NEGATIVE_SCROLL", "field_sig": "public static final\u00a0int NEGATIVE_SCROLL", "description": "Negative scroll"}, {"field_name": "MIN_SCROLL", "field_sig": "public static final\u00a0int MIN_SCROLL", "description": "Minimum scroll"}, {"field_name": "MAX_SCROLL", "field_sig": "public static final\u00a0int MAX_SCROLL", "description": "Maximum scroll"}, {"field_name": "scrollTimer", "field_sig": "protected\u00a0Timer scrollTimer", "description": "Scroll timer"}, {"field_name": "slider", "field_sig": "protected\u00a0JSlider slider", "description": "Slider"}, {"field_name": "focusInsets", "field_sig": "protected\u00a0Insets focusInsets", "description": "Focus insets"}, {"field_name": "insetCache", "field_sig": "protected\u00a0Insets insetCache", "description": "Inset cache"}, {"field_name": "leftToRightCache", "field_sig": "protected\u00a0boolean leftToRightCache", "description": "Left-to-right cache"}, {"field_name": "focusRect", "field_sig": "protected\u00a0Rectangle focusRect", "description": "Focus rectangle"}, {"field_name": "contentRect", "field_sig": "protected\u00a0Rectangle contentRect", "description": "Content rectangle"}, {"field_name": "labelRect", "field_sig": "protected\u00a0Rectangle labelRect", "description": "Label rectangle"}, {"field_name": "tickRect", "field_sig": "protected\u00a0Rectangle tickRect", "description": "Tick rectangle"}, {"field_name": "trackRect", "field_sig": "protected\u00a0Rectangle trackRect", "description": "Track rectangle"}, {"field_name": "thumbRect", "field_sig": "protected\u00a0Rectangle thumbRect", "description": "Thumb rectangle"}, {"field_name": "trackBuffer", "field_sig": "protected\u00a0int trackBuffer", "description": "The distance that the track is from the side of the control"}, {"field_name": "trackListener", "field_sig": "protected\u00a0BasicSliderUI.TrackListener trackListener", "description": "Track listener"}, {"field_name": "changeListener", "field_sig": "protected\u00a0ChangeListener changeListener", "description": "Change listener"}, {"field_name": "componentListener", "field_sig": "protected\u00a0ComponentListener componentListener", "description": "Component listener"}, {"field_name": "focusListener", "field_sig": "protected\u00a0FocusListener focusListener", "description": "Focus listener"}, {"field_name": "scrollListener", "field_sig": "protected\u00a0BasicSliderUI.ScrollListener scrollListener", "description": "Scroll listener"}, {"field_name": "propertyChangeListener", "field_sig": "protected\u00a0PropertyChangeListener propertyChangeListener", "description": "Property chane listener"}], "methods": [{"method_name": "getShadowColor", "method_sig": "protected Color getShadowColor()", "description": "Returns the shadow color."}, {"method_name": "getHighlightColor", "method_sig": "protected Color getHighlightColor()", "description": "Returns the highlight color."}, {"method_name": "getFocusColor", "method_sig": "protected Color getFocusColor()", "description": "Returns the focus color."}, {"method_name": "isDragging", "method_sig": "protected boolean isDragging()", "description": "Returns true if the user is dragging the slider."}, {"method_name": "createUI", "method_sig": "public static ComponentUI createUI (JComponent b)", "description": "Creates a UI."}, {"method_name": "installUI", "method_sig": "public void installUI (JComponent c)", "description": "Installs a UI."}, {"method_name": "uninstallUI", "method_sig": "public void uninstallUI (JComponent c)", "description": "Uninstalls a UI."}, {"method_name": "installDefaults", "method_sig": "protected void installDefaults (JSlider slider)", "description": "Installs the defaults."}, {"method_name": "uninstallDefaults", "method_sig": "protected void uninstallDefaults (JSlider slider)", "description": "Uninstalls the defaults."}, {"method_name": "createTrackListener", "method_sig": "protected BasicSliderUI.TrackListener createTrackListener (JSlider slider)", "description": "Creates a track listener."}, {"method_name": "createChangeListener", "method_sig": "protected ChangeListener createChangeListener (JSlider slider)", "description": "Creates a change listener."}, {"method_name": "createComponentListener", "method_sig": "protected ComponentListener createComponentListener (JSlider slider)", "description": "Creates a composite listener."}, {"method_name": "createFocusListener", "method_sig": "protected FocusListener createFocusListener (JSlider slider)", "description": "Creates a focus listener."}, {"method_name": "createScrollListener", "method_sig": "protected BasicSliderUI.ScrollListener createScrollListener (JSlider slider)", "description": "Creates a scroll listener."}, {"method_name": "createPropertyChangeListener", "method_sig": "protected PropertyChangeListener createPropertyChangeListener (JSlider slider)", "description": "Creates a property change listener."}, {"method_name": "installListeners", "method_sig": "protected void installListeners (JSlider slider)", "description": "Installs listeners."}, {"method_name": "uninstallListeners", "method_sig": "protected void uninstallListeners (JSlider slider)", "description": "Uninstalls listeners."}, {"method_name": "installKeyboardActions", "method_sig": "protected void installKeyboardActions (JSlider slider)", "description": "Installs keyboard actions."}, {"method_name": "uninstallKeyboardActions", "method_sig": "protected void uninstallKeyboardActions (JSlider slider)", "description": "Uninstalls keyboard actions."}, {"method_name": "getBaseline", "method_sig": "public int getBaseline (JComponent c,\n                       int width,\n                       int height)", "description": "Returns the baseline."}, {"method_name": "getBaselineResizeBehavior", "method_sig": "public Component.BaselineResizeBehavior getBaselineResizeBehavior (JComponent c)", "description": "Returns an enum indicating how the baseline of the component\n changes as the size changes."}, {"method_name": "labelsHaveSameBaselines", "method_sig": "protected boolean labelsHaveSameBaselines()", "description": "Returns true if all the labels from the label table have the same\n baseline."}, {"method_name": "getPreferredHorizontalSize", "method_sig": "public Dimension getPreferredHorizontalSize()", "description": "Returns the preferred horizontal size."}, {"method_name": "getPreferredVerticalSize", "method_sig": "public Dimension getPreferredVerticalSize()", "description": "Returns the preferred vertical size."}, {"method_name": "getMinimumHorizontalSize", "method_sig": "public Dimension getMinimumHorizontalSize()", "description": "Returns the minimum horizontal size."}, {"method_name": "getMinimumVerticalSize", "method_sig": "public Dimension getMinimumVerticalSize()", "description": "Returns the minimum vertical size."}, {"method_name": "getPreferredSize", "method_sig": "public Dimension getPreferredSize (JComponent c)", "description": "Returns the preferred size."}, {"method_name": "getMinimumSize", "method_sig": "public Dimension getMinimumSize (JComponent c)", "description": "Returns the minimum size."}, {"method_name": "getMaximumSize", "method_sig": "public Dimension getMaximumSize (JComponent c)", "description": "Returns the maximum size."}, {"method_name": "calculateGeometry", "method_sig": "protected void calculateGeometry()", "description": "Calculates the geometry."}, {"method_name": "calculateFocusRect", "method_sig": "protected void calculateFocusRect()", "description": "Calculates the focus rectangle."}, {"method_name": "calculateThumbSize", "method_sig": "protected void calculateThumbSize()", "description": "Calculates the thumb size rectangle."}, {"method_name": "calculateContentRect", "method_sig": "protected void calculateContentRect()", "description": "Calculates the content rectangle."}, {"method_name": "calculateThumbLocation", "method_sig": "protected void calculateThumbLocation()", "description": "Calculates the thumb location."}, {"method_name": "calculateTrackBuffer", "method_sig": "protected void calculateTrackBuffer()", "description": "Calculates the track buffer."}, {"method_name": "calculateTrackRect", "method_sig": "protected void calculateTrackRect()", "description": "Calculates the track rectangle."}, {"method_name": "getTickLength", "method_sig": "protected int getTickLength()", "description": "Gets the height of the tick area for horizontal sliders and the width of\n the tick area for vertical sliders. BasicSliderUI uses the returned value\n to determine the tick area rectangle. If you want to give your ticks some\n room, make this larger than you need and paint your ticks away from the\n sides in paintTicks()."}, {"method_name": "calculateTickRect", "method_sig": "protected void calculateTickRect()", "description": "Calculates the tick rectangle."}, {"method_name": "calculateLabelRect", "method_sig": "protected void calculateLabelRect()", "description": "Calculates the label rectangle."}, {"method_name": "getThumbSize", "method_sig": "protected Dimension getThumbSize()", "description": "Returns the thumb size."}, {"method_name": "getWidthOfWidestLabel", "method_sig": "protected int getWidthOfWidestLabel()", "description": "Returns the width of the widest label."}, {"method_name": "getHeightOfTallestLabel", "method_sig": "protected int getHeightOfTallestLabel()", "description": "Returns the height of the tallest label."}, {"method_name": "getWidthOfHighValueLabel", "method_sig": "protected int getWidthOfHighValueLabel()", "description": "Returns the width of the highest value label."}, {"method_name": "getWidthOfLowValueLabel", "method_sig": "protected int getWidthOfLowValueLabel()", "description": "Returns the width of the lowest value label."}, {"method_name": "getHeightOfHighValueLabel", "method_sig": "protected int getHeightOfHighValueLabel()", "description": "Returns the height of the highest value label."}, {"method_name": "getHeightOfLowValueLabel", "method_sig": "protected int getHeightOfLowValueLabel()", "description": "Returns the height of the lowest value label."}, {"method_name": "drawInverted", "method_sig": "protected boolean drawInverted()", "description": "Draws inverted."}, {"method_name": "getHighestValue", "method_sig": "protected Integer getHighestValue()", "description": "Returns the biggest value that has an entry in the label table."}, {"method_name": "getLowestValue", "method_sig": "protected Integer getLowestValue()", "description": "Returns the smallest value that has an entry in the label table."}, {"method_name": "getLowestValueLabel", "method_sig": "protected Component getLowestValueLabel()", "description": "Returns the label that corresponds to the highest slider value in the\n label table."}, {"method_name": "getHighestValueLabel", "method_sig": "protected Component getHighestValueLabel()", "description": "Returns the label that corresponds to the lowest slider value in the\n label table."}, {"method_name": "recalculateIfInsetsChanged", "method_sig": "protected void recalculateIfInsetsChanged()", "description": "Recalculates if the insets have changed."}, {"method_name": "recalculateIfOrientationChanged", "method_sig": "protected void recalculateIfOrientationChanged()", "description": "Recalculates if the orientation has changed."}, {"method_name": "paintFocus", "method_sig": "public void paintFocus (Graphics g)", "description": "Paints focus."}, {"method_name": "paintTrack", "method_sig": "public void paintTrack (Graphics g)", "description": "Paints track."}, {"method_name": "paintTicks", "method_sig": "public void paintTicks (Graphics g)", "description": "Paints ticks."}, {"method_name": "paintMinorTickForHorizSlider", "method_sig": "protected void paintMinorTickForHorizSlider (Graphics g,\n                                            Rectangle tickBounds,\n                                            int x)", "description": "Paints minor tick for horizontal slider."}, {"method_name": "paintMajorTickForHorizSlider", "method_sig": "protected void paintMajorTickForHorizSlider (Graphics g,\n                                            Rectangle tickBounds,\n                                            int x)", "description": "Paints major tick for horizontal slider."}, {"method_name": "paintMinorTickForVertSlider", "method_sig": "protected void paintMinorTickForVertSlider (Graphics g,\n                                           Rectangle tickBounds,\n                                           int y)", "description": "Paints minor tick for vertical slider."}, {"method_name": "paintMajorTickForVertSlider", "method_sig": "protected void paintMajorTickForVertSlider (Graphics g,\n                                           Rectangle tickBounds,\n                                           int y)", "description": "Paints major tick for vertical slider."}, {"method_name": "paintLabels", "method_sig": "public void paintLabels (Graphics g)", "description": "Paints the labels."}, {"method_name": "paintHorizontalLabel", "method_sig": "protected void paintHorizontalLabel (Graphics g,\n                                    int value,\n                                    Component label)", "description": "Called for every label in the label table. Used to draw the labels for\n horizontal sliders. The graphics have been translated to labelRect.y\n already."}, {"method_name": "paintVerticalLabel", "method_sig": "protected void paintVerticalLabel (Graphics g,\n                                  int value,\n                                  Component label)", "description": "Called for every label in the label table. Used to draw the labels for\n vertical sliders. The graphics have been translated to labelRect.x\n already."}, {"method_name": "paintThumb", "method_sig": "public void paintThumb (Graphics g)", "description": "Paints the thumb."}, {"method_name": "setThumbLocation", "method_sig": "public void setThumbLocation (int x,\n                             int y)", "description": "Sets the thumb location."}, {"method_name": "scrollByBlock", "method_sig": "public void scrollByBlock (int direction)", "description": "Scrolls by block."}, {"method_name": "scrollByUnit", "method_sig": "public void scrollByUnit (int direction)", "description": "Scrolls by unit."}, {"method_name": "scrollDueToClickInTrack", "method_sig": "protected void scrollDueToClickInTrack (int dir)", "description": "This function is called when a mousePressed was detected in the track,\n not in the thumb. The default behavior is to scroll by block. You can\n override this method to stop it from scrolling or to add additional\n behavior."}, {"method_name": "xPositionForValue", "method_sig": "protected int xPositionForValue (int value)", "description": "Returns the x position for a value."}, {"method_name": "yPositionForValue", "method_sig": "protected int yPositionForValue (int value)", "description": "Returns the y position for a value."}, {"method_name": "yPositionForValue", "method_sig": "protected int yPositionForValue (int value,\n                                int trackY,\n                                int trackHeight)", "description": "Returns the y location for the specified value.  No checking is\n done on the arguments.  In particular if trackHeight is\n negative undefined results may occur."}, {"method_name": "valueForYPosition", "method_sig": "public int valueForYPosition (int yPos)", "description": "Returns the value at the y position. If yPos is beyond the\n track at the bottom or the top, this method sets the value to either\n the minimum or maximum value of the slider, depending on if the slider\n is inverted or not."}, {"method_name": "valueForXPosition", "method_sig": "public int valueForXPosition (int xPos)", "description": "Returns the value at the x position.  If xPos is beyond the\n track at the left or the right, this method sets the value to either the\n minimum or maximum value of the slider, depending on if the slider is\n inverted or not."}]}