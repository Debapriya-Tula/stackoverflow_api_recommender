{"name": "Class Bidi", "module": "java.base", "package": "java.text", "text": "This class implements the Unicode Bidirectional Algorithm.\n \n A Bidi object provides information on the bidirectional reordering of the text\n used to create it.  This is required, for example, to properly display Arabic\n or Hebrew text.  These languages are inherently mixed directional, as they order\n numbers from left-to-right while ordering most other text from right-to-left.\n \n Once created, a Bidi object can be queried to see if the text it represents is\n all left-to-right or all right-to-left.  Such objects are very lightweight and\n this text is relatively easy to process.\n \n If there are multiple runs of text, information about the runs can be accessed\n by indexing to get the start, limit, and level of a run.  The level represents\n both the direction and the 'nesting level' of a directional run.  Odd levels\n are right-to-left, while even levels are left-to-right.  So for example level\n 0 represents left-to-right text, while level 1 represents right-to-left text, and\n level 2 represents left-to-right text embedded in a right-to-left run.", "codes": ["public final class Bidi\nextends Object"], "fields": [{"field_name": "DIRECTION_LEFT_TO_RIGHT", "field_sig": "public static final\u00a0int DIRECTION_LEFT_TO_RIGHT", "description": "Constant indicating base direction is left-to-right."}, {"field_name": "DIRECTION_RIGHT_TO_LEFT", "field_sig": "public static final\u00a0int DIRECTION_RIGHT_TO_LEFT", "description": "Constant indicating base direction is right-to-left."}, {"field_name": "DIRECTION_DEFAULT_LEFT_TO_RIGHT", "field_sig": "public static final\u00a0int DIRECTION_DEFAULT_LEFT_TO_RIGHT", "description": "Constant indicating that the base direction depends on the first strong\n directional character in the text according to the Unicode\n Bidirectional Algorithm.  If no strong directional character is present,\n the base direction is left-to-right."}, {"field_name": "DIRECTION_DEFAULT_RIGHT_TO_LEFT", "field_sig": "public static final\u00a0int DIRECTION_DEFAULT_RIGHT_TO_LEFT", "description": "Constant indicating that the base direction depends on the first strong\n directional character in the text according to the Unicode\n Bidirectional Algorithm.  If no strong directional character is present,\n the base direction is right-to-left."}], "methods": [{"method_name": "createLineBidi", "method_sig": "public Bidi createLineBidi (int lineStart,\n                           int lineLimit)", "description": "Create a Bidi object representing the bidi information on a line of text within\n the paragraph represented by the current Bidi.  This call is not required if the\n entire paragraph fits on one line."}, {"method_name": "isMixed", "method_sig": "public boolean isMixed()", "description": "Return true if the line is not left-to-right or right-to-left.  This means it either has mixed runs of left-to-right\n and right-to-left text, or the base direction differs from the direction of the only run of text."}, {"method_name": "isLeftToRight", "method_sig": "public boolean isLeftToRight()", "description": "Return true if the line is all left-to-right text and the base direction is left-to-right."}, {"method_name": "isRightToLeft", "method_sig": "public boolean isRightToLeft()", "description": "Return true if the line is all right-to-left text, and the base direction is right-to-left."}, {"method_name": "getLength", "method_sig": "public int getLength()", "description": "Return the length of text in the line."}, {"method_name": "baseIsLeftToRight", "method_sig": "public boolean baseIsLeftToRight()", "description": "Return true if the base direction is left-to-right."}, {"method_name": "getBaseLevel", "method_sig": "public int getBaseLevel()", "description": "Return the base level (0 if left-to-right, 1 if right-to-left)."}, {"method_name": "getLevelAt", "method_sig": "public int getLevelAt (int offset)", "description": "Return the resolved level of the character at offset.  If offset is\n < 0 or \u2265 the length of the line, return the base direction\n level."}, {"method_name": "getRunCount", "method_sig": "public int getRunCount()", "description": "Return the number of level runs."}, {"method_name": "getRunLevel", "method_sig": "public int getRunLevel (int run)", "description": "Return the level of the nth logical run in this line."}, {"method_name": "getRunStart", "method_sig": "public int getRunStart (int run)", "description": "Return the index of the character at the start of the nth logical run in this line, as\n an offset from the start of the line."}, {"method_name": "getRunLimit", "method_sig": "public int getRunLimit (int run)", "description": "Return the index of the character past the end of the nth logical run in this line, as\n an offset from the start of the line.  For example, this will return the length\n of the line for the last run on the line."}, {"method_name": "requiresBidi", "method_sig": "public static boolean requiresBidi (char[] text,\n                                   int start,\n                                   int limit)", "description": "Return true if the specified text requires bidi analysis.  If this returns false,\n the text will display left-to-right.  Clients can then avoid constructing a Bidi object.\n Text in the Arabic Presentation Forms area of Unicode is presumed to already be shaped\n and ordered for display, and so will not cause this function to return true."}, {"method_name": "reorderVisually", "method_sig": "public static void reorderVisually (byte[] levels,\n                                   int levelStart,\n                                   Object[] objects,\n                                   int objectStart,\n                                   int count)", "description": "Reorder the objects in the array into visual order based on their levels.\n This is a utility function to use when you have a collection of objects\n representing runs of text in logical order, each run containing text\n at a single level.  The elements at index from\n objectStart up to objectStart + count\n in the objects array will be reordered into visual order assuming\n each run of text has the level indicated by the corresponding element\n in the levels array (at index - objectStart + levelStart)."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Display the bidi internal state, used in debugging."}]}