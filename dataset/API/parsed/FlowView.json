{"name": "Class FlowView", "module": "java.desktop", "package": "javax.swing.text", "text": "A View that tries to flow it's children into some\n partially constrained space.  This can be used to\n build things like paragraphs, pages, etc.  The\n flow is made up of the following pieces of functionality.\n \nA logical set of child views, which as used as a\n layout pool from which a physical view is formed.\n A strategy for translating the logical view to\n a physical (flowed) view.\n Constraints for the strategy to work against.\n A physical structure, that represents the flow.\n The children of this view are where the pieces of\n of the logical views are placed to create the flow.\n ", "codes": ["public abstract class FlowView\nextends BoxView"], "fields": [{"field_name": "layoutSpan", "field_sig": "protected\u00a0int layoutSpan", "description": "Default constraint against which the flow is\n created against."}, {"field_name": "layoutPool", "field_sig": "protected\u00a0View layoutPool", "description": "These are the views that represent the child elements\n of the element this view represents (The logical view\n to translate to a physical view).  These are not\n directly children of this view.  These are either\n placed into the rows directly or used for the purpose\n of breaking into smaller chunks, to form the physical\n view."}, {"field_name": "strategy", "field_sig": "protected\u00a0FlowView.FlowStrategy strategy", "description": "The behavior for keeping the flow updated.  By\n default this is a singleton shared by all instances\n of FlowView (FlowStrategy is stateless).  Subclasses\n can create an alternative strategy, which might keep\n state."}], "methods": [{"method_name": "getFlowAxis", "method_sig": "public int getFlowAxis()", "description": "Fetches the axis along which views should be\n flowed.  By default, this will be the axis\n orthogonal to the axis along which the flow\n rows are tiled (the axis of the default flow\n rows themselves).  This is typically used\n by the FlowStrategy."}, {"method_name": "getFlowSpan", "method_sig": "public int getFlowSpan (int index)", "description": "Fetch the constraining span to flow against for\n the given child index.  This is called by the\n FlowStrategy while it is updating the flow.\n A flow can be shaped by providing different values\n for the row constraints.  By default, the entire\n span inside of the insets along the flow axis\n is returned."}, {"method_name": "getFlowStart", "method_sig": "public int getFlowStart (int index)", "description": "Fetch the location along the flow axis that the\n flow span will start at.  This is called by the\n FlowStrategy while it is updating the flow.\n A flow can be shaped by providing different values\n for the row constraints."}, {"method_name": "createRow", "method_sig": "protected abstract View createRow()", "description": "Create a View that should be used to hold a\n a rows worth of children in a flow.  This is\n called by the FlowStrategy when new children\n are added or removed (i.e. rows are added or\n removed) in the process of updating the flow."}, {"method_name": "loadChildren", "method_sig": "protected void loadChildren (ViewFactory f)", "description": "Loads all of the children to initialize the view.\n This is called by the setParent method.\n This is reimplemented to not load any children directly\n (as they are created in the process of formatting).\n If the layoutPool variable is null, an instance of\n LogicalView is created to represent the logical view\n that is used in the process of formatting."}, {"method_name": "getViewIndexAtPosition", "method_sig": "protected int getViewIndexAtPosition (int pos)", "description": "Fetches the child view index representing the given position in\n the model."}, {"method_name": "layout", "method_sig": "protected void layout (int width,\n                      int height)", "description": "Lays out the children.  If the span along the flow\n axis has changed, layout is marked as invalid which\n which will cause the superclass behavior to recalculate\n the layout along the box axis.  The FlowStrategy.layout\n method will be called to rebuild the flow rows as\n appropriate.  If the height of this view changes\n (determined by the preferred size along the box axis),\n a preferenceChanged is called.  Following all of that,\n the normal box layout of the superclass is performed."}, {"method_name": "calculateMinorAxisRequirements", "method_sig": "protected SizeRequirements calculateMinorAxisRequirements (int axis,\n                                                          SizeRequirements r)", "description": "Calculate requirements along the minor axis.  This\n is implemented to forward the request to the logical\n view by calling getMinimumSpan, getPreferredSpan, and\n getMaximumSpan on it."}, {"method_name": "insertUpdate", "method_sig": "public void insertUpdate (DocumentEvent changes,\n                         Shape a,\n                         ViewFactory f)", "description": "Gives notification that something was inserted into the document\n in a location that this view is responsible for."}, {"method_name": "removeUpdate", "method_sig": "public void removeUpdate (DocumentEvent changes,\n                         Shape a,\n                         ViewFactory f)", "description": "Gives notification that something was removed from the document\n in a location that this view is responsible for."}, {"method_name": "changedUpdate", "method_sig": "public void changedUpdate (DocumentEvent changes,\n                          Shape a,\n                          ViewFactory f)", "description": "Gives notification from the document that attributes were changed\n in a location that this view is responsible for."}]}