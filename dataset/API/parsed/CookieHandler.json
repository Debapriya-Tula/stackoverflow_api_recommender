{"name": "Class CookieHandler", "module": "java.base", "package": "java.net", "text": "A CookieHandler object provides a callback mechanism to hook up a\n HTTP state management policy implementation into the HTTP protocol\n handler. The HTTP state management mechanism specifies a way to\n create a stateful session with HTTP requests and responses.\n\n  A system-wide CookieHandler to be used by the HTTP URL stream protocol handler can be registered by\n doing a CookieHandler.setDefault(CookieHandler). The currently registered\n CookieHandler can be retrieved by calling\n CookieHandler.getDefault().\n\n For more information on HTTP state management, see RFC\u00a02965: HTTP\n State Management Mechanism", "codes": ["public abstract class CookieHandler\nextends Object"], "fields": [], "methods": [{"method_name": "getDefault", "method_sig": "public static CookieHandler getDefault()", "description": "Gets the system-wide cookie handler."}, {"method_name": "setDefault", "method_sig": "public static void setDefault (CookieHandler cHandler)", "description": "Sets (or unsets) the system-wide cookie handler.\n\n Note: non-standard http protocol handlers may ignore this setting."}, {"method_name": "get", "method_sig": "public abstract Map<String, List<String>> get (URI uri,\n                                                   Map<String, List<String>> requestHeaders)\n                                            throws IOException", "description": "Gets all the applicable cookies from a cookie cache for the\n specified uri in the request header.\n\n The URI passed as an argument specifies the intended use for\n the cookies. In particular the scheme should reflect whether the cookies\n will be sent over http, https or used in another context like javascript.\n The host part should reflect either the destination of the cookies or\n their origin in the case of javascript.\nIt is up to the implementation to take into account the URI and\n the cookies attributes and security settings to determine which ones\n should be returned.\nHTTP protocol implementers should make sure that this method is\n called after all request headers related to choosing cookies\n are added, and before the request is sent."}, {"method_name": "put", "method_sig": "public abstract void put (URI uri,\n                         Map<String, List<String>> responseHeaders)\n                  throws IOException", "description": "Sets all the applicable cookies, examples are response header\n fields that are named Set-Cookie2, present in the response\n headers into a cookie cache."}]}