{"name": "Class Method", "module": "java.base", "package": "java.lang.reflect", "text": "A Method provides information about, and access to, a single method\n on a class or interface.  The reflected method may be a class method\n or an instance method (including an abstract method).\n\n A Method permits widening conversions to occur when matching the\n actual parameters to invoke with the underlying method's formal\n parameters, but it throws an IllegalArgumentException if a\n narrowing conversion would occur.", "codes": ["public final class Method\nextends Executable"], "fields": [], "methods": [{"method_name": "setAccessible", "method_sig": "public void setAccessible (boolean flag)", "description": "Description copied from class:\u00a0AccessibleObject"}, {"method_name": "getDeclaringClass", "method_sig": "public Class<?> getDeclaringClass()", "description": "Returns the Class object representing the class or interface\n that declares the method represented by this object."}, {"method_name": "getName", "method_sig": "public String getName()", "description": "Returns the name of the method represented by this Method\n object, as a String."}, {"method_name": "getTypeParameters", "method_sig": "public TypeVariable<Method>[] getTypeParameters()", "description": "Returns an array of TypeVariable objects that represent the\n type variables declared by the generic declaration represented by this\n GenericDeclaration object, in declaration order.  Returns an\n array of length 0 if the underlying generic declaration declares no type\n variables."}, {"method_name": "getReturnType", "method_sig": "public Class<?> getReturnType()", "description": "Returns a Class object that represents the formal return type\n of the method represented by this Method object."}, {"method_name": "getGenericReturnType", "method_sig": "public Type getGenericReturnType()", "description": "Returns a Type object that represents the formal return\n type of the method represented by this Method object.\n\n If the return type is a parameterized type,\n the Type object returned must accurately reflect\n the actual type parameters used in the source code.\n\n If the return type is a type variable or a parameterized type, it\n is created. Otherwise, it is resolved."}, {"method_name": "getParameterCount", "method_sig": "public int getParameterCount()", "description": "Returns the number of formal parameters (whether explicitly\n declared or implicitly declared or neither) for the executable\n represented by this object."}, {"method_name": "getGenericParameterTypes", "method_sig": "public Type[] getGenericParameterTypes()", "description": "Returns an array of Type objects that represent the formal\n parameter types, in declaration order, of the executable represented by\n this object. Returns an array of length 0 if the\n underlying executable takes no parameters.\n\n If a formal parameter type is a parameterized type,\n the Type object returned for it must accurately reflect\n the actual type parameters used in the source code.\n\n If a formal parameter type is a type variable or a parameterized\n type, it is created. Otherwise, it is resolved."}, {"method_name": "getGenericExceptionTypes", "method_sig": "public Type[] getGenericExceptionTypes()", "description": "Returns an array of Type objects that represent the\n exceptions declared to be thrown by this executable object.\n Returns an array of length 0 if the underlying executable declares\n no exceptions in its throws clause.\n\n If an exception type is a type variable or a parameterized\n type, it is created. Otherwise, it is resolved."}, {"method_name": "equals", "method_sig": "public boolean equals (Object obj)", "description": "Compares this Method against the specified object.  Returns\n true if the objects are the same.  Two Methods are the same if\n they were declared by the same class and have the same name\n and formal parameter types and return type."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Returns a hashcode for this Method.  The hashcode is computed\n as the exclusive-or of the hashcodes for the underlying\n method's declaring class name and the method's name."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a string describing this Method.  The string is\n formatted as the method access modifiers, if any, followed by\n the method return type, followed by a space, followed by the\n class declaring the method, followed by a period, followed by\n the method name, followed by a parenthesized, comma-separated\n list of the method's formal parameter types. If the method\n throws checked exceptions, the parameter list is followed by a\n space, followed by the word \"throws\" followed by a\n comma-separated list of the thrown exception types.\n For example:\n \n    public boolean java.lang.Object.equals(java.lang.Object)\n \nThe access modifiers are placed in canonical order as\n specified by \"The Java Language Specification\".  This is\n public, protected or private first,\n and then other modifiers in the following order:\n abstract, default, static, final,\n synchronized, native, strictfp."}, {"method_name": "toGenericString", "method_sig": "public String toGenericString()", "description": "Returns a string describing this Method, including\n type parameters.  The string is formatted as the method access\n modifiers, if any, followed by an angle-bracketed\n comma-separated list of the method's type parameters, if any,\n followed by the method's generic return type, followed by a\n space, followed by the class declaring the method, followed by\n a period, followed by the method name, followed by a\n parenthesized, comma-separated list of the method's generic\n formal parameter types.\n\n If this method was declared to take a variable number of\n arguments, instead of denoting the last parameter as\n \"Type[]\", it is denoted as\n \"Type...\".\n\n A space is used to separate access modifiers from one another\n and from the type parameters or return type.  If there are no\n type parameters, the type parameter list is elided; if the type\n parameter list is present, a space separates the list from the\n class name.  If the method is declared to throw exceptions, the\n parameter list is followed by a space, followed by the word\n \"throws\" followed by a comma-separated list of the generic\n thrown exception types.\n\n The access modifiers are placed in canonical order as\n specified by \"The Java Language Specification\".  This is\n public, protected or private first,\n and then other modifiers in the following order:\n abstract, default, static, final,\n synchronized, native, strictfp."}, {"method_name": "invoke", "method_sig": "public Object invoke (Object obj,\n                     Object... args)\n              throws IllegalAccessException,\n                     IllegalArgumentException,\n                     InvocationTargetException", "description": "Invokes the underlying method represented by this Method\n object, on the specified object with the specified parameters.\n Individual parameters are automatically unwrapped to match\n primitive formal parameters, and both primitive and reference\n parameters are subject to method invocation conversions as\n necessary.\n\n If the underlying method is static, then the specified obj\n argument is ignored. It may be null.\n\n If the number of formal parameters required by the underlying method is\n 0, the supplied args array may be of length 0 or null.\n\n If the underlying method is an instance method, it is invoked\n using dynamic method lookup as documented in The Java Language\n Specification, section 15.12.4.4; in particular,\n overriding based on the runtime type of the target object may occur.\n\n If the underlying method is static, the class that declared\n the method is initialized if it has not already been initialized.\n\n If the method completes normally, the value it returns is\n returned to the caller of invoke; if the value has a primitive\n type, it is first appropriately wrapped in an object. However,\n if the value has the type of an array of a primitive type, the\n elements of the array are not wrapped in objects; in\n other words, an array of primitive type is returned.  If the\n underlying method return type is void, the invocation returns\n null."}, {"method_name": "isBridge", "method_sig": "public boolean isBridge()", "description": "Returns true if this method is a bridge\n method; returns false otherwise."}, {"method_name": "isVarArgs", "method_sig": "public boolean isVarArgs()", "description": "Returns true if this executable was declared to take a\n variable number of arguments; returns false otherwise."}, {"method_name": "isSynthetic", "method_sig": "public boolean isSynthetic()", "description": "Returns true if this executable is a synthetic\n construct; returns false otherwise."}, {"method_name": "isDefault", "method_sig": "public boolean isDefault()", "description": "Returns true if this method is a default\n method; returns false otherwise.\n\n A default method is a public non-abstract instance method, that\n is, a non-static method with a body, declared in an interface\n type."}, {"method_name": "getDefaultValue", "method_sig": "public Object getDefaultValue()", "description": "Returns the default value for the annotation member represented by\n this Method instance.  If the member is of a primitive type,\n an instance of the corresponding wrapper type is returned. Returns\n null if no default is associated with the member, or if the method\n instance does not represent a declared member of an annotation type."}, {"method_name": "getAnnotation", "method_sig": "public <T extends Annotation> T getAnnotation (Class<T> annotationClass)", "description": "Returns this element's annotation for the specified type if\n such an annotation is present, else null."}, {"method_name": "getDeclaredAnnotations", "method_sig": "public Annotation[] getDeclaredAnnotations()", "description": "Returns annotations that are directly present on this element.\n This method ignores inherited annotations.\n\n If there are no annotations directly present on this element,\n the return value is an array of length 0.\n\n The caller of this method is free to modify the returned array; it will\n have no effect on the arrays returned to other callers."}, {"method_name": "getParameterAnnotations", "method_sig": "public Annotation[][] getParameterAnnotations()", "description": "Returns an array of arrays of Annotations that\n represent the annotations on the formal parameters, in\n declaration order, of the Executable represented by\n this object.  Synthetic and mandated parameters (see\n explanation below), such as the outer \"this\" parameter to an\n inner class constructor will be represented in the returned\n array.  If the executable has no parameters (meaning no formal,\n no synthetic, and no mandated parameters), a zero-length array\n will be returned.  If the Executable has one or more\n parameters, a nested array of length zero is returned for each\n parameter with no annotations. The annotation objects contained\n in the returned arrays are serializable.  The caller of this\n method is free to modify the returned arrays; it will have no\n effect on the arrays returned to other callers.\n\n A compiler may add extra parameters that are implicitly\n declared in source (\"mandated\"), as well as parameters that\n are neither implicitly nor explicitly declared in source\n (\"synthetic\") to the parameter list for a method.  See Parameter for more information."}, {"method_name": "getAnnotatedReturnType", "method_sig": "public AnnotatedType getAnnotatedReturnType()", "description": "Returns an AnnotatedType object that represents the use of a type to\n specify the return type of the method/constructor represented by this\n Executable.\n\n If this Executable object represents a constructor, the \n AnnotatedType object represents the type of the constructed object.\n\n If this Executable object represents a method, the \n AnnotatedType object represents the use of a type to specify the return\n type of the method."}]}