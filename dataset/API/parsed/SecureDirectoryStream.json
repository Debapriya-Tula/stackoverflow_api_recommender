{"name": "Interface SecureDirectoryStream<T>", "module": "java.base", "package": "java.nio.file", "text": "A DirectoryStream that defines operations on files that are located\n relative to an open directory. A SecureDirectoryStream is intended\n for use by sophisticated or security sensitive applications requiring to\n traverse file trees or otherwise operate on directories in a race-free manner.\n Race conditions can arise when a sequence of file operations cannot be\n carried out in isolation. Each of the file operations defined by this\n interface specify a relative path. All access to the file is relative\n to the open directory irrespective of if the directory is moved or replaced\n by an attacker while the directory is open. A SecureDirectoryStream\n may also be used as a virtual working directory.\n\n  A SecureDirectoryStream requires corresponding support from the\n underlying operating system. Where an implementation supports this features\n then the DirectoryStream returned by the newDirectoryStream method will be a SecureDirectoryStream and must\n be cast to that type in order to invoke the methods defined by this interface.\n\n  In the case of the default provider, and a security manager is set, then the permission checks are\n performed using the path obtained by resolving the given relative path\n against the original path of the directory (irrespective of if the\n directory is moved since it was opened).", "codes": ["public interface SecureDirectoryStream<T>\nextends DirectoryStream<T>"], "fields": [], "methods": [{"method_name": "newDirectoryStream", "method_sig": "SecureDirectoryStream<T> newDirectoryStream (T path,\n                                            LinkOption... options)\n                                     throws IOException", "description": "Opens the directory identified by the given path, returning a \n SecureDirectoryStream to iterate over the entries in the directory.\n\n  This method works in exactly the manner specified by the newDirectoryStream method for the case that\n the path parameter is an absolute path.\n When the parameter is a relative path then the directory to open is\n relative to this open directory. The NOFOLLOW_LINKS option may be used to\n ensure that this method fails if the file is a symbolic link.\n\n  The new directory stream, once created, is not dependent upon the\n directory stream used to create it. Closing this directory stream has no\n effect upon newly created directory stream."}, {"method_name": "newByteChannel", "method_sig": "SeekableByteChannel newByteChannel (T path,\n                                   Set<? extends OpenOption> options,\n                                   FileAttribute<?>... attrs)\n                            throws IOException", "description": "Opens or creates a file in this directory, returning a seekable byte\n channel to access the file.\n\n  This method works in exactly the manner specified by the Files.newByteChannel method for the\n case that the path parameter is an absolute\n path. When the parameter is a relative path then the file to open or\n create is relative to this open directory. In addition to the options\n defined by the Files.newByteChannel method, the NOFOLLOW_LINKS option may be used to\n ensure that this method fails if the file is a symbolic link.\n\n  The channel, once created, is not dependent upon the directory stream\n used to create it. Closing this directory stream has no effect upon the\n channel."}, {"method_name": "deleteFile", "method_sig": "void deleteFile (T path)\n         throws IOException", "description": "Deletes a file.\n\n  Unlike the delete() method, this method does\n not first examine the file to determine if the file is a directory.\n Whether a directory is deleted by this method is system dependent and\n therefore not specified. If the file is a symbolic link, then the link\n itself, not the final target of the link, is deleted. When the\n parameter is a relative path then the file to delete is relative to\n this open directory."}, {"method_name": "deleteDirectory", "method_sig": "void deleteDirectory (T path)\n              throws IOException", "description": "Deletes a directory.\n\n  Unlike the delete() method, this method\n does not first examine the file to determine if the file is a directory.\n Whether non-directories are deleted by this method is system dependent and\n therefore not specified. When the parameter is a relative path then the\n directory to delete is relative to this open directory."}, {"method_name": "move", "method_sig": "void move (T srcpath,\n          SecureDirectoryStream<T> targetdir,\n          T targetpath)\n   throws IOException", "description": "Move a file from this directory to another directory.\n\n  This method works in a similar manner to move\n method when the ATOMIC_MOVE option\n is specified. That is, this method moves a file as an atomic file system\n operation. If the srcpath parameter is an absolute path then it locates the source file. If the parameter is a\n relative path then it is located relative to this open directory. If\n the targetpath parameter is absolute then it locates the target\n file (the targetdir parameter is ignored). If the parameter is\n a relative path it is located relative to the open directory identified\n by the targetdir parameter. In all cases, if the target file\n exists then it is implementation specific if it is replaced or this\n method fails."}, {"method_name": "getFileAttributeView", "method_sig": "<V extends FileAttributeView> V getFileAttributeView (Class<V> type)", "description": "Returns a new file attribute view to access the file attributes of this\n directory.\n\n  The resulting file attribute view can be used to read or update the\n attributes of this (open) directory. The type parameter specifies\n the type of the attribute view and the method returns an instance of that\n type if supported. Invoking this method to obtain a BasicFileAttributeView always returns an instance of that class that is\n bound to this open directory.\n\n  The state of resulting file attribute view is intimately connected\n to this directory stream. Once the directory stream is closed,\n then all methods to read or update attributes will throw ClosedDirectoryStreamException."}, {"method_name": "getFileAttributeView", "method_sig": "<V extends FileAttributeView> V getFileAttributeView (T path,\n                                                     Class<V> type,\n                                                     LinkOption... options)", "description": "Returns a new file attribute view to access the file attributes of a file\n in this directory.\n\n  The resulting file attribute view can be used to read or update the\n attributes of file in this directory. The type parameter specifies\n the type of the attribute view and the method returns an instance of that\n type if supported. Invoking this method to obtain a BasicFileAttributeView always returns an instance of that class that is\n bound to the file in the directory.\n\n  The state of resulting file attribute view is intimately connected\n to this directory stream. Once the directory stream closed,\n then all methods to read or update attributes will throw ClosedDirectoryStreamException. The\n file is not required to exist at the time that the file attribute view\n is created but methods to read or update attributes of the file will\n fail when invoked and the file does not exist."}]}