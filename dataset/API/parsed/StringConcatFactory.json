{"name": "Class StringConcatFactory", "module": "java.base", "package": "java.lang.invoke", "text": "Methods to facilitate the creation of String concatenation methods, that\n can be used to efficiently concatenate a known number of arguments of known\n types, possibly after type adaptation and partial evaluation of arguments.\n These methods are typically used as bootstrap methods for \n invokedynamic call sites, to support the string concatenation\n feature of the Java Programming Language.\n\n Indirect access to the behavior specified by the provided \n MethodHandle proceeds in order through two phases:\n\n \nLinkage occurs when the methods in this class are invoked.\n They take as arguments a method type describing the concatenated arguments\n count and types, and optionally the String recipe, plus the\n constants that participate in the String concatenation. The details on\n accepted recipe shapes are described further below. Linkage may involve\n dynamically loading a new class that implements the expected concatenation\n behavior. The CallSite holds the MethodHandle pointing to the\n exact concatenation method. The concatenation methods may be shared among\n different CallSites, e.g. if linkage methods produce them as pure\n functions.\nInvocation occurs when a generated concatenation method is\n invoked with the exact dynamic arguments. This may occur many times for a\n single concatenation method. The method referenced by the behavior \n MethodHandle is invoked with the static arguments and any additional dynamic\n arguments provided on invocation, as if by MethodHandle.invoke(Object...).\n\n This class provides two forms of linkage methods: a simple version\n (makeConcat(java.lang.invoke.MethodHandles.Lookup, String,\n MethodType)) using only the dynamic arguments, and an advanced version\n (makeConcatWithConstants(java.lang.invoke.MethodHandles.Lookup,\n String, MethodType, String, Object...) using the advanced forms of capturing\n the constant arguments. The advanced strategy can produce marginally better\n invocation bytecode, at the expense of exploding the number of shapes of\n string concatenation methods present at runtime, because those shapes would\n include constant static arguments as well.", "codes": ["public final class StringConcatFactory\nextends Object"], "fields": [], "methods": [{"method_name": "makeConcat", "method_sig": "public static CallSite makeConcat (MethodHandles.Lookup lookup,\n                                  String name,\n                                  MethodType concatType)\n                           throws StringConcatException", "description": "Facilitates the creation of optimized String concatenation methods, that\n can be used to efficiently concatenate a known number of arguments of\n known types, possibly after type adaptation and partial evaluation of\n arguments. Typically used as a bootstrap method for \n invokedynamic call sites, to support the string concatenation\n feature of the Java Programming Language.\n\n When the target of the CallSite returned from this method is\n invoked, it returns the result of String concatenation, taking all\n function arguments passed to the linkage method as inputs for\n concatenation. The target signature is given by concatType.\n For a target accepting:\n \nzero inputs, concatenation results in an empty string;\none input, concatenation results in the single\n     input converted as per JLS 5.1.11 \"String Conversion\"; otherwise\ntwo or more inputs, the inputs are concatenated as per\n     requirements stated in JLS 15.18.1 \"String Concatenation Operator +\".\n     The inputs are converted as per JLS 5.1.11 \"String Conversion\",\n     and combined from left to right.\n\nAssume the linkage arguments are as follows:\n\n \nconcatType, describing the CallSite signature\n\nThen the following linkage invariants must hold:\n\n \nThe number of parameter slots in concatType is\n         less than or equal to 200\nThe return type in concatType is assignable from String\n"}, {"method_name": "makeConcatWithConstants", "method_sig": "public static CallSite makeConcatWithConstants (MethodHandles.Lookup lookup,\n                                               String name,\n                                               MethodType concatType,\n                                               String recipe,\n                                               Object... constants)\n                                        throws StringConcatException", "description": "Facilitates the creation of optimized String concatenation methods, that\n can be used to efficiently concatenate a known number of arguments of\n known types, possibly after type adaptation and partial evaluation of\n arguments. Typically used as a bootstrap method for \n invokedynamic call sites, to support the string concatenation\n feature of the Java Programming Language.\n\n When the target of the CallSite returned from this method is\n invoked, it returns the result of String concatenation, taking all\n function arguments and constants passed to the linkage method as inputs for\n concatenation. The target signature is given by concatType, and\n does not include constants.\n For a target accepting:\n \nzero inputs, concatenation results in an empty string;\none input, concatenation results in the single\n     input converted as per JLS 5.1.11 \"String Conversion\"; otherwise\ntwo or more inputs, the inputs are concatenated as per\n     requirements stated in JLS 15.18.1 \"String Concatenation Operator +\".\n     The inputs are converted as per JLS 5.1.11 \"String Conversion\",\n     and combined from left to right.\n\nThe concatenation recipe is a String description for the way to\n construct a concatenated String from the arguments and constants. The\n recipe is processed from left to right, and each character represents an\n input to concatenation. Recipe characters mean:\n\n \n\\1 (Unicode point 0001): an ordinary argument. This\n   input is passed through dynamic argument, and is provided during the\n   concatenation method invocation. This input can be null.\n\\2 (Unicode point 0002): a constant. This input passed\n   through static bootstrap argument. This constant can be any value\n   representable in constant pool. If necessary, the factory would call\n   toString to perform a one-time String conversion.\nAny other char value: a single character constant.\n\nAssume the linkage arguments are as follows:\n\n \nconcatType, describing the CallSite signature\nrecipe, describing the String recipe\nconstants, the vararg array of constants\n\nThen the following linkage invariants must hold:\n\n \nThe number of parameter slots in concatType is less than\n       or equal to 200\nThe parameter count in concatType equals to number of \\1 tags\n   in recipe\nThe return type in concatType is assignable\n   from String, and matches the return type of the\n   returned MethodHandle\nThe number of elements in constants equals to number of \\2\n   tags in recipe\n"}]}