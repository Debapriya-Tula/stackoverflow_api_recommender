{"name": "Interface ContextualRenderedImageFactory", "module": "java.desktop", "package": "java.awt.image.renderable", "text": "ContextualRenderedImageFactory provides an interface for the\n functionality that may differ between instances of\n RenderableImageOp.  Thus different operations on RenderableImages\n may be performed by a single class such as RenderedImageOp through\n the use of multiple instances of ContextualRenderedImageFactory.\n The name ContextualRenderedImageFactory is commonly shortened to\n \"CRIF.\"\n\n  All operations that are to be used in a rendering-independent\n chain must implement ContextualRenderedImageFactory.\n\n  Classes that implement this interface must provide a\n constructor with no arguments.", "codes": ["public interface ContextualRenderedImageFactory\nextends RenderedImageFactory"], "fields": [], "methods": [{"method_name": "mapRenderContext", "method_sig": "RenderContext mapRenderContext (int i,\n                               RenderContext renderContext,\n                               ParameterBlock paramBlock,\n                               RenderableImage image)", "description": "Maps the operation's output RenderContext into a RenderContext\n for each of the operation's sources.  This is useful for\n operations that can be expressed in whole or in part simply as\n alterations in the RenderContext, such as an affine mapping, or\n operations that wish to obtain lower quality renderings of\n their sources in order to save processing effort or\n transmission bandwidth.  Some operations, such as blur, can also\n use this mechanism to avoid obtaining sources of higher quality\n than necessary."}, {"method_name": "create", "method_sig": "RenderedImage create (RenderContext renderContext,\n                     ParameterBlock paramBlock)", "description": "Creates a rendering, given a RenderContext and a ParameterBlock\n containing the operation's sources and parameters.  The output\n is a RenderedImage that takes the RenderContext into account to\n determine its dimensions and placement on the image plane.\n This method houses the \"intelligence\" that allows a\n rendering-independent operation to adapt to a specific\n RenderContext."}, {"method_name": "getBounds2D", "method_sig": "Rectangle2D getBounds2D (ParameterBlock paramBlock)", "description": "Returns the bounding box for the output of the operation,\n performed on a given set of sources, in rendering-independent\n space.  The bounds are returned as a Rectangle2D, that is, an\n axis-aligned rectangle with floating-point corner coordinates."}, {"method_name": "getProperty", "method_sig": "Object getProperty (ParameterBlock paramBlock,\n                   String name)", "description": "Gets the appropriate instance of the property specified by the name\n parameter.  This method must determine which instance of a property to\n return when there are multiple sources that each specify the property."}, {"method_name": "getPropertyNames", "method_sig": "String[] getPropertyNames()", "description": "Returns a list of names recognized by getProperty."}, {"method_name": "isDynamic", "method_sig": "boolean isDynamic()", "description": "Returns true if successive renderings (that is, calls to\n create(RenderContext, ParameterBlock)) with the same arguments\n may produce different results.  This method may be used to\n determine whether an existing rendering may be cached and\n reused.  It is always safe to return true."}]}