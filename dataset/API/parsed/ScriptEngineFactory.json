{"name": "Interface ScriptEngineFactory", "module": "java.scripting", "package": "javax.script", "text": "ScriptEngineFactory is used to describe and instantiate\n ScriptEngines.\n \n Each class implementing ScriptEngine has a corresponding\n factory that exposes metadata describing the engine class.\n The ScriptEngineManager\n uses the service-provider loader mechanism described in the\n ServiceLoader class to obtain\n instances of ScriptEngineFactory instances.\n See ScriptEngineManager() and\n ScriptEngineManager(java.lang.ClassLoader).", "codes": ["public interface ScriptEngineFactory"], "fields": [], "methods": [{"method_name": "getEngineName", "method_sig": "String getEngineName()", "description": "Returns the full  name of the ScriptEngine.  For\n instance an implementation based on the Mozilla Rhino Javascript engine\n might return Rhino Mozilla Javascript Engine."}, {"method_name": "getEngineVersion", "method_sig": "String getEngineVersion()", "description": "Returns the version of the ScriptEngine."}, {"method_name": "getExtensions", "method_sig": "List<String> getExtensions()", "description": "Returns an immutable list of filename extensions, which generally identify scripts\n written in the language supported by this ScriptEngine.\n The array is used by the ScriptEngineManager to implement its\n getEngineByExtension method."}, {"method_name": "getMimeTypes", "method_sig": "List<String> getMimeTypes()", "description": "Returns an immutable list of mimetypes, associated with scripts that\n can be executed by the engine.  The list is used by the\n ScriptEngineManager class to implement its\n getEngineByMimetype method."}, {"method_name": "getNames", "method_sig": "List<String> getNames()", "description": "Returns an immutable list of  short names for the ScriptEngine, which may be used to\n identify the ScriptEngine by the ScriptEngineManager.\n For instance, an implementation based on the Mozilla Rhino Javascript engine might\n return list containing {\"javascript\", \"rhino\"}."}, {"method_name": "getLanguageName", "method_sig": "String getLanguageName()", "description": "Returns the name of the scripting language supported by this\n ScriptEngine."}, {"method_name": "getLanguageVersion", "method_sig": "String getLanguageVersion()", "description": "Returns the version of the scripting language supported by this\n ScriptEngine."}, {"method_name": "getParameter", "method_sig": "Object getParameter (String key)", "description": "Returns the value of an attribute whose meaning may be implementation-specific.\n Keys for which the value is defined in all implementations are:\n \nScriptEngine.ENGINE\nScriptEngine.ENGINE_VERSION\nScriptEngine.LANGUAGE\nScriptEngine.LANGUAGE_VERSION\nScriptEngine.NAME\n\n\n The values for these keys are the Strings returned by getEngineName,\n getEngineVersion, getLanguageName,\n getLanguageVersion for the first four keys respectively. For NAME, one of the Strings\n returned by getNames is returned.\n A reserved key, THREADING, whose value describes the behavior of the engine\n with respect to concurrent execution of scripts and maintenance of state is also defined.\n These values for the THREADING key are:\n\nnull - The engine implementation is not thread safe, and cannot\n be used to execute scripts concurrently on multiple threads.\n \"MULTITHREADED\" - The engine implementation is internally\n thread-safe and scripts may execute concurrently although effects of script execution\n on one thread may be visible to scripts on other threads.\n \"THREAD-ISOLATED\" - The implementation satisfies the requirements\n of \"MULTITHREADED\", and also, the engine maintains independent values\n for symbols in scripts executing on different threads.\n \"STATELESS\" - The implementation satisfies the requirements of\n \"THREAD-ISOLATED\".  In addition, script executions do not alter the\n mappings in the Bindings which is the engine scope of the\n ScriptEngine.  In particular, the keys in the Bindings\n and their associated values are the same before and after the execution of the script.\n \n\n Implementations may define implementation-specific keys."}, {"method_name": "getMethodCallSyntax", "method_sig": "String getMethodCallSyntax (String obj,\n                           String m,\n                           String... args)", "description": "Returns a String which can be used to invoke a method of a  Java object using the syntax\n of the supported scripting language.  For instance, an implementation for a Javascript\n engine might be;\n\n \n public String getMethodCallSyntax(String obj,\n                                   String m, String... args) {\n      String ret = obj;\n      ret += \".\" + m + \"(\";\n      for (int i = 0; i < args.length; i++) {\n          ret += args[i];\n          if (i < args.length - 1) {\n              ret += \",\";\n          }\n      }\n      ret += \")\";\n      return ret;\n }\n  "}, {"method_name": "getOutputStatement", "method_sig": "String getOutputStatement (String toDisplay)", "description": "Returns a String that can be used as a statement to display the specified String  using\n the syntax of the supported scripting language.  For instance, the implementation for a Perl\n engine might be;\n\n \n public String getOutputStatement(String toDisplay) {\n      return \"print(\" + toDisplay + \")\";\n }\n "}, {"method_name": "getProgram", "method_sig": "String getProgram (String... statements)", "description": "Returns a valid scripting language executable program with given statements.\n For instance an implementation for a PHP engine might be:\n\n \n public String getProgram(String... statements) {\n      String retval = \"<?\\n\";\n      int len = statements.length;\n      for (int i = 0; i < len; i++) {\n          retval += statements[i] + \";\\n\";\n      }\n      return retval += \"?>\";\n }\n "}, {"method_name": "getScriptEngine", "method_sig": "ScriptEngine getScriptEngine()", "description": "Returns an instance of the ScriptEngine associated with this\n ScriptEngineFactory. A new ScriptEngine is generally\n returned, but implementations may pool, share or reuse engines."}]}