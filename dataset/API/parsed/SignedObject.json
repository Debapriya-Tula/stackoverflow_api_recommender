{"name": "Class SignedObject", "module": "java.base", "package": "java.security", "text": " SignedObject is a class for the purpose of creating authentic\n runtime objects whose integrity cannot be compromised without being\n detected.\n\n  More specifically, a SignedObject contains another Serializable\n object, the (to-be-)signed object and its signature.\n\n  The signed object is a \"deep copy\" (in serialized form) of an\n original object.  Once the copy is made, further manipulation of\n the original object has no side effect on the copy.\n\n  The underlying signing algorithm is designated by the Signature\n object passed to the constructor and the verify method.\n A typical usage for signing is the following:\n\n \n Signature signingEngine = Signature.getInstance(algorithm,\n                                                 provider);\n SignedObject so = new SignedObject(myobject, signingKey,\n                                    signingEngine);\n \n A typical usage for verification is the following (having\n received SignedObject so):\n\n \n Signature verificationEngine =\n     Signature.getInstance(algorithm, provider);\n if (so.verify(publickey, verificationEngine))\n     try {\n         Object myobj = so.getObject();\n     } catch (java.lang.ClassNotFoundException e) {};\n \n Several points are worth noting.  First, there is no need to\n initialize the signing or verification engine, as it will be\n re-initialized inside the constructor and the verify\n method. Secondly, for verification to succeed, the specified\n public key must be the public key corresponding to the private key\n used to generate the SignedObject.\n\n  More importantly, for flexibility reasons, the\n constructor and verify method allow for\n customized signature engines, which can implement signature\n algorithms that are not installed formally as part of a crypto\n provider.  However, it is crucial that the programmer writing the\n verifier code be aware what Signature engine is being\n used, as its own implementation of the verify method\n is invoked to verify a signature.  In other words, a malicious\n Signature may choose to always return true on\n verification in an attempt to bypass a security check.\n\n  The signature algorithm can be, among others, the NIST standard\n DSA, using DSA and SHA-256.  The algorithm is specified using the\n same convention as that for signatures. The DSA algorithm using the\n SHA-256 message digest algorithm can be specified, for example, as\n \"SHA256withDSA\".  In the case of\n RSA the signing algorithm could be specified as, for example,\n \"SHA256withRSA\".  The algorithm name must be\n specified, as there is no default.\n\n  The name of the Cryptography Package Provider is designated\n also by the Signature parameter to the constructor and the\n verify method.  If the provider is not\n specified, the default provider is used.  Each installation can\n be configured to use a particular provider as default.\n\n  Potential applications of SignedObject include:\n \n It can be used\n internally to any Java runtime as an unforgeable authorization\n token -- one that can be passed around without the fear that the\n token can be maliciously modified without being detected.\n  It\n can be used to sign and serialize data/object for storage outside\n the Java runtime (e.g., storing critical access control data on\n disk).\n  Nested SignedObjects can be used to construct a logical\n sequence of signatures, resembling a chain of authorization and\n delegation.\n ", "codes": ["public final class SignedObject\nextends Object\nimplements Serializable"], "fields": [], "methods": [{"method_name": "getObject", "method_sig": "public Object getObject()\n                 throws IOException,\n                        ClassNotFoundException", "description": "Retrieves the encapsulated object.\n The encapsulated object is de-serialized before it is returned."}, {"method_name": "getSignature", "method_sig": "public byte[] getSignature()", "description": "Retrieves the signature on the signed object, in the form of a\n byte array."}, {"method_name": "getAlgorithm", "method_sig": "public String getAlgorithm()", "description": "Retrieves the name of the signature algorithm."}, {"method_name": "verify", "method_sig": "public boolean verify (PublicKey verificationKey,\n                      Signature verificationEngine)\n               throws InvalidKeyException,\n                      SignatureException", "description": "Verifies that the signature in this SignedObject is the valid\n signature for the object stored inside, with the given\n verification key, using the designated verification engine."}]}