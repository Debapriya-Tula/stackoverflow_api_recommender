{"name": "Class Rdn", "module": "java.naming", "package": "javax.naming.ldap", "text": "This class represents a relative distinguished name, or RDN, which is a\n component of a distinguished name as specified by\n RFC 2253.\n An example of an RDN is \"OU=Sales+CN=J.Smith\". In this example,\n the RDN consist of multiple attribute type/value pairs. The\n RDN is parsed as described in the class description for\n LdapName.\n \n The Rdn class represents an RDN as attribute type/value mappings,\n which can be viewed using\n Attributes.\n In addition, it contains convenience methods that allow easy retrieval\n of type and value when the Rdn consist of a single type/value pair,\n which is how it appears in a typical usage.\n It also contains helper methods that allow escaping of the unformatted\n attribute value and unescaping of the value formatted according to the\n escaping syntax defined in RFC2253. For methods that take or return\n attribute value as an Object, the value is either a String\n (in unescaped form) or a byte array.\n \nRdn will properly parse all valid RDNs, but\n does not attempt to detect all possible violations when parsing\n invalid RDNs. It is \"generous\" in accepting invalid RDNs.\n The \"validity\" of a name is determined ultimately when it\n is supplied to an LDAP server, which may accept or\n reject the name based on factors such as its schema information\n and interoperability considerations.\n\n \n The following code example shows how to construct an Rdn using the\n constructor that takes type and value as arguments:\n \n      Rdn rdn = new Rdn(\"cn\", \"Juicy, Fruit\");\n      System.out.println(rdn.toString());\n \n The last line will print cn=Juicy\\, Fruit. The\n unescapeValue() method can be\n used to unescape the escaped comma resulting in the original\n value \"Juicy, Fruit\". The escapeValue() method adds the escape back preceding the comma.\n \n This class can be instantiated by a string representation\n of the RDN defined in RFC 2253 as shown in the following code example:\n \n      Rdn rdn = new Rdn(\"cn=Juicy\\\\, Fruit\");\n      System.out.println(rdn.toString());\n \n The last line will print cn=Juicy\\, Fruit.\n \n Concurrent multithreaded read-only access of an instance of\n Rdn need not be synchronized.\n \n Unless otherwise noted, the behavior of passing a null argument\n to a constructor or method in this class will cause NullPointerException\n to be thrown.", "codes": ["public class Rdn\nextends Object\nimplements Serializable, Comparable<Object>"], "fields": [], "methods": [{"method_name": "getValue", "method_sig": "public Object getValue()", "description": "Retrieves one of this Rdn's value.\n This is a convenience method for obtaining the value,\n when the RDN contains a single type and value mapping,\n which is the common RDN usage.\n \n For a multi-valued RDN, this method returns value corresponding\n to the type returned by getType() method."}, {"method_name": "getType", "method_sig": "public String getType()", "description": "Retrieves one of this Rdn's type.\n This is a convenience method for obtaining the type,\n when the RDN contains a single type and value mapping,\n which is the common RDN usage.\n \n For a multi-valued RDN, the type/value pairs have\n no specific order defined on them. In that case, this method\n returns type of one of the type/value pairs.\n The getValue() method returns the\n value corresponding to the type returned by this method."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns this Rdn as a string represented in a format defined by\n RFC 2253 and described\n in the class description for LdapName."}, {"method_name": "compareTo", "method_sig": "public int compareTo (Object obj)", "description": "Compares this Rdn with the specified Object for order.\n Returns a negative integer, zero, or a positive integer as this\n Rdn is less than, equal to, or greater than the given Object.\n \n If obj is null or not an instance of Rdn, ClassCastException\n is thrown.\n \n The attribute type and value pairs of the RDNs are lined up\n against each other and compared lexicographically. The order of\n components in multi-valued Rdns (such as \"ou=Sales+cn=Bob\") is not\n significant."}, {"method_name": "equals", "method_sig": "public boolean equals (Object obj)", "description": "Compares the specified Object with this Rdn for equality.\n Returns true if the given object is also a Rdn and the two Rdns\n represent the same attribute type and value mappings. The order of\n components in multi-valued Rdns (such as \"ou=Sales+cn=Bob\") is not\n significant.\n \n Type and value equality matching is done as below:\n \n The types are compared for equality with their case ignored.\n  String values with different but equivalent usage of quoting,\n escaping, or UTF8-hex-encoding are considered equal.\n The case of the values is ignored during the comparison.\n \n\n If obj is null or not an instance of Rdn, false is returned."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Returns the hash code of this RDN. Two RDNs that are\n equal (according to the equals method) will have the same\n hash code."}, {"method_name": "toAttributes", "method_sig": "public Attributes toAttributes()", "description": "Retrieves the Attributes\n view of the type/value mappings contained in this Rdn."}, {"method_name": "size", "method_sig": "public int size()", "description": "Retrieves the number of attribute type/value pairs in this Rdn."}, {"method_name": "escapeValue", "method_sig": "public static String escapeValue (Object val)", "description": "Given the value of an attribute, returns a string escaped according\n to the rules specified in\n RFC 2253.\n \n For example, if the val is \"Sue, Grabbit and Runn\", the escaped\n value returned by this method is \"Sue\\, Grabbit and Runn\".\n \n A string value is represented as a String and binary value\n as a byte array."}, {"method_name": "unescapeValue", "method_sig": "public static Object unescapeValue (String val)", "description": "Given an attribute value string formatted according to the rules\n specified in\n RFC 2253,\n returns the unformatted value.  Escapes and quotes are\n stripped away, and hex-encoded UTF-8 is converted to equivalent\n UTF-16 characters. Returns a string value as a String, and a\n binary value as a byte array.\n \n Legal and illegal values are defined in RFC 2253.\n This method is generous in accepting the values and does not\n catch all illegal values.\n Therefore, passing in an illegal value might not necessarily\n trigger an IllegalArgumentException."}]}