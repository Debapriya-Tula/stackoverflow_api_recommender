{"name": "Interface DocumentFragment", "module": "java.xml", "package": "org.w3c.dom", "text": "DocumentFragment is a \"lightweight\" or \"minimal\"\n Document object. It is very common to want to be able to\n extract a portion of a document's tree or to create a new fragment of a\n document. Imagine implementing a user command like cut or rearranging a\n document by moving fragments around. It is desirable to have an object\n which can hold such fragments and it is quite natural to use a Node for\n this purpose. While it is true that a Document object could\n fulfill this role, a Document object can potentially be a\n heavyweight object, depending on the underlying implementation. What is\n really needed for this is a very lightweight object.\n DocumentFragment is such an object.\n Furthermore, various operations -- such as inserting nodes as children\n of another Node -- may take DocumentFragment\n objects as arguments; this results in all the child nodes of the\n DocumentFragment being moved to the child list of this node.\n The children of a DocumentFragment node are zero or more\n nodes representing the tops of any sub-trees defining the structure of\n the document. DocumentFragment nodes do not need to be\n well-formed XML documents (although they do need to follow the rules\n imposed upon well-formed XML parsed entities, which can have multiple top\n nodes). For example, a DocumentFragment might have only one\n child and that child node could be a Text node. Such a\n structure model represents neither an HTML document nor a well-formed XML\n document.\n When a DocumentFragment is inserted into a\n Document (or indeed any other Node that may\n take children) the children of the DocumentFragment and not\n the DocumentFragment itself are inserted into the\n Node. This makes the DocumentFragment very\n useful when the user wishes to create nodes that are siblings; the\n DocumentFragment acts as the parent of these nodes so that\n the user can use the standard methods from the Node\n interface, such as Node.insertBefore and\n Node.appendChild.\n See also the Document Object Model (DOM) Level 3 Core Specification.", "codes": ["public interface DocumentFragment\nextends Node"], "fields": [], "methods": []}