{"name": "Class GridLayout", "module": "java.desktop", "package": "java.awt", "text": "The GridLayout class is a layout manager that\n lays out a container's components in a rectangular grid.\n The container is divided into equal-sized rectangles,\n and one component is placed in each rectangle.\n For example, the following is an applet that lays out six buttons\n into three rows and two columns:\n\n \n\n import java.awt.*;\n import java.applet.Applet;\n public class ButtonGrid extends Applet {\n     public void init() {\n         setLayout(new GridLayout(3,2));\n         add(new Button(\"1\"));\n         add(new Button(\"2\"));\n         add(new Button(\"3\"));\n         add(new Button(\"4\"));\n         add(new Button(\"5\"));\n         add(new Button(\"6\"));\n     }\n }\n \n\n If the container's ComponentOrientation property is horizontal\n and left-to-right, the above example produces the output shown in Figure 1.\n If the container's ComponentOrientation property is horizontal\n and right-to-left, the example produces the output shown in Figure 2.\n\n \nFigures\n\n\n\n\n\n\n\nFigure 1: Horizontal, Left-to-Right\nFigure 2: Horizontal, Right-to-Left\n\n\n\n When both the number of rows and the number of columns have\n been set to non-zero values, either by a constructor or\n by the setRows and setColumns methods, the number of\n columns specified is ignored.  Instead, the number of\n columns is determined from the specified number of rows\n and the total number of components in the layout. So, for\n example, if three rows and two columns have been specified\n and nine components are added to the layout, they will\n be displayed as three rows of three columns.  Specifying\n the number of columns affects the layout only when the\n number of rows is set to zero.", "codes": ["public class GridLayout\nextends Object\nimplements LayoutManager, Serializable"], "fields": [], "methods": [{"method_name": "getRows", "method_sig": "public int getRows()", "description": "Gets the number of rows in this layout."}, {"method_name": "setRows", "method_sig": "public void setRows (int rows)", "description": "Sets the number of rows in this layout to the specified value."}, {"method_name": "getColumns", "method_sig": "public int getColumns()", "description": "Gets the number of columns in this layout."}, {"method_name": "setColumns", "method_sig": "public void setColumns (int cols)", "description": "Sets the number of columns in this layout to the specified value.\n Setting the number of columns has no affect on the layout\n if the number of rows specified by a constructor or by\n the setRows method is non-zero. In that case, the number\n of columns displayed in the layout is determined by the total\n number of components and the number of rows specified."}, {"method_name": "getHgap", "method_sig": "public int getHgap()", "description": "Gets the horizontal gap between components."}, {"method_name": "setHgap", "method_sig": "public void setHgap (int hgap)", "description": "Sets the horizontal gap between components to the specified value."}, {"method_name": "getVgap", "method_sig": "public int getVgap()", "description": "Gets the vertical gap between components."}, {"method_name": "setVgap", "method_sig": "public void setVgap (int vgap)", "description": "Sets the vertical gap between components to the specified value."}, {"method_name": "addLayoutComponent", "method_sig": "public void addLayoutComponent (String name,\n                               Component comp)", "description": "Adds the specified component with the specified name to the layout."}, {"method_name": "removeLayoutComponent", "method_sig": "public void removeLayoutComponent (Component comp)", "description": "Removes the specified component from the layout."}, {"method_name": "preferredLayoutSize", "method_sig": "public Dimension preferredLayoutSize (Container parent)", "description": "Determines the preferred size of the container argument using\n this grid layout.\n \n The preferred width of a grid layout is the largest preferred\n width of all of the components in the container times the number of\n columns, plus the horizontal padding times the number of columns\n minus one, plus the left and right insets of the target container.\n \n The preferred height of a grid layout is the largest preferred\n height of all of the components in the container times the number of\n rows, plus the vertical padding times the number of rows minus one,\n plus the top and bottom insets of the target container."}, {"method_name": "minimumLayoutSize", "method_sig": "public Dimension minimumLayoutSize (Container parent)", "description": "Determines the minimum size of the container argument using this\n grid layout.\n \n The minimum width of a grid layout is the largest minimum width\n of all of the components in the container times the number of columns,\n plus the horizontal padding times the number of columns minus one,\n plus the left and right insets of the target container.\n \n The minimum height of a grid layout is the largest minimum height\n of all of the components in the container times the number of rows,\n plus the vertical padding times the number of rows minus one, plus\n the top and bottom insets of the target container."}, {"method_name": "layoutContainer", "method_sig": "public void layoutContainer (Container parent)", "description": "Lays out the specified container using this layout.\n \n This method reshapes the components in the specified target\n container in order to satisfy the constraints of the\n GridLayout object.\n \n The grid layout manager determines the size of individual\n components by dividing the free space in the container into\n equal-sized portions according to the number of rows and columns\n in the layout. The container's free space equals the container's\n size minus any insets and any specified horizontal or vertical\n gap. All components in a grid layout are given the same size."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns the string representation of this grid layout's values."}]}