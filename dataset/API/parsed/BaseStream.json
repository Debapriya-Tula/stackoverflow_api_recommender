{"name": "Interface BaseStream<T,\u200bS extends BaseStream<T,\u200bS>>", "module": "java.base", "package": "java.util.stream", "text": "Base interface for streams, which are sequences of elements supporting\n sequential and parallel aggregate operations.  The following example\n illustrates an aggregate operation using the stream types Stream\n and IntStream, computing the sum of the weights of the red widgets:\n\n \n     int sum = widgets.stream()\n                      .filter(w -> w.getColor() == RED)\n                      .mapToInt(w -> w.getWeight())\n                      .sum();\n \n\n See the class documentation for Stream and the package documentation\n for java.util.stream for additional\n specification of streams, stream operations, stream pipelines, and\n parallelism, which governs the behavior of all stream types.", "codes": ["public interface BaseStream<T, S extends BaseStream<T, S>>\nextends AutoCloseable"], "fields": [], "methods": [{"method_name": "iterator", "method_sig": "Iterator<T> iterator()", "description": "Returns an iterator for the elements of this stream.\n\n This is a terminal\n operation."}, {"method_name": "spliterator", "method_sig": "Spliterator<T> spliterator()", "description": "Returns a spliterator for the elements of this stream.\n\n This is a terminal\n operation.\n\n \n The returned spliterator should report the set of characteristics derived\n from the stream pipeline (namely the characteristics derived from the\n stream source spliterator and the intermediate operations).\n Implementations may report a sub-set of those characteristics.  For\n example, it may be too expensive to compute the entire set for some or\n all possible stream pipelines."}, {"method_name": "isParallel", "method_sig": "boolean isParallel()", "description": "Returns whether this stream, if a terminal operation were to be executed,\n would execute in parallel.  Calling this method after invoking an\n terminal stream operation method may yield unpredictable results."}, {"method_name": "sequential", "method_sig": "S sequential()", "description": "Returns an equivalent stream that is sequential.  May return\n itself, either because the stream was already sequential, or because\n the underlying stream state was modified to be sequential.\n\n This is an intermediate\n operation."}, {"method_name": "parallel", "method_sig": "S parallel()", "description": "Returns an equivalent stream that is parallel.  May return\n itself, either because the stream was already parallel, or because\n the underlying stream state was modified to be parallel.\n\n This is an intermediate\n operation."}, {"method_name": "unordered", "method_sig": "S unordered()", "description": "Returns an equivalent stream that is\n unordered.  May return\n itself, either because the stream was already unordered, or because\n the underlying stream state was modified to be unordered.\n\n This is an intermediate\n operation."}, {"method_name": "onClose", "method_sig": "S onClose (Runnable closeHandler)", "description": "Returns an equivalent stream with an additional close handler.  Close\n handlers are run when the close() method\n is called on the stream, and are executed in the order they were\n added.  All close handlers are run, even if earlier close handlers throw\n exceptions.  If any close handler throws an exception, the first\n exception thrown will be relayed to the caller of close(), with\n any remaining exceptions added to that exception as suppressed exceptions\n (unless one of the remaining exceptions is the same exception as the\n first exception, since an exception cannot suppress itself.)  May\n return itself.\n\n This is an intermediate\n operation."}, {"method_name": "close", "method_sig": "void close()", "description": "Closes this stream, causing all close handlers for this stream pipeline\n to be called."}]}