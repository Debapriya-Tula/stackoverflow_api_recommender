{"name": "Class CounterMonitor", "module": "java.management", "package": "javax.management.monitor", "text": "Defines a monitor MBean designed to observe the values of a counter\n attribute.\n\n  A counter monitor sends a threshold\n notification when the value of the counter reaches or exceeds a\n threshold known as the comparison level.  The notify flag must be\n set to true.\n\n  In addition, an offset mechanism enables particular counting\n intervals to be detected.  If the offset value is not zero,\n whenever the threshold is triggered by the counter value reaching a\n comparison level, that comparison level is incremented by the\n offset value.  This is regarded as taking place instantaneously,\n that is, before the count is incremented.  Thus, for each level,\n the threshold triggers an event notification every time the count\n increases by an interval equal to the offset value.\n\n  If the counter can wrap around its maximum value, the modulus\n needs to be specified.  The modulus is the value at which the\n counter is reset to zero.\n\n  If the counter difference mode is used, the value of the\n derived gauge is calculated as the difference between the observed\n counter values for two successive observations.  If this difference\n is negative, the value of the derived gauge is incremented by the\n value of the modulus.  The derived gauge value (V[t]) is calculated\n using the following method:\n\n \nif (counter[t] - counter[t-GP]) is positive then\n V[t] = counter[t] - counter[t-GP]\n if (counter[t] - counter[t-GP]) is negative then\n V[t] = counter[t] - counter[t-GP] + MODULUS\n \n\n This implementation of the counter monitor requires the observed\n attribute to be of the type integer (Byte,\n Integer, Short, Long).", "codes": ["public class CounterMonitor\nextends Monitor\nimplements CounterMonitorMBean"], "fields": [], "methods": [{"method_name": "start", "method_sig": "public void start()", "description": "Starts the counter monitor."}, {"method_name": "stop", "method_sig": "public void stop()", "description": "Stops the counter monitor."}, {"method_name": "getDerivedGauge", "method_sig": "public Number getDerivedGauge (ObjectName object)", "description": "Gets the derived gauge of the specified object, if this object is\n contained in the set of observed MBeans, or null otherwise."}, {"method_name": "getDerivedGaugeTimeStamp", "method_sig": "public long getDerivedGaugeTimeStamp (ObjectName object)", "description": "Gets the derived gauge timestamp of the specified object, if\n this object is contained in the set of observed MBeans, or\n 0 otherwise."}, {"method_name": "getThreshold", "method_sig": "public Number getThreshold (ObjectName object)", "description": "Gets the current threshold value of the specified object, if\n this object is contained in the set of observed MBeans, or\n null otherwise."}, {"method_name": "getInitThreshold", "method_sig": "public Number getInitThreshold()", "description": "Gets the initial threshold value common to all observed objects."}, {"method_name": "setInitThreshold", "method_sig": "public void setInitThreshold (Number value)\n                      throws IllegalArgumentException", "description": "Sets the initial threshold value common to all observed objects.\n\n The current threshold of every object in the set of\n observed MBeans is updated consequently."}, {"method_name": "getDerivedGauge", "method_sig": "@Deprecated\npublic Number getDerivedGauge()", "description": "Returns the derived gauge of the first object in the set of\n observed MBeans."}, {"method_name": "getDerivedGaugeTimeStamp", "method_sig": "@Deprecated\npublic long getDerivedGaugeTimeStamp()", "description": "Gets the derived gauge timestamp of the first object in the set\n of observed MBeans."}, {"method_name": "getThreshold", "method_sig": "@Deprecated\npublic Number getThreshold()", "description": "Gets the threshold value of the first object in the set of\n observed MBeans."}, {"method_name": "setThreshold", "method_sig": "@Deprecated\npublic void setThreshold (Number value)\n                  throws IllegalArgumentException", "description": "Sets the initial threshold value."}, {"method_name": "getOffset", "method_sig": "public Number getOffset()", "description": "Gets the offset value common to all observed MBeans."}, {"method_name": "setOffset", "method_sig": "public void setOffset (Number value)\n               throws IllegalArgumentException", "description": "Sets the offset value common to all observed MBeans."}, {"method_name": "getModulus", "method_sig": "public Number getModulus()", "description": "Gets the modulus value common to all observed MBeans."}, {"method_name": "setModulus", "method_sig": "public void setModulus (Number value)\n                throws IllegalArgumentException", "description": "Sets the modulus value common to all observed MBeans."}, {"method_name": "getNotify", "method_sig": "public boolean getNotify()", "description": "Gets the notification's on/off switch value common to all\n observed MBeans."}, {"method_name": "setNotify", "method_sig": "public void setNotify (boolean value)", "description": "Sets the notification's on/off switch value common to all\n observed MBeans."}, {"method_name": "getDifferenceMode", "method_sig": "public boolean getDifferenceMode()", "description": "Gets the difference mode flag value common to all observed MBeans."}, {"method_name": "setDifferenceMode", "method_sig": "public void setDifferenceMode (boolean value)", "description": "Sets the difference mode flag value common to all observed MBeans."}, {"method_name": "getNotificationInfo", "method_sig": "public MBeanNotificationInfo[] getNotificationInfo()", "description": "Returns a NotificationInfo object containing the\n name of the Java class of the notification and the notification\n types sent by the counter monitor."}]}