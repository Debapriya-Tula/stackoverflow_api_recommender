{"name": "Class Currency", "module": "java.base", "package": "java.util", "text": "Represents a currency. Currencies are identified by their ISO 4217 currency\n codes. Visit the \n ISO web site for more information.\n \n The class is designed so that there's never more than one\n Currency instance for any given currency. Therefore, there's\n no public constructor. You obtain a Currency instance using\n the getInstance methods.\n \n Users can supersede the Java runtime currency data by means of the system\n property java.util.currency.data. If this system property is\n defined then its value is the location of a properties file, the contents of\n which are key/value pairs of the ISO 3166 country codes and the ISO 4217\n currency data respectively.  The value part consists of three ISO 4217 values\n of a currency, i.e., an alphabetic code, a numeric code, and a minor unit.\n Those three ISO 4217 values are separated by commas.\n The lines which start with '#'s are considered comment lines. An optional UTC\n timestamp may be specified per currency entry if users need to specify a\n cutover date indicating when the new data comes into effect. The timestamp is\n appended to the end of the currency properties and uses a comma as a separator.\n If a UTC datestamp is present and valid, the JRE will only use the new currency\n properties if the current UTC date is later than the date specified at class\n loading time. The format of the timestamp must be of ISO 8601 format :\n 'yyyy-MM-dd'T'HH:mm:ss'. For example,\n \n\n #Sample currency properties\n JP=JPZ,999,0\n \n\n will supersede the currency data for Japan. If JPZ is one of the existing\n ISO 4217 currency code referred by other countries, the existing\n JPZ currency data is updated with the given numeric code and minor\n unit value.\n\n \n\n #Sample currency properties with cutover date\n JP=JPZ,999,0,2014-01-01T00:00:00\n \n\n will supersede the currency data for Japan if Currency class is loaded after\n 1st January 2014 00:00:00 GMT.\n \n Where syntactically malformed entries are encountered, the entry is ignored\n and the remainder of entries in file are processed. For instances where duplicate\n country code entries exist, the behavior of the Currency information for that\n Currency is undefined and the remainder of entries in file are processed.\n \n If multiple property entries with same currency code but different numeric code\n and/or minor unit are encountered, those entries are ignored and the remainder\n of entries in file are processed.\n\n \n It is recommended to use BigDecimal class while dealing\n with Currency or monetary values as it provides better handling of floating\n point numbers and their operations.", "codes": ["public final class Currency\nextends Object\nimplements Serializable"], "fields": [], "methods": [{"method_name": "getInstance", "method_sig": "public static Currency getInstance (String currencyCode)", "description": "Returns the Currency instance for the given currency code."}, {"method_name": "getInstance", "method_sig": "public static Currency getInstance (Locale locale)", "description": "Returns the Currency instance for the country of the\n given locale. The language and variant components of the locale\n are ignored. The result may vary over time, as countries change their\n currencies. For example, for the original member countries of the\n European Monetary Union, the method returns the old national currencies\n until December 31, 2001, and the Euro from January 1, 2002, local time\n of the respective countries.\n \n If the specified locale contains \"cu\" and/or \"rg\"\n Unicode extensions,\n the instance returned from this method reflects\n the values specified with those extensions. If both \"cu\" and \"rg\" are\n specified, the currency from the \"cu\" extension supersedes the implicit one\n from the \"rg\" extension.\n \n The method returns null for territories that don't\n have a currency, such as Antarctica."}, {"method_name": "getAvailableCurrencies", "method_sig": "public static Set<Currency> getAvailableCurrencies()", "description": "Gets the set of available currencies.  The returned set of currencies\n contains all of the available currencies, which may include currencies\n that represent obsolete ISO 4217 codes.  The set can be modified\n without affecting the available currencies in the runtime."}, {"method_name": "getCurrencyCode", "method_sig": "public String getCurrencyCode()", "description": "Gets the ISO 4217 currency code of this currency."}, {"method_name": "getSymbol", "method_sig": "public String getSymbol()", "description": "Gets the symbol of this currency for the default\n DISPLAY locale.\n For example, for the US Dollar, the symbol is \"$\" if the default\n locale is the US, while for other locales it may be \"US$\". If no\n symbol can be determined, the ISO 4217 currency code is returned.\n \n If the default DISPLAY locale\n contains \"rg\" (region override)\n Unicode extension,\n the symbol returned from this method reflects\n the value specified with that extension.\n \n This is equivalent to calling\n getSymbol(Locale.getDefault(Locale.Category.DISPLAY))."}, {"method_name": "getSymbol", "method_sig": "public String getSymbol (Locale locale)", "description": "Gets the symbol of this currency for the specified locale.\n For example, for the US Dollar, the symbol is \"$\" if the specified\n locale is the US, while for other locales it may be \"US$\". If no\n symbol can be determined, the ISO 4217 currency code is returned.\n \n If the specified locale contains \"rg\" (region override)\n Unicode extension,\n the symbol returned from this method reflects\n the value specified with that extension."}, {"method_name": "getDefaultFractionDigits", "method_sig": "public int getDefaultFractionDigits()", "description": "Gets the default number of fraction digits used with this currency.\n Note that the number of fraction digits is the same as ISO 4217's\n minor unit for the currency.\n For example, the default number of fraction digits for the Euro is 2,\n while for the Japanese Yen it's 0.\n In the case of pseudo-currencies, such as IMF Special Drawing Rights,\n -1 is returned."}, {"method_name": "getNumericCode", "method_sig": "public int getNumericCode()", "description": "Returns the ISO 4217 numeric code of this currency."}, {"method_name": "getNumericCodeAsString", "method_sig": "public String getNumericCodeAsString()", "description": "Returns the 3 digit ISO 4217 numeric code of this currency as a String.\n Unlike getNumericCode(), which returns the numeric code as int,\n this method always returns the numeric code as a 3 digit string.\n e.g. a numeric value of 32 would be returned as \"032\",\n and a numeric value of 6 would be returned as \"006\"."}, {"method_name": "getDisplayName", "method_sig": "public String getDisplayName()", "description": "Gets the name that is suitable for displaying this currency for\n the default DISPLAY locale.\n If there is no suitable display name found\n for the default locale, the ISO 4217 currency code is returned.\n \n This is equivalent to calling\n getDisplayName(Locale.getDefault(Locale.Category.DISPLAY))."}, {"method_name": "getDisplayName", "method_sig": "public String getDisplayName (Locale locale)", "description": "Gets the name that is suitable for displaying this currency for\n the specified locale.  If there is no suitable display name found\n for the specified locale, the ISO 4217 currency code is returned."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns the ISO 4217 currency code of this currency."}]}