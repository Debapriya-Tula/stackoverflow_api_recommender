{"name": "Class JColorChooser", "module": "java.desktop", "package": "javax.swing", "text": "JColorChooser provides a pane of controls designed to allow\n a user to manipulate and select a color.\n For information about using color choosers, see\n How to Use Color Choosers,\n a section in The Java Tutorial.\n\n \n\n This class provides three levels of API:\n \nA static convenience method which shows a modal color-chooser\n dialog and returns the color selected by the user.\n A static convenience method for creating a color-chooser dialog\n where ActionListeners can be specified to be invoked when\n the user presses one of the dialog buttons.\n The ability to create instances of JColorChooser panes\n directly (within any container). PropertyChange listeners\n can be added to detect when the current \"color\" property changes.\n \n\nWarning: Swing is not thread safe. For more\n information see Swing's Threading\n Policy.\n \nWarning:\n Serialized objects of this class will not be compatible with\n future Swing releases. The current serialization support is\n appropriate for short term storage or RMI between applications running\n the same version of Swing.  As of 1.4, support for long term storage\n of all JavaBeans\u2122\n has been added to the java.beans package.\n Please see XMLEncoder.", "codes": ["@JavaBean(defaultProperty=\"UI\",\n          description=\"A component that supports selecting a Color.\")\npublic class JColorChooser\nextends JComponent\nimplements Accessible"], "fields": [{"field_name": "SELECTION_MODEL_PROPERTY", "field_sig": "public static final\u00a0String SELECTION_MODEL_PROPERTY", "description": "The selection model property name."}, {"field_name": "PREVIEW_PANEL_PROPERTY", "field_sig": "public static final\u00a0String PREVIEW_PANEL_PROPERTY", "description": "The preview panel property name."}, {"field_name": "CHOOSER_PANELS_PROPERTY", "field_sig": "public static final\u00a0String CHOOSER_PANELS_PROPERTY", "description": "The chooserPanel array property name."}, {"field_name": "accessibleContext", "field_sig": "protected\u00a0AccessibleContext accessibleContext", "description": "The accessible context."}], "methods": [{"method_name": "showDialog", "method_sig": "public static Color showDialog (Component component,\n                               String title,\n                               Color initialColor)\n                        throws HeadlessException", "description": "Shows a modal color-chooser dialog and blocks until the\n dialog is hidden.  If the user presses the \"OK\" button, then\n this method hides/disposes the dialog and returns the selected color.\n If the user presses the \"Cancel\" button or closes the dialog without\n pressing \"OK\", then this method hides/disposes the dialog and returns\n null."}, {"method_name": "showDialog", "method_sig": "public static Color showDialog (Component component,\n                               String title,\n                               Color initialColor,\n                               boolean colorTransparencySelectionEnabled)\n                        throws HeadlessException", "description": "Shows a modal color-chooser dialog and blocks until the\n dialog is hidden.  If the user presses the \"OK\" button, then\n this method hides/disposes the dialog and returns the selected color.\n If the user presses the \"Cancel\" button or closes the dialog without\n pressing \"OK\", then this method hides/disposes the dialog and returns\n null."}, {"method_name": "createDialog", "method_sig": "public static JDialog createDialog (Component c,\n                                   String title,\n                                   boolean modal,\n                                   JColorChooser chooserPane,\n                                   ActionListener okListener,\n                                   ActionListener cancelListener)\n                            throws HeadlessException", "description": "Creates and returns a new dialog containing the specified\n ColorChooser pane along with \"OK\", \"Cancel\", and \"Reset\"\n buttons. If the \"OK\" or \"Cancel\" buttons are pressed, the dialog is\n automatically hidden (but not disposed).  If the \"Reset\"\n button is pressed, the color-chooser's color will be reset to the\n color which was set the last time show was invoked on the\n dialog and the dialog will remain showing."}, {"method_name": "getUI", "method_sig": "public ColorChooserUI getUI()", "description": "Returns the L&F object that renders this component."}, {"method_name": "setUI", "method_sig": "@BeanProperty(hidden=true,\n              description=\"The UI object that implements the color chooser\\'s LookAndFeel.\")\npublic void setUI (ColorChooserUI ui)", "description": "Sets the L&F object that renders this component."}, {"method_name": "updateUI", "method_sig": "public void updateUI()", "description": "Notification from the UIManager that the L&F has changed.\n Replaces the current UI object with the latest version from the\n UIManager."}, {"method_name": "getUIClassID", "method_sig": "@BeanProperty(bound=false)\npublic String getUIClassID()", "description": "Returns the name of the L&F class that renders this component."}, {"method_name": "getColor", "method_sig": "public Color getColor()", "description": "Gets the current color value from the color chooser.\n By default, this delegates to the model."}, {"method_name": "setColor", "method_sig": "@BeanProperty(bound=false,\n              description=\"The current color the chooser is to display.\")\npublic void setColor (Color color)", "description": "Sets the current color of the color chooser to the specified color.\n The ColorSelectionModel will fire a ChangeEvent"}, {"method_name": "setColor", "method_sig": "public void setColor (int r,\n                     int g,\n                     int b)", "description": "Sets the current color of the color chooser to the\n specified RGB color.  Note that the values of red, green,\n and blue should be between the numbers 0 and 255, inclusive."}, {"method_name": "setColor", "method_sig": "public void setColor (int c)", "description": "Sets the current color of the color chooser to the\n specified color."}, {"method_name": "setDragEnabled", "method_sig": "@BeanProperty(bound=false,\n              description=\"Determines whether automatic drag handling is enabled.\")\npublic void setDragEnabled (boolean b)", "description": "Sets the dragEnabled property,\n which must be true to enable\n automatic drag handling (the first part of drag and drop)\n on this component.\n The transferHandler property needs to be set\n to a non-null value for the drag to do\n anything.  The default value of the dragEnabled\n property\n is false.\n\n \n\n When automatic drag handling is enabled,\n most look and feels begin a drag-and-drop operation\n when the user presses the mouse button over the preview panel.\n Some look and feels might not support automatic drag and drop;\n they will ignore this property.  You can work around such\n look and feels by modifying the component\n to directly call the exportAsDrag method of a\n TransferHandler."}, {"method_name": "getDragEnabled", "method_sig": "public boolean getDragEnabled()", "description": "Gets the value of the dragEnabled property."}, {"method_name": "setPreviewPanel", "method_sig": "@BeanProperty(hidden=true,\n              description=\"The UI component which displays the current color.\")\npublic void setPreviewPanel (JComponent preview)", "description": "Sets the current preview panel.\n This will fire a PropertyChangeEvent for the property\n named \"previewPanel\"."}, {"method_name": "getPreviewPanel", "method_sig": "public JComponent getPreviewPanel()", "description": "Returns the preview panel that shows a chosen color."}, {"method_name": "addChooserPanel", "method_sig": "public void addChooserPanel (AbstractColorChooserPanel panel)", "description": "Adds a color chooser panel to the color chooser."}, {"method_name": "removeChooserPanel", "method_sig": "public AbstractColorChooserPanel removeChooserPanel (AbstractColorChooserPanel panel)", "description": "Removes the Color Panel specified."}, {"method_name": "setChooserPanels", "method_sig": "@BeanProperty(hidden=true,\n              description=\"An array of different chooser types.\")\npublic void setChooserPanels (AbstractColorChooserPanel[] panels)", "description": "Specifies the Color Panels used to choose a color value."}, {"method_name": "getChooserPanels", "method_sig": "public AbstractColorChooserPanel[] getChooserPanels()", "description": "Returns the specified color panels."}, {"method_name": "getSelectionModel", "method_sig": "public ColorSelectionModel getSelectionModel()", "description": "Returns the data model that handles color selections."}, {"method_name": "setSelectionModel", "method_sig": "@BeanProperty(hidden=true,\n              description=\"The model which contains the currently selected color.\")\npublic void setSelectionModel (ColorSelectionModel newModel)", "description": "Sets the model containing the selected color."}, {"method_name": "paramString", "method_sig": "protected String paramString()", "description": "Returns a string representation of this JColorChooser.\n This method\n is intended to be used only for debugging purposes, and the\n content and format of the returned string may vary between\n implementations. The returned string may be empty but may not\n be null."}, {"method_name": "getAccessibleContext", "method_sig": "@BeanProperty(bound=false)\npublic AccessibleContext getAccessibleContext()", "description": "Gets the AccessibleContext associated with this JColorChooser.\n For color choosers, the AccessibleContext takes the form of an\n AccessibleJColorChooser.\n A new AccessibleJColorChooser instance is created if necessary."}]}