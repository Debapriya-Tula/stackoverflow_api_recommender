{"name": "Class RMISocketFactory", "module": "java.rmi", "package": "java.rmi.server", "text": "An RMISocketFactory instance is used by the RMI runtime\n in order to obtain client and server sockets for RMI calls.  An\n application may use the setSocketFactory method to\n request that the RMI runtime use its socket factory instance\n instead of the default implementation.\n\n The default socket factory implementation creates a direct\n socket connection to the remote host.\n\n The default socket factory implementation creates server sockets that\n are bound to the wildcard address, which accepts requests from all network\n interfaces.", "codes": ["public abstract class RMISocketFactory\nextends Object\nimplements RMIClientSocketFactory, RMIServerSocketFactory"], "fields": [], "methods": [{"method_name": "createSocket", "method_sig": "public abstract Socket createSocket (String host,\n                                    int port)\n                             throws IOException", "description": "Creates a client socket connected to the specified host and port."}, {"method_name": "createServerSocket", "method_sig": "public abstract ServerSocket createServerSocket (int port)\n                                         throws IOException", "description": "Create a server socket on the specified port (port 0 indicates\n an anonymous port)."}, {"method_name": "setSocketFactory", "method_sig": "public static void setSocketFactory (RMISocketFactory fac)\n                             throws IOException", "description": "Set the global socket factory from which RMI gets sockets (if the\n remote object is not associated with a specific client and/or server\n socket factory). The RMI socket factory can only be set once. Note: The\n RMISocketFactory may only be set if the current security manager allows\n setting a socket factory; if disallowed, a SecurityException will be\n thrown."}, {"method_name": "getSocketFactory", "method_sig": "public static RMISocketFactory getSocketFactory()", "description": "Returns the socket factory set by the setSocketFactory\n method. Returns null if no socket factory has been\n set."}, {"method_name": "getDefaultSocketFactory", "method_sig": "public static RMISocketFactory getDefaultSocketFactory()", "description": "Returns a reference to the default socket factory used\n by this RMI implementation.  This will be the factory used\n by the RMI runtime when getSocketFactory\n returns null."}, {"method_name": "setFailureHandler", "method_sig": "public static void setFailureHandler (RMIFailureHandler fh)", "description": "Sets the failure handler to be called by the RMI runtime if server\n socket creation fails.  By default, if no failure handler is installed\n and server socket creation fails, the RMI runtime does attempt to\n recreate the server socket.\n\n If there is a security manager, this method first calls\n the security manager's checkSetFactory method\n to ensure the operation is allowed.\n This could result in a SecurityException."}, {"method_name": "getFailureHandler", "method_sig": "public static RMIFailureHandler getFailureHandler()", "description": "Returns the handler for socket creation failure set by the\n setFailureHandler method."}]}