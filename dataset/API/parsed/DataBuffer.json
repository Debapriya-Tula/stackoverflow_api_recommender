{"name": "Class DataBuffer", "module": "java.desktop", "package": "java.awt.image", "text": "This class exists to wrap one or more data arrays.  Each data array in\n the DataBuffer is referred to as a bank.  Accessor methods for getting\n and setting elements of the DataBuffer's banks exist with and without\n a bank specifier.  The methods without a bank specifier use the default 0th\n bank.  The DataBuffer can optionally take an offset per bank, so that\n data in an existing array can be used even if the interesting data\n doesn't start at array location zero.  Getting or setting the 0th\n element of a bank, uses the (0+offset)th element of the array.  The\n size field specifies how much of the data array is available for\n use.  Size + offset for a given bank should never be greater\n than the length of the associated data array.  The data type of\n a data buffer indicates the type of the data array(s) and may also\n indicate additional semantics, e.g. storing unsigned 8-bit data\n in elements of a byte array.  The data type may be TYPE_UNDEFINED\n or one of the types defined below.  Other types may be added in\n the future.  Generally, an object of class DataBuffer will be cast down\n to one of its data type specific subclasses to access data type specific\n methods for improved performance.  Currently, the Java 2D(tm) API\n image classes use TYPE_BYTE, TYPE_USHORT, TYPE_INT, TYPE_SHORT,\n TYPE_FLOAT, and TYPE_DOUBLE DataBuffers to store image data.", "codes": ["public abstract class DataBuffer\nextends Object"], "fields": [{"field_name": "TYPE_BYTE", "field_sig": "@Native\npublic static final\u00a0int TYPE_BYTE", "description": "Tag for unsigned byte data."}, {"field_name": "TYPE_USHORT", "field_sig": "@Native\npublic static final\u00a0int TYPE_USHORT", "description": "Tag for unsigned short data."}, {"field_name": "TYPE_SHORT", "field_sig": "@Native\npublic static final\u00a0int TYPE_SHORT", "description": "Tag for signed short data.  Placeholder for future use."}, {"field_name": "TYPE_INT", "field_sig": "@Native\npublic static final\u00a0int TYPE_INT", "description": "Tag for int data."}, {"field_name": "TYPE_FLOAT", "field_sig": "@Native\npublic static final\u00a0int TYPE_FLOAT", "description": "Tag for float data.  Placeholder for future use."}, {"field_name": "TYPE_DOUBLE", "field_sig": "@Native\npublic static final\u00a0int TYPE_DOUBLE", "description": "Tag for double data.  Placeholder for future use."}, {"field_name": "TYPE_UNDEFINED", "field_sig": "@Native\npublic static final\u00a0int TYPE_UNDEFINED", "description": "Tag for undefined data."}, {"field_name": "dataType", "field_sig": "protected\u00a0int dataType", "description": "The data type of this DataBuffer."}, {"field_name": "banks", "field_sig": "protected\u00a0int banks", "description": "The number of banks in this DataBuffer."}, {"field_name": "offset", "field_sig": "protected\u00a0int offset", "description": "Offset into default (first) bank from which to get the first element."}, {"field_name": "size", "field_sig": "protected\u00a0int size", "description": "Usable size of all banks."}, {"field_name": "offsets", "field_sig": "protected\u00a0int[] offsets", "description": "Offsets into all banks."}], "methods": [{"method_name": "getDataTypeSize", "method_sig": "public static int getDataTypeSize (int type)", "description": "Returns the size (in bits) of the data type, given a datatype tag."}, {"method_name": "getDataType", "method_sig": "public int getDataType()", "description": "Returns the data type of this DataBuffer."}, {"method_name": "getSize", "method_sig": "public int getSize()", "description": "Returns the size (in array elements) of all banks."}, {"method_name": "getOffset", "method_sig": "public int getOffset()", "description": "Returns the offset of the default bank in array elements."}, {"method_name": "getOffsets", "method_sig": "public int[] getOffsets()", "description": "Returns the offsets (in array elements) of all the banks."}, {"method_name": "getNumBanks", "method_sig": "public int getNumBanks()", "description": "Returns the number of banks in this DataBuffer."}, {"method_name": "getElem", "method_sig": "public int getElem (int i)", "description": "Returns the requested data array element from the first (default) bank\n as an integer."}, {"method_name": "getElem", "method_sig": "public abstract int getElem (int bank,\n                            int i)", "description": "Returns the requested data array element from the specified bank\n as an integer."}, {"method_name": "setElem", "method_sig": "public void setElem (int i,\n                    int val)", "description": "Sets the requested data array element in the first (default) bank\n from the given integer."}, {"method_name": "setElem", "method_sig": "public abstract void setElem (int bank,\n                             int i,\n                             int val)", "description": "Sets the requested data array element in the specified bank\n from the given integer."}, {"method_name": "getElemFloat", "method_sig": "public float getElemFloat (int i)", "description": "Returns the requested data array element from the first (default) bank\n as a float.  The implementation in this class is to cast getElem(i)\n to a float.  Subclasses may override this method if another\n implementation is needed."}, {"method_name": "getElemFloat", "method_sig": "public float getElemFloat (int bank,\n                          int i)", "description": "Returns the requested data array element from the specified bank\n as a float.  The implementation in this class is to cast\n getElem(int, int)\n to a float.  Subclasses can override this method if another\n implementation is needed."}, {"method_name": "setElemFloat", "method_sig": "public void setElemFloat (int i,\n                         float val)", "description": "Sets the requested data array element in the first (default) bank\n from the given float.  The implementation in this class is to cast\n val to an int and call setElem(int, int).  Subclasses\n can override this method if another implementation is needed."}, {"method_name": "setElemFloat", "method_sig": "public void setElemFloat (int bank,\n                         int i,\n                         float val)", "description": "Sets the requested data array element in the specified bank\n from the given float.  The implementation in this class is to cast\n val to an int and call setElem(int, int).  Subclasses can\n override this method if another implementation is needed."}, {"method_name": "getElemDouble", "method_sig": "public double getElemDouble (int i)", "description": "Returns the requested data array element from the first (default) bank\n as a double.  The implementation in this class is to cast\n getElem(int)\n to a double.  Subclasses can override this method if another\n implementation is needed."}, {"method_name": "getElemDouble", "method_sig": "public double getElemDouble (int bank,\n                            int i)", "description": "Returns the requested data array element from the specified bank as\n a double.  The implementation in this class is to cast getElem(bank, i)\n to a double.  Subclasses may override this method if another\n implementation is needed."}, {"method_name": "setElemDouble", "method_sig": "public void setElemDouble (int i,\n                          double val)", "description": "Sets the requested data array element in the first (default) bank\n from the given double.  The implementation in this class is to cast\n val to an int and call setElem(int, int).  Subclasses can\n override this method if another implementation is needed."}, {"method_name": "setElemDouble", "method_sig": "public void setElemDouble (int bank,\n                          int i,\n                          double val)", "description": "Sets the requested data array element in the specified bank\n from the given double.  The implementation in this class is to cast\n val to an int and call setElem(int, int).  Subclasses can\n override this method if another implementation is needed."}]}