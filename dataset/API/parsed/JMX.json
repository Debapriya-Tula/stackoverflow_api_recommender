{"name": "Class JMX", "module": "java.management", "package": "javax.management", "text": "Static methods from the JMX API.  There are no instances of this class.", "codes": ["public class JMX\nextends Object"], "fields": [{"field_name": "DEFAULT_VALUE_FIELD", "field_sig": "public static final\u00a0String DEFAULT_VALUE_FIELD", "description": "The name of the \n defaultValue field."}, {"field_name": "IMMUTABLE_INFO_FIELD", "field_sig": "public static final\u00a0String IMMUTABLE_INFO_FIELD", "description": "The name of the \n immutableInfo field."}, {"field_name": "INTERFACE_CLASS_NAME_FIELD", "field_sig": "public static final\u00a0String INTERFACE_CLASS_NAME_FIELD", "description": "The name of the \n interfaceClassName field."}, {"field_name": "LEGAL_VALUES_FIELD", "field_sig": "public static final\u00a0String LEGAL_VALUES_FIELD", "description": "The name of the \n legalValues field."}, {"field_name": "MAX_VALUE_FIELD", "field_sig": "public static final\u00a0String MAX_VALUE_FIELD", "description": "The name of the \n maxValue field."}, {"field_name": "MIN_VALUE_FIELD", "field_sig": "public static final\u00a0String MIN_VALUE_FIELD", "description": "The name of the \n minValue field."}, {"field_name": "MXBEAN_FIELD", "field_sig": "public static final\u00a0String MXBEAN_FIELD", "description": "The name of the \n mxbean field."}, {"field_name": "OPEN_TYPE_FIELD", "field_sig": "public static final\u00a0String OPEN_TYPE_FIELD", "description": "The name of the \n openType field."}, {"field_name": "ORIGINAL_TYPE_FIELD", "field_sig": "public static final\u00a0String ORIGINAL_TYPE_FIELD", "description": "The name of the \n originalType field."}], "methods": [{"method_name": "newMBeanProxy", "method_sig": "public static <T> T newMBeanProxy (MBeanServerConnection connection,\n                                  ObjectName objectName,\n                                  Class<T> interfaceClass)", "description": "Make a proxy for a Standard MBean in a local or remote\n MBean Server.\nIf you have an MBean Server mbs containing an MBean\n with ObjectName name, and if the MBean's\n management interface is described by the Java interface\n MyMBean, you can construct a proxy for the MBean like\n this:\n\n MyMBean proxy = JMX.newMBeanProxy(mbs, name, MyMBean.class);\n \nSuppose, for example, MyMBean looks like this:\n\n public interface MyMBean {\n     public String getSomeAttribute();\n     public void setSomeAttribute(String value);\n     public void someOperation(String param1, int param2);\n }\n \nThen you can execute:\n\nproxy.getSomeAttribute() which will result in a\n call to mbs.getAttribute(name, \"SomeAttribute\").\n\n proxy.setSomeAttribute(\"whatever\") which will result\n in a call to mbs.setAttribute(name, new Attribute(\"SomeAttribute\", \"whatever\")).\n\n proxy.someOperation(\"param1\", 2) which will be\n translated into a call to mbs.invoke(name, \"someOperation\", <etc>).\n\n \nThe object returned by this method is a\n Proxy whose InvocationHandler is an\n MBeanServerInvocationHandler.\nThis method is equivalent to newMBeanProxy(connection, objectName, interfaceClass,\n false)."}, {"method_name": "newMBeanProxy", "method_sig": "public static <T> T newMBeanProxy (MBeanServerConnection connection,\n                                  ObjectName objectName,\n                                  Class<T> interfaceClass,\n                                  boolean notificationEmitter)", "description": "Make a proxy for a Standard MBean in a local or remote MBean\n Server that may also support the methods of NotificationEmitter.\nThis method behaves the same as newMBeanProxy(MBeanServerConnection, ObjectName, Class), but\n additionally, if notificationEmitter is \n true, then the MBean is assumed to be a NotificationBroadcaster or NotificationEmitter and the\n returned proxy will implement NotificationEmitter as\n well as interfaceClass.  A call to NotificationBroadcaster.addNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object) on the proxy\n will result in a call to MBeanServerConnection.addNotificationListener(ObjectName,\n NotificationListener, NotificationFilter, Object), and\n likewise for the other methods of NotificationBroadcaster and NotificationEmitter."}, {"method_name": "newMXBeanProxy", "method_sig": "public static <T> T newMXBeanProxy (MBeanServerConnection connection,\n                                   ObjectName objectName,\n                                   Class<T> interfaceClass)", "description": "Make a proxy for an MXBean in a local or remote MBean Server.\n\n If you have an MBean Server mbs containing an\n MXBean with ObjectName name, and if the\n MXBean's management interface is described by the Java\n interface MyMXBean, you can construct a proxy for\n the MXBean like this:\n\n MyMXBean proxy = JMX.newMXBeanProxy(mbs, name, MyMXBean.class);\n \nSuppose, for example, MyMXBean looks like this:\n\n public interface MyMXBean {\n     public String getSimpleAttribute();\n     public void setSimpleAttribute(String value);\n     public MemoryUsage getMappedAttribute();\n     public void setMappedAttribute(MemoryUsage memoryUsage);\n     public MemoryUsage someOperation(String param1, MemoryUsage param2);\n }\n \nThen:\n\nproxy.getSimpleAttribute() will result in a\n call to mbs.getAttribute(name, \"SimpleAttribute\").\nproxy.setSimpleAttribute(\"whatever\") will result\n in a call to mbs.setAttribute(name,\n new Attribute(\"SimpleAttribute\", \"whatever\")).\nBecause String is a simple type, in the\n     sense of SimpleType, it\n     is not changed in the context of an MXBean.  The MXBean\n     proxy behaves the same as a Standard MBean proxy (see\n     newMBeanProxy) for the attribute \n     SimpleAttribute.\nproxy.getMappedAttribute() will result in a call\n to mbs.getAttribute(\"MappedAttribute\").  The MXBean\n mapping rules mean that the actual type of the attribute \n MappedAttribute will be CompositeData and\n that is what the mbs.getAttribute call will return.\n The proxy will then convert the CompositeData back into\n the expected type MemoryUsage using the MXBean mapping\n rules.\nSimilarly, proxy.setMappedAttribute(memoryUsage)\n will convert the MemoryUsage argument into a \n CompositeData before calling mbs.setAttribute.\nproxy.someOperation(\"whatever\", memoryUsage)\n will convert the MemoryUsage argument into a \n CompositeData and call mbs.invoke.  The value returned\n by mbs.invoke will be also be a CompositeData,\n and the proxy will convert this into the expected type \n MemoryUsage using the MXBean mapping rules.\n\nThe object returned by this method is a\n Proxy whose InvocationHandler is an\n MBeanServerInvocationHandler.\nThis method is equivalent to newMXBeanProxy(connection, objectName, interfaceClass,\n false)."}, {"method_name": "newMXBeanProxy", "method_sig": "public static <T> T newMXBeanProxy (MBeanServerConnection connection,\n                                   ObjectName objectName,\n                                   Class<T> interfaceClass,\n                                   boolean notificationEmitter)", "description": "Make a proxy for an MXBean in a local or remote MBean\n Server that may also support the methods of NotificationEmitter.\nThis method behaves the same as newMXBeanProxy(MBeanServerConnection, ObjectName, Class), but\n additionally, if notificationEmitter is \n true, then the MXBean is assumed to be a NotificationBroadcaster or NotificationEmitter and the\n returned proxy will implement NotificationEmitter as\n well as interfaceClass.  A call to NotificationBroadcaster.addNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object) on the proxy\n will result in a call to MBeanServerConnection.addNotificationListener(ObjectName,\n NotificationListener, NotificationFilter, Object), and\n likewise for the other methods of NotificationBroadcaster and NotificationEmitter."}, {"method_name": "isMXBeanInterface", "method_sig": "public static boolean isMXBeanInterface (Class<?> interfaceClass)", "description": "Test whether an interface is an MXBean interface.\n An interface is an MXBean interface if it is public,\n annotated @MXBean or @MXBean(true)\n or if it does not have an @MXBean annotation\n and its name ends with \"MXBean\"."}]}