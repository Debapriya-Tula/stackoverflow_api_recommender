{"name": "Class MetalLookAndFeel", "module": "java.desktop", "package": "javax.swing.plaf.metal", "text": "The Java Look and Feel, otherwise known as Metal.\n \n Each of the ComponentUIs provided by \n MetalLookAndFeel derives its behavior from the defaults\n table. Unless otherwise noted each of the ComponentUI\n implementations in this package document the set of defaults they\n use. Unless otherwise noted the defaults are installed at the time\n installUI is invoked, and follow the recommendations\n outlined in LookAndFeel for installing defaults.\n \nMetalLookAndFeel derives it's color palette and fonts from\n MetalTheme. The default theme is OceanTheme. The theme\n can be changed using the setCurrentTheme method, refer to it\n for details on changing the theme. Prior to 1.5 the default\n theme was DefaultMetalTheme. The system property\n \"swing.metalTheme\" can be set to \"steel\" to indicate\n the default should be DefaultMetalTheme.\n \nWarning:\n Serialized objects of this class will not be compatible with\n future Swing releases. The current serialization support is\n appropriate for short term storage or RMI between applications running\n the same version of Swing.  As of 1.4, support for long term storage\n of all JavaBeans\u2122\n has been added to the java.beans package.\n Please see XMLEncoder.", "codes": ["public class MetalLookAndFeel\nextends BasicLookAndFeel"], "fields": [], "methods": [{"method_name": "getName", "method_sig": "public String getName()", "description": "Returns the name of this look and feel. This returns\n \"Metal\"."}, {"method_name": "getID", "method_sig": "public String getID()", "description": "Returns an identifier for this look and feel. This returns\n \"Metal\"."}, {"method_name": "getDescription", "method_sig": "public String getDescription()", "description": "Returns a short description of this look and feel. This returns\n \"The Java(tm) Look and Feel\"."}, {"method_name": "isNativeLookAndFeel", "method_sig": "public boolean isNativeLookAndFeel()", "description": "Returns false; MetalLookAndFeel is not a native\n look and feel."}, {"method_name": "isSupportedLookAndFeel", "method_sig": "public boolean isSupportedLookAndFeel()", "description": "Returns true; MetalLookAndFeel can be run on\n any platform."}, {"method_name": "getSupportsWindowDecorations", "method_sig": "public boolean getSupportsWindowDecorations()", "description": "Returns true; metal can provide Window\n decorations."}, {"method_name": "initClassDefaults", "method_sig": "protected void initClassDefaults (UIDefaults table)", "description": "Populates table with mappings from uiClassID to\n the fully qualified name of the ui class. \n MetalLookAndFeel registers an entry for each of the classes in\n the package javax.swing.plaf.metal that are named\n MetalXXXUI. The string XXX is one of Swing's uiClassIDs. For\n the uiClassIDs that do not have a class in metal, the\n corresponding class in javax.swing.plaf.basic is\n used. For example, metal does not have a class named \n \"MetalColorChooserUI\", as such, \n javax.swing.plaf.basic.BasicColorChooserUI is used."}, {"method_name": "initSystemColorDefaults", "method_sig": "protected void initSystemColorDefaults (UIDefaults table)", "description": "Populates table with system colors. The following values are\n added to table:\n\n \nMetal's system color mapping\n\n\nKey\n    Value\n \n\n\n\"desktop\"\n    theme.getDesktopColor()\n\n\"activeCaption\"\n    theme.getWindowTitleBackground()\n\n\"activeCaptionText\"\n    theme.getWindowTitleForeground()\n\n\"activeCaptionBorder\"\n    theme.getPrimaryControlShadow()\n\n\"inactiveCaption\"\n    theme.getWindowTitleInactiveBackground()\n\n\"inactiveCaptionText\"\n    theme.getWindowTitleInactiveForeground()\n\n\"inactiveCaptionBorder\"\n    theme.getControlShadow()\n\n\"window\"\n    theme.getWindowBackground()\n\n\"windowBorder\"\n    theme.getControl()\n\n\"windowText\"\n    theme.getUserTextColor()\n\n\"menu\"\n    theme.getMenuBackground()\n\n\"menuText\"\n    theme.getMenuForeground()\n\n\"text\"\n    theme.getWindowBackground()\n\n\"textText\"\n    theme.getUserTextColor()\n\n\"textHighlight\"\n    theme.getTextHighlightColor()\n\n\"textHighlightText\"\n    theme.getHighlightedTextColor()\n\n\"textInactiveText\"\n    theme.getInactiveSystemTextColor()\n\n\"control\"\n    theme.getControl()\n\n\"controlText\"\n    theme.getControlTextColor()\n\n\"controlHighlight\"\n    theme.getControlHighlight()\n\n\"controlLtHighlight\"\n    theme.getControlHighlight()\n\n\"controlShadow\"\n    theme.getControlShadow()\n\n\"controlDkShadow\"\n    theme.getControlDarkShadow()\n\n\"scrollbar\"\n    theme.getControl()\n\n\"info\"\n    theme.getPrimaryControl()\n\n\"infoText\"\n    theme.getPrimaryControlInfo()\n\n\n The value theme corresponds to the current MetalTheme."}, {"method_name": "initComponentDefaults", "method_sig": "protected void initComponentDefaults (UIDefaults table)", "description": "Populates table with the defaults for metal."}, {"method_name": "createDefaultTheme", "method_sig": "protected void createDefaultTheme()", "description": "Ensures the current MetalTheme is non-null. This is\n a cover method for getCurrentTheme."}, {"method_name": "getDefaults", "method_sig": "public UIDefaults getDefaults()", "description": "Returns the look and feel defaults. This invokes, in order,\n createDefaultTheme(), super.getDefaults() and\n getCurrentTheme().addCustomEntriesToTable(table).\n \n While this method is public, it should only be invoked by the\n UIManager when the look and feel is set as the current\n look and feel and after initialize has been invoked."}, {"method_name": "provideErrorFeedback", "method_sig": "public void provideErrorFeedback (Component component)", "description": "Invoked when the user attempts an invalid operation,\n such as pasting into an uneditable JTextField\n that has focus. The default implementation beeps. Subclasses\n that wish different behavior should override this and provide\n the additional feedback."}, {"method_name": "setCurrentTheme", "method_sig": "public static void setCurrentTheme (MetalTheme theme)", "description": "Set the theme used by MetalLookAndFeel.\n \n After the theme is set, MetalLookAndFeel needs to be\n re-installed and the uis need to be recreated. The following\n shows how to do this:\n \n   MetalLookAndFeel.setCurrentTheme(theme);\n\n   // re-install the Metal Look and Feel\n   UIManager.setLookAndFeel(new MetalLookAndFeel());\n\n   // Update the ComponentUIs for all Components. This\n   // needs to be invoked for all windows.\n   SwingUtilities.updateComponentTreeUI(rootComponent);\n \n If this is not done the results are undefined."}, {"method_name": "getCurrentTheme", "method_sig": "public static MetalTheme getCurrentTheme()", "description": "Return the theme currently being used by MetalLookAndFeel.\n If the current theme is null, the default theme is created."}, {"method_name": "getDisabledIcon", "method_sig": "public Icon getDisabledIcon (JComponent component,\n                            Icon icon)", "description": "Returns an Icon with a disabled appearance.\n This method is used to generate a disabled Icon when\n one has not been specified.  For example, if you create a\n JButton and only specify an Icon via\n setIcon this method will be called to generate the\n disabled Icon. If null is passed as icon\n this method returns null.\n \n Some look and feels might not render the disabled Icon, in which\n case they will ignore this."}, {"method_name": "getDisabledSelectedIcon", "method_sig": "public Icon getDisabledSelectedIcon (JComponent component,\n                                    Icon icon)", "description": "Returns an Icon for use by disabled\n components that are also selected. This method is used to generate an\n Icon for components that are in both the disabled and\n selected states but do not have a specific Icon for this\n state.  For example, if you create a JButton and only\n specify an Icon via setIcon this method\n will be called to generate the disabled and selected\n Icon. If null is passed as icon this method\n returns null.\n \n Some look and feels might not render the disabled and selected Icon,\n in which case they will ignore this."}, {"method_name": "getControlTextFont", "method_sig": "public static FontUIResource getControlTextFont()", "description": "Returns the control text font of the current theme. This is a\n cover method for getCurrentTheme().getControlTextColor()."}, {"method_name": "getSystemTextFont", "method_sig": "public static FontUIResource getSystemTextFont()", "description": "Returns the system text font of the current theme. This is a\n cover method for getCurrentTheme().getSystemTextFont()."}, {"method_name": "getUserTextFont", "method_sig": "public static FontUIResource getUserTextFont()", "description": "Returns the user text font of the current theme. This is a\n cover method for getCurrentTheme().getUserTextFont()."}, {"method_name": "getMenuTextFont", "method_sig": "public static FontUIResource getMenuTextFont()", "description": "Returns the menu text font of the current theme. This is a\n cover method for getCurrentTheme().getMenuTextFont()."}, {"method_name": "getWindowTitleFont", "method_sig": "public static FontUIResource getWindowTitleFont()", "description": "Returns the window title font of the current theme. This is a\n cover method for getCurrentTheme().getWindowTitleFont()."}, {"method_name": "getSubTextFont", "method_sig": "public static FontUIResource getSubTextFont()", "description": "Returns the sub-text font of the current theme. This is a\n cover method for getCurrentTheme().getSubTextFont()."}, {"method_name": "getDesktopColor", "method_sig": "public static ColorUIResource getDesktopColor()", "description": "Returns the desktop color of the current theme. This is a\n cover method for getCurrentTheme().getDesktopColor()."}, {"method_name": "getFocusColor", "method_sig": "public static ColorUIResource getFocusColor()", "description": "Returns the focus color of the current theme. This is a\n cover method for getCurrentTheme().getFocusColor()."}, {"method_name": "getWhite", "method_sig": "public static ColorUIResource getWhite()", "description": "Returns the white color of the current theme. This is a\n cover method for getCurrentTheme().getWhite()."}, {"method_name": "getBlack", "method_sig": "public static ColorUIResource getBlack()", "description": "Returns the black color of the current theme. This is a\n cover method for getCurrentTheme().getBlack()."}, {"method_name": "getControl", "method_sig": "public static ColorUIResource getControl()", "description": "Returns the control color of the current theme. This is a\n cover method for getCurrentTheme().getControl()."}, {"method_name": "getControlShadow", "method_sig": "public static ColorUIResource getControlShadow()", "description": "Returns the control shadow color of the current theme. This is a\n cover method for getCurrentTheme().getControlShadow()."}, {"method_name": "getControlDarkShadow", "method_sig": "public static ColorUIResource getControlDarkShadow()", "description": "Returns the control dark shadow color of the current theme. This is a\n cover method for getCurrentTheme().getControlDarkShadow()."}, {"method_name": "getControlInfo", "method_sig": "public static ColorUIResource getControlInfo()", "description": "Returns the control info color of the current theme. This is a\n cover method for getCurrentTheme().getControlInfo()."}, {"method_name": "getControlHighlight", "method_sig": "public static ColorUIResource getControlHighlight()", "description": "Returns the control highlight color of the current theme. This is a\n cover method for getCurrentTheme().getControlHighlight()."}, {"method_name": "getControlDisabled", "method_sig": "public static ColorUIResource getControlDisabled()", "description": "Returns the control disabled color of the current theme. This is a\n cover method for getCurrentTheme().getControlDisabled()."}, {"method_name": "getPrimaryControl", "method_sig": "public static ColorUIResource getPrimaryControl()", "description": "Returns the primary control color of the current theme. This is a\n cover method for getCurrentTheme().getPrimaryControl()."}, {"method_name": "getPrimaryControlShadow", "method_sig": "public static ColorUIResource getPrimaryControlShadow()", "description": "Returns the primary control shadow color of the current theme. This is a\n cover method for getCurrentTheme().getPrimaryControlShadow()."}, {"method_name": "getPrimaryControlDarkShadow", "method_sig": "public static ColorUIResource getPrimaryControlDarkShadow()", "description": "Returns the primary control dark shadow color of the current\n theme. This is a cover method for \n getCurrentTheme().getPrimaryControlDarkShadow()."}, {"method_name": "getPrimaryControlInfo", "method_sig": "public static ColorUIResource getPrimaryControlInfo()", "description": "Returns the primary control info color of the current theme. This is a\n cover method for getCurrentTheme().getPrimaryControlInfo()."}, {"method_name": "getPrimaryControlHighlight", "method_sig": "public static ColorUIResource getPrimaryControlHighlight()", "description": "Returns the primary control highlight color of the current\n theme. This is a cover method for \n getCurrentTheme().getPrimaryControlHighlight()."}, {"method_name": "getSystemTextColor", "method_sig": "public static ColorUIResource getSystemTextColor()", "description": "Returns the system text color of the current theme. This is a\n cover method for getCurrentTheme().getSystemTextColor()."}, {"method_name": "getControlTextColor", "method_sig": "public static ColorUIResource getControlTextColor()", "description": "Returns the control text color of the current theme. This is a\n cover method for getCurrentTheme().getControlTextColor()."}, {"method_name": "getInactiveControlTextColor", "method_sig": "public static ColorUIResource getInactiveControlTextColor()", "description": "Returns the inactive control text color of the current theme. This is a\n cover method for \n getCurrentTheme().getInactiveControlTextColor()."}, {"method_name": "getInactiveSystemTextColor", "method_sig": "public static ColorUIResource getInactiveSystemTextColor()", "description": "Returns the inactive system text color of the current theme. This is a\n cover method for \n getCurrentTheme().getInactiveSystemTextColor()."}, {"method_name": "getUserTextColor", "method_sig": "public static ColorUIResource getUserTextColor()", "description": "Returns the user text color of the current theme. This is a\n cover method for getCurrentTheme().getUserTextColor()."}, {"method_name": "getTextHighlightColor", "method_sig": "public static ColorUIResource getTextHighlightColor()", "description": "Returns the text highlight color of the current theme. This is a\n cover method for getCurrentTheme().getTextHighlightColor()."}, {"method_name": "getHighlightedTextColor", "method_sig": "public static ColorUIResource getHighlightedTextColor()", "description": "Returns the highlighted text color of the current theme. This is a\n cover method for getCurrentTheme().getHighlightedTextColor()."}, {"method_name": "getWindowBackground", "method_sig": "public static ColorUIResource getWindowBackground()", "description": "Returns the window background color of the current theme. This is a\n cover method for getCurrentTheme().getWindowBackground()."}, {"method_name": "getWindowTitleBackground", "method_sig": "public static ColorUIResource getWindowTitleBackground()", "description": "Returns the window title background color of the current\n theme. This is a cover method for \n getCurrentTheme().getWindowTitleBackground()."}, {"method_name": "getWindowTitleForeground", "method_sig": "public static ColorUIResource getWindowTitleForeground()", "description": "Returns the window title foreground color of the current\n theme. This is a cover method for \n getCurrentTheme().getWindowTitleForeground()."}, {"method_name": "getWindowTitleInactiveBackground", "method_sig": "public static ColorUIResource getWindowTitleInactiveBackground()", "description": "Returns the window title inactive background color of the current\n theme. This is a cover method for \n getCurrentTheme().getWindowTitleInactiveBackground()."}, {"method_name": "getWindowTitleInactiveForeground", "method_sig": "public static ColorUIResource getWindowTitleInactiveForeground()", "description": "Returns the window title inactive foreground color of the current\n theme. This is a cover method for \n getCurrentTheme().getWindowTitleInactiveForeground()."}, {"method_name": "getMenuBackground", "method_sig": "public static ColorUIResource getMenuBackground()", "description": "Returns the menu background color of the current theme. This is\n a cover method for getCurrentTheme().getMenuBackground()."}, {"method_name": "getMenuForeground", "method_sig": "public static ColorUIResource getMenuForeground()", "description": "Returns the menu foreground color of the current theme. This is\n a cover method for getCurrentTheme().getMenuForeground()."}, {"method_name": "getMenuSelectedBackground", "method_sig": "public static ColorUIResource getMenuSelectedBackground()", "description": "Returns the menu selected background color of the current theme. This is\n a cover method for\n getCurrentTheme().getMenuSelectedBackground()."}, {"method_name": "getMenuSelectedForeground", "method_sig": "public static ColorUIResource getMenuSelectedForeground()", "description": "Returns the menu selected foreground color of the current theme. This is\n a cover method for\n getCurrentTheme().getMenuSelectedForeground()."}, {"method_name": "getMenuDisabledForeground", "method_sig": "public static ColorUIResource getMenuDisabledForeground()", "description": "Returns the menu disabled foreground color of the current theme. This is\n a cover method for\n getCurrentTheme().getMenuDisabledForeground()."}, {"method_name": "getSeparatorBackground", "method_sig": "public static ColorUIResource getSeparatorBackground()", "description": "Returns the separator background color of the current theme. This is\n a cover method for getCurrentTheme().getSeparatorBackground()."}, {"method_name": "getSeparatorForeground", "method_sig": "public static ColorUIResource getSeparatorForeground()", "description": "Returns the separator foreground color of the current theme. This is\n a cover method for getCurrentTheme().getSeparatorForeground()."}, {"method_name": "getAcceleratorForeground", "method_sig": "public static ColorUIResource getAcceleratorForeground()", "description": "Returns the accelerator foreground color of the current theme. This is\n a cover method for getCurrentTheme().getAcceleratorForeground()."}, {"method_name": "getAcceleratorSelectedForeground", "method_sig": "public static ColorUIResource getAcceleratorSelectedForeground()", "description": "Returns the accelerator selected foreground color of the\n current theme. This is a cover method for \n getCurrentTheme().getAcceleratorSelectedForeground()."}, {"method_name": "getLayoutStyle", "method_sig": "public LayoutStyle getLayoutStyle()", "description": "Returns a LayoutStyle implementing the Java look and feel\n design guidelines as specified at\n http://www.oracle.com/technetwork/java/hig-136467.html."}]}