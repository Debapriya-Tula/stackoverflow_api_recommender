{"name": "Class JapaneseEra", "module": "java.base", "package": "java.time.chrono", "text": "An era in the Japanese Imperial calendar system.\n \n The Japanese government defines the official name and start date of\n each era. Eras are consecutive and their date ranges do not overlap,\n so the end date of one era is always the day before the start date\n of the next era.\n \n The Java SE Platform supports all eras defined by the Japanese government,\n beginning with the Meiji era. Each era is identified in the Platform by an\n integer value and a name. The of(int) and valueOf(String)\n methods may be used to obtain a singleton instance of JapaneseEra for each\n era. The values() method returns the singleton instances of all\n supported eras.\n \n For convenience, this class declares a number of public static final fields\n that refer to singleton instances returned by the values() method.", "codes": ["public final class JapaneseEra\nextends Object\nimplements Era, Serializable"], "fields": [{"field_name": "MEIJI", "field_sig": "public static final\u00a0JapaneseEra MEIJI", "description": "The singleton instance for the 'Meiji' era (1868-01-01 - 1912-07-29)\n which has the value -1."}, {"field_name": "TAISHO", "field_sig": "public static final\u00a0JapaneseEra TAISHO", "description": "The singleton instance for the 'Taisho' era (1912-07-30 - 1926-12-24)\n which has the value 0."}, {"field_name": "SHOWA", "field_sig": "public static final\u00a0JapaneseEra SHOWA", "description": "The singleton instance for the 'Showa' era (1926-12-25 - 1989-01-07)\n which has the value 1."}, {"field_name": "HEISEI", "field_sig": "public static final\u00a0JapaneseEra HEISEI", "description": "The singleton instance for the 'Heisei' era (1989-01-08 - 2019-04-30)\n which has the value 2."}], "methods": [{"method_name": "of", "method_sig": "public static JapaneseEra of (int japaneseEra)", "description": "Obtains an instance of JapaneseEra from an int value.\n \nThe value 1 is associated with the 'Showa' era, because\n it contains 1970-01-01 (ISO calendar system).\nThe values -1 and 0 are associated with two earlier\n eras, Meiji and Taisho, respectively.\nA value greater than 1 is associated with a later era,\n beginning with Heisei (2).\n\n\n Every instance of JapaneseEra that is returned from the values()\n method has an int value (available via Era.getValue() which is\n accepted by this method."}, {"method_name": "valueOf", "method_sig": "public static JapaneseEra valueOf (String japaneseEra)", "description": "Returns the JapaneseEra with the name.\n \n The string must match exactly the name of the era.\n (Extraneous whitespace characters are not permitted.)"}, {"method_name": "values", "method_sig": "public static JapaneseEra[] values()", "description": "Returns an array of JapaneseEras.\n \n This method may be used to iterate over the JapaneseEras as follows:\n \n for (JapaneseEra c : JapaneseEra.values())\n     System.out.println(c);\n "}, {"method_name": "getDisplayName", "method_sig": "public String getDisplayName (TextStyle style,\n                             Locale locale)", "description": "Gets the textual representation of this era.\n \n This returns the textual name used to identify the era,\n suitable for presentation to the user.\n The parameters control the style of the returned text and the locale.\n \n If no textual mapping is found then the numeric value is returned."}, {"method_name": "getValue", "method_sig": "public int getValue()", "description": "Gets the numeric era int value.\n \n The SHOWA era that contains 1970-01-01 (ISO calendar system) has the value 1.\n Later eras are numbered from 2 (HEISEI).\n Earlier eras are numbered 0 (TAISHO), -1 (MEIJI))."}, {"method_name": "range", "method_sig": "public ValueRange range (TemporalField field)", "description": "Gets the range of valid values for the specified field.\n \n The range object expresses the minimum and maximum valid values for a field.\n This era is used to enhance the accuracy of the returned range.\n If it is not possible to return the range, because the field is not supported\n or for some other reason, an exception is thrown.\n \n If the field is a ChronoField then the query is implemented here.\n The ERA field returns the range.\n All other ChronoField instances will throw an UnsupportedTemporalTypeException.\n \n If the field is not a ChronoField, then the result of this method\n is obtained by invoking TemporalField.rangeRefinedBy(TemporalAccessor)\n passing this as the argument.\n Whether the range can be obtained is determined by the field.\n \n The range of valid Japanese eras can change over time due to the nature\n of the Japanese calendar system."}]}