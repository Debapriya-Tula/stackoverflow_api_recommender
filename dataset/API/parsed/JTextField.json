{"name": "Class JTextField", "module": "java.desktop", "package": "javax.swing", "text": "JTextField is a lightweight component that allows the editing\n of a single line of text.\n For information on and examples of using text fields,\n see\n How to Use Text Fields\n in The Java Tutorial.\n\nJTextField is intended to be source-compatible\n with java.awt.TextField where it is reasonable to do so.  This\n component has capabilities not found in the java.awt.TextField\n class.  The superclass should be consulted for additional capabilities.\n \nJTextField has a method to establish the string used as the\n command string for the action event that gets fired.  The\n java.awt.TextField used the text of the field as the command\n string for the ActionEvent.\n JTextField will use the command\n string set with the setActionCommand method if not null,\n otherwise it will use the text of the field as a compatibility with\n java.awt.TextField.\n \n The method setEchoChar and getEchoChar\n are not provided directly to avoid a new implementation of a\n pluggable look-and-feel inadvertently exposing password characters.\n To provide password-like services a separate class JPasswordField\n extends JTextField to provide this service with an independently\n pluggable look-and-feel.\n \n The java.awt.TextField could be monitored for changes by adding\n a TextListener for TextEvent's.\n In the JTextComponent based\n components, changes are broadcasted from the model via a\n DocumentEvent to DocumentListeners.\n The DocumentEvent gives\n the location of the change and the kind of change if desired.\n The code fragment might look something like:\n \n \u00a0   DocumentListener myListener = ??;\n \u00a0   JTextField myArea = ??;\n \u00a0   myArea.getDocument().addDocumentListener(myListener);\n \n\n The horizontal alignment of JTextField can be set to be left\n justified, leading justified, centered, right justified or trailing justified.\n Right/trailing justification is useful if the required size\n of the field text is smaller than the size allocated to it.\n This is determined by the setHorizontalAlignment\n and getHorizontalAlignment methods.  The default\n is to be leading justified.\n \n How the text field consumes VK_ENTER events depends\n on whether the text field has any action listeners.\n If so, then VK_ENTER results in the listeners\n getting an ActionEvent,\n and the VK_ENTER event is consumed.\n This is compatible with how AWT text fields handle VK_ENTER events.\n If the text field has no action listeners, then as of v 1.3 the VK_ENTER\n event is not consumed.  Instead, the bindings of ancestor components\n are processed, which enables the default button feature of\n JFC/Swing to work.\n \n Customized fields can easily be created by extending the model and\n changing the default model provided.  For example, the following piece\n of code will create a field that holds only upper case characters.  It\n will work even if text is pasted into from the clipboard or it is altered via\n programmatic changes.\n \n\n\u00a0public class UpperCaseField extends JTextField {\n\u00a0\n\u00a0    public UpperCaseField(int cols) {\n\u00a0        super(cols);\n\u00a0    }\n\u00a0\n\u00a0    protected Document createDefaultModel() {\n\u00a0        return new UpperCaseDocument();\n\u00a0    }\n\u00a0\n\u00a0    static class UpperCaseDocument extends PlainDocument {\n\u00a0\n\u00a0        public void insertString(int offs, String str, AttributeSet a)\n\u00a0            throws BadLocationException {\n\u00a0\n\u00a0            if (str == null) {\n\u00a0                return;\n\u00a0            }\n\u00a0            char[] upper = str.toCharArray();\n\u00a0            for (int i = 0; i < upper.length; i++) {\n\u00a0                upper[i] = Character.toUpperCase(upper[i]);\n\u00a0            }\n\u00a0            super.insertString(offs, new String(upper), a);\n\u00a0        }\n\u00a0    }\n\u00a0}\n\n \n\nWarning: Swing is not thread safe. For more\n information see Swing's Threading\n Policy.\n \nWarning:\n Serialized objects of this class will not be compatible with\n future Swing releases. The current serialization support is\n appropriate for short term storage or RMI between applications running\n the same version of Swing.  As of 1.4, support for long term storage\n of all JavaBeans\u2122\n has been added to the java.beans package.\n Please see XMLEncoder.", "codes": ["@JavaBean(defaultProperty=\"UIClassID\",\n          description=\"A component which allows for the editing of a single line of text.\")\npublic class JTextField\nextends JTextComponent\nimplements SwingConstants"], "fields": [{"field_name": "notifyAction", "field_sig": "public static final\u00a0String notifyAction", "description": "Name of the action to send notification that the\n contents of the field have been accepted.  Typically\n this is bound to a carriage-return."}], "methods": [{"method_name": "getUIClassID", "method_sig": "@BeanProperty(bound=false)\npublic String getUIClassID()", "description": "Gets the class ID for a UI."}, {"method_name": "setDocument", "method_sig": "@BeanProperty(expert=true,\n              description=\"the text document model\")\npublic void setDocument (Document doc)", "description": "Associates the editor with a text document.\n The currently registered factory is used to build a view for\n the document, which gets displayed by the editor after revalidation.\n A PropertyChange event (\"document\") is propagated to each listener."}, {"method_name": "isValidateRoot", "method_sig": "public boolean isValidateRoot()", "description": "Calls to revalidate that come from within the\n textfield itself will\n be handled by validating the textfield, unless the textfield\n is contained within a JViewport,\n in which case this returns false."}, {"method_name": "getHorizontalAlignment", "method_sig": "public int getHorizontalAlignment()", "description": "Returns the horizontal alignment of the text.\n Valid keys are:\n \nJTextField.LEFT\nJTextField.CENTER\nJTextField.RIGHT\nJTextField.LEADING\nJTextField.TRAILING\n"}, {"method_name": "setHorizontalAlignment", "method_sig": "@BeanProperty(preferred=true,\n              enumerationValues={\"JTextField.LEFT\",\"JTextField.CENTER\",\"JTextField.RIGHT\",\"JTextField.LEADING\",\"JTextField.TRAILING\"},\n              description=\"Set the field alignment to LEFT, CENTER, RIGHT, LEADING (the default) or TRAILING\")\npublic void setHorizontalAlignment (int alignment)", "description": "Sets the horizontal alignment of the text.\n Valid keys are:\n \nJTextField.LEFT\nJTextField.CENTER\nJTextField.RIGHT\nJTextField.LEADING\nJTextField.TRAILING\n\ninvalidate and repaint are called when the\n alignment is set,\n and a PropertyChange event (\"horizontalAlignment\") is fired."}, {"method_name": "createDefaultModel", "method_sig": "protected Document createDefaultModel()", "description": "Creates the default implementation of the model\n to be used at construction if one isn't explicitly\n given.  An instance of PlainDocument is returned."}, {"method_name": "getColumns", "method_sig": "public int getColumns()", "description": "Returns the number of columns in this TextField."}, {"method_name": "setColumns", "method_sig": "@BeanProperty(bound=false,\n              description=\"the number of columns preferred for display\")\npublic void setColumns (int columns)", "description": "Sets the number of columns in this TextField,\n and then invalidate the layout."}, {"method_name": "getColumnWidth", "method_sig": "protected int getColumnWidth()", "description": "Returns the column width.\n The meaning of what a column is can be considered a fairly weak\n notion for some fonts.  This method is used to define the width\n of a column.  By default this is defined to be the width of the\n character m for the font used.  This method can be\n redefined to be some alternative amount"}, {"method_name": "getPreferredSize", "method_sig": "public Dimension getPreferredSize()", "description": "Returns the preferred size Dimensions needed for this\n TextField.  If a non-zero number of columns has been\n set, the width is set to the columns multiplied by\n the column width."}, {"method_name": "setFont", "method_sig": "public void setFont (Font f)", "description": "Sets the current font.  This removes cached row height and column\n width so the new font will be reflected.\n revalidate is called after setting the font."}, {"method_name": "addActionListener", "method_sig": "public void addActionListener (ActionListener l)", "description": "Adds the specified action listener to receive\n action events from this textfield."}, {"method_name": "removeActionListener", "method_sig": "public void removeActionListener (ActionListener l)", "description": "Removes the specified action listener so that it no longer\n receives action events from this textfield."}, {"method_name": "getActionListeners", "method_sig": "@BeanProperty(bound=false)\npublic ActionListener[] getActionListeners()", "description": "Returns an array of all the ActionListeners added\n to this JTextField with addActionListener()."}, {"method_name": "fireActionPerformed", "method_sig": "protected void fireActionPerformed()", "description": "Notifies all listeners that have registered interest for\n notification on this event type.  The event instance\n is lazily created.\n The listener list is processed in last to\n first order."}, {"method_name": "setActionCommand", "method_sig": "public void setActionCommand (String command)", "description": "Sets the command string used for action events."}, {"method_name": "setAction", "method_sig": "@BeanProperty(visualUpdate=true,\n              description=\"the Action instance connected with this ActionEvent source\")\npublic void setAction (Action a)", "description": "Sets the Action for the ActionEvent source.\n The new Action replaces\n any previously set Action but does not affect\n ActionListeners independently\n added with addActionListener.\n If the Action is already a registered\n ActionListener\n for the ActionEvent source, it is not re-registered.\n \n Setting the Action results in immediately changing\n all the properties described in \n Swing Components Supporting Action.\n Subsequently, the textfield's properties are automatically updated\n as the Action's properties change.\n \n This method uses three other methods to set\n and help track the Action's property values.\n It uses the configurePropertiesFromAction method\n to immediately change the textfield's properties.\n To track changes in the Action's property values,\n this method registers the PropertyChangeListener\n returned by createActionPropertyChangeListener. The\n default PropertyChangeListener invokes the\n actionPropertyChanged method when a property in the\n Action changes."}, {"method_name": "getAction", "method_sig": "public Action getAction()", "description": "Returns the currently set Action for this\n ActionEvent source, or null\n if no Action is set."}, {"method_name": "configurePropertiesFromAction", "method_sig": "protected void configurePropertiesFromAction (Action a)", "description": "Sets the properties on this textfield to match those in the specified\n Action.  Refer to \n Swing Components Supporting Action for more\n details as to which properties this sets."}, {"method_name": "actionPropertyChanged", "method_sig": "protected void actionPropertyChanged (Action action,\n                                     String propertyName)", "description": "Updates the textfield's state in response to property changes in\n associated action. This method is invoked from the\n PropertyChangeListener returned from\n createActionPropertyChangeListener. Subclasses do not normally\n need to invoke this. Subclasses that support additional Action\n properties should override this and\n configurePropertiesFromAction.\n \n Refer to the table at \n Swing Components Supporting Action for a list of\n the properties this method sets."}, {"method_name": "createActionPropertyChangeListener", "method_sig": "protected PropertyChangeListener createActionPropertyChangeListener (Action a)", "description": "Creates and returns a PropertyChangeListener that is\n responsible for listening for changes from the specified\n Action and updating the appropriate properties.\n \nWarning: If you subclass this do not create an anonymous\n inner class.  If you do the lifetime of the textfield will be tied to\n that of the Action."}, {"method_name": "getActions", "method_sig": "@BeanProperty(bound=false)\npublic Action[] getActions()", "description": "Fetches the command list for the editor.  This is\n the list of commands supported by the plugged-in UI\n augmented by the collection of commands that the\n editor itself supports.  These are useful for binding\n to events, such as in a keymap."}, {"method_name": "postActionEvent", "method_sig": "public void postActionEvent()", "description": "Processes action events occurring on this textfield by\n dispatching them to any registered ActionListener objects.\n This is normally called by the controller registered with\n textfield."}, {"method_name": "getHorizontalVisibility", "method_sig": "@BeanProperty(bound=false)\npublic BoundedRangeModel getHorizontalVisibility()", "description": "Gets the visibility of the text field.  This can\n be adjusted to change the location of the visible\n area if the size of the field is greater than\n the area that was allocated to the field.\n\n \n The fields look-and-feel implementation manages\n the values of the minimum, maximum, and extent\n properties on the BoundedRangeModel."}, {"method_name": "getScrollOffset", "method_sig": "public int getScrollOffset()", "description": "Gets the scroll offset, in pixels."}, {"method_name": "setScrollOffset", "method_sig": "public void setScrollOffset (int scrollOffset)", "description": "Sets the scroll offset, in pixels."}, {"method_name": "scrollRectToVisible", "method_sig": "public void scrollRectToVisible (Rectangle r)", "description": "Scrolls the field left or right."}, {"method_name": "paramString", "method_sig": "protected String paramString()", "description": "Returns a string representation of this JTextField.\n This method is intended to be used only for debugging purposes,\n and the content and format of the returned string may vary between\n implementations. The returned string may be empty but may not\n be null."}, {"method_name": "getAccessibleContext", "method_sig": "@BeanProperty(bound=false)\npublic AccessibleContext getAccessibleContext()", "description": "Gets the AccessibleContext associated with this\n JTextField. For JTextFields,\n the AccessibleContext takes the form of an\n AccessibleJTextField.\n A new AccessibleJTextField instance is created\n if necessary."}]}