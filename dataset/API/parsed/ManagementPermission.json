{"name": "Class ManagementPermission", "module": "java.management", "package": "java.lang.management", "text": "The permission which the SecurityManager will check when code\n that is running with a SecurityManager calls methods defined\n in the management interface for the Java platform.\n \n The following table\n provides a summary description of what the permission allows,\n and discusses the risks of granting code the permission.\n\n \nTable shows permission target name, what the permission allows, and associated risks\n\n\nPermission Target Name\nWhat the Permission Allows\nRisks of Allowing this Permission\n\n\n\n\ncontrol\nAbility to control the runtime characteristics of the Java virtual\n       machine, for example, enabling and disabling the verbose output for\n       the class loading or memory system, setting the threshold of a memory\n       pool, and enabling and disabling the thread contention monitoring\n       support. Some actions controlled by this permission can disclose\n       information about the running application, like the -verbose:class\n       flag.\n   \nThis allows an attacker to control the runtime characteristics\n       of the Java virtual machine and cause the system to misbehave. An\n       attacker can also access some information related to the running\n       application.\n   \n\n\nmonitor\nAbility to retrieve runtime information about\n       the Java virtual machine such as thread\n       stack trace, a list of all loaded class names, and input arguments\n       to the Java virtual machine.\nThis allows malicious code to monitor runtime information and\n       uncover vulnerabilities.\n\n\n\n\n Programmers do not normally create ManagementPermission objects directly.\n Instead they are created by the security policy code based on reading\n the security policy file.", "codes": ["public final class ManagementPermission\nextends BasicPermission"], "fields": [], "methods": []}