{"name": "Class SAXParserFactory", "module": "java.xml", "package": "javax.xml.parsers", "text": "Defines a factory API that enables applications to configure and\n obtain a SAX based parser to parse XML documents.", "codes": ["public abstract class SAXParserFactory\nextends Object"], "fields": [], "methods": [{"method_name": "newDefaultInstance", "method_sig": "public static SAXParserFactory newDefaultInstance()", "description": "Creates a new instance of the SAXParserFactory builtin\n system-default implementation."}, {"method_name": "newInstance", "method_sig": "public static SAXParserFactory newInstance()", "description": "Obtain a new instance of a SAXParserFactory. This\n static method creates a new factory instance\n This method uses the following ordered lookup procedure to determine\n the SAXParserFactory implementation class to\n load:\n \n\n Use the javax.xml.parsers.SAXParserFactory system\n property.\n \n\n\n Use the configuration file \"jaxp.properties\". The file is in standard\n Properties format and typically located in the\n conf directory of the Java installation. It contains the fully qualified\n name of the implementation class with the key being the system property\n defined above.\n \n The jaxp.properties file is read only once by the JAXP implementation\n and its values are then cached for future use.  If the file does not exist\n when the first attempt is made to read from it, no further attempts are\n made to check for its existence.  It is not possible to change the value\n of any property in jaxp.properties after it has been read for the first time.\n \n\n\n Use the service-provider loading facility, defined by the\n ServiceLoader class, to attempt to locate and load an\n implementation of the service using the default loading mechanism:\n the service-provider loading facility will use the current thread's context class loader\n to attempt to load the service. If the context class\n loader is null, the system class loader will be used.\n \n\n\n Otherwise, the system-default\n implementation is returned.\n \n\n\n Once an application has obtained a reference to a\n SAXParserFactory it can use the factory to\n configure and obtain parser instances.\n\n\n\n Tip for Trouble-shooting\n\n Setting the jaxp.debug system property will cause\n this method to print a lot of debug messages\n to System.err about what it is doing and where it is looking at.\n\n \n If you have problems loading SAXParsers, try:\n \n java -Djaxp.debug=1 YourProgram ....\n "}, {"method_name": "newInstance", "method_sig": "public static SAXParserFactory newInstance (String factoryClassName,\n                                           ClassLoader classLoader)", "description": "Obtain a new instance of a SAXParserFactory from class name.\n This function is useful when there are multiple providers in the classpath.\n It gives more control to the application as it can specify which provider\n should be loaded.\n\n Once an application has obtained a reference to a SAXParserFactory\n it can use the factory to configure and obtain parser instances.\n\n\n Tip for Trouble-shooting\nSetting the jaxp.debug system property will cause\n this method to print a lot of debug messages\n to System.err about what it is doing and where it is looking at.\n\n \n If you have problems, try:\n \n java -Djaxp.debug=1 YourProgram ....\n "}, {"method_name": "newSAXParser", "method_sig": "public abstract SAXParser newSAXParser()\n                                throws ParserConfigurationException,\n                                       SAXException", "description": "Creates a new instance of a SAXParser using the currently\n configured factory parameters."}, {"method_name": "setNamespaceAware", "method_sig": "public void setNamespaceAware (boolean awareness)", "description": "Specifies that the parser produced by this code will\n provide support for XML namespaces. By default the value of this is set\n to false."}, {"method_name": "setValidating", "method_sig": "public void setValidating (boolean validating)", "description": "Specifies that the parser produced by this code will\n validate documents as they are parsed. By default the value of this is\n set to false.\n\n \n Note that \"the validation\" here means\n a validating\n parser as defined in the XML recommendation.\n In other words, it essentially just controls the DTD validation.\n (except the legacy two properties defined in JAXP 1.2.)\n\n \n To use modern schema languages such as W3C XML Schema or\n RELAX NG instead of DTD, you can configure your parser to be\n a non-validating parser by leaving the setValidating(boolean)\n method false, then use the setSchema(Schema)\n method to associate a schema to a parser."}, {"method_name": "isNamespaceAware", "method_sig": "public boolean isNamespaceAware()", "description": "Indicates whether or not the factory is configured to produce\n parsers which are namespace aware."}, {"method_name": "isValidating", "method_sig": "public boolean isValidating()", "description": "Indicates whether or not the factory is configured to produce\n parsers which validate the XML content during parse."}, {"method_name": "setFeature", "method_sig": "public abstract void setFeature (String name,\n                                boolean value)\n                         throws ParserConfigurationException,\n                                SAXNotRecognizedException,\n                                SAXNotSupportedException", "description": "Sets the particular feature in the underlying implementation of\n org.xml.sax.XMLReader.\n A list of the core features and properties can be found at\n http://www.saxproject.org/\nAll implementations are required to support the XMLConstants.FEATURE_SECURE_PROCESSING feature.\n When the feature is\n \n\ntrue: the implementation will limit XML processing to conform to implementation limits.\n     Examples include entity expansion limits and XML Schema constructs that would consume large amounts of resources.\n     If XML processing is limited for security reasons, it will be reported via a call to the registered\n     ErrorHandler.fatalError(SAXParseException exception).\n     See SAXParser parse methods for handler specification.\n   \n\n     When the feature is false, the implementation will processing XML according to the XML specifications without\n     regard to possible implementation limits.\n   \n"}, {"method_name": "getFeature", "method_sig": "public abstract boolean getFeature (String name)\n                            throws ParserConfigurationException,\n                                   SAXNotRecognizedException,\n                                   SAXNotSupportedException", "description": "Returns the particular property requested for in the underlying\n implementation of org.xml.sax.XMLReader."}, {"method_name": "getSchema", "method_sig": "public Schema getSchema()", "description": "Gets the Schema object specified through\n the setSchema(Schema schema) method."}, {"method_name": "setSchema", "method_sig": "public void setSchema (Schema schema)", "description": "Set the Schema to be used by parsers created\n from this factory.\n\n When a Schema is non-null, a parser will use a validator\n created from it to validate documents before it passes information\n down to the application.\n\n When warnings/errors/fatal errors are found by the validator, the parser must\n handle them as if those errors were found by the parser itself.\n In other words, if the user-specified ErrorHandler\n is set, it must receive those errors, and if not, they must be\n treated according to the implementation specific\n default error handling rules.\n\n A validator may modify the SAX event stream (for example by\n adding default values that were missing in documents), and a parser\n is responsible to make sure that the application will receive\n those modified event stream.\n\n Initially, null is set as the Schema.\n\n This processing will take effect even if\n the isValidating() method returns false.\n\n It is an error to use\n the http://java.sun.com/xml/jaxp/properties/schemaSource\n property and/or the http://java.sun.com/xml/jaxp/properties/schemaLanguage\n property in conjunction with a non-null Schema object.\n Such configuration will cause a SAXException\n exception when those properties are set on a SAXParser.\n\n Note for implementors\n\n A parser must be able to work with any Schema\n implementation. However, parsers and schemas are allowed\n to use implementation-specific custom mechanisms\n as long as they yield the result described in the specification."}, {"method_name": "setXIncludeAware", "method_sig": "public void setXIncludeAware (boolean state)", "description": "Set state of XInclude processing.\n\n If XInclude markup is found in the document instance, should it be\n processed as specified in \n XML Inclusions (XInclude) Version 1.0.\n\n XInclude processing defaults to false."}, {"method_name": "isXIncludeAware", "method_sig": "public boolean isXIncludeAware()", "description": "Get state of XInclude processing."}]}