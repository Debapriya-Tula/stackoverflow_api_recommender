{"name": "Class AsyncBoxView", "module": "java.desktop", "package": "javax.swing.text", "text": "A box that does layout asynchronously.  This\n is useful to keep the GUI event thread moving by\n not doing any layout on it.  The layout is done\n on a granularity of operations on the child views.\n After each child view is accessed for some part\n of layout (a potentially time consuming operation)\n the remaining tasks can be abandoned or a new higher\n priority task (i.e. to service a synchronous request\n or a visible area) can be taken on.\n \n While the child view is being accessed\n a read lock is acquired on the associated document\n so that the model is stable while being accessed.", "codes": ["public class AsyncBoxView\nextends View"], "fields": [{"field_name": "locator", "field_sig": "protected\u00a0AsyncBoxView.ChildLocator locator", "description": "Object that manages the offsets of the\n children.  All locking for management of\n child locations is on this object."}], "methods": [{"method_name": "getMajorAxis", "method_sig": "public int getMajorAxis()", "description": "Fetch the major axis (the axis the children\n are tiled along).  This will have a value of\n either X_AXIS or Y_AXIS."}, {"method_name": "getMinorAxis", "method_sig": "public int getMinorAxis()", "description": "Fetch the minor axis (the axis orthogonal\n to the tiled axis).  This will have a value of\n either X_AXIS or Y_AXIS."}, {"method_name": "getTopInset", "method_sig": "public float getTopInset()", "description": "Get the top part of the margin around the view."}, {"method_name": "setTopInset", "method_sig": "public void setTopInset (float i)", "description": "Set the top part of the margin around the view."}, {"method_name": "getBottomInset", "method_sig": "public float getBottomInset()", "description": "Get the bottom part of the margin around the view."}, {"method_name": "setBottomInset", "method_sig": "public void setBottomInset (float i)", "description": "Set the bottom part of the margin around the view."}, {"method_name": "getLeftInset", "method_sig": "public float getLeftInset()", "description": "Get the left part of the margin around the view."}, {"method_name": "setLeftInset", "method_sig": "public void setLeftInset (float i)", "description": "Set the left part of the margin around the view."}, {"method_name": "getRightInset", "method_sig": "public float getRightInset()", "description": "Get the right part of the margin around the view."}, {"method_name": "setRightInset", "method_sig": "public void setRightInset (float i)", "description": "Set the right part of the margin around the view."}, {"method_name": "getInsetSpan", "method_sig": "protected float getInsetSpan (int axis)", "description": "Fetch the span along an axis that is taken up by the insets."}, {"method_name": "setEstimatedMajorSpan", "method_sig": "protected void setEstimatedMajorSpan (boolean isEstimated)", "description": "Set the estimatedMajorSpan property that determines if the\n major span should be treated as being estimated.  If this\n property is true, the value of setSize along the major axis\n will change the requirements along the major axis and incremental\n changes will be ignored until all of the children have been updated\n (which will cause the property to automatically be set to false).\n If the property is false the value of the majorSpan will be\n considered to be accurate and incremental changes will be\n added into the total as they are calculated."}, {"method_name": "getEstimatedMajorSpan", "method_sig": "protected boolean getEstimatedMajorSpan()", "description": "Is the major span currently estimated?"}, {"method_name": "getChildState", "method_sig": "protected AsyncBoxView.ChildState getChildState (int index)", "description": "Fetch the object representing the layout state of\n of the child at the given index."}, {"method_name": "getLayoutQueue", "method_sig": "protected LayoutQueue getLayoutQueue()", "description": "Fetch the queue to use for layout."}, {"method_name": "createChildState", "method_sig": "protected AsyncBoxView.ChildState createChildState (View v)", "description": "New ChildState records are created through\n this method to allow subclasses the extend\n the ChildState records to do/hold more."}, {"method_name": "majorRequirementChange", "method_sig": "protected void majorRequirementChange (AsyncBoxView.ChildState cs,\n                                      float delta)", "description": "Requirements changed along the major axis.\n This is called by the thread doing layout for\n the given ChildState object when it has completed\n fetching the child views new preferences.\n Typically this would be the layout thread, but\n might be the event thread if it is trying to update\n something immediately (such as to perform a\n model/view translation).\n \n This is implemented to mark the major axis as having\n changed so that a future check to see if the requirements\n need to be published to the parent view will consider\n the major axis.  If the span along the major axis is\n not estimated, it is updated by the given delta to reflect\n the incremental change.  The delta is ignored if the\n major span is estimated."}, {"method_name": "minorRequirementChange", "method_sig": "protected void minorRequirementChange (AsyncBoxView.ChildState cs)", "description": "Requirements changed along the minor axis.\n This is called by the thread doing layout for\n the given ChildState object when it has completed\n fetching the child views new preferences.\n Typically this would be the layout thread, but\n might be the GUI thread if it is trying to update\n something immediately (such as to perform a\n model/view translation)."}, {"method_name": "flushRequirementChanges", "method_sig": "protected void flushRequirementChanges()", "description": "Publish the changes in preferences upward to the parent\n view.  This is normally called by the layout thread."}, {"method_name": "replace", "method_sig": "public void replace (int offset,\n                    int length,\n                    View[] views)", "description": "Calls the superclass to update the child views, and\n updates the status records for the children.  This\n is expected to be called while a write lock is held\n on the model so that interaction with the layout\n thread will not happen (i.e. the layout thread\n acquires a read lock before doing anything)."}, {"method_name": "loadChildren", "method_sig": "protected void loadChildren (ViewFactory f)", "description": "Loads all of the children to initialize the view.\n This is called by the setParent\n method.  Subclasses can reimplement this to initialize\n their child views in a different manner.  The default\n implementation creates a child view for each\n child element.\n \n Normally a write-lock is held on the Document while\n the children are being changed, which keeps the rendering\n and layout threads safe.  The exception to this is when\n the view is initialized to represent an existing element\n (via this method), so it is synchronized to exclude\n preferenceChanged while we are initializing."}, {"method_name": "getViewIndexAtPosition", "method_sig": "protected int getViewIndexAtPosition (int pos,\n                                     Position.Bias b)", "description": "Fetches the child view index representing the given position in\n the model.  This is implemented to fetch the view in the case\n where there is a child view for each child element."}, {"method_name": "updateLayout", "method_sig": "protected void updateLayout (DocumentEvent.ElementChange ec,\n                            DocumentEvent e,\n                            Shape a)", "description": "Update the layout in response to receiving notification of\n change from the model.  This is implemented to note the\n change on the ChildLocator so that offsets of the children\n will be correctly computed."}, {"method_name": "setParent", "method_sig": "public void setParent (View parent)", "description": "Sets the parent of the view.\n This is reimplemented to provide the superclass\n behavior as well as calling the loadChildren\n method if this view does not already have children.\n The children should not be loaded in the\n constructor because the act of setting the parent\n may cause them to try to search up the hierarchy\n (to get the hosting Container for example).\n If this view has children (the view is being moved\n from one place in the view hierarchy to another),\n the loadChildren method will not be called."}, {"method_name": "preferenceChanged", "method_sig": "public void preferenceChanged (View child,\n                              boolean width,\n                              boolean height)", "description": "Child views can call this on the parent to indicate that\n the preference has changed and should be reconsidered\n for layout.  This is reimplemented to queue new work\n on the layout thread.  This method gets messaged from\n multiple threads via the children."}, {"method_name": "setSize", "method_sig": "public void setSize (float width,\n                    float height)", "description": "Sets the size of the view.  This should cause\n layout of the view if the view caches any layout\n information.\n \n Since the major axis is updated asynchronously and should be\n the sum of the tiled children the call is ignored for the major\n axis.  Since the minor axis is flexible, work is queued to resize\n the children if the minor span changes."}, {"method_name": "paint", "method_sig": "public void paint (Graphics g,\n                  Shape alloc)", "description": "Render the view using the given allocation and\n rendering surface.\n \n This is implemented to determine whether or not the\n desired region to be rendered (i.e. the unclipped\n area) is up to date or not.  If up-to-date the children\n are rendered.  If not up-to-date, a task to build\n the desired area is placed on the layout queue as\n a high priority task.  This keeps by event thread\n moving by rendering if ready, and postponing until\n a later time if not ready (since paint requests\n can be rescheduled)."}, {"method_name": "getPreferredSpan", "method_sig": "public float getPreferredSpan (int axis)", "description": "Determines the preferred span for this view along an\n axis."}, {"method_name": "getMinimumSpan", "method_sig": "public float getMinimumSpan (int axis)", "description": "Determines the minimum span for this view along an\n axis."}, {"method_name": "getMaximumSpan", "method_sig": "public float getMaximumSpan (int axis)", "description": "Determines the maximum span for this view along an\n axis."}, {"method_name": "getViewCount", "method_sig": "public int getViewCount()", "description": "Returns the number of views in this view.  Since\n the default is to not be a composite view this\n returns 0."}, {"method_name": "getView", "method_sig": "public View getView (int n)", "description": "Gets the nth child view.  Since there are no\n children by default, this returns null."}, {"method_name": "getChildAllocation", "method_sig": "public Shape getChildAllocation (int index,\n                                Shape a)", "description": "Fetches the allocation for the given child view.\n This enables finding out where various views\n are located, without assuming the views store\n their location.  This returns null since the\n default is to not have any child views."}, {"method_name": "getViewIndex", "method_sig": "public int getViewIndex (int pos,\n                        Position.Bias b)", "description": "Returns the child view index representing the given position in\n the model.  By default a view has no children so this is implemented\n to return -1 to indicate there is no valid child index for any\n position."}, {"method_name": "modelToView", "method_sig": "public Shape modelToView (int pos,\n                         Shape a,\n                         Position.Bias b)\n                  throws BadLocationException", "description": "Provides a mapping from the document model coordinate space\n to the coordinate space of the view mapped to it."}, {"method_name": "viewToModel", "method_sig": "public int viewToModel (float x,\n                       float y,\n                       Shape a,\n                       Position.Bias[] biasReturn)", "description": "Provides a mapping from the view coordinate space to the logical\n coordinate space of the model.  The biasReturn argument will be\n filled in to indicate that the point given is closer to the next\n character in the model or the previous character in the model.\n \n This is expected to be called by the GUI thread, holding a\n read-lock on the associated model.  It is implemented to\n locate the child view and determine it's allocation with a\n lock on the ChildLocator object, and to call viewToModel\n on the child view with a lock on the ChildState object\n to avoid interaction with the layout thread."}, {"method_name": "getNextVisualPositionFrom", "method_sig": "public int getNextVisualPositionFrom (int pos,\n                                     Position.Bias b,\n                                     Shape a,\n                                     int direction,\n                                     Position.Bias[] biasRet)\n                              throws BadLocationException", "description": "Provides a way to determine the next visually represented model\n location that one might place a caret.  Some views may not be visible,\n they might not be in the same order found in the model, or they just\n might not allow access to some of the locations in the model.\n This method enables specifying a position to convert\n within the range of >=0.  If the value is -1, a position\n will be calculated automatically.  If the value < -1,\n the BadLocationException will be thrown."}]}