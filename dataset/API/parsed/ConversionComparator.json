{"name": "Interface ConversionComparator", "module": "jdk.dynalink", "package": "jdk.dynalink.linker", "text": "Optional interface to be implemented by GuardingTypeConverterFactory\n implementers. Language-specific conversions can cause increased overloaded\n method resolution ambiguity, as many methods can become applicable because of\n additional conversions. The static way of selecting the \"most specific\"\n method will fail more often, because there will be multiple maximally\n specific method with unrelated signatures. In these cases, language runtimes\n can be asked to resolve the ambiguity by expressing preferences for one\n conversion over the other.", "codes": ["public interface ConversionComparator"], "fields": [], "methods": [{"method_name": "compareConversion", "method_sig": "ConversionComparator.Comparison compareConversion (Class<?> sourceType,\n                                                  Class<?> targetType1,\n                                                  Class<?> targetType2)", "description": "Determines which of the two target types is the preferred conversion\n target from a source type."}]}