{"name": "Class MethodType", "module": "java.base", "package": "java.lang.invoke", "text": "A method type represents the arguments and return type accepted and\n returned by a method handle, or the arguments and return type passed\n and expected  by a method handle caller.  Method types must be properly\n matched between a method handle and all its callers,\n and the JVM's operations enforce this matching at, specifically\n during calls to MethodHandle.invokeExact\n and MethodHandle.invoke, and during execution\n of invokedynamic instructions.\n \n The structure is a return type accompanied by any number of parameter types.\n The types (primitive, void, and reference) are represented by Class objects.\n (For ease of exposition, we treat void as if it were a type.\n In fact, it denotes the absence of a return type.)\n \n All instances of MethodType are immutable.\n Two instances are completely interchangeable if they compare equal.\n Equality depends on pairwise correspondence of the return and parameter types and on nothing else.\n \n This type can be created only by factory methods.\n All factory methods may cache values, though caching is not guaranteed.\n Some factory methods are static, while others are virtual methods which\n modify precursor method types, e.g., by changing a selected parameter.\n \n Factory methods which operate on groups of parameter types\n are systematically presented in two versions, so that both Java arrays and\n Java lists can be used to work with groups of parameter types.\n The query methods parameterArray and parameterList\n also provide a choice between arrays and lists.\n \nMethodType objects are sometimes derived from bytecode instructions\n such as invokedynamic, specifically from the type descriptor strings associated\n with the instructions in a class file's constant pool.\n \n Like classes and strings, method types can also be represented directly\n in a class file's constant pool as constants.\n A method type may be loaded by an ldc instruction which refers\n to a suitable CONSTANT_MethodType constant pool entry.\n The entry refers to a CONSTANT_Utf8 spelling for the descriptor string.\n (For full details on method type constants,\n see sections 4.4.8 and 5.4.3.5 of the Java Virtual Machine Specification.)\n \n When the JVM materializes a MethodType from a descriptor string,\n all classes named in the descriptor must be accessible, and will be loaded.\n (But the classes need not be initialized, as is the case with a CONSTANT_Class.)\n This loading may occur at any time before the MethodType object is first derived.", "codes": ["public final class MethodType\nextends Object\nimplements Serializable"], "fields": [], "methods": [{"method_name": "methodType", "method_sig": "public static MethodType methodType (Class<?> rtype,\n                                    Class<?>[] ptypes)", "description": "Finds or creates an instance of the given method type."}, {"method_name": "methodType", "method_sig": "public static MethodType methodType (Class<?> rtype,\n                                    List<Class<?>> ptypes)", "description": "Finds or creates a method type with the given components.\n Convenience method for methodType."}, {"method_name": "methodType", "method_sig": "public static MethodType methodType (Class<?> rtype,\n                                    Class<?> ptype0,\n                                    Class<?>... ptypes)", "description": "Finds or creates a method type with the given components.\n Convenience method for methodType.\n The leading parameter type is prepended to the remaining array."}, {"method_name": "methodType", "method_sig": "public static MethodType methodType (Class<?> rtype)", "description": "Finds or creates a method type with the given components.\n Convenience method for methodType.\n The resulting method has no parameter types."}, {"method_name": "methodType", "method_sig": "public static MethodType methodType (Class<?> rtype,\n                                    Class<?> ptype0)", "description": "Finds or creates a method type with the given components.\n Convenience method for methodType.\n The resulting method has the single given parameter type."}, {"method_name": "methodType", "method_sig": "public static MethodType methodType (Class<?> rtype,\n                                    MethodType ptypes)", "description": "Finds or creates a method type with the given components.\n Convenience method for methodType.\n The resulting method has the same parameter types as ptypes,\n and the specified return type."}, {"method_name": "genericMethodType", "method_sig": "public static MethodType genericMethodType (int objectArgCount,\n                                           boolean finalArray)", "description": "Finds or creates a method type whose components are Object with an optional trailing Object[] array.\n Convenience method for methodType.\n All parameters and the return type will be Object,\n except the final array parameter if any, which will be Object[]."}, {"method_name": "genericMethodType", "method_sig": "public static MethodType genericMethodType (int objectArgCount)", "description": "Finds or creates a method type whose components are all Object.\n Convenience method for methodType.\n All parameters and the return type will be Object."}, {"method_name": "changeParameterType", "method_sig": "public MethodType changeParameterType (int num,\n                                      Class<?> nptype)", "description": "Finds or creates a method type with a single different parameter type.\n Convenience method for methodType."}, {"method_name": "insertParameterTypes", "method_sig": "public MethodType insertParameterTypes (int num,\n                                       Class<?>... ptypesToInsert)", "description": "Finds or creates a method type with additional parameter types.\n Convenience method for methodType."}, {"method_name": "appendParameterTypes", "method_sig": "public MethodType appendParameterTypes (Class<?>... ptypesToInsert)", "description": "Finds or creates a method type with additional parameter types.\n Convenience method for methodType."}, {"method_name": "insertParameterTypes", "method_sig": "public MethodType insertParameterTypes (int num,\n                                       List<Class<?>> ptypesToInsert)", "description": "Finds or creates a method type with additional parameter types.\n Convenience method for methodType."}, {"method_name": "appendParameterTypes", "method_sig": "public MethodType appendParameterTypes (List<Class<?>> ptypesToInsert)", "description": "Finds or creates a method type with additional parameter types.\n Convenience method for methodType."}, {"method_name": "dropParameterTypes", "method_sig": "public MethodType dropParameterTypes (int start,\n                                     int end)", "description": "Finds or creates a method type with some parameter types omitted.\n Convenience method for methodType."}, {"method_name": "changeReturnType", "method_sig": "public MethodType changeReturnType (Class<?> nrtype)", "description": "Finds or creates a method type with a different return type.\n Convenience method for methodType."}, {"method_name": "hasPrimitives", "method_sig": "public boolean hasPrimitives()", "description": "Reports if this type contains a primitive argument or return value.\n The return type void counts as a primitive."}, {"method_name": "hasWrappers", "method_sig": "public boolean hasWrappers()", "description": "Reports if this type contains a wrapper argument or return value.\n Wrappers are types which box primitive values, such as Integer.\n The reference type java.lang.Void counts as a wrapper,\n if it occurs as a return type."}, {"method_name": "erase", "method_sig": "public MethodType erase()", "description": "Erases all reference types to Object.\n Convenience method for methodType.\n All primitive types (including void) will remain unchanged."}, {"method_name": "generic", "method_sig": "public MethodType generic()", "description": "Converts all types, both reference and primitive, to Object.\n Convenience method for genericMethodType.\n The expression type.wrap().erase() produces the same value\n as type.generic()."}, {"method_name": "wrap", "method_sig": "public MethodType wrap()", "description": "Converts all primitive types to their corresponding wrapper types.\n Convenience method for methodType.\n All reference types (including wrapper types) will remain unchanged.\n A void return type is changed to the type java.lang.Void.\n The expression type.wrap().erase() produces the same value\n as type.generic()."}, {"method_name": "unwrap", "method_sig": "public MethodType unwrap()", "description": "Converts all wrapper types to their corresponding primitive types.\n Convenience method for methodType.\n All primitive types (including void) will remain unchanged.\n A return type of java.lang.Void is changed to void."}, {"method_name": "parameterType", "method_sig": "public Class<?> parameterType (int num)", "description": "Returns the parameter type at the specified index, within this method type."}, {"method_name": "parameterCount", "method_sig": "public int parameterCount()", "description": "Returns the number of parameter types in this method type."}, {"method_name": "returnType", "method_sig": "public Class<?> returnType()", "description": "Returns the return type of this method type."}, {"method_name": "parameterList", "method_sig": "public List<Class<?>> parameterList()", "description": "Presents the parameter types as a list (a convenience method).\n The list will be immutable."}, {"method_name": "lastParameterType", "method_sig": "public Class<?> lastParameterType()", "description": "Returns the last parameter type of this method type.\n If this type has no parameters, the sentinel value\n void.class is returned instead."}, {"method_name": "parameterArray", "method_sig": "public Class<?>[] parameterArray()", "description": "Presents the parameter types as an array (a convenience method).\n Changes to the array will not result in changes to the type."}, {"method_name": "equals", "method_sig": "public boolean equals (Object x)", "description": "Compares the specified object with this type for equality.\n That is, it returns true if and only if the specified object\n is also a method type with exactly the same parameters and return type."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Returns the hash code value for this method type.\n It is defined to be the same as the hashcode of a List\n whose elements are the return type followed by the\n parameter types."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a string representation of the method type,\n of the form \"(PT0,PT1...)RT\".\n The string representation of a method type is a\n parenthesis enclosed, comma separated list of type names,\n followed immediately by the return type.\n \n Each type is represented by its\n simple name."}, {"method_name": "fromMethodDescriptorString", "method_sig": "public static MethodType fromMethodDescriptorString (String descriptor,\n                                                    ClassLoader loader)\n                                             throws IllegalArgumentException,\n                                                    TypeNotPresentException", "description": "Finds or creates an instance of a method type, given the spelling of its bytecode descriptor.\n Convenience method for methodType.\n Any class or interface name embedded in the descriptor string\n will be resolved by calling ClassLoader.loadClass(java.lang.String)\n on the given loader (or if it is null, on the system class loader).\n \n Note that it is possible to encounter method types which cannot be\n constructed by this method, because their component types are\n not all reachable from a common class loader.\n \n This method is included for the benefit of applications that must\n generate bytecodes that process method handles and invokedynamic."}, {"method_name": "toMethodDescriptorString", "method_sig": "public String toMethodDescriptorString()", "description": "Produces a bytecode descriptor representation of the method type.\n \n Note that this is not a strict inverse of fromMethodDescriptorString.\n Two distinct classes which share a common name but have different class loaders\n will appear identical when viewed within descriptor strings.\n \n This method is included for the benefit of applications that must\n generate bytecodes that process method handles and invokedynamic.\n fromMethodDescriptorString,\n because the latter requires a suitable class loader argument."}]}