{"name": "Interface AclFileAttributeView", "module": "java.base", "package": "java.nio.file.attribute", "text": "A file attribute view that supports reading or updating a file's Access\n Control Lists (ACL) or file owner attributes.\n\n  ACLs are used to specify access rights to file system objects. An ACL is\n an ordered list of access-control-entries, each specifying a\n UserPrincipal and the level of access for that user principal. This\n file attribute view defines the getAcl, and setAcl methods to read and write ACLs based on the ACL\n model specified in RFC\u00a03530:\n Network File System (NFS) version 4 Protocol. This file attribute view\n is intended for file system implementations that support the NFSv4 ACL model\n or have a well-defined mapping between the NFSv4 ACL model and the ACL\n model used by the file system. The details of such mapping are implementation\n dependent and are therefore unspecified.\n\n  This class also extends FileOwnerAttributeView so as to define\n methods to get and set the file owner.\n\n  When a file system provides access to a set of file-systems that are not homogeneous then only some of the file systems may\n support ACLs. The supportsFileAttributeView method can be used to test if a file system\n supports ACLs.\n\n Interoperability\n\n RFC\u00a03530 allows for special user identities to be used on platforms that\n support the POSIX defined access permissions. The special user identities\n are \"OWNER@\", \"GROUP@\", and \"EVERYONE@\". When both\n the AclFileAttributeView and the PosixFileAttributeView\n are supported then these special user identities may be included in ACL entries that are read or written. The file system's UserPrincipalLookupService may be used to obtain a UserPrincipal\n to represent these special identities by invoking the lookupPrincipalByName\n method.\n\n  Usage Example:\n Suppose we wish to add an entry to an existing ACL to grant \"joe\" access:\n \n     // lookup \"joe\"\n     UserPrincipal joe = file.getFileSystem().getUserPrincipalLookupService()\n         .lookupPrincipalByName(\"joe\");\n\n     // get view\n     AclFileAttributeView view = Files.getFileAttributeView(file, AclFileAttributeView.class);\n\n     // create ACE to give \"joe\" read access\n     AclEntry entry = AclEntry.newBuilder()\n         .setType(AclEntryType.ALLOW)\n         .setPrincipal(joe)\n         .setPermissions(AclEntryPermission.READ_DATA, AclEntryPermission.READ_ATTRIBUTES)\n         .build();\n\n     // read ACL, insert ACE, re-write ACL\n     List<AclEntry> acl = view.getAcl();\n     acl.add(0, entry);   // insert before any DENY entries\n     view.setAcl(acl);\n \n Dynamic Access \n Where dynamic access to file attributes is required, the attributes\n supported by this attribute view are as follows:\n \n\nSupported attributes\n\n\n Name \n Type \n\n\n\n\n \"acl\" \n List<AclEntry> \n\n\n \"owner\" \n UserPrincipal \n\n\n\n\n The getAttribute method may be used to read\n the ACL or owner attributes as if by invoking the getAcl or\n getOwner methods.\n\n  The setAttribute method may be used to\n update the ACL or owner attributes as if by invoking the setAcl\n or setOwner methods.\n\n  Setting the ACL when creating a file \n Implementations supporting this attribute view may also support setting\n the initial ACL when creating a file or directory. The initial ACL\n may be provided to methods such as createFile or createDirectory as an FileAttribute with name \"acl:acl\" and a value that is the list of AclEntry objects.\n\n  Where an implementation supports an ACL model that differs from the NFSv4\n defined ACL model then setting the initial ACL when creating the file must\n translate the ACL to the model supported by the file system. Methods that\n create a file should reject (by throwing IOException)\n any attempt to create a file that would be less secure as a result of the\n translation.", "codes": ["public interface AclFileAttributeView\nextends FileOwnerAttributeView"], "fields": [], "methods": [{"method_name": "name", "method_sig": "String name()", "description": "Returns the name of the attribute view. Attribute views of this type\n have the name \"acl\"."}, {"method_name": "getAcl", "method_sig": "List<AclEntry> getAcl()\n               throws IOException", "description": "Reads the access control list.\n\n  When the file system uses an ACL model that differs from the NFSv4\n defined ACL model, then this method returns an ACL that is the translation\n of the ACL to the NFSv4 ACL model.\n\n  The returned list is modifiable so as to facilitate changes to the\n existing ACL. The setAcl method is used to update\n the file's ACL attribute."}, {"method_name": "setAcl", "method_sig": "void setAcl (List<AclEntry> acl)\n     throws IOException", "description": "Updates (replace) the access control list.\n\n  Where the file system supports Access Control Lists, and it uses an\n ACL model that differs from the NFSv4 defined ACL model, then this method\n must translate the ACL to the model supported by the file system. This\n method should reject (by throwing IOException) any\n attempt to write an ACL that would appear to make the file more secure\n than would be the case if the ACL were updated. Where an implementation\n does not support a mapping of AclEntryType.AUDIT or AclEntryType.ALARM entries, then this method ignores these entries when\n writing the ACL.\n\n  If an ACL entry contains a user-principal\n that is not associated with the same provider as this attribute view then\n ProviderMismatchException is thrown. Additional validation, if\n any, is implementation dependent.\n\n  If the file system supports other security related file attributes\n (such as a file access-permissions for example), the updating the access control list\n may also cause these security related attributes to be updated."}]}