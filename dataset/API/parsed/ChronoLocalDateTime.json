{"name": "Interface ChronoLocalDateTime<D extends ChronoLocalDate>", "module": "java.base", "package": "java.time.chrono", "text": "A date-time without a time-zone in an arbitrary chronology, intended\n for advanced globalization use cases.\n \nMost applications should declare method signatures, fields and variables\n as LocalDateTime, not this interface.\n\n A ChronoLocalDateTime is the abstract representation of a local date-time\n where the Chronology chronology, or calendar system, is pluggable.\n The date-time is defined in terms of fields expressed by TemporalField,\n where most common implementations are defined in ChronoField.\n The chronology defines how the calendar system operates and the meaning of\n the standard fields.\n\n When to use this interface\n The design of the API encourages the use of LocalDateTime rather than this\n interface, even in the case where the application needs to deal with multiple\n calendar systems. The rationale for this is explored in detail in ChronoLocalDate.\n \n Ensure that the discussion in ChronoLocalDate has been read and understood\n before using this interface.", "codes": ["public interface ChronoLocalDateTime<D extends ChronoLocalDate>\nextends Temporal, TemporalAdjuster, Comparable<ChronoLocalDateTime<?>>"], "fields": [], "methods": [{"method_name": "timeLineOrder", "method_sig": "static Comparator<ChronoLocalDateTime<?>> timeLineOrder()", "description": "Gets a comparator that compares ChronoLocalDateTime in\n time-line order ignoring the chronology.\n \n This comparator differs from the comparison in compareTo(java.time.chrono.ChronoLocalDateTime<?>) in that it\n only compares the underlying date-time and not the chronology.\n This allows dates in different calendar systems to be compared based\n on the position of the date-time on the local time-line.\n The underlying comparison is equivalent to comparing the epoch-day and nano-of-day."}, {"method_name": "from", "method_sig": "static ChronoLocalDateTime<?> from (TemporalAccessor temporal)", "description": "Obtains an instance of ChronoLocalDateTime from a temporal object.\n \n This obtains a local date-time based on the specified temporal.\n A TemporalAccessor represents an arbitrary set of date and time information,\n which this factory converts to an instance of ChronoLocalDateTime.\n \n The conversion extracts and combines the chronology and the date-time\n from the temporal object. The behavior is equivalent to using\n Chronology.localDateTime(TemporalAccessor) with the extracted chronology.\n Implementations are permitted to perform optimizations such as accessing\n those fields that are equivalent to the relevant objects.\n \n This method matches the signature of the functional interface TemporalQuery\n allowing it to be used as a query via method reference, ChronoLocalDateTime::from."}, {"method_name": "getChronology", "method_sig": "default Chronology getChronology()", "description": "Gets the chronology of this date-time.\n \n The Chronology represents the calendar system in use.\n The era and other fields in ChronoField are defined by the chronology."}, {"method_name": "toLocalDate", "method_sig": "D toLocalDate()", "description": "Gets the local date part of this date-time.\n \n This returns a local date with the same year, month and day\n as this date-time."}, {"method_name": "toLocalTime", "method_sig": "LocalTime toLocalTime()", "description": "Gets the local time part of this date-time.\n \n This returns a local time with the same hour, minute, second and\n nanosecond as this date-time."}, {"method_name": "isSupported", "method_sig": "boolean isSupported (TemporalField field)", "description": "Checks if the specified field is supported.\n \n This checks if the specified field can be queried on this date-time.\n If false, then calling the range,\n get and with(TemporalField, long)\n methods will throw an exception.\n \n The set of supported fields is defined by the chronology and normally includes\n all ChronoField date and time fields.\n \n If the field is not a ChronoField, then the result of this method\n is obtained by invoking TemporalField.isSupportedBy(TemporalAccessor)\n passing this as the argument.\n Whether the field is supported is determined by the field."}, {"method_name": "isSupported", "method_sig": "default boolean isSupported (TemporalUnit unit)", "description": "Checks if the specified unit is supported.\n \n This checks if the specified unit can be added to or subtracted from this date-time.\n If false, then calling the plus(long, TemporalUnit) and\n minus methods will throw an exception.\n \n The set of supported units is defined by the chronology and normally includes\n all ChronoUnit units except FOREVER.\n \n If the unit is not a ChronoUnit, then the result of this method\n is obtained by invoking TemporalUnit.isSupportedBy(Temporal)\n passing this as the argument.\n Whether the unit is supported is determined by the unit."}, {"method_name": "with", "method_sig": "default ChronoLocalDateTime<D> with (TemporalAdjuster adjuster)", "description": "Returns an adjusted object of the same type as this object with the adjustment made.\n \n This adjusts this date-time according to the rules of the specified adjuster.\n A simple adjuster might simply set the one of the fields, such as the year field.\n A more complex adjuster might set the date to the last day of the month.\n A selection of common adjustments is provided in\n TemporalAdjusters.\n These include finding the \"last day of the month\" and \"next Wednesday\".\n The adjuster is responsible for handling special cases, such as the varying\n lengths of month and leap years.\n \n Some example code indicating how and why this method is used:\n \n  date = date.with(Month.JULY);        // most key classes implement TemporalAdjuster\n  date = date.with(lastDayOfMonth());  // static import from Adjusters\n  date = date.with(next(WEDNESDAY));   // static import from Adjusters and DayOfWeek\n "}, {"method_name": "with", "method_sig": "ChronoLocalDateTime<D> with (TemporalField field,\n                            long newValue)", "description": "Returns an object of the same type as this object with the specified field altered.\n \n This returns a new object based on this one with the value for the specified field changed.\n For example, on a LocalDate, this could be used to set the year, month or day-of-month.\n The returned object will have the same observable type as this object.\n \n In some cases, changing a field is not fully defined. For example, if the target object is\n a date representing the 31st January, then changing the month to February would be unclear.\n In cases like this, the field is responsible for resolving the result. Typically it will choose\n the previous valid date, which would be the last valid day of February in this example."}, {"method_name": "plus", "method_sig": "default ChronoLocalDateTime<D> plus (TemporalAmount amount)", "description": "Returns an object of the same type as this object with an amount added.\n \n This adjusts this temporal, adding according to the rules of the specified amount.\n The amount is typically a Period but may be any other type implementing\n the TemporalAmount interface, such as Duration.\n \n Some example code indicating how and why this method is used:\n \n  date = date.plus(period);                // add a Period instance\n  date = date.plus(duration);              // add a Duration instance\n  date = date.plus(workingDays(6));        // example user-written workingDays method\n \n\n Note that calling plus followed by minus is not guaranteed to\n return the same date-time."}, {"method_name": "plus", "method_sig": "ChronoLocalDateTime<D> plus (long amountToAdd,\n                            TemporalUnit unit)", "description": "Returns an object of the same type as this object with the specified period added.\n \n This method returns a new object based on this one with the specified period added.\n For example, on a LocalDate, this could be used to add a number of years, months or days.\n The returned object will have the same observable type as this object.\n \n In some cases, changing a field is not fully defined. For example, if the target object is\n a date representing the 31st January, then adding one month would be unclear.\n In cases like this, the field is responsible for resolving the result. Typically it will choose\n the previous valid date, which would be the last valid day of February in this example."}, {"method_name": "minus", "method_sig": "default ChronoLocalDateTime<D> minus (TemporalAmount amount)", "description": "Returns an object of the same type as this object with an amount subtracted.\n \n This adjusts this temporal, subtracting according to the rules of the specified amount.\n The amount is typically a Period but may be any other type implementing\n the TemporalAmount interface, such as Duration.\n \n Some example code indicating how and why this method is used:\n \n  date = date.minus(period);               // subtract a Period instance\n  date = date.minus(duration);             // subtract a Duration instance\n  date = date.minus(workingDays(6));       // example user-written workingDays method\n \n\n Note that calling plus followed by minus is not guaranteed to\n return the same date-time."}, {"method_name": "minus", "method_sig": "default ChronoLocalDateTime<D> minus (long amountToSubtract,\n                                     TemporalUnit unit)", "description": "Returns an object of the same type as this object with the specified period subtracted.\n \n This method returns a new object based on this one with the specified period subtracted.\n For example, on a LocalDate, this could be used to subtract a number of years, months or days.\n The returned object will have the same observable type as this object.\n \n In some cases, changing a field is not fully defined. For example, if the target object is\n a date representing the 31st March, then subtracting one month would be unclear.\n In cases like this, the field is responsible for resolving the result. Typically it will choose\n the previous valid date, which would be the last valid day of February in this example."}, {"method_name": "query", "method_sig": "default <R> R query (TemporalQuery<R> query)", "description": "Queries this date-time using the specified query.\n \n This queries this date-time using the specified query strategy object.\n The TemporalQuery object defines the logic to be used to\n obtain the result. Read the documentation of the query to understand\n what the result of this method will be.\n \n The result of this method is obtained by invoking the\n TemporalQuery.queryFrom(TemporalAccessor) method on the\n specified query passing this as the argument."}, {"method_name": "adjustInto", "method_sig": "default Temporal adjustInto (Temporal temporal)", "description": "Adjusts the specified temporal object to have the same date and time as this object.\n \n This returns a temporal object of the same observable type as the input\n with the date and time changed to be the same as this.\n \n The adjustment is equivalent to using Temporal.with(TemporalField, long)\n twice, passing ChronoField.EPOCH_DAY and\n ChronoField.NANO_OF_DAY as the fields.\n \n In most cases, it is clearer to reverse the calling pattern by using\n Temporal.with(TemporalAdjuster):\n \n   // these two lines are equivalent, but the second approach is recommended\n   temporal = thisLocalDateTime.adjustInto(temporal);\n   temporal = temporal.with(thisLocalDateTime);\n \n\n This instance is immutable and unaffected by this method call."}, {"method_name": "format", "method_sig": "default String format (DateTimeFormatter formatter)", "description": "Formats this date-time using the specified formatter.\n \n This date-time will be passed to the formatter to produce a string.\n \n The default implementation must behave as follows:\n \n  return formatter.format(this);\n "}, {"method_name": "atZone", "method_sig": "ChronoZonedDateTime<D> atZone (ZoneId zone)", "description": "Combines this time with a time-zone to create a ChronoZonedDateTime.\n \n This returns a ChronoZonedDateTime formed from this date-time at the\n specified time-zone. The result will match this date-time as closely as possible.\n Time-zone rules, such as daylight savings, mean that not every local date-time\n is valid for the specified zone, thus the local date-time may be adjusted.\n \n The local date-time is resolved to a single instant on the time-line.\n This is achieved by finding a valid offset from UTC/Greenwich for the local\n date-time as defined by the rules of the zone ID.\n\n In most cases, there is only one valid offset for a local date-time.\n In the case of an overlap, where clocks are set back, there are two valid offsets.\n This method uses the earlier offset typically corresponding to \"summer\".\n \n In the case of a gap, where clocks jump forward, there is no valid offset.\n Instead, the local date-time is adjusted to be later by the length of the gap.\n For a typical one hour daylight savings change, the local date-time will be\n moved one hour later into the offset typically corresponding to \"summer\".\n \n To obtain the later offset during an overlap, call\n ChronoZonedDateTime.withLaterOffsetAtOverlap() on the result of this method."}, {"method_name": "toInstant", "method_sig": "default Instant toInstant (ZoneOffset offset)", "description": "Converts this date-time to an Instant.\n \n This combines this local date-time and the specified offset to form\n an Instant.\n \n This default implementation calculates from the epoch-day of the date and the\n second-of-day of the time."}, {"method_name": "toEpochSecond", "method_sig": "default long toEpochSecond (ZoneOffset offset)", "description": "Converts this date-time to the number of seconds from the epoch\n of 1970-01-01T00:00:00Z.\n \n This combines this local date-time and the specified offset to calculate the\n epoch-second value, which is the number of elapsed seconds from 1970-01-01T00:00:00Z.\n Instants on the time-line after the epoch are positive, earlier are negative.\n \n This default implementation calculates from the epoch-day of the date and the\n second-of-day of the time."}, {"method_name": "compareTo", "method_sig": "default int compareTo (ChronoLocalDateTime<?> other)", "description": "Compares this date-time to another date-time, including the chronology.\n \n The comparison is based first on the underlying time-line date-time, then\n on the chronology.\n It is \"consistent with equals\", as defined by Comparable.\n \n For example, the following is the comparator order:\n \n2012-12-03T12:00 (ISO)\n2012-12-04T12:00 (ISO)\n2555-12-04T12:00 (ThaiBuddhist)\n2012-12-05T12:00 (ISO)\n\n Values #2 and #3 represent the same date-time on the time-line.\n When two values represent the same date-time, the chronology ID is compared to distinguish them.\n This step is needed to make the ordering \"consistent with equals\".\n \n If all the date-time objects being compared are in the same chronology, then the\n additional chronology stage is not required and only the local date-time is used.\n \n This default implementation performs the comparison defined above."}, {"method_name": "isAfter", "method_sig": "default boolean isAfter (ChronoLocalDateTime<?> other)", "description": "Checks if this date-time is after the specified date-time ignoring the chronology.\n \n This method differs from the comparison in compareTo(java.time.chrono.ChronoLocalDateTime<?>) in that it\n only compares the underlying date-time and not the chronology.\n This allows dates in different calendar systems to be compared based\n on the time-line position.\n \n This default implementation performs the comparison based on the epoch-day\n and nano-of-day."}, {"method_name": "isBefore", "method_sig": "default boolean isBefore (ChronoLocalDateTime<?> other)", "description": "Checks if this date-time is before the specified date-time ignoring the chronology.\n \n This method differs from the comparison in compareTo(java.time.chrono.ChronoLocalDateTime<?>) in that it\n only compares the underlying date-time and not the chronology.\n This allows dates in different calendar systems to be compared based\n on the time-line position.\n \n This default implementation performs the comparison based on the epoch-day\n and nano-of-day."}, {"method_name": "isEqual", "method_sig": "default boolean isEqual (ChronoLocalDateTime<?> other)", "description": "Checks if this date-time is equal to the specified date-time ignoring the chronology.\n \n This method differs from the comparison in compareTo(java.time.chrono.ChronoLocalDateTime<?>) in that it\n only compares the underlying date and time and not the chronology.\n This allows date-times in different calendar systems to be compared based\n on the time-line position.\n \n This default implementation performs the comparison based on the epoch-day\n and nano-of-day."}, {"method_name": "equals", "method_sig": "boolean equals (Object obj)", "description": "Checks if this date-time is equal to another date-time, including the chronology.\n \n Compares this date-time with another ensuring that the date-time and chronology are the same."}, {"method_name": "hashCode", "method_sig": "int hashCode()", "description": "A hash code for this date-time."}, {"method_name": "toString", "method_sig": "String toString()", "description": "Outputs this date-time as a String.\n \n The output will include the full local date-time."}]}