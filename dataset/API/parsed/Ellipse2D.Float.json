{"name": "Class Ellipse2D.Float", "module": "java.desktop", "package": "java.awt.geom", "text": "The Float class defines an ellipse specified\n in float precision.", "codes": ["public static class Ellipse2D.Float\nextends Ellipse2D\nimplements Serializable"], "fields": [{"field_name": "x", "field_sig": "public\u00a0float x", "description": "The X coordinate of the upper-left corner of the\n framing rectangle of this Ellipse2D."}, {"field_name": "y", "field_sig": "public\u00a0float y", "description": "The Y coordinate of the upper-left corner of the\n framing rectangle of this Ellipse2D."}, {"field_name": "width", "field_sig": "public\u00a0float width", "description": "The overall width of this Ellipse2D."}, {"field_name": "height", "field_sig": "public\u00a0float height", "description": "The overall height of this Ellipse2D."}], "methods": [{"method_name": "getX", "method_sig": "public double getX()", "description": "Returns the X coordinate of the upper-left corner of\n the framing rectangle in double precision."}, {"method_name": "getY", "method_sig": "public double getY()", "description": "Returns the Y coordinate of the upper-left corner of\n the framing rectangle in double precision."}, {"method_name": "getWidth", "method_sig": "public double getWidth()", "description": "Returns the width of the framing rectangle in\n double precision."}, {"method_name": "getHeight", "method_sig": "public double getHeight()", "description": "Returns the height of the framing rectangle\n in double precision."}, {"method_name": "isEmpty", "method_sig": "public boolean isEmpty()", "description": "Determines whether the RectangularShape is empty.\n When the RectangularShape is empty, it encloses no\n area."}, {"method_name": "setFrame", "method_sig": "public void setFrame (float x,\n                     float y,\n                     float w,\n                     float h)", "description": "Sets the location and size of the framing rectangle of this\n Shape to the specified rectangular values."}, {"method_name": "setFrame", "method_sig": "public void setFrame (double x,\n                     double y,\n                     double w,\n                     double h)", "description": "Sets the location and size of the framing rectangle of this\n Shape to the specified rectangular values."}, {"method_name": "getBounds2D", "method_sig": "public Rectangle2D getBounds2D()", "description": "Returns a high precision and more accurate bounding box of\n the Shape than the getBounds method.\n Note that there is no guarantee that the returned\n Rectangle2D is the smallest bounding box that encloses\n the Shape, only that the Shape lies\n entirely within the indicated Rectangle2D.  The\n bounding box returned by this method is usually tighter than that\n returned by the getBounds method and never fails due\n to overflow problems since the return value can be an instance of\n the Rectangle2D that uses double precision values to\n store the dimensions.\n\n \n Note that the\n \n definition of insideness can lead to situations where points\n on the defining outline of the shape may not be considered\n contained in the returned bounds object, but only in cases\n where those points are also not considered contained in the original\n shape.\n \n\n If a point is inside the shape according to the\n contains(point) method, then it must\n be inside the returned Rectangle2D bounds object according\n to the contains(point) method of the\n bounds. Specifically:\n \n\nshape.contains(p) requires bounds.contains(p)\n\n\n If a point is not inside the shape, then it might\n still be contained in the bounds object:\n \n\nbounds.contains(p) does not imply shape.contains(p)\n"}]}