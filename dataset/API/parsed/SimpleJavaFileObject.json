{"name": "Class SimpleJavaFileObject", "module": "java.compiler", "package": "javax.tools", "text": "Provides simple implementations for most methods in JavaFileObject.\n This class is designed to be subclassed and used as a basis for\n JavaFileObject implementations.  Subclasses can override the\n implementation and specification of any method of this class as\n long as the general contract of JavaFileObject is obeyed.", "codes": ["public class SimpleJavaFileObject\nextends Object\nimplements JavaFileObject"], "fields": [{"field_name": "uri", "field_sig": "protected final\u00a0URI uri", "description": "A URI for this file object."}, {"field_name": "kind", "field_sig": "protected final\u00a0JavaFileObject.Kind kind", "description": "The kind of this file object."}], "methods": [{"method_name": "openInputStream", "method_sig": "public InputStream openInputStream()\n                            throws IOException", "description": "This implementation always throws UnsupportedOperationException.  Subclasses can change this\n behavior as long as the contract of FileObject is\n obeyed."}, {"method_name": "openOutputStream", "method_sig": "public OutputStream openOutputStream()\n                              throws IOException", "description": "This implementation always throws UnsupportedOperationException.  Subclasses can change this\n behavior as long as the contract of FileObject is\n obeyed."}, {"method_name": "openReader", "method_sig": "public Reader openReader (boolean ignoreEncodingErrors)\n                  throws IOException", "description": "Wraps the result of getCharContent(boolean) in a Reader.\n Subclasses can change this behavior as long as the contract of\n FileObject is obeyed."}, {"method_name": "getCharContent", "method_sig": "public CharSequence getCharContent (boolean ignoreEncodingErrors)\n                            throws IOException", "description": "This implementation always throws UnsupportedOperationException.  Subclasses can change this\n behavior as long as the contract of FileObject is\n obeyed."}, {"method_name": "openWriter", "method_sig": "public Writer openWriter()\n                  throws IOException", "description": "Wraps the result of openOutputStream in a Writer.  Subclasses\n can change this behavior as long as the contract of FileObject is obeyed."}, {"method_name": "getLastModified", "method_sig": "public long getLastModified()", "description": "This implementation returns 0L.  Subclasses can change\n this behavior as long as the contract of FileObject is\n obeyed."}, {"method_name": "delete", "method_sig": "public boolean delete()", "description": "This implementation does nothing.  Subclasses can change this\n behavior as long as the contract of FileObject is\n obeyed."}, {"method_name": "getKind", "method_sig": "public JavaFileObject.Kind getKind()", "description": "Description copied from interface:\u00a0JavaFileObject"}, {"method_name": "isNameCompatible", "method_sig": "public boolean isNameCompatible (String simpleName,\n                                JavaFileObject.Kind kind)", "description": "This implementation compares the path of its URI to the given\n simple name.  This method returns true if the given kind is\n equal to the kind of this object, and if the path is equal to\n simpleName + kind.extension or if it ends with \n \"/\" + simpleName + kind.extension.\n\n This method calls getKind() and FileObject.toUri() and\n does not access the fields uri and kind\n directly.\n\n Subclasses can change this behavior as long as the contract\n of JavaFileObject is obeyed."}, {"method_name": "getNestingKind", "method_sig": "public NestingKind getNestingKind()", "description": "This implementation returns null.  Subclasses can\n change this behavior as long as the contract of\n JavaFileObject is obeyed."}, {"method_name": "getAccessLevel", "method_sig": "public Modifier getAccessLevel()", "description": "This implementation returns null.  Subclasses can\n change this behavior as long as the contract of\n JavaFileObject is obeyed."}]}