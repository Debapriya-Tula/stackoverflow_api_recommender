{"name": "Class XMLEventFactory", "module": "java.xml", "package": "javax.xml.stream", "text": "This interface defines a utility class for creating instances of\n XMLEvents", "codes": ["public abstract class XMLEventFactory\nextends Object"], "fields": [], "methods": [{"method_name": "newDefaultFactory", "method_sig": "public static XMLEventFactory newDefaultFactory()", "description": "Creates a new instance of the XMLEventFactory builtin\n system-default implementation."}, {"method_name": "newInstance", "method_sig": "public static XMLEventFactory newInstance()\n                                   throws FactoryConfigurationError", "description": "Creates a new instance of the factory in exactly the same manner as the\n newFactory() method."}, {"method_name": "newFactory", "method_sig": "public static XMLEventFactory newFactory()\n                                  throws FactoryConfigurationError", "description": "Create a new instance of the factory.\n \n This static method creates a new factory instance.\n This method uses the following ordered lookup procedure to determine\n the XMLEventFactory implementation class to load:\n \n\n   Use the javax.xml.stream.XMLEventFactory system property.\n \n\n\n   Use the configuration file \"stax.properties\". The file is in standard\n   Properties format and typically located in the\n   conf directory of the Java installation. It contains the fully qualified\n   name of the implementation class with the key being the system property\n   defined above.\n\n   \n   The stax.properties file is read only once by the implementation\n   and its values are then cached for future use.  If the file does not exist\n   when the first attempt is made to read from it, no further attempts are\n   made to check for its existence.  It is not possible to change the value\n   of any property in stax.properties after it has been read for the first time.\n\n   \n   Use the jaxp configuration file \"jaxp.properties\". The file is in the same\n   format as stax.properties and will only be read if stax.properties does\n   not exist.\n \n\n\n   Use the service-provider loading facility, defined by the\n   ServiceLoader class, to attempt to locate and load an\n   implementation of the service using the default loading mechanism:\n   the service-provider loading facility will use the current thread's context class loader\n   to attempt to load the service. If the context class\n   loader is null, the system class loader will be used.\n \n\n\n   Otherwise, the system-default\n   implementation is returned.\n \n\n\n   Once an application has obtained a reference to a XMLEventFactory it\n   can use the factory to configure and obtain stream instances."}, {"method_name": "newInstance", "method_sig": "@Deprecated(since=\"1.7\")\npublic static XMLEventFactory newInstance (String factoryId,\n                                          ClassLoader classLoader)\n                                   throws FactoryConfigurationError", "description": "Create a new instance of the factory"}, {"method_name": "newFactory", "method_sig": "public static XMLEventFactory newFactory (String factoryId,\n                                         ClassLoader classLoader)\n                                  throws FactoryConfigurationError", "description": "Create a new instance of the factory.\n If the classLoader argument is null, then the ContextClassLoader is used.\n \n This method uses the following ordered lookup procedure to determine\n the XMLEventFactory implementation class to load:\n \n\n   Use the value of the system property identified by factoryId.\n \n\n\n   Use the configuration file \"stax.properties\". The file is in standard\n   Properties format and typically located in the\n   conf directory of the Java installation. It contains the fully qualified\n   name of the implementation class with the key being the system property\n   defined above.\n\n   \n   The stax.properties file is read only once by the implementation\n   and its values are then cached for future use.  If the file does not exist\n   when the first attempt is made to read from it, no further attempts are\n   made to check for its existence.  It is not possible to change the value\n   of any property in stax.properties after it has been read for the first time.\n\n   \n   Use the jaxp configuration file \"jaxp.properties\". The file is in the same\n   format as stax.properties and will only be read if stax.properties does\n   not exist.\n \n\n\n   If factoryId is \"javax.xml.stream.XMLEventFactory\",\n   use the service-provider loading facility, defined by the\n   ServiceLoader class, to attempt to locate and load\n   an implementation of the service using the specified ClassLoader.\n   If classLoader is null, the default loading mechanism will apply:\n   That is, the service-provider loading facility will use the current thread's context class loader\n   to attempt to load the service. If the context class\n   loader is null, the system class loader will be used.\n \n\n\n   Otherwise, throws a FactoryConfigurationError.\n \n\n\n Note that this is a new method that replaces the deprecated\n   newInstance(String factoryId, ClassLoader classLoader) method.\n No changes in behavior are defined by this replacement method relative\n to the deprecated method."}, {"method_name": "setLocation", "method_sig": "public abstract void setLocation (Location location)", "description": "This method allows setting of the Location on each event that\n is created by this factory.  The values are copied by value into\n the events created by this factory.  To reset the location\n information set the location to null."}, {"method_name": "createAttribute", "method_sig": "public abstract Attribute createAttribute (String prefix,\n                                          String namespaceURI,\n                                          String localName,\n                                          String value)", "description": "Create a new Attribute"}, {"method_name": "createAttribute", "method_sig": "public abstract Attribute createAttribute (String localName,\n                                          String value)", "description": "Create a new Attribute"}, {"method_name": "createAttribute", "method_sig": "public abstract Attribute createAttribute (QName name,\n                                          String value)", "description": "Create a new Attribute"}, {"method_name": "createNamespace", "method_sig": "public abstract Namespace createNamespace (String namespaceURI)", "description": "Create a new default Namespace"}, {"method_name": "createNamespace", "method_sig": "public abstract Namespace createNamespace (String prefix,\n                                          String namespaceUri)", "description": "Create a new Namespace"}, {"method_name": "createStartElement", "method_sig": "public abstract StartElement createStartElement (QName name,\n                                                Iterator<? extends Attribute> attributes,\n                                                Iterator<? extends Namespace> namespaces)", "description": "Create a new StartElement.  Namespaces can be added to this StartElement\n by passing in an Iterator that walks over a set of Namespace interfaces.\n Attributes can be added to this StartElement by passing an iterator\n that walks over a set of Attribute interfaces."}, {"method_name": "createStartElement", "method_sig": "public abstract StartElement createStartElement (String prefix,\n                                                String namespaceUri,\n                                                String localName)", "description": "Create a new StartElement.  This defaults the NamespaceContext to\n an empty NamespaceContext.  Querying this event for its namespaces or\n attributes will result in an empty iterator being returned."}, {"method_name": "createStartElement", "method_sig": "public abstract StartElement createStartElement (String prefix,\n                                                String namespaceUri,\n                                                String localName,\n                                                Iterator<? extends Attribute> attributes,\n                                                Iterator<? extends Namespace> namespaces)", "description": "Create a new StartElement.  Namespaces can be added to this StartElement\n by passing in an Iterator that walks over a set of Namespace interfaces.\n Attributes can be added to this StartElement by passing an iterator\n that walks over a set of Attribute interfaces."}, {"method_name": "createStartElement", "method_sig": "public abstract StartElement createStartElement (String prefix,\n                                                String namespaceUri,\n                                                String localName,\n                                                Iterator<? extends Attribute> attributes,\n                                                Iterator<? extends Namespace> namespaces,\n                                                NamespaceContext context)", "description": "Create a new StartElement.  Namespaces can be added to this StartElement\n by passing in an Iterator that walks over a set of Namespace interfaces.\n Attributes can be added to this StartElement by passing an iterator\n that walks over a set of Attribute interfaces."}, {"method_name": "createEndElement", "method_sig": "public abstract EndElement createEndElement (QName name,\n                                            Iterator<? extends Namespace> namespaces)", "description": "Create a new EndElement"}, {"method_name": "createEndElement", "method_sig": "public abstract EndElement createEndElement (String prefix,\n                                            String namespaceUri,\n                                            String localName)", "description": "Create a new EndElement"}, {"method_name": "createEndElement", "method_sig": "public abstract EndElement createEndElement (String prefix,\n                                            String namespaceUri,\n                                            String localName,\n                                            Iterator<? extends Namespace> namespaces)", "description": "Create a new EndElement"}, {"method_name": "createCharacters", "method_sig": "public abstract Characters createCharacters (String content)", "description": "Create a Characters event, this method does not check if the content\n is all whitespace.  To create a space event use #createSpace(String)"}, {"method_name": "createCData", "method_sig": "public abstract Characters createCData (String content)", "description": "Create a Characters event with the CData flag set to true"}, {"method_name": "createSpace", "method_sig": "public abstract Characters createSpace (String content)", "description": "Create a Characters event with the isSpace flag set to true"}, {"method_name": "createIgnorableSpace", "method_sig": "public abstract Characters createIgnorableSpace (String content)", "description": "Create an ignorable space"}, {"method_name": "createStartDocument", "method_sig": "public abstract StartDocument createStartDocument()", "description": "Creates a new instance of a StartDocument event"}, {"method_name": "createStartDocument", "method_sig": "public abstract StartDocument createStartDocument (String encoding,\n                                                  String version,\n                                                  boolean standalone)", "description": "Creates a new instance of a StartDocument event"}, {"method_name": "createStartDocument", "method_sig": "public abstract StartDocument createStartDocument (String encoding,\n                                                  String version)", "description": "Creates a new instance of a StartDocument event"}, {"method_name": "createStartDocument", "method_sig": "public abstract StartDocument createStartDocument (String encoding)", "description": "Creates a new instance of a StartDocument event"}, {"method_name": "createEndDocument", "method_sig": "public abstract EndDocument createEndDocument()", "description": "Creates a new instance of an EndDocument event"}, {"method_name": "createEntityReference", "method_sig": "public abstract EntityReference createEntityReference (String name,\n                                                      EntityDeclaration declaration)", "description": "Creates a new instance of a EntityReference event"}, {"method_name": "createComment", "method_sig": "public abstract Comment createComment (String text)", "description": "Create a comment"}, {"method_name": "createProcessingInstruction", "method_sig": "public abstract ProcessingInstruction createProcessingInstruction (String target,\n                                                                  String data)", "description": "Create a processing instruction"}, {"method_name": "createDTD", "method_sig": "public abstract DTD createDTD (String dtd)", "description": "Create a document type definition event\n This string contains the entire document type declaration that matches\n the doctypedecl in the XML 1.0 specification"}]}