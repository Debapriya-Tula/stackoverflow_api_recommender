{"name": "Interface TreeVisitor<R,\u200bP>", "module": "jdk.scripting.nashorn", "package": "jdk.nashorn.api.tree", "text": "A visitor of trees, in the style of the visitor design pattern.\n Classes implementing this interface are used to operate\n on a tree when the kind of tree is unknown at compile time.\n When a visitor is passed to an tree's accept method, the visitXyz method most applicable\n to that tree is invoked.\n\n  Classes implementing this interface may or may not throw a\n NullPointerException if the additional parameter p\n is null; see documentation of the implementing class for\n details.\n\n  WARNING: It is possible that methods will be added to\n this interface to accommodate new, currently unknown, language\n structures added to future versions of the ECMAScript programming\n language. When new visit methods are added for new Tree subtypes,\n default method bodies will be introduced which will call visitUnknown\n method as a fallback.", "codes": ["@Deprecated(since=\"11\",\n            forRemoval=true)\npublic interface TreeVisitor<R, P>"], "fields": [], "methods": [{"method_name": "visitAssignment", "method_sig": "R visitAssignment (AssignmentTree node,\n                  P p)", "description": "Visit assignment tree."}, {"method_name": "visitCompoundAssignment", "method_sig": "R visitCompoundAssignment (CompoundAssignmentTree node,\n                          P p)", "description": "Visit compound assignment tree."}, {"method_name": "visitBinary", "method_sig": "R visitBinary (BinaryTree node,\n              P p)", "description": "Visit binary expression tree."}, {"method_name": "visitBlock", "method_sig": "R visitBlock (BlockTree node,\n             P p)", "description": "Visit block statement tree."}, {"method_name": "visitBreak", "method_sig": "R visitBreak (BreakTree node,\n             P p)", "description": "Visit break statement tree."}, {"method_name": "visitCase", "method_sig": "R visitCase (CaseTree node,\n            P p)", "description": "Visit case statement tree."}, {"method_name": "visitCatch", "method_sig": "R visitCatch (CatchTree node,\n             P p)", "description": "Visit catch block statement tree."}, {"method_name": "visitClassDeclaration", "method_sig": "R visitClassDeclaration (ClassDeclarationTree node,\n                        P p)", "description": "Visit class statement tree."}, {"method_name": "visitClassExpression", "method_sig": "R visitClassExpression (ClassExpressionTree node,\n                       P p)", "description": "Visit class expression tree."}, {"method_name": "visitConditionalExpression", "method_sig": "R visitConditionalExpression (ConditionalExpressionTree node,\n                             P p)", "description": "Visit conditional expression tree."}, {"method_name": "visitContinue", "method_sig": "R visitContinue (ContinueTree node,\n                P p)", "description": "Visit continue statement tree."}, {"method_name": "visitDebugger", "method_sig": "R visitDebugger (DebuggerTree node,\n                P p)", "description": "Visit debugger statement tree."}, {"method_name": "visitDoWhileLoop", "method_sig": "R visitDoWhileLoop (DoWhileLoopTree node,\n                   P p)", "description": "Visit do-while statement tree."}, {"method_name": "visitErroneous", "method_sig": "R visitErroneous (ErroneousTree node,\n                 P p)", "description": "Visit error expression tree."}, {"method_name": "visitExpressionStatement", "method_sig": "R visitExpressionStatement (ExpressionStatementTree node,\n                           P p)", "description": "Visit expression statement tree."}, {"method_name": "visitForLoop", "method_sig": "R visitForLoop (ForLoopTree node,\n               P p)", "description": "Visit 'for' statement tree."}, {"method_name": "visitForInLoop", "method_sig": "R visitForInLoop (ForInLoopTree node,\n                 P p)", "description": "Visit for..in statement tree."}, {"method_name": "visitForOfLoop", "method_sig": "R visitForOfLoop (ForOfLoopTree node,\n                 P p)", "description": "Visit for..of statement tree."}, {"method_name": "visitFunctionCall", "method_sig": "R visitFunctionCall (FunctionCallTree node,\n                    P p)", "description": "Visit function call expression tree."}, {"method_name": "visitFunctionDeclaration", "method_sig": "R visitFunctionDeclaration (FunctionDeclarationTree node,\n                           P p)", "description": "Visit function declaration tree."}, {"method_name": "visitFunctionExpression", "method_sig": "R visitFunctionExpression (FunctionExpressionTree node,\n                          P p)", "description": "Visit function expression tree."}, {"method_name": "visitIdentifier", "method_sig": "R visitIdentifier (IdentifierTree node,\n                  P p)", "description": "Visit identifier tree."}, {"method_name": "visitIf", "method_sig": "R visitIf (IfTree node,\n          P p)", "description": "Visit 'if' statement tree."}, {"method_name": "visitArrayAccess", "method_sig": "R visitArrayAccess (ArrayAccessTree node,\n                   P p)", "description": "Visit array access expression tree."}, {"method_name": "visitArrayLiteral", "method_sig": "R visitArrayLiteral (ArrayLiteralTree node,\n                    P p)", "description": "Visit array literal expression tree."}, {"method_name": "visitLabeledStatement", "method_sig": "R visitLabeledStatement (LabeledStatementTree node,\n                        P p)", "description": "Visit labeled statement tree."}, {"method_name": "visitLiteral", "method_sig": "R visitLiteral (LiteralTree node,\n               P p)", "description": "Visit literal expression tree."}, {"method_name": "visitParenthesized", "method_sig": "R visitParenthesized (ParenthesizedTree node,\n                     P p)", "description": "Visit parenthesized expression tree."}, {"method_name": "visitReturn", "method_sig": "R visitReturn (ReturnTree node,\n              P p)", "description": "Visit return statement tree."}, {"method_name": "visitMemberSelect", "method_sig": "R visitMemberSelect (MemberSelectTree node,\n                    P p)", "description": "Visit member select expression tree."}, {"method_name": "visitNew", "method_sig": "R visitNew (NewTree node,\n           P p)", "description": "Visit 'new' expression tree."}, {"method_name": "visitObjectLiteral", "method_sig": "R visitObjectLiteral (ObjectLiteralTree node,\n                     P p)", "description": "Visit object literal tree."}, {"method_name": "visitProperty", "method_sig": "R visitProperty (PropertyTree node,\n                P p)", "description": "Visit a property of an object literal expression tree."}, {"method_name": "visitRegExpLiteral", "method_sig": "R visitRegExpLiteral (RegExpLiteralTree node,\n                     P p)", "description": "Visit regular expression literal tree."}, {"method_name": "visitTemplateLiteral", "method_sig": "R visitTemplateLiteral (TemplateLiteralTree node,\n                       P p)", "description": "Visit template literal tree."}, {"method_name": "visitEmptyStatement", "method_sig": "R visitEmptyStatement (EmptyStatementTree node,\n                      P p)", "description": "Visit an empty statement tree."}, {"method_name": "visitSpread", "method_sig": "R visitSpread (SpreadTree node,\n              P p)", "description": "Visit 'spread' expression tree."}, {"method_name": "visitSwitch", "method_sig": "R visitSwitch (SwitchTree node,\n              P p)", "description": "Visit 'switch' statement tree."}, {"method_name": "visitThrow", "method_sig": "R visitThrow (ThrowTree node,\n             P p)", "description": "Visit 'throw' expression tree."}, {"method_name": "visitCompilationUnit", "method_sig": "R visitCompilationUnit (CompilationUnitTree node,\n                       P p)", "description": "Visit compilation unit tree."}, {"method_name": "visitModule", "method_sig": "R visitModule (ModuleTree node,\n              P p)", "description": "Visit Module tree."}, {"method_name": "visitExportEntry", "method_sig": "R visitExportEntry (ExportEntryTree node,\n                   P p)", "description": "Visit Module ExportEntry tree."}, {"method_name": "visitImportEntry", "method_sig": "R visitImportEntry (ImportEntryTree node,\n                   P p)", "description": "Visit Module ImportEntry tree."}, {"method_name": "visitTry", "method_sig": "R visitTry (TryTree node,\n           P p)", "description": "Visit 'try' statement tree."}, {"method_name": "visitInstanceOf", "method_sig": "R visitInstanceOf (InstanceOfTree node,\n                  P p)", "description": "Visit 'instanceof' expression tree."}, {"method_name": "visitUnary", "method_sig": "R visitUnary (UnaryTree node,\n             P p)", "description": "Visit unary expression tree."}, {"method_name": "visitVariable", "method_sig": "R visitVariable (VariableTree node,\n                P p)", "description": "Visit variable declaration tree."}, {"method_name": "visitWhileLoop", "method_sig": "R visitWhileLoop (WhileLoopTree node,\n                 P p)", "description": "Visit 'while' statement tree."}, {"method_name": "visitWith", "method_sig": "R visitWith (WithTree node,\n            P p)", "description": "Visit 'with' statement tree."}, {"method_name": "visitYield", "method_sig": "R visitYield (YieldTree node,\n             P p)", "description": "Visit 'yield' expression tree."}, {"method_name": "visitUnknown", "method_sig": "R visitUnknown (Tree node,\n               P p)", "description": "Visit unknown expression/statement tree. This fallback will be\n called if new Tree subtypes are introduced in future. A specific\n implementation may throw {unknown tree exception\n if the visitor implementation was for an older language version."}]}