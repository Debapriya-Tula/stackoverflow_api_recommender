{"name": "Interface GuardingTypeConverterFactory", "module": "jdk.dynalink", "package": "jdk.dynalink.linker", "text": "Optional interface that can be implemented by GuardingDynamicLinker\n implementations to provide language-specific type conversion capabilities.\n Note that if you implement this interface, you will very likely want to\n implement ConversionComparator interface too, as your additional\n language-specific conversions, in absence of a strategy for prioritizing\n these conversions, will cause more ambiguity for BeansLinker in\n selecting the correct overload when trying to link to an overloaded Java\n method.", "codes": ["public interface GuardingTypeConverterFactory"], "fields": [], "methods": [{"method_name": "convertToType", "method_sig": "GuardedInvocation convertToType (Class<?> sourceType,\n                                Class<?> targetType,\n                                Supplier<MethodHandles.Lookup> lookupSupplier)\n                         throws Exception", "description": "Returns a guarded type conversion that receives a value of the specified\n source type and returns a value converted to the specified target type.\n Value types can be either primitives or reference types, including\n interfaces, so you can even provide converters for converting your\n language's objects to Java interfaces and classes by generating adapters\n for them.\n \n The type of the invocation is (sourceType)\u2192targetType, while the\n type of the guard is (sourceType)\u2192boolean. You are allowed to\n return unconditional invocations (with no guard) if the source type is\n specific to your runtime and your runtime only.\n Note that this method will never be invoked for\n method\n invocation conversions as those can be automatically applied by\n MethodHandle.asType(MethodType).\n An implementation can assume it is never requested to produce a\n converter for those conversions. If a language runtime needs to customize\n method invocation conversions, it should\n set an autoconversion strategy in the dynamic linker factory instead.\n Dynalink is at liberty to either cache some of the returned converters\n or to repeatedly request the converter factory to create the same\n conversion."}]}