{"name": "Class PipedInputStream", "module": "java.base", "package": "java.io", "text": "A piped input stream should be connected\n to a piped output stream; the piped  input\n stream then provides whatever data bytes\n are written to the piped output  stream.\n Typically, data is read from a PipedInputStream\n object by one thread  and data is written\n to the corresponding PipedOutputStream\n by some  other thread. Attempting to use\n both objects from a single thread is not\n recommended, as it may deadlock the thread.\n The piped input stream contains a buffer,\n decoupling read operations from write operations,\n within limits.\n A pipe is said to be  broken  if a\n thread that was providing data bytes to the connected\n piped output stream is no longer alive.", "codes": ["public class PipedInputStream\nextends InputStream"], "fields": [{"field_name": "PIPE_SIZE", "field_sig": "protected static final\u00a0int PIPE_SIZE", "description": "The default size of the pipe's circular input buffer."}, {"field_name": "buffer", "field_sig": "protected\u00a0byte[] buffer", "description": "The circular buffer into which incoming data is placed."}, {"field_name": "in", "field_sig": "protected\u00a0int in", "description": "The index of the position in the circular buffer at which the\n next byte of data will be stored when received from the connected\n piped output stream. in<0 implies the buffer is empty,\n in==out implies the buffer is full"}, {"field_name": "out", "field_sig": "protected\u00a0int out", "description": "The index of the position in the circular buffer at which the next\n byte of data will be read by this piped input stream."}], "methods": [{"method_name": "connect", "method_sig": "public void connect (PipedOutputStream src)\n             throws IOException", "description": "Causes this piped input stream to be connected\n to the piped  output stream src.\n If this object is already connected to some\n other piped output  stream, an IOException\n is thrown.\n \n If src is an\n unconnected piped output stream and snk\n is an unconnected piped input stream, they\n may be connected by either the call:\n\n snk.connect(src) \n\n or the call:\n\n src.connect(snk) \n\n The two calls have the same effect."}, {"method_name": "receive", "method_sig": "protected void receive (int b)\n                throws IOException", "description": "Receives a byte of data.  This method will block if no input is\n available."}, {"method_name": "read", "method_sig": "public int read()\n         throws IOException", "description": "Reads the next byte of data from this piped input stream. The\n value byte is returned as an int in the range\n 0 to 255.\n This method blocks until input data is available, the end of the\n stream is detected, or an exception is thrown."}, {"method_name": "read", "method_sig": "public int read (byte[] b,\n                int off,\n                int len)\n         throws IOException", "description": "Reads up to len bytes of data from this piped input\n stream into an array of bytes. Less than len bytes\n will be read if the end of the data stream is reached or if\n len exceeds the pipe's buffer size.\n If len  is zero, then no bytes are read and 0 is returned;\n otherwise, the method blocks until at least 1 byte of input is\n available, end of the stream has been detected, or an exception is\n thrown."}, {"method_name": "available", "method_sig": "public int available()\n              throws IOException", "description": "Returns the number of bytes that can be read from this input\n stream without blocking."}, {"method_name": "close", "method_sig": "public void close()\n           throws IOException", "description": "Closes this piped input stream and releases any system resources\n associated with the stream."}]}