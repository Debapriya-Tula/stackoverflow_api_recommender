{"name": "Class Trees", "module": "jdk.compiler", "package": "com.sun.source.util", "text": "Bridges JSR 199, JSR 269, and the Tree API.", "codes": ["public abstract class Trees\nextends Object"], "fields": [], "methods": [{"method_name": "instance", "method_sig": "public static Trees instance (JavaCompiler.CompilationTask task)", "description": "Returns a Trees object for a given CompilationTask."}, {"method_name": "instance", "method_sig": "public static Trees instance (ProcessingEnvironment env)", "description": "Returns a Trees object for a given ProcessingEnvironment."}, {"method_name": "getSourcePositions", "method_sig": "public abstract SourcePositions getSourcePositions()", "description": "Returns a utility object for obtaining source positions."}, {"method_name": "getTree", "method_sig": "public abstract Tree getTree (Element element)", "description": "Returns the Tree node for a given Element.\n Returns null if the node can not be found."}, {"method_name": "getTree", "method_sig": "public abstract ClassTree getTree (TypeElement element)", "description": "Returns the ClassTree node for a given TypeElement.\n Returns null if the node can not be found."}, {"method_name": "getTree", "method_sig": "public abstract MethodTree getTree (ExecutableElement method)", "description": "Returns the MethodTree node for a given ExecutableElement.\n Returns null if the node can not be found."}, {"method_name": "getTree", "method_sig": "public abstract Tree getTree (Element e,\n                             AnnotationMirror a)", "description": "Returns the Tree node for an AnnotationMirror on a given Element.\n Returns null if the node can not be found."}, {"method_name": "getTree", "method_sig": "public abstract Tree getTree (Element e,\n                             AnnotationMirror a,\n                             AnnotationValue v)", "description": "Returns the Tree node for an AnnotationValue for an AnnotationMirror on a given Element.\n Returns null if the node can not be found."}, {"method_name": "getPath", "method_sig": "public abstract TreePath getPath (CompilationUnitTree unit,\n                                 Tree node)", "description": "Returns the path to tree node within the specified compilation unit."}, {"method_name": "getPath", "method_sig": "public abstract TreePath getPath (Element e)", "description": "Returns the TreePath node for a given Element.\n Returns null if the node can not be found."}, {"method_name": "getPath", "method_sig": "public abstract TreePath getPath (Element e,\n                                 AnnotationMirror a)", "description": "Returns the TreePath node for an AnnotationMirror on a given Element.\n Returns null if the node can not be found."}, {"method_name": "getPath", "method_sig": "public abstract TreePath getPath (Element e,\n                                 AnnotationMirror a,\n                                 AnnotationValue v)", "description": "Returns the TreePath node for an AnnotationValue for an AnnotationMirror on a given Element.\n Returns null if the node can not be found."}, {"method_name": "getElement", "method_sig": "public abstract Element getElement (TreePath path)", "description": "Returns the Element for the Tree node identified by a given TreePath.\n Returns null if the element is not available."}, {"method_name": "getTypeMirror", "method_sig": "public abstract TypeMirror getTypeMirror (TreePath path)", "description": "Returns the TypeMirror for the Tree node identified by a given TreePath.\n Returns null if the TypeMirror is not available."}, {"method_name": "getScope", "method_sig": "public abstract Scope getScope (TreePath path)", "description": "Returns the Scope for the Tree node identified by a given TreePath.\n Returns null if the Scope is not available."}, {"method_name": "getDocComment", "method_sig": "public abstract String getDocComment (TreePath path)", "description": "Returns the doc comment, if any, for the Tree node identified by a given TreePath.\n Returns null if no doc comment was found."}, {"method_name": "isAccessible", "method_sig": "public abstract boolean isAccessible (Scope scope,\n                                     TypeElement type)", "description": "Checks whether a given type is accessible in a given scope."}, {"method_name": "isAccessible", "method_sig": "public abstract boolean isAccessible (Scope scope,\n                                     Element member,\n                                     DeclaredType type)", "description": "Checks whether the given element is accessible as a member of the given\n type in a given scope."}, {"method_name": "getOriginalType", "method_sig": "public abstract TypeMirror getOriginalType (ErrorType errorType)", "description": "Returns the original type from the ErrorType object."}, {"method_name": "printMessage", "method_sig": "public abstract void printMessage (Diagnostic.Kind kind,\n                                  CharSequence msg,\n                                  Tree t,\n                                  CompilationUnitTree root)", "description": "Prints a message of the specified kind at the location of the\n tree within the provided compilation unit"}, {"method_name": "getLub", "method_sig": "public abstract TypeMirror getLub (CatchTree tree)", "description": "Returns the lub of an exception parameter declared in a catch clause."}]}