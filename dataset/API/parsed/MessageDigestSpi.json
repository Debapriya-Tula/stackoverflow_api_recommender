{"name": "Class MessageDigestSpi", "module": "java.base", "package": "java.security", "text": "This class defines the Service Provider Interface (SPI)\n for the MessageDigest class, which provides the functionality\n of a message digest algorithm, such as MD5 or SHA. Message digests are\n secure one-way hash functions that take arbitrary-sized data and output a\n fixed-length hash value.\n\n  All the abstract methods in this class must be implemented by a\n cryptographic service provider who wishes to supply the implementation\n of a particular message digest algorithm.\n\n  Implementations are free to implement the Cloneable interface.", "codes": ["public abstract class MessageDigestSpi\nextends Object"], "fields": [], "methods": [{"method_name": "engineGetDigestLength", "method_sig": "protected int engineGetDigestLength()", "description": "Returns the digest length in bytes.\n\n This concrete method has been added to this previously-defined\n abstract class. (For backwards compatibility, it cannot be abstract.)\n\n The default behavior is to return 0.\n\n This method may be overridden by a provider to return the digest\n length."}, {"method_name": "engineUpdate", "method_sig": "protected abstract void engineUpdate (byte input)", "description": "Updates the digest using the specified byte."}, {"method_name": "engineUpdate", "method_sig": "protected abstract void engineUpdate (byte[] input,\n                                     int offset,\n                                     int len)", "description": "Updates the digest using the specified array of bytes,\n starting at the specified offset."}, {"method_name": "engineUpdate", "method_sig": "protected void engineUpdate (ByteBuffer input)", "description": "Update the digest using the specified ByteBuffer. The digest is\n updated using the input.remaining() bytes starting\n at input.position().\n Upon return, the buffer's position will be equal to its limit;\n its limit will not have changed."}, {"method_name": "engineDigest", "method_sig": "protected abstract byte[] engineDigest()", "description": "Completes the hash computation by performing final\n operations such as padding. Once engineDigest has\n been called, the engine should be reset (see\n engineReset).\n Resetting is the responsibility of the\n engine implementor."}, {"method_name": "engineDigest", "method_sig": "protected int engineDigest (byte[] buf,\n                           int offset,\n                           int len)\n                    throws DigestException", "description": "Completes the hash computation by performing final\n operations such as padding. Once engineDigest has\n been called, the engine should be reset (see\n engineReset).\n Resetting is the responsibility of the\n engine implementor.\n\n This method should be abstract, but we leave it concrete for\n binary compatibility.  Knowledgeable providers should override this\n method."}, {"method_name": "engineReset", "method_sig": "protected abstract void engineReset()", "description": "Resets the digest for further use."}, {"method_name": "clone", "method_sig": "public Object clone()\n             throws CloneNotSupportedException", "description": "Returns a clone if the implementation is cloneable."}]}