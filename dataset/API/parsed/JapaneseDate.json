{"name": "Class JapaneseDate", "module": "java.base", "package": "java.time.chrono", "text": "A date in the Japanese Imperial calendar system.\n \n This date operates using the Japanese Imperial calendar.\n This calendar system is primarily used in Japan.\n \n The Japanese Imperial calendar system is the same as the ISO calendar system\n apart from the era-based year numbering. The proleptic-year is defined to be\n equal to the ISO proleptic-year.\n \n Japan introduced the Gregorian calendar starting with Meiji 6.\n Only Meiji and later eras are supported;\n dates before Meiji 6, January 1 are not supported.\n \n For example, the Japanese year \"Heisei 24\" corresponds to ISO year \"2012\".\n Calling japaneseDate.get(YEAR_OF_ERA) will return 24.\n Calling japaneseDate.get(YEAR) will return 2012.\n Calling japaneseDate.get(ERA) will return 2, corresponding to\n JapaneseChronology.ERA_HEISEI.\n\n This is a value-based\n class; use of identity-sensitive operations (including reference equality\n (==), identity hash code, or synchronization) on instances of\n JapaneseDate may have unpredictable results and should be avoided.\n The equals method should be used for comparisons.", "codes": ["public final class JapaneseDate\nextends Object\nimplements ChronoLocalDate, Serializable"], "fields": [], "methods": [{"method_name": "now", "method_sig": "public static JapaneseDate now()", "description": "Obtains the current JapaneseDate from the system clock in the default time-zone.\n \n This will query the system clock in the default\n time-zone to obtain the current date.\n \n Using this method will prevent the ability to use an alternate clock for testing\n because the clock is hard-coded."}, {"method_name": "now", "method_sig": "public static JapaneseDate now (ZoneId zone)", "description": "Obtains the current JapaneseDate from the system clock in the specified time-zone.\n \n This will query the system clock to obtain the current date.\n Specifying the time-zone avoids dependence on the default time-zone.\n \n Using this method will prevent the ability to use an alternate clock for testing\n because the clock is hard-coded."}, {"method_name": "now", "method_sig": "public static JapaneseDate now (Clock clock)", "description": "Obtains the current JapaneseDate from the specified clock.\n \n This will query the specified clock to obtain the current date - today.\n Using this method allows the use of an alternate clock for testing.\n The alternate clock may be introduced using dependency injection."}, {"method_name": "of", "method_sig": "public static JapaneseDate of (JapaneseEra era,\n                              int yearOfEra,\n                              int month,\n                              int dayOfMonth)", "description": "Obtains a JapaneseDate representing a date in the Japanese calendar\n system from the era, year-of-era, month-of-year and day-of-month fields.\n \n This returns a JapaneseDate with the specified fields.\n The day must be valid for the year and month, otherwise an exception will be thrown.\n \n The Japanese month and day-of-month are the same as those in the\n ISO calendar system. They are not reset when the era changes.\n For example:\n \n  6th Jan Showa 64 = ISO 1989-01-06\n  7th Jan Showa 64 = ISO 1989-01-07\n  8th Jan Heisei 1 = ISO 1989-01-08\n  9th Jan Heisei 1 = ISO 1989-01-09\n "}, {"method_name": "of", "method_sig": "public static JapaneseDate of (int prolepticYear,\n                              int month,\n                              int dayOfMonth)", "description": "Obtains a JapaneseDate representing a date in the Japanese calendar\n system from the proleptic-year, month-of-year and day-of-month fields.\n \n This returns a JapaneseDate with the specified fields.\n The day must be valid for the year and month, otherwise an exception will be thrown.\n \n The Japanese proleptic year, month and day-of-month are the same as those\n in the ISO calendar system. They are not reset when the era changes."}, {"method_name": "from", "method_sig": "public static JapaneseDate from (TemporalAccessor temporal)", "description": "Obtains a JapaneseDate from a temporal object.\n \n This obtains a date in the Japanese calendar system based on the specified temporal.\n A TemporalAccessor represents an arbitrary set of date and time information,\n which this factory converts to an instance of JapaneseDate.\n \n The conversion typically uses the EPOCH_DAY\n field, which is standardized across calendar systems.\n \n This method matches the signature of the functional interface TemporalQuery\n allowing it to be used as a query via method reference, JapaneseDate::from."}, {"method_name": "getChronology", "method_sig": "public JapaneseChronology getChronology()", "description": "Gets the chronology of this date, which is the Japanese calendar system.\n \n The Chronology represents the calendar system in use.\n The era and other fields in ChronoField are defined by the chronology."}, {"method_name": "getEra", "method_sig": "public JapaneseEra getEra()", "description": "Gets the era applicable at this date.\n \n The Japanese calendar system has multiple eras defined by JapaneseEra."}, {"method_name": "lengthOfMonth", "method_sig": "public int lengthOfMonth()", "description": "Returns the length of the month represented by this date.\n \n This returns the length of the month in days.\n Month lengths match those of the ISO calendar system."}, {"method_name": "isSupported", "method_sig": "public boolean isSupported (TemporalField field)", "description": "Checks if the specified field is supported.\n \n This checks if this date can be queried for the specified field.\n If false, then calling the range and\n get methods will throw an exception.\n \n If the field is a ChronoField then the query is implemented here.\n The supported fields are:\n \nDAY_OF_WEEK\nDAY_OF_MONTH\nDAY_OF_YEAR\nEPOCH_DAY\nMONTH_OF_YEAR\nPROLEPTIC_MONTH\nYEAR_OF_ERA\nYEAR\nERA\n\n All other ChronoField instances will return false.\n \n If the field is not a ChronoField, then the result of this method\n is obtained by invoking TemporalField.isSupportedBy(TemporalAccessor)\n passing this as the argument.\n Whether the field is supported is determined by the field."}, {"method_name": "with", "method_sig": "public JapaneseDate with (TemporalAdjuster adjuster)", "description": "Returns an adjusted object of the same type as this object with the adjustment made.\n \n This adjusts this date-time according to the rules of the specified adjuster.\n A simple adjuster might simply set the one of the fields, such as the year field.\n A more complex adjuster might set the date to the last day of the month.\n A selection of common adjustments is provided in\n TemporalAdjusters.\n These include finding the \"last day of the month\" and \"next Wednesday\".\n The adjuster is responsible for handling special cases, such as the varying\n lengths of month and leap years.\n \n Some example code indicating how and why this method is used:\n \n  date = date.with(Month.JULY);        // most key classes implement TemporalAdjuster\n  date = date.with(lastDayOfMonth());  // static import from Adjusters\n  date = date.with(next(WEDNESDAY));   // static import from Adjusters and DayOfWeek\n "}, {"method_name": "plus", "method_sig": "public JapaneseDate plus (TemporalAmount amount)", "description": "Returns an object of the same type as this object with an amount added.\n \n This adjusts this temporal, adding according to the rules of the specified amount.\n The amount is typically a Period but may be any other type implementing\n the TemporalAmount interface, such as Duration.\n \n Some example code indicating how and why this method is used:\n \n  date = date.plus(period);                // add a Period instance\n  date = date.plus(duration);              // add a Duration instance\n  date = date.plus(workingDays(6));        // example user-written workingDays method\n \n\n Note that calling plus followed by minus is not guaranteed to\n return the same date-time."}, {"method_name": "minus", "method_sig": "public JapaneseDate minus (TemporalAmount amount)", "description": "Returns an object of the same type as this object with an amount subtracted.\n \n This adjusts this temporal, subtracting according to the rules of the specified amount.\n The amount is typically a Period but may be any other type implementing\n the TemporalAmount interface, such as Duration.\n \n Some example code indicating how and why this method is used:\n \n  date = date.minus(period);               // subtract a Period instance\n  date = date.minus(duration);             // subtract a Duration instance\n  date = date.minus(workingDays(6));       // example user-written workingDays method\n \n\n Note that calling plus followed by minus is not guaranteed to\n return the same date-time."}, {"method_name": "equals", "method_sig": "public boolean equals (Object obj)", "description": "Compares this date to another date, including the chronology.\n \n Compares this JapaneseDate with another ensuring that the date is the same.\n \n Only objects of type JapaneseDate are compared, other types return false.\n To compare the dates of two TemporalAccessor instances, including dates\n in two different chronologies, use ChronoField.EPOCH_DAY as a comparator."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "A hash code for this date."}, {"method_name": "until", "method_sig": "public long until (Temporal endExclusive,\n                  TemporalUnit unit)", "description": "Description copied from interface:\u00a0ChronoLocalDate"}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Description copied from class:\u00a0Object"}]}