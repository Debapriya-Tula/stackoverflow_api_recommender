{"name": "Interface LSParserFilter", "module": "java.xml", "package": "org.w3c.dom.ls", "text": "LSParserFilters provide applications the ability to examine\n nodes as they are being constructed while parsing. As each node is\n examined, it may be modified or removed, or the entire parse may be\n terminated early.\n  At the time any of the filter methods are called by the parser, the\n owner Document and DOMImplementation objects exist and are accessible.\n The document element is never passed to the LSParserFilter\n methods, i.e. it is not possible to filter out the document element.\n Document, DocumentType, Notation,\n Entity, and Attr nodes are never passed to the\n acceptNode method on the filter. The child nodes of an\n EntityReference node are passed to the filter if the parameter\n \"entities\"\n is set to false. Note that, as described by the parameter\n \"entities\",\n unexpanded entity reference nodes are never discarded and are always\n passed to the filter.\n  All validity checking while parsing a document occurs on the source\n document as it appears on the input stream, not on the DOM document as it\n is built in memory. With filters, the document in memory may be a subset\n of the document on the stream, and its validity may have been affected by\n the filtering.\n  All default attributes must be present on elements when the elements\n are passed to the filter methods. All other default content must be\n passed to the filter methods.\n  DOM applications must not raise exceptions in a filter. The effect of\n throwing exceptions from a filter is DOM implementation dependent.\n See also the \nDocument Object Model (DOM) Level 3 Load and Save Specification.", "codes": ["public interface LSParserFilter"], "fields": [{"field_name": "FILTER_ACCEPT", "field_sig": "static final\u00a0short FILTER_ACCEPT", "description": "Accept the node."}, {"field_name": "FILTER_REJECT", "field_sig": "static final\u00a0short FILTER_REJECT", "description": "Reject the node and its children."}, {"field_name": "FILTER_SKIP", "field_sig": "static final\u00a0short FILTER_SKIP", "description": "Skip this single node. The children of this node will still be\n considered."}, {"field_name": "FILTER_INTERRUPT", "field_sig": "static final\u00a0short FILTER_INTERRUPT", "description": "Interrupt the normal processing of the document."}], "methods": [{"method_name": "startElement", "method_sig": "short startElement (Element elementArg)", "description": "The parser will call this method after each Element start\n tag has been scanned, but before the remainder of the\n Element is processed. The intent is to allow the\n element, including any children, to be efficiently skipped. Note that\n only element nodes are passed to the startElement\n function.\n The element node passed to startElement for filtering\n will include all of the Element's attributes, but none of the\n children nodes. The Element may not yet be in place in the document\n being constructed (it may not have a parent node.)\n A startElement filter function may access or change\n the attributes for the Element. Changing Namespace declarations will\n have no effect on namespace resolution by the parser.\n For efficiency, the Element node passed to the filter may not be\n the same one as is actually placed in the tree if the node is\n accepted. And the actual node (node object identity) may be reused\n during the process of reading in and filtering a document."}, {"method_name": "acceptNode", "method_sig": "short acceptNode (Node nodeArg)", "description": "This method will be called by the parser at the completion of the\n parsing of each node. The node and all of its descendants will exist\n and be complete. The parent node will also exist, although it may be\n incomplete, i.e. it may have additional children that have not yet\n been parsed. Attribute nodes are never passed to this function.\n From within this method, the new node may be freely modified -\n children may be added or removed, text nodes modified, etc. The state\n of the rest of the document outside this node is not defined, and the\n affect of any attempt to navigate to, or to modify any other part of\n the document is undefined.\n For validating parsers, the checks are made on the original\n document, before any modification by the filter. No validity checks\n are made on any document modifications made by the filter.\n If this new node is rejected, the parser might reuse the new node\n and any of its descendants."}, {"method_name": "getWhatToShow", "method_sig": "int getWhatToShow()", "description": "Tells the LSParser what types of nodes to show to the\n method LSParserFilter.acceptNode. If a node is not shown\n to the filter using this attribute, it is automatically included in\n the DOM document being built. See NodeFilter for\n definition of the constants. The constants SHOW_ATTRIBUTE\n , SHOW_DOCUMENT, SHOW_DOCUMENT_TYPE,\n SHOW_NOTATION, SHOW_ENTITY, and\n SHOW_DOCUMENT_FRAGMENT are meaningless here. Those nodes\n will never be passed to LSParserFilter.acceptNode.\n  The constants used here are defined in\n [DOM Level 2 Traversal and Range]."}]}