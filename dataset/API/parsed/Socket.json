{"name": "Class Socket", "module": "java.base", "package": "java.net", "text": "This class implements client sockets (also called just\n \"sockets\"). A socket is an endpoint for communication\n between two machines.\n \n The actual work of the socket is performed by an instance of the\n SocketImpl class. An application, by changing\n the socket factory that creates the socket implementation,\n can configure itself to create sockets appropriate to the local\n firewall.", "codes": ["public class Socket\nextends Object\nimplements Closeable"], "fields": [], "methods": [{"method_name": "connect", "method_sig": "public void connect (SocketAddress endpoint)\n             throws IOException", "description": "Connects this socket to the server."}, {"method_name": "connect", "method_sig": "public void connect (SocketAddress endpoint,\n                    int timeout)\n             throws IOException", "description": "Connects this socket to the server with a specified timeout value.\n A timeout of zero is interpreted as an infinite timeout. The connection\n will then block until established or an error occurs."}, {"method_name": "bind", "method_sig": "public void bind (SocketAddress bindpoint)\n          throws IOException", "description": "Binds the socket to a local address.\n \n If the address is null, then the system will pick up\n an ephemeral port and a valid local address to bind the socket."}, {"method_name": "getInetAddress", "method_sig": "public InetAddress getInetAddress()", "description": "Returns the address to which the socket is connected.\n \n If the socket was connected prior to being closed,\n then this method will continue to return the connected address\n after the socket is closed."}, {"method_name": "getLocalAddress", "method_sig": "public InetAddress getLocalAddress()", "description": "Gets the local address to which the socket is bound.\n \n If there is a security manager set, its checkConnect method is\n called with the local address and -1 as its arguments to see\n if the operation is allowed. If the operation is not allowed,\n the loopback address is returned."}, {"method_name": "getPort", "method_sig": "public int getPort()", "description": "Returns the remote port number to which this socket is connected.\n \n If the socket was connected prior to being closed,\n then this method will continue to return the connected port number\n after the socket is closed."}, {"method_name": "getLocalPort", "method_sig": "public int getLocalPort()", "description": "Returns the local port number to which this socket is bound.\n \n If the socket was bound prior to being closed,\n then this method will continue to return the local port number\n after the socket is closed."}, {"method_name": "getRemoteSocketAddress", "method_sig": "public SocketAddress getRemoteSocketAddress()", "description": "Returns the address of the endpoint this socket is connected to, or\n null if it is unconnected.\n \n If the socket was connected prior to being closed,\n then this method will continue to return the connected address\n after the socket is closed."}, {"method_name": "getLocalSocketAddress", "method_sig": "public SocketAddress getLocalSocketAddress()", "description": "Returns the address of the endpoint this socket is bound to.\n \n If a socket bound to an endpoint represented by an\n InetSocketAddress  is closed,\n then this method will continue to return an InetSocketAddress\n after the socket is closed. In that case the returned\n InetSocketAddress's address is the\n wildcard address\n and its port is the local port that it was bound to.\n \n If there is a security manager set, its checkConnect method is\n called with the local address and -1 as its arguments to see\n if the operation is allowed. If the operation is not allowed,\n a SocketAddress representing the\n loopback address and the local\n port to which this socket is bound is returned."}, {"method_name": "getChannel", "method_sig": "public SocketChannel getChannel()", "description": "Returns the unique SocketChannel\n object associated with this socket, if any.\n\n  A socket will have a channel if, and only if, the channel itself was\n created via the SocketChannel.open or ServerSocketChannel.accept\n methods."}, {"method_name": "getInputStream", "method_sig": "public InputStream getInputStream()\n                           throws IOException", "description": "Returns an input stream for this socket.\n\n  If this socket has an associated channel then the resulting input\n stream delegates all of its operations to the channel.  If the channel\n is in non-blocking mode then the input stream's read operations\n will throw an IllegalBlockingModeException.\n\n Under abnormal conditions the underlying connection may be\n broken by the remote host or the network software (for example\n a connection reset in the case of TCP connections). When a\n broken connection is detected by the network software the\n following applies to the returned input stream :-\n\n \nThe network software may discard bytes that are buffered\n   by the socket. Bytes that aren't discarded by the network\n   software can be read using read.\n\n   If there are no bytes buffered on the socket, or all\n   buffered bytes have been consumed by\n   read, then all subsequent\n   calls to read will throw an\n   IOException.\n\n   If there are no bytes buffered on the socket, and the\n   socket has not been closed using close, then\n   available will\n   return 0.\n\n \n Closing the returned InputStream\n will close the associated socket."}, {"method_name": "getOutputStream", "method_sig": "public OutputStream getOutputStream()\n                             throws IOException", "description": "Returns an output stream for this socket.\n\n  If this socket has an associated channel then the resulting output\n stream delegates all of its operations to the channel.  If the channel\n is in non-blocking mode then the output stream's write\n operations will throw an IllegalBlockingModeException.\n\n  Closing the returned OutputStream\n will close the associated socket."}, {"method_name": "setTcpNoDelay", "method_sig": "public void setTcpNoDelay (boolean on)\n                   throws SocketException", "description": "Enable/disable TCP_NODELAY\n (disable/enable Nagle's algorithm)."}, {"method_name": "getTcpNoDelay", "method_sig": "public boolean getTcpNoDelay()\n                      throws SocketException", "description": "Tests if TCP_NODELAY is enabled."}, {"method_name": "setSoLinger", "method_sig": "public void setSoLinger (boolean on,\n                        int linger)\n                 throws SocketException", "description": "Enable/disable SO_LINGER with the\n specified linger time in seconds. The maximum timeout value is platform\n specific.\n\n The setting only affects socket close."}, {"method_name": "getSoLinger", "method_sig": "public int getSoLinger()\n                throws SocketException", "description": "Returns setting for SO_LINGER.\n -1 returns implies that the\n option is disabled.\n\n The setting only affects socket close."}, {"method_name": "sendUrgentData", "method_sig": "public void sendUrgentData (int data)\n                    throws IOException", "description": "Send one byte of urgent data on the socket. The byte to be sent is the lowest eight\n bits of the data parameter. The urgent byte is\n sent after any preceding writes to the socket OutputStream\n and before any future writes to the OutputStream."}, {"method_name": "setOOBInline", "method_sig": "public void setOOBInline (boolean on)\n                  throws SocketException", "description": "Enable/disable SO_OOBINLINE\n (receipt of TCP urgent data)\n\n By default, this option is disabled and TCP urgent data received on a\n socket is silently discarded. If the user wishes to receive urgent data, then\n this option must be enabled. When enabled, urgent data is received\n inline with normal data.\n \n Note, only limited support is provided for handling incoming urgent\n data. In particular, no notification of incoming urgent data is provided\n and there is no capability to distinguish between normal data and urgent\n data unless provided by a higher level protocol."}, {"method_name": "getOOBInline", "method_sig": "public boolean getOOBInline()\n                     throws SocketException", "description": "Tests if SO_OOBINLINE is enabled."}, {"method_name": "setSoTimeout", "method_sig": "public void setSoTimeout (int timeout)\n                  throws SocketException", "description": "Enable/disable SO_TIMEOUT\n  with the specified timeout, in milliseconds. With this option set\n  to a non-zero timeout, a read() call on the InputStream associated with\n  this Socket will block for only this amount of time.  If the timeout\n  expires, a java.net.SocketTimeoutException is raised, though the\n  Socket is still valid. The option must be enabled\n  prior to entering the blocking operation to have effect. The\n  timeout must be > 0.\n  A timeout of zero is interpreted as an infinite timeout."}, {"method_name": "getSoTimeout", "method_sig": "public int getSoTimeout()\n                 throws SocketException", "description": "Returns setting for SO_TIMEOUT.\n 0 returns implies that the option is disabled (i.e., timeout of infinity)."}, {"method_name": "setSendBufferSize", "method_sig": "public void setSendBufferSize (int size)\n                       throws SocketException", "description": "Sets the SO_SNDBUF option to the\n specified value for this Socket.\n The SO_SNDBUF option is used by the\n platform's networking code as a hint for the size to set the underlying\n network I/O buffers.\n\n Because SO_SNDBUF is a hint,\n applications that want to verify what size the buffers were set to\n should call getSendBufferSize()."}, {"method_name": "getSendBufferSize", "method_sig": "public int getSendBufferSize()\n                      throws SocketException", "description": "Get value of the SO_SNDBUF option\n for this Socket, that is the buffer size used by the platform\n for output on this Socket."}, {"method_name": "setReceiveBufferSize", "method_sig": "public void setReceiveBufferSize (int size)\n                          throws SocketException", "description": "Sets the SO_RCVBUF option to the\n specified value for this Socket. The\n SO_RCVBUF option is\n used by the platform's networking code as a hint for the size to set\n the underlying network I/O buffers.\n\n Increasing the receive buffer size can increase the performance of\n network I/O for high-volume connection, while decreasing it can\n help reduce the backlog of incoming data.\n\n Because SO_RCVBUF is a hint,\n applications that want to verify what size the buffers were set to\n should call getReceiveBufferSize().\n\n The value of SO_RCVBUF is also used\n to set the TCP receive window that is advertized to the remote peer.\n Generally, the window size can be modified at any time when a socket is\n connected. However, if a receive window larger than 64K is required then\n this must be requested before the socket is connected to the\n remote peer. There are two cases to be aware of:\n \nFor sockets accepted from a ServerSocket, this must be done by calling\n ServerSocket.setReceiveBufferSize(int) before the ServerSocket\n is bound to a local address.\nFor client sockets, setReceiveBufferSize() must be called before\n connecting the socket to its remote peer."}, {"method_name": "getReceiveBufferSize", "method_sig": "public int getReceiveBufferSize()\n                         throws SocketException", "description": "Gets the value of the SO_RCVBUF option\n for this Socket, that is the buffer size used by the platform\n for input on this Socket."}, {"method_name": "setKeepAlive", "method_sig": "public void setKeepAlive (boolean on)\n                  throws SocketException", "description": "Enable/disable SO_KEEPALIVE."}, {"method_name": "getKeepAlive", "method_sig": "public boolean getKeepAlive()\n                     throws SocketException", "description": "Tests if SO_KEEPALIVE is enabled."}, {"method_name": "setTrafficClass", "method_sig": "public void setTrafficClass (int tc)\n                     throws SocketException", "description": "Sets traffic class or type-of-service octet in the IP\n header for packets sent from this Socket.\n As the underlying network implementation may ignore this\n value applications should consider it a hint.\n\n  The tc must be in the range 0 <= tc <=\n 255 or an IllegalArgumentException will be thrown.\n Notes:\n For Internet Protocol v4 the value consists of an\n integer, the least significant 8 bits of which\n represent the value of the TOS octet in IP packets sent by\n the socket.\n RFC 1349 defines the TOS values as follows:\n\n \nIPTOS_LOWCOST (0x02)\nIPTOS_RELIABILITY (0x04)\nIPTOS_THROUGHPUT (0x08)\nIPTOS_LOWDELAY (0x10)\n\n The last low order bit is always ignored as this\n corresponds to the MBZ (must be zero) bit.\n \n Setting bits in the precedence field may result in a\n SocketException indicating that the operation is not\n permitted.\n \n As RFC 1122 section 4.2.4.2 indicates, a compliant TCP\n implementation should, but is not required to, let application\n change the TOS field during the lifetime of a connection.\n So whether the type-of-service field can be changed after the\n TCP connection has been established depends on the implementation\n in the underlying platform. Applications should not assume that\n they can change the TOS field after the connection.\n \n For Internet Protocol v6 tc is the value that\n would be placed into the sin6_flowinfo field of the IP header."}, {"method_name": "getTrafficClass", "method_sig": "public int getTrafficClass()\n                    throws SocketException", "description": "Gets traffic class or type-of-service in the IP header\n for packets sent from this Socket\n \n As the underlying network implementation may ignore the\n traffic class or type-of-service set using setTrafficClass(int)\n this method may return a different value than was previously\n set using the setTrafficClass(int) method on this Socket."}, {"method_name": "setReuseAddress", "method_sig": "public void setReuseAddress (boolean on)\n                     throws SocketException", "description": "Enable/disable the SO_REUSEADDR\n socket option.\n \n When a TCP connection is closed the connection may remain\n in a timeout state for a period of time after the connection\n is closed (typically known as the TIME_WAIT state\n or 2MSL wait state).\n For applications using a well known socket address or port\n it may not be possible to bind a socket to the required\n SocketAddress if there is a connection in the\n timeout state involving the socket address or port.\n \n Enabling SO_REUSEADDR\n prior to binding the socket using bind(SocketAddress) allows\n the socket to be bound even though a previous connection is in a timeout\n state.\n \n When a Socket is created the initial setting\n of SO_REUSEADDR is disabled.\n \n The behaviour when SO_REUSEADDR is\n enabled or disabled after a socket is bound (See isBound())\n is not defined."}, {"method_name": "getReuseAddress", "method_sig": "public boolean getReuseAddress()\n                        throws SocketException", "description": "Tests if SO_REUSEADDR is enabled."}, {"method_name": "close", "method_sig": "public void close()\n           throws IOException", "description": "Closes this socket.\n \n Any thread currently blocked in an I/O operation upon this socket\n will throw a SocketException.\n \n Once a socket has been closed, it is not available for further networking\n use (i.e. can't be reconnected or rebound). A new socket needs to be\n created.\n\n  Closing this socket will also close the socket's\n InputStream and\n OutputStream.\n\n  If this socket has an associated channel then the channel is closed\n as well."}, {"method_name": "shutdownInput", "method_sig": "public void shutdownInput()\n                   throws IOException", "description": "Places the input stream for this socket at \"end of stream\".\n Any data sent to the input stream side of the socket is acknowledged\n and then silently discarded.\n \n If you read from a socket input stream after invoking this method on the\n socket, the stream's available method will return 0, and its\n read methods will return -1 (end of stream)."}, {"method_name": "shutdownOutput", "method_sig": "public void shutdownOutput()\n                    throws IOException", "description": "Disables the output stream for this socket.\n For a TCP socket, any previously written data will be sent\n followed by TCP's normal connection termination sequence.\n\n If you write to a socket output stream after invoking\n shutdownOutput() on the socket, the stream will throw\n an IOException."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Converts this socket to a String."}, {"method_name": "isConnected", "method_sig": "public boolean isConnected()", "description": "Returns the connection state of the socket.\n \n Note: Closing a socket doesn't clear its connection state, which means\n this method will return true for a closed socket\n (see isClosed()) if it was successfuly connected prior\n to being closed."}, {"method_name": "isBound", "method_sig": "public boolean isBound()", "description": "Returns the binding state of the socket.\n \n Note: Closing a socket doesn't clear its binding state, which means\n this method will return true for a closed socket\n (see isClosed()) if it was successfuly bound prior\n to being closed."}, {"method_name": "isClosed", "method_sig": "public boolean isClosed()", "description": "Returns the closed state of the socket."}, {"method_name": "isInputShutdown", "method_sig": "public boolean isInputShutdown()", "description": "Returns whether the read-half of the socket connection is closed."}, {"method_name": "isOutputShutdown", "method_sig": "public boolean isOutputShutdown()", "description": "Returns whether the write-half of the socket connection is closed."}, {"method_name": "setSocketImplFactory", "method_sig": "public static void setSocketImplFactory (SocketImplFactory fac)\n                                 throws IOException", "description": "Sets the client socket implementation factory for the\n application. The factory can be specified only once.\n \n When an application creates a new client socket, the socket\n implementation factory's createSocketImpl method is\n called to create the actual socket implementation.\n \n Passing null to the method is a no-op unless the factory\n was already set.\n If there is a security manager, this method first calls\n the security manager's checkSetFactory method\n to ensure the operation is allowed.\n This could result in a SecurityException."}, {"method_name": "setPerformancePreferences", "method_sig": "public void setPerformancePreferences (int connectionTime,\n                                      int latency,\n                                      int bandwidth)", "description": "Sets performance preferences for this socket.\n\n  Sockets use the TCP/IP protocol by default.  Some implementations\n may offer alternative protocols which have different performance\n characteristics than TCP/IP.  This method allows the application to\n express its own preferences as to how these tradeoffs should be made\n when the implementation chooses from the available protocols.\n\n  Performance preferences are described by three integers\n whose values indicate the relative importance of short connection time,\n low latency, and high bandwidth.  The absolute values of the integers\n are irrelevant; in order to choose a protocol the values are simply\n compared, with larger values indicating stronger preferences. Negative\n values represent a lower priority than positive values. If the\n application prefers short connection time over both low latency and high\n bandwidth, for example, then it could invoke this method with the values\n (1, 0, 0).  If the application prefers high bandwidth above low\n latency, and low latency above short connection time, then it could\n invoke this method with the values (0, 1, 2).\n\n  Invoking this method after this socket has been connected\n will have no effect."}, {"method_name": "setOption", "method_sig": "public <T> Socket setOption (SocketOption<T> name,\n                            T value)\n                     throws IOException", "description": "Sets the value of a socket option."}, {"method_name": "getOption", "method_sig": "public <T> T getOption (SocketOption<T> name)\n                throws IOException", "description": "Returns the value of a socket option."}, {"method_name": "supportedOptions", "method_sig": "public Set<SocketOption<?>> supportedOptions()", "description": "Returns a set of the socket options supported by this socket.\n\n This method will continue to return the set of options even after\n the socket has been closed."}]}