{"name": "Interface TreeWalker", "module": "java.xml", "package": "org.w3c.dom.traversal", "text": "TreeWalker objects are used to navigate a document tree or\n subtree using the view of the document defined by their\n whatToShow flags and filter (if any). Any function which\n performs navigation using a TreeWalker will automatically\n support any view defined by a TreeWalker.\n Omitting nodes from the logical view of a subtree can result in a\n structure that is substantially different from the same subtree in the\n complete, unfiltered document. Nodes that are siblings in the\n TreeWalker view may be children of different, widely\n separated nodes in the original view. For instance, consider a\n NodeFilter that skips all nodes except for Text nodes and\n the root node of a document. In the logical view that results, all text\n nodes will be siblings and appear as direct children of the root node, no\n matter how deeply nested the structure of the original document.\n See also the Document Object Model (DOM) Level 2 Traversal and Range Specification.", "codes": ["public interface TreeWalker"], "fields": [], "methods": [{"method_name": "getRoot", "method_sig": "Node getRoot()", "description": "The root node of the TreeWalker, as specified\n when it was created."}, {"method_name": "getWhatToShow", "method_sig": "int getWhatToShow()", "description": "This attribute determines which node types are presented via the\n TreeWalker. The available set of constants is defined in\n the NodeFilter interface.  Nodes not accepted by\n whatToShow will be skipped, but their children may still\n be considered. Note that this skip takes precedence over the filter,\n if any."}, {"method_name": "getFilter", "method_sig": "NodeFilter getFilter()", "description": "The filter used to screen nodes."}, {"method_name": "getExpandEntityReferences", "method_sig": "boolean getExpandEntityReferences()", "description": "The value of this flag determines whether the children of entity\n reference nodes are visible to the TreeWalker. If false,\n these children  and their descendants will be rejected. Note that\n this rejection takes precedence over whatToShow and the\n filter, if any.\n  To produce a view of the document that has entity references\n expanded and does not expose the entity reference node itself, use\n the whatToShow flags to hide the entity reference node\n and set expandEntityReferences to true when creating the\n TreeWalker. To produce a view of the document that has\n entity reference nodes but no entity expansion, use the\n whatToShow flags to show the entity reference node and\n set expandEntityReferences to false."}, {"method_name": "getCurrentNode", "method_sig": "Node getCurrentNode()", "description": "The node at which the TreeWalker is currently positioned.\n Alterations to the DOM tree may cause the current node to no longer\n be accepted by the TreeWalker's associated filter.\n currentNode may also be explicitly set to any node,\n whether or not it is within the subtree specified by the\n root node or would be accepted by the filter and\n whatToShow flags. Further traversal occurs relative to\n currentNode even if it is not part of the current view,\n by applying the filters in the requested direction; if no traversal\n is possible, currentNode is not changed."}, {"method_name": "setCurrentNode", "method_sig": "void setCurrentNode (Node currentNode)\n             throws DOMException", "description": "The node at which the TreeWalker is currently positioned.\n Alterations to the DOM tree may cause the current node to no longer\n be accepted by the TreeWalker's associated filter.\n currentNode may also be explicitly set to any node,\n whether or not it is within the subtree specified by the\n root node or would be accepted by the filter and\n whatToShow flags. Further traversal occurs relative to\n currentNode even if it is not part of the current view,\n by applying the filters in the requested direction; if no traversal\n is possible, currentNode is not changed."}, {"method_name": "parentNode", "method_sig": "Node parentNode()", "description": "Moves to and returns the closest visible ancestor node of the current\n node. If the search for parentNode attempts to step\n upward from the TreeWalker's root node, or\n if it fails to find a visible ancestor node, this method retains the\n current position and returns null."}, {"method_name": "firstChild", "method_sig": "Node firstChild()", "description": "Moves the TreeWalker to the first visible child of the\n current node, and returns the new node. If the current node has no\n visible children, returns null, and retains the current\n node."}, {"method_name": "lastChild", "method_sig": "Node lastChild()", "description": "Moves the TreeWalker to the last visible child of the\n current node, and returns the new node. If the current node has no\n visible children, returns null, and retains the current\n node."}, {"method_name": "previousSibling", "method_sig": "Node previousSibling()", "description": "Moves the TreeWalker to the previous sibling of the\n current node, and returns the new node. If the current node has no\n visible previous sibling, returns null, and retains the\n current node."}, {"method_name": "nextSibling", "method_sig": "Node nextSibling()", "description": "Moves the TreeWalker to the next sibling of the current\n node, and returns the new node. If the current node has no visible\n next sibling, returns null, and retains the current node."}, {"method_name": "previousNode", "method_sig": "Node previousNode()", "description": "Moves the TreeWalker to the previous visible node in\n document order relative to the current node, and returns the new\n node. If the current node has no previous node,  or if the search for\n previousNode attempts to step upward from the\n TreeWalker's root node,  returns\n null, and retains the current node."}, {"method_name": "nextNode", "method_sig": "Node nextNode()", "description": "Moves the TreeWalker to the next visible node in document\n order relative to the current node, and returns the new node. If the\n current node has no next node, or if the search for nextNode attempts\n to step upward from the TreeWalker's root\n node, returns null, and retains the current node."}]}