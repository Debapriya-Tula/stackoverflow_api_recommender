{"name": "Class CharArrayReader", "module": "java.base", "package": "java.io", "text": "This class implements a character buffer that can be used as a\n character-input stream.", "codes": ["public class CharArrayReader\nextends Reader"], "fields": [{"field_name": "buf", "field_sig": "protected\u00a0char[] buf", "description": "The character buffer."}, {"field_name": "pos", "field_sig": "protected\u00a0int pos", "description": "The current buffer position."}, {"field_name": "markedPos", "field_sig": "protected\u00a0int markedPos", "description": "The position of mark in buffer."}, {"field_name": "count", "field_sig": "protected\u00a0int count", "description": "The index of the end of this buffer.  There is not valid\n  data at or beyond this index."}], "methods": [{"method_name": "read", "method_sig": "public int read()\n         throws IOException", "description": "Reads a single character."}, {"method_name": "read", "method_sig": "public int read (char[] b,\n                int off,\n                int len)\n         throws IOException", "description": "Reads characters into a portion of an array."}, {"method_name": "skip", "method_sig": "public long skip (long n)\n          throws IOException", "description": "Skips characters.  Returns the number of characters that were skipped.\n\n The n parameter may be negative, even though the\n skip method of the Reader superclass throws\n an exception in this case. If n is negative, then\n this method does nothing and returns 0."}, {"method_name": "ready", "method_sig": "public boolean ready()\n              throws IOException", "description": "Tells whether this stream is ready to be read.  Character-array readers\n are always ready to be read."}, {"method_name": "markSupported", "method_sig": "public boolean markSupported()", "description": "Tells whether this stream supports the mark() operation, which it does."}, {"method_name": "mark", "method_sig": "public void mark (int readAheadLimit)\n          throws IOException", "description": "Marks the present position in the stream.  Subsequent calls to reset()\n will reposition the stream to this point."}, {"method_name": "reset", "method_sig": "public void reset()\n           throws IOException", "description": "Resets the stream to the most recent mark, or to the beginning if it has\n never been marked."}, {"method_name": "close", "method_sig": "public void close()", "description": "Closes the stream and releases any system resources associated with\n it.  Once the stream has been closed, further read(), ready(),\n mark(), reset(), or skip() invocations will throw an IOException.\n Closing a previously closed stream has no effect. This method will block\n while there is another thread blocking on the reader."}]}