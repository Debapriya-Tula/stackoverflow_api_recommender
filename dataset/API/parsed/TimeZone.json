{"name": "Class TimeZone", "module": "java.base", "package": "java.util", "text": "TimeZone represents a time zone offset, and also figures out daylight\n savings.\n\n \n Typically, you get a TimeZone using getDefault\n which creates a TimeZone based on the time zone where the program\n is running. For example, for a program running in Japan, getDefault\n creates a TimeZone object based on Japanese Standard Time.\n\n \n You can also get a TimeZone using getTimeZone\n along with a time zone ID. For instance, the time zone ID for the\n U.S. Pacific Time zone is \"America/Los_Angeles\". So, you can get a\n U.S. Pacific Time TimeZone object with:\n \n TimeZone tz = TimeZone.getTimeZone(\"America/Los_Angeles\");\n \n You can use the getAvailableIDs method to iterate through\n all the supported time zone IDs. You can then choose a\n supported ID to get a TimeZone.\n If the time zone you want is not represented by one of the\n supported IDs, then a custom time zone ID can be specified to\n produce a TimeZone. The syntax of a custom time zone ID is:\n\n \n CustomID:\n         GMT Sign Hours : Minutes\n         GMT Sign Hours Minutes\n         GMT Sign Hours\n Sign: one of\n         + -\n Hours:\n         Digit\n         Digit Digit\n Minutes:\n         Digit Digit\n Digit: one of\n         0 1 2 3 4 5 6 7 8 9\n \nHours must be between 0 to 23 and Minutes must be\n between 00 to 59.  For example, \"GMT+10\" and \"GMT+0010\" mean ten\n hours and ten minutes ahead of GMT, respectively.\n \n The format is locale independent and digits must be taken from the\n Basic Latin block of the Unicode standard. No daylight saving time\n transition schedule can be specified with a custom time zone ID. If\n the specified string doesn't match the syntax, \"GMT\"\n is used.\n \n When creating a TimeZone, the specified custom time\n zone ID is normalized in the following syntax:\n \n NormalizedCustomID:\n         GMT Sign TwoDigitHours : Minutes\n Sign: one of\n         + -\n TwoDigitHours:\n         Digit Digit\n Minutes:\n         Digit Digit\n Digit: one of\n         0 1 2 3 4 5 6 7 8 9\n \n For example, TimeZone.getTimeZone(\"GMT-8\").getID() returns \"GMT-08:00\".\n\n Three-letter time zone IDs\n\n For compatibility with JDK 1.1.x, some other three-letter time zone IDs\n (such as \"PST\", \"CTT\", \"AST\") are also supported. However, their\n use is deprecated because the same abbreviation is often used\n for multiple time zones (for example, \"CST\" could be U.S. \"Central Standard\n Time\" and \"China Standard Time\"), and the Java platform can then only\n recognize one of them.", "codes": ["public abstract class TimeZone\nextends Object\nimplements Serializable, Cloneable"], "fields": [{"field_name": "SHORT", "field_sig": "public static final\u00a0int SHORT", "description": "A style specifier for getDisplayName() indicating\n a short name, such as \"PST.\""}, {"field_name": "LONG", "field_sig": "public static final\u00a0int LONG", "description": "A style specifier for getDisplayName() indicating\n a long name, such as \"Pacific Standard Time.\""}], "methods": [{"method_name": "getOffset", "method_sig": "public abstract int getOffset (int era,\n                              int year,\n                              int month,\n                              int day,\n                              int dayOfWeek,\n                              int milliseconds)", "description": "Gets the time zone offset, for current date, modified in case of\n daylight savings. This is the offset to add to UTC to get local time.\n \n This method returns a historically correct offset if an\n underlying TimeZone implementation subclass\n supports historical Daylight Saving Time schedule and GMT\n offset changes."}, {"method_name": "getOffset", "method_sig": "public int getOffset (long date)", "description": "Returns the offset of this time zone from UTC at the specified\n date. If Daylight Saving Time is in effect at the specified\n date, the offset value is adjusted with the amount of daylight\n saving.\n \n This method returns a historically correct offset value if an\n underlying TimeZone implementation subclass supports historical\n Daylight Saving Time schedule and GMT offset changes."}, {"method_name": "setRawOffset", "method_sig": "public abstract void setRawOffset (int offsetMillis)", "description": "Sets the base time zone offset to GMT.\n This is the offset to add to UTC to get local time.\n \n If an underlying TimeZone implementation subclass\n supports historical GMT offset changes, the specified GMT\n offset is set as the latest GMT offset and the difference from\n the known latest GMT offset value is used to adjust all\n historical GMT offset values."}, {"method_name": "getRawOffset", "method_sig": "public abstract int getRawOffset()", "description": "Returns the amount of time in milliseconds to add to UTC to get\n standard time in this time zone. Because this value is not\n affected by daylight saving time, it is called raw\n offset.\n \n If an underlying TimeZone implementation subclass\n supports historical GMT offset changes, the method returns the\n raw offset value of the current date. In Honolulu, for example,\n its raw offset changed from GMT-10:30 to GMT-10:00 in 1947, and\n this method always returns -36000000 milliseconds (i.e., -10\n hours)."}, {"method_name": "getID", "method_sig": "public String getID()", "description": "Gets the ID of this time zone."}, {"method_name": "setID", "method_sig": "public void setID (String ID)", "description": "Sets the time zone ID. This does not change any other data in\n the time zone object."}, {"method_name": "getDisplayName", "method_sig": "public final String getDisplayName()", "description": "Returns a long standard time name of this TimeZone suitable for\n presentation to the user in the default locale.\n\n This method is equivalent to:\n \n getDisplayName(false, LONG,\n                Locale.getDefault(Locale.Category.DISPLAY))\n "}, {"method_name": "getDisplayName", "method_sig": "public final String getDisplayName (Locale locale)", "description": "Returns a long standard time name of this TimeZone suitable for\n presentation to the user in the specified locale.\n\n This method is equivalent to:\n \n getDisplayName(false, LONG, locale)\n "}, {"method_name": "getDisplayName", "method_sig": "public final String getDisplayName (boolean daylight,\n                                   int style)", "description": "Returns a name in the specified style of this TimeZone\n suitable for presentation to the user in the default locale. If the\n specified daylight is true, a Daylight Saving Time name\n is returned (even if this TimeZone doesn't observe Daylight Saving\n Time). Otherwise, a Standard Time name is returned.\n\n This method is equivalent to:\n \n getDisplayName(daylight, style,\n                Locale.getDefault(Locale.Category.DISPLAY))\n "}, {"method_name": "getDisplayName", "method_sig": "public String getDisplayName (boolean daylight,\n                             int style,\n                             Locale locale)", "description": "Returns a name in the specified style of this TimeZone\n suitable for presentation to the user in the specified \n locale. If the specified daylight is true, a Daylight\n Saving Time name is returned (even if this TimeZone doesn't\n observe Daylight Saving Time). Otherwise, a Standard Time name is\n returned.\n\n When looking up a time zone name, the default\n Localesearch path of ResourceBundle derived\n from the specified locale is used. (No fallback\n Locale search is performed.) If a time zone name in any\n Locale of the search path, including Locale.ROOT, is\n found, the name is returned. Otherwise, a string in the\n normalized custom ID format is returned."}, {"method_name": "getDSTSavings", "method_sig": "public int getDSTSavings()", "description": "Returns the amount of time to be added to local standard time\n to get local wall clock time.\n\n The default implementation returns 3600000 milliseconds\n (i.e., one hour) if a call to useDaylightTime()\n returns true. Otherwise, 0 (zero) is returned.\n\n If an underlying TimeZone implementation subclass\n supports historical and future Daylight Saving Time schedule\n changes, this method returns the amount of saving time of the\n last known Daylight Saving Time rule that can be a future\n prediction.\n\n If the amount of saving time at any given time stamp is\n required, construct a Calendar with this \n TimeZone and the time stamp, and call Calendar.get(Calendar.DST_OFFSET)."}, {"method_name": "useDaylightTime", "method_sig": "public abstract boolean useDaylightTime()", "description": "Queries if this TimeZone uses Daylight Saving Time.\n\n If an underlying TimeZone implementation subclass\n supports historical and future Daylight Saving Time schedule\n changes, this method refers to the last known Daylight Saving Time\n rule that can be a future prediction and may not be the same as\n the current rule. Consider calling observesDaylightTime()\n if the current rule should also be taken into account."}, {"method_name": "observesDaylightTime", "method_sig": "public boolean observesDaylightTime()", "description": "Returns true if this TimeZone is currently in\n Daylight Saving Time, or if a transition from Standard Time to\n Daylight Saving Time occurs at any future time.\n\n The default implementation returns true if\n useDaylightTime() or inDaylightTime(new Date())\n returns true."}, {"method_name": "inDaylightTime", "method_sig": "public abstract boolean inDaylightTime (Date date)", "description": "Queries if the given date is in Daylight Saving Time in\n this time zone."}, {"method_name": "getTimeZone", "method_sig": "public static TimeZone getTimeZone (String ID)", "description": "Gets the TimeZone for the given ID."}, {"method_name": "getTimeZone", "method_sig": "public static TimeZone getTimeZone (ZoneId zoneId)", "description": "Gets the TimeZone for the given zoneId."}, {"method_name": "toZoneId", "method_sig": "public ZoneId toZoneId()", "description": "Converts this TimeZone object to a ZoneId."}, {"method_name": "getAvailableIDs", "method_sig": "public static String[] getAvailableIDs (int rawOffset)", "description": "Gets the available IDs according to the given time zone offset in milliseconds."}, {"method_name": "getAvailableIDs", "method_sig": "public static String[] getAvailableIDs()", "description": "Gets all the available IDs supported."}, {"method_name": "getDefault", "method_sig": "public static TimeZone getDefault()", "description": "Gets the default TimeZone of the Java virtual machine. If the\n cached default TimeZone is available, its clone is returned.\n Otherwise, the method takes the following steps to determine the default\n time zone.\n\n \nUse the user.timezone property value as the default\n time zone ID if it's available.\nDetect the platform time zone ID. The source of the\n platform time zone and ID mapping may vary with implementation.\nUse GMT as the last resort if the given or detected\n time zone ID is unknown.\n\nThe default TimeZone created from the ID is cached,\n and its clone is returned. The user.timezone property\n value is set to the ID upon return."}, {"method_name": "setDefault", "method_sig": "public static void setDefault (TimeZone zone)", "description": "Sets the TimeZone that is returned by the getDefault\n method. zone is cached. If zone is null, the cached\n default TimeZone is cleared. This method doesn't change the value\n of the user.timezone property."}, {"method_name": "hasSameRules", "method_sig": "public boolean hasSameRules (TimeZone other)", "description": "Returns true if this zone has the same rule and offset as another zone.\n That is, if this zone differs only in ID, if at all.  Returns false\n if the other zone is null."}, {"method_name": "clone", "method_sig": "public Object clone()", "description": "Creates a copy of this TimeZone."}]}