{"name": "Class JMenuBar", "module": "java.desktop", "package": "javax.swing", "text": "An implementation of a menu bar. You add JMenu objects to the\n menu bar to construct a menu. When the user selects a JMenu\n object, its associated JPopupMenu is displayed, allowing the\n user to select one of the JMenuItems on it.\n \n For information and examples of using menu bars see\n How to Use Menus,\n a section in The Java Tutorial.\n\nWarning: Swing is not thread safe. For more\n information see Swing's Threading\n Policy.\n \nWarning:\n Serialized objects of this class will not be compatible with\n future Swing releases. The current serialization support is\n appropriate for short term storage or RMI between applications running\n the same version of Swing.  As of 1.4, support for long term storage\n of all JavaBeans\u2122\n has been added to the java.beans package.\n Please see XMLEncoder.\n \nWarning:\n By default, pressing the Tab key does not transfer focus from a \n JMenuBar which is added to a container together with other Swing\n components, because the focusTraversalKeysEnabled property\n of JMenuBar is set to false. To resolve this,\n you should call the JMenuBar.setFocusTraversalKeysEnabled(true)\n method.", "codes": ["@JavaBean(defaultProperty=\"UI\",\n          description=\"A container for holding and displaying menus.\")\npublic class JMenuBar\nextends JComponent\nimplements Accessible, MenuElement"], "fields": [], "methods": [{"method_name": "getUI", "method_sig": "public MenuBarUI getUI()", "description": "Returns the menubar's current UI."}, {"method_name": "setUI", "method_sig": "@BeanProperty(hidden=true,\n              visualUpdate=true,\n              description=\"The UI object that implements the Component\\'s LookAndFeel.\")\npublic void setUI (MenuBarUI ui)", "description": "Sets the L&F object that renders this component."}, {"method_name": "updateUI", "method_sig": "public void updateUI()", "description": "Resets the UI property with a value from the current look and feel."}, {"method_name": "getUIClassID", "method_sig": "@BeanProperty(bound=false)\npublic String getUIClassID()", "description": "Returns the name of the L&F class that renders this component."}, {"method_name": "getSelectionModel", "method_sig": "public SingleSelectionModel getSelectionModel()", "description": "Returns the model object that handles single selections."}, {"method_name": "setSelectionModel", "method_sig": "@BeanProperty(description=\"The selection model, recording which child is selected.\")\npublic void setSelectionModel (SingleSelectionModel model)", "description": "Sets the model object to handle single selections."}, {"method_name": "add", "method_sig": "public JMenu add (JMenu c)", "description": "Appends the specified menu to the end of the menu bar."}, {"method_name": "getMenu", "method_sig": "public JMenu getMenu (int index)", "description": "Returns the menu at the specified position in the menu bar."}, {"method_name": "getMenuCount", "method_sig": "@BeanProperty(bound=false)\npublic int getMenuCount()", "description": "Returns the number of items in the menu bar."}, {"method_name": "setHelpMenu", "method_sig": "public void setHelpMenu (JMenu menu)", "description": "Sets the help menu that appears when the user selects the\n \"help\" option in the menu bar. This method is not yet implemented\n and will throw an exception."}, {"method_name": "getHelpMenu", "method_sig": "public JMenu getHelpMenu()", "description": "Gets the help menu for the menu bar.  This method is not yet\n implemented and will throw an exception."}, {"method_name": "getComponentAtIndex", "method_sig": "@Deprecated\npublic Component getComponentAtIndex (int i)", "description": "Returns the component at the specified index."}, {"method_name": "getComponentIndex", "method_sig": "public int getComponentIndex (Component c)", "description": "Returns the index of the specified component."}, {"method_name": "setSelected", "method_sig": "public void setSelected (Component sel)", "description": "Sets the currently selected component, producing a\n a change to the selection model."}, {"method_name": "isSelected", "method_sig": "@BeanProperty(bound=false)\npublic boolean isSelected()", "description": "Returns true if the menu bar currently has a component selected."}, {"method_name": "isBorderPainted", "method_sig": "public boolean isBorderPainted()", "description": "Returns true if the menu bars border should be painted."}, {"method_name": "setBorderPainted", "method_sig": "@BeanProperty(visualUpdate=true,\n              description=\"Whether the border should be painted.\")\npublic void setBorderPainted (boolean b)", "description": "Sets whether the border should be painted."}, {"method_name": "paintBorder", "method_sig": "protected void paintBorder (Graphics g)", "description": "Paints the menubar's border if BorderPainted\n property is true."}, {"method_name": "setMargin", "method_sig": "@BeanProperty(visualUpdate=true,\n              description=\"The space between the menubar\\'s border and its contents\")\npublic void setMargin (Insets m)", "description": "Sets the margin between the menubar's border and\n its menus. Setting to null will cause the menubar to\n use the default margins."}, {"method_name": "getMargin", "method_sig": "public Insets getMargin()", "description": "Returns the margin between the menubar's border and\n its menus.  If there is no previous margin, it will create\n a default margin with zero size."}, {"method_name": "processMouseEvent", "method_sig": "public void processMouseEvent (MouseEvent event,\n                              MenuElement[] path,\n                              MenuSelectionManager manager)", "description": "Implemented to be a MenuElement -- does nothing."}, {"method_name": "processKeyEvent", "method_sig": "public void processKeyEvent (KeyEvent e,\n                            MenuElement[] path,\n                            MenuSelectionManager manager)", "description": "Implemented to be a MenuElement -- does nothing."}, {"method_name": "menuSelectionChanged", "method_sig": "public void menuSelectionChanged (boolean isIncluded)", "description": "Implemented to be a MenuElement -- does nothing."}, {"method_name": "getSubElements", "method_sig": "@BeanProperty(bound=false)\npublic MenuElement[] getSubElements()", "description": "Implemented to be a MenuElement -- returns the\n menus in this menu bar.\n This is the reason for implementing the MenuElement\n interface -- so that the menu bar can be treated the same as\n other menu elements."}, {"method_name": "getComponent", "method_sig": "public Component getComponent()", "description": "Implemented to be a MenuElement. Returns this object."}, {"method_name": "paramString", "method_sig": "protected String paramString()", "description": "Returns a string representation of this JMenuBar.\n This method\n is intended to be used only for debugging purposes, and the\n content and format of the returned string may vary between\n implementations. The returned string may be empty but may not\n be null."}, {"method_name": "getAccessibleContext", "method_sig": "@BeanProperty(bound=false)\npublic AccessibleContext getAccessibleContext()", "description": "Gets the AccessibleContext associated with this JMenuBar.\n For JMenuBars, the AccessibleContext takes the form of an\n AccessibleJMenuBar.\n A new AccessibleJMenuBar instance is created if necessary."}, {"method_name": "processKeyBinding", "method_sig": "protected boolean processKeyBinding (KeyStroke ks,\n                                    KeyEvent e,\n                                    int condition,\n                                    boolean pressed)", "description": "Subclassed to check all the child menus."}, {"method_name": "addNotify", "method_sig": "public void addNotify()", "description": "Overrides JComponent.addNotify to register this\n menu bar with the current keyboard manager."}, {"method_name": "removeNotify", "method_sig": "public void removeNotify()", "description": "Overrides JComponent.removeNotify to unregister this\n menu bar with the current keyboard manager."}]}