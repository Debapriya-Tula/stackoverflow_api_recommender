{"name": "Class NamingManager", "module": "java.naming", "package": "javax.naming.spi", "text": "This class contains methods for creating context objects\n and objects referred to by location information in the naming\n or directory service.\n\n This class cannot be instantiated.  It has only static methods.\n\n The mention of URL in the documentation for this class refers to\n a URL string as defined by RFC 1738 and its related RFCs. It is\n any string that conforms to the syntax described therein, and\n may not always have corresponding support in the java.net.URL\n class or Web browsers.\n\n NamingManager is safe for concurrent access by multiple threads.\n\n Except as otherwise noted,\n a Name or environment parameter\n passed to any method is owned by the caller.\n The implementation will not modify the object or keep a reference\n to it, although it may keep a reference to a clone or copy.", "codes": ["public class NamingManager\nextends Object"], "fields": [{"field_name": "CPE", "field_sig": "public static final\u00a0String CPE", "description": "Constant that holds the name of the environment property into\n which getContinuationContext() stores the value of its\n CannotProceedException parameter.\n This property is inherited by the continuation context, and may\n be used by that context's service provider to inspect the\n fields of the exception.\n\n The value of this constant is \"java.naming.spi.CannotProceedException\"."}], "methods": [{"method_name": "setObjectFactoryBuilder", "method_sig": "public static void setObjectFactoryBuilder (ObjectFactoryBuilder builder)\n                                    throws NamingException", "description": "The ObjectFactoryBuilder determines the policy used when\n trying to load object factories.\n See getObjectInstance() and class ObjectFactory for a description\n of the default policy.\n setObjectFactoryBuilder() overrides this default policy by installing\n an ObjectFactoryBuilder. Subsequent object factories will\n be loaded and created using the installed builder.\n\n The builder can only be installed if the executing thread is allowed\n (by the security manager's checkSetFactory() method) to do so.\n Once installed, the builder cannot be replaced."}, {"method_name": "getObjectInstance", "method_sig": "public static Object getObjectInstance (Object refInfo,\n                                       Name name,\n                                       Context nameCtx,\n                                       Hashtable<?, ?> environment)\n                                throws Exception", "description": "Creates an instance of an object for the specified object\n and environment.\n \n If an object factory builder has been installed, it is used to\n create a factory for creating the object.\n Otherwise, the following rules are used to create the object:\n\nIf refInfo is a Reference\n    or Referenceable containing a factory class name,\n    use the named factory to create the object.\n    Return refInfo if the factory cannot be created.\n    Under JDK 1.1, if the factory class must be loaded from a location\n    specified in the reference, a SecurityManager must have\n    been installed or the factory creation will fail.\n    If an exception is encountered while creating the factory,\n    it is passed up to the caller.\n If refInfo is a Reference or\n    Referenceable with no factory class name,\n    and the address or addresses are StringRefAddrs with\n    address type \"URL\",\n    try the URL context factory corresponding to each URL's scheme id\n    to create the object (see getURLContext()).\n    If that fails, continue to the next step.\n  Use the object factories specified in\n    the Context.OBJECT_FACTORIES property of the environment,\n    and of the provider resource file associated with\n    nameCtx, in that order.\n    The value of this property is a colon-separated list of factory\n    class names that are tried in order, and the first one that succeeds\n    in creating an object is the one used.\n    If none of the factories can be loaded,\n    return refInfo.\n    If an exception is encountered while creating the object, the\n    exception is passed up to the caller.\n\n\n Service providers that implement the DirContext\n interface should use\n DirectoryManager.getObjectInstance(), not this method.\n Service providers that implement only the Context\n interface should use this method.\n \n Note that an object factory (an object that implements the ObjectFactory\n interface) must be public and must have a public constructor that\n accepts no arguments.\n In cases where the factory is in a named module then it must be in a\n package which is exported by that module to the java.naming\n module.\n \n The name and nameCtx parameters may\n optionally be used to specify the name of the object being created.\n name is the name of the object, relative to context\n nameCtx.  This information could be useful to the object\n factory or to the object implementation.\n  If there are several possible contexts from which the object\n  could be named -- as will often be the case -- it is up to\n  the caller to select one.  A good rule of thumb is to select the\n \"deepest\" context available.\n If nameCtx is null, name is relative\n to the default initial context.  If no name is being specified, the\n name parameter should be null."}, {"method_name": "getURLContext", "method_sig": "public static Context getURLContext (String scheme,\n                                    Hashtable<?, ?> environment)\n                             throws NamingException", "description": "Creates a context for the given URL scheme id.\n \n The resulting context is for resolving URLs of the\n scheme scheme. The resulting context is not tied\n to a specific URL. It is able to handle arbitrary URLs with\n the specified scheme.\n\n The class name of the factory that creates the resulting context\n has the naming convention scheme-idURLContextFactory\n (e.g. \"ftpURLContextFactory\" for the \"ftp\" scheme-id),\n in the package specified as follows.\n The Context.URL_PKG_PREFIXES environment property (which\n may contain values taken from system properties,\n or application resource files)\n contains a colon-separated list of package prefixes.\n Each package prefix in\n the property is tried in the order specified to load the factory class.\n The default package prefix is \"com.sun.jndi.url\" (if none of the\n specified packages work, this default is tried).\n The complete package name is constructed using the package prefix,\n concatenated with the scheme id.\n\n For example, if the scheme id is \"ldap\", and the\n Context.URL_PKG_PREFIXES property\n contains \"com.widget:com.wiz.jndi\",\n the naming manager would attempt to load the following classes\n until one is successfully instantiated:\n\ncom.widget.ldap.ldapURLContextFactory\n  com.wiz.jndi.ldap.ldapURLContextFactory\n  com.sun.jndi.url.ldap.ldapURLContextFactory\n\n If none of the package prefixes work, null is returned.\n\n If a factory is instantiated, it is invoked with the following\n parameters to produce the resulting context.\n \nfactory.getObjectInstance(null, environment);\n\n For example, invoking getObjectInstance() as shown above\n on a LDAP URL context factory would return a\n context that can resolve LDAP urls\n (e.g. \"ldap://ldap.wiz.com/o=wiz,c=us\",\n \"ldap://ldap.umich.edu/o=umich,c=us\", ...).\n\n Note that an object factory (an object that implements the ObjectFactory\n interface) must be public and must have a public constructor that\n accepts no arguments.\n In cases where the factory is in a named module then it must be in a\n package which is exported by that module to the java.naming\n module."}, {"method_name": "getInitialContext", "method_sig": "public static Context getInitialContext (Hashtable<?, ?> env)\n                                 throws NamingException", "description": "Creates an initial context using the specified environment\n properties.\n \n This is done as follows:\n \nIf an InitialContextFactoryBuilder has been installed,\n     it is used to create the factory for creating the initial\n     context\nOtherwise, the class specified in the\n     Context.INITIAL_CONTEXT_FACTORY environment property\n     is used\n     \nFirst, the ServiceLoader\n         mechanism tries to locate an InitialContextFactory\n         provider using the current thread's context class loader\nFailing that, this implementation tries to locate a suitable\n         InitialContextFactory using a built-in mechanism\n         \n         (Note that an initial context factory (an object that implements\n         the InitialContextFactory interface) must be public and must have\n         a public constructor that accepts no arguments.\n         In cases where the factory is in a named module then it must\n         be in a package which is exported by that module to the\n         java.naming module.)\n\n\n"}, {"method_name": "setInitialContextFactoryBuilder", "method_sig": "public static void setInitialContextFactoryBuilder (InitialContextFactoryBuilder builder)\n                                            throws NamingException", "description": "Sets the InitialContextFactory builder to be builder.\n\n\n The builder can only be installed if the executing thread is allowed by\n the security manager to do so. Once installed, the builder cannot\n be replaced."}, {"method_name": "hasInitialContextFactoryBuilder", "method_sig": "public static boolean hasInitialContextFactoryBuilder()", "description": "Determines whether an initial context factory builder has\n been set."}, {"method_name": "getContinuationContext", "method_sig": "public static Context getContinuationContext (CannotProceedException cpe)\n                                      throws NamingException", "description": "Creates a context in which to continue a context operation.\n\n In performing an operation on a name that spans multiple\n namespaces, a context from one naming system may need to pass\n the operation on to the next naming system.  The context\n implementation does this by first constructing a\n CannotProceedException containing information\n pinpointing how far it has proceeded.  It then obtains a\n continuation context from JNDI by calling\n getContinuationContext.  The context\n implementation should then resume the context operation by\n invoking the same operation on the continuation context, using\n the remainder of the name that has not yet been resolved.\n\n Before making use of the cpe parameter, this method\n updates the environment associated with that object by setting\n the value of the property CPE\n to cpe.  This property will be inherited by the\n continuation context, and may be used by that context's\n service provider to inspect the fields of this exception."}, {"method_name": "getStateToBind", "method_sig": "public static Object getStateToBind (Object obj,\n                                    Name name,\n                                    Context nameCtx,\n                                    Hashtable<?, ?> environment)\n                             throws NamingException", "description": "Retrieves the state of an object for binding.\n \n Service providers that implement the DirContext interface\n should use DirectoryManager.getStateToBind(), not this method.\n Service providers that implement only the Context interface\n should use this method.\n\n This method uses the specified state factories in\n the Context.STATE_FACTORIES property from the environment\n properties, and from the provider resource file associated with\n nameCtx, in that order.\n    The value of this property is a colon-separated list of factory\n    class names that are tried in order, and the first one that succeeds\n    in returning the object's state is the one used.\n If no object's state can be retrieved in this way, return the\n object itself.\n    If an exception is encountered while retrieving the state, the\n    exception is passed up to the caller.\n \n Note that a state factory\n (an object that implements the StateFactory\n interface) must be public and must have a public constructor that\n accepts no arguments.\n In cases where the factory is in a named module then it must be in a\n package which is exported by that module to the java.naming\n module.\n \n The name and nameCtx parameters may\n optionally be used to specify the name of the object being created.\n See the description of \"Name and Context Parameters\" in\n ObjectFactory.getObjectInstance()\n for details.\n \n This method may return a Referenceable object.  The\n service provider obtaining this object may choose to store it\n directly, or to extract its reference (using\n Referenceable.getReference()) and store that instead."}]}