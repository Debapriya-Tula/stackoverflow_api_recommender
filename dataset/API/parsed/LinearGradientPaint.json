{"name": "Class LinearGradientPaint", "module": "java.desktop", "package": "java.awt", "text": "The LinearGradientPaint class provides a way to fill\n a Shape with a linear color gradient pattern.  The user\n may specify two or more gradient colors, and this paint will provide an\n interpolation between each color.  The user also specifies start and end\n points which define where in user space the color gradient should begin\n and end.\n \n The user must provide an array of floats specifying how to distribute the\n colors along the gradient.  These values should range from 0.0 to 1.0 and\n act like keyframes along the gradient (they mark where the gradient should\n be exactly a particular color).\n \n In the event that the user does not set the first keyframe value equal\n to 0 and/or the last keyframe value equal to 1, keyframes will be created\n at these positions and the first and last colors will be replicated there.\n So, if a user specifies the following arrays to construct a gradient:\n\n     {Color.BLUE, Color.RED}, {.3f, .7f}\n \n this will be converted to a gradient with the following keyframes:\n\n     {Color.BLUE, Color.BLUE, Color.RED, Color.RED}, {0f, .3f, .7f, 1f}\n \n\n The user may also select what action the LinearGradientPaint object\n takes when it is filling the space outside the start and end points by\n setting CycleMethod to either REFLECTION or REPEAT.\n The distances between any two colors in any of the reflected or repeated\n copies of the gradient are the same as the distance between those same two\n colors between the start and end points.\n Note that some minor variations in distances may occur due to sampling at\n the granularity of a pixel.\n If no cycle method is specified, NO_CYCLE will be chosen by\n default, which means the endpoint colors will be used to fill the\n remaining area.\n \n The colorSpace parameter allows the user to specify in which colorspace\n the interpolation should be performed, default sRGB or linearized RGB.\n\n \n The following code demonstrates typical usage of\n LinearGradientPaint:\n \n     Point2D start = new Point2D.Float(0, 0);\n     Point2D end = new Point2D.Float(50, 50);\n     float[] dist = {0.0f, 0.2f, 1.0f};\n     Color[] colors = {Color.RED, Color.WHITE, Color.BLUE};\n     LinearGradientPaint p =\n         new LinearGradientPaint(start, end, dist, colors);\n \n\n This code will create a LinearGradientPaint which interpolates\n between red and white for the first 20% of the gradient and between white\n and blue for the remaining 80%.\n\n \n This image demonstrates the example code above for each\n of the three cycle methods:\n \n", "codes": ["public final class LinearGradientPaint\nextends MultipleGradientPaint"], "fields": [], "methods": [{"method_name": "createContext", "method_sig": "public PaintContext createContext (ColorModel cm,\n                                  Rectangle deviceBounds,\n                                  Rectangle2D userBounds,\n                                  AffineTransform transform,\n                                  RenderingHints hints)", "description": "Creates and returns a PaintContext used to\n generate a linear color gradient pattern.\n See the specification of the\n method in the Paint interface for information\n on null parameter handling."}, {"method_name": "getStartPoint", "method_sig": "public Point2D getStartPoint()", "description": "Returns a copy of the start point of the gradient axis."}, {"method_name": "getEndPoint", "method_sig": "public Point2D getEndPoint()", "description": "Returns a copy of the end point of the gradient axis."}]}