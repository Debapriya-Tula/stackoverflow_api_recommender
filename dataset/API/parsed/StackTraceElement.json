{"name": "Class StackTraceElement", "module": "java.base", "package": "java.lang", "text": "An element in a stack trace, as returned by Throwable.getStackTrace().  Each element represents a single stack frame.\n All stack frames except for the one at the top of the stack represent\n a method invocation.  The frame at the top of the stack represents the\n execution point at which the stack trace was generated.  Typically,\n this is the point at which the throwable corresponding to the stack trace\n was created.", "codes": ["public final class StackTraceElement\nextends Object\nimplements Serializable"], "fields": [], "methods": [{"method_name": "getFileName", "method_sig": "public String getFileName()", "description": "Returns the name of the source file containing the execution point\n represented by this stack trace element.  Generally, this corresponds\n to the SourceFile attribute of the relevant class\n file (as per The Java Virtual Machine Specification, Section\n 4.7.7).  In some systems, the name may refer to some source code unit\n other than a file, such as an entry in source repository."}, {"method_name": "getLineNumber", "method_sig": "public int getLineNumber()", "description": "Returns the line number of the source line containing the execution\n point represented by this stack trace element.  Generally, this is\n derived from the LineNumberTable attribute of the relevant\n class file (as per The Java Virtual Machine\n Specification, Section 4.7.8)."}, {"method_name": "getModuleName", "method_sig": "public String getModuleName()", "description": "Returns the module name of the module containing the execution point\n represented by this stack trace element."}, {"method_name": "getModuleVersion", "method_sig": "public String getModuleVersion()", "description": "Returns the module version of the module containing the execution point\n represented by this stack trace element."}, {"method_name": "getClassLoaderName", "method_sig": "public String getClassLoaderName()", "description": "Returns the name of the class loader of the class containing the\n execution point represented by this stack trace element."}, {"method_name": "getClassName", "method_sig": "public String getClassName()", "description": "Returns the fully qualified name of the class containing the\n execution point represented by this stack trace element."}, {"method_name": "getMethodName", "method_sig": "public String getMethodName()", "description": "Returns the name of the method containing the execution point\n represented by this stack trace element.  If the execution point is\n contained in an instance or class initializer, this method will return\n the appropriate special method name, <init> or\n <clinit>, as per Section 3.9 of The Java Virtual\n Machine Specification."}, {"method_name": "isNativeMethod", "method_sig": "public boolean isNativeMethod()", "description": "Returns true if the method containing the execution point\n represented by this stack trace element is a native method."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a string representation of this stack trace element."}, {"method_name": "equals", "method_sig": "public boolean equals (Object obj)", "description": "Returns true if the specified object is another\n StackTraceElement instance representing the same execution\n point as this instance.  Two stack trace elements a and\n b are equal if and only if:\n \n     equals(a.getClassLoaderName(), b.getClassLoaderName()) &&\n     equals(a.getModuleName(), b.getModuleName()) &&\n     equals(a.getModuleVersion(), b.getModuleVersion()) &&\n     equals(a.getClassName(), b.getClassName()) &&\n     equals(a.getMethodName(), b.getMethodName())\n     equals(a.getFileName(), b.getFileName()) &&\n     a.getLineNumber() == b.getLineNumber()\n\n \n where equals has the semantics of Objects.equals."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Returns a hash code value for this stack trace element."}]}