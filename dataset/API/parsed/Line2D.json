{"name": "Class Line2D", "module": "java.desktop", "package": "java.awt.geom", "text": "This Line2D represents a line segment in (x,y)\n coordinate space.\n \n This class is only the abstract superclass for all objects that\n store a 2D line segment.\n The actual storage representation of the coordinates is left to\n the subclass.", "codes": ["public abstract class Line2D\nextends Object\nimplements Shape, Cloneable"], "fields": [], "methods": [{"method_name": "getX1", "method_sig": "public abstract double getX1()", "description": "Returns the X coordinate of the start point in double precision."}, {"method_name": "getY1", "method_sig": "public abstract double getY1()", "description": "Returns the Y coordinate of the start point in double precision."}, {"method_name": "getP1", "method_sig": "public abstract Point2D getP1()", "description": "Returns the start Point2D of this Line2D."}, {"method_name": "getX2", "method_sig": "public abstract double getX2()", "description": "Returns the X coordinate of the end point in double precision."}, {"method_name": "getY2", "method_sig": "public abstract double getY2()", "description": "Returns the Y coordinate of the end point in double precision."}, {"method_name": "getP2", "method_sig": "public abstract Point2D getP2()", "description": "Returns the end Point2D of this Line2D."}, {"method_name": "setLine", "method_sig": "public abstract void setLine (double x1,\n                             double y1,\n                             double x2,\n                             double y2)", "description": "Sets the location of the end points of this Line2D to\n the specified double coordinates."}, {"method_name": "setLine", "method_sig": "public void setLine (Point2D p1,\n                    Point2D p2)", "description": "Sets the location of the end points of this Line2D to\n the specified Point2D coordinates."}, {"method_name": "setLine", "method_sig": "public void setLine (Line2D l)", "description": "Sets the location of the end points of this Line2D to\n the same as those end points of the specified Line2D."}, {"method_name": "relativeCCW", "method_sig": "public static int relativeCCW (double x1,\n                              double y1,\n                              double x2,\n                              double y2,\n                              double px,\n                              double py)", "description": "Returns an indicator of where the specified point\n (px,py) lies with respect to the line segment from\n (x1,y1) to (x2,y2).\n The return value can be either 1, -1, or 0 and indicates\n in which direction the specified line must pivot around its\n first end point, (x1,y1), in order to point at the\n specified point (px,py).\n A return value of 1 indicates that the line segment must\n turn in the direction that takes the positive X axis towards\n the negative Y axis.  In the default coordinate system used by\n Java 2D, this direction is counterclockwise.\n A return value of -1 indicates that the line segment must\n turn in the direction that takes the positive X axis towards\n the positive Y axis.  In the default coordinate system, this\n direction is clockwise.\n A return value of 0 indicates that the point lies\n exactly on the line segment.  Note that an indicator value\n of 0 is rare and not useful for determining collinearity\n because of floating point rounding issues.\n If the point is colinear with the line segment, but\n not between the end points, then the value will be -1 if the point\n lies \"beyond (x1,y1)\" or 1 if the point lies\n \"beyond (x2,y2)\"."}, {"method_name": "relativeCCW", "method_sig": "public int relativeCCW (double px,\n                       double py)", "description": "Returns an indicator of where the specified point\n (px,py) lies with respect to this line segment.\n See the method comments of\n relativeCCW(double, double, double, double, double, double)\n to interpret the return value."}, {"method_name": "relativeCCW", "method_sig": "public int relativeCCW (Point2D p)", "description": "Returns an indicator of where the specified Point2D\n lies with respect to this line segment.\n See the method comments of\n relativeCCW(double, double, double, double, double, double)\n to interpret the return value."}, {"method_name": "linesIntersect", "method_sig": "public static boolean linesIntersect (double x1,\n                                     double y1,\n                                     double x2,\n                                     double y2,\n                                     double x3,\n                                     double y3,\n                                     double x4,\n                                     double y4)", "description": "Tests if the line segment from (x1,y1) to\n (x2,y2) intersects the line segment from (x3,y3)\n to (x4,y4)."}, {"method_name": "intersectsLine", "method_sig": "public boolean intersectsLine (double x1,\n                              double y1,\n                              double x2,\n                              double y2)", "description": "Tests if the line segment from (x1,y1) to\n (x2,y2) intersects this line segment."}, {"method_name": "intersectsLine", "method_sig": "public boolean intersectsLine (Line2D l)", "description": "Tests if the specified line segment intersects this line segment."}, {"method_name": "ptSegDistSq", "method_sig": "public static double ptSegDistSq (double x1,\n                                 double y1,\n                                 double x2,\n                                 double y2,\n                                 double px,\n                                 double py)", "description": "Returns the square of the distance from a point to a line segment.\n The distance measured is the distance between the specified\n point and the closest point between the specified end points.\n If the specified point intersects the line segment in between the\n end points, this method returns 0.0."}, {"method_name": "ptSegDist", "method_sig": "public static double ptSegDist (double x1,\n                               double y1,\n                               double x2,\n                               double y2,\n                               double px,\n                               double py)", "description": "Returns the distance from a point to a line segment.\n The distance measured is the distance between the specified\n point and the closest point between the specified end points.\n If the specified point intersects the line segment in between the\n end points, this method returns 0.0."}, {"method_name": "ptSegDistSq", "method_sig": "public double ptSegDistSq (double px,\n                          double py)", "description": "Returns the square of the distance from a point to this line segment.\n The distance measured is the distance between the specified\n point and the closest point between the current line's end points.\n If the specified point intersects the line segment in between the\n end points, this method returns 0.0."}, {"method_name": "ptSegDistSq", "method_sig": "public double ptSegDistSq (Point2D pt)", "description": "Returns the square of the distance from a Point2D to\n this line segment.\n The distance measured is the distance between the specified\n point and the closest point between the current line's end points.\n If the specified point intersects the line segment in between the\n end points, this method returns 0.0."}, {"method_name": "ptSegDist", "method_sig": "public double ptSegDist (double px,\n                        double py)", "description": "Returns the distance from a point to this line segment.\n The distance measured is the distance between the specified\n point and the closest point between the current line's end points.\n If the specified point intersects the line segment in between the\n end points, this method returns 0.0."}, {"method_name": "ptSegDist", "method_sig": "public double ptSegDist (Point2D pt)", "description": "Returns the distance from a Point2D to this line\n segment.\n The distance measured is the distance between the specified\n point and the closest point between the current line's end points.\n If the specified point intersects the line segment in between the\n end points, this method returns 0.0."}, {"method_name": "ptLineDistSq", "method_sig": "public static double ptLineDistSq (double x1,\n                                  double y1,\n                                  double x2,\n                                  double y2,\n                                  double px,\n                                  double py)", "description": "Returns the square of the distance from a point to a line.\n The distance measured is the distance between the specified\n point and the closest point on the infinitely-extended line\n defined by the specified coordinates.  If the specified point\n intersects the line, this method returns 0.0."}, {"method_name": "ptLineDist", "method_sig": "public static double ptLineDist (double x1,\n                                double y1,\n                                double x2,\n                                double y2,\n                                double px,\n                                double py)", "description": "Returns the distance from a point to a line.\n The distance measured is the distance between the specified\n point and the closest point on the infinitely-extended line\n defined by the specified coordinates.  If the specified point\n intersects the line, this method returns 0.0."}, {"method_name": "ptLineDistSq", "method_sig": "public double ptLineDistSq (double px,\n                           double py)", "description": "Returns the square of the distance from a point to this line.\n The distance measured is the distance between the specified\n point and the closest point on the infinitely-extended line\n defined by this Line2D.  If the specified point\n intersects the line, this method returns 0.0."}, {"method_name": "ptLineDistSq", "method_sig": "public double ptLineDistSq (Point2D pt)", "description": "Returns the square of the distance from a specified\n Point2D to this line.\n The distance measured is the distance between the specified\n point and the closest point on the infinitely-extended line\n defined by this Line2D.  If the specified point\n intersects the line, this method returns 0.0."}, {"method_name": "ptLineDist", "method_sig": "public double ptLineDist (double px,\n                         double py)", "description": "Returns the distance from a point to this line.\n The distance measured is the distance between the specified\n point and the closest point on the infinitely-extended line\n defined by this Line2D.  If the specified point\n intersects the line, this method returns 0.0."}, {"method_name": "ptLineDist", "method_sig": "public double ptLineDist (Point2D pt)", "description": "Returns the distance from a Point2D to this line.\n The distance measured is the distance between the specified\n point and the closest point on the infinitely-extended line\n defined by this Line2D.  If the specified point\n intersects the line, this method returns 0.0."}, {"method_name": "contains", "method_sig": "public boolean contains (double x,\n                        double y)", "description": "Tests if a specified coordinate is inside the boundary of this\n Line2D.  This method is required to implement the\n Shape interface, but in the case of Line2D\n objects it always returns false since a line contains\n no area."}, {"method_name": "contains", "method_sig": "public boolean contains (Point2D p)", "description": "Tests if a given Point2D is inside the boundary of\n this Line2D.\n This method is required to implement the Shape interface,\n but in the case of Line2D objects it always returns\n false since a line contains no area."}, {"method_name": "intersects", "method_sig": "public boolean intersects (double x,\n                          double y,\n                          double w,\n                          double h)", "description": "Tests if the interior of the Shape intersects the\n interior of a specified rectangular area.\n The rectangular area is considered to intersect the Shape\n if any point is contained in both the interior of the\n Shape and the specified rectangular area.\n \n The Shape.intersects() method allows a Shape\n implementation to conservatively return true when:\n \n\n there is a high probability that the rectangular area and the\n Shape intersect, but\n \n the calculations to accurately determine this intersection\n are prohibitively expensive.\n \n This means that for some Shapes this method might\n return true even though the rectangular area does not\n intersect the Shape.\n The Area class performs\n more accurate computations of geometric intersection than most\n Shape objects and therefore can be used if a more precise\n answer is required."}, {"method_name": "intersects", "method_sig": "public boolean intersects (Rectangle2D r)", "description": "Tests if the interior of the Shape intersects the\n interior of a specified Rectangle2D.\n The Shape.intersects() method allows a Shape\n implementation to conservatively return true when:\n \n\n there is a high probability that the Rectangle2D and the\n Shape intersect, but\n \n the calculations to accurately determine this intersection\n are prohibitively expensive.\n \n This means that for some Shapes this method might\n return true even though the Rectangle2D does not\n intersect the Shape.\n The Area class performs\n more accurate computations of geometric intersection than most\n Shape objects and therefore can be used if a more precise\n answer is required."}, {"method_name": "contains", "method_sig": "public boolean contains (double x,\n                        double y,\n                        double w,\n                        double h)", "description": "Tests if the interior of this Line2D entirely contains\n the specified set of rectangular coordinates.\n This method is required to implement the Shape interface,\n but in the case of Line2D objects it always returns\n false since a line contains no area."}, {"method_name": "contains", "method_sig": "public boolean contains (Rectangle2D r)", "description": "Tests if the interior of this Line2D entirely contains\n the specified Rectangle2D.\n This method is required to implement the Shape interface,\n but in the case of Line2D objects it always returns\n false since a line contains no area."}, {"method_name": "getBounds", "method_sig": "public Rectangle getBounds()", "description": "Returns an integer Rectangle that completely encloses the\n Shape.  Note that there is no guarantee that the\n returned Rectangle is the smallest bounding box that\n encloses the Shape, only that the Shape\n lies entirely within the indicated  Rectangle.  The\n returned Rectangle might also fail to completely\n enclose the Shape if the Shape overflows\n the limited range of the integer data type.  The\n getBounds2D method generally returns a\n tighter bounding box due to its greater flexibility in\n representation.\n\n \n Note that the\n \n definition of insideness can lead to situations where points\n on the defining outline of the shape may not be considered\n contained in the returned bounds object, but only in cases\n where those points are also not considered contained in the original\n shape.\n \n\n If a point is inside the shape according to the\n contains(point) method, then\n it must be inside the returned Rectangle bounds object\n according to the contains(point)\n method of the bounds. Specifically:\n \n\nshape.contains(x,y) requires bounds.contains(x,y)\n\n\n If a point is not inside the shape, then it might\n still be contained in the bounds object:\n \n\nbounds.contains(x,y) does not imply shape.contains(x,y)\n"}, {"method_name": "getPathIterator", "method_sig": "public PathIterator getPathIterator (AffineTransform at)", "description": "Returns an iteration object that defines the boundary of this\n Line2D.\n The iterator for this class is not multi-threaded safe,\n which means that this Line2D class does not\n guarantee that modifications to the geometry of this\n Line2D object do not affect any iterations of that\n geometry that are already in process."}, {"method_name": "getPathIterator", "method_sig": "public PathIterator getPathIterator (AffineTransform at,\n                                    double flatness)", "description": "Returns an iteration object that defines the boundary of this\n flattened Line2D.\n The iterator for this class is not multi-threaded safe,\n which means that this Line2D class does not\n guarantee that modifications to the geometry of this\n Line2D object do not affect any iterations of that\n geometry that are already in process."}, {"method_name": "clone", "method_sig": "public Object clone()", "description": "Creates a new object of the same class as this object."}]}