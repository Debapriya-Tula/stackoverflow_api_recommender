{"name": "Interface JoinRowSet", "module": "java.sql.rowset", "package": "javax.sql.rowset", "text": "The JoinRowSet interface provides a mechanism for combining related\n data from different RowSet objects into one JoinRowSet\n object, which represents an SQL JOIN.\n In other words, a JoinRowSet object acts as a\n container for the data from RowSet objects that form an SQL\n JOIN relationship.\n \n The Joinable interface provides the methods for setting,\n retrieving, and unsetting a match column, the basis for\n establishing an SQL JOIN relationship. The match column may\n alternatively be set by supplying it to the appropriate version of the\n JointRowSet method addRowSet.\n\n 1.0 Overview\n Disconnected RowSet objects (CachedRowSet objects\n and implementations extending the CachedRowSet interface)\n do not have a standard way to establish an SQL JOIN between\n RowSet objects without the expensive operation of\n reconnecting to the data source. The JoinRowSet\n interface is specifically designed to address this need.\n \n Any RowSet object\n can be added to a JoinRowSet object to become\n part of an SQL JOIN relationship. This means that both connected\n and disconnected RowSet objects can be part of a JOIN.\n RowSet objects operating in a connected environment\n (JdbcRowSet objects) are\n encouraged to use the database to which they are already\n connected to establish SQL JOIN relationships between\n tables directly. However, it is possible for a\n JdbcRowSet object to be added to a JoinRowSet object\n if necessary.\n \n Any number of RowSet objects can be added to an\n instance of JoinRowSet provided that they\n can be related in an SQL JOIN.\n By definition, the SQL JOIN statement is used to\n combine the data contained in two or more relational database tables based\n upon a common attribute. The Joinable interface provides the methods\n for establishing a common attribute, which is done by setting a\n match column. The match column commonly coincides with\n the primary key, but there is\n no requirement that the match column be the same as the primary key.\n By establishing and then enforcing column matches,\n a JoinRowSet object establishes JOIN relationships\n between RowSet objects without the assistance of an available\n relational database.\n \n The type of JOIN to be established is determined by setting\n one of the JoinRowSet constants using the method\n setJoinType. The following SQL JOIN types can be set:\n \nCROSS_JOIN\nFULL_JOIN\nINNER_JOIN - the default if no JOIN type has been set\n  LEFT_OUTER_JOIN\nRIGHT_OUTER_JOIN\n\n Note that if no type is set, the JOIN will automatically be an\n inner join. The comments for the fields in the\n JoinRowSet interface explain these JOIN types, which are\n standard SQL JOIN types.\n\n 2.0 Using a JoinRowSet Object for Creating a JOIN\n When a JoinRowSet object is created, it is empty.\n The first RowSet object to be added becomes the basis for the\n JOIN relationship.\n Applications must determine which column in each of the\n RowSet objects to be added to the JoinRowSet object\n should be the match column. All of the\n RowSet objects must contain a match column, and the values in\n each match column must be ones that can be compared to values in the other match\n columns. The columns do not have to have the same name, though they often do,\n and they do not have to store the exact same data type as long as the data types\n can be compared.\n \n A match column can be set in two ways:\n \nBy calling the Joinable method setMatchColumn\n  This is the only method that can set the match column before a RowSet\n  object is added to a JoinRowSet object. The RowSet object\n  must have implemented the Joinable interface in order to use the method\n  setMatchColumn. Once the match column value\n  has been set, this method can be used to reset the match column at any time.\n  By calling one of the versions of the JoinRowSet method\n  addRowSet that takes a column name or number (or an array of\n  column names or numbers)\n  Four of the five addRowSet methods take a match column as a parameter.\n  These four methods set or reset the match column at the time a RowSet\n  object is being added to a JoinRowSet object.\n \n3.0 Sample Usage\n\n The following code fragment adds two CachedRowSet\n objects to a JoinRowSet object. Note that in this example,\n no SQL JOIN type is set, so the default JOIN type,\n which is INNER_JOIN, is established.\n \n In the following code fragment, the table EMPLOYEES, whose match\n column is set to the first column (EMP_ID), is added to the\n JoinRowSet object jrs. Then\n the table ESSP_BONUS_PLAN, whose match column is likewise\n the EMP_ID column, is added. When this second\n table is added to jrs, only the rows in\n ESSP_BONUS_PLAN whose EMP_ID value matches an\n EMP_ID value in the EMPLOYEES table are added.\n In this case, everyone in the bonus plan is an employee, so all of the rows\n in the table ESSP_BONUS_PLAN are added to the JoinRowSet\n object.  In this example, both CachedRowSet objects being added\n have implemented the Joinable interface and can therefore call\n the Joinable method setMatchColumn.\n \n     JoinRowSet jrs = new JoinRowSetImpl();\n\n     ResultSet rs1 = stmt.executeQuery(\"SELECT * FROM EMPLOYEES\");\n     CachedRowSet empl = new CachedRowSetImpl();\n     empl.populate(rs1);\n     empl.setMatchColumn(1);\n     jrs.addRowSet(empl);\n\n     ResultSet rs2 = stmt.executeQuery(\"SELECT * FROM ESSP_BONUS_PLAN\");\n     CachedRowSet bonus = new CachedRowSetImpl();\n     bonus.populate(rs2);\n     bonus.setMatchColumn(1); // EMP_ID is the first column\n     jrs.addRowSet(bonus);\n \n\n At this point, jrs is an inside JOIN of the two RowSet objects\n based on their EMP_ID columns. The application can now browse the\n combined data as if it were browsing one single RowSet object.\n Because jrs is itself a RowSet object, an application can\n navigate or modify it using RowSet methods.\n \n     jrs.first();\n     int employeeID = jrs.getInt(1);\n     String employeeName = jrs.getString(2);\n \n\n Note that because the SQL JOIN must be enforced when an application\n adds a second or subsequent RowSet object, there\n may be an initial degradation in performance while the JOIN is\n being performed.\n \n The following code fragment adds an additional CachedRowSet object.\n In this case, the match column (EMP_ID) is set when the\n CachedRowSet object is added to the JoinRowSet object.\n \n     ResultSet rs3 = stmt.executeQuery(\"SELECT * FROM 401K_CONTRIB\");\n     CachedRowSet fourO1k = new CachedRowSetImpl();\n     four01k.populate(rs3);\n     jrs.addRowSet(four01k, 1);\n \n\n The JoinRowSet object jrs now contains values from all three\n tables. The data in each row in four01k in which the value for the\n EMP_ID column matches a value for the EMP_ID column\n in jrs has been added to jrs.\n\n 4.0 JoinRowSet Methods\n The JoinRowSet interface supplies several methods for adding\n RowSet objects and for getting information about the\n JoinRowSet object.\n \nMethods for adding one or more RowSet objects\n       These methods allow an application to add one RowSet object\n       at a time or to add multiple RowSet objects at one time. In\n       either case, the methods may specify the match column for each\n       RowSet object being added.\n   Methods for getting information\n       One method retrieves the RowSet objects in the\n       JoinRowSet object, and another method retrieves the\n       RowSet names.  A third method retrieves either the SQL\n       WHERE clause used behind the scenes to form the\n       JOIN or a text description of what the WHERE\n       clause does.\n   Methods related to the type of JOIN\n       One method sets the JOIN type, and five methods find out whether\n       the JoinRowSet object supports a given type.\n   A method to make a separate copy of the JoinRowSet object\n       This method creates a copy that can be persisted to the data source.\n ", "codes": ["public interface JoinRowSet\nextends WebRowSet"], "fields": [{"field_name": "CROSS_JOIN", "field_sig": "static final\u00a0int CROSS_JOIN", "description": "An ANSI-style JOIN providing a cross product of two tables"}, {"field_name": "INNER_JOIN", "field_sig": "static final\u00a0int INNER_JOIN", "description": "An ANSI-style JOIN providing a inner join between two tables. Any\n unmatched rows in either table of the join should be discarded."}, {"field_name": "LEFT_OUTER_JOIN", "field_sig": "static final\u00a0int LEFT_OUTER_JOIN", "description": "An ANSI-style JOIN providing a left outer join between two\n tables. In SQL, this is described where all records should be\n returned from the left side of the JOIN statement."}, {"field_name": "RIGHT_OUTER_JOIN", "field_sig": "static final\u00a0int RIGHT_OUTER_JOIN", "description": "An ANSI-style JOIN providing a right outer join between\n two tables. In SQL, this is described where all records from the\n table on the right side of the JOIN statement even if the table\n on the left has no matching record."}, {"field_name": "FULL_JOIN", "field_sig": "static final\u00a0int FULL_JOIN", "description": "An ANSI-style JOIN providing a full JOIN. Specifies that all\n rows from either table be returned regardless of matching\n records on the other table."}], "methods": [{"method_name": "addRowSet", "method_sig": "void addRowSet (Joinable rowset)\n        throws SQLException", "description": "Adds the given RowSet object to this JoinRowSet\n object. If the RowSet object\n is the first to be added to this JoinRowSet\n object, it forms the basis of the JOIN relationship to be\n established.\n \n This method should be used only when the given RowSet\n object already has a match column that was set with the Joinable\n method setMatchColumn.\n \n Note: A Joinable object is any RowSet object\n that has implemented the Joinable interface."}, {"method_name": "addRowSet", "method_sig": "void addRowSet (RowSet rowset,\n               int columnIdx)\n        throws SQLException", "description": "Adds the given RowSet object to this JoinRowSet\n object and sets the designated column as the match column for\n the RowSet object. If the RowSet object\n is the first to be added to this JoinRowSet\n object, it forms the basis of the JOIN relationship to be\n established.\n \n This method should be used when RowSet does not already have a match\n column set."}, {"method_name": "addRowSet", "method_sig": "void addRowSet (RowSet rowset,\n               String columnName)\n        throws SQLException", "description": "Adds rowset to this JoinRowSet object and\n sets the designated column as the match column. If rowset\n is the first to be added to this JoinRowSet\n object, it forms the basis for the JOIN relationship to be\n established.\n \n This method should be used when the given RowSet object\n does not already have a match column."}, {"method_name": "addRowSet", "method_sig": "void addRowSet (RowSet[] rowset,\n               int[] columnIdx)\n        throws SQLException", "description": "Adds one or more RowSet objects contained in the given\n array of RowSet objects to this JoinRowSet\n object and sets the match column for\n each of the RowSet objects to the match columns\n in the given array of column indexes. The first element in\n columnIdx is set as the match column for the first\n RowSet object in rowset, the second element of\n columnIdx is set as the match column for the second element\n in rowset, and so on.\n \n The first RowSet object added to this JoinRowSet\n object forms the basis for the JOIN relationship.\n \n This method should be used when the given RowSet object\n does not already have a match column."}, {"method_name": "addRowSet", "method_sig": "void addRowSet (RowSet[] rowset,\n               String[] columnName)\n        throws SQLException", "description": "Adds one or more RowSet objects contained in the given\n array of RowSet objects to this JoinRowSet\n object and sets the match column for\n each of the RowSet objects to the match columns\n in the given array of column names. The first element in\n columnName is set as the match column for the first\n RowSet object in rowset, the second element of\n columnName is set as the match column for the second element\n in rowset, and so on.\n \n The first RowSet object added to this JoinRowSet\n object forms the basis for the JOIN relationship.\n \n This method should be used when the given RowSet object(s)\n does not already have a match column."}, {"method_name": "getRowSets", "method_sig": "Collection<?> getRowSets()\n                  throws SQLException", "description": "Returns a Collection object containing the\n RowSet objects that have been added to this\n JoinRowSet object.\n This should return the 'n' number of RowSet contained\n within the JOIN and maintain any updates that have occurred while in\n this union."}, {"method_name": "getRowSetNames", "method_sig": "String[] getRowSetNames()\n                 throws SQLException", "description": "Returns a String array containing the names of the\n         RowSet objects added to this JoinRowSet\n         object."}, {"method_name": "toCachedRowSet", "method_sig": "CachedRowSet toCachedRowSet()\n                     throws SQLException", "description": "Creates a new CachedRowSet object containing the\n data in this JoinRowSet object, which can be saved\n to a data source using the SyncProvider object for\n the CachedRowSet object.\n \n If any updates or modifications have been applied to the JoinRowSet\n the CachedRowSet returned by the method will not be able to persist\n it's changes back to the originating rows and tables in the\n in the datasource. The CachedRowSet instance returned should not\n contain modification data and it should clear all properties of\n it's originating SQL statement. An application should reset the\n SQL statement using the RowSet.setCommand method.\n \n In order to allow changes to be persisted back to the datasource\n to the originating tables, the acceptChanges method\n should be used and called on a JoinRowSet object instance. Implementations\n can leverage the internal data and update tracking in their\n implementations to interact with the SyncProvider to persist any\n changes."}, {"method_name": "supportsCrossJoin", "method_sig": "boolean supportsCrossJoin()", "description": "Indicates if CROSS_JOIN is supported by a JoinRowSet\n implementation"}, {"method_name": "supportsInnerJoin", "method_sig": "boolean supportsInnerJoin()", "description": "Indicates if INNER_JOIN is supported by a JoinRowSet\n implementation"}, {"method_name": "supportsLeftOuterJoin", "method_sig": "boolean supportsLeftOuterJoin()", "description": "Indicates if LEFT_OUTER_JOIN is supported by a JoinRowSet\n implementation"}, {"method_name": "supportsRightOuterJoin", "method_sig": "boolean supportsRightOuterJoin()", "description": "Indicates if RIGHT_OUTER_JOIN is supported by a JoinRowSet\n implementation"}, {"method_name": "supportsFullJoin", "method_sig": "boolean supportsFullJoin()", "description": "Indicates if FULL_JOIN is supported by a JoinRowSet\n implementation"}, {"method_name": "setJoinType", "method_sig": "void setJoinType (int joinType)\n          throws SQLException", "description": "Allow the application to adjust the type of JOIN imposed\n on tables contained within the JoinRowSet object instance.\n Implementations should throw a SQLException if they do\n not support a given JOIN type."}, {"method_name": "getWhereClause", "method_sig": "String getWhereClause()\n               throws SQLException", "description": "Return a SQL-like description of the WHERE clause being used\n in a JoinRowSet object. An implementation can describe\n the WHERE clause of the SQL JOIN by supplying a SQL\n strings description of JOIN or provide a textual\n description to assist applications using a JoinRowSet"}, {"method_name": "getJoinType", "method_sig": "int getJoinType()\n         throws SQLException", "description": "Returns a int describing the set SQL JOIN type\n governing this JoinRowSet instance. The returned type will be one of\n standard JoinRowSet types: CROSS_JOIN, INNER_JOIN,\n LEFT_OUTER_JOIN, RIGHT_OUTER_JOIN or\n FULL_JOIN."}]}