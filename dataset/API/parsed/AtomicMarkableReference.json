{"name": "Class AtomicMarkableReference<V>", "module": "java.base", "package": "java.util.concurrent.atomic", "text": "An AtomicMarkableReference maintains an object reference\n along with a mark bit, that can be updated atomically.\n\n Implementation note: This implementation maintains markable\n references by creating internal objects representing \"boxed\"\n [reference, boolean] pairs.", "codes": ["public class AtomicMarkableReference<V>\nextends Object"], "fields": [], "methods": [{"method_name": "getReference", "method_sig": "public V getReference()", "description": "Returns the current value of the reference."}, {"method_name": "isMarked", "method_sig": "public boolean isMarked()", "description": "Returns the current value of the mark."}, {"method_name": "get", "method_sig": "public V get (boolean[] markHolder)", "description": "Returns the current values of both the reference and the mark.\n Typical usage is boolean[1] holder; ref = v.get(holder); ."}, {"method_name": "weakCompareAndSet", "method_sig": "public boolean weakCompareAndSet (V expectedReference,\n                                 V newReference,\n                                 boolean expectedMark,\n                                 boolean newMark)", "description": "Atomically sets the value of both the reference and mark\n to the given update values if the\n current reference is == to the expected reference\n and the current mark is equal to the expected mark.\n\n May fail\n spuriously and does not provide ordering guarantees, so is\n only rarely an appropriate alternative to compareAndSet."}, {"method_name": "compareAndSet", "method_sig": "public boolean compareAndSet (V expectedReference,\n                             V newReference,\n                             boolean expectedMark,\n                             boolean newMark)", "description": "Atomically sets the value of both the reference and mark\n to the given update values if the\n current reference is == to the expected reference\n and the current mark is equal to the expected mark."}, {"method_name": "set", "method_sig": "public void set (V newReference,\n                boolean newMark)", "description": "Unconditionally sets the value of both the reference and mark."}, {"method_name": "attemptMark", "method_sig": "public boolean attemptMark (V expectedReference,\n                           boolean newMark)", "description": "Atomically sets the value of the mark to the given update value\n if the current reference is == to the expected\n reference.  Any given invocation of this operation may fail\n (return false) spuriously, but repeated invocation\n when the current value holds the expected value and no other\n thread is also attempting to set the value will eventually\n succeed."}]}