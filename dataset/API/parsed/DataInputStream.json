{"name": "Class DataInputStream", "module": "java.base", "package": "java.io", "text": "A data input stream lets an application read primitive Java data\n types from an underlying input stream in a machine-independent\n way. An application uses a data output stream to write data that\n can later be read by a data input stream.\n \n DataInputStream is not necessarily safe for multithreaded access.\n Thread safety is optional and is the responsibility of users of\n methods in this class.", "codes": ["public class DataInputStream\nextends FilterInputStream\nimplements DataInput"], "fields": [], "methods": [{"method_name": "read", "method_sig": "public final int read (byte[] b)\n               throws IOException", "description": "Reads some number of bytes from the contained input stream and\n stores them into the buffer array b. The number of\n bytes actually read is returned as an integer. This method blocks\n until input data is available, end of file is detected, or an\n exception is thrown.\n\n If b is null, a NullPointerException is\n thrown. If the length of b is zero, then no bytes are\n read and 0 is returned; otherwise, there is an attempt\n to read at least one byte. If no byte is available because the\n stream is at end of file, the value -1 is returned;\n otherwise, at least one byte is read and stored into b.\n\n The first byte read is stored into element b[0], the\n next one into b[1], and so on. The number of bytes read\n is, at most, equal to the length of b. Let k\n be the number of bytes actually read; these bytes will be stored in\n elements b[0] through b[k-1], leaving\n elements b[k] through b[b.length-1]\n unaffected.\n\n The read(b) method has the same effect as:\n \n read(b, 0, b.length)\n "}, {"method_name": "read", "method_sig": "public final int read (byte[] b,\n                      int off,\n                      int len)\n               throws IOException", "description": "Reads up to len bytes of data from the contained\n input stream into an array of bytes.  An attempt is made to read\n as many as len bytes, but a smaller number may be read,\n possibly zero. The number of bytes actually read is returned as an\n integer.\n\n  This method blocks until input data is available, end of file is\n detected, or an exception is thrown.\n\n  If len is zero, then no bytes are read and\n 0 is returned; otherwise, there is an attempt to read at\n least one byte. If no byte is available because the stream is at end of\n file, the value -1 is returned; otherwise, at least one\n byte is read and stored into b.\n\n  The first byte read is stored into element b[off], the\n next one into b[off+1], and so on. The number of bytes read\n is, at most, equal to len. Let k be the number of\n bytes actually read; these bytes will be stored in elements\n b[off] through b[off+k-1],\n leaving elements b[off+k] through\n b[off+len-1] unaffected.\n\n  In every case, elements b[0] through\n b[off] and elements b[off+len] through\n b[b.length-1] are unaffected."}, {"method_name": "readFully", "method_sig": "public final void readFully (byte[] b)\n                     throws IOException", "description": "See the general contract of the readFully\n method of DataInput.\n \n Bytes\n for this operation are read from the contained\n input stream."}, {"method_name": "readFully", "method_sig": "public final void readFully (byte[] b,\n                            int off,\n                            int len)\n                     throws IOException", "description": "See the general contract of the readFully\n method of DataInput.\n \n Bytes\n for this operation are read from the contained\n input stream."}, {"method_name": "skipBytes", "method_sig": "public final int skipBytes (int n)\n                    throws IOException", "description": "See the general contract of the skipBytes\n method of DataInput.\n \n Bytes for this operation are read from the contained\n input stream."}, {"method_name": "readBoolean", "method_sig": "public final boolean readBoolean()\n                          throws IOException", "description": "See the general contract of the readBoolean\n method of DataInput.\n \n Bytes for this operation are read from the contained\n input stream."}, {"method_name": "readByte", "method_sig": "public final byte readByte()\n                    throws IOException", "description": "See the general contract of the readByte\n method of DataInput.\n \n Bytes\n for this operation are read from the contained\n input stream."}, {"method_name": "readUnsignedByte", "method_sig": "public final int readUnsignedByte()\n                           throws IOException", "description": "See the general contract of the readUnsignedByte\n method of DataInput.\n \n Bytes\n for this operation are read from the contained\n input stream."}, {"method_name": "readShort", "method_sig": "public final short readShort()\n                      throws IOException", "description": "See the general contract of the readShort\n method of DataInput.\n \n Bytes\n for this operation are read from the contained\n input stream."}, {"method_name": "readUnsignedShort", "method_sig": "public final int readUnsignedShort()\n                            throws IOException", "description": "See the general contract of the readUnsignedShort\n method of DataInput.\n \n Bytes\n for this operation are read from the contained\n input stream."}, {"method_name": "readChar", "method_sig": "public final char readChar()\n                    throws IOException", "description": "See the general contract of the readChar\n method of DataInput.\n \n Bytes\n for this operation are read from the contained\n input stream."}, {"method_name": "readInt", "method_sig": "public final int readInt()\n                  throws IOException", "description": "See the general contract of the readInt\n method of DataInput.\n \n Bytes\n for this operation are read from the contained\n input stream."}, {"method_name": "readLong", "method_sig": "public final long readLong()\n                    throws IOException", "description": "See the general contract of the readLong\n method of DataInput.\n \n Bytes\n for this operation are read from the contained\n input stream."}, {"method_name": "readFloat", "method_sig": "public final float readFloat()\n                      throws IOException", "description": "See the general contract of the readFloat\n method of DataInput.\n \n Bytes\n for this operation are read from the contained\n input stream."}, {"method_name": "readDouble", "method_sig": "public final double readDouble()\n                        throws IOException", "description": "See the general contract of the readDouble\n method of DataInput.\n \n Bytes\n for this operation are read from the contained\n input stream."}, {"method_name": "readLine", "method_sig": "@Deprecated\npublic final String readLine()\n                      throws IOException", "description": "See the general contract of the readLine\n method of DataInput.\n \n Bytes\n for this operation are read from the contained\n input stream."}, {"method_name": "readUTF", "method_sig": "public final String readUTF()\n                     throws IOException", "description": "See the general contract of the readUTF\n method of DataInput.\n \n Bytes\n for this operation are read from the contained\n input stream."}, {"method_name": "readUTF", "method_sig": "public static final String readUTF (DataInput in)\n                            throws IOException", "description": "Reads from the\n stream in a representation\n of a Unicode  character string encoded in\n modified UTF-8 format;\n this string of characters is then returned as a String.\n The details of the modified UTF-8 representation\n are  exactly the same as for the readUTF\n method of DataInput."}]}