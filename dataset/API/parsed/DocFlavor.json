{"name": "Class DocFlavor", "module": "java.desktop", "package": "javax.print", "text": "Class DocFlavor encapsulates an object that specifies the format in\n which print data is supplied to a DocPrintJob. \"Doc\" is a short,\n easy-to-pronounce term that means \"a piece of print data.\" The print data\n format, or \"doc flavor\", consists of two things:\n \nMIME type. This is a Multipurpose Internet Mail Extensions\n   (MIME) media type (as defined in\n   RFC 2045 and\n   RFC 2046) that specifies\n   how the print data is to be interpreted. The charset of text data should be\n   the IANA MIME-preferred name, or its canonical name if no preferred name is\n   specified. Additionally a few historical names supported by earlier\n   versions of the Java platform may be recognized. See\n   character encodings\n    for more information on the character encodings supported on the Java\n   platform.\n   Representation class name. This specifies the fully-qualified\n   name of the class of the object from which the actual print data comes, as\n   returned by the Class.getName() method. (Thus the\n   class name for byte[] is \"[B\", for char[] it is\n   \"[C\".)\n \n A DocPrintJob obtains its print data by means of interface\n Doc. A Doc object lets the DocPrintJob determine\n the doc flavor the client can supply. A Doc object also lets the\n DocPrintJob obtain an instance of the doc flavor's representation\n class, from which the DocPrintJob then obtains the actual print data.\n\n \nClient Formatted Print Data\n There are two broad categories of print data, client formatted print data and\n service formatted print data.\n \n For client formatted print data, the client determines or knows the\n print data format. For example the client may have a JPEG encoded image, a\n URL for HTML code, or a disk file containing plain text in some\n encoding, possibly obtained from an external source, and requires a way to\n describe the data format to the print service.\n \n The doc flavor's representation class is a conduit for the JPS\n DocPrintJob to obtain a sequence of characters or bytes from the\n client. The doc flavor's MIME type is one of the standard media types telling\n how to interpret the sequence of characters or bytes. For a list of standard\n media types, see the Internet Assigned Numbers Authority's (IANA's)\n Media Types Directory\n . Interface Doc provides two utility operations,\n getReaderForText and\n getStreamForBytes(), to help a Doc\n object's client extract client formatted print data.\n \n For client formatted print data, the print data representation class is\n typically one of the following (although other representation classes are\n permitted):\n \nCharacter array (char[]) -- The print data consists of the\n   Unicode characters in the array.\n   String -- The print data consists of the Unicode characters in\n   the string.\n   Character stream (java.io.Reader) -- The print\n   data consists of the Unicode characters read from the stream up to the\n   end-of-stream.\n   Byte array (byte[]) -- The print data consists of the bytes in\n   the array. The bytes are encoded in the character set specified by the doc\n   flavor's MIME type. If the MIME type does not specify a character set, the\n   default character set is US-ASCII.\n   Byte stream (java.io.InputStream) -- The\n   print data consists of the bytes read from the stream up to the\n   end-of-stream. The bytes are encoded in the character set specified by the\n   doc flavor's MIME type. If the MIME type does not specify a character set,\n   the default character set is US-ASCII.\n   Uniform Resource Locator (URL) -- The print data\n   consists of the bytes read from the URL location. The bytes are encoded in\n   the character set specified by the doc flavor's MIME type. If the MIME type\n   does not specify a character set, the default character set is US-ASCII.\n   When the representation class is a URL, the print service itself\n   accesses and downloads the document directly from its URL address,\n   without involving the client. The service may be some form of network print\n   service which is executing in a different environment. This means you\n   should not use a URL print data flavor to print a document at a\n   restricted URL that the client can see but the printer cannot see.\n   This also means you should not use a URL print data flavor to print\n   a document stored in a local file that is not available at a URL\n   accessible independently of the client. For example, a file that is not\n   served up by an HTTP server or FTP server. To print such documents, let the\n   client open an input stream on the URL or file and use an input\n   stream data flavor.\n \n\nDefault and Platform Encodings\n For byte print data where the doc flavor's MIME type does not include a\n charset parameter, the Java Print Service instance assumes the\n US-ASCII character set by default. This is in accordance with\n RFC 2046, which says the\n default character set is US-ASCII. Note that US-ASCII is a subset of UTF-8,\n so in the future this may be widened if a future RFC endorses UTF-8 as the\n default in a compatible manner.\n \n Also note that this is different than the behaviour of the Java runtime when\n interpreting a stream of bytes as text data. That assumes the default\n encoding for the user's locale. Thus, when spooling a file in local encoding\n to a Java Print Service it is important to correctly specify the encoding.\n Developers working in the English locales should be particularly conscious of\n this, as their platform encoding corresponds to the default mime charset. By\n this coincidence that particular case may work without specifying the\n encoding of platform data.\n \n Every instance of the Java virtual machine has a default character encoding\n determined during virtual-machine startup and typically depends upon the\n locale and charset being used by the underlying operating system. In a\n distributed environment there is no guarantee that two VM share the same\n default encoding. Thus clients which want to stream platform encoded text\n data from the host platform to a Java Print Service instance must explicitly\n declare the charset and not rely on defaults.\n \n The preferred form is the official IANA primary name for an encoding.\n Applications which stream text data should always specify the charset in the\n mime type, which necessitates obtaining the encoding of the host platform for\n data (eg files) stored in that platform's encoding. A CharSet which\n corresponds to this and is suitable for use in a mime-type for a\n DocFlavor can be obtained from\n DocFlavor.hostEncoding This may not always be\n the primary IANA name but is guaranteed to be understood by this VM. For\n common flavors, the pre-defined *HOST DocFlavors may be used.\n \n See character\n encodings for more information on the character encodings supported on\n the Java platform.\n\n \nRecommended DocFlavors\n The Java Print Service API does not define any mandatorily supported\n DocFlavors. However, here are some examples of MIME types that a Java\n Print Service instance might support for client formatted print data. Nested\n classes inside class DocFlavor declare predefined static constant\n DocFlavor objects for these example doc flavors; class\n DocFlavor's constructor can be used to create an arbitrary doc\n flavor.\n \nPreformatted text\n   \nMIME-Types and their descriptions\n\n\nMIME-Type\n       Description\n   \n\n\n\"text/plain\"\nPlain text in the default character set (US-ASCII)\n     \n \"text/plain; charset=xxx\"\nPlain text in character set xxx\n\n\"text/html\"\nHyperText Markup Language in the default character set (US-ASCII)\n     \n \"text/html; charset=xxx\"\nHyperText Markup Language in character set xxx\n\n\n   In general, preformatted text print data is provided either in a character\n   oriented representation class (character array, String, Reader) or in a\n   byte oriented representation class (byte array, InputStream, URL).\n   Preformatted page description language (PDL) documents\n   \nMIME-Types and their descriptions\n\n\nMIME-Type\n       Description\n   \n\n\n\"application/pdf\"\nPortable Document Format document\n     \n\"application/postscript\"\nPostScript document\n     \n\"application/vnd.hp-PCL\"\nPrinter Control Language document\n   \n\n   In general, preformatted PDL print data is provided in a byte oriented\n   representation class (byte array, InputStream, URL).\n   Preformatted images\n   \nMIME-Types and their descriptions\n\n\nMIME-Type\n       Description\n   \n\n\n\"image/gif\"\nGraphics Interchange Format image\n     \n\"image/jpeg\"\nJoint Photographic Experts Group image\n     \n\"image/png\"\nPortable Network Graphics image\n   \n\n   In general, preformatted image print data is provided in a byte oriented\n   representation class (byte array, InputStream, URL).\n   Preformatted autosense print data\n   \nMIME-Types and their descriptions\n\n\nMIME-Type\n       Description\n   \n\n\n\"application/octet-stream\"\nThe print data format is unspecified (just an octet stream)\n   \n\n   The printer decides how to interpret the print data; the way this\n   \"autosensing\" works is implementation dependent. In general, preformatted\n   autosense print data is provided in a byte oriented representation class\n   (byte array, InputStream, URL).\n \n\nService Formatted Print Data\n For service formatted print data, the Java Print Service instance\n determines the print data format. The doc flavor's representation class\n denotes an interface whose methods the DocPrintJob invokes to\n determine the content to be printed -- such as a renderable image interface\n or a Java printable interface. The doc flavor's MIME type is the special\n value \"application/x-java-jvm-local-objectref\" indicating the client\n will supply a reference to a Java object that implements the interface named\n as the representation class. This MIME type is just a placeholder; what's\n important is the print data representation class.\n \n For service formatted print data, the print data representation class is\n typically one of the following (although other representation classes are\n permitted). Nested classes inside class DocFlavor declare predefined\n static constant DocFlavor objects for these example doc flavors;\n class DocFlavor's constructor can be used to create an arbitrary doc\n flavor.\n \nRenderable image object -- The client supplies an object that\n   implements interface\n   RenderableImage. The\n   printer calls methods in that interface to obtain the image to be printed.\n   Printable object -- The client supplies an object that implements\n   interface Printable. The printer calls\n   methods in that interface to obtain the pages to be printed, one by one.\n   For each page, the printer supplies a graphics context, and whatever the\n   client draws in that graphics context gets printed.\n   Pageable object -- The client supplies an object that implements\n   interface Pageable. The printer calls\n   methods in that interface to obtain the pages to be printed, one by one.\n   For each page, the printer supplies a graphics context, and whatever the\n   client draws in that graphics context gets printed.\n \n\nPre-defined Doc Flavors\n A Java Print Service instance is not required to support the\n following print data formats and print data representation classes. In fact,\n a developer using this class should never assume that a particular\n print service supports the document types corresponding to these pre-defined\n doc flavors. Always query the print service to determine what doc flavors it\n supports. However, developers who have print services that support these doc\n flavors are encouraged to refer to the predefined singleton instances created\n here.\n \nPlain text print data provided through a byte stream. Specifically, the\n   following doc flavors are recommended to be supported:\n   \u00b7\u00a0\u00a0\n   (\"text/plain\", \"java.io.InputStream\")\n\u00b7\u00a0\u00a0\n   (\"text/plain; charset=us-ascii\", \"java.io.InputStream\")\n\u00b7\u00a0\u00a0\n   (\"text/plain; charset=utf-8\", \"java.io.InputStream\")\nRenderable image objects. Specifically, the following doc flavor is\n   recommended to be supported:\n   \u00b7\u00a0\u00a0\n   (\"application/x-java-jvm-local-objectref\", \"java.awt.image.renderable.RenderableImage\")\n\n A Java Print Service instance is allowed to support any other doc flavors (or\n none) in addition to the above mandatory ones, at the implementation's\n choice.\n \n Support for the above doc flavors is desirable so a printing client can rely\n on being able to print on any JPS printer, regardless of which doc flavors\n the printer supports. If the printer doesn't support the client's preferred\n doc flavor, the client can at least print plain text, or the client can\n convert its data to a renderable image and print the image.\n \n Furthermore, every Java Print Service instance must fulfill these\n requirements for processing plain text print data:\n \nThe character pair carriage return-line feed (CR-LF) means \"go to\n   column 1 of the next line.\"\n   A carriage return (CR) character standing by itself means \"go to column\n   1 of the next line.\"\n   A line feed (LF) character standing by itself means \"go to column 1 of\n   the next line.\"\n \n The client must itself perform all plain text print data formatting not\n addressed by the above requirements.\n\n Design Rationale\n Class DocFlavor in package javax.print is similar to class\n DataFlavor. Class DataFlavor is not\n used in the Java Print Service (JPS) API for three reasons which are all\n rooted in allowing the JPS API to be shared by other print services APIs\n which may need to run on Java profiles which do not include all of the Java\n Platform, Standard Edition.\n \nThe JPS API is designed to be used in Java profiles which do not\n   support AWT.\n   The implementation of class java.awt.datatransfer.DataFlavor\n   does not guarantee that equivalent data flavors will have the same\n   serialized representation. DocFlavor does, and can be used in\n   services which need this.\n   The implementation of class java.awt.datatransfer.DataFlavor\n   includes a human presentable name as part of the serialized representation.\n   This is not appropriate as part of a service matching constraint.\n \n Class DocFlavor's serialized representation uses the following\n canonical form of a MIME type string. Thus, two doc flavors with MIME types\n that are not identical but that are equivalent (that have the same canonical\n form) may be considered equal.\n \nThe media type, media subtype, and parameters are retained, but all\n   comments and whitespace characters are discarded.\n   The media type, media subtype, and parameter names are converted to\n   lowercase.\n   The parameter values retain their original case, except a charset\n   parameter value for a text media type is converted to lowercase.\n   Quote characters surrounding parameter values are removed.\n   Quoting backslash characters inside parameter values are removed.\n   The parameters are arranged in ascending order of parameter name.\n \n Class DocFlavor's serialized representation also contains the\n fully-qualified class name of the representation class (a\n String object), rather than the representation class itself (a\n Class object). This allows a client to examine the doc flavors a Java\n Print Service instance supports without having to load the representation\n classes, which may be problematic for limited-resource clients.", "codes": ["public class DocFlavor\nextends Object\nimplements Serializable, Cloneable"], "fields": [{"field_name": "hostEncoding", "field_sig": "public static final\u00a0String hostEncoding", "description": "A string representing the host operating system encoding. This will\n follow the conventions documented in\n \nRFC\u00a02278:\u00a0IANA Charset Registration Procedures\n except where historical names are returned for compatibility with\n previous versions of the Java platform. The value returned from method is\n valid only for the VM which returns it, for use in a DocFlavor.\n This is the charset for all the \"HOST\" pre-defined DocFlavors in\n the executing VM."}], "methods": [{"method_name": "getMimeType", "method_sig": "public String getMimeType()", "description": "Returns this doc flavor object's MIME type string based on the canonical\n form. Each parameter value is enclosed in quotes."}, {"method_name": "getMediaType", "method_sig": "public String getMediaType()", "description": "Returns this doc flavor object's media type (from the MIME type)."}, {"method_name": "getMediaSubtype", "method_sig": "public String getMediaSubtype()", "description": "Returns this doc flavor object's media subtype (from the MIME type)."}, {"method_name": "getParameter", "method_sig": "public String getParameter (String paramName)", "description": "Returns a String representing a MIME parameter. Mime types may\n include parameters which are usually optional. The charset for text types\n is a commonly useful example. This convenience method will return the\n value of the specified parameter if one was specified in the mime type\n for this flavor."}, {"method_name": "getRepresentationClassName", "method_sig": "public String getRepresentationClassName()", "description": "Returns the name of this doc flavor object's representation class."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Converts this DocFlavor to a string."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Returns a hash code for this doc flavor object."}, {"method_name": "equals", "method_sig": "public boolean equals (Object obj)", "description": "Determines if this doc flavor object is equal to the given object. The\n two are equal if the given object is not null, is an instance of\n DocFlavor, has a MIME type equivalent to this doc flavor object's\n MIME type (that is, the MIME types have the same media type, media\n subtype, and parameters), and has the same representation class name as\n this doc flavor object. Thus, if two doc flavor objects' MIME types are\n the same except for comments, they are considered equal. However, two doc\n flavor objects with MIME types of \"text/plain\" and \"text/plain;\n charset=US-ASCII\" are not considered equal, even though they represent\n the same media type (because the default character set for plain text is\n US-ASCII)."}]}