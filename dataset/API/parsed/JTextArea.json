{"name": "Class JTextArea", "module": "java.desktop", "package": "javax.swing", "text": "A JTextArea is a multi-line area that displays plain text.\n It is intended to be a lightweight component that provides source\n compatibility with the java.awt.TextArea class where it can\n reasonably do so.\n You can find information and examples of using all the text components in\n Using Text Components,\n a section in The Java Tutorial.\n\n This component has capabilities not found in the\n java.awt.TextArea class.  The superclass should be\n consulted for additional capabilities.\n Alternative multi-line text classes with\n more capabilities are JTextPane and JEditorPane.\n \n The java.awt.TextArea internally handles scrolling.\n JTextArea is different in that it doesn't manage scrolling,\n but implements the swing Scrollable interface.  This allows it\n to be placed inside a JScrollPane if scrolling\n behavior is desired, and used directly if scrolling is not desired.\n \n The java.awt.TextArea has the ability to do line wrapping.\n This was controlled by the horizontal scrolling policy.  Since\n scrolling is not done by JTextArea directly, backward\n compatibility must be provided another way.  JTextArea has\n a bound property for line wrapping that controls whether or\n not it will wrap lines.  By default, the line wrapping property\n is set to false (not wrapped).\n \njava.awt.TextArea has two properties rows\n and columns that are used to determine the preferred size.\n JTextArea uses these properties to indicate the\n preferred size of the viewport when placed inside a JScrollPane\n to match the functionality provided by java.awt.TextArea.\n JTextArea has a preferred size of what is needed to\n display all of the text, so that it functions properly inside of\n a JScrollPane.  If the value for rows\n or columns is equal to zero,\n the preferred size along that axis is used for\n the viewport preferred size along the same axis.\n \n The java.awt.TextArea could be monitored for changes by adding\n a TextListener for TextEvents.\n In the JTextComponent based\n components, changes are broadcasted from the model via a\n DocumentEvent to DocumentListeners.\n The DocumentEvent gives\n the location of the change and the kind of change if desired.\n The code fragment might look something like:\n \n    DocumentListener myListener = ??;\n    JTextArea myArea = ??;\n    myArea.getDocument().addDocumentListener(myListener);\n \n\nNewlines\n\n For a discussion on how newlines are handled, see\n DefaultEditorKit.\n \n\nWarning: Swing is not thread safe. For more\n information see Swing's Threading\n Policy.\n \nWarning:\n Serialized objects of this class will not be compatible with\n future Swing releases. The current serialization support is\n appropriate for short term storage or RMI between applications running\n the same version of Swing.  As of 1.4, support for long term storage\n of all JavaBeans\u2122\n has been added to the java.beans package.\n Please see XMLEncoder.", "codes": ["@JavaBean(defaultProperty=\"UIClassID\",\n          description=\"A multi-line area that displays plain text.\")\npublic class JTextArea\nextends JTextComponent"], "fields": [], "methods": [{"method_name": "getUIClassID", "method_sig": "@BeanProperty(bound=false)\npublic String getUIClassID()", "description": "Returns the class ID for the UI."}, {"method_name": "createDefaultModel", "method_sig": "protected Document createDefaultModel()", "description": "Creates the default implementation of the model\n to be used at construction if one isn't explicitly\n given.  A new instance of PlainDocument is returned."}, {"method_name": "setTabSize", "method_sig": "@BeanProperty(preferred=true,\n              description=\"the number of characters to expand tabs to\")\npublic void setTabSize (int size)", "description": "Sets the number of characters to expand tabs to.\n This will be multiplied by the maximum advance for\n variable width fonts.  A PropertyChange event (\"tabSize\") is fired\n when the tab size changes."}, {"method_name": "getTabSize", "method_sig": "public int getTabSize()", "description": "Gets the number of characters used to expand tabs.  If the document is\n null or doesn't have a tab setting, return a default of 8."}, {"method_name": "setLineWrap", "method_sig": "@BeanProperty(preferred=true,\n              description=\"should lines be wrapped\")\npublic void setLineWrap (boolean wrap)", "description": "Sets the line-wrapping policy of the text area.  If set\n to true the lines will be wrapped if they are too long\n to fit within the allocated width.  If set to false,\n the lines will always be unwrapped.  A PropertyChange\n event (\"lineWrap\") is fired when the policy is changed.\n By default this property is false."}, {"method_name": "getLineWrap", "method_sig": "public boolean getLineWrap()", "description": "Gets the line-wrapping policy of the text area.  If set\n to true the lines will be wrapped if they are too long\n to fit within the allocated width.  If set to false,\n the lines will always be unwrapped."}, {"method_name": "setWrapStyleWord", "method_sig": "@BeanProperty(description=\"should wrapping occur at word boundaries\")\npublic void setWrapStyleWord (boolean word)", "description": "Sets the style of wrapping used if the text area is wrapping\n lines.  If set to true the lines will be wrapped at word\n boundaries (whitespace) if they are too long\n to fit within the allocated width.  If set to false,\n the lines will be wrapped at character boundaries.\n By default this property is false."}, {"method_name": "getWrapStyleWord", "method_sig": "public boolean getWrapStyleWord()", "description": "Gets the style of wrapping used if the text area is wrapping\n lines.  If set to true the lines will be wrapped at word\n boundaries (ie whitespace) if they are too long\n to fit within the allocated width.  If set to false,\n the lines will be wrapped at character boundaries."}, {"method_name": "getLineOfOffset", "method_sig": "public int getLineOfOffset (int offset)\n                    throws BadLocationException", "description": "Translates an offset into the components text to a\n line number."}, {"method_name": "getLineCount", "method_sig": "@BeanProperty(bound=false)\npublic int getLineCount()", "description": "Determines the number of lines contained in the area."}, {"method_name": "getLineStartOffset", "method_sig": "public int getLineStartOffset (int line)\n                       throws BadLocationException", "description": "Determines the offset of the start of the given line."}, {"method_name": "getLineEndOffset", "method_sig": "public int getLineEndOffset (int line)\n                     throws BadLocationException", "description": "Determines the offset of the end of the given line."}, {"method_name": "insert", "method_sig": "public void insert (String str,\n                   int pos)", "description": "Inserts the specified text at the specified position.  Does nothing\n if the model is null or if the text is null or empty."}, {"method_name": "append", "method_sig": "public void append (String str)", "description": "Appends the given text to the end of the document.  Does nothing if\n the model is null or the string is null or empty."}, {"method_name": "replaceRange", "method_sig": "public void replaceRange (String str,\n                         int start,\n                         int end)", "description": "Replaces text from the indicated start to end position with the\n new text specified.  Does nothing if the model is null.  Simply\n does a delete if the new string is null or empty."}, {"method_name": "getRows", "method_sig": "public int getRows()", "description": "Returns the number of rows in the TextArea."}, {"method_name": "setRows", "method_sig": "@BeanProperty(bound=false,\n              description=\"the number of rows preferred for display\")\npublic void setRows (int rows)", "description": "Sets the number of rows for this TextArea.  Calls invalidate() after\n setting the new value."}, {"method_name": "getRowHeight", "method_sig": "protected int getRowHeight()", "description": "Defines the meaning of the height of a row.  This defaults to\n the height of the font."}, {"method_name": "getColumns", "method_sig": "public int getColumns()", "description": "Returns the number of columns in the TextArea."}, {"method_name": "setColumns", "method_sig": "@BeanProperty(bound=false,\n              description=\"the number of columns preferred for display\")\npublic void setColumns (int columns)", "description": "Sets the number of columns for this TextArea.  Does an invalidate()\n after setting the new value."}, {"method_name": "getColumnWidth", "method_sig": "protected int getColumnWidth()", "description": "Gets column width.\n The meaning of what a column is can be considered a fairly weak\n notion for some fonts.  This method is used to define the width\n of a column.  By default this is defined to be the width of the\n character m for the font used.  This method can be\n redefined to be some alternative amount."}, {"method_name": "getPreferredSize", "method_sig": "public Dimension getPreferredSize()", "description": "Returns the preferred size of the TextArea.  This is the\n maximum of the size needed to display the text and the\n size requested for the viewport."}, {"method_name": "setFont", "method_sig": "public void setFont (Font f)", "description": "Sets the current font.  This removes cached row height and column\n width so the new font will be reflected, and calls revalidate()."}, {"method_name": "paramString", "method_sig": "protected String paramString()", "description": "Returns a string representation of this JTextArea. This method\n is intended to be used only for debugging purposes, and the\n content and format of the returned string may vary between\n implementations. The returned string may be empty but may not\n be null."}, {"method_name": "getScrollableTracksViewportWidth", "method_sig": "@BeanProperty(bound=false)\npublic boolean getScrollableTracksViewportWidth()", "description": "Returns true if a viewport should always force the width of this\n Scrollable to match the width of the viewport.  This is implemented\n to return true if the line wrapping policy is true, and false\n if lines are not being wrapped."}, {"method_name": "getPreferredScrollableViewportSize", "method_sig": "@BeanProperty(bound=false)\npublic Dimension getPreferredScrollableViewportSize()", "description": "Returns the preferred size of the viewport if this component\n is embedded in a JScrollPane.  This uses the desired column\n and row settings if they have been set, otherwise the superclass\n behavior is used."}, {"method_name": "getScrollableUnitIncrement", "method_sig": "public int getScrollableUnitIncrement (Rectangle visibleRect,\n                                      int orientation,\n                                      int direction)", "description": "Components that display logical rows or columns should compute\n the scroll increment that will completely expose one new row\n or column, depending on the value of orientation.  This is implemented\n to use the values returned by the getRowHeight and\n getColumnWidth methods.\n \n Scrolling containers, like JScrollPane, will use this method\n each time the user requests a unit scroll."}, {"method_name": "getAccessibleContext", "method_sig": "@BeanProperty(bound=false)\npublic AccessibleContext getAccessibleContext()", "description": "Gets the AccessibleContext associated with this JTextArea.\n For JTextAreas, the AccessibleContext takes the form of an\n AccessibleJTextArea.\n A new AccessibleJTextArea instance is created if necessary."}]}