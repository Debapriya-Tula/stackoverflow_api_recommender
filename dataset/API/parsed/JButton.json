{"name": "Class JButton", "module": "java.desktop", "package": "javax.swing", "text": "An implementation of a \"push\" button.\n \n Buttons can be configured, and to some degree controlled, by\n Actions.  Using an\n Action with a button has many benefits beyond directly\n configuring a button.  Refer to \n Swing Components Supporting Action for more\n details, and you can find more information in How\n to Use Actions, a section in The Java Tutorial.\n \n See How to Use Buttons, Check Boxes, and Radio Buttons\n in The Java Tutorial\n for information and examples of using buttons.\n \nWarning: Swing is not thread safe. For more\n information see Swing's Threading\n Policy.\n \nWarning:\n Serialized objects of this class will not be compatible with\n future Swing releases. The current serialization support is\n appropriate for short term storage or RMI between applications running\n the same version of Swing.  As of 1.4, support for long term storage\n of all JavaBeans\u2122\n has been added to the java.beans package.\n Please see XMLEncoder.", "codes": ["@JavaBean(defaultProperty=\"UIClassID\",\n          description=\"An implementation of a \\\"push\\\" button.\")\npublic class JButton\nextends AbstractButton\nimplements Accessible"], "fields": [], "methods": [{"method_name": "updateUI", "method_sig": "public void updateUI()", "description": "Resets the UI property to a value from the current look and\n feel."}, {"method_name": "getUIClassID", "method_sig": "@BeanProperty(bound=false,\n              expert=true,\n              description=\"A string that specifies the name of the L&F class.\")\npublic String getUIClassID()", "description": "Returns a string that specifies the name of the L&F class\n that renders this component."}, {"method_name": "isDefaultButton", "method_sig": "@BeanProperty(bound=false,\n              description=\"Whether or not this button is the default button\")\npublic boolean isDefaultButton()", "description": "Gets the value of the defaultButton property,\n which if true means that this button is the current\n default button for its JRootPane.\n Most look and feels render the default button\n differently, and may potentially provide bindings\n to access the default button."}, {"method_name": "isDefaultCapable", "method_sig": "public boolean isDefaultCapable()", "description": "Gets the value of the defaultCapable property."}, {"method_name": "setDefaultCapable", "method_sig": "@BeanProperty(visualUpdate=true,\n              description=\"Whether or not this button can be the default button\")\npublic void setDefaultCapable (boolean defaultCapable)", "description": "Sets the defaultCapable property,\n which determines whether this button can be\n made the default button for its root pane.\n The default value of the defaultCapable\n property is true unless otherwise\n specified by the look and feel."}, {"method_name": "removeNotify", "method_sig": "public void removeNotify()", "description": "Overrides JComponent.removeNotify to check if\n this button is currently set as the default button on the\n RootPane, and if so, sets the RootPane's\n default button to null to ensure the\n RootPane doesn't hold onto an invalid button reference."}, {"method_name": "paramString", "method_sig": "protected String paramString()", "description": "Returns a string representation of this JButton.\n This method is intended to be used only for debugging purposes, and the\n content and format of the returned string may vary between\n implementations. The returned string may be empty but may not\n be null."}, {"method_name": "getAccessibleContext", "method_sig": "@BeanProperty(bound=false,\n              expert=true,\n              description=\"The AccessibleContext associated with this Button.\")\npublic AccessibleContext getAccessibleContext()", "description": "Gets the AccessibleContext associated with this\n JButton. For JButtons,\n the AccessibleContext takes the form of an\n AccessibleJButton.\n A new AccessibleJButton instance is created if necessary."}]}