{"name": "Class SourceCodeAnalysis", "module": "jdk.jshell", "package": "jdk.jshell", "text": "Provides analysis utilities for source code input.\n Optional functionality that provides for a richer interactive experience.\n Includes completion analysis:\n Is the input a complete snippet of code?\n Do I need to prompt for more input?\n Would adding a semicolon make it complete?\n Is there more than one snippet?\n etc.\n Also includes completion suggestions, as might be used in tab-completion.", "codes": ["public abstract class SourceCodeAnalysis\nextends Object"], "fields": [], "methods": [{"method_name": "analyzeCompletion", "method_sig": "public abstract SourceCodeAnalysis.CompletionInfo analyzeCompletion (String input)", "description": "Given an input string, find the first snippet of code (one statement,\n definition, import, or expression) and evaluate if it is complete."}, {"method_name": "completionSuggestions", "method_sig": "public abstract List<SourceCodeAnalysis.Suggestion> completionSuggestions (String input,\n                                                                          int cursor,\n                                                                          int[] anchor)", "description": "Compute possible follow-ups for the given input.\n Uses information from the current JShell state, including\n type information, to filter the suggestions."}, {"method_name": "documentation", "method_sig": "public abstract List<SourceCodeAnalysis.Documentation> documentation (String input,\n                                                                     int cursor,\n                                                                     boolean computeJavadoc)", "description": "Compute documentation for the given user's input. Multiple Documentation objects may\n be returned when multiple elements match the user's input (like for overloaded methods)."}, {"method_name": "analyzeType", "method_sig": "public abstract String analyzeType (String code,\n                                   int cursor)", "description": "Infer the type of the given expression. The expression spans from the beginning of code\n to the given cursor position. Returns null if the type of the expression cannot\n be inferred."}, {"method_name": "listQualifiedNames", "method_sig": "public abstract SourceCodeAnalysis.QualifiedNames listQualifiedNames (String code,\n                                                                     int cursor)", "description": "List qualified names known for the simple name in the given code immediately\n to the left of the given cursor position. The qualified names are gathered by inspecting the\n classpath used by eval (see JShell.addToClasspath(java.lang.String))."}, {"method_name": "wrapper", "method_sig": "public abstract SourceCodeAnalysis.SnippetWrapper wrapper (Snippet snippet)", "description": "Returns the wrapper information for the Snippet. The wrapper changes as\n the environment changes, so calls to this method at different times may\n yield different results."}, {"method_name": "wrappers", "method_sig": "public abstract List<SourceCodeAnalysis.SnippetWrapper> wrappers (String input)", "description": "Returns the wrapper information for the snippet within the\n input source string.\n \n Wrapper information for malformed and incomplete\n snippets also generate wrappers. The list is in snippet encounter\n order. The wrapper changes as the environment changes, so calls to this\n method at different times may yield different results.\n \n The input should be\n exactly one complete snippet of source code, that is, one expression,\n statement, variable declaration, method declaration, class declaration,\n or import.\n To break arbitrary input into individual complete snippets, use\n analyzeCompletion(String).\n \n The wrapper may not match that returned by\n wrapper(Snippet),\n were the source converted to a Snippet."}, {"method_name": "sourceToSnippets", "method_sig": "public abstract List<Snippet> sourceToSnippets (String input)", "description": "Converts the source code of a snippet into a Snippet object (or\n list of Snippet objects in the case of some var declarations,\n e.g.: int x, y, z;).\n Does not install the snippets: declarations are not\n accessible by other snippets; imports are not added.\n Does not execute the snippets.\n \n Queries may be done on the Snippet object. The Snippet.id()\n will be \"*UNASSOCIATED*\".\n The returned snippets are not associated with the\n JShell instance, so attempts to pass them to JShell\n methods will throw an IllegalArgumentException.\n They will not appear in queries for snippets --\n for example, JShell.snippets().\n \n Restrictions on the input are as in JShell.eval.\n \n Only preliminary compilation is performed, sufficient to build the\n Snippet.  Snippets known to be erroneous, are returned as\n ErroneousSnippet, other snippets may or may not be in error."}, {"method_name": "dependents", "method_sig": "public abstract Collection<Snippet> dependents (Snippet snippet)", "description": "Returns a collection of Snippets which might need updating if the\n given Snippet is updated. The returned collection is designed to\n be inclusive and may include many false positives."}]}