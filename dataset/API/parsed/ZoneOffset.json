{"name": "Class ZoneOffset", "module": "java.base", "package": "java.time", "text": "A time-zone offset from Greenwich/UTC, such as +02:00.\n \n A time-zone offset is the amount of time that a time-zone differs from Greenwich/UTC.\n This is usually a fixed number of hours and minutes.\n \n Different parts of the world have different time-zone offsets.\n The rules for how offsets vary by place and time of year are captured in the\n ZoneId class.\n \n For example, Paris is one hour ahead of Greenwich/UTC in winter and two hours\n ahead in summer. The ZoneId instance for Paris will reference two\n ZoneOffset instances - a +01:00 instance for winter,\n and a +02:00 instance for summer.\n \n In 2008, time-zone offsets around the world extended from -12:00 to +14:00.\n To prevent any problems with that range being extended, yet still provide\n validation, the range of offsets is restricted to -18:00 to 18:00 inclusive.\n \n This class is designed for use with the ISO calendar system.\n The fields of hours, minutes and seconds make assumptions that are valid for the\n standard ISO definitions of those fields. This class may be used with other\n calendar systems providing the definition of the time fields matches those\n of the ISO calendar system.\n \n Instances of ZoneOffset must be compared using equals(java.lang.Object).\n Implementations may choose to cache certain common offsets, however\n applications must not rely on such caching.\n\n \n This is a value-based\n class; use of identity-sensitive operations (including reference equality\n (==), identity hash code, or synchronization) on instances of\n ZoneOffset may have unpredictable results and should be avoided.\n The equals method should be used for comparisons.", "codes": ["public final class ZoneOffset\nextends ZoneId\nimplements TemporalAccessor, TemporalAdjuster, Comparable<ZoneOffset>, Serializable"], "fields": [{"field_name": "UTC", "field_sig": "public static final\u00a0ZoneOffset UTC", "description": "The time-zone offset for UTC, with an ID of 'Z'."}, {"field_name": "MIN", "field_sig": "public static final\u00a0ZoneOffset MIN", "description": "Constant for the minimum supported offset."}, {"field_name": "MAX", "field_sig": "public static final\u00a0ZoneOffset MAX", "description": "Constant for the maximum supported offset."}], "methods": [{"method_name": "of", "method_sig": "public static ZoneOffset of (String offsetId)", "description": "Obtains an instance of ZoneOffset using the ID.\n \n This method parses the string ID of a ZoneOffset to\n return an instance. The parsing accepts all the formats generated by\n getId(), plus some additional formats:\n \nZ - for UTC\n +h\n+hh\n+hh:mm\n-hh:mm\n+hhmm\n-hhmm\n+hh:mm:ss\n-hh:mm:ss\n+hhmmss\n-hhmmss\n\n Note that \u00b1 means either the plus or minus symbol.\n \n The ID of the returned offset will be normalized to one of the formats\n described by getId().\n \n The maximum supported range is from +18:00 to -18:00 inclusive."}, {"method_name": "ofHours", "method_sig": "public static ZoneOffset ofHours (int hours)", "description": "Obtains an instance of ZoneOffset using an offset in hours."}, {"method_name": "ofHoursMinutes", "method_sig": "public static ZoneOffset ofHoursMinutes (int hours,\n                                        int minutes)", "description": "Obtains an instance of ZoneOffset using an offset in\n hours and minutes.\n \n The sign of the hours and minutes components must match.\n Thus, if the hours is negative, the minutes must be negative or zero.\n If the hours is zero, the minutes may be positive, negative or zero."}, {"method_name": "ofHoursMinutesSeconds", "method_sig": "public static ZoneOffset ofHoursMinutesSeconds (int hours,\n                                               int minutes,\n                                               int seconds)", "description": "Obtains an instance of ZoneOffset using an offset in\n hours, minutes and seconds.\n \n The sign of the hours, minutes and seconds components must match.\n Thus, if the hours is negative, the minutes and seconds must be negative or zero."}, {"method_name": "from", "method_sig": "public static ZoneOffset from (TemporalAccessor temporal)", "description": "Obtains an instance of ZoneOffset from a temporal object.\n \n This obtains an offset based on the specified temporal.\n A TemporalAccessor represents an arbitrary set of date and time information,\n which this factory converts to an instance of ZoneOffset.\n \n A TemporalAccessor represents some form of date and time information.\n This factory converts the arbitrary temporal object to an instance of ZoneOffset.\n \n The conversion uses the TemporalQueries.offset() query, which relies\n on extracting the OFFSET_SECONDS field.\n \n This method matches the signature of the functional interface TemporalQuery\n allowing it to be used as a query via method reference, ZoneOffset::from."}, {"method_name": "ofTotalSeconds", "method_sig": "public static ZoneOffset ofTotalSeconds (int totalSeconds)", "description": "Obtains an instance of ZoneOffset specifying the total offset in seconds\n \n The offset must be in the range -18:00 to +18:00, which corresponds to -64800 to +64800."}, {"method_name": "getTotalSeconds", "method_sig": "public int getTotalSeconds()", "description": "Gets the total zone offset in seconds.\n \n This is the primary way to access the offset amount.\n It returns the total of the hours, minutes and seconds fields as a\n single offset that can be added to a time."}, {"method_name": "getId", "method_sig": "public String getId()", "description": "Gets the normalized zone offset ID.\n \n The ID is minor variation to the standard ISO-8601 formatted string\n for the offset. There are three formats:\n \nZ - for UTC (ISO-8601)\n +hh:mm or -hh:mm - if the seconds are zero (ISO-8601)\n +hh:mm:ss or -hh:mm:ss - if the seconds are non-zero (not ISO-8601)\n "}, {"method_name": "getRules", "method_sig": "public ZoneRules getRules()", "description": "Gets the associated time-zone rules.\n \n The rules will always return this offset when queried.\n The implementation class is immutable, thread-safe and serializable."}, {"method_name": "isSupported", "method_sig": "public boolean isSupported (TemporalField field)", "description": "Checks if the specified field is supported.\n \n This checks if this offset can be queried for the specified field.\n If false, then calling the range and\n get methods will throw an exception.\n \n If the field is a ChronoField then the query is implemented here.\n The OFFSET_SECONDS field returns true.\n All other ChronoField instances will return false.\n \n If the field is not a ChronoField, then the result of this method\n is obtained by invoking TemporalField.isSupportedBy(TemporalAccessor)\n passing this as the argument.\n Whether the field is supported is determined by the field."}, {"method_name": "range", "method_sig": "public ValueRange range (TemporalField field)", "description": "Gets the range of valid values for the specified field.\n \n The range object expresses the minimum and maximum valid values for a field.\n This offset is used to enhance the accuracy of the returned range.\n If it is not possible to return the range, because the field is not supported\n or for some other reason, an exception is thrown.\n \n If the field is a ChronoField then the query is implemented here.\n The supported fields will return\n appropriate range instances.\n All other ChronoField instances will throw an UnsupportedTemporalTypeException.\n \n If the field is not a ChronoField, then the result of this method\n is obtained by invoking TemporalField.rangeRefinedBy(TemporalAccessor)\n passing this as the argument.\n Whether the range can be obtained is determined by the field."}, {"method_name": "get", "method_sig": "public int get (TemporalField field)", "description": "Gets the value of the specified field from this offset as an int.\n \n This queries this offset for the value of the specified field.\n The returned value will always be within the valid range of values for the field.\n If it is not possible to return the value, because the field is not supported\n or for some other reason, an exception is thrown.\n \n If the field is a ChronoField then the query is implemented here.\n The OFFSET_SECONDS field returns the value of the offset.\n All other ChronoField instances will throw an UnsupportedTemporalTypeException.\n \n If the field is not a ChronoField, then the result of this method\n is obtained by invoking TemporalField.getFrom(TemporalAccessor)\n passing this as the argument. Whether the value can be obtained,\n and what the value represents, is determined by the field."}, {"method_name": "getLong", "method_sig": "public long getLong (TemporalField field)", "description": "Gets the value of the specified field from this offset as a long.\n \n This queries this offset for the value of the specified field.\n If it is not possible to return the value, because the field is not supported\n or for some other reason, an exception is thrown.\n \n If the field is a ChronoField then the query is implemented here.\n The OFFSET_SECONDS field returns the value of the offset.\n All other ChronoField instances will throw an UnsupportedTemporalTypeException.\n \n If the field is not a ChronoField, then the result of this method\n is obtained by invoking TemporalField.getFrom(TemporalAccessor)\n passing this as the argument. Whether the value can be obtained,\n and what the value represents, is determined by the field."}, {"method_name": "query", "method_sig": "public <R> R query (TemporalQuery<R> query)", "description": "Queries this offset using the specified query.\n \n This queries this offset using the specified query strategy object.\n The TemporalQuery object defines the logic to be used to\n obtain the result. Read the documentation of the query to understand\n what the result of this method will be.\n \n The result of this method is obtained by invoking the\n TemporalQuery.queryFrom(TemporalAccessor) method on the\n specified query passing this as the argument."}, {"method_name": "adjustInto", "method_sig": "public Temporal adjustInto (Temporal temporal)", "description": "Adjusts the specified temporal object to have the same offset as this object.\n \n This returns a temporal object of the same observable type as the input\n with the offset changed to be the same as this.\n \n The adjustment is equivalent to using Temporal.with(TemporalField, long)\n passing ChronoField.OFFSET_SECONDS as the field.\n \n In most cases, it is clearer to reverse the calling pattern by using\n Temporal.with(TemporalAdjuster):\n \n   // these two lines are equivalent, but the second approach is recommended\n   temporal = thisOffset.adjustInto(temporal);\n   temporal = temporal.with(thisOffset);\n \n\n This instance is immutable and unaffected by this method call."}, {"method_name": "compareTo", "method_sig": "public int compareTo (ZoneOffset other)", "description": "Compares this offset to another offset in descending order.\n \n The offsets are compared in the order that they occur for the same time\n of day around the world. Thus, an offset of +10:00 comes before an\n offset of +09:00 and so on down to -18:00.\n \n The comparison is \"consistent with equals\", as defined by Comparable."}, {"method_name": "equals", "method_sig": "public boolean equals (Object obj)", "description": "Checks if this offset is equal to another offset.\n \n The comparison is based on the amount of the offset in seconds.\n This is equivalent to a comparison by ID."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "A hash code for this offset."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Outputs this offset as a String, using the normalized ID."}]}