{"name": "Class Double", "module": "java.base", "package": "java.lang", "text": "The Double class wraps a value of the primitive type\n double in an object. An object of type\n Double contains a single field whose type is\n double.\n\n In addition, this class provides several methods for converting a\n double to a String and a\n String to a double, as well as other\n constants and methods useful when dealing with a\n double.", "codes": ["public final class Double\nextends Number\nimplements Comparable<Double>"], "fields": [{"field_name": "POSITIVE_INFINITY", "field_sig": "public static final\u00a0double POSITIVE_INFINITY", "description": "A constant holding the positive infinity of type\n double. It is equal to the value returned by\n Double.longBitsToDouble(0x7ff0000000000000L)."}, {"field_name": "NEGATIVE_INFINITY", "field_sig": "public static final\u00a0double NEGATIVE_INFINITY", "description": "A constant holding the negative infinity of type\n double. It is equal to the value returned by\n Double.longBitsToDouble(0xfff0000000000000L)."}, {"field_name": "NaN", "field_sig": "public static final\u00a0double NaN", "description": "A constant holding a Not-a-Number (NaN) value of type\n double. It is equivalent to the value returned by\n Double.longBitsToDouble(0x7ff8000000000000L)."}, {"field_name": "MAX_VALUE", "field_sig": "public static final\u00a0double MAX_VALUE", "description": "A constant holding the largest positive finite value of type\n double,\n (2-2-52)\u00b721023.  It is equal to\n the hexadecimal floating-point literal\n 0x1.fffffffffffffP+1023 and also equal to\n Double.longBitsToDouble(0x7fefffffffffffffL)."}, {"field_name": "MIN_NORMAL", "field_sig": "public static final\u00a0double MIN_NORMAL", "description": "A constant holding the smallest positive normal value of type\n double, 2-1022.  It is equal to the\n hexadecimal floating-point literal 0x1.0p-1022 and also\n equal to Double.longBitsToDouble(0x0010000000000000L)."}, {"field_name": "MIN_VALUE", "field_sig": "public static final\u00a0double MIN_VALUE", "description": "A constant holding the smallest positive nonzero value of type\n double, 2-1074. It is equal to the\n hexadecimal floating-point literal\n 0x0.0000000000001P-1022 and also equal to\n Double.longBitsToDouble(0x1L)."}, {"field_name": "MAX_EXPONENT", "field_sig": "public static final\u00a0int MAX_EXPONENT", "description": "Maximum exponent a finite double variable may have.\n It is equal to the value returned by\n Math.getExponent(Double.MAX_VALUE)."}, {"field_name": "MIN_EXPONENT", "field_sig": "public static final\u00a0int MIN_EXPONENT", "description": "Minimum exponent a normalized double variable may\n have.  It is equal to the value returned by\n Math.getExponent(Double.MIN_NORMAL)."}, {"field_name": "SIZE", "field_sig": "public static final\u00a0int SIZE", "description": "The number of bits used to represent a double value."}, {"field_name": "BYTES", "field_sig": "public static final\u00a0int BYTES", "description": "The number of bytes used to represent a double value."}, {"field_name": "TYPE", "field_sig": "public static final\u00a0Class<Double> TYPE", "description": "The Class instance representing the primitive type\n double."}], "methods": [{"method_name": "toString", "method_sig": "public static String toString (double d)", "description": "Returns a string representation of the double\n argument. All characters mentioned below are ASCII characters.\n \nIf the argument is NaN, the result is the string\n     \"NaN\".\n Otherwise, the result is a string that represents the sign and\n magnitude (absolute value) of the argument. If the sign is negative,\n the first character of the result is '-'\n ('\\u002D'); if the sign is positive, no sign character\n appears in the result. As for the magnitude m:\n \nIf m is infinity, it is represented by the characters\n \"Infinity\"; thus, positive infinity produces the result\n \"Infinity\" and negative infinity produces the result\n \"-Infinity\".\n\n If m is zero, it is represented by the characters\n \"0.0\"; thus, negative zero produces the result\n \"-0.0\" and positive zero produces the result\n \"0.0\".\n\n If m is greater than or equal to 10-3 but less\n than 107, then it is represented as the integer part of\n m, in decimal form with no leading zeroes, followed by\n '.' ('\\u002E'), followed by one or\n more decimal digits representing the fractional part of m.\n\n If m is less than 10-3 or greater than or\n equal to 107, then it is represented in so-called\n \"computerized scientific notation.\" Let n be the unique\n integer such that 10n \u2264 m <\n 10n+1; then let a be the\n mathematically exact quotient of m and\n 10n so that 1 \u2264 a < 10. The\n magnitude is then represented as the integer part of a,\n as a single decimal digit, followed by '.'\n ('\\u002E'), followed by decimal digits\n representing the fractional part of a, followed by the\n letter 'E' ('\\u0045'), followed\n by a representation of n as a decimal integer, as\n produced by the method Integer.toString(int).\n \n\n How many digits must be printed for the fractional part of\n m or a? There must be at least one digit to represent\n the fractional part, and beyond that as many, but only as many, more\n digits as are needed to uniquely distinguish the argument value from\n adjacent values of type double. That is, suppose that\n x is the exact mathematical value represented by the decimal\n representation produced by this method for a finite nonzero argument\n d. Then d must be the double value nearest\n to x; or if two double values are equally close\n to x, then d must be one of them and the least\n significant bit of the significand of d must be 0.\n\n To create localized string representations of a floating-point\n value, use subclasses of NumberFormat."}, {"method_name": "toHexString", "method_sig": "public static String toHexString (double d)", "description": "Returns a hexadecimal string representation of the\n double argument. All characters mentioned below\n are ASCII characters.\n\n \nIf the argument is NaN, the result is the string\n     \"NaN\".\n Otherwise, the result is a string that represents the sign\n and magnitude of the argument. If the sign is negative, the\n first character of the result is '-'\n ('\\u002D'); if the sign is positive, no sign\n character appears in the result. As for the magnitude m:\n\n \nIf m is infinity, it is represented by the string\n \"Infinity\"; thus, positive infinity produces the\n result \"Infinity\" and negative infinity produces\n the result \"-Infinity\".\n\n If m is zero, it is represented by the string\n \"0x0.0p0\"; thus, negative zero produces the result\n \"-0x0.0p0\" and positive zero produces the result\n \"0x0.0p0\".\n\n If m is a double value with a\n normalized representation, substrings are used to represent the\n significand and exponent fields.  The significand is\n represented by the characters \"0x1.\"\n followed by a lowercase hexadecimal representation of the rest\n of the significand as a fraction.  Trailing zeros in the\n hexadecimal representation are removed unless all the digits\n are zero, in which case a single zero is used. Next, the\n exponent is represented by \"p\" followed\n by a decimal string of the unbiased exponent as if produced by\n a call to Integer.toString on the\n exponent value.\n\n If m is a double value with a subnormal\n representation, the significand is represented by the\n characters \"0x0.\" followed by a\n hexadecimal representation of the rest of the significand as a\n fraction.  Trailing zeros in the hexadecimal representation are\n removed. Next, the exponent is represented by\n \"p-1022\".  Note that there must be at\n least one nonzero digit in a subnormal significand.\n\n \n\n\nExamples\n\nFloating-point ValueHexadecimal String\n\n\n1.0 0x1.0p0\n-1.0 -0x1.0p0\n2.0 0x1.0p1\n3.0 0x1.8p1\n0.5 0x1.0p-1\n0.25 0x1.0p-2\nDouble.MAX_VALUE\n0x1.fffffffffffffp1023\nMinimum Normal Value\n0x1.0p-1022\nMaximum Subnormal Value\n0x0.fffffffffffffp-1022\nDouble.MIN_VALUE\n0x0.0000000000001p-1022\n\n"}, {"method_name": "valueOf", "method_sig": "public static Double valueOf (String s)\n                      throws NumberFormatException", "description": "Returns a Double object holding the\n double value represented by the argument string\n s.\n\n If s is null, then a\n NullPointerException is thrown.\n\n Leading and trailing whitespace characters in s\n are ignored.  Whitespace is removed as if by the String.trim() method; that is, both ASCII space and control\n characters are removed. The rest of s should\n constitute a FloatValue as described by the lexical\n syntax rules:\n\n \n\nFloatValue:\nSignopt NaN\nSignopt Infinity\nSignopt FloatingPointLiteral\nSignopt HexFloatingPointLiteral\nSignedInteger\n\n\nHexFloatingPointLiteral:\n  HexSignificand BinaryExponent FloatTypeSuffixopt\n\n\nHexSignificand:\nHexNumeral\nHexNumeral .\n0x HexDigitsopt\n. HexDigits\n0X HexDigitsopt\n. HexDigits\n\n\nBinaryExponent:\nBinaryExponentIndicator SignedInteger\n\n\nBinaryExponentIndicator:\np\nP\n\n\n\n where Sign, FloatingPointLiteral,\n HexNumeral, HexDigits, SignedInteger and\n FloatTypeSuffix are as defined in the lexical structure\n sections of\n The Java\u2122 Language Specification,\n except that underscores are not accepted between digits.\n If s does not have the form of\n a FloatValue, then a NumberFormatException\n is thrown. Otherwise, s is regarded as\n representing an exact decimal value in the usual\n \"computerized scientific notation\" or as an exact\n hexadecimal value; this exact numerical value is then\n conceptually converted to an \"infinitely precise\"\n binary value that is then rounded to type double\n by the usual round-to-nearest rule of IEEE 754 floating-point\n arithmetic, which includes preserving the sign of a zero\n value.\n\n Note that the round-to-nearest rule also implies overflow and\n underflow behaviour; if the exact value of s is large\n enough in magnitude (greater than or equal to (MAX_VALUE + ulp(MAX_VALUE)/2),\n rounding to double will result in an infinity and if the\n exact value of s is small enough in magnitude (less\n than or equal to MIN_VALUE/2), rounding to float will\n result in a zero.\n\n Finally, after rounding a Double object representing\n this double value is returned.\n\n  To interpret localized string representations of a\n floating-point value, use subclasses of NumberFormat.\n\n Note that trailing format specifiers, specifiers that\n determine the type of a floating-point literal\n (1.0f is a float value;\n 1.0d is a double value), do\n not influence the results of this method.  In other\n words, the numerical value of the input string is converted\n directly to the target floating-point type.  The two-step\n sequence of conversions, string to float followed\n by float to double, is not\n equivalent to converting a string directly to\n double. For example, the float\n literal 0.1f is equal to the double\n value 0.10000000149011612; the float\n literal 0.1f represents a different numerical\n value than the double literal\n 0.1. (The numerical value 0.1 cannot be exactly\n represented in a binary floating-point number.)\n\n To avoid calling this method on an invalid string and having\n a NumberFormatException be thrown, the regular\n expression below can be used to screen the input string:\n\n \n  final String Digits     = \"(\\\\p{Digit}+)\";\n  final String HexDigits  = \"(\\\\p{XDigit}+)\";\n  // an exponent is 'e' or 'E' followed by an optionally\n  // signed decimal integer.\n  final String Exp        = \"[eE][+-]?\"+Digits;\n  final String fpRegex    =\n      (\"[\\\\x00-\\\\x20]*\"+  // Optional leading \"whitespace\"\n       \"[+-]?(\" + // Optional sign character\n       \"NaN|\" +           // \"NaN\" string\n       \"Infinity|\" +      // \"Infinity\" string\n\n       // A decimal floating-point string representing a finite positive\n       // number without a leading sign has at most five basic pieces:\n       // Digits . Digits ExponentPart FloatTypeSuffix\n       //\n       // Since this method allows integer-only strings as input\n       // in addition to strings of floating-point literals, the\n       // two sub-patterns below are simplifications of the grammar\n       // productions from section 3.10.2 of\n       // The Java Language Specification.\n\n       // Digits ._opt Digits_opt ExponentPart_opt FloatTypeSuffix_opt\n       \"(((\"+Digits+\"(\\\\.)?(\"+Digits+\"?)(\"+Exp+\")?)|\"+\n\n       // . Digits ExponentPart_opt FloatTypeSuffix_opt\n       \"(\\\\.(\"+Digits+\")(\"+Exp+\")?)|\"+\n\n       // Hexadecimal strings\n       \"((\" +\n        // 0[xX] HexDigits ._opt BinaryExponent FloatTypeSuffix_opt\n        \"(0[xX]\" + HexDigits + \"(\\\\.)?)|\" +\n\n        // 0[xX] HexDigits_opt . HexDigits BinaryExponent FloatTypeSuffix_opt\n        \"(0[xX]\" + HexDigits + \"?(\\\\.)\" + HexDigits + \")\" +\n\n        \")[pP][+-]?\" + Digits + \"))\" +\n       \"[fFdD]?))\" +\n       \"[\\\\x00-\\\\x20]*\");// Optional trailing \"whitespace\"\n\n  if (Pattern.matches(fpRegex, myString))\n      Double.valueOf(myString); // Will not throw NumberFormatException\n  else {\n      // Perform suitable alternative action\n  }\n "}, {"method_name": "valueOf", "method_sig": "public static Double valueOf (double d)", "description": "Returns a Double instance representing the specified\n double value.\n If a new Double instance is not required, this method\n should generally be used in preference to the constructor\n Double(double), as this method is likely to yield\n significantly better space and time performance by caching\n frequently requested values."}, {"method_name": "parseDouble", "method_sig": "public static double parseDouble (String s)\n                          throws NumberFormatException", "description": "Returns a new double initialized to the value\n represented by the specified String, as performed\n by the valueOf method of class\n Double."}, {"method_name": "isNaN", "method_sig": "public static boolean isNaN (double v)", "description": "Returns true if the specified number is a\n Not-a-Number (NaN) value, false otherwise."}, {"method_name": "isInfinite", "method_sig": "public static boolean isInfinite (double v)", "description": "Returns true if the specified number is infinitely\n large in magnitude, false otherwise."}, {"method_name": "isFinite", "method_sig": "public static boolean isFinite (double d)", "description": "Returns true if the argument is a finite floating-point\n value; returns false otherwise (for NaN and infinity\n arguments)."}, {"method_name": "isNaN", "method_sig": "public boolean isNaN()", "description": "Returns true if this Double value is\n a Not-a-Number (NaN), false otherwise."}, {"method_name": "isInfinite", "method_sig": "public boolean isInfinite()", "description": "Returns true if this Double value is\n infinitely large in magnitude, false otherwise."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a string representation of this Double object.\n The primitive double value represented by this\n object is converted to a string exactly as if by the method\n toString of one argument."}, {"method_name": "byteValue", "method_sig": "public byte byteValue()", "description": "Returns the value of this Double as a byte\n after a narrowing primitive conversion."}, {"method_name": "shortValue", "method_sig": "public short shortValue()", "description": "Returns the value of this Double as a short\n after a narrowing primitive conversion."}, {"method_name": "intValue", "method_sig": "public int intValue()", "description": "Returns the value of this Double as an int\n after a narrowing primitive conversion."}, {"method_name": "longValue", "method_sig": "public long longValue()", "description": "Returns the value of this Double as a long\n after a narrowing primitive conversion."}, {"method_name": "floatValue", "method_sig": "public float floatValue()", "description": "Returns the value of this Double as a float\n after a narrowing primitive conversion."}, {"method_name": "doubleValue", "method_sig": "public double doubleValue()", "description": "Returns the double value of this Double object."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Returns a hash code for this Double object. The\n result is the exclusive OR of the two halves of the\n long integer bit representation, exactly as\n produced by the method doubleToLongBits(double), of\n the primitive double value represented by this\n Double object. That is, the hash code is the value\n of the expression:\n\n \n(int)(v^(v>>>32))\n\n\n where v is defined by:\n\n \nlong v = Double.doubleToLongBits(this.doubleValue());\n"}, {"method_name": "hashCode", "method_sig": "public static int hashCode (double value)", "description": "Returns a hash code for a double value; compatible with\n Double.hashCode()."}, {"method_name": "equals", "method_sig": "public boolean equals (Object obj)", "description": "Compares this object against the specified object.  The result\n is true if and only if the argument is not\n null and is a Double object that\n represents a double that has the same value as the\n double represented by this object. For this\n purpose, two double values are considered to be\n the same if and only if the method doubleToLongBits(double) returns the identical\n long value when applied to each.\n\n Note that in most cases, for two instances of class\n Double, d1 and d2, the\n value of d1.equals(d2) is true if and\n only if\n\n \nd1.doubleValue() == d2.doubleValue()\n\nalso has the value true. However, there are two\n exceptions:\n \nIf d1 and d2 both represent\n     Double.NaN, then the equals method\n     returns true, even though\n     Double.NaN==Double.NaN has the value\n     false.\n If d1 represents +0.0 while\n     d2 represents -0.0, or vice versa,\n     the equal test has the value false,\n     even though +0.0==-0.0 has the value true.\n \n This definition allows hash tables to operate properly."}, {"method_name": "doubleToLongBits", "method_sig": "public static long doubleToLongBits (double value)", "description": "Returns a representation of the specified floating-point value\n according to the IEEE 754 floating-point \"double\n format\" bit layout.\n\n Bit 63 (the bit that is selected by the mask\n 0x8000000000000000L) represents the sign of the\n floating-point number. Bits\n 62-52 (the bits that are selected by the mask\n 0x7ff0000000000000L) represent the exponent. Bits 51-0\n (the bits that are selected by the mask\n 0x000fffffffffffffL) represent the significand\n (sometimes called the mantissa) of the floating-point number.\n\n If the argument is positive infinity, the result is\n 0x7ff0000000000000L.\n\n If the argument is negative infinity, the result is\n 0xfff0000000000000L.\n\n If the argument is NaN, the result is\n 0x7ff8000000000000L.\n\n In all cases, the result is a long integer that, when\n given to the longBitsToDouble(long) method, will produce a\n floating-point value the same as the argument to\n doubleToLongBits (except all NaN values are\n collapsed to a single \"canonical\" NaN value)."}, {"method_name": "doubleToRawLongBits", "method_sig": "public static long doubleToRawLongBits (double value)", "description": "Returns a representation of the specified floating-point value\n according to the IEEE 754 floating-point \"double\n format\" bit layout, preserving Not-a-Number (NaN) values.\n\n Bit 63 (the bit that is selected by the mask\n 0x8000000000000000L) represents the sign of the\n floating-point number. Bits\n 62-52 (the bits that are selected by the mask\n 0x7ff0000000000000L) represent the exponent. Bits 51-0\n (the bits that are selected by the mask\n 0x000fffffffffffffL) represent the significand\n (sometimes called the mantissa) of the floating-point number.\n\n If the argument is positive infinity, the result is\n 0x7ff0000000000000L.\n\n If the argument is negative infinity, the result is\n 0xfff0000000000000L.\n\n If the argument is NaN, the result is the long\n integer representing the actual NaN value.  Unlike the\n doubleToLongBits method,\n doubleToRawLongBits does not collapse all the bit\n patterns encoding a NaN to a single \"canonical\" NaN\n value.\n\n In all cases, the result is a long integer that,\n when given to the longBitsToDouble(long) method, will\n produce a floating-point value the same as the argument to\n doubleToRawLongBits."}, {"method_name": "longBitsToDouble", "method_sig": "public static double longBitsToDouble (long bits)", "description": "Returns the double value corresponding to a given\n bit representation.\n The argument is considered to be a representation of a\n floating-point value according to the IEEE 754 floating-point\n \"double format\" bit layout.\n\n If the argument is 0x7ff0000000000000L, the result\n is positive infinity.\n\n If the argument is 0xfff0000000000000L, the result\n is negative infinity.\n\n If the argument is any value in the range\n 0x7ff0000000000001L through\n 0x7fffffffffffffffL or in the range\n 0xfff0000000000001L through\n 0xffffffffffffffffL, the result is a NaN.  No IEEE\n 754 floating-point operation provided by Java can distinguish\n between two NaN values of the same type with different bit\n patterns.  Distinct values of NaN are only distinguishable by\n use of the Double.doubleToRawLongBits method.\n\n In all other cases, let s, e, and m be three\n values that can be computed from the argument:\n\n \n int s = ((bits >> 63) == 0) ? 1 : -1;\n int e = (int)((bits >> 52) & 0x7ffL);\n long m = (e == 0) ?\n                 (bits & 0xfffffffffffffL) << 1 :\n                 (bits & 0xfffffffffffffL) | 0x10000000000000L;\n \n\n Then the floating-point result equals the value of the mathematical\n expression s\u00b7m\u00b72e-1075.\n\n Note that this method may not be able to return a\n double NaN with exactly same bit pattern as the\n long argument.  IEEE 754 distinguishes between two\n kinds of NaNs, quiet NaNs and signaling NaNs.  The\n differences between the two kinds of NaN are generally not\n visible in Java.  Arithmetic operations on signaling NaNs turn\n them into quiet NaNs with a different, but often similar, bit\n pattern.  However, on some processors merely copying a\n signaling NaN also performs that conversion.  In particular,\n copying a signaling NaN to return it to the calling method\n may perform this conversion.  So longBitsToDouble\n may not be able to return a double with a\n signaling NaN bit pattern.  Consequently, for some\n long values,\n doubleToRawLongBits(longBitsToDouble(start)) may\n not equal start.  Moreover, which\n particular bit patterns represent signaling NaNs is platform\n dependent; although all NaN bit patterns, quiet or signaling,\n must be in the NaN range identified above."}, {"method_name": "compareTo", "method_sig": "public int compareTo (Double anotherDouble)", "description": "Compares two Double objects numerically.  There\n are two ways in which comparisons performed by this method\n differ from those performed by the Java language numerical\n comparison operators (<, <=, ==, >=, >)\n when applied to primitive double values:\n \nDouble.NaN is considered by this method\n          to be equal to itself and greater than all other\n          double values (including\n          Double.POSITIVE_INFINITY).\n \n0.0d is considered by this method to be greater\n          than -0.0d.\n \n This ensures that the natural ordering of\n Double objects imposed by this method is consistent\n with equals."}, {"method_name": "compare", "method_sig": "public static int compare (double d1,\n                          double d2)", "description": "Compares the two specified double values. The sign\n of the integer value returned is the same as that of the\n integer that would be returned by the call:\n \n    new Double(d1).compareTo(new Double(d2))\n "}, {"method_name": "sum", "method_sig": "public static double sum (double a,\n                         double b)", "description": "Adds two double values together as per the + operator."}, {"method_name": "max", "method_sig": "public static double max (double a,\n                         double b)", "description": "Returns the greater of two double values\n as if by calling Math.max."}, {"method_name": "min", "method_sig": "public static double min (double a,\n                         double b)", "description": "Returns the smaller of two double values\n as if by calling Math.min."}]}