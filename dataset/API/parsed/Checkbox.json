{"name": "Class Checkbox", "module": "java.desktop", "package": "java.awt", "text": "A check box is a graphical component that can be in either an\n \"on\" (true) or \"off\" (false) state.\n Clicking on a check box changes its state from\n \"on\" to \"off,\" or from \"off\" to \"on.\"\n \n The following code example creates a set of check boxes in\n a grid layout:\n\n \n setLayout(new GridLayout(3, 1));\n add(new Checkbox(\"one\", null, true));\n add(new Checkbox(\"two\"));\n add(new Checkbox(\"three\"));\n \n\n This image depicts the check boxes and grid layout\n created by this code example:\n \n\n\n The button labeled one is in the \"on\" state, and the\n other two are in the \"off\" state. In this example, which uses the\n GridLayout class, the states of the three check\n boxes are set independently.\n \n Alternatively, several check boxes can be grouped together under\n the control of a single object, using the\n CheckboxGroup class.\n In a check box group, at most one button can be in the \"on\"\n state at any given time. Clicking on a check box to turn it on\n forces any other check box in the same group that is on\n into the \"off\" state.", "codes": ["public class Checkbox\nextends Component\nimplements ItemSelectable, Accessible"], "fields": [], "methods": [{"method_name": "addNotify", "method_sig": "public void addNotify()", "description": "Creates the peer of the Checkbox. The peer allows you to change the\n look of the Checkbox without changing its functionality."}, {"method_name": "getLabel", "method_sig": "public String getLabel()", "description": "Gets the label of this check box."}, {"method_name": "setLabel", "method_sig": "public void setLabel (String label)", "description": "Sets this check box's label to be the string argument."}, {"method_name": "getState", "method_sig": "public boolean getState()", "description": "Determines whether this check box is in the \"on\" or \"off\" state.\n The boolean value true indicates the \"on\" state,\n and false indicates the \"off\" state."}, {"method_name": "setState", "method_sig": "public void setState (boolean state)", "description": "Sets the state of this check box to the specified state.\n The boolean value true indicates the \"on\" state,\n and false indicates the \"off\" state.\n\n Note that this method should be primarily used to\n initialize the state of the checkbox.  Programmatically\n setting the state of the checkbox will not trigger\n an ItemEvent.  The only way to trigger an\n ItemEvent is by user interaction."}, {"method_name": "getSelectedObjects", "method_sig": "public Object[] getSelectedObjects()", "description": "Returns an array (length 1) containing the checkbox\n label or null if the checkbox is not selected."}, {"method_name": "getCheckboxGroup", "method_sig": "public CheckboxGroup getCheckboxGroup()", "description": "Determines this check box's group."}, {"method_name": "setCheckboxGroup", "method_sig": "public void setCheckboxGroup (CheckboxGroup g)", "description": "Sets this check box's group to the specified check box group.\n If this check box is already in a different check box group,\n it is first taken out of that group.\n \n If the state of this check box is true and the new\n group already has a check box selected, this check box's state\n is changed to false.  If the state of this check\n box is true and the new group has no check box\n selected, this check box becomes the selected checkbox for\n the new group and its state is true."}, {"method_name": "addItemListener", "method_sig": "public void addItemListener (ItemListener l)", "description": "Adds the specified item listener to receive item events from\n this check box.  Item events are sent to listeners in response\n to user input, but not in response to calls to setState().\n If l is null, no exception is thrown and no action is performed.\n Refer to AWT Threading Issues for details on AWT's threading model."}, {"method_name": "removeItemListener", "method_sig": "public void removeItemListener (ItemListener l)", "description": "Removes the specified item listener so that the item listener\n no longer receives item events from this check box.\n If l is null, no exception is thrown and no action is performed.\n Refer to AWT Threading Issues for details on AWT's threading model."}, {"method_name": "getItemListeners", "method_sig": "public ItemListener[] getItemListeners()", "description": "Returns an array of all the item listeners\n registered on this checkbox."}, {"method_name": "getListeners", "method_sig": "public <T extends EventListener> T[] getListeners (Class<T> listenerType)", "description": "Returns an array of all the objects currently registered\n as FooListeners\n upon this Checkbox.\n FooListeners are registered using the\n addFooListener method.\n\n \n You can specify the listenerType argument\n with a class literal, such as\n FooListener.class.\n For example, you can query a\n Checkbox c\n for its item listeners with the following code:\n\n ItemListener[] ils = (ItemListener[])(c.getListeners(ItemListener.class));\n\n If no such listeners exist, this method returns an empty array."}, {"method_name": "processEvent", "method_sig": "protected void processEvent (AWTEvent e)", "description": "Processes events on this check box.\n If the event is an instance of ItemEvent,\n this method invokes the processItemEvent method.\n Otherwise, it calls its superclass's processEvent method.\n Note that if the event parameter is null\n the behavior is unspecified and may result in an\n exception."}, {"method_name": "processItemEvent", "method_sig": "protected void processItemEvent (ItemEvent e)", "description": "Processes item events occurring on this check box by\n dispatching them to any registered\n ItemListener objects.\n \n This method is not called unless item events are\n enabled for this component. Item events are enabled\n when one of the following occurs:\n \nAn ItemListener object is registered\n via addItemListener.\n Item events are enabled via enableEvents.\n \nNote that if the event parameter is null\n the behavior is unspecified and may result in an\n exception."}, {"method_name": "paramString", "method_sig": "protected String paramString()", "description": "Returns a string representing the state of this Checkbox.\n This method is intended to be used only for debugging purposes, and the\n content and format of the returned string may vary between\n implementations. The returned string may be empty but may not be\n null."}, {"method_name": "getAccessibleContext", "method_sig": "public AccessibleContext getAccessibleContext()", "description": "Gets the AccessibleContext associated with this Checkbox.\n For checkboxes, the AccessibleContext takes the form of an\n AccessibleAWTCheckbox.\n A new AccessibleAWTCheckbox is created if necessary."}]}