{"name": "Class System.LoggerFinder", "module": "java.base", "package": "java.lang", "text": "The LoggerFinder service is responsible for creating, managing,\n and configuring loggers to the underlying framework it uses.\n\n A logger finder is a concrete implementation of this class that has a\n zero-argument constructor and implements the abstract methods defined\n by this class.\n The loggers returned from a logger finder are capable of routing log\n messages to the logging backend this provider supports.\n A given invocation of the Java Runtime maintains a single\n system-wide LoggerFinder instance that is loaded as follows:\n \nFirst it finds any custom LoggerFinder provider\n        using the ServiceLoader facility with the\n        system class\n        loader.\nIf no LoggerFinder provider is found, the system default\n        LoggerFinder implementation will be used.\n\n\n An application can replace the logging backend\n even when the java.logging module is present, by simply providing\n and declaring an implementation of the System.LoggerFinder service.\n \nDefault Implementation\n\n The system default LoggerFinder implementation uses\n java.util.logging as the backend framework when the\n java.logging module is present.\n It returns a logger instance\n that will route log messages to a java.util.logging.Logger. Otherwise, if java.logging is not\n present, the default implementation will return a simple logger\n instance that will route log messages of INFO level and above to\n the console (System.err).\n \nLogging Configuration\n\nLogger instances obtained from the\n LoggerFinder factory methods are not directly configurable by\n the application. Configuration is the responsibility of the underlying\n logging backend, and usually requires using APIs specific to that backend.\n For the default LoggerFinder implementation\n using java.util.logging as its backend, refer to\n java.util.logging for logging configuration.\n For the default LoggerFinder implementation returning simple loggers\n when the java.logging module is absent, the configuration\n is implementation dependent.\n \n Usually an application that uses a logging framework will log messages\n through a logger facade defined (or supported) by that framework.\n Applications that wish to use an external framework should log\n through the facade associated with that framework.\n \n A system class that needs to log messages will typically obtain\n a System.Logger instance to route messages to the logging\n framework selected by the application.\n \n Libraries and classes that only need loggers to produce log messages\n should not attempt to configure loggers by themselves, as that\n would make them dependent from a specific implementation of the\n LoggerFinder service.\n \n In addition, when a security manager is present, loggers provided to\n system classes should not be directly configurable through the logging\n backend without requiring permissions.\n \n It is the responsibility of the provider of\n the concrete LoggerFinder implementation to ensure that\n these loggers are not configured by untrusted code without proper\n permission checks, as configuration performed on such loggers usually\n affects all applications in the same Java Runtime.\n \nMessage Levels and Mapping to backend levels\n\n A logger finder is responsible for mapping from a \n System.Logger.Level to a level supported by the logging backend it uses.\n The default LoggerFinder using java.util.logging as the backend\n maps System.Logger levels to\n java.util.logging levels\n of corresponding severity - as described in Logger.Level.", "codes": ["public abstract static class System.LoggerFinder\nextends Object"], "fields": [], "methods": [{"method_name": "getLogger", "method_sig": "public abstract System.Logger getLogger (String name,\n                                        Module module)", "description": "Returns an instance of Logger\n for the given module."}, {"method_name": "getLocalizedLogger", "method_sig": "public System.Logger getLocalizedLogger (String name,\n                                        ResourceBundle bundle,\n                                        Module module)", "description": "Returns a localizable instance of Logger\n for the given module.\n The returned logger will use the provided resource bundle for\n message localization."}, {"method_name": "getLoggerFinder", "method_sig": "public static System.LoggerFinder getLoggerFinder()", "description": "Returns the LoggerFinder instance. There is one\n single system-wide LoggerFinder instance in\n the Java Runtime.  See the class specification of how the\n LoggerFinder implementation is located and\n loaded."}]}