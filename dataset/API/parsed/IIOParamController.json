{"name": "Interface IIOParamController", "module": "java.desktop", "package": "javax.imageio", "text": "An interface to be implemented by objects that can determine the\n settings of an IIOParam object, either by putting up a\n GUI to obtain values from a user, or by other means.  This\n interface merely specifies a generic activate method\n that invokes the controller, without regard for how the controller\n obtains values (i.e., whether the controller puts up a GUI\n or merely computes a set of values is irrelevant to this\n interface).\n\n  Within the activate method, a controller obtains\n initial values by querying the IIOParam object's\n get methods, modifies values by whatever means, then\n invokes the IIOParam object's set methods\n to modify the appropriate settings.  Normally, these\n set methods will be invoked all at once at a final\n commit in order that a cancel operation not disturb existing\n values.  In general, applications may expect that when the\n activate method returns true, the\n IIOParam object is ready for use in a read or write\n operation.\n\n  Vendors may choose to provide GUIs for the\n IIOParam subclasses they define for a particular\n plug-in.  These can be set up as default controllers in the\n corresponding IIOParam subclasses.\n\n  Applications may override any default GUIs and provide their\n own controllers embedded in their own framework.  All that is\n required is that the activate method behave modally\n (not returning until either cancelled or committed), though it need\n not put up an explicitly modal dialog.  Such a non-modal GUI\n component would be coded roughly as follows:\n\n \n\n class MyGUI extends SomeComponent implements IIOParamController {\n\n    public MyGUI() {\n        // ...\n        setEnabled(false);\n    }\n\n    public boolean activate(IIOParam param) {\n        // disable other components if desired\n        setEnabled(true);\n        // go to sleep until either cancelled or committed\n        boolean ret = false;\n        if (!cancelled) {\n            // set values on param\n            ret = true;\n        }\n        setEnabled(false);\n        // enable any components disabled above\n        return ret;\n    }\n \n Alternatively, an algorithmic process such as a database lookup\n or the parsing of a command line could be used as a controller, in\n which case the activate method would simply look up or\n compute the settings, call the IIOParam.setXXX\n methods, and return true.", "codes": ["public interface IIOParamController"], "fields": [], "methods": [{"method_name": "activate", "method_sig": "boolean activate (IIOParam param)", "description": "Activates the controller.  If true is returned,\n all settings in the IIOParam object should be\n ready for use in a read or write operation.  If\n false is returned, no settings in the\n IIOParam object will be disturbed (i.e.,\n the user canceled the operation)."}]}