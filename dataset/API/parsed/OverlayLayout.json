{"name": "Class OverlayLayout", "module": "java.desktop", "package": "javax.swing", "text": "A layout manager to arrange components over the top\n of each other.  The requested size of the container\n will be the largest requested size of the children,\n taking alignment needs into consideration.\n\n The alignment is based upon what is needed to properly\n fit the children in the allocation area.  The children\n will be placed such that their alignment points are all\n on top of each other.\n \nWarning:\n Serialized objects of this class will not be compatible with\n future Swing releases. The current serialization support is\n appropriate for short term storage or RMI between applications running\n the same version of Swing.  As of 1.4, support for long term storage\n of all JavaBeans\u2122\n has been added to the java.beans package.\n Please see XMLEncoder.", "codes": ["public class OverlayLayout\nextends Object\nimplements LayoutManager2, Serializable"], "fields": [], "methods": [{"method_name": "getTarget", "method_sig": "public final Container getTarget()", "description": "Returns the container that uses this layout manager."}, {"method_name": "invalidateLayout", "method_sig": "public void invalidateLayout (Container target)", "description": "Indicates a child has changed its layout related information,\n which causes any cached calculations to be flushed."}, {"method_name": "addLayoutComponent", "method_sig": "public void addLayoutComponent (String name,\n                               Component comp)", "description": "Adds the specified component to the layout. Used by\n this class to know when to invalidate layout."}, {"method_name": "removeLayoutComponent", "method_sig": "public void removeLayoutComponent (Component comp)", "description": "Removes the specified component from the layout. Used by\n this class to know when to invalidate layout."}, {"method_name": "addLayoutComponent", "method_sig": "public void addLayoutComponent (Component comp,\n                               Object constraints)", "description": "Adds the specified component to the layout, using the specified\n constraint object. Used by this class to know when to invalidate\n layout."}, {"method_name": "preferredLayoutSize", "method_sig": "public Dimension preferredLayoutSize (Container target)", "description": "Returns the preferred dimensions for this layout given the components\n in the specified target container.  Recomputes the layout if it\n has been invalidated.  Factors in the current inset setting returned\n by getInsets()."}, {"method_name": "minimumLayoutSize", "method_sig": "public Dimension minimumLayoutSize (Container target)", "description": "Returns the minimum dimensions needed to lay out the components\n contained in the specified target container.  Recomputes the layout\n if it has been invalidated, and factors in the current inset setting."}, {"method_name": "maximumLayoutSize", "method_sig": "public Dimension maximumLayoutSize (Container target)", "description": "Returns the maximum dimensions needed to lay out the components\n contained in the specified target container.  Recomputes the\n layout if it has been invalidated, and factors in the inset setting\n returned by getInset."}, {"method_name": "getLayoutAlignmentX", "method_sig": "public float getLayoutAlignmentX (Container target)", "description": "Returns the alignment along the x axis for the container."}, {"method_name": "getLayoutAlignmentY", "method_sig": "public float getLayoutAlignmentY (Container target)", "description": "Returns the alignment along the y axis for the container."}, {"method_name": "layoutContainer", "method_sig": "public void layoutContainer (Container target)", "description": "Called by the AWT when the specified container needs to be laid out."}]}