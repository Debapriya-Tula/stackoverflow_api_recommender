{"name": "Class ServerSocketChannel", "module": "java.base", "package": "java.nio.channels", "text": "A selectable channel for stream-oriented listening sockets.\n\n  A server-socket channel is created by invoking the open\n method of this class.  It is not possible to create a channel for an arbitrary,\n pre-existing ServerSocket. A newly-created server-socket channel is\n open but not yet bound.  An attempt to invoke the accept\n method of an unbound server-socket channel will cause a NotYetBoundException\n to be thrown. A server-socket channel can be bound by invoking one of the\n bind methods defined by this class.\n\n  Socket options are configured using the setOption method. Server-socket channels support the following options:\n \n\nSocket options\n\n\nOption Name\nDescription\n\n\n\n\n SO_RCVBUF \n The size of the socket receive buffer \n\n\n SO_REUSEADDR \n Re-use address \n\n\n\n\n Additional (implementation specific) options may also be supported.\n\n  Server-socket channels are safe for use by multiple concurrent threads.\n ", "codes": ["public abstract class ServerSocketChannel\nextends AbstractSelectableChannel\nimplements NetworkChannel"], "fields": [], "methods": [{"method_name": "open", "method_sig": "public static ServerSocketChannel open()\n                                throws IOException", "description": "Opens a server-socket channel.\n\n  The new channel is created by invoking the openServerSocketChannel method of the system-wide default SelectorProvider object.\n\n  The new channel's socket is initially unbound; it must be bound to a\n specific address via one of its socket's bind methods before\n connections can be accepted.  "}, {"method_name": "validOps", "method_sig": "public final int validOps()", "description": "Returns an operation set identifying this channel's supported\n operations.\n\n  Server-socket channels only support the accepting of new\n connections, so this method returns SelectionKey.OP_ACCEPT.\n "}, {"method_name": "bind", "method_sig": "public final ServerSocketChannel bind (SocketAddress local)\n                               throws IOException", "description": "Binds the channel's socket to a local address and configures the socket\n to listen for connections.\n\n  An invocation of this method is equivalent to the following:\n \n bind(local, 0);\n "}, {"method_name": "bind", "method_sig": "public abstract ServerSocketChannel bind (SocketAddress local,\n                                         int backlog)\n                                  throws IOException", "description": "Binds the channel's socket to a local address and configures the socket to\n listen for connections.\n\n  This method is used to establish an association between the socket and\n a local address. Once an association is established then the socket remains\n bound until the channel is closed.\n\n  The backlog parameter is the maximum number of pending\n connections on the socket. Its exact semantics are implementation specific.\n In particular, an implementation may impose a maximum length or may choose\n to ignore the parameter altogther. If the backlog parameter has\n the value 0, or a negative value, then an implementation specific\n default is used."}, {"method_name": "setOption", "method_sig": "public abstract <T> ServerSocketChannel setOption (SocketOption<T> name,\n                                                  T value)\n                                           throws IOException", "description": "Description copied from interface:\u00a0NetworkChannel"}, {"method_name": "socket", "method_sig": "public abstract ServerSocket socket()", "description": "Retrieves a server socket associated with this channel.\n\n  The returned object will not declare any public methods that are not\n declared in the ServerSocket class.  "}, {"method_name": "accept", "method_sig": "public abstract SocketChannel accept()\n                              throws IOException", "description": "Accepts a connection made to this channel's socket.\n\n  If this channel is in non-blocking mode then this method will\n immediately return null if there are no pending connections.\n Otherwise it will block indefinitely until a new connection is available\n or an I/O error occurs.\n\n  The socket channel returned by this method, if any, will be in\n blocking mode regardless of the blocking mode of this channel.\n\n  This method performs exactly the same security checks as the accept method of the ServerSocket class.  That is, if a security manager has been\n installed then for each new connection this method verifies that the\n address and port number of the connection's remote endpoint are\n permitted by the security manager's checkAccept method.  "}, {"method_name": "getLocalAddress", "method_sig": "public abstract SocketAddress getLocalAddress()\n                                       throws IOException", "description": "Returns the socket address that this channel's socket is bound to.\n\n  Where the channel is bound to an Internet Protocol\n socket address then the return value from this method is of type InetSocketAddress.\n \n If there is a security manager set, its checkConnect method is\n called with the local address and -1 as its arguments to see\n if the operation is allowed. If the operation is not allowed,\n a SocketAddress representing the\n loopback address and the\n local port of the channel's socket is returned."}]}