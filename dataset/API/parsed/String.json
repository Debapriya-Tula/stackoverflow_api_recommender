{"name": "Class String", "module": "java.base", "package": "java.lang", "text": "The String class represents character strings. All\n string literals in Java programs, such as \"abc\", are\n implemented as instances of this class.\n \n Strings are constant; their values cannot be changed after they\n are created. String buffers support mutable strings.\n Because String objects are immutable they can be shared. For example:\n \n     String str = \"abc\";\n \n is equivalent to:\n \n     char data[] = {'a', 'b', 'c'};\n     String str = new String(data);\n \n Here are some more examples of how strings can be used:\n \n     System.out.println(\"abc\");\n     String cde = \"cde\";\n     System.out.println(\"abc\" + cde);\n     String c = \"abc\".substring(2,3);\n     String d = cde.substring(1, 2);\n \n\n The class String includes methods for examining\n individual characters of the sequence, for comparing strings, for\n searching strings, for extracting substrings, and for creating a\n copy of a string with all characters translated to uppercase or to\n lowercase. Case mapping is based on the Unicode Standard version\n specified by the Character class.\n \n The Java language provides special support for the string\n concatenation operator (\u00a0+\u00a0), and for conversion of\n other objects to strings. For additional information on string\n concatenation and conversion, see The Java\u2122 Language Specification.\n\n  Unless otherwise noted, passing a null argument to a constructor\n or method in this class will cause a NullPointerException to be\n thrown.\n\n A String represents a string in the UTF-16 format\n in which supplementary characters are represented by surrogate\n pairs (see the section Unicode\n Character Representations in the Character class for\n more information).\n Index values refer to char code units, so a supplementary\n character uses two positions in a String.\n The String class provides methods for dealing with\n Unicode code points (i.e., characters), in addition to those for\n dealing with Unicode code units (i.e., char values).\n\n Unless otherwise noted, methods for comparing Strings do not take locale\n into account.  The Collator class provides methods for\n finer-grain, locale-sensitive String comparison.", "codes": ["public final class String\nextends Object\nimplements Serializable, Comparable<String>, CharSequence"], "fields": [{"field_name": "CASE_INSENSITIVE_ORDER", "field_sig": "public static final\u00a0Comparator<String> CASE_INSENSITIVE_ORDER", "description": "A Comparator that orders String objects as by\n compareToIgnoreCase. This comparator is serializable.\n \n Note that this Comparator does not take locale into account,\n and will result in an unsatisfactory ordering for certain locales.\n The Collator class provides locale-sensitive comparison."}], "methods": [{"method_name": "length", "method_sig": "public int length()", "description": "Returns the length of this string.\n The length is equal to the number of Unicode\n code units in the string."}, {"method_name": "isEmpty", "method_sig": "public boolean isEmpty()", "description": "Returns true if, and only if, length() is 0."}, {"method_name": "charAt", "method_sig": "public char charAt (int index)", "description": "Returns the char value at the\n specified index. An index ranges from 0 to\n length() - 1. The first char value of the sequence\n is at index 0, the next at index 1,\n and so on, as for array indexing.\n\n If the char value specified by the index is a\n surrogate, the surrogate\n value is returned."}, {"method_name": "codePointAt", "method_sig": "public int codePointAt (int index)", "description": "Returns the character (Unicode code point) at the specified\n index. The index refers to char values\n (Unicode code units) and ranges from 0 to\n length() - 1.\n\n  If the char value specified at the given index\n is in the high-surrogate range, the following index is less\n than the length of this String, and the\n char value at the following index is in the\n low-surrogate range, then the supplementary code point\n corresponding to this surrogate pair is returned. Otherwise,\n the char value at the given index is returned."}, {"method_name": "codePointBefore", "method_sig": "public int codePointBefore (int index)", "description": "Returns the character (Unicode code point) before the specified\n index. The index refers to char values\n (Unicode code units) and ranges from 1 to length.\n\n  If the char value at (index - 1)\n is in the low-surrogate range, (index - 2) is not\n negative, and the char value at (index -\n 2) is in the high-surrogate range, then the\n supplementary code point value of the surrogate pair is\n returned. If the char value at index -\n 1 is an unpaired low-surrogate or a high-surrogate, the\n surrogate value is returned."}, {"method_name": "codePointCount", "method_sig": "public int codePointCount (int beginIndex,\n                          int endIndex)", "description": "Returns the number of Unicode code points in the specified text\n range of this String. The text range begins at the\n specified beginIndex and extends to the\n char at index endIndex - 1. Thus the\n length (in chars) of the text range is\n endIndex-beginIndex. Unpaired surrogates within\n the text range count as one code point each."}, {"method_name": "offsetByCodePoints", "method_sig": "public int offsetByCodePoints (int index,\n                              int codePointOffset)", "description": "Returns the index within this String that is\n offset from the given index by\n codePointOffset code points. Unpaired surrogates\n within the text range given by index and\n codePointOffset count as one code point each."}, {"method_name": "getChars", "method_sig": "public void getChars (int srcBegin,\n                     int srcEnd,\n                     char[] dst,\n                     int dstBegin)", "description": "Copies characters from this string into the destination character\n array.\n \n The first character to be copied is at index srcBegin;\n the last character to be copied is at index srcEnd-1\n (thus the total number of characters to be copied is\n srcEnd-srcBegin). The characters are copied into the\n subarray of dst starting at index dstBegin\n and ending at index:\n \n     dstBegin + (srcEnd-srcBegin) - 1\n "}, {"method_name": "getBytes", "method_sig": "@Deprecated(since=\"1.1\")\npublic void getBytes (int srcBegin,\n                     int srcEnd,\n                     byte[] dst,\n                     int dstBegin)", "description": "Copies characters from this string into the destination byte array. Each\n byte receives the 8 low-order bits of the corresponding character. The\n eight high-order bits of each character are not copied and do not\n participate in the transfer in any way.\n\n  The first character to be copied is at index srcBegin; the\n last character to be copied is at index srcEnd-1.  The total\n number of characters to be copied is srcEnd-srcBegin. The\n characters, converted to bytes, are copied into the subarray of \n dst starting at index dstBegin and ending at index:\n\n \n     dstBegin + (srcEnd-srcBegin) - 1\n "}, {"method_name": "getBytes", "method_sig": "public byte[] getBytes (String charsetName)\n                throws UnsupportedEncodingException", "description": "Encodes this String into a sequence of bytes using the named\n charset, storing the result into a new byte array.\n\n  The behavior of this method when this string cannot be encoded in\n the given charset is unspecified.  The CharsetEncoder class should be used when more control\n over the encoding process is required."}, {"method_name": "getBytes", "method_sig": "public byte[] getBytes (Charset charset)", "description": "Encodes this String into a sequence of bytes using the given\n charset, storing the result into a\n new byte array.\n\n  This method always replaces malformed-input and unmappable-character\n sequences with this charset's default replacement byte array.  The\n CharsetEncoder class should be used when more\n control over the encoding process is required."}, {"method_name": "getBytes", "method_sig": "public byte[] getBytes()", "description": "Encodes this String into a sequence of bytes using the\n platform's default charset, storing the result into a new byte array.\n\n  The behavior of this method when this string cannot be encoded in\n the default charset is unspecified.  The CharsetEncoder class should be used when more control\n over the encoding process is required."}, {"method_name": "equals", "method_sig": "public boolean equals (Object anObject)", "description": "Compares this string to the specified object.  The result is \n true if and only if the argument is not null and is a \n String object that represents the same sequence of characters as this\n object.\n\n For finer-grained String comparison, refer to\n Collator."}, {"method_name": "contentEquals", "method_sig": "public boolean contentEquals (StringBuffer sb)", "description": "Compares this string to the specified StringBuffer.  The result\n is true if and only if this String represents the same\n sequence of characters as the specified StringBuffer. This method\n synchronizes on the StringBuffer.\n\n For finer-grained String comparison, refer to\n Collator."}, {"method_name": "contentEquals", "method_sig": "public boolean contentEquals (CharSequence cs)", "description": "Compares this string to the specified CharSequence.  The\n result is true if and only if this String represents the\n same sequence of char values as the specified sequence. Note that if the\n CharSequence is a StringBuffer then the method\n synchronizes on it.\n\n For finer-grained String comparison, refer to\n Collator."}, {"method_name": "equalsIgnoreCase", "method_sig": "public boolean equalsIgnoreCase (String anotherString)", "description": "Compares this String to another String, ignoring case\n considerations.  Two strings are considered equal ignoring case if they\n are of the same length and corresponding characters in the two strings\n are equal ignoring case.\n\n  Two characters c1 and c2 are considered the same\n ignoring case if at least one of the following is true:\n \n The two characters are the same (as compared by the\n        == operator)\n    Calling Character.toLowerCase(Character.toUpperCase(char))\n        on each character produces the same result\n \nNote that this method does not take locale into account, and\n will result in unsatisfactory results for certain locales.  The\n Collator class provides locale-sensitive comparison."}, {"method_name": "compareTo", "method_sig": "public int compareTo (String anotherString)", "description": "Compares two strings lexicographically.\n The comparison is based on the Unicode value of each character in\n the strings. The character sequence represented by this\n String object is compared lexicographically to the\n character sequence represented by the argument string. The result is\n a negative integer if this String object\n lexicographically precedes the argument string. The result is a\n positive integer if this String object lexicographically\n follows the argument string. The result is zero if the strings\n are equal; compareTo returns 0 exactly when\n the equals(Object) method would return true.\n \n This is the definition of lexicographic ordering. If two strings are\n different, then either they have different characters at some index\n that is a valid index for both strings, or their lengths are different,\n or both. If they have different characters at one or more index\n positions, let k be the smallest such index; then the string\n whose character at position k has the smaller value, as\n determined by using the < operator, lexicographically precedes the\n other string. In this case, compareTo returns the\n difference of the two character values at position k in\n the two string -- that is, the value:\n \n this.charAt(k)-anotherString.charAt(k)\n \n If there is no index position at which they differ, then the shorter\n string lexicographically precedes the longer string. In this case,\n compareTo returns the difference of the lengths of the\n strings -- that is, the value:\n \n this.length()-anotherString.length()\n \nFor finer-grained String comparison, refer to\n Collator."}, {"method_name": "compareToIgnoreCase", "method_sig": "public int compareToIgnoreCase (String str)", "description": "Compares two strings lexicographically, ignoring case\n differences. This method returns an integer whose sign is that of\n calling compareTo with normalized versions of the strings\n where case differences have been eliminated by calling\n Character.toLowerCase(Character.toUpperCase(character)) on\n each character.\n \n Note that this method does not take locale into account,\n and will result in an unsatisfactory ordering for certain locales.\n The Collator class provides locale-sensitive comparison."}, {"method_name": "regionMatches", "method_sig": "public boolean regionMatches (int toffset,\n                             String other,\n                             int ooffset,\n                             int len)", "description": "Tests if two string regions are equal.\n \n A substring of this String object is compared to a substring\n of the argument other. The result is true if these substrings\n represent identical character sequences. The substring of this\n String object to be compared begins at index toffset\n and has length len. The substring of other to be compared\n begins at index ooffset and has length len. The\n result is false if and only if at least one of the following\n is true:\n toffset is negative.\n ooffset is negative.\n toffset+len is greater than the length of this\n String object.\n ooffset+len is greater than the length of the other\n argument.\n There is some nonnegative integer k less than len\n such that:\n this.charAt(toffset + k) != other.charAt(ooffset + \nk)\n\nNote that this method does not take locale into account.  The\n Collator class provides locale-sensitive comparison."}, {"method_name": "regionMatches", "method_sig": "public boolean regionMatches (boolean ignoreCase,\n                             int toffset,\n                             String other,\n                             int ooffset,\n                             int len)", "description": "Tests if two string regions are equal.\n \n A substring of this String object is compared to a substring\n of the argument other. The result is true if these\n substrings represent character sequences that are the same, ignoring\n case if and only if ignoreCase is true. The substring of\n this String object to be compared begins at index\n toffset and has length len. The substring of\n other to be compared begins at index ooffset and\n has length len. The result is false if and only if\n at least one of the following is true:\n toffset is negative.\n ooffset is negative.\n toffset+len is greater than the length of this\n String object.\n ooffset+len is greater than the length of the other\n argument.\n ignoreCase is false and there is some nonnegative\n integer k less than len such that:\n \n this.charAt(toffset+k) != other.charAt(ooffset+k)\n \nignoreCase is true and there is some nonnegative\n integer k less than len such that:\n \n Character.toLowerCase(Character.toUpperCase(this.charAt(toffset+k))) !=\n     Character.toLowerCase(Character.toUpperCase(other.charAt(ooffset+k)))\n \n\nNote that this method does not take locale into account,\n and will result in unsatisfactory results for certain locales when\n ignoreCase is true.  The Collator class\n provides locale-sensitive comparison."}, {"method_name": "startsWith", "method_sig": "public boolean startsWith (String prefix,\n                          int toffset)", "description": "Tests if the substring of this string beginning at the\n specified index starts with the specified prefix."}, {"method_name": "startsWith", "method_sig": "public boolean startsWith (String prefix)", "description": "Tests if this string starts with the specified prefix."}, {"method_name": "endsWith", "method_sig": "public boolean endsWith (String suffix)", "description": "Tests if this string ends with the specified suffix."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Returns a hash code for this string. The hash code for a\n String object is computed as\n \n s[0]*31^(n-1) + s[1]*31^(n-2) + ... + s[n-1]\n \n using int arithmetic, where s[i] is the\n ith character of the string, n is the length of\n the string, and ^ indicates exponentiation.\n (The hash value of the empty string is zero.)"}, {"method_name": "indexOf", "method_sig": "public int indexOf (int ch)", "description": "Returns the index within this string of the first occurrence of\n the specified character. If a character with value\n ch occurs in the character sequence represented by\n this String object, then the index (in Unicode\n code units) of the first such occurrence is returned. For\n values of ch in the range from 0 to 0xFFFF\n (inclusive), this is the smallest value k such that:\n \n this.charAt(k) == ch\n \n is true. For other values of ch, it is the\n smallest value k such that:\n \n this.codePointAt(k) == ch\n \n is true. In either case, if no such character occurs in this\n string, then -1 is returned."}, {"method_name": "indexOf", "method_sig": "public int indexOf (int ch,\n                   int fromIndex)", "description": "Returns the index within this string of the first occurrence of the\n specified character, starting the search at the specified index.\n \n If a character with value ch occurs in the\n character sequence represented by this String\n object at an index no smaller than fromIndex, then\n the index of the first such occurrence is returned. For values\n of ch in the range from 0 to 0xFFFF (inclusive),\n this is the smallest value k such that:\n \n (this.charAt(k) == ch) && (k >= fromIndex)\n \n is true. For other values of ch, it is the\n smallest value k such that:\n \n (this.codePointAt(k) == ch) && (k >= fromIndex)\n \n is true. In either case, if no such character occurs in this\n string at or after position fromIndex, then\n -1 is returned.\n\n \n There is no restriction on the value of fromIndex. If it\n is negative, it has the same effect as if it were zero: this entire\n string may be searched. If it is greater than the length of this\n string, it has the same effect as if it were equal to the length of\n this string: -1 is returned.\n\n All indices are specified in char values\n (Unicode code units)."}, {"method_name": "lastIndexOf", "method_sig": "public int lastIndexOf (int ch)", "description": "Returns the index within this string of the last occurrence of\n the specified character. For values of ch in the\n range from 0 to 0xFFFF (inclusive), the index (in Unicode code\n units) returned is the largest value k such that:\n \n this.charAt(k) == ch\n \n is true. For other values of ch, it is the\n largest value k such that:\n \n this.codePointAt(k) == ch\n \n is true.  In either case, if no such character occurs in this\n string, then -1 is returned.  The\n String is searched backwards starting at the last\n character."}, {"method_name": "lastIndexOf", "method_sig": "public int lastIndexOf (int ch,\n                       int fromIndex)", "description": "Returns the index within this string of the last occurrence of\n the specified character, searching backward starting at the\n specified index. For values of ch in the range\n from 0 to 0xFFFF (inclusive), the index returned is the largest\n value k such that:\n \n (this.charAt(k) == ch) && (k <= fromIndex)\n \n is true. For other values of ch, it is the\n largest value k such that:\n \n (this.codePointAt(k) == ch) && (k <= fromIndex)\n \n is true. In either case, if no such character occurs in this\n string at or before position fromIndex, then\n -1 is returned.\n\n All indices are specified in char values\n (Unicode code units)."}, {"method_name": "indexOf", "method_sig": "public int indexOf (String str)", "description": "Returns the index within this string of the first occurrence of the\n specified substring.\n\n The returned index is the smallest value k for which:\n \n this.startsWith(str, k)\n \n If no such value of k exists, then -1 is returned."}, {"method_name": "indexOf", "method_sig": "public int indexOf (String str,\n                   int fromIndex)", "description": "Returns the index within this string of the first occurrence of the\n specified substring, starting at the specified index.\n\n The returned index is the smallest value k for which:\n \n     k >= Math.min(fromIndex, this.length()) &&\n                   this.startsWith(str, k)\n \n If no such value of k exists, then -1 is returned."}, {"method_name": "lastIndexOf", "method_sig": "public int lastIndexOf (String str)", "description": "Returns the index within this string of the last occurrence of the\n specified substring.  The last occurrence of the empty string \"\"\n is considered to occur at the index value this.length().\n\n The returned index is the largest value k for which:\n \n this.startsWith(str, k)\n \n If no such value of k exists, then -1 is returned."}, {"method_name": "lastIndexOf", "method_sig": "public int lastIndexOf (String str,\n                       int fromIndex)", "description": "Returns the index within this string of the last occurrence of the\n specified substring, searching backward starting at the specified index.\n\n The returned index is the largest value k for which:\n \n     k <= Math.min(fromIndex, this.length()) &&\n                   this.startsWith(str, k)\n \n If no such value of k exists, then -1 is returned."}, {"method_name": "substring", "method_sig": "public String substring (int beginIndex)", "description": "Returns a string that is a substring of this string. The\n substring begins with the character at the specified index and\n extends to the end of this string. \n Examples:\n \n \"unhappy\".substring(2) returns \"happy\"\n \"Harbison\".substring(3) returns \"bison\"\n \"emptiness\".substring(9) returns \"\" (an empty string)\n "}, {"method_name": "substring", "method_sig": "public String substring (int beginIndex,\n                        int endIndex)", "description": "Returns a string that is a substring of this string. The\n substring begins at the specified beginIndex and\n extends to the character at index endIndex - 1.\n Thus the length of the substring is endIndex-beginIndex.\n \n Examples:\n \n \"hamburger\".substring(4, 8) returns \"urge\"\n \"smiles\".substring(1, 5) returns \"mile\"\n "}, {"method_name": "subSequence", "method_sig": "public CharSequence subSequence (int beginIndex,\n                                int endIndex)", "description": "Returns a character sequence that is a subsequence of this sequence.\n\n  An invocation of this method of the form\n\n \n str.subSequence(begin,\u00a0end)\n\n behaves in exactly the same way as the invocation\n\n \n str.substring(begin,\u00a0end)"}, {"method_name": "concat", "method_sig": "public String concat (String str)", "description": "Concatenates the specified string to the end of this string.\n \n If the length of the argument string is 0, then this\n String object is returned. Otherwise, a\n String object is returned that represents a character\n sequence that is the concatenation of the character sequence\n represented by this String object and the character\n sequence represented by the argument string.\n Examples:\n \n \"cares\".concat(\"s\") returns \"caress\"\n \"to\".concat(\"get\").concat(\"her\") returns \"together\"\n "}, {"method_name": "replace", "method_sig": "public String replace (char oldChar,\n                      char newChar)", "description": "Returns a string resulting from replacing all occurrences of\n oldChar in this string with newChar.\n \n If the character oldChar does not occur in the\n character sequence represented by this String object,\n then a reference to this String object is returned.\n Otherwise, a String object is returned that\n represents a character sequence identical to the character sequence\n represented by this String object, except that every\n occurrence of oldChar is replaced by an occurrence\n of newChar.\n \n Examples:\n \n \"mesquite in your cellar\".replace('e', 'o')\n         returns \"mosquito in your collar\"\n \"the war of baronets\".replace('r', 'y')\n         returns \"the way of bayonets\"\n \"sparring with a purple porpoise\".replace('p', 't')\n         returns \"starring with a turtle tortoise\"\n \"JonL\".replace('q', 'x') returns \"JonL\" (no change)\n "}, {"method_name": "matches", "method_sig": "public boolean matches (String regex)", "description": "Tells whether or not this string matches the given regular expression.\n\n  An invocation of this method of the form\n str.matches(regex) yields exactly the\n same result as the expression\n\n \nPattern.matches(regex, str)\n"}, {"method_name": "contains", "method_sig": "public boolean contains (CharSequence s)", "description": "Returns true if and only if this string contains the specified\n sequence of char values."}, {"method_name": "replaceFirst", "method_sig": "public String replaceFirst (String regex,\n                           String replacement)", "description": "Replaces the first substring of this string that matches the given regular expression with the\n given replacement.\n\n  An invocation of this method of the form\n str.replaceFirst(regex, repl)\n yields exactly the same result as the expression\n\n \n\nPattern.compile(regex).matcher(str).replaceFirst(repl)\n \n\n\n Note that backslashes (\\) and dollar signs ($) in the\n replacement string may cause the results to be different than if it were\n being treated as a literal replacement string; see\n Matcher.replaceFirst(java.lang.String).\n Use Matcher.quoteReplacement(java.lang.String) to suppress the special\n meaning of these characters, if desired."}, {"method_name": "replaceAll", "method_sig": "public String replaceAll (String regex,\n                         String replacement)", "description": "Replaces each substring of this string that matches the given regular expression with the\n given replacement.\n\n  An invocation of this method of the form\n str.replaceAll(regex, repl)\n yields exactly the same result as the expression\n\n \n\nPattern.compile(regex).matcher(str).replaceAll(repl)\n \n\n\n Note that backslashes (\\) and dollar signs ($) in the\n replacement string may cause the results to be different than if it were\n being treated as a literal replacement string; see\n Matcher.replaceAll.\n Use Matcher.quoteReplacement(java.lang.String) to suppress the special\n meaning of these characters, if desired."}, {"method_name": "replace", "method_sig": "public String replace (CharSequence target,\n                      CharSequence replacement)", "description": "Replaces each substring of this string that matches the literal target\n sequence with the specified literal replacement sequence. The\n replacement proceeds from the beginning of the string to the end, for\n example, replacing \"aa\" with \"b\" in the string \"aaa\" will result in\n \"ba\" rather than \"ab\"."}, {"method_name": "split", "method_sig": "public String[] split (String regex,\n                      int limit)", "description": "Splits this string around matches of the given\n regular expression.\n\n  The array returned by this method contains each substring of this\n string that is terminated by another substring that matches the given\n expression or is terminated by the end of the string.  The substrings in\n the array are in the order in which they occur in this string.  If the\n expression does not match any part of the input then the resulting array\n has just one element, namely this string.\n\n  When there is a positive-width match at the beginning of this\n string then an empty leading substring is included at the beginning\n of the resulting array. A zero-width match at the beginning however\n never produces such empty leading substring.\n\n  The limit parameter controls the number of times the\n pattern is applied and therefore affects the length of the resulting\n array.\n \n\n    If the limit is positive then the pattern will be applied\n    at most limit\u00a0-\u00a01 times, the array's length will be\n    no greater than limit, and the array's last entry will contain\n    all input beyond the last matched delimiter.\n\n    If the limit is zero then the pattern will be applied as\n    many times as possible, the array can have any length, and trailing\n    empty strings will be discarded.\n\n    If the limit is negative then the pattern will be applied\n    as many times as possible and the array can have any length.\n\n The string \"boo:and:foo\", for example, yields the\n following results with these parameters:\n\n \nSplit example showing regex, limit, and result\n\n\nRegex\nLimit\nResult\n\n\n\n:\n2\n{ \"boo\", \"and:foo\" }\n\n5\n{ \"boo\", \"and\", \"foo\" }\n\n-2\n{ \"boo\", \"and\", \"foo\" }\no\n5\n{ \"b\", \"\", \":and:f\", \"\", \"\" }\n\n-2\n{ \"b\", \"\", \":and:f\", \"\", \"\" }\n\n0\n{ \"b\", \"\", \":and:f\" }\n\n\n An invocation of this method of the form\n str.split(regex,\u00a0n)\n yields the same result as the expression\n\n \n\nPattern.compile(regex).split(str,\u00a0n)\n \n"}, {"method_name": "split", "method_sig": "public String[] split (String regex)", "description": "Splits this string around matches of the given regular expression.\n\n  This method works as if by invoking the two-argument split method with the given expression and a limit\n argument of zero.  Trailing empty strings are therefore not included in\n the resulting array.\n\n  The string \"boo:and:foo\", for example, yields the following\n results with these expressions:\n\n \nSplit examples showing regex and result\n\n\nRegex\nResult\n\n\n\n:\n{ \"boo\", \"and\", \"foo\" }\no\n{ \"b\", \"\", \":and:f\" }\n\n"}, {"method_name": "join", "method_sig": "public static String join (CharSequence delimiter,\n                          CharSequence... elements)", "description": "Returns a new String composed of copies of the\n CharSequence elements joined together with a copy of\n the specified delimiter.\n\n For example,\n \n     String message = String.join(\"-\", \"Java\", \"is\", \"cool\");\n     // message returned is: \"Java-is-cool\"\n \n\n Note that if an element is null, then \"null\" is added."}, {"method_name": "join", "method_sig": "public static String join (CharSequence delimiter,\n                          Iterable<? extends CharSequence> elements)", "description": "Returns a new String composed of copies of the\n CharSequence elements joined together with a copy of the\n specified delimiter.\n\n For example,\n \n     List<String> strings = List.of(\"Java\", \"is\", \"cool\");\n     String message = String.join(\" \", strings);\n     //message returned is: \"Java is cool\"\n\n     Set<String> strings =\n         new LinkedHashSet<>(List.of(\"Java\", \"is\", \"very\", \"cool\"));\n     String message = String.join(\"-\", strings);\n     //message returned is: \"Java-is-very-cool\"\n \n\n Note that if an individual element is null, then \"null\" is added."}, {"method_name": "toLowerCase", "method_sig": "public String toLowerCase (Locale locale)", "description": "Converts all of the characters in this String to lower\n case using the rules of the given Locale.  Case mapping is based\n on the Unicode Standard version specified by the Character\n class. Since case mappings are not always 1:1 char mappings, the resulting\n String may be a different length than the original String.\n \n Examples of lowercase  mappings are in the following table:\n \nLowercase mapping examples showing language code of locale, upper case, lower case, and description\n\n\nLanguage Code of Locale\nUpper Case\nLower Case\nDescription\n\n\n\n\ntr (Turkish)\n\\u0130\n\\u0069\ncapital letter I with dot above -> small letter i\n\n\ntr (Turkish)\n\\u0049\n\\u0131\ncapital letter I -> small letter dotless i \n\n\n(all)\nFrench Fries\nfrench fries\nlowercased all chars in String\n\n\n(all)\n\n       \u0399\u03a7\u0398\u03a5\u03a3\n\u03b9\u03c7\u03b8\u03c5\u03c3\nlowercased all chars in String\n\n\n"}, {"method_name": "toLowerCase", "method_sig": "public String toLowerCase()", "description": "Converts all of the characters in this String to lower\n case using the rules of the default locale. This is equivalent to calling\n toLowerCase(Locale.getDefault()).\n \nNote: This method is locale sensitive, and may produce unexpected\n results if used for strings that are intended to be interpreted locale\n independently.\n Examples are programming language identifiers, protocol keys, and HTML\n tags.\n For instance, \"TITLE\".toLowerCase() in a Turkish locale\n returns \"t\\u0131tle\", where '\\u0131' is the\n LATIN SMALL LETTER DOTLESS I character.\n To obtain correct results for locale insensitive strings, use\n toLowerCase(Locale.ROOT)."}, {"method_name": "toUpperCase", "method_sig": "public String toUpperCase (Locale locale)", "description": "Converts all of the characters in this String to upper\n case using the rules of the given Locale. Case mapping is based\n on the Unicode Standard version specified by the Character\n class. Since case mappings are not always 1:1 char mappings, the resulting\n String may be a different length than the original String.\n \n Examples of locale-sensitive and 1:M case mappings are in the following table.\n\n \nExamples of locale-sensitive and 1:M case mappings. Shows Language code of locale, lower case, upper case, and description.\n\n\nLanguage Code of Locale\nLower Case\nUpper Case\nDescription\n\n\n\n\ntr (Turkish)\n\\u0069\n\\u0130\nsmall letter i -> capital letter I with dot above\n\n\ntr (Turkish)\n\\u0131\n\\u0049\nsmall letter dotless i -> capital letter I\n\n\n(all)\n\\u00df\n\\u0053 \\u0053\nsmall letter sharp s -> two letters: SS\n\n\n(all)\nFahrvergn\u00fcgen\nFAHRVERGN\u00dcGEN\n\n\n\n"}, {"method_name": "toUpperCase", "method_sig": "public String toUpperCase()", "description": "Converts all of the characters in this String to upper\n case using the rules of the default locale. This method is equivalent to\n toUpperCase(Locale.getDefault()).\n \nNote: This method is locale sensitive, and may produce unexpected\n results if used for strings that are intended to be interpreted locale\n independently.\n Examples are programming language identifiers, protocol keys, and HTML\n tags.\n For instance, \"title\".toUpperCase() in a Turkish locale\n returns \"T\\u0130TLE\", where '\\u0130' is the\n LATIN CAPITAL LETTER I WITH DOT ABOVE character.\n To obtain correct results for locale insensitive strings, use\n toUpperCase(Locale.ROOT)."}, {"method_name": "trim", "method_sig": "public String trim()", "description": "Returns a string whose value is this string, with all leading\n and trailing space removed, where space is defined\n as any character whose codepoint is less than or equal to\n 'U+0020' (the space character).\n \n If this String object represents an empty character\n sequence, or the first and last characters of character sequence\n represented by this String object both have codes\n that are not space (as defined above), then a\n reference to this String object is returned.\n \n Otherwise, if all characters in this string are space (as\n defined above), then a  String object representing an\n empty string is returned.\n \n Otherwise, let k be the index of the first character in the\n string whose code is not a space (as defined above) and let\n m be the index of the last character in the string whose code\n is not a space (as defined above). A String\n object is returned, representing the substring of this string that\n begins with the character at index k and ends with the\n character at index m-that is, the result of\n this.substring(k, m + 1).\n \n This method may be used to trim space (as defined above) from\n the beginning and end of a string."}, {"method_name": "strip", "method_sig": "public String strip()", "description": "Returns a string whose value is this string, with all leading\n and trailing white space\n removed.\n \n If this String object represents an empty string,\n or if all code points in this string are\n white space, then an empty string\n is returned.\n \n Otherwise, returns a substring of this string beginning with the first\n code point that is not a white space\n up to and including the last code point that is not a\n white space.\n \n This method may be used to strip\n white space from\n the beginning and end of a string."}, {"method_name": "stripLeading", "method_sig": "public String stripLeading()", "description": "Returns a string whose value is this string, with all leading\n white space removed.\n \n If this String object represents an empty string,\n or if all code points in this string are\n white space, then an empty string\n is returned.\n \n Otherwise, returns a substring of this string beginning with the first\n code point that is not a white space\n up to to and including the last code point of this string.\n \n This method may be used to trim\n white space from\n the beginning of a string."}, {"method_name": "stripTrailing", "method_sig": "public String stripTrailing()", "description": "Returns a string whose value is this string, with all trailing\n white space removed.\n \n If this String object represents an empty string,\n or if all characters in this string are\n white space, then an empty string\n is returned.\n \n Otherwise, returns a substring of this string beginning with the first\n code point of this string up to and including the last code point\n that is not a white space.\n \n This method may be used to trim\n white space from\n the end of a string."}, {"method_name": "isBlank", "method_sig": "public boolean isBlank()", "description": "Returns true if the string is empty or contains only\n white space codepoints,\n otherwise false."}, {"method_name": "lines", "method_sig": "public Stream<String> lines()", "description": "Returns a stream of lines extracted from this string,\n separated by line terminators.\n \n A line terminator is one of the following:\n a line feed character \"\\n\" (U+000A),\n a carriage return character \"\\r\" (U+000D),\n or a carriage return followed immediately by a line feed\n \"\\r\\n\" (U+000D U+000A).\n \n A line is either a sequence of zero or more characters\n followed by a line terminator, or it is a sequence of one or\n more characters followed by the end of the string. A\n line does not include the line terminator.\n \n The stream returned by this method contains the lines from\n this string in the order in which they occur."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "This object (which is already a string!) is itself returned."}, {"method_name": "chars", "method_sig": "public IntStream chars()", "description": "Returns a stream of int zero-extending the char values\n from this sequence.  Any char which maps to a surrogate code\n point is passed through uninterpreted."}, {"method_name": "codePoints", "method_sig": "public IntStream codePoints()", "description": "Returns a stream of code point values from this sequence.  Any surrogate\n pairs encountered in the sequence are combined as if by Character.toCodePoint and the result is passed\n to the stream. Any other code units, including ordinary BMP characters,\n unpaired surrogates, and undefined code units, are zero-extended to\n int values which are then passed to the stream."}, {"method_name": "toCharArray", "method_sig": "public char[] toCharArray()", "description": "Converts this string to a new character array."}, {"method_name": "format", "method_sig": "public static String format (String format,\n                            Object... args)", "description": "Returns a formatted string using the specified format string and\n arguments.\n\n  The locale always used is the one returned by Locale.getDefault(Locale.Category) with\n FORMAT category specified."}, {"method_name": "format", "method_sig": "public static String format (Locale l,\n                            String format,\n                            Object... args)", "description": "Returns a formatted string using the specified locale, format string,\n and arguments."}, {"method_name": "valueOf", "method_sig": "public static String valueOf (Object obj)", "description": "Returns the string representation of the Object argument."}, {"method_name": "valueOf", "method_sig": "public static String valueOf (char[] data)", "description": "Returns the string representation of the char array\n argument. The contents of the character array are copied; subsequent\n modification of the character array does not affect the returned\n string."}, {"method_name": "valueOf", "method_sig": "public static String valueOf (char[] data,\n                             int offset,\n                             int count)", "description": "Returns the string representation of a specific subarray of the\n char array argument.\n \n The offset argument is the index of the first\n character of the subarray. The count argument\n specifies the length of the subarray. The contents of the subarray\n are copied; subsequent modification of the character array does not\n affect the returned string."}, {"method_name": "copyValueOf", "method_sig": "public static String copyValueOf (char[] data,\n                                 int offset,\n                                 int count)", "description": "Equivalent to valueOf(char[], int, int)."}, {"method_name": "copyValueOf", "method_sig": "public static String copyValueOf (char[] data)", "description": "Equivalent to valueOf(char[])."}, {"method_name": "valueOf", "method_sig": "public static String valueOf (boolean b)", "description": "Returns the string representation of the boolean argument."}, {"method_name": "valueOf", "method_sig": "public static String valueOf (char c)", "description": "Returns the string representation of the char\n argument."}, {"method_name": "valueOf", "method_sig": "public static String valueOf (int i)", "description": "Returns the string representation of the int argument.\n \n The representation is exactly the one returned by the\n Integer.toString method of one argument."}, {"method_name": "valueOf", "method_sig": "public static String valueOf (long l)", "description": "Returns the string representation of the long argument.\n \n The representation is exactly the one returned by the\n Long.toString method of one argument."}, {"method_name": "valueOf", "method_sig": "public static String valueOf (float f)", "description": "Returns the string representation of the float argument.\n \n The representation is exactly the one returned by the\n Float.toString method of one argument."}, {"method_name": "valueOf", "method_sig": "public static String valueOf (double d)", "description": "Returns the string representation of the double argument.\n \n The representation is exactly the one returned by the\n Double.toString method of one argument."}, {"method_name": "intern", "method_sig": "public String intern()", "description": "Returns a canonical representation for the string object.\n \n A pool of strings, initially empty, is maintained privately by the\n class String.\n \n When the intern method is invoked, if the pool already contains a\n string equal to this String object as determined by\n the equals(Object) method, then the string from the pool is\n returned. Otherwise, this String object is added to the\n pool and a reference to this String object is returned.\n \n It follows that for any two strings s and t,\n s.intern() == t.intern() is true\n if and only if s.equals(t) is true.\n \n All literal strings and string-valued constant expressions are\n interned. String literals are defined in section 3.10.5 of the\n The Java\u2122 Language Specification."}, {"method_name": "repeat", "method_sig": "public String repeat (int count)", "description": "Returns a string whose value is the concatenation of this\n string repeated count times.\n \n If this string is empty or count is zero then the empty\n string is returned."}]}