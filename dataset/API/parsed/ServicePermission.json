{"name": "Class ServicePermission", "module": "java.security.jgss", "package": "javax.security.auth.kerberos", "text": "This class is used to protect Kerberos services and the\n credentials necessary to access those services. There is a one to\n one mapping of a service principal and the credentials necessary\n to access the service. Therefore granting access to a service\n principal implicitly grants access to the credential necessary to\n establish a security context with the service principal. This\n applies regardless of whether the credentials are in a cache\n or acquired via an exchange with the KDC. The credential can\n be either a ticket granting ticket, a service ticket or a secret\n key from a key table.\n \n A ServicePermission contains a service principal name and\n a list of actions which specify the context the credential can be\n used within.\n \n The service principal name is the canonical name of the\n KerberosPrincipal supplying the service, that is\n the KerberosPrincipal represents a Kerberos service\n principal. This name is treated in a case sensitive manner.\n An asterisk may appear by itself, to signify any service principal.\n \n Granting this permission implies that the caller can use a cached\n credential (TGT, service ticket or secret key) within the context\n designated by the action. In the case of the TGT, granting this\n permission also implies that the TGT can be obtained by an\n Authentication Service exchange.\n \n Granting this permission also implies creating KerberosPrincipal\n or GSSName without providing a Kerberos\n realm, as long as the permission's service principal is in this realm.\n \n The possible actions are:\n\n \n    initiate -              allow the caller to use the credential to\n                            initiate a security context with a service\n                            principal.\n\n    accept -                allow the caller to use the credential to\n                            accept security context as a particular\n                            principal.\n \n\n For example, to specify the permission to access to the TGT to\n initiate a security context the permission is constructed as follows:\n\n \n     ServicePermission(\"krbtgt/EXAMPLE.COM@EXAMPLE.COM\", \"initiate\");\n \n\n To obtain a service ticket to initiate a context with the \"host\"\n service the permission is constructed as follows:\n \n     ServicePermission(\"host/foo.example.com@EXAMPLE.COM\", \"initiate\");\n \n\n For a Kerberized server the action is \"accept\". For example, the permission\n necessary to access and use the secret key of the  Kerberized \"host\"\n service (telnet and the likes)  would be constructed as follows:\n\n \n     ServicePermission(\"host/foo.example.com@EXAMPLE.COM\", \"accept\");\n ", "codes": ["public final class ServicePermission\nextends Permission\nimplements Serializable"], "fields": [], "methods": [{"method_name": "implies", "method_sig": "public boolean implies (Permission p)", "description": "Checks if this Kerberos service permission object \"implies\" the\n specified permission.\n \n More specifically, this method returns true if all of the following\n are true (and returns false if any of them are not):\n \n p is an instanceof ServicePermission,\n  p's actions are a proper subset of this\n ServicePermission's actions,\n  p's name is equal to this ServicePermission's name\n or this ServicePermission's name is \"*\".\n "}, {"method_name": "equals", "method_sig": "public boolean equals (Object obj)", "description": "Checks two ServicePermission objects for equality."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Returns the hash code value for this object."}, {"method_name": "getActions", "method_sig": "public String getActions()", "description": "Returns the canonical string representation of the actions.\n Always returns present actions in the following order:\n initiate, accept."}, {"method_name": "newPermissionCollection", "method_sig": "public PermissionCollection newPermissionCollection()", "description": "Returns a PermissionCollection object for storing\n ServicePermission objects.\n \n ServicePermission objects must be stored in a manner that\n allows them to be inserted into the collection in any order, but\n that also enables the PermissionCollection implies method to\n be implemented in an efficient (and consistent) manner."}]}