{"name": "Class BlockView", "module": "java.desktop", "package": "javax.swing.text.html", "text": "A view implementation to display a block (as a box)\n with CSS specifications.", "codes": ["public class BlockView\nextends BoxView"], "fields": [], "methods": [{"method_name": "setParent", "method_sig": "public void setParent (View parent)", "description": "Establishes the parent view for this view.  This is\n guaranteed to be called before any other methods if the\n parent view is functioning properly.\n \n This is implemented\n to forward to the superclass as well as call the\n setPropertiesFromAttributes()\n method to set the paragraph properties from the css\n attributes.  The call is made at this time to ensure\n the ability to resolve upward through the parents\n view attributes."}, {"method_name": "calculateMajorAxisRequirements", "method_sig": "protected SizeRequirements calculateMajorAxisRequirements (int axis,\n                                                          SizeRequirements r)", "description": "Calculate the requirements of the block along the major\n axis (i.e. the axis along with it tiles).  This is implemented\n to provide the superclass behavior and then adjust it if the\n CSS width or height attribute is specified and applicable to\n the axis."}, {"method_name": "calculateMinorAxisRequirements", "method_sig": "protected SizeRequirements calculateMinorAxisRequirements (int axis,\n                                                          SizeRequirements r)", "description": "Calculate the requirements of the block along the minor\n axis (i.e. the axis orthogonal to the axis along with it tiles).\n This is implemented\n to provide the superclass behavior and then adjust it if the\n CSS width or height attribute is specified and applicable to\n the axis."}, {"method_name": "layoutMinorAxis", "method_sig": "protected void layoutMinorAxis (int targetSpan,\n                               int axis,\n                               int[] offsets,\n                               int[] spans)", "description": "Performs layout for the minor axis of the box (i.e. the\n axis orthogonal to the axis that it represents). The results\n of the layout (the offset and span for each children) are\n placed in the given arrays which represent the allocations to\n the children along the minor axis."}, {"method_name": "paint", "method_sig": "public void paint (Graphics g,\n                  Shape allocation)", "description": "Renders using the given rendering surface and area on that\n surface.  This is implemented to delegate to the css box\n painter to paint the border and background prior to the\n interior."}, {"method_name": "getAttributes", "method_sig": "public AttributeSet getAttributes()", "description": "Fetches the attributes to use when rendering.  This is\n implemented to multiplex the attributes specified in the\n model with a StyleSheet."}, {"method_name": "getResizeWeight", "method_sig": "public int getResizeWeight (int axis)", "description": "Gets the resize weight."}, {"method_name": "getAlignment", "method_sig": "public float getAlignment (int axis)", "description": "Gets the alignment."}, {"method_name": "getPreferredSpan", "method_sig": "public float getPreferredSpan (int axis)", "description": "Determines the preferred span for this view along an\n axis."}, {"method_name": "getMinimumSpan", "method_sig": "public float getMinimumSpan (int axis)", "description": "Determines the minimum span for this view along an\n axis."}, {"method_name": "getMaximumSpan", "method_sig": "public float getMaximumSpan (int axis)", "description": "Determines the maximum span for this view along an\n axis."}, {"method_name": "setPropertiesFromAttributes", "method_sig": "protected void setPropertiesFromAttributes()", "description": "Update any cached values that come from attributes."}, {"method_name": "getStyleSheet", "method_sig": "protected StyleSheet getStyleSheet()", "description": "Convenient method to get the StyleSheet."}]}