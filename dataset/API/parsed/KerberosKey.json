{"name": "Class KerberosKey", "module": "java.security.jgss", "package": "javax.security.auth.kerberos", "text": "This class encapsulates a long term secret key for a Kerberos\n principal.\n\n A KerberosKey object includes an EncryptionKey, a\n KerberosPrincipal as its owner, and the version number\n of the key.\n\n An EncryptionKey is defined in Section 4.2.9 of the Kerberos Protocol\n Specification (RFC 4120) as:\n \n     EncryptionKey   ::= SEQUENCE {\n             keytype         [0] Int32 -- actually encryption type --,\n             keyvalue        [1] OCTET STRING\n     }\n \n The key material of a KerberosKey is defined as the value\n of the keyValue above.\n\n All Kerberos JAAS login modules that obtain a principal's password and\n generate the secret key from it should use this class.\n Sometimes, such as when authenticating a server in\n the absence of user-to-user authentication, the login module will store\n an instance of this class in the private credential set of a\n Subject during the commit phase of the\n authentication process.\n\n A Kerberos service using a keytab to read secret keys should use\n the KeyTab class, where latest keys can be read when needed.\n\n It might be necessary for the application to be granted a\n PrivateCredentialPermission if it needs to access the KerberosKey\n instance from a Subject. This permission is not needed when the\n application depends on the default JGSS Kerberos mechanism to access the\n KerberosKey. In that case, however, the application will need an\n appropriate\n ServicePermission.\n\n When creating a KerberosKey using the\n KerberosKey(KerberosPrincipal, char[], String) constructor,\n an implementation may accept non-IANA algorithm names (For example,\n \"ArcFourMac\" for \"rc4-hmac\"), but the getAlgorithm() method\n must always return the IANA algorithm name.", "codes": ["public class KerberosKey\nextends Object\nimplements SecretKey"], "fields": [], "methods": [{"method_name": "getPrincipal", "method_sig": "public final KerberosPrincipal getPrincipal()", "description": "Returns the principal that this key belongs to."}, {"method_name": "getVersionNumber", "method_sig": "public final int getVersionNumber()", "description": "Returns the key version number."}, {"method_name": "getKeyType", "method_sig": "public final int getKeyType()", "description": "Returns the key type for this long-term key."}, {"method_name": "getAlgorithm", "method_sig": "public final String getAlgorithm()", "description": "Returns the standard algorithm name for this key. The algorithm names\n are the encryption type string defined on the IANA\n Kerberos Encryption Type Numbers\n page.\n \n This method can return the following value not defined on the IANA page:\n \nnone: for etype equal to 0\nunknown: for etype greater than 0 but unsupported by\n         the implementation\nprivate: for etype smaller than 0\n"}, {"method_name": "getFormat", "method_sig": "public final String getFormat()", "description": "Returns the name of the encoding format for this secret key."}, {"method_name": "getEncoded", "method_sig": "public final byte[] getEncoded()", "description": "Returns the key material of this secret key."}, {"method_name": "destroy", "method_sig": "public void destroy()\n             throws DestroyFailedException", "description": "Destroys this key by clearing out the key material of this secret key."}, {"method_name": "isDestroyed", "method_sig": "public boolean isDestroyed()", "description": "Determines if this key has been destroyed."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns an informative textual representation of this KerberosKey."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Returns a hash code for this KerberosKey."}, {"method_name": "equals", "method_sig": "public boolean equals (Object other)", "description": "Compares the specified object with this KerberosKey for\n equality. Returns true if the given object is also a\n KerberosKey and the two\n KerberosKey instances are equivalent.\n A destroyed KerberosKey object is only equal to itself."}]}