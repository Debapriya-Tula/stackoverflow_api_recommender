{"name": "Class JPopupMenu", "module": "java.desktop", "package": "javax.swing", "text": "An implementation of a popup menu -- a small window that pops up\n and displays a series of choices. A JPopupMenu is used for the\n menu that appears when the user selects an item on the menu bar.\n It is also used for \"pull-right\" menu that appears when the\n selects a menu item that activates it. Finally, a JPopupMenu\n can also be used anywhere else you want a menu to appear.  For\n example, when the user right-clicks in a specified area.\n \n For information and examples of using popup menus, see\n How to Use Menus\n in The Java Tutorial.\n\nWarning: Swing is not thread safe. For more\n information see Swing's Threading\n Policy.\n \nWarning:\n Serialized objects of this class will not be compatible with\n future Swing releases. The current serialization support is\n appropriate for short term storage or RMI between applications running\n the same version of Swing.  As of 1.4, support for long term storage\n of all JavaBeans\u2122\n has been added to the java.beans package.\n Please see XMLEncoder.", "codes": ["@JavaBean(defaultProperty=\"UI\",\n          description=\"A small window that pops up and displays a series of choices.\")\npublic class JPopupMenu\nextends JComponent\nimplements Accessible, MenuElement"], "fields": [], "methods": [{"method_name": "setDefaultLightWeightPopupEnabled", "method_sig": "public static void setDefaultLightWeightPopupEnabled (boolean aFlag)", "description": "Sets the default value of the lightWeightPopupEnabled\n  property."}, {"method_name": "getDefaultLightWeightPopupEnabled", "method_sig": "public static boolean getDefaultLightWeightPopupEnabled()", "description": "Gets the defaultLightWeightPopupEnabled property,\n  which by default is true."}, {"method_name": "getUI", "method_sig": "public PopupMenuUI getUI()", "description": "Returns the look and feel (L&F) object that renders this component."}, {"method_name": "setUI", "method_sig": "@BeanProperty(hidden=true,\n              visualUpdate=true,\n              description=\"The UI object that implements the Component\\'s LookAndFeel.\")\npublic void setUI (PopupMenuUI ui)", "description": "Sets the L&F object that renders this component."}, {"method_name": "updateUI", "method_sig": "public void updateUI()", "description": "Resets the UI property to a value from the current look and feel."}, {"method_name": "getUIClassID", "method_sig": "@BeanProperty(bound=false)\npublic String getUIClassID()", "description": "Returns the name of the L&F class that renders this component."}, {"method_name": "processKeyEvent", "method_sig": "protected void processKeyEvent (KeyEvent evt)", "description": "Processes key stroke events such as mnemonics and accelerators."}, {"method_name": "getSelectionModel", "method_sig": "public SingleSelectionModel getSelectionModel()", "description": "Returns the model object that handles single selections."}, {"method_name": "setSelectionModel", "method_sig": "@BeanProperty(bound=false,\n              expert=true,\n              description=\"The selection model for the popup menu\")\npublic void setSelectionModel (SingleSelectionModel model)", "description": "Sets the model object to handle single selections."}, {"method_name": "add", "method_sig": "public JMenuItem add (JMenuItem menuItem)", "description": "Appends the specified menu item to the end of this menu."}, {"method_name": "add", "method_sig": "public JMenuItem add (String s)", "description": "Creates a new menu item with the specified text and appends\n it to the end of this menu."}, {"method_name": "add", "method_sig": "public JMenuItem add (Action a)", "description": "Appends a new menu item to the end of the menu which\n dispatches the specified Action object."}, {"method_name": "createActionComponent", "method_sig": "protected JMenuItem createActionComponent (Action a)", "description": "Factory method which creates the JMenuItem for\n Actions added to the JPopupMenu."}, {"method_name": "createActionChangeListener", "method_sig": "protected PropertyChangeListener createActionChangeListener (JMenuItem b)", "description": "Returns a properly configured PropertyChangeListener\n which updates the control as changes to the Action occur."}, {"method_name": "remove", "method_sig": "public void remove (int pos)", "description": "Removes the component at the specified index from this popup menu."}, {"method_name": "setLightWeightPopupEnabled", "method_sig": "@BeanProperty(bound=false,\n              expert=true,\n              description=\"Determines whether lightweight popups are used when possible\")\npublic void setLightWeightPopupEnabled (boolean aFlag)", "description": "Sets the value of the lightWeightPopupEnabled property,\n which by default is true.\n By default, when a look and feel displays a popup,\n it can choose to\n use a lightweight (all-Java) popup.\n Lightweight popup windows are more efficient than heavyweight\n (native peer) windows,\n but lightweight and heavyweight components do not mix well in a GUI.\n If your application mixes lightweight and heavyweight components,\n you should disable lightweight popups.\n Some look and feels might always use heavyweight popups,\n no matter what the value of this property."}, {"method_name": "isLightWeightPopupEnabled", "method_sig": "public boolean isLightWeightPopupEnabled()", "description": "Gets the lightWeightPopupEnabled property."}, {"method_name": "getLabel", "method_sig": "public String getLabel()", "description": "Returns the popup menu's label"}, {"method_name": "setLabel", "method_sig": "@BeanProperty(description=\"The label for the popup menu.\")\npublic void setLabel (String label)", "description": "Sets the popup menu's label.  Different look and feels may choose\n to display or not display this."}, {"method_name": "addSeparator", "method_sig": "public void addSeparator()", "description": "Appends a new separator at the end of the menu."}, {"method_name": "insert", "method_sig": "public void insert (Action a,\n                   int index)", "description": "Inserts a menu item for the specified Action object at\n a given position."}, {"method_name": "insert", "method_sig": "public void insert (Component component,\n                   int index)", "description": "Inserts the specified component into the menu at a given\n position."}, {"method_name": "addPopupMenuListener", "method_sig": "public void addPopupMenuListener (PopupMenuListener l)", "description": "Adds a PopupMenu listener."}, {"method_name": "removePopupMenuListener", "method_sig": "public void removePopupMenuListener (PopupMenuListener l)", "description": "Removes a PopupMenu listener."}, {"method_name": "getPopupMenuListeners", "method_sig": "@BeanProperty(bound=false)\npublic PopupMenuListener[] getPopupMenuListeners()", "description": "Returns an array of all the PopupMenuListeners added\n to this JMenuItem with addPopupMenuListener()."}, {"method_name": "addMenuKeyListener", "method_sig": "public void addMenuKeyListener (MenuKeyListener l)", "description": "Adds a MenuKeyListener to the popup menu."}, {"method_name": "removeMenuKeyListener", "method_sig": "public void removeMenuKeyListener (MenuKeyListener l)", "description": "Removes a MenuKeyListener from the popup menu."}, {"method_name": "getMenuKeyListeners", "method_sig": "@BeanProperty(bound=false)\npublic MenuKeyListener[] getMenuKeyListeners()", "description": "Returns an array of all the MenuKeyListeners added\n to this JPopupMenu with addMenuKeyListener()."}, {"method_name": "firePopupMenuWillBecomeVisible", "method_sig": "protected void firePopupMenuWillBecomeVisible()", "description": "Notifies PopupMenuListeners that this popup menu will\n become visible."}, {"method_name": "firePopupMenuWillBecomeInvisible", "method_sig": "protected void firePopupMenuWillBecomeInvisible()", "description": "Notifies PopupMenuListeners that this popup menu will\n become invisible."}, {"method_name": "firePopupMenuCanceled", "method_sig": "protected void firePopupMenuCanceled()", "description": "Notifies PopupMenuListeners that this popup menu is\n cancelled."}, {"method_name": "pack", "method_sig": "public void pack()", "description": "Lays out the container so that it uses the minimum space\n needed to display its contents."}, {"method_name": "setVisible", "method_sig": "@BeanProperty(description=\"Makes the popup visible\")\npublic void setVisible (boolean b)", "description": "Sets the visibility of the popup menu."}, {"method_name": "isVisible", "method_sig": "public boolean isVisible()", "description": "Returns true if the popup menu is visible (currently\n being displayed)."}, {"method_name": "setLocation", "method_sig": "@BeanProperty(description=\"The location of the popup menu.\")\npublic void setLocation (int x,\n                        int y)", "description": "Sets the location of the upper left corner of the\n popup menu using x, y coordinates.\n \n The method changes the geometry-related data. Therefore,\n the native windowing system may ignore such requests, or it may modify\n the requested data, so that the JPopupMenu object is placed and sized\n in a way that corresponds closely to the desktop settings."}, {"method_name": "getInvoker", "method_sig": "public Component getInvoker()", "description": "Returns the component which is the 'invoker' of this\n popup menu."}, {"method_name": "setInvoker", "method_sig": "@BeanProperty(bound=false,\n              expert=true,\n              description=\"The invoking component for the popup menu\")\npublic void setInvoker (Component invoker)", "description": "Sets the invoker of this popup menu -- the component in which\n the popup menu menu is to be displayed."}, {"method_name": "show", "method_sig": "public void show (Component invoker,\n                 int x,\n                 int y)", "description": "Displays the popup menu at the position x,y in the coordinate\n space of the component invoker."}, {"method_name": "getComponentAtIndex", "method_sig": "@Deprecated\npublic Component getComponentAtIndex (int i)", "description": "Returns the component at the specified index."}, {"method_name": "getComponentIndex", "method_sig": "public int getComponentIndex (Component c)", "description": "Returns the index of the specified component."}, {"method_name": "setPopupSize", "method_sig": "@BeanProperty(description=\"The size of the popup menu\")\npublic void setPopupSize (Dimension d)", "description": "Sets the size of the Popup window using a Dimension object.\n This is equivalent to setPreferredSize(d)."}, {"method_name": "setPopupSize", "method_sig": "@BeanProperty(description=\"The size of the popup menu\")\npublic void setPopupSize (int width,\n                         int height)", "description": "Sets the size of the Popup window to the specified width and\n height. This is equivalent to\n  setPreferredSize(new Dimension(width, height))."}, {"method_name": "setSelected", "method_sig": "@BeanProperty(expert=true,\n              hidden=true,\n              description=\"The selected component on the popup menu\")\npublic void setSelected (Component sel)", "description": "Sets the currently selected component,  This will result\n in a change to the selection model."}, {"method_name": "isBorderPainted", "method_sig": "public boolean isBorderPainted()", "description": "Checks whether the border should be painted."}, {"method_name": "setBorderPainted", "method_sig": "@BeanProperty(bound=false,\n              description=\"Is the border of the popup menu painted\")\npublic void setBorderPainted (boolean b)", "description": "Sets whether the border should be painted."}, {"method_name": "paintBorder", "method_sig": "protected void paintBorder (Graphics g)", "description": "Paints the popup menu's border if the borderPainted\n property is true."}, {"method_name": "getMargin", "method_sig": "@BeanProperty(bound=false)\npublic Insets getMargin()", "description": "Returns the margin, in pixels, between the popup menu's border and\n its containers."}, {"method_name": "paramString", "method_sig": "protected String paramString()", "description": "Returns a string representation of this JPopupMenu.\n This method\n is intended to be used only for debugging purposes, and the\n content and format of the returned string may vary between\n implementations. The returned string may be empty but may not\n be null."}, {"method_name": "getAccessibleContext", "method_sig": "@BeanProperty(bound=false)\npublic AccessibleContext getAccessibleContext()", "description": "Gets the AccessibleContext associated with this JPopupMenu.\n For JPopupMenus, the AccessibleContext takes the form of an\n AccessibleJPopupMenu.\n A new AccessibleJPopupMenu instance is created if necessary."}, {"method_name": "processMouseEvent", "method_sig": "public void processMouseEvent (MouseEvent event,\n                              MenuElement[] path,\n                              MenuSelectionManager manager)", "description": "This method is required to conform to the\n MenuElement interface, but it not implemented."}, {"method_name": "processKeyEvent", "method_sig": "public void processKeyEvent (KeyEvent e,\n                            MenuElement[] path,\n                            MenuSelectionManager manager)", "description": "Processes a key event forwarded from the\n MenuSelectionManager and changes the menu selection,\n if necessary, by using MenuSelectionManager's API.\n \n Note: you do not have to forward the event to sub-components.\n This is done automatically by the MenuSelectionManager."}, {"method_name": "menuSelectionChanged", "method_sig": "public void menuSelectionChanged (boolean isIncluded)", "description": "Messaged when the menubar selection changes to activate or\n deactivate this menu. This implements the\n javax.swing.MenuElement interface.\n Overrides MenuElement.menuSelectionChanged."}, {"method_name": "getSubElements", "method_sig": "@BeanProperty(bound=false)\npublic MenuElement[] getSubElements()", "description": "Returns an array of MenuElements containing the submenu\n for this menu component.  It will only return items conforming to\n the JMenuElement interface.\n If popup menu is null returns\n an empty array.  This method is required to conform to the\n MenuElement interface."}, {"method_name": "getComponent", "method_sig": "public Component getComponent()", "description": "Returns this JPopupMenu component."}, {"method_name": "isPopupTrigger", "method_sig": "public boolean isPopupTrigger (MouseEvent e)", "description": "Returns true if the MouseEvent is considered a popup trigger\n by the JPopupMenu's currently installed UI."}]}