{"name": "Interface ProcessHandle", "module": "java.base", "package": "java.lang", "text": "ProcessHandle identifies and provides control of native processes. Each\n individual process can be monitored for liveness, list its children,\n get information about the process or destroy it.\n By comparison, Process instances were started\n by the current process and additionally provide access to the process\n input, output, and error streams.\n \n The native process ID is an identification number that the\n operating system assigns to the process.\n The range for process id values is dependent on the operating system.\n For example, an embedded system might use a 16-bit value.\n Status information about a process is retrieved from the native system\n and may change asynchronously; processes may be created or terminate\n spontaneously.\n The time between when a process terminates and the process id\n is reused for a new process is unpredictable.\n Race conditions can exist between checking the status of a process and\n acting upon it. When using ProcessHandles avoid assumptions\n about the liveness or identity of the underlying process.\n \n Each ProcessHandle identifies and allows control of a process in the native\n system. ProcessHandles are returned from the factory methods current(),\n of(long),\n children(), descendants(), parent() and\n allProcesses().\n \n The Process instances created by ProcessBuilder can be queried\n for a ProcessHandle that provides information about the Process.\n ProcessHandle references should not be freely distributed.\n\n \n A CompletableFuture available from onExit()\n can be used to wait for process termination, and possibly trigger dependent\n actions.\n \n The factory methods limit access to ProcessHandles using the\n SecurityManager checking the RuntimePermission(\"manageProcess\").\n The ability to control processes is also restricted by the native system,\n ProcessHandle provides no more access to, or control over, the native process\n than would be allowed by a native application.", "codes": ["public interface ProcessHandle\nextends Comparable<ProcessHandle>"], "fields": [], "methods": [{"method_name": "pid", "method_sig": "long pid()", "description": "Returns the native process ID of the process. The native process ID is an\n identification number that the operating system assigns to the process.\n The operating system may reuse the process ID after a process terminates.\n Use equals or\n compareTo to compare ProcessHandles."}, {"method_name": "of", "method_sig": "static Optional<ProcessHandle> of (long pid)", "description": "Returns an Optional<ProcessHandle> for an existing native process."}, {"method_name": "current", "method_sig": "static ProcessHandle current()", "description": "Returns a ProcessHandle for the current process. The ProcessHandle cannot be\n used to destroy the current process, use System.exit instead."}, {"method_name": "parent", "method_sig": "Optional<ProcessHandle> parent()", "description": "Returns an Optional<ProcessHandle> for the parent process.\n Note that Processes in a zombie state usually don't have a parent."}, {"method_name": "children", "method_sig": "Stream<ProcessHandle> children()", "description": "Returns a snapshot of the current direct children of the process.\n The parent() of a direct child process is the process.\n Typically, a process that is not alive has no children.\n \nNote that processes are created and terminate asynchronously.\n There is no guarantee that a process is alive.\n "}, {"method_name": "descendants", "method_sig": "Stream<ProcessHandle> descendants()", "description": "Returns a snapshot of the descendants of the process.\n The descendants of a process are the children of the process\n plus the descendants of those children, recursively.\n Typically, a process that is not alive has no children.\n \nNote that processes are created and terminate asynchronously.\n There is no guarantee that a process is alive.\n "}, {"method_name": "allProcesses", "method_sig": "static Stream<ProcessHandle> allProcesses()", "description": "Returns a snapshot of all processes visible to the current process.\n \nNote that processes are created and terminate asynchronously. There\n is no guarantee that a process in the stream is alive or that no other\n processes may have been created since the inception of the snapshot.\n "}, {"method_name": "info", "method_sig": "ProcessHandle.Info info()", "description": "Returns a snapshot of information about the process.\n\n  A ProcessHandle.Info instance has accessor methods that return\n information about the process if it is available."}, {"method_name": "onExit", "method_sig": "CompletableFuture<ProcessHandle> onExit()", "description": "Returns a CompletableFuture<ProcessHandle> for the termination\n of the process.\n The CompletableFuture provides the ability\n to trigger dependent functions or actions that may be run synchronously\n or asynchronously upon process termination.\n When the process has terminated the CompletableFuture is\n completed regardless\n of the exit status of the process.\n The onExit method can be called multiple times to invoke\n independent actions when the process exits.\n \n Calling onExit().get() waits for the process to terminate and returns\n the ProcessHandle. The future can be used to check if the process is\n done or to\n wait for it to terminate.\n Cancelling\n the CompleteableFuture does not affect the Process."}, {"method_name": "supportsNormalTermination", "method_sig": "boolean supportsNormalTermination()", "description": "Returns true if the implementation of destroy()\n normally terminates the process.\n Returns false if the implementation of destroy\n forcibly and immediately terminates the process."}, {"method_name": "destroy", "method_sig": "boolean destroy()", "description": "Requests the process to be killed.\n Whether the process represented by this ProcessHandle object is\n normally terminated or not is\n implementation dependent.\n Forcible process destruction is defined as the immediate termination of the\n process, whereas normal termination allows the process to shut down cleanly.\n If the process is not alive, no action is taken.\n The operating system access controls may prevent the process\n from being killed.\n \n The CompletableFuture from onExit() is\n completed\n when the process has terminated.\n \n Note: The process may not terminate immediately.\n For example, isAlive() may return true for a brief period\n after destroy() is called."}, {"method_name": "destroyForcibly", "method_sig": "boolean destroyForcibly()", "description": "Requests the process to be killed forcibly.\n The process represented by this ProcessHandle object is\n forcibly terminated.\n Forcible process destruction is defined as the immediate termination of the\n process, whereas normal termination allows the process to shut down cleanly.\n If the process is not alive, no action is taken.\n The operating system access controls may prevent the process\n from being killed.\n \n The CompletableFuture from onExit() is\n completed\n when the process has terminated.\n \n Note: The process may not terminate immediately.\n For example, isAlive() may return true for a brief period\n after destroyForcibly() is called."}, {"method_name": "isAlive", "method_sig": "boolean isAlive()", "description": "Tests whether the process represented by this ProcessHandle is alive.\n Process termination is implementation and operating system specific.\n The process is considered alive as long as the PID is valid."}, {"method_name": "hashCode", "method_sig": "int hashCode()", "description": "Returns a hash code value for this ProcessHandle.\n The hashcode value follows the general contract for Object.hashCode().\n The value is a function of the pid() value and\n may be a function of additional information to uniquely identify the process.\n If two ProcessHandles are equal according to the equals\n method, then calling the hashCode method on each of the two objects\n must produce the same integer result."}, {"method_name": "equals", "method_sig": "boolean equals (Object other)", "description": "Returns true if other object is non-null, is of the\n same implementation, and represents the same system process;\n otherwise it returns false."}, {"method_name": "compareTo", "method_sig": "int compareTo (ProcessHandle other)", "description": "Compares this ProcessHandle with the specified ProcessHandle for order.\n The order is not specified, but is consistent with Object.equals(java.lang.Object),\n which returns true if and only if two instances of ProcessHandle\n are of the same implementation and represent the same system process.\n Comparison is only supported among objects of same implementation.\n If attempt is made to mutually compare two different implementations\n of ProcessHandles, ClassCastException is thrown."}]}