{"name": "Interface Runnable", "module": "java.base", "package": "java.lang", "text": "The Runnable interface should be implemented by any\n class whose instances are intended to be executed by a thread. The\n class must define a method of no arguments called run.\n \n This interface is designed to provide a common protocol for objects that\n wish to execute code while they are active. For example,\n Runnable is implemented by class Thread.\n Being active simply means that a thread has been started and has not\n yet been stopped.\n \n In addition, Runnable provides the means for a class to be\n active while not subclassing Thread. A class that implements\n Runnable can run without subclassing Thread\n by instantiating a Thread instance and passing itself in\n as the target.  In most cases, the Runnable interface should\n be used if you are only planning to override the run()\n method and no other Thread methods.\n This is important because classes should not be subclassed\n unless the programmer intends on modifying or enhancing the fundamental\n behavior of the class.", "codes": ["@FunctionalInterface\npublic interface Runnable"], "fields": [], "methods": [{"method_name": "run", "method_sig": "void run()", "description": "When an object implementing interface Runnable is used\n to create a thread, starting the thread causes the object's\n run method to be called in that separately executing\n thread.\n \n The general contract of the method run is that it may\n take any action whatsoever."}]}