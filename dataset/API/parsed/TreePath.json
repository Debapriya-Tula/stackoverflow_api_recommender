{"name": "Class TreePath", "module": "java.desktop", "package": "javax.swing.tree", "text": "TreePath represents an array of objects that uniquely\n identify the path to a node in a tree. The elements of the array\n are ordered with the root as the first element of the array. For\n example, a file on the file system is uniquely identified based on\n the array of parent directories and the name of the file. The path\n /tmp/foo/bar could be represented by a TreePath as\n new TreePath(new Object[] {\"tmp\", \"foo\", \"bar\"}).\n \nTreePath is used extensively by JTree and related classes.\n For example, JTree represents the selection as an array of\n TreePaths. When used with JTree, the elements of the\n path are the objects returned from the TreeModel. When JTree\n is paired with DefaultTreeModel, the elements of the\n path are TreeNodes. The following example illustrates extracting\n the user object from the selection of a JTree:\n \n   DefaultMutableTreeNode root = ...;\n   DefaultTreeModel model = new DefaultTreeModel(root);\n   JTree tree = new JTree(model);\n   ...\n   TreePath selectedPath = tree.getSelectionPath();\n   DefaultMutableTreeNode selectedNode =\n       ((DefaultMutableTreeNode)selectedPath.getLastPathComponent()).\n       getUserObject();\n \n Subclasses typically need override only \n getLastPathComponent, and getParentPath. As JTree\n internally creates TreePaths at various points, it's\n generally not useful to subclass TreePath and use with\n JTree.\n \n While TreePath is serializable, a \n NotSerializableException is thrown if any elements of the path are\n not serializable.\n \n For further information and examples of using tree paths,\n see How to Use Trees\n in The Java Tutorial.\n\nWarning:\n Serialized objects of this class will not be compatible with\n future Swing releases. The current serialization support is\n appropriate for short term storage or RMI between applications running\n the same version of Swing.  As of 1.4, support for long term storage\n of all JavaBeans\u2122\n has been added to the java.beans package.\n Please see XMLEncoder.", "codes": ["public class TreePath\nextends Object\nimplements Serializable"], "fields": [], "methods": [{"method_name": "getPath", "method_sig": "public Object[] getPath()", "description": "Returns an ordered array of the elements of this TreePath.\n The first element is the root."}, {"method_name": "getLastPathComponent", "method_sig": "public Object getLastPathComponent()", "description": "Returns the last element of this path."}, {"method_name": "getPathCount", "method_sig": "public int getPathCount()", "description": "Returns the number of elements in the path."}, {"method_name": "getPathComponent", "method_sig": "public Object getPathComponent (int index)", "description": "Returns the path element at the specified index."}, {"method_name": "equals", "method_sig": "public boolean equals (Object o)", "description": "Compares this TreePath to the specified object. This returns\n true if o is a TreePath with the exact\n same elements (as determined by using equals on each\n element of the path)."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Returns the hash code of this TreePath. The hash code of a\n TreePath is the hash code of the last element in the path."}, {"method_name": "isDescendant", "method_sig": "public boolean isDescendant (TreePath aTreePath)", "description": "Returns true if aTreePath is a\n descendant of this\n TreePath. A TreePath P1 is a descendant of a\n TreePath P2\n if P1 contains all of the elements that make up\n P2's path.\n For example, if this object has the path [a, b],\n and aTreePath has the path [a, b, c],\n then aTreePath is a descendant of this object.\n However, if aTreePath has the path [a],\n then it is not a descendant of this object.  By this definition\n a TreePath is always considered a descendant of itself.\n That is, aTreePath.isDescendant(aTreePath) returns\n true."}, {"method_name": "pathByAddingChild", "method_sig": "public TreePath pathByAddingChild (Object child)", "description": "Returns a new path containing all the elements of this path\n plus child. child is the last element\n of the newly created TreePath."}, {"method_name": "getParentPath", "method_sig": "public TreePath getParentPath()", "description": "Returns the TreePath of the parent. A return value of\n null indicates this is the root node."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a string that displays and identifies this\n object's properties."}]}