{"name": "Class FontMetrics", "module": "java.desktop", "package": "java.awt", "text": "The FontMetrics class defines a font metrics object, which\n encapsulates information about the rendering of a particular font on a\n particular screen.\n \nNote to subclassers: Since many of these methods form closed,\n mutually recursive loops, you must take care that you implement\n at least one of the methods in each such loop to prevent\n infinite recursion when your subclass is used.\n In particular, the following is the minimal suggested set of methods\n to override in order to ensure correctness and prevent infinite\n recursion (though other subsets are equally feasible):\n \ngetAscent()\ngetLeading()\ngetMaxAdvance()\ncharWidth(char)\ncharsWidth(char[], int, int)\n\n\n\n Note that the implementations of these methods are\n inefficient, so they are usually overridden with more efficient\n toolkit-specific implementations.\n \n When an application asks to place a character at the position\n (x,\u00a0y), the character is placed so that its\n reference point (shown as the dot in the accompanying image) is\n put at that position. The reference point specifies a horizontal\n line called the baseline of the character. In normal\n printing, the baselines of characters should align.\n \n In addition, every character in a font has an ascent, a\n descent, and an advance width. The ascent is the\n amount by which the character ascends above the baseline. The\n descent is the amount by which the character descends below the\n baseline. The advance width indicates the position at which AWT\n should place the next character.\n \n An array of characters or a string can also have an ascent, a\n descent, and an advance width. The ascent of the array is the\n maximum ascent of any character in the array. The descent is the\n maximum descent of any character in the array. The advance width\n is the sum of the advance widths of each of the characters in the\n character array.  The advance of a String is the\n distance along the baseline of the String.  This\n distance is the width that should be used for centering or\n right-aligning the String.\n Note that the advance of a String is not necessarily\n the sum of the advances of its characters measured in isolation\n because the width of a character can vary depending on its context.\n For example, in Arabic text, the shape of a character can change\n in order to connect to other characters.  Also, in some scripts,\n certain character sequences can be represented by a single shape,\n called a ligature.  Measuring characters individually does\n not account for these transformations.\n Font metrics are baseline-relative, meaning that they are\n generally independent of the rotation applied to the font (modulo\n possible grid hinting effects).  See Font.", "codes": ["public abstract class FontMetrics\nextends Object\nimplements Serializable"], "fields": [{"field_name": "font", "field_sig": "protected\u00a0Font font", "description": "The actual Font from which the font metrics are\n created.\n This cannot be null."}], "methods": [{"method_name": "getFont", "method_sig": "public Font getFont()", "description": "Gets the Font described by this\n FontMetrics object."}, {"method_name": "getFontRenderContext", "method_sig": "public FontRenderContext getFontRenderContext()", "description": "Gets the FontRenderContext used by this\n FontMetrics object to measure text.\n \n Note that methods in this class which take a Graphics\n parameter measure text using the FontRenderContext\n of that Graphics object, and not this\n FontRenderContext"}, {"method_name": "getLeading", "method_sig": "public int getLeading()", "description": "Determines the standard leading of the\n Font described by this FontMetrics\n object.  The standard leading, or\n interline spacing, is the logical amount of space to be reserved\n between the descent of one line of text and the ascent of the next\n line. The height metric is calculated to include this extra space."}, {"method_name": "getAscent", "method_sig": "public int getAscent()", "description": "Determines the font ascent of the Font\n described by this FontMetrics object. The font ascent\n is the distance from the font's baseline to the top of most\n alphanumeric characters. Some characters in the Font\n might extend above the font ascent line."}, {"method_name": "getDescent", "method_sig": "public int getDescent()", "description": "Determines the font descent of the Font\n described by this\n FontMetrics object. The font descent is the distance\n from the font's baseline to the bottom of most alphanumeric\n characters with descenders. Some characters in the\n Font might extend\n below the font descent line."}, {"method_name": "getHeight", "method_sig": "public int getHeight()", "description": "Gets the standard height of a line of text in this font.  This\n is the distance between the baseline of adjacent lines of text.\n It is the sum of the leading + ascent + descent. Due to rounding\n this may not be the same as getAscent() + getDescent() + getLeading().\n There is no guarantee that lines of text spaced at this distance are\n disjoint; such lines may overlap if some characters overshoot\n either the standard ascent or the standard descent metric."}, {"method_name": "getMaxAscent", "method_sig": "public int getMaxAscent()", "description": "Determines the maximum ascent of the Font\n described by this FontMetrics object.  No character\n extends further above the font's baseline than this height."}, {"method_name": "getMaxDescent", "method_sig": "public int getMaxDescent()", "description": "Determines the maximum descent of the Font\n described by this FontMetrics object.  No character\n extends further below the font's baseline than this height."}, {"method_name": "getMaxDecent", "method_sig": "@Deprecated\npublic int getMaxDecent()", "description": "For backward compatibility only."}, {"method_name": "getMaxAdvance", "method_sig": "public int getMaxAdvance()", "description": "Gets the maximum advance width of any character in this\n Font.  The advance is the\n distance from the leftmost point to the rightmost point on the\n string's baseline.  The advance of a String is\n not necessarily the sum of the advances of its characters."}, {"method_name": "charWidth", "method_sig": "public int charWidth (int codePoint)", "description": "Returns the advance width of the specified character in this\n Font.  The advance is the\n distance from the leftmost point to the rightmost point on the\n character's baseline.  Note that the advance of a\n String is not necessarily the sum of the advances\n of its characters.\n\n This method doesn't validate the specified character to be a\n valid Unicode code point. The caller must validate the\n character value using Character.isValidCodePoint if necessary."}, {"method_name": "charWidth", "method_sig": "public int charWidth (char ch)", "description": "Returns the advance width of the specified character in this\n Font.  The advance is the\n distance from the leftmost point to the rightmost point on the\n character's baseline.  Note that the advance of a\n String is not necessarily the sum of the advances\n of its characters.\n\n Note: This method cannot handle  supplementary\n characters. To support all Unicode characters, including\n supplementary characters, use the charWidth(int) method."}, {"method_name": "stringWidth", "method_sig": "public int stringWidth (String str)", "description": "Returns the total advance width for showing the specified\n String in this Font.  The advance\n is the distance from the leftmost point to the rightmost point\n on the string's baseline.\n \n Note that the advance of a String is\n not necessarily the sum of the advances of its characters."}, {"method_name": "charsWidth", "method_sig": "public int charsWidth (char[] data,\n                      int off,\n                      int len)", "description": "Returns the total advance width for showing the specified array\n of characters in this Font.  The advance is the\n distance from the leftmost point to the rightmost point on the\n string's baseline.  The advance of a String\n is not necessarily the sum of the advances of its characters.\n This is equivalent to measuring a String of the\n characters in the specified range."}, {"method_name": "bytesWidth", "method_sig": "public int bytesWidth (byte[] data,\n                      int off,\n                      int len)", "description": "Returns the total advance width for showing the specified array\n of bytes in this Font.  The advance is the\n distance from the leftmost point to the rightmost point on the\n string's baseline.  The advance of a String\n is not necessarily the sum of the advances of its characters.\n This is equivalent to measuring a String of the\n characters in the specified range."}, {"method_name": "getWidths", "method_sig": "public int[] getWidths()", "description": "Gets the advance widths of the first 256 characters in the\n Font.  The advance is the\n distance from the leftmost point to the rightmost point on the\n character's baseline.  Note that the advance of a\n String is not necessarily the sum of the advances\n of its characters."}, {"method_name": "hasUniformLineMetrics", "method_sig": "public boolean hasUniformLineMetrics()", "description": "Checks to see if the Font has uniform line metrics.  A\n composite font may consist of several different fonts to cover\n various character sets.  In such cases, the\n FontLineMetrics objects are not uniform.\n Different fonts may have a different ascent, descent, metrics and\n so on.  This information is sometimes necessary for line\n measuring and line breaking."}, {"method_name": "getLineMetrics", "method_sig": "public LineMetrics getLineMetrics (String str,\n                                  Graphics context)", "description": "Returns the LineMetrics object for the specified\n String in the specified Graphics context."}, {"method_name": "getLineMetrics", "method_sig": "public LineMetrics getLineMetrics (String str,\n                                  int beginIndex,\n                                  int limit,\n                                  Graphics context)", "description": "Returns the LineMetrics object for the specified\n String in the specified Graphics context."}, {"method_name": "getLineMetrics", "method_sig": "public LineMetrics getLineMetrics (char[] chars,\n                                  int beginIndex,\n                                  int limit,\n                                  Graphics context)", "description": "Returns the LineMetrics object for the specified\n character array in the specified Graphics context."}, {"method_name": "getLineMetrics", "method_sig": "public LineMetrics getLineMetrics (CharacterIterator ci,\n                                  int beginIndex,\n                                  int limit,\n                                  Graphics context)", "description": "Returns the LineMetrics object for the specified\n CharacterIterator in the specified Graphics\n context."}, {"method_name": "getStringBounds", "method_sig": "public Rectangle2D getStringBounds (String str,\n                                   Graphics context)", "description": "Returns the bounds of the specified String in the\n specified Graphics context.  The bounds is used\n to layout the String.\n Note: The returned bounds is in baseline-relative coordinates\n (see class notes)."}, {"method_name": "getStringBounds", "method_sig": "public Rectangle2D getStringBounds (String str,\n                                   int beginIndex,\n                                   int limit,\n                                   Graphics context)", "description": "Returns the bounds of the specified String in the\n specified Graphics context.  The bounds is used\n to layout the String.\n Note: The returned bounds is in baseline-relative coordinates\n (see class notes)."}, {"method_name": "getStringBounds", "method_sig": "public Rectangle2D getStringBounds (char[] chars,\n                                   int beginIndex,\n                                   int limit,\n                                   Graphics context)", "description": "Returns the bounds of the specified array of characters\n in the specified Graphics context.\n The bounds is used to layout the String\n created with the specified array of characters,\n beginIndex and limit.\n Note: The returned bounds is in baseline-relative coordinates\n (see class notes)."}, {"method_name": "getStringBounds", "method_sig": "public Rectangle2D getStringBounds (CharacterIterator ci,\n                                   int beginIndex,\n                                   int limit,\n                                   Graphics context)", "description": "Returns the bounds of the characters indexed in the specified\n CharacterIterator in the\n specified Graphics context.\n Note: The returned bounds is in baseline-relative coordinates\n (see class notes)."}, {"method_name": "getMaxCharBounds", "method_sig": "public Rectangle2D getMaxCharBounds (Graphics context)", "description": "Returns the bounds for the character with the maximum bounds\n in the specified Graphics context."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a representation of this FontMetrics\n object's values as a String."}]}