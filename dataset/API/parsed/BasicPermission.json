{"name": "Class BasicPermission", "module": "java.base", "package": "java.security", "text": "The BasicPermission class extends the Permission class, and\n can be used as the base class for permissions that want to\n follow the same naming convention as BasicPermission.\n \n The name for a BasicPermission is the name of the given permission\n (for example, \"exit\",\n \"setFactory\", \"print.queueJob\", etc). The naming\n convention follows the  hierarchical property naming convention.\n An asterisk may appear by itself, or if immediately preceded by a \".\"\n may appear at the end of the name, to signify a wildcard match.\n For example, \"*\" and \"java.*\" signify a wildcard match, while \"*java\", \"a*b\",\n and \"java*\" do not.\n \n The action string (inherited from Permission) is unused.\n Thus, BasicPermission is commonly used as the base class for\n \"named\" permissions\n (ones that contain a name but no actions list; you either have the\n named permission or you don't.)\n Subclasses may implement actions on top of BasicPermission,\n if desired.", "codes": ["public abstract class BasicPermission\nextends Permission\nimplements Serializable"], "fields": [], "methods": [{"method_name": "implies", "method_sig": "public boolean implies (Permission p)", "description": "Checks if the specified permission is \"implied\" by\n this object.\n \n More specifically, this method returns true if:\n \n p's class is the same as this object's class, and\n  p's name equals or (in the case of wildcards)\n      is implied by this object's\n      name. For example, \"a.b.*\" implies \"a.b.c\".\n "}, {"method_name": "equals", "method_sig": "public boolean equals (Object obj)", "description": "Checks two BasicPermission objects for equality.\n Checks that obj's class is the same as this object's class\n and has the same name as this object."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Returns the hash code value for this object.\n The hash code used is the hash code of the name, that is,\n getName().hashCode(), where getName is\n from the Permission superclass."}, {"method_name": "getActions", "method_sig": "public String getActions()", "description": "Returns the canonical string representation of the actions,\n which currently is the empty string \"\", since there are no actions for\n a BasicPermission."}, {"method_name": "newPermissionCollection", "method_sig": "public PermissionCollection newPermissionCollection()", "description": "Returns a new PermissionCollection object for storing BasicPermission\n objects.\n\n BasicPermission objects must be stored in a manner that allows them\n to be inserted in any order, but that also enables the\n PermissionCollection implies method\n to be implemented in an efficient (and consistent) manner."}]}