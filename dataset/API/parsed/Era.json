{"name": "Interface Era", "module": "java.base", "package": "java.time.chrono", "text": "An era of the time-line.\n \n Most calendar systems have a single epoch dividing the time-line into two eras.\n However, some calendar systems, have multiple eras, such as one for the reign\n of each leader.\n In all cases, the era is conceptually the largest division of the time-line.\n Each chronology defines the Era's that are known Eras and a\n Chronology.eras to get the valid eras.\n \n For example, the Thai Buddhist calendar system divides time into two eras,\n before and after a single date. By contrast, the Japanese calendar system\n has one era for the reign of each Emperor.\n \n Instances of Era may be compared using the == operator.", "codes": ["public interface Era\nextends TemporalAccessor, TemporalAdjuster"], "fields": [], "methods": [{"method_name": "getValue", "method_sig": "int getValue()", "description": "Gets the numeric value associated with the era as defined by the chronology.\n Each chronology defines the predefined Eras and methods to list the Eras\n of the chronology.\n \n All fields, including eras, have an associated numeric value.\n The meaning of the numeric value for era is determined by the chronology\n according to these principles:\n \nThe era in use at the epoch 1970-01-01 (ISO) has the value 1.\n Later eras have sequentially higher values.\n Earlier eras have sequentially lower values, which may be negative.\n "}, {"method_name": "isSupported", "method_sig": "default boolean isSupported (TemporalField field)", "description": "Checks if the specified field is supported.\n \n This checks if this era can be queried for the specified field.\n If false, then calling the range and\n get methods will throw an exception.\n \n If the field is a ChronoField then the query is implemented here.\n The ERA field returns true.\n All other ChronoField instances will return false.\n \n If the field is not a ChronoField, then the result of this method\n is obtained by invoking TemporalField.isSupportedBy(TemporalAccessor)\n passing this as the argument.\n Whether the field is supported is determined by the field."}, {"method_name": "range", "method_sig": "default ValueRange range (TemporalField field)", "description": "Gets the range of valid values for the specified field.\n \n The range object expresses the minimum and maximum valid values for a field.\n This era is used to enhance the accuracy of the returned range.\n If it is not possible to return the range, because the field is not supported\n or for some other reason, an exception is thrown.\n \n If the field is a ChronoField then the query is implemented here.\n The ERA field returns the range.\n All other ChronoField instances will throw an UnsupportedTemporalTypeException.\n \n If the field is not a ChronoField, then the result of this method\n is obtained by invoking TemporalField.rangeRefinedBy(TemporalAccessor)\n passing this as the argument.\n Whether the range can be obtained is determined by the field.\n \n The default implementation must return a range for ERA from\n zero to one, suitable for two era calendar systems such as ISO."}, {"method_name": "get", "method_sig": "default int get (TemporalField field)", "description": "Gets the value of the specified field from this era as an int.\n \n This queries this era for the value of the specified field.\n The returned value will always be within the valid range of values for the field.\n If it is not possible to return the value, because the field is not supported\n or for some other reason, an exception is thrown.\n \n If the field is a ChronoField then the query is implemented here.\n The ERA field returns the value of the era.\n All other ChronoField instances will throw an UnsupportedTemporalTypeException.\n \n If the field is not a ChronoField, then the result of this method\n is obtained by invoking TemporalField.getFrom(TemporalAccessor)\n passing this as the argument. Whether the value can be obtained,\n and what the value represents, is determined by the field."}, {"method_name": "getLong", "method_sig": "default long getLong (TemporalField field)", "description": "Gets the value of the specified field from this era as a long.\n \n This queries this era for the value of the specified field.\n If it is not possible to return the value, because the field is not supported\n or for some other reason, an exception is thrown.\n \n If the field is a ChronoField then the query is implemented here.\n The ERA field returns the value of the era.\n All other ChronoField instances will throw an UnsupportedTemporalTypeException.\n \n If the field is not a ChronoField, then the result of this method\n is obtained by invoking TemporalField.getFrom(TemporalAccessor)\n passing this as the argument. Whether the value can be obtained,\n and what the value represents, is determined by the field."}, {"method_name": "query", "method_sig": "default <R> R query (TemporalQuery<R> query)", "description": "Queries this era using the specified query.\n \n This queries this era using the specified query strategy object.\n The TemporalQuery object defines the logic to be used to\n obtain the result. Read the documentation of the query to understand\n what the result of this method will be.\n \n The result of this method is obtained by invoking the\n TemporalQuery.queryFrom(TemporalAccessor) method on the\n specified query passing this as the argument."}, {"method_name": "adjustInto", "method_sig": "default Temporal adjustInto (Temporal temporal)", "description": "Adjusts the specified temporal object to have the same era as this object.\n \n This returns a temporal object of the same observable type as the input\n with the era changed to be the same as this.\n \n The adjustment is equivalent to using Temporal.with(TemporalField, long)\n passing ChronoField.ERA as the field.\n \n In most cases, it is clearer to reverse the calling pattern by using\n Temporal.with(TemporalAdjuster):\n \n   // these two lines are equivalent, but the second approach is recommended\n   temporal = thisEra.adjustInto(temporal);\n   temporal = temporal.with(thisEra);\n \n\n This instance is immutable and unaffected by this method call."}, {"method_name": "getDisplayName", "method_sig": "default String getDisplayName (TextStyle style,\n                              Locale locale)", "description": "Gets the textual representation of this era.\n \n This returns the textual name used to identify the era,\n suitable for presentation to the user.\n The parameters control the style of the returned text and the locale.\n \n If no textual mapping is found then the numeric value is returned."}]}