{"name": "Interface EventSet", "module": "jdk.jdi", "package": "com.sun.jdi.event", "text": "Several Event objects may be created at a given time by\n the target VirtualMachine. For example, there may be\n more than one BreakpointRequest for a given Location\n or you might single step to the same location as a\n BreakpointRequest.  These Event objects are delivered\n together as an EventSet.  For uniformity, an EventSet is always used\n to deliver Event objects.  EventSets are delivered by\n the EventQueue.\n EventSets are unmodifiable.\n \n Associated with the issuance of an event set, suspensions may\n have occurred in the target VM.  These suspensions correspond\n with the suspend policy.\n To assure matching resumes occur, it is recommended,\n where possible,\n to complete the processing of an event set with\n EventSet.resume().\n \n The events that are grouped in an EventSet are restricted in the\n following ways:\n \nAlways singleton sets:\n     \nVMStartEvent\nVMDisconnectEvent\n\nOnly with other VMDeathEvents:\n     \nVMDeathEvent\n\nOnly with other ThreadStartEvents for the same thread:\n     \nThreadStartEvent\n\nOnly with other ThreadDeathEvents for the same thread:\n     \nThreadDeathEvent\n\nOnly with other ClassPrepareEvents for the same class:\n     \nClassPrepareEvent\n\nOnly with other ClassUnloadEvents for the same class:\n     \nClassUnloadEvent\n\nOnly with other AccessWatchpointEvents for the same field access:\n     \nAccessWatchpointEvent\n\nOnly with other ModificationWatchpointEvents for the same field\n modification:\n     \nModificationWatchpointEvent\n\nOnly with other ExceptionEvents for the same exception occurrance:\n     \nExceptionEvent\n\nOnly with other MethodExitEvents for the same method exit:\n     \nMethodExitEvent\n\nOnly with other Monitor contended enter events for the same monitor object:\n     \nMonitor Contended Enter Event\n     \nOnly with other Monitor contended entered events for the same monitor object:\n     \nMonitor Contended Entered Event\n    \nOnly with other Monitor wait events for the same monitor object:\n     \nMonitor Wait Event\n     \nOnly with other Monitor waited events for the same monitor object:\n     \nMonitor Waited Event\n     \nOnly with other members of this group, at the same location\n and in the same thread:\n     \nBreakpointEvent\nStepEvent\nMethodEntryEvent\n\n", "codes": ["public interface EventSet\nextends Mirror, Set<Event>"], "fields": [], "methods": [{"method_name": "suspendPolicy", "method_sig": "int suspendPolicy()", "description": "Returns the policy used to suspend threads in the target VM\n for this event set. This policy is selected from the suspend\n policies for each event's request; the target VM chooses the\n policy which suspends the most threads.  The target VM suspends\n threads according to that policy and that policy is returned here.\n See EventRequest for the possible policy values.\n \n In rare cases, the suspend policy may differ from the requested\n value if a ClassPrepareEvent has occurred in a\n debugger system thread. See ClassPrepareEvent.thread()\n for details."}, {"method_name": "eventIterator", "method_sig": "EventIterator eventIterator()", "description": "Return an iterator specific to Event objects."}, {"method_name": "resume", "method_sig": "void resume()", "description": "Resumes threads suspended by this event set. If the suspendPolicy()\n is EventRequest.SUSPEND_ALL, a call to this method is equivalent to\n VirtualMachine.resume(). If the suspend policy is\n EventRequest.SUSPEND_EVENT_THREAD,\n a call to this method is equivalent to\n ThreadReference.resume() for the event thread.\n Otherwise, a call to this method is a no-op."}]}