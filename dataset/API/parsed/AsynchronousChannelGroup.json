{"name": "Class AsynchronousChannelGroup", "module": "java.base", "package": "java.nio.channels", "text": "A grouping of asynchronous channels for the purpose of resource sharing.\n\n  An asynchronous channel group encapsulates the mechanics required to\n handle the completion of I/O operations initiated by asynchronous channels that are bound to the group. A group has an associated\n thread pool to which tasks are submitted to handle I/O events and dispatch to\n completion-handlers that consume the result of\n asynchronous operations performed on channels in the group. In addition to\n handling I/O events, the pooled threads may also execute other tasks required\n to support the execution of asynchronous I/O operations.\n\n  An asynchronous channel group is created by invoking the withFixedThreadPool or withCachedThreadPool methods defined here. Channels are bound to a group by\n specifying the group when constructing the channel. The associated thread\n pool is owned by the group; termination of the group results in the\n shutdown of the associated thread pool.\n\n  In addition to groups created explicitly, the Java virtual machine\n maintains a system-wide default group that is constructed\n automatically. Asynchronous channels that do not specify a group at\n construction time are bound to the default group. The default group has an\n associated thread pool that creates new threads as needed. The default group\n may be configured by means of system properties defined in the table below.\n Where the ThreadFactory for the\n default group is not configured then the pooled threads of the default group\n are daemon threads.\n\n \nSystem properties\n\n\nSystem property\nDescription\n\n\n\n\n java.nio.channels.DefaultThreadPool.threadFactory \n The value of this property is taken to be the fully-qualified name\n     of a concrete ThreadFactory\n     class. The class is loaded using the system class loader and instantiated.\n     The factory's newThread method is invoked to create each thread for the default\n     group's thread pool. If the process to load and instantiate the value\n     of the property fails then an unspecified error is thrown during the\n     construction of the default group. \n\n\n java.nio.channels.DefaultThreadPool.initialSize \n The value of the initialSize parameter for the default\n     group (see withCachedThreadPool).\n     The value of the property is taken to be the String\n     representation of an Integer that is the initial size parameter.\n     If the value cannot be parsed as an Integer it causes an\n     unspecified error to be thrown during the construction of the default\n     group. \n\n\n\nThreading\n The completion handler for an I/O operation initiated on a channel bound\n to a group is guaranteed to be invoked by one of the pooled threads in the\n group. This ensures that the completion handler is run by a thread with the\n expected identity.\n\n  Where an I/O operation completes immediately, and the initiating thread\n is one of the pooled threads in the group then the completion handler may\n be invoked directly by the initiating thread. To avoid stack overflow, an\n implementation may impose a limit as to the number of activations on the\n thread stack. Some I/O operations may prohibit invoking the completion\n handler directly by the initiating thread (see accept).\n\n Shutdown and Termination\n The shutdown method is used to initiate an orderly\n shutdown of a group. An orderly shutdown marks the group as shutdown;\n further attempts to construct a channel that binds to the group will throw\n ShutdownChannelGroupException. Whether or not a group is shutdown can\n be tested using the isShutdown method. Once shutdown,\n the group terminates when all asynchronous channels that are bound to\n the group are closed, all actively executing completion handlers have run to\n completion, and resources used by the group are released. No attempt is made\n to stop or interrupt threads that are executing completion handlers. The\n isTerminated method is used to test if the group has\n terminated, and the awaitTermination method can be\n used to block until the group has terminated.\n\n  The shutdownNow method can be used to initiate a\n forceful shutdown of the group. In addition to the actions performed\n by an orderly shutdown, the shutdownNow method closes all open channels\n in the group as if by invoking the close\n method.", "codes": ["public abstract class AsynchronousChannelGroup\nextends Object"], "fields": [], "methods": [{"method_name": "provider", "method_sig": "public final AsynchronousChannelProvider provider()", "description": "Returns the provider that created this channel group."}, {"method_name": "withFixedThreadPool", "method_sig": "public static AsynchronousChannelGroup withFixedThreadPool (int nThreads,\n                                                           ThreadFactory threadFactory)\n                                                    throws IOException", "description": "Creates an asynchronous channel group with a fixed thread pool.\n\n  The resulting asynchronous channel group reuses a fixed number of\n threads. At any point, at most nThreads threads will be active\n processing tasks that are submitted to handle I/O events and dispatch\n completion results for operations initiated on asynchronous channels in\n the group.\n\n  The group is created by invoking the openAsynchronousChannelGroup(int,ThreadFactory) method of the system-wide\n default AsynchronousChannelProvider object."}, {"method_name": "withCachedThreadPool", "method_sig": "public static AsynchronousChannelGroup withCachedThreadPool (ExecutorService executor,\n                                                            int initialSize)\n                                                     throws IOException", "description": "Creates an asynchronous channel group with a given thread pool that\n creates new threads as needed.\n\n  The executor parameter is an ExecutorService that\n creates new threads as needed to execute tasks that are submitted to\n handle I/O events and dispatch completion results for operations initiated\n on asynchronous channels in the group. It may reuse previously constructed\n threads when they are available.\n\n  The initialSize parameter may be used by the implementation\n as a hint as to the initial number of tasks it may submit. For\n example, it may be used to indicate the initial number of threads that\n wait on I/O events.\n\n  The executor is intended to be used exclusively by the resulting\n asynchronous channel group. Termination of the group results in the\n orderly  shutdown of the executor\n service. Shutting down the executor service by other means results in\n unspecified behavior.\n\n  The group is created by invoking the openAsynchronousChannelGroup(ExecutorService,int) method of the system-wide\n default AsynchronousChannelProvider object."}, {"method_name": "withThreadPool", "method_sig": "public static AsynchronousChannelGroup withThreadPool (ExecutorService executor)\n                                               throws IOException", "description": "Creates an asynchronous channel group with a given thread pool.\n\n  The executor parameter is an ExecutorService that\n executes tasks submitted to dispatch completion results for operations\n initiated on asynchronous channels in the group.\n\n  Care should be taken when configuring the executor service. It\n should support direct handoff or unbounded queuing of\n submitted tasks, and the thread that invokes the execute method should never invoke the task\n directly. An implementation may mandate additional constraints.\n\n  The executor is intended to be used exclusively by the resulting\n asynchronous channel group. Termination of the group results in the\n orderly  shutdown of the executor\n service. Shutting down the executor service by other means results in\n unspecified behavior.\n\n  The group is created by invoking the openAsynchronousChannelGroup(ExecutorService,int) method of the system-wide\n default AsynchronousChannelProvider object with an \n initialSize of 0."}, {"method_name": "isShutdown", "method_sig": "public abstract boolean isShutdown()", "description": "Tells whether or not this asynchronous channel group is shutdown."}, {"method_name": "isTerminated", "method_sig": "public abstract boolean isTerminated()", "description": "Tells whether or not this group has terminated.\n\n  Where this method returns true, then the associated thread\n pool has also terminated."}, {"method_name": "shutdown", "method_sig": "public abstract void shutdown()", "description": "Initiates an orderly shutdown of the group.\n\n  This method marks the group as shutdown. Further attempts to construct\n channel that binds to this group will throw ShutdownChannelGroupException.\n The group terminates when all asynchronous channels in the group are\n closed, all actively executing completion handlers have run to completion,\n and all resources have been released. This method has no effect if the\n group is already shutdown."}, {"method_name": "shutdownNow", "method_sig": "public abstract void shutdownNow()\n                          throws IOException", "description": "Shuts down the group and closes all open channels in the group.\n\n  In addition to the actions performed by the shutdown\n method, this method invokes the close\n method on all open channels in the group. This method does not attempt to\n stop or interrupt threads that are executing completion handlers. The\n group terminates when all actively executing completion handlers have run\n to completion and all resources have been released. This method may be\n invoked at any time. If some other thread has already invoked it, then\n another invocation will block until the first invocation is complete,\n after which it will return without effect."}, {"method_name": "awaitTermination", "method_sig": "public abstract boolean awaitTermination (long timeout,\n                                         TimeUnit unit)\n                                  throws InterruptedException", "description": "Awaits termination of the group.\n\n  This method blocks until the group has terminated, or the timeout\n occurs, or the current thread is interrupted, whichever happens first."}]}