{"name": "Class ObjectName", "module": "java.management", "package": "javax.management", "text": "Represents the object name of an MBean, or a pattern that can\n match the names of several MBeans.  Instances of this class are\n immutable.\nAn instance of this class can be used to represent:\n\nAn object name\nAn object name pattern, within the context of a query\n\nAn object name consists of two parts, the domain and the key\n properties.\nThe domain is a string of characters not including\n the character colon (:).  It is recommended that the domain\n should not contain the string \"//\", which is reserved for future use.\n\n If the domain includes at least one occurrence of the wildcard\n characters asterisk (*) or question mark\n (?), then the object name is a pattern.  The asterisk\n matches any sequence of zero or more characters, while the question\n mark matches any single character.\nIf the domain is empty, it will be replaced in certain contexts\n by the default domain of the MBean server in which the\n ObjectName is used.\nThe key properties are an unordered set of keys and\n associated values.\nEach key is a nonempty string of characters which may\n not contain any of the characters comma (,), equals\n (=), colon, asterisk, or question mark.  The same key\n may not occur twice in a given ObjectName.\nEach value associated with a key is a string of\n characters that is either unquoted or quoted.\nAn unquoted value is a possibly empty string of\n characters which may not contain any of the characters comma,\n equals, colon, or quote.\nIf the unquoted value contains at least one occurrence\n of the wildcard characters asterisk or question mark, then the object\n name is a property value pattern. The asterisk matches any\n sequence of zero or more characters, while the question mark matches\n any single character.\nA quoted value consists of a quote (\"),\n followed by a possibly empty string of characters, followed by\n another quote.  Within the string of characters, the backslash\n (\\) has a special meaning.  It must be followed by\n one of the following characters:\n\nAnother backslash.  The second backslash has no special\n meaning and the two characters represent a single backslash.\nThe character 'n'.  The two characters represent a newline\n ('\\n' in Java).\nA quote.  The two characters represent a quote, and that quote\n is not considered to terminate the quoted value. An ending closing\n quote must be present for the quoted value to be valid.\nA question mark (?) or asterisk (*).  The two characters represent\n a question mark or asterisk respectively.\n\nA quote may not appear inside a quoted value except immediately\n after an odd number of consecutive backslashes.\nThe quotes surrounding a quoted value, and any backslashes\n within that value, are considered to be part of the value.\nIf the quoted value contains at least one occurrence of\n the characters asterisk or question mark and they are not preceded\n by a backslash, then they are considered as wildcard characters and\n the object name is a property value pattern. The asterisk\n matches any sequence of zero or more characters, while the question\n mark matches any single character.\nAn ObjectName may be a property list pattern. In this\n case it may have zero or more keys and associated values. It matches\n a nonpattern ObjectName whose domain matches and that contains the\n same keys and associated values, as well as possibly other keys and\n values.\nAn ObjectName is a property value pattern when at least\n one of its quoted or unquoted key property values\n contains the wildcard characters asterisk or question mark as described\n above. In this case it has one or more keys and associated values, with\n at least one of the values containing wildcard characters. It matches a\n nonpattern ObjectName whose domain matches and that contains the same\n keys whose values match; if the property value pattern is also a\n property list pattern then the nonpattern ObjectName can contain\n other keys and values.\nAn ObjectName is a property pattern if it is either a\n property list pattern or a property value pattern\n or both.\nAn ObjectName is a pattern if its domain contains a wildcard or\n if the ObjectName is a property pattern.\nIf an ObjectName is not a pattern, it must contain at least one\n key with its associated value.\nExamples of ObjectName patterns are:\n\n*:type=Foo,name=Bar to match names in any domain whose\n     exact set of keys is type=Foo,name=Bar.\nd:type=Foo,name=Bar,* to match names in the domain\n     d that have the keys type=Foo,name=Bar plus\n     zero or more other keys.\n*:type=Foo,name=Bar,* to match names in any domain\n     that has the keys type=Foo,name=Bar plus zero or\n     more other keys.\nd:type=F?o,name=Bar will match e.g.\n     d:type=Foo,name=Bar and d:type=Fro,name=Bar.\nd:type=F*o,name=Bar will match e.g.\n     d:type=Fo,name=Bar and d:type=Frodo,name=Bar.\nd:type=Foo,name=\"B*\" will match e.g.\n     d:type=Foo,name=\"Bling\". Wildcards are recognized even\n     inside quotes, and like other special characters can be escaped\n     with \\.\n\nAn ObjectName can be written as a String with the following\n elements in order:\n\nThe domain.\n A colon (:).\n A key property list as defined below.\n \nA key property list written as a String is a comma-separated\n list of elements.  Each element is either an asterisk or a key\n property.  A key property consists of a key, an equals\n (=), and the associated value.\nAt most one element of a key property list may be an asterisk.\n If the key property list contains an asterisk element, the\n ObjectName is a property list pattern.\nSpaces have no special significance in a String representing an\n ObjectName.  For example, the String:\n \n domain: key1 = value1 , key2 = value2\n \n represents an ObjectName with two keys.  The name of each key\n contains six characters, of which the first and last are spaces.\n The value associated with the key \"\u00a0key1\u00a0\"\n also begins and ends with a space.\n\n In addition to the restrictions on characters spelt out above,\n no part of an ObjectName may contain a newline character\n ('\\n'), whether the domain, a key, or a value, whether\n quoted or unquoted.  The newline character can be represented in a\n quoted value with the sequence \\n.\n\n The rules on special characters and quoting apply regardless of\n which constructor is used to make an ObjectName.\nTo avoid collisions between MBeans supplied by different\n vendors, a useful convention is to begin the domain name with the\n reverse DNS name of the organization that specifies the MBeans,\n followed by a period and a string whose interpretation is\n determined by that organization.  For example, MBeans specified by\n example.com  would have\n domains such as com.example.MyDomain.  This is essentially\n the same convention as for Java-language package names.\nThe serialVersionUID of this class is 1081892073854801359L.", "codes": ["public class ObjectName\nextends Object\nimplements Comparable<ObjectName>, QueryExp"], "fields": [{"field_name": "WILDCARD", "field_sig": "public static final\u00a0ObjectName WILDCARD", "description": "Defines the wildcard \"*:*\" ObjectName."}], "methods": [{"method_name": "getInstance", "method_sig": "public static ObjectName getInstance (String name)\n                              throws MalformedObjectNameException,\n                                     NullPointerException", "description": "Return an instance of ObjectName that can be used anywhere\n an object obtained with new\n ObjectName(name) can be used.  The returned object may be of\n a subclass of ObjectName.  Calling this method twice with the\n same parameters may return the same object or two equal but\n not identical objects."}, {"method_name": "getInstance", "method_sig": "public static ObjectName getInstance (String domain,\n                                     String key,\n                                     String value)\n                              throws MalformedObjectNameException", "description": "Return an instance of ObjectName that can be used anywhere\n an object obtained with new ObjectName(domain, key, value) can be used.  The\n returned object may be of a subclass of ObjectName.  Calling\n this method twice with the same parameters may return the same\n object or two equal but not identical objects."}, {"method_name": "getInstance", "method_sig": "public static ObjectName getInstance (String domain,\n                                     Hashtable<String, String> table)\n                              throws MalformedObjectNameException", "description": "Return an instance of ObjectName that can be used anywhere\n an object obtained with new ObjectName(domain, table) can be used.  The returned\n object may be of a subclass of ObjectName.  Calling this method\n twice with the same parameters may return the same object or\n two equal but not identical objects."}, {"method_name": "getInstance", "method_sig": "public static ObjectName getInstance (ObjectName name)", "description": "Return an instance of ObjectName that can be used anywhere\n the given object can be used.  The returned object may be of a\n subclass of ObjectName.  If name is of a subclass\n of ObjectName, it is not guaranteed that the returned object\n will be of the same class.\nThe returned value may or may not be identical to\n name.  Calling this method twice with the same\n parameters may return the same object or two equal but not\n identical objects.\nSince ObjectName is immutable, it is not usually useful to\n make a copy of an ObjectName.  The principal use of this method\n is to guard against a malicious caller who might pass an\n instance of a subclass with surprising behavior to sensitive\n code.  Such code can call this method to obtain an ObjectName\n that is known not to have surprising behavior."}, {"method_name": "isPattern", "method_sig": "public boolean isPattern()", "description": "Checks whether the object name is a pattern.\n \n An object name is a pattern if its domain contains a\n wildcard or if the object name is a property pattern."}, {"method_name": "isDomainPattern", "method_sig": "public boolean isDomainPattern()", "description": "Checks whether the object name is a pattern on the domain part."}, {"method_name": "isPropertyPattern", "method_sig": "public boolean isPropertyPattern()", "description": "Checks whether the object name is a pattern on the key properties.\n \n An object name is a pattern on the key properties if it is a\n pattern on the key property list (e.g. \"d:k=v,*\") or on the\n property values (e.g. \"d:k=*\") or on both (e.g. \"d:k=*,*\")."}, {"method_name": "isPropertyListPattern", "method_sig": "public boolean isPropertyListPattern()", "description": "Checks whether the object name is a pattern on the key property list.\n \n For example, \"d:k=v,*\" and \"d:k=*,*\" are key property list patterns\n whereas \"d:k=*\" is not."}, {"method_name": "isPropertyValuePattern", "method_sig": "public boolean isPropertyValuePattern()", "description": "Checks whether the object name is a pattern on the value part\n of at least one of the key properties.\n \n For example, \"d:k=*\" and \"d:k=*,*\" are property value patterns\n whereas \"d:k=v,*\" is not."}, {"method_name": "isPropertyValuePattern", "method_sig": "public boolean isPropertyValuePattern (String property)", "description": "Checks whether the value associated with a key in a key\n property is a pattern."}, {"method_name": "getCanonicalName", "method_sig": "public String getCanonicalName()", "description": "Returns the canonical form of the name; that is, a string\n representation where the properties are sorted in lexical\n order.\nMore precisely, the canonical form of the name is a String\n consisting of the domain part, a colon\n (:), the canonical key property list, and\n a pattern indication.\nThe canonical key property list is the same string\n as described for getCanonicalKeyPropertyListString().\nThe pattern indication is:\n \nempty for an ObjectName\n that is not a property list pattern;\n an asterisk for an ObjectName\n that is a property list pattern with no keys; or\n a comma and an\n asterisk (,*) for an ObjectName that is a property\n list pattern with at least one key.\n "}, {"method_name": "getDomain", "method_sig": "public String getDomain()", "description": "Returns the domain part."}, {"method_name": "getKeyProperty", "method_sig": "public String getKeyProperty (String property)", "description": "Obtains the value associated with a key in a key property."}, {"method_name": "getKeyPropertyList", "method_sig": "public Hashtable<String, String> getKeyPropertyList()", "description": "Returns the key properties as a Hashtable.  The returned\n value is a Hashtable in which each key is a key in the\n ObjectName's key property list and each value is the associated\n value.\nThe returned value may be unmodifiable.  If it is\n modifiable, changing it has no effect on this ObjectName."}, {"method_name": "getKeyPropertyListString", "method_sig": "public String getKeyPropertyListString()", "description": "Returns a string representation of the list of key\n properties specified at creation time.  If this ObjectName was\n constructed with the constructor ObjectName(String),\n the key properties in the returned String will be in the same\n order as in the argument to the constructor."}, {"method_name": "getCanonicalKeyPropertyListString", "method_sig": "public String getCanonicalKeyPropertyListString()", "description": "Returns a string representation of the list of key properties,\n in which the key properties are sorted in lexical order. This\n is used in lexicographic comparisons performed in order to\n select MBeans based on their key property list.  Lexical order\n is the order implied by String.compareTo(String)."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a string representation of the object name.  The\n format of this string is not specified, but users can expect\n that two ObjectNames return the same string if and only if they\n are equal."}, {"method_name": "equals", "method_sig": "public boolean equals (Object object)", "description": "Compares the current object name with another object name.  Two\n ObjectName instances are equal if and only if their canonical\n forms are equal.  The canonical form is the string described\n for getCanonicalName()."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Returns a hash code for this object name."}, {"method_name": "quote", "method_sig": "public static String quote (String s)", "description": "Returns a quoted form of the given String, suitable for\n inclusion in an ObjectName.  The returned value can be used as\n the value associated with a key in an ObjectName.  The String\n s may contain any character.  Appropriate quoting\n ensures that the returned value is legal in an ObjectName.\nThe returned value consists of a quote ('\"'), a sequence of\n characters corresponding to the characters of s,\n and another quote.  Characters in s appear\n unchanged within the returned value except:\n\nA quote ('\"') is replaced by a backslash (\\) followed by a quote.\nAn asterisk ('*') is replaced by a backslash (\\) followed by an\n asterisk.\nA question mark ('?') is replaced by a backslash (\\) followed by\n a question mark.\nA backslash ('\\') is replaced by two backslashes.\nA newline character (the character '\\n' in Java) is replaced\n by a backslash followed by the character '\\n'.\n"}, {"method_name": "unquote", "method_sig": "public static String unquote (String q)", "description": "Returns an unquoted form of the given String.  If\n q is a String returned by quote(s),\n then unquote(q).equals(s).  If there is no String\n s for which quote(s).equals(q), then\n unquote(q) throws an IllegalArgumentException.\nThese rules imply that there is a one-to-one mapping between\n quoted and unquoted forms."}, {"method_name": "apply", "method_sig": "public boolean apply (ObjectName name)", "description": "Test whether this ObjectName, which may be a pattern,\n matches another ObjectName.  If name is a pattern,\n the result is false.  If this ObjectName is a pattern, the\n result is true if and only if name matches the\n pattern.  If neither this ObjectName nor name is\n a pattern, the result is true if and only if the two\n ObjectNames are equal as described for the equals(Object) method."}, {"method_name": "compareTo", "method_sig": "public int compareTo (ObjectName name)", "description": "Compares two ObjectName instances. The ordering relation between\n ObjectNames is not completely specified but is intended to be such\n that a sorted list of ObjectNames will appear in an order that is\n convenient for a person to read.\nIn particular, if the two ObjectName instances have different\n domains then their order is the lexicographical order of the domains.\n The ordering of the key property list remains unspecified.\nFor example, the ObjectName instances below:\n\nShapes:type=Square,name=3\nColors:type=Red,name=2\nShapes:type=Triangle,side=isosceles,name=2\nColors:type=Red,name=1\nShapes:type=Square,name=1\nColors:type=Blue,name=1\nShapes:type=Square,name=2\nJMImplementation:type=MBeanServerDelegate\nShapes:type=Triangle,side=scalene,name=1\n\ncould be ordered as follows:\n\nColors:type=Blue,name=1\nColors:type=Red,name=1\nColors:type=Red,name=2\nJMImplementation:type=MBeanServerDelegate\nShapes:type=Square,name=1\nShapes:type=Square,name=2\nShapes:type=Square,name=3\nShapes:type=Triangle,side=scalene,name=1\nShapes:type=Triangle,side=isosceles,name=2\n"}]}