{"name": "Interface DropTargetListener", "module": "java.desktop", "package": "java.awt.dnd", "text": "The DropTargetListener interface\n is the callback interface used by the\n DropTarget class to provide\n notification of DnD operations that involve\n the subject DropTarget. Methods of\n this interface may be implemented to provide\n \"drag under\" visual feedback to the user throughout\n the Drag and Drop operation.\n \n Create a listener object by implementing the interface and then register it\n with a DropTarget. When the drag enters, moves over, or exits\n the operable part of the drop site for that DropTarget, when\n the drop action changes, and when the drop occurs, the relevant method in\n the listener object is invoked, and the DropTargetEvent is\n passed to it.\n \n The operable part of the drop site for the DropTarget is\n the part of the associated Component's geometry that is not\n obscured by an overlapping top-level window or by another\n Component higher in the Z-order that has an associated active\n DropTarget.\n \n During the drag, the data associated with the current drag operation can be\n retrieved by calling getTransferable() on\n DropTargetDragEvent instances passed to the listener's\n methods.\n \n Note that getTransferable() on the\n DropTargetDragEvent instance should only be called within the\n respective listener's method and all the necessary data should be retrieved\n from the returned Transferable before that method returns.", "codes": ["public interface DropTargetListener\nextends EventListener"], "fields": [], "methods": [{"method_name": "dragEnter", "method_sig": "void dragEnter (DropTargetDragEvent dtde)", "description": "Called while a drag operation is ongoing, when the mouse pointer enters\n the operable part of the drop site for the DropTarget\n registered with this listener."}, {"method_name": "dragOver", "method_sig": "void dragOver (DropTargetDragEvent dtde)", "description": "Called when a drag operation is ongoing, while the mouse pointer is still\n over the operable part of the drop site for the DropTarget\n registered with this listener."}, {"method_name": "dropActionChanged", "method_sig": "void dropActionChanged (DropTargetDragEvent dtde)", "description": "Called if the user has modified\n the current drop gesture."}, {"method_name": "dragExit", "method_sig": "void dragExit (DropTargetEvent dte)", "description": "Called while a drag operation is ongoing, when the mouse pointer has\n exited the operable part of the drop site for the\n DropTarget registered with this listener."}, {"method_name": "drop", "method_sig": "void drop (DropTargetDropEvent dtde)", "description": "Called when the drag operation has terminated with a drop on\n the operable part of the drop site for the DropTarget\n registered with this listener.\n \n This method is responsible for undertaking\n the transfer of the data associated with the\n gesture. The DropTargetDropEvent\n provides a means to obtain a Transferable\n object that represents the data object(s) to\n be transferred.\n From this method, the DropTargetListener\n shall accept or reject the drop via the\n acceptDrop(int dropAction) or rejectDrop() methods of the\n DropTargetDropEvent parameter.\n \n Subsequent to acceptDrop(), but not before,\n DropTargetDropEvent's getTransferable()\n method may be invoked, and data transfer may be\n performed via the returned Transferable's\n getTransferData() method.\n \n At the completion of a drop, an implementation\n of this method is required to signal the success/failure\n of the drop by passing an appropriate\n boolean to the DropTargetDropEvent's\n dropComplete(boolean success) method.\n \n Note: The data transfer should be completed before the call  to the\n DropTargetDropEvent's dropComplete(boolean success) method.\n After that, a call to the getTransferData() method of the\n Transferable returned by\n DropTargetDropEvent.getTransferable() is guaranteed to\n succeed only if the data transfer is local; that is, only if\n DropTargetDropEvent.isLocalTransfer() returns\n true. Otherwise, the behavior of the call is\n implementation-dependent."}]}