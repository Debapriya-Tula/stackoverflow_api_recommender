{"name": "Class NashornException", "module": "jdk.scripting.nashorn", "package": "jdk.nashorn.api.scripting", "text": "This is base exception for all Nashorn exceptions. These originate from\n user's ECMAScript code. Example: script parse errors, exceptions thrown from\n scripts. Note that ScriptEngine methods like \"eval\", \"invokeMethod\",\n \"invokeFunction\" will wrap this as ScriptException and throw it. But, there\n are cases where user may need to access this exception (or implementation\n defined subtype of this). For example, if java interface is implemented by a\n script object or Java access to script object properties via java.util.Map\n interface. In these cases, user code will get an instance of this or\n implementation defined subclass.", "codes": ["@Deprecated(since=\"11\",\n            forRemoval=true)\npublic abstract class NashornException\nextends RuntimeException"], "fields": [], "methods": [{"method_name": "getFileName", "method_sig": "public final String getFileName()", "description": "Get the source file name for this NashornException"}, {"method_name": "setFileName", "method_sig": "public final void setFileName (String fileName)", "description": "Set the source file name for this NashornException"}, {"method_name": "getLineNumber", "method_sig": "public final int getLineNumber()", "description": "Get the line number for this NashornException"}, {"method_name": "setLineNumber", "method_sig": "public final void setLineNumber (int line)", "description": "Set the line number for this NashornException"}, {"method_name": "getColumnNumber", "method_sig": "public final int getColumnNumber()", "description": "Get the column for this NashornException"}, {"method_name": "setColumnNumber", "method_sig": "public final void setColumnNumber (int column)", "description": "Set the column for this NashornException"}, {"method_name": "getScriptFrames", "method_sig": "public static StackTraceElement[] getScriptFrames (Throwable exception)", "description": "Returns array javascript stack frames from the given exception object."}, {"method_name": "getScriptStackString", "method_sig": "public static String getScriptStackString (Throwable exception)", "description": "Return a formatted script stack trace string with frames information separated by '\\n'"}, {"method_name": "getThrown", "method_sig": "protected Object getThrown()", "description": "Get the thrown object. Subclass responsibility"}, {"method_name": "getEcmaError", "method_sig": "public Object getEcmaError()", "description": "Return the underlying ECMA error object, if available."}, {"method_name": "setEcmaError", "method_sig": "public void setEcmaError (Object ecmaError)", "description": "Return the underlying ECMA error object, if available."}]}