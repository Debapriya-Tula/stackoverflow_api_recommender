{"name": "Interface Statement", "module": "java.sql", "package": "java.sql", "text": "The object used for executing a static SQL statement\n and returning the results it produces.\n \n By default, only one ResultSet object per Statement\n object can be open at the same time. Therefore, if the reading of one\n ResultSet object is interleaved\n with the reading of another, each must have been generated by\n different Statement objects. All execution methods in the\n Statement interface implicitly close a current\n ResultSet object of the statement if an open one exists.", "codes": ["public interface Statement\nextends Wrapper, AutoCloseable"], "fields": [{"field_name": "CLOSE_CURRENT_RESULT", "field_sig": "static final\u00a0int CLOSE_CURRENT_RESULT", "description": "The constant indicating that the current ResultSet object\n should be closed when calling getMoreResults."}, {"field_name": "KEEP_CURRENT_RESULT", "field_sig": "static final\u00a0int KEEP_CURRENT_RESULT", "description": "The constant indicating that the current ResultSet object\n should not be closed when calling getMoreResults."}, {"field_name": "CLOSE_ALL_RESULTS", "field_sig": "static final\u00a0int CLOSE_ALL_RESULTS", "description": "The constant indicating that all ResultSet objects that\n have previously been kept open should be closed when calling\n getMoreResults."}, {"field_name": "SUCCESS_NO_INFO", "field_sig": "static final\u00a0int SUCCESS_NO_INFO", "description": "The constant indicating that a batch statement executed successfully\n but that no count of the number of rows it affected is available."}, {"field_name": "EXECUTE_FAILED", "field_sig": "static final\u00a0int EXECUTE_FAILED", "description": "The constant indicating that an error occurred while executing a\n batch statement."}, {"field_name": "RETURN_GENERATED_KEYS", "field_sig": "static final\u00a0int RETURN_GENERATED_KEYS", "description": "The constant indicating that generated keys should be made\n available for retrieval."}, {"field_name": "NO_GENERATED_KEYS", "field_sig": "static final\u00a0int NO_GENERATED_KEYS", "description": "The constant indicating that generated keys should not be made\n available for retrieval."}], "methods": [{"method_name": "executeQuery", "method_sig": "ResultSet executeQuery (String sql)\n                throws SQLException", "description": "Executes the given SQL statement, which returns a single\n ResultSet object.\n\nNote:This method cannot be called on a\n PreparedStatement or CallableStatement."}, {"method_name": "executeUpdate", "method_sig": "int executeUpdate (String sql)\n           throws SQLException", "description": "Executes the given SQL statement, which may be an INSERT,\n UPDATE, or DELETE statement or an\n SQL statement that returns nothing, such as an SQL DDL statement.\n\nNote:This method cannot be called on a\n PreparedStatement or CallableStatement."}, {"method_name": "close", "method_sig": "void close()\n    throws SQLException", "description": "Releases this Statement object's database\n and JDBC resources immediately instead of waiting for\n this to happen when it is automatically closed.\n It is generally good practice to release resources as soon as\n you are finished with them to avoid tying up database\n resources.\n \n Calling the method close on a Statement\n object that is already closed has no effect.\n \nNote:When a Statement object is\n closed, its current ResultSet object, if one exists, is\n also closed."}, {"method_name": "getMaxFieldSize", "method_sig": "int getMaxFieldSize()\n             throws SQLException", "description": "Retrieves the maximum number of bytes that can be\n returned for character and binary column values in a ResultSet\n object produced by this Statement object.\n This limit applies only to  BINARY, VARBINARY,\n LONGVARBINARY, CHAR, VARCHAR,\n NCHAR, NVARCHAR, LONGNVARCHAR\n and LONGVARCHAR columns.  If the limit is exceeded, the\n excess data is silently discarded."}, {"method_name": "setMaxFieldSize", "method_sig": "void setMaxFieldSize (int max)\n              throws SQLException", "description": "Sets the limit for the maximum number of bytes that can be returned for\n character and binary column values in a ResultSet\n object produced by this Statement object.\n\n This limit applies\n only to BINARY, VARBINARY,\n LONGVARBINARY, CHAR, VARCHAR,\n NCHAR, NVARCHAR, LONGNVARCHAR and\n LONGVARCHAR fields.  If the limit is exceeded, the excess data\n is silently discarded. For maximum portability, use values\n greater than 256."}, {"method_name": "getMaxRows", "method_sig": "int getMaxRows()\n        throws SQLException", "description": "Retrieves the maximum number of rows that a\n ResultSet object produced by this\n Statement object can contain.  If this limit is exceeded,\n the excess rows are silently dropped."}, {"method_name": "setMaxRows", "method_sig": "void setMaxRows (int max)\n         throws SQLException", "description": "Sets the limit for the maximum number of rows that any\n ResultSet object  generated by this Statement\n object can contain to the given number.\n If the limit is exceeded, the excess\n rows are silently dropped."}, {"method_name": "setEscapeProcessing", "method_sig": "void setEscapeProcessing (boolean enable)\n                  throws SQLException", "description": "Sets escape processing on or off.\n If escape scanning is on (the default), the driver will do\n escape substitution before sending the SQL statement to the database.\n\n The Connection and DataSource property\n escapeProcessing may be used to change the default escape processing\n behavior.  A value of true (the default) enables escape Processing for\n all Statement objects. A value of false disables escape processing\n for all Statement objects.  The setEscapeProcessing\n method may be used to specify the escape processing behavior for an\n individual Statement object.\n \n Note: Since prepared statements have usually been parsed prior\n to making this call, disabling escape processing for\n PreparedStatements objects will have no effect."}, {"method_name": "getQueryTimeout", "method_sig": "int getQueryTimeout()\n             throws SQLException", "description": "Retrieves the number of seconds the driver will\n wait for a Statement object to execute.\n If the limit is exceeded, a\n SQLException is thrown."}, {"method_name": "setQueryTimeout", "method_sig": "void setQueryTimeout (int seconds)\n              throws SQLException", "description": "Sets the number of seconds the driver will wait for a\n Statement object to execute to the given number of seconds.\nBy default there is no limit on the amount of time allowed for a running\n statement to complete. If the limit is exceeded, an\n SQLTimeoutException is thrown.\n A JDBC driver must apply this limit to the execute,\n executeQuery and executeUpdate methods.\n \nNote: JDBC driver implementations may also apply this\n limit to ResultSet methods\n (consult your driver vendor documentation for details).\n \nNote: In the case of Statement batching, it is\n implementation defined as to whether the time-out is applied to\n individual SQL commands added via the addBatch method or to\n the entire batch of SQL commands invoked by the executeBatch\n method (consult your driver vendor documentation for details)."}, {"method_name": "cancel", "method_sig": "void cancel()\n     throws SQLException", "description": "Cancels this Statement object if both the DBMS and\n driver support aborting an SQL statement.\n This method can be used by one thread to cancel a statement that\n is being executed by another thread."}, {"method_name": "getWarnings", "method_sig": "SQLWarning getWarnings()\n                throws SQLException", "description": "Retrieves the first warning reported by calls on this Statement object.\n Subsequent Statement object warnings will be chained to this\n SQLWarning object.\n\n The warning chain is automatically cleared each time\n a statement is (re)executed. This method may not be called on a closed\n Statement object; doing so will cause an SQLException\n to be thrown.\n\n Note: If you are processing a ResultSet object, any\n warnings associated with reads on that ResultSet object\n will be chained on it rather than on the Statement\n object that produced it."}, {"method_name": "clearWarnings", "method_sig": "void clearWarnings()\n            throws SQLException", "description": "Clears all the warnings reported on this Statement\n object. After a call to this method,\n the method getWarnings will return\n null until a new warning is reported for this\n Statement object."}, {"method_name": "setCursorName", "method_sig": "void setCursorName (String name)\n            throws SQLException", "description": "Sets the SQL cursor name to the given String, which\n will be used by subsequent Statement object\n execute methods. This name can then be\n used in SQL positioned update or delete statements to identify the\n current row in the ResultSet object generated by this\n statement.  If the database does not support positioned update/delete,\n this method is a noop.  To insure that a cursor has the proper isolation\n level to support updates, the cursor's SELECT statement\n should have the form SELECT FOR UPDATE.  If\n FOR UPDATE is not present, positioned updates may fail.\n\n Note: By definition, the execution of positioned updates and\n deletes must be done by a different Statement object than\n the one that generated the ResultSet object being used for\n positioning. Also, cursor names must be unique within a connection."}, {"method_name": "execute", "method_sig": "boolean execute (String sql)\n         throws SQLException", "description": "Executes the given SQL statement, which may return multiple results.\n In some (uncommon) situations, a single SQL statement may return\n multiple result sets and/or update counts.  Normally you can ignore\n this unless you are (1) executing a stored procedure that you know may\n return multiple results or (2) you are dynamically executing an\n unknown SQL string.\n \n The execute method executes an SQL statement and indicates the\n form of the first result.  You must then use the methods\n getResultSet or getUpdateCount\n to retrieve the result, and getMoreResults to\n move to any subsequent result(s).\n \nNote:This method cannot be called on a\n PreparedStatement or CallableStatement."}, {"method_name": "getResultSet", "method_sig": "ResultSet getResultSet()\n                throws SQLException", "description": "Retrieves the current result as a ResultSet object.\n  This method should be called only once per result."}, {"method_name": "getUpdateCount", "method_sig": "int getUpdateCount()\n            throws SQLException", "description": "Retrieves the current result as an update count;\n  if the result is a ResultSet object or there are no more results, -1\n  is returned. This method should be called only once per result."}, {"method_name": "getMoreResults", "method_sig": "boolean getMoreResults()\n                throws SQLException", "description": "Moves to this Statement object's next result, returns\n true if it is a ResultSet object, and\n implicitly closes any current ResultSet\n object(s) obtained with the method getResultSet.\n\n There are no more results when the following is true:\n \n     // stmt is a Statement object\n     ((stmt.getMoreResults() == false) && (stmt.getUpdateCount() == -1))\n "}, {"method_name": "setFetchDirection", "method_sig": "void setFetchDirection (int direction)\n                throws SQLException", "description": "Gives the driver a hint as to the direction in which\n rows will be processed in ResultSet\n objects created using this Statement object.  The\n default value is ResultSet.FETCH_FORWARD.\n \n Note that this method sets the default fetch direction for\n result sets generated by this Statement object.\n Each result set has its own methods for getting and setting\n its own fetch direction."}, {"method_name": "getFetchDirection", "method_sig": "int getFetchDirection()\n               throws SQLException", "description": "Retrieves the direction for fetching rows from\n database tables that is the default for result sets\n generated from this Statement object.\n If this Statement object has not set\n a fetch direction by calling the method setFetchDirection,\n the return value is implementation-specific."}, {"method_name": "setFetchSize", "method_sig": "void setFetchSize (int rows)\n           throws SQLException", "description": "Gives the JDBC driver a hint as to the number of rows that should\n be fetched from the database when more rows are needed for\n ResultSet objects generated by this Statement.\n If the value specified is zero, then the hint is ignored.\n The default value is zero."}, {"method_name": "getFetchSize", "method_sig": "int getFetchSize()\n          throws SQLException", "description": "Retrieves the number of result set rows that is the default\n fetch size for ResultSet objects\n generated from this Statement object.\n If this Statement object has not set\n a fetch size by calling the method setFetchSize,\n the return value is implementation-specific."}, {"method_name": "getResultSetConcurrency", "method_sig": "int getResultSetConcurrency()\n                     throws SQLException", "description": "Retrieves the result set concurrency for ResultSet objects\n generated by this Statement object."}, {"method_name": "getResultSetType", "method_sig": "int getResultSetType()\n              throws SQLException", "description": "Retrieves the result set type for ResultSet objects\n generated by this Statement object."}, {"method_name": "addBatch", "method_sig": "void addBatch (String sql)\n       throws SQLException", "description": "Adds the given SQL command to the current list of commands for this\n Statement object. The commands in this list can be\n executed as a batch by calling the method executeBatch.\n \nNote:This method cannot be called on a\n PreparedStatement or CallableStatement."}, {"method_name": "clearBatch", "method_sig": "void clearBatch()\n         throws SQLException", "description": "Empties this Statement object's current list of\n SQL commands."}, {"method_name": "executeBatch", "method_sig": "int[] executeBatch()\n            throws SQLException", "description": "Submits a batch of commands to the database for execution and\n if all commands execute successfully, returns an array of update counts.\n The int elements of the array that is returned are ordered\n to correspond to the commands in the batch, which are ordered\n according to the order in which they were added to the batch.\n The elements in the array returned by the method executeBatch\n may be one of the following:\n \nA number greater than or equal to zero -- indicates that the\n command was processed successfully and is an update count giving the\n number of rows in the database that were affected by the command's\n execution\n A value of SUCCESS_NO_INFO -- indicates that the command was\n processed successfully but that the number of rows affected is\n unknown\n \n If one of the commands in a batch update fails to execute properly,\n this method throws a BatchUpdateException, and a JDBC\n driver may or may not continue to process the remaining commands in\n the batch.  However, the driver's behavior must be consistent with a\n particular DBMS, either always continuing to process commands or never\n continuing to process commands.  If the driver continues processing\n after a failure, the array returned by the method\n BatchUpdateException.getUpdateCounts\n will contain as many elements as there are commands in the batch, and\n at least one of the elements will be the following:\n\n A value of EXECUTE_FAILED -- indicates that the command failed\n to execute successfully and occurs only if a driver continues to\n process commands after a command fails\n \n\n The possible implementations and return values have been modified in\n the Java 2 SDK, Standard Edition, version 1.3 to\n accommodate the option of continuing to process commands in a batch\n update after a BatchUpdateException object has been thrown."}, {"method_name": "getConnection", "method_sig": "Connection getConnection()\n                  throws SQLException", "description": "Retrieves the Connection object\n that produced this Statement object."}, {"method_name": "getMoreResults", "method_sig": "boolean getMoreResults (int current)\n                throws SQLException", "description": "Moves to this Statement object's next result, deals with\n any current ResultSet object(s) according  to the instructions\n specified by the given flag, and returns\n true if the next result is a ResultSet object.\n\n There are no more results when the following is true:\n \n     // stmt is a Statement object\n     ((stmt.getMoreResults(current) == false) && (stmt.getUpdateCount() == -1))\n "}, {"method_name": "getGeneratedKeys", "method_sig": "ResultSet getGeneratedKeys()\n                    throws SQLException", "description": "Retrieves any auto-generated keys created as a result of executing this\n Statement object. If this Statement object did\n not generate any keys, an empty ResultSet\n object is returned.\n\nNote:If the columns which represent the auto-generated keys were not specified,\n the JDBC driver implementation will determine the columns which best represent the auto-generated keys."}, {"method_name": "executeUpdate", "method_sig": "int executeUpdate (String sql,\n                  int autoGeneratedKeys)\n           throws SQLException", "description": "Executes the given SQL statement and signals the driver with the\n given flag about whether the\n auto-generated keys produced by this Statement object\n should be made available for retrieval.  The driver will ignore the\n flag if the SQL statement\n is not an INSERT statement, or an SQL statement able to return\n auto-generated keys (the list of such statements is vendor-specific).\n\nNote:This method cannot be called on a\n PreparedStatement or CallableStatement."}, {"method_name": "executeUpdate", "method_sig": "int executeUpdate (String sql,\n                  int[] columnIndexes)\n           throws SQLException", "description": "Executes the given SQL statement and signals the driver that the\n auto-generated keys indicated in the given array should be made available\n for retrieval.   This array contains the indexes of the columns in the\n target table that contain the auto-generated keys that should be made\n available. The driver will ignore the array if the SQL statement\n is not an INSERT statement, or an SQL statement able to return\n auto-generated keys (the list of such statements is vendor-specific).\n\nNote:This method cannot be called on a\n PreparedStatement or CallableStatement."}, {"method_name": "executeUpdate", "method_sig": "int executeUpdate (String sql,\n                  String[] columnNames)\n           throws SQLException", "description": "Executes the given SQL statement and signals the driver that the\n auto-generated keys indicated in the given array should be made available\n for retrieval.   This array contains the names of the columns in the\n target table that contain the auto-generated keys that should be made\n available. The driver will ignore the array if the SQL statement\n is not an INSERT statement, or an SQL statement able to return\n auto-generated keys (the list of such statements is vendor-specific).\n\nNote:This method cannot be called on a\n PreparedStatement or CallableStatement."}, {"method_name": "execute", "method_sig": "boolean execute (String sql,\n                int autoGeneratedKeys)\n         throws SQLException", "description": "Executes the given SQL statement, which may return multiple results,\n and signals the driver that any\n auto-generated keys should be made available\n for retrieval.  The driver will ignore this signal if the SQL statement\n is not an INSERT statement, or an SQL statement able to return\n auto-generated keys (the list of such statements is vendor-specific).\n \n In some (uncommon) situations, a single SQL statement may return\n multiple result sets and/or update counts.  Normally you can ignore\n this unless you are (1) executing a stored procedure that you know may\n return multiple results or (2) you are dynamically executing an\n unknown SQL string.\n \n The execute method executes an SQL statement and indicates the\n form of the first result.  You must then use the methods\n getResultSet or getUpdateCount\n to retrieve the result, and getMoreResults to\n move to any subsequent result(s).\n\nNote:This method cannot be called on a\n PreparedStatement or CallableStatement."}, {"method_name": "execute", "method_sig": "boolean execute (String sql,\n                int[] columnIndexes)\n         throws SQLException", "description": "Executes the given SQL statement, which may return multiple results,\n and signals the driver that the\n auto-generated keys indicated in the given array should be made available\n for retrieval.  This array contains the indexes of the columns in the\n target table that contain the auto-generated keys that should be made\n available.  The driver will ignore the array if the SQL statement\n is not an INSERT statement, or an SQL statement able to return\n auto-generated keys (the list of such statements is vendor-specific).\n \n Under some (uncommon) situations, a single SQL statement may return\n multiple result sets and/or update counts.  Normally you can ignore\n this unless you are (1) executing a stored procedure that you know may\n return multiple results or (2) you are dynamically executing an\n unknown SQL string.\n \n The execute method executes an SQL statement and indicates the\n form of the first result.  You must then use the methods\n getResultSet or getUpdateCount\n to retrieve the result, and getMoreResults to\n move to any subsequent result(s).\n\nNote:This method cannot be called on a\n PreparedStatement or CallableStatement."}, {"method_name": "execute", "method_sig": "boolean execute (String sql,\n                String[] columnNames)\n         throws SQLException", "description": "Executes the given SQL statement, which may return multiple results,\n and signals the driver that the\n auto-generated keys indicated in the given array should be made available\n for retrieval. This array contains the names of the columns in the\n target table that contain the auto-generated keys that should be made\n available.  The driver will ignore the array if the SQL statement\n is not an INSERT statement, or an SQL statement able to return\n auto-generated keys (the list of such statements is vendor-specific).\n \n In some (uncommon) situations, a single SQL statement may return\n multiple result sets and/or update counts.  Normally you can ignore\n this unless you are (1) executing a stored procedure that you know may\n return multiple results or (2) you are dynamically executing an\n unknown SQL string.\n \n The execute method executes an SQL statement and indicates the\n form of the first result.  You must then use the methods\n getResultSet or getUpdateCount\n to retrieve the result, and getMoreResults to\n move to any subsequent result(s).\n\nNote:This method cannot be called on a\n PreparedStatement or CallableStatement."}, {"method_name": "getResultSetHoldability", "method_sig": "int getResultSetHoldability()\n                     throws SQLException", "description": "Retrieves the result set holdability for ResultSet objects\n generated by this Statement object."}, {"method_name": "isClosed", "method_sig": "boolean isClosed()\n          throws SQLException", "description": "Retrieves whether this Statement object has been closed. A Statement is closed if the\n method close has been called on it, or if it is automatically closed."}, {"method_name": "setPoolable", "method_sig": "void setPoolable (boolean poolable)\n          throws SQLException", "description": "Requests that a Statement be pooled or not pooled.  The value\n specified is a hint to the statement pool implementation indicating\n whether the application wants the statement to be pooled.  It is up to\n the statement pool manager as to whether the hint is used.\n \n The poolable value of a statement is applicable to both internal\n statement caches implemented by the driver and external statement caches\n implemented by application servers and other applications.\n \n By default, a Statement is not poolable when created, and\n a PreparedStatement and CallableStatement\n are poolable when created."}, {"method_name": "isPoolable", "method_sig": "boolean isPoolable()\n            throws SQLException", "description": "Returns a  value indicating whether the Statement\n is poolable or not."}, {"method_name": "closeOnCompletion", "method_sig": "void closeOnCompletion()\n                throws SQLException", "description": "Specifies that this Statement will be closed when all its\n dependent result sets are closed. If execution of the Statement\n does not produce any result sets, this method has no effect.\n \nNote: Multiple calls to closeOnCompletion do\n not toggle the effect on this Statement. However, a call to\n closeOnCompletion does effect both the subsequent execution of\n statements, and statements that currently have open, dependent,\n result sets."}, {"method_name": "isCloseOnCompletion", "method_sig": "boolean isCloseOnCompletion()\n                     throws SQLException", "description": "Returns a value indicating whether this Statement will be\n closed when all its dependent result sets are closed."}, {"method_name": "getLargeUpdateCount", "method_sig": "default long getLargeUpdateCount()\n                          throws SQLException", "description": "Retrieves the current result as an update count; if the result\n is a ResultSet object or there are no more results, -1\n  is returned. This method should be called only once per result.\n \n This method should be used when the returned row count may exceed\n Integer.MAX_VALUE.\n\n The default implementation will throw UnsupportedOperationException"}, {"method_name": "setLargeMaxRows", "method_sig": "default void setLargeMaxRows (long max)\n                      throws SQLException", "description": "Sets the limit for the maximum number of rows that any\n ResultSet object  generated by this Statement\n object can contain to the given number.\n If the limit is exceeded, the excess\n rows are silently dropped.\n \n This method should be used when the row limit may exceed\n Integer.MAX_VALUE.\n\n The default implementation will throw UnsupportedOperationException"}, {"method_name": "getLargeMaxRows", "method_sig": "default long getLargeMaxRows()\n                      throws SQLException", "description": "Retrieves the maximum number of rows that a\n ResultSet object produced by this\n Statement object can contain.  If this limit is exceeded,\n the excess rows are silently dropped.\n \n This method should be used when the returned row limit may exceed\n Integer.MAX_VALUE.\n\n The default implementation will return 0"}, {"method_name": "executeLargeBatch", "method_sig": "default long[] executeLargeBatch()\n                          throws SQLException", "description": "Submits a batch of commands to the database for execution and\n if all commands execute successfully, returns an array of update counts.\n The long elements of the array that is returned are ordered\n to correspond to the commands in the batch, which are ordered\n according to the order in which they were added to the batch.\n The elements in the array returned by the method executeLargeBatch\n may be one of the following:\n \nA number greater than or equal to zero -- indicates that the\n command was processed successfully and is an update count giving the\n number of rows in the database that were affected by the command's\n execution\n A value of SUCCESS_NO_INFO -- indicates that the command was\n processed successfully but that the number of rows affected is\n unknown\n \n If one of the commands in a batch update fails to execute properly,\n this method throws a BatchUpdateException, and a JDBC\n driver may or may not continue to process the remaining commands in\n the batch.  However, the driver's behavior must be consistent with a\n particular DBMS, either always continuing to process commands or never\n continuing to process commands.  If the driver continues processing\n after a failure, the array returned by the method\n BatchUpdateException.getLargeUpdateCounts\n will contain as many elements as there are commands in the batch, and\n at least one of the elements will be the following:\n\n A value of EXECUTE_FAILED -- indicates that the command failed\n to execute successfully and occurs only if a driver continues to\n process commands after a command fails\n \n\n This method should be used when the returned row count may exceed\n Integer.MAX_VALUE.\n\n The default implementation will throw UnsupportedOperationException"}, {"method_name": "executeLargeUpdate", "method_sig": "default long executeLargeUpdate (String sql)\n                         throws SQLException", "description": "Executes the given SQL statement, which may be an INSERT,\n UPDATE, or DELETE statement or an\n SQL statement that returns nothing, such as an SQL DDL statement.\n \n This method should be used when the returned row count may exceed\n Integer.MAX_VALUE.\n \nNote:This method cannot be called on a\n PreparedStatement or CallableStatement.\n\n The default implementation will throw UnsupportedOperationException"}, {"method_name": "executeLargeUpdate", "method_sig": "default long executeLargeUpdate (String sql,\n                                int autoGeneratedKeys)\n                         throws SQLException", "description": "Executes the given SQL statement and signals the driver with the\n given flag about whether the\n auto-generated keys produced by this Statement object\n should be made available for retrieval.  The driver will ignore the\n flag if the SQL statement\n is not an INSERT statement, or an SQL statement able to return\n auto-generated keys (the list of such statements is vendor-specific).\n \n This method should be used when the returned row count may exceed\n Integer.MAX_VALUE.\n \nNote:This method cannot be called on a\n PreparedStatement or CallableStatement.\n\n The default implementation will throw SQLFeatureNotSupportedException"}, {"method_name": "executeLargeUpdate", "method_sig": "default long executeLargeUpdate (String sql,\n                                int[] columnIndexes)\n                         throws SQLException", "description": "Executes the given SQL statement and signals the driver that the\n auto-generated keys indicated in the given array should be made available\n for retrieval.   This array contains the indexes of the columns in the\n target table that contain the auto-generated keys that should be made\n available. The driver will ignore the array if the SQL statement\n is not an INSERT statement, or an SQL statement able to return\n auto-generated keys (the list of such statements is vendor-specific).\n \n This method should be used when the returned row count may exceed\n Integer.MAX_VALUE.\n \nNote:This method cannot be called on a\n PreparedStatement or CallableStatement.\n\n The default implementation will throw SQLFeatureNotSupportedException"}, {"method_name": "executeLargeUpdate", "method_sig": "default long executeLargeUpdate (String sql,\n                                String[] columnNames)\n                         throws SQLException", "description": "Executes the given SQL statement and signals the driver that the\n auto-generated keys indicated in the given array should be made available\n for retrieval.   This array contains the names of the columns in the\n target table that contain the auto-generated keys that should be made\n available. The driver will ignore the array if the SQL statement\n is not an INSERT statement, or an SQL statement able to return\n auto-generated keys (the list of such statements is vendor-specific).\n \n This method should be used when the returned row count may exceed\n Integer.MAX_VALUE.\n \nNote:This method cannot be called on a\n PreparedStatement or CallableStatement.\n\n The default implementation will throw SQLFeatureNotSupportedException"}, {"method_name": "enquoteLiteral", "method_sig": "default String enquoteLiteral (String val)\n                       throws SQLException", "description": "Returns a String enclosed in single quotes. Any occurrence of a\n single quote within the string will be replaced by two single quotes.\n\n \n\nExamples of the conversion:\n\nValueResult\n\n\n Hello 'Hello' \n G'Day 'G''Day' \n 'G''Day'\n'''G''''Day''' \n I'''M 'I''''''M'\n\n\n\n"}, {"method_name": "enquoteIdentifier", "method_sig": "default String enquoteIdentifier (String identifier,\n                                 boolean alwaysQuote)\n                          throws SQLException", "description": "Returns a SQL identifier. If identifier is a simple SQL identifier:\n \nReturn the original value if alwaysQuote is\n false\nReturn a delimited identifier if alwaysQuote is\n true\n\n\n If identifier is not a simple SQL identifier, identifier will be\n enclosed in double quotes if not already present. If the datasource does\n not support double quotes for delimited identifiers, the\n identifier should be enclosed by the string returned from\n DatabaseMetaData.getIdentifierQuoteString().  If the datasource\n does not support delimited identifiers, a\n SQLFeatureNotSupportedException should be thrown.\n \n A SQLException will be thrown if identifier contains any\n characters invalid in a delimited identifier or the identifier length is\n invalid for the datasource."}, {"method_name": "isSimpleIdentifier", "method_sig": "default boolean isSimpleIdentifier (String identifier)\n                            throws SQLException", "description": "Retrieves whether identifier is a simple SQL identifier."}, {"method_name": "enquoteNCharLiteral", "method_sig": "default String enquoteNCharLiteral (String val)\n                            throws SQLException", "description": "Returns a String representing a National Character Set Literal\n enclosed in single quotes and prefixed with a upper case letter N.\n Any occurrence of a single quote within the string will be replaced\n by two single quotes.\n\n \n\nExamples of the conversion:\n\n\nValue\nResult\n\n\n\n Hello N'Hello' \n G'Day N'G''Day' \n 'G''Day'\nN'''G''''Day''' \n I'''M N'I''''''M'\n N'Hello' N'N''Hello''' \n\n\n"}]}