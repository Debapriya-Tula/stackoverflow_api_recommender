{"name": "Class ConcurrentHashMap<K,\u200bV>", "module": "java.base", "package": "java.util.concurrent", "text": "A hash table supporting full concurrency of retrievals and\n high expected concurrency for updates. This class obeys the\n same functional specification as Hashtable, and\n includes versions of methods corresponding to each method of\n Hashtable. However, even though all operations are\n thread-safe, retrieval operations do not entail locking,\n and there is not any support for locking the entire table\n in a way that prevents all access.  This class is fully\n interoperable with Hashtable in programs that rely on its\n thread safety but not on its synchronization details.\n\n Retrieval operations (including get) generally do not\n block, so may overlap with update operations (including put\n and remove). Retrievals reflect the results of the most\n recently completed update operations holding upon their\n onset. (More formally, an update operation for a given key bears a\n happens-before relation with any (non-null) retrieval for\n that key reporting the updated value.)  For aggregate operations\n such as putAll and clear, concurrent retrievals may\n reflect insertion or removal of only some entries.  Similarly,\n Iterators, Spliterators and Enumerations return elements reflecting the\n state of the hash table at some point at or since the creation of the\n iterator/enumeration.  They do not throw ConcurrentModificationException.\n However, iterators are designed to be used by only one thread at a time.\n Bear in mind that the results of aggregate status methods including\n size, isEmpty, and containsValue are typically\n useful only when a map is not undergoing concurrent updates in other threads.\n Otherwise the results of these methods reflect transient states\n that may be adequate for monitoring or estimation purposes, but not\n for program control.\n\n The table is dynamically expanded when there are too many\n collisions (i.e., keys that have distinct hash codes but fall into\n the same slot modulo the table size), with the expected average\n effect of maintaining roughly two bins per mapping (corresponding\n to a 0.75 load factor threshold for resizing). There may be much\n variance around this average as mappings are added and removed, but\n overall, this maintains a commonly accepted time/space tradeoff for\n hash tables.  However, resizing this or any other kind of hash\n table may be a relatively slow operation. When possible, it is a\n good idea to provide a size estimate as an optional \n initialCapacity constructor argument. An additional optional\n loadFactor constructor argument provides a further means of\n customizing initial table capacity by specifying the table density\n to be used in calculating the amount of space to allocate for the\n given number of elements.  Also, for compatibility with previous\n versions of this class, constructors may optionally specify an\n expected concurrencyLevel as an additional hint for\n internal sizing.  Note that using many keys with exactly the same\n hashCode() is a sure way to slow down performance of any\n hash table. To ameliorate impact, when keys are Comparable,\n this class may use comparison order among keys to help break ties.\n\n A Set projection of a ConcurrentHashMap may be created\n (using newKeySet() or newKeySet(int)), or viewed\n (using keySet(Object) when only keys are of interest, and the\n mapped values are (perhaps transiently) not used or all take the\n same mapping value.\n\n A ConcurrentHashMap can be used as a scalable frequency map (a\n form of histogram or multiset) by using LongAdder values and initializing via\n computeIfAbsent. For example, to add a count\n to a ConcurrentHashMap<String,LongAdder> freqs, you can use\n freqs.computeIfAbsent(key, k -> new LongAdder()).increment();\nThis class and its views and iterators implement all of the\n optional methods of the Map and Iterator\n interfaces.\n\n Like Hashtable but unlike HashMap, this class\n does not allow null to be used as a key or value.\n\n ConcurrentHashMaps support a set of sequential and parallel bulk\n operations that, unlike most Stream methods, are designed\n to be safely, and often sensibly, applied even with maps that are\n being concurrently updated by other threads; for example, when\n computing a snapshot summary of the values in a shared registry.\n There are three kinds of operation, each with four forms, accepting\n functions with keys, values, entries, and (key, value) pairs as\n arguments and/or return values. Because the elements of a\n ConcurrentHashMap are not ordered in any particular way, and may be\n processed in different orders in different parallel executions, the\n correctness of supplied functions should not depend on any\n ordering, or on any other objects or values that may transiently\n change while computation is in progress; and except for forEach\n actions, should ideally be side-effect-free. Bulk operations on\n Map.Entry objects do not support method setValue.\n\n \nforEach: Performs a given action on each element.\n A variant form applies a given transformation on each element\n before performing the action.\n\n search: Returns the first available non-null result of\n applying a given function on each element; skipping further\n search when a result is found.\n\n reduce: Accumulates each element.  The supplied reduction\n function cannot rely on ordering (more formally, it should be\n both associative and commutative).  There are five variants:\n\n \nPlain reductions. (There is not a form of this method for\n (key, value) function arguments since there is no corresponding\n return type.)\n\n Mapped reductions that accumulate the results of a given\n function applied to each element.\n\n Reductions to scalar doubles, longs, and ints, using a\n given basis value.\n\n \n\nThese bulk operations accept a parallelismThreshold\n argument. Methods proceed sequentially if the current map size is\n estimated to be less than the given threshold. Using a value of\n Long.MAX_VALUE suppresses all parallelism.  Using a value\n of 1 results in maximal parallelism by partitioning into\n enough subtasks to fully utilize the ForkJoinPool.commonPool() that is used for all parallel\n computations. Normally, you would initially choose one of these\n extreme values, and then measure performance of using in-between\n values that trade off overhead versus throughput.\n\n The concurrency properties of bulk operations follow\n from those of ConcurrentHashMap: Any non-null result returned\n from get(key) and related access methods bears a\n happens-before relation with the associated insertion or\n update.  The result of any bulk operation reflects the\n composition of these per-element relations (but is not\n necessarily atomic with respect to the map as a whole unless it\n is somehow known to be quiescent).  Conversely, because keys\n and values in the map are never null, null serves as a reliable\n atomic indicator of the current lack of any result.  To\n maintain this property, null serves as an implicit basis for\n all non-scalar reduction operations. For the double, long, and\n int versions, the basis should be one that, when combined with\n any other value, returns that other value (more formally, it\n should be the identity element for the reduction). Most common\n reductions have these properties; for example, computing a sum\n with basis 0 or a minimum with basis MAX_VALUE.\n\n Search and transformation functions provided as arguments\n should similarly return null to indicate the lack of any result\n (in which case it is not used). In the case of mapped\n reductions, this also enables transformations to serve as\n filters, returning null (or, in the case of primitive\n specializations, the identity basis) if the element should not\n be combined. You can create compound transformations and\n filterings by composing them yourself under this \"null means\n there is nothing there now\" rule before using them in search or\n reduce operations.\n\n Methods accepting and/or returning Entry arguments maintain\n key-value associations. They may be useful for example when\n finding the key for the greatest value. Note that \"plain\" Entry\n arguments can be supplied using new\n AbstractMap.SimpleEntry(k,v).\n\n Bulk operations may complete abruptly, throwing an\n exception encountered in the application of a supplied\n function. Bear in mind when handling such exceptions that other\n concurrently executing functions could also have thrown\n exceptions, or would have done so if the first exception had\n not occurred.\n\n Speedups for parallel compared to sequential forms are common\n but not guaranteed.  Parallel operations involving brief functions\n on small maps may execute more slowly than sequential forms if the\n underlying work to parallelize the computation is more expensive\n than the computation itself.  Similarly, parallelization may not\n lead to much actual parallelism if all processors are busy\n performing unrelated tasks.\n\n All arguments to all task methods must be non-null.\n\n This class is a member of the\n \n Java Collections Framework.", "codes": ["public class ConcurrentHashMap<K, V>\nextends AbstractMap<K, V>\nimplements ConcurrentMap<K, V>, Serializable"], "fields": [], "methods": [{"method_name": "get", "method_sig": "public V get (Object key)", "description": "Returns the value to which the specified key is mapped,\n or null if this map contains no mapping for the key.\n\n More formally, if this map contains a mapping from a key\n k to a value v such that key.equals(k),\n then this method returns v; otherwise it returns\n null.  (There can be at most one such mapping.)"}, {"method_name": "containsKey", "method_sig": "public boolean containsKey (Object key)", "description": "Tests if the specified object is a key in this table."}, {"method_name": "containsValue", "method_sig": "public boolean containsValue (Object value)", "description": "Returns true if this map maps one or more keys to the\n specified value. Note: This method may require a full traversal\n of the map, and is much slower than method containsKey."}, {"method_name": "put", "method_sig": "public V put (K key,\n             V value)", "description": "Maps the specified key to the specified value in this table.\n Neither the key nor the value can be null.\n\n The value can be retrieved by calling the get method\n with a key that is equal to the original key."}, {"method_name": "putAll", "method_sig": "public void putAll (Map<? extends K, ? extends V> m)", "description": "Copies all of the mappings from the specified map to this one.\n These mappings replace any mappings that this map had for any of the\n keys currently in the specified map."}, {"method_name": "remove", "method_sig": "public V remove (Object key)", "description": "Removes the key (and its corresponding value) from this map.\n This method does nothing if the key is not in the map."}, {"method_name": "clear", "method_sig": "public void clear()", "description": "Removes all of the mappings from this map."}, {"method_name": "keySet", "method_sig": "public ConcurrentHashMap.KeySetView<K, V> keySet()", "description": "Returns a Set view of the keys contained in this map.\n The set is backed by the map, so changes to the map are\n reflected in the set, and vice-versa. The set supports element\n removal, which removes the corresponding mapping from this map,\n via the Iterator.remove, Set.remove,\n removeAll, retainAll, and clear\n operations.  It does not support the add or\n addAll operations.\n\n The view's iterators and spliterators are\n weakly consistent.\n\n The view's spliterator reports Spliterator.CONCURRENT,\n Spliterator.DISTINCT, and Spliterator.NONNULL."}, {"method_name": "values", "method_sig": "public Collection<V> values()", "description": "Returns a Collection view of the values contained in this map.\n The collection is backed by the map, so changes to the map are\n reflected in the collection, and vice-versa.  The collection\n supports element removal, which removes the corresponding\n mapping from this map, via the Iterator.remove,\n Collection.remove, removeAll,\n retainAll, and clear operations.  It does not\n support the add or addAll operations.\n\n The view's iterators and spliterators are\n weakly consistent.\n\n The view's spliterator reports Spliterator.CONCURRENT\n and Spliterator.NONNULL."}, {"method_name": "entrySet", "method_sig": "public Set<Map.Entry<K, V>> entrySet()", "description": "Returns a Set view of the mappings contained in this map.\n The set is backed by the map, so changes to the map are\n reflected in the set, and vice-versa.  The set supports element\n removal, which removes the corresponding mapping from the map,\n via the Iterator.remove, Set.remove,\n removeAll, retainAll, and clear\n operations.\n\n The view's iterators and spliterators are\n weakly consistent.\n\n The view's spliterator reports Spliterator.CONCURRENT,\n Spliterator.DISTINCT, and Spliterator.NONNULL."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Returns the hash code value for this Map, i.e.,\n the sum of, for each key-value pair in the map,\n key.hashCode() ^ value.hashCode()."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a string representation of this map.  The string\n representation consists of a list of key-value mappings (in no\n particular order) enclosed in braces (\"{}\").  Adjacent\n mappings are separated by the characters \", \" (comma\n and space).  Each key-value mapping is rendered as the key\n followed by an equals sign (\"=\") followed by the\n associated value."}, {"method_name": "equals", "method_sig": "public boolean equals (Object o)", "description": "Compares the specified object with this map for equality.\n Returns true if the given object is a map with the same\n mappings as this map.  This operation may return misleading\n results if either map is concurrently modified during execution\n of this method."}, {"method_name": "putIfAbsent", "method_sig": "public V putIfAbsent (K key,\n                     V value)", "description": "If the specified key is not already associated\n with a value, associates it with the given value.\n This is equivalent to, for this map:\n  \n if (!map.containsKey(key))\n   return map.put(key, value);\n else\n   return map.get(key);\n\n except that the action is performed atomically."}, {"method_name": "remove", "method_sig": "public boolean remove (Object key,\n                      Object value)", "description": "Removes the entry for a key only if currently mapped to a given value.\n This is equivalent to, for this map:\n  \n if (map.containsKey(key)\n     && Objects.equals(map.get(key), value)) {\n   map.remove(key);\n   return true;\n } else {\n   return false;\n }\n\n except that the action is performed atomically."}, {"method_name": "replace", "method_sig": "public boolean replace (K key,\n                       V oldValue,\n                       V newValue)", "description": "Replaces the entry for a key only if currently mapped to a given value.\n This is equivalent to, for this map:\n  \n if (map.containsKey(key)\n     && Objects.equals(map.get(key), oldValue)) {\n   map.put(key, newValue);\n   return true;\n } else {\n   return false;\n }\n\n except that the action is performed atomically."}, {"method_name": "replace", "method_sig": "public V replace (K key,\n                 V value)", "description": "Replaces the entry for a key only if currently mapped to some value.\n This is equivalent to, for this map:\n  \n if (map.containsKey(key))\n   return map.put(key, value);\n else\n   return null;\n\n except that the action is performed atomically."}, {"method_name": "getOrDefault", "method_sig": "public V getOrDefault (Object key,\n                      V defaultValue)", "description": "Returns the value to which the specified key is mapped, or the\n given default value if this map contains no mapping for the\n key."}, {"method_name": "computeIfAbsent", "method_sig": "public V computeIfAbsent (K key,\n                         Function<? super K, ? extends V> mappingFunction)", "description": "If the specified key is not already associated with a value,\n attempts to compute its value using the given mapping function\n and enters it into this map unless null.  The entire\n method invocation is performed atomically, so the function is\n applied at most once per key.  Some attempted update operations\n on this map by other threads may be blocked while computation\n is in progress, so the computation should be short and simple,\n and must not attempt to update any other mappings of this map."}, {"method_name": "computeIfPresent", "method_sig": "public V computeIfPresent (K key,\n                          BiFunction<? super K, ? super V, ? extends V> remappingFunction)", "description": "If the value for the specified key is present, attempts to\n compute a new mapping given the key and its current mapped\n value.  The entire method invocation is performed atomically.\n Some attempted update operations on this map by other threads\n may be blocked while computation is in progress, so the\n computation should be short and simple, and must not attempt to\n update any other mappings of this map."}, {"method_name": "compute", "method_sig": "public V compute (K key,\n                 BiFunction<? super K, ? super V, ? extends V> remappingFunction)", "description": "Attempts to compute a mapping for the specified key and its\n current mapped value (or null if there is no current\n mapping). The entire method invocation is performed atomically.\n Some attempted update operations on this map by other threads\n may be blocked while computation is in progress, so the\n computation should be short and simple, and must not attempt to\n update any other mappings of this Map."}, {"method_name": "merge", "method_sig": "public V merge (K key,\n               V value,\n               BiFunction<? super V, ? super V, ? extends V> remappingFunction)", "description": "If the specified key is not already associated with a\n (non-null) value, associates it with the given value.\n Otherwise, replaces the value with the results of the given\n remapping function, or removes if null. The entire\n method invocation is performed atomically.  Some attempted\n update operations on this map by other threads may be blocked\n while computation is in progress, so the computation should be\n short and simple, and must not attempt to update any other\n mappings of this Map."}, {"method_name": "contains", "method_sig": "public boolean contains (Object value)", "description": "Tests if some key maps into the specified value in this table.\n\n Note that this method is identical in functionality to\n containsValue(Object), and exists solely to ensure\n full compatibility with class Hashtable,\n which supported this method prior to introduction of the\n Java Collections Framework."}, {"method_name": "keys", "method_sig": "public Enumeration<K> keys()", "description": "Returns an enumeration of the keys in this table."}, {"method_name": "elements", "method_sig": "public Enumeration<V> elements()", "description": "Returns an enumeration of the values in this table."}, {"method_name": "mappingCount", "method_sig": "public long mappingCount()", "description": "Returns the number of mappings. This method should be used\n instead of Map.size() because a ConcurrentHashMap may\n contain more mappings than can be represented as an int. The\n value returned is an estimate; the actual count may differ if\n there are concurrent insertions or removals."}, {"method_name": "newKeySet", "method_sig": "public static <K> ConcurrentHashMap.KeySetView<K, Boolean> newKeySet()", "description": "Creates a new Set backed by a ConcurrentHashMap\n from the given type to Boolean.TRUE."}, {"method_name": "newKeySet", "method_sig": "public static <K> ConcurrentHashMap.KeySetView<K, Boolean> newKeySet (int initialCapacity)", "description": "Creates a new Set backed by a ConcurrentHashMap\n from the given type to Boolean.TRUE."}, {"method_name": "keySet", "method_sig": "public ConcurrentHashMap.KeySetView<K, V> keySet (V mappedValue)", "description": "Returns a Set view of the keys in this map, using the\n given common mapped value for any additions (i.e., Collection.add(E) and Collection.addAll(Collection)).\n This is of course only appropriate if it is acceptable to use\n the same value for all additions from this view."}, {"method_name": "forEach", "method_sig": "public void forEach (long parallelismThreshold,\n                    BiConsumer<? super K, ? super V> action)", "description": "Performs the given action for each (key, value)."}, {"method_name": "forEach", "method_sig": "public <U> void forEach (long parallelismThreshold,\n                        BiFunction<? super K, ? super V, ? extends U> transformer,\n                        Consumer<? super U> action)", "description": "Performs the given action for each non-null transformation\n of each (key, value)."}, {"method_name": "search", "method_sig": "public <U> U search (long parallelismThreshold,\n                    BiFunction<? super K, ? super V, ? extends U> searchFunction)", "description": "Returns a non-null result from applying the given search\n function on each (key, value), or null if none.  Upon\n success, further element processing is suppressed and the\n results of any other parallel invocations of the search\n function are ignored."}, {"method_name": "reduce", "method_sig": "public <U> U reduce (long parallelismThreshold,\n                    BiFunction<? super K, ? super V, ? extends U> transformer,\n                    BiFunction<? super U, ? super U, ? extends U> reducer)", "description": "Returns the result of accumulating the given transformation\n of all (key, value) pairs using the given reducer to\n combine values, or null if none."}, {"method_name": "reduceToDouble", "method_sig": "public double reduceToDouble (long parallelismThreshold,\n                             ToDoubleBiFunction<? super K, ? super V> transformer,\n                             double basis,\n                             DoubleBinaryOperator reducer)", "description": "Returns the result of accumulating the given transformation\n of all (key, value) pairs using the given reducer to\n combine values, and the given basis as an identity value."}, {"method_name": "reduceToLong", "method_sig": "public long reduceToLong (long parallelismThreshold,\n                         ToLongBiFunction<? super K, ? super V> transformer,\n                         long basis,\n                         LongBinaryOperator reducer)", "description": "Returns the result of accumulating the given transformation\n of all (key, value) pairs using the given reducer to\n combine values, and the given basis as an identity value."}, {"method_name": "reduceToInt", "method_sig": "public int reduceToInt (long parallelismThreshold,\n                       ToIntBiFunction<? super K, ? super V> transformer,\n                       int basis,\n                       IntBinaryOperator reducer)", "description": "Returns the result of accumulating the given transformation\n of all (key, value) pairs using the given reducer to\n combine values, and the given basis as an identity value."}, {"method_name": "forEachKey", "method_sig": "public void forEachKey (long parallelismThreshold,\n                       Consumer<? super K> action)", "description": "Performs the given action for each key."}, {"method_name": "forEachKey", "method_sig": "public <U> void forEachKey (long parallelismThreshold,\n                           Function<? super K, ? extends U> transformer,\n                           Consumer<? super U> action)", "description": "Performs the given action for each non-null transformation\n of each key."}, {"method_name": "searchKeys", "method_sig": "public <U> U searchKeys (long parallelismThreshold,\n                        Function<? super K, ? extends U> searchFunction)", "description": "Returns a non-null result from applying the given search\n function on each key, or null if none. Upon success,\n further element processing is suppressed and the results of\n any other parallel invocations of the search function are\n ignored."}, {"method_name": "reduceKeys", "method_sig": "public K reduceKeys (long parallelismThreshold,\n                    BiFunction<? super K, ? super K, ? extends K> reducer)", "description": "Returns the result of accumulating all keys using the given\n reducer to combine values, or null if none."}, {"method_name": "reduceKeys", "method_sig": "public <U> U reduceKeys (long parallelismThreshold,\n                        Function<? super K, ? extends U> transformer,\n                        BiFunction<? super U, ? super U, ? extends U> reducer)", "description": "Returns the result of accumulating the given transformation\n of all keys using the given reducer to combine values, or\n null if none."}, {"method_name": "reduceKeysToDouble", "method_sig": "public double reduceKeysToDouble (long parallelismThreshold,\n                                 ToDoubleFunction<? super K> transformer,\n                                 double basis,\n                                 DoubleBinaryOperator reducer)", "description": "Returns the result of accumulating the given transformation\n of all keys using the given reducer to combine values, and\n the given basis as an identity value."}, {"method_name": "reduceKeysToLong", "method_sig": "public long reduceKeysToLong (long parallelismThreshold,\n                             ToLongFunction<? super K> transformer,\n                             long basis,\n                             LongBinaryOperator reducer)", "description": "Returns the result of accumulating the given transformation\n of all keys using the given reducer to combine values, and\n the given basis as an identity value."}, {"method_name": "reduceKeysToInt", "method_sig": "public int reduceKeysToInt (long parallelismThreshold,\n                           ToIntFunction<? super K> transformer,\n                           int basis,\n                           IntBinaryOperator reducer)", "description": "Returns the result of accumulating the given transformation\n of all keys using the given reducer to combine values, and\n the given basis as an identity value."}, {"method_name": "forEachValue", "method_sig": "public void forEachValue (long parallelismThreshold,\n                         Consumer<? super V> action)", "description": "Performs the given action for each value."}, {"method_name": "forEachValue", "method_sig": "public <U> void forEachValue (long parallelismThreshold,\n                             Function<? super V, ? extends U> transformer,\n                             Consumer<? super U> action)", "description": "Performs the given action for each non-null transformation\n of each value."}, {"method_name": "searchValues", "method_sig": "public <U> U searchValues (long parallelismThreshold,\n                          Function<? super V, ? extends U> searchFunction)", "description": "Returns a non-null result from applying the given search\n function on each value, or null if none.  Upon success,\n further element processing is suppressed and the results of\n any other parallel invocations of the search function are\n ignored."}, {"method_name": "reduceValues", "method_sig": "public V reduceValues (long parallelismThreshold,\n                      BiFunction<? super V, ? super V, ? extends V> reducer)", "description": "Returns the result of accumulating all values using the\n given reducer to combine values, or null if none."}, {"method_name": "reduceValues", "method_sig": "public <U> U reduceValues (long parallelismThreshold,\n                          Function<? super V, ? extends U> transformer,\n                          BiFunction<? super U, ? super U, ? extends U> reducer)", "description": "Returns the result of accumulating the given transformation\n of all values using the given reducer to combine values, or\n null if none."}, {"method_name": "reduceValuesToDouble", "method_sig": "public double reduceValuesToDouble (long parallelismThreshold,\n                                   ToDoubleFunction<? super V> transformer,\n                                   double basis,\n                                   DoubleBinaryOperator reducer)", "description": "Returns the result of accumulating the given transformation\n of all values using the given reducer to combine values,\n and the given basis as an identity value."}, {"method_name": "reduceValuesToLong", "method_sig": "public long reduceValuesToLong (long parallelismThreshold,\n                               ToLongFunction<? super V> transformer,\n                               long basis,\n                               LongBinaryOperator reducer)", "description": "Returns the result of accumulating the given transformation\n of all values using the given reducer to combine values,\n and the given basis as an identity value."}, {"method_name": "reduceValuesToInt", "method_sig": "public int reduceValuesToInt (long parallelismThreshold,\n                             ToIntFunction<? super V> transformer,\n                             int basis,\n                             IntBinaryOperator reducer)", "description": "Returns the result of accumulating the given transformation\n of all values using the given reducer to combine values,\n and the given basis as an identity value."}, {"method_name": "forEachEntry", "method_sig": "public void forEachEntry (long parallelismThreshold,\n                         Consumer<? super Map.Entry<K, V>> action)", "description": "Performs the given action for each entry."}, {"method_name": "forEachEntry", "method_sig": "public <U> void forEachEntry (long parallelismThreshold,\n                             Function<Map.Entry<K, V>, ? extends U> transformer,\n                             Consumer<? super U> action)", "description": "Performs the given action for each non-null transformation\n of each entry."}, {"method_name": "searchEntries", "method_sig": "public <U> U searchEntries (long parallelismThreshold,\n                           Function<Map.Entry<K, V>, ? extends U> searchFunction)", "description": "Returns a non-null result from applying the given search\n function on each entry, or null if none.  Upon success,\n further element processing is suppressed and the results of\n any other parallel invocations of the search function are\n ignored."}, {"method_name": "reduceEntries", "method_sig": "public Map.Entry<K, V> reduceEntries (long parallelismThreshold,\n                                          BiFunction<Map.Entry<K, V>, Map.Entry<K, V>, ? extends Map.Entry<K, V>> reducer)", "description": "Returns the result of accumulating all entries using the\n given reducer to combine values, or null if none."}, {"method_name": "reduceEntries", "method_sig": "public <U> U reduceEntries (long parallelismThreshold,\n                           Function<Map.Entry<K, V>, ? extends U> transformer,\n                           BiFunction<? super U, ? super U, ? extends U> reducer)", "description": "Returns the result of accumulating the given transformation\n of all entries using the given reducer to combine values,\n or null if none."}, {"method_name": "reduceEntriesToDouble", "method_sig": "public double reduceEntriesToDouble (long parallelismThreshold,\n                                    ToDoubleFunction<Map.Entry<K, V>> transformer,\n                                    double basis,\n                                    DoubleBinaryOperator reducer)", "description": "Returns the result of accumulating the given transformation\n of all entries using the given reducer to combine values,\n and the given basis as an identity value."}, {"method_name": "reduceEntriesToLong", "method_sig": "public long reduceEntriesToLong (long parallelismThreshold,\n                                ToLongFunction<Map.Entry<K, V>> transformer,\n                                long basis,\n                                LongBinaryOperator reducer)", "description": "Returns the result of accumulating the given transformation\n of all entries using the given reducer to combine values,\n and the given basis as an identity value."}, {"method_name": "reduceEntriesToInt", "method_sig": "public int reduceEntriesToInt (long parallelismThreshold,\n                              ToIntFunction<Map.Entry<K, V>> transformer,\n                              int basis,\n                              IntBinaryOperator reducer)", "description": "Returns the result of accumulating the given transformation\n of all entries using the given reducer to combine values,\n and the given basis as an identity value."}]}