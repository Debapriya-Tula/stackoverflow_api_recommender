{"name": "Interface TableModel", "module": "java.desktop", "package": "javax.swing.table", "text": "The TableModel interface specifies the methods the\n  JTable will use to interrogate a tabular data model. \n\n  The JTable can be set up to display any data\n  model which implements the\n  TableModel interface with a couple of lines of code:\n  \n      TableModel myData = new MyTableModel();\n      JTable table = new JTable(myData);\n  \n\n For further documentation, see Creating a Table Model\n in The Java Tutorial.", "codes": ["public interface TableModel"], "fields": [], "methods": [{"method_name": "getRowCount", "method_sig": "int getRowCount()", "description": "Returns the number of rows in the model. A\n JTable uses this method to determine how many rows it\n should display.  This method should be quick, as it\n is called frequently during rendering."}, {"method_name": "getColumnCount", "method_sig": "int getColumnCount()", "description": "Returns the number of columns in the model. A\n JTable uses this method to determine how many columns it\n should create and display by default."}, {"method_name": "getColumnName", "method_sig": "String getColumnName (int columnIndex)", "description": "Returns the name of the column at columnIndex.  This is used\n to initialize the table's column header name.  Note: this name does\n not need to be unique; two columns in a table can have the same name."}, {"method_name": "getColumnClass", "method_sig": "Class<?> getColumnClass (int columnIndex)", "description": "Returns the most specific superclass for all the cell values\n in the column.  This is used by the JTable to set up a\n default renderer and editor for the column."}, {"method_name": "isCellEditable", "method_sig": "boolean isCellEditable (int rowIndex,\n                       int columnIndex)", "description": "Returns true if the cell at rowIndex and\n columnIndex\n is editable.  Otherwise, setValueAt on the cell will not\n change the value of that cell."}, {"method_name": "getValueAt", "method_sig": "Object getValueAt (int rowIndex,\n                  int columnIndex)", "description": "Returns the value for the cell at columnIndex and\n rowIndex."}, {"method_name": "setValueAt", "method_sig": "void setValueAt (Object aValue,\n                int rowIndex,\n                int columnIndex)", "description": "Sets the value in the cell at columnIndex and\n rowIndex to aValue."}, {"method_name": "addTableModelListener", "method_sig": "void addTableModelListener (TableModelListener l)", "description": "Adds a listener to the list that is notified each time a change\n to the data model occurs."}, {"method_name": "removeTableModelListener", "method_sig": "void removeTableModelListener (TableModelListener l)", "description": "Removes a listener from the list that is notified each time a\n change to the data model occurs."}]}