{"name": "Interface XMLEvent", "module": "java.xml", "package": "javax.xml.stream.events", "text": "This is the base event interface for handling markup events.\n Events are value objects that are used to communicate the\n XML 1.0 InfoSet to the Application.  Events may be cached\n and referenced after the parse has completed.", "codes": ["public interface XMLEvent\nextends XMLStreamConstants"], "fields": [], "methods": [{"method_name": "getEventType", "method_sig": "int getEventType()", "description": "Returns an integer code for this event."}, {"method_name": "getLocation", "method_sig": "Location getLocation()", "description": "Return the location of this event.  The Location\n returned from this method is non-volatile and\n will retain its information."}, {"method_name": "isStartElement", "method_sig": "boolean isStartElement()", "description": "A utility function to check if this event is a StartElement."}, {"method_name": "isAttribute", "method_sig": "boolean isAttribute()", "description": "A utility function to check if this event is an Attribute."}, {"method_name": "isNamespace", "method_sig": "boolean isNamespace()", "description": "A utility function to check if this event is a Namespace."}, {"method_name": "isEndElement", "method_sig": "boolean isEndElement()", "description": "A utility function to check if this event is a EndElement."}, {"method_name": "isEntityReference", "method_sig": "boolean isEntityReference()", "description": "A utility function to check if this event is an EntityReference."}, {"method_name": "isProcessingInstruction", "method_sig": "boolean isProcessingInstruction()", "description": "A utility function to check if this event is a ProcessingInstruction."}, {"method_name": "isCharacters", "method_sig": "boolean isCharacters()", "description": "A utility function to check if this event is Characters."}, {"method_name": "isStartDocument", "method_sig": "boolean isStartDocument()", "description": "A utility function to check if this event is a StartDocument."}, {"method_name": "isEndDocument", "method_sig": "boolean isEndDocument()", "description": "A utility function to check if this event is an EndDocument."}, {"method_name": "asStartElement", "method_sig": "StartElement asStartElement()", "description": "Returns this event as a start element event, may result in\n a class cast exception if this event is not a start element."}, {"method_name": "asEndElement", "method_sig": "EndElement asEndElement()", "description": "Returns this event as an end  element event, may result in\n a class cast exception if this event is not a end element."}, {"method_name": "asCharacters", "method_sig": "Characters asCharacters()", "description": "Returns this event as Characters, may result in\n a class cast exception if this event is not Characters."}, {"method_name": "getSchemaType", "method_sig": "QName getSchemaType()", "description": "This method is provided for implementations to provide\n optional type information about the associated event.\n It is optional and will return null if no information\n is available."}, {"method_name": "writeAsEncodedUnicode", "method_sig": "void writeAsEncodedUnicode (Writer writer)\n                    throws XMLStreamException", "description": "This method will write the XMLEvent as per the XML 1.0 specification as Unicode characters.\n No indentation or whitespace should be outputted.\n\n Any user defined event type SHALL have this method\n called when being written to on an output stream.\n Built in Event types MUST implement this method,\n but implementations MAY choose not call these methods\n for optimizations reasons when writing out built in\n Events to an output stream.\n The output generated MUST be equivalent in terms of the\n infoset expressed."}]}