{"name": "Class DocTreeScanner<R,\u200bP>", "module": "jdk.compiler", "package": "com.sun.source.util", "text": "A TreeVisitor that visits all the child tree nodes.\n To visit nodes of a particular type, just override the\n corresponding visitXYZ method.\n Inside your method, call super.visitXYZ to visit descendant\n nodes.\n\n The default implementation of the visitXYZ methods will determine\n a result as follows:\n \nIf the node being visited has no children, the result will be null.\n If the node being visited has one child, the result will be the\n result of calling scan on that child. The child may be a simple node\n or itself a list of nodes.\n  If the node being visited has more than one child, the result will\n be determined by calling scan each child in turn, and then combining the\n result of each scan after the first with the cumulative result\n so far, as determined by the reduce(R, R) method. Each child may be either\n a simple node of a list of nodes. The default behavior of the reduce\n method is such that the result of the visitXYZ method will be the result of\n the last child scanned.\n \nHere is an example to count the number of erroneous nodes in a tree:\n \n   class CountErrors extends DocTreeScanner<Integer,Void> {\n      @Override\n      public Integer visitErroneous(ErroneousTree node, Void p) {\n          return 1;\n      }\n      @Override\n      public Integer reduce(Integer r1, Integer r2) {\n          return (r1 == null ? 0 : r1) + (r2 == null ? 0 : r2);\n      }\n   }\n ", "codes": ["public class DocTreeScanner<R, P>\nextends Object\nimplements DocTreeVisitor<R, P>"], "fields": [], "methods": [{"method_name": "scan", "method_sig": "public R scan (DocTree node,\n              P p)", "description": "Scans a single node."}, {"method_name": "scan", "method_sig": "public R scan (Iterable<? extends DocTree> nodes,\n              P p)", "description": "Scans a sequence of nodes."}, {"method_name": "reduce", "method_sig": "public R reduce (R r1,\n                R r2)", "description": "Reduces two results into a combined result.\n The default implementation is to return the first parameter.\n The general contract of the method is that it may take any action whatsoever."}, {"method_name": "visitAttribute", "method_sig": "public R visitAttribute (AttributeTree node,\n                        P p)", "description": "Visits an AttributeTree node. This implementation returns null."}, {"method_name": "visitAuthor", "method_sig": "public R visitAuthor (AuthorTree node,\n                     P p)", "description": "Visits an AuthorTree node. This implementation scans the children in left to right order."}, {"method_name": "visitComment", "method_sig": "public R visitComment (CommentTree node,\n                      P p)", "description": "Visits a CommentTree node. This implementation returns null."}, {"method_name": "visitDeprecated", "method_sig": "public R visitDeprecated (DeprecatedTree node,\n                         P p)", "description": "Visits a DeprecatedTree node. This implementation scans the children in left to right order."}, {"method_name": "visitDocComment", "method_sig": "public R visitDocComment (DocCommentTree node,\n                         P p)", "description": "Visits a DocCommentTree node. This implementation scans the children in left to right order."}, {"method_name": "visitDocRoot", "method_sig": "public R visitDocRoot (DocRootTree node,\n                      P p)", "description": "Visits a DocRootTree node. This implementation returns null."}, {"method_name": "visitDocType", "method_sig": "public R visitDocType (DocTypeTree node,\n                      P p)", "description": "Visits a DocTypeTree node. This implementation returns null."}, {"method_name": "visitEndElement", "method_sig": "public R visitEndElement (EndElementTree node,\n                         P p)", "description": "Visits an EndElementTree node. This implementation returns null."}, {"method_name": "visitEntity", "method_sig": "public R visitEntity (EntityTree node,\n                     P p)", "description": "Visits an EntityTree node. This implementation returns null."}, {"method_name": "visitErroneous", "method_sig": "public R visitErroneous (ErroneousTree node,\n                        P p)", "description": "Visits an ErroneousTree node. This implementation returns null."}, {"method_name": "visitHidden", "method_sig": "public R visitHidden (HiddenTree node,\n                     P p)", "description": "Visits a HiddenTree node. This implementation scans the children in left to right order."}, {"method_name": "visitIdentifier", "method_sig": "public R visitIdentifier (IdentifierTree node,\n                         P p)", "description": "Visits an IdentifierTree node. This implementation returns null."}, {"method_name": "visitIndex", "method_sig": "public R visitIndex (IndexTree node,\n                    P p)", "description": "Visits an IndexTree node. This implementation returns null."}, {"method_name": "visitInheritDoc", "method_sig": "public R visitInheritDoc (InheritDocTree node,\n                         P p)", "description": "Visits an InheritDocTree node. This implementation returns null."}, {"method_name": "visitLink", "method_sig": "public R visitLink (LinkTree node,\n                   P p)", "description": "Visits a LinkTree node. This implementation scans the children in left to right order."}, {"method_name": "visitLiteral", "method_sig": "public R visitLiteral (LiteralTree node,\n                      P p)", "description": "Visits an LiteralTree node. This implementation returns null."}, {"method_name": "visitParam", "method_sig": "public R visitParam (ParamTree node,\n                    P p)", "description": "Visits a ParamTree node. This implementation scans the children in left to right order."}, {"method_name": "visitProvides", "method_sig": "public R visitProvides (ProvidesTree node,\n                       P p)", "description": "Visits a ProvidesTree node. This implementation scans the children in left to right order."}, {"method_name": "visitReference", "method_sig": "public R visitReference (ReferenceTree node,\n                        P p)", "description": "Visits a ReferenceTree node. This implementation returns null."}, {"method_name": "visitReturn", "method_sig": "public R visitReturn (ReturnTree node,\n                     P p)", "description": "Visits a ReturnTree node. This implementation scans the children in left to right order."}, {"method_name": "visitSee", "method_sig": "public R visitSee (SeeTree node,\n                  P p)", "description": "Visits a SeeTree node. This implementation scans the children in left to right order."}, {"method_name": "visitSerial", "method_sig": "public R visitSerial (SerialTree node,\n                     P p)", "description": "Visits a SerialTree node. This implementation scans the children in left to right order."}, {"method_name": "visitSerialData", "method_sig": "public R visitSerialData (SerialDataTree node,\n                         P p)", "description": "Visits a SerialDataTree node. This implementation scans the children in left to right order."}, {"method_name": "visitSerialField", "method_sig": "public R visitSerialField (SerialFieldTree node,\n                          P p)", "description": "Visits a SerialFieldTree node. This implementation scans the children in left to right order."}, {"method_name": "visitSince", "method_sig": "public R visitSince (SinceTree node,\n                    P p)", "description": "Visits a SinceTree node. This implementation scans the children in left to right order."}, {"method_name": "visitStartElement", "method_sig": "public R visitStartElement (StartElementTree node,\n                           P p)", "description": "Visits a StartElementTree node. This implementation scans the children in left to right order."}, {"method_name": "visitSummary", "method_sig": "public R visitSummary (SummaryTree node,\n                      P p)", "description": "Visits a SummaryTree node. This implementation scans the children in left to right order."}, {"method_name": "visitText", "method_sig": "public R visitText (TextTree node,\n                   P p)", "description": "Visits a TextTree node. This implementation returns null."}, {"method_name": "visitThrows", "method_sig": "public R visitThrows (ThrowsTree node,\n                     P p)", "description": "Visits a ThrowsTree node. This implementation scans the children in left to right order."}, {"method_name": "visitUnknownBlockTag", "method_sig": "public R visitUnknownBlockTag (UnknownBlockTagTree node,\n                              P p)", "description": "Visits an UnknownBlockTagTree node. This implementation scans the children in left to right order."}, {"method_name": "visitUnknownInlineTag", "method_sig": "public R visitUnknownInlineTag (UnknownInlineTagTree node,\n                               P p)", "description": "Visits an UnknownInlineTagTree node. This implementation scans the children in left to right order."}, {"method_name": "visitUses", "method_sig": "public R visitUses (UsesTree node,\n                   P p)", "description": "Visits a UsesTree node. This implementation scans the children in left to right order."}, {"method_name": "visitValue", "method_sig": "public R visitValue (ValueTree node,\n                    P p)", "description": "Visits a ValueTree node. This implementation scans the children in left to right order."}, {"method_name": "visitVersion", "method_sig": "public R visitVersion (VersionTree node,\n                      P p)", "description": "Visits a VersionTreeTree node. This implementation scans the children in left to right order."}, {"method_name": "visitOther", "method_sig": "public R visitOther (DocTree node,\n                    P p)", "description": "Visits an unknown type of DocTree node.\n This can occur if the set of tags evolves and new kinds\n of nodes are added to the DocTree hierarchy. This implementation returns null."}]}