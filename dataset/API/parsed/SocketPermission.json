{"name": "Class SocketPermission", "module": "java.base", "package": "java.net", "text": "This class represents access to a network via sockets.\n A SocketPermission consists of a\n host specification and a set of \"actions\" specifying ways to\n connect to that host. The host is specified as\n \n    host = (hostname | IPv4address | iPv6reference) [:portrange]\n    portrange = portnumber | -portnumber | portnumber-[portnumber]\n \n The host is expressed as a DNS name, as a numerical IP address,\n or as \"localhost\" (for the local machine).\n The wildcard \"*\" may be included once in a DNS name host\n specification. If it is included, it must be in the leftmost\n position, as in \"*.sun.com\".\n \n The format of the IPv6reference should follow that specified in RFC\u00a02732: Format\n for Literal IPv6 Addresses in URLs:\n \n    ipv6reference = \"[\" IPv6address \"]\"\n\n For example, you can construct a SocketPermission instance\n as the following:\n \n    String hostAddress = inetaddress.getHostAddress();\n    if (inetaddress instanceof Inet6Address) {\n        sp = new SocketPermission(\"[\" + hostAddress + \"]:\" + port, action);\n    } else {\n        sp = new SocketPermission(hostAddress + \":\" + port, action);\n    }\n \n or\n \n    String host = url.getHost();\n    sp = new SocketPermission(host + \":\" + port, action);\n \n\n The full uncompressed form of\n an IPv6 literal address is also valid.\n \n The port or portrange is optional. A port specification of the\n form \"N-\", where N is a port number, signifies all ports\n numbered N and above, while a specification of the\n form \"-N\" indicates all ports numbered N and below.\n The special port value 0 refers to the entire ephemeral\n port range. This is a fixed range of ports a system may use to\n allocate dynamic ports from. The actual range may be system dependent.\n \n The possible ways to connect to the host are\n \n accept\n connect\n listen\n resolve\n \n The \"listen\" action is only meaningful when used with \"localhost\" and\n means the ability to bind to a specified port.\n The \"resolve\" action is implied when any of the other actions are present.\n The action \"resolve\" refers to host/ip name service lookups.\n \n The actions string is converted to lowercase before processing.\n As an example of the creation and meaning of SocketPermissions,\n note that if the following permission:\n\n \n   p1 = new SocketPermission(\"puffin.eng.sun.com:7777\", \"connect,accept\");\n \n\n is granted to some code, it allows that code to connect to port 7777 on\n puffin.eng.sun.com, and to accept connections on that port.\n\n Similarly, if the following permission:\n\n \n   p2 = new SocketPermission(\"localhost:1024-\", \"accept,connect,listen\");\n \n\n is granted to some code, it allows that code to\n accept connections on, connect to, or listen on any port between\n 1024 and 65535 on the local host.\n\n Note: Granting code permission to accept or make connections to remote\n hosts may be dangerous because malevolent code can then more easily\n transfer and share confidential data among parties who may not\n otherwise have access to the data.", "codes": ["public final class SocketPermission\nextends Permission\nimplements Serializable"], "fields": [], "methods": [{"method_name": "implies", "method_sig": "public boolean implies (Permission p)", "description": "Checks if this socket permission object \"implies\" the\n specified permission.\n \n More specifically, this method first ensures that all of the following\n are true (and returns false if any of them are not):\n \n p is an instanceof SocketPermission,\n  p's actions are a proper subset of this\n object's actions, and\n  p's port range is included in this port range. Note:\n port range is ignored when p only contains the action, 'resolve'.\n \n\n Then implies checks each of the following, in order,\n and for each returns true if the stated condition is true:\n \n If this object was initialized with a single IP address and one of p's\n IP addresses is equal to this object's IP address.\n If this object is a wildcard domain (such as *.sun.com), and\n p's canonical name (the name without any preceding *)\n ends with this object's canonical host name. For example, *.sun.com\n implies *.eng.sun.com.\n If this object was not initialized with a single IP address, and one of this\n object's IP addresses equals one of p's IP addresses.\n If this canonical name equals p's canonical name.\n \n\n If none of the above are true, implies returns false."}, {"method_name": "equals", "method_sig": "public boolean equals (Object obj)", "description": "Checks two SocketPermission objects for equality."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Returns the hash code value for this object."}, {"method_name": "getActions", "method_sig": "public String getActions()", "description": "Returns the canonical string representation of the actions.\n Always returns present actions in the following order:\n connect, listen, accept, resolve."}, {"method_name": "newPermissionCollection", "method_sig": "public PermissionCollection newPermissionCollection()", "description": "Returns a new PermissionCollection object for storing SocketPermission\n objects.\n \n SocketPermission objects must be stored in a manner that allows them\n to be inserted into the collection in any order, but that also enables the\n PermissionCollection implies\n method to be implemented in an efficient (and consistent) manner."}]}