{"name": "Class CertPathBuilder", "module": "java.base", "package": "java.security.cert", "text": "A class for building certification paths (also known as certificate chains).\n \n This class uses a provider-based architecture.\n To create a CertPathBuilder, call\n one of the static getInstance methods, passing in the\n algorithm name of the CertPathBuilder desired and optionally\n the name of the provider desired.\n\n Once a CertPathBuilder object has been created, certification\n paths can be constructed by calling the build method and\n passing it an algorithm-specific set of parameters. If successful, the\n result (including the CertPath that was built) is returned\n in an object that implements the CertPathBuilderResult\n interface.\n\n The getRevocationChecker() method allows an application to specify\n additional algorithm-specific parameters and options used by the\n CertPathBuilder when checking the revocation status of certificates.\n Here is an example demonstrating how it is used with the PKIX algorithm:\n\n \n CertPathBuilder cpb = CertPathBuilder.getInstance(\"PKIX\");\n PKIXRevocationChecker rc = (PKIXRevocationChecker)cpb.getRevocationChecker();\n rc.setOptions(EnumSet.of(Option.PREFER_CRLS));\n params.addCertPathChecker(rc);\n CertPathBuilderResult cpbr = cpb.build(params);\n \nEvery implementation of the Java platform is required to support the\n following standard CertPathBuilder algorithm:\n \nPKIX\n\n This algorithm is described in the \n CertPathBuilder section of the\n Java Security Standard Algorithm Names Specification.\n Consult the release documentation for your implementation to see if any\n other algorithms are supported.\n\n \nConcurrent Access\n\n The static methods of this class are guaranteed to be thread-safe.\n Multiple threads may concurrently invoke the static methods defined in\n this class with no ill effects.\n \n However, this is not true for the non-static methods defined by this class.\n Unless otherwise documented by a specific provider, threads that need to\n access a single CertPathBuilder instance concurrently should\n synchronize amongst themselves and provide the necessary locking. Multiple\n threads each manipulating a different CertPathBuilder instance\n need not synchronize.", "codes": ["public class CertPathBuilder\nextends Object"], "fields": [], "methods": [{"method_name": "getInstance", "method_sig": "public static CertPathBuilder getInstance (String algorithm)\n                                   throws NoSuchAlgorithmException", "description": "Returns a CertPathBuilder object that implements the\n specified algorithm.\n\n  This method traverses the list of registered security Providers,\n starting with the most preferred Provider.\n A new CertPathBuilder object encapsulating the\n CertPathBuilderSpi implementation from the first\n Provider that supports the specified algorithm is returned.\n\n  Note that the list of registered providers may be retrieved via\n the Security.getProviders() method."}, {"method_name": "getInstance", "method_sig": "public static CertPathBuilder getInstance (String algorithm,\n                                          String provider)\n                                   throws NoSuchAlgorithmException,\n                                          NoSuchProviderException", "description": "Returns a CertPathBuilder object that implements the\n specified algorithm.\n\n  A new CertPathBuilder object encapsulating the\n CertPathBuilderSpi implementation from the specified provider\n is returned.  The specified provider must be registered\n in the security provider list.\n\n  Note that the list of registered providers may be retrieved via\n the Security.getProviders() method."}, {"method_name": "getInstance", "method_sig": "public static CertPathBuilder getInstance (String algorithm,\n                                          Provider provider)\n                                   throws NoSuchAlgorithmException", "description": "Returns a CertPathBuilder object that implements the\n specified algorithm.\n\n  A new CertPathBuilder object encapsulating the\n CertPathBuilderSpi implementation from the specified Provider\n object is returned.  Note that the specified Provider object\n does not have to be registered in the provider list."}, {"method_name": "getProvider", "method_sig": "public final Provider getProvider()", "description": "Returns the provider of this CertPathBuilder."}, {"method_name": "getAlgorithm", "method_sig": "public final String getAlgorithm()", "description": "Returns the name of the algorithm of this CertPathBuilder."}, {"method_name": "build", "method_sig": "public final CertPathBuilderResult build (CertPathParameters params)\n                                  throws CertPathBuilderException,\n                                         InvalidAlgorithmParameterException", "description": "Attempts to build a certification path using the specified algorithm\n parameter set."}, {"method_name": "getDefaultType", "method_sig": "public static final String getDefaultType()", "description": "Returns the default CertPathBuilder type as specified by\n the certpathbuilder.type security property, or the string\n \"PKIX\" if no such property exists.\n\n The default CertPathBuilder type can be used by\n applications that do not want to use a hard-coded type when calling one\n of the getInstance methods, and want to provide a default\n type in case a user does not specify its own.\n\n The default CertPathBuilder type can be changed by\n setting the value of the certpathbuilder.type security property\n to the desired type."}, {"method_name": "getRevocationChecker", "method_sig": "public final CertPathChecker getRevocationChecker()", "description": "Returns a CertPathChecker that the encapsulated\n CertPathBuilderSpi implementation uses to check the revocation\n status of certificates. A PKIX implementation returns objects of\n type PKIXRevocationChecker. Each invocation of this method\n returns a new instance of CertPathChecker.\n\n The primary purpose of this method is to allow callers to specify\n additional input parameters and options specific to revocation checking.\n See the class description for an example."}]}