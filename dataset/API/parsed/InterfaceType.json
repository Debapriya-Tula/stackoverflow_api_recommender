{"name": "Interface InterfaceType", "module": "jdk.jdi", "package": "com.sun.jdi", "text": "A mirror of an interface in the target VM. An InterfaceType is\n a refinement of ReferenceType that applies to true interfaces\n in the JLS  sense of the definition (not a class, not an array type).\n An interface type will never be returned by\n ObjectReference.referenceType(), but it may be in the list\n of implemented interfaces for a ClassType that is returned\n by that method.", "codes": ["public interface InterfaceType\nextends ReferenceType"], "fields": [], "methods": [{"method_name": "superinterfaces", "method_sig": "List<InterfaceType> superinterfaces()", "description": "Gets the interfaces directly extended by this interface.\n The returned list contains only those interfaces this\n interface has declared to be extended."}, {"method_name": "subinterfaces", "method_sig": "List<InterfaceType> subinterfaces()", "description": "Gets the currently prepared interfaces which directly extend this\n interface. The returned list contains only those interfaces that\n declared this interface in their \"extends\" clause."}, {"method_name": "implementors", "method_sig": "List<ClassType> implementors()", "description": "Gets the currently prepared classes which directly implement this\n interface. The returned list contains only those classes that\n declared this interface in their \"implements\" clause."}, {"method_name": "invokeMethod", "method_sig": "default Value invokeMethod (ThreadReference thread,\n                           Method method,\n                           List<? extends Value> arguments,\n                           int options)\n                    throws InvalidTypeException,\n                           ClassNotLoadedException,\n                           IncompatibleThreadStateException,\n                           InvocationException", "description": "Invokes the specified static Method in the\n target VM. The\n specified method must be defined in this interface.\n The method must be a static method\n but not a static initializer.\n \n The method invocation will occur in the specified thread.\n Method invocation can occur only if the specified thread\n has been suspended by an event which occurred in that thread.\n Method invocation is not supported\n when the target VM has been suspended through\n VirtualMachine.suspend() or when the specified thread\n is suspended through ThreadReference.suspend().\n \n The specified method is invoked with the arguments in the specified\n argument list.  The method invocation is synchronous; this method\n does not return until the invoked method returns in the target VM.\n If the invoked method throws an exception, this method will throw\n an InvocationException which contains a mirror to the exception\n object thrown.\n \n Object arguments must be assignment compatible with the argument type\n (This implies that the argument type must be loaded through the\n enclosing class' class loader). Primitive arguments must be\n either assignment compatible with the argument type or must be\n convertible to the argument type without loss of information.\n If the method being called accepts a variable number of arguments,\n then the last argument type is an array of some component type.\n The argument in the matching position can be omitted, or can be null,\n an array of the same component type, or an argument of the\n component type followed by any number of other arguments of the same\n type. If the argument is omitted, then a 0 length array of the\n component type is passed.  The component type can be a primitive type.\n Autoboxing is not supported.\n\n See Section 5.2 of\n The Java\u2122 Language Specification\n for more information on assignment compatibility.\n \n By default, all threads in the target VM are resumed while\n the method is being invoked if they were previously\n suspended by an event or by VirtualMachine.suspend() or\n ThreadReference.suspend(). This is done to prevent the deadlocks\n that will occur if any of the threads own monitors\n that will be needed by the invoked method.\n Note, however, that this implicit resume acts exactly like\n ThreadReference.resume(), so if the thread's suspend\n count is greater than 1, it will remain in a suspended state\n during the invocation and thus a deadlock could still occur.\n By default, when the invocation completes,\n all threads in the target VM are suspended, regardless their state\n before the invocation.\n It is possible that\n breakpoints or other events might occur during the invocation.\n This can cause deadlocks as described above. It can also cause a deadlock\n if invokeMethod is called from the client's event handler thread.  In this\n case, this thread will be waiting for the invokeMethod to complete and\n won't read the EventSet that comes in for the new event.  If this\n new EventSet is SUSPEND_ALL, then a deadlock will occur because no\n one will resume the EventSet.  To avoid this, all EventRequests should\n be disabled before doing the invokeMethod, or the invokeMethod should\n not be done from the client's event handler thread.\n \n The resumption of other threads during the invocation can be prevented\n by specifying the ClassType.INVOKE_SINGLE_THREADED\n bit flag in the options argument; however,\n there is no protection against or recovery from the deadlocks\n described above, so this option should be used with great caution.\n Only the specified thread will be resumed (as described for all\n threads above). Upon completion of a single threaded invoke, the invoking thread\n will be suspended once again. Note that any threads started during\n the single threaded invocation will not be suspended when the\n invocation completes.\n \n If the target VM is disconnected during the invoke (for example, through\n VirtualMachine.dispose()) the method invocation continues."}]}