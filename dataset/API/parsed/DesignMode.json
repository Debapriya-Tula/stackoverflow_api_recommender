{"name": "Interface DesignMode", "module": "java.desktop", "package": "java.beans", "text": "\n This interface is intended to be implemented by, or delegated from, instances\n of java.beans.beancontext.BeanContext, in order to propagate to its nested hierarchy\n of java.beans.beancontext.BeanContextChild instances, the current \"designTime\" property.\n \n The JavaBeans\u2122 specification defines the notion of design time as is a\n mode in which JavaBeans instances should function during their composition\n and customization in a interactive design, composition or construction tool,\n as opposed to runtime when the JavaBean is part of an applet, application,\n or other live Java executable abstraction.", "codes": ["public interface DesignMode"], "fields": [{"field_name": "PROPERTYNAME", "field_sig": "static final\u00a0String PROPERTYNAME", "description": "The standard value of the propertyName as fired from a BeanContext or\n other source of PropertyChangeEvents."}], "methods": [{"method_name": "setDesignTime", "method_sig": "void setDesignTime (boolean designTime)", "description": "Sets the \"value\" of the \"designTime\" property.\n \n If the implementing object is an instance of java.beans.beancontext.BeanContext,\n or a subinterface thereof, then that BeanContext should fire a\n PropertyChangeEvent, to its registered BeanContextMembershipListeners, with\n parameters:\n \npropertyName - java.beans.DesignMode.PROPERTYNAME\noldValue - previous value of \"designTime\"\n    newValue - current value of \"designTime\"\n \n Note it is illegal for a BeanContextChild to invoke this method\n associated with a BeanContext that it is nested within."}, {"method_name": "isDesignTime", "method_sig": "boolean isDesignTime()", "description": "A value of true denotes that JavaBeans should behave in design time\n mode, a value of false denotes runtime behavior."}]}