{"name": "Class BufferedWriter", "module": "java.base", "package": "java.io", "text": "Writes text to a character-output stream, buffering characters so as to\n provide for the efficient writing of single characters, arrays, and strings.\n\n  The buffer size may be specified, or the default size may be accepted.\n The default is large enough for most purposes.\n\n  A newLine() method is provided, which uses the platform's own notion of\n line separator as defined by the system property line.separator.\n Not all platforms use the newline character ('\\n') to terminate lines.\n Calling this method to terminate each output line is therefore preferred to\n writing a newline character directly.\n\n  In general, a Writer sends its output immediately to the underlying\n character or byte stream.  Unless prompt output is required, it is advisable\n to wrap a BufferedWriter around any Writer whose write() operations may be\n costly, such as FileWriters and OutputStreamWriters.  For example,\n\n \n PrintWriter out\n   = new PrintWriter(new BufferedWriter(new FileWriter(\"foo.out\")));\n \n\n will buffer the PrintWriter's output to the file.  Without buffering, each\n invocation of a print() method would cause characters to be converted into\n bytes that would then be written immediately to the file, which can be very\n inefficient.", "codes": ["public class BufferedWriter\nextends Writer"], "fields": [], "methods": [{"method_name": "write", "method_sig": "public void write (int c)\n           throws IOException", "description": "Writes a single character."}, {"method_name": "write", "method_sig": "public void write (char[] cbuf,\n                  int off,\n                  int len)\n           throws IOException", "description": "Writes a portion of an array of characters.\n\n  Ordinarily this method stores characters from the given array into\n this stream's buffer, flushing the buffer to the underlying stream as\n needed.  If the requested length is at least as large as the buffer,\n however, then this method will flush the buffer and write the characters\n directly to the underlying stream.  Thus redundant\n BufferedWriters will not copy data unnecessarily."}, {"method_name": "write", "method_sig": "public void write (String s,\n                  int off,\n                  int len)\n           throws IOException", "description": "Writes a portion of a String."}, {"method_name": "newLine", "method_sig": "public void newLine()\n             throws IOException", "description": "Writes a line separator.  The line separator string is defined by the\n system property line.separator, and is not necessarily a single\n newline ('\\n') character."}, {"method_name": "flush", "method_sig": "public void flush()\n           throws IOException", "description": "Flushes the stream."}]}