{"name": "Class DomainLoadStoreParameter", "module": "java.base", "package": "java.security", "text": "Configuration data that specifies the keystores in a keystore domain.\n A keystore domain is a collection of keystores that are presented as a\n single logical keystore. The configuration data is used during\n KeyStore\nload and\n store operations.\n \n The following syntax is supported for configuration data:\n \n     domain <domainName> [<property> ...] {\n         keystore <keystoreName> [<property> ...] ;\n         ...\n     };\n     ...\n \n where domainName and keystoreName are identifiers\n and property is a key/value pairing. The key and value are\n separated by an 'equals' symbol and the value is enclosed in double\n quotes. A property value may be either a printable string or a binary\n string of colon-separated pairs of hexadecimal digits. Multi-valued\n properties are represented as a comma-separated list of values,\n enclosed in square brackets.\n See Arrays.toString(java.lang.Object[]).\n \n To ensure that keystore entries are uniquely identified, each\n entry's alias is prefixed by its keystoreName followed\n by the entry name separator and each keystoreName must be\n unique within its domain. Entry name prefixes are omitted when\n storing a keystore.\n \n Properties are context-sensitive: properties that apply to\n all the keystores in a domain are located in the domain clause,\n and properties that apply only to a specific keystore are located\n in that keystore's clause.\n Unless otherwise specified, a property in a keystore clause overrides\n a property of the same name in the domain clause. All property names\n are case-insensitive. The following properties are supported:\n \n keystoreType=\"<type>\" \n The keystore type. \n keystoreURI=\"<url>\" \n The keystore location. \n keystoreProviderName=\"<name>\" \n The name of the keystore's JCE provider. \n keystorePasswordEnv=\"<environment-variable>\" \n The environment variable that stores a keystore password.\n          Alternatively, passwords may be supplied to the constructor\n          method in a Map<String, ProtectionParameter>. \n entryNameSeparator=\"<separator>\" \n The separator between a keystore name prefix and an entry name.\n          When specified, it applies to all the entries in a domain.\n          Its default value is a space. \n\n\n For example, configuration data for a simple keystore domain\n comprising three keystores is shown below:\n \n\n domain app1 {\n     keystore app1-truststore\n         keystoreURI=\"file:///app1/etc/truststore.jks\";\n\n     keystore system-truststore\n         keystoreURI=\"${java.home}/lib/security/cacerts\";\n\n     keystore app1-keystore\n         keystoreType=\"PKCS12\"\n         keystoreURI=\"file:///app1/etc/keystore.p12\";\n };\n\n ", "codes": ["public final class DomainLoadStoreParameter\nextends Object\nimplements KeyStore.LoadStoreParameter"], "fields": [], "methods": [{"method_name": "getConfiguration", "method_sig": "public URI getConfiguration()", "description": "Gets the identifier for the domain configuration data."}, {"method_name": "getProtectionParams", "method_sig": "public Map<String, KeyStore.ProtectionParameter> getProtectionParams()", "description": "Gets the keystore protection parameters for keystores in this\n domain."}, {"method_name": "getProtectionParameter", "method_sig": "public KeyStore.ProtectionParameter getProtectionParameter()", "description": "Gets the keystore protection parameters for this domain.\n Keystore domains do not support a protection parameter."}]}