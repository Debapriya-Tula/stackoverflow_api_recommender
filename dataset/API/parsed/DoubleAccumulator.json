{"name": "Class DoubleAccumulator", "module": "java.base", "package": "java.util.concurrent.atomic", "text": "One or more variables that together maintain a running double\n value updated using a supplied function.  When updates (method\n accumulate(double)) are contended across threads, the set of variables\n may grow dynamically to reduce contention.  Method get()\n (or, equivalently, doubleValue()) returns the current value\n across the variables maintaining updates.\n\n This class is usually preferable to alternatives when multiple\n threads update a common value that is used for purposes such as\n summary statistics that are frequently updated but less frequently\n read.\n\n The supplied accumulator function should be side-effect-free,\n since it may be re-applied when attempted updates fail due to\n contention among threads.  For predictable results, the accumulator\n function should be commutative and associative within the floating\n point tolerance required in usage contexts. The function is applied\n with an existing value (or identity) as one argument, and a given\n update as the other argument. For example, to maintain a running\n maximum value, you could supply Double::max along with\n Double.NEGATIVE_INFINITY as the identity. The order of\n accumulation within or across threads is not guaranteed. Thus, this\n class may not be applicable if numerical stability is required,\n especially when combining values of substantially different orders\n of magnitude.\n\n Class DoubleAdder provides analogs of the functionality\n of this class for the common special case of maintaining sums.  The\n call new DoubleAdder() is equivalent to new\n DoubleAccumulator((x, y) -> x + y, 0.0).\n\n This class extends Number, but does not define\n methods such as equals, hashCode and \n compareTo because instances are expected to be mutated, and so are\n not useful as collection keys.", "codes": ["public class DoubleAccumulator\nextends Number\nimplements Serializable"], "fields": [], "methods": [{"method_name": "accumulate", "method_sig": "public void accumulate (double x)", "description": "Updates with the given value."}, {"method_name": "get", "method_sig": "public double get()", "description": "Returns the current value.  The returned value is NOT\n an atomic snapshot; invocation in the absence of concurrent\n updates returns an accurate result, but concurrent updates that\n occur while the value is being calculated might not be\n incorporated."}, {"method_name": "reset", "method_sig": "public void reset()", "description": "Resets variables maintaining updates to the identity value.\n This method may be a useful alternative to creating a new\n updater, but is only effective if there are no concurrent\n updates.  Because this method is intrinsically racy, it should\n only be used when it is known that no threads are concurrently\n updating."}, {"method_name": "getThenReset", "method_sig": "public double getThenReset()", "description": "Equivalent in effect to get() followed by reset(). This method may apply for example during quiescent\n points between multithreaded computations.  If there are\n updates concurrent with this method, the returned value is\n not guaranteed to be the final value occurring before\n the reset."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns the String representation of the current value."}, {"method_name": "doubleValue", "method_sig": "public double doubleValue()", "description": "Equivalent to get()."}, {"method_name": "longValue", "method_sig": "public long longValue()", "description": "Returns the current value as a long\n after a narrowing primitive conversion."}, {"method_name": "intValue", "method_sig": "public int intValue()", "description": "Returns the current value as an int\n after a narrowing primitive conversion."}, {"method_name": "floatValue", "method_sig": "public float floatValue()", "description": "Returns the current value as a float\n after a narrowing primitive conversion."}]}