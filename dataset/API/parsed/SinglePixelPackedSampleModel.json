{"name": "Class SinglePixelPackedSampleModel", "module": "java.desktop", "package": "java.awt.image", "text": "This class represents pixel data packed such that the N samples which make\n  up a single pixel are stored in a single data array element, and each data\n  data array element holds samples for only one pixel.\n  This class supports\n  TYPE_BYTE,\n  TYPE_USHORT,\n  TYPE_INT data types.\n  All data array elements reside\n  in the first bank of a DataBuffer.  Accessor methods are provided so\n  that the image data can be manipulated directly. Scanline stride is the\n  number of data array elements between a given sample and the corresponding\n  sample in the same column of the next scanline. Bit masks are the masks\n  required to extract the samples representing the bands of the pixel.\n  Bit offsets are the offsets in bits into the data array\n  element of the samples representing the bands of the pixel.\n \n The following code illustrates extracting the bits of the sample\n representing band b for pixel x,y\n from DataBuffer data:\n \n      int sample = data.getElem(y * scanlineStride + x);\n      sample = (sample & bitMasks[b]) >>> bitOffsets[b];\n ", "codes": ["public class SinglePixelPackedSampleModel\nextends SampleModel"], "fields": [], "methods": [{"method_name": "getNumDataElements", "method_sig": "public int getNumDataElements()", "description": "Returns the number of data elements needed to transfer one pixel\n via the getDataElements and setDataElements methods.\n For a SinglePixelPackedSampleModel, this is one."}, {"method_name": "createCompatibleSampleModel", "method_sig": "public SampleModel createCompatibleSampleModel (int w,\n                                               int h)", "description": "Creates a new SinglePixelPackedSampleModel with the specified\n width and height.  The new SinglePixelPackedSampleModel will have the\n same storage data type and bit masks as this\n SinglePixelPackedSampleModel."}, {"method_name": "createDataBuffer", "method_sig": "public DataBuffer createDataBuffer()", "description": "Creates a DataBuffer that corresponds to this\n SinglePixelPackedSampleModel.  The DataBuffer's data type and size\n will be consistent with this SinglePixelPackedSampleModel.  The\n DataBuffer will have a single bank."}, {"method_name": "getSampleSize", "method_sig": "public int[] getSampleSize()", "description": "Returns the number of bits per sample for all bands."}, {"method_name": "getSampleSize", "method_sig": "public int getSampleSize (int band)", "description": "Returns the number of bits per sample for the specified band."}, {"method_name": "getOffset", "method_sig": "public int getOffset (int x,\n                     int y)", "description": "Returns the offset (in data array elements) of pixel (x,y).\n  The data element containing pixel x,y\n  can be retrieved from a DataBuffer data with a\n  SinglePixelPackedSampleModel sppsm as:\n \n        data.getElem(sppsm.getOffset(x, y));\n "}, {"method_name": "getBitOffsets", "method_sig": "public int[] getBitOffsets()", "description": "Returns the bit offsets into the data array element representing\n  a pixel for all bands."}, {"method_name": "getBitMasks", "method_sig": "public int[] getBitMasks()", "description": "Returns the bit masks for all bands."}, {"method_name": "getScanlineStride", "method_sig": "public int getScanlineStride()", "description": "Returns the scanline stride of this SinglePixelPackedSampleModel."}, {"method_name": "createSubsetSampleModel", "method_sig": "public SampleModel createSubsetSampleModel (int[] bands)", "description": "This creates a new SinglePixelPackedSampleModel with a subset of the\n bands of this SinglePixelPackedSampleModel.  The new\n SinglePixelPackedSampleModel can be used with any DataBuffer that the\n existing SinglePixelPackedSampleModel can be used with.  The new\n SinglePixelPackedSampleModel/DataBuffer combination will represent\n an image with a subset of the bands of the original\n SinglePixelPackedSampleModel/DataBuffer combination."}, {"method_name": "getDataElements", "method_sig": "public Object getDataElements (int x,\n                              int y,\n                              Object obj,\n                              DataBuffer data)", "description": "Returns data for a single pixel in a primitive array of type\n TransferType.  For a SinglePixelPackedSampleModel, the array will\n have one element, and the type will be the same as the storage\n data type.  Generally, obj\n should be passed in as null, so that the Object will be created\n automatically and will be of the right primitive data type.\n \n The following code illustrates transferring data for one pixel from\n DataBuffer db1, whose storage layout is described by\n SinglePixelPackedSampleModel sppsm1, to\n DataBuffer db2, whose storage layout is described by\n SinglePixelPackedSampleModel sppsm2.\n The transfer will generally be more efficient than using\n getPixel/setPixel.\n \n       SinglePixelPackedSampleModel sppsm1, sppsm2;\n       DataBufferInt db1, db2;\n       sppsm2.setDataElements(x, y, sppsm1.getDataElements(x, y, null,\n                              db1), db2);\n \n Using getDataElements/setDataElements to transfer between two\n DataBuffer/SampleModel pairs is legitimate if the SampleModels have\n the same number of bands, corresponding bands have the same number of\n bits per sample, and the TransferTypes are the same.\n \n If obj is non-null, it should be a primitive array of type TransferType.\n Otherwise, a ClassCastException is thrown.  An\n ArrayIndexOutOfBoundsException may be thrown if the coordinates are\n not in bounds, or if obj is non-null and is not large enough to hold\n the pixel data."}, {"method_name": "getPixel", "method_sig": "public int[] getPixel (int x,\n                      int y,\n                      int[] iArray,\n                      DataBuffer data)", "description": "Returns all samples in for the specified pixel in an int array.\n ArrayIndexOutOfBoundsException may be thrown if the coordinates are\n not in bounds."}, {"method_name": "getPixels", "method_sig": "public int[] getPixels (int x,\n                       int y,\n                       int w,\n                       int h,\n                       int[] iArray,\n                       DataBuffer data)", "description": "Returns all samples for the specified rectangle of pixels in\n an int array, one sample per array element.\n ArrayIndexOutOfBoundsException may be thrown if the coordinates are\n not in bounds."}, {"method_name": "getSample", "method_sig": "public int getSample (int x,\n                     int y,\n                     int b,\n                     DataBuffer data)", "description": "Returns as int the sample in a specified band for the pixel\n located at (x,y).\n ArrayIndexOutOfBoundsException may be thrown if the coordinates are\n not in bounds."}, {"method_name": "getSamples", "method_sig": "public int[] getSamples (int x,\n                        int y,\n                        int w,\n                        int h,\n                        int b,\n                        int[] iArray,\n                        DataBuffer data)", "description": "Returns the samples for a specified band for the specified rectangle\n of pixels in an int array, one sample per array element.\n ArrayIndexOutOfBoundsException may be thrown if the coordinates are\n not in bounds."}, {"method_name": "setDataElements", "method_sig": "public void setDataElements (int x,\n                            int y,\n                            Object obj,\n                            DataBuffer data)", "description": "Sets the data for a single pixel in the specified DataBuffer from a\n primitive array of type TransferType.  For a\n SinglePixelPackedSampleModel, only the first element of the array\n will hold valid data, and the type of the array must be the same as\n the storage data type of the SinglePixelPackedSampleModel.\n \n The following code illustrates transferring data for one pixel from\n DataBuffer db1, whose storage layout is described by\n SinglePixelPackedSampleModel sppsm1,\n to DataBuffer db2, whose storage layout is described by\n SinglePixelPackedSampleModel sppsm2.\n The transfer will generally be more efficient than using\n getPixel/setPixel.\n \n       SinglePixelPackedSampleModel sppsm1, sppsm2;\n       DataBufferInt db1, db2;\n       sppsm2.setDataElements(x, y, sppsm1.getDataElements(x, y, null,\n                              db1), db2);\n \n Using getDataElements/setDataElements to transfer between two\n DataBuffer/SampleModel pairs is legitimate if the SampleModels have\n the same number of bands, corresponding bands have the same number of\n bits per sample, and the TransferTypes are the same.\n \n obj must be a primitive array of type TransferType.  Otherwise,\n a ClassCastException is thrown.  An\n ArrayIndexOutOfBoundsException may be thrown if the coordinates are\n not in bounds, or if obj is not large enough to hold the pixel data."}, {"method_name": "setPixel", "method_sig": "public void setPixel (int x,\n                     int y,\n                     int[] iArray,\n                     DataBuffer data)", "description": "Sets a pixel in the DataBuffer using an int array of samples for input.\n ArrayIndexOutOfBoundsException may be thrown if the coordinates are\n not in bounds."}, {"method_name": "setPixels", "method_sig": "public void setPixels (int x,\n                      int y,\n                      int w,\n                      int h,\n                      int[] iArray,\n                      DataBuffer data)", "description": "Sets all samples for a rectangle of pixels from an int array containing\n one sample per array element.\n ArrayIndexOutOfBoundsException may be thrown if the coordinates are\n not in bounds."}, {"method_name": "setSample", "method_sig": "public void setSample (int x,\n                      int y,\n                      int b,\n                      int s,\n                      DataBuffer data)", "description": "Sets a sample in the specified band for the pixel located at (x,y)\n in the DataBuffer using an int for input.\n ArrayIndexOutOfBoundsException may be thrown if the coordinates are\n not in bounds."}, {"method_name": "setSamples", "method_sig": "public void setSamples (int x,\n                       int y,\n                       int w,\n                       int h,\n                       int b,\n                       int[] iArray,\n                       DataBuffer data)", "description": "Sets the samples in the specified band for the specified rectangle\n of pixels from an int array containing one sample per array element.\n ArrayIndexOutOfBoundsException may be thrown if the coordinates are\n not in bounds."}]}