{"name": "Class DocumentBuilder", "module": "java.xml", "package": "javax.xml.parsers", "text": "Defines the API to obtain DOM Document instances from an XML\n document. Using this class, an application programmer can obtain a\n Document from XML.\n\n An instance of this class can be obtained from the\n DocumentBuilderFactory.newDocumentBuilder() method. Once\n an instance of this class is obtained, XML can be parsed from a\n variety of input sources. These input sources are InputStreams,\n Files, URLs, and SAX InputSources.\n\n Note that this class reuses several classes from the SAX API. This\n does not require that the implementor of the underlying DOM\n implementation use a SAX parser to parse XML document into a\n Document. It merely requires that the implementation\n communicate with the application using these existing APIs.", "codes": ["public abstract class DocumentBuilder\nextends Object"], "fields": [], "methods": [{"method_name": "reset", "method_sig": "public void reset()", "description": "Reset this DocumentBuilder to its original configuration.\nDocumentBuilder is reset to the same state as when it was created with\n DocumentBuilderFactory.newDocumentBuilder().\n reset() is designed to allow the reuse of existing DocumentBuilders\n thus saving resources associated with the creation of new DocumentBuilders.\nThe reset DocumentBuilder is not guaranteed to have the same EntityResolver or ErrorHandler\nObjects, e.g. Object.equals(Object obj).  It is guaranteed to have a functionally equal\n EntityResolver and ErrorHandler."}, {"method_name": "parse", "method_sig": "public Document parse (InputStream is)\n               throws SAXException,\n                      IOException", "description": "Parse the content of the given InputStream as an XML\n document and return a new DOM Document object.\n An IllegalArgumentException is thrown if the\n InputStream is null."}, {"method_name": "parse", "method_sig": "public Document parse (InputStream is,\n                      String systemId)\n               throws SAXException,\n                      IOException", "description": "Parse the content of the given InputStream as an\n XML document and return a new DOM Document object.\n An IllegalArgumentException is thrown if the\n InputStream is null."}, {"method_name": "parse", "method_sig": "public Document parse (String uri)\n               throws SAXException,\n                      IOException", "description": "Parse the content of the given URI as an XML document\n and return a new DOM Document object.\n An IllegalArgumentException is thrown if the\n URI is null null."}, {"method_name": "parse", "method_sig": "public Document parse (File f)\n               throws SAXException,\n                      IOException", "description": "Parse the content of the given file as an XML document\n and return a new DOM Document object.\n An IllegalArgumentException is thrown if the\n File is null null."}, {"method_name": "parse", "method_sig": "public abstract Document parse (InputSource is)\n                        throws SAXException,\n                               IOException", "description": "Parse the content of the given input source as an XML document\n and return a new DOM Document object.\n An IllegalArgumentException is thrown if the\n InputSource is null null."}, {"method_name": "isNamespaceAware", "method_sig": "public abstract boolean isNamespaceAware()", "description": "Indicates whether or not this parser is configured to\n understand namespaces."}, {"method_name": "isValidating", "method_sig": "public abstract boolean isValidating()", "description": "Indicates whether or not this parser is configured to\n validate XML documents."}, {"method_name": "setEntityResolver", "method_sig": "public abstract void setEntityResolver (EntityResolver er)", "description": "Specify the EntityResolver to be used to resolve\n entities present in the XML document to be parsed. Setting\n this to null will result in the underlying\n implementation using it's own default implementation and\n behavior."}, {"method_name": "setErrorHandler", "method_sig": "public abstract void setErrorHandler (ErrorHandler eh)", "description": "Specify the ErrorHandler to be used by the parser.\n Setting this to null will result in the underlying\n implementation using it's own default implementation and\n behavior."}, {"method_name": "newDocument", "method_sig": "public abstract Document newDocument()", "description": "Obtain a new instance of a DOM Document object\n to build a DOM tree with."}, {"method_name": "getDOMImplementation", "method_sig": "public abstract DOMImplementation getDOMImplementation()", "description": "Obtain an instance of a DOMImplementation object."}, {"method_name": "getSchema", "method_sig": "public Schema getSchema()", "description": "Get a reference to the the Schema being used by\n the XML processor.\nIf no schema is being used, null is returned."}, {"method_name": "isXIncludeAware", "method_sig": "public boolean isXIncludeAware()", "description": "Get the XInclude processing mode for this parser."}]}