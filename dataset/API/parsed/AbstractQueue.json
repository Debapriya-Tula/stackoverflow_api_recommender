{"name": "Class AbstractQueue<E>", "module": "java.base", "package": "java.util", "text": "This class provides skeletal implementations of some Queue\n operations. The implementations in this class are appropriate when\n the base implementation does not allow null\n elements.  Methods add, remove, and\n element are based on offer, poll, and peek, respectively, but throw\n exceptions instead of indicating failure via false or\n null returns.\n\n A Queue implementation that extends this class must\n minimally define a method Queue.offer(E) which does not permit\n insertion of null elements, along with methods Queue.peek(), Queue.poll(), Collection.size(), and\n Collection.iterator().  Typically, additional methods will be\n overridden as well.  If these requirements cannot be met, consider\n instead subclassing AbstractCollection.\n\n This class is a member of the\n \n Java Collections Framework.", "codes": ["public abstract class AbstractQueue<E>\nextends AbstractCollection<E>\nimplements Queue<E>"], "fields": [], "methods": [{"method_name": "add", "method_sig": "public boolean add (E e)", "description": "Inserts the specified element into this queue if it is possible to do so\n immediately without violating capacity restrictions, returning\n true upon success and throwing an IllegalStateException\n if no space is currently available.\n\n This implementation returns true if offer succeeds,\n else throws an IllegalStateException."}, {"method_name": "remove", "method_sig": "public E remove()", "description": "Retrieves and removes the head of this queue.  This method differs\n from poll only in that it throws an exception if this\n queue is empty.\n\n This implementation returns the result of poll\n unless the queue is empty."}, {"method_name": "element", "method_sig": "public E element()", "description": "Retrieves, but does not remove, the head of this queue.  This method\n differs from peek only in that it throws an exception if\n this queue is empty.\n\n This implementation returns the result of peek\n unless the queue is empty."}, {"method_name": "clear", "method_sig": "public void clear()", "description": "Removes all of the elements from this queue.\n The queue will be empty after this call returns.\n\n This implementation repeatedly invokes poll until it\n returns null."}, {"method_name": "addAll", "method_sig": "public boolean addAll (Collection<? extends E> c)", "description": "Adds all of the elements in the specified collection to this\n queue.  Attempts to addAll of a queue to itself result in\n IllegalArgumentException. Further, the behavior of\n this operation is undefined if the specified collection is\n modified while the operation is in progress.\n\n This implementation iterates over the specified collection,\n and adds each element returned by the iterator to this\n queue, in turn.  A runtime exception encountered while\n trying to add an element (including, in particular, a\n null element) may result in only some of the elements\n having been successfully added when the associated exception is\n thrown."}]}