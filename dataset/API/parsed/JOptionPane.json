{"name": "Class JOptionPane", "module": "java.desktop", "package": "javax.swing", "text": "JOptionPane makes it easy to pop up a standard dialog box that\n prompts users for a value or informs them of something.\n For information about using JOptionPane, see\n How to Make Dialogs,\n a section in The Java Tutorial.\n\n \n\n While the JOptionPane\n class may appear complex because of the large number of methods, almost\n all uses of this class are one-line calls to one of the static\n showXxxDialog methods shown below:\n\n \nCommon JOptionPane method names and their descriptions\n\n\nMethod Name\n     Description\n \n\n\nshowConfirmDialog\n     Asks a confirming question, like yes/no/cancel.\n\nshowInputDialog\n     Prompt for some input.\n   \nshowMessageDialog\n     Tell the user about something that has happened.\n   \nshowOptionDialog\n     The Grand Unification of the above three.\n \n\n\n Each of these methods also comes in a showInternalXXX\n flavor, which uses an internal frame to hold the dialog box (see\n JInternalFrame).\n Multiple convenience methods have also been defined -- overloaded\n versions of the basic methods that use different parameter lists.\n \n All dialogs are modal. Each showXxxDialog method blocks\n the caller until the user's interaction is complete.\n\n \nCommon dialog\n\nicon\nmessage\n\n\ninput value\n\n\noption buttons\n\n\n\n The basic appearance of one of these dialog boxes is generally\n similar to the picture above, although the various\n look-and-feels are\n ultimately responsible for the final result.  In particular, the\n look-and-feels will adjust the layout to accommodate the option pane's\n ComponentOrientation property.\n \n\nParameters:\n The parameters to these methods follow consistent patterns:\n \n\nparentComponent\n Defines the Component that is to be the parent of this\n dialog box.\n It is used in two ways: the Frame that contains\n it is used as the Frame\n parent for the dialog box, and its screen coordinates are used in\n the placement of the dialog box. In general, the dialog box is placed\n just below the component. This parameter may be null,\n in which case a default Frame is used as the parent,\n and the dialog will be\n centered on the screen (depending on the L&F).\n message\n A descriptive message to be placed in the dialog box.\n In the most common usage, message is just a String or\n String constant.\n However, the type of this parameter is actually Object. Its\n interpretation depends on its type:\n \nObject[]An array of objects is interpreted as a series of\n                 messages (one per object) arranged in a vertical stack.\n                 The interpretation is recursive -- each object in the\n                 array is interpreted according to its type.\n ComponentThe Component is displayed in the dialog.\n IconThe Icon is wrapped in a JLabel\n               and displayed in the dialog.\n othersThe object is converted to a String by calling\n               its toString method. The result is wrapped in a\n               JLabel and displayed.\n \nmessageTypeDefines the style of the message. The Look and Feel\n manager may lay out the dialog differently depending on this value, and\n will often provide a default icon. The possible values are:\n \nERROR_MESSAGE\nINFORMATION_MESSAGE\nWARNING_MESSAGE\nQUESTION_MESSAGE\nPLAIN_MESSAGE\n\noptionTypeDefines the set of option buttons that appear at\n the bottom of the dialog box:\n \nDEFAULT_OPTION\nYES_NO_OPTION\nYES_NO_CANCEL_OPTION\nOK_CANCEL_OPTION\n\n You aren't limited to this set of option buttons.  You can provide any\n buttons you want using the options parameter.\n optionsA more detailed description of the set of option buttons\n that will appear at the bottom of the dialog box.\n The usual value for the options parameter is an array of\n Strings. But\n the parameter type is an array of Objects.\n A button is created for each object depending on its type:\n \nComponentThe component is added to the button row directly.\n IconA JButton is created with this as its label.\n otherThe Object is converted to a string using its\n              toString method and the result is used to\n              label a JButton.\n \niconA decorative icon to be placed in the dialog box. A default\n value for this is determined by the messageType parameter.\n titleThe title for the dialog box.\n initialValueThe default selection (input value).\n \n\n\n When the selection is changed, setValue is invoked,\n which generates a PropertyChangeEvent.\n \n If a JOptionPane has configured to all input\n setWantsInput\n the bound property JOptionPane.INPUT_VALUE_PROPERTY\n  can also be listened\n to, to determine when the user has input or selected a value.\n \n When one of the showXxxDialog methods returns an integer,\n the possible values are:\n \nYES_OPTION\nNO_OPTION\nCANCEL_OPTION\nOK_OPTION\nCLOSED_OPTION\n\nExamples:\n\nShow an error dialog that displays the message, 'alert':\n \n JOptionPane.showMessageDialog(null, \"alert\", \"alert\", JOptionPane.ERROR_MESSAGE);\n \nShow an internal information dialog with the message, 'information':\n \n JOptionPane.showInternalMessageDialog(frame, \"information\",\n             \"information\", JOptionPane.INFORMATION_MESSAGE);\n \nShow an information panel with the options yes/no and message 'choose one':\n JOptionPane.showConfirmDialog(null,\n             \"choose one\", \"choose one\", JOptionPane.YES_NO_OPTION);\n \nShow an internal information dialog with the options yes/no/cancel and\n message 'please choose one' and title information:\n JOptionPane.showInternalConfirmDialog(frame,\n             \"please choose one\", \"information\",\n             JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.INFORMATION_MESSAGE);\n \nShow a warning dialog with the options OK, CANCEL, title 'Warning', and\n message 'Click OK to continue':\n \n Object[] options = { \"OK\", \"CANCEL\" };\n JOptionPane.showOptionDialog(null, \"Click OK to continue\", \"Warning\",\n             JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE,\n             null, options, options[0]);\n \nShow a dialog asking the user to type in a String:\n \n String inputValue = JOptionPane.showInputDialog(\"Please input a value\");\n \nShow a dialog asking the user to select a String:\n \n Object[] possibleValues = { \"First\", \"Second\", \"Third\" };\n Object selectedValue = JOptionPane.showInputDialog(null,\n             \"Choose one\", \"Input\",\n             JOptionPane.INFORMATION_MESSAGE, null,\n             possibleValues, possibleValues[0]);\n \n\nDirect Use:\n To create and use an JOptionPane directly, the\n standard pattern is roughly as follows:\n \n     JOptionPane pane = new JOptionPane(arguments);\n     pane.set.Xxxx(...); // Configure\n     JDialog dialog = pane.createDialog(parentComponent, title);\n     dialog.show();\n     Object selectedValue = pane.getValue();\n     if(selectedValue == null)\n       return CLOSED_OPTION;\n     //If there is not an array of option buttons:\n     if(options == null) {\n       if(selectedValue instanceof Integer)\n          return ((Integer)selectedValue).intValue();\n       return CLOSED_OPTION;\n     }\n     //If there is an array of option buttons:\n     for(int counter = 0, maxCounter = options.length;\n        counter < maxCounter; counter++) {\n        if(options[counter].equals(selectedValue))\n        return counter;\n     }\n     return CLOSED_OPTION;\n \n\nWarning: Swing is not thread safe. For more\n information see Swing's Threading\n Policy.\n \nWarning:\n Serialized objects of this class will not be compatible with\n future Swing releases. The current serialization support is\n appropriate for short term storage or RMI between applications running\n the same version of Swing.  As of 1.4, support for long term storage\n of all JavaBeans\u2122\n has been added to the java.beans package.\n Please see XMLEncoder.", "codes": ["@JavaBean(defaultProperty=\"UI\",\n          description=\"A component which implements standard dialog box controls.\")\npublic class JOptionPane\nextends JComponent\nimplements Accessible"], "fields": [{"field_name": "UNINITIALIZED_VALUE", "field_sig": "public static final\u00a0Object UNINITIALIZED_VALUE", "description": "Indicates that the user has not yet selected a value."}, {"field_name": "DEFAULT_OPTION", "field_sig": "public static final\u00a0int DEFAULT_OPTION", "description": "Type meaning Look and Feel should not supply any options -- only\n use the options from the JOptionPane."}, {"field_name": "YES_NO_OPTION", "field_sig": "public static final\u00a0int YES_NO_OPTION", "description": "Type used for showConfirmDialog."}, {"field_name": "YES_NO_CANCEL_OPTION", "field_sig": "public static final\u00a0int YES_NO_CANCEL_OPTION", "description": "Type used for showConfirmDialog."}, {"field_name": "OK_CANCEL_OPTION", "field_sig": "public static final\u00a0int OK_CANCEL_OPTION", "description": "Type used for showConfirmDialog."}, {"field_name": "YES_OPTION", "field_sig": "public static final\u00a0int YES_OPTION", "description": "Return value from class method if YES is chosen."}, {"field_name": "NO_OPTION", "field_sig": "public static final\u00a0int NO_OPTION", "description": "Return value from class method if NO is chosen."}, {"field_name": "CANCEL_OPTION", "field_sig": "public static final\u00a0int CANCEL_OPTION", "description": "Return value from class method if CANCEL is chosen."}, {"field_name": "OK_OPTION", "field_sig": "public static final\u00a0int OK_OPTION", "description": "Return value form class method if OK is chosen."}, {"field_name": "CLOSED_OPTION", "field_sig": "public static final\u00a0int CLOSED_OPTION", "description": "Return value from class method if user closes window without selecting\n anything, more than likely this should be treated as either a\n CANCEL_OPTION or NO_OPTION."}, {"field_name": "ERROR_MESSAGE", "field_sig": "public static final\u00a0int ERROR_MESSAGE", "description": "Used for error messages."}, {"field_name": "INFORMATION_MESSAGE", "field_sig": "public static final\u00a0int INFORMATION_MESSAGE", "description": "Used for information messages."}, {"field_name": "WARNING_MESSAGE", "field_sig": "public static final\u00a0int WARNING_MESSAGE", "description": "Used for warning messages."}, {"field_name": "QUESTION_MESSAGE", "field_sig": "public static final\u00a0int QUESTION_MESSAGE", "description": "Used for questions."}, {"field_name": "PLAIN_MESSAGE", "field_sig": "public static final\u00a0int PLAIN_MESSAGE", "description": "No icon is used."}, {"field_name": "ICON_PROPERTY", "field_sig": "public static final\u00a0String ICON_PROPERTY", "description": "Bound property name for icon."}, {"field_name": "MESSAGE_PROPERTY", "field_sig": "public static final\u00a0String MESSAGE_PROPERTY", "description": "Bound property name for message."}, {"field_name": "VALUE_PROPERTY", "field_sig": "public static final\u00a0String VALUE_PROPERTY", "description": "Bound property name for value."}, {"field_name": "OPTIONS_PROPERTY", "field_sig": "public static final\u00a0String OPTIONS_PROPERTY", "description": "Bound property name for option."}, {"field_name": "INITIAL_VALUE_PROPERTY", "field_sig": "public static final\u00a0String INITIAL_VALUE_PROPERTY", "description": "Bound property name for initialValue."}, {"field_name": "MESSAGE_TYPE_PROPERTY", "field_sig": "public static final\u00a0String MESSAGE_TYPE_PROPERTY", "description": "Bound property name for type."}, {"field_name": "OPTION_TYPE_PROPERTY", "field_sig": "public static final\u00a0String OPTION_TYPE_PROPERTY", "description": "Bound property name for optionType."}, {"field_name": "SELECTION_VALUES_PROPERTY", "field_sig": "public static final\u00a0String SELECTION_VALUES_PROPERTY", "description": "Bound property name for selectionValues."}, {"field_name": "INITIAL_SELECTION_VALUE_PROPERTY", "field_sig": "public static final\u00a0String INITIAL_SELECTION_VALUE_PROPERTY", "description": "Bound property name for initialSelectionValue."}, {"field_name": "INPUT_VALUE_PROPERTY", "field_sig": "public static final\u00a0String INPUT_VALUE_PROPERTY", "description": "Bound property name for inputValue."}, {"field_name": "WANTS_INPUT_PROPERTY", "field_sig": "public static final\u00a0String WANTS_INPUT_PROPERTY", "description": "Bound property name for wantsInput."}, {"field_name": "icon", "field_sig": "protected transient\u00a0Icon icon", "description": "Icon used in pane."}, {"field_name": "message", "field_sig": "protected transient\u00a0Object message", "description": "Message to display."}, {"field_name": "options", "field_sig": "protected transient\u00a0Object[] options", "description": "Options to display to the user."}, {"field_name": "initialValue", "field_sig": "protected transient\u00a0Object initialValue", "description": "Value that should be initially selected in options."}, {"field_name": "messageType", "field_sig": "protected\u00a0int messageType", "description": "Message type."}, {"field_name": "optionType", "field_sig": "protected\u00a0int optionType", "description": "Option type, one of DEFAULT_OPTION,\n YES_NO_OPTION,\n YES_NO_CANCEL_OPTION or\n OK_CANCEL_OPTION."}, {"field_name": "value", "field_sig": "protected transient\u00a0Object value", "description": "Currently selected value, will be a valid option, or\n UNINITIALIZED_VALUE or null."}, {"field_name": "selectionValues", "field_sig": "protected transient\u00a0Object[] selectionValues", "description": "Array of values the user can choose from. Look and feel will\n provide the UI component to choose this from."}, {"field_name": "inputValue", "field_sig": "protected transient\u00a0Object inputValue", "description": "Value the user has input."}, {"field_name": "initialSelectionValue", "field_sig": "protected transient\u00a0Object initialSelectionValue", "description": "Initial value to select in selectionValues."}, {"field_name": "wantsInput", "field_sig": "protected\u00a0boolean wantsInput", "description": "If true, a UI widget will be provided to the user to get input."}], "methods": [{"method_name": "showInputDialog", "method_sig": "public static String showInputDialog (Object message)\n                              throws HeadlessException", "description": "Shows a question-message dialog requesting input from the user. The\n dialog uses the default frame, which usually means it is centered on\n the screen."}, {"method_name": "showInputDialog", "method_sig": "public static String showInputDialog (Object message,\n                                     Object initialSelectionValue)", "description": "Shows a question-message dialog requesting input from the user, with\n the input value initialized to initialSelectionValue. The\n dialog uses the default frame, which usually means it is centered on\n the screen."}, {"method_name": "showInputDialog", "method_sig": "public static String showInputDialog (Component parentComponent,\n                                     Object message)\n                              throws HeadlessException", "description": "Shows a question-message dialog requesting input from the user\n parented to parentComponent.\n The dialog is displayed on top of the Component's\n frame, and is usually positioned below the Component."}, {"method_name": "showInputDialog", "method_sig": "public static String showInputDialog (Component parentComponent,\n                                     Object message,\n                                     Object initialSelectionValue)", "description": "Shows a question-message dialog requesting input from the user and\n parented to parentComponent. The input value will be\n initialized to initialSelectionValue.\n The dialog is displayed on top of the Component's\n frame, and is usually positioned below the Component."}, {"method_name": "showInputDialog", "method_sig": "public static String showInputDialog (Component parentComponent,\n                                     Object message,\n                                     String title,\n                                     int messageType)\n                              throws HeadlessException", "description": "Shows a dialog requesting input from the user parented to\n parentComponent with the dialog having the title\n title and message type messageType."}, {"method_name": "showInputDialog", "method_sig": "public static Object showInputDialog (Component parentComponent,\n                                     Object message,\n                                     String title,\n                                     int messageType,\n                                     Icon icon,\n                                     Object[] selectionValues,\n                                     Object initialSelectionValue)\n                              throws HeadlessException", "description": "Prompts the user for input in a blocking dialog where the\n initial selection, possible selections, and all other options can\n be specified. The user will able to choose from\n selectionValues, where null implies the\n user can input\n whatever they wish, usually by means of a JTextField.\n initialSelectionValue is the initial value to prompt\n the user with. It is up to the UI to decide how best to represent\n the selectionValues, but usually a\n JComboBox, JList, or\n JTextField will be used."}, {"method_name": "showMessageDialog", "method_sig": "public static void showMessageDialog (Component parentComponent,\n                                     Object message)\n                              throws HeadlessException", "description": "Brings up an information-message dialog titled \"Message\"."}, {"method_name": "showMessageDialog", "method_sig": "public static void showMessageDialog (Component parentComponent,\n                                     Object message,\n                                     String title,\n                                     int messageType)\n                              throws HeadlessException", "description": "Brings up a dialog that displays a message using a default\n icon determined by the messageType parameter."}, {"method_name": "showMessageDialog", "method_sig": "public static void showMessageDialog (Component parentComponent,\n                                     Object message,\n                                     String title,\n                                     int messageType,\n                                     Icon icon)\n                              throws HeadlessException", "description": "Brings up a dialog displaying a message, specifying all parameters."}, {"method_name": "showConfirmDialog", "method_sig": "public static int showConfirmDialog (Component parentComponent,\n                                    Object message)\n                             throws HeadlessException", "description": "Brings up a dialog with the options Yes,\n No and Cancel; with the\n title, Select an Option."}, {"method_name": "showConfirmDialog", "method_sig": "public static int showConfirmDialog (Component parentComponent,\n                                    Object message,\n                                    String title,\n                                    int optionType)\n                             throws HeadlessException", "description": "Brings up a dialog where the number of choices is determined\n by the optionType parameter."}, {"method_name": "showConfirmDialog", "method_sig": "public static int showConfirmDialog (Component parentComponent,\n                                    Object message,\n                                    String title,\n                                    int optionType,\n                                    int messageType)\n                             throws HeadlessException", "description": "Brings up a dialog where the number of choices is determined\n by the optionType parameter, where the\n messageType\n parameter determines the icon to display.\n The messageType parameter is primarily used to supply\n a default icon from the Look and Feel."}, {"method_name": "showConfirmDialog", "method_sig": "public static int showConfirmDialog (Component parentComponent,\n                                    Object message,\n                                    String title,\n                                    int optionType,\n                                    int messageType,\n                                    Icon icon)\n                             throws HeadlessException", "description": "Brings up a dialog with a specified icon, where the number of\n choices is determined by the optionType parameter.\n The messageType parameter is primarily used to supply\n a default icon from the look and feel."}, {"method_name": "showOptionDialog", "method_sig": "public static int showOptionDialog (Component parentComponent,\n                                   Object message,\n                                   String title,\n                                   int optionType,\n                                   int messageType,\n                                   Icon icon,\n                                   Object[] options,\n                                   Object initialValue)\n                            throws HeadlessException", "description": "Brings up a dialog with a specified icon, where the initial\n choice is determined by the initialValue parameter and\n the number of choices is determined by the optionType\n parameter.\n \n If optionType is YES_NO_OPTION,\n or YES_NO_CANCEL_OPTION\n and the options parameter is null,\n then the options are\n supplied by the look and feel.\n \n The messageType parameter is primarily used to supply\n a default icon from the look and feel."}, {"method_name": "createDialog", "method_sig": "public JDialog createDialog (Component parentComponent,\n                            String title)\n                     throws HeadlessException", "description": "Creates and returns a new JDialog wrapping\n this centered on the parentComponent\n in the parentComponent's frame.\n title is the title of the returned dialog.\n The returned JDialog will not be resizable by the\n user, however programs can invoke setResizable on\n the JDialog instance to change this property.\n The returned JDialog will be set up such that\n once it is closed, or the user clicks on one of the buttons,\n the optionpane's value property will be set accordingly and\n the dialog will be closed.  Each time the dialog is made visible,\n it will reset the option pane's value property to\n JOptionPane.UNINITIALIZED_VALUE to ensure the\n user's subsequent action closes the dialog properly."}, {"method_name": "createDialog", "method_sig": "public JDialog createDialog (String title)\n                     throws HeadlessException", "description": "Creates and returns a new parentless JDialog\n with the specified title.\n The returned JDialog will not be resizable by the\n user, however programs can invoke setResizable on\n the JDialog instance to change this property.\n The returned JDialog will be set up such that\n once it is closed, or the user clicks on one of the buttons,\n the optionpane's value property will be set accordingly and\n the dialog will be closed.  Each time the dialog is made visible,\n it will reset the option pane's value property to\n JOptionPane.UNINITIALIZED_VALUE to ensure the\n user's subsequent action closes the dialog properly."}, {"method_name": "showInternalMessageDialog", "method_sig": "public static void showInternalMessageDialog (Component parentComponent,\n                                             Object message)", "description": "Brings up an internal confirmation dialog panel. The dialog\n is a information-message dialog titled \"Message\"."}, {"method_name": "showInternalMessageDialog", "method_sig": "public static void showInternalMessageDialog (Component parentComponent,\n                                             Object message,\n                                             String title,\n                                             int messageType)", "description": "Brings up an internal dialog panel that displays a message\n using a default icon determined by the messageType\n parameter."}, {"method_name": "showInternalMessageDialog", "method_sig": "public static void showInternalMessageDialog (Component parentComponent,\n                                             Object message,\n                                             String title,\n                                             int messageType,\n                                             Icon icon)", "description": "Brings up an internal dialog panel displaying a message,\n specifying all parameters."}, {"method_name": "showInternalConfirmDialog", "method_sig": "public static int showInternalConfirmDialog (Component parentComponent,\n                                            Object message)", "description": "Brings up an internal dialog panel with the options Yes, No\n and Cancel; with the title, Select an Option."}, {"method_name": "showInternalConfirmDialog", "method_sig": "public static int showInternalConfirmDialog (Component parentComponent,\n                                            Object message,\n                                            String title,\n                                            int optionType)", "description": "Brings up a internal dialog panel where the number of choices\n is determined by the optionType parameter."}, {"method_name": "showInternalConfirmDialog", "method_sig": "public static int showInternalConfirmDialog (Component parentComponent,\n                                            Object message,\n                                            String title,\n                                            int optionType,\n                                            int messageType)", "description": "Brings up an internal dialog panel where the number of choices\n is determined by the optionType parameter, where\n the messageType parameter determines the icon to display.\n The messageType parameter is primarily used to supply\n a default icon from the Look and Feel."}, {"method_name": "showInternalConfirmDialog", "method_sig": "public static int showInternalConfirmDialog (Component parentComponent,\n                                            Object message,\n                                            String title,\n                                            int optionType,\n                                            int messageType,\n                                            Icon icon)", "description": "Brings up an internal dialog panel with a specified icon, where\n the number of choices is determined by the optionType\n parameter.\n The messageType parameter is primarily used to supply\n a default icon from the look and feel."}, {"method_name": "showInternalOptionDialog", "method_sig": "public static int showInternalOptionDialog (Component parentComponent,\n                                           Object message,\n                                           String title,\n                                           int optionType,\n                                           int messageType,\n                                           Icon icon,\n                                           Object[] options,\n                                           Object initialValue)", "description": "Brings up an internal dialog panel with a specified icon, where\n the initial choice is determined by the initialValue\n parameter and the number of choices is determined by the\n optionType parameter.\n \n If optionType is YES_NO_OPTION, or\n YES_NO_CANCEL_OPTION\n and the options parameter is null,\n then the options are supplied by the Look and Feel.\n \n The messageType parameter is primarily used to supply\n a default icon from the look and feel."}, {"method_name": "showInternalInputDialog", "method_sig": "public static String showInternalInputDialog (Component parentComponent,\n                                             Object message)", "description": "Shows an internal question-message dialog requesting input from\n the user parented to parentComponent. The dialog\n is displayed in the Component's frame,\n and is usually positioned below the Component."}, {"method_name": "showInternalInputDialog", "method_sig": "public static String showInternalInputDialog (Component parentComponent,\n                                             Object message,\n                                             String title,\n                                             int messageType)", "description": "Shows an internal dialog requesting input from the user parented\n to parentComponent with the dialog having the title\n title and message type messageType."}, {"method_name": "showInternalInputDialog", "method_sig": "public static Object showInternalInputDialog (Component parentComponent,\n                                             Object message,\n                                             String title,\n                                             int messageType,\n                                             Icon icon,\n                                             Object[] selectionValues,\n                                             Object initialSelectionValue)", "description": "Prompts the user for input in a blocking internal dialog where\n the initial selection, possible selections, and all other\n options can be specified. The user will able to choose from\n selectionValues, where null\n implies the user can input\n whatever they wish, usually by means of a JTextField.\n initialSelectionValue is the initial value to prompt\n the user with. It is up to the UI to decide how best to represent\n the selectionValues, but usually a\n JComboBox, JList, or\n JTextField will be used."}, {"method_name": "createInternalFrame", "method_sig": "public JInternalFrame createInternalFrame (Component parentComponent,\n                                          String title)", "description": "Creates and returns an instance of JInternalFrame.\n The internal frame is created with the specified title,\n and wrapping the JOptionPane.\n The returned JInternalFrame is\n added to the JDesktopPane ancestor of\n parentComponent, or components\n parent if one its ancestors isn't a JDesktopPane,\n or if parentComponent\n doesn't have a parent then a RuntimeException is thrown."}, {"method_name": "getFrameForComponent", "method_sig": "public static Frame getFrameForComponent (Component parentComponent)\n                                  throws HeadlessException", "description": "Returns the specified component's Frame."}, {"method_name": "getDesktopPaneForComponent", "method_sig": "public static JDesktopPane getDesktopPaneForComponent (Component parentComponent)", "description": "Returns the specified component's desktop pane."}, {"method_name": "setRootFrame", "method_sig": "public static void setRootFrame (Frame newRootFrame)", "description": "Sets the frame to use for class methods in which a frame is\n not provided.\n \nNote:\n It is recommended that rather than using this method you supply a valid parent."}, {"method_name": "getRootFrame", "method_sig": "public static Frame getRootFrame()\n                          throws HeadlessException", "description": "Returns the Frame to use for the class methods in\n which a frame is not provided."}, {"method_name": "setUI", "method_sig": "@BeanProperty(hidden=true,\n              description=\"The UI object that implements the optionpane\\'s LookAndFeel\")\npublic void setUI (OptionPaneUI ui)", "description": "Sets the UI object which implements the L&F for this component."}, {"method_name": "getUI", "method_sig": "public OptionPaneUI getUI()", "description": "Returns the UI object which implements the L&F for this component."}, {"method_name": "updateUI", "method_sig": "public void updateUI()", "description": "Notification from the UIManager that the L&F has changed.\n Replaces the current UI object with the latest version from the\n UIManager."}, {"method_name": "getUIClassID", "method_sig": "@BeanProperty(bound=false)\npublic String getUIClassID()", "description": "Returns the name of the UI class that implements the\n L&F for this component."}, {"method_name": "setMessage", "method_sig": "@BeanProperty(preferred=true,\n              description=\"The optionpane\\'s message object.\")\npublic void setMessage (Object newMessage)", "description": "Sets the option pane's message-object."}, {"method_name": "getMessage", "method_sig": "public Object getMessage()", "description": "Returns the message-object this pane displays."}, {"method_name": "setIcon", "method_sig": "@BeanProperty(preferred=true,\n              description=\"The option pane\\'s type icon.\")\npublic void setIcon (Icon newIcon)", "description": "Sets the icon to display. If non-null, the look and feel\n does not provide an icon."}, {"method_name": "getIcon", "method_sig": "public Icon getIcon()", "description": "Returns the icon this pane displays."}, {"method_name": "setValue", "method_sig": "@BeanProperty(preferred=true,\n              description=\"The option pane\\'s value object.\")\npublic void setValue (Object newValue)", "description": "Sets the value the user has chosen."}, {"method_name": "getValue", "method_sig": "public Object getValue()", "description": "Returns the value the user has selected. UNINITIALIZED_VALUE\n implies the user has not yet made a choice, null means the\n user closed the window with out choosing anything. Otherwise\n the returned value will be one of the options defined in this\n object."}, {"method_name": "setOptions", "method_sig": "@BeanProperty(description=\"The option pane\\'s options objects.\")\npublic void setOptions (Object[] newOptions)", "description": "Sets the options this pane displays. If an element in\n newOptions is a Component\n it is added directly to the pane,\n otherwise a button is created for the element."}, {"method_name": "getOptions", "method_sig": "public Object[] getOptions()", "description": "Returns the choices the user can make."}, {"method_name": "setInitialValue", "method_sig": "@BeanProperty(preferred=true,\n              description=\"The option pane\\'s initial value object.\")\npublic void setInitialValue (Object newInitialValue)", "description": "Sets the initial value that is to be enabled -- the\n Component\n that has the focus when the pane is initially displayed."}, {"method_name": "getInitialValue", "method_sig": "public Object getInitialValue()", "description": "Returns the initial value."}, {"method_name": "setMessageType", "method_sig": "@BeanProperty(preferred=true,\n              description=\"The option pane\\'s message type.\")\npublic void setMessageType (int newType)", "description": "Sets the option pane's message type.\n The message type is used by the Look and Feel to determine the\n icon to display (if not supplied) as well as potentially how to\n lay out the parentComponent."}, {"method_name": "getMessageType", "method_sig": "public int getMessageType()", "description": "Returns the message type."}, {"method_name": "setOptionType", "method_sig": "@BeanProperty(preferred=true,\n              description=\"The option pane\\'s option type.\")\npublic void setOptionType (int newType)", "description": "Sets the options to display.\n The option type is used by the Look and Feel to\n determine what buttons to show (unless options are supplied)."}, {"method_name": "getOptionType", "method_sig": "public int getOptionType()", "description": "Returns the type of options that are displayed."}, {"method_name": "setSelectionValues", "method_sig": "@BeanProperty(description=\"The option pane\\'s selection values.\")\npublic void setSelectionValues (Object[] newValues)", "description": "Sets the input selection values for a pane that provides the user\n with a list of items to choose from. (The UI provides a widget\n for choosing one of the values.)  A null value\n implies the user can input whatever they wish, usually by means\n of a JTextField.\n \n Sets wantsInput to true. Use\n setInitialSelectionValue to specify the initially-chosen\n value. After the pane as been enabled, inputValue is\n set to the value the user has selected."}, {"method_name": "getSelectionValues", "method_sig": "public Object[] getSelectionValues()", "description": "Returns the input selection values."}, {"method_name": "setInitialSelectionValue", "method_sig": "@BeanProperty(description=\"The option pane\\'s initial selection value object.\")\npublic void setInitialSelectionValue (Object newValue)", "description": "Sets the input value that is initially displayed as selected to the user.\n Only used if wantsInput is true."}, {"method_name": "getInitialSelectionValue", "method_sig": "public Object getInitialSelectionValue()", "description": "Returns the input value that is displayed as initially selected to the user."}, {"method_name": "setInputValue", "method_sig": "@BeanProperty(preferred=true,\n              description=\"The option pane\\'s input value object.\")\npublic void setInputValue (Object newValue)", "description": "Sets the input value that was selected or input by the user.\n Only used if wantsInput is true.  Note that this method\n is invoked internally by the option pane (in response to user action)\n and should generally not be called by client programs.  To set the\n input value initially displayed as selected to the user, use\n setInitialSelectionValue."}, {"method_name": "getInputValue", "method_sig": "public Object getInputValue()", "description": "Returns the value the user has input, if wantsInput\n is true."}, {"method_name": "getMaxCharactersPerLineCount", "method_sig": "@BeanProperty(bound=false)\npublic int getMaxCharactersPerLineCount()", "description": "Returns the maximum number of characters to place on a line in a\n message. Default is to return Integer.MAX_VALUE.\n The value can be\n changed by overriding this method in a subclass."}, {"method_name": "setWantsInput", "method_sig": "@BeanProperty(preferred=true,\n              description=\"Flag which allows the user to input a value.\")\npublic void setWantsInput (boolean newValue)", "description": "Sets the wantsInput property.\n If newValue is true, an input component\n (such as a text field or combo box) whose parent is\n parentComponent is provided to\n allow the user to input a value. If getSelectionValues\n returns a non-null array, the input value is one of the\n objects in that array. Otherwise the input value is whatever\n the user inputs.\n \n This is a bound property."}, {"method_name": "getWantsInput", "method_sig": "public boolean getWantsInput()", "description": "Returns the value of the wantsInput property."}, {"method_name": "selectInitialValue", "method_sig": "public void selectInitialValue()", "description": "Requests that the initial value be selected, which will set\n focus to the initial value. This method\n should be invoked after the window containing the option pane\n is made visible."}, {"method_name": "paramString", "method_sig": "protected String paramString()", "description": "Returns a string representation of this JOptionPane.\n This method\n is intended to be used only for debugging purposes, and the\n content and format of the returned string may vary between\n implementations. The returned string may be empty but may not\n be null."}, {"method_name": "getAccessibleContext", "method_sig": "@BeanProperty(bound=false,\n              expert=true,\n              description=\"The AccessibleContext associated with this option pane\")\npublic AccessibleContext getAccessibleContext()", "description": "Returns the AccessibleContext associated with this JOptionPane.\n For option panes, the AccessibleContext takes the form of an\n AccessibleJOptionPane.\n A new AccessibleJOptionPane instance is created if necessary."}]}