{"name": "Interface TransactionalWriter", "module": "java.sql.rowset", "package": "javax.sql.rowset.spi", "text": "A specialized interface that facilitates an extension of the standard\n SyncProvider abstract class so that it has finer grained\n transaction control.\n \n If one or more disconnected RowSet objects are participating\n in a global transaction, they may wish to coordinate their synchronization\n commits to preserve data integrity and reduce the number of\n synchronization exceptions. If this is the case, an application should set\n the CachedRowSet constant COMMIT_ON_ACCEPT_CHANGES\n to false and use the commit and rollback\n methods defined in this interface to manage transaction boundaries.", "codes": ["public interface TransactionalWriter\nextends RowSetWriter"], "fields": [], "methods": [{"method_name": "commit", "method_sig": "void commit()\n     throws SQLException", "description": "Makes permanent all changes that have been performed by the\n acceptChanges method since the last call to either the\n commit or rollback methods.\n This method should be used only when auto-commit mode has been disabled."}, {"method_name": "rollback", "method_sig": "void rollback()\n       throws SQLException", "description": "Undoes all changes made in the current transaction. This method should be\n used only when auto-commit mode has been disabled."}, {"method_name": "rollback", "method_sig": "void rollback (Savepoint s)\n       throws SQLException", "description": "Undoes all changes made in the current transaction made prior to the given\n Savepoint object.  This method should be used only when auto-commit\n mode has been disabled."}]}