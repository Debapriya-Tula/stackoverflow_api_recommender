{"name": "Class KeyManagerFactory", "module": "java.base", "package": "javax.net.ssl", "text": "This class acts as a factory for key managers based on a\n source of key material. Each key manager manages a specific\n type of key material for use by secure sockets. The key\n material is based on a KeyStore and/or provider specific sources.", "codes": ["public class KeyManagerFactory\nextends Object"], "fields": [], "methods": [{"method_name": "getDefaultAlgorithm", "method_sig": "public static final String getDefaultAlgorithm()", "description": "Obtains the default KeyManagerFactory algorithm name.\n\n The default algorithm can be changed at runtime by setting\n the value of the ssl.KeyManagerFactory.algorithm\n security property to the desired algorithm name."}, {"method_name": "getAlgorithm", "method_sig": "public final String getAlgorithm()", "description": "Returns the algorithm name of this KeyManagerFactory object.\n\n This is the same name that was specified in one of the\n getInstance calls that created this\n KeyManagerFactory object."}, {"method_name": "getInstance", "method_sig": "public static final KeyManagerFactory getInstance (String algorithm)\n                                           throws NoSuchAlgorithmException", "description": "Returns a KeyManagerFactory object that acts as a\n factory for key managers.\n\n  This method traverses the list of registered security Providers,\n starting with the most preferred Provider.\n A new KeyManagerFactory object encapsulating the\n KeyManagerFactorySpi implementation from the first\n Provider that supports the specified algorithm is returned.\n\n  Note that the list of registered providers may be retrieved via\n the Security.getProviders() method."}, {"method_name": "getInstance", "method_sig": "public static final KeyManagerFactory getInstance (String algorithm,\n                                                  String provider)\n                                           throws NoSuchAlgorithmException,\n                                                  NoSuchProviderException", "description": "Returns a KeyManagerFactory object that acts as a\n factory for key managers.\n\n  A new KeyManagerFactory object encapsulating the\n KeyManagerFactorySpi implementation from the specified provider\n is returned.  The specified provider must be registered\n in the security provider list.\n\n  Note that the list of registered providers may be retrieved via\n the Security.getProviders() method."}, {"method_name": "getInstance", "method_sig": "public static final KeyManagerFactory getInstance (String algorithm,\n                                                  Provider provider)\n                                           throws NoSuchAlgorithmException", "description": "Returns a KeyManagerFactory object that acts as a\n factory for key managers.\n\n  A new KeyManagerFactory object encapsulating the\n KeyManagerFactorySpi implementation from the specified Provider\n object is returned.  Note that the specified Provider object\n does not have to be registered in the provider list."}, {"method_name": "getProvider", "method_sig": "public final Provider getProvider()", "description": "Returns the provider of this KeyManagerFactory object."}, {"method_name": "init", "method_sig": "public final void init (KeyStore ks,\n                       char[] password)\n                throws KeyStoreException,\n                       NoSuchAlgorithmException,\n                       UnrecoverableKeyException", "description": "Initializes this factory with a source of key material.\n \n The provider typically uses a KeyStore for obtaining\n key material for use during secure socket negotiations.\n The KeyStore is generally password-protected.\n \n For more flexible initialization, please see\n init(ManagerFactoryParameters)."}, {"method_name": "init", "method_sig": "public final void init (ManagerFactoryParameters spec)\n                throws InvalidAlgorithmParameterException", "description": "Initializes this factory with a source of provider-specific\n key material.\n \n In some cases, initialization parameters other than a keystore\n and password may be needed by a provider.  Users of that\n particular provider are expected to pass an implementation of\n the appropriate ManagerFactoryParameters as\n defined by the provider.  The provider can then call the\n specified methods in the ManagerFactoryParameters\n implementation to obtain the needed information."}, {"method_name": "getKeyManagers", "method_sig": "public final KeyManager[] getKeyManagers()", "description": "Returns one key manager for each type of key material."}]}