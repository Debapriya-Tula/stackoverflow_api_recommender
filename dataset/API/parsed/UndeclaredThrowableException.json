{"name": "Class UndeclaredThrowableException", "module": "java.base", "package": "java.lang.reflect", "text": "Thrown by a method invocation on a proxy instance if its invocation\n handler's invoke method throws a\n checked exception (a Throwable that is not assignable\n to RuntimeException or Error) that\n is not assignable to any of the exception types declared in the\n throws clause of the method that was invoked on the\n proxy instance and dispatched to the invocation handler.\n\n An UndeclaredThrowableException instance contains\n the undeclared checked exception that was thrown by the invocation\n handler, and it can be retrieved with the\n getUndeclaredThrowable() method.\n UndeclaredThrowableException extends\n RuntimeException, so it is an unchecked exception\n that wraps a checked exception.\n\n As of release 1.4, this exception has been retrofitted to\n conform to the general purpose exception-chaining mechanism.  The\n \"undeclared checked exception that was thrown by the invocation\n handler\" that may be provided at construction time and accessed via\n the getUndeclaredThrowable() method is now known as the\n cause, and may be accessed via the Throwable.getCause() method, as well as the aforementioned \"legacy\n method.\"", "codes": ["public class UndeclaredThrowableException\nextends RuntimeException"], "fields": [], "methods": [{"method_name": "getUndeclaredThrowable", "method_sig": "public Throwable getUndeclaredThrowable()", "description": "Returns the Throwable instance wrapped in this\n UndeclaredThrowableException, which may be null.\n\n This method predates the general-purpose exception chaining facility.\n The Throwable.getCause() method is now the preferred means of\n obtaining this information."}, {"method_name": "getCause", "method_sig": "public Throwable getCause()", "description": "Returns the cause of this exception (the Throwable\n instance wrapped in this UndeclaredThrowableException,\n which may be null)."}]}