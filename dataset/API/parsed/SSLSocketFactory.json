{"name": "Class SSLSocketFactory", "module": "java.base", "package": "javax.net.ssl", "text": "SSLSocketFactorys create SSLSockets.", "codes": ["public abstract class SSLSocketFactory\nextends SocketFactory"], "fields": [], "methods": [{"method_name": "getDefault", "method_sig": "public static SocketFactory getDefault()", "description": "Returns the default SSL socket factory.\n\n The first time this method is called, the security property\n \"ssl.SocketFactory.provider\" is examined. If it is non-null, a class by\n that name is loaded and instantiated. If that is successful and the\n object is an instance of SSLSocketFactory, it is made the default SSL\n socket factory.\n\n Otherwise, this method returns\n SSLContext.getDefault().getSocketFactory(). If that\n call fails, an inoperative factory is returned."}, {"method_name": "getDefaultCipherSuites", "method_sig": "public abstract String[] getDefaultCipherSuites()", "description": "Returns the list of cipher suites which are enabled by default.\n Unless a different list is enabled, handshaking on an SSL connection\n will use one of these cipher suites.  The minimum quality of service\n for these defaults requires confidentiality protection and server\n authentication (that is, no anonymous cipher suites).\n \n The returned array includes cipher suites from the list of standard\n cipher suite names in the \n JSSE Cipher Suite Names section of the Java Cryptography\n Architecture Standard Algorithm Name Documentation, and may also\n include other cipher suites that the provider supports."}, {"method_name": "getSupportedCipherSuites", "method_sig": "public abstract String[] getSupportedCipherSuites()", "description": "Returns the names of the cipher suites which could be enabled for use\n on an SSL connection.  Normally, only a subset of these will actually\n be enabled by default, since this list may include cipher suites which\n do not meet quality of service requirements for those defaults.  Such\n cipher suites are useful in specialized applications.\n \n The returned array includes cipher suites from the list of standard\n cipher suite names in the \n JSSE Cipher Suite Names section of the Java Cryptography\n Architecture Standard Algorithm Name Documentation, and may also\n include other cipher suites that the provider supports."}, {"method_name": "createSocket", "method_sig": "public abstract Socket createSocket (Socket s,\n                                    String host,\n                                    int port,\n                                    boolean autoClose)\n                             throws IOException", "description": "Returns a socket layered over an existing socket connected to the named\n host, at the given port.  This constructor can be used when tunneling SSL\n through a proxy or when negotiating the use of SSL over an existing\n socket. The host and port refer to the logical peer destination.\n This socket is configured using the socket options established for\n this factory."}, {"method_name": "createSocket", "method_sig": "public Socket createSocket (Socket s,\n                           InputStream consumed,\n                           boolean autoClose)\n                    throws IOException", "description": "Creates a server mode Socket layered over an\n existing connected socket, and is able to read data which has\n already been consumed/removed from the Socket's\n underlying InputStream.\n \n This method can be used by a server application that needs to\n observe the inbound data but still create valid SSL/TLS\n connections: for example, inspection of Server Name Indication\n (SNI) extensions (See section 3 of TLS Extensions\n (RFC6066)).  Data that has been already removed from the\n underlying InputStream should be loaded into the\n consumed stream before this method is called, perhaps\n using a ByteArrayInputStream.  When this\n Socket begins handshaking, it will read all of the data in\n consumed until it reaches EOF, then all further\n data is read from the underlying InputStream as\n usual.\n \n The returned socket is configured using the socket options\n established for this factory, and is set to use server mode when\n handshaking (see SSLSocket.setUseClientMode(boolean))."}]}