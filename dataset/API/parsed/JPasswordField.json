{"name": "Class JPasswordField", "module": "java.desktop", "package": "javax.swing", "text": "JPasswordField is a lightweight component that allows\n the editing of a single line of text where the view indicates\n something was typed, but does not show the original characters.\n You can find further information and examples in\n How to Use Text Fields,\n a section in The Java Tutorial.\n\nJPasswordField is intended\n to be source-compatible with java.awt.TextField\n used with echoChar set.  It is provided separately\n to make it easier to safely change the UI for the\n JTextField without affecting password entries.\n \nNOTE:\n By default, JPasswordField disables input methods; otherwise, input\n characters could be visible while they were composed using input methods.\n If an application needs the input methods support, please use the\n inherited method, enableInputMethods(true).\n \nWarning: Swing is not thread safe. For more\n information see Swing's Threading\n Policy.\n \nWarning:\n Serialized objects of this class will not be compatible with\n future Swing releases. The current serialization support is\n appropriate for short term storage or RMI between applications running\n the same version of Swing.  As of 1.4, support for long term storage\n of all JavaBeans\u2122\n has been added to the java.beans package.\n Please see XMLEncoder.", "codes": ["@JavaBean(description=\"Allows the editing of a line of text but doesn\\'t show the characters.\")\npublic class JPasswordField\nextends JTextField"], "fields": [], "methods": [{"method_name": "getUIClassID", "method_sig": "@BeanProperty(bound=false)\npublic String getUIClassID()", "description": "Returns the name of the L&F class that renders this component."}, {"method_name": "updateUI", "method_sig": "public void updateUI()", "description": "Reloads the pluggable UI.  The key used to fetch the\n new interface is getUIClassID().  The type of\n the UI is TextUI.  invalidate\n is called after setting the UI."}, {"method_name": "getEchoChar", "method_sig": "public char getEchoChar()", "description": "Returns the character to be used for echoing.  The default is '*'.\n The default may be different depending on the currently running Look\n and Feel. For example, Metal/Ocean's default is a bullet character."}, {"method_name": "setEchoChar", "method_sig": "@BeanProperty(bound=false,\n              visualUpdate=true,\n              description=\"character to display in place of the real characters\")\npublic void setEchoChar (char c)", "description": "Sets the echo character for this JPasswordField.\n Note that this is largely a suggestion, since the\n view that gets installed can use whatever graphic techniques\n it desires to represent the field.  Setting a value of 0 indicates\n that you wish to see the text as it is typed, similar to\n the behavior of a standard JTextField."}, {"method_name": "echoCharIsSet", "method_sig": "public boolean echoCharIsSet()", "description": "Returns true if this JPasswordField has a character\n set for echoing.  A character is considered to be set if the echo\n character is not 0."}, {"method_name": "cut", "method_sig": "public void cut()", "description": "Invokes provideErrorFeedback on the current\n look and feel, which typically initiates an error beep.\n The normal behavior of transferring the\n currently selected range in the associated text model\n to the system clipboard, and removing the contents from\n the model, is not acceptable for a password field."}, {"method_name": "copy", "method_sig": "public void copy()", "description": "Invokes provideErrorFeedback on the current\n look and feel, which typically initiates an error beep.\n The normal behavior of transferring the\n currently selected range in the associated text model\n to the system clipboard, and leaving the contents from\n the model, is not acceptable for a password field."}, {"method_name": "getText", "method_sig": "@Deprecated\npublic String getText()", "description": "Returns the text contained in this TextComponent.\n If the underlying document is null, will give a\n NullPointerException.\n \n For security reasons, this method is deprecated.  Use the\n     * getPassword method instead."}, {"method_name": "getText", "method_sig": "@Deprecated\npublic String getText (int offs,\n                      int len)\n               throws BadLocationException", "description": "Fetches a portion of the text represented by the\n component.  Returns an empty string if length is 0.\n \n For security reasons, this method is deprecated.  Use the\n getPassword method instead."}, {"method_name": "getPassword", "method_sig": "@BeanProperty(bound=false)\npublic char[] getPassword()", "description": "Returns the text contained in this TextComponent.\n If the underlying document is null, will give a\n NullPointerException.  For stronger\n security, it is recommended that the returned character array be\n cleared after use by setting each character to zero."}, {"method_name": "paramString", "method_sig": "protected String paramString()", "description": "Returns a string representation of this JPasswordField.\n This method is intended to be used only for debugging purposes, and the\n content and format of the returned string may vary between\n implementations. The returned string may be empty but may not\n be null."}, {"method_name": "getAccessibleContext", "method_sig": "@BeanProperty(bound=false)\npublic AccessibleContext getAccessibleContext()", "description": "Returns the AccessibleContext associated with this\n JPasswordField. For password fields, the\n AccessibleContext takes the form of an\n AccessibleJPasswordField.\n A new AccessibleJPasswordField instance is created\n if necessary."}]}