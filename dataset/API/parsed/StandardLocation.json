{"name": "Enum StandardLocation", "module": "java.compiler", "package": "javax.tools", "text": "Standard locations of file objects.", "codes": ["public enum StandardLocation\nextends Enum<StandardLocation>\nimplements JavaFileManager.Location"], "fields": [], "methods": [{"method_name": "values", "method_sig": "public static StandardLocation[] values()", "description": "Returns an array containing the constants of this enum type, in\nthe order they are declared. This method may be used to iterate\nover the constants as follows:\n\nfor (StandardLocation c : StandardLocation.values())\n\u00a0   System.out.println(c);\n"}, {"method_name": "valueOf", "method_sig": "public static StandardLocation valueOf (String name)", "description": "Returns the enum constant of this type with the specified name.\nThe string must match exactly an identifier used to declare an\nenum constant in this type.  (Extraneous whitespace characters are \nnot permitted.)"}, {"method_name": "locationFor", "method_sig": "public static JavaFileManager.Location locationFor (String name)", "description": "Returns a location object with the given name.  The following\n property must hold: locationFor(x) ==\n locationFor(y) if and only if x.equals(y).\n The returned location will be an output location if and only if\n name ends with \"_OUTPUT\". It will be considered to\n be a module-oriented location if the name contains the word\n \"MODULE\"."}, {"method_name": "isModuleOrientedLocation", "method_sig": "public boolean isModuleOrientedLocation()", "description": "Indicates if this location is module-oriented location, and therefore\n expected to contain classes in a module/package/class\n hierarchy, as compared to a package-oriented location, which\n is expected to contain classes in a package/class hierarchy.\n The result of this method is undefined if this is an output\n location."}]}