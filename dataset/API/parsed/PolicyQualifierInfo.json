{"name": "Class PolicyQualifierInfo", "module": "java.base", "package": "java.security.cert", "text": "An immutable policy qualifier represented by the ASN.1 PolicyQualifierInfo\n structure.\n\n The ASN.1 definition is as follows:\n \n   PolicyQualifierInfo ::= SEQUENCE {\n        policyQualifierId       PolicyQualifierId,\n        qualifier               ANY DEFINED BY policyQualifierId }\n \n\n A certificate policies extension, if present in an X.509 version 3\n certificate, contains a sequence of one or more policy information terms,\n each of which consists of an object identifier (OID) and optional\n qualifiers. In an end-entity certificate, these policy information terms\n indicate the policy under which the certificate has been issued and the\n purposes for which the certificate may be used. In a CA certificate, these\n policy information terms limit the set of policies for certification paths\n which include this certificate.\n \n A Set of PolicyQualifierInfo objects are returned\n by the PolicyNode.getPolicyQualifiers\n method. This allows applications with specific policy requirements to\n process and validate each policy qualifier. Applications that need to\n process policy qualifiers should explicitly set the\n policyQualifiersRejected flag to false (by calling the\n PKIXParameters.setPolicyQualifiersRejected method) before validating\n a certification path.\n\n Note that the PKIX certification path validation algorithm specifies\n that any policy qualifier in a certificate policies extension that is\n marked critical must be processed and validated. Otherwise the\n certification path must be rejected. If the\n policyQualifiersRejected flag is set to false, it is up to\n the application to validate all policy qualifiers in this manner in order\n to be PKIX compliant.\n\n Concurrent Access\nAll PolicyQualifierInfo objects must be immutable and\n thread-safe. That is, multiple threads may concurrently invoke the\n methods defined in this class on a single PolicyQualifierInfo\n object (or more than one) with no ill effects. Requiring\n PolicyQualifierInfo objects to be immutable and thread-safe\n allows them to be passed around to various pieces of code without\n worrying about coordinating access.", "codes": ["public class PolicyQualifierInfo\nextends Object"], "fields": [], "methods": [{"method_name": "getPolicyQualifierId", "method_sig": "public final String getPolicyQualifierId()", "description": "Returns the policyQualifierId field of this\n PolicyQualifierInfo. The policyQualifierId\n is an Object Identifier (OID) represented by a set of nonnegative\n integers separated by periods."}, {"method_name": "getEncoded", "method_sig": "public final byte[] getEncoded()", "description": "Returns the ASN.1 DER encoded form of this\n PolicyQualifierInfo."}, {"method_name": "getPolicyQualifier", "method_sig": "public final byte[] getPolicyQualifier()", "description": "Returns the ASN.1 DER encoded form of the qualifier\n field of this PolicyQualifierInfo."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Return a printable representation of this\n PolicyQualifierInfo."}]}