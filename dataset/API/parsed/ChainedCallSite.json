{"name": "Class ChainedCallSite", "module": "jdk.dynalink", "package": "jdk.dynalink.support", "text": "A relinkable call site that implements a polymorphic inline caching strategy.\n It remembers up to 8 GuardedInvocations it was linked with, and on\n each relink request builds a cascading chain of method handles of one\n invocation falling back to the next one. The number of remembered invocations\n can be customized by overriding getMaxChainLength() in a subclass.\n When this call site is relinked with a new invocation and the length of the\n chain is already at the maximum, it will throw away the oldest invocation.\n Invocations with invalidated switch points and ones for which their\n invalidating exception triggered are removed eagerly from the chain. The\n invocations are never reordered; the most recently linked method handle is\n always at the start of the chain and the least recently linked at its end.\n The call site can be safely relinked on more than one thread concurrently.\n Race conditions in linking are resolved by throwing away the\n GuardedInvocation produced on the losing thread without incorporating\n it into the chain, so it can lead to repeated linking for the same arguments.", "codes": ["public class ChainedCallSite\nextends AbstractRelinkableCallSite"], "fields": [], "methods": [{"method_name": "getMaxChainLength", "method_sig": "protected int getMaxChainLength()", "description": "The maximum number of method handles in the chain. Defaults to 8. You can\n override it in a subclass if you need to change the value."}]}