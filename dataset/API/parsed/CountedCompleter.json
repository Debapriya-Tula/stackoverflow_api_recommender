{"name": "Class CountedCompleter<T>", "module": "java.base", "package": "java.util.concurrent", "text": "A ForkJoinTask with a completion action performed when\n triggered and there are no remaining pending actions.\n CountedCompleters are in general more robust in the\n presence of subtask stalls and blockage than are other forms of\n ForkJoinTasks, but are less intuitive to program.  Uses of\n CountedCompleter are similar to those of other completion based\n components (such as CompletionHandler)\n except that multiple pending completions may be necessary\n to trigger the completion action onCompletion(CountedCompleter),\n not just one.\n Unless initialized otherwise, the pending\n count starts at zero, but may be (atomically) changed using\n methods setPendingCount(int), addToPendingCount(int), and\n compareAndSetPendingCount(int, int). Upon invocation of tryComplete(), if the pending action count is nonzero, it is\n decremented; otherwise, the completion action is performed, and if\n this completer itself has a completer, the process is continued\n with its completer.  As is the case with related synchronization\n components such as Phaser and Semaphore, these methods\n affect only internal counts; they do not establish any further\n internal bookkeeping. In particular, the identities of pending\n tasks are not maintained. As illustrated below, you can create\n subclasses that do record some or all pending tasks or their\n results when needed.  As illustrated below, utility methods\n supporting customization of completion traversals are also\n provided. However, because CountedCompleters provide only basic\n synchronization mechanisms, it may be useful to create further\n abstract subclasses that maintain linkages, fields, and additional\n support methods appropriate for a set of related usages.\n\n A concrete CountedCompleter class must define method compute(), that should in most cases (as illustrated below), invoke\n tryComplete() once before returning. The class may also\n optionally override method onCompletion(CountedCompleter)\n to perform an action upon normal completion, and method\n onExceptionalCompletion(Throwable, CountedCompleter) to\n perform an action upon any exception.\n\n CountedCompleters most often do not bear results, in which case\n they are normally declared as CountedCompleter<Void>, and\n will always return null as a result value.  In other cases,\n you should override method getRawResult() to provide a\n result from join(), invoke(), and related methods.  In\n general, this method should return the value of a field (or a\n function of one or more fields) of the CountedCompleter object that\n holds the result upon completion. Method setRawResult(T) by\n default plays no role in CountedCompleters.  It is possible, but\n rarely applicable, to override this method to maintain other\n objects or fields holding result data.\n\n A CountedCompleter that does not itself have a completer (i.e.,\n one for which getCompleter() returns null) can be\n used as a regular ForkJoinTask with this added functionality.\n However, any completer that in turn has another completer serves\n only as an internal helper for other computations, so its own task\n status (as reported in methods such as Future.isDone())\n is arbitrary; this status changes only upon explicit invocations of\n complete(T), ForkJoinTask.cancel(boolean),\n ForkJoinTask.completeExceptionally(Throwable) or upon\n exceptional completion of method compute. Upon any\n exceptional completion, the exception may be relayed to a task's\n completer (and its completer, and so on), if one exists and it has\n not otherwise already completed. Similarly, cancelling an internal\n CountedCompleter has only a local effect on that completer, so is\n not often useful.\n\n Sample Usages.\nParallel recursive decomposition. CountedCompleters may\n be arranged in trees similar to those often used with RecursiveActions, although the constructions involved in setting\n them up typically vary. Here, the completer of each task is its\n parent in the computation tree. Even though they entail a bit more\n bookkeeping, CountedCompleters may be better choices when applying\n a possibly time-consuming operation (that cannot be further\n subdivided) to each element of an array or collection; especially\n when the operation takes a significantly different amount of time\n to complete for some elements than others, either because of\n intrinsic variation (for example I/O) or auxiliary effects such as\n garbage collection.  Because CountedCompleters provide their own\n continuations, other tasks need not block waiting to perform them.\n\n For example, here is an initial version of a utility method that\n uses divide-by-two recursive decomposition to divide work into\n single pieces (leaf tasks). Even when work is split into individual\n calls, tree-based techniques are usually preferable to directly\n forking leaf tasks, because they reduce inter-thread communication\n and improve load balancing. In the recursive case, the second of\n each pair of subtasks to finish triggers completion of their parent\n (because no result combination is performed, the default no-op\n implementation of method onCompletion is not overridden).\n The utility method sets up the root task and invokes it (here,\n implicitly using the ForkJoinPool.commonPool()).  It is\n straightforward and reliable (but not optimal) to always set the\n pending count to the number of child tasks and call \n tryComplete() immediately before returning.\n\n  \n public static <E> void forEach(E[] array, Consumer<E> action) {\n   class Task extends CountedCompleter<Void> {\n     final int lo, hi;\n     Task(Task parent, int lo, int hi) {\n       super(parent); this.lo = lo; this.hi = hi;\n     }\n\n     public void compute() {\n       if (hi - lo >= 2) {\n         int mid = (lo + hi) >>> 1;\n         // must set pending count before fork\n         setPendingCount(2);\n         new Task(this, mid, hi).fork(); // right child\n         new Task(this, lo, mid).fork(); // left child\n       }\n       else if (hi > lo)\n         action.accept(array[lo]);\n       tryComplete();\n     }\n   }\n   new Task(null, 0, array.length).invoke();\n }\n\n This design can be improved by noticing that in the recursive case,\n the task has nothing to do after forking its right task, so can\n directly invoke its left task before returning. (This is an analog\n of tail recursion removal.)  Also, when the last action in a task\n is to fork or invoke a subtask (a \"tail call\"), the call to \n tryComplete() can be optimized away, at the cost of making the\n pending count look \"off by one\".\n\n  \n     public void compute() {\n       if (hi - lo >= 2) {\n         int mid = (lo + hi) >>> 1;\n         setPendingCount(1); // looks off by one, but correct!\n         new Task(this, mid, hi).fork(); // right child\n         new Task(this, lo, mid).compute(); // direct invoke\n       } else {\n         if (hi > lo)\n           action.accept(array[lo]);\n         tryComplete();\n       }\n     }\n\n As a further optimization, notice that the left task need not even exist.\n Instead of creating a new one, we can continue using the original task,\n and add a pending count for each fork.  Additionally, because no task\n in this tree implements an onCompletion(CountedCompleter) method,\n tryComplete can be replaced with propagateCompletion().\n\n  \n     public void compute() {\n       int n = hi - lo;\n       for (; n >= 2; n /= 2) {\n         addToPendingCount(1);\n         new Task(this, lo + n/2, lo + n).fork();\n       }\n       if (n > 0)\n         action.accept(array[lo]);\n       propagateCompletion();\n     }\n\n When pending counts can be precomputed, they can be established in\n the constructor:\n\n  \n public static <E> void forEach(E[] array, Consumer<E> action) {\n   class Task extends CountedCompleter<Void> {\n     final int lo, hi;\n     Task(Task parent, int lo, int hi) {\n       super(parent, 31 - Integer.numberOfLeadingZeros(hi - lo));\n       this.lo = lo; this.hi = hi;\n     }\n\n     public void compute() {\n       for (int n = hi - lo; n >= 2; n /= 2)\n         new Task(this, lo + n/2, lo + n).fork();\n       action.accept(array[lo]);\n       propagateCompletion();\n     }\n   }\n   if (array.length > 0)\n     new Task(null, 0, array.length).invoke();\n }\n\n Additional optimizations of such classes might entail specializing\n classes for leaf steps, subdividing by say, four, instead of two\n per iteration, and using an adaptive threshold instead of always\n subdividing down to single elements.\n\n Searching. A tree of CountedCompleters can search for a\n value or property in different parts of a data structure, and\n report a result in an AtomicReference as\n soon as one is found. The others can poll the result to avoid\n unnecessary work. (You could additionally cancel other tasks, but it is usually simpler and more efficient\n to just let them notice that the result is set and if so skip\n further processing.)  Illustrating again with an array using full\n partitioning (again, in practice, leaf tasks will almost always\n process more than one element):\n\n  \n class Searcher<E> extends CountedCompleter<E> {\n   final E[] array; final AtomicReference<E> result; final int lo, hi;\n   Searcher(CountedCompleter<?> p, E[] array, AtomicReference<E> result, int lo, int hi) {\n     super(p);\n     this.array = array; this.result = result; this.lo = lo; this.hi = hi;\n   }\n   public E getRawResult() { return result.get(); }\n   public void compute() { // similar to ForEach version 3\n     int l = lo, h = hi;\n     while (result.get() == null && h >= l) {\n       if (h - l >= 2) {\n         int mid = (l + h) >>> 1;\n         addToPendingCount(1);\n         new Searcher(this, array, result, mid, h).fork();\n         h = mid;\n       }\n       else {\n         E x = array[l];\n         if (matches(x) && result.compareAndSet(null, x))\n           quietlyCompleteRoot(); // root task is now joinable\n         break;\n       }\n     }\n     tryComplete(); // normally complete whether or not found\n   }\n   boolean matches(E e) { ... } // return true if found\n\n   public static <E> E search(E[] array) {\n       return new Searcher<E>(null, array, new AtomicReference<E>(), 0, array.length).invoke();\n   }\n }\n\n In this example, as well as others in which tasks have no other\n effects except to compareAndSet a common result, the\n trailing unconditional invocation of tryComplete could be\n made conditional (if (result.get() == null) tryComplete();)\n because no further bookkeeping is required to manage completions\n once the root task completes.\n\n Recording subtasks. CountedCompleter tasks that combine\n results of multiple subtasks usually need to access these results\n in method onCompletion(CountedCompleter). As illustrated in the following\n class (that performs a simplified form of map-reduce where mappings\n and reductions are all of type E), one way to do this in\n divide and conquer designs is to have each subtask record its\n sibling, so that it can be accessed in method onCompletion.\n This technique applies to reductions in which the order of\n combining left and right results does not matter; ordered\n reductions require explicit left/right designations.  Variants of\n other streamlinings seen in the above examples may also apply.\n\n  \n class MyMapper<E> { E apply(E v) {  ...  } }\n class MyReducer<E> { E apply(E x, E y) {  ...  } }\n class MapReducer<E> extends CountedCompleter<E> {\n   final E[] array; final MyMapper<E> mapper;\n   final MyReducer<E> reducer; final int lo, hi;\n   MapReducer<E> sibling;\n   E result;\n   MapReducer(CountedCompleter<?> p, E[] array, MyMapper<E> mapper,\n              MyReducer<E> reducer, int lo, int hi) {\n     super(p);\n     this.array = array; this.mapper = mapper;\n     this.reducer = reducer; this.lo = lo; this.hi = hi;\n   }\n   public void compute() {\n     if (hi - lo >= 2) {\n       int mid = (lo + hi) >>> 1;\n       MapReducer<E> left = new MapReducer(this, array, mapper, reducer, lo, mid);\n       MapReducer<E> right = new MapReducer(this, array, mapper, reducer, mid, hi);\n       left.sibling = right;\n       right.sibling = left;\n       setPendingCount(1); // only right is pending\n       right.fork();\n       left.compute();     // directly execute left\n     }\n     else {\n       if (hi > lo)\n           result = mapper.apply(array[lo]);\n       tryComplete();\n     }\n   }\n   public void onCompletion(CountedCompleter<?> caller) {\n     if (caller != this) {\n       MapReducer<E> child = (MapReducer<E>)caller;\n       MapReducer<E> sib = child.sibling;\n       if (sib == null || sib.result == null)\n         result = child.result;\n       else\n         result = reducer.apply(child.result, sib.result);\n     }\n   }\n   public E getRawResult() { return result; }\n\n   public static <E> E mapReduce(E[] array, MyMapper<E> mapper, MyReducer<E> reducer) {\n     return new MapReducer<E>(null, array, mapper, reducer,\n                              0, array.length).invoke();\n   }\n }\n\n Here, method onCompletion takes a form common to many\n completion designs that combine results. This callback-style method\n is triggered once per task, in either of the two different contexts\n in which the pending count is, or becomes, zero: (1) by a task\n itself, if its pending count is zero upon invocation of \n tryComplete, or (2) by any of its subtasks when they complete and\n decrement the pending count to zero. The caller argument\n distinguishes cases.  Most often, when the caller is this,\n no action is necessary. Otherwise the caller argument can be used\n (usually via a cast) to supply a value (and/or links to other\n values) to be combined.  Assuming proper use of pending counts, the\n actions inside onCompletion occur (once) upon completion of\n a task and its subtasks. No additional synchronization is required\n within this method to ensure thread safety of accesses to fields of\n this task or other completed tasks.\n\n Completion Traversals. If using onCompletion to\n process completions is inapplicable or inconvenient, you can use\n methods firstComplete() and nextComplete() to create\n custom traversals.  For example, to define a MapReducer that only\n splits out right-hand tasks in the form of the third ForEach\n example, the completions must cooperatively reduce along\n unexhausted subtask links, which can be done as follows:\n\n  \n class MapReducer<E> extends CountedCompleter<E> { // version 2\n   final E[] array; final MyMapper<E> mapper;\n   final MyReducer<E> reducer; final int lo, hi;\n   MapReducer<E> forks, next; // record subtask forks in list\n   E result;\n   MapReducer(CountedCompleter<?> p, E[] array, MyMapper<E> mapper,\n              MyReducer<E> reducer, int lo, int hi, MapReducer<E> next) {\n     super(p);\n     this.array = array; this.mapper = mapper;\n     this.reducer = reducer; this.lo = lo; this.hi = hi;\n     this.next = next;\n   }\n   public void compute() {\n     int l = lo, h = hi;\n     while (h - l >= 2) {\n       int mid = (l + h) >>> 1;\n       addToPendingCount(1);\n       (forks = new MapReducer(this, array, mapper, reducer, mid, h, forks)).fork();\n       h = mid;\n     }\n     if (h > l)\n       result = mapper.apply(array[l]);\n     // process completions by reducing along and advancing subtask links\n     for (CountedCompleter<?> c = firstComplete(); c != null; c = c.nextComplete()) {\n       for (MapReducer t = (MapReducer)c, s = t.forks; s != null; s = t.forks = s.next)\n         t.result = reducer.apply(t.result, s.result);\n     }\n   }\n   public E getRawResult() { return result; }\n\n   public static <E> E mapReduce(E[] array, MyMapper<E> mapper, MyReducer<E> reducer) {\n     return new MapReducer<E>(null, array, mapper, reducer,\n                              0, array.length, null).invoke();\n   }\n }\nTriggers. Some CountedCompleters are themselves never\n forked, but instead serve as bits of plumbing in other designs;\n including those in which the completion of one or more async tasks\n triggers another async task. For example:\n\n  \n class HeaderBuilder extends CountedCompleter<...> { ... }\n class BodyBuilder extends CountedCompleter<...> { ... }\n class PacketSender extends CountedCompleter<...> {\n   PacketSender(...) { super(null, 1); ... } // trigger on second completion\n   public void compute() { } // never called\n   public void onCompletion(CountedCompleter<?> caller) { sendPacket(); }\n }\n // sample use:\n PacketSender p = new PacketSender();\n new HeaderBuilder(p, ...).fork();\n new BodyBuilder(p, ...).fork();", "codes": ["public abstract class CountedCompleter<T>\nextends ForkJoinTask<T>"], "fields": [], "methods": [{"method_name": "compute", "method_sig": "public abstract void compute()", "description": "The main computation performed by this task."}, {"method_name": "onCompletion", "method_sig": "public void onCompletion (CountedCompleter<?> caller)", "description": "Performs an action when method tryComplete() is invoked\n and the pending count is zero, or when the unconditional\n method complete(T) is invoked.  By default, this method\n does nothing. You can distinguish cases by checking the\n identity of the given caller argument. If not equal to \n this, then it is typically a subtask that may contain results\n (and/or links to other results) to combine."}, {"method_name": "onExceptionalCompletion", "method_sig": "public boolean onExceptionalCompletion (Throwable ex,\n                                       CountedCompleter<?> caller)", "description": "Performs an action when method ForkJoinTask.completeExceptionally(Throwable) is invoked or method compute() throws an exception, and this task has not already\n otherwise completed normally. On entry to this method, this task\n ForkJoinTask.isCompletedAbnormally().  The return value\n of this method controls further propagation: If true\n and this task has a completer that has not completed, then that\n completer is also completed exceptionally, with the same\n exception as this completer.  The default implementation of\n this method does nothing except return true."}, {"method_name": "getCompleter", "method_sig": "public final CountedCompleter<?> getCompleter()", "description": "Returns the completer established in this task's constructor,\n or null if none."}, {"method_name": "getPendingCount", "method_sig": "public final int getPendingCount()", "description": "Returns the current pending count."}, {"method_name": "setPendingCount", "method_sig": "public final void setPendingCount (int count)", "description": "Sets the pending count to the given value."}, {"method_name": "addToPendingCount", "method_sig": "public final void addToPendingCount (int delta)", "description": "Adds (atomically) the given value to the pending count."}, {"method_name": "compareAndSetPendingCount", "method_sig": "public final boolean compareAndSetPendingCount (int expected,\n                                               int count)", "description": "Sets (atomically) the pending count to the given count only if\n it currently holds the given expected value."}, {"method_name": "decrementPendingCountUnlessZero", "method_sig": "public final int decrementPendingCountUnlessZero()", "description": "If the pending count is nonzero, (atomically) decrements it."}, {"method_name": "getRoot", "method_sig": "public final CountedCompleter<?> getRoot()", "description": "Returns the root of the current computation; i.e., this\n task if it has no completer, else its completer's root."}, {"method_name": "tryComplete", "method_sig": "public final void tryComplete()", "description": "If the pending count is nonzero, decrements the count;\n otherwise invokes onCompletion(CountedCompleter)\n and then similarly tries to complete this task's completer,\n if one exists, else marks this task as complete."}, {"method_name": "propagateCompletion", "method_sig": "public final void propagateCompletion()", "description": "Equivalent to tryComplete() but does not invoke onCompletion(CountedCompleter) along the completion path:\n If the pending count is nonzero, decrements the count;\n otherwise, similarly tries to complete this task's completer, if\n one exists, else marks this task as complete. This method may be\n useful in cases where onCompletion should not, or need\n not, be invoked for each completer in a computation."}, {"method_name": "complete", "method_sig": "public void complete (T rawResult)", "description": "Regardless of pending count, invokes\n onCompletion(CountedCompleter), marks this task as\n complete and further triggers tryComplete() on this\n task's completer, if one exists.  The given rawResult is\n used as an argument to setRawResult(T) before invoking\n onCompletion(CountedCompleter) or marking this task\n as complete; its value is meaningful only for classes\n overriding setRawResult.  This method does not modify\n the pending count.\n\n This method may be useful when forcing completion as soon as\n any one (versus all) of several subtask results are obtained.\n However, in the common (and recommended) case in which \n setRawResult is not overridden, this effect can be obtained\n more simply using quietlyCompleteRoot()."}, {"method_name": "firstComplete", "method_sig": "public final CountedCompleter<?> firstComplete()", "description": "If this task's pending count is zero, returns this task;\n otherwise decrements its pending count and returns null.\n This method is designed to be used with nextComplete() in\n completion traversal loops."}, {"method_name": "nextComplete", "method_sig": "public final CountedCompleter<?> nextComplete()", "description": "If this task does not have a completer, invokes ForkJoinTask.quietlyComplete() and returns null.  Or, if\n the completer's pending count is non-zero, decrements that\n pending count and returns null.  Otherwise, returns the\n completer.  This method can be used as part of a completion\n traversal loop for homogeneous task hierarchies:\n\n  \n for (CountedCompleter<?> c = firstComplete();\n      c != null;\n      c = c.nextComplete()) {\n   // ... process c ...\n }"}, {"method_name": "quietlyCompleteRoot", "method_sig": "public final void quietlyCompleteRoot()", "description": "Equivalent to getRoot().quietlyComplete()."}, {"method_name": "helpComplete", "method_sig": "public final void helpComplete (int maxTasks)", "description": "If this task has not completed, attempts to process at most the\n given number of other unprocessed tasks for which this task is\n on the completion path, if any are known to exist."}, {"method_name": "exec", "method_sig": "protected final boolean exec()", "description": "Implements execution conventions for CountedCompleters."}, {"method_name": "getRawResult", "method_sig": "public T getRawResult()", "description": "Returns the result of the computation.  By default,\n returns null, which is appropriate for Void\n actions, but in other cases should be overridden, almost\n always to return a field or function of a field that\n holds the result upon completion."}, {"method_name": "setRawResult", "method_sig": "protected void setRawResult (T t)", "description": "A method that result-bearing CountedCompleters may optionally\n use to help maintain result data.  By default, does nothing.\n Overrides are not recommended. However, if this method is\n overridden to update existing objects or fields, then it must\n in general be defined to be thread-safe."}]}