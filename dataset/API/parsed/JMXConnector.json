{"name": "Interface JMXConnector", "module": "java.management", "package": "javax.management.remote", "text": "The client end of a JMX API connector.  An object of this type can\n be used to establish a connection to a connector server.\nA newly-created object of this type is unconnected.  Its connect method must be called before it can be used.\n However, objects created by JMXConnectorFactory.connect are already connected.", "codes": ["public interface JMXConnector\nextends Closeable"], "fields": [{"field_name": "CREDENTIALS", "field_sig": "static final\u00a0String CREDENTIALS", "description": "Name of the attribute that specifies the credentials to send\n to the connector server during connection.  The value\n associated with this attribute, if any, is a serializable\n object of an appropriate type for the server's JMXAuthenticator."}], "methods": [{"method_name": "connect", "method_sig": "void connect()\n      throws IOException", "description": "Establishes the connection to the connector server.  This\n method is equivalent to connect(null)."}, {"method_name": "connect", "method_sig": "void connect (Map<String, ?> env)\n      throws IOException", "description": "Establishes the connection to the connector server.\nIf connect has already been called successfully\n on this object, calling it again has no effect.  If, however,\n close() was called after connect, the new\n connect will throw an IOException.\n\n Otherwise, either connect has never been called\n on this object, or it has been called but produced an\n exception.  Then calling connect will attempt to\n establish a connection to the connector server."}, {"method_name": "getMBeanServerConnection", "method_sig": "MBeanServerConnection getMBeanServerConnection()\n                                        throws IOException", "description": "Returns an MBeanServerConnection object\n representing a remote MBean server.  For a given\n JMXConnector, two successful calls to this method\n will usually return the same MBeanServerConnection\n object, though this is not required.\nFor each method in the returned\n MBeanServerConnection, calling the method causes\n the corresponding method to be called in the remote MBean\n server.  The value returned by the MBean server method is the\n value returned to the client.  If the MBean server method\n produces an Exception, the same\n Exception is seen by the client.  If the MBean\n server method, or the attempt to call it, produces an\n Error, the Error is wrapped in a\n JMXServerErrorException, which is seen by the\n client.\nCalling this method is equivalent to calling\n getMBeanServerConnection(null)\n meaning that no delegation subject is specified and that all the\n operations called on the MBeanServerConnection must\n use the authenticated subject, if any."}, {"method_name": "getMBeanServerConnection", "method_sig": "MBeanServerConnection getMBeanServerConnection (Subject delegationSubject)\n                                        throws IOException", "description": "Returns an MBeanServerConnection object representing\n a remote MBean server on which operations are performed on behalf of\n the supplied delegation subject. For a given JMXConnector\n and Subject, two successful calls to this method will\n usually return the same MBeanServerConnection object,\n though this is not required.\nFor each method in the returned\n MBeanServerConnection, calling the method causes\n the corresponding method to be called in the remote MBean\n server on behalf of the given delegation subject instead of the\n authenticated subject. The value returned by the MBean server\n method is the value returned to the client. If the MBean server\n method produces an Exception, the same\n Exception is seen by the client. If the MBean\n server method, or the attempt to call it, produces an\n Error, the Error is wrapped in a\n JMXServerErrorException, which is seen by the\n client."}, {"method_name": "close", "method_sig": "void close()\n    throws IOException", "description": "Closes the client connection to its server.  Any ongoing or new\n request using the MBeanServerConnection returned by getMBeanServerConnection() will get an\n IOException.\nIf close has already been called successfully\n on this object, calling it again has no effect.  If\n close has never been called, or if it was called\n but produced an exception, an attempt will be made to close the\n connection.  This attempt can succeed, in which case\n close will return normally, or it can generate an\n exception.\nClosing a connection is a potentially slow operation.  For\n example, if the server has crashed, the close operation might\n have to wait for a network protocol timeout.  Callers that do\n not want to block in a close operation should do it in a\n separate thread."}, {"method_name": "addConnectionNotificationListener", "method_sig": "void addConnectionNotificationListener (NotificationListener listener,\n                                       NotificationFilter filter,\n                                       Object handback)", "description": "Adds a listener to be informed of changes in connection\n status.  The listener will receive notifications of type JMXConnectionNotification.  An implementation can send other\n types of notifications too.\nAny number of listeners can be added with this method.  The\n same listener can be added more than once with the same or\n different values for the filter and handback.  There is no\n special treatment of a duplicate entry.  For example, if a\n listener is registered twice with no filter, then its\n handleNotification method will be called twice for\n each notification."}, {"method_name": "removeConnectionNotificationListener", "method_sig": "void removeConnectionNotificationListener (NotificationListener listener)\n                                   throws ListenerNotFoundException", "description": "Removes a listener from the list to be informed of changes\n in status.  The listener must previously have been added.  If\n there is more than one matching listener, all are removed."}, {"method_name": "removeConnectionNotificationListener", "method_sig": "void removeConnectionNotificationListener (NotificationListener l,\n                                          NotificationFilter f,\n                                          Object handback)\n                                   throws ListenerNotFoundException", "description": "Removes a listener from the list to be informed of changes\n in status.  The listener must previously have been added with\n the same three parameters.  If there is more than one matching\n listener, only one is removed."}, {"method_name": "getConnectionId", "method_sig": "String getConnectionId()\n                throws IOException", "description": "Gets this connection's ID from the connector server.  For a\n given connector server, every connection will have a unique id\n which does not change during the lifetime of the\n connection."}]}