{"name": "Interface BlockingQueue<E>", "module": "java.base", "package": "java.util.concurrent", "text": "A Queue that additionally supports operations that wait for\n the queue to become non-empty when retrieving an element, and wait\n for space to become available in the queue when storing an element.\n\n BlockingQueue methods come in four forms, with different ways\n of handling operations that cannot be satisfied immediately, but may be\n satisfied at some point in the future:\n one throws an exception, the second returns a special value (either\n null or false, depending on the operation), the third\n blocks the current thread indefinitely until the operation can succeed,\n and the fourth blocks for only a given maximum time limit before giving\n up.  These methods are summarized in the following table:\n\n \nSummary of BlockingQueue methods\n\n\nThrows exception\nSpecial value\nBlocks\nTimes out\n\n\nInsert\nadd(e)\noffer(e)\nput(e)\noffer(e, time, unit)\n\n\nRemove\nremove()\npoll()\ntake()\npoll(time, unit)\n\n\nExamine\nelement()\npeek()\nnot applicable\nnot applicable\n\n\nA BlockingQueue does not accept null elements.\n Implementations throw NullPointerException on attempts\n to add, put or offer a null.  A\n null is used as a sentinel value to indicate failure of\n poll operations.\n\n A BlockingQueue may be capacity bounded. At any given\n time it may have a remainingCapacity beyond which no\n additional elements can be put without blocking.\n A BlockingQueue without any intrinsic capacity constraints always\n reports a remaining capacity of Integer.MAX_VALUE.\n\n BlockingQueue implementations are designed to be used\n primarily for producer-consumer queues, but additionally support\n the Collection interface.  So, for example, it is\n possible to remove an arbitrary element from a queue using\n remove(x). However, such operations are in general\n not performed very efficiently, and are intended for only\n occasional use, such as when a queued message is cancelled.\n\n BlockingQueue implementations are thread-safe.  All\n queuing methods achieve their effects atomically using internal\n locks or other forms of concurrency control. However, the\n bulk Collection operations addAll,\n containsAll, retainAll and removeAll are\n not necessarily performed atomically unless specified\n otherwise in an implementation. So it is possible, for example, for\n addAll(c) to fail (throwing an exception) after adding\n only some of the elements in c.\n\n A BlockingQueue does not intrinsically support\n any kind of \"close\" or \"shutdown\" operation to\n indicate that no more items will be added.  The needs and usage of\n such features tend to be implementation-dependent. For example, a\n common tactic is for producers to insert special\n end-of-stream or poison objects, that are\n interpreted accordingly when taken by consumers.\n\n \n Usage example, based on a typical producer-consumer scenario.\n Note that a BlockingQueue can safely be used with multiple\n producers and multiple consumers.\n  \n class Producer implements Runnable {\n   private final BlockingQueue queue;\n   Producer(BlockingQueue q) { queue = q; }\n   public void run() {\n     try {\n       while (true) { queue.put(produce()); }\n     } catch (InterruptedException ex) { ... handle ...}\n   }\n   Object produce() { ... }\n }\n\n class Consumer implements Runnable {\n   private final BlockingQueue queue;\n   Consumer(BlockingQueue q) { queue = q; }\n   public void run() {\n     try {\n       while (true) { consume(queue.take()); }\n     } catch (InterruptedException ex) { ... handle ...}\n   }\n   void consume(Object x) { ... }\n }\n\n class Setup {\n   void main() {\n     BlockingQueue q = new SomeQueueImplementation();\n     Producer p = new Producer(q);\n     Consumer c1 = new Consumer(q);\n     Consumer c2 = new Consumer(q);\n     new Thread(p).start();\n     new Thread(c1).start();\n     new Thread(c2).start();\n   }\n }\nMemory consistency effects: As with other concurrent\n collections, actions in a thread prior to placing an object into a\n BlockingQueue\nhappen-before\n actions subsequent to the access or removal of that element from\n the BlockingQueue in another thread.\n\n This interface is a member of the\n \n Java Collections Framework.", "codes": ["public interface BlockingQueue<E>\nextends Queue<E>"], "fields": [], "methods": [{"method_name": "add", "method_sig": "boolean add (E e)", "description": "Inserts the specified element into this queue if it is possible to do\n so immediately without violating capacity restrictions, returning\n true upon success and throwing an\n IllegalStateException if no space is currently available.\n When using a capacity-restricted queue, it is generally preferable to\n use offer."}, {"method_name": "offer", "method_sig": "boolean offer (E e)", "description": "Inserts the specified element into this queue if it is possible to do\n so immediately without violating capacity restrictions, returning\n true upon success and false if no space is currently\n available.  When using a capacity-restricted queue, this method is\n generally preferable to add(E), which can fail to insert an\n element only by throwing an exception."}, {"method_name": "put", "method_sig": "void put (E e)\n  throws InterruptedException", "description": "Inserts the specified element into this queue, waiting if necessary\n for space to become available."}, {"method_name": "offer", "method_sig": "boolean offer (E e,\n              long timeout,\n              TimeUnit unit)\n       throws InterruptedException", "description": "Inserts the specified element into this queue, waiting up to the\n specified wait time if necessary for space to become available."}, {"method_name": "take", "method_sig": "E take()\nthrows InterruptedException", "description": "Retrieves and removes the head of this queue, waiting if necessary\n until an element becomes available."}, {"method_name": "poll", "method_sig": "E poll (long timeout,\n       TimeUnit unit)\nthrows InterruptedException", "description": "Retrieves and removes the head of this queue, waiting up to the\n specified wait time if necessary for an element to become available."}, {"method_name": "remainingCapacity", "method_sig": "int remainingCapacity()", "description": "Returns the number of additional elements that this queue can ideally\n (in the absence of memory or resource constraints) accept without\n blocking, or Integer.MAX_VALUE if there is no intrinsic\n limit.\n\n Note that you cannot always tell if an attempt to insert\n an element will succeed by inspecting remainingCapacity\n because it may be the case that another thread is about to\n insert or remove an element."}, {"method_name": "remove", "method_sig": "boolean remove (Object o)", "description": "Removes a single instance of the specified element from this queue,\n if it is present.  More formally, removes an element e such\n that o.equals(e), if this queue contains one or more such\n elements.\n Returns true if this queue contained the specified element\n (or equivalently, if this queue changed as a result of the call)."}, {"method_name": "contains", "method_sig": "boolean contains (Object o)", "description": "Returns true if this queue contains the specified element.\n More formally, returns true if and only if this queue contains\n at least one element e such that o.equals(e)."}, {"method_name": "drainTo", "method_sig": "int drainTo (Collection<? super E> c)", "description": "Removes all available elements from this queue and adds them\n to the given collection.  This operation may be more\n efficient than repeatedly polling this queue.  A failure\n encountered while attempting to add elements to\n collection c may result in elements being in neither,\n either or both collections when the associated exception is\n thrown.  Attempts to drain a queue to itself result in\n IllegalArgumentException. Further, the behavior of\n this operation is undefined if the specified collection is\n modified while the operation is in progress."}, {"method_name": "drainTo", "method_sig": "int drainTo (Collection<? super E> c,\n            int maxElements)", "description": "Removes at most the given number of available elements from\n this queue and adds them to the given collection.  A failure\n encountered while attempting to add elements to\n collection c may result in elements being in neither,\n either or both collections when the associated exception is\n thrown.  Attempts to drain a queue to itself result in\n IllegalArgumentException. Further, the behavior of\n this operation is undefined if the specified collection is\n modified while the operation is in progress."}]}