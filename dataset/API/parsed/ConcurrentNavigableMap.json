{"name": "Interface ConcurrentNavigableMap<K,\u200bV>", "module": "java.base", "package": "java.util.concurrent", "text": "A ConcurrentMap supporting NavigableMap operations,\n and recursively so for its navigable sub-maps.\n\n This interface is a member of the\n \n Java Collections Framework.", "codes": ["public interface ConcurrentNavigableMap<K, V>\nextends ConcurrentMap<K, V>, NavigableMap<K, V>"], "fields": [], "methods": [{"method_name": "subMap", "method_sig": "ConcurrentNavigableMap<K, V> subMap (K fromKey,\n                                         boolean fromInclusive,\n                                         K toKey,\n                                         boolean toInclusive)", "description": "Description copied from interface:\u00a0NavigableMap"}, {"method_name": "headMap", "method_sig": "ConcurrentNavigableMap<K, V> headMap (K toKey,\n                                          boolean inclusive)", "description": "Description copied from interface:\u00a0NavigableMap"}, {"method_name": "tailMap", "method_sig": "ConcurrentNavigableMap<K, V> tailMap (K fromKey,\n                                          boolean inclusive)", "description": "Description copied from interface:\u00a0NavigableMap"}, {"method_name": "subMap", "method_sig": "ConcurrentNavigableMap<K, V> subMap (K fromKey,\n                                         K toKey)", "description": "Description copied from interface:\u00a0NavigableMap"}, {"method_name": "headMap", "method_sig": "ConcurrentNavigableMap<K, V> headMap (K toKey)", "description": "Description copied from interface:\u00a0NavigableMap"}, {"method_name": "tailMap", "method_sig": "ConcurrentNavigableMap<K, V> tailMap (K fromKey)", "description": "Description copied from interface:\u00a0NavigableMap"}, {"method_name": "descendingMap", "method_sig": "ConcurrentNavigableMap<K, V> descendingMap()", "description": "Returns a reverse order view of the mappings contained in this map.\n The descending map is backed by this map, so changes to the map are\n reflected in the descending map, and vice-versa.\n\n The returned map has an ordering equivalent to\n Collections.reverseOrder(comparator()).\n The expression m.descendingMap().descendingMap() returns a\n view of m essentially equivalent to m."}, {"method_name": "navigableKeySet", "method_sig": "NavigableSet<K> navigableKeySet()", "description": "Returns a NavigableSet view of the keys contained in this map.\n The set's iterator returns the keys in ascending order.\n The set is backed by the map, so changes to the map are\n reflected in the set, and vice-versa.  The set supports element\n removal, which removes the corresponding mapping from the map,\n via the Iterator.remove, Set.remove,\n removeAll, retainAll, and clear\n operations.  It does not support the add or addAll\n operations.\n\n The view's iterators and spliterators are\n weakly consistent."}, {"method_name": "keySet", "method_sig": "NavigableSet<K> keySet()", "description": "Returns a NavigableSet view of the keys contained in this map.\n The set's iterator returns the keys in ascending order.\n The set is backed by the map, so changes to the map are\n reflected in the set, and vice-versa.  The set supports element\n removal, which removes the corresponding mapping from the map,\n via the Iterator.remove, Set.remove,\n removeAll, retainAll, and clear\n operations.  It does not support the add or addAll\n operations.\n\n The view's iterators and spliterators are\n weakly consistent.\n\n This method is equivalent to method navigableKeySet."}, {"method_name": "descendingKeySet", "method_sig": "NavigableSet<K> descendingKeySet()", "description": "Returns a reverse order NavigableSet view of the keys contained in this map.\n The set's iterator returns the keys in descending order.\n The set is backed by the map, so changes to the map are\n reflected in the set, and vice-versa.  The set supports element\n removal, which removes the corresponding mapping from the map,\n via the Iterator.remove, Set.remove,\n removeAll, retainAll, and clear\n operations.  It does not support the add or addAll\n operations.\n\n The view's iterators and spliterators are\n weakly consistent."}]}