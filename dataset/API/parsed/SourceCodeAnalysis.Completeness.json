{"name": "Enum SourceCodeAnalysis.Completeness", "module": "jdk.jshell", "package": "jdk.jshell", "text": "Describes the completeness of the given input.", "codes": ["public static enum SourceCodeAnalysis.Completeness\nextends Enum<SourceCodeAnalysis.Completeness>"], "fields": [], "methods": [{"method_name": "values", "method_sig": "public static SourceCodeAnalysis.Completeness[] values()", "description": "Returns an array containing the constants of this enum type, in\nthe order they are declared. This method may be used to iterate\nover the constants as follows:\n\nfor (SourceCodeAnalysis.Completeness c : SourceCodeAnalysis.Completeness.values())\n\u00a0   System.out.println(c);\n"}, {"method_name": "valueOf", "method_sig": "public static SourceCodeAnalysis.Completeness valueOf (String name)", "description": "Returns the enum constant of this type with the specified name.\nThe string must match exactly an identifier used to declare an\nenum constant in this type.  (Extraneous whitespace characters are \nnot permitted.)"}, {"method_name": "isComplete", "method_sig": "public boolean isComplete()", "description": "Indicates whether the first snippet of source is complete.\n For example, \"x=\" is not\n complete, but \"x=2\" is complete, even though a subsequent line could\n make it \"x=2+2\". Already erroneous code is marked complete."}]}