{"name": "Class Collections", "module": "java.base", "package": "java.util", "text": "This class consists exclusively of static methods that operate on or return\n collections.  It contains polymorphic algorithms that operate on\n collections, \"wrappers\", which return a new collection backed by a\n specified collection, and a few other odds and ends.\n\n The methods of this class all throw a NullPointerException\n if the collections or class objects provided to them are null.\n\n The documentation for the polymorphic algorithms contained in this class\n generally includes a brief description of the implementation.  Such\n descriptions should be regarded as implementation notes, rather than\n parts of the specification.  Implementors should feel free to\n substitute other algorithms, so long as the specification itself is adhered\n to.  (For example, the algorithm used by sort does not have to be\n a mergesort, but it does have to be stable.)\n\n The \"destructive\" algorithms contained in this class, that is, the\n algorithms that modify the collection on which they operate, are specified\n to throw UnsupportedOperationException if the collection does not\n support the appropriate mutation primitive(s), such as the set\n method.  These algorithms may, but are not required to, throw this\n exception if an invocation would have no effect on the collection.  For\n example, invoking the sort method on an unmodifiable list that is\n already sorted may or may not throw UnsupportedOperationException.\n\n This class is a member of the\n \n Java Collections Framework.", "codes": ["public class Collections\nextends Object"], "fields": [{"field_name": "EMPTY_SET", "field_sig": "public static final\u00a0Set EMPTY_SET", "description": "The empty set (immutable).  This set is serializable."}, {"field_name": "EMPTY_LIST", "field_sig": "public static final\u00a0List EMPTY_LIST", "description": "The empty list (immutable).  This list is serializable."}, {"field_name": "EMPTY_MAP", "field_sig": "public static final\u00a0Map EMPTY_MAP", "description": "The empty map (immutable).  This map is serializable."}], "methods": [{"method_name": "sort", "method_sig": "public static <T extends Comparable<? super T>> void sort (List<T> list)", "description": "Sorts the specified list into ascending order, according to the\n natural ordering of its elements.\n All elements in the list must implement the Comparable\n interface.  Furthermore, all elements in the list must be\n mutually comparable (that is, e1.compareTo(e2)\n must not throw a ClassCastException for any elements\n e1 and e2 in the list).\n\n This sort is guaranteed to be stable:  equal elements will\n not be reordered as a result of the sort.\n\n The specified list must be modifiable, but need not be resizable."}, {"method_name": "sort", "method_sig": "public static <T> void sort (List<T> list,\n                            Comparator<? super T> c)", "description": "Sorts the specified list according to the order induced by the\n specified comparator.  All elements in the list must be mutually\n comparable using the specified comparator (that is,\n c.compare(e1, e2) must not throw a ClassCastException\n for any elements e1 and e2 in the list).\n\n This sort is guaranteed to be stable:  equal elements will\n not be reordered as a result of the sort.\n\n The specified list must be modifiable, but need not be resizable."}, {"method_name": "binarySearch", "method_sig": "public static <T> int binarySearch (List<? extends Comparable<? super T>> list,\n                                   T key)", "description": "Searches the specified list for the specified object using the binary\n search algorithm.  The list must be sorted into ascending order\n according to the natural ordering of its\n elements (as by the sort(List) method) prior to making this\n call.  If it is not sorted, the results are undefined.  If the list\n contains multiple elements equal to the specified object, there is no\n guarantee which one will be found.\n\n This method runs in log(n) time for a \"random access\" list (which\n provides near-constant-time positional access).  If the specified list\n does not implement the RandomAccess interface and is large,\n this method will do an iterator-based binary search that performs\n O(n) link traversals and O(log n) element comparisons."}, {"method_name": "binarySearch", "method_sig": "public static <T> int binarySearch (List<? extends T> list,\n                                   T key,\n                                   Comparator<? super T> c)", "description": "Searches the specified list for the specified object using the binary\n search algorithm.  The list must be sorted into ascending order\n according to the specified comparator (as by the\n sort(List, Comparator)\n method), prior to making this call.  If it is\n not sorted, the results are undefined.  If the list contains multiple\n elements equal to the specified object, there is no guarantee which one\n will be found.\n\n This method runs in log(n) time for a \"random access\" list (which\n provides near-constant-time positional access).  If the specified list\n does not implement the RandomAccess interface and is large,\n this method will do an iterator-based binary search that performs\n O(n) link traversals and O(log n) element comparisons."}, {"method_name": "reverse", "method_sig": "public static void reverse (List<?> list)", "description": "Reverses the order of the elements in the specified list.\n\n This method runs in linear time."}, {"method_name": "shuffle", "method_sig": "public static void shuffle (List<?> list)", "description": "Randomly permutes the specified list using a default source of\n randomness.  All permutations occur with approximately equal\n likelihood.\n\n The hedge \"approximately\" is used in the foregoing description because\n default source of randomness is only approximately an unbiased source\n of independently chosen bits. If it were a perfect source of randomly\n chosen bits, then the algorithm would choose permutations with perfect\n uniformity.\n\n This implementation traverses the list backwards, from the last\n element up to the second, repeatedly swapping a randomly selected element\n into the \"current position\".  Elements are randomly selected from the\n portion of the list that runs from the first element to the current\n position, inclusive.\n\n This method runs in linear time.  If the specified list does not\n implement the RandomAccess interface and is large, this\n implementation dumps the specified list into an array before shuffling\n it, and dumps the shuffled array back into the list.  This avoids the\n quadratic behavior that would result from shuffling a \"sequential\n access\" list in place."}, {"method_name": "shuffle", "method_sig": "public static void shuffle (List<?> list,\n                           Random rnd)", "description": "Randomly permute the specified list using the specified source of\n randomness.  All permutations occur with equal likelihood\n assuming that the source of randomness is fair.\n\n This implementation traverses the list backwards, from the last element\n up to the second, repeatedly swapping a randomly selected element into\n the \"current position\".  Elements are randomly selected from the\n portion of the list that runs from the first element to the current\n position, inclusive.\n\n This method runs in linear time.  If the specified list does not\n implement the RandomAccess interface and is large, this\n implementation dumps the specified list into an array before shuffling\n it, and dumps the shuffled array back into the list.  This avoids the\n quadratic behavior that would result from shuffling a \"sequential\n access\" list in place."}, {"method_name": "swap", "method_sig": "public static void swap (List<?> list,\n                        int i,\n                        int j)", "description": "Swaps the elements at the specified positions in the specified list.\n (If the specified positions are equal, invoking this method leaves\n the list unchanged.)"}, {"method_name": "fill", "method_sig": "public static <T> void fill (List<? super T> list,\n                            T obj)", "description": "Replaces all of the elements of the specified list with the specified\n element. \n\n This method runs in linear time."}, {"method_name": "copy", "method_sig": "public static <T> void copy (List<? super T> dest,\n                            List<? extends T> src)", "description": "Copies all of the elements from one list into another.  After the\n operation, the index of each copied element in the destination list\n will be identical to its index in the source list.  The destination\n list's size must be greater than or equal to the source list's size.\n If it is greater, the remaining elements in the destination list are\n unaffected. \n\n This method runs in linear time."}, {"method_name": "min", "method_sig": "public static <T extends Object & Comparable<? super T>> T min (Collection<? extends T> coll)", "description": "Returns the minimum element of the given collection, according to the\n natural ordering of its elements.  All elements in the\n collection must implement the Comparable interface.\n Furthermore, all elements in the collection must be mutually\n comparable (that is, e1.compareTo(e2) must not throw a\n ClassCastException for any elements e1 and\n e2 in the collection).\n\n This method iterates over the entire collection, hence it requires\n time proportional to the size of the collection."}, {"method_name": "min", "method_sig": "public static <T> T min (Collection<? extends T> coll,\n                        Comparator<? super T> comp)", "description": "Returns the minimum element of the given collection, according to the\n order induced by the specified comparator.  All elements in the\n collection must be mutually comparable by the specified\n comparator (that is, comp.compare(e1, e2) must not throw a\n ClassCastException for any elements e1 and\n e2 in the collection).\n\n This method iterates over the entire collection, hence it requires\n time proportional to the size of the collection."}, {"method_name": "max", "method_sig": "public static <T extends Object & Comparable<? super T>> T max (Collection<? extends T> coll)", "description": "Returns the maximum element of the given collection, according to the\n natural ordering of its elements.  All elements in the\n collection must implement the Comparable interface.\n Furthermore, all elements in the collection must be mutually\n comparable (that is, e1.compareTo(e2) must not throw a\n ClassCastException for any elements e1 and\n e2 in the collection).\n\n This method iterates over the entire collection, hence it requires\n time proportional to the size of the collection."}, {"method_name": "max", "method_sig": "public static <T> T max (Collection<? extends T> coll,\n                        Comparator<? super T> comp)", "description": "Returns the maximum element of the given collection, according to the\n order induced by the specified comparator.  All elements in the\n collection must be mutually comparable by the specified\n comparator (that is, comp.compare(e1, e2) must not throw a\n ClassCastException for any elements e1 and\n e2 in the collection).\n\n This method iterates over the entire collection, hence it requires\n time proportional to the size of the collection."}, {"method_name": "rotate", "method_sig": "public static void rotate (List<?> list,\n                          int distance)", "description": "Rotates the elements in the specified list by the specified distance.\n After calling this method, the element at index i will be\n the element previously at index (i - distance) mod\n list.size(), for all values of i between 0\n and list.size()-1, inclusive.  (This method has no effect on\n the size of the list.)\n\n For example, suppose list comprises [t, a, n, k, s].\n After invoking Collections.rotate(list, 1) (or\n Collections.rotate(list, -4)), list will comprise\n [s, t, a, n, k].\n\n Note that this method can usefully be applied to sublists to\n move one or more elements within a list while preserving the\n order of the remaining elements.  For example, the following idiom\n moves the element at index j forward to position\n k (which must be greater than or equal to j):\n \n     Collections.rotate(list.subList(j, k+1), -1);\n \n To make this concrete, suppose list comprises\n [a, b, c, d, e].  To move the element at index 1\n (b) forward two positions, perform the following invocation:\n \n     Collections.rotate(l.subList(1, 4), -1);\n \n The resulting list is [a, c, d, b, e].\n\n To move more than one element forward, increase the absolute value\n of the rotation distance.  To move elements backward, use a positive\n shift distance.\n\n If the specified list is small or implements the RandomAccess interface, this implementation exchanges the first\n element into the location it should go, and then repeatedly exchanges\n the displaced element into the location it should go until a displaced\n element is swapped into the first element.  If necessary, the process\n is repeated on the second and successive elements, until the rotation\n is complete.  If the specified list is large and doesn't implement the\n RandomAccess interface, this implementation breaks the\n list into two sublist views around index -distance mod size.\n Then the reverse(List) method is invoked on each sublist view,\n and finally it is invoked on the entire list.  For a more complete\n description of both algorithms, see Section 2.3 of Jon Bentley's\n Programming Pearls (Addison-Wesley, 1986)."}, {"method_name": "replaceAll", "method_sig": "public static <T> boolean replaceAll (List<T> list,\n                                     T oldVal,\n                                     T newVal)", "description": "Replaces all occurrences of one specified value in a list with another.\n More formally, replaces with newVal each element e\n in list such that\n (oldVal==null ? e==null : oldVal.equals(e)).\n (This method has no effect on the size of the list.)"}, {"method_name": "indexOfSubList", "method_sig": "public static int indexOfSubList (List<?> source,\n                                 List<?> target)", "description": "Returns the starting position of the first occurrence of the specified\n target list within the specified source list, or -1 if there is no\n such occurrence.  More formally, returns the lowest index i\n such that source.subList(i, i+target.size()).equals(target),\n or -1 if there is no such index.  (Returns -1 if\n target.size() > source.size())\n\n This implementation uses the \"brute force\" technique of scanning\n over the source list, looking for a match with the target at each\n location in turn."}, {"method_name": "lastIndexOfSubList", "method_sig": "public static int lastIndexOfSubList (List<?> source,\n                                     List<?> target)", "description": "Returns the starting position of the last occurrence of the specified\n target list within the specified source list, or -1 if there is no such\n occurrence.  More formally, returns the highest index i\n such that source.subList(i, i+target.size()).equals(target),\n or -1 if there is no such index.  (Returns -1 if\n target.size() > source.size())\n\n This implementation uses the \"brute force\" technique of iterating\n over the source list, looking for a match with the target at each\n location in turn."}, {"method_name": "unmodifiableCollection", "method_sig": "public static <T> Collection<T> unmodifiableCollection (Collection<? extends T> c)", "description": "Returns an unmodifiable view of the\n specified collection. Query operations on the returned collection \"read through\"\n to the specified collection, and attempts to modify the returned\n collection, whether direct or via its iterator, result in an\n UnsupportedOperationException.\n\n The returned collection does not pass the hashCode and equals\n operations through to the backing collection, but relies on\n Object's equals and hashCode methods.  This\n is necessary to preserve the contracts of these operations in the case\n that the backing collection is a set or a list.\n\n The returned collection will be serializable if the specified collection\n is serializable."}, {"method_name": "unmodifiableSet", "method_sig": "public static <T> Set<T> unmodifiableSet (Set<? extends T> s)", "description": "Returns an unmodifiable view of the\n specified set. Query operations on the returned set \"read through\" to the specified\n set, and attempts to modify the returned set, whether direct or via its\n iterator, result in an UnsupportedOperationException.\n\n The returned set will be serializable if the specified set\n is serializable."}, {"method_name": "unmodifiableSortedSet", "method_sig": "public static <T> SortedSet<T> unmodifiableSortedSet (SortedSet<T> s)", "description": "Returns an unmodifiable view of the\n specified sorted set. Query operations on the returned sorted set \"read\n through\" to the specified sorted set.  Attempts to modify the returned\n sorted set, whether direct, via its iterator, or via its\n subSet, headSet, or tailSet views, result in\n an UnsupportedOperationException.\n\n The returned sorted set will be serializable if the specified sorted set\n is serializable."}, {"method_name": "unmodifiableNavigableSet", "method_sig": "public static <T> NavigableSet<T> unmodifiableNavigableSet (NavigableSet<T> s)", "description": "Returns an unmodifiable view of the\n specified navigable set. Query operations on the returned navigable set \"read\n through\" to the specified navigable set.  Attempts to modify the returned\n navigable set, whether direct, via its iterator, or via its\n subSet, headSet, or tailSet views, result in\n an UnsupportedOperationException.\n\n The returned navigable set will be serializable if the specified\n navigable set is serializable."}, {"method_name": "unmodifiableList", "method_sig": "public static <T> List<T> unmodifiableList (List<? extends T> list)", "description": "Returns an unmodifiable view of the\n specified list. Query operations on the returned list \"read through\" to the\n specified list, and attempts to modify the returned list, whether\n direct or via its iterator, result in an\n UnsupportedOperationException.\n\n The returned list will be serializable if the specified list\n is serializable. Similarly, the returned list will implement\n RandomAccess if the specified list does."}, {"method_name": "unmodifiableMap", "method_sig": "public static <K, V> Map<K, V> unmodifiableMap (Map<? extends K, ? extends V> m)", "description": "Returns an unmodifiable view of the\n specified map. Query operations on the returned map \"read through\"\n to the specified map, and attempts to modify the returned\n map, whether direct or via its collection views, result in an\n UnsupportedOperationException.\n\n The returned map will be serializable if the specified map\n is serializable."}, {"method_name": "unmodifiableSortedMap", "method_sig": "public static <K, V> SortedMap<K, V> unmodifiableSortedMap (SortedMap<K, ? extends V> m)", "description": "Returns an unmodifiable view of the\n specified sorted map. Query operations on the returned sorted map \"read through\"\n to the specified sorted map.  Attempts to modify the returned\n sorted map, whether direct, via its collection views, or via its\n subMap, headMap, or tailMap views, result in\n an UnsupportedOperationException.\n\n The returned sorted map will be serializable if the specified sorted map\n is serializable."}, {"method_name": "unmodifiableNavigableMap", "method_sig": "public static <K, V> NavigableMap<K, V> unmodifiableNavigableMap (NavigableMap<K, ? extends V> m)", "description": "Returns an unmodifiable view of the\n specified navigable map. Query operations on the returned navigable map \"read\n through\" to the specified navigable map.  Attempts to modify the returned\n navigable map, whether direct, via its collection views, or via its\n subMap, headMap, or tailMap views, result in\n an UnsupportedOperationException.\n\n The returned navigable map will be serializable if the specified\n navigable map is serializable."}, {"method_name": "synchronizedCollection", "method_sig": "public static <T> Collection<T> synchronizedCollection (Collection<T> c)", "description": "Returns a synchronized (thread-safe) collection backed by the specified\n collection.  In order to guarantee serial access, it is critical that\n all access to the backing collection is accomplished\n through the returned collection.\n\n It is imperative that the user manually synchronize on the returned\n collection when traversing it via Iterator, Spliterator\n or Stream:\n \n  Collection c = Collections.synchronizedCollection(myCollection);\n     ...\n  synchronized (c) {\n      Iterator i = c.iterator(); // Must be in the synchronized block\n      while (i.hasNext())\n         foo(i.next());\n  }\n \n Failure to follow this advice may result in non-deterministic behavior.\n\n The returned collection does not pass the hashCode\n and equals operations through to the backing collection, but\n relies on Object's equals and hashCode methods.  This is\n necessary to preserve the contracts of these operations in the case\n that the backing collection is a set or a list.\n\n The returned collection will be serializable if the specified collection\n is serializable."}, {"method_name": "synchronizedSet", "method_sig": "public static <T> Set<T> synchronizedSet (Set<T> s)", "description": "Returns a synchronized (thread-safe) set backed by the specified\n set.  In order to guarantee serial access, it is critical that\n all access to the backing set is accomplished\n through the returned set.\n\n It is imperative that the user manually synchronize on the returned\n collection when traversing it via Iterator, Spliterator\n or Stream:\n \n  Set s = Collections.synchronizedSet(new HashSet());\n      ...\n  synchronized (s) {\n      Iterator i = s.iterator(); // Must be in the synchronized block\n      while (i.hasNext())\n          foo(i.next());\n  }\n \n Failure to follow this advice may result in non-deterministic behavior.\n\n The returned set will be serializable if the specified set is\n serializable."}, {"method_name": "synchronizedSortedSet", "method_sig": "public static <T> SortedSet<T> synchronizedSortedSet (SortedSet<T> s)", "description": "Returns a synchronized (thread-safe) sorted set backed by the specified\n sorted set.  In order to guarantee serial access, it is critical that\n all access to the backing sorted set is accomplished\n through the returned sorted set (or its views).\n\n It is imperative that the user manually synchronize on the returned\n sorted set when traversing it or any of its subSet,\n headSet, or tailSet views via Iterator,\n Spliterator or Stream:\n \n  SortedSet s = Collections.synchronizedSortedSet(new TreeSet());\n      ...\n  synchronized (s) {\n      Iterator i = s.iterator(); // Must be in the synchronized block\n      while (i.hasNext())\n          foo(i.next());\n  }\n \n or:\n \n  SortedSet s = Collections.synchronizedSortedSet(new TreeSet());\n  SortedSet s2 = s.headSet(foo);\n      ...\n  synchronized (s) {  // Note: s, not s2!!!\n      Iterator i = s2.iterator(); // Must be in the synchronized block\n      while (i.hasNext())\n          foo(i.next());\n  }\n \n Failure to follow this advice may result in non-deterministic behavior.\n\n The returned sorted set will be serializable if the specified\n sorted set is serializable."}, {"method_name": "synchronizedNavigableSet", "method_sig": "public static <T> NavigableSet<T> synchronizedNavigableSet (NavigableSet<T> s)", "description": "Returns a synchronized (thread-safe) navigable set backed by the\n specified navigable set.  In order to guarantee serial access, it is\n critical that all access to the backing navigable set is\n accomplished through the returned navigable set (or its views).\n\n It is imperative that the user manually synchronize on the returned\n navigable set when traversing it, or any of its subSet,\n headSet, or tailSet views, via Iterator,\n Spliterator or Stream:\n \n  NavigableSet s = Collections.synchronizedNavigableSet(new TreeSet());\n      ...\n  synchronized (s) {\n      Iterator i = s.iterator(); // Must be in the synchronized block\n      while (i.hasNext())\n          foo(i.next());\n  }\n \n or:\n \n  NavigableSet s = Collections.synchronizedNavigableSet(new TreeSet());\n  NavigableSet s2 = s.headSet(foo, true);\n      ...\n  synchronized (s) {  // Note: s, not s2!!!\n      Iterator i = s2.iterator(); // Must be in the synchronized block\n      while (i.hasNext())\n          foo(i.next());\n  }\n \n Failure to follow this advice may result in non-deterministic behavior.\n\n The returned navigable set will be serializable if the specified\n navigable set is serializable."}, {"method_name": "synchronizedList", "method_sig": "public static <T> List<T> synchronizedList (List<T> list)", "description": "Returns a synchronized (thread-safe) list backed by the specified\n list.  In order to guarantee serial access, it is critical that\n all access to the backing list is accomplished\n through the returned list.\n\n It is imperative that the user manually synchronize on the returned\n list when traversing it via Iterator, Spliterator\n or Stream:\n \n  List list = Collections.synchronizedList(new ArrayList());\n      ...\n  synchronized (list) {\n      Iterator i = list.iterator(); // Must be in synchronized block\n      while (i.hasNext())\n          foo(i.next());\n  }\n \n Failure to follow this advice may result in non-deterministic behavior.\n\n The returned list will be serializable if the specified list is\n serializable."}, {"method_name": "synchronizedMap", "method_sig": "public static <K, V> Map<K, V> synchronizedMap (Map<K, V> m)", "description": "Returns a synchronized (thread-safe) map backed by the specified\n map.  In order to guarantee serial access, it is critical that\n all access to the backing map is accomplished\n through the returned map.\n\n It is imperative that the user manually synchronize on the returned\n map when traversing any of its collection views via Iterator,\n Spliterator or Stream:\n \n  Map m = Collections.synchronizedMap(new HashMap());\n      ...\n  Set s = m.keySet();  // Needn't be in synchronized block\n      ...\n  synchronized (m) {  // Synchronizing on m, not s!\n      Iterator i = s.iterator(); // Must be in synchronized block\n      while (i.hasNext())\n          foo(i.next());\n  }\n \n Failure to follow this advice may result in non-deterministic behavior.\n\n The returned map will be serializable if the specified map is\n serializable."}, {"method_name": "synchronizedSortedMap", "method_sig": "public static <K, V> SortedMap<K, V> synchronizedSortedMap (SortedMap<K, V> m)", "description": "Returns a synchronized (thread-safe) sorted map backed by the specified\n sorted map.  In order to guarantee serial access, it is critical that\n all access to the backing sorted map is accomplished\n through the returned sorted map (or its views).\n\n It is imperative that the user manually synchronize on the returned\n sorted map when traversing any of its collection views, or the\n collections views of any of its subMap, headMap or\n tailMap views, via Iterator, Spliterator or\n Stream:\n \n  SortedMap m = Collections.synchronizedSortedMap(new TreeMap());\n      ...\n  Set s = m.keySet();  // Needn't be in synchronized block\n      ...\n  synchronized (m) {  // Synchronizing on m, not s!\n      Iterator i = s.iterator(); // Must be in synchronized block\n      while (i.hasNext())\n          foo(i.next());\n  }\n \n or:\n \n  SortedMap m = Collections.synchronizedSortedMap(new TreeMap());\n  SortedMap m2 = m.subMap(foo, bar);\n      ...\n  Set s2 = m2.keySet();  // Needn't be in synchronized block\n      ...\n  synchronized (m) {  // Synchronizing on m, not m2 or s2!\n      Iterator i = s2.iterator(); // Must be in synchronized block\n      while (i.hasNext())\n          foo(i.next());\n  }\n \n Failure to follow this advice may result in non-deterministic behavior.\n\n The returned sorted map will be serializable if the specified\n sorted map is serializable."}, {"method_name": "synchronizedNavigableMap", "method_sig": "public static <K, V> NavigableMap<K, V> synchronizedNavigableMap (NavigableMap<K, V> m)", "description": "Returns a synchronized (thread-safe) navigable map backed by the\n specified navigable map.  In order to guarantee serial access, it is\n critical that all access to the backing navigable map is\n accomplished through the returned navigable map (or its views).\n\n It is imperative that the user manually synchronize on the returned\n navigable map when traversing any of its collection views, or the\n collections views of any of its subMap, headMap or\n tailMap views, via Iterator, Spliterator or\n Stream:\n \n  NavigableMap m = Collections.synchronizedNavigableMap(new TreeMap());\n      ...\n  Set s = m.keySet();  // Needn't be in synchronized block\n      ...\n  synchronized (m) {  // Synchronizing on m, not s!\n      Iterator i = s.iterator(); // Must be in synchronized block\n      while (i.hasNext())\n          foo(i.next());\n  }\n \n or:\n \n  NavigableMap m = Collections.synchronizedNavigableMap(new TreeMap());\n  NavigableMap m2 = m.subMap(foo, true, bar, false);\n      ...\n  Set s2 = m2.keySet();  // Needn't be in synchronized block\n      ...\n  synchronized (m) {  // Synchronizing on m, not m2 or s2!\n      Iterator i = s.iterator(); // Must be in synchronized block\n      while (i.hasNext())\n          foo(i.next());\n  }\n \n Failure to follow this advice may result in non-deterministic behavior.\n\n The returned navigable map will be serializable if the specified\n navigable map is serializable."}, {"method_name": "checkedCollection", "method_sig": "public static <E> Collection<E> checkedCollection (Collection<E> c,\n                                                  Class<E> type)", "description": "Returns a dynamically typesafe view of the specified collection.\n Any attempt to insert an element of the wrong type will result in an\n immediate ClassCastException.  Assuming a collection\n contains no incorrectly typed elements prior to the time a\n dynamically typesafe view is generated, and that all subsequent\n access to the collection takes place through the view, it is\n guaranteed that the collection cannot contain an incorrectly\n typed element.\n\n The generics mechanism in the language provides compile-time\n (static) type checking, but it is possible to defeat this mechanism\n with unchecked casts.  Usually this is not a problem, as the compiler\n issues warnings on all such unchecked operations.  There are, however,\n times when static type checking alone is not sufficient.  For example,\n suppose a collection is passed to a third-party library and it is\n imperative that the library code not corrupt the collection by\n inserting an element of the wrong type.\n\n Another use of dynamically typesafe views is debugging.  Suppose a\n program fails with a ClassCastException, indicating that an\n incorrectly typed element was put into a parameterized collection.\n Unfortunately, the exception can occur at any time after the erroneous\n element is inserted, so it typically provides little or no information\n as to the real source of the problem.  If the problem is reproducible,\n one can quickly determine its source by temporarily modifying the\n program to wrap the collection with a dynamically typesafe view.\n For example, this declaration:\n   \n     Collection<String> c = new HashSet<>();\n \n may be replaced temporarily by this one:\n   \n     Collection<String> c = Collections.checkedCollection(\n         new HashSet<>(), String.class);\n \n Running the program again will cause it to fail at the point where\n an incorrectly typed element is inserted into the collection, clearly\n identifying the source of the problem.  Once the problem is fixed, the\n modified declaration may be reverted back to the original.\n\n The returned collection does not pass the hashCode and equals\n operations through to the backing collection, but relies on\n Object's equals and hashCode methods.  This\n is necessary to preserve the contracts of these operations in the case\n that the backing collection is a set or a list.\n\n The returned collection will be serializable if the specified\n collection is serializable.\n\n Since null is considered to be a value of any reference\n type, the returned collection permits insertion of null elements\n whenever the backing collection does."}, {"method_name": "checkedQueue", "method_sig": "public static <E> Queue<E> checkedQueue (Queue<E> queue,\n                                        Class<E> type)", "description": "Returns a dynamically typesafe view of the specified queue.\n Any attempt to insert an element of the wrong type will result in\n an immediate ClassCastException.  Assuming a queue contains\n no incorrectly typed elements prior to the time a dynamically typesafe\n view is generated, and that all subsequent access to the queue\n takes place through the view, it is guaranteed that the\n queue cannot contain an incorrectly typed element.\n\n A discussion of the use of dynamically typesafe views may be\n found in the documentation for the checkedCollection method.\n\n The returned queue will be serializable if the specified queue\n is serializable.\n\n Since null is considered to be a value of any reference\n type, the returned queue permits insertion of null elements\n whenever the backing queue does."}, {"method_name": "checkedSet", "method_sig": "public static <E> Set<E> checkedSet (Set<E> s,\n                                    Class<E> type)", "description": "Returns a dynamically typesafe view of the specified set.\n Any attempt to insert an element of the wrong type will result in\n an immediate ClassCastException.  Assuming a set contains\n no incorrectly typed elements prior to the time a dynamically typesafe\n view is generated, and that all subsequent access to the set\n takes place through the view, it is guaranteed that the\n set cannot contain an incorrectly typed element.\n\n A discussion of the use of dynamically typesafe views may be\n found in the documentation for the checkedCollection method.\n\n The returned set will be serializable if the specified set is\n serializable.\n\n Since null is considered to be a value of any reference\n type, the returned set permits insertion of null elements whenever\n the backing set does."}, {"method_name": "checkedSortedSet", "method_sig": "public static <E> SortedSet<E> checkedSortedSet (SortedSet<E> s,\n                                                Class<E> type)", "description": "Returns a dynamically typesafe view of the specified sorted set.\n Any attempt to insert an element of the wrong type will result in an\n immediate ClassCastException.  Assuming a sorted set\n contains no incorrectly typed elements prior to the time a\n dynamically typesafe view is generated, and that all subsequent\n access to the sorted set takes place through the view, it is\n guaranteed that the sorted set cannot contain an incorrectly\n typed element.\n\n A discussion of the use of dynamically typesafe views may be\n found in the documentation for the checkedCollection method.\n\n The returned sorted set will be serializable if the specified sorted\n set is serializable.\n\n Since null is considered to be a value of any reference\n type, the returned sorted set permits insertion of null elements\n whenever the backing sorted set does."}, {"method_name": "checkedNavigableSet", "method_sig": "public static <E> NavigableSet<E> checkedNavigableSet (NavigableSet<E> s,\n                                                      Class<E> type)", "description": "Returns a dynamically typesafe view of the specified navigable set.\n Any attempt to insert an element of the wrong type will result in an\n immediate ClassCastException.  Assuming a navigable set\n contains no incorrectly typed elements prior to the time a\n dynamically typesafe view is generated, and that all subsequent\n access to the navigable set takes place through the view, it is\n guaranteed that the navigable set cannot contain an incorrectly\n typed element.\n\n A discussion of the use of dynamically typesafe views may be\n found in the documentation for the checkedCollection method.\n\n The returned navigable set will be serializable if the specified\n navigable set is serializable.\n\n Since null is considered to be a value of any reference\n type, the returned navigable set permits insertion of null elements\n whenever the backing sorted set does."}, {"method_name": "checkedList", "method_sig": "public static <E> List<E> checkedList (List<E> list,\n                                      Class<E> type)", "description": "Returns a dynamically typesafe view of the specified list.\n Any attempt to insert an element of the wrong type will result in\n an immediate ClassCastException.  Assuming a list contains\n no incorrectly typed elements prior to the time a dynamically typesafe\n view is generated, and that all subsequent access to the list\n takes place through the view, it is guaranteed that the\n list cannot contain an incorrectly typed element.\n\n A discussion of the use of dynamically typesafe views may be\n found in the documentation for the checkedCollection method.\n\n The returned list will be serializable if the specified list\n is serializable.\n\n Since null is considered to be a value of any reference\n type, the returned list permits insertion of null elements whenever\n the backing list does."}, {"method_name": "checkedMap", "method_sig": "public static <K, V> Map<K, V> checkedMap (Map<K, V> m,\n                                                    Class<K> keyType,\n                                                    Class<V> valueType)", "description": "Returns a dynamically typesafe view of the specified map.\n Any attempt to insert a mapping whose key or value have the wrong\n type will result in an immediate ClassCastException.\n Similarly, any attempt to modify the value currently associated with\n a key will result in an immediate ClassCastException,\n whether the modification is attempted directly through the map\n itself, or through a Map.Entry instance obtained from the\n map's entry set view.\n\n Assuming a map contains no incorrectly typed keys or values\n prior to the time a dynamically typesafe view is generated, and\n that all subsequent access to the map takes place through the view\n (or one of its collection views), it is guaranteed that the\n map cannot contain an incorrectly typed key or value.\n\n A discussion of the use of dynamically typesafe views may be\n found in the documentation for the checkedCollection method.\n\n The returned map will be serializable if the specified map is\n serializable.\n\n Since null is considered to be a value of any reference\n type, the returned map permits insertion of null keys or values\n whenever the backing map does."}, {"method_name": "checkedSortedMap", "method_sig": "public static <K, V> SortedMap<K, V> checkedSortedMap (SortedMap<K, V> m,\n                                                                Class<K> keyType,\n                                                                Class<V> valueType)", "description": "Returns a dynamically typesafe view of the specified sorted map.\n Any attempt to insert a mapping whose key or value have the wrong\n type will result in an immediate ClassCastException.\n Similarly, any attempt to modify the value currently associated with\n a key will result in an immediate ClassCastException,\n whether the modification is attempted directly through the map\n itself, or through a Map.Entry instance obtained from the\n map's entry set view.\n\n Assuming a map contains no incorrectly typed keys or values\n prior to the time a dynamically typesafe view is generated, and\n that all subsequent access to the map takes place through the view\n (or one of its collection views), it is guaranteed that the\n map cannot contain an incorrectly typed key or value.\n\n A discussion of the use of dynamically typesafe views may be\n found in the documentation for the checkedCollection method.\n\n The returned map will be serializable if the specified map is\n serializable.\n\n Since null is considered to be a value of any reference\n type, the returned map permits insertion of null keys or values\n whenever the backing map does."}, {"method_name": "checkedNavigableMap", "method_sig": "public static <K, V> NavigableMap<K, V> checkedNavigableMap (NavigableMap<K, V> m,\n                                                                      Class<K> keyType,\n                                                                      Class<V> valueType)", "description": "Returns a dynamically typesafe view of the specified navigable map.\n Any attempt to insert a mapping whose key or value have the wrong\n type will result in an immediate ClassCastException.\n Similarly, any attempt to modify the value currently associated with\n a key will result in an immediate ClassCastException,\n whether the modification is attempted directly through the map\n itself, or through a Map.Entry instance obtained from the\n map's entry set view.\n\n Assuming a map contains no incorrectly typed keys or values\n prior to the time a dynamically typesafe view is generated, and\n that all subsequent access to the map takes place through the view\n (or one of its collection views), it is guaranteed that the\n map cannot contain an incorrectly typed key or value.\n\n A discussion of the use of dynamically typesafe views may be\n found in the documentation for the checkedCollection method.\n\n The returned map will be serializable if the specified map is\n serializable.\n\n Since null is considered to be a value of any reference\n type, the returned map permits insertion of null keys or values\n whenever the backing map does."}, {"method_name": "emptyIterator", "method_sig": "public static <T> Iterator<T> emptyIterator()", "description": "Returns an iterator that has no elements.  More precisely,\n\n \nhasNext always returns \n false.\nnext always throws NoSuchElementException.\nremove always throws IllegalStateException.\n\nImplementations of this method are permitted, but not\n required, to return the same object from multiple invocations."}, {"method_name": "emptyListIterator", "method_sig": "public static <T> ListIterator<T> emptyListIterator()", "description": "Returns a list iterator that has no elements.  More precisely,\n\n \nhasNext and hasPrevious always return \n false.\nnext and previous always throw NoSuchElementException.\nremove and set always throw IllegalStateException.\nadd always throws UnsupportedOperationException.\nnextIndex always returns\n 0.\npreviousIndex always\n returns -1.\n\nImplementations of this method are permitted, but not\n required, to return the same object from multiple invocations."}, {"method_name": "emptyEnumeration", "method_sig": "public static <T> Enumeration<T> emptyEnumeration()", "description": "Returns an enumeration that has no elements.  More precisely,\n\n \nhasMoreElements always\n returns false.\n nextElement always throws\n NoSuchElementException.\n\nImplementations of this method are permitted, but not\n required, to return the same object from multiple invocations."}, {"method_name": "emptySet", "method_sig": "public static final <T> Set<T> emptySet()", "description": "Returns an empty set (immutable).  This set is serializable.\n Unlike the like-named field, this method is parameterized.\n\n This example illustrates the type-safe way to obtain an empty set:\n \n     Set<String> s = Collections.emptySet();\n "}, {"method_name": "emptySortedSet", "method_sig": "public static <E> SortedSet<E> emptySortedSet()", "description": "Returns an empty sorted set (immutable).  This set is serializable.\n\n This example illustrates the type-safe way to obtain an empty\n sorted set:\n  \n     SortedSet<String> s = Collections.emptySortedSet();\n "}, {"method_name": "emptyNavigableSet", "method_sig": "public static <E> NavigableSet<E> emptyNavigableSet()", "description": "Returns an empty navigable set (immutable).  This set is serializable.\n\n This example illustrates the type-safe way to obtain an empty\n navigable set:\n  \n     NavigableSet<String> s = Collections.emptyNavigableSet();\n "}, {"method_name": "emptyList", "method_sig": "public static final <T> List<T> emptyList()", "description": "Returns an empty list (immutable).  This list is serializable.\n\n This example illustrates the type-safe way to obtain an empty list:\n \n     List<String> s = Collections.emptyList();\n "}, {"method_name": "emptyMap", "method_sig": "public static final <K, V> Map<K, V> emptyMap()", "description": "Returns an empty map (immutable).  This map is serializable.\n\n This example illustrates the type-safe way to obtain an empty map:\n \n     Map<String, Date> s = Collections.emptyMap();\n "}, {"method_name": "emptySortedMap", "method_sig": "public static final <K, V> SortedMap<K, V> emptySortedMap()", "description": "Returns an empty sorted map (immutable).  This map is serializable.\n\n This example illustrates the type-safe way to obtain an empty map:\n  \n     SortedMap<String, Date> s = Collections.emptySortedMap();\n "}, {"method_name": "emptyNavigableMap", "method_sig": "public static final <K, V> NavigableMap<K, V> emptyNavigableMap()", "description": "Returns an empty navigable map (immutable).  This map is serializable.\n\n This example illustrates the type-safe way to obtain an empty map:\n  \n     NavigableMap<String, Date> s = Collections.emptyNavigableMap();\n "}, {"method_name": "singleton", "method_sig": "public static <T> Set<T> singleton (T o)", "description": "Returns an immutable set containing only the specified object.\n The returned set is serializable."}, {"method_name": "singletonList", "method_sig": "public static <T> List<T> singletonList (T o)", "description": "Returns an immutable list containing only the specified object.\n The returned list is serializable."}, {"method_name": "singletonMap", "method_sig": "public static <K, V> Map<K, V> singletonMap (K key,\n                                                      V value)", "description": "Returns an immutable map, mapping only the specified key to the\n specified value.  The returned map is serializable."}, {"method_name": "nCopies", "method_sig": "public static <T> List<T> nCopies (int n,\n                                  T o)", "description": "Returns an immutable list consisting of n copies of the\n specified object.  The newly allocated data object is tiny (it contains\n a single reference to the data object).  This method is useful in\n combination with the List.addAll method to grow lists.\n The returned list is serializable."}, {"method_name": "reverseOrder", "method_sig": "public static <T> Comparator<T> reverseOrder()", "description": "Returns a comparator that imposes the reverse of the natural\n ordering on a collection of objects that implement the\n Comparable interface.  (The natural ordering is the ordering\n imposed by the objects' own compareTo method.)  This enables a\n simple idiom for sorting (or maintaining) collections (or arrays) of\n objects that implement the Comparable interface in\n reverse-natural-order.  For example, suppose a is an array of\n strings. Then: \n          Arrays.sort(a, Collections.reverseOrder());\n  sorts the array in reverse-lexicographic (alphabetical) order.\n\n The returned comparator is serializable."}, {"method_name": "reverseOrder", "method_sig": "public static <T> Comparator<T> reverseOrder (Comparator<T> cmp)", "description": "Returns a comparator that imposes the reverse ordering of the specified\n comparator.  If the specified comparator is null, this method is\n equivalent to reverseOrder() (in other words, it returns a\n comparator that imposes the reverse of the natural ordering on\n a collection of objects that implement the Comparable interface).\n\n The returned comparator is serializable (assuming the specified\n comparator is also serializable or null)."}, {"method_name": "enumeration", "method_sig": "public static <T> Enumeration<T> enumeration (Collection<T> c)", "description": "Returns an enumeration over the specified collection.  This provides\n interoperability with legacy APIs that require an enumeration\n as input.\n\n The iterator returned from a call to Enumeration.asIterator()\n does not support removal of elements from the specified collection.  This\n is necessary to avoid unintentionally increasing the capabilities of the\n returned enumeration."}, {"method_name": "list", "method_sig": "public static <T> ArrayList<T> list (Enumeration<T> e)", "description": "Returns an array list containing the elements returned by the\n specified enumeration in the order they are returned by the\n enumeration.  This method provides interoperability between\n legacy APIs that return enumerations and new APIs that require\n collections."}, {"method_name": "frequency", "method_sig": "public static int frequency (Collection<?> c,\n                            Object o)", "description": "Returns the number of elements in the specified collection equal to the\n specified object.  More formally, returns the number of elements\n e in the collection such that\n Objects.equals(o, e)."}, {"method_name": "disjoint", "method_sig": "public static boolean disjoint (Collection<?> c1,\n                               Collection<?> c2)", "description": "Returns true if the two specified collections have no\n elements in common.\n\n Care must be exercised if this method is used on collections that\n do not comply with the general contract for Collection.\n Implementations may elect to iterate over either collection and test\n for containment in the other collection (or to perform any equivalent\n computation).  If either collection uses a nonstandard equality test\n (as does a SortedSet whose ordering is not compatible with\n equals, or the key set of an IdentityHashMap), both\n collections must use the same nonstandard equality test, or the\n result of this method is undefined.\n\n Care must also be exercised when using collections that have\n restrictions on the elements that they may contain. Collection\n implementations are allowed to throw exceptions for any operation\n involving elements they deem ineligible. For absolute safety the\n specified collections should contain only elements which are\n eligible elements for both collections.\n\n Note that it is permissible to pass the same collection in both\n parameters, in which case the method will return true if and\n only if the collection is empty."}, {"method_name": "addAll", "method_sig": "@SafeVarargs\npublic static <T> boolean addAll (Collection<? super T> c,\n                                 T... elements)", "description": "Adds all of the specified elements to the specified collection.\n Elements to be added may be specified individually or as an array.\n The behavior of this convenience method is identical to that of\n c.addAll(Arrays.asList(elements)), but this method is likely\n to run significantly faster under most implementations.\n\n When elements are specified individually, this method provides a\n convenient way to add a few elements to an existing collection:\n \n     Collections.addAll(flavors, \"Peaches 'n Plutonium\", \"Rocky Racoon\");\n "}, {"method_name": "newSetFromMap", "method_sig": "public static <E> Set<E> newSetFromMap (Map<E, Boolean> map)", "description": "Returns a set backed by the specified map.  The resulting set displays\n the same ordering, concurrency, and performance characteristics as the\n backing map.  In essence, this factory method provides a Set\n implementation corresponding to any Map implementation.  There\n is no need to use this method on a Map implementation that\n already has a corresponding Set implementation (such as HashMap or TreeMap).\n\n Each method invocation on the set returned by this method results in\n exactly one method invocation on the backing map or its keySet\n view, with one exception.  The addAll method is implemented\n as a sequence of put invocations on the backing map.\n\n The specified map must be empty at the time this method is invoked,\n and should not be accessed directly after this method returns.  These\n conditions are ensured if the map is created empty, passed directly\n to this method, and no reference to the map is retained, as illustrated\n in the following code fragment:\n \n    Set<Object> weakHashSet = Collections.newSetFromMap(\n        new WeakHashMap<Object, Boolean>());\n "}, {"method_name": "asLifoQueue", "method_sig": "public static <T> Queue<T> asLifoQueue (Deque<T> deque)", "description": "Returns a view of a Deque as a Last-in-first-out (Lifo)\n Queue. Method add is mapped to push,\n remove is mapped to pop and so on. This\n view can be useful when you would like to use a method\n requiring a Queue but you need Lifo ordering.\n\n Each method invocation on the queue returned by this method\n results in exactly one method invocation on the backing deque, with\n one exception.  The addAll method is\n implemented as a sequence of addFirst\n invocations on the backing deque."}]}