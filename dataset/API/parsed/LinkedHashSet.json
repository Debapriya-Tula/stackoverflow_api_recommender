{"name": "Class LinkedHashSet<E>", "module": "java.base", "package": "java.util", "text": "Hash table and linked list implementation of the Set interface,\n with predictable iteration order.  This implementation differs from\n HashSet in that it maintains a doubly-linked list running through\n all of its entries.  This linked list defines the iteration ordering,\n which is the order in which elements were inserted into the set\n (insertion-order).  Note that insertion order is not affected\n if an element is re-inserted into the set.  (An element e\n is reinserted into a set s if s.add(e) is invoked when\n s.contains(e) would return true immediately prior to\n the invocation.)\n\n This implementation spares its clients from the unspecified, generally\n chaotic ordering provided by HashSet, without incurring the\n increased cost associated with TreeSet.  It can be used to\n produce a copy of a set that has the same order as the original, regardless\n of the original set's implementation:\n \n     void foo(Set s) {\n         Set copy = new LinkedHashSet(s);\n         ...\n     }\n \n This technique is particularly useful if a module takes a set on input,\n copies it, and later returns results whose order is determined by that of\n the copy.  (Clients generally appreciate having things returned in the same\n order they were presented.)\n\n This class provides all of the optional Set operations, and\n permits null elements.  Like HashSet, it provides constant-time\n performance for the basic operations (add, contains and\n remove), assuming the hash function disperses elements\n properly among the buckets.  Performance is likely to be just slightly\n below that of HashSet, due to the added expense of maintaining the\n linked list, with one exception: Iteration over a LinkedHashSet\n requires time proportional to the size of the set, regardless of\n its capacity.  Iteration over a HashSet is likely to be more\n expensive, requiring time proportional to its capacity.\n\n A linked hash set has two parameters that affect its performance:\n initial capacity and load factor.  They are defined precisely\n as for HashSet.  Note, however, that the penalty for choosing an\n excessively high value for initial capacity is less severe for this class\n than for HashSet, as iteration times for this class are unaffected\n by capacity.\n\n Note that this implementation is not synchronized.\n If multiple threads access a linked hash set concurrently, and at least\n one of the threads modifies the set, it must be synchronized\n externally.  This is typically accomplished by synchronizing on some\n object that naturally encapsulates the set.\n\n If no such object exists, the set should be \"wrapped\" using the\n Collections.synchronizedSet\n method.  This is best done at creation time, to prevent accidental\n unsynchronized access to the set: \n   Set s = Collections.synchronizedSet(new LinkedHashSet(...));\nThe iterators returned by this class's iterator method are\n fail-fast: if the set is modified at any time after the iterator\n is created, in any way except through the iterator's own remove\n method, the iterator will throw a ConcurrentModificationException.\n Thus, in the face of concurrent modification, the iterator fails quickly\n and cleanly, rather than risking arbitrary, non-deterministic behavior at\n an undetermined time in the future.\n\n Note that the fail-fast behavior of an iterator cannot be guaranteed\n as it is, generally speaking, impossible to make any hard guarantees in the\n presence of unsynchronized concurrent modification.  Fail-fast iterators\n throw ConcurrentModificationException on a best-effort basis.\n Therefore, it would be wrong to write a program that depended on this\n exception for its correctness:   the fail-fast behavior of iterators\n should be used only to detect bugs.\nThis class is a member of the\n \n Java Collections Framework.", "codes": ["public class LinkedHashSet<E>\nextends HashSet<E>\nimplements Set<E>, Cloneable, Serializable"], "fields": [], "methods": [{"method_name": "spliterator", "method_sig": "public Spliterator<E> spliterator()", "description": "Creates a late-binding\n and fail-fast Spliterator over the elements in this set.\n\n The Spliterator reports Spliterator.SIZED,\n Spliterator.DISTINCT, and ORDERED.  Implementations\n should document the reporting of additional characteristic values."}]}