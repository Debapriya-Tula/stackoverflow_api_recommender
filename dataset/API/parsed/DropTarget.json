{"name": "Class DropTarget", "module": "java.desktop", "package": "java.awt.dnd", "text": "The DropTarget is associated\n with a Component when that Component\n wishes\n to accept drops during Drag and Drop operations.\n \n  Each\n DropTarget is associated with a FlavorMap.\n The default FlavorMap hereafter designates the\n FlavorMap returned by SystemFlavorMap.getDefaultFlavorMap().", "codes": ["public class DropTarget\nextends Object\nimplements DropTargetListener, Serializable"], "fields": [], "methods": [{"method_name": "setComponent", "method_sig": "public void setComponent (Component c)", "description": "Note: this interface is required to permit the safe association\n of a DropTarget with a Component in one of two ways, either:\n component.setDropTarget(droptarget);\n or droptarget.setComponent(component);\n\n The Component will receive drops only if it is enabled."}, {"method_name": "getComponent", "method_sig": "public Component getComponent()", "description": "Gets the Component associated\n with this DropTarget."}, {"method_name": "setDefaultActions", "method_sig": "public void setDefaultActions (int ops)", "description": "Sets the default acceptable actions for this DropTarget"}, {"method_name": "getDefaultActions", "method_sig": "public int getDefaultActions()", "description": "Gets an int representing the\n current action(s) supported by this DropTarget."}, {"method_name": "setActive", "method_sig": "public void setActive (boolean isActive)", "description": "Sets the DropTarget active if true,\n inactive if false."}, {"method_name": "isActive", "method_sig": "public boolean isActive()", "description": "Reports whether or not\n this DropTarget\n is currently active (ready to accept drops)."}, {"method_name": "addDropTargetListener", "method_sig": "public void addDropTargetListener (DropTargetListener dtl)\n                           throws TooManyListenersException", "description": "Adds a new DropTargetListener (UNICAST SOURCE)."}, {"method_name": "removeDropTargetListener", "method_sig": "public void removeDropTargetListener (DropTargetListener dtl)", "description": "Removes the current DropTargetListener (UNICAST SOURCE)."}, {"method_name": "dragEnter", "method_sig": "public void dragEnter (DropTargetDragEvent dtde)", "description": "Calls dragEnter on the registered\n DropTargetListener and passes it\n the specified DropTargetDragEvent.\n Has no effect if this DropTarget\n is not active."}, {"method_name": "dragOver", "method_sig": "public void dragOver (DropTargetDragEvent dtde)", "description": "Calls dragOver on the registered\n DropTargetListener and passes it\n the specified DropTargetDragEvent.\n Has no effect if this DropTarget\n is not active."}, {"method_name": "dropActionChanged", "method_sig": "public void dropActionChanged (DropTargetDragEvent dtde)", "description": "Calls dropActionChanged on the registered\n DropTargetListener and passes it\n the specified DropTargetDragEvent.\n Has no effect if this DropTarget\n is not active."}, {"method_name": "dragExit", "method_sig": "public void dragExit (DropTargetEvent dte)", "description": "Calls dragExit on the registered\n DropTargetListener and passes it\n the specified DropTargetEvent.\n Has no effect if this DropTarget\n is not active.\n \n This method itself does not throw any exception\n for null parameter but for exceptions thrown by\n the respective method of the listener."}, {"method_name": "drop", "method_sig": "public void drop (DropTargetDropEvent dtde)", "description": "Calls drop on the registered\n DropTargetListener and passes it\n the specified DropTargetDropEvent\n if this DropTarget is active."}, {"method_name": "getFlavorMap", "method_sig": "public FlavorMap getFlavorMap()", "description": "Gets the FlavorMap\n associated with this DropTarget.\n If no FlavorMap has been set for this\n DropTarget, it is associated with the default\n FlavorMap."}, {"method_name": "setFlavorMap", "method_sig": "public void setFlavorMap (FlavorMap fm)", "description": "Sets the FlavorMap associated\n with this DropTarget."}, {"method_name": "addNotify", "method_sig": "public void addNotify()", "description": "Notify the DropTarget that it has been associated with a Component\n\n\n This method is usually called from java.awt.Component.addNotify() of\n the Component associated with this DropTarget to notify the DropTarget\n that a ComponentPeer has been associated with that Component.\n\n Calling this method, other than to notify this DropTarget of the\n association of the ComponentPeer with the Component may result in\n a malfunction of the DnD system."}, {"method_name": "removeNotify", "method_sig": "public void removeNotify()", "description": "Notify the DropTarget that it has been disassociated from a Component\n\n\n This method is usually called from java.awt.Component.removeNotify() of\n the Component associated with this DropTarget to notify the DropTarget\n that a ComponentPeer has been disassociated with that Component.\n\n Calling this method, other than to notify this DropTarget of the\n disassociation of the ComponentPeer from the Component may result in\n a malfunction of the DnD system."}, {"method_name": "getDropTargetContext", "method_sig": "public DropTargetContext getDropTargetContext()", "description": "Gets the DropTargetContext associated\n with this DropTarget."}, {"method_name": "createDropTargetContext", "method_sig": "protected DropTargetContext createDropTargetContext()", "description": "Creates the DropTargetContext associated with this DropTarget.\n Subclasses may override this method to instantiate their own\n DropTargetContext subclass.\n\n This call is typically *only* called by the platform's\n DropTargetContextPeer as a drag operation encounters this\n DropTarget. Accessing the Context while no Drag is current\n has undefined results."}, {"method_name": "createDropTargetAutoScroller", "method_sig": "protected DropTarget.DropTargetAutoScroller createDropTargetAutoScroller (Component c,\n                                                                         Point p)", "description": "create an embedded autoscroller"}, {"method_name": "initializeAutoscrolling", "method_sig": "protected void initializeAutoscrolling (Point p)", "description": "initialize autoscrolling"}, {"method_name": "updateAutoscroll", "method_sig": "protected void updateAutoscroll (Point dragCursorLocn)", "description": "update autoscrolling with current cursor location"}, {"method_name": "clearAutoscroll", "method_sig": "protected void clearAutoscroll()", "description": "clear autoscrolling"}]}