{"name": "Class StampedLock", "module": "java.base", "package": "java.util.concurrent.locks", "text": "A capability-based lock with three modes for controlling read/write\n access.  The state of a StampedLock consists of a version and mode.\n Lock acquisition methods return a stamp that represents and\n controls access with respect to a lock state; \"try\" versions of\n these methods may instead return the special value zero to\n represent failure to acquire access. Lock release and conversion\n methods require stamps as arguments, and fail if they do not match\n the state of the lock. The three modes are:\n\n \nWriting. Method writeLock() possibly blocks\n   waiting for exclusive access, returning a stamp that can be used\n   in method unlockWrite(long) to release the lock. Untimed and\n   timed versions of tryWriteLock are also provided. When\n   the lock is held in write mode, no read locks may be obtained,\n   and all optimistic read validations will fail.\n\n  Reading. Method readLock() possibly blocks\n   waiting for non-exclusive access, returning a stamp that can be\n   used in method unlockRead(long) to release the lock. Untimed\n   and timed versions of tryReadLock are also provided.\n\n  Optimistic Reading. Method tryOptimisticRead()\n   returns a non-zero stamp only if the lock is not currently held\n   in write mode. Method validate(long) returns true if the lock\n   has not been acquired in write mode since obtaining a given\n   stamp.  This mode can be thought of as an extremely weak version\n   of a read-lock, that can be broken by a writer at any time.  The\n   use of optimistic mode for short read-only code segments often\n   reduces contention and improves throughput.  However, its use is\n   inherently fragile.  Optimistic read sections should only read\n   fields and hold them in local variables for later use after\n   validation. Fields read while in optimistic mode may be wildly\n   inconsistent, so usage applies only when you are familiar enough\n   with data representations to check consistency and/or repeatedly\n   invoke method validate().  For example, such steps are\n   typically required when first reading an object or array\n   reference, and then accessing one of its fields, elements or\n   methods.\n\n \nThis class also supports methods that conditionally provide\n conversions across the three modes. For example, method tryConvertToWriteLock(long) attempts to \"upgrade\" a mode, returning\n a valid write stamp if (1) already in writing mode (2) in reading\n mode and there are no other readers or (3) in optimistic mode and\n the lock is available. The forms of these methods are designed to\n help reduce some of the code bloat that otherwise occurs in\n retry-based designs.\n\n StampedLocks are designed for use as internal utilities in the\n development of thread-safe components. Their use relies on\n knowledge of the internal properties of the data, objects, and\n methods they are protecting.  They are not reentrant, so locked\n bodies should not call other unknown methods that may try to\n re-acquire locks (although you may pass a stamp to other methods\n that can use or convert it).  The use of read lock modes relies on\n the associated code sections being side-effect-free.  Unvalidated\n optimistic read sections cannot call methods that are not known to\n tolerate potential inconsistencies.  Stamps use finite\n representations, and are not cryptographically secure (i.e., a\n valid stamp may be guessable). Stamp values may recycle after (no\n sooner than) one year of continuous operation. A stamp held without\n use or validation for longer than this period may fail to validate\n correctly.  StampedLocks are serializable, but always deserialize\n into initial unlocked state, so they are not useful for remote\n locking.\n\n Like Semaphore, but unlike most\n Lock implementations, StampedLocks have no notion of ownership.\n Locks acquired in one thread can be released or converted in another.\n\n The scheduling policy of StampedLock does not consistently\n prefer readers over writers or vice versa.  All \"try\" methods are\n best-effort and do not necessarily conform to any scheduling or\n fairness policy. A zero return from any \"try\" method for acquiring\n or converting locks does not carry any information about the state\n of the lock; a subsequent invocation may succeed.\n\n Because it supports coordinated usage across multiple lock\n modes, this class does not directly implement the Lock or\n ReadWriteLock interfaces. However, a StampedLock may be\n viewed asReadLock(), asWriteLock(), or asReadWriteLock() in applications requiring only the associated\n set of functionality.\n\n Sample Usage. The following illustrates some usage idioms\n in a class that maintains simple two-dimensional points. The sample\n code illustrates some try/catch conventions even though they are\n not strictly needed here because no exceptions can occur in their\n bodies.\n\n  \n class Point {\n   private double x, y;\n   private final StampedLock sl = new StampedLock();\n\n   // an exclusively locked method\n   void move(double deltaX, double deltaY) {\n     long stamp = sl.writeLock();\n     try {\n       x += deltaX;\n       y += deltaY;\n     } finally {\n       sl.unlockWrite(stamp);\n     }\n   }\n\n   // a read-only method\n   // upgrade from optimistic read to read lock\n   double distanceFromOrigin() {\n     long stamp = sl.tryOptimisticRead();\n     try {\n       retryHoldingLock: for (;; stamp = sl.readLock()) {\n         if (stamp == 0L)\n           continue retryHoldingLock;\n         // possibly racy reads\n         double currentX = x;\n         double currentY = y;\n         if (!sl.validate(stamp))\n           continue retryHoldingLock;\n         return Math.hypot(currentX, currentY);\n       }\n     } finally {\n       if (StampedLock.isReadLockStamp(stamp))\n         sl.unlockRead(stamp);\n     }\n   }\n\n   // upgrade from optimistic read to write lock\n   void moveIfAtOrigin(double newX, double newY) {\n     long stamp = sl.tryOptimisticRead();\n     try {\n       retryHoldingLock: for (;; stamp = sl.writeLock()) {\n         if (stamp == 0L)\n           continue retryHoldingLock;\n         // possibly racy reads\n         double currentX = x;\n         double currentY = y;\n         if (!sl.validate(stamp))\n           continue retryHoldingLock;\n         if (currentX != 0.0 || currentY != 0.0)\n           break;\n         stamp = sl.tryConvertToWriteLock(stamp);\n         if (stamp == 0L)\n           continue retryHoldingLock;\n         // exclusive access\n         x = newX;\n         y = newY;\n         return;\n       }\n     } finally {\n       if (StampedLock.isWriteLockStamp(stamp))\n         sl.unlockWrite(stamp);\n     }\n   }\n\n   // Upgrade read lock to write lock\n   void moveIfAtOrigin(double newX, double newY) {\n     long stamp = sl.readLock();\n     try {\n       while (x == 0.0 && y == 0.0) {\n         long ws = sl.tryConvertToWriteLock(stamp);\n         if (ws != 0L) {\n           stamp = ws;\n           x = newX;\n           y = newY;\n           break;\n         }\n         else {\n           sl.unlockRead(stamp);\n           stamp = sl.writeLock();\n         }\n       }\n     } finally {\n       sl.unlock(stamp);\n     }\n   }\n }", "codes": ["public class StampedLock\nextends Object\nimplements Serializable"], "fields": [], "methods": [{"method_name": "writeLock", "method_sig": "public long writeLock()", "description": "Exclusively acquires the lock, blocking if necessary\n until available."}, {"method_name": "tryWriteLock", "method_sig": "public long tryWriteLock()", "description": "Exclusively acquires the lock if it is immediately available."}, {"method_name": "tryWriteLock", "method_sig": "public long tryWriteLock (long time,\n                         TimeUnit unit)\n                  throws InterruptedException", "description": "Exclusively acquires the lock if it is available within the\n given time and the current thread has not been interrupted.\n Behavior under timeout and interruption matches that specified\n for method Lock.tryLock(long,TimeUnit)."}, {"method_name": "writeLockInterruptibly", "method_sig": "public long writeLockInterruptibly()\n                            throws InterruptedException", "description": "Exclusively acquires the lock, blocking if necessary\n until available or the current thread is interrupted.\n Behavior under interruption matches that specified\n for method Lock.lockInterruptibly()."}, {"method_name": "readLock", "method_sig": "public long readLock()", "description": "Non-exclusively acquires the lock, blocking if necessary\n until available."}, {"method_name": "tryReadLock", "method_sig": "public long tryReadLock()", "description": "Non-exclusively acquires the lock if it is immediately available."}, {"method_name": "tryReadLock", "method_sig": "public long tryReadLock (long time,\n                        TimeUnit unit)\n                 throws InterruptedException", "description": "Non-exclusively acquires the lock if it is available within the\n given time and the current thread has not been interrupted.\n Behavior under timeout and interruption matches that specified\n for method Lock.tryLock(long,TimeUnit)."}, {"method_name": "readLockInterruptibly", "method_sig": "public long readLockInterruptibly()\n                           throws InterruptedException", "description": "Non-exclusively acquires the lock, blocking if necessary\n until available or the current thread is interrupted.\n Behavior under interruption matches that specified\n for method Lock.lockInterruptibly()."}, {"method_name": "tryOptimisticRead", "method_sig": "public long tryOptimisticRead()", "description": "Returns a stamp that can later be validated, or zero\n if exclusively locked."}, {"method_name": "validate", "method_sig": "public boolean validate (long stamp)", "description": "Returns true if the lock has not been exclusively acquired\n since issuance of the given stamp. Always returns false if the\n stamp is zero. Always returns true if the stamp represents a\n currently held lock. Invoking this method with a value not\n obtained from tryOptimisticRead() or a locking method\n for this lock has no defined effect or result."}, {"method_name": "unlockWrite", "method_sig": "public void unlockWrite (long stamp)", "description": "If the lock state matches the given stamp, releases the\n exclusive lock."}, {"method_name": "unlockRead", "method_sig": "public void unlockRead (long stamp)", "description": "If the lock state matches the given stamp, releases the\n non-exclusive lock."}, {"method_name": "unlock", "method_sig": "public void unlock (long stamp)", "description": "If the lock state matches the given stamp, releases the\n corresponding mode of the lock."}, {"method_name": "tryConvertToWriteLock", "method_sig": "public long tryConvertToWriteLock (long stamp)", "description": "If the lock state matches the given stamp, atomically performs one of\n the following actions. If the stamp represents holding a write\n lock, returns it.  Or, if a read lock, if the write lock is\n available, releases the read lock and returns a write stamp.\n Or, if an optimistic read, returns a write stamp only if\n immediately available. This method returns zero in all other\n cases."}, {"method_name": "tryConvertToReadLock", "method_sig": "public long tryConvertToReadLock (long stamp)", "description": "If the lock state matches the given stamp, atomically performs one of\n the following actions. If the stamp represents holding a write\n lock, releases it and obtains a read lock.  Or, if a read lock,\n returns it. Or, if an optimistic read, acquires a read lock and\n returns a read stamp only if immediately available. This method\n returns zero in all other cases."}, {"method_name": "tryConvertToOptimisticRead", "method_sig": "public long tryConvertToOptimisticRead (long stamp)", "description": "If the lock state matches the given stamp then, atomically, if the stamp\n represents holding a lock, releases it and returns an\n observation stamp.  Or, if an optimistic read, returns it if\n validated. This method returns zero in all other cases, and so\n may be useful as a form of \"tryUnlock\"."}, {"method_name": "tryUnlockWrite", "method_sig": "public boolean tryUnlockWrite()", "description": "Releases the write lock if it is held, without requiring a\n stamp value. This method may be useful for recovery after\n errors."}, {"method_name": "tryUnlockRead", "method_sig": "public boolean tryUnlockRead()", "description": "Releases one hold of the read lock if it is held, without\n requiring a stamp value. This method may be useful for recovery\n after errors."}, {"method_name": "isWriteLocked", "method_sig": "public boolean isWriteLocked()", "description": "Returns true if the lock is currently held exclusively."}, {"method_name": "isReadLocked", "method_sig": "public boolean isReadLocked()", "description": "Returns true if the lock is currently held non-exclusively."}, {"method_name": "isWriteLockStamp", "method_sig": "public static boolean isWriteLockStamp (long stamp)", "description": "Tells whether a stamp represents holding a lock exclusively.\n This method may be useful in conjunction with\n tryConvertToWriteLock(long), for example:  \n long stamp = sl.tryOptimisticRead();\n try {\n   ...\n   stamp = sl.tryConvertToWriteLock(stamp);\n   ...\n } finally {\n   if (StampedLock.isWriteLockStamp(stamp))\n     sl.unlockWrite(stamp);\n }"}, {"method_name": "isReadLockStamp", "method_sig": "public static boolean isReadLockStamp (long stamp)", "description": "Tells whether a stamp represents holding a lock non-exclusively.\n This method may be useful in conjunction with\n tryConvertToReadLock(long), for example:  \n long stamp = sl.tryOptimisticRead();\n try {\n   ...\n   stamp = sl.tryConvertToReadLock(stamp);\n   ...\n } finally {\n   if (StampedLock.isReadLockStamp(stamp))\n     sl.unlockRead(stamp);\n }"}, {"method_name": "isLockStamp", "method_sig": "public static boolean isLockStamp (long stamp)", "description": "Tells whether a stamp represents holding a lock.\n This method may be useful in conjunction with\n tryConvertToReadLock(long) and tryConvertToWriteLock(long),\n for example:  \n long stamp = sl.tryOptimisticRead();\n try {\n   ...\n   stamp = sl.tryConvertToReadLock(stamp);\n   ...\n   stamp = sl.tryConvertToWriteLock(stamp);\n   ...\n } finally {\n   if (StampedLock.isLockStamp(stamp))\n     sl.unlock(stamp);\n }"}, {"method_name": "isOptimisticReadStamp", "method_sig": "public static boolean isOptimisticReadStamp (long stamp)", "description": "Tells whether a stamp represents a successful optimistic read."}, {"method_name": "getReadLockCount", "method_sig": "public int getReadLockCount()", "description": "Queries the number of read locks held for this lock. This\n method is designed for use in monitoring system state, not for\n synchronization control."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a string identifying this lock, as well as its lock\n state.  The state, in brackets, includes the String \n \"Unlocked\" or the String \"Write-locked\" or the String\n \"Read-locks:\" followed by the current number of\n read-locks held."}, {"method_name": "asReadLock", "method_sig": "public Lock asReadLock()", "description": "Returns a plain Lock view of this StampedLock in which\n the Lock.lock() method is mapped to readLock(),\n and similarly for other methods. The returned Lock does not\n support a Condition; method Lock.newCondition()\n throws UnsupportedOperationException."}, {"method_name": "asWriteLock", "method_sig": "public Lock asWriteLock()", "description": "Returns a plain Lock view of this StampedLock in which\n the Lock.lock() method is mapped to writeLock(),\n and similarly for other methods. The returned Lock does not\n support a Condition; method Lock.newCondition()\n throws UnsupportedOperationException."}, {"method_name": "asReadWriteLock", "method_sig": "public ReadWriteLock asReadWriteLock()", "description": "Returns a ReadWriteLock view of this StampedLock in\n which the ReadWriteLock.readLock() method is mapped to\n asReadLock(), and ReadWriteLock.writeLock() to\n asWriteLock()."}]}