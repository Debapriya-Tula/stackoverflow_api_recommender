{"name": "Class DecimalFormat", "module": "java.base", "package": "java.text", "text": "DecimalFormat is a concrete subclass of\n NumberFormat that formats decimal numbers. It has a variety of\n features designed to make it possible to parse and format numbers in any\n locale, including support for Western, Arabic, and Indic digits.  It also\n supports different kinds of numbers, including integers (123), fixed-point\n numbers (123.4), scientific notation (1.23E4), percentages (12%), and\n currency amounts ($123).  All of these can be localized.\n\n To obtain a NumberFormat for a specific locale, including the\n default locale, call one of NumberFormat's factory methods, such\n as getInstance().  In general, do not call the\n DecimalFormat constructors directly, since the\n NumberFormat factory methods may return subclasses other than\n DecimalFormat. If you need to customize the format object, do\n something like this:\n\n \n NumberFormat f = NumberFormat.getInstance(loc);\n if (f instanceof DecimalFormat) {\n     ((DecimalFormat) f).setDecimalSeparatorAlwaysShown(true);\n }\n \nA DecimalFormat comprises a pattern and a set of\n symbols.  The pattern may be set directly using\n applyPattern(), or indirectly using the API methods.  The\n symbols are stored in a DecimalFormatSymbols object.  When using\n the NumberFormat factory methods, the pattern and symbols are\n read from localized ResourceBundles.\n\n Patterns\nDecimalFormat patterns have the following syntax:\n \n Pattern:\n         PositivePattern\n         PositivePattern ; NegativePattern\n PositivePattern:\n         Prefixopt Number Suffixopt\n NegativePattern:\n         Prefixopt Number Suffixopt\n Prefix:\n         any Unicode characters except \\uFFFE, \\uFFFF, and special characters\n Suffix:\n         any Unicode characters except \\uFFFE, \\uFFFF, and special characters\n Number:\n         Integer Exponentopt\n         Integer . Fraction Exponentopt\n Integer:\n         MinimumInteger\n         #\n         # Integer\n         # , Integer\n MinimumInteger:\n         0\n         0 MinimumInteger\n         0 , MinimumInteger\n Fraction:\n         MinimumFractionopt OptionalFractionopt\n MinimumFraction:\n         0 MinimumFractionopt\n OptionalFraction:\n         # OptionalFractionopt\n Exponent:\n         E MinimumExponent\n MinimumExponent:\n         0 MinimumExponentopt\n \nA DecimalFormat pattern contains a positive and negative\n subpattern, for example, \"#,##0.00;(#,##0.00)\".  Each\n subpattern has a prefix, numeric part, and suffix. The negative subpattern\n is optional; if absent, then the positive subpattern prefixed with the\n localized minus sign ('-' in most locales) is used as the\n negative subpattern. That is, \"0.00\" alone is equivalent to\n \"0.00;-0.00\".  If there is an explicit negative subpattern, it\n serves only to specify the negative prefix and suffix; the number of digits,\n minimal digits, and other characteristics are all the same as the positive\n pattern. That means that \"#,##0.0#;(#)\" produces precisely\n the same behavior as \"#,##0.0#;(#,##0.0#)\".\n\n The prefixes, suffixes, and various symbols used for infinity, digits,\n thousands separators, decimal separators, etc. may be set to arbitrary\n values, and they will appear properly during formatting.  However, care must\n be taken that the symbols and strings do not conflict, or parsing will be\n unreliable.  For example, either the positive and negative prefixes or the\n suffixes must be distinct for DecimalFormat.parse() to be able\n to distinguish positive from negative values.  (If they are identical, then\n DecimalFormat will behave as if no negative subpattern was\n specified.)  Another example is that the decimal separator and thousands\n separator should be distinct characters, or parsing will be impossible.\n\n The grouping separator is commonly used for thousands, but in some\n countries it separates ten-thousands. The grouping size is a constant number\n of digits between the grouping characters, such as 3 for 100,000,000 or 4 for\n 1,0000,0000.  If you supply a pattern with multiple grouping characters, the\n interval between the last one and the end of the integer is the one that is\n used. So \"#,##,###,####\" == \"######,####\" ==\n \"##,####,####\".\n\n Special Pattern Characters\nMany characters in a pattern are taken literally; they are matched during\n parsing and output unchanged during formatting.  Special characters, on the\n other hand, stand for other characters, strings, or classes of characters.\n They must be quoted, unless noted otherwise, if they are to appear in the\n prefix or suffix as literals.\n\n The characters listed here are used in non-localized patterns.  Localized\n patterns use the corresponding characters taken from this formatter's\n DecimalFormatSymbols object instead, and these characters lose\n their special status.  Two exceptions are the currency sign and quote, which\n are not localized.\n\n \n\nChart showing symbol, location, localized, and meaning.\n\n\nSymbol\n          Location\n          Localized?\n          Meaning\n \n\n\n0\nNumber\n          Yes\n          Digit\n     \n#\nNumber\n          Yes\n          Digit, zero shows as absent\n     \n.\nNumber\n          Yes\n          Decimal separator or monetary decimal separator\n     \n-\nNumber\n          Yes\n          Minus sign\n     \n,\nNumber\n          Yes\n          Grouping separator\n     \nE\nNumber\n          Yes\n          Separates mantissa and exponent in scientific notation.\n              Need not be quoted in prefix or suffix.\n\n;\nSubpattern boundary\n          Yes\n          Separates positive and negative subpatterns\n     \n%\nPrefix or suffix\n          Yes\n          Multiply by 100 and show as percentage\n     \n\\u2030\nPrefix or suffix\n          Yes\n          Multiply by 1000 and show as per mille value\n     \n\u00a4 (\\u00A4)\n          Prefix or suffix\n          No\n          Currency sign, replaced by currency symbol.  If\n              doubled, replaced by international currency symbol.\n              If present in a pattern, the monetary decimal separator\n              is used instead of the decimal separator.\n     \n'\nPrefix or suffix\n          No\n          Used to quote special characters in a prefix or suffix,\n              for example, \"'#'#\" formats 123 to\n              \"#123\".  To create a single quote\n              itself, use two in a row: \"# o''clock\".\n \n\n\nScientific Notation\nNumbers in scientific notation are expressed as the product of a mantissa\n and a power of ten, for example, 1234 can be expressed as 1.234 x 10^3.  The\n mantissa is often in the range 1.0 \u2264 x < 10.0, but it need not\n be.\n DecimalFormat can be instructed to format and parse scientific\n notation only via a pattern; there is currently no factory method\n that creates a scientific notation format.  In a pattern, the exponent\n character immediately followed by one or more digit characters indicates\n scientific notation.  Example: \"0.###E0\" formats the number\n 1234 as \"1.234E3\".\n\n \nThe number of digit characters after the exponent character gives the\n minimum exponent digit count.  There is no maximum.  Negative exponents are\n formatted using the localized minus sign, not the prefix and suffix\n from the pattern.  This allows patterns such as \"0.###E0 m/s\".\n\n The minimum and maximum number of integer digits are interpreted\n together:\n\n \nIf the maximum number of integer digits is greater than their minimum number\n and greater than 1, it forces the exponent to be a multiple of the maximum\n number of integer digits, and the minimum number of integer digits to be\n interpreted as 1.  The most common use of this is to generate\n engineering notation, in which the exponent is a multiple of three,\n e.g., \"##0.#####E0\". Using this pattern, the number 12345\n formats to \"12.345E3\", and 123456 formats to\n \"123.456E3\".\n\n Otherwise, the minimum number of integer digits is achieved by adjusting the\n exponent.  Example: 0.00123 formatted with \"00.###E0\" yields\n \"12.3E-4\".\n \nThe number of significant digits in the mantissa is the sum of the\n minimum integer and maximum fraction digits, and is\n unaffected by the maximum integer digits.  For example, 12345 formatted with\n \"##0.##E0\" is \"12.3E3\". To show all digits, set\n the significant digits count to zero.  The number of significant digits\n does not affect parsing.\n\n Exponential patterns may not contain grouping separators.\n \nRounding\nDecimalFormat provides rounding modes defined in\n RoundingMode for formatting.  By default, it uses\n RoundingMode.HALF_EVEN.\n\n Digits\n\n For formatting, DecimalFormat uses the ten consecutive\n characters starting with the localized zero digit defined in the\n DecimalFormatSymbols object as digits. For parsing, these\n digits as well as all Unicode decimal digits, as defined by\n Character.digit, are recognized.\n\n Special Values\nNaN is formatted as a string, which typically has a single character\n \\uFFFD.  This string is determined by the\n DecimalFormatSymbols object.  This is the only value for which\n the prefixes and suffixes are not used.\n\n Infinity is formatted as a string, which typically has a single character\n \\u221E, with the positive or negative prefixes and suffixes\n applied.  The infinity string is determined by the\n DecimalFormatSymbols object.\n\n Negative zero (\"-0\") parses to\n \nBigDecimal(0) if isParseBigDecimal() is\n true,\n Long(0) if isParseBigDecimal() is false\n     and isParseIntegerOnly() is true,\n Double(-0.0) if both isParseBigDecimal()\n and isParseIntegerOnly() are false.\n \nSynchronization\n\n Decimal formats are generally not synchronized.\n It is recommended to create separate format instances for each thread.\n If multiple threads access a format concurrently, it must be synchronized\n externally.\n\n Example\n\n <strong>// Print out a number using the localized number, integer, currency,\n // and percent format for each locale</strong>\n Locale[] locales = NumberFormat.getAvailableLocales();\n double myNumber = -1234.56;\n NumberFormat form;\n for (int j = 0; j < 4; ++j) {\n     System.out.println(\"FORMAT\");\n     for (int i = 0; i < locales.length; ++i) {\n         if (locales[i].getCountry().length() == 0) {\n            continue; // Skip language-only locales\n         }\n         System.out.print(locales[i].getDisplayName());\n         switch (j) {\n         case 0:\n             form = NumberFormat.getInstance(locales[i]); break;\n         case 1:\n             form = NumberFormat.getIntegerInstance(locales[i]); break;\n         case 2:\n             form = NumberFormat.getCurrencyInstance(locales[i]); break;\n         default:\n             form = NumberFormat.getPercentInstance(locales[i]); break;\n         }\n         if (form instanceof DecimalFormat) {\n             System.out.print(\": \" + ((DecimalFormat) form).toPattern());\n         }\n         System.out.print(\" -> \" + form.format(myNumber));\n         try {\n             System.out.println(\" -> \" + form.parse(form.format(myNumber)));\n         } catch (ParseException e) {}\n     }\n }\n ", "codes": ["public class DecimalFormat\nextends NumberFormat"], "fields": [], "methods": [{"method_name": "format", "method_sig": "public final StringBuffer format (Object number,\n                                 StringBuffer toAppendTo,\n                                 FieldPosition pos)", "description": "Formats a number and appends the resulting text to the given string\n buffer.\n The number can be of any subclass of Number.\n \n This implementation uses the maximum precision permitted."}, {"method_name": "format", "method_sig": "public StringBuffer format (double number,\n                           StringBuffer result,\n                           FieldPosition fieldPosition)", "description": "Formats a double to produce a string."}, {"method_name": "format", "method_sig": "public StringBuffer format (long number,\n                           StringBuffer result,\n                           FieldPosition fieldPosition)", "description": "Format a long to produce a string."}, {"method_name": "formatToCharacterIterator", "method_sig": "public AttributedCharacterIterator formatToCharacterIterator (Object obj)", "description": "Formats an Object producing an AttributedCharacterIterator.\n You can use the returned AttributedCharacterIterator\n to build the resulting String, as well as to determine information\n about the resulting String.\n \n Each attribute key of the AttributedCharacterIterator will be of type\n NumberFormat.Field, with the attribute value being the\n same as the attribute key."}, {"method_name": "parse", "method_sig": "public Number parse (String text,\n                    ParsePosition pos)", "description": "Parses text from a string to produce a Number.\n \n The method attempts to parse text starting at the index given by\n pos.\n If parsing succeeds, then the index of pos is updated\n to the index after the last character used (parsing does not necessarily\n use all characters up to the end of the string), and the parsed\n number is returned. The updated pos can be used to\n indicate the starting point for the next call to this method.\n If an error occurs, then the index of pos is not\n changed, the error index of pos is set to the index of\n the character where the error occurred, and null is returned.\n \n The subclass returned depends on the value of isParseBigDecimal()\n as well as on the string being parsed.\n \nIf isParseBigDecimal() is false (the default),\n       most integer values are returned as Long\n       objects, no matter how they are written: \"17\" and\n       \"17.000\" both parse to Long(17).\n       Values that cannot fit into a Long are returned as\n       Doubles. This includes values with a fractional part,\n       infinite values, NaN, and the value -0.0.\n       DecimalFormat does not decide whether to\n       return a Double or a Long based on the\n       presence of a decimal separator in the source string. Doing so\n       would prevent integers that overflow the mantissa of a double,\n       such as \"-9,223,372,036,854,775,808.00\", from being\n       parsed accurately.\n       \n       Callers may use the Number methods\n       doubleValue, longValue, etc., to obtain\n       the type they want.\n   If isParseBigDecimal() is true, values are returned\n       as BigDecimal objects. The values are the ones\n       constructed by BigDecimal(String)\n       for corresponding strings in locale-independent format. The\n       special cases negative and positive infinity and NaN are returned\n       as Double instances holding the values of the\n       corresponding Double constants.\n \n\nDecimalFormat parses all Unicode characters that represent\n decimal digits, as defined by Character.digit(). In\n addition, DecimalFormat also recognizes as digits the ten\n consecutive characters starting with the localized zero digit defined in\n the DecimalFormatSymbols object."}, {"method_name": "getDecimalFormatSymbols", "method_sig": "public DecimalFormatSymbols getDecimalFormatSymbols()", "description": "Returns a copy of the decimal format symbols, which is generally not\n changed by the programmer or user."}, {"method_name": "setDecimalFormatSymbols", "method_sig": "public void setDecimalFormatSymbols (DecimalFormatSymbols newSymbols)", "description": "Sets the decimal format symbols, which is generally not changed\n by the programmer or user."}, {"method_name": "getPositivePrefix", "method_sig": "public String getPositivePrefix()", "description": "Get the positive prefix.\n Examples: +123, $123, sFr123"}, {"method_name": "setPositivePrefix", "method_sig": "public void setPositivePrefix (String newValue)", "description": "Set the positive prefix.\n Examples: +123, $123, sFr123"}, {"method_name": "getNegativePrefix", "method_sig": "public String getNegativePrefix()", "description": "Get the negative prefix.\n Examples: -123, ($123) (with negative suffix), sFr-123"}, {"method_name": "setNegativePrefix", "method_sig": "public void setNegativePrefix (String newValue)", "description": "Set the negative prefix.\n Examples: -123, ($123) (with negative suffix), sFr-123"}, {"method_name": "getPositiveSuffix", "method_sig": "public String getPositiveSuffix()", "description": "Get the positive suffix.\n Example: 123%"}, {"method_name": "setPositiveSuffix", "method_sig": "public void setPositiveSuffix (String newValue)", "description": "Set the positive suffix.\n Example: 123%"}, {"method_name": "getNegativeSuffix", "method_sig": "public String getNegativeSuffix()", "description": "Get the negative suffix.\n Examples: -123%, ($123) (with positive suffixes)"}, {"method_name": "setNegativeSuffix", "method_sig": "public void setNegativeSuffix (String newValue)", "description": "Set the negative suffix.\n Examples: 123%"}, {"method_name": "getMultiplier", "method_sig": "public int getMultiplier()", "description": "Gets the multiplier for use in percent, per mille, and similar\n formats."}, {"method_name": "setMultiplier", "method_sig": "public void setMultiplier (int newValue)", "description": "Sets the multiplier for use in percent, per mille, and similar\n formats.\n For a percent format, set the multiplier to 100 and the suffixes to\n have '%' (for Arabic, use the Arabic percent sign).\n For a per mille format, set the multiplier to 1000 and the suffixes to\n have '\\u2030'.\n\n Example: with multiplier 100, 1.23 is formatted as \"123\", and\n \"123\" is parsed into 1.23."}, {"method_name": "getGroupingSize", "method_sig": "public int getGroupingSize()", "description": "Return the grouping size. Grouping size is the number of digits between\n grouping separators in the integer portion of a number.  For example,\n in the number \"123,456.78\", the grouping size is 3."}, {"method_name": "setGroupingSize", "method_sig": "public void setGroupingSize (int newValue)", "description": "Set the grouping size. Grouping size is the number of digits between\n grouping separators in the integer portion of a number.  For example,\n in the number \"123,456.78\", the grouping size is 3.\n \n The value passed in is converted to a byte, which may lose information."}, {"method_name": "isDecimalSeparatorAlwaysShown", "method_sig": "public boolean isDecimalSeparatorAlwaysShown()", "description": "Allows you to get the behavior of the decimal separator with integers.\n (The decimal separator will always appear with decimals.)\n Example: Decimal ON: 12345 \u2192 12345.; OFF: 12345 \u2192 12345"}, {"method_name": "setDecimalSeparatorAlwaysShown", "method_sig": "public void setDecimalSeparatorAlwaysShown (boolean newValue)", "description": "Allows you to set the behavior of the decimal separator with integers.\n (The decimal separator will always appear with decimals.)\n Example: Decimal ON: 12345 \u2192 12345.; OFF: 12345 \u2192 12345"}, {"method_name": "isParseBigDecimal", "method_sig": "public boolean isParseBigDecimal()", "description": "Returns whether the parse(java.lang.String, java.text.ParsePosition)\n method returns BigDecimal. The default value is false."}, {"method_name": "setParseBigDecimal", "method_sig": "public void setParseBigDecimal (boolean newValue)", "description": "Sets whether the parse(java.lang.String, java.text.ParsePosition)\n method returns BigDecimal."}, {"method_name": "clone", "method_sig": "public Object clone()", "description": "Standard override; no change in semantics."}, {"method_name": "equals", "method_sig": "public boolean equals (Object obj)", "description": "Overrides equals"}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Overrides hashCode"}, {"method_name": "toPattern", "method_sig": "public String toPattern()", "description": "Synthesizes a pattern string that represents the current state\n of this Format object."}, {"method_name": "toLocalizedPattern", "method_sig": "public String toLocalizedPattern()", "description": "Synthesizes a localized pattern string that represents the current\n state of this Format object."}, {"method_name": "applyPattern", "method_sig": "public void applyPattern (String pattern)", "description": "Apply the given pattern to this Format object.  A pattern is a\n short-hand specification for the various formatting properties.\n These properties can also be changed individually through the\n various setter methods.\n \n There is no limit to integer digits set\n by this routine, since that is the typical end-user desire;\n use setMaximumInteger if you want to set a real value.\n For negative numbers, use a second pattern, separated by a semicolon\n Example \"#,#00.0#\" \u2192 1,234.56\n This means a minimum of 2 integer digits, 1 fraction digit, and\n a maximum of 2 fraction digits.\n Example: \"#,#00.0#;(#,#00.0#)\" for negatives in\n parentheses.\n In negative patterns, the minimum and maximum counts are ignored;\n these are presumed to be set in the positive pattern."}, {"method_name": "applyLocalizedPattern", "method_sig": "public void applyLocalizedPattern (String pattern)", "description": "Apply the given pattern to this Format object.  The pattern\n is assumed to be in a localized notation. A pattern is a\n short-hand specification for the various formatting properties.\n These properties can also be changed individually through the\n various setter methods.\n \n There is no limit to integer digits set\n by this routine, since that is the typical end-user desire;\n use setMaximumInteger if you want to set a real value.\n For negative numbers, use a second pattern, separated by a semicolon\n Example \"#,#00.0#\" \u2192 1,234.56\n This means a minimum of 2 integer digits, 1 fraction digit, and\n a maximum of 2 fraction digits.\n Example: \"#,#00.0#;(#,#00.0#)\" for negatives in\n parentheses.\n In negative patterns, the minimum and maximum counts are ignored;\n these are presumed to be set in the positive pattern."}, {"method_name": "setMaximumIntegerDigits", "method_sig": "public void setMaximumIntegerDigits (int newValue)", "description": "Sets the maximum number of digits allowed in the integer portion of a\n number.\n For formatting numbers other than BigInteger and\n BigDecimal objects, the lower of newValue and\n 309 is used. Negative input values are replaced with 0."}, {"method_name": "setMinimumIntegerDigits", "method_sig": "public void setMinimumIntegerDigits (int newValue)", "description": "Sets the minimum number of digits allowed in the integer portion of a\n number.\n For formatting numbers other than BigInteger and\n BigDecimal objects, the lower of newValue and\n 309 is used. Negative input values are replaced with 0."}, {"method_name": "setMaximumFractionDigits", "method_sig": "public void setMaximumFractionDigits (int newValue)", "description": "Sets the maximum number of digits allowed in the fraction portion of a\n number.\n For formatting numbers other than BigInteger and\n BigDecimal objects, the lower of newValue and\n 340 is used. Negative input values are replaced with 0."}, {"method_name": "setMinimumFractionDigits", "method_sig": "public void setMinimumFractionDigits (int newValue)", "description": "Sets the minimum number of digits allowed in the fraction portion of a\n number.\n For formatting numbers other than BigInteger and\n BigDecimal objects, the lower of newValue and\n 340 is used. Negative input values are replaced with 0."}, {"method_name": "getMaximumIntegerDigits", "method_sig": "public int getMaximumIntegerDigits()", "description": "Gets the maximum number of digits allowed in the integer portion of a\n number.\n For formatting numbers other than BigInteger and\n BigDecimal objects, the lower of the return value and\n 309 is used."}, {"method_name": "getMinimumIntegerDigits", "method_sig": "public int getMinimumIntegerDigits()", "description": "Gets the minimum number of digits allowed in the integer portion of a\n number.\n For formatting numbers other than BigInteger and\n BigDecimal objects, the lower of the return value and\n 309 is used."}, {"method_name": "getMaximumFractionDigits", "method_sig": "public int getMaximumFractionDigits()", "description": "Gets the maximum number of digits allowed in the fraction portion of a\n number.\n For formatting numbers other than BigInteger and\n BigDecimal objects, the lower of the return value and\n 340 is used."}, {"method_name": "getMinimumFractionDigits", "method_sig": "public int getMinimumFractionDigits()", "description": "Gets the minimum number of digits allowed in the fraction portion of a\n number.\n For formatting numbers other than BigInteger and\n BigDecimal objects, the lower of the return value and\n 340 is used."}, {"method_name": "getCurrency", "method_sig": "public Currency getCurrency()", "description": "Gets the currency used by this decimal format when formatting\n currency values.\n The currency is obtained by calling\n DecimalFormatSymbols.getCurrency\n on this number format's symbols."}, {"method_name": "setCurrency", "method_sig": "public void setCurrency (Currency currency)", "description": "Sets the currency used by this number format when formatting\n currency values. This does not update the minimum or maximum\n number of fraction digits used by the number format.\n The currency is set by calling\n DecimalFormatSymbols.setCurrency\n on this number format's symbols."}, {"method_name": "getRoundingMode", "method_sig": "public RoundingMode getRoundingMode()", "description": "Gets the RoundingMode used in this DecimalFormat."}, {"method_name": "setRoundingMode", "method_sig": "public void setRoundingMode (RoundingMode roundingMode)", "description": "Sets the RoundingMode used in this DecimalFormat."}]}