{"name": "Class Hashtable<K,\u200bV>", "module": "java.base", "package": "java.util", "text": "This class implements a hash table, which maps keys to values. Any\n non-null object can be used as a key or as a value. \n\n To successfully store and retrieve objects from a hashtable, the\n objects used as keys must implement the hashCode\n method and the equals method. \n\n An instance of Hashtable has two parameters that affect its\n performance: initial capacity and load factor.  The\n capacity is the number of buckets in the hash table, and the\n initial capacity is simply the capacity at the time the hash table\n is created.  Note that the hash table is open: in the case of a \"hash\n collision\", a single bucket stores multiple entries, which must be searched\n sequentially.  The load factor is a measure of how full the hash\n table is allowed to get before its capacity is automatically increased.\n The initial capacity and load factor parameters are merely hints to\n the implementation.  The exact details as to when and whether the rehash\n method is invoked are implementation-dependent.\n\n Generally, the default load factor (.75) offers a good tradeoff between\n time and space costs.  Higher values decrease the space overhead but\n increase the time cost to look up an entry (which is reflected in most\n Hashtable operations, including get and put).\n\n The initial capacity controls a tradeoff between wasted space and the\n need for rehash operations, which are time-consuming.\n No rehash operations will ever occur if the initial\n capacity is greater than the maximum number of entries the\n Hashtable will contain divided by its load factor.  However,\n setting the initial capacity too high can waste space.\n\n If many entries are to be made into a Hashtable,\n creating it with a sufficiently large capacity may allow the\n entries to be inserted more efficiently than letting it perform\n automatic rehashing as needed to grow the table. \n\n This example creates a hashtable of numbers. It uses the names of\n the numbers as keys:\n    \n   Hashtable<String, Integer> numbers\n     = new Hashtable<String, Integer>();\n   numbers.put(\"one\", 1);\n   numbers.put(\"two\", 2);\n   numbers.put(\"three\", 3);\nTo retrieve a number, use the following code:\n    \n   Integer n = numbers.get(\"two\");\n   if (n != null) {\n     System.out.println(\"two = \" + n);\n   }\nThe iterators returned by the iterator method of the collections\n returned by all of this class's \"collection view methods\" are\n fail-fast: if the Hashtable is structurally modified at any time\n after the iterator is created, in any way except through the iterator's own\n remove method, the iterator will throw a ConcurrentModificationException.  Thus, in the face of concurrent\n modification, the iterator fails quickly and cleanly, rather than risking\n arbitrary, non-deterministic behavior at an undetermined time in the future.\n The Enumerations returned by Hashtable's keys and\n elements methods are not fail-fast; if the\n Hashtable is structurally modified at any time after the enumeration is\n created then the results of enumerating are undefined.\n\n Note that the fail-fast behavior of an iterator cannot be guaranteed\n as it is, generally speaking, impossible to make any hard guarantees in the\n presence of unsynchronized concurrent modification.  Fail-fast iterators\n throw ConcurrentModificationException on a best-effort basis.\n Therefore, it would be wrong to write a program that depended on this\n exception for its correctness: the fail-fast behavior of iterators\n should be used only to detect bugs.\nAs of the Java 2 platform v1.2, this class was retrofitted to\n implement the Map interface, making it a member of the\n \n\n Java Collections Framework.  Unlike the new collection\n implementations, Hashtable is synchronized.  If a\n thread-safe implementation is not needed, it is recommended to use\n HashMap in place of Hashtable.  If a thread-safe\n highly-concurrent implementation is desired, then it is recommended\n to use ConcurrentHashMap in place of\n Hashtable.", "codes": ["public class Hashtable<K, V>\nextends Dictionary<K, V>\nimplements Map<K, V>, Cloneable, Serializable"], "fields": [], "methods": [{"method_name": "size", "method_sig": "public int size()", "description": "Returns the number of keys in this hashtable."}, {"method_name": "isEmpty", "method_sig": "public boolean isEmpty()", "description": "Tests if this hashtable maps no keys to values."}, {"method_name": "keys", "method_sig": "public Enumeration<K> keys()", "description": "Returns an enumeration of the keys in this hashtable.\n Use the Enumeration methods on the returned object to fetch the keys\n sequentially. If the hashtable is structurally modified while enumerating\n over the keys then the results of enumerating are undefined."}, {"method_name": "elements", "method_sig": "public Enumeration<V> elements()", "description": "Returns an enumeration of the values in this hashtable.\n Use the Enumeration methods on the returned object to fetch the elements\n sequentially. If the hashtable is structurally modified while enumerating\n over the values then the results of enumerating are undefined."}, {"method_name": "contains", "method_sig": "public boolean contains (Object value)", "description": "Tests if some key maps into the specified value in this hashtable.\n This operation is more expensive than the containsKey method.\n\n Note that this method is identical in functionality to\n containsValue, (which is part of the\n Map interface in the collections framework)."}, {"method_name": "containsValue", "method_sig": "public boolean containsValue (Object value)", "description": "Returns true if this hashtable maps one or more keys to this value.\n\n Note that this method is identical in functionality to contains (which predates the Map interface)."}, {"method_name": "containsKey", "method_sig": "public boolean containsKey (Object key)", "description": "Tests if the specified object is a key in this hashtable."}, {"method_name": "get", "method_sig": "public V get (Object key)", "description": "Returns the value to which the specified key is mapped,\n or null if this map contains no mapping for the key.\n\n More formally, if this map contains a mapping from a key\n k to a value v such that (key.equals(k)),\n then this method returns v; otherwise it returns\n null.  (There can be at most one such mapping.)"}, {"method_name": "rehash", "method_sig": "protected void rehash()", "description": "Increases the capacity of and internally reorganizes this\n hashtable, in order to accommodate and access its entries more\n efficiently.  This method is called automatically when the\n number of keys in the hashtable exceeds this hashtable's capacity\n and load factor."}, {"method_name": "put", "method_sig": "public V put (K key,\n             V value)", "description": "Maps the specified key to the specified\n value in this hashtable. Neither the key nor the\n value can be null. \n\n The value can be retrieved by calling the get method\n with a key that is equal to the original key."}, {"method_name": "remove", "method_sig": "public V remove (Object key)", "description": "Removes the key (and its corresponding value) from this\n hashtable. This method does nothing if the key is not in the hashtable."}, {"method_name": "putAll", "method_sig": "public void putAll (Map<? extends K, ? extends V> t)", "description": "Copies all of the mappings from the specified map to this hashtable.\n These mappings will replace any mappings that this hashtable had for any\n of the keys currently in the specified map."}, {"method_name": "clear", "method_sig": "public void clear()", "description": "Clears this hashtable so that it contains no keys."}, {"method_name": "clone", "method_sig": "public Object clone()", "description": "Creates a shallow copy of this hashtable. All the structure of the\n hashtable itself is copied, but the keys and values are not cloned.\n This is a relatively expensive operation."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a string representation of this Hashtable object\n in the form of a set of entries, enclosed in braces and separated\n by the ASCII characters \" ,\u00a0\" (comma and space). Each\n entry is rendered as the key, an equals sign =, and the\n associated element, where the toString method is used to\n convert the key and element to strings."}, {"method_name": "keySet", "method_sig": "public Set<K> keySet()", "description": "Returns a Set view of the keys contained in this map.\n The set is backed by the map, so changes to the map are\n reflected in the set, and vice-versa.  If the map is modified\n while an iteration over the set is in progress (except through\n the iterator's own remove operation), the results of\n the iteration are undefined.  The set supports element removal,\n which removes the corresponding mapping from the map, via the\n Iterator.remove, Set.remove,\n removeAll, retainAll, and clear\n operations.  It does not support the add or addAll\n operations."}, {"method_name": "entrySet", "method_sig": "public Set<Map.Entry<K, V>> entrySet()", "description": "Returns a Set view of the mappings contained in this map.\n The set is backed by the map, so changes to the map are\n reflected in the set, and vice-versa.  If the map is modified\n while an iteration over the set is in progress (except through\n the iterator's own remove operation, or through the\n setValue operation on a map entry returned by the\n iterator) the results of the iteration are undefined.  The set\n supports element removal, which removes the corresponding\n mapping from the map, via the Iterator.remove,\n Set.remove, removeAll, retainAll and\n clear operations.  It does not support the\n add or addAll operations."}, {"method_name": "values", "method_sig": "public Collection<V> values()", "description": "Returns a Collection view of the values contained in this map.\n The collection is backed by the map, so changes to the map are\n reflected in the collection, and vice-versa.  If the map is\n modified while an iteration over the collection is in progress\n (except through the iterator's own remove operation),\n the results of the iteration are undefined.  The collection\n supports element removal, which removes the corresponding\n mapping from the map, via the Iterator.remove,\n Collection.remove, removeAll,\n retainAll and clear operations.  It does not\n support the add or addAll operations."}, {"method_name": "equals", "method_sig": "public boolean equals (Object o)", "description": "Compares the specified Object with this Map for equality,\n as per the definition in the Map interface."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Returns the hash code value for this Map as per the definition in the\n Map interface."}, {"method_name": "computeIfAbsent", "method_sig": "public V computeIfAbsent (K key,\n                         Function<? super K, ? extends V> mappingFunction)", "description": "If the specified key is not already associated with a value (or is mapped\n to null), attempts to compute its value using the given mapping\n function and enters it into this map unless null.\n\n If the mapping function returns null, no mapping is recorded.\n If the mapping function itself throws an (unchecked) exception, the\n exception is rethrown, and no mapping is recorded.  The most\n common usage is to construct a new object serving as an initial\n mapped value or memoized result, as in:\n\n  \n map.computeIfAbsent(key, k -> new Value(f(k)));\n \nOr to implement a multi-value map, Map<K,Collection<V>>,\n supporting multiple values per key:\n\n  \n map.computeIfAbsent(key, k -> new HashSet<V>()).add(v);\n \nThe mapping function should not modify this map during computation.\n\n This method will, on a best-effort basis, throw a\n ConcurrentModificationException if the mapping\n function modified this map during computation."}, {"method_name": "computeIfPresent", "method_sig": "public V computeIfPresent (K key,\n                          BiFunction<? super K, ? super V, ? extends V> remappingFunction)", "description": "If the value for the specified key is present and non-null, attempts to\n compute a new mapping given the key and its current mapped value.\n\n If the remapping function returns null, the mapping is removed.\n If the remapping function itself throws an (unchecked) exception, the\n exception is rethrown, and the current mapping is left unchanged.\n\n The remapping function should not modify this map during computation.\n\n This method will, on a best-effort basis, throw a\n ConcurrentModificationException if the remapping\n function modified this map during computation."}, {"method_name": "compute", "method_sig": "public V compute (K key,\n                 BiFunction<? super K, ? super V, ? extends V> remappingFunction)", "description": "Attempts to compute a mapping for the specified key and its current\n mapped value (or null if there is no current mapping). For\n example, to either create or append a String msg to a value\n mapping:\n\n  \n map.compute(key, (k, v) -> (v == null) ? msg : v.concat(msg))\n (Method merge() is often simpler to use for such purposes.)\n\n If the remapping function returns null, the mapping is removed\n (or remains absent if initially absent).  If the remapping function\n itself throws an (unchecked) exception, the exception is rethrown, and\n the current mapping is left unchanged.\n\n The remapping function should not modify this map during computation.\n\n This method will, on a best-effort basis, throw a\n ConcurrentModificationException if the remapping\n function modified this map during computation."}, {"method_name": "merge", "method_sig": "public V merge (K key,\n               V value,\n               BiFunction<? super V, ? super V, ? extends V> remappingFunction)", "description": "If the specified key is not already associated with a value or is\n associated with null, associates it with the given non-null value.\n Otherwise, replaces the associated value with the results of the given\n remapping function, or removes if the result is null. This\n method may be of use when combining multiple mapped values for a key.\n For example, to either create or append a String msg to a\n value mapping:\n\n  \n map.merge(key, msg, String::concat)\n \nIf the remapping function returns null, the mapping is removed.\n If the remapping function itself throws an (unchecked) exception, the\n exception is rethrown, and the current mapping is left unchanged.\n\n The remapping function should not modify this map during computation.\n\n This method will, on a best-effort basis, throw a\n ConcurrentModificationException if the remapping\n function modified this map during computation."}]}