{"name": "Class EventQueueMonitor", "module": "jdk.accessibility", "package": "com.sun.java.accessibility.util", "text": "The EventQueueMonitor class provides key core functionality for Assistive\n Technologies (and other system-level technologies that need some of the same\n things that Assistive Technology needs).", "codes": ["public class EventQueueMonitor\nextends Object\nimplements AWTEventListener"], "fields": [], "methods": [{"method_name": "maybeInitialize", "method_sig": "public static void maybeInitialize()", "description": "Tell the EventQueueMonitor to start listening for events."}, {"method_name": "eventDispatched", "method_sig": "public void eventDispatched (AWTEvent theEvent)", "description": "Handle events as a result of registering a listener\n on the EventQueue in maybeInitialize()."}, {"method_name": "getAccessibleAt", "method_sig": "public static Accessible getAccessibleAt (Point p)", "description": "Obtain the Accessible object at the given point on the Screen.\n The return value may be null if an Accessible object cannot be\n found at the particular point."}, {"method_name": "isGUIInitialized", "method_sig": "public static boolean isGUIInitialized()", "description": "Says whether the GUI subsystem has been initialized or not.\n If this returns true, the assistive technology can freely\n create GUI component instances.  If the return value is false,\n the assistive technology should register a GUIInitializedListener\n and wait to create GUI component instances until the listener is\n called."}, {"method_name": "addGUIInitializedListener", "method_sig": "public static void addGUIInitializedListener (GUIInitializedListener l)", "description": "Adds the specified listener to be notified when the GUI subsystem\n is initialized.  Assistive technologies should get the results of\n isGUIInitialized() before calling this method."}, {"method_name": "removeGUIInitializedListener", "method_sig": "public static void removeGUIInitializedListener (GUIInitializedListener l)", "description": "Removes the specified listener to be notified when the GUI subsystem\n is initialized."}, {"method_name": "addTopLevelWindowListener", "method_sig": "public static void addTopLevelWindowListener (TopLevelWindowListener l)", "description": "Adds the specified listener to be notified when a top level window\n is created or destroyed."}, {"method_name": "removeTopLevelWindowListener", "method_sig": "public static void removeTopLevelWindowListener (TopLevelWindowListener l)", "description": "Removes the specified listener to be notified when a top level window\n is created or destroyed."}, {"method_name": "getCurrentMousePosition", "method_sig": "public static Point getCurrentMousePosition()", "description": "Return the last recorded position of the mouse in screen coordinates."}, {"method_name": "getTopLevelWindows", "method_sig": "public static Window[] getTopLevelWindows()", "description": "Return the list of top level Windows in use in the Java Virtual Machine."}, {"method_name": "getTopLevelWindowWithFocus", "method_sig": "public static Window getTopLevelWindowWithFocus()", "description": "Return the top level Window that currently has keyboard focus."}]}