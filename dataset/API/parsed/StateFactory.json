{"name": "Interface StateFactory", "module": "java.naming", "package": "javax.naming.spi", "text": "This interface represents a factory for obtaining the state of an\n object for binding.\n\n The JNDI framework allows for object implementations to\n be loaded in dynamically via object factories.\n For example, when looking up a printer bound in the name space,\n if the print service binds printer names to References, the printer\n Reference could be used to create a printer object, so that\n the caller of lookup can directly operate on the printer object\n after the lookup.\n An ObjectFactory is responsible\n for creating objects of a specific type.  In the above example,\n you may have a PrinterObjectFactory for creating\n Printer objects.\n \n For the reverse process, when an object is bound into the namespace,\n JNDI provides state factories.\n Continuing with the printer example, suppose the printer object is\n updated and rebound:\n \n ctx.rebind(\"inky\", printer);\n \n The service provider for ctx uses a state factory\n to obtain the state of printer for binding into its namespace.\n A state factory for the Printer type object might return\n a more compact object for storage in the naming system.\n\n A state factory must implement the StateFactory interface.\n In addition, the factory class must be public and must have a\n public constructor that accepts no parameters.\n Note that in cases where the factory is in a named module then it must be\n in a package which is exported by that module to the java.naming\n module.\n\n The getStateToBind() method of a state factory may\n be invoked multiple times, possibly using different parameters.\n The implementation is thread-safe.\n\nStateFactory is intended for use with service providers\n that implement only the Context interface.\n DirStateFactory is intended for use with service providers\n that implement the DirContext interface.", "codes": ["public interface StateFactory"], "fields": [], "methods": [{"method_name": "getStateToBind", "method_sig": "Object getStateToBind (Object obj,\n                      Name name,\n                      Context nameCtx,\n                      Hashtable<?, ?> environment)\n               throws NamingException", "description": "Retrieves the state of an object for binding.\n\nNamingManager.getStateToBind()\n successively loads in state factories and invokes this method\n on them until one produces a non-null answer.\n DirectoryManager.getStateToBind()\n successively loads in state factories.  If a factory implements\n DirStateFactory, then DirectoryManager\n invokes DirStateFactory.getStateToBind(); otherwise\n it invokes StateFactory.getStateToBind().\n When an exception\n is thrown by a factory, the exception is passed on to the caller\n of NamingManager.getStateToBind() and\n DirectoryManager.getStateToBind().\n The search for other factories\n that may produce a non-null answer is halted.\n A factory should only throw an exception if it is sure that\n it is the only intended factory and that no other factories\n should be tried.\n If this factory cannot create an object using the arguments supplied,\n it should return null.\n \n The name and nameCtx parameters may\n optionally be used to specify the name of the object being created.\n See the description of \"Name and Context Parameters\" in\n ObjectFactory.getObjectInstance()\n for details.\n If a factory uses nameCtx it should synchronize its use\n against concurrent access, since context implementations are not\n guaranteed to be thread-safe.\n \n The name and environment parameters\n are owned by the caller.\n The implementation will not modify these objects or keep references\n to them, although it may keep references to clones or copies."}]}