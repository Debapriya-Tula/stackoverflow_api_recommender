{"name": "Interface FileVisitor<T>", "module": "java.base", "package": "java.nio.file", "text": "A visitor of files. An implementation of this interface is provided to the\n Files.walkFileTree methods to visit each file in\n a file tree.\n\n  Usage Examples:\n Suppose we want to delete a file tree. In that case, each directory should\n be deleted after the entries in the directory are deleted.\n \n     Path start = ...\n     Files.walkFileTree(start, new SimpleFileVisitor<Path>() {\n         @Override\n         public FileVisitResult visitFile(Path file, BasicFileAttributes attrs)\n             throws IOException\n         {\n             Files.delete(file);\n             return FileVisitResult.CONTINUE;\n         }\n         @Override\n         public FileVisitResult postVisitDirectory(Path dir, IOException e)\n             throws IOException\n         {\n             if (e == null) {\n                 Files.delete(dir);\n                 return FileVisitResult.CONTINUE;\n             } else {\n                 // directory iteration failed\n                 throw e;\n             }\n         }\n     });\n \n Furthermore, suppose we want to copy a file tree to a target location.\n In that case, symbolic links should be followed and the target directory\n should be created before the entries in the directory are copied.\n \n     final Path source = ...\n     final Path target = ...\n\n     Files.walkFileTree(source, EnumSet.of(FileVisitOption.FOLLOW_LINKS), Integer.MAX_VALUE,\n         new SimpleFileVisitor<Path>() {\n             @Override\n             public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs)\n                 throws IOException\n             {\n                 Path targetdir = target.resolve(source.relativize(dir));\n                 try {\n                     Files.copy(dir, targetdir);\n                 } catch (FileAlreadyExistsException e) {\n                      if (!Files.isDirectory(targetdir))\n                          throw e;\n                 }\n                 return CONTINUE;\n             }\n             @Override\n             public FileVisitResult visitFile(Path file, BasicFileAttributes attrs)\n                 throws IOException\n             {\n                 Files.copy(file, target.resolve(source.relativize(file)));\n                 return CONTINUE;\n             }\n         });\n ", "codes": ["public interface FileVisitor<T>"], "fields": [], "methods": [{"method_name": "preVisitDirectory", "method_sig": "FileVisitResult preVisitDirectory (T dir,\n                                  BasicFileAttributes attrs)\n                           throws IOException", "description": "Invoked for a directory before entries in the directory are visited.\n\n  If this method returns CONTINUE,\n then entries in the directory are visited. If this method returns SKIP_SUBTREE or SKIP_SIBLINGS then entries in the\n directory (and any descendants) will not be visited."}, {"method_name": "visitFile", "method_sig": "FileVisitResult visitFile (T file,\n                          BasicFileAttributes attrs)\n                   throws IOException", "description": "Invoked for a file in a directory."}, {"method_name": "visitFileFailed", "method_sig": "FileVisitResult visitFileFailed (T file,\n                                IOException exc)\n                         throws IOException", "description": "Invoked for a file that could not be visited. This method is invoked\n if the file's attributes could not be read, the file is a directory\n that could not be opened, and other reasons."}, {"method_name": "postVisitDirectory", "method_sig": "FileVisitResult postVisitDirectory (T dir,\n                                   IOException exc)\n                            throws IOException", "description": "Invoked for a directory after entries in the directory, and all of their\n descendants, have been visited. This method is also invoked when iteration\n of the directory completes prematurely (by a visitFile\n method returning SKIP_SIBLINGS,\n or an I/O error when iterating over the directory)."}]}