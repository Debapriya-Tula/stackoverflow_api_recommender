{"name": "Class FontRenderContext", "module": "java.desktop", "package": "java.awt.font", "text": "The FontRenderContext class is a container for the\n   information needed to correctly measure text.  The measurement of text\n   can vary because of rules that map outlines to pixels, and rendering\n   hints provided by an application.\n   \n   One such piece of information is a transform that scales\n   typographical points to pixels. (A point is defined to be exactly 1/72\n   of an inch, which is slightly different than\n   the traditional mechanical measurement of a point.)  A character that\n   is rendered at 12pt on a 600dpi device might have a different size\n   than the same character rendered at 12pt on a 72dpi device because of\n   such factors as rounding to pixel boundaries and hints that the font\n   designer may have specified.\n   \n   Anti-aliasing and Fractional-metrics specified by an application can also\n   affect the size of a character because of rounding to pixel\n   boundaries.\n   \n   Typically, instances of FontRenderContext are\n   obtained from a Graphics2D object.  A\n   FontRenderContext which is directly constructed will\n   most likely not represent any actual graphics device, and may lead\n   to unexpected or incorrect results.", "codes": ["public class FontRenderContext\nextends Object"], "fields": [], "methods": [{"method_name": "isTransformed", "method_sig": "public boolean isTransformed()", "description": "Indicates whether or not this FontRenderContext object\n measures text in a transformed render context."}, {"method_name": "getTransformType", "method_sig": "public int getTransformType()", "description": "Returns the integer type of the affine transform for this\n FontRenderContext as specified by\n AffineTransform.getType()"}, {"method_name": "getTransform", "method_sig": "public AffineTransform getTransform()", "description": "Gets the transform that is used to scale typographical points\n   to pixels in this FontRenderContext."}, {"method_name": "isAntiAliased", "method_sig": "public boolean isAntiAliased()", "description": "Returns a boolean which indicates whether or not some form of\n antialiasing is specified by this FontRenderContext.\n Call getAntiAliasingHint()\n for the specific rendering hint value."}, {"method_name": "usesFractionalMetrics", "method_sig": "public boolean usesFractionalMetrics()", "description": "Returns a boolean which whether text fractional metrics mode\n is used in this FontRenderContext.\n Call getFractionalMetricsHint()\n to obtain the corresponding rendering hint value."}, {"method_name": "getAntiAliasingHint", "method_sig": "public Object getAntiAliasingHint()", "description": "Return the text anti-aliasing rendering mode hint used in this\n FontRenderContext.\n This will be one of the text antialiasing rendering hint values\n defined in java.awt.RenderingHints."}, {"method_name": "getFractionalMetricsHint", "method_sig": "public Object getFractionalMetricsHint()", "description": "Return the text fractional metrics rendering mode hint used in this\n FontRenderContext.\n This will be one of the text fractional metrics rendering hint values\n defined in java.awt.RenderingHints."}, {"method_name": "equals", "method_sig": "public boolean equals (Object obj)", "description": "Return true if obj is an instance of FontRenderContext and has the same\n transform, antialiasing, and fractional metrics values as this."}, {"method_name": "equals", "method_sig": "public boolean equals (FontRenderContext rhs)", "description": "Return true if rhs has the same transform, antialiasing,\n and fractional metrics values as this."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Return a hashcode for this FontRenderContext."}]}