{"name": "Class NumericShaper", "module": "java.desktop", "package": "java.awt.font", "text": "The NumericShaper class is used to convert Latin-1 (European)\n digits to other Unicode decimal digits.  Users of this class will\n primarily be people who wish to present data using\n national digit shapes, but find it more convenient to represent the\n data internally using Latin-1 (European) digits.  This does not\n interpret the deprecated numeric shape selector character (U+206E).\n \n Instances of NumericShaper are typically applied\n as attributes to text with the\n NUMERIC_SHAPING attribute\n of the TextAttribute class.\n For example, this code snippet causes a TextLayout to\n shape European digits to Arabic in an Arabic context:\n\n Map map = new HashMap();\n map.put(TextAttribute.NUMERIC_SHAPING,\n     NumericShaper.getContextualShaper(NumericShaper.ARABIC));\n FontRenderContext frc = ...;\n TextLayout layout = new TextLayout(text, map, frc);\n layout.draw(g2d, x, y);\n \n\n It is also possible to perform numeric shaping explicitly using instances\n of NumericShaper, as this code snippet demonstrates:\n\n char[] text = ...;\n // shape all EUROPEAN digits (except zero) to ARABIC digits\n NumericShaper shaper = NumericShaper.getShaper(NumericShaper.ARABIC);\n shaper.shape(text, start, count);\n\n // shape European digits to ARABIC digits if preceding text is Arabic, or\n // shape European digits to TAMIL digits if preceding text is Tamil, or\n // leave European digits alone if there is no preceding text, or\n // preceding text is neither Arabic nor Tamil\n NumericShaper shaper =\n     NumericShaper.getContextualShaper(NumericShaper.ARABIC |\n                                         NumericShaper.TAMIL,\n                                       NumericShaper.EUROPEAN);\n shaper.shape(text, start, count);\n \nBit mask- and enum-based Unicode ranges\nThis class supports two different programming interfaces to\n represent Unicode ranges for script-specific digits: bit\n mask-based ones, such as NumericShaper.ARABIC, and\n enum-based ones, such as NumericShaper.Range.ARABIC.\n Multiple ranges can be specified by ORing bit mask-based constants,\n such as:\n \n NumericShaper.ARABIC | NumericShaper.TAMIL\n \n or creating a Set with the NumericShaper.Range\n constants, such as:\n \n EnumSet.of(NumericShaper.Range.ARABIC, NumericShaper.Range.TAMIL)\n \n The enum-based ranges are a super set of the bit mask-based ones.\n\n If the two interfaces are mixed (including serialization),\n Unicode range values are mapped to their counterparts where such\n mapping is possible, such as NumericShaper.Range.ARABIC\n from/to NumericShaper.ARABIC.  If any unmappable range\n values are specified, such as NumericShaper.Range.BALINESE,\n those ranges are ignored.\n\n Decimal Digits Precedence\nA Unicode range may have more than one set of decimal digits. If\n multiple decimal digits sets are specified for the same Unicode\n range, one of the sets will take precedence as follows.\n\n \nNumericShaper constants precedence\n\n\nUnicode Range\n     NumericShaper Constants\n     Precedence\n \n\n\nArabic\n     NumericShaper.ARABIC\n\nNumericShaper.EASTERN_ARABIC\nNumericShaper.EASTERN_ARABIC\n\n\nNumericShaper.Range.ARABIC\n\nNumericShaper.Range.EASTERN_ARABIC\nNumericShaper.Range.EASTERN_ARABIC\n\nTai Tham\n     NumericShaper.Range.TAI_THAM_HORA\n\nNumericShaper.Range.TAI_THAM_THAM\nNumericShaper.Range.TAI_THAM_THAM\n\n", "codes": ["public final class NumericShaper\nextends Object\nimplements Serializable"], "fields": [{"field_name": "EUROPEAN", "field_sig": "public static final\u00a0int EUROPEAN", "description": "Identifies the Latin-1 (European) and extended range, and\n  Latin-1 (European) decimal base."}, {"field_name": "ARABIC", "field_sig": "public static final\u00a0int ARABIC", "description": "Identifies the ARABIC range and decimal base."}, {"field_name": "EASTERN_ARABIC", "field_sig": "public static final\u00a0int EASTERN_ARABIC", "description": "Identifies the ARABIC range and ARABIC_EXTENDED decimal base."}, {"field_name": "DEVANAGARI", "field_sig": "public static final\u00a0int DEVANAGARI", "description": "Identifies the DEVANAGARI range and decimal base."}, {"field_name": "BENGALI", "field_sig": "public static final\u00a0int BENGALI", "description": "Identifies the BENGALI range and decimal base."}, {"field_name": "GURMUKHI", "field_sig": "public static final\u00a0int GURMUKHI", "description": "Identifies the GURMUKHI range and decimal base."}, {"field_name": "GUJARATI", "field_sig": "public static final\u00a0int GUJARATI", "description": "Identifies the GUJARATI range and decimal base."}, {"field_name": "ORIYA", "field_sig": "public static final\u00a0int ORIYA", "description": "Identifies the ORIYA range and decimal base."}, {"field_name": "TAMIL", "field_sig": "public static final\u00a0int TAMIL", "description": "Identifies the TAMIL range and decimal base."}, {"field_name": "TELUGU", "field_sig": "public static final\u00a0int TELUGU", "description": "Identifies the TELUGU range and decimal base."}, {"field_name": "KANNADA", "field_sig": "public static final\u00a0int KANNADA", "description": "Identifies the KANNADA range and decimal base."}, {"field_name": "MALAYALAM", "field_sig": "public static final\u00a0int MALAYALAM", "description": "Identifies the MALAYALAM range and decimal base."}, {"field_name": "THAI", "field_sig": "public static final\u00a0int THAI", "description": "Identifies the THAI range and decimal base."}, {"field_name": "LAO", "field_sig": "public static final\u00a0int LAO", "description": "Identifies the LAO range and decimal base."}, {"field_name": "TIBETAN", "field_sig": "public static final\u00a0int TIBETAN", "description": "Identifies the TIBETAN range and decimal base."}, {"field_name": "MYANMAR", "field_sig": "public static final\u00a0int MYANMAR", "description": "Identifies the MYANMAR range and decimal base."}, {"field_name": "ETHIOPIC", "field_sig": "public static final\u00a0int ETHIOPIC", "description": "Identifies the ETHIOPIC range and decimal base."}, {"field_name": "KHMER", "field_sig": "public static final\u00a0int KHMER", "description": "Identifies the KHMER range and decimal base."}, {"field_name": "MONGOLIAN", "field_sig": "public static final\u00a0int MONGOLIAN", "description": "Identifies the MONGOLIAN range and decimal base."}, {"field_name": "ALL_RANGES", "field_sig": "public static final\u00a0int ALL_RANGES", "description": "Identifies all ranges, for full contextual shaping.\n\n This constant specifies all of the bit mask-based\n ranges. Use EnumSet.allOf(NumericShaper.Range.class) to\n specify all of the enum-based ranges."}], "methods": [{"method_name": "getShaper", "method_sig": "public static NumericShaper getShaper (int singleRange)", "description": "Returns a shaper for the provided unicode range.  All\n Latin-1 (EUROPEAN) digits are converted\n to the corresponding decimal unicode digits."}, {"method_name": "getShaper", "method_sig": "public static NumericShaper getShaper (NumericShaper.Range singleRange)", "description": "Returns a shaper for the provided Unicode\n range. All Latin-1 (EUROPEAN) digits are converted to the\n corresponding decimal digits of the specified Unicode range."}, {"method_name": "getContextualShaper", "method_sig": "public static NumericShaper getContextualShaper (int ranges)", "description": "Returns a contextual shaper for the provided unicode range(s).\n Latin-1 (EUROPEAN) digits are converted to the decimal digits\n corresponding to the range of the preceding text, if the\n range is one of the provided ranges.  Multiple ranges are\n represented by or-ing the values together, such as,\n NumericShaper.ARABIC | NumericShaper.THAI.  The\n shaper assumes EUROPEAN as the starting context, that is, if\n EUROPEAN digits are encountered before any strong directional\n text in the string, the context is presumed to be EUROPEAN, and\n so the digits will not shape."}, {"method_name": "getContextualShaper", "method_sig": "public static NumericShaper getContextualShaper (Set<NumericShaper.Range> ranges)", "description": "Returns a contextual shaper for the provided Unicode\n range(s). The Latin-1 (EUROPEAN) digits are converted to the\n decimal digits corresponding to the range of the preceding\n text, if the range is one of the provided ranges.\n\n The shaper assumes EUROPEAN as the starting context, that\n is, if EUROPEAN digits are encountered before any strong\n directional text in the string, the context is presumed to be\n EUROPEAN, and so the digits will not shape."}, {"method_name": "getContextualShaper", "method_sig": "public static NumericShaper getContextualShaper (int ranges,\n                                                int defaultContext)", "description": "Returns a contextual shaper for the provided unicode range(s).\n Latin-1 (EUROPEAN) digits will be converted to the decimal digits\n corresponding to the range of the preceding text, if the\n range is one of the provided ranges.  Multiple ranges are\n represented by or-ing the values together, for example,\n NumericShaper.ARABIC | NumericShaper.THAI.  The\n shaper uses defaultContext as the starting context."}, {"method_name": "getContextualShaper", "method_sig": "public static NumericShaper getContextualShaper (Set<NumericShaper.Range> ranges,\n                                                NumericShaper.Range defaultContext)", "description": "Returns a contextual shaper for the provided Unicode range(s).\n The Latin-1 (EUROPEAN) digits will be converted to the decimal\n digits corresponding to the range of the preceding text, if the\n range is one of the provided ranges. The shaper uses \n defaultContext as the starting context."}, {"method_name": "shape", "method_sig": "public void shape (char[] text,\n                  int start,\n                  int count)", "description": "Converts the digits in the text that occur between start and\n start + count."}, {"method_name": "shape", "method_sig": "public void shape (char[] text,\n                  int start,\n                  int count,\n                  int context)", "description": "Converts the digits in the text that occur between start and\n start + count, using the provided context.\n Context is ignored if the shaper is not a contextual shaper."}, {"method_name": "shape", "method_sig": "public void shape (char[] text,\n                  int start,\n                  int count,\n                  NumericShaper.Range context)", "description": "Converts the digits in the text that occur between \n start and start + count, using the provided \n context. Context is ignored if the shaper is not a\n contextual shaper."}, {"method_name": "isContextual", "method_sig": "public boolean isContextual()", "description": "Returns a boolean indicating whether or not\n this shaper shapes contextually."}, {"method_name": "getRanges", "method_sig": "public int getRanges()", "description": "Returns an int that ORs together the values for\n all the ranges that will be shaped.\n \n For example, to check if a shaper shapes to Arabic, you would use the\n following:\n \nif ((shaper.getRanges() & shaper.ARABIC) != 0) &#123; ... \n\nNote that this method supports only the bit mask-based\n ranges. Call getRangeSet() for the enum-based ranges."}, {"method_name": "getRangeSet", "method_sig": "public Set<NumericShaper.Range> getRangeSet()", "description": "Returns a Set representing all the Unicode ranges in\n this NumericShaper that will be shaped."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Returns a hash code for this shaper."}, {"method_name": "equals", "method_sig": "public boolean equals (Object o)", "description": "Returns true if the specified object is an instance of\n NumericShaper and shapes identically to this one,\n regardless of the range representations, the bit mask or the\n enum. For example, the following code produces \"true\".\n \n NumericShaper ns1 = NumericShaper.getShaper(NumericShaper.ARABIC);\n NumericShaper ns2 = NumericShaper.getShaper(NumericShaper.Range.ARABIC);\n System.out.println(ns1.equals(ns2));\n "}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a String that describes this shaper. This method\n is used for debugging purposes only."}]}