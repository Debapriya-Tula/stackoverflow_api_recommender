{"name": "Class ByteArrayInputStream", "module": "java.base", "package": "java.io", "text": "A ByteArrayInputStream contains\n an internal buffer that contains bytes that\n may be read from the stream. An internal\n counter keeps track of the next byte to\n be supplied by the read method.\n \n Closing a ByteArrayInputStream has no effect. The methods in\n this class can be called after the stream has been closed without\n generating an IOException.", "codes": ["public class ByteArrayInputStream\nextends InputStream"], "fields": [{"field_name": "buf", "field_sig": "protected\u00a0byte[] buf", "description": "An array of bytes that was provided\n by the creator of the stream. Elements buf[0]\n through buf[count-1] are the\n only bytes that can ever be read from the\n stream;  element buf[pos] is\n the next byte to be read."}, {"field_name": "pos", "field_sig": "protected\u00a0int pos", "description": "The index of the next character to read from the input stream buffer.\n This value should always be nonnegative\n and not larger than the value of count.\n The next byte to be read from the input stream buffer\n will be buf[pos]."}, {"field_name": "mark", "field_sig": "protected\u00a0int mark", "description": "The currently marked position in the stream.\n ByteArrayInputStream objects are marked at position zero by\n default when constructed.  They may be marked at another\n position within the buffer by the mark() method.\n The current buffer position is set to this point by the\n reset() method.\n \n If no mark has been set, then the value of mark is the offset\n passed to the constructor (or 0 if the offset was not supplied)."}, {"field_name": "count", "field_sig": "protected\u00a0int count", "description": "The index one greater than the last valid character in the input\n stream buffer.\n This value should always be nonnegative\n and not larger than the length of buf.\n It  is one greater than the position of\n the last byte within buf that\n can ever be read  from the input stream buffer."}], "methods": [{"method_name": "read", "method_sig": "public int read()", "description": "Reads the next byte of data from this input stream. The value\n byte is returned as an int in the range\n 0 to 255. If no byte is available\n because the end of the stream has been reached, the value\n -1 is returned.\n \n This read method\n cannot block."}, {"method_name": "read", "method_sig": "public int read (byte[] b,\n                int off,\n                int len)", "description": "Reads up to len bytes of data into an array of bytes from this\n input stream.  If pos equals count, then -1 is\n returned to indicate end of file.  Otherwise, the  number k of\n bytes read is equal to the smaller of len and count-pos.\n If k is positive, then bytes buf[pos] through\n buf[pos+k-1] are copied into b[off] through\n b[off+k-1] in the manner performed by System.arraycopy.\n The value k is added into pos and k is returned.\n \n This read method cannot block."}, {"method_name": "skip", "method_sig": "public long skip (long n)", "description": "Skips n bytes of input from this input stream. Fewer\n bytes might be skipped if the end of the input stream is reached.\n The actual number k\n of bytes to be skipped is equal to the smaller\n of n and  count-pos.\n The value k is added into pos\n and k is returned."}, {"method_name": "available", "method_sig": "public int available()", "description": "Returns the number of remaining bytes that can be read (or skipped over)\n from this input stream.\n \n The value returned is count - pos,\n which is the number of bytes remaining to be read from the input buffer."}, {"method_name": "markSupported", "method_sig": "public boolean markSupported()", "description": "Tests if this InputStream supports mark/reset. The\n markSupported method of ByteArrayInputStream\n always returns true."}, {"method_name": "mark", "method_sig": "public void mark (int readAheadLimit)", "description": "Set the current marked position in the stream.\n ByteArrayInputStream objects are marked at position zero by\n default when constructed.  They may be marked at another\n position within the buffer by this method.\n \n If no mark has been set, then the value of the mark is the\n offset passed to the constructor (or 0 if the offset was not\n supplied).\n\n  Note: The readAheadLimit for this class\n  has no meaning."}, {"method_name": "reset", "method_sig": "public void reset()", "description": "Resets the buffer to the marked position.  The marked position\n is 0 unless another position was marked or an offset was specified\n in the constructor."}, {"method_name": "close", "method_sig": "public void close()\n           throws IOException", "description": "Closing a ByteArrayInputStream has no effect. The methods in\n this class can be called after the stream has been closed without\n generating an IOException."}]}