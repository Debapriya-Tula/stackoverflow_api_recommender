{"name": "Interface IntStream.Builder", "module": "java.base", "package": "java.util.stream", "text": "A mutable builder for an IntStream.\n\n A stream builder has a lifecycle, which starts in a building\n phase, during which elements can be added, and then transitions to a built\n phase, after which elements may not be added.  The built phase\n begins when the build() method is called, which creates an\n ordered stream whose elements are the elements that were added to the\n stream builder, in the order they were added.", "codes": ["public static interface IntStream.Builder\nextends IntConsumer"], "fields": [], "methods": [{"method_name": "accept", "method_sig": "void accept (int t)", "description": "Adds an element to the stream being built."}, {"method_name": "add", "method_sig": "default IntStream.Builder add (int t)", "description": "Adds an element to the stream being built."}, {"method_name": "build", "method_sig": "IntStream build()", "description": "Builds the stream, transitioning this builder to the built state.\n An IllegalStateException is thrown if there are further\n attempts to operate on the builder after it has entered the built\n state."}]}