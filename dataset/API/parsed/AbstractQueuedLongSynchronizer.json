{"name": "Class AbstractQueuedLongSynchronizer", "module": "java.base", "package": "java.util.concurrent.locks", "text": "A version of AbstractQueuedSynchronizer in\n which synchronization state is maintained as a long.\n This class has exactly the same structure, properties, and methods\n as AbstractQueuedSynchronizer with the exception\n that all state-related parameters and results are defined\n as long rather than int. This class\n may be useful when creating synchronizers such as\n multilevel locks and barriers that require\n 64 bits of state.\n\n See AbstractQueuedSynchronizer for usage\n notes and examples.", "codes": ["public abstract class AbstractQueuedLongSynchronizer\nextends AbstractOwnableSynchronizer\nimplements Serializable"], "fields": [], "methods": [{"method_name": "getState", "method_sig": "protected final long getState()", "description": "Returns the current value of synchronization state.\n This operation has memory semantics of a volatile read."}, {"method_name": "setState", "method_sig": "protected final void setState (long newState)", "description": "Sets the value of synchronization state.\n This operation has memory semantics of a volatile write."}, {"method_name": "compareAndSetState", "method_sig": "protected final boolean compareAndSetState (long expect,\n                                           long update)", "description": "Atomically sets synchronization state to the given updated\n value if the current state value equals the expected value.\n This operation has memory semantics of a volatile read\n and write."}, {"method_name": "tryAcquire", "method_sig": "protected boolean tryAcquire (long arg)", "description": "Attempts to acquire in exclusive mode. This method should query\n if the state of the object permits it to be acquired in the\n exclusive mode, and if so to acquire it.\n\n This method is always invoked by the thread performing\n acquire.  If this method reports failure, the acquire method\n may queue the thread, if it is not already queued, until it is\n signalled by a release from some other thread. This can be used\n to implement method Lock.tryLock().\n\n The default\n implementation throws UnsupportedOperationException."}, {"method_name": "tryRelease", "method_sig": "protected boolean tryRelease (long arg)", "description": "Attempts to set the state to reflect a release in exclusive\n mode.\n\n This method is always invoked by the thread performing release.\n\n The default implementation throws\n UnsupportedOperationException."}, {"method_name": "tryAcquireShared", "method_sig": "protected long tryAcquireShared (long arg)", "description": "Attempts to acquire in shared mode. This method should query if\n the state of the object permits it to be acquired in the shared\n mode, and if so to acquire it.\n\n This method is always invoked by the thread performing\n acquire.  If this method reports failure, the acquire method\n may queue the thread, if it is not already queued, until it is\n signalled by a release from some other thread.\n\n The default implementation throws UnsupportedOperationException."}, {"method_name": "tryReleaseShared", "method_sig": "protected boolean tryReleaseShared (long arg)", "description": "Attempts to set the state to reflect a release in shared mode.\n\n This method is always invoked by the thread performing release.\n\n The default implementation throws\n UnsupportedOperationException."}, {"method_name": "isHeldExclusively", "method_sig": "protected boolean isHeldExclusively()", "description": "Returns true if synchronization is held exclusively with\n respect to the current (calling) thread.  This method is invoked\n upon each call to a AbstractQueuedLongSynchronizer.ConditionObject method.\n\n The default implementation throws UnsupportedOperationException. This method is invoked\n internally only within AbstractQueuedLongSynchronizer.ConditionObject methods, so need\n not be defined if conditions are not used."}, {"method_name": "acquire", "method_sig": "public final void acquire (long arg)", "description": "Acquires in exclusive mode, ignoring interrupts.  Implemented\n by invoking at least once tryAcquire(long),\n returning on success.  Otherwise the thread is queued, possibly\n repeatedly blocking and unblocking, invoking tryAcquire(long) until success.  This method can be used\n to implement method Lock.lock()."}, {"method_name": "acquireInterruptibly", "method_sig": "public final void acquireInterruptibly (long arg)\n                                throws InterruptedException", "description": "Acquires in exclusive mode, aborting if interrupted.\n Implemented by first checking interrupt status, then invoking\n at least once tryAcquire(long), returning on\n success.  Otherwise the thread is queued, possibly repeatedly\n blocking and unblocking, invoking tryAcquire(long)\n until success or the thread is interrupted.  This method can be\n used to implement method Lock.lockInterruptibly()."}, {"method_name": "tryAcquireNanos", "method_sig": "public final boolean tryAcquireNanos (long arg,\n                                     long nanosTimeout)\n                              throws InterruptedException", "description": "Attempts to acquire in exclusive mode, aborting if interrupted,\n and failing if the given timeout elapses.  Implemented by first\n checking interrupt status, then invoking at least once tryAcquire(long), returning on success.  Otherwise, the thread is\n queued, possibly repeatedly blocking and unblocking, invoking\n tryAcquire(long) until success or the thread is interrupted\n or the timeout elapses.  This method can be used to implement\n method Lock.tryLock(long, TimeUnit)."}, {"method_name": "release", "method_sig": "public final boolean release (long arg)", "description": "Releases in exclusive mode.  Implemented by unblocking one or\n more threads if tryRelease(long) returns true.\n This method can be used to implement method Lock.unlock()."}, {"method_name": "acquireShared", "method_sig": "public final void acquireShared (long arg)", "description": "Acquires in shared mode, ignoring interrupts.  Implemented by\n first invoking at least once tryAcquireShared(long),\n returning on success.  Otherwise the thread is queued, possibly\n repeatedly blocking and unblocking, invoking tryAcquireShared(long) until success."}, {"method_name": "acquireSharedInterruptibly", "method_sig": "public final void acquireSharedInterruptibly (long arg)\n                                      throws InterruptedException", "description": "Acquires in shared mode, aborting if interrupted.  Implemented\n by first checking interrupt status, then invoking at least once\n tryAcquireShared(long), returning on success.  Otherwise the\n thread is queued, possibly repeatedly blocking and unblocking,\n invoking tryAcquireShared(long) until success or the thread\n is interrupted."}, {"method_name": "tryAcquireSharedNanos", "method_sig": "public final boolean tryAcquireSharedNanos (long arg,\n                                           long nanosTimeout)\n                                    throws InterruptedException", "description": "Attempts to acquire in shared mode, aborting if interrupted, and\n failing if the given timeout elapses.  Implemented by first\n checking interrupt status, then invoking at least once tryAcquireShared(long), returning on success.  Otherwise, the\n thread is queued, possibly repeatedly blocking and unblocking,\n invoking tryAcquireShared(long) until success or the thread\n is interrupted or the timeout elapses."}, {"method_name": "releaseShared", "method_sig": "public final boolean releaseShared (long arg)", "description": "Releases in shared mode.  Implemented by unblocking one or more\n threads if tryReleaseShared(long) returns true."}, {"method_name": "hasQueuedThreads", "method_sig": "public final boolean hasQueuedThreads()", "description": "Queries whether any threads are waiting to acquire. Note that\n because cancellations due to interrupts and timeouts may occur\n at any time, a true return does not guarantee that any\n other thread will ever acquire."}, {"method_name": "hasContended", "method_sig": "public final boolean hasContended()", "description": "Queries whether any threads have ever contended to acquire this\n synchronizer; that is, if an acquire method has ever blocked.\n\n In this implementation, this operation returns in\n constant time."}, {"method_name": "getFirstQueuedThread", "method_sig": "public final Thread getFirstQueuedThread()", "description": "Returns the first (longest-waiting) thread in the queue, or\n null if no threads are currently queued.\n\n In this implementation, this operation normally returns in\n constant time, but may iterate upon contention if other threads are\n concurrently modifying the queue."}, {"method_name": "isQueued", "method_sig": "public final boolean isQueued (Thread thread)", "description": "Returns true if the given thread is currently queued.\n\n This implementation traverses the queue to determine\n presence of the given thread."}, {"method_name": "hasQueuedPredecessors", "method_sig": "public final boolean hasQueuedPredecessors()", "description": "Queries whether any threads have been waiting to acquire longer\n than the current thread.\n\n An invocation of this method is equivalent to (but may be\n more efficient than):\n  \n getFirstQueuedThread() != Thread.currentThread()\n   && hasQueuedThreads()\nNote that because cancellations due to interrupts and\n timeouts may occur at any time, a true return does not\n guarantee that some other thread will acquire before the current\n thread.  Likewise, it is possible for another thread to win a\n race to enqueue after this method has returned false,\n due to the queue being empty.\n\n This method is designed to be used by a fair synchronizer to\n avoid barging.\n Such a synchronizer's tryAcquire(long) method should return\n false, and its tryAcquireShared(long) method should\n return a negative value, if this method returns true\n (unless this is a reentrant acquire).  For example, the \n tryAcquire method for a fair, reentrant, exclusive mode\n synchronizer might look like this:\n\n  \n protected boolean tryAcquire(int arg) {\n   if (isHeldExclusively()) {\n     // A reentrant acquire; increment hold count\n     return true;\n   } else if (hasQueuedPredecessors()) {\n     return false;\n   } else {\n     // try to acquire normally\n   }\n }"}, {"method_name": "getQueueLength", "method_sig": "public final int getQueueLength()", "description": "Returns an estimate of the number of threads waiting to\n acquire.  The value is only an estimate because the number of\n threads may change dynamically while this method traverses\n internal data structures.  This method is designed for use in\n monitoring system state, not for synchronization control."}, {"method_name": "getQueuedThreads", "method_sig": "public final Collection<Thread> getQueuedThreads()", "description": "Returns a collection containing threads that may be waiting to\n acquire.  Because the actual set of threads may change\n dynamically while constructing this result, the returned\n collection is only a best-effort estimate.  The elements of the\n returned collection are in no particular order.  This method is\n designed to facilitate construction of subclasses that provide\n more extensive monitoring facilities."}, {"method_name": "getExclusiveQueuedThreads", "method_sig": "public final Collection<Thread> getExclusiveQueuedThreads()", "description": "Returns a collection containing threads that may be waiting to\n acquire in exclusive mode. This has the same properties\n as getQueuedThreads() except that it only returns\n those threads waiting due to an exclusive acquire."}, {"method_name": "getSharedQueuedThreads", "method_sig": "public final Collection<Thread> getSharedQueuedThreads()", "description": "Returns a collection containing threads that may be waiting to\n acquire in shared mode. This has the same properties\n as getQueuedThreads() except that it only returns\n those threads waiting due to a shared acquire."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a string identifying this synchronizer, as well as its state.\n The state, in brackets, includes the String \"State =\"\n followed by the current value of getState(), and either\n \"nonempty\" or \"empty\" depending on whether the\n queue is empty."}, {"method_name": "owns", "method_sig": "public final boolean owns (AbstractQueuedLongSynchronizer.ConditionObject condition)", "description": "Queries whether the given ConditionObject\n uses this synchronizer as its lock."}, {"method_name": "hasWaiters", "method_sig": "public final boolean hasWaiters (AbstractQueuedLongSynchronizer.ConditionObject condition)", "description": "Queries whether any threads are waiting on the given condition\n associated with this synchronizer. Note that because timeouts\n and interrupts may occur at any time, a true return\n does not guarantee that a future signal will awaken\n any threads.  This method is designed primarily for use in\n monitoring of the system state."}, {"method_name": "getWaitQueueLength", "method_sig": "public final int getWaitQueueLength (AbstractQueuedLongSynchronizer.ConditionObject condition)", "description": "Returns an estimate of the number of threads waiting on the\n given condition associated with this synchronizer. Note that\n because timeouts and interrupts may occur at any time, the\n estimate serves only as an upper bound on the actual number of\n waiters.  This method is designed for use in monitoring system\n state, not for synchronization control."}, {"method_name": "getWaitingThreads", "method_sig": "public final Collection<Thread> getWaitingThreads (AbstractQueuedLongSynchronizer.ConditionObject condition)", "description": "Returns a collection containing those threads that may be\n waiting on the given condition associated with this\n synchronizer.  Because the actual set of threads may change\n dynamically while constructing this result, the returned\n collection is only a best-effort estimate. The elements of the\n returned collection are in no particular order."}]}