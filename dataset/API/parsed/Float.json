{"name": "Class Float", "module": "java.base", "package": "java.lang", "text": "The Float class wraps a value of primitive type\n float in an object. An object of type\n Float contains a single field whose type is\n float.\n\n In addition, this class provides several methods for converting a\n float to a String and a\n String to a float, as well as other\n constants and methods useful when dealing with a\n float.", "codes": ["public final class Float\nextends Number\nimplements Comparable<Float>"], "fields": [{"field_name": "POSITIVE_INFINITY", "field_sig": "public static final\u00a0float POSITIVE_INFINITY", "description": "A constant holding the positive infinity of type\n float. It is equal to the value returned by\n Float.intBitsToFloat(0x7f800000)."}, {"field_name": "NEGATIVE_INFINITY", "field_sig": "public static final\u00a0float NEGATIVE_INFINITY", "description": "A constant holding the negative infinity of type\n float. It is equal to the value returned by\n Float.intBitsToFloat(0xff800000)."}, {"field_name": "NaN", "field_sig": "public static final\u00a0float NaN", "description": "A constant holding a Not-a-Number (NaN) value of type\n float.  It is equivalent to the value returned by\n Float.intBitsToFloat(0x7fc00000)."}, {"field_name": "MAX_VALUE", "field_sig": "public static final\u00a0float MAX_VALUE", "description": "A constant holding the largest positive finite value of type\n float, (2-2-23)\u00b72127.\n It is equal to the hexadecimal floating-point literal\n 0x1.fffffeP+127f and also equal to\n Float.intBitsToFloat(0x7f7fffff)."}, {"field_name": "MIN_NORMAL", "field_sig": "public static final\u00a0float MIN_NORMAL", "description": "A constant holding the smallest positive normal value of type\n float, 2-126.  It is equal to the\n hexadecimal floating-point literal 0x1.0p-126f and also\n equal to Float.intBitsToFloat(0x00800000)."}, {"field_name": "MIN_VALUE", "field_sig": "public static final\u00a0float MIN_VALUE", "description": "A constant holding the smallest positive nonzero value of type\n float, 2-149. It is equal to the\n hexadecimal floating-point literal 0x0.000002P-126f\n and also equal to Float.intBitsToFloat(0x1)."}, {"field_name": "MAX_EXPONENT", "field_sig": "public static final\u00a0int MAX_EXPONENT", "description": "Maximum exponent a finite float variable may have.  It\n is equal to the value returned by \n Math.getExponent(Float.MAX_VALUE)."}, {"field_name": "MIN_EXPONENT", "field_sig": "public static final\u00a0int MIN_EXPONENT", "description": "Minimum exponent a normalized float variable may have.\n It is equal to the value returned by \n Math.getExponent(Float.MIN_NORMAL)."}, {"field_name": "SIZE", "field_sig": "public static final\u00a0int SIZE", "description": "The number of bits used to represent a float value."}, {"field_name": "BYTES", "field_sig": "public static final\u00a0int BYTES", "description": "The number of bytes used to represent a float value."}, {"field_name": "TYPE", "field_sig": "public static final\u00a0Class<Float> TYPE", "description": "The Class instance representing the primitive type\n float."}], "methods": [{"method_name": "toString", "method_sig": "public static String toString (float f)", "description": "Returns a string representation of the float\n argument. All characters mentioned below are ASCII characters.\n \nIf the argument is NaN, the result is the string\n \"NaN\".\n Otherwise, the result is a string that represents the sign and\n     magnitude (absolute value) of the argument. If the sign is\n     negative, the first character of the result is\n     '-' ('\\u002D'); if the sign is\n     positive, no sign character appears in the result. As for\n     the magnitude m:\n \nIf m is infinity, it is represented by the characters\n     \"Infinity\"; thus, positive infinity produces\n     the result \"Infinity\" and negative infinity\n     produces the result \"-Infinity\".\n If m is zero, it is represented by the characters\n     \"0.0\"; thus, negative zero produces the result\n     \"-0.0\" and positive zero produces the result\n     \"0.0\".\n  If m is greater than or equal to 10-3 but\n      less than 107, then it is represented as the\n      integer part of m, in decimal form with no leading\n      zeroes, followed by '.'\n      ('\\u002E'), followed by one or more\n      decimal digits representing the fractional part of\n      m.\n  If m is less than 10-3 or greater than or\n      equal to 107, then it is represented in\n      so-called \"computerized scientific notation.\" Let n\n      be the unique integer such that 10n \u2264\n      m < 10n+1; then let a\n      be the mathematically exact quotient of m and\n      10n so that 1 \u2264 a < 10.\n      The magnitude is then represented as the integer part of\n      a, as a single decimal digit, followed by\n      '.' ('\\u002E'), followed by\n      decimal digits representing the fractional part of\n      a, followed by the letter 'E'\n      ('\\u0045'), followed by a representation\n      of n as a decimal integer, as produced by the\n      method Integer.toString(int).\n\n \n\n How many digits must be printed for the fractional part of\n m or a? There must be at least one digit\n to represent the fractional part, and beyond that as many, but\n only as many, more digits as are needed to uniquely distinguish\n the argument value from adjacent values of type\n float. That is, suppose that x is the\n exact mathematical value represented by the decimal\n representation produced by this method for a finite nonzero\n argument f. Then f must be the float\n value nearest to x; or, if two float values are\n equally close to x, then f must be one of\n them and the least significant bit of the significand of\n f must be 0.\n\n To create localized string representations of a floating-point\n value, use subclasses of NumberFormat."}, {"method_name": "toHexString", "method_sig": "public static String toHexString (float f)", "description": "Returns a hexadecimal string representation of the\n float argument. All characters mentioned below are\n ASCII characters.\n\n \nIf the argument is NaN, the result is the string\n     \"NaN\".\n Otherwise, the result is a string that represents the sign and\n magnitude (absolute value) of the argument. If the sign is negative,\n the first character of the result is '-'\n ('\\u002D'); if the sign is positive, no sign character\n appears in the result. As for the magnitude m:\n\n \nIf m is infinity, it is represented by the string\n \"Infinity\"; thus, positive infinity produces the\n result \"Infinity\" and negative infinity produces\n the result \"-Infinity\".\n\n If m is zero, it is represented by the string\n \"0x0.0p0\"; thus, negative zero produces the result\n \"-0x0.0p0\" and positive zero produces the result\n \"0x0.0p0\".\n\n If m is a float value with a\n normalized representation, substrings are used to represent the\n significand and exponent fields.  The significand is\n represented by the characters \"0x1.\"\n followed by a lowercase hexadecimal representation of the rest\n of the significand as a fraction.  Trailing zeros in the\n hexadecimal representation are removed unless all the digits\n are zero, in which case a single zero is used. Next, the\n exponent is represented by \"p\" followed\n by a decimal string of the unbiased exponent as if produced by\n a call to Integer.toString on the\n exponent value.\n\n If m is a float value with a subnormal\n representation, the significand is represented by the\n characters \"0x0.\" followed by a\n hexadecimal representation of the rest of the significand as a\n fraction.  Trailing zeros in the hexadecimal representation are\n removed. Next, the exponent is represented by\n \"p-126\".  Note that there must be at\n least one nonzero digit in a subnormal significand.\n\n \n\n\nExamples\n\nFloating-point ValueHexadecimal String\n\n\n1.0 0x1.0p0\n-1.0 -0x1.0p0\n2.0 0x1.0p1\n3.0 0x1.8p1\n0.5 0x1.0p-1\n0.25 0x1.0p-2\nFloat.MAX_VALUE\n0x1.fffffep127\nMinimum Normal Value\n0x1.0p-126\nMaximum Subnormal Value\n0x0.fffffep-126\nFloat.MIN_VALUE\n0x0.000002p-126\n\n"}, {"method_name": "valueOf", "method_sig": "public static Float valueOf (String s)\n                     throws NumberFormatException", "description": "Returns a Float object holding the\n float value represented by the argument string\n s.\n\n If s is null, then a\n NullPointerException is thrown.\n\n Leading and trailing whitespace characters in s\n are ignored.  Whitespace is removed as if by the String.trim() method; that is, both ASCII space and control\n characters are removed. The rest of s should\n constitute a FloatValue as described by the lexical\n syntax rules:\n\n \n\nFloatValue:\nSignopt NaN\nSignopt Infinity\nSignopt FloatingPointLiteral\nSignopt HexFloatingPointLiteral\nSignedInteger\n\n\nHexFloatingPointLiteral:\n  HexSignificand BinaryExponent FloatTypeSuffixopt\n\n\nHexSignificand:\nHexNumeral\nHexNumeral .\n0x HexDigitsopt\n. HexDigits\n0X HexDigitsopt\n. HexDigits\n\n\nBinaryExponent:\nBinaryExponentIndicator SignedInteger\n\n\nBinaryExponentIndicator:\np\nP\n\n\n\n where Sign, FloatingPointLiteral,\n HexNumeral, HexDigits, SignedInteger and\n FloatTypeSuffix are as defined in the lexical structure\n sections of\n The Java\u2122 Language Specification,\n except that underscores are not accepted between digits.\n If s does not have the form of\n a FloatValue, then a NumberFormatException\n is thrown. Otherwise, s is regarded as\n representing an exact decimal value in the usual\n \"computerized scientific notation\" or as an exact\n hexadecimal value; this exact numerical value is then\n conceptually converted to an \"infinitely precise\"\n binary value that is then rounded to type float\n by the usual round-to-nearest rule of IEEE 754 floating-point\n arithmetic, which includes preserving the sign of a zero\n value.\n\n Note that the round-to-nearest rule also implies overflow and\n underflow behaviour; if the exact value of s is large\n enough in magnitude (greater than or equal to (MAX_VALUE + ulp(MAX_VALUE)/2),\n rounding to float will result in an infinity and if the\n exact value of s is small enough in magnitude (less\n than or equal to MIN_VALUE/2), rounding to float will\n result in a zero.\n\n Finally, after rounding a Float object representing\n this float value is returned.\n\n To interpret localized string representations of a\n floating-point value, use subclasses of NumberFormat.\n\n Note that trailing format specifiers, specifiers that\n determine the type of a floating-point literal\n (1.0f is a float value;\n 1.0d is a double value), do\n not influence the results of this method.  In other\n words, the numerical value of the input string is converted\n directly to the target floating-point type.  In general, the\n two-step sequence of conversions, string to double\n followed by double to float, is\n not equivalent to converting a string directly to\n float.  For example, if first converted to an\n intermediate double and then to\n float, the string\n\"1.00000017881393421514957253748434595763683319091796875001d\"\n results in the float value\n 1.0000002f; if the string is converted directly to\n float, 1.0000001f results.\n\n To avoid calling this method on an invalid string and having\n a NumberFormatException be thrown, the documentation\n for Double.valueOf lists a regular\n expression which can be used to screen the input."}, {"method_name": "valueOf", "method_sig": "public static Float valueOf (float f)", "description": "Returns a Float instance representing the specified\n float value.\n If a new Float instance is not required, this method\n should generally be used in preference to the constructor\n Float(float), as this method is likely to yield\n significantly better space and time performance by caching\n frequently requested values."}, {"method_name": "parseFloat", "method_sig": "public static float parseFloat (String s)\n                        throws NumberFormatException", "description": "Returns a new float initialized to the value\n represented by the specified String, as performed\n by the valueOf method of class Float."}, {"method_name": "isNaN", "method_sig": "public static boolean isNaN (float v)", "description": "Returns true if the specified number is a\n Not-a-Number (NaN) value, false otherwise."}, {"method_name": "isInfinite", "method_sig": "public static boolean isInfinite (float v)", "description": "Returns true if the specified number is infinitely\n large in magnitude, false otherwise."}, {"method_name": "isFinite", "method_sig": "public static boolean isFinite (float f)", "description": "Returns true if the argument is a finite floating-point\n value; returns false otherwise (for NaN and infinity\n arguments)."}, {"method_name": "isNaN", "method_sig": "public boolean isNaN()", "description": "Returns true if this Float value is a\n Not-a-Number (NaN), false otherwise."}, {"method_name": "isInfinite", "method_sig": "public boolean isInfinite()", "description": "Returns true if this Float value is\n infinitely large in magnitude, false otherwise."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a string representation of this Float object.\n The primitive float value represented by this object\n is converted to a String exactly as if by the method\n toString of one argument."}, {"method_name": "byteValue", "method_sig": "public byte byteValue()", "description": "Returns the value of this Float as a byte after\n a narrowing primitive conversion."}, {"method_name": "shortValue", "method_sig": "public short shortValue()", "description": "Returns the value of this Float as a short\n after a narrowing primitive conversion."}, {"method_name": "intValue", "method_sig": "public int intValue()", "description": "Returns the value of this Float as an int after\n a narrowing primitive conversion."}, {"method_name": "longValue", "method_sig": "public long longValue()", "description": "Returns value of this Float as a long after a\n narrowing primitive conversion."}, {"method_name": "floatValue", "method_sig": "public float floatValue()", "description": "Returns the float value of this Float object."}, {"method_name": "doubleValue", "method_sig": "public double doubleValue()", "description": "Returns the value of this Float as a double\n after a widening primitive conversion."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Returns a hash code for this Float object. The\n result is the integer bit representation, exactly as produced\n by the method floatToIntBits(float), of the primitive\n float value represented by this Float\n object."}, {"method_name": "hashCode", "method_sig": "public static int hashCode (float value)", "description": "Returns a hash code for a float value; compatible with\n Float.hashCode()."}, {"method_name": "equals", "method_sig": "public boolean equals (Object obj)", "description": "Compares this object against the specified object.  The result\n is true if and only if the argument is not\n null and is a Float object that\n represents a float with the same value as the\n float represented by this object. For this\n purpose, two float values are considered to be the\n same if and only if the method floatToIntBits(float)\n returns the identical int value when applied to\n each.\n\n Note that in most cases, for two instances of class\n Float, f1 and f2, the value\n of f1.equals(f2) is true if and only if\n\n \n   f1.floatValue() == f2.floatValue()\n \nalso has the value true. However, there are two exceptions:\n \nIf f1 and f2 both represent\n     Float.NaN, then the equals method returns\n     true, even though Float.NaN==Float.NaN\n     has the value false.\n If f1 represents +0.0f while\n     f2 represents -0.0f, or vice\n     versa, the equal test has the value\n     false, even though 0.0f==-0.0f\n     has the value true.\n \n\n This definition allows hash tables to operate properly."}, {"method_name": "floatToIntBits", "method_sig": "public static int floatToIntBits (float value)", "description": "Returns a representation of the specified floating-point value\n according to the IEEE 754 floating-point \"single format\" bit\n layout.\n\n Bit 31 (the bit that is selected by the mask\n 0x80000000) represents the sign of the floating-point\n number.\n Bits 30-23 (the bits that are selected by the mask\n 0x7f800000) represent the exponent.\n Bits 22-0 (the bits that are selected by the mask\n 0x007fffff) represent the significand (sometimes called\n the mantissa) of the floating-point number.\n\n If the argument is positive infinity, the result is\n 0x7f800000.\n\n If the argument is negative infinity, the result is\n 0xff800000.\n\n If the argument is NaN, the result is 0x7fc00000.\n\n In all cases, the result is an integer that, when given to the\n intBitsToFloat(int) method, will produce a floating-point\n value the same as the argument to floatToIntBits\n (except all NaN values are collapsed to a single\n \"canonical\" NaN value)."}, {"method_name": "floatToRawIntBits", "method_sig": "public static int floatToRawIntBits (float value)", "description": "Returns a representation of the specified floating-point value\n according to the IEEE 754 floating-point \"single format\" bit\n layout, preserving Not-a-Number (NaN) values.\n\n Bit 31 (the bit that is selected by the mask\n 0x80000000) represents the sign of the floating-point\n number.\n Bits 30-23 (the bits that are selected by the mask\n 0x7f800000) represent the exponent.\n Bits 22-0 (the bits that are selected by the mask\n 0x007fffff) represent the significand (sometimes called\n the mantissa) of the floating-point number.\n\n If the argument is positive infinity, the result is\n 0x7f800000.\n\n If the argument is negative infinity, the result is\n 0xff800000.\n\n If the argument is NaN, the result is the integer representing\n the actual NaN value.  Unlike the floatToIntBits\n method, floatToRawIntBits does not collapse all the\n bit patterns encoding a NaN to a single \"canonical\"\n NaN value.\n\n In all cases, the result is an integer that, when given to the\n intBitsToFloat(int) method, will produce a\n floating-point value the same as the argument to\n floatToRawIntBits."}, {"method_name": "intBitsToFloat", "method_sig": "public static float intBitsToFloat (int bits)", "description": "Returns the float value corresponding to a given\n bit representation.\n The argument is considered to be a representation of a\n floating-point value according to the IEEE 754 floating-point\n \"single format\" bit layout.\n\n If the argument is 0x7f800000, the result is positive\n infinity.\n\n If the argument is 0xff800000, the result is negative\n infinity.\n\n If the argument is any value in the range\n 0x7f800001 through 0x7fffffff or in\n the range 0xff800001 through\n 0xffffffff, the result is a NaN.  No IEEE 754\n floating-point operation provided by Java can distinguish\n between two NaN values of the same type with different bit\n patterns.  Distinct values of NaN are only distinguishable by\n use of the Float.floatToRawIntBits method.\n\n In all other cases, let s, e, and m be three\n values that can be computed from the argument:\n\n \n int s = ((bits >> 31) == 0) ? 1 : -1;\n int e = ((bits >> 23) & 0xff);\n int m = (e == 0) ?\n                 (bits & 0x7fffff) << 1 :\n                 (bits & 0x7fffff) | 0x800000;\n \n\n Then the floating-point result equals the value of the mathematical\n expression s\u00b7m\u00b72e-150.\n\n Note that this method may not be able to return a\n float NaN with exactly same bit pattern as the\n int argument.  IEEE 754 distinguishes between two\n kinds of NaNs, quiet NaNs and signaling NaNs.  The\n differences between the two kinds of NaN are generally not\n visible in Java.  Arithmetic operations on signaling NaNs turn\n them into quiet NaNs with a different, but often similar, bit\n pattern.  However, on some processors merely copying a\n signaling NaN also performs that conversion.  In particular,\n copying a signaling NaN to return it to the calling method may\n perform this conversion.  So intBitsToFloat may\n not be able to return a float with a signaling NaN\n bit pattern.  Consequently, for some int values,\n floatToRawIntBits(intBitsToFloat(start)) may\n not equal start.  Moreover, which\n particular bit patterns represent signaling NaNs is platform\n dependent; although all NaN bit patterns, quiet or signaling,\n must be in the NaN range identified above."}, {"method_name": "compareTo", "method_sig": "public int compareTo (Float anotherFloat)", "description": "Compares two Float objects numerically.  There are\n two ways in which comparisons performed by this method differ\n from those performed by the Java language numerical comparison\n operators (<, <=, ==, >=, >) when\n applied to primitive float values:\n\n \nFloat.NaN is considered by this method to\n          be equal to itself and greater than all other\n          float values\n          (including Float.POSITIVE_INFINITY).\n \n0.0f is considered by this method to be greater\n          than -0.0f.\n \n\n This ensures that the natural ordering of Float\n objects imposed by this method is consistent with equals."}, {"method_name": "compare", "method_sig": "public static int compare (float f1,\n                          float f2)", "description": "Compares the two specified float values. The sign\n of the integer value returned is the same as that of the\n integer that would be returned by the call:\n \n    new Float(f1).compareTo(new Float(f2))\n "}, {"method_name": "sum", "method_sig": "public static float sum (float a,\n                        float b)", "description": "Adds two float values together as per the + operator."}, {"method_name": "max", "method_sig": "public static float max (float a,\n                        float b)", "description": "Returns the greater of two float values\n as if by calling Math.max."}, {"method_name": "min", "method_sig": "public static float min (float a,\n                        float b)", "description": "Returns the smaller of two float values\n as if by calling Math.min."}]}