{"name": "Class EventQueue", "module": "java.desktop", "package": "java.awt", "text": "EventQueue is a platform-independent class\n that queues events, both from the underlying peer classes\n and from trusted application classes.\n \n It encapsulates asynchronous event dispatch machinery which\n extracts events from the queue and dispatches them by calling\n dispatchEvent(AWTEvent) method\n on this EventQueue with the event to be dispatched\n as an argument.  The particular behavior of this machinery is\n implementation-dependent.  The only requirements are that events\n which were actually enqueued to this queue (note that events\n being posted to the EventQueue can be coalesced)\n are dispatched:\n \n Sequentially.\n    That is, it is not permitted that several events from\n        this queue are dispatched simultaneously.\n    In the same order as they are enqueued.\n    That is, if AWTEvent\u00a0A is enqueued\n        to the EventQueue before\n        AWTEvent\u00a0B then event B will not be\n        dispatched before event A.\n \n\n Some browsers partition applets in different code bases into\n separate contexts, and establish walls between these contexts.\n In such a scenario, there will be one EventQueue\n per context. Other browsers place all applets into the same\n context, implying that there will be only a single, global\n EventQueue for all applets. This behavior is\n implementation-dependent.  Consult your browser's documentation\n for more information.\n \n For information on the threading issues of the event dispatch\n machinery, see AWT Threading Issues.", "codes": ["public class EventQueue\nextends Object"], "fields": [], "methods": [{"method_name": "postEvent", "method_sig": "public void postEvent (AWTEvent theEvent)", "description": "Posts a 1.1-style event to the EventQueue.\n If there is an existing event on the queue with the same ID\n and event source, the source Component's\n coalesceEvents method will be called."}, {"method_name": "getNextEvent", "method_sig": "public AWTEvent getNextEvent()\n                      throws InterruptedException", "description": "Removes an event from the EventQueue and\n returns it.  This method will block until an event has\n been posted by another thread."}, {"method_name": "peekEvent", "method_sig": "public AWTEvent peekEvent()", "description": "Returns the first event on the EventQueue\n without removing it."}, {"method_name": "peekEvent", "method_sig": "public AWTEvent peekEvent (int id)", "description": "Returns the first event with the specified id, if any."}, {"method_name": "dispatchEvent", "method_sig": "protected void dispatchEvent (AWTEvent event)", "description": "Dispatches an event. The manner in which the event is\n dispatched depends upon the type of the event and the\n type of the event's source object:\n\n \nEvent types, source types, and dispatch methods\n\n\nEvent Type\n     Source Type\n     Dispatched To\n \n\n\nActiveEvent\n     Any\n     event.dispatch()\n   \nOther\n     Component\n     source.dispatchEvent(AWTEvent)\n   \nOther\n     MenuComponent\n     source.dispatchEvent(AWTEvent)\n   \nOther\n     Other\n     No action (ignored)\n \n"}, {"method_name": "getMostRecentEventTime", "method_sig": "public static long getMostRecentEventTime()", "description": "Returns the timestamp of the most recent event that had a timestamp, and\n that was dispatched from the EventQueue associated with the\n calling thread. If an event with a timestamp is currently being\n dispatched, its timestamp will be returned. If no events have yet\n been dispatched, the EventQueue's initialization time will be\n returned instead.In the current version of\n the JDK, only InputEvents,\n ActionEvents, and InvocationEvents have\n timestamps; however, future versions of the JDK may add timestamps to\n additional event types. Note that this method should only be invoked\n from an application's event dispatching thread.\n If this method is\n invoked from another thread, the current system time (as reported by\n System.currentTimeMillis()) will be returned instead."}, {"method_name": "getCurrentEvent", "method_sig": "public static AWTEvent getCurrentEvent()", "description": "Returns the event currently being dispatched by the\n EventQueue associated with the calling thread. This is\n useful if a method needs access to the event, but was not designed to\n receive a reference to it as an argument. Note that this method should\n only be invoked from an application's event dispatching thread. If this\n method is invoked from another thread, null will be returned."}, {"method_name": "push", "method_sig": "public void push (EventQueue newEventQueue)", "description": "Replaces the existing EventQueue with the specified one.\n Any pending events are transferred to the new EventQueue\n for processing by it."}, {"method_name": "pop", "method_sig": "protected void pop()\n            throws EmptyStackException", "description": "Stops dispatching events using this EventQueue.\n Any pending events are transferred to the previous\n EventQueue for processing.\n \n Warning: To avoid deadlock, do not declare this method\n synchronized in a subclass."}, {"method_name": "createSecondaryLoop", "method_sig": "public SecondaryLoop createSecondaryLoop()", "description": "Creates a new secondary loop associated with this\n event queue. Use the SecondaryLoop.enter() and\n SecondaryLoop.exit() methods to start and stop the\n event loop and dispatch the events from this queue."}, {"method_name": "isDispatchThread", "method_sig": "public static boolean isDispatchThread()", "description": "Returns true if the calling thread is\n the current AWT EventQueue's\n dispatch thread. Use this method to ensure that a particular\n task is being executed (or not being) there.\n \n Note: use the invokeLater(java.lang.Runnable) or invokeAndWait(java.lang.Runnable)\n methods to execute a task in\n the current AWT EventQueue's\n dispatch thread."}, {"method_name": "invokeLater", "method_sig": "public static void invokeLater (Runnable runnable)", "description": "Causes runnable to have its run\n method called in the dispatch thread of\n the system EventQueue.\n This will happen after all pending events are processed."}, {"method_name": "invokeAndWait", "method_sig": "public static void invokeAndWait (Runnable runnable)\n                          throws InterruptedException,\n                                 InvocationTargetException", "description": "Causes runnable to have its run\n method called in the dispatch thread of\n the system EventQueue.\n This will happen after all pending events are processed.\n The call blocks until this has happened.  This method\n will throw an Error if called from the\n event dispatcher thread."}]}