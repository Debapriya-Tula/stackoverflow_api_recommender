{"name": "Interface Collection<E>", "module": "java.base", "package": "java.util", "text": "The root interface in the collection hierarchy.  A collection\n represents a group of objects, known as its elements.  Some\n collections allow duplicate elements and others do not.  Some are ordered\n and others unordered.  The JDK does not provide any direct\n implementations of this interface: it provides implementations of more\n specific subinterfaces like Set and List.  This interface\n is typically used to pass collections around and manipulate them where\n maximum generality is desired.\n\n Bags or multisets (unordered collections that may contain\n duplicate elements) should implement this interface directly.\n\n All general-purpose Collection implementation classes (which\n typically implement Collection indirectly through one of its\n subinterfaces) should provide two \"standard\" constructors: a void (no\n arguments) constructor, which creates an empty collection, and a\n constructor with a single argument of type Collection, which\n creates a new collection with the same elements as its argument.  In\n effect, the latter constructor allows the user to copy any collection,\n producing an equivalent collection of the desired implementation type.\n There is no way to enforce this convention (as interfaces cannot contain\n constructors) but all of the general-purpose Collection\n implementations in the Java platform libraries comply.\n\n Certain methods are specified to be\n optional. If a collection implementation doesn't implement a\n particular operation, it should define the corresponding method to throw\n UnsupportedOperationException. Such methods are marked \"optional\n operation\" in method specifications of the collections interfaces.\n\n Some collection implementations\n have restrictions on the elements that they may contain.\n For example, some implementations prohibit null elements,\n and some have restrictions on the types of their elements.  Attempting to\n add an ineligible element throws an unchecked exception, typically\n NullPointerException or ClassCastException.  Attempting\n to query the presence of an ineligible element may throw an exception,\n or it may simply return false; some implementations will exhibit the former\n behavior and some will exhibit the latter.  More generally, attempting an\n operation on an ineligible element whose completion would not result in\n the insertion of an ineligible element into the collection may throw an\n exception or it may succeed, at the option of the implementation.\n Such exceptions are marked as \"optional\" in the specification for this\n interface.\n\n It is up to each collection to determine its own synchronization\n policy.  In the absence of a stronger guarantee by the\n implementation, undefined behavior may result from the invocation\n of any method on a collection that is being mutated by another\n thread; this includes direct invocations, passing the collection to\n a method that might perform invocations, and using an existing\n iterator to examine the collection.\n\n Many methods in Collections Framework interfaces are defined in\n terms of the equals method.  For example,\n the specification for the contains(Object o)\n method says: \"returns true if and only if this collection\n contains at least one element e such that\n (o==null ? e==null : o.equals(e)).\"  This specification should\n not be construed to imply that invoking Collection.contains\n with a non-null argument o will cause o.equals(e) to be\n invoked for any element e.  Implementations are free to implement\n optimizations whereby the equals invocation is avoided, for\n example, by first comparing the hash codes of the two elements.  (The\n Object.hashCode() specification guarantees that two objects with\n unequal hash codes cannot be equal.)  More generally, implementations of\n the various Collections Framework interfaces are free to take advantage of\n the specified behavior of underlying Object methods wherever the\n implementor deems it appropriate.\n\n Some collection operations which perform recursive traversal of the\n collection may fail with an exception for self-referential instances where\n the collection directly or indirectly contains itself. This includes the\n clone(), equals(), hashCode() and toString()\n methods. Implementations may optionally handle the self-referential scenario,\n however most current implementations do not do so.\n\n View Collections\nMost collections manage storage for elements they contain. By contrast, view\n collections themselves do not store elements, but instead they rely on a\n backing collection to store the actual elements. Operations that are not handled\n by the view collection itself are delegated to the backing collection. Examples of\n view collections include the wrapper collections returned by methods such as\n Collections.checkedCollection,\n Collections.synchronizedCollection, and\n Collections.unmodifiableCollection.\n Other examples of view collections include collections that provide a\n different representation of the same elements, for example, as\n provided by List.subList,\n NavigableSet.subSet, or\n Map.entrySet.\n Any changes made to the backing collection are visible in the view collection.\n Correspondingly, any changes made to the view collection \u2014 if changes\n are permitted \u2014 are written through to the backing collection.\n Although they technically aren't collections, instances of\n Iterator and ListIterator can also allow modifications\n to be written through to the backing collection, and in some cases,\n modifications to the backing collection will be visible to the Iterator\n during iteration.\n\n Unmodifiable Collections\nCertain methods of this interface are considered \"destructive\" and are called\n \"mutator\" methods in that they modify the group of objects contained within\n the collection on which they operate. They can be specified to throw\n UnsupportedOperationException if this collection implementation\n does not support the operation. Such methods should (but are not required\n to) throw an UnsupportedOperationException if the invocation would\n have no effect on the collection. For example, consider a collection that\n does not support the add operation. What will happen if the\n addAll method is invoked on this collection, with an empty\n collection as the argument? The addition of zero elements has no effect,\n so it is permissible for this collection simply to do nothing and not to throw\n an exception. However, it is recommended that such cases throw an exception\n unconditionally, as throwing only in certain cases can lead to\n programming errors.\n\n An unmodifiable collection is a collection, all of whose\n mutator methods (as defined above) are specified to throw\n UnsupportedOperationException. Such a collection thus cannot be\n modified by calling any methods on it. For a collection to be properly\n unmodifiable, any view collections derived from it must also be unmodifiable.\n For example, if a List is unmodifiable, the List returned by\n List.subList is also unmodifiable.\n\n An unmodifiable collection is not necessarily immutable. If the\n contained elements are mutable, the entire collection is clearly\n mutable, even though it might be unmodifiable. For example, consider\n two unmodifiable lists containing mutable elements. The result of calling\n list1.equals(list2) might differ from one call to the next if\n the elements had been mutated, even though both lists are unmodifiable.\n However, if an unmodifiable collection contains all immutable elements,\n it can be considered effectively immutable.\n\n Unmodifiable View Collections\nAn unmodifiable view collection is a collection that is unmodifiable\n and that is also a view onto a backing collection. Its mutator methods throw\n UnsupportedOperationException, as described above, while\n reading and querying methods are delegated to the backing collection.\n The effect is to provide read-only access to the backing collection.\n This is useful for a component to provide users with read access to\n an internal collection, while preventing them from modifying such\n collections unexpectedly. Examples of unmodifiable view collections\n are those returned by the\n Collections.unmodifiableCollection,\n Collections.unmodifiableList, and\n related methods.\n\n Note that changes to the backing collection might still be possible,\n and if they occur, they are visible through the unmodifiable view. Thus,\n an unmodifiable view collection is not necessarily immutable. However,\n if the backing collection of an unmodifiable view is effectively immutable,\n or if the only reference to the backing collection is through an\n unmodifiable view, the view can be considered effectively immutable.\n\n This interface is a member of the\n \n Java Collections Framework.", "codes": ["public interface Collection<E>\nextends Iterable<E>"], "fields": [], "methods": [{"method_name": "size", "method_sig": "int size()", "description": "Returns the number of elements in this collection.  If this collection\n contains more than Integer.MAX_VALUE elements, returns\n Integer.MAX_VALUE."}, {"method_name": "isEmpty", "method_sig": "boolean isEmpty()", "description": "Returns true if this collection contains no elements."}, {"method_name": "contains", "method_sig": "boolean contains (Object o)", "description": "Returns true if this collection contains the specified element.\n More formally, returns true if and only if this collection\n contains at least one element e such that\n Objects.equals(o, e)."}, {"method_name": "iterator", "method_sig": "Iterator<E> iterator()", "description": "Returns an iterator over the elements in this collection.  There are no\n guarantees concerning the order in which the elements are returned\n (unless this collection is an instance of some class that provides a\n guarantee)."}, {"method_name": "toArray", "method_sig": "Object[] toArray()", "description": "Returns an array containing all of the elements in this collection.\n If this collection makes any guarantees as to what order its elements\n are returned by its iterator, this method must return the elements in\n the same order. The returned array's runtime component type is Object.\n\n The returned array will be \"safe\" in that no references to it are\n maintained by this collection.  (In other words, this method must\n allocate a new array even if this collection is backed by an array).\n The caller is thus free to modify the returned array."}, {"method_name": "toArray", "method_sig": "<T> T[] toArray (T[] a)", "description": "Returns an array containing all of the elements in this collection;\n the runtime type of the returned array is that of the specified array.\n If the collection fits in the specified array, it is returned therein.\n Otherwise, a new array is allocated with the runtime type of the\n specified array and the size of this collection.\n\n If this collection fits in the specified array with room to spare\n (i.e., the array has more elements than this collection), the element\n in the array immediately following the end of the collection is set to\n null.  (This is useful in determining the length of this\n collection only if the caller knows that this collection does\n not contain any null elements.)\n\n If this collection makes any guarantees as to what order its elements\n are returned by its iterator, this method must return the elements in\n the same order."}, {"method_name": "toArray", "method_sig": "default <T> T[] toArray (IntFunction<T[]> generator)", "description": "Returns an array containing all of the elements in this collection,\n using the provided generator function to allocate the returned array.\n\n If this collection makes any guarantees as to what order its elements\n are returned by its iterator, this method must return the elements in\n the same order."}, {"method_name": "add", "method_sig": "boolean add (E e)", "description": "Ensures that this collection contains the specified element (optional\n operation).  Returns true if this collection changed as a\n result of the call.  (Returns false if this collection does\n not permit duplicates and already contains the specified element.)\n\n Collections that support this operation may place limitations on what\n elements may be added to this collection.  In particular, some\n collections will refuse to add null elements, and others will\n impose restrictions on the type of elements that may be added.\n Collection classes should clearly specify in their documentation any\n restrictions on what elements may be added.\n\n If a collection refuses to add a particular element for any reason\n other than that it already contains the element, it must throw\n an exception (rather than returning false).  This preserves\n the invariant that a collection always contains the specified element\n after this call returns."}, {"method_name": "remove", "method_sig": "boolean remove (Object o)", "description": "Removes a single instance of the specified element from this\n collection, if it is present (optional operation).  More formally,\n removes an element e such that\n Objects.equals(o, e), if\n this collection contains one or more such elements.  Returns\n true if this collection contained the specified element (or\n equivalently, if this collection changed as a result of the call)."}, {"method_name": "containsAll", "method_sig": "boolean containsAll (Collection<?> c)", "description": "Returns true if this collection contains all of the elements\n in the specified collection."}, {"method_name": "addAll", "method_sig": "boolean addAll (Collection<? extends E> c)", "description": "Adds all of the elements in the specified collection to this collection\n (optional operation).  The behavior of this operation is undefined if\n the specified collection is modified while the operation is in progress.\n (This implies that the behavior of this call is undefined if the\n specified collection is this collection, and this collection is\n nonempty.)"}, {"method_name": "removeAll", "method_sig": "boolean removeAll (Collection<?> c)", "description": "Removes all of this collection's elements that are also contained in the\n specified collection (optional operation).  After this call returns,\n this collection will contain no elements in common with the specified\n collection."}, {"method_name": "removeIf", "method_sig": "default boolean removeIf (Predicate<? super E> filter)", "description": "Removes all of the elements of this collection that satisfy the given\n predicate.  Errors or runtime exceptions thrown during iteration or by\n the predicate are relayed to the caller."}, {"method_name": "retainAll", "method_sig": "boolean retainAll (Collection<?> c)", "description": "Retains only the elements in this collection that are contained in the\n specified collection (optional operation).  In other words, removes from\n this collection all of its elements that are not contained in the\n specified collection."}, {"method_name": "clear", "method_sig": "void clear()", "description": "Removes all of the elements from this collection (optional operation).\n The collection will be empty after this method returns."}, {"method_name": "equals", "method_sig": "boolean equals (Object o)", "description": "Compares the specified object with this collection for equality. \n\n While the Collection interface adds no stipulations to the\n general contract for the Object.equals, programmers who\n implement the Collection interface \"directly\" (in other words,\n create a class that is a Collection but is not a Set\n or a List) must exercise care if they choose to override the\n Object.equals.  It is not necessary to do so, and the simplest\n course of action is to rely on Object's implementation, but\n the implementor may wish to implement a \"value comparison\" in place of\n the default \"reference comparison.\"  (The List and\n Set interfaces mandate such value comparisons.)\n\n The general contract for the Object.equals method states that\n equals must be symmetric (in other words, a.equals(b) if and\n only if b.equals(a)).  The contracts for List.equals\n and Set.equals state that lists are only equal to other lists,\n and sets to other sets.  Thus, a custom equals method for a\n collection class that implements neither the List nor\n Set interface must return false when this collection\n is compared to any list or set.  (By the same logic, it is not possible\n to write a class that correctly implements both the Set and\n List interfaces.)"}, {"method_name": "hashCode", "method_sig": "int hashCode()", "description": "Returns the hash code value for this collection.  While the\n Collection interface adds no stipulations to the general\n contract for the Object.hashCode method, programmers should\n take note that any class that overrides the Object.equals\n method must also override the Object.hashCode method in order\n to satisfy the general contract for the Object.hashCode method.\n In particular, c1.equals(c2) implies that\n c1.hashCode()==c2.hashCode()."}, {"method_name": "spliterator", "method_sig": "default Spliterator<E> spliterator()", "description": "Creates a Spliterator over the elements in this collection.\n\n Implementations should document characteristic values reported by the\n spliterator.  Such characteristic values are not required to be reported\n if the spliterator reports Spliterator.SIZED and this collection\n contains no elements.\n\n The default implementation should be overridden by subclasses that\n can return a more efficient spliterator.  In order to\n preserve expected laziness behavior for the stream() and\n parallelStream() methods, spliterators should either have the\n characteristic of IMMUTABLE or CONCURRENT, or be\n late-binding.\n If none of these is practical, the overriding class should describe the\n spliterator's documented policy of binding and structural interference,\n and should override the stream() and parallelStream()\n methods to create streams using a Supplier of the spliterator,\n as in:\n \n     Stream<E> s = StreamSupport.stream(() -> spliterator(), spliteratorCharacteristics)\n \nThese requirements ensure that streams produced by the\n stream() and parallelStream() methods will reflect the\n contents of the collection as of initiation of the terminal stream\n operation."}, {"method_name": "stream", "method_sig": "default Stream<E> stream()", "description": "Returns a sequential Stream with this collection as its source.\n\n This method should be overridden when the spliterator()\n method cannot return a spliterator that is IMMUTABLE,\n CONCURRENT, or late-binding. (See spliterator()\n for details.)"}, {"method_name": "parallelStream", "method_sig": "default Stream<E> parallelStream()", "description": "Returns a possibly parallel Stream with this collection as its\n source.  It is allowable for this method to return a sequential stream.\n\n This method should be overridden when the spliterator()\n method cannot return a spliterator that is IMMUTABLE,\n CONCURRENT, or late-binding. (See spliterator()\n for details.)"}]}