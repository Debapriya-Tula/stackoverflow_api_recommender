{"name": "Class AsyncBoxView.ChildLocator", "module": "java.desktop", "package": "javax.swing.text", "text": "A class to manage the effective position of the\n child views in a localized area while changes are\n being made around the localized area.  The AsyncBoxView\n may be continuously changing, but the visible area\n needs to remain fairly stable until the layout thread\n decides to publish an update to the parent.", "codes": ["public class AsyncBoxView.ChildLocator\nextends Object"], "fields": [{"field_name": "lastValidOffset", "field_sig": "protected\u00a0AsyncBoxView.ChildState lastValidOffset", "description": "The location of the last offset calculation\n that is valid."}, {"field_name": "lastAlloc", "field_sig": "protected\u00a0Rectangle lastAlloc", "description": "The last seen allocation (for repainting when changes\n are flushed upward)."}, {"field_name": "childAlloc", "field_sig": "protected\u00a0Rectangle childAlloc", "description": "A shape to use for the child allocation to avoid\n creating a lot of garbage."}], "methods": [{"method_name": "childChanged", "method_sig": "public void childChanged (AsyncBoxView.ChildState cs)", "description": "Notification that a child changed.  This can effect\n whether or not new offset calculations are needed.\n This is called by a ChildState object that has\n changed it's major span.  This can therefore be\n called by multiple threads."}, {"method_name": "paintChildren", "method_sig": "public void paintChildren (Graphics g)", "description": "Paint the children that intersect the clip area."}, {"method_name": "getChildAllocation", "method_sig": "public Shape getChildAllocation (int index,\n                                Shape a)", "description": "Fetch the allocation to use for a child view.\n This will update the offsets for all children\n not yet updated before the given index."}, {"method_name": "getViewIndexAtPoint", "method_sig": "public int getViewIndexAtPoint (float x,\n                               float y,\n                               Shape a)", "description": "Fetches the child view index at the given point.\n This is called by the various View methods that\n need to calculate which child to forward a message\n to.  This should be called by a block synchronized\n on this object, and would typically be followed\n with one or more calls to getChildAllocation that\n should also be in the synchronized block."}, {"method_name": "getChildAllocation", "method_sig": "protected Shape getChildAllocation (int index)", "description": "Fetch the allocation to use for a child view.\n This does not update the offsets in the ChildState\n records."}, {"method_name": "setAllocation", "method_sig": "protected void setAllocation (Shape a)", "description": "Copy the currently allocated shape into the Rectangle\n used to store the current allocation.  This would be\n a floating point rectangle in a Java2D-specific implementation."}, {"method_name": "getViewIndexAtVisualOffset", "method_sig": "protected int getViewIndexAtVisualOffset (float targetOffset)", "description": "Locate the view responsible for an offset into the box\n along the major axis.  Make sure that offsets are set\n on the ChildState objects up to the given target span\n past the desired offset."}]}