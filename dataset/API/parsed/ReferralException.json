{"name": "Class ReferralException", "module": "java.naming", "package": "javax.naming", "text": "This abstract class is used to represent a referral exception,\n which is generated in response to a referral\n such as that returned by LDAP v3 servers.\n \n A service provider provides\n a subclass of ReferralException by providing implementations\n for getReferralInfo() and getReferralContext() (and appropriate\n constructors and/or corresponding \"set\" methods).\n \n The following code sample shows how ReferralException can be used.\n \n      while (true) {\n          try {\n              bindings = ctx.listBindings(name);\n              while (bindings.hasMore()) {\n                  b = bindings.next();\n                  ...\n              }\n              break;\n          } catch (ReferralException e) {\n              ctx = e.getReferralContext();\n          }\n      }\n \n\nReferralException is an abstract class. Concrete implementations\n determine its synchronization and serialization properties.\n\n An environment parameter passed to the getReferralContext()\n method is owned by the caller.\n The service provider will not modify the object or keep a reference to it,\n but may keep a reference to a clone of it.", "codes": ["public abstract class ReferralException\nextends NamingException"], "fields": [], "methods": [{"method_name": "getReferralInfo", "method_sig": "public abstract Object getReferralInfo()", "description": "Retrieves information (such as URLs) related to this referral.\n The program may examine or display this information\n to the user to determine whether to continue with the referral,\n or to determine additional information needs to be supplied in order\n to continue with the referral."}, {"method_name": "getReferralContext", "method_sig": "public abstract Context getReferralContext()\n                                    throws NamingException", "description": "Retrieves the context at which to continue the method.\n Regardless of whether a referral is encountered directly during a\n context operation, or indirectly, for example, during a search\n enumeration, the referral exception should provide a context\n at which to continue the operation. The referral context is\n created using the environment properties of the context\n that threw the ReferralException.\n\n\n To continue the operation, the client program should re-invoke\n the method using the same arguments as the original invocation."}, {"method_name": "getReferralContext", "method_sig": "public abstract Context getReferralContext (Hashtable<?, ?> env)\n                                    throws NamingException", "description": "Retrieves the context at which to continue the method using\n environment properties.\n Regardless of whether a referral is encountered directly during a\n context operation, or indirectly, for example, during a search\n enumeration, the referral exception should provide a context\n at which to continue the operation.\n\n The referral context is created using env as its environment\n properties.\n This method should be used instead of the no-arg overloaded form\n when the caller needs to use different environment properties for\n the referral context. It might need to do this, for example, when\n it needs to supply different authentication information to the referred\n server in order to create the referral context.\n\n To continue the operation, the client program should re-invoke\n the method using the same arguments as the original invocation."}, {"method_name": "skipReferral", "method_sig": "public abstract boolean skipReferral()", "description": "Discards the referral about to be processed.\n A call to this method should be followed by a call to\n getReferralContext to allow the processing of\n other referrals to continue.\n The following code fragment shows a typical usage pattern.\n \n  } catch (ReferralException e) {\n      if (!shallIFollow(e.getReferralInfo())) {\n          if (!e.skipReferral()) {\n              return;\n          }\n      }\n      ctx = e.getReferralContext();\n  }\n "}, {"method_name": "retryReferral", "method_sig": "public abstract void retryReferral()", "description": "Retries the referral currently being processed.\n A call to this method should be followed by a call to\n getReferralContext to allow the current\n referral to be retried.\n The following code fragment shows a typical usage pattern.\n \n  } catch (ReferralException e) {\n      while (true) {\n          try {\n              ctx = e.getReferralContext(env);\n              break;\n          } catch (NamingException ne) {\n              if (! shallIRetry()) {\n                  return;\n              }\n              // modify environment properties (env), if necessary\n              e.retryReferral();\n          }\n      }\n  }\n "}]}