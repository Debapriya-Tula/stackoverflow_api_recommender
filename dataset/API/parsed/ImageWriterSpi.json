{"name": "Class ImageWriterSpi", "module": "java.desktop", "package": "javax.imageio.spi", "text": "The service provider interface (SPI) for ImageWriters.\n For more information on service provider classes, see the class comment\n for the IIORegistry class.\n\n  Each ImageWriterSpi provides several types of information\n about the ImageWriter class with which it is associated.\n\n  The name of the vendor who defined the SPI class and a\n brief description of the class are available via the\n getVendorName, getDescription,\n and getVersion methods.\n These methods may be internationalized to provide locale-specific\n output.  These methods are intended mainly to provide short,\n human-writable information that might be used to organize a pop-up\n menu or other list.\n\n  Lists of format names, file suffixes, and MIME types associated\n with the service may be obtained by means of the\n getFormatNames, getFileSuffixes, and\n getMIMEType methods.  These methods may be used to\n identify candidate ImageWriters for writing a\n particular file or stream based on manual format selection, file\n naming, or MIME associations.\n\n  A more reliable way to determine which ImageWriters\n are likely to be able to parse a particular data stream is provided\n by the canEncodeImage method.  This methods allows the\n service provider to inspect the actual image contents.\n\n  Finally, an instance of the ImageWriter class\n associated with this service provider may be obtained by calling\n the createWriterInstance method.  Any heavyweight\n initialization, such as the loading of native libraries or creation\n of large tables, should be deferred at least until the first\n invocation of this method.", "codes": ["public abstract class ImageWriterSpi\nextends ImageReaderWriterSpi"], "fields": [{"field_name": "STANDARD_OUTPUT_TYPE", "field_sig": "@Deprecated\npublic static final\u00a0Class<?>[] STANDARD_OUTPUT_TYPE", "description": "A single-element array, initially containing\n ImageOutputStream.class, to be returned from\n getOutputTypes."}, {"field_name": "outputTypes", "field_sig": "protected\u00a0Class<?>[] outputTypes", "description": "An array of Class objects to be returned from\n getOutputTypes, initially null."}, {"field_name": "readerSpiNames", "field_sig": "protected\u00a0String[] readerSpiNames", "description": "An array of strings to be returned from\n getImageReaderSpiNames, initially\n null."}], "methods": [{"method_name": "isFormatLossless", "method_sig": "public boolean isFormatLossless()", "description": "Returns true if the format that this writer\n outputs preserves pixel data bit-accurately.  The default\n implementation returns true."}, {"method_name": "getOutputTypes", "method_sig": "public Class<?>[] getOutputTypes()", "description": "Returns an array of Class objects indicating what\n types of objects may be used as arguments to the writer's\n setOutput method.\n\n  For most writers, which only output to an\n ImageOutputStream, a single-element array\n containing ImageOutputStream.class should be\n returned."}, {"method_name": "canEncodeImage", "method_sig": "public abstract boolean canEncodeImage (ImageTypeSpecifier type)", "description": "Returns true if the ImageWriter\n implementation associated with this service provider is able to\n encode an image with the given layout.  The layout\n (i.e., the image's SampleModel and\n ColorModel) is described by an\n ImageTypeSpecifier object.\n\n  A return value of true is not an absolute\n guarantee of successful encoding; the encoding process may still\n produce errors due to factors such as I/O errors, inconsistent\n or malformed data structures, etc.  The intent is that a\n reasonable inspection of the basic structure of the image be\n performed in order to determine if it is within the scope of\n the encoding format.  For example, a service provider for a\n format that can only encode greyscale would return\n false if handed an RGB BufferedImage.\n Similarly, a service provider for a format that can encode\n 8-bit RGB imagery might refuse to encode an image with an\n associated alpha channel.\n\n  Different ImageWriters, and thus service\n providers, may choose to be more or less strict.  For example,\n they might accept an image with premultiplied alpha even though\n it will have to be divided out of each pixel, at some loss of\n precision, in order to be stored."}, {"method_name": "canEncodeImage", "method_sig": "public boolean canEncodeImage (RenderedImage im)", "description": "Returns true if the ImageWriter\n implementation associated with this service provider is able to\n encode the given RenderedImage instance.  Note\n that this includes instances of\n java.awt.image.BufferedImage.\n\n  See the discussion for\n canEncodeImage(ImageTypeSpecifier) for information\n on the semantics of this method."}, {"method_name": "createWriterInstance", "method_sig": "public ImageWriter createWriterInstance()\n                                 throws IOException", "description": "Returns an instance of the ImageWriter\n implementation associated with this service provider.\n The returned object will initially be in an initial state as if\n its reset method had been called.\n\n  The default implementation simply returns\n createWriterInstance(null)."}, {"method_name": "createWriterInstance", "method_sig": "public abstract ImageWriter createWriterInstance (Object extension)\n                                          throws IOException", "description": "Returns an instance of the ImageWriter\n implementation associated with this service provider.\n The returned object will initially be in an initial state\n as if its reset method had been called.\n\n  An Object may be supplied to the plug-in at\n construction time.  The nature of the object is entirely\n plug-in specific.\n\n  Typically, a plug-in will implement this method using code\n such as return new MyImageWriter(this)."}, {"method_name": "isOwnWriter", "method_sig": "public boolean isOwnWriter (ImageWriter writer)", "description": "Returns true if the ImageWriter object\n passed in is an instance of the ImageWriter\n associated with this service provider."}, {"method_name": "getImageReaderSpiNames", "method_sig": "public String[] getImageReaderSpiNames()", "description": "Returns an array of Strings containing all the\n fully qualified names of all the ImageReaderSpi\n classes that can understand the internal metadata\n representation used by the ImageWriter associated\n with this service provider, or null if there are\n no such ImageReaders specified.  If a\n non-null value is returned, it must have non-zero\n length.\n\n  The first item in the array must be the name of the service\n provider for the \"preferred\" reader, as it will be used to\n instantiate the ImageReader returned by\n ImageIO.getImageReader(ImageWriter).\n\n  This mechanism may be used to obtain\n ImageReaders that will generated non-pixel\n meta-data (see IIOExtraDataInfo) in a structure\n understood by an ImageWriter.  By reading the\n image and obtaining this data from one of the\n ImageReaders obtained with this method and passing\n it on to the ImageWriter, a client program can\n read an image, modify it in some way, and write it back out\n preserving all meta-data, without having to understand anything\n about the internal structure of the meta-data, or even about\n the image format."}]}