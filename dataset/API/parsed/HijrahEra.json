{"name": "Enum HijrahEra", "module": "java.base", "package": "java.time.chrono", "text": "An era in the Hijrah calendar system.\n \n The Hijrah calendar system has only one era covering the\n proleptic years greater than zero.\n \nDo not use ordinal() to obtain the numeric representation of HijrahEra.\n Use getValue() instead.", "codes": ["public enum HijrahEra\nextends Enum<HijrahEra>\nimplements Era"], "fields": [], "methods": [{"method_name": "values", "method_sig": "public static HijrahEra[] values()", "description": "Returns an array containing the constants of this enum type, in\nthe order they are declared. This method may be used to iterate\nover the constants as follows:\n\nfor (HijrahEra c : HijrahEra.values())\n\u00a0   System.out.println(c);\n"}, {"method_name": "valueOf", "method_sig": "public static HijrahEra valueOf (String name)", "description": "Returns the enum constant of this type with the specified name.\nThe string must match exactly an identifier used to declare an\nenum constant in this type.  (Extraneous whitespace characters are \nnot permitted.)"}, {"method_name": "of", "method_sig": "public static HijrahEra of (int hijrahEra)", "description": "Obtains an instance of HijrahEra from an int value.\n \n The current era, which is the only accepted value, has the value 1"}, {"method_name": "getValue", "method_sig": "public int getValue()", "description": "Gets the numeric era int value.\n \n The era AH has the value 1."}, {"method_name": "range", "method_sig": "public ValueRange range (TemporalField field)", "description": "Gets the range of valid values for the specified field.\n \n The range object expresses the minimum and maximum valid values for a field.\n This era is used to enhance the accuracy of the returned range.\n If it is not possible to return the range, because the field is not supported\n or for some other reason, an exception is thrown.\n \n If the field is a ChronoField then the query is implemented here.\n The ERA field returns the range.\n All other ChronoField instances will throw an UnsupportedTemporalTypeException.\n \n If the field is not a ChronoField, then the result of this method\n is obtained by invoking TemporalField.rangeRefinedBy(TemporalAccessor)\n passing this as the argument.\n Whether the range can be obtained is determined by the field.\n \n The ERA field returns a range for the one valid Hijrah era."}, {"method_name": "getDisplayName", "method_sig": "public String getDisplayName (TextStyle style,\n                             Locale locale)", "description": "Gets the textual representation of this era.\n \n This returns the textual name used to identify the era,\n suitable for presentation to the user.\n The parameters control the style of the returned text and the locale.\n \n If no textual mapping is found then the numeric value is returned."}]}