{"name": "Class BasicComboBoxUI", "module": "java.desktop", "package": "javax.swing.plaf.basic", "text": "Basic UI implementation for JComboBox.\n \n The combo box is a compound component which means that it is an aggregate of\n many simpler components. This class creates and manages the listeners\n on the combo box and the combo box model. These listeners update the user\n interface in response to changes in the properties and state of the combo box.\n \n All event handling is handled by listener classes created with the\n createxxxListener() methods and internal classes.\n You can change the behavior of this class by overriding the\n createxxxListener() methods and supplying your own\n event listeners or subclassing from the ones supplied in this class.\n \n For adding specific actions,\n overide installKeyboardActions to add actions in response to\n KeyStroke bindings. See the article How to Use Key Bindings", "codes": ["public class BasicComboBoxUI\nextends ComboBoxUI"], "fields": [{"field_name": "comboBox", "field_sig": "protected\u00a0JComboBox<Object> comboBox", "description": "The instance of JComboBox."}, {"field_name": "hasFocus", "field_sig": "protected\u00a0boolean hasFocus", "description": "This protected field is implementation specific. Do not access directly\n or override."}, {"field_name": "listBox", "field_sig": "protected\u00a0JList<Object> listBox", "description": "This list is for drawing the current item in the combo box."}, {"field_name": "currentValuePane", "field_sig": "protected\u00a0CellRendererPane currentValuePane", "description": "Used to render the currently selected item in the combo box.\n It doesn't have anything to do with the popup's rendering."}, {"field_name": "popup", "field_sig": "protected\u00a0ComboPopup popup", "description": "The implementation of ComboPopup that is used to show the popup."}, {"field_name": "editor", "field_sig": "protected\u00a0Component editor", "description": "The Component that the @{code ComboBoxEditor} uses for editing."}, {"field_name": "arrowButton", "field_sig": "protected\u00a0JButton arrowButton", "description": "The arrow button that invokes the popup."}, {"field_name": "keyListener", "field_sig": "protected\u00a0KeyListener keyListener", "description": "This protected field is implementation specific. Do not access directly\n or override. Override the listener construction method instead."}, {"field_name": "focusListener", "field_sig": "protected\u00a0FocusListener focusListener", "description": "This protected field is implementation specific. Do not access directly\n or override. Override the listener construction method instead."}, {"field_name": "propertyChangeListener", "field_sig": "protected\u00a0PropertyChangeListener propertyChangeListener", "description": "This protected field is implementation specific. Do not access directly\n or override. Override the listener construction method instead."}, {"field_name": "itemListener", "field_sig": "protected\u00a0ItemListener itemListener", "description": "This protected field is implementation specific. Do not access directly\n or override. Override the listener construction method instead."}, {"field_name": "popupMouseListener", "field_sig": "protected\u00a0MouseListener popupMouseListener", "description": "The MouseListener listens to events."}, {"field_name": "popupMouseMotionListener", "field_sig": "protected\u00a0MouseMotionListener popupMouseMotionListener", "description": "The MouseMotionListener listens to events."}, {"field_name": "popupKeyListener", "field_sig": "protected\u00a0KeyListener popupKeyListener", "description": "The KeyListener listens to events."}, {"field_name": "listDataListener", "field_sig": "protected\u00a0ListDataListener listDataListener", "description": "This protected field is implementation specific. Do not access directly\n or override. Override the listener construction method instead."}, {"field_name": "isMinimumSizeDirty", "field_sig": "protected\u00a0boolean isMinimumSizeDirty", "description": "The flag for recalculating the minimum preferred size."}, {"field_name": "cachedMinimumSize", "field_sig": "protected\u00a0Dimension cachedMinimumSize", "description": "The cached minimum preferred size."}, {"field_name": "squareButton", "field_sig": "protected\u00a0boolean squareButton", "description": "Indicates whether or not the combo box button should be square.\n If square, then the width and height are equal, and are both set to\n the height of the combo minus appropriate insets."}, {"field_name": "padding", "field_sig": "protected\u00a0Insets padding", "description": "If specified, these insets act as padding around the cell renderer when\n laying out and painting the \"selected\" item in the combo box. These\n insets add to those specified by the cell renderer."}], "methods": [{"method_name": "createUI", "method_sig": "public static ComponentUI createUI (JComponent c)", "description": "Constructs a new instance of BasicComboBoxUI."}, {"method_name": "installDefaults", "method_sig": "protected void installDefaults()", "description": "Installs the default colors, default font, default renderer, and default\n editor into the JComboBox."}, {"method_name": "installListeners", "method_sig": "protected void installListeners()", "description": "Creates and installs listeners for the combo box and its model.\n This method is called when the UI is installed."}, {"method_name": "uninstallDefaults", "method_sig": "protected void uninstallDefaults()", "description": "Uninstalls the default colors, default font, default renderer,\n and default editor from the combo box."}, {"method_name": "uninstallListeners", "method_sig": "protected void uninstallListeners()", "description": "Removes the installed listeners from the combo box and its model.\n The number and types of listeners removed and in this method should be\n the same that was added in installListeners"}, {"method_name": "createPopup", "method_sig": "protected ComboPopup createPopup()", "description": "Creates the popup portion of the combo box."}, {"method_name": "createKeyListener", "method_sig": "protected KeyListener createKeyListener()", "description": "Creates a KeyListener which will be added to the\n combo box. If this method returns null then it will not be added\n to the combo box."}, {"method_name": "createFocusListener", "method_sig": "protected FocusListener createFocusListener()", "description": "Creates a FocusListener which will be added to the combo box.\n If this method returns null then it will not be added to the combo box."}, {"method_name": "createListDataListener", "method_sig": "protected ListDataListener createListDataListener()", "description": "Creates a list data listener which will be added to the\n ComboBoxModel. If this method returns null then\n it will not be added to the combo box model."}, {"method_name": "createItemListener", "method_sig": "protected ItemListener createItemListener()", "description": "Creates an ItemListener which will be added to the\n combo box. If this method returns null then it will not\n be added to the combo box.\n \n Subclasses may override this method to return instances of their own\n ItemEvent handlers."}, {"method_name": "createPropertyChangeListener", "method_sig": "protected PropertyChangeListener createPropertyChangeListener()", "description": "Creates a PropertyChangeListener which will be added to\n the combo box. If this method returns null then it will not\n be added to the combo box."}, {"method_name": "createLayoutManager", "method_sig": "protected LayoutManager createLayoutManager()", "description": "Creates a layout manager for managing the components which make up the\n combo box."}, {"method_name": "createRenderer", "method_sig": "protected ListCellRenderer<Object> createRenderer()", "description": "Creates the default renderer that will be used in a non-editiable combo\n box. A default renderer will used only if a renderer has not been\n explicitly set with setRenderer."}, {"method_name": "createEditor", "method_sig": "protected ComboBoxEditor createEditor()", "description": "Creates the default editor that will be used in editable combo boxes.\n A default editor will be used only if an editor has not been\n explicitly set with setEditor."}, {"method_name": "installComponents", "method_sig": "protected void installComponents()", "description": "Creates and initializes the components which make up the\n aggregate combo box. This method is called as part of the UI\n installation process."}, {"method_name": "uninstallComponents", "method_sig": "protected void uninstallComponents()", "description": "The aggregate components which comprise the combo box are\n unregistered and uninitialized. This method is called as part of the\n UI uninstallation process."}, {"method_name": "addEditor", "method_sig": "public void addEditor()", "description": "This public method is implementation specific and should be private.\n do not call or override. To implement a specific editor create a\n custom ComboBoxEditor"}, {"method_name": "removeEditor", "method_sig": "public void removeEditor()", "description": "This public method is implementation specific and should be private.\n do not call or override."}, {"method_name": "configureEditor", "method_sig": "protected void configureEditor()", "description": "This protected method is implementation specific and should be private.\n do not call or override."}, {"method_name": "unconfigureEditor", "method_sig": "protected void unconfigureEditor()", "description": "This protected method is implementation specific and should be private.\n Do not call or override."}, {"method_name": "configureArrowButton", "method_sig": "public void configureArrowButton()", "description": "This public method is implementation specific and should be private. Do\n not call or override."}, {"method_name": "unconfigureArrowButton", "method_sig": "public void unconfigureArrowButton()", "description": "This public method is implementation specific and should be private. Do\n not call or override."}, {"method_name": "createArrowButton", "method_sig": "protected JButton createArrowButton()", "description": "Creates a button which will be used as the control to show or hide\n the popup portion of the combo box."}, {"method_name": "isPopupVisible", "method_sig": "public boolean isPopupVisible (JComboBox<?> c)", "description": "Tells if the popup is visible or not."}, {"method_name": "setPopupVisible", "method_sig": "public void setPopupVisible (JComboBox<?> c,\n                            boolean v)", "description": "Hides the popup."}, {"method_name": "isFocusTraversable", "method_sig": "public boolean isFocusTraversable (JComboBox<?> c)", "description": "Determines if the JComboBox is focus traversable.  If the JComboBox is editable\n this returns false, otherwise it returns true."}, {"method_name": "getMinimumSize", "method_sig": "public Dimension getMinimumSize (JComponent c)", "description": "The minimum size is the size of the display area plus insets plus the button."}, {"method_name": "getBaseline", "method_sig": "public int getBaseline (JComponent c,\n                       int width,\n                       int height)", "description": "Returns the baseline."}, {"method_name": "getBaselineResizeBehavior", "method_sig": "public Component.BaselineResizeBehavior getBaselineResizeBehavior (JComponent c)", "description": "Returns an enum indicating how the baseline of the component\n changes as the size changes."}, {"method_name": "isNavigationKey", "method_sig": "protected boolean isNavigationKey (int keyCode)", "description": "Returns whether or not the supplied keyCode maps to a key that is used for\n navigation.  This is used for optimizing key input by only passing non-\n navigation keys to the type-ahead mechanism.  Subclasses should override this\n if they change the navigation keys."}, {"method_name": "selectNextPossibleValue", "method_sig": "protected void selectNextPossibleValue()", "description": "Selects the next item in the list.  It won't change the selection if the\n currently selected item is already the last item."}, {"method_name": "selectPreviousPossibleValue", "method_sig": "protected void selectPreviousPossibleValue()", "description": "Selects the previous item in the list.  It won't change the selection if the\n currently selected item is already the first item."}, {"method_name": "toggleOpenClose", "method_sig": "protected void toggleOpenClose()", "description": "Hides the popup if it is showing and shows the popup if it is hidden."}, {"method_name": "rectangleForCurrentValue", "method_sig": "protected Rectangle rectangleForCurrentValue()", "description": "Returns the area that is reserved for drawing the currently selected item."}, {"method_name": "getInsets", "method_sig": "protected Insets getInsets()", "description": "Gets the insets from the JComboBox."}, {"method_name": "paintCurrentValue", "method_sig": "public void paintCurrentValue (Graphics g,\n                              Rectangle bounds,\n                              boolean hasFocus)", "description": "Paints the currently selected item."}, {"method_name": "paintCurrentValueBackground", "method_sig": "public void paintCurrentValueBackground (Graphics g,\n                                        Rectangle bounds,\n                                        boolean hasFocus)", "description": "Paints the background of the currently selected item."}, {"method_name": "getDefaultSize", "method_sig": "protected Dimension getDefaultSize()", "description": "Return the default size of an empty display area of the combo box using\n the current renderer and font."}, {"method_name": "getDisplaySize", "method_sig": "protected Dimension getDisplaySize()", "description": "Returns the calculated size of the display area. The display area is the\n portion of the combo box in which the selected item is displayed. This\n method will use the prototype display value if it has been set.\n \n For combo boxes with a non trivial number of items, it is recommended to\n use a prototype display value to significantly speed up the display\n size calculation."}, {"method_name": "getSizeForComponent", "method_sig": "protected Dimension getSizeForComponent (Component comp)", "description": "Returns the size a component would have if used as a cell renderer."}, {"method_name": "installKeyboardActions", "method_sig": "protected void installKeyboardActions()", "description": "Adds keyboard actions to the JComboBox.  Actions on enter and esc are already\n supplied.  Add more actions as you need them."}, {"method_name": "uninstallKeyboardActions", "method_sig": "protected void uninstallKeyboardActions()", "description": "Removes the focus InputMap and ActionMap."}]}