{"name": "Interface TreeCellRenderer", "module": "java.desktop", "package": "javax.swing.tree", "text": "Defines the requirements for an object that displays a tree node.\n See How to Use Trees\n in The Java Tutorial\n for an example of implementing a tree cell renderer\n that displays custom icons.", "codes": ["public interface TreeCellRenderer"], "fields": [], "methods": [{"method_name": "getTreeCellRendererComponent", "method_sig": "Component getTreeCellRendererComponent (JTree tree,\n                                       Object value,\n                                       boolean selected,\n                                       boolean expanded,\n                                       boolean leaf,\n                                       int row,\n                                       boolean hasFocus)", "description": "Sets the value of the current tree cell to value.\n If selected is true, the cell will be drawn as if\n selected. If expanded is true the node is currently\n expanded and if leaf is true the node represents a\n leaf and if hasFocus is true the node currently has\n focus. tree is the JTree the receiver is being\n configured for.  Returns the Component that the renderer\n uses to draw the value.\n \n The TreeCellRenderer is also responsible for rendering the\n the cell representing the tree's current DnD drop location if\n it has one. If this renderer cares about rendering\n the DnD drop location, it should query the tree directly to\n see if the given row represents the drop location:\n \n     JTree.DropLocation dropLocation = tree.getDropLocation();\n     if (dropLocation != null\n             && dropLocation.getChildIndex() == -1\n             && tree.getRowForPath(dropLocation.getPath()) == row) {\n\n         // this row represents the current drop location\n         // so render it specially, perhaps with a different color\n     }\n "}]}