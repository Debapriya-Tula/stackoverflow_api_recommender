{"name": "Class AtomicStampedReference<V>", "module": "java.base", "package": "java.util.concurrent.atomic", "text": "An AtomicStampedReference maintains an object reference\n along with an integer \"stamp\", that can be updated atomically.\n\n Implementation note: This implementation maintains stamped\n references by creating internal objects representing \"boxed\"\n [reference, integer] pairs.", "codes": ["public class AtomicStampedReference<V>\nextends Object"], "fields": [], "methods": [{"method_name": "getReference", "method_sig": "public V getReference()", "description": "Returns the current value of the reference."}, {"method_name": "getStamp", "method_sig": "public int getStamp()", "description": "Returns the current value of the stamp."}, {"method_name": "get", "method_sig": "public V get (int[] stampHolder)", "description": "Returns the current values of both the reference and the stamp.\n Typical usage is int[1] holder; ref = v.get(holder); ."}, {"method_name": "weakCompareAndSet", "method_sig": "public boolean weakCompareAndSet (V expectedReference,\n                                 V newReference,\n                                 int expectedStamp,\n                                 int newStamp)", "description": "Atomically sets the value of both the reference and stamp\n to the given update values if the\n current reference is == to the expected reference\n and the current stamp is equal to the expected stamp.\n\n May fail\n spuriously and does not provide ordering guarantees, so is\n only rarely an appropriate alternative to compareAndSet."}, {"method_name": "compareAndSet", "method_sig": "public boolean compareAndSet (V expectedReference,\n                             V newReference,\n                             int expectedStamp,\n                             int newStamp)", "description": "Atomically sets the value of both the reference and stamp\n to the given update values if the\n current reference is == to the expected reference\n and the current stamp is equal to the expected stamp."}, {"method_name": "set", "method_sig": "public void set (V newReference,\n                int newStamp)", "description": "Unconditionally sets the value of both the reference and stamp."}, {"method_name": "attemptStamp", "method_sig": "public boolean attemptStamp (V expectedReference,\n                            int newStamp)", "description": "Atomically sets the value of the stamp to the given update value\n if the current reference is == to the expected\n reference.  Any given invocation of this operation may fail\n (return false) spuriously, but repeated invocation\n when the current value holds the expected value and no other\n thread is also attempting to set the value will eventually\n succeed."}]}