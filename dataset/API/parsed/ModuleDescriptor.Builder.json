{"name": "Class ModuleDescriptor.Builder", "module": "java.base", "package": "java.lang.module", "text": "A builder for building ModuleDescriptor objects.\n\n  ModuleDescriptor defines the newModule,\n newOpenModule, and newAutomaticModule methods to create builders for building\n normal, open, and automatic modules. \n The set of packages in the module are accumulated by the \n Builder as the exports,\n opens,\n packages,\n provides, and\n mainClass methods are\n invoked. \n The module names, package names, and class names that are parameters\n specified to the builder methods are the module names, package names,\n and qualified names of classes (in named packages) as defined in the\n The Java\u2122 Language Specification. \n Example usage: \n   ModuleDescriptor descriptor = ModuleDescriptor.newModule(\"stats.core\")\n         .requires(\"java.base\")\n         .exports(\"org.acme.stats.core.clustering\")\n         .exports(\"org.acme.stats.core.regression\")\n         .packages(Set.of(\"org.acme.stats.core.internal\"))\n         .build();\n ", "codes": ["public static final class ModuleDescriptor.Builder\nextends Object"], "fields": [], "methods": [{"method_name": "requires", "method_sig": "public ModuleDescriptor.Builder requires (ModuleDescriptor.Requires req)", "description": "Adds a dependence on a module."}, {"method_name": "requires", "method_sig": "public ModuleDescriptor.Builder requires (Set<ModuleDescriptor.Requires.Modifier> ms,\n                                         String mn,\n                                         ModuleDescriptor.Version compiledVersion)", "description": "Adds a dependence on a module with the given (and possibly empty)\n set of modifiers. The dependence includes the version of the\n module that was recorded at compile-time."}, {"method_name": "requires", "method_sig": "public ModuleDescriptor.Builder requires (Set<ModuleDescriptor.Requires.Modifier> ms,\n                                         String mn)", "description": "Adds a dependence on a module with the given (and possibly empty)\n set of modifiers."}, {"method_name": "requires", "method_sig": "public ModuleDescriptor.Builder requires (String mn)", "description": "Adds a dependence on a module with an empty set of modifiers."}, {"method_name": "exports", "method_sig": "public ModuleDescriptor.Builder exports (ModuleDescriptor.Exports e)", "description": "Adds an exported package."}, {"method_name": "exports", "method_sig": "public ModuleDescriptor.Builder exports (Set<ModuleDescriptor.Exports.Modifier> ms,\n                                        String pn,\n                                        Set<String> targets)", "description": "Adds an exported package with the given (and possibly empty) set of\n modifiers. The package is exported to a set of target modules."}, {"method_name": "exports", "method_sig": "public ModuleDescriptor.Builder exports (Set<ModuleDescriptor.Exports.Modifier> ms,\n                                        String pn)", "description": "Adds an exported package with the given (and possibly empty) set of\n modifiers. The package is exported to all modules."}, {"method_name": "exports", "method_sig": "public ModuleDescriptor.Builder exports (String pn,\n                                        Set<String> targets)", "description": "Adds an exported package. The package is exported to a set of target\n modules."}, {"method_name": "exports", "method_sig": "public ModuleDescriptor.Builder exports (String pn)", "description": "Adds an exported package. The package is exported to all modules."}, {"method_name": "opens", "method_sig": "public ModuleDescriptor.Builder opens (ModuleDescriptor.Opens obj)", "description": "Adds an open package."}, {"method_name": "opens", "method_sig": "public ModuleDescriptor.Builder opens (Set<ModuleDescriptor.Opens.Modifier> ms,\n                                      String pn,\n                                      Set<String> targets)", "description": "Adds an open package with the given (and possibly empty) set of\n modifiers. The package is open to a set of target modules."}, {"method_name": "opens", "method_sig": "public ModuleDescriptor.Builder opens (Set<ModuleDescriptor.Opens.Modifier> ms,\n                                      String pn)", "description": "Adds an open package with the given (and possibly empty) set of\n modifiers. The package is open to all modules."}, {"method_name": "opens", "method_sig": "public ModuleDescriptor.Builder opens (String pn,\n                                      Set<String> targets)", "description": "Adds an open package. The package is open to a set of target modules."}, {"method_name": "opens", "method_sig": "public ModuleDescriptor.Builder opens (String pn)", "description": "Adds an open package. The package is open to all modules."}, {"method_name": "uses", "method_sig": "public ModuleDescriptor.Builder uses (String service)", "description": "Adds a service dependence."}, {"method_name": "provides", "method_sig": "public ModuleDescriptor.Builder provides (ModuleDescriptor.Provides p)", "description": "Provides a service with one or more implementations. The package for\n each provider (or provider factory) is\n added to the module if not already added."}, {"method_name": "provides", "method_sig": "public ModuleDescriptor.Builder provides (String service,\n                                         List<String> providers)", "description": "Provides implementations of a service. The package for each provider\n (or provider factory) is added to the module if not already added."}, {"method_name": "packages", "method_sig": "public ModuleDescriptor.Builder packages (Set<String> pns)", "description": "Adds packages to the module. All packages in the set of package names\n that are not in the module are added to module."}, {"method_name": "version", "method_sig": "public ModuleDescriptor.Builder version (ModuleDescriptor.Version v)", "description": "Sets the module version."}, {"method_name": "version", "method_sig": "public ModuleDescriptor.Builder version (String vs)", "description": "Sets the module version."}, {"method_name": "mainClass", "method_sig": "public ModuleDescriptor.Builder mainClass (String mc)", "description": "Sets the module main class. The package for the main class is added\n to the module if not already added. In other words, this method is\n equivalent to first invoking this builder's packages method to add the package name of the main class."}, {"method_name": "build", "method_sig": "public ModuleDescriptor build()", "description": "Builds and returns a ModuleDescriptor from its components.\n\n  The module will require \"java.base\" even if the dependence\n has not been declared (the exception is when building a module named\n \"java.base\" as it cannot require itself). The dependence on\n \"java.base\" will have the MANDATED\n modifier if the dependence was not declared. "}]}