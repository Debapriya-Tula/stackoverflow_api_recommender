{"name": "Class ThreadGroup", "module": "java.base", "package": "java.lang", "text": "A thread group represents a set of threads. In addition, a thread\n group can also include other thread groups. The thread groups form\n a tree in which every thread group except the initial thread group\n has a parent.\n \n A thread is allowed to access information about its own thread\n group, but not to access information about its thread group's\n parent thread group or any other thread groups.", "codes": ["public class ThreadGroup\nextends Object\nimplements Thread.UncaughtExceptionHandler"], "fields": [], "methods": [{"method_name": "getName", "method_sig": "public final String getName()", "description": "Returns the name of this thread group."}, {"method_name": "getParent", "method_sig": "public final ThreadGroup getParent()", "description": "Returns the parent of this thread group.\n \n First, if the parent is not null, the\n checkAccess method of the parent thread group is\n called with no arguments; this may result in a security exception."}, {"method_name": "getMaxPriority", "method_sig": "public final int getMaxPriority()", "description": "Returns the maximum priority of this thread group. Threads that are\n part of this group cannot have a higher priority than the maximum\n priority."}, {"method_name": "isDaemon", "method_sig": "public final boolean isDaemon()", "description": "Tests if this thread group is a daemon thread group. A\n daemon thread group is automatically destroyed when its last\n thread is stopped or its last thread group is destroyed."}, {"method_name": "isDestroyed", "method_sig": "public boolean isDestroyed()", "description": "Tests if this thread group has been destroyed."}, {"method_name": "setDaemon", "method_sig": "public final void setDaemon (boolean daemon)", "description": "Changes the daemon status of this thread group.\n \n First, the checkAccess method of this thread group is\n called with no arguments; this may result in a security exception.\n \n A daemon thread group is automatically destroyed when its last\n thread is stopped or its last thread group is destroyed."}, {"method_name": "setMaxPriority", "method_sig": "public final void setMaxPriority (int pri)", "description": "Sets the maximum priority of the group. Threads in the thread\n group that already have a higher priority are not affected.\n \n First, the checkAccess method of this thread group is\n called with no arguments; this may result in a security exception.\n \n If the pri argument is less than\n Thread.MIN_PRIORITY or greater than\n Thread.MAX_PRIORITY, the maximum priority of the group\n remains unchanged.\n \n Otherwise, the priority of this ThreadGroup object is set to the\n smaller of the specified pri and the maximum permitted\n priority of the parent of this thread group. (If this thread group\n is the system thread group, which has no parent, then its maximum\n priority is simply set to pri.) Then this method is\n called recursively, with pri as its argument, for\n every thread group that belongs to this thread group."}, {"method_name": "parentOf", "method_sig": "public final boolean parentOf (ThreadGroup g)", "description": "Tests if this thread group is either the thread group\n argument or one of its ancestor thread groups."}, {"method_name": "checkAccess", "method_sig": "public final void checkAccess()", "description": "Determines if the currently running thread has permission to\n modify this thread group.\n \n If there is a security manager, its checkAccess method\n is called with this thread group as its argument. This may result\n in throwing a SecurityException."}, {"method_name": "activeCount", "method_sig": "public int activeCount()", "description": "Returns an estimate of the number of active threads in this thread\n group and its subgroups. Recursively iterates over all subgroups in\n this thread group.\n\n  The value returned is only an estimate because the number of\n threads may change dynamically while this method traverses internal\n data structures, and might be affected by the presence of certain\n system threads. This method is intended primarily for debugging\n and monitoring purposes."}, {"method_name": "enumerate", "method_sig": "public int enumerate (Thread[] list)", "description": "Copies into the specified array every active thread in this\n thread group and its subgroups.\n\n  An invocation of this method behaves in exactly the same\n way as the invocation\n\n \nenumerate(list, true)\n"}, {"method_name": "enumerate", "method_sig": "public int enumerate (Thread[] list,\n                     boolean recurse)", "description": "Copies into the specified array every active thread in this\n thread group. If recurse is true,\n this method recursively enumerates all subgroups of this\n thread group and references to every active thread in these\n subgroups are also included. If the array is too short to\n hold all the threads, the extra threads are silently ignored.\n\n  An application might use the activeCount\n method to get an estimate of how big the array should be, however\n if the array is too short to hold all the threads, the extra threads\n are silently ignored.  If it is critical to obtain every active\n thread in this thread group, the caller should verify that the returned\n int value is strictly less than the length of list.\n\n  Due to the inherent race condition in this method, it is recommended\n that the method only be used for debugging and monitoring purposes."}, {"method_name": "activeGroupCount", "method_sig": "public int activeGroupCount()", "description": "Returns an estimate of the number of active groups in this\n thread group and its subgroups. Recursively iterates over\n all subgroups in this thread group.\n\n  The value returned is only an estimate because the number of\n thread groups may change dynamically while this method traverses\n internal data structures. This method is intended primarily for\n debugging and monitoring purposes."}, {"method_name": "enumerate", "method_sig": "public int enumerate (ThreadGroup[] list)", "description": "Copies into the specified array references to every active\n subgroup in this thread group and its subgroups.\n\n  An invocation of this method behaves in exactly the same\n way as the invocation\n\n \nenumerate(list, true)\n"}, {"method_name": "enumerate", "method_sig": "public int enumerate (ThreadGroup[] list,\n                     boolean recurse)", "description": "Copies into the specified array references to every active\n subgroup in this thread group. If recurse is\n true, this method recursively enumerates all subgroups of this\n thread group and references to every active thread group in these\n subgroups are also included.\n\n  An application might use the\n activeGroupCount method to\n get an estimate of how big the array should be, however if the\n array is too short to hold all the thread groups, the extra thread\n groups are silently ignored.  If it is critical to obtain every\n active subgroup in this thread group, the caller should verify that\n the returned int value is strictly less than the length of\n list.\n\n  Due to the inherent race condition in this method, it is recommended\n that the method only be used for debugging and monitoring purposes."}, {"method_name": "stop", "method_sig": "@Deprecated(since=\"1.2\")\npublic final void stop()", "description": "Stops all threads in this thread group.\n \n First, the checkAccess method of this thread group is\n called with no arguments; this may result in a security exception.\n \n This method then calls the stop method on all the\n threads in this thread group and in all of its subgroups."}, {"method_name": "interrupt", "method_sig": "public final void interrupt()", "description": "Interrupts all threads in this thread group.\n \n First, the checkAccess method of this thread group is\n called with no arguments; this may result in a security exception.\n \n This method then calls the interrupt method on all the\n threads in this thread group and in all of its subgroups."}, {"method_name": "suspend", "method_sig": "@Deprecated(since=\"1.2\")\npublic final void suspend()", "description": "Suspends all threads in this thread group.\n \n First, the checkAccess method of this thread group is\n called with no arguments; this may result in a security exception.\n \n This method then calls the suspend method on all the\n threads in this thread group and in all of its subgroups."}, {"method_name": "resume", "method_sig": "@Deprecated(since=\"1.2\")\npublic final void resume()", "description": "Resumes all threads in this thread group.\n \n First, the checkAccess method of this thread group is\n called with no arguments; this may result in a security exception.\n \n This method then calls the resume method on all the\n threads in this thread group and in all of its sub groups."}, {"method_name": "destroy", "method_sig": "public final void destroy()", "description": "Destroys this thread group and all of its subgroups. This thread\n group must be empty, indicating that all threads that had been in\n this thread group have since stopped.\n \n First, the checkAccess method of this thread group is\n called with no arguments; this may result in a security exception."}, {"method_name": "list", "method_sig": "public void list()", "description": "Prints information about this thread group to the standard\n output. This method is useful only for debugging."}, {"method_name": "uncaughtException", "method_sig": "public void uncaughtException (Thread t,\n                              Throwable e)", "description": "Called by the Java Virtual Machine when a thread in this\n thread group stops because of an uncaught exception, and the thread\n does not have a specific Thread.UncaughtExceptionHandler\n installed.\n \n The uncaughtException method of\n ThreadGroup does the following:\n \nIf this thread group has a parent thread group, the\n     uncaughtException method of that parent is called\n     with the same two arguments.\n Otherwise, this method checks to see if there is a\n     default\n     uncaught exception handler installed, and if so, its\n     uncaughtException method is called with the same\n     two arguments.\n Otherwise, this method determines if the Throwable\n     argument is an instance of ThreadDeath. If so, nothing\n     special is done. Otherwise, a message containing the\n     thread's name, as returned from the thread's getName method, and a stack backtrace,\n     using the Throwable's printStackTrace method, is\n     printed to the standard error stream.\n \n\n Applications can override this method in subclasses of\n ThreadGroup to provide alternative handling of\n uncaught exceptions."}, {"method_name": "allowThreadSuspension", "method_sig": "@Deprecated(since=\"1.2\")\npublic boolean allowThreadSuspension (boolean b)", "description": "Used by VM to control lowmem implicit suspension."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a string representation of this Thread group."}]}