{"name": "Class URLPermission", "module": "java.base", "package": "java.net", "text": "Represents permission to access a resource or set of resources defined by a\n given url, and for a given set of user-settable request methods\n and request headers. The name of the permission is the url string.\n The actions string is a concatenation of the request methods and headers.\n The range of method and header names is not restricted by this class.\n The url\n The url string has the following expected structure.\n \n     scheme : // authority [ / path ]\n \nscheme will typically be http or https, but is not restricted by this\n class.\n authority is specified as:\n \n     authority = [ userinfo @ ] hostrange [ : portrange ]\n     portrange = portnumber | -portnumber | portnumber-[portnumber] | *\n     hostrange = ([*.] dnsname) | IPv4address | IPv6address\n \ndnsname is a standard DNS host or domain name, ie. one or more labels\n separated by \".\". IPv4address is a standard literal IPv4 address and\n IPv6address is as defined in \n RFC 2732. Literal IPv6 addresses must however, be enclosed in '[]' characters.\n The dnsname specification can be preceded by \"*.\" which means\n the name will match any hostname whose right-most domain labels are the same as\n this name. For example, \"*.oracle.com\" matches \"foo.bar.oracle.com\"\n \nportrange is used to specify a port number, or a bounded or unbounded range of ports\n that this permission applies to. If portrange is absent or invalid, then a default\n port number is assumed if the scheme is http (default 80) or https\n (default 443). No default is assumed for other schemes. A wildcard may be specified\n which means all ports.\n \nuserinfo is optional. A userinfo component if present, is ignored when\n creating a URLPermission, and has no effect on any other methods defined by this class.\n \n The path component comprises a sequence of path segments,\n separated by '/' characters. path may also be empty. The path is specified\n in a similar way to the path in FilePermission. There are\n three different ways as the following examples show:\n \nURL Examples\n\nExample urlDescription\n\n\nhttp://www.oracle.com/a/b/c.html\nA url which identifies a specific (single) resource\n\nhttp://www.oracle.com/a/b/*\nThe '*' character refers to all resources in the same \"directory\" - in\n       other words all resources with the same number of path components, and\n       which only differ in the final path component, represented by the '*'.\n   \n\nhttp://www.oracle.com/a/b/-\nThe '-' character refers to all resources recursively below the\n       preceding path (eg. http://www.oracle.com/a/b/c/d/e.html matches this\n       example).\n   \n\n\n\n\n The '*' and '-' may only be specified in the final segment of a path and must be\n the only character in that segment. Any query or fragment components of the\n url are ignored when constructing URLPermissions.\n \n As a special case, urls of the form, \"scheme:*\" are accepted to\n mean any url of the given scheme.\n \n The scheme and authority components of the url string are handled\n without regard to case. This means equals(Object),\n hashCode() and implies(Permission) are case insensitive with respect\n to these components. If the authority contains a literal IP address,\n then the address is normalized for comparison. The path component is case sensitive.\n The actions string\n The actions string of a URLPermission is a concatenation of the method list\n and the request headers list. These are lists of the permitted request\n methods and permitted request headers of the permission (respectively). The two lists\n are separated by a colon ':' character and elements of each list are comma separated.\n Some examples are:\n \n\"POST,GET,DELETE\"\n \"GET:X-Foo-Request,X-Bar-Request\"\n \"POST,GET:Header1,Header2\"\n \n\n The first example specifies the methods: POST, GET and DELETE, but no request headers.\n The second example specifies one request method and two headers. The third\n example specifies two request methods, and two headers.\n \n The colon separator need not be present if the request headers list is empty.\n No white-space is permitted in the actions string. The action strings supplied to\n the URLPermission constructors are case-insensitive and are normalized by converting\n method names to upper-case and header names to the form defines in RFC2616 (lower case\n with initial letter of each word capitalized). Either list can contain a wild-card '*'\n character which signifies all request methods or headers respectively.\n \n Note. Depending on the context of use, some request methods and headers may be permitted\n at all times, and others may not be permitted at any time. For example, the\n HTTP protocol handler might disallow certain headers such as Content-Length\n from being set by application code, regardless of whether the security policy\n in force, permits it.", "codes": ["public final class URLPermission\nextends Permission"], "fields": [], "methods": [{"method_name": "getActions", "method_sig": "public String getActions()", "description": "Returns the normalized method list and request\n header list, in the form:\n \n      \"method-names : header-names\"\n \n\n where method-names is the list of methods separated by commas\n and header-names is the list of permitted headers separated by commas.\n There is no white space in the returned String. If header-names is empty\n then the colon separator may not be present."}, {"method_name": "implies", "method_sig": "public boolean implies (Permission p)", "description": "Checks if this URLPermission implies the given permission.\n Specifically, the following checks are done as if in the\n following sequence:\n \nif 'p' is not an instance of URLPermission return false\nif any of p's methods are not in this's method list, and if\n     this's method list is not equal to \"*\", then return false.\nif any of p's headers are not in this's request header list, and if\n     this's request header list is not equal to \"*\", then return false.\nif this's url scheme is not equal to p's url scheme return false\nif the scheme specific part of this's url is '*' return true\nif the set of hosts defined by p's url hostrange is not a subset of\n     this's url hostrange then return false. For example, \"*.foo.oracle.com\"\n     is a subset of \"*.oracle.com\". \"foo.bar.oracle.com\" is not\n     a subset of \"*.foo.oracle.com\"\nif the portrange defined by p's url is not a subset of the\n     portrange defined by this's url then return false.\n if the path or paths specified by p's url are contained in the\n     set of paths specified by this's url, then return true\n otherwise, return false\n\nSome examples of how paths are matched are shown below:\n \nExamples of Path Matching\n\nthis's pathp's pathmatch\n\n\n/a/b/a/byes\n/a/b/*/a/b/cyes\n /a/b/c/dno\n /a/b/c/-no\n/a/b/-/a/b/c/dyes\n /a/b/c/d/eyes\n /a/b/c/*yes\n\n"}, {"method_name": "equals", "method_sig": "public boolean equals (Object p)", "description": "Returns true if, this.getActions().equals(p.getActions())\n and p's url equals this's url.  Returns false otherwise."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Returns a hashcode calculated from the hashcode of the\n actions String and the url string."}]}