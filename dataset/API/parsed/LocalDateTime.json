{"name": "Class LocalDateTime", "module": "java.base", "package": "java.time", "text": "A date-time without a time-zone in the ISO-8601 calendar system,\n such as 2007-12-03T10:15:30.\n \nLocalDateTime is an immutable date-time object that represents a date-time,\n often viewed as year-month-day-hour-minute-second. Other date and time fields,\n such as day-of-year, day-of-week and week-of-year, can also be accessed.\n Time is represented to nanosecond precision.\n For example, the value \"2nd October 2007 at 13:45.30.123456789\" can be\n stored in a LocalDateTime.\n \n This class does not store or represent a time-zone.\n Instead, it is a description of the date, as used for birthdays, combined with\n the local time as seen on a wall clock.\n It cannot represent an instant on the time-line without additional information\n such as an offset or time-zone.\n \n The ISO-8601 calendar system is the modern civil calendar system used today\n in most of the world. It is equivalent to the proleptic Gregorian calendar\n system, in which today's rules for leap years are applied for all time.\n For most applications written today, the ISO-8601 rules are entirely suitable.\n However, any application that makes use of historical dates, and requires them\n to be accurate will find the ISO-8601 approach unsuitable.\n\n \n This is a value-based\n class; use of identity-sensitive operations (including reference equality\n (==), identity hash code, or synchronization) on instances of\n LocalDateTime may have unpredictable results and should be avoided.\n The equals method should be used for comparisons.", "codes": ["public final class LocalDateTime\nextends Object\nimplements Temporal, TemporalAdjuster, ChronoLocalDateTime<LocalDate>, Serializable"], "fields": [{"field_name": "MIN", "field_sig": "public static final\u00a0LocalDateTime MIN", "description": "The minimum supported LocalDateTime, '-999999999-01-01T00:00:00'.\n This is the local date-time of midnight at the start of the minimum date.\n This combines LocalDate.MIN and LocalTime.MIN.\n This could be used by an application as a \"far past\" date-time."}, {"field_name": "MAX", "field_sig": "public static final\u00a0LocalDateTime MAX", "description": "The maximum supported LocalDateTime, '+999999999-12-31T23:59:59.999999999'.\n This is the local date-time just before midnight at the end of the maximum date.\n This combines LocalDate.MAX and LocalTime.MAX.\n This could be used by an application as a \"far future\" date-time."}], "methods": [{"method_name": "now", "method_sig": "public static LocalDateTime now()", "description": "Obtains the current date-time from the system clock in the default time-zone.\n \n This will query the system clock in the default\n time-zone to obtain the current date-time.\n \n Using this method will prevent the ability to use an alternate clock for testing\n because the clock is hard-coded."}, {"method_name": "now", "method_sig": "public static LocalDateTime now (ZoneId zone)", "description": "Obtains the current date-time from the system clock in the specified time-zone.\n \n This will query the system clock to obtain the current date-time.\n Specifying the time-zone avoids dependence on the default time-zone.\n \n Using this method will prevent the ability to use an alternate clock for testing\n because the clock is hard-coded."}, {"method_name": "now", "method_sig": "public static LocalDateTime now (Clock clock)", "description": "Obtains the current date-time from the specified clock.\n \n This will query the specified clock to obtain the current date-time.\n Using this method allows the use of an alternate clock for testing.\n The alternate clock may be introduced using dependency injection."}, {"method_name": "of", "method_sig": "public static LocalDateTime of (int year,\n                               Month month,\n                               int dayOfMonth,\n                               int hour,\n                               int minute)", "description": "Obtains an instance of LocalDateTime from year, month,\n day, hour and minute, setting the second and nanosecond to zero.\n \n This returns a LocalDateTime with the specified year, month,\n day-of-month, hour and minute.\n The day must be valid for the year and month, otherwise an exception will be thrown.\n The second and nanosecond fields will be set to zero."}, {"method_name": "of", "method_sig": "public static LocalDateTime of (int year,\n                               Month month,\n                               int dayOfMonth,\n                               int hour,\n                               int minute,\n                               int second)", "description": "Obtains an instance of LocalDateTime from year, month,\n day, hour, minute and second, setting the nanosecond to zero.\n \n This returns a LocalDateTime with the specified year, month,\n day-of-month, hour, minute and second.\n The day must be valid for the year and month, otherwise an exception will be thrown.\n The nanosecond field will be set to zero."}, {"method_name": "of", "method_sig": "public static LocalDateTime of (int year,\n                               Month month,\n                               int dayOfMonth,\n                               int hour,\n                               int minute,\n                               int second,\n                               int nanoOfSecond)", "description": "Obtains an instance of LocalDateTime from year, month,\n day, hour, minute, second and nanosecond.\n \n This returns a LocalDateTime with the specified year, month,\n day-of-month, hour, minute, second and nanosecond.\n The day must be valid for the year and month, otherwise an exception will be thrown."}, {"method_name": "of", "method_sig": "public static LocalDateTime of (int year,\n                               int month,\n                               int dayOfMonth,\n                               int hour,\n                               int minute)", "description": "Obtains an instance of LocalDateTime from year, month,\n day, hour and minute, setting the second and nanosecond to zero.\n \n This returns a LocalDateTime with the specified year, month,\n day-of-month, hour and minute.\n The day must be valid for the year and month, otherwise an exception will be thrown.\n The second and nanosecond fields will be set to zero."}, {"method_name": "of", "method_sig": "public static LocalDateTime of (int year,\n                               int month,\n                               int dayOfMonth,\n                               int hour,\n                               int minute,\n                               int second)", "description": "Obtains an instance of LocalDateTime from year, month,\n day, hour, minute and second, setting the nanosecond to zero.\n \n This returns a LocalDateTime with the specified year, month,\n day-of-month, hour, minute and second.\n The day must be valid for the year and month, otherwise an exception will be thrown.\n The nanosecond field will be set to zero."}, {"method_name": "of", "method_sig": "public static LocalDateTime of (int year,\n                               int month,\n                               int dayOfMonth,\n                               int hour,\n                               int minute,\n                               int second,\n                               int nanoOfSecond)", "description": "Obtains an instance of LocalDateTime from year, month,\n day, hour, minute, second and nanosecond.\n \n This returns a LocalDateTime with the specified year, month,\n day-of-month, hour, minute, second and nanosecond.\n The day must be valid for the year and month, otherwise an exception will be thrown."}, {"method_name": "of", "method_sig": "public static LocalDateTime of (LocalDate date,\n                               LocalTime time)", "description": "Obtains an instance of LocalDateTime from a date and time."}, {"method_name": "ofInstant", "method_sig": "public static LocalDateTime ofInstant (Instant instant,\n                                      ZoneId zone)", "description": "Obtains an instance of LocalDateTime from an Instant and zone ID.\n \n This creates a local date-time based on the specified instant.\n First, the offset from UTC/Greenwich is obtained using the zone ID and instant,\n which is simple as there is only one valid offset for each instant.\n Then, the instant and offset are used to calculate the local date-time."}, {"method_name": "ofEpochSecond", "method_sig": "public static LocalDateTime ofEpochSecond (long epochSecond,\n                                          int nanoOfSecond,\n                                          ZoneOffset offset)", "description": "Obtains an instance of LocalDateTime using seconds from the\n epoch of 1970-01-01T00:00:00Z.\n \n This allows the epoch-second field\n to be converted to a local date-time. This is primarily intended for\n low-level conversions rather than general application usage."}, {"method_name": "from", "method_sig": "public static LocalDateTime from (TemporalAccessor temporal)", "description": "Obtains an instance of LocalDateTime from a temporal object.\n \n This obtains a local date-time based on the specified temporal.\n A TemporalAccessor represents an arbitrary set of date and time information,\n which this factory converts to an instance of LocalDateTime.\n \n The conversion extracts and combines the LocalDate and the\n LocalTime from the temporal object.\n Implementations are permitted to perform optimizations such as accessing\n those fields that are equivalent to the relevant objects.\n \n This method matches the signature of the functional interface TemporalQuery\n allowing it to be used as a query via method reference, LocalDateTime::from."}, {"method_name": "parse", "method_sig": "public static LocalDateTime parse (CharSequence text)", "description": "Obtains an instance of LocalDateTime from a text string such as 2007-12-03T10:15:30.\n \n The string must represent a valid date-time and is parsed using\n DateTimeFormatter.ISO_LOCAL_DATE_TIME."}, {"method_name": "parse", "method_sig": "public static LocalDateTime parse (CharSequence text,\n                                  DateTimeFormatter formatter)", "description": "Obtains an instance of LocalDateTime from a text string using a specific formatter.\n \n The text is parsed using the formatter, returning a date-time."}, {"method_name": "isSupported", "method_sig": "public boolean isSupported (TemporalField field)", "description": "Checks if the specified field is supported.\n \n This checks if this date-time can be queried for the specified field.\n If false, then calling the range,\n get and with(TemporalField, long)\n methods will throw an exception.\n \n If the field is a ChronoField then the query is implemented here.\n The supported fields are:\n \nNANO_OF_SECOND\nNANO_OF_DAY\nMICRO_OF_SECOND\nMICRO_OF_DAY\nMILLI_OF_SECOND\nMILLI_OF_DAY\nSECOND_OF_MINUTE\nSECOND_OF_DAY\nMINUTE_OF_HOUR\nMINUTE_OF_DAY\nHOUR_OF_AMPM\nCLOCK_HOUR_OF_AMPM\nHOUR_OF_DAY\nCLOCK_HOUR_OF_DAY\nAMPM_OF_DAY\nDAY_OF_WEEK\nALIGNED_DAY_OF_WEEK_IN_MONTH\nALIGNED_DAY_OF_WEEK_IN_YEAR\nDAY_OF_MONTH\nDAY_OF_YEAR\nEPOCH_DAY\nALIGNED_WEEK_OF_MONTH\nALIGNED_WEEK_OF_YEAR\nMONTH_OF_YEAR\nPROLEPTIC_MONTH\nYEAR_OF_ERA\nYEAR\nERA\n\n All other ChronoField instances will return false.\n \n If the field is not a ChronoField, then the result of this method\n is obtained by invoking TemporalField.isSupportedBy(TemporalAccessor)\n passing this as the argument.\n Whether the field is supported is determined by the field."}, {"method_name": "isSupported", "method_sig": "public boolean isSupported (TemporalUnit unit)", "description": "Checks if the specified unit is supported.\n \n This checks if the specified unit can be added to, or subtracted from, this date-time.\n If false, then calling the plus(long, TemporalUnit) and\n minus methods will throw an exception.\n \n If the unit is a ChronoUnit then the query is implemented here.\n The supported units are:\n \nNANOS\nMICROS\nMILLIS\nSECONDS\nMINUTES\nHOURS\nHALF_DAYS\nDAYS\nWEEKS\nMONTHS\nYEARS\nDECADES\nCENTURIES\nMILLENNIA\nERAS\n\n All other ChronoUnit instances will return false.\n \n If the unit is not a ChronoUnit, then the result of this method\n is obtained by invoking TemporalUnit.isSupportedBy(Temporal)\n passing this as the argument.\n Whether the unit is supported is determined by the unit."}, {"method_name": "range", "method_sig": "public ValueRange range (TemporalField field)", "description": "Gets the range of valid values for the specified field.\n \n The range object expresses the minimum and maximum valid values for a field.\n This date-time is used to enhance the accuracy of the returned range.\n If it is not possible to return the range, because the field is not supported\n or for some other reason, an exception is thrown.\n \n If the field is a ChronoField then the query is implemented here.\n The supported fields will return\n appropriate range instances.\n All other ChronoField instances will throw an UnsupportedTemporalTypeException.\n \n If the field is not a ChronoField, then the result of this method\n is obtained by invoking TemporalField.rangeRefinedBy(TemporalAccessor)\n passing this as the argument.\n Whether the range can be obtained is determined by the field."}, {"method_name": "get", "method_sig": "public int get (TemporalField field)", "description": "Gets the value of the specified field from this date-time as an int.\n \n This queries this date-time for the value of the specified field.\n The returned value will always be within the valid range of values for the field.\n If it is not possible to return the value, because the field is not supported\n or for some other reason, an exception is thrown.\n \n If the field is a ChronoField then the query is implemented here.\n The supported fields will return valid\n values based on this date-time, except NANO_OF_DAY, MICRO_OF_DAY,\n EPOCH_DAY and PROLEPTIC_MONTH which are too large to fit in\n an int and throw an UnsupportedTemporalTypeException.\n All other ChronoField instances will throw an UnsupportedTemporalTypeException.\n \n If the field is not a ChronoField, then the result of this method\n is obtained by invoking TemporalField.getFrom(TemporalAccessor)\n passing this as the argument. Whether the value can be obtained,\n and what the value represents, is determined by the field."}, {"method_name": "getLong", "method_sig": "public long getLong (TemporalField field)", "description": "Gets the value of the specified field from this date-time as a long.\n \n This queries this date-time for the value of the specified field.\n If it is not possible to return the value, because the field is not supported\n or for some other reason, an exception is thrown.\n \n If the field is a ChronoField then the query is implemented here.\n The supported fields will return valid\n values based on this date-time.\n All other ChronoField instances will throw an UnsupportedTemporalTypeException.\n \n If the field is not a ChronoField, then the result of this method\n is obtained by invoking TemporalField.getFrom(TemporalAccessor)\n passing this as the argument. Whether the value can be obtained,\n and what the value represents, is determined by the field."}, {"method_name": "toLocalDate", "method_sig": "public LocalDate toLocalDate()", "description": "Gets the LocalDate part of this date-time.\n \n This returns a LocalDate with the same year, month and day\n as this date-time."}, {"method_name": "getYear", "method_sig": "public int getYear()", "description": "Gets the year field.\n \n This method returns the primitive int value for the year.\n \n The year returned by this method is proleptic as per get(YEAR).\n To obtain the year-of-era, use get(YEAR_OF_ERA)."}, {"method_name": "getMonthValue", "method_sig": "public int getMonthValue()", "description": "Gets the month-of-year field from 1 to 12.\n \n This method returns the month as an int from 1 to 12.\n Application code is frequently clearer if the enum Month\n is used by calling getMonth()."}, {"method_name": "getMonth", "method_sig": "public Month getMonth()", "description": "Gets the month-of-year field using the Month enum.\n \n This method returns the enum Month for the month.\n This avoids confusion as to what int values mean.\n If you need access to the primitive int value then the enum\n provides the int value."}, {"method_name": "getDayOfMonth", "method_sig": "public int getDayOfMonth()", "description": "Gets the day-of-month field.\n \n This method returns the primitive int value for the day-of-month."}, {"method_name": "getDayOfYear", "method_sig": "public int getDayOfYear()", "description": "Gets the day-of-year field.\n \n This method returns the primitive int value for the day-of-year."}, {"method_name": "getDayOfWeek", "method_sig": "public DayOfWeek getDayOfWeek()", "description": "Gets the day-of-week field, which is an enum DayOfWeek.\n \n This method returns the enum DayOfWeek for the day-of-week.\n This avoids confusion as to what int values mean.\n If you need access to the primitive int value then the enum\n provides the int value.\n \n Additional information can be obtained from the DayOfWeek.\n This includes textual names of the values."}, {"method_name": "toLocalTime", "method_sig": "public LocalTime toLocalTime()", "description": "Gets the LocalTime part of this date-time.\n \n This returns a LocalTime with the same hour, minute, second and\n nanosecond as this date-time."}, {"method_name": "getHour", "method_sig": "public int getHour()", "description": "Gets the hour-of-day field."}, {"method_name": "getMinute", "method_sig": "public int getMinute()", "description": "Gets the minute-of-hour field."}, {"method_name": "getSecond", "method_sig": "public int getSecond()", "description": "Gets the second-of-minute field."}, {"method_name": "getNano", "method_sig": "public int getNano()", "description": "Gets the nano-of-second field."}, {"method_name": "with", "method_sig": "public LocalDateTime with (TemporalAdjuster adjuster)", "description": "Returns an adjusted copy of this date-time.\n \n This returns a LocalDateTime, based on this one, with the date-time adjusted.\n The adjustment takes place using the specified adjuster strategy object.\n Read the documentation of the adjuster to understand what adjustment will be made.\n \n A simple adjuster might simply set the one of the fields, such as the year field.\n A more complex adjuster might set the date to the last day of the month.\n \n A selection of common adjustments is provided in\n TemporalAdjusters.\n These include finding the \"last day of the month\" and \"next Wednesday\".\n Key date-time classes also implement the TemporalAdjuster interface,\n such as Month and MonthDay.\n The adjuster is responsible for handling special cases, such as the varying\n lengths of month and leap years.\n \n For example this code returns a date on the last day of July:\n \n  import static java.time.Month.*;\n  import static java.time.temporal.TemporalAdjusters.*;\n\n  result = localDateTime.with(JULY).with(lastDayOfMonth());\n \n\n The classes LocalDate and LocalTime implement TemporalAdjuster,\n thus this method can be used to change the date, time or offset:\n \n  result = localDateTime.with(date);\n  result = localDateTime.with(time);\n \n\n The result of this method is obtained by invoking the\n TemporalAdjuster.adjustInto(Temporal) method on the\n specified adjuster passing this as the argument.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "with", "method_sig": "public LocalDateTime with (TemporalField field,\n                          long newValue)", "description": "Returns a copy of this date-time with the specified field set to a new value.\n \n This returns a LocalDateTime, based on this one, with the value\n for the specified field changed.\n This can be used to change any supported field, such as the year, month or day-of-month.\n If it is not possible to set the value, because the field is not supported or for\n some other reason, an exception is thrown.\n \n In some cases, changing the specified field can cause the resulting date-time to become invalid,\n such as changing the month from 31st January to February would make the day-of-month invalid.\n In cases like this, the field is responsible for resolving the date. Typically it will choose\n the previous valid date, which would be the last valid day of February in this example.\n \n If the field is a ChronoField then the adjustment is implemented here.\n The supported fields will behave as per\n the matching method on LocalDate\n or LocalTime.\n All other ChronoField instances will throw an UnsupportedTemporalTypeException.\n \n If the field is not a ChronoField, then the result of this method\n is obtained by invoking TemporalField.adjustInto(Temporal, long)\n passing this as the argument. In this case, the field determines\n whether and how to adjust the instant.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "withYear", "method_sig": "public LocalDateTime withYear (int year)", "description": "Returns a copy of this LocalDateTime with the year altered.\n \n The time does not affect the calculation and will be the same in the result.\n If the day-of-month is invalid for the year, it will be changed to the last valid day of the month.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "withMonth", "method_sig": "public LocalDateTime withMonth (int month)", "description": "Returns a copy of this LocalDateTime with the month-of-year altered.\n \n The time does not affect the calculation and will be the same in the result.\n If the day-of-month is invalid for the year, it will be changed to the last valid day of the month.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "withDayOfMonth", "method_sig": "public LocalDateTime withDayOfMonth (int dayOfMonth)", "description": "Returns a copy of this LocalDateTime with the day-of-month altered.\n \n If the resulting date-time is invalid, an exception is thrown.\n The time does not affect the calculation and will be the same in the result.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "withDayOfYear", "method_sig": "public LocalDateTime withDayOfYear (int dayOfYear)", "description": "Returns a copy of this LocalDateTime with the day-of-year altered.\n \n If the resulting date-time is invalid, an exception is thrown.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "withHour", "method_sig": "public LocalDateTime withHour (int hour)", "description": "Returns a copy of this LocalDateTime with the hour-of-day altered.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "withMinute", "method_sig": "public LocalDateTime withMinute (int minute)", "description": "Returns a copy of this LocalDateTime with the minute-of-hour altered.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "withSecond", "method_sig": "public LocalDateTime withSecond (int second)", "description": "Returns a copy of this LocalDateTime with the second-of-minute altered.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "withNano", "method_sig": "public LocalDateTime withNano (int nanoOfSecond)", "description": "Returns a copy of this LocalDateTime with the nano-of-second altered.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "truncatedTo", "method_sig": "public LocalDateTime truncatedTo (TemporalUnit unit)", "description": "Returns a copy of this LocalDateTime with the time truncated.\n \n Truncation returns a copy of the original date-time with fields\n smaller than the specified unit set to zero.\n For example, truncating with the minutes unit\n will set the second-of-minute and nano-of-second field to zero.\n \n The unit must have a duration\n that divides into the length of a standard day without remainder.\n This includes all supplied time units on ChronoUnit and\n DAYS. Other units throw an exception.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "plus", "method_sig": "public LocalDateTime plus (TemporalAmount amountToAdd)", "description": "Returns a copy of this date-time with the specified amount added.\n \n This returns a LocalDateTime, based on this one, with the specified amount added.\n The amount is typically Period or Duration but may be\n any other type implementing the TemporalAmount interface.\n \n The calculation is delegated to the amount object by calling\n TemporalAmount.addTo(Temporal). The amount implementation is free\n to implement the addition in any way it wishes, however it typically\n calls back to plus(long, TemporalUnit). Consult the documentation\n of the amount implementation to determine if it can be successfully added.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "plus", "method_sig": "public LocalDateTime plus (long amountToAdd,\n                          TemporalUnit unit)", "description": "Returns a copy of this date-time with the specified amount added.\n \n This returns a LocalDateTime, based on this one, with the amount\n in terms of the unit added. If it is not possible to add the amount, because the\n unit is not supported or for some other reason, an exception is thrown.\n \n If the field is a ChronoUnit then the addition is implemented here.\n Date units are added as per LocalDate.plus(long, TemporalUnit).\n Time units are added as per LocalTime.plus(long, TemporalUnit) with\n any overflow in days added equivalent to using plusDays(long).\n \n If the field is not a ChronoUnit, then the result of this method\n is obtained by invoking TemporalUnit.addTo(Temporal, long)\n passing this as the argument. In this case, the unit determines\n whether and how to perform the addition.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "plusYears", "method_sig": "public LocalDateTime plusYears (long years)", "description": "Returns a copy of this LocalDateTime with the specified number of years added.\n \n This method adds the specified amount to the years field in three steps:\n \nAdd the input years to the year field\nCheck if the resulting date would be invalid\nAdjust the day-of-month to the last valid day if necessary\n\n\n For example, 2008-02-29 (leap year) plus one year would result in the\n invalid date 2009-02-29 (standard year). Instead of returning an invalid\n result, the last valid day of the month, 2009-02-28, is selected instead.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "plusMonths", "method_sig": "public LocalDateTime plusMonths (long months)", "description": "Returns a copy of this LocalDateTime with the specified number of months added.\n \n This method adds the specified amount to the months field in three steps:\n \nAdd the input months to the month-of-year field\nCheck if the resulting date would be invalid\nAdjust the day-of-month to the last valid day if necessary\n\n\n For example, 2007-03-31 plus one month would result in the invalid date\n 2007-04-31. Instead of returning an invalid result, the last valid day\n of the month, 2007-04-30, is selected instead.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "plusWeeks", "method_sig": "public LocalDateTime plusWeeks (long weeks)", "description": "Returns a copy of this LocalDateTime with the specified number of weeks added.\n \n This method adds the specified amount in weeks to the days field incrementing\n the month and year fields as necessary to ensure the result remains valid.\n The result is only invalid if the maximum/minimum year is exceeded.\n \n For example, 2008-12-31 plus one week would result in 2009-01-07.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "plusDays", "method_sig": "public LocalDateTime plusDays (long days)", "description": "Returns a copy of this LocalDateTime with the specified number of days added.\n \n This method adds the specified amount to the days field incrementing the\n month and year fields as necessary to ensure the result remains valid.\n The result is only invalid if the maximum/minimum year is exceeded.\n \n For example, 2008-12-31 plus one day would result in 2009-01-01.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "plusHours", "method_sig": "public LocalDateTime plusHours (long hours)", "description": "Returns a copy of this LocalDateTime with the specified number of hours added.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "plusMinutes", "method_sig": "public LocalDateTime plusMinutes (long minutes)", "description": "Returns a copy of this LocalDateTime with the specified number of minutes added.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "plusSeconds", "method_sig": "public LocalDateTime plusSeconds (long seconds)", "description": "Returns a copy of this LocalDateTime with the specified number of seconds added.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "plusNanos", "method_sig": "public LocalDateTime plusNanos (long nanos)", "description": "Returns a copy of this LocalDateTime with the specified number of nanoseconds added.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "minus", "method_sig": "public LocalDateTime minus (TemporalAmount amountToSubtract)", "description": "Returns a copy of this date-time with the specified amount subtracted.\n \n This returns a LocalDateTime, based on this one, with the specified amount subtracted.\n The amount is typically Period or Duration but may be\n any other type implementing the TemporalAmount interface.\n \n The calculation is delegated to the amount object by calling\n TemporalAmount.subtractFrom(Temporal). The amount implementation is free\n to implement the subtraction in any way it wishes, however it typically\n calls back to minus(long, TemporalUnit). Consult the documentation\n of the amount implementation to determine if it can be successfully subtracted.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "minus", "method_sig": "public LocalDateTime minus (long amountToSubtract,\n                           TemporalUnit unit)", "description": "Returns a copy of this date-time with the specified amount subtracted.\n \n This returns a LocalDateTime, based on this one, with the amount\n in terms of the unit subtracted. If it is not possible to subtract the amount,\n because the unit is not supported or for some other reason, an exception is thrown.\n \n This method is equivalent to plus(long, TemporalUnit) with the amount negated.\n See that method for a full description of how addition, and thus subtraction, works.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "minusYears", "method_sig": "public LocalDateTime minusYears (long years)", "description": "Returns a copy of this LocalDateTime with the specified number of years subtracted.\n \n This method subtracts the specified amount from the years field in three steps:\n \nSubtract the input years from the year field\nCheck if the resulting date would be invalid\nAdjust the day-of-month to the last valid day if necessary\n\n\n For example, 2008-02-29 (leap year) minus one year would result in the\n invalid date 2007-02-29 (standard year). Instead of returning an invalid\n result, the last valid day of the month, 2007-02-28, is selected instead.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "minusMonths", "method_sig": "public LocalDateTime minusMonths (long months)", "description": "Returns a copy of this LocalDateTime with the specified number of months subtracted.\n \n This method subtracts the specified amount from the months field in three steps:\n \nSubtract the input months from the month-of-year field\nCheck if the resulting date would be invalid\nAdjust the day-of-month to the last valid day if necessary\n\n\n For example, 2007-03-31 minus one month would result in the invalid date\n 2007-02-31. Instead of returning an invalid result, the last valid day\n of the month, 2007-02-28, is selected instead.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "minusWeeks", "method_sig": "public LocalDateTime minusWeeks (long weeks)", "description": "Returns a copy of this LocalDateTime with the specified number of weeks subtracted.\n \n This method subtracts the specified amount in weeks from the days field decrementing\n the month and year fields as necessary to ensure the result remains valid.\n The result is only invalid if the maximum/minimum year is exceeded.\n \n For example, 2009-01-07 minus one week would result in 2008-12-31.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "minusDays", "method_sig": "public LocalDateTime minusDays (long days)", "description": "Returns a copy of this LocalDateTime with the specified number of days subtracted.\n \n This method subtracts the specified amount from the days field decrementing the\n month and year fields as necessary to ensure the result remains valid.\n The result is only invalid if the maximum/minimum year is exceeded.\n \n For example, 2009-01-01 minus one day would result in 2008-12-31.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "minusHours", "method_sig": "public LocalDateTime minusHours (long hours)", "description": "Returns a copy of this LocalDateTime with the specified number of hours subtracted.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "minusMinutes", "method_sig": "public LocalDateTime minusMinutes (long minutes)", "description": "Returns a copy of this LocalDateTime with the specified number of minutes subtracted.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "minusSeconds", "method_sig": "public LocalDateTime minusSeconds (long seconds)", "description": "Returns a copy of this LocalDateTime with the specified number of seconds subtracted.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "minusNanos", "method_sig": "public LocalDateTime minusNanos (long nanos)", "description": "Returns a copy of this LocalDateTime with the specified number of nanoseconds subtracted.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "query", "method_sig": "public <R> R query (TemporalQuery<R> query)", "description": "Queries this date-time using the specified query.\n \n This queries this date-time using the specified query strategy object.\n The TemporalQuery object defines the logic to be used to\n obtain the result. Read the documentation of the query to understand\n what the result of this method will be.\n \n The result of this method is obtained by invoking the\n TemporalQuery.queryFrom(TemporalAccessor) method on the\n specified query passing this as the argument."}, {"method_name": "adjustInto", "method_sig": "public Temporal adjustInto (Temporal temporal)", "description": "Adjusts the specified temporal object to have the same date and time as this object.\n \n This returns a temporal object of the same observable type as the input\n with the date and time changed to be the same as this.\n \n The adjustment is equivalent to using Temporal.with(TemporalField, long)\n twice, passing ChronoField.EPOCH_DAY and\n ChronoField.NANO_OF_DAY as the fields.\n \n In most cases, it is clearer to reverse the calling pattern by using\n Temporal.with(TemporalAdjuster):\n \n   // these two lines are equivalent, but the second approach is recommended\n   temporal = thisLocalDateTime.adjustInto(temporal);\n   temporal = temporal.with(thisLocalDateTime);\n \n\n This instance is immutable and unaffected by this method call."}, {"method_name": "until", "method_sig": "public long until (Temporal endExclusive,\n                  TemporalUnit unit)", "description": "Calculates the amount of time until another date-time in terms of the specified unit.\n \n This calculates the amount of time between two LocalDateTime\n objects in terms of a single TemporalUnit.\n The start and end points are this and the specified date-time.\n The result will be negative if the end is before the start.\n The Temporal passed to this method is converted to a\n LocalDateTime using from(TemporalAccessor).\n For example, the amount in days between two date-times can be calculated\n using startDateTime.until(endDateTime, DAYS).\n \n The calculation returns a whole number, representing the number of\n complete units between the two date-times.\n For example, the amount in months between 2012-06-15T00:00 and 2012-08-14T23:59\n will only be one month as it is one minute short of two months.\n \n There are two equivalent ways of using this method.\n The first is to invoke this method.\n The second is to use TemporalUnit.between(Temporal, Temporal):\n \n   // these two lines are equivalent\n   amount = start.until(end, MONTHS);\n   amount = MONTHS.between(start, end);\n \n The choice should be made based on which makes the code more readable.\n \n The calculation is implemented in this method for ChronoUnit.\n The units NANOS, MICROS, MILLIS, SECONDS,\n MINUTES, HOURS and HALF_DAYS, DAYS,\n WEEKS, MONTHS, YEARS, DECADES,\n CENTURIES, MILLENNIA and ERAS are supported.\n Other ChronoUnit values will throw an exception.\n \n If the unit is not a ChronoUnit, then the result of this method\n is obtained by invoking TemporalUnit.between(Temporal, Temporal)\n passing this as the first argument and the converted input temporal\n as the second argument.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "format", "method_sig": "public String format (DateTimeFormatter formatter)", "description": "Formats this date-time using the specified formatter.\n \n This date-time will be passed to the formatter to produce a string."}, {"method_name": "atOffset", "method_sig": "public OffsetDateTime atOffset (ZoneOffset offset)", "description": "Combines this date-time with an offset to create an OffsetDateTime.\n \n This returns an OffsetDateTime formed from this date-time at the specified offset.\n All possible combinations of date-time and offset are valid."}, {"method_name": "atZone", "method_sig": "public ZonedDateTime atZone (ZoneId zone)", "description": "Combines this date-time with a time-zone to create a ZonedDateTime.\n \n This returns a ZonedDateTime formed from this date-time at the\n specified time-zone. The result will match this date-time as closely as possible.\n Time-zone rules, such as daylight savings, mean that not every local date-time\n is valid for the specified zone, thus the local date-time may be adjusted.\n \n The local date-time is resolved to a single instant on the time-line.\n This is achieved by finding a valid offset from UTC/Greenwich for the local\n date-time as defined by the rules of the zone ID.\n\n In most cases, there is only one valid offset for a local date-time.\n In the case of an overlap, where clocks are set back, there are two valid offsets.\n This method uses the earlier offset typically corresponding to \"summer\".\n \n In the case of a gap, where clocks jump forward, there is no valid offset.\n Instead, the local date-time is adjusted to be later by the length of the gap.\n For a typical one hour daylight savings change, the local date-time will be\n moved one hour later into the offset typically corresponding to \"summer\".\n \n To obtain the later offset during an overlap, call\n ZonedDateTime.withLaterOffsetAtOverlap() on the result of this method.\n To throw an exception when there is a gap or overlap, use\n ZonedDateTime.ofStrict(LocalDateTime, ZoneOffset, ZoneId)."}, {"method_name": "compareTo", "method_sig": "public int compareTo (ChronoLocalDateTime<?> other)", "description": "Compares this date-time to another date-time.\n \n The comparison is primarily based on the date-time, from earliest to latest.\n It is \"consistent with equals\", as defined by Comparable.\n \n If all the date-times being compared are instances of LocalDateTime,\n then the comparison will be entirely based on the date-time.\n If some dates being compared are in different chronologies, then the\n chronology is also considered, see ChronoLocalDateTime.compareTo(java.time.chrono.ChronoLocalDateTime<?>)."}, {"method_name": "isAfter", "method_sig": "public boolean isAfter (ChronoLocalDateTime<?> other)", "description": "Checks if this date-time is after the specified date-time.\n \n This checks to see if this date-time represents a point on the\n local time-line after the other date-time.\n \n   LocalDate a = LocalDateTime.of(2012, 6, 30, 12, 00);\n   LocalDate b = LocalDateTime.of(2012, 7, 1, 12, 00);\n   a.isAfter(b) == false\n   a.isAfter(a) == false\n   b.isAfter(a) == true\n \n\n This method only considers the position of the two date-times on the local time-line.\n It does not take into account the chronology, or calendar system.\n This is different from the comparison in compareTo(ChronoLocalDateTime),\n but is the same approach as ChronoLocalDateTime.timeLineOrder()."}, {"method_name": "isBefore", "method_sig": "public boolean isBefore (ChronoLocalDateTime<?> other)", "description": "Checks if this date-time is before the specified date-time.\n \n This checks to see if this date-time represents a point on the\n local time-line before the other date-time.\n \n   LocalDate a = LocalDateTime.of(2012, 6, 30, 12, 00);\n   LocalDate b = LocalDateTime.of(2012, 7, 1, 12, 00);\n   a.isBefore(b) == true\n   a.isBefore(a) == false\n   b.isBefore(a) == false\n \n\n This method only considers the position of the two date-times on the local time-line.\n It does not take into account the chronology, or calendar system.\n This is different from the comparison in compareTo(ChronoLocalDateTime),\n but is the same approach as ChronoLocalDateTime.timeLineOrder()."}, {"method_name": "isEqual", "method_sig": "public boolean isEqual (ChronoLocalDateTime<?> other)", "description": "Checks if this date-time is equal to the specified date-time.\n \n This checks to see if this date-time represents the same point on the\n local time-line as the other date-time.\n \n   LocalDate a = LocalDateTime.of(2012, 6, 30, 12, 00);\n   LocalDate b = LocalDateTime.of(2012, 7, 1, 12, 00);\n   a.isEqual(b) == false\n   a.isEqual(a) == true\n   b.isEqual(a) == false\n \n\n This method only considers the position of the two date-times on the local time-line.\n It does not take into account the chronology, or calendar system.\n This is different from the comparison in compareTo(ChronoLocalDateTime),\n but is the same approach as ChronoLocalDateTime.timeLineOrder()."}, {"method_name": "equals", "method_sig": "public boolean equals (Object obj)", "description": "Checks if this date-time is equal to another date-time.\n \n Compares this LocalDateTime with another ensuring that the date-time is the same.\n Only objects of type LocalDateTime are compared, other types return false."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "A hash code for this date-time."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Outputs this date-time as a String, such as 2007-12-03T10:15:30.\n \n The output will be one of the following ISO-8601 formats:\n \nuuuu-MM-dd'T'HH:mm\nuuuu-MM-dd'T'HH:mm:ss\nuuuu-MM-dd'T'HH:mm:ss.SSS\nuuuu-MM-dd'T'HH:mm:ss.SSSSSS\nuuuu-MM-dd'T'HH:mm:ss.SSSSSSSSS\n\n The format used will be the shortest that outputs the full value of\n the time where the omitted parts are implied to be zero."}]}