{"name": "Interface Key", "module": "java.base", "package": "java.security", "text": "The Key interface is the top-level interface for all keys. It\n defines the functionality shared by all key objects. All keys\n have three characteristics:\n\n \nAn Algorithm\n\n This is the key algorithm for that key. The key algorithm is usually\n an encryption or asymmetric operation algorithm (such as DSA or\n RSA), which will work with those algorithms and with related\n algorithms (such as MD5 with RSA, SHA-1 with RSA, Raw DSA, etc.)\n The name of the algorithm of a key is obtained using the\n getAlgorithm method.\n\n An Encoded Form\n\n This is an external encoded form for the key used when a standard\n representation of the key is needed outside the Java Virtual Machine,\n as when transmitting the key to some other party. The key\n is encoded according to a standard format (such as\n X.509 SubjectPublicKeyInfo or PKCS#8), and\n is returned using the getEncoded method.\n Note: The syntax of the ASN.1 type SubjectPublicKeyInfo\n is defined as follows:\n\n \n SubjectPublicKeyInfo ::= SEQUENCE {\n   algorithm AlgorithmIdentifier,\n   subjectPublicKey BIT STRING }\n\n AlgorithmIdentifier ::= SEQUENCE {\n   algorithm OBJECT IDENTIFIER,\n   parameters ANY DEFINED BY algorithm OPTIONAL }\n \n\n For more information, see\n RFC 5280:\n Internet X.509 Public Key Infrastructure Certificate and CRL Profile.\n\n A Format\n\n This is the name of the format of the encoded key. It is returned\n by the getFormat method.\n\n \n\n Keys are generally obtained through key generators, certificates,\n or various Identity classes used to manage keys.\n Keys may also be obtained from key specifications (transparent\n representations of the underlying key material) through the use of a key\n factory (see KeyFactory).\n\n  A Key should use KeyRep as its serialized representation.\n Note that a serialized Key may contain sensitive information\n which should not be exposed in untrusted environments.  See the\n \n Security Appendix\n of the Serialization Specification for more information.", "codes": ["public interface Key\nextends Serializable"], "fields": [{"field_name": "serialVersionUID", "field_sig": "static final\u00a0long serialVersionUID", "description": "The class fingerprint that is set to indicate\n serialization compatibility with a previous\n version of the class."}], "methods": [{"method_name": "getAlgorithm", "method_sig": "String getAlgorithm()", "description": "Returns the standard algorithm name for this key. For\n example, \"DSA\" would indicate that this key is a DSA key.\n See the \n Java Security Standard Algorithm Names document\n for more information."}, {"method_name": "getFormat", "method_sig": "String getFormat()", "description": "Returns the name of the primary encoding format of this key,\n or null if this key does not support encoding.\n The primary encoding format is\n named in terms of the appropriate ASN.1 data format, if an\n ASN.1 specification for this key exists.\n For example, the name of the ASN.1 data format for public\n keys is SubjectPublicKeyInfo, as\n defined by the X.509 standard; in this case, the returned format is\n \"X.509\". Similarly,\n the name of the ASN.1 data format for private keys is\n PrivateKeyInfo,\n as defined by the PKCS #8 standard; in this case, the returned format is\n \"PKCS#8\"."}, {"method_name": "getEncoded", "method_sig": "byte[] getEncoded()", "description": "Returns the key in its primary encoding format, or null\n if this key does not support encoding."}]}