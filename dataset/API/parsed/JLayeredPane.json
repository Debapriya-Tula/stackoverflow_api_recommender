{"name": "Class JLayeredPane", "module": "java.desktop", "package": "javax.swing", "text": "JLayeredPane adds depth to a JFC/Swing container,\n allowing components to overlap each other when needed.\n An Integer object specifies each component's depth in the\n container, where higher-numbered components sit \"on top\" of other\n components.\n For task-oriented documentation and examples of using layered panes see\n How to Use a Layered Pane,\n a section in The Java Tutorial.\n\n \nExample\n\n\n\n\n\n\n For convenience, JLayeredPane divides the depth-range\n into several different layers. Putting a component into one of those\n layers makes it easy to ensure that components overlap properly,\n without having to worry about specifying numbers for specific depths:\n \nDEFAULT_LAYER\nThe standard layer, where most components go. This the bottommost\n         layer.\n    PALETTE_LAYER\nThe palette layer sits over the default layer. Useful for floating\n         toolbars and palettes, so they can be positioned above other components.\n    MODAL_LAYER\nThe layer used for modal dialogs. They will appear on top of any\n         toolbars, palettes, or standard components in the container.\n    POPUP_LAYER\nThe popup layer displays above dialogs. That way, the popup windows\n         associated with combo boxes, tooltips, and other help text will appear\n         above the component, palette, or dialog that generated them.\n    DRAG_LAYER\nWhen dragging a component, reassigning it to the drag layer ensures\n         that it is positioned over every other component in the container. When\n         finished dragging, it can be reassigned to its normal layer.\n \n The JLayeredPane methods moveToFront(Component),\n moveToBack(Component) and setPosition can be used\n to reposition a component within its layer. The setLayer method\n can also be used to change the component's current layer.\n\n Details\nJLayeredPane manages its list of children like\n Container, but allows for the definition of a several\n layers within itself. Children in the same layer are managed exactly\n like the normal Container object,\n with the added feature that when children components overlap, children\n in higher layers display above the children in lower layers.\n \n Each layer is a distinct integer number. The layer attribute can be set\n on a Component by passing an Integer\n object during the add call. For example:\n \n     layeredPane.add(child, JLayeredPane.DEFAULT_LAYER);\n or\n     layeredPane.add(child, Integer.valueOf.valueOf(10));\n \n The layer attribute can also be set on a Component by calling\n     layeredPaneParent.setLayer(child, 10)\n on the JLayeredPane that is the parent of component. The layer\n should be set before adding the child to the parent.\n \n Higher number layers display above lower number layers. So, using\n numbers for the layers and letters for individual components, a\n representative list order would look like this:\n       5a, 5b, 5c, 2a, 2b, 2c, 1a \n where the leftmost components are closest to the top of the display.\n \n A component can be moved to the top or bottom position within its\n layer by calling moveToFront or moveToBack.\n \n The position of a component within a layer can also be specified directly.\n Valid positions range from 0 up to one less than the number of\n components in that layer. A value of -1 indicates the bottommost\n position. A value of 0 indicates the topmost position. Unlike layer\n numbers, higher position values are lower in the display.\n \nNote: This sequence (defined by java.awt.Container) is the reverse\n of the layer numbering sequence. Usually though, you will use moveToFront,\n moveToBack, and setLayer.\n \n Here are some examples using the method add(Component, layer, position):\n Calling add(5x, 5, -1) results in:\n       5a, 5b, 5c, 5x, 2a, 2b, 2c, 1a \n\n Calling add(5z, 5, 2) results in:\n       5a, 5b, 5z, 5c, 5x, 2a, 2b, 2c, 1a \n\n Calling add(3a, 3, 7) results in:\n       5a, 5b, 5z, 5c, 5x, 3a, 2a, 2b, 2c, 1a \n\n Using normal paint/event mechanics results in 1a appearing at the bottom\n and 5a being above all other components.\n \nNote: that these layers are simply a logical construct and LayoutManagers\n will affect all child components of this container without regard for\n layer settings.\n \nWarning: Swing is not thread safe. For more\n information see Swing's Threading\n Policy.\n \nWarning:\n Serialized objects of this class will not be compatible with\n future Swing releases. The current serialization support is\n appropriate for short term storage or RMI between applications running\n the same version of Swing.  As of 1.4, support for long term storage\n of all JavaBeans\u2122\n has been added to the java.beans package.\n Please see XMLEncoder.", "codes": ["@JavaBean(defaultProperty=\"accessibleContext\")\npublic class JLayeredPane\nextends JComponent\nimplements Accessible"], "fields": [{"field_name": "DEFAULT_LAYER", "field_sig": "public static final\u00a0Integer DEFAULT_LAYER", "description": "Convenience object defining the Default layer. Equivalent to Integer.valueOf(0)."}, {"field_name": "PALETTE_LAYER", "field_sig": "public static final\u00a0Integer PALETTE_LAYER", "description": "Convenience object defining the Palette layer. Equivalent to Integer.valueOf(100)."}, {"field_name": "MODAL_LAYER", "field_sig": "public static final\u00a0Integer MODAL_LAYER", "description": "Convenience object defining the Modal layer. Equivalent to Integer.valueOf(200)."}, {"field_name": "POPUP_LAYER", "field_sig": "public static final\u00a0Integer POPUP_LAYER", "description": "Convenience object defining the Popup layer. Equivalent to Integer.valueOf(300)."}, {"field_name": "DRAG_LAYER", "field_sig": "public static final\u00a0Integer DRAG_LAYER", "description": "Convenience object defining the Drag layer. Equivalent to Integer.valueOf(400)."}, {"field_name": "FRAME_CONTENT_LAYER", "field_sig": "public static final\u00a0Integer FRAME_CONTENT_LAYER", "description": "Convenience object defining the Frame Content layer.\n This layer is normally only use to position the contentPane and menuBar\n components of JFrame.\n Equivalent to Integer.valueOf(-30000)."}, {"field_name": "LAYER_PROPERTY", "field_sig": "public static final\u00a0String LAYER_PROPERTY", "description": "Bound property"}], "methods": [{"method_name": "remove", "method_sig": "public void remove (int index)", "description": "Remove the indexed component from this pane.\n This is the absolute index, ignoring layers."}, {"method_name": "removeAll", "method_sig": "public void removeAll()", "description": "Removes all the components from this container."}, {"method_name": "isOptimizedDrawingEnabled", "method_sig": "@BeanProperty(bound=false)\npublic boolean isOptimizedDrawingEnabled()", "description": "Returns false if components in the pane can overlap, which makes\n optimized drawing impossible. Otherwise, returns true."}, {"method_name": "putLayer", "method_sig": "public static void putLayer (JComponent c,\n                            int layer)", "description": "Sets the layer property on a JComponent. This method does not cause\n any side effects like setLayer() (painting, add/remove, etc).\n Normally you should use the instance method setLayer(), in order to\n get the desired side-effects (like repainting)."}, {"method_name": "getLayer", "method_sig": "public static int getLayer (JComponent c)", "description": "Gets the layer property for a JComponent, it\n does not cause any side effects like setLayer(). (painting, add/remove, etc)\n Normally you should use the instance method getLayer()."}, {"method_name": "getLayeredPaneAbove", "method_sig": "public static JLayeredPane getLayeredPaneAbove (Component c)", "description": "Convenience method that returns the first JLayeredPane which\n contains the specified component. Note that all JFrames have a\n JLayeredPane at their root, so any component in a JFrame will\n have a JLayeredPane parent."}, {"method_name": "setLayer", "method_sig": "public void setLayer (Component c,\n                     int layer)", "description": "Sets the layer attribute on the specified component,\n making it the bottommost component in that layer.\n Should be called before adding to parent."}, {"method_name": "setLayer", "method_sig": "public void setLayer (Component c,\n                     int layer,\n                     int position)", "description": "Sets the layer attribute for the specified component and\n also sets its position within that layer."}, {"method_name": "getLayer", "method_sig": "public int getLayer (Component c)", "description": "Returns the layer attribute for the specified Component."}, {"method_name": "getIndexOf", "method_sig": "public int getIndexOf (Component c)", "description": "Returns the index of the specified Component.\n This is the absolute index, ignoring layers.\n Index numbers, like position numbers, have the topmost component\n at index zero. Larger numbers are closer to the bottom."}, {"method_name": "moveToFront", "method_sig": "public void moveToFront (Component c)", "description": "Moves the component to the top of the components in its current layer\n (position 0)."}, {"method_name": "moveToBack", "method_sig": "public void moveToBack (Component c)", "description": "Moves the component to the bottom of the components in its current layer\n (position -1)."}, {"method_name": "setPosition", "method_sig": "public void setPosition (Component c,\n                        int position)", "description": "Moves the component to position within its current layer,\n where 0 is the topmost position within the layer and -1 is the bottommost\n position.\n \nNote: Position numbering is defined by java.awt.Container, and\n is the opposite of layer numbering. Lower position numbers are closer\n to the top (0 is topmost), and higher position numbers are closer to\n the bottom."}, {"method_name": "getPosition", "method_sig": "public int getPosition (Component c)", "description": "Get the relative position of the component within its layer."}, {"method_name": "highestLayer", "method_sig": "public int highestLayer()", "description": "Returns the highest layer value from all current children.\n Returns 0 if there are no children."}, {"method_name": "lowestLayer", "method_sig": "public int lowestLayer()", "description": "Returns the lowest layer value from all current children.\n Returns 0 if there are no children."}, {"method_name": "getComponentCountInLayer", "method_sig": "public int getComponentCountInLayer (int layer)", "description": "Returns the number of children currently in the specified layer."}, {"method_name": "getComponentsInLayer", "method_sig": "public Component[] getComponentsInLayer (int layer)", "description": "Returns an array of the components in the specified layer."}, {"method_name": "paint", "method_sig": "public void paint (Graphics g)", "description": "Paints this JLayeredPane within the specified graphics context."}, {"method_name": "getComponentToLayer", "method_sig": "protected Hashtable<Component, Integer> getComponentToLayer()", "description": "Returns the hashtable that maps components to layers."}, {"method_name": "getObjectForLayer", "method_sig": "protected Integer getObjectForLayer (int layer)", "description": "Returns the Integer object associated with a specified layer."}, {"method_name": "insertIndexForLayer", "method_sig": "protected int insertIndexForLayer (int layer,\n                                  int position)", "description": "Primitive method that determines the proper location to\n insert a new child based on layer and position requests."}, {"method_name": "paramString", "method_sig": "protected String paramString()", "description": "Returns a string representation of this JLayeredPane. This method\n is intended to be used only for debugging purposes, and the\n content and format of the returned string may vary between\n implementations. The returned string may be empty but may not\n be null."}, {"method_name": "getAccessibleContext", "method_sig": "@BeanProperty(bound=false)\npublic AccessibleContext getAccessibleContext()", "description": "Gets the AccessibleContext associated with this JLayeredPane.\n For layered panes, the AccessibleContext takes the form of an\n AccessibleJLayeredPane.\n A new AccessibleJLayeredPane instance is created if necessary."}]}