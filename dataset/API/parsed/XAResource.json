{"name": "Interface XAResource", "module": "java.transaction.xa", "package": "javax.transaction.xa", "text": "The XAResource interface is a Java mapping of the industry standard\n XA interface based on the X/Open CAE Specification (Distributed\n Transaction Processing: The XA Specification).\n\n The XA interface defines the contract between a Resource Manager\n and a Transaction Manager in a distributed transaction processing\n (DTP) environment. A JDBC driver or a JMS provider implements\n this interface to support the association between a global transaction\n and a database or message service connection.\n\n The XAResource interface can be supported by any transactional\n resource that is intended to be used by application programs in an\n environment where transactions are controlled by an external\n transaction manager. An example of such a resource is a database\n management system. An application may access data through multiple\n database connections. Each database connection is enlisted with\n the transaction manager as a transactional resource. The transaction\n manager obtains an XAResource for each connection participating\n in a global transaction. The transaction manager uses the\n start method\n to associate the global transaction with the resource, and it uses the\n end method to disassociate the transaction from\n the resource. The resource\n manager is responsible for associating the global transaction to all\n work performed on its data between the start and end method invocations.\n\n At transaction commit time, the resource managers are informed by\n the transaction manager to prepare, commit, or rollback a transaction\n according to the two-phase commit protocol.", "codes": ["public interface XAResource"], "fields": [{"field_name": "TMENDRSCAN", "field_sig": "static final\u00a0int TMENDRSCAN", "description": "Ends a recovery scan."}, {"field_name": "TMFAIL", "field_sig": "static final\u00a0int TMFAIL", "description": "Disassociates the caller and marks the transaction branch\n rollback-only."}, {"field_name": "TMJOIN", "field_sig": "static final\u00a0int TMJOIN", "description": "Caller is joining existing transaction branch."}, {"field_name": "TMNOFLAGS", "field_sig": "static final\u00a0int TMNOFLAGS", "description": "Use TMNOFLAGS to indicate no flags value is selected."}, {"field_name": "TMONEPHASE", "field_sig": "static final\u00a0int TMONEPHASE", "description": "Caller is using one-phase optimization."}, {"field_name": "TMRESUME", "field_sig": "static final\u00a0int TMRESUME", "description": "Caller is resuming association with a suspended\n transaction branch."}, {"field_name": "TMSTARTRSCAN", "field_sig": "static final\u00a0int TMSTARTRSCAN", "description": "Starts a recovery scan."}, {"field_name": "TMSUCCESS", "field_sig": "static final\u00a0int TMSUCCESS", "description": "Disassociates caller from a transaction branch."}, {"field_name": "TMSUSPEND", "field_sig": "static final\u00a0int TMSUSPEND", "description": "Caller is suspending (not ending) its association with\n a transaction branch."}, {"field_name": "XA_RDONLY", "field_sig": "static final\u00a0int XA_RDONLY", "description": "The transaction branch has been read-only and has been committed."}, {"field_name": "XA_OK", "field_sig": "static final\u00a0int XA_OK", "description": "The transaction work has been prepared normally."}], "methods": [{"method_name": "commit", "method_sig": "void commit (Xid xid,\n            boolean onePhase)\n     throws XAException", "description": "Commits the global transaction specified by xid."}, {"method_name": "end", "method_sig": "void end (Xid xid,\n         int flags)\n  throws XAException", "description": "Ends the work performed on behalf of a transaction branch.\n The resource manager disassociates the XA resource from the\n transaction branch specified and lets the transaction\n complete.\n\n If TMSUSPEND is specified in the flags, the transaction branch\n is temporarily suspended in an incomplete state. The transaction\n context is in a suspended state and must be resumed via the\n start method with TMRESUME specified.\nIf TMFAIL is specified, the portion of work has failed.\n The resource manager may mark the transaction as rollback-only\nIf TMSUCCESS is specified, the portion of work has completed\n successfully."}, {"method_name": "forget", "method_sig": "void forget (Xid xid)\n     throws XAException", "description": "Tells the resource manager to forget about a heuristically\n completed transaction branch."}, {"method_name": "getTransactionTimeout", "method_sig": "int getTransactionTimeout()\n                   throws XAException", "description": "Obtains the current transaction timeout value set for this\n XAResource instance. If XAResource.setTransactionTimeout\n was not used prior to invoking this method, the return value\n is the default timeout set for the resource manager; otherwise,\n the value used in the previous setTransactionTimeout\n call is returned."}, {"method_name": "isSameRM", "method_sig": "boolean isSameRM (XAResource xares)\n          throws XAException", "description": "This method is called to determine if the resource manager\n instance represented by the target object is the same as the\n resouce manager instance represented by the parameter xares."}, {"method_name": "prepare", "method_sig": "int prepare (Xid xid)\n     throws XAException", "description": "Ask the resource manager to prepare for a transaction commit\n of the transaction specified in xid."}, {"method_name": "recover", "method_sig": "Xid[] recover (int flag)\n       throws XAException", "description": "Obtains a list of prepared transaction branches from a resource\n manager. The transaction manager calls this method during recovery\n to obtain the list of transaction branches that are currently in\n prepared or heuristically completed states."}, {"method_name": "rollback", "method_sig": "void rollback (Xid xid)\n       throws XAException", "description": "Informs the resource manager to roll back work done on behalf\n of a transaction branch."}, {"method_name": "setTransactionTimeout", "method_sig": "boolean setTransactionTimeout (int seconds)\n                       throws XAException", "description": "Sets the current transaction timeout value for this XAResource\n instance. Once set, this timeout value is effective until\n setTransactionTimeout is invoked again with a different\n value. To reset the timeout value to the default value used by the resource\n manager, set the value to zero.\n\n If the timeout operation is performed successfully, the method returns\n true; otherwise false. If a resource manager does not\n support explicitly setting the transaction timeout value, this method\n returns false."}, {"method_name": "start", "method_sig": "void start (Xid xid,\n           int flags)\n    throws XAException", "description": "Starts work on behalf of a transaction branch specified in\n xid.\n\n If TMJOIN is specified, the start applies to joining a transaction\n previously seen by the resource manager. If TMRESUME is specified,\n the start applies to resuming a suspended transaction specified in the\n parameter xid.\n\n If neither TMJOIN nor TMRESUME is specified and the transaction\n specified by xid has previously been seen by the resource\n manager, the resource manager throws the XAException exception with\n XAER_DUPID error code."}]}