{"name": "Class OffsetTime", "module": "java.base", "package": "java.time", "text": "A time with an offset from UTC/Greenwich in the ISO-8601 calendar system,\n such as 10:15:30+01:00.\n \nOffsetTime is an immutable date-time object that represents a time, often\n viewed as hour-minute-second-offset.\n This class stores all time fields, to a precision of nanoseconds,\n as well as a zone offset.\n For example, the value \"13:45:30.123456789+02:00\" can be stored\n in an OffsetTime.\n\n \n This is a value-based\n class; use of identity-sensitive operations (including reference equality\n (==), identity hash code, or synchronization) on instances of\n OffsetTime may have unpredictable results and should be avoided.\n The equals method should be used for comparisons.", "codes": ["public final class OffsetTime\nextends Object\nimplements Temporal, TemporalAdjuster, Comparable<OffsetTime>, Serializable"], "fields": [{"field_name": "MIN", "field_sig": "public static final\u00a0OffsetTime MIN", "description": "The minimum supported OffsetTime, '00:00:00+18:00'.\n This is the time of midnight at the start of the day in the maximum offset\n (larger offsets are earlier on the time-line).\n This combines LocalTime.MIN and ZoneOffset.MAX.\n This could be used by an application as a \"far past\" date."}, {"field_name": "MAX", "field_sig": "public static final\u00a0OffsetTime MAX", "description": "The maximum supported OffsetTime, '23:59:59.999999999-18:00'.\n This is the time just before midnight at the end of the day in the minimum offset\n (larger negative offsets are later on the time-line).\n This combines LocalTime.MAX and ZoneOffset.MIN.\n This could be used by an application as a \"far future\" date."}], "methods": [{"method_name": "now", "method_sig": "public static OffsetTime now()", "description": "Obtains the current time from the system clock in the default time-zone.\n \n This will query the system clock in the default\n time-zone to obtain the current time.\n The offset will be calculated from the time-zone in the clock.\n \n Using this method will prevent the ability to use an alternate clock for testing\n because the clock is hard-coded."}, {"method_name": "now", "method_sig": "public static OffsetTime now (ZoneId zone)", "description": "Obtains the current time from the system clock in the specified time-zone.\n \n This will query the system clock to obtain the current time.\n Specifying the time-zone avoids dependence on the default time-zone.\n The offset will be calculated from the specified time-zone.\n \n Using this method will prevent the ability to use an alternate clock for testing\n because the clock is hard-coded."}, {"method_name": "now", "method_sig": "public static OffsetTime now (Clock clock)", "description": "Obtains the current time from the specified clock.\n \n This will query the specified clock to obtain the current time.\n The offset will be calculated from the time-zone in the clock.\n \n Using this method allows the use of an alternate clock for testing.\n The alternate clock may be introduced using dependency injection."}, {"method_name": "of", "method_sig": "public static OffsetTime of (LocalTime time,\n                            ZoneOffset offset)", "description": "Obtains an instance of OffsetTime from a local time and an offset."}, {"method_name": "of", "method_sig": "public static OffsetTime of (int hour,\n                            int minute,\n                            int second,\n                            int nanoOfSecond,\n                            ZoneOffset offset)", "description": "Obtains an instance of OffsetTime from an hour, minute, second and nanosecond.\n \n This creates an offset time with the four specified fields.\n \n This method exists primarily for writing test cases.\n Non test-code will typically use other methods to create an offset time.\n LocalTime has two additional convenience variants of the\n equivalent factory method taking fewer arguments.\n They are not provided here to reduce the footprint of the API."}, {"method_name": "ofInstant", "method_sig": "public static OffsetTime ofInstant (Instant instant,\n                                   ZoneId zone)", "description": "Obtains an instance of OffsetTime from an Instant and zone ID.\n \n This creates an offset time with the same instant as that specified.\n Finding the offset from UTC/Greenwich is simple as there is only one valid\n offset for each instant.\n \n The date component of the instant is dropped during the conversion.\n This means that the conversion can never fail due to the instant being\n out of the valid range of dates."}, {"method_name": "from", "method_sig": "public static OffsetTime from (TemporalAccessor temporal)", "description": "Obtains an instance of OffsetTime from a temporal object.\n \n This obtains an offset time based on the specified temporal.\n A TemporalAccessor represents an arbitrary set of date and time information,\n which this factory converts to an instance of OffsetTime.\n \n The conversion extracts and combines the ZoneOffset and the\n LocalTime from the temporal object.\n Implementations are permitted to perform optimizations such as accessing\n those fields that are equivalent to the relevant objects.\n \n This method matches the signature of the functional interface TemporalQuery\n allowing it to be used as a query via method reference, OffsetTime::from."}, {"method_name": "parse", "method_sig": "public static OffsetTime parse (CharSequence text)", "description": "Obtains an instance of OffsetTime from a text string such as 10:15:30+01:00.\n \n The string must represent a valid time and is parsed using\n DateTimeFormatter.ISO_OFFSET_TIME."}, {"method_name": "parse", "method_sig": "public static OffsetTime parse (CharSequence text,\n                               DateTimeFormatter formatter)", "description": "Obtains an instance of OffsetTime from a text string using a specific formatter.\n \n The text is parsed using the formatter, returning a time."}, {"method_name": "isSupported", "method_sig": "public boolean isSupported (TemporalField field)", "description": "Checks if the specified field is supported.\n \n This checks if this time can be queried for the specified field.\n If false, then calling the range,\n get and with(TemporalField, long)\n methods will throw an exception.\n \n If the field is a ChronoField then the query is implemented here.\n The supported fields are:\n \nNANO_OF_SECOND\nNANO_OF_DAY\nMICRO_OF_SECOND\nMICRO_OF_DAY\nMILLI_OF_SECOND\nMILLI_OF_DAY\nSECOND_OF_MINUTE\nSECOND_OF_DAY\nMINUTE_OF_HOUR\nMINUTE_OF_DAY\nHOUR_OF_AMPM\nCLOCK_HOUR_OF_AMPM\nHOUR_OF_DAY\nCLOCK_HOUR_OF_DAY\nAMPM_OF_DAY\nOFFSET_SECONDS\n\n All other ChronoField instances will return false.\n \n If the field is not a ChronoField, then the result of this method\n is obtained by invoking TemporalField.isSupportedBy(TemporalAccessor)\n passing this as the argument.\n Whether the field is supported is determined by the field."}, {"method_name": "isSupported", "method_sig": "public boolean isSupported (TemporalUnit unit)", "description": "Checks if the specified unit is supported.\n \n This checks if the specified unit can be added to, or subtracted from, this offset-time.\n If false, then calling the plus(long, TemporalUnit) and\n minus methods will throw an exception.\n \n If the unit is a ChronoUnit then the query is implemented here.\n The supported units are:\n \nNANOS\nMICROS\nMILLIS\nSECONDS\nMINUTES\nHOURS\nHALF_DAYS\n\n All other ChronoUnit instances will return false.\n \n If the unit is not a ChronoUnit, then the result of this method\n is obtained by invoking TemporalUnit.isSupportedBy(Temporal)\n passing this as the argument.\n Whether the unit is supported is determined by the unit."}, {"method_name": "range", "method_sig": "public ValueRange range (TemporalField field)", "description": "Gets the range of valid values for the specified field.\n \n The range object expresses the minimum and maximum valid values for a field.\n This time is used to enhance the accuracy of the returned range.\n If it is not possible to return the range, because the field is not supported\n or for some other reason, an exception is thrown.\n \n If the field is a ChronoField then the query is implemented here.\n The supported fields will return\n appropriate range instances.\n All other ChronoField instances will throw an UnsupportedTemporalTypeException.\n \n If the field is not a ChronoField, then the result of this method\n is obtained by invoking TemporalField.rangeRefinedBy(TemporalAccessor)\n passing this as the argument.\n Whether the range can be obtained is determined by the field."}, {"method_name": "get", "method_sig": "public int get (TemporalField field)", "description": "Gets the value of the specified field from this time as an int.\n \n This queries this time for the value of the specified field.\n The returned value will always be within the valid range of values for the field.\n If it is not possible to return the value, because the field is not supported\n or for some other reason, an exception is thrown.\n \n If the field is a ChronoField then the query is implemented here.\n The supported fields will return valid\n values based on this time, except NANO_OF_DAY and MICRO_OF_DAY\n which are too large to fit in an int and throw an UnsupportedTemporalTypeException.\n All other ChronoField instances will throw an UnsupportedTemporalTypeException.\n \n If the field is not a ChronoField, then the result of this method\n is obtained by invoking TemporalField.getFrom(TemporalAccessor)\n passing this as the argument. Whether the value can be obtained,\n and what the value represents, is determined by the field."}, {"method_name": "getLong", "method_sig": "public long getLong (TemporalField field)", "description": "Gets the value of the specified field from this time as a long.\n \n This queries this time for the value of the specified field.\n If it is not possible to return the value, because the field is not supported\n or for some other reason, an exception is thrown.\n \n If the field is a ChronoField then the query is implemented here.\n The supported fields will return valid\n values based on this time.\n All other ChronoField instances will throw an UnsupportedTemporalTypeException.\n \n If the field is not a ChronoField, then the result of this method\n is obtained by invoking TemporalField.getFrom(TemporalAccessor)\n passing this as the argument. Whether the value can be obtained,\n and what the value represents, is determined by the field."}, {"method_name": "getOffset", "method_sig": "public ZoneOffset getOffset()", "description": "Gets the zone offset, such as '+01:00'.\n \n This is the offset of the local time from UTC/Greenwich."}, {"method_name": "withOffsetSameLocal", "method_sig": "public OffsetTime withOffsetSameLocal (ZoneOffset offset)", "description": "Returns a copy of this OffsetTime with the specified offset ensuring\n that the result has the same local time.\n \n This method returns an object with the same LocalTime and the specified ZoneOffset.\n No calculation is needed or performed.\n For example, if this time represents 10:30+02:00 and the offset specified is\n +03:00, then this method will return 10:30+03:00.\n \n To take into account the difference between the offsets, and adjust the time fields,\n use withOffsetSameInstant(java.time.ZoneOffset).\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "withOffsetSameInstant", "method_sig": "public OffsetTime withOffsetSameInstant (ZoneOffset offset)", "description": "Returns a copy of this OffsetTime with the specified offset ensuring\n that the result is at the same instant on an implied day.\n \n This method returns an object with the specified ZoneOffset and a LocalTime\n adjusted by the difference between the two offsets.\n This will result in the old and new objects representing the same instant on an implied day.\n This is useful for finding the local time in a different offset.\n For example, if this time represents 10:30+02:00 and the offset specified is\n +03:00, then this method will return 11:30+03:00.\n \n To change the offset without adjusting the local time use withOffsetSameLocal(java.time.ZoneOffset).\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "toLocalTime", "method_sig": "public LocalTime toLocalTime()", "description": "Gets the LocalTime part of this date-time.\n \n This returns a LocalTime with the same hour, minute, second and\n nanosecond as this date-time."}, {"method_name": "getHour", "method_sig": "public int getHour()", "description": "Gets the hour-of-day field."}, {"method_name": "getMinute", "method_sig": "public int getMinute()", "description": "Gets the minute-of-hour field."}, {"method_name": "getSecond", "method_sig": "public int getSecond()", "description": "Gets the second-of-minute field."}, {"method_name": "getNano", "method_sig": "public int getNano()", "description": "Gets the nano-of-second field."}, {"method_name": "with", "method_sig": "public OffsetTime with (TemporalAdjuster adjuster)", "description": "Returns an adjusted copy of this time.\n \n This returns an OffsetTime, based on this one, with the time adjusted.\n The adjustment takes place using the specified adjuster strategy object.\n Read the documentation of the adjuster to understand what adjustment will be made.\n \n A simple adjuster might simply set the one of the fields, such as the hour field.\n A more complex adjuster might set the time to the last hour of the day.\n \n The classes LocalTime and ZoneOffset implement TemporalAdjuster,\n thus this method can be used to change the time or offset:\n \n  result = offsetTime.with(time);\n  result = offsetTime.with(offset);\n \n\n The result of this method is obtained by invoking the\n TemporalAdjuster.adjustInto(Temporal) method on the\n specified adjuster passing this as the argument.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "with", "method_sig": "public OffsetTime with (TemporalField field,\n                       long newValue)", "description": "Returns a copy of this time with the specified field set to a new value.\n \n This returns an OffsetTime, based on this one, with the value\n for the specified field changed.\n This can be used to change any supported field, such as the hour, minute or second.\n If it is not possible to set the value, because the field is not supported or for\n some other reason, an exception is thrown.\n \n If the field is a ChronoField then the adjustment is implemented here.\n \n The OFFSET_SECONDS field will return a time with the specified offset.\n The local time is unaltered. If the new offset value is outside the valid range\n then a DateTimeException will be thrown.\n \n The other supported fields will behave as per\n the matching method on LocalTime.with(TemporalField, long) LocalTime}.\n In this case, the offset is not part of the calculation and will be unchanged.\n \n All other ChronoField instances will throw an UnsupportedTemporalTypeException.\n \n If the field is not a ChronoField, then the result of this method\n is obtained by invoking TemporalField.adjustInto(Temporal, long)\n passing this as the argument. In this case, the field determines\n whether and how to adjust the instant.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "withHour", "method_sig": "public OffsetTime withHour (int hour)", "description": "Returns a copy of this OffsetTime with the hour-of-day altered.\n \n The offset does not affect the calculation and will be the same in the result.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "withMinute", "method_sig": "public OffsetTime withMinute (int minute)", "description": "Returns a copy of this OffsetTime with the minute-of-hour altered.\n \n The offset does not affect the calculation and will be the same in the result.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "withSecond", "method_sig": "public OffsetTime withSecond (int second)", "description": "Returns a copy of this OffsetTime with the second-of-minute altered.\n \n The offset does not affect the calculation and will be the same in the result.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "withNano", "method_sig": "public OffsetTime withNano (int nanoOfSecond)", "description": "Returns a copy of this OffsetTime with the nano-of-second altered.\n \n The offset does not affect the calculation and will be the same in the result.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "truncatedTo", "method_sig": "public OffsetTime truncatedTo (TemporalUnit unit)", "description": "Returns a copy of this OffsetTime with the time truncated.\n \n Truncation returns a copy of the original time with fields\n smaller than the specified unit set to zero.\n For example, truncating with the minutes unit\n will set the second-of-minute and nano-of-second field to zero.\n \n The unit must have a duration\n that divides into the length of a standard day without remainder.\n This includes all supplied time units on ChronoUnit and\n DAYS. Other units throw an exception.\n \n The offset does not affect the calculation and will be the same in the result.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "plus", "method_sig": "public OffsetTime plus (TemporalAmount amountToAdd)", "description": "Returns a copy of this time with the specified amount added.\n \n This returns an OffsetTime, based on this one, with the specified amount added.\n The amount is typically Duration but may be any other type implementing\n the TemporalAmount interface.\n \n The calculation is delegated to the amount object by calling\n TemporalAmount.addTo(Temporal). The amount implementation is free\n to implement the addition in any way it wishes, however it typically\n calls back to plus(long, TemporalUnit). Consult the documentation\n of the amount implementation to determine if it can be successfully added.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "plus", "method_sig": "public OffsetTime plus (long amountToAdd,\n                       TemporalUnit unit)", "description": "Returns a copy of this time with the specified amount added.\n \n This returns an OffsetTime, based on this one, with the amount\n in terms of the unit added. If it is not possible to add the amount, because the\n unit is not supported or for some other reason, an exception is thrown.\n \n If the field is a ChronoUnit then the addition is implemented by\n LocalTime.plus(long, TemporalUnit).\n The offset is not part of the calculation and will be unchanged in the result.\n \n If the field is not a ChronoUnit, then the result of this method\n is obtained by invoking TemporalUnit.addTo(Temporal, long)\n passing this as the argument. In this case, the unit determines\n whether and how to perform the addition.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "plusHours", "method_sig": "public OffsetTime plusHours (long hours)", "description": "Returns a copy of this OffsetTime with the specified number of hours added.\n \n This adds the specified number of hours to this time, returning a new time.\n The calculation wraps around midnight.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "plusMinutes", "method_sig": "public OffsetTime plusMinutes (long minutes)", "description": "Returns a copy of this OffsetTime with the specified number of minutes added.\n \n This adds the specified number of minutes to this time, returning a new time.\n The calculation wraps around midnight.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "plusSeconds", "method_sig": "public OffsetTime plusSeconds (long seconds)", "description": "Returns a copy of this OffsetTime with the specified number of seconds added.\n \n This adds the specified number of seconds to this time, returning a new time.\n The calculation wraps around midnight.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "plusNanos", "method_sig": "public OffsetTime plusNanos (long nanos)", "description": "Returns a copy of this OffsetTime with the specified number of nanoseconds added.\n \n This adds the specified number of nanoseconds to this time, returning a new time.\n The calculation wraps around midnight.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "minus", "method_sig": "public OffsetTime minus (TemporalAmount amountToSubtract)", "description": "Returns a copy of this time with the specified amount subtracted.\n \n This returns an OffsetTime, based on this one, with the specified amount subtracted.\n The amount is typically Duration but may be any other type implementing\n the TemporalAmount interface.\n \n The calculation is delegated to the amount object by calling\n TemporalAmount.subtractFrom(Temporal). The amount implementation is free\n to implement the subtraction in any way it wishes, however it typically\n calls back to minus(long, TemporalUnit). Consult the documentation\n of the amount implementation to determine if it can be successfully subtracted.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "minus", "method_sig": "public OffsetTime minus (long amountToSubtract,\n                        TemporalUnit unit)", "description": "Returns a copy of this time with the specified amount subtracted.\n \n This returns an OffsetTime, based on this one, with the amount\n in terms of the unit subtracted. If it is not possible to subtract the amount,\n because the unit is not supported or for some other reason, an exception is thrown.\n \n This method is equivalent to plus(long, TemporalUnit) with the amount negated.\n See that method for a full description of how addition, and thus subtraction, works.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "minusHours", "method_sig": "public OffsetTime minusHours (long hours)", "description": "Returns a copy of this OffsetTime with the specified number of hours subtracted.\n \n This subtracts the specified number of hours from this time, returning a new time.\n The calculation wraps around midnight.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "minusMinutes", "method_sig": "public OffsetTime minusMinutes (long minutes)", "description": "Returns a copy of this OffsetTime with the specified number of minutes subtracted.\n \n This subtracts the specified number of minutes from this time, returning a new time.\n The calculation wraps around midnight.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "minusSeconds", "method_sig": "public OffsetTime minusSeconds (long seconds)", "description": "Returns a copy of this OffsetTime with the specified number of seconds subtracted.\n \n This subtracts the specified number of seconds from this time, returning a new time.\n The calculation wraps around midnight.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "minusNanos", "method_sig": "public OffsetTime minusNanos (long nanos)", "description": "Returns a copy of this OffsetTime with the specified number of nanoseconds subtracted.\n \n This subtracts the specified number of nanoseconds from this time, returning a new time.\n The calculation wraps around midnight.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "query", "method_sig": "public <R> R query (TemporalQuery<R> query)", "description": "Queries this time using the specified query.\n \n This queries this time using the specified query strategy object.\n The TemporalQuery object defines the logic to be used to\n obtain the result. Read the documentation of the query to understand\n what the result of this method will be.\n \n The result of this method is obtained by invoking the\n TemporalQuery.queryFrom(TemporalAccessor) method on the\n specified query passing this as the argument."}, {"method_name": "adjustInto", "method_sig": "public Temporal adjustInto (Temporal temporal)", "description": "Adjusts the specified temporal object to have the same offset and time\n as this object.\n \n This returns a temporal object of the same observable type as the input\n with the offset and time changed to be the same as this.\n \n The adjustment is equivalent to using Temporal.with(TemporalField, long)\n twice, passing ChronoField.NANO_OF_DAY and\n ChronoField.OFFSET_SECONDS as the fields.\n \n In most cases, it is clearer to reverse the calling pattern by using\n Temporal.with(TemporalAdjuster):\n \n   // these two lines are equivalent, but the second approach is recommended\n   temporal = thisOffsetTime.adjustInto(temporal);\n   temporal = temporal.with(thisOffsetTime);\n \n\n This instance is immutable and unaffected by this method call."}, {"method_name": "until", "method_sig": "public long until (Temporal endExclusive,\n                  TemporalUnit unit)", "description": "Calculates the amount of time until another time in terms of the specified unit.\n \n This calculates the amount of time between two OffsetTime\n objects in terms of a single TemporalUnit.\n The start and end points are this and the specified time.\n The result will be negative if the end is before the start.\n For example, the amount in hours between two times can be calculated\n using startTime.until(endTime, HOURS).\n \n The Temporal passed to this method is converted to a\n OffsetTime using from(TemporalAccessor).\n If the offset differs between the two times, then the specified\n end time is normalized to have the same offset as this time.\n \n The calculation returns a whole number, representing the number of\n complete units between the two times.\n For example, the amount in hours between 11:30Z and 13:29Z will only\n be one hour as it is one minute short of two hours.\n \n There are two equivalent ways of using this method.\n The first is to invoke this method.\n The second is to use TemporalUnit.between(Temporal, Temporal):\n \n   // these two lines are equivalent\n   amount = start.until(end, MINUTES);\n   amount = MINUTES.between(start, end);\n \n The choice should be made based on which makes the code more readable.\n \n The calculation is implemented in this method for ChronoUnit.\n The units NANOS, MICROS, MILLIS, SECONDS,\n MINUTES, HOURS and HALF_DAYS are supported.\n Other ChronoUnit values will throw an exception.\n \n If the unit is not a ChronoUnit, then the result of this method\n is obtained by invoking TemporalUnit.between(Temporal, Temporal)\n passing this as the first argument and the converted input temporal\n as the second argument.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "format", "method_sig": "public String format (DateTimeFormatter formatter)", "description": "Formats this time using the specified formatter.\n \n This time will be passed to the formatter to produce a string."}, {"method_name": "atDate", "method_sig": "public OffsetDateTime atDate (LocalDate date)", "description": "Combines this time with a date to create an OffsetDateTime.\n \n This returns an OffsetDateTime formed from this time and the specified date.\n All possible combinations of date and time are valid."}, {"method_name": "toEpochSecond", "method_sig": "public long toEpochSecond (LocalDate date)", "description": "Converts this OffsetTime to the number of seconds since the epoch\n of 1970-01-01T00:00:00Z.\n \n This combines this offset time with the specified date to calculate the\n epoch-second value, which is the number of elapsed seconds from\n 1970-01-01T00:00:00Z.\n Instants on the time-line after the epoch are positive, earlier\n are negative."}, {"method_name": "compareTo", "method_sig": "public int compareTo (OffsetTime other)", "description": "Compares this OffsetTime to another time.\n \n The comparison is based first on the UTC equivalent instant, then on the local time.\n It is \"consistent with equals\", as defined by Comparable.\n \n For example, the following is the comparator order:\n \n10:30+01:00\n11:00+01:00\n12:00+02:00\n11:30+01:00\n12:00+01:00\n12:30+01:00\n\n Values #2 and #3 represent the same instant on the time-line.\n When two values represent the same instant, the local time is compared\n to distinguish them. This step is needed to make the ordering\n consistent with equals().\n \n To compare the underlying local time of two TemporalAccessor instances,\n use ChronoField.NANO_OF_DAY as a comparator."}, {"method_name": "isAfter", "method_sig": "public boolean isAfter (OffsetTime other)", "description": "Checks if the instant of this OffsetTime is after that of the\n specified time applying both times to a common date.\n \n This method differs from the comparison in compareTo(java.time.OffsetTime) in that it\n only compares the instant of the time. This is equivalent to converting both\n times to an instant using the same date and comparing the instants."}, {"method_name": "isBefore", "method_sig": "public boolean isBefore (OffsetTime other)", "description": "Checks if the instant of this OffsetTime is before that of the\n specified time applying both times to a common date.\n \n This method differs from the comparison in compareTo(java.time.OffsetTime) in that it\n only compares the instant of the time. This is equivalent to converting both\n times to an instant using the same date and comparing the instants."}, {"method_name": "isEqual", "method_sig": "public boolean isEqual (OffsetTime other)", "description": "Checks if the instant of this OffsetTime is equal to that of the\n specified time applying both times to a common date.\n \n This method differs from the comparison in compareTo(java.time.OffsetTime) and equals(java.lang.Object)\n in that it only compares the instant of the time. This is equivalent to converting both\n times to an instant using the same date and comparing the instants."}, {"method_name": "equals", "method_sig": "public boolean equals (Object obj)", "description": "Checks if this time is equal to another time.\n \n The comparison is based on the local-time and the offset.\n To compare for the same instant on the time-line, use isEqual(OffsetTime).\n \n Only objects of type OffsetTime are compared, other types return false.\n To compare the underlying local time of two TemporalAccessor instances,\n use ChronoField.NANO_OF_DAY as a comparator."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "A hash code for this time."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Outputs this time as a String, such as 10:15:30+01:00.\n \n The output will be one of the following ISO-8601 formats:\n \nHH:mmXXXXX\nHH:mm:ssXXXXX\nHH:mm:ss.SSSXXXXX\nHH:mm:ss.SSSSSSXXXXX\nHH:mm:ss.SSSSSSSSSXXXXX\n\n The format used will be the shortest that outputs the full value of\n the time where the omitted parts are implied to be zero."}]}