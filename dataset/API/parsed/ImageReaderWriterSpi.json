{"name": "Class ImageReaderWriterSpi", "module": "java.desktop", "package": "javax.imageio.spi", "text": "A superclass containing instance variables and methods common to\n ImageReaderSpi and ImageWriterSpi.", "codes": ["public abstract class ImageReaderWriterSpi\nextends IIOServiceProvider"], "fields": [{"field_name": "names", "field_sig": "protected\u00a0String[] names", "description": "An array of strings to be returned from\n getFormatNames, initially null.\n Constructors should set this to a non-null value."}, {"field_name": "suffixes", "field_sig": "protected\u00a0String[] suffixes", "description": "An array of strings to be returned from\n getFileSuffixes, initially null."}, {"field_name": "MIMETypes", "field_sig": "protected\u00a0String[] MIMETypes", "description": "An array of strings to be returned from\n getMIMETypes, initially null."}, {"field_name": "pluginClassName", "field_sig": "protected\u00a0String pluginClassName", "description": "A String containing the name of the associated\n plug-in class, initially null."}, {"field_name": "supportsStandardStreamMetadataFormat", "field_sig": "protected\u00a0boolean supportsStandardStreamMetadataFormat", "description": "A boolean indicating whether this plug-in supports the\n standard metadata format for stream metadata, initially\n false."}, {"field_name": "nativeStreamMetadataFormatName", "field_sig": "protected\u00a0String nativeStreamMetadataFormatName", "description": "A String containing the name of the native stream\n metadata format supported by this plug-in, initially\n null."}, {"field_name": "nativeStreamMetadataFormatClassName", "field_sig": "protected\u00a0String nativeStreamMetadataFormatClassName", "description": "A String containing the class name of the native\n stream metadata format supported by this plug-in, initially\n null."}, {"field_name": "extraStreamMetadataFormatNames", "field_sig": "protected\u00a0String[] extraStreamMetadataFormatNames", "description": "An array of Strings containing the names of any\n additional stream metadata formats supported by this plug-in,\n initially null."}, {"field_name": "extraStreamMetadataFormatClassNames", "field_sig": "protected\u00a0String[] extraStreamMetadataFormatClassNames", "description": "An array of Strings containing the class names of\n any additional stream metadata formats supported by this plug-in,\n initially null."}, {"field_name": "supportsStandardImageMetadataFormat", "field_sig": "protected\u00a0boolean supportsStandardImageMetadataFormat", "description": "A boolean indicating whether this plug-in supports the\n standard metadata format for image metadata, initially\n false."}, {"field_name": "nativeImageMetadataFormatName", "field_sig": "protected\u00a0String nativeImageMetadataFormatName", "description": "A String containing the name of the\n native stream metadata format supported by this plug-in,\n initially null."}, {"field_name": "nativeImageMetadataFormatClassName", "field_sig": "protected\u00a0String nativeImageMetadataFormatClassName", "description": "A String containing the class name of the\n native stream metadata format supported by this plug-in,\n initially null."}, {"field_name": "extraImageMetadataFormatNames", "field_sig": "protected\u00a0String[] extraImageMetadataFormatNames", "description": "An array of Strings containing the names of any\n additional image metadata formats supported by this plug-in,\n initially null."}, {"field_name": "extraImageMetadataFormatClassNames", "field_sig": "protected\u00a0String[] extraImageMetadataFormatClassNames", "description": "An array of Strings containing the class names of\n any additional image metadata formats supported by this\n plug-in, initially null."}], "methods": [{"method_name": "getFormatNames", "method_sig": "public String[] getFormatNames()", "description": "Returns an array of Strings containing\n human-readable names for the formats that are generally usable\n by the ImageReader or ImageWriter\n implementation associated with this service provider.  For\n example, a single ImageReader might be able to\n process both PBM and PNM files."}, {"method_name": "getFileSuffixes", "method_sig": "public String[] getFileSuffixes()", "description": "Returns an array of Strings containing a list of\n file suffixes associated with the formats that are generally\n usable by the ImageReader or\n ImageWriter implementation associated with this\n service provider.  For example, a single\n ImageReader might be able to process files with\n '.pbm' and '.pnm' suffixes, or both '.jpg' and '.jpeg'\n suffixes.  If there are no known file suffixes,\n null will be returned.\n\n  Returning a particular suffix does not guarantee that files\n with that suffix can be processed; it merely indicates that it\n may be worthwhile attempting to decode or encode such files\n using this service provider."}, {"method_name": "getMIMETypes", "method_sig": "public String[] getMIMETypes()", "description": "Returns an array of Strings containing a list of\n MIME types associated with the formats that are generally\n usable by the ImageReader or\n ImageWriter implementation associated with this\n service provider.\n\n  Ideally, only a single MIME type would be required in order\n to describe a particular format.  However, for several reasons\n it is necessary to associate a list of types with each service\n provider.  First, many common image file formats do not have\n standard MIME types, so a list of commonly used unofficial\n names will be required, such as image/x-pbm and\n image/x-portable-bitmap.  Some file formats have\n official MIME types but may sometimes be referred to using\n their previous unofficial designations, such as\n image/x-png instead of the official\n image/png.  Finally, a single service provider may\n be capable of parsing multiple distinct types from the MIME\n point of view, for example image/x-xbitmap and\n image/x-xpixmap.\n\n  Returning a particular MIME type does not guarantee that\n files claiming to be of that type can be processed; it merely\n indicates that it may be worthwhile attempting to decode or\n encode such files using this service provider."}, {"method_name": "getPluginClassName", "method_sig": "public String getPluginClassName()", "description": "Returns the fully-qualified class name of the\n ImageReader or ImageWriter plug-in\n associated with this service provider."}, {"method_name": "isStandardStreamMetadataFormatSupported", "method_sig": "public boolean isStandardStreamMetadataFormatSupported()", "description": "Returns true if the standard metadata format is\n among the document formats recognized by the\n getAsTree and setFromTree methods on\n the stream metadata objects produced or consumed by this\n plug-in."}, {"method_name": "getNativeStreamMetadataFormatName", "method_sig": "public String getNativeStreamMetadataFormatName()", "description": "Returns the name of the \"native\" stream metadata format for\n this plug-in, which typically allows for lossless encoding and\n transmission of the stream metadata stored in the format handled by\n this plug-in.  If no such format is supported,\n null will be returned.\n\n  The default implementation returns the\n nativeStreamMetadataFormatName instance variable,\n which is typically set by the constructor."}, {"method_name": "getExtraStreamMetadataFormatNames", "method_sig": "public String[] getExtraStreamMetadataFormatNames()", "description": "Returns an array of Strings containing the names\n of additional document formats, other than the native and\n standard formats, recognized by the\n getAsTree and setFromTree methods on\n the stream metadata objects produced or consumed by this\n plug-in.\n\n  If the plug-in does not handle metadata, null should be\n returned.\n\n  The set of formats may differ according to the particular\n images being read or written; this method should indicate all\n the additional formats supported by the plug-in under any\n circumstances.\n\n  The default implementation returns a clone of the\n extraStreamMetadataFormatNames instance variable,\n which is typically set by the constructor."}, {"method_name": "isStandardImageMetadataFormatSupported", "method_sig": "public boolean isStandardImageMetadataFormatSupported()", "description": "Returns true if the standard metadata format is\n among the document formats recognized by the\n getAsTree and setFromTree methods on\n the image metadata objects produced or consumed by this\n plug-in."}, {"method_name": "getNativeImageMetadataFormatName", "method_sig": "public String getNativeImageMetadataFormatName()", "description": "Returns the name of the \"native\" image metadata format for\n this plug-in, which typically allows for lossless encoding and\n transmission of the image metadata stored in the format handled by\n this plug-in.  If no such format is supported,\n null will be returned.\n\n  The default implementation returns the\n nativeImageMetadataFormatName instance variable,\n which is typically set by the constructor."}, {"method_name": "getExtraImageMetadataFormatNames", "method_sig": "public String[] getExtraImageMetadataFormatNames()", "description": "Returns an array of Strings containing the names\n of additional document formats, other than the native and\n standard formats, recognized by the\n getAsTree and setFromTree methods on\n the image metadata objects produced or consumed by this\n plug-in.\n\n  If the plug-in does not handle image metadata, null should\n be returned.\n\n  The set of formats may differ according to the particular\n images being read or written; this method should indicate all\n the additional formats supported by the plug-in under any circumstances.\n\n  The default implementation returns a clone of the\n extraImageMetadataFormatNames instance variable,\n which is typically set by the constructor."}, {"method_name": "getStreamMetadataFormat", "method_sig": "public IIOMetadataFormat getStreamMetadataFormat (String formatName)", "description": "Returns an IIOMetadataFormat object describing the\n given stream metadata format, or null if no\n description is available.  The supplied name must be the native\n stream metadata format name, the standard metadata format name,\n or one of those returned by\n getExtraStreamMetadataFormatNames."}, {"method_name": "getImageMetadataFormat", "method_sig": "public IIOMetadataFormat getImageMetadataFormat (String formatName)", "description": "Returns an IIOMetadataFormat object describing the\n given image metadata format, or null if no\n description is available.  The supplied name must be the native\n image metadata format name, the standard metadata format name,\n or one of those returned by\n getExtraImageMetadataFormatNames."}]}