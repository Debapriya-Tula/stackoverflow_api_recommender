{"name": "Class SetOfIntegerSyntax", "module": "java.desktop", "package": "javax.print.attribute", "text": "Class SetOfIntegerSyntax is an abstract base class providing the\n common implementation of all attributes whose value is a set of nonnegative\n integers. This includes attributes whose value is a single range of integers\n and attributes whose value is a set of ranges of integers.\n \n You can construct an instance of SetOfIntegerSyntax by giving it in\n \"string form.\" The string consists of zero or more comma-separated integer\n groups. Each integer group consists of either one integer, two integers\n separated by a hyphen (-), or two integers separated by a colon\n (:). Each integer consists of one or more decimal digits (0\n through 9). Whitespace characters cannot appear within an integer but\n are otherwise ignored. For example: \"\", \"1\", \"5-10\",\n \"1:2, 4\".\n \n You can also construct an instance of SetOfIntegerSyntax by giving it\n in \"array form.\" Array form consists of an array of zero or more integer\n groups where each integer group is a length-1 or length-2 array of\n ints; for example, int[0][], int[][]{{1}},\n int[][]{{5,10}}, int[][]{{1,2},{4}}.\n \n In both string form and array form, each successive integer group gives a\n range of integers to be included in the set. The first integer in each group\n gives the lower bound of the range; the second integer in each group gives\n the upper bound of the range; if there is only one integer in the group, the\n upper bound is the same as the lower bound. If the upper bound is less than\n the lower bound, it denotes a null range (no values). If the upper\n bound is equal to the lower bound, it denotes a range consisting of a single\n value. If the upper bound is greater than the lower bound, it denotes a range\n consisting of more than one value. The ranges may appear in any order and are\n allowed to overlap. The union of all the ranges gives the set's contents.\n Once a SetOfIntegerSyntax instance is constructed, its value is\n immutable.\n \n The SetOfIntegerSyntax object's value is actually stored in\n \"canonical array form.\" This is the same as array form, except there\n are no null ranges; the members of the set are represented in as few\n ranges as possible (i.e., overlapping ranges are coalesced); the ranges\n appear in ascending order; and each range is always represented as a\n length-two array of ints in the form {lower bound, upper bound}. An\n empty set is represented as a zero-length array.\n \n Class SetOfIntegerSyntax has operations to return the set's members\n in canonical array form, to test whether a given integer is a member of the\n set, and to iterate through the members of the set.", "codes": ["public abstract class SetOfIntegerSyntax\nextends Object\nimplements Serializable, Cloneable"], "fields": [], "methods": [{"method_name": "getMembers", "method_sig": "public int[][] getMembers()", "description": "Obtain this set-of-integer attribute's members in canonical array form.\n The returned array is \"safe;\" the client may alter it without affecting\n this set-of-integer attribute."}, {"method_name": "contains", "method_sig": "public boolean contains (int x)", "description": "Determine if this set-of-integer attribute contains the given value."}, {"method_name": "contains", "method_sig": "public boolean contains (IntegerSyntax attribute)", "description": "Determine if this set-of-integer attribute contains the given integer\n attribute's value."}, {"method_name": "next", "method_sig": "public int next (int x)", "description": "Determine the smallest integer in this set-of-integer attribute that is\n greater than the given value. If there are no integers in this\n set-of-integer attribute greater than the given value, -1 is\n returned. (Since a set-of-integer attribute can only contain nonnegative\n values, -1 will never appear in the set.) You can use the\n next() method to iterate through the integer values in a\n set-of-integer attribute in ascending order, like this:\n \n     SetOfIntegerSyntax attribute = . . .;\n     int i = -1;\n     while ((i = attribute.next (i)) != -1)\n         {\n         foo (i);\n         }\n "}, {"method_name": "equals", "method_sig": "public boolean equals (Object object)", "description": "Returns whether this set-of-integer attribute is equivalent to the passed\n in object. To be equivalent, all of the following conditions must be\n true:\n \nobject is not null.\n   object is an instance of class SetOfIntegerSyntax.\n   This set-of-integer attribute's members and object's\n   members are the same.\n "}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Returns a hash code value for this set-of-integer attribute. The hash\n code is the sum of the lower and upper bounds of the ranges in the\n canonical array form, or 0 for an empty set."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a string value corresponding to this set-of-integer attribute.\n The string value is a zero-length string if this set is empty. Otherwise,\n the string value is a comma-separated list of the ranges in the canonical\n array form, where each range is represented as \"i\" if\n the lower bound equals the upper bound or\n \"i-j\" otherwise."}]}