{"name": "Class MBeanInfo", "module": "java.management", "package": "javax.management", "text": "Describes the management interface exposed by an MBean; that is,\n the set of attributes and operations which are available for\n management operations.  Instances of this class are immutable.\n Subclasses may be mutable but this is not recommended.\nUsually the MBeanInfo for any given MBean does\n not change over the lifetime of that MBean.  Dynamic MBeans can change their\n MBeanInfo and in that case it is recommended that they emit a Notification with a type of \n \"jmx.mbean.info.changed\" and a userData that is the new MBeanInfo.  This is not required, but\n provides a conventional way for clients of the MBean to discover the change.\n See also the immutableInfo and\n infoTimeout fields in the \n MBeanInfo Descriptor.\nThe contents of the MBeanInfo for a Dynamic MBean\n are determined by its getMBeanInfo() method.  This includes Open MBeans and Model\n MBeans, which are kinds of Dynamic MBeans.\nThe contents of the MBeanInfo for a Standard MBean\n are determined by the MBean server as follows:\n\ngetClassName() returns the Java class name of the MBean\n object;\n\n getConstructors() returns the list of all public\n constructors in that object;\n\n getAttributes() returns the list of all attributes\n whose existence is deduced from the presence in the MBean interface\n of a getName, isName, or\n setName method that conforms to the conventions\n for Standard MBeans;\n\n getOperations() returns the list of all methods in\n the MBean interface that do not represent attributes;\n\n getNotifications() returns an empty array if the MBean\n does not implement the NotificationBroadcaster interface,\n otherwise the result of calling NotificationBroadcaster.getNotificationInfo() on it;\n\n getDescriptor() returns a descriptor containing the contents\n of any descriptor annotations in the MBean interface (see\n @DescriptorKey).\n\n \nThe description returned by getDescription() and the\n descriptions of the contained attributes and operations are not specified.\nThe remaining details of the MBeanInfo for a\n Standard MBean are not specified.  This includes the description of\n any contained constructors, and notifications; the names\n of parameters to constructors and operations; and the descriptions of\n constructor parameters.", "codes": ["public class MBeanInfo\nextends Object\nimplements Cloneable, Serializable, DescriptorRead"], "fields": [], "methods": [{"method_name": "clone", "method_sig": "public Object clone()", "description": "Returns a shallow clone of this instance.\n The clone is obtained by simply calling super.clone(),\n thus calling the default native shallow cloning mechanism\n implemented by Object.clone().\n No deeper cloning of any internal field is made.\nSince this class is immutable, the clone method is chiefly of\n interest to subclasses."}, {"method_name": "getClassName", "method_sig": "public String getClassName()", "description": "Returns the name of the Java class of the MBean described by\n this MBeanInfo."}, {"method_name": "getDescription", "method_sig": "public String getDescription()", "description": "Returns a human readable description of the MBean."}, {"method_name": "getAttributes", "method_sig": "public MBeanAttributeInfo[] getAttributes()", "description": "Returns the list of attributes exposed for management.\n Each attribute is described by an MBeanAttributeInfo object.\n\n The returned array is a shallow copy of the internal array,\n which means that it is a copy of the internal array of\n references to the MBeanAttributeInfo objects\n but that each referenced MBeanAttributeInfo object is not copied."}, {"method_name": "getOperations", "method_sig": "public MBeanOperationInfo[] getOperations()", "description": "Returns the list of operations  of the MBean.\n Each operation is described by an MBeanOperationInfo object.\n\n The returned array is a shallow copy of the internal array,\n which means that it is a copy of the internal array of\n references to the MBeanOperationInfo objects\n but that each referenced MBeanOperationInfo object is not copied."}, {"method_name": "getConstructors", "method_sig": "public MBeanConstructorInfo[] getConstructors()", "description": "Returns the list of the public constructors of the MBean.\n Each constructor is described by an\n MBeanConstructorInfo object.\nThe returned array is a shallow copy of the internal array,\n which means that it is a copy of the internal array of\n references to the MBeanConstructorInfo objects but\n that each referenced MBeanConstructorInfo object\n is not copied.\nThe returned list is not necessarily exhaustive.  That is,\n the MBean may have a public constructor that is not in the\n list.  In this case, the MBean server can construct another\n instance of this MBean's class using that constructor, even\n though it is not listed here."}, {"method_name": "getNotifications", "method_sig": "public MBeanNotificationInfo[] getNotifications()", "description": "Returns the list of the notifications emitted by the MBean.\n Each notification is described by an MBeanNotificationInfo object.\n\n The returned array is a shallow copy of the internal array,\n which means that it is a copy of the internal array of\n references to the MBeanNotificationInfo objects\n but that each referenced MBeanNotificationInfo object is not copied."}, {"method_name": "getDescriptor", "method_sig": "public Descriptor getDescriptor()", "description": "Get the descriptor of this MBeanInfo.  Changing the returned value\n will have no affect on the original descriptor."}, {"method_name": "equals", "method_sig": "public boolean equals (Object o)", "description": "Compare this MBeanInfo to another.  Two MBeanInfo objects\n are equal if and only if they return equal values for getClassName(), for getDescription(), and for\n getDescriptor(), and the\n arrays returned by the two objects for getAttributes(), getOperations(), getConstructors(), and getNotifications() are\n pairwise equal.  Here \"equal\" means Object.equals(Object), not identity.\nIf two MBeanInfo objects return the same values in one of\n their arrays but in a different order then they are not equal."}]}