{"name": "Class JMXConnectorServer", "module": "java.management", "package": "javax.management.remote", "text": "Superclass of every connector server.  A connector server is\n attached to an MBean server.  It listens for client connection\n requests and creates a connection for each one.\nA connector server is associated with an MBean server either by\n registering it in that MBean server, or by passing the MBean server\n to its constructor.\nA connector server is inactive when created.  It only starts\n listening for client connections when the start\n method is called.  A connector server stops listening for client\n connections when the stop method is called or when\n the connector server is unregistered from its MBean server.\nStopping a connector server does not unregister it from its\n MBean server.  A connector server once stopped cannot be\n restarted.\nEach time a client connection is made or broken, a notification\n of class JMXConnectionNotification is emitted.", "codes": ["public abstract class JMXConnectorServer\nextends NotificationBroadcasterSupport\nimplements JMXConnectorServerMBean, MBeanRegistration, JMXAddressable"], "fields": [{"field_name": "AUTHENTICATOR", "field_sig": "public static final\u00a0String AUTHENTICATOR", "description": "Name of the attribute that specifies the authenticator for a\n connector server.  The value associated with this attribute, if\n any, must be an object that implements the interface JMXAuthenticator."}], "methods": [{"method_name": "getMBeanServer", "method_sig": "public MBeanServer getMBeanServer()", "description": "Returns the MBean server that this connector server is\n attached to."}, {"method_name": "toJMXConnector", "method_sig": "public JMXConnector toJMXConnector (Map<String, ?> env)\n                            throws IOException", "description": "Returns a client stub for this connector server.  A client\n stub is a serializable object whose connect method can be used to make\n one new connection to this connector server.\nA given connector need not support the generation of client\n stubs.  However, the connectors specified by the JMX Remote API do\n (JMXMP Connector and RMI Connector).\nThe default implementation of this method uses JMXConnectorServerMBean.getAddress() and JMXConnectorFactory to generate the\n stub, with code equivalent to the following:\n\n JMXServiceURL addr = getAddress();\n return JMXConnectorFactory.newJMXConnector(addr, env);\n \nA connector server for which this is inappropriate must\n override this method so that it either implements the\n appropriate logic or throws UnsupportedOperationException."}, {"method_name": "getNotificationInfo", "method_sig": "public MBeanNotificationInfo[] getNotificationInfo()", "description": "Returns an array indicating the notifications that this MBean\n sends. The implementation in JMXConnectorServer\n returns an array with one element, indicating that it can emit\n notifications of class JMXConnectionNotification with\n the types defined in that class.  A subclass that can emit other\n notifications should return an array that contains this element\n plus descriptions of the other notifications."}, {"method_name": "connectionOpened", "method_sig": "protected void connectionOpened (String connectionId,\n                                String message,\n                                Object userData)", "description": "Called by a subclass when a new client connection is opened.\n Adds connectionId to the list returned by JMXConnectorServerMBean.getConnectionIds(), then emits a JMXConnectionNotification with type JMXConnectionNotification.OPENED."}, {"method_name": "connectionClosed", "method_sig": "protected void connectionClosed (String connectionId,\n                                String message,\n                                Object userData)", "description": "Called by a subclass when a client connection is closed\n normally.  Removes connectionId from the list returned\n by JMXConnectorServerMBean.getConnectionIds(), then emits a JMXConnectionNotification with type JMXConnectionNotification.CLOSED."}, {"method_name": "connectionFailed", "method_sig": "protected void connectionFailed (String connectionId,\n                                String message,\n                                Object userData)", "description": "Called by a subclass when a client connection fails.\n Removes connectionId from the list returned by\n JMXConnectorServerMBean.getConnectionIds(), then emits a JMXConnectionNotification with type JMXConnectionNotification.FAILED."}, {"method_name": "preRegister", "method_sig": "public ObjectName preRegister (MBeanServer mbs,\n                              ObjectName name)", "description": "Called by an MBean server when this connector server is\n registered in that MBean server.  This connector server becomes\n attached to the MBean server and its getMBeanServer()\n method will return mbs.\nIf this connector server is already attached to an MBean\n server, this method has no effect.  The MBean server it is\n attached to is not necessarily the one it is being registered\n in."}, {"method_name": "preDeregister", "method_sig": "public void preDeregister()\n                   throws Exception", "description": "Called by an MBean server when this connector server is\n unregistered from that MBean server.  If this connector server\n was attached to that MBean server by being registered in it,\n and if the connector server is still active,\n then unregistering it will call the stop method.\n If the stop method throws an exception, the\n unregistration attempt will fail.  It is recommended to call\n the stop method explicitly before unregistering\n the MBean."}]}