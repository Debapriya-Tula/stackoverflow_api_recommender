{"name": "Class MetalRootPaneUI", "module": "java.desktop", "package": "javax.swing.plaf.metal", "text": "Provides the metal look and feel implementation of RootPaneUI.\n \nMetalRootPaneUI provides support for the\n windowDecorationStyle property of JRootPane.\n MetalRootPaneUI does this by way of installing a custom\n LayoutManager, a private Component to render\n the appropriate widgets, and a private Border. The\n LayoutManager is always installed, regardless of the value of\n the windowDecorationStyle property, but the\n Border and Component are only installed/added if\n the windowDecorationStyle is other than\n JRootPane.NONE.\n \nWarning:\n Serialized objects of this class will not be compatible with\n future Swing releases. The current serialization support is\n appropriate for short term storage or RMI between applications running\n the same version of Swing.  As of 1.4, support for long term storage\n of all JavaBeans\u2122\n has been added to the java.beans package.\n Please see XMLEncoder.", "codes": ["public class MetalRootPaneUI\nextends BasicRootPaneUI"], "fields": [], "methods": [{"method_name": "createUI", "method_sig": "public static ComponentUI createUI (JComponent c)", "description": "Creates a UI for a JRootPane."}, {"method_name": "installUI", "method_sig": "public void installUI (JComponent c)", "description": "Invokes supers implementation of installUI to install\n the necessary state onto the passed in JRootPane\n to render the metal look and feel implementation of\n RootPaneUI. If\n the windowDecorationStyle property of the\n JRootPane is other than JRootPane.NONE,\n this will add a custom Component to render the widgets to\n JRootPane, as well as installing a custom\n Border and LayoutManager on the\n JRootPane."}, {"method_name": "uninstallUI", "method_sig": "public void uninstallUI (JComponent c)", "description": "Invokes supers implementation to uninstall any of its state. This will\n also reset the LayoutManager of the JRootPane.\n If a Component has been added to the JRootPane\n to render the window decoration style, this method will remove it.\n Similarly, this will revert the Border and LayoutManager of the\n JRootPane to what it was before installUI\n was invoked."}, {"method_name": "propertyChange", "method_sig": "public void propertyChange (PropertyChangeEvent e)", "description": "Invoked when a property changes. MetalRootPaneUI is\n primarily interested in events originating from the\n JRootPane it has been installed on identifying the\n property windowDecorationStyle. If the\n windowDecorationStyle has changed to a value other\n than JRootPane.NONE, this will add a Component\n to the JRootPane to render the window decorations, as well\n as installing a Border on the JRootPane.\n On the other hand, if the windowDecorationStyle has\n changed to JRootPane.NONE, this will remove the\n Component that has been added to the JRootPane\n as well resetting the Border to what it was before\n installUI was invoked."}]}