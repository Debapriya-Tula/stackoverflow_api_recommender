{"name": "Interface GSSCredential", "module": "java.security.jgss", "package": "org.ietf.jgss", "text": "This interface encapsulates the GSS-API credentials for an entity.  A\n credential contains all the necessary cryptographic information to\n enable the creation of a context on behalf of the entity that it\n represents.  It may contain multiple, distinct, mechanism specific\n credential elements, each containing information for a specific\n security mechanism, but all referring to the same entity. A credential\n may be used to perform context initiation, acceptance, or both.\n\n Credentials are instantiated using one of the\n createCredential methods in the GSSManager class. GSS-API credential creation is not\n intended to provide a \"login to the network\" function, as such a\n function would involve the creation of new credentials rather than\n merely acquiring a handle to existing credentials. The\n section on credential\n acquisition in the package level description describes\n how existing credentials are acquired in the Java platform. GSS-API\n implementations must impose a local access-control policy on callers to\n prevent unauthorized callers from acquiring credentials to which they\n are not entitled. \n\n Applications will create a credential object passing the desired\n parameters.  The application can then use the query methods to obtain\n specific information about the instantiated credential object.\n When the credential is no longer needed, the application should call\n the dispose method to release any resources held by\n the credential object and to destroy any cryptographically sensitive\n information.\n\n This example code demonstrates the creation of a GSSCredential\n implementation for a specific entity, querying of its fields, and its\n release when it is no longer needed:\n \n    GSSManager manager = GSSManager.getInstance();\n\n    // start by creating a name object for the entity\n    GSSName name = manager.createName(\"myusername\", GSSName.NT_USER_NAME);\n\n    // now acquire credentials for the entity\n    GSSCredential cred = manager.createCredential(name,\n                    GSSCredential.ACCEPT_ONLY);\n\n    // display credential information - name, remaining lifetime,\n    // and the mechanisms it has been acquired over\n    System.out.println(cred.getName().toString());\n    System.out.println(cred.getRemainingLifetime());\n\n    Oid [] mechs = cred.getMechs();\n    if (mechs != null) {\n            for (int i = 0; i< mechs.length; i++)\n                    System.out.println(mechs[i].toString());\n    }\n\n    // release system resources held by the credential\n    cred.dispose();\n ", "codes": ["public interface GSSCredential\nextends Cloneable"], "fields": [{"field_name": "INITIATE_AND_ACCEPT", "field_sig": "static final\u00a0int INITIATE_AND_ACCEPT", "description": "Credential usage flag requesting that it be usable\n for both context initiation and acceptance."}, {"field_name": "INITIATE_ONLY", "field_sig": "static final\u00a0int INITIATE_ONLY", "description": "Credential usage flag requesting that it be usable\n for context initiation only."}, {"field_name": "ACCEPT_ONLY", "field_sig": "static final\u00a0int ACCEPT_ONLY", "description": "Credential usage flag requesting that it be usable\n for context acceptance only."}, {"field_name": "DEFAULT_LIFETIME", "field_sig": "static final\u00a0int DEFAULT_LIFETIME", "description": "A lifetime constant representing the default credential lifetime. This\n value it set to 0."}, {"field_name": "INDEFINITE_LIFETIME", "field_sig": "static final\u00a0int INDEFINITE_LIFETIME", "description": "A lifetime constant representing indefinite credential lifetime.\n This value must is set to the maximum integer value in Java -\n Integer.MAX_VALUE."}], "methods": [{"method_name": "dispose", "method_sig": "void dispose()\n      throws GSSException", "description": "Releases any sensitive information that the GSSCredential object may\n be containing.  Applications should call this method as soon as the\n credential is no longer needed to minimize the time any sensitive\n information is maintained."}, {"method_name": "getName", "method_sig": "GSSName getName()\n         throws GSSException", "description": "Retrieves the name of the entity that the credential asserts."}, {"method_name": "getName", "method_sig": "GSSName getName (Oid mech)\n         throws GSSException", "description": "Retrieves a Mechanism Name of the entity that the credential\n asserts. This is equivalent to calling canonicalize on the value returned by\n the other form of getName."}, {"method_name": "getRemainingLifetime", "method_sig": "int getRemainingLifetime()\n                  throws GSSException", "description": "Returns the remaining lifetime in seconds for a credential.  The\n remaining lifetime is the minimum lifetime amongst all of the underlying\n mechanism specific credential elements."}, {"method_name": "getRemainingInitLifetime", "method_sig": "int getRemainingInitLifetime (Oid mech)\n                      throws GSSException", "description": "Returns the lifetime in seconds for the credential to remain capable\n of initiating security contexts using the specified mechanism. This\n method queries the initiator credential element that belongs to the\n specified mechanism."}, {"method_name": "getRemainingAcceptLifetime", "method_sig": "int getRemainingAcceptLifetime (Oid mech)\n                        throws GSSException", "description": "Returns the lifetime in seconds for the credential to remain capable\n of accepting security contexts using the specified mechanism. This\n method queries the acceptor credential element that belongs to the\n specified mechanism."}, {"method_name": "getUsage", "method_sig": "int getUsage()\n      throws GSSException", "description": "Returns the credential usage mode. In other words, it\n tells us if this credential can be used for initiating or accepting\n security contexts. It does not tell us which mechanism(s) has to be\n used in order to do so. It is expected that an application will allow\n the GSS-API to pick a default mechanism after calling this method."}, {"method_name": "getUsage", "method_sig": "int getUsage (Oid mech)\n      throws GSSException", "description": "Returns the credential usage mode for a specific mechanism. In other\n words, it tells us if this credential can be used\n for initiating or accepting security contexts with a given underlying\n mechanism."}, {"method_name": "getMechs", "method_sig": "Oid[] getMechs()\n        throws GSSException", "description": "Returns a list of mechanisms supported by this credential. It does\n not tell us which ones can be used to initiate\n contexts and which ones can be used to accept contexts. The\n application must call the getUsage method with\n each of the returned Oid's to determine the possible modes of\n usage."}, {"method_name": "add", "method_sig": "void add (GSSName name,\n         int initLifetime,\n         int acceptLifetime,\n         Oid mech,\n         int usage)\n  throws GSSException", "description": "Adds a mechanism specific credential-element to an existing\n credential.  This method allows the construction of credentials, one\n mechanism at a time.\n\n This routine is envisioned to be used mainly by context acceptors\n during the creation of acceptor credentials which are to be used\n with a variety of clients using different security mechanisms.\n\n This routine adds the new credential element \"in-place\".  To add the\n element in a new credential, first call clone to obtain a\n copy of this credential, then call its add method.\n\n As always, GSS-API implementations must impose a local access-control\n policy on callers to prevent unauthorized callers from acquiring\n credentials to which they are not entitled.\n\n Non-default values for initLifetime and acceptLifetime cannot always\n be honored by the underlying mechanisms, thus callers should be\n prepared to call getRemainingInitLifetime and getRemainingAcceptLifetime on the credential."}, {"method_name": "equals", "method_sig": "boolean equals (Object another)", "description": "Tests if this GSSCredential asserts the same entity as the supplied\n object.  The two credentials must be acquired over the same\n mechanisms and must refer to the same principal."}, {"method_name": "hashCode", "method_sig": "int hashCode()", "description": "Returns a hashcode value for this GSSCredential."}]}