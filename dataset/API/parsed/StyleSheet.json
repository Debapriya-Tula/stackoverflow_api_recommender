{"name": "Class StyleSheet", "module": "java.desktop", "package": "javax.swing.text.html", "text": "Support for defining the visual characteristics of\n HTML views being rendered.  The StyleSheet is used to\n translate the HTML model into visual characteristics.\n This enables views to be customized by a look-and-feel,\n multiple views over the same model can be rendered\n differently, etc.  This can be thought of as a CSS\n rule repository.  The key for CSS attributes is an\n object of type CSS.Attribute.  The type of the value\n is up to the StyleSheet implementation, but the\n toString method is required\n to return a string representation of CSS value.\n \n The primary entry point for HTML View implementations\n to get their attributes is the\n getViewAttributes\n method.  This should be implemented to establish the\n desired policy used to associate attributes with the view.\n Each HTMLEditorKit (i.e. and therefore each associated\n JEditorPane) can have its own StyleSheet, but by default one\n sheet will be shared by all of the HTMLEditorKit instances.\n HTMLDocument instance can also have a StyleSheet, which\n holds the document-specific CSS specifications.\n \n In order for Views to store less state and therefore be\n more lightweight, the StyleSheet can act as a factory for\n painters that handle some of the rendering tasks.  This allows\n implementations to determine what they want to cache\n and have the sharing potentially at the level that a\n selector is common to multiple views.  Since the StyleSheet\n may be used by views over multiple documents and typically\n the HTML attributes don't effect the selector being used,\n the potential for sharing is significant.\n \n The rules are stored as named styles, and other information\n is stored to translate the context of an element to a\n rule quickly.  The following code fragment will display\n the named styles, and therefore the CSS rules contained.\n \n \u00a0\n \u00a0 import java.util.*;\n \u00a0 import javax.swing.text.*;\n \u00a0 import javax.swing.text.html.*;\n \u00a0\n \u00a0 public class ShowStyles {\n \u00a0\n \u00a0     public static void main(String[] args) {\n \u00a0       HTMLEditorKit kit = new HTMLEditorKit();\n \u00a0       HTMLDocument doc = (HTMLDocument) kit.createDefaultDocument();\n \u00a0       StyleSheet styles = doc.getStyleSheet();\n \u00a0\n \u00a0       Enumeration rules = styles.getStyleNames();\n \u00a0       while (rules.hasMoreElements()) {\n \u00a0           String name = (String) rules.nextElement();\n \u00a0           Style rule = styles.getStyle(name);\n \u00a0           System.out.println(rule.toString());\n \u00a0       }\n \u00a0       System.exit(0);\n \u00a0     }\n \u00a0 }\n \u00a0\n \n\n The semantics for when a CSS style should overide visual attributes\n defined by an element are not well defined. For example, the html\n <body bgcolor=red> makes the body have a red\n background. But if the html file also contains the CSS rule\n body { background: blue } it becomes less clear as to\n what color the background of the body should be. The current\n implementation gives visual attributes defined in the element the\n highest precedence, that is they are always checked before any styles.\n Therefore, in the previous example the background would have a\n red color as the body element defines the background color to be red.\n \n As already mentioned this supports CSS. We don't support the full CSS\n spec. Refer to the javadoc of the CSS class to see what properties\n we support. The two major CSS parsing related\n concepts we do not currently\n support are pseudo selectors, such as A:link { color: red },\n and the important modifier.", "codes": ["public class StyleSheet\nextends StyleContext"], "fields": [], "methods": [{"method_name": "getRule", "method_sig": "public Style getRule (HTML.Tag t,\n                     Element e)", "description": "Fetches the style to use to render the given type\n of HTML tag.  The element given is representing\n the tag and can be used to determine the nesting\n for situations where the attributes will differ\n if nesting inside of elements."}, {"method_name": "getRule", "method_sig": "public Style getRule (String selector)", "description": "Fetches the rule that best matches the selector given\n in string form. Where selector is a space separated\n String of the element names. For example, selector\n might be 'html body tr td''\n The attributes of the returned Style will change\n as rules are added and removed. That is if you to ask for a rule\n with a selector \"table p\" and a new rule was added with a selector\n of \"p\" the returned Style would include the new attributes from\n the rule \"p\"."}, {"method_name": "addRule", "method_sig": "public void addRule (String rule)", "description": "Adds a set of rules to the sheet.  The rules are expected to\n be in valid CSS format.  Typically this would be called as\n a result of parsing a <style> tag."}, {"method_name": "getDeclaration", "method_sig": "public AttributeSet getDeclaration (String decl)", "description": "Translates a CSS declaration to an AttributeSet that represents\n the CSS declaration.  Typically this would be called as a\n result of encountering an HTML style attribute."}, {"method_name": "loadRules", "method_sig": "public void loadRules (Reader in,\n                      URL ref)\n               throws IOException", "description": "Loads a set of rules that have been specified in terms of\n CSS1 grammar.  If there are collisions with existing rules,\n the newly specified rule will win."}, {"method_name": "getViewAttributes", "method_sig": "public AttributeSet getViewAttributes (View v)", "description": "Fetches a set of attributes to use in the view for\n displaying.  This is basically a set of attributes that\n can be used for View.getAttributes."}, {"method_name": "removeStyle", "method_sig": "public void removeStyle (String nm)", "description": "Removes a named style previously added to the document."}, {"method_name": "addStyleSheet", "method_sig": "public void addStyleSheet (StyleSheet ss)", "description": "Adds the rules from the StyleSheet ss to those of\n the receiver. ss's rules will override the rules of\n any previously added style sheets. An added StyleSheet will never\n override the rules of the receiving style sheet."}, {"method_name": "removeStyleSheet", "method_sig": "public void removeStyleSheet (StyleSheet ss)", "description": "Removes the StyleSheet ss from those of the receiver."}, {"method_name": "getStyleSheets", "method_sig": "public StyleSheet[] getStyleSheets()", "description": "Returns an array of the linked StyleSheets. Will return null\n if there are no linked StyleSheets."}, {"method_name": "importStyleSheet", "method_sig": "public void importStyleSheet (URL url)", "description": "Imports a style sheet from url. The resulting rules\n are directly added to the receiver. If you do not want the rules\n to become part of the receiver, create a new StyleSheet and use\n addStyleSheet to link it in."}, {"method_name": "setBase", "method_sig": "public void setBase (URL base)", "description": "Sets the base. All import statements that are relative, will be\n relative to base."}, {"method_name": "getBase", "method_sig": "public URL getBase()", "description": "Returns the base."}, {"method_name": "addCSSAttribute", "method_sig": "public void addCSSAttribute (MutableAttributeSet attr,\n                            CSS.Attribute key,\n                            String value)", "description": "Adds a CSS attribute to the given set."}, {"method_name": "addCSSAttributeFromHTML", "method_sig": "public boolean addCSSAttributeFromHTML (MutableAttributeSet attr,\n                                       CSS.Attribute key,\n                                       String value)", "description": "Adds a CSS attribute to the given set."}, {"method_name": "translateHTMLToCSS", "method_sig": "public AttributeSet translateHTMLToCSS (AttributeSet htmlAttrSet)", "description": "Converts a set of HTML attributes to an equivalent\n set of CSS attributes."}, {"method_name": "addAttribute", "method_sig": "public AttributeSet addAttribute (AttributeSet old,\n                                 Object key,\n                                 Object value)", "description": "Adds an attribute to the given set, and returns\n the new representative set.  This is reimplemented to\n convert StyleConstant attributes to CSS prior to forwarding\n to the superclass behavior.  The StyleConstants attribute\n has no corresponding CSS entry, the StyleConstants attribute\n is stored (but will likely be unused)."}, {"method_name": "addAttributes", "method_sig": "public AttributeSet addAttributes (AttributeSet old,\n                                  AttributeSet attr)", "description": "Adds a set of attributes to the element.  If any of these attributes\n are StyleConstants attributes, they will be converted to CSS prior\n to forwarding to the superclass behavior."}, {"method_name": "removeAttribute", "method_sig": "public AttributeSet removeAttribute (AttributeSet old,\n                                    Object key)", "description": "Removes an attribute from the set.  If the attribute is a StyleConstants\n attribute, the request will be converted to a CSS attribute prior to\n forwarding to the superclass behavior."}, {"method_name": "removeAttributes", "method_sig": "public AttributeSet removeAttributes (AttributeSet old,\n                                     Enumeration<?> names)", "description": "Removes a set of attributes for the element.  If any of the attributes\n is a StyleConstants attribute, the request will be converted to a CSS\n attribute prior to forwarding to the superclass behavior."}, {"method_name": "removeAttributes", "method_sig": "public AttributeSet removeAttributes (AttributeSet old,\n                                     AttributeSet attrs)", "description": "Removes a set of attributes. If any of the attributes\n is a StyleConstants attribute, the request will be converted to a CSS\n attribute prior to forwarding to the superclass behavior."}, {"method_name": "createSmallAttributeSet", "method_sig": "protected StyleContext.SmallAttributeSet createSmallAttributeSet (AttributeSet a)", "description": "Creates a compact set of attributes that might be shared.\n This is a hook for subclasses that want to alter the\n behavior of SmallAttributeSet.  This can be reimplemented\n to return an AttributeSet that provides some sort of\n attribute conversion."}, {"method_name": "createLargeAttributeSet", "method_sig": "protected MutableAttributeSet createLargeAttributeSet (AttributeSet a)", "description": "Creates a large set of attributes that should trade off\n space for time.  This set will not be shared.  This is\n a hook for subclasses that want to alter the behavior\n of the larger attribute storage format (which is\n SimpleAttributeSet by default).   This can be reimplemented\n to return a MutableAttributeSet that provides some sort of\n attribute conversion."}, {"method_name": "getFont", "method_sig": "public Font getFont (AttributeSet a)", "description": "Fetches the font to use for the given set of attributes."}, {"method_name": "getForeground", "method_sig": "public Color getForeground (AttributeSet a)", "description": "Takes a set of attributes and turn it into a foreground color\n specification.  This might be used to specify things\n like brighter, more hue, etc."}, {"method_name": "getBackground", "method_sig": "public Color getBackground (AttributeSet a)", "description": "Takes a set of attributes and turn it into a background color\n specification.  This might be used to specify things\n like brighter, more hue, etc."}, {"method_name": "getBoxPainter", "method_sig": "public StyleSheet.BoxPainter getBoxPainter (AttributeSet a)", "description": "Fetches the box formatter to use for the given set\n of CSS attributes."}, {"method_name": "getListPainter", "method_sig": "public StyleSheet.ListPainter getListPainter (AttributeSet a)", "description": "Fetches the list formatter to use for the given set\n of CSS attributes."}, {"method_name": "setBaseFontSize", "method_sig": "public void setBaseFontSize (int sz)", "description": "Sets the base font size, with valid values between 1 and 7."}, {"method_name": "setBaseFontSize", "method_sig": "public void setBaseFontSize (String size)", "description": "Sets the base font size from the passed in String. The string\n can either identify a specific font size, with legal values between\n 1 and 7, or identify a relative font size such as +1 or -2."}, {"method_name": "getIndexOfSize", "method_sig": "public static int getIndexOfSize (float pt)", "description": "Returns the index of HTML/CSS size model."}, {"method_name": "getPointSize", "method_sig": "public float getPointSize (int index)", "description": "Returns the point size, given a size index."}, {"method_name": "getPointSize", "method_sig": "public float getPointSize (String size)", "description": "Given a string such as \"+2\", \"-2\", or \"2\",\n  returns a point size value."}, {"method_name": "stringToColor", "method_sig": "public Color stringToColor (String string)", "description": "Converts a color string such as \"RED\" or \"#NNNNNN\" to a Color.\n Note: This will only convert the HTML3.2 color strings\n       or a string of length 7;\n       otherwise, it will return null."}]}