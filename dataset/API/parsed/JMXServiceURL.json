{"name": "Class JMXServiceURL", "module": "java.management", "package": "javax.management.remote", "text": "The address of a JMX API connector server.  Instances of this class\n are immutable.\nThe address is an Abstract Service URL for SLP, as\n defined in RFC 2609 and amended by RFC 3111.  It must look like\n this:\n\nservice:jmx:protocol:sap\n\nHere, protocol is the transport\n protocol to be used to connect to the connector server.  It is\n a string of one or more ASCII characters, each of which is a\n letter, a digit, or one of the characters + or\n -.  The first character must be a letter.\n Uppercase letters are converted into lowercase ones.\nsap is the address at which the connector\n server is found.  This address uses a subset of the syntax defined\n by RFC 2609 for IP-based protocols.  It is a subset because the\n user@host syntax is not supported.\nThe other syntaxes defined by RFC 2609 are not currently\n supported by this class.\nThe supported syntax is:\n\n//[host[:port]][url-path]\n\nSquare brackets [] indicate optional parts of\n the address.  Not all protocols will recognize all optional\n parts.\nThe host is a host name, an IPv4 numeric\n host address, or an IPv6 numeric address enclosed in square\n brackets.\nThe port is a decimal port number.  0\n means a default or anonymous port, depending on the protocol.\nThe host and port\n can be omitted.  The port cannot be supplied\n without a host.\nThe url-path, if any, begins with a slash\n (/) or a semicolon (;) and continues to\n the end of the address.  It can contain attributes using the\n semicolon syntax specified in RFC 2609.  Those attributes are not\n parsed by this class and incorrect attribute syntax is not\n detected.\nAlthough it is legal according to RFC 2609 to have a\n url-path that begins with a semicolon, not\n all implementations of SLP allow it, so it is recommended to avoid\n that syntax.\nCase is not significant in the initial\n service:jmx:protocol string or in the host\n part of the address.  Depending on the protocol, case can be\n significant in the url-path.", "codes": ["public class JMXServiceURL\nextends Object\nimplements Serializable"], "fields": [], "methods": [{"method_name": "getProtocol", "method_sig": "public String getProtocol()", "description": "The protocol part of the Service URL."}, {"method_name": "getHost", "method_sig": "public String getHost()", "description": "The host part of the Service URL.  If the Service URL was\n constructed with the constructor that takes a URL string\n parameter, the result is the substring specifying the host in\n that URL.  If the Service URL was constructed with a\n constructor that takes a separate host parameter, the result is\n the string that was specified.  If that string was null, the\n result is\n InetAddress.getLocalHost().getHostName() if local host name\n can be resolved to an IP. Else numeric IP address of an active\n network interface will be used.\nIn either case, if the host was specified using the\n [...] syntax for numeric IPv6 addresses, the\n square brackets are not included in the return value here."}, {"method_name": "getPort", "method_sig": "public int getPort()", "description": "The port of the Service URL.  If no port was\n specified, the returned value is 0."}, {"method_name": "getURLPath", "method_sig": "public String getURLPath()", "description": "The URL Path part of the Service URL.  This is an empty\n string, or a string beginning with a slash (/), or\n a string beginning with a semicolon (;)."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "The string representation of this Service URL.  If the value\n returned by this method is supplied to the\n JMXServiceURL constructor, the resultant object is\n equal to this one.\nThe host part of the returned string\n is the value returned by getHost().  If that value\n specifies a numeric IPv6 address, it is surrounded by square\n brackets [].\nThe port part of the returned string\n is the value returned by getPort() in its shortest\n decimal form.  If the value is zero, it is omitted."}, {"method_name": "equals", "method_sig": "public boolean equals (Object obj)", "description": "Indicates whether some other object is equal to this one.\n This method returns true if and only if obj is an\n instance of JMXServiceURL whose getProtocol(), getHost(), getPort(), and\n getURLPath() methods return the same values as for\n this object.  The values for getProtocol() and getHost() can differ in case without affecting equality."}]}