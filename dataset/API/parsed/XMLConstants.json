{"name": "Class XMLConstants", "module": "java.xml", "package": "javax.xml", "text": "Utility class to contain basic XML values as constants.", "codes": ["public final class XMLConstants\nextends Object"], "fields": [{"field_name": "NULL_NS_URI", "field_sig": "public static final\u00a0String NULL_NS_URI", "description": "Namespace URI to use to represent that there is no Namespace.\n\n Defined by the Namespace specification to be \"\"."}, {"field_name": "DEFAULT_NS_PREFIX", "field_sig": "public static final\u00a0String DEFAULT_NS_PREFIX", "description": "Prefix to use to represent the default XML Namespace.\n\n Defined by the XML specification to be \"\"."}, {"field_name": "XML_NS_URI", "field_sig": "public static final\u00a0String XML_NS_URI", "description": "The official XML Namespace name URI.\n\n Defined by the XML specification to be\n \"http://www.w3.org/XML/1998/namespace\"."}, {"field_name": "XML_NS_PREFIX", "field_sig": "public static final\u00a0String XML_NS_PREFIX", "description": "The official XML Namespace prefix.\n\n Defined by the XML specification to be \"xml\"."}, {"field_name": "XMLNS_ATTRIBUTE_NS_URI", "field_sig": "public static final\u00a0String XMLNS_ATTRIBUTE_NS_URI", "description": "The official XML attribute used for specifying XML Namespace\n declarations, XMLConstants.XMLNS_ATTRIBUTE, Namespace name URI.\n\n Defined by the XML specification to be\n \"http://www.w3.org/2000/xmlns/\"."}, {"field_name": "XMLNS_ATTRIBUTE", "field_sig": "public static final\u00a0String XMLNS_ATTRIBUTE", "description": "The official XML attribute used for specifying XML Namespace\n declarations.\n\n It is NOT valid to use as a\n prefix.  Defined by the XML specification to be\n \"xmlns\"."}, {"field_name": "W3C_XML_SCHEMA_NS_URI", "field_sig": "public static final\u00a0String W3C_XML_SCHEMA_NS_URI", "description": "W3C XML Schema Namespace URI.\n\n Defined to be \"http://www.w3.org/2001/XMLSchema\"."}, {"field_name": "W3C_XML_SCHEMA_INSTANCE_NS_URI", "field_sig": "public static final\u00a0String W3C_XML_SCHEMA_INSTANCE_NS_URI", "description": "W3C XML Schema Instance Namespace URI.\n\n Defined to be \"http://www.w3.org/2001/XMLSchema-instance\"."}, {"field_name": "W3C_XPATH_DATATYPE_NS_URI", "field_sig": "public static final\u00a0String W3C_XPATH_DATATYPE_NS_URI", "description": "W3C XPath Datatype Namespace URI.\n\n Defined to be \"http://www.w3.org/2003/11/xpath-datatypes\"."}, {"field_name": "XML_DTD_NS_URI", "field_sig": "public static final\u00a0String XML_DTD_NS_URI", "description": "XML Document Type Declaration Namespace URI as an arbitrary value.\n\n Since not formally defined by any existing standard, arbitrarily define to be \"http://www.w3.org/TR/REC-xml\"."}, {"field_name": "RELAXNG_NS_URI", "field_sig": "public static final\u00a0String RELAXNG_NS_URI", "description": "RELAX NG Namespace URI.\n\n Defined to be \"http://relaxng.org/ns/structure/1.0\"."}, {"field_name": "FEATURE_SECURE_PROCESSING", "field_sig": "public static final\u00a0String FEATURE_SECURE_PROCESSING", "description": "Feature for secure processing.\n\n \n\ntrue instructs the implementation to process XML securely.\n     This may set limits on XML constructs to avoid conditions such as denial of service attacks.\n   \n\nfalse instructs the implementation to process XML in accordance with the XML specifications\n     ignoring security issues such as limits on XML constructs to avoid conditions such as denial of service attacks.\n   \n"}, {"field_name": "ACCESS_EXTERNAL_DTD", "field_sig": "public static final\u00a0String ACCESS_EXTERNAL_DTD", "description": "Property: accessExternalDTD\n\n \n Restrict access to external DTDs and external Entity References to the protocols specified.\n If access is denied due to the restriction of this property, a runtime exception that\n is specific to the context is thrown. In the case of SAXParser\n for example, SAXException is thrown.\n\n \nValue:  a list of protocols separated by comma. A protocol is the scheme portion of a\n URI, or in the case of the JAR protocol, \"jar\" plus the scheme portion\n separated by colon.\n A scheme is defined as:\n\n \n scheme = alpha *( alpha | digit | \"+\" | \"-\" | \".\" )\n where alpha = a-z and A-Z.\n\n And the JAR protocol:\n\n jar[:scheme]\n\n Protocols including the keyword \"jar\" are case-insensitive. Any whitespaces as defined by\n Character.isSpaceChar(char) in the value will be ignored.\n Examples of protocols are file, http, jar:file.\n\n \n\nDefault value: The default value is implementation specific and therefore not specified.\n The following options are provided for consideration:\n \n\nan empty string to deny all access to external references;\na specific protocol, such as file, to give permission to only the protocol;\nthe keyword \"all\" to grant  permission to all protocols.\n\n      When FEATURE_SECURE_PROCESSING is enabled,  it is recommended that implementations\n      restrict external connections by default, though this may cause problems for applications\n      that process XML/XSD/XSL with external references.\n \n\nGranting all access:  the keyword \"all\" grants permission to all protocols.\n\n \nSystem Property: The value of this property can be set or overridden by\n system property javax.xml.accessExternalDTD.\n\n\n \njaxp.properties: This configuration file is in standard\n Properties format and typically located in the conf\n directory of the Java installation. If the file exists and the system\n property is specified, its value will be used to override the default\n of the property."}, {"field_name": "ACCESS_EXTERNAL_SCHEMA", "field_sig": "public static final\u00a0String ACCESS_EXTERNAL_SCHEMA", "description": "Property: accessExternalSchema\n\n Restrict access to the protocols specified for external reference set by the\n schemaLocation attribute, Import and Include element. If access is denied\n due to the restriction of this property, a runtime exception that is specific\n to the context is thrown. In the case of SchemaFactory\n for example, org.xml.sax.SAXException is thrown.\n\n \nValue: a list of protocols separated by comma. A protocol is the scheme portion of a\n URI, or in the case of the JAR protocol, \"jar\" plus the scheme portion\n separated by colon.\n A scheme is defined as:\n\n \n scheme = alpha *( alpha | digit | \"+\" | \"-\" | \".\" )\n where alpha = a-z and A-Z.\n\n And the JAR protocol:\n\n jar[:scheme]\n\n Protocols including the keyword \"jar\" are case-insensitive. Any whitespaces as defined by\n Character.isSpaceChar(char) in the value will be ignored.\n Examples of protocols are file, http, jar:file.\n\n \n\nDefault value: The default value is implementation specific and therefore not specified.\n The following options are provided for consideration:\n \n\nan empty string to deny all access to external references;\na specific protocol, such as file, to give permission to only the protocol;\nthe keyword \"all\" to grant  permission to all protocols.\n\n      When FEATURE_SECURE_PROCESSING is enabled,  it is recommended that implementations\n      restrict external connections by default, though this may cause problems for applications\n      that process XML/XSD/XSL with external references.\n \n\nGranting all access:  the keyword \"all\" grants permission to all protocols.\n\n \nSystem Property: The value of this property can be set or overridden by\n system property javax.xml.accessExternalSchema\n\njaxp.properties: This configuration file is in standard\n Properties format and typically located in the conf\n directory of the Java installation. If the file exists and the system\n property is specified, its value will be used to override the default\n of the property."}, {"field_name": "ACCESS_EXTERNAL_STYLESHEET", "field_sig": "public static final\u00a0String ACCESS_EXTERNAL_STYLESHEET", "description": "Property: accessExternalStylesheet\n\n \n Restrict access to the protocols specified for external references set by the\n stylesheet processing instruction, Import and Include element, and document function.\n If access is denied due to the restriction of this property, a runtime exception\n that is specific to the context is thrown. In the case of constructing new\n Transformer for example,\n TransformerConfigurationException\n will be thrown by the TransformerFactory.\n\n \nValue: a list of protocols separated by comma. A protocol is the scheme portion of a\n URI, or in the case of the JAR protocol, \"jar\" plus the scheme portion\n separated by colon.\n A scheme is defined as:\n\n \n scheme = alpha *( alpha | digit | \"+\" | \"-\" | \".\" )\n where alpha = a-z and A-Z.\n\n And the JAR protocol:\n\n jar[:scheme]\n\n Protocols including the keyword \"jar\" are case-insensitive. Any whitespaces as defined by\n Character.isSpaceChar(char) in the value will be ignored.\n Examples of protocols are file, http, jar:file.\n\n \n\nDefault value: The default value is implementation specific and therefore not specified.\n The following options are provided for consideration:\n \n\nan empty string to deny all access to external references;\na specific protocol, such as file, to give permission to only the protocol;\nthe keyword \"all\" to grant  permission to all protocols.\n\n      When FEATURE_SECURE_PROCESSING is enabled,  it is recommended that implementations\n      restrict external connections by default, though this may cause problems for applications\n      that process XML/XSD/XSL with external references.\n \n\nGranting all access:  the keyword \"all\" grants permission to all protocols.\n\n \nSystem Property: The value of this property can be set or overridden by\n system property javax.xml.accessExternalStylesheet\n\njaxp.properties: This configuration file is in standard\n Properties format and typically located in the conf\n directory of the Java installation. If the file exists and the system\n property is specified, its value will be used to override the default\n of the property."}, {"field_name": "USE_CATALOG", "field_sig": "public static final\u00a0String USE_CATALOG", "description": "Feature: useCatalog\n\n \n Instructs XML processors to use XML Catalogs to resolve entity references.\n Catalogs may be set through JAXP factories, system properties, or\n jaxp.properties by using the javax.xml.catalog.files property\n defined in CatalogFeatures.\n The following code enables Catalog on SAX parser:\n \n      SAXParserFactory spf = SAXParserFactory.newInstance();\n      spf.setFeature(XMLConstants.USE_CATALOG, true);\n      SAXParser parser = spf.newSAXParser();\n      parser.setProperty(CatalogFeatures.Feature.FILES.getPropertyName(), \"catalog.xml\");\n \n\nValue: a boolean. If the value is true, and a catalog is set,\n the XML parser will resolve external references using\n CatalogResolver. If the value is false,\n XML Catalog is ignored even if one is set. The default value is true.\n\n \nSystem Property: The value of this property can be set or overridden by\n system property javax.xml.useCatalog\n\njaxp.properties: This configuration file is in standard\n Properties format and typically located in the conf\n directory of the Java installation. If the file exists and the system\n property is specified, its value will be used to override the default\n value of the property."}], "methods": []}