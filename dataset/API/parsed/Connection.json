{"name": "Interface Connection", "module": "java.sql", "package": "java.sql", "text": "A connection (session) with a specific\n database. SQL statements are executed and results are returned\n within the context of a connection.\n \n A Connection object's database is able to provide information\n describing its tables, its supported SQL grammar, its stored\n procedures, the capabilities of this connection, and so on. This\n information is obtained with the getMetaData method.\n\n Note: When configuring a Connection, JDBC applications\n  should use the appropriate Connection method such as\n  setAutoCommit or setTransactionIsolation.\n  Applications should not invoke SQL commands directly to change the connection's\n   configuration when there is a JDBC method available.  By default a Connection object is in\n auto-commit mode, which means that it automatically commits changes\n after executing each statement. If auto-commit mode has been\n disabled, the method commit must be called explicitly in\n order to commit changes; otherwise, database changes will not be saved.\n \n A new Connection object created using the JDBC 2.1 core API\n has an initially empty type map associated with it. A user may enter a\n custom mapping for a UDT in this type map.\n When a UDT is retrieved from a data source with the\n method ResultSet.getObject, the getObject method\n will check the connection's type map to see if there is an entry for that\n UDT.  If so, the getObject method will map the UDT to the\n class indicated.  If there is no entry, the UDT will be mapped using the\n standard mapping.\n \n A user may create a new type map, which is a java.util.Map\n object, make an entry in it, and pass it to the java.sql\n methods that can perform custom mapping.  In this case, the method\n will use the given type map instead of the one associated with\n the connection.\n \n For example, the following code fragment specifies that the SQL\n type ATHLETES will be mapped to the class\n Athletes in the Java programming language.\n The code fragment retrieves the type map for the Connection\n  object con, inserts the entry into it, and then sets\n the type map with the new entry as the connection's type map.\n \n      java.util.Map map = con.getTypeMap();\n      map.put(\"mySchemaName.ATHLETES\", Class.forName(\"Athletes\"));\n      con.setTypeMap(map);\n ", "codes": ["public interface Connection\nextends Wrapper, AutoCloseable"], "fields": [{"field_name": "TRANSACTION_NONE", "field_sig": "static final\u00a0int TRANSACTION_NONE", "description": "A constant indicating that transactions are not supported."}, {"field_name": "TRANSACTION_READ_UNCOMMITTED", "field_sig": "static final\u00a0int TRANSACTION_READ_UNCOMMITTED", "description": "A constant indicating that\n dirty reads, non-repeatable reads and phantom reads can occur.\n This level allows a row changed by one transaction to be read\n by another transaction before any changes in that row have been\n committed (a \"dirty read\").  If any of the changes are rolled back,\n the second transaction will have retrieved an invalid row."}, {"field_name": "TRANSACTION_READ_COMMITTED", "field_sig": "static final\u00a0int TRANSACTION_READ_COMMITTED", "description": "A constant indicating that\n dirty reads are prevented; non-repeatable reads and phantom\n reads can occur.  This level only prohibits a transaction\n from reading a row with uncommitted changes in it."}, {"field_name": "TRANSACTION_REPEATABLE_READ", "field_sig": "static final\u00a0int TRANSACTION_REPEATABLE_READ", "description": "A constant indicating that\n dirty reads and non-repeatable reads are prevented; phantom\n reads can occur.  This level prohibits a transaction from\n reading a row with uncommitted changes in it, and it also\n prohibits the situation where one transaction reads a row,\n a second transaction alters the row, and the first transaction\n rereads the row, getting different values the second time\n (a \"non-repeatable read\")."}, {"field_name": "TRANSACTION_SERIALIZABLE", "field_sig": "static final\u00a0int TRANSACTION_SERIALIZABLE", "description": "A constant indicating that\n dirty reads, non-repeatable reads and phantom reads are prevented.\n This level includes the prohibitions in\n TRANSACTION_REPEATABLE_READ and further prohibits the\n situation where one transaction reads all rows that satisfy\n a WHERE condition, a second transaction inserts a row that\n satisfies that WHERE condition, and the first transaction\n rereads for the same condition, retrieving the additional\n \"phantom\" row in the second read."}], "methods": [{"method_name": "createStatement", "method_sig": "Statement createStatement()\n                   throws SQLException", "description": "Creates a Statement object for sending\n SQL statements to the database.\n SQL statements without parameters are normally\n executed using Statement objects. If the same SQL statement\n is executed many times, it may be more efficient to use a\n PreparedStatement object.\n \n Result sets created using the returned Statement\n object will by default be type TYPE_FORWARD_ONLY\n and have a concurrency level of CONCUR_READ_ONLY.\n The holdability of the created result sets can be determined by\n calling getHoldability()."}, {"method_name": "prepareStatement", "method_sig": "PreparedStatement prepareStatement (String sql)\n                            throws SQLException", "description": "Creates a PreparedStatement object for sending\n parameterized SQL statements to the database.\n \n A SQL statement with or without IN parameters can be\n pre-compiled and stored in a PreparedStatement object. This\n object can then be used to efficiently execute this statement\n multiple times.\n\n Note: This method is optimized for handling\n parametric SQL statements that benefit from precompilation. If\n the driver supports precompilation,\n the method prepareStatement will send\n the statement to the database for precompilation. Some drivers\n may not support precompilation. In this case, the statement may\n not be sent to the database until the PreparedStatement\n object is executed.  This has no direct effect on users; however, it does\n affect which methods throw certain SQLException objects.\n \n Result sets created using the returned PreparedStatement\n object will by default be type TYPE_FORWARD_ONLY\n and have a concurrency level of CONCUR_READ_ONLY.\n The holdability of the created result sets can be determined by\n calling getHoldability()."}, {"method_name": "prepareCall", "method_sig": "CallableStatement prepareCall (String sql)\n                       throws SQLException", "description": "Creates a CallableStatement object for calling\n database stored procedures.\n The CallableStatement object provides\n methods for setting up its IN and OUT parameters, and\n methods for executing the call to a stored procedure.\n\n Note: This method is optimized for handling stored\n procedure call statements. Some drivers may send the call\n statement to the database when the method prepareCall\n is done; others\n may wait until the CallableStatement object\n is executed. This has no\n direct effect on users; however, it does affect which method\n throws certain SQLExceptions.\n \n Result sets created using the returned CallableStatement\n object will by default be type TYPE_FORWARD_ONLY\n and have a concurrency level of CONCUR_READ_ONLY.\n The holdability of the created result sets can be determined by\n calling getHoldability()."}, {"method_name": "nativeSQL", "method_sig": "String nativeSQL (String sql)\n          throws SQLException", "description": "Converts the given SQL statement into the system's native SQL grammar.\n A driver may convert the JDBC SQL grammar into its system's\n native SQL grammar prior to sending it. This method returns the\n native form of the statement that the driver would have sent."}, {"method_name": "setAutoCommit", "method_sig": "void setAutoCommit (boolean autoCommit)\n            throws SQLException", "description": "Sets this connection's auto-commit mode to the given state.\n If a connection is in auto-commit mode, then all its SQL\n statements will be executed and committed as individual\n transactions.  Otherwise, its SQL statements are grouped into\n transactions that are terminated by a call to either\n the method commit or the method rollback.\n By default, new connections are in auto-commit\n mode.\n \n The commit occurs when the statement completes. The time when the statement\n completes depends on the type of SQL Statement:\n \nFor DML statements, such as Insert, Update or Delete, and DDL statements,\n the statement is complete as soon as it has finished executing.\n For Select statements, the statement is complete when the associated result\n set is closed.\n For CallableStatement objects or for statements that return\n multiple results, the statement is complete\n when all of the associated result sets have been closed, and all update\n counts and output parameters have been retrieved.\n\n\nNOTE:  If this method is called during a transaction and the\n auto-commit mode is changed, the transaction is committed.  If\n setAutoCommit is called and the auto-commit mode is\n not changed, the call is a no-op."}, {"method_name": "getAutoCommit", "method_sig": "boolean getAutoCommit()\n               throws SQLException", "description": "Retrieves the current auto-commit mode for this Connection\n object."}, {"method_name": "commit", "method_sig": "void commit()\n     throws SQLException", "description": "Makes all changes made since the previous\n commit/rollback permanent and releases any database locks\n currently held by this Connection object.\n This method should be\n used only when auto-commit mode has been disabled."}, {"method_name": "rollback", "method_sig": "void rollback()\n       throws SQLException", "description": "Undoes all changes made in the current transaction\n and releases any database locks currently held\n by this Connection object. This method should be\n used only when auto-commit mode has been disabled."}, {"method_name": "close", "method_sig": "void close()\n    throws SQLException", "description": "Releases this Connection object's database and JDBC resources\n immediately instead of waiting for them to be automatically released.\n \n Calling the method close on a Connection\n object that is already closed is a no-op.\n \n It is strongly recommended that an application explicitly\n commits or rolls back an active transaction prior to calling the\n close method.  If the close method is called\n and there is an active transaction, the results are implementation-defined."}, {"method_name": "isClosed", "method_sig": "boolean isClosed()\n          throws SQLException", "description": "Retrieves whether this Connection object has been\n closed.  A connection is closed if the method close\n has been called on it or if certain fatal errors have occurred.\n This method is guaranteed to return true only when\n it is called after the method Connection.close has\n been called.\n \n This method generally cannot be called to determine whether a\n connection to a database is valid or invalid.  A typical client\n can determine that a connection is invalid by catching any\n exceptions that might be thrown when an operation is attempted."}, {"method_name": "getMetaData", "method_sig": "DatabaseMetaData getMetaData()\n                      throws SQLException", "description": "Retrieves a DatabaseMetaData object that contains\n metadata about the database to which this\n Connection object represents a connection.\n The metadata includes information about the database's\n tables, its supported SQL grammar, its stored\n procedures, the capabilities of this connection, and so on."}, {"method_name": "setReadOnly", "method_sig": "void setReadOnly (boolean readOnly)\n          throws SQLException", "description": "Puts this connection in read-only mode as a hint to the driver to enable\n database optimizations.\n\n Note: This method cannot be called during a transaction."}, {"method_name": "isReadOnly", "method_sig": "boolean isReadOnly()\n            throws SQLException", "description": "Retrieves whether this Connection\n object is in read-only mode."}, {"method_name": "setCatalog", "method_sig": "void setCatalog (String catalog)\n         throws SQLException", "description": "Sets the given catalog name in order to select\n a subspace of this Connection object's database\n in which to work.\n \n If the driver does not support catalogs, it will\n silently ignore this request.\n \n Calling setCatalog has no effect on previously created or prepared\n Statement objects. It is implementation defined whether a DBMS\n prepare operation takes place immediately when the Connection\n method prepareStatement or prepareCall is invoked.\n For maximum portability, setCatalog should be called before a\n Statement is created or prepared."}, {"method_name": "getCatalog", "method_sig": "String getCatalog()\n           throws SQLException", "description": "Retrieves this Connection object's current catalog name."}, {"method_name": "setTransactionIsolation", "method_sig": "void setTransactionIsolation (int level)\n                      throws SQLException", "description": "Attempts to change the transaction isolation level for this\n Connection object to the one given.\n The constants defined in the interface Connection\n are the possible transaction isolation levels.\n \nNote: If this method is called during a transaction, the result\n is implementation-defined."}, {"method_name": "getTransactionIsolation", "method_sig": "int getTransactionIsolation()\n                     throws SQLException", "description": "Retrieves this Connection object's current\n transaction isolation level."}, {"method_name": "getWarnings", "method_sig": "SQLWarning getWarnings()\n                throws SQLException", "description": "Retrieves the first warning reported by calls on this\n Connection object.  If there is more than one\n warning, subsequent warnings will be chained to the first one\n and can be retrieved by calling the method\n SQLWarning.getNextWarning on the warning\n that was retrieved previously.\n \n This method may not be\n called on a closed connection; doing so will cause an\n SQLException to be thrown.\n\n Note: Subsequent warnings will be chained to this\n SQLWarning."}, {"method_name": "clearWarnings", "method_sig": "void clearWarnings()\n            throws SQLException", "description": "Clears all warnings reported for this Connection object.\n After a call to this method, the method getWarnings\n returns null until a new warning is\n reported for this Connection object."}, {"method_name": "createStatement", "method_sig": "Statement createStatement (int resultSetType,\n                          int resultSetConcurrency)\n                   throws SQLException", "description": "Creates a Statement object that will generate\n ResultSet objects with the given type and concurrency.\n This method is the same as the createStatement method\n above, but it allows the default result set\n type and concurrency to be overridden.\n The holdability of the created result sets can be determined by\n calling getHoldability()."}, {"method_name": "prepareStatement", "method_sig": "PreparedStatement prepareStatement (String sql,\n                                   int resultSetType,\n                                   int resultSetConcurrency)\n                            throws SQLException", "description": "Creates a PreparedStatement object that will generate\n ResultSet objects with the given type and concurrency.\n This method is the same as the prepareStatement method\n above, but it allows the default result set\n type and concurrency to be overridden.\n The holdability of the created result sets can be determined by\n calling getHoldability()."}, {"method_name": "prepareCall", "method_sig": "CallableStatement prepareCall (String sql,\n                              int resultSetType,\n                              int resultSetConcurrency)\n                       throws SQLException", "description": "Creates a CallableStatement object that will generate\n ResultSet objects with the given type and concurrency.\n This method is the same as the prepareCall method\n above, but it allows the default result set\n type and concurrency to be overridden.\n The holdability of the created result sets can be determined by\n calling getHoldability()."}, {"method_name": "getTypeMap", "method_sig": "Map<String, Class<?>> getTypeMap()\n                               throws SQLException", "description": "Retrieves the Map object associated with this\n Connection object.\n Unless the application has added an entry, the type map returned\n will be empty.\n \n You must invoke setTypeMap after making changes to the\n Map object returned from\n  getTypeMap as a JDBC driver may create an internal\n copy of the Map object passed to setTypeMap:\n\n \n      Map<String,Class<?>> myMap = con.getTypeMap();\n      myMap.put(\"mySchemaName.ATHLETES\", Athletes.class);\n      con.setTypeMap(myMap);\n "}, {"method_name": "setTypeMap", "method_sig": "void setTypeMap (Map<String, Class<?>> map)\n         throws SQLException", "description": "Installs the given TypeMap object as the type map for\n this Connection object.  The type map will be used for the\n custom mapping of SQL structured types and distinct types.\n \n You must set the values for the TypeMap prior to\n callng setMap as a JDBC driver may create an internal copy\n of the TypeMap:\n\n \n      Map myMap<String,Class<?>> = new HashMap<String,Class<?>>();\n      myMap.put(\"mySchemaName.ATHLETES\", Athletes.class);\n      con.setTypeMap(myMap);\n "}, {"method_name": "setHoldability", "method_sig": "void setHoldability (int holdability)\n             throws SQLException", "description": "Changes the default holdability of ResultSet objects\n created using this Connection object to the given\n holdability.  The default holdability of ResultSet objects\n can be determined by invoking\n DatabaseMetaData.getResultSetHoldability()."}, {"method_name": "getHoldability", "method_sig": "int getHoldability()\n            throws SQLException", "description": "Retrieves the current holdability of ResultSet objects\n created using this Connection object."}, {"method_name": "setSavepoint", "method_sig": "Savepoint setSavepoint()\n                throws SQLException", "description": "Creates an unnamed savepoint in the current transaction and\n returns the new Savepoint object that represents it.\n\n if setSavepoint is invoked outside of an active transaction, a transaction will be started at this newly created\nsavepoint."}, {"method_name": "setSavepoint", "method_sig": "Savepoint setSavepoint (String name)\n                throws SQLException", "description": "Creates a savepoint with the given name in the current transaction\n and returns the new Savepoint object that represents it.\n\n  if setSavepoint is invoked outside of an active transaction, a transaction will be started at this newly created\nsavepoint."}, {"method_name": "rollback", "method_sig": "void rollback (Savepoint savepoint)\n       throws SQLException", "description": "Undoes all changes made after the given Savepoint object\n was set.\n \n This method should be used only when auto-commit has been disabled."}, {"method_name": "releaseSavepoint", "method_sig": "void releaseSavepoint (Savepoint savepoint)\n               throws SQLException", "description": "Removes the specified Savepoint  and subsequent Savepoint objects from the current\n transaction. Any reference to the savepoint after it have been removed\n will cause an SQLException to be thrown."}, {"method_name": "createStatement", "method_sig": "Statement createStatement (int resultSetType,\n                          int resultSetConcurrency,\n                          int resultSetHoldability)\n                   throws SQLException", "description": "Creates a Statement object that will generate\n ResultSet objects with the given type, concurrency,\n and holdability.\n This method is the same as the createStatement method\n above, but it allows the default result set\n type, concurrency, and holdability to be overridden."}, {"method_name": "prepareStatement", "method_sig": "PreparedStatement prepareStatement (String sql,\n                                   int resultSetType,\n                                   int resultSetConcurrency,\n                                   int resultSetHoldability)\n                            throws SQLException", "description": "Creates a PreparedStatement object that will generate\n ResultSet objects with the given type, concurrency,\n and holdability.\n \n This method is the same as the prepareStatement method\n above, but it allows the default result set\n type, concurrency, and holdability to be overridden."}, {"method_name": "prepareCall", "method_sig": "CallableStatement prepareCall (String sql,\n                              int resultSetType,\n                              int resultSetConcurrency,\n                              int resultSetHoldability)\n                       throws SQLException", "description": "Creates a CallableStatement object that will generate\n ResultSet objects with the given type and concurrency.\n This method is the same as the prepareCall method\n above, but it allows the default result set\n type, result set concurrency type and holdability to be overridden."}, {"method_name": "prepareStatement", "method_sig": "PreparedStatement prepareStatement (String sql,\n                                   int autoGeneratedKeys)\n                            throws SQLException", "description": "Creates a default PreparedStatement object that has\n the capability to retrieve auto-generated keys. The given constant\n tells the driver whether it should make auto-generated keys\n available for retrieval.  This parameter is ignored if the SQL statement\n is not an INSERT statement, or an SQL statement able to return\n auto-generated keys (the list of such statements is vendor-specific).\n \nNote: This method is optimized for handling\n parametric SQL statements that benefit from precompilation. If\n the driver supports precompilation,\n the method prepareStatement will send\n the statement to the database for precompilation. Some drivers\n may not support precompilation. In this case, the statement may\n not be sent to the database until the PreparedStatement\n object is executed.  This has no direct effect on users; however, it does\n affect which methods throw certain SQLExceptions.\n \n Result sets created using the returned PreparedStatement\n object will by default be type TYPE_FORWARD_ONLY\n and have a concurrency level of CONCUR_READ_ONLY.\n The holdability of the created result sets can be determined by\n calling getHoldability()."}, {"method_name": "prepareStatement", "method_sig": "PreparedStatement prepareStatement (String sql,\n                                   int[] columnIndexes)\n                            throws SQLException", "description": "Creates a default PreparedStatement object capable\n of returning the auto-generated keys designated by the given array.\n This array contains the indexes of the columns in the target\n table that contain the auto-generated keys that should be made\n available.  The driver will ignore the array if the SQL statement\n is not an INSERT statement, or an SQL statement able to return\n auto-generated keys (the list of such statements is vendor-specific).\n\n An SQL statement with or without IN parameters can be\n pre-compiled and stored in a PreparedStatement object. This\n object can then be used to efficiently execute this statement\n multiple times.\n \nNote: This method is optimized for handling\n parametric SQL statements that benefit from precompilation. If\n the driver supports precompilation,\n the method prepareStatement will send\n the statement to the database for precompilation. Some drivers\n may not support precompilation. In this case, the statement may\n not be sent to the database until the PreparedStatement\n object is executed.  This has no direct effect on users; however, it does\n affect which methods throw certain SQLExceptions.\n \n Result sets created using the returned PreparedStatement\n object will by default be type TYPE_FORWARD_ONLY\n and have a concurrency level of CONCUR_READ_ONLY.\n The holdability of the created result sets can be determined by\n calling getHoldability()."}, {"method_name": "prepareStatement", "method_sig": "PreparedStatement prepareStatement (String sql,\n                                   String[] columnNames)\n                            throws SQLException", "description": "Creates a default PreparedStatement object capable\n of returning the auto-generated keys designated by the given array.\n This array contains the names of the columns in the target\n table that contain the auto-generated keys that should be returned.\n The driver will ignore the array if the SQL statement\n is not an INSERT statement, or an SQL statement able to return\n auto-generated keys (the list of such statements is vendor-specific).\n \n An SQL statement with or without IN parameters can be\n pre-compiled and stored in a PreparedStatement object. This\n object can then be used to efficiently execute this statement\n multiple times.\n \nNote: This method is optimized for handling\n parametric SQL statements that benefit from precompilation. If\n the driver supports precompilation,\n the method prepareStatement will send\n the statement to the database for precompilation. Some drivers\n may not support precompilation. In this case, the statement may\n not be sent to the database until the PreparedStatement\n object is executed.  This has no direct effect on users; however, it does\n affect which methods throw certain SQLExceptions.\n \n Result sets created using the returned PreparedStatement\n object will by default be type TYPE_FORWARD_ONLY\n and have a concurrency level of CONCUR_READ_ONLY.\n The holdability of the created result sets can be determined by\n calling getHoldability()."}, {"method_name": "createClob", "method_sig": "Clob createClob()\n         throws SQLException", "description": "Constructs an object that implements the Clob interface. The object\n returned initially contains no data.  The setAsciiStream,\n setCharacterStream and setString methods of\n the Clob interface may be used to add data to the Clob."}, {"method_name": "createBlob", "method_sig": "Blob createBlob()\n         throws SQLException", "description": "Constructs an object that implements the Blob interface. The object\n returned initially contains no data.  The setBinaryStream and\n setBytes methods of the Blob interface may be used to add data to\n the Blob."}, {"method_name": "createNClob", "method_sig": "NClob createNClob()\n           throws SQLException", "description": "Constructs an object that implements the NClob interface. The object\n returned initially contains no data.  The setAsciiStream,\n setCharacterStream and setString methods of the NClob interface may\n be used to add data to the NClob."}, {"method_name": "createSQLXML", "method_sig": "SQLXML createSQLXML()\n             throws SQLException", "description": "Constructs an object that implements the SQLXML interface. The object\n returned initially contains no data. The createXmlStreamWriter object and\n setString method of the SQLXML interface may be used to add data to the SQLXML\n object."}, {"method_name": "isValid", "method_sig": "boolean isValid (int timeout)\n         throws SQLException", "description": "Returns true if the connection has not been closed and is still valid.\n The driver shall submit a query on the connection or use some other\n mechanism that positively verifies the connection is still valid when\n this method is called.\n \n The query submitted by the driver to validate the connection shall be\n executed in the context of the current transaction."}, {"method_name": "setClientInfo", "method_sig": "void setClientInfo (String name,\n                   String value)\n            throws SQLClientInfoException", "description": "Sets the value of the client info property specified by name to the\n value specified by value.\n \n Applications may use the DatabaseMetaData.getClientInfoProperties\n method to determine the client info properties supported by the driver\n and the maximum length that may be specified for each property.\n \n The driver stores the value specified in a suitable location in the\n database.  For example in a special register, session parameter, or\n system table column.  For efficiency the driver may defer setting the\n value in the database until the next time a statement is executed or\n prepared.  Other than storing the client information in the appropriate\n place in the database, these methods shall not alter the behavior of\n the connection in anyway.  The values supplied to these methods are\n used for accounting, diagnostics and debugging purposes only.\n \n The driver shall generate a warning if the client info name specified\n is not recognized by the driver.\n \n If the value specified to this method is greater than the maximum\n length for the property the driver may either truncate the value and\n generate a warning or generate a SQLClientInfoException.  If the driver\n generates a SQLClientInfoException, the value specified was not set on the\n connection.\n \n The following are standard client info properties.  Drivers are not\n required to support these properties however if the driver supports a\n client info property that can be described by one of the standard\n properties, the standard property name should be used.\n\n \nApplicationName  -       The name of the application currently utilizing\n                                                      the connection\nClientUser               -       The name of the user that the application using\n                                                      the connection is performing work for.  This may\n                                                      not be the same as the user name that was used\n                                                      in establishing the connection.\nClientHostname   -       The hostname of the computer the application\n                                                      using the connection is running on.\n"}, {"method_name": "setClientInfo", "method_sig": "void setClientInfo (Properties properties)\n            throws SQLClientInfoException", "description": "Sets the value of the connection's client info properties.  The\n Properties object contains the names and values of the client info\n properties to be set.  The set of client info properties contained in\n the properties list replaces the current set of client info properties\n on the connection.  If a property that is currently set on the\n connection is not present in the properties list, that property is\n cleared.  Specifying an empty properties list will clear all of the\n properties on the connection.  See setClientInfo (String, String) for\n more information.\n \n If an error occurs in setting any of the client info properties, a\n SQLClientInfoException is thrown. The SQLClientInfoException\n contains information indicating which client info properties were not set.\n The state of the client information is unknown because\n some databases do not allow multiple client info properties to be set\n atomically.  For those databases, one or more properties may have been\n set before the error occurred."}, {"method_name": "getClientInfo", "method_sig": "String getClientInfo (String name)\n              throws SQLException", "description": "Returns the value of the client info property specified by name.  This\n method may return null if the specified client info property has not\n been set and does not have a default value.  This method will also\n return null if the specified client info property name is not supported\n by the driver.\n \n Applications may use the DatabaseMetaData.getClientInfoProperties\n method to determine the client info properties supported by the driver."}, {"method_name": "getClientInfo", "method_sig": "Properties getClientInfo()\n                  throws SQLException", "description": "Returns a list containing the name and current value of each client info\n property supported by the driver.  The value of a client info property\n may be null if the property has not been set and does not have a\n default value."}, {"method_name": "createArrayOf", "method_sig": "Array createArrayOf (String typeName,\n                    Object[] elements)\n             throws SQLException", "description": "Factory method for creating Array objects.\n\nNote: When createArrayOf is used to create an array object\n that maps to a primitive data type, then it is implementation-defined\n whether the Array object is an array of that primitive\n data type or an array of Object.\n \nNote: The JDBC driver is responsible for mapping the elements\n Object array to the default JDBC SQL type defined in\n java.sql.Types for the given class of Object. The default\n mapping is specified in Appendix B of the JDBC specification.  If the\n resulting JDBC type is not the appropriate type for the given typeName then\n it is implementation defined whether an SQLException is\n thrown or the driver supports the resulting conversion."}, {"method_name": "createStruct", "method_sig": "Struct createStruct (String typeName,\n                    Object[] attributes)\n             throws SQLException", "description": "Factory method for creating Struct objects."}, {"method_name": "setSchema", "method_sig": "void setSchema (String schema)\n        throws SQLException", "description": "Sets the given schema name to access.\n \n If the driver does not support schemas, it will\n silently ignore this request.\n \n Calling setSchema has no effect on previously created or prepared\n Statement objects. It is implementation defined whether a DBMS\n prepare operation takes place immediately when the Connection\n method prepareStatement or prepareCall is invoked.\n For maximum portability, setSchema should be called before a\n Statement is created or prepared."}, {"method_name": "getSchema", "method_sig": "String getSchema()\n          throws SQLException", "description": "Retrieves this Connection object's current schema name."}, {"method_name": "abort", "method_sig": "void abort (Executor executor)\n    throws SQLException", "description": "Terminates an open connection.  Calling abort results in:\n \nThe connection marked as closed\n Closes any physical connection to the database\n Releases resources used by the connection\n Insures that any thread that is currently accessing the connection\n will either progress to completion or throw an SQLException.\n \n\n Calling abort marks the connection closed and releases any\n resources. Calling abort on a closed connection is a\n no-op.\n \n It is possible that the aborting and releasing of the resources that are\n held by the connection can take an extended period of time.  When the\n abort method returns, the connection will have been marked as\n closed and the Executor that was passed as a parameter to abort\n may still be executing tasks to release resources.\n \n This method checks to see that there is an SQLPermission\n object before allowing the method to proceed.  If a\n SecurityManager exists and its\n checkPermission method denies calling abort,\n this method throws a\n java.lang.SecurityException."}, {"method_name": "setNetworkTimeout", "method_sig": "void setNetworkTimeout (Executor executor,\n                       int milliseconds)\n                throws SQLException", "description": "Sets the maximum period a Connection or\n objects created from the Connection\n will wait for the database to reply to any one request. If any\n  request remains unanswered, the waiting method will\n return with a SQLException, and the Connection\n or objects created from the Connection  will be marked as\n closed. Any subsequent use of\n the objects, with the exception of the close,\n isClosed or Connection.isValid\n methods, will result in  a SQLException.\n \nNote: This method is intended to address a rare but serious\n condition where network partitions can cause threads issuing JDBC calls\n to hang uninterruptedly in socket reads, until the OS TCP-TIMEOUT\n (typically 10 minutes). This method is related to the\n abort()  method which provides an administrator\n thread a means to free any such threads in cases where the\n JDBC connection is accessible to the administrator thread.\n The setNetworkTimeout method will cover cases where\n there is no administrator thread, or it has no access to the\n connection. This method is severe in it's effects, and should be\n given a high enough value so it is never triggered before any more\n normal timeouts, such as transaction timeouts.\n \n JDBC driver implementations  may also choose to support the\n setNetworkTimeout method to impose a limit on database\n response time, in environments where no network is present.\n \n Drivers may internally implement some or all of their API calls with\n multiple internal driver-database transmissions, and it is left to the\n driver implementation to determine whether the limit will be\n applied always to the response to the API call, or to any\n single  request made during the API call.\n \n\n This method can be invoked more than once, such as to set a limit for an\n area of JDBC code, and to reset to the default on exit from this area.\n Invocation of this method has no impact on already outstanding\n requests.\n \n The Statement.setQueryTimeout() timeout value is independent of the\n timeout value specified in setNetworkTimeout. If the query timeout\n expires  before the network timeout then the\n statement execution will be canceled. If the network is still\n active the result will be that both the statement and connection\n are still usable. However if the network timeout expires before\n the query timeout or if the statement timeout fails due to network\n problems, the connection will be marked as closed, any resources held by\n the connection will be released and both the connection and\n statement will be unusable.\n \n When the driver determines that the setNetworkTimeout timeout\n value has expired, the JDBC driver marks the connection\n closed and releases any resources held by the connection.\n \n\n This method checks to see that there is an SQLPermission\n object before allowing the method to proceed.  If a\n SecurityManager exists and its\n checkPermission method denies calling\n setNetworkTimeout, this method throws a\n java.lang.SecurityException."}, {"method_name": "getNetworkTimeout", "method_sig": "int getNetworkTimeout()\n               throws SQLException", "description": "Retrieves the number of milliseconds the driver will\n wait for a database request to complete.\n If the limit is exceeded, a\n SQLException is thrown."}, {"method_name": "beginRequest", "method_sig": "default void beginRequest()\n                   throws SQLException", "description": "Hints to the driver that a request, an independent unit of work, is beginning\n on this connection. Each request is independent of all other requests\n with regard to state local to the connection either on the client or the\n server. Work done between beginRequest, endRequest\n pairs does not depend on any other work done on the connection either as\n part of another request or outside of any request. A request may include multiple\n transactions. There may be dependencies on committed database state as\n that is not local to the connection.\n \n Local state is defined as any state associated with a Connection that is\n local to the current Connection either in the client or the database that\n is not transparently reproducible.\n \n Calls to beginRequest and endRequest  are not nested.\n Multiple calls to beginRequest without an intervening call\n to endRequest is not an error. The first beginRequest call\n marks the start of the request and subsequent calls are treated as\n a no-op\n \n Use of beginRequest and endRequest is optional, vendor\n specific and should largely be transparent. In particular\n implementations may detect conditions that indicate dependence on\n other work such as an open transaction. It is recommended though not\n required that implementations throw a SQLException if there is an active\n transaction and beginRequest is called.\n Using these methods may improve performance or provide other benefits.\n Consult your vendors documentation for additional information.\n \n It is recommended to\n enclose each unit of work in beginRequest, endRequest\n pairs such that there is no open transaction at the beginning or end of\n the request and no dependency on local state that crosses request\n boundaries. Committed database state is not local."}, {"method_name": "endRequest", "method_sig": "default void endRequest()\n                 throws SQLException", "description": "Hints to the driver that a request, an independent unit of work,\n has completed. Calls to beginRequest\n and endRequest are not nested. Multiple\n calls to endRequest without an intervening call to beginRequest\n is not an error. The first endRequest call\n marks the request completed and subsequent calls are treated as\n a no-op. If endRequest is called without an initial call to\n beginRequest is a no-op.\n\n The exact behavior of this method is vendor specific. In particular\n implementations may detect conditions that indicate dependence on\n other work such as an open transaction. It is recommended though not\n required that implementations throw a SQLException if there is an active\n transaction and endRequest is called."}, {"method_name": "setShardingKeyIfValid", "method_sig": "default boolean setShardingKeyIfValid (ShardingKey shardingKey,\n                                      ShardingKey superShardingKey,\n                                      int timeout)\n                               throws SQLException", "description": "Sets and validates the sharding keys for this connection. A null\n value may be specified for the sharding Key. The validity\n of a null sharding key is vendor-specific. Consult your vendor's\n documentation for additional information."}, {"method_name": "setShardingKeyIfValid", "method_sig": "default boolean setShardingKeyIfValid (ShardingKey shardingKey,\n                                      int timeout)\n                               throws SQLException", "description": "Sets and validates the sharding key for this connection. A null\n value may be specified for the sharding Key. The validity\n of a null sharding key is vendor-specific. Consult your vendor's\n documentation for additional information."}, {"method_name": "setShardingKey", "method_sig": "default void setShardingKey (ShardingKey shardingKey,\n                            ShardingKey superShardingKey)\n                     throws SQLException", "description": "Specifies a shardingKey and superShardingKey to use with this Connection"}, {"method_name": "setShardingKey", "method_sig": "default void setShardingKey (ShardingKey shardingKey)\n                     throws SQLException", "description": "Specifies a shardingKey to use with this Connection"}]}