{"name": "Class NamespaceSupport", "module": "java.xml", "package": "org.xml.sax.helpers", "text": "Encapsulate Namespace logic for use by applications using SAX,\n or internally by SAX drivers.\n\n \nThis module, both source code and documentation, is in the\n Public Domain, and comes with NO WARRANTY.\n See http://www.saxproject.org\n for further information.\n \nThis class encapsulates the logic of Namespace processing: it\n tracks the declarations currently in force for each context and\n automatically processes qualified XML names into their Namespace\n parts; it can also be used in reverse for generating XML qnames\n from Namespaces.\nNamespace support objects are reusable, but the reset method\n must be invoked between each session.\nHere is a simple session:\n\n String parts[] = new String[3];\n NamespaceSupport support = new NamespaceSupport();\n\n support.pushContext();\n support.declarePrefix(\"\", \"http://www.w3.org/1999/xhtml\");\n support.declarePrefix(\"dc\", \"http://www.purl.org/dc#\");\n\n parts = support.processName(\"p\", parts, false);\n System.out.println(\"Namespace URI: \" + parts[0]);\n System.out.println(\"Local name: \" + parts[1]);\n System.out.println(\"Raw name: \" + parts[2]);\n\n parts = support.processName(\"dc:title\", parts, false);\n System.out.println(\"Namespace URI: \" + parts[0]);\n System.out.println(\"Local name: \" + parts[1]);\n System.out.println(\"Raw name: \" + parts[2]);\n\n support.popContext();\n \nNote that this class is optimized for the use case where most\n elements do not contain Namespace declarations: if the same\n prefix/URI mapping is repeated for each context (for example), this\n class will be somewhat less efficient.\nAlthough SAX drivers (parsers) may choose to use this class to\n implement namespace handling, they are not required to do so.\n Applications must track namespace information themselves if they\n want to use namespace information.", "codes": ["public class NamespaceSupport\nextends Object"], "fields": [{"field_name": "XMLNS", "field_sig": "public static final\u00a0String XMLNS", "description": "The XML Namespace URI as a constant.\n The value is http://www.w3.org/XML/1998/namespace\n as defined in the \"Namespaces in XML\" * recommendation.\n\n This is the Namespace URI that is automatically mapped\n to the \"xml\" prefix."}, {"field_name": "NSDECL", "field_sig": "public static final\u00a0String NSDECL", "description": "The namespace declaration URI as a constant.\n The value is http://www.w3.org/xmlns/2000/, as defined\n in a backwards-incompatible erratum to the \"Namespaces in XML\"\n recommendation.  Because that erratum postdated SAX2, SAX2 defaults\n to the original recommendation, and does not normally use this URI.\n\n\n This is the Namespace URI that is optionally applied to\n xmlns and xmlns:* attributes, which are used to\n declare namespaces.  "}], "methods": [{"method_name": "reset", "method_sig": "public void reset()", "description": "Reset this Namespace support object for reuse.\n\n It is necessary to invoke this method before reusing the\n Namespace support object for a new session.  If namespace\n declaration URIs are to be supported, that flag must also\n be set to a non-default value.\n "}, {"method_name": "pushContext", "method_sig": "public void pushContext()", "description": "Start a new Namespace context.\n The new context will automatically inherit\n the declarations of its parent context, but it will also keep\n track of which declarations were made within this context.\n\n Event callback code should start a new context once per element.\n This means being ready to call this in either of two places.\n For elements that don't include namespace declarations, the\n ContentHandler.startElement() callback is the right place.\n For elements with such a declaration, it'd done in the first\n ContentHandler.startPrefixMapping() callback.\n A boolean flag can be used to\n track whether a context has been started yet.  When either of\n those methods is called, it checks the flag to see if a new context\n needs to be started.  If so, it starts the context and sets the\n flag.  After ContentHandler.startElement()\n does that, it always clears the flag.\n\n Normally, SAX drivers would push a new context at the beginning\n of each XML element.  Then they perform a first pass over the\n attributes to process all namespace declarations, making\n ContentHandler.startPrefixMapping() callbacks.\n Then a second pass is made, to determine the namespace-qualified\n names for all attributes and for the element name.\n Finally all the information for the\n ContentHandler.startElement() callback is available,\n so it can then be made.\n\n The Namespace support object always starts with a base context\n already in force: in this context, only the \"xml\" prefix is\n declared."}, {"method_name": "popContext", "method_sig": "public void popContext()", "description": "Revert to the previous Namespace context.\n\n Normally, you should pop the context at the end of each\n XML element.  After popping the context, all Namespace prefix\n mappings that were previously in force are restored.\nYou must not attempt to declare additional Namespace\n prefixes after popping a context, unless you push another\n context first."}, {"method_name": "declarePrefix", "method_sig": "public boolean declarePrefix (String prefix,\n                             String uri)", "description": "Declare a Namespace prefix.  All prefixes must be declared\n before they are referenced.  For example, a SAX driver (parser)\n would scan an element's attributes\n in two passes:  first for namespace declarations,\n then a second pass using processName() to\n interpret prefixes against (potentially redefined) prefixes.\n\n This method declares a prefix in the current Namespace\n context; the prefix will remain in force until this context\n is popped, unless it is shadowed in a descendant context.\nTo declare the default element Namespace, use the empty string as\n the prefix.\nNote that there is an asymmetry in this library: getPrefix will not return the \"\" prefix,\n even if you have declared a default element namespace.\n To check for a default namespace,\n you have to look it up explicitly using getURI.\n This asymmetry exists to make it easier to look up prefixes\n for attribute names, where the default prefix is not allowed."}, {"method_name": "processName", "method_sig": "public String[] processName (String qName,\n                            String[] parts,\n                            boolean isAttribute)", "description": "Process a raw XML qualified name, after all declarations in the\n current context have been handled by declarePrefix().\n\n This method processes a raw XML qualified name in the\n current context by removing the prefix and looking it up among\n the prefixes currently declared.  The return value will be the\n array supplied by the caller, filled in as follows:\n\nparts[0]\nThe Namespace URI, or an empty string if none is\n  in use.\nparts[1]\nThe local name (without prefix).\nparts[2]\nThe original raw name.\n\nAll of the strings in the array will be internalized.  If\n the raw name has a prefix that has not been declared, then\n the return value will be null.\nNote that attribute names are processed differently than\n element names: an unprefixed element name will receive the\n default Namespace (if any), while an unprefixed attribute name\n will not."}, {"method_name": "getURI", "method_sig": "public String getURI (String prefix)", "description": "Look up a prefix and get the currently-mapped Namespace URI.\n\n This method looks up the prefix in the current context.\n Use the empty string (\"\") for the default Namespace."}, {"method_name": "getPrefixes", "method_sig": "public Enumeration<String> getPrefixes()", "description": "Return an enumeration of all prefixes whose declarations are\n active in the current context.\n This includes declarations from parent contexts that have\n not been overridden.\n\n Note: if there is a default prefix, it will not be\n returned in this enumeration; check for the default prefix\n using the getURI with an argument of \"\"."}, {"method_name": "getPrefix", "method_sig": "public String getPrefix (String uri)", "description": "Return one of the prefixes mapped to a Namespace URI.\n\n If more than one prefix is currently mapped to the same\n URI, this method will make an arbitrary selection; if you\n want all of the prefixes, use the getPrefixes()\n method instead.\nNote: this will never return the empty (default) prefix;\n to check for a default prefix, use the getURI\n method with an argument of \"\"."}, {"method_name": "getPrefixes", "method_sig": "public Enumeration<String> getPrefixes (String uri)", "description": "Return an enumeration of all prefixes for a given URI whose\n declarations are active in the current context.\n This includes declarations from parent contexts that have\n not been overridden.\n\n This method returns prefixes mapped to a specific Namespace\n URI.  The xml: prefix will be included.  If you want only one\n prefix that's mapped to the Namespace URI, and you don't care\n which one you get, use the getPrefix\n  method instead.\nNote: the empty (default) prefix is never included\n in this enumeration; to check for the presence of a default\n Namespace, use the getURI method with an\n argument of \"\"."}, {"method_name": "getDeclaredPrefixes", "method_sig": "public Enumeration<String> getDeclaredPrefixes()", "description": "Return an enumeration of all prefixes declared in this context.\n\n The empty (default) prefix will be included in this\n enumeration; note that this behaviour differs from that of\n getPrefix(java.lang.String) and getPrefixes()."}, {"method_name": "setNamespaceDeclUris", "method_sig": "public void setNamespaceDeclUris (boolean value)", "description": "Controls whether namespace declaration attributes are placed\n into the NSDECL namespace\n by processName().  This may only be\n changed before any contexts have been pushed."}, {"method_name": "isNamespaceDeclUris", "method_sig": "public boolean isNamespaceDeclUris()", "description": "Returns true if namespace declaration attributes are placed into\n a namespace.  This behavior is not the default."}]}