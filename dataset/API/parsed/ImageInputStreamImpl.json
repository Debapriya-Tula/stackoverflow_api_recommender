{"name": "Class ImageInputStreamImpl", "module": "java.desktop", "package": "javax.imageio.stream", "text": "An abstract class implementing the ImageInputStream interface.\n This class is designed to reduce the number of methods that must\n be implemented by subclasses.\n\n  In particular, this class handles most or all of the details of\n byte order interpretation, buffering, mark/reset, discarding,\n closing, and disposing.", "codes": ["public abstract class ImageInputStreamImpl\nextends Object\nimplements ImageInputStream"], "fields": [{"field_name": "byteOrder", "field_sig": "protected\u00a0ByteOrder byteOrder", "description": "The byte order of the stream as an instance of the enumeration\n class java.nio.ByteOrder, where\n ByteOrder.BIG_ENDIAN indicates network byte order\n and ByteOrder.LITTLE_ENDIAN indicates the reverse\n order.  By default, the value is\n ByteOrder.BIG_ENDIAN."}, {"field_name": "streamPos", "field_sig": "protected\u00a0long streamPos", "description": "The current read position within the stream.  Subclasses are\n responsible for keeping this value current from any method they\n override that alters the read position."}, {"field_name": "bitOffset", "field_sig": "protected\u00a0int bitOffset", "description": "The current bit offset within the stream.  Subclasses are\n responsible for keeping this value current from any method they\n override that alters the bit offset."}, {"field_name": "flushedPos", "field_sig": "protected\u00a0long flushedPos", "description": "The position prior to which data may be discarded.  Seeking\n to a smaller position is not allowed.  flushedPos\n will always be >= 0."}], "methods": [{"method_name": "checkClosed", "method_sig": "protected final void checkClosed()\n                          throws IOException", "description": "Throws an IOException if the stream has been closed.\n Subclasses may call this method from any of their methods that\n require the stream not to be closed."}, {"method_name": "read", "method_sig": "public abstract int read()\n                  throws IOException", "description": "Reads a single byte from the stream and returns it as an\n int between 0 and 255.  If EOF is reached,\n -1 is returned.\n\n  Subclasses must provide an implementation for this method.\n The subclass implementation should update the stream position\n before exiting.\n\n  The bit offset within the stream must be reset to zero before\n the read occurs."}, {"method_name": "read", "method_sig": "public int read (byte[] b)\n         throws IOException", "description": "A convenience method that calls read(b, 0, b.length).\n\n  The bit offset within the stream is reset to zero before\n the read occurs."}, {"method_name": "read", "method_sig": "public abstract int read (byte[] b,\n                         int off,\n                         int len)\n                  throws IOException", "description": "Reads up to len bytes from the stream, and stores\n them into b starting at index off.\n If no bytes can be read because the end of the stream has been\n reached, -1 is returned.\n\n  The bit offset within the stream must be reset to zero before\n the read occurs.\n\n  Subclasses must provide an implementation for this method.\n The subclass implementation should update the stream position\n before exiting."}, {"method_name": "length", "method_sig": "public long length()", "description": "Returns -1L to indicate that the stream has unknown\n length.  Subclasses must override this method to provide actual\n length information."}, {"method_name": "skipBytes", "method_sig": "public int skipBytes (int n)\n              throws IOException", "description": "Advances the current stream position by calling\n seek(getStreamPosition() + n).\n\n  The bit offset is reset to zero."}, {"method_name": "skipBytes", "method_sig": "public long skipBytes (long n)\n               throws IOException", "description": "Advances the current stream position by calling\n seek(getStreamPosition() + n).\n\n  The bit offset is reset to zero."}, {"method_name": "mark", "method_sig": "public void mark()", "description": "Pushes the current stream position onto a stack of marked\n positions."}, {"method_name": "reset", "method_sig": "public void reset()\n           throws IOException", "description": "Resets the current stream byte and bit positions from the stack\n of marked positions.\n\n  An IOException will be thrown if the previous\n marked position lies in the discarded portion of the stream."}, {"method_name": "isCached", "method_sig": "public boolean isCached()", "description": "Default implementation returns false.  Subclasses should\n override this if they cache data."}, {"method_name": "isCachedMemory", "method_sig": "public boolean isCachedMemory()", "description": "Default implementation returns false.  Subclasses should\n override this if they cache data in main memory."}, {"method_name": "isCachedFile", "method_sig": "public boolean isCachedFile()", "description": "Default implementation returns false.  Subclasses should\n override this if they cache data in a temporary file."}, {"method_name": "finalize", "method_sig": "@Deprecated(since=\"9\")\nprotected void finalize()\n                 throws Throwable", "description": "Finalizes this object prior to garbage collection.  The\n close method is called to close any open input\n source.  This method should not be called from application\n code."}]}