{"name": "Class Permissions", "module": "java.base", "package": "java.security", "text": "This class represents a heterogeneous collection of Permissions. That is,\n it contains different types of Permission objects, organized into\n PermissionCollections. For example, if any\n java.io.FilePermission objects are added to an instance of\n this class, they are all stored in a single\n PermissionCollection. It is the PermissionCollection returned by a call to\n the newPermissionCollection method in the FilePermission class.\n Similarly, any java.lang.RuntimePermission objects are\n stored in the PermissionCollection returned by a call to the\n newPermissionCollection method in the\n RuntimePermission class. Thus, this class represents a collection of\n PermissionCollections.\n\n When the add method is called to add a Permission, the\n Permission is stored in the appropriate PermissionCollection. If no such\n collection exists yet, the Permission object's class is determined and the\n newPermissionCollection method is called on that class to create\n the PermissionCollection and add it to the Permissions object. If\n newPermissionCollection returns null, then a default\n PermissionCollection that uses a hashtable will be created and used. Each\n hashtable entry stores a Permission object as both the key and the value.\n\n  Enumerations returned via the elements method are\n not fail-fast.  Modifications to a collection should not be\n performed while enumerating over that collection.", "codes": ["public final class Permissions\nextends PermissionCollection\nimplements Serializable"], "fields": [], "methods": [{"method_name": "add", "method_sig": "public void add (Permission permission)", "description": "Adds a permission object to the PermissionCollection for the class the\n permission belongs to. For example, if permission is a\n FilePermission, it is added to the FilePermissionCollection stored\n in this Permissions object.\n\n This method creates\n a new PermissionCollection object (and adds the permission to it)\n if an appropriate collection does not yet exist."}, {"method_name": "implies", "method_sig": "public boolean implies (Permission permission)", "description": "Checks to see if this object's PermissionCollection for permissions of\n the specified permission's class implies the permissions\n expressed in the permission object. Returns true if the\n combination of permissions in the appropriate PermissionCollection\n (e.g., a FilePermissionCollection for a FilePermission) together\n imply the specified permission.\n\n For example, suppose there is a FilePermissionCollection in this\n Permissions object, and it contains one FilePermission that specifies\n \"read\" access for  all files in all subdirectories of the \"/tmp\"\n directory, and another FilePermission that specifies \"write\" access\n for all files in the \"/tmp/scratch/foo\" directory.\n Then if the implies method\n is called with a permission specifying both \"read\" and \"write\" access\n to files in the \"/tmp/scratch/foo\" directory, true is\n returned.\n\n Additionally, if this PermissionCollection contains the\n AllPermission, this method will always return true."}, {"method_name": "elements", "method_sig": "public Enumeration<Permission> elements()", "description": "Returns an enumeration of all the Permission objects in all the\n PermissionCollections in this Permissions object."}]}