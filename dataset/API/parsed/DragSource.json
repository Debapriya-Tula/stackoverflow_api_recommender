{"name": "Class DragSource", "module": "java.desktop", "package": "java.awt.dnd", "text": "The DragSource is the entity responsible\n for the initiation of the Drag\n and Drop operation, and may be used in a number of scenarios:\n \n1 default instance per JVM for the lifetime of that JVM.\n 1 instance per class of potential Drag Initiator object (e.g\n TextField). [implementation dependent]\n 1 per instance of a particular\n Component, or application specific\n object associated with a Component\n instance in the GUI. [implementation dependent]\n Some other arbitrary association. [implementation dependent]\n\n\n Once the DragSource is\n obtained, a DragGestureRecognizer should\n also be obtained to associate the DragSource\n with a particular\n Component.\n \n The initial interpretation of the user's gesture,\n and the subsequent starting of the drag operation\n are the responsibility of the implementing\n Component, which is usually\n implemented by a DragGestureRecognizer.\n\n When a drag gesture occurs, the\n DragSource's\n startDrag() method shall be\n invoked in order to cause processing\n of the user's navigational\n gestures and delivery of Drag and Drop\n protocol notifications. A\n DragSource shall only\n permit a single Drag and Drop operation to be\n current at any one time, and shall\n reject any further startDrag() requests\n by throwing an IllegalDnDOperationException\n until such time as the extant operation is complete.\n \n The startDrag() method invokes the\n createDragSourceContext() method to\n instantiate an appropriate\n DragSourceContext\n and associate the DragSourceContextPeer\n with that.\n \n If the Drag and Drop System is\n unable to initiate a drag operation for\n some reason, the startDrag() method throws\n a java.awt.dnd.InvalidDnDOperationException\n to signal such a condition. Typically this\n exception is thrown when the underlying platform\n system is either not in a state to\n initiate a drag, or the parameters specified are invalid.\n \n Note that during the drag, the\n set of operations exposed by the source\n at the start of the drag operation may not change\n until the operation is complete.\n The operation(s) are constant for the\n duration of the operation with respect to the\n DragSource.", "codes": ["public class DragSource\nextends Object\nimplements Serializable"], "fields": [{"field_name": "DefaultCopyDrop", "field_sig": "public static final\u00a0Cursor DefaultCopyDrop", "description": "The default Cursor to use with a copy operation indicating\n that a drop is currently allowed. null if\n GraphicsEnvironment.isHeadless() returns true."}, {"field_name": "DefaultMoveDrop", "field_sig": "public static final\u00a0Cursor DefaultMoveDrop", "description": "The default Cursor to use with a move operation indicating\n that a drop is currently allowed. null if\n GraphicsEnvironment.isHeadless() returns true."}, {"field_name": "DefaultLinkDrop", "field_sig": "public static final\u00a0Cursor DefaultLinkDrop", "description": "The default Cursor to use with a link operation indicating\n that a drop is currently allowed. null if\n GraphicsEnvironment.isHeadless() returns true."}, {"field_name": "DefaultCopyNoDrop", "field_sig": "public static final\u00a0Cursor DefaultCopyNoDrop", "description": "The default Cursor to use with a copy operation indicating\n that a drop is currently not allowed. null if\n GraphicsEnvironment.isHeadless() returns true."}, {"field_name": "DefaultMoveNoDrop", "field_sig": "public static final\u00a0Cursor DefaultMoveNoDrop", "description": "The default Cursor to use with a move operation indicating\n that a drop is currently not allowed. null if\n GraphicsEnvironment.isHeadless() returns true."}, {"field_name": "DefaultLinkNoDrop", "field_sig": "public static final\u00a0Cursor DefaultLinkNoDrop", "description": "The default Cursor to use with a link operation indicating\n that a drop is currently not allowed. null if\n GraphicsEnvironment.isHeadless() returns true."}], "methods": [{"method_name": "getDefaultDragSource", "method_sig": "public static DragSource getDefaultDragSource()", "description": "Gets the DragSource object associated with\n the underlying platform."}, {"method_name": "isDragImageSupported", "method_sig": "public static boolean isDragImageSupported()", "description": "Reports\n whether or not drag\n Image support\n is available on the underlying platform."}, {"method_name": "startDrag", "method_sig": "public void startDrag (DragGestureEvent trigger,\n                      Cursor dragCursor,\n                      Image dragImage,\n                      Point imageOffset,\n                      Transferable transferable,\n                      DragSourceListener dsl,\n                      FlavorMap flavorMap)\n               throws InvalidDnDOperationException", "description": "Start a drag, given the DragGestureEvent\n that initiated the drag, the initial\n Cursor to use,\n the Image to drag,\n the offset of the Image origin\n from the hotspot of the Cursor at\n the instant of the trigger,\n the Transferable subject data\n of the drag, the DragSourceListener,\n and the FlavorMap."}, {"method_name": "startDrag", "method_sig": "public void startDrag (DragGestureEvent trigger,\n                      Cursor dragCursor,\n                      Transferable transferable,\n                      DragSourceListener dsl,\n                      FlavorMap flavorMap)\n               throws InvalidDnDOperationException", "description": "Start a drag, given the DragGestureEvent\n that initiated the drag, the initial\n Cursor to use,\n the Transferable subject data\n of the drag, the DragSourceListener,\n and the FlavorMap."}, {"method_name": "startDrag", "method_sig": "public void startDrag (DragGestureEvent trigger,\n                      Cursor dragCursor,\n                      Image dragImage,\n                      Point dragOffset,\n                      Transferable transferable,\n                      DragSourceListener dsl)\n               throws InvalidDnDOperationException", "description": "Start a drag, given the DragGestureEvent\n that initiated the drag, the initial Cursor\n to use,\n the Image to drag,\n the offset of the Image origin\n from the hotspot of the Cursor\n at the instant of the trigger,\n the subject data of the drag, and\n the DragSourceListener."}, {"method_name": "startDrag", "method_sig": "public void startDrag (DragGestureEvent trigger,\n                      Cursor dragCursor,\n                      Transferable transferable,\n                      DragSourceListener dsl)\n               throws InvalidDnDOperationException", "description": "Start a drag, given the DragGestureEvent\n that initiated the drag, the initial\n Cursor to\n use,\n the Transferable subject data\n of the drag, and the DragSourceListener."}, {"method_name": "createDragSourceContext", "method_sig": "protected DragSourceContext createDragSourceContext (DragGestureEvent dgl,\n                                                    Cursor dragCursor,\n                                                    Image dragImage,\n                                                    Point imageOffset,\n                                                    Transferable t,\n                                                    DragSourceListener dsl)", "description": "Creates the DragSourceContext to handle the current drag\n operation.\n \n To incorporate a new DragSourceContext\n subclass, subclass DragSource and\n override this method.\n \n If dragImage is null, no image is used\n to represent the drag over feedback for this drag operation, but\n NullPointerException is not thrown.\n \n If dsl is null, no drag source listener\n is registered with the created DragSourceContext,\n but NullPointerException is not thrown."}, {"method_name": "getFlavorMap", "method_sig": "public FlavorMap getFlavorMap()", "description": "This method returns the\n FlavorMap for this DragSource."}, {"method_name": "createDragGestureRecognizer", "method_sig": "public <T extends DragGestureRecognizer> T createDragGestureRecognizer (Class<T> recognizerAbstractClass,\n                                                                       Component c,\n                                                                       int actions,\n                                                                       DragGestureListener dgl)", "description": "Creates a new DragGestureRecognizer\n that implements the specified\n abstract subclass of\n DragGestureRecognizer, and\n sets the specified Component\n and DragGestureListener on\n the newly created object."}, {"method_name": "createDefaultDragGestureRecognizer", "method_sig": "public DragGestureRecognizer createDefaultDragGestureRecognizer (Component c,\n                                                                int actions,\n                                                                DragGestureListener dgl)", "description": "Creates a new DragGestureRecognizer\n that implements the default\n abstract subclass of DragGestureRecognizer\n for this DragSource,\n and sets the specified Component\n and DragGestureListener on the\n newly created object.\n\n For this DragSource\n the default is MouseDragGestureRecognizer."}, {"method_name": "addDragSourceListener", "method_sig": "public void addDragSourceListener (DragSourceListener dsl)", "description": "Adds the specified DragSourceListener to this\n DragSource to receive drag source events during drag\n operations initiated with this DragSource.\n If a null listener is specified, no action is taken and no\n exception is thrown."}, {"method_name": "removeDragSourceListener", "method_sig": "public void removeDragSourceListener (DragSourceListener dsl)", "description": "Removes the specified DragSourceListener from this\n DragSource.\n If a null listener is specified, no action is taken and no\n exception is thrown.\n If the listener specified by the argument was not previously added to\n this DragSource, no action is taken and no exception\n is thrown."}, {"method_name": "getDragSourceListeners", "method_sig": "public DragSourceListener[] getDragSourceListeners()", "description": "Gets all the DragSourceListeners\n registered with this DragSource."}, {"method_name": "addDragSourceMotionListener", "method_sig": "public void addDragSourceMotionListener (DragSourceMotionListener dsml)", "description": "Adds the specified DragSourceMotionListener to this\n DragSource to receive drag motion events during drag\n operations initiated with this DragSource.\n If a null listener is specified, no action is taken and no\n exception is thrown."}, {"method_name": "removeDragSourceMotionListener", "method_sig": "public void removeDragSourceMotionListener (DragSourceMotionListener dsml)", "description": "Removes the specified DragSourceMotionListener from this\n DragSource.\n If a null listener is specified, no action is taken and no\n exception is thrown.\n If the listener specified by the argument was not previously added to\n this DragSource, no action is taken and no exception\n is thrown."}, {"method_name": "getDragSourceMotionListeners", "method_sig": "public DragSourceMotionListener[] getDragSourceMotionListeners()", "description": "Gets all of the  DragSourceMotionListeners\n registered with this DragSource."}, {"method_name": "getListeners", "method_sig": "public <T extends EventListener> T[] getListeners (Class<T> listenerType)", "description": "Gets all the objects currently registered as\n FooListeners upon this DragSource.\n FooListeners are registered using the\n addFooListener method."}, {"method_name": "getDragThreshold", "method_sig": "public static int getDragThreshold()", "description": "Returns the drag gesture motion threshold. The drag gesture motion threshold\n defines the recommended behavior for MouseDragGestureRecognizers.\n \n If the system property awt.dnd.drag.threshold is set to\n a positive integer, this method returns the value of the system property;\n otherwise if a pertinent desktop property is available and supported by\n the implementation of the Java platform, this method returns the value of\n that property; otherwise this method returns some default value.\n The pertinent desktop property can be queried using\n java.awt.Toolkit.getDesktopProperty(\"DnD.gestureMotionThreshold\")."}]}