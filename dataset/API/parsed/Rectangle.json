{"name": "Class Rectangle", "module": "java.desktop", "package": "java.awt", "text": "A Rectangle specifies an area in a coordinate space that is\n enclosed by the Rectangle object's upper-left point\n (x,y)\n in the coordinate space, its width, and its height.\n \n A Rectangle object's width and\n height are public fields. The constructors\n that create a Rectangle, and the methods that can modify\n one, do not prevent setting a negative value for width or height.\n \n\n A Rectangle whose width or height is exactly zero has location\n along those axes with zero dimension, but is otherwise considered empty.\n The isEmpty() method will return true for such a Rectangle.\n Methods which test if an empty Rectangle contains or intersects\n a point or rectangle will always return false if either dimension is zero.\n Methods which combine such a Rectangle with a point or rectangle\n will include the location of the Rectangle on that axis in the\n result as if the add(Point) method were being called.\n \n\n A Rectangle whose width or height is negative has neither\n location nor dimension along those axes with negative dimensions.\n Such a Rectangle is treated as non-existent along those axes.\n Such a Rectangle is also empty with respect to containment\n calculations and methods which test if it contains or intersects a\n point or rectangle will always return false.\n Methods which combine such a Rectangle with a point or rectangle\n will ignore the Rectangle entirely in generating the result.\n If two Rectangle objects are combined and each has a negative\n dimension, the result will have at least one negative dimension.\n \n\n Methods which affect only the location of a Rectangle will\n operate on its location regardless of whether or not it has a negative\n or zero dimension along either axis.\n \n Note that a Rectangle constructed with the default no-argument\n constructor will have dimensions of 0x0 and therefore be empty.\n That Rectangle will still have a location of (0,0) and\n will contribute that location to the union and add operations.\n Code attempting to accumulate the bounds of a set of points should\n therefore initially construct the Rectangle with a specifically\n negative width and height or it should use the first point in the set\n to construct the Rectangle.\n For example:\n \n     Rectangle bounds = new Rectangle(0, 0, -1, -1);\n     for (int i = 0; i < points.length; i++) {\n         bounds.add(points[i]);\n     }\n \n or if we know that the points array contains at least one point:\n \n     Rectangle bounds = new Rectangle(points[0]);\n     for (int i = 1; i < points.length; i++) {\n         bounds.add(points[i]);\n     }\n \n\n This class uses 32-bit integers to store its location and dimensions.\n Frequently operations may produce a result that exceeds the range of\n a 32-bit integer.\n The methods will calculate their results in a way that avoids any\n 32-bit overflow for intermediate results and then choose the best\n representation to store the final results back into the 32-bit fields\n which hold the location and dimensions.\n The location of the result will be stored into the x and\n y fields by clipping the true result to the nearest 32-bit value.\n The values stored into the width and height dimension\n fields will be chosen as the 32-bit values that encompass the largest\n part of the true result as possible.\n Generally this means that the dimension will be clipped independently\n to the range of 32-bit integers except that if the location had to be\n moved to store it into its pair of 32-bit fields then the dimensions\n will be adjusted relative to the \"best representation\" of the location.\n If the true result had a negative dimension and was therefore\n non-existent along one or both axes, the stored dimensions will be\n negative numbers in those axes.\n If the true result had a location that could be represented within\n the range of 32-bit integers, but zero dimension along one or both\n axes, then the stored dimensions will be zero in those axes.", "codes": ["public class Rectangle\nextends Rectangle2D\nimplements Shape, Serializable"], "fields": [{"field_name": "x", "field_sig": "public\u00a0int x", "description": "The X coordinate of the upper-left corner of the Rectangle."}, {"field_name": "y", "field_sig": "public\u00a0int y", "description": "The Y coordinate of the upper-left corner of the Rectangle."}, {"field_name": "width", "field_sig": "public\u00a0int width", "description": "The width of the Rectangle."}, {"field_name": "height", "field_sig": "public\u00a0int height", "description": "The height of the Rectangle."}], "methods": [{"method_name": "getX", "method_sig": "public double getX()", "description": "Returns the X coordinate of the bounding Rectangle in\n double precision."}, {"method_name": "getY", "method_sig": "public double getY()", "description": "Returns the Y coordinate of the bounding Rectangle in\n double precision."}, {"method_name": "getWidth", "method_sig": "public double getWidth()", "description": "Returns the width of the bounding Rectangle in\n double precision."}, {"method_name": "getHeight", "method_sig": "public double getHeight()", "description": "Returns the height of the bounding Rectangle in\n double precision."}, {"method_name": "getBounds", "method_sig": "public Rectangle getBounds()", "description": "Gets the bounding Rectangle of this Rectangle.\n \n This method is included for completeness, to parallel the\n getBounds method of\n Component."}, {"method_name": "getBounds2D", "method_sig": "public Rectangle2D getBounds2D()", "description": "Returns a high precision and more accurate bounding box of\n the Shape than the getBounds method.\n Note that there is no guarantee that the returned\n Rectangle2D is the smallest bounding box that encloses\n the Shape, only that the Shape lies\n entirely within the indicated Rectangle2D.  The\n bounding box returned by this method is usually tighter than that\n returned by the getBounds method and never fails due\n to overflow problems since the return value can be an instance of\n the Rectangle2D that uses double precision values to\n store the dimensions.\n\n \n Note that the\n \n definition of insideness can lead to situations where points\n on the defining outline of the shape may not be considered\n contained in the returned bounds object, but only in cases\n where those points are also not considered contained in the original\n shape.\n \n\n If a point is inside the shape according to the\n contains(point) method, then it must\n be inside the returned Rectangle2D bounds object according\n to the contains(point) method of the\n bounds. Specifically:\n \n\nshape.contains(p) requires bounds.contains(p)\n\n\n If a point is not inside the shape, then it might\n still be contained in the bounds object:\n \n\nbounds.contains(p) does not imply shape.contains(p)\n"}, {"method_name": "setBounds", "method_sig": "public void setBounds (Rectangle r)", "description": "Sets the bounding Rectangle of this Rectangle\n to match the specified Rectangle.\n \n This method is included for completeness, to parallel the\n setBounds method of Component."}, {"method_name": "setBounds", "method_sig": "public void setBounds (int x,\n                      int y,\n                      int width,\n                      int height)", "description": "Sets the bounding Rectangle of this\n Rectangle to the specified\n x, y, width,\n and height.\n \n This method is included for completeness, to parallel the\n setBounds method of Component."}, {"method_name": "setRect", "method_sig": "public void setRect (double x,\n                    double y,\n                    double width,\n                    double height)", "description": "Sets the bounds of this Rectangle to the integer bounds\n which encompass the specified x, y, width,\n and height.\n If the parameters specify a Rectangle that exceeds the\n maximum range of integers, the result will be the best\n representation of the specified Rectangle intersected\n with the maximum integer bounds."}, {"method_name": "reshape", "method_sig": "@Deprecated\npublic void reshape (int x,\n                    int y,\n                    int width,\n                    int height)", "description": "Sets the bounding Rectangle of this\n Rectangle to the specified\n x, y, width,\n and height."}, {"method_name": "getLocation", "method_sig": "public Point getLocation()", "description": "Returns the location of this Rectangle.\n \n This method is included for completeness, to parallel the\n getLocation method of Component."}, {"method_name": "setLocation", "method_sig": "public void setLocation (Point p)", "description": "Moves this Rectangle to the specified location.\n \n This method is included for completeness, to parallel the\n setLocation method of Component."}, {"method_name": "setLocation", "method_sig": "public void setLocation (int x,\n                        int y)", "description": "Moves this Rectangle to the specified location.\n \n This method is included for completeness, to parallel the\n setLocation method of Component."}, {"method_name": "move", "method_sig": "@Deprecated\npublic void move (int x,\n                 int y)", "description": "Moves this Rectangle to the specified location."}, {"method_name": "translate", "method_sig": "public void translate (int dx,\n                      int dy)", "description": "Translates this Rectangle the indicated distance,\n to the right along the X coordinate axis, and\n downward along the Y coordinate axis."}, {"method_name": "getSize", "method_sig": "public Dimension getSize()", "description": "Gets the size of this Rectangle, represented by\n the returned Dimension.\n \n This method is included for completeness, to parallel the\n getSize method of Component."}, {"method_name": "setSize", "method_sig": "public void setSize (Dimension d)", "description": "Sets the size of this Rectangle to match the\n specified Dimension.\n \n This method is included for completeness, to parallel the\n setSize method of Component."}, {"method_name": "setSize", "method_sig": "public void setSize (int width,\n                    int height)", "description": "Sets the size of this Rectangle to the specified\n width and height.\n \n This method is included for completeness, to parallel the\n setSize method of Component."}, {"method_name": "resize", "method_sig": "@Deprecated\npublic void resize (int width,\n                   int height)", "description": "Sets the size of this Rectangle to the specified\n width and height."}, {"method_name": "contains", "method_sig": "public boolean contains (Point p)", "description": "Checks whether or not this Rectangle contains the\n specified Point."}, {"method_name": "contains", "method_sig": "public boolean contains (int x,\n                        int y)", "description": "Checks whether or not this Rectangle contains the\n point at the specified location (x,y)."}, {"method_name": "contains", "method_sig": "public boolean contains (Rectangle r)", "description": "Checks whether or not this Rectangle entirely contains\n the specified Rectangle."}, {"method_name": "contains", "method_sig": "public boolean contains (int X,\n                        int Y,\n                        int W,\n                        int H)", "description": "Checks whether this Rectangle entirely contains\n the Rectangle\n at the specified location (X,Y) with the\n specified dimensions (W,H)."}, {"method_name": "inside", "method_sig": "@Deprecated\npublic boolean inside (int X,\n                      int Y)", "description": "Checks whether or not this Rectangle contains the\n point at the specified location (X,Y)."}, {"method_name": "intersects", "method_sig": "public boolean intersects (Rectangle r)", "description": "Determines whether or not this Rectangle and the specified\n Rectangle intersect. Two rectangles intersect if\n their intersection is nonempty."}, {"method_name": "intersection", "method_sig": "public Rectangle intersection (Rectangle r)", "description": "Computes the intersection of this Rectangle with the\n specified Rectangle. Returns a new Rectangle\n that represents the intersection of the two rectangles.\n If the two rectangles do not intersect, the result will be\n an empty rectangle."}, {"method_name": "union", "method_sig": "public Rectangle union (Rectangle r)", "description": "Computes the union of this Rectangle with the\n specified Rectangle. Returns a new\n Rectangle that\n represents the union of the two rectangles.\n \n If either Rectangle has any dimension less than zero\n the rules for non-existent rectangles\n apply.\n If only one has a dimension less than zero, then the result\n will be a copy of the other Rectangle.\n If both have dimension less than zero, then the result will\n have at least one dimension less than zero.\n \n If the resulting Rectangle would have a dimension\n too large to be expressed as an int, the result\n will have a dimension of Integer.MAX_VALUE along\n that dimension."}, {"method_name": "add", "method_sig": "public void add (int newx,\n                int newy)", "description": "Adds a point, specified by the integer arguments newx,newy\n to the bounds of this Rectangle.\n \n If this Rectangle has any dimension less than zero,\n the rules for non-existent\n rectangles apply.\n In that case, the new bounds of this Rectangle will\n have a location equal to the specified coordinates and\n width and height equal to zero.\n \n After adding a point, a call to contains with the\n added point as an argument does not necessarily return\n true. The contains method does not\n return true for points on the right or bottom\n edges of a Rectangle. Therefore, if the added point\n falls on the right or bottom edge of the enlarged\n Rectangle, contains returns\n false for that point.\n If the specified point must be contained within the new\n Rectangle, a 1x1 rectangle should be added instead:\n \n     r.add(newx, newy, 1, 1);\n "}, {"method_name": "add", "method_sig": "public void add (Point pt)", "description": "Adds the specified Point to the bounds of this\n Rectangle.\n \n If this Rectangle has any dimension less than zero,\n the rules for non-existent\n rectangles apply.\n In that case, the new bounds of this Rectangle will\n have a location equal to the coordinates of the specified\n Point and width and height equal to zero.\n \n After adding a Point, a call to contains\n with the added Point as an argument does not\n necessarily return true. The contains\n method does not return true for points on the right\n or bottom edges of a Rectangle. Therefore if the added\n Point falls on the right or bottom edge of the\n enlarged Rectangle, contains returns\n false for that Point.\n If the specified point must be contained within the new\n Rectangle, a 1x1 rectangle should be added instead:\n \n     r.add(pt.x, pt.y, 1, 1);\n "}, {"method_name": "add", "method_sig": "public void add (Rectangle r)", "description": "Adds a Rectangle to this Rectangle.\n The resulting Rectangle is the union of the two\n rectangles.\n \n If either Rectangle has any dimension less than 0, the\n result will have the dimensions of the other Rectangle.\n If both Rectangles have at least one dimension less\n than 0, the result will have at least one dimension less than 0.\n \n If either Rectangle has one or both dimensions equal\n to 0, the result along those axes with 0 dimensions will be\n equivalent to the results obtained by adding the corresponding\n origin coordinate to the result rectangle along that axis,\n similar to the operation of the add(Point) method,\n but contribute no further dimension beyond that.\n \n If the resulting Rectangle would have a dimension\n too large to be expressed as an int, the result\n will have a dimension of Integer.MAX_VALUE along\n that dimension."}, {"method_name": "grow", "method_sig": "public void grow (int h,\n                 int v)", "description": "Resizes the Rectangle both horizontally and vertically.\n \n This method modifies the Rectangle so that it is\n h units larger on both the left and right side,\n and v units larger at both the top and bottom.\n \n The new Rectangle has (x - h, y - v)\n as its upper-left corner,\n width of (width + 2h),\n and a height of (height + 2v).\n \n If negative values are supplied for h and\n v, the size of the Rectangle\n decreases accordingly.\n The grow method will check for integer overflow\n and underflow, but does not check whether the resulting\n values of width and height grow\n from negative to non-negative or shrink from non-negative\n to negative."}, {"method_name": "isEmpty", "method_sig": "public boolean isEmpty()", "description": "Determines whether the RectangularShape is empty.\n When the RectangularShape is empty, it encloses no\n area."}, {"method_name": "outcode", "method_sig": "public int outcode (double x,\n                   double y)", "description": "Determines where the specified coordinates lie with respect\n to this Rectangle2D.\n This method computes a binary OR of the appropriate mask values\n indicating, for each side of this Rectangle2D,\n whether or not the specified coordinates are on the same side\n of the edge as the rest of this Rectangle2D."}, {"method_name": "createIntersection", "method_sig": "public Rectangle2D createIntersection (Rectangle2D r)", "description": "Returns a new Rectangle2D object representing the\n intersection of this Rectangle2D with the specified\n Rectangle2D."}, {"method_name": "createUnion", "method_sig": "public Rectangle2D createUnion (Rectangle2D r)", "description": "Returns a new Rectangle2D object representing the\n union of this Rectangle2D with the specified\n Rectangle2D."}, {"method_name": "equals", "method_sig": "public boolean equals (Object obj)", "description": "Checks whether two rectangles are equal.\n \n The result is true if and only if the argument is not\n null and is a Rectangle object that has the\n same upper-left corner, width, and height as\n this Rectangle."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a String representing this\n Rectangle and its values."}]}