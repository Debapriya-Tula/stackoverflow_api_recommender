{"name": "Class JTableHeader", "module": "java.desktop", "package": "javax.swing.table", "text": "This is the object which manages the header of the JTable.\n \nWarning:\n Serialized objects of this class will not be compatible with\n future Swing releases. The current serialization support is\n appropriate for short term storage or RMI between applications running\n the same version of Swing.  As of 1.4, support for long term storage\n of all JavaBeans\u2122\n has been added to the java.beans package.\n Please see XMLEncoder.", "codes": ["public class JTableHeader\nextends JComponent\nimplements TableColumnModelListener, Accessible"], "fields": [{"field_name": "table", "field_sig": "protected\u00a0JTable table", "description": "The table for which this object is the header;\n the default is null."}, {"field_name": "columnModel", "field_sig": "protected\u00a0TableColumnModel columnModel", "description": "The TableColumnModel of the table header."}, {"field_name": "reorderingAllowed", "field_sig": "protected\u00a0boolean reorderingAllowed", "description": "If true, reordering of columns are allowed by the user;\n the default is true."}, {"field_name": "resizingAllowed", "field_sig": "protected\u00a0boolean resizingAllowed", "description": "If true, resizing of columns are allowed by the user;\n the default is true."}, {"field_name": "updateTableInRealTime", "field_sig": "protected\u00a0boolean updateTableInRealTime", "description": "Obsolete as of Java 2 platform v1.3.  Real time repaints, in response\n to column dragging or resizing, are now unconditional."}, {"field_name": "resizingColumn", "field_sig": "protected transient\u00a0TableColumn resizingColumn", "description": "The index of the column being resized. null if not resizing."}, {"field_name": "draggedColumn", "field_sig": "protected transient\u00a0TableColumn draggedColumn", "description": "The index of the column being dragged. null if not dragging."}, {"field_name": "draggedDistance", "field_sig": "protected transient\u00a0int draggedDistance", "description": "The distance from its original position the column has been dragged."}], "methods": [{"method_name": "setTable", "method_sig": "@BeanProperty(description=\"The table associated with this header.\")\npublic void setTable (JTable table)", "description": "Sets the table associated with this header."}, {"method_name": "getTable", "method_sig": "public JTable getTable()", "description": "Returns the table associated with this header."}, {"method_name": "setReorderingAllowed", "method_sig": "@BeanProperty(description=\"Whether the user can drag column headers to reorder columns.\")\npublic void setReorderingAllowed (boolean reorderingAllowed)", "description": "Sets whether the user can drag column headers to reorder columns."}, {"method_name": "getReorderingAllowed", "method_sig": "public boolean getReorderingAllowed()", "description": "Returns true if the user is allowed to rearrange columns by\n dragging their headers, false otherwise. The default is true. You can\n rearrange columns programmatically regardless of this setting."}, {"method_name": "setResizingAllowed", "method_sig": "@BeanProperty(description=\"Whether the user can resize columns by dragging between headers.\")\npublic void setResizingAllowed (boolean resizingAllowed)", "description": "Sets whether the user can resize columns by dragging between headers."}, {"method_name": "getResizingAllowed", "method_sig": "public boolean getResizingAllowed()", "description": "Returns true if the user is allowed to resize columns by dragging\n between their headers, false otherwise. The default is true. You can\n resize columns programmatically regardless of this setting."}, {"method_name": "getDraggedColumn", "method_sig": "public TableColumn getDraggedColumn()", "description": "Returns the dragged column, if and only if, a drag is in\n process, otherwise returns null."}, {"method_name": "getDraggedDistance", "method_sig": "public int getDraggedDistance()", "description": "Returns the column's horizontal distance from its original\n position, if and only if, a drag is in process. Otherwise, the\n the return value is meaningless."}, {"method_name": "getResizingColumn", "method_sig": "public TableColumn getResizingColumn()", "description": "Returns the resizing column.  If no column is being\n resized this method returns null."}, {"method_name": "setUpdateTableInRealTime", "method_sig": "public void setUpdateTableInRealTime (boolean flag)", "description": "Obsolete as of Java 2 platform v1.3.  Real time repaints, in response to\n column dragging or resizing, are now unconditional."}, {"method_name": "getUpdateTableInRealTime", "method_sig": "public boolean getUpdateTableInRealTime()", "description": "Obsolete as of Java 2 platform v1.3.  Real time repaints, in response to\n column dragging or resizing, are now unconditional."}, {"method_name": "setDefaultRenderer", "method_sig": "public void setDefaultRenderer (TableCellRenderer defaultRenderer)", "description": "Sets the default renderer to be used when no headerRenderer\n is defined by a TableColumn."}, {"method_name": "getDefaultRenderer", "method_sig": "public TableCellRenderer getDefaultRenderer()", "description": "Returns the default renderer used when no headerRenderer\n is defined by a TableColumn."}, {"method_name": "columnAtPoint", "method_sig": "public int columnAtPoint (Point point)", "description": "Returns the index of the column that point lies in, or -1 if it\n lies out of bounds."}, {"method_name": "getHeaderRect", "method_sig": "public Rectangle getHeaderRect (int column)", "description": "Returns the rectangle containing the header tile at column.\n When the column parameter is out of bounds this method uses the\n same conventions as the JTable method getCellRect."}, {"method_name": "getToolTipText", "method_sig": "public String getToolTipText (MouseEvent event)", "description": "Allows the renderer's tips to be used if there is text set."}, {"method_name": "getPreferredSize", "method_sig": "public Dimension getPreferredSize()", "description": "Returns the preferred size of the table header.\n This is the size required to display the header and requested for\n the viewport.\n The returned Dimension width will always be calculated by\n the underlying TableHeaderUI, regardless of any width specified by\n JComponent.setPreferredSize(java.awt.Dimension)"}, {"method_name": "getUI", "method_sig": "public TableHeaderUI getUI()", "description": "Returns the look and feel (L&F) object that renders this component."}, {"method_name": "setUI", "method_sig": "public void setUI (TableHeaderUI ui)", "description": "Sets the look and feel (L&F) object that renders this component."}, {"method_name": "updateUI", "method_sig": "public void updateUI()", "description": "Notification from the UIManager that the look and feel\n (L&F) has changed.\n Replaces the current UI object with the latest version from the\n UIManager."}, {"method_name": "getUIClassID", "method_sig": "public String getUIClassID()", "description": "Returns the suffix used to construct the name of the look and feel\n (L&F) class used to render this component."}, {"method_name": "setColumnModel", "method_sig": "@BeanProperty(description=\"The object governing the way columns appear in the view.\")\npublic void setColumnModel (TableColumnModel columnModel)", "description": "Sets the column model for this table to newModel and registers\n  for listener notifications from the new column model."}, {"method_name": "getColumnModel", "method_sig": "public TableColumnModel getColumnModel()", "description": "Returns the TableColumnModel that contains all column information\n of this table header."}, {"method_name": "columnAdded", "method_sig": "public void columnAdded (TableColumnModelEvent e)", "description": "Invoked when a column is added to the table column model.\n \n Application code will not use these methods explicitly, they\n are used internally by JTable."}, {"method_name": "columnRemoved", "method_sig": "public void columnRemoved (TableColumnModelEvent e)", "description": "Invoked when a column is removed from the table column model.\n \n Application code will not use these methods explicitly, they\n are used internally by JTable."}, {"method_name": "columnMoved", "method_sig": "public void columnMoved (TableColumnModelEvent e)", "description": "Invoked when a column is repositioned.\n \n Application code will not use these methods explicitly, they\n are used internally by JTable."}, {"method_name": "columnMarginChanged", "method_sig": "public void columnMarginChanged (ChangeEvent e)", "description": "Invoked when a column is moved due to a margin change.\n \n Application code will not use these methods explicitly, they\n are used internally by JTable."}, {"method_name": "columnSelectionChanged", "method_sig": "public void columnSelectionChanged (ListSelectionEvent e)", "description": "Invoked when the selection model of the TableColumnModel\n is changed.  This method currently has no effect (the header is not\n redrawn).\n \n Application code will not use these methods explicitly, they\n are used internally by JTable."}, {"method_name": "createDefaultColumnModel", "method_sig": "protected TableColumnModel createDefaultColumnModel()", "description": "Returns the default column model object which is\n  a DefaultTableColumnModel.  A subclass can override this\n  method to return a different column model object"}, {"method_name": "createDefaultRenderer", "method_sig": "protected TableCellRenderer createDefaultRenderer()", "description": "Returns a default renderer to be used when no header renderer\n  is defined by a TableColumn."}, {"method_name": "initializeLocalVars", "method_sig": "protected void initializeLocalVars()", "description": "Initializes the local variables and properties with default values.\n Used by the constructor methods."}, {"method_name": "resizeAndRepaint", "method_sig": "public void resizeAndRepaint()", "description": "Sizes the header and marks it as needing display.  Equivalent\n to revalidate followed by repaint."}, {"method_name": "setDraggedColumn", "method_sig": "public void setDraggedColumn (TableColumn aColumn)", "description": "Sets the header's draggedColumn to aColumn.\n  \n  Application code will not use this method explicitly, it is used\n  internally by the column dragging mechanism."}, {"method_name": "setDraggedDistance", "method_sig": "public void setDraggedDistance (int distance)", "description": "Sets the header's draggedDistance to distance."}, {"method_name": "setResizingColumn", "method_sig": "public void setResizingColumn (TableColumn aColumn)", "description": "Sets the header's resizingColumn to aColumn.\n  \n  Application code will not use this method explicitly, it\n  is used internally by the column sizing mechanism."}, {"method_name": "paramString", "method_sig": "protected String paramString()", "description": "Returns a string representation of this JTableHeader. This method\n is intended to be used only for debugging purposes, and the\n content and format of the returned string may vary between\n implementations. The returned string may be empty but may not\n be null.\n \n Overriding paramString to provide information about the\n specific new aspects of the JFC components."}, {"method_name": "getAccessibleContext", "method_sig": "public AccessibleContext getAccessibleContext()", "description": "Gets the AccessibleContext associated with this JTableHeader.\n For JTableHeaders, the AccessibleContext takes the form of an\n AccessibleJTableHeader.\n A new AccessibleJTableHeader instance is created if necessary."}]}