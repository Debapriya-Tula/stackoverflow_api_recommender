{"name": "Class System", "module": "java.base", "package": "java.lang", "text": "The System class contains several useful class fields\n and methods. It cannot be instantiated.\n\n Among the facilities provided by the System class\n are standard input, standard output, and error output streams;\n access to externally defined properties and environment\n variables; a means of loading files and libraries; and a utility\n method for quickly copying a portion of an array.", "codes": ["public final class System\nextends Object"], "fields": [{"field_name": "in", "field_sig": "public static final\u00a0InputStream in", "description": "The \"standard\" input stream. This stream is already\n open and ready to supply input data. Typically this stream\n corresponds to keyboard input or another input source specified by\n the host environment or user."}, {"field_name": "out", "field_sig": "public static final\u00a0PrintStream out", "description": "The \"standard\" output stream. This stream is already\n open and ready to accept output data. Typically this stream\n corresponds to display output or another output destination\n specified by the host environment or user.\n \n For simple stand-alone Java applications, a typical way to write\n a line of output data is:\n \n     System.out.println(data)\n \n\n See the println methods in class PrintStream."}, {"field_name": "err", "field_sig": "public static final\u00a0PrintStream err", "description": "The \"standard\" error output stream. This stream is already\n open and ready to accept output data.\n \n Typically this stream corresponds to display output or another\n output destination specified by the host environment or user. By\n convention, this output stream is used to display error messages\n or other information that should come to the immediate attention\n of a user even if the principal output stream, the value of the\n variable out, has been redirected to a file or other\n destination that is typically not continuously monitored."}], "methods": [{"method_name": "setIn", "method_sig": "public static void setIn (InputStream in)", "description": "Reassigns the \"standard\" input stream.\n\n First, if there is a security manager, its checkPermission\n method is called with a RuntimePermission(\"setIO\") permission\n  to see if it's ok to reassign the \"standard\" input stream."}, {"method_name": "setOut", "method_sig": "public static void setOut (PrintStream out)", "description": "Reassigns the \"standard\" output stream.\n\n First, if there is a security manager, its checkPermission\n method is called with a RuntimePermission(\"setIO\") permission\n  to see if it's ok to reassign the \"standard\" output stream."}, {"method_name": "setErr", "method_sig": "public static void setErr (PrintStream err)", "description": "Reassigns the \"standard\" error output stream.\n\n First, if there is a security manager, its checkPermission\n method is called with a RuntimePermission(\"setIO\") permission\n  to see if it's ok to reassign the \"standard\" error output stream."}, {"method_name": "console", "method_sig": "public static Console console()", "description": "Returns the unique Console object associated\n with the current Java virtual machine, if any."}, {"method_name": "inheritedChannel", "method_sig": "public static Channel inheritedChannel()\n                                throws IOException", "description": "Returns the channel inherited from the entity that created this\n Java virtual machine.\n\n This method returns the channel obtained by invoking the\n inheritedChannel method of the system-wide default\n SelectorProvider object.\n\n  In addition to the network-oriented channels described in\n inheritedChannel, this method may return other kinds of\n channels in the future."}, {"method_name": "setSecurityManager", "method_sig": "public static void setSecurityManager (SecurityManager s)", "description": "Sets the System security.\n\n If there is a security manager already installed, this method first\n calls the security manager's checkPermission method\n with a RuntimePermission(\"setSecurityManager\")\n permission to ensure it's ok to replace the existing\n security manager.\n This may result in throwing a SecurityException.\n\n  Otherwise, the argument is established as the current\n security manager. If the argument is null and no\n security manager has been established, then no action is taken and\n the method simply returns."}, {"method_name": "getSecurityManager", "method_sig": "public static SecurityManager getSecurityManager()", "description": "Gets the system security interface."}, {"method_name": "currentTimeMillis", "method_sig": "public static long currentTimeMillis()", "description": "Returns the current time in milliseconds.  Note that\n while the unit of time of the return value is a millisecond,\n the granularity of the value depends on the underlying\n operating system and may be larger.  For example, many\n operating systems measure time in units of tens of\n milliseconds.\n\n  See the description of the class Date for\n a discussion of slight discrepancies that may arise between\n \"computer time\" and coordinated universal time (UTC)."}, {"method_name": "nanoTime", "method_sig": "public static long nanoTime()", "description": "Returns the current value of the running Java Virtual Machine's\n high-resolution time source, in nanoseconds.\n\n This method can only be used to measure elapsed time and is\n not related to any other notion of system or wall-clock time.\n The value returned represents nanoseconds since some fixed but\n arbitrary origin time (perhaps in the future, so values\n may be negative).  The same origin is used by all invocations of\n this method in an instance of a Java virtual machine; other\n virtual machine instances are likely to use a different origin.\n\n This method provides nanosecond precision, but not necessarily\n nanosecond resolution (that is, how frequently the value changes)\n - no guarantees are made except that the resolution is at least as\n good as that of currentTimeMillis().\n\n Differences in successive calls that span greater than\n approximately 292 years (263 nanoseconds) will not\n correctly compute elapsed time due to numerical overflow.\n\n The values returned by this method become meaningful only when\n the difference between two such values, obtained within the same\n instance of a Java virtual machine, is computed.\n\n For example, to measure how long some code takes to execute:\n  \n long startTime = System.nanoTime();\n // ... the code being measured ...\n long elapsedNanos = System.nanoTime() - startTime;\nTo compare elapsed time against a timeout, use  \n if (System.nanoTime() - startTime >= timeoutNanos) ...\n instead of  \n if (System.nanoTime() >= startTime + timeoutNanos) ...\n because of the possibility of numerical overflow."}, {"method_name": "arraycopy", "method_sig": "public static void arraycopy (Object src,\n                             int srcPos,\n                             Object dest,\n                             int destPos,\n                             int length)", "description": "Copies an array from the specified source array, beginning at the\n specified position, to the specified position of the destination array.\n A subsequence of array components are copied from the source\n array referenced by src to the destination array\n referenced by dest. The number of components copied is\n equal to the length argument. The components at\n positions srcPos through\n srcPos+length-1 in the source array are copied into\n positions destPos through\n destPos+length-1, respectively, of the destination\n array.\n \n If the src and dest arguments refer to the\n same array object, then the copying is performed as if the\n components at positions srcPos through\n srcPos+length-1 were first copied to a temporary\n array with length components and then the contents of\n the temporary array were copied into positions\n destPos through destPos+length-1 of the\n destination array.\n \n If dest is null, then a\n NullPointerException is thrown.\n \n If src is null, then a\n NullPointerException is thrown and the destination\n array is not modified.\n \n Otherwise, if any of the following is true, an\n ArrayStoreException is thrown and the destination is\n not modified:\n \nThe src argument refers to an object that is not an\n     array.\n The dest argument refers to an object that is not an\n     array.\n The src argument and dest argument refer\n     to arrays whose component types are different primitive types.\n The src argument refers to an array with a primitive\n    component type and the dest argument refers to an array\n     with a reference component type.\n The src argument refers to an array with a reference\n    component type and the dest argument refers to an array\n     with a primitive component type.\n \n\n Otherwise, if any of the following is true, an\n IndexOutOfBoundsException is\n thrown and the destination is not modified:\n \nThe srcPos argument is negative.\n The destPos argument is negative.\n The length argument is negative.\n srcPos+length is greater than\n     src.length, the length of the source array.\n destPos+length is greater than\n     dest.length, the length of the destination array.\n \n\n Otherwise, if any actual component of the source array from\n position srcPos through\n srcPos+length-1 cannot be converted to the component\n type of the destination array by assignment conversion, an\n ArrayStoreException is thrown. In this case, let\n k be the smallest nonnegative integer less than\n length such that src[srcPos+k]\n cannot be converted to the component type of the destination\n array; when the exception is thrown, source array components from\n positions srcPos through\n srcPos+k-1\n will already have been copied to destination array positions\n destPos through\n destPos+k-1 and no other\n positions of the destination array will have been modified.\n (Because of the restrictions already itemized, this\n paragraph effectively applies only to the situation where both\n arrays have component types that are reference types.)"}, {"method_name": "identityHashCode", "method_sig": "public static int identityHashCode (Object x)", "description": "Returns the same hash code for the given object as\n would be returned by the default method hashCode(),\n whether or not the given object's class overrides\n hashCode().\n The hash code for the null reference is zero."}, {"method_name": "getProperties", "method_sig": "public static Properties getProperties()", "description": "Determines the current system properties.\n\n First, if there is a security manager, its\n checkPropertiesAccess method is called with no\n arguments. This may result in a security exception.\n \n The current set of system properties for use by the\n getProperty(String) method is returned as a\n Properties object. If there is no current set of\n system properties, a set of system properties is first created and\n initialized. This set of system properties always includes values\n for the following keys:\n \nShows property keys and associated values\n\nKey\nDescription of Associated Value\n\n\njava.version\nJava Runtime Environment version, which may be interpreted\n     as a Runtime.Version\njava.version.date\nJava Runtime Environment version date, in ISO-8601 YYYY-MM-DD\n     format, which may be interpreted as a LocalDate\njava.vendor\nJava Runtime Environment vendor\njava.vendor.url\nJava vendor URL\njava.vendor.version\nJava vendor version\njava.home\nJava installation directory\njava.vm.specification.version\nJava Virtual Machine specification version, whose value is the\n     feature element of the\n     runtime version\njava.vm.specification.vendor\nJava Virtual Machine specification vendor\njava.vm.specification.name\nJava Virtual Machine specification name\njava.vm.version\nJava Virtual Machine implementation version which may be\n     interpreted as a Runtime.Version\njava.vm.vendor\nJava Virtual Machine implementation vendor\njava.vm.name\nJava Virtual Machine implementation name\njava.specification.version\nJava Runtime Environment specification version, whose value is\n     the feature element of the\n     runtime version\njava.specification.vendor\nJava Runtime Environment specification  vendor\njava.specification.name\nJava Runtime Environment specification  name\njava.class.version\nJava class format version number\njava.class.path\nJava class path  (refer to\n        ClassLoader.getSystemClassLoader() for details)\njava.library.path\nList of paths to search when loading libraries\njava.io.tmpdir\nDefault temp file path\njava.compiler\nName of JIT compiler to use\nos.name\nOperating system name\nos.arch\nOperating system architecture\nos.version\nOperating system version\nfile.separator\nFile separator (\"/\" on UNIX)\npath.separator\nPath separator (\":\" on UNIX)\nline.separator\nLine separator (\"\\n\" on UNIX)\nuser.name\nUser's account name\nuser.home\nUser's home directory\nuser.dir\nUser's current working directory\n\n\n\n Multiple paths in a system property value are separated by the path\n separator character of the platform.\n \n Note that even if the security manager does not permit the\n getProperties operation, it may choose to permit the\n getProperty(String) operation."}, {"method_name": "lineSeparator", "method_sig": "public static String lineSeparator()", "description": "Returns the system-dependent line separator string.  It always\n returns the same value - the initial value of the system property line.separator.\n\n On UNIX systems, it returns \"\\n\"; on Microsoft\n Windows systems it returns \"\\r\\n\"."}, {"method_name": "setProperties", "method_sig": "public static void setProperties (Properties props)", "description": "Sets the system properties to the Properties argument.\n\n First, if there is a security manager, its\n checkPropertiesAccess method is called with no\n arguments. This may result in a security exception.\n \n The argument becomes the current set of system properties for use\n by the getProperty(String) method. If the argument is\n null, then the current set of system properties is\n forgotten."}, {"method_name": "getProperty", "method_sig": "public static String getProperty (String key)", "description": "Gets the system property indicated by the specified key.\n\n First, if there is a security manager, its\n checkPropertyAccess method is called with the key as\n its argument. This may result in a SecurityException.\n \n If there is no current set of system properties, a set of system\n properties is first created and initialized in the same manner as\n for the getProperties method."}, {"method_name": "getProperty", "method_sig": "public static String getProperty (String key,\n                                 String def)", "description": "Gets the system property indicated by the specified key.\n\n First, if there is a security manager, its\n checkPropertyAccess method is called with the\n key as its argument.\n \n If there is no current set of system properties, a set of system\n properties is first created and initialized in the same manner as\n for the getProperties method."}, {"method_name": "setProperty", "method_sig": "public static String setProperty (String key,\n                                 String value)", "description": "Sets the system property indicated by the specified key.\n\n First, if a security manager exists, its\n SecurityManager.checkPermission method\n is called with a PropertyPermission(key, \"write\")\n permission. This may result in a SecurityException being thrown.\n If no exception is thrown, the specified property is set to the given\n value."}, {"method_name": "clearProperty", "method_sig": "public static String clearProperty (String key)", "description": "Removes the system property indicated by the specified key.\n\n First, if a security manager exists, its\n SecurityManager.checkPermission method\n is called with a PropertyPermission(key, \"write\")\n permission. This may result in a SecurityException being thrown.\n If no exception is thrown, the specified property is removed."}, {"method_name": "getenv", "method_sig": "public static String getenv (String name)", "description": "Gets the value of the specified environment variable. An\n environment variable is a system-dependent external named\n value.\n\n If a security manager exists, its\n checkPermission\n method is called with a\n RuntimePermission(\"getenv.\"+name)\n permission.  This may result in a SecurityException\n being thrown.  If no exception is thrown the value of the\n variable name is returned.\n\n System\n properties and environment variables are both\n conceptually mappings between names and values.  Both\n mechanisms can be used to pass user-defined information to a\n Java process.  Environment variables have a more global effect,\n because they are visible to all descendants of the process\n which defines them, not just the immediate Java subprocess.\n They can have subtly different semantics, such as case\n insensitivity, on different operating systems.  For these\n reasons, environment variables are more likely to have\n unintended side effects.  It is best to use system properties\n where possible.  Environment variables should be used when a\n global effect is desired, or when an external system interface\n requires an environment variable (such as PATH).\n\n On UNIX systems the alphabetic case of name is\n typically significant, while on Microsoft Windows systems it is\n typically not.  For example, the expression\n System.getenv(\"FOO\").equals(System.getenv(\"foo\"))\n is likely to be true on Microsoft Windows."}, {"method_name": "getenv", "method_sig": "public static Map<String, String> getenv()", "description": "Returns an unmodifiable string map view of the current system environment.\n The environment is a system-dependent mapping from names to\n values which is passed from parent to child processes.\n\n If the system does not support environment variables, an\n empty map is returned.\n\n The returned map will never contain null keys or values.\n Attempting to query the presence of a null key or value will\n throw a NullPointerException.  Attempting to query\n the presence of a key or value which is not of type\n String will throw a ClassCastException.\n\n The returned map and its collection views may not obey the\n general contract of the Object.equals(java.lang.Object) and\n Object.hashCode() methods.\n\n The returned map is typically case-sensitive on all platforms.\n\n If a security manager exists, its\n checkPermission\n method is called with a\n RuntimePermission(\"getenv.*\") permission.\n This may result in a SecurityException being thrown.\n\n When passing information to a Java subprocess,\n system properties\n are generally preferred over environment variables."}, {"method_name": "getLogger", "method_sig": "public static System.Logger getLogger (String name)", "description": "Returns an instance of Logger for the caller's\n use."}, {"method_name": "getLogger", "method_sig": "public static System.Logger getLogger (String name,\n                                      ResourceBundle bundle)", "description": "Returns a localizable instance of Logger for the caller's use.\n The returned logger will use the provided resource bundle for message\n localization."}, {"method_name": "exit", "method_sig": "public static void exit (int status)", "description": "Terminates the currently running Java Virtual Machine. The\n argument serves as a status code; by convention, a nonzero status\n code indicates abnormal termination.\n \n This method calls the exit method in class\n Runtime. This method never returns normally.\n \n The call System.exit(n) is effectively equivalent to\n the call:\n \n Runtime.getRuntime().exit(n)\n "}, {"method_name": "gc", "method_sig": "public static void gc()", "description": "Runs the garbage collector.\n\n Calling the gc method suggests that the Java Virtual\n Machine expend effort toward recycling unused objects in order to\n make the memory they currently occupy available for quick reuse.\n When control returns from the method call, the Java Virtual\n Machine has made a best effort to reclaim space from all discarded\n objects.\n \n The call System.gc() is effectively equivalent to the\n call:\n \n Runtime.getRuntime().gc()\n "}, {"method_name": "runFinalization", "method_sig": "public static void runFinalization()", "description": "Runs the finalization methods of any objects pending finalization.\n\n Calling this method suggests that the Java Virtual Machine expend\n effort toward running the finalize methods of objects\n that have been found to be discarded but whose finalize\n methods have not yet been run. When control returns from the\n method call, the Java Virtual Machine has made a best effort to\n complete all outstanding finalizations.\n \n The call System.runFinalization() is effectively\n equivalent to the call:\n \n Runtime.getRuntime().runFinalization()\n "}, {"method_name": "load", "method_sig": "public static void load (String filename)", "description": "Loads the native library specified by the filename argument.  The filename\n argument must be an absolute path name.\n\n If the filename argument, when stripped of any platform-specific library\n prefix, path, and file extension, indicates a library whose name is,\n for example, L, and a native library called L is statically linked\n with the VM, then the JNI_OnLoad_L function exported by the library\n is invoked rather than attempting to load a dynamic library.\n A filename matching the argument does not have to exist in the\n file system.\n See the  JNI Specification\n for more details.\n\n Otherwise, the filename argument is mapped to a native library image in\n an implementation-dependent manner.\n\n \n The call System.load(name) is effectively equivalent\n to the call:\n \n Runtime.getRuntime().load(name)\n "}, {"method_name": "loadLibrary", "method_sig": "public static void loadLibrary (String libname)", "description": "Loads the native library specified by the libname\n argument.  The libname argument must not contain any platform\n specific prefix, file extension or path. If a native library\n called libname is statically linked with the VM, then the\n JNI_OnLoad_libname function exported by the library is invoked.\n See the  JNI Specification\n for more details.\n\n Otherwise, the libname argument is loaded from a system library\n location and mapped to a native library image in an implementation-\n dependent manner.\n \n The call System.loadLibrary(name) is effectively\n equivalent to the call\n \n Runtime.getRuntime().loadLibrary(name)\n "}, {"method_name": "mapLibraryName", "method_sig": "public static String mapLibraryName (String libname)", "description": "Maps a library name into a platform-specific string representing\n a native library."}]}