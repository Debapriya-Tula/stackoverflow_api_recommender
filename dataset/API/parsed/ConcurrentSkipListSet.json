{"name": "Class ConcurrentSkipListSet<E>", "module": "java.base", "package": "java.util.concurrent", "text": "A scalable concurrent NavigableSet implementation based on\n a ConcurrentSkipListMap.  The elements of the set are kept\n sorted according to their natural ordering,\n or by a Comparator provided at set creation time, depending\n on which constructor is used.\n\n This implementation provides expected average log(n) time\n cost for the contains, add, and remove\n operations and their variants.  Insertion, removal, and access\n operations safely execute concurrently by multiple threads.\n\n Iterators and spliterators are\n weakly consistent.\n\n Ascending ordered views and their iterators are faster than\n descending ones.\n\n Beware that, unlike in most collections, the size\n method is not a constant-time operation. Because of the\n asynchronous nature of these sets, determining the current number\n of elements requires a traversal of the elements, and so may report\n inaccurate results if this collection is modified during traversal.\n\n Bulk operations that add, remove, or examine multiple elements,\n such as AbstractCollection.addAll(java.util.Collection<? extends E>), Collection.removeIf(java.util.function.Predicate<? super E>) or Iterable.forEach(java.util.function.Consumer<? super T>),\n are not guaranteed to be performed atomically.\n For example, a forEach traversal concurrent with an \n addAll operation might observe only some of the added elements.\n\n This class and its iterators implement all of the\n optional methods of the Set and Iterator\n interfaces. Like most other concurrent collection implementations,\n this class does not permit the use of null elements,\n because null arguments and return values cannot be reliably\n distinguished from the absence of elements.\n\n This class is a member of the\n \n Java Collections Framework.", "codes": ["public class ConcurrentSkipListSet<E>\nextends AbstractSet<E>\nimplements NavigableSet<E>, Cloneable, Serializable"], "fields": [], "methods": [{"method_name": "clone", "method_sig": "public ConcurrentSkipListSet<E> clone()", "description": "Returns a shallow copy of this ConcurrentSkipListSet\n instance. (The elements themselves are not cloned.)"}, {"method_name": "size", "method_sig": "public int size()", "description": "Returns the number of elements in this set.  If this set\n contains more than Integer.MAX_VALUE elements, it\n returns Integer.MAX_VALUE.\n\n Beware that, unlike in most collections, this method is\n NOT a constant-time operation. Because of the\n asynchronous nature of these sets, determining the current\n number of elements requires traversing them all to count them.\n Additionally, it is possible for the size to change during\n execution of this method, in which case the returned result\n will be inaccurate. Thus, this method is typically not very\n useful in concurrent applications."}, {"method_name": "isEmpty", "method_sig": "public boolean isEmpty()", "description": "Returns true if this set contains no elements."}, {"method_name": "contains", "method_sig": "public boolean contains (Object o)", "description": "Returns true if this set contains the specified element.\n More formally, returns true if and only if this set\n contains an element e such that o.equals(e)."}, {"method_name": "add", "method_sig": "public boolean add (E e)", "description": "Adds the specified element to this set if it is not already present.\n More formally, adds the specified element e to this set if\n the set contains no element e2 such that e.equals(e2).\n If this set already contains the element, the call leaves the set\n unchanged and returns false."}, {"method_name": "remove", "method_sig": "public boolean remove (Object o)", "description": "Removes the specified element from this set if it is present.\n More formally, removes an element e such that\n o.equals(e), if this set contains such an element.\n Returns true if this set contained the element (or\n equivalently, if this set changed as a result of the call).\n (This set will not contain the element once the call returns.)"}, {"method_name": "clear", "method_sig": "public void clear()", "description": "Removes all of the elements from this set."}, {"method_name": "iterator", "method_sig": "public Iterator<E> iterator()", "description": "Returns an iterator over the elements in this set in ascending order."}, {"method_name": "descendingIterator", "method_sig": "public Iterator<E> descendingIterator()", "description": "Returns an iterator over the elements in this set in descending order."}, {"method_name": "equals", "method_sig": "public boolean equals (Object o)", "description": "Compares the specified object with this set for equality.  Returns\n true if the specified object is also a set, the two sets\n have the same size, and every member of the specified set is\n contained in this set (or equivalently, every member of this set is\n contained in the specified set).  This definition ensures that the\n equals method works properly across different implementations of the\n set interface."}, {"method_name": "removeAll", "method_sig": "public boolean removeAll (Collection<?> c)", "description": "Removes from this set all of its elements that are contained in\n the specified collection.  If the specified collection is also\n a set, this operation effectively modifies this set so that its\n value is the asymmetric set difference of the two sets."}, {"method_name": "lower", "method_sig": "public E lower (E e)", "description": "Description copied from interface:\u00a0NavigableSet"}, {"method_name": "floor", "method_sig": "public E floor (E e)", "description": "Description copied from interface:\u00a0NavigableSet"}, {"method_name": "ceiling", "method_sig": "public E ceiling (E e)", "description": "Description copied from interface:\u00a0NavigableSet"}, {"method_name": "higher", "method_sig": "public E higher (E e)", "description": "Description copied from interface:\u00a0NavigableSet"}, {"method_name": "first", "method_sig": "public E first()", "description": "Description copied from interface:\u00a0SortedSet"}, {"method_name": "last", "method_sig": "public E last()", "description": "Description copied from interface:\u00a0SortedSet"}, {"method_name": "subSet", "method_sig": "public NavigableSet<E> subSet (E fromElement,\n                              boolean fromInclusive,\n                              E toElement,\n                              boolean toInclusive)", "description": "Description copied from interface:\u00a0NavigableSet"}, {"method_name": "headSet", "method_sig": "public NavigableSet<E> headSet (E toElement,\n                               boolean inclusive)", "description": "Description copied from interface:\u00a0NavigableSet"}, {"method_name": "tailSet", "method_sig": "public NavigableSet<E> tailSet (E fromElement,\n                               boolean inclusive)", "description": "Description copied from interface:\u00a0NavigableSet"}, {"method_name": "subSet", "method_sig": "public NavigableSet<E> subSet (E fromElement,\n                              E toElement)", "description": "Description copied from interface:\u00a0NavigableSet"}, {"method_name": "headSet", "method_sig": "public NavigableSet<E> headSet (E toElement)", "description": "Description copied from interface:\u00a0NavigableSet"}, {"method_name": "tailSet", "method_sig": "public NavigableSet<E> tailSet (E fromElement)", "description": "Description copied from interface:\u00a0NavigableSet"}, {"method_name": "descendingSet", "method_sig": "public NavigableSet<E> descendingSet()", "description": "Returns a reverse order view of the elements contained in this set.\n The descending set is backed by this set, so changes to the set are\n reflected in the descending set, and vice-versa.\n\n The returned set has an ordering equivalent to\n Collections.reverseOrder(comparator()).\n The expression s.descendingSet().descendingSet() returns a\n view of s essentially equivalent to s."}, {"method_name": "spliterator", "method_sig": "public Spliterator<E> spliterator()", "description": "Returns a Spliterator over the elements in this set.\n\n The Spliterator reports Spliterator.CONCURRENT,\n Spliterator.NONNULL, Spliterator.DISTINCT,\n Spliterator.SORTED and Spliterator.ORDERED, with an\n encounter order that is ascending order.  Overriding implementations\n should document the reporting of additional characteristic values.\n\n The spliterator's comparator\n is null if the set's comparator\n is null.\n Otherwise, the spliterator's comparator is the same as or imposes the\n same total ordering as the set's comparator."}]}