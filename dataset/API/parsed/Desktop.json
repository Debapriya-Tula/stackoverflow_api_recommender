{"name": "Class Desktop", "module": "java.desktop", "package": "java.awt", "text": "The Desktop class allows interact with various desktop capabilities.\n\n  Supported operations include:\n \nlaunching the user-default browser to show a specified\n       URI;\nlaunching the user-default mail client with an optional\n       mailto URI;\nlaunching a registered application to open, edit or print a\n       specified file.\n\n This class provides methods corresponding to these\n operations. The methods look for the associated application\n registered on the current platform, and launch it to handle a URI\n or file. If there is no associated application or the associated\n application fails to be launched, an exception is thrown.\n\n Please see Desktop.Action for the full list of supported operations\n and capabilities.\n\n  An application is registered to a URI or file type.\n The mechanism of registering, accessing, and\n launching the associated application is platform-dependent.\n\n  Each operation is an action type represented by the Desktop.Action class.\n\n  Note: when some action is invoked and the associated\n application is executed, it will be executed on the same system as\n the one on which the Java application was launched.", "codes": ["public class Desktop\nextends Object"], "fields": [], "methods": [{"method_name": "getDesktop", "method_sig": "public static Desktop getDesktop()", "description": "Returns the Desktop instance of the current\n desktop context. On some platforms the Desktop API may not be\n supported; use the isDesktopSupported() method to\n determine if the current desktop is supported."}, {"method_name": "isDesktopSupported", "method_sig": "public static boolean isDesktopSupported()", "description": "Tests whether this class is supported on the current platform.\n If it's supported, use getDesktop() to retrieve an\n instance."}, {"method_name": "isSupported", "method_sig": "public boolean isSupported (Desktop.Action action)", "description": "Tests whether an action is supported on the current platform.\n\n Even when the platform supports an action, a file or URI may\n not have a registered application for the action.  For example,\n most of the platforms support the Desktop.Action.OPEN\n action.  But for a specific file, there may not be an\n application registered to open it.  In this case, isSupported(Action) may return true, but the corresponding\n action method will throw an IOException."}, {"method_name": "open", "method_sig": "public void open (File file)\n          throws IOException", "description": "Launches the associated application to open the file.\n\n  If the specified file is a directory, the file manager of\n the current platform is launched to open it."}, {"method_name": "edit", "method_sig": "public void edit (File file)\n          throws IOException", "description": "Launches the associated editor application and opens a file for\n editing."}, {"method_name": "print", "method_sig": "public void print (File file)\n           throws IOException", "description": "Prints a file with the native desktop printing facility, using\n the associated application's print command."}, {"method_name": "browse", "method_sig": "public void browse (URI uri)\n            throws IOException", "description": "Launches the default browser to display a URI.\n If the default browser is not able to handle the specified\n URI, the application registered for handling\n URIs of the specified type is invoked. The application\n is determined from the protocol and path of the URI, as\n defined by the URI class."}, {"method_name": "mail", "method_sig": "public void mail()\n          throws IOException", "description": "Launches the mail composing window of the user default mail\n client."}, {"method_name": "mail", "method_sig": "public void mail (URI mailtoURI)\n          throws IOException", "description": "Launches the mail composing window of the user default mail\n client, filling the message fields specified by a \n mailto: URI.\n\n  A mailto: URI can specify message fields\n including \"to\", \"cc\", \"subject\",\n \"body\", etc.  See The mailto URL\n scheme (RFC 2368) for the mailto: URI specification\n details."}, {"method_name": "addAppEventListener", "method_sig": "public void addAppEventListener (SystemEventListener listener)", "description": "Adds sub-types of SystemEventListener to listen for notifications\n from the native system.\n\n Has no effect if SystemEventListener's sub-type is unsupported on the current\n platform."}, {"method_name": "removeAppEventListener", "method_sig": "public void removeAppEventListener (SystemEventListener listener)", "description": "Removes sub-types of SystemEventListener to listen for notifications\n from the native system.\n\n Has no effect if SystemEventListener's sub-type is unsupported on  the current\n platform."}, {"method_name": "setAboutHandler", "method_sig": "public void setAboutHandler (AboutHandler aboutHandler)", "description": "Installs a handler to show a custom About window for your application.\n \n Setting the AboutHandler to null reverts it to the\n default behavior."}, {"method_name": "setPreferencesHandler", "method_sig": "public void setPreferencesHandler (PreferencesHandler preferencesHandler)", "description": "Installs a handler to show a custom Preferences window for your\n application.\n \n Setting the PreferencesHandler to null reverts it to\n the default behavior"}, {"method_name": "setOpenFileHandler", "method_sig": "public void setOpenFileHandler (OpenFilesHandler openFileHandler)", "description": "Installs the handler which is notified when the application is asked to\n open a list of files."}, {"method_name": "setPrintFileHandler", "method_sig": "public void setPrintFileHandler (PrintFilesHandler printFileHandler)", "description": "Installs the handler which is notified when the application is asked to\n print a list of files."}, {"method_name": "setOpenURIHandler", "method_sig": "public void setOpenURIHandler (OpenURIHandler openURIHandler)", "description": "Installs the handler which is notified when the application is asked to\n open a URL.\n\n Setting the handler to null causes all\n OpenURIHandler.openURI(OpenURIEvent) requests to be\n enqueued until another handler is set."}, {"method_name": "setQuitHandler", "method_sig": "public void setQuitHandler (QuitHandler quitHandler)", "description": "Installs the handler which determines if the application should quit. The\n handler is passed a one-shot QuitResponse which can cancel or\n proceed with the quit. Setting the handler to null causes\n all quit requests to directly perform the default QuitStrategy."}, {"method_name": "setQuitStrategy", "method_sig": "public void setQuitStrategy (QuitStrategy strategy)", "description": "Sets the default strategy used to quit this application. The default is\n calling SYSTEM_EXIT_0."}, {"method_name": "enableSuddenTermination", "method_sig": "public void enableSuddenTermination()", "description": "Enables this application to be suddenly terminated.\n\n Call this method to indicate your application's state is saved, and\n requires no notification to be terminated. Letting your application\n remain terminatable improves the user experience by avoiding re-paging in\n your application when it's asked to quit.\n\n Note: enabling sudden termination will allow your application to be\n quit without notifying your QuitHandler, or running any shutdown\n hooks.\n E.g. user-initiated Cmd-Q, logout, restart, or shutdown requests will\n effectively \"kill -KILL\" your application."}, {"method_name": "disableSuddenTermination", "method_sig": "public void disableSuddenTermination()", "description": "Prevents this application from being suddenly terminated.\n\n Call this method to indicate that your application has unsaved state, and\n may not be terminated without notification."}, {"method_name": "requestForeground", "method_sig": "public void requestForeground (boolean allWindows)", "description": "Requests this application to move to the foreground."}, {"method_name": "openHelpViewer", "method_sig": "public void openHelpViewer()", "description": "Opens the native help viewer application."}, {"method_name": "setDefaultMenuBar", "method_sig": "public void setDefaultMenuBar (JMenuBar menuBar)", "description": "Sets the default menu bar to use when there are no active frames."}, {"method_name": "browseFileDirectory", "method_sig": "public void browseFileDirectory (File file)", "description": "Opens a folder containing the file and selects it\n in a default system file manager."}, {"method_name": "moveToTrash", "method_sig": "public boolean moveToTrash (File file)", "description": "Moves the specified file to the trash."}]}