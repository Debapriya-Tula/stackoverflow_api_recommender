{"name": "Class HttpResponse.BodyHandlers", "module": "java.net.http", "package": "java.net.http", "text": "Implementations of BodyHandler that implement various\n useful handlers, such as handling the response body as a String, or\n streaming the response body to a file.\n\n  These implementations do not examine the status code, meaning the\n body is always accepted. They typically return an equivalently named\n BodySubscriber. Alternatively, a custom handler can be used to\n examine the status code and headers, and return a different body\n subscriber, of the same type, as appropriate.\n\n The following are examples of using the predefined body handlers to\n convert a flow of response body data into common high-level Java objects:\n\n    // Receives the response body as a String\n   HttpResponse<String> response = client\n     .send(request, BodyHandlers.ofString());\n\n   // Receives the response body as a file\n   HttpResponse<Path> response = client\n     .send(request, BodyHandlers.ofFile(Paths.get(\"example.html\")));\n\n   // Receives the response body as an InputStream\n   HttpResponse<InputStream> response = client\n     .send(request, BodyHandlers.ofInputStream());\n\n   // Discards the response body\n   HttpResponse<Void> response = client\n     .send(request, BodyHandlers.discarding());  ", "codes": ["public static class HttpResponse.BodyHandlers\nextends Object"], "fields": [], "methods": [{"method_name": "fromSubscriber", "method_sig": "public static HttpResponse.BodyHandler<Void> fromSubscriber (Flow.Subscriber<? super List<ByteBuffer>> subscriber)", "description": "Returns a response body handler that returns a BodySubscriber<Void> obtained from HttpResponse.BodySubscribers.fromSubscriber(Subscriber), with the given\n subscriber.\n\n  The response body is not available through this, or the \n HttpResponse API, but instead all response body is forwarded to the\n given subscriber, which should make it available, if\n appropriate, through some other mechanism, e.g. an entry in a\n database, etc."}, {"method_name": "fromSubscriber", "method_sig": "public static <S extends Flow.Subscriber<? super List<ByteBuffer>>, T> HttpResponse.BodyHandler<T> fromSubscriber (S subscriber,\n                                                                                                                       Function<? super S, ? extends T> finisher)", "description": "Returns a response body handler that returns a BodySubscriber<T> obtained from HttpResponse.BodySubscribers.fromSubscriber(Subscriber, Function), with the\n given subscriber and finisher function.\n\n  The given finisher function is applied after the given\n subscriber's onComplete has been invoked. The finisher\n function is invoked with the given subscriber, and returns a value\n that is set as the response's body."}, {"method_name": "fromLineSubscriber", "method_sig": "public static HttpResponse.BodyHandler<Void> fromLineSubscriber (Flow.Subscriber<? super String> subscriber)", "description": "Returns a response body handler that returns a BodySubscriber<Void> obtained from BodySubscribers.fromLineSubscriber(subscriber, s -> null, charset, null),\n with the given subscriber.\n The charset used to decode the response body bytes is\n obtained from the HTTP response headers as specified by ofString(),\n and lines are delimited in the manner of BufferedReader.readLine().\n\n  The response body is not available through this, or the \n HttpResponse API, but instead all response body is forwarded to the\n given subscriber, which should make it available, if\n appropriate, through some other mechanism, e.g. an entry in a\n database, etc."}, {"method_name": "fromLineSubscriber", "method_sig": "public static <S extends Flow.Subscriber<? super String>, T> HttpResponse.BodyHandler<T> fromLineSubscriber (S subscriber,\n                                                                                                                 Function<? super S, ? extends T> finisher,\n                                                                                                                 String lineSeparator)", "description": "Returns a response body handler that returns a BodySubscriber<T> obtained from BodySubscribers.fromLineSubscriber(subscriber, finisher, charset, lineSeparator),\n with the given subscriber, finisher function, and line separator.\n The charset used to decode the response body bytes is\n obtained from the HTTP response headers as specified by ofString().\n\n  The given finisher function is applied after the given\n subscriber's onComplete has been invoked. The finisher\n function is invoked with the given subscriber, and returns a value\n that is set as the response's body."}, {"method_name": "discarding", "method_sig": "public static HttpResponse.BodyHandler<Void> discarding()", "description": "Returns a response body handler that discards the response body."}, {"method_name": "replacing", "method_sig": "public static <U> HttpResponse.BodyHandler<U> replacing (U value)", "description": "Returns a response body handler that returns the given replacement\n value, after discarding the response body."}, {"method_name": "ofString", "method_sig": "public static HttpResponse.BodyHandler<String> ofString (Charset charset)", "description": "Returns a BodyHandler<String> that returns a\n BodySubscriber<String> obtained from\n BodySubscribers.ofString(Charset).\n The body is decoded using the given character set."}, {"method_name": "ofFile", "method_sig": "public static HttpResponse.BodyHandler<Path> ofFile (Path file,\n                                                    OpenOption... openOptions)", "description": "Returns a BodyHandler<Path> that returns a\n BodySubscriber<Path> obtained from\n BodySubscribers.ofFile(Path,OpenOption...).\n\n  When the HttpResponse object is returned, the body has\n been completely written to the file, and HttpResponse.body() returns a\n reference to its Path.\n\n  Security manager permission checks are performed in this factory\n method, when the BodyHandler is created. Care must be taken\n that the BodyHandler is not shared with untrusted code."}, {"method_name": "ofFile", "method_sig": "public static HttpResponse.BodyHandler<Path> ofFile (Path file)", "description": "Returns a BodyHandler<Path> that returns a\n BodySubscriber<Path>.\n\n  Equivalent to: ofFile(file, CREATE, WRITE)\n Security manager permission checks are performed in this factory\n method, when the BodyHandler is created. Care must be taken\n that the BodyHandler is not shared with untrusted code."}, {"method_name": "ofFileDownload", "method_sig": "public static HttpResponse.BodyHandler<Path> ofFileDownload (Path directory,\n                                                            OpenOption... openOptions)", "description": "Returns a BodyHandler<Path> that returns a\n BodySubscriber<Path>\n where the download directory is specified, but the filename is\n obtained from the Content-Disposition response header. The\n Content-Disposition header must specify the attachment\n type and must also contain a filename parameter. If the\n filename specifies multiple path components only the final component\n is used as the filename (with the given directory name).\n\n  When the HttpResponse object is returned, the body has\n been completely written to the file and HttpResponse.body() returns a\n Path object for the file. The returned Path is the\n combination of the supplied directory name and the file name supplied\n by the server. If the destination directory does not exist or cannot\n be written to, then the response will fail with an IOException.\n\n  Security manager permission checks are performed in this factory\n method, when the BodyHandler is created. Care must be taken\n that the BodyHandler is not shared with untrusted code."}, {"method_name": "ofInputStream", "method_sig": "public static HttpResponse.BodyHandler<InputStream> ofInputStream()", "description": "Returns a BodyHandler<InputStream> that returns a\n BodySubscriber<InputStream> obtained from\n BodySubscribers.ofInputStream.\n\n  When the HttpResponse object is returned, the response\n headers will have been completely read, but the body may not have\n been fully received yet. The HttpResponse.body() method returns an\n InputStream from which the body can be read as it is received."}, {"method_name": "ofLines", "method_sig": "public static HttpResponse.BodyHandler<Stream<String>> ofLines()", "description": "Returns a BodyHandler<Stream<String>> that returns a\n BodySubscriber<Stream<String>> obtained\n from BodySubscribers.ofLines(charset).\n The charset used to decode the response body bytes is\n obtained from the HTTP response headers as specified by ofString(),\n and lines are delimited in the manner of BufferedReader.readLine().\n\n  When the HttpResponse object is returned, the body may\n not have been completely received."}, {"method_name": "ofByteArrayConsumer", "method_sig": "public static HttpResponse.BodyHandler<Void> ofByteArrayConsumer (Consumer<Optional<byte[]>> consumer)", "description": "Returns a BodyHandler<Void> that returns a\n BodySubscriber<Void> obtained from\n BodySubscribers.ofByteArrayConsumer(Consumer).\n\n  When the HttpResponse object is returned, the body has\n been completely written to the consumer."}, {"method_name": "ofByteArray", "method_sig": "public static HttpResponse.BodyHandler<byte[]> ofByteArray()", "description": "Returns a BodyHandler<byte[]> that returns a\n BodySubscriber<byte[]> obtained\n from BodySubscribers.ofByteArray().\n\n  When the HttpResponse object is returned, the body has\n been completely written to the byte array."}, {"method_name": "ofString", "method_sig": "public static HttpResponse.BodyHandler<String> ofString()", "description": "Returns a BodyHandler<String> that returns a\n BodySubscriber<String> obtained from\n BodySubscribers.ofString(Charset).\n The body is decoded using the character set specified in\n the Content-Type response header. If there is no such\n header, or the character set is not supported, then\n UTF_8 is used.\n\n  When the HttpResponse object is returned, the body has\n been completely written to the string."}, {"method_name": "ofPublisher", "method_sig": "public static HttpResponse.BodyHandler<Flow.Publisher<List<ByteBuffer>>> ofPublisher()", "description": "Returns a BodyHandler<Publisher<List<ByteBuffer>>> that creates a\n BodySubscriber<Publisher<List<ByteBuffer>>>\n obtained from BodySubscribers.ofPublisher().\n\n  When the HttpResponse object is returned, the response\n headers will have been completely read, but the body may not have\n been fully received yet. The HttpResponse.body() method returns a\n Publisher> from which the body\n response bytes can be obtained as they are received. The publisher\n can and must be subscribed to only once."}, {"method_name": "buffering", "method_sig": "public static <T> HttpResponse.BodyHandler<T> buffering (HttpResponse.BodyHandler<T> downstreamHandler,\n                                                        int bufferSize)", "description": "Returns a BodyHandler which, when invoked, returns a buffering BodySubscriber\n that buffers data before delivering it to the downstream subscriber.\n These BodySubscriber instances are created by calling\n BodySubscribers.buffering with a subscriber obtained from the given\n downstream handler and the bufferSize parameter."}]}