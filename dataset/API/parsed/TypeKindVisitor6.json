{"name": "Class TypeKindVisitor6<R,\u200bP>", "module": "java.compiler", "package": "javax.lang.model.util", "text": "A visitor of types based on their kind with\n default behavior appropriate for the RELEASE_6 source version.  For types Xyz that may have more than one\n kind, the visitXyz methods in this class delegate\n to the visitXyzAsKind method corresponding to the\n first argument's kind.  The visitXyzAsKind methods\n call defaultAction, passing their arguments\n to defaultAction's corresponding parameters.\n\n  Methods in this class may be overridden subject to their\n general contract.  Note that annotating methods in concrete\n subclasses with @Override will help\n ensure that methods are overridden as intended.\n\n  WARNING: The TypeVisitor interface implemented\n by this class may have methods added to it in the future to\n accommodate new, currently unknown, language structures added to\n future versions of the Java\u2122 programming language.\n Therefore, methods whose names begin with \"visit\" may be\n added to this class in the future; to avoid incompatibilities,\n classes which extend this class should not declare any instance\n methods with names beginning with \"visit\".\n\n When such a new visit method is added, the default\n implementation in this class will be to call the visitUnknown method.  A new type kind visitor class\n will also be introduced to correspond to the new language level;\n this visitor will have different default behavior for the visit\n method in question.  When the new visitor is introduced, all or\n portions of this visitor may be deprecated.", "codes": ["@SupportedSourceVersion(RELEASE_6)\npublic class TypeKindVisitor6<R, P>\nextends SimpleTypeVisitor6<R, P>"], "fields": [], "methods": [{"method_name": "visitPrimitive", "method_sig": "public R visitPrimitive (PrimitiveType t,\n                        P p)", "description": "Visits a primitive type."}, {"method_name": "visitPrimitiveAsBoolean", "method_sig": "public R visitPrimitiveAsBoolean (PrimitiveType t,\n                                 P p)", "description": "Visits a BOOLEAN primitive type."}, {"method_name": "visitPrimitiveAsByte", "method_sig": "public R visitPrimitiveAsByte (PrimitiveType t,\n                              P p)", "description": "Visits a BYTE primitive type."}, {"method_name": "visitPrimitiveAsShort", "method_sig": "public R visitPrimitiveAsShort (PrimitiveType t,\n                               P p)", "description": "Visits a SHORT primitive type."}, {"method_name": "visitPrimitiveAsInt", "method_sig": "public R visitPrimitiveAsInt (PrimitiveType t,\n                             P p)", "description": "Visits an INT primitive type."}, {"method_name": "visitPrimitiveAsLong", "method_sig": "public R visitPrimitiveAsLong (PrimitiveType t,\n                              P p)", "description": "Visits a LONG primitive type."}, {"method_name": "visitPrimitiveAsChar", "method_sig": "public R visitPrimitiveAsChar (PrimitiveType t,\n                              P p)", "description": "Visits a CHAR primitive type."}, {"method_name": "visitPrimitiveAsFloat", "method_sig": "public R visitPrimitiveAsFloat (PrimitiveType t,\n                               P p)", "description": "Visits a FLOAT primitive type."}, {"method_name": "visitPrimitiveAsDouble", "method_sig": "public R visitPrimitiveAsDouble (PrimitiveType t,\n                                P p)", "description": "Visits a DOUBLE primitive type."}, {"method_name": "visitNoType", "method_sig": "public R visitNoType (NoType t,\n                     P p)", "description": "Visits a NoType instance."}, {"method_name": "visitNoTypeAsVoid", "method_sig": "public R visitNoTypeAsVoid (NoType t,\n                           P p)", "description": "Visits a VOID pseudo-type."}, {"method_name": "visitNoTypeAsPackage", "method_sig": "public R visitNoTypeAsPackage (NoType t,\n                              P p)", "description": "Visits a PACKAGE pseudo-type."}, {"method_name": "visitNoTypeAsModule", "method_sig": "public R visitNoTypeAsModule (NoType t,\n                             P p)", "description": "Visits a MODULE pseudo-type."}, {"method_name": "visitNoTypeAsNone", "method_sig": "public R visitNoTypeAsNone (NoType t,\n                           P p)", "description": "Visits a NONE pseudo-type."}]}