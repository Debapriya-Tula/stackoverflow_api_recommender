{"name": "Class Ellipse2D", "module": "java.desktop", "package": "java.awt.geom", "text": "The Ellipse2D class describes an ellipse that is defined\n by a framing rectangle.\n \n This class is only the abstract superclass for all objects which\n store a 2D ellipse.\n The actual storage representation of the coordinates is left to\n the subclass.", "codes": ["public abstract class Ellipse2D\nextends RectangularShape"], "fields": [], "methods": [{"method_name": "contains", "method_sig": "public boolean contains (double x,\n                        double y)", "description": "Tests if the specified coordinates are inside the boundary of the\n Shape, as described by the\n \n definition of insideness."}, {"method_name": "intersects", "method_sig": "public boolean intersects (double x,\n                          double y,\n                          double w,\n                          double h)", "description": "Tests if the interior of the Shape intersects the\n interior of a specified rectangular area.\n The rectangular area is considered to intersect the Shape\n if any point is contained in both the interior of the\n Shape and the specified rectangular area.\n \n The Shape.intersects() method allows a Shape\n implementation to conservatively return true when:\n \n\n there is a high probability that the rectangular area and the\n Shape intersect, but\n \n the calculations to accurately determine this intersection\n are prohibitively expensive.\n \n This means that for some Shapes this method might\n return true even though the rectangular area does not\n intersect the Shape.\n The Area class performs\n more accurate computations of geometric intersection than most\n Shape objects and therefore can be used if a more precise\n answer is required."}, {"method_name": "contains", "method_sig": "public boolean contains (double x,\n                        double y,\n                        double w,\n                        double h)", "description": "Tests if the interior of the Shape entirely contains\n the specified rectangular area.  All coordinates that lie inside\n the rectangular area must lie within the Shape for the\n entire rectangular area to be considered contained within the\n Shape.\n \n The Shape.contains() method allows a Shape\n implementation to conservatively return false when:\n \n\n the intersect method returns true and\n \n the calculations to determine whether or not the\n Shape entirely contains the rectangular area are\n prohibitively expensive.\n \n This means that for some Shapes this method might\n return false even though the Shape contains\n the rectangular area.\n The Area class performs\n more accurate geometric computations than most\n Shape objects and therefore can be used if a more precise\n answer is required."}, {"method_name": "getPathIterator", "method_sig": "public PathIterator getPathIterator (AffineTransform at)", "description": "Returns an iteration object that defines the boundary of this\n Ellipse2D.\n The iterator for this class is multi-threaded safe, which means\n that this Ellipse2D class guarantees that\n modifications to the geometry of this Ellipse2D\n object do not affect any iterations of that geometry that\n are already in process."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Returns the hashcode for this Ellipse2D."}, {"method_name": "equals", "method_sig": "public boolean equals (Object obj)", "description": "Determines whether or not the specified Object is\n equal to this Ellipse2D.  The specified\n Object is equal to this Ellipse2D\n if it is an instance of Ellipse2D and if its\n location and size are the same as this Ellipse2D."}]}