{"name": "Class XMLGregorianCalendar", "module": "java.xml", "package": "javax.xml.datatype", "text": "Representation for W3C XML Schema 1.0 date/time datatypes.\n Specifically, these date/time datatypes are\n DatatypeConstants.DATETIME,\n DatatypeConstants.TIME,\n DatatypeConstants.DATE,\n DatatypeConstants.GYEARMONTH,\n DatatypeConstants.GMONTHDAY,\n DatatypeConstants.GYEAR,\n DatatypeConstants.GMONTH, and\n DatatypeConstants.GDAY\n defined in the XML Namespace\n \"http://www.w3.org/2001/XMLSchema\".\n These datatypes are normatively defined in\n W3C XML Schema 1.0 Part 2, Section 3.2.7-14.\n\n The table below defines the mapping between XML Schema 1.0\n date/time datatype fields and this class' fields. It also summarizes\n the value constraints for the date and time fields defined in\n W3C XML Schema 1.0 Part 2, Appendix D,\n ISO 8601 Date and Time Formats.\n\n \n\nDate/Time Datatype Field Mapping Between XML Schema 1.0 and Java Representation\n\n\nXML Schema 1.0\n           datatype\n            field\nRelatedXMLGregorianCalendarAccessor(s)\nValue Range\n\n\n\n\nyear\n getYear() + getEon() or\ngetEonAndYear()\n\n getYear() is a value between -(10^9-1) to (10^9)-1\n            or DatatypeConstants.FIELD_UNDEFINED.\ngetEon() is high order year value in billion of years.\ngetEon() has values greater than or equal to (10^9) or less than or equal to -(10^9).\n            A value of null indicates field is undefined.\n            Given that XML Schema 1.0 errata states that the year zero\n            will be a valid lexical value in a future version of XML Schema,\n            this class allows the year field to be set to zero. Otherwise,\n            the year field value is handled exactly as described\n            in the errata and [ISO-8601-1988]. Note that W3C XML Schema 1.0\n            validation does not allow for the year field to have a value of zero.\n            \n\n\nmonth\n getMonth() \n 1 to 12 or DatatypeConstants.FIELD_UNDEFINED \n\n\nday\n getDay() \n Independent of month, max range is 1 to 31 or DatatypeConstants.FIELD_UNDEFINED.\n            The normative value constraint stated relative to month\n            field's value is in W3C XML Schema 1.0 Part 2, Appendix D.\n       \n\n\nhour\ngetHour()\n\n         0 to 23 or DatatypeConstants.FIELD_UNDEFINED.\n         An hour value of 24 is allowed to be set in the lexical space provided the minute and second\n         field values are zero. However, an hour value of 24 is not allowed in value space and will be\n         transformed to represent the value of the first instance of the following day as per\n         \n         XML Schema Part 2: Datatypes Second Edition, 3.2 Primitive datatypes.\n       \n\n\nminute\n getMinute() \n 0 to 59 or DatatypeConstants.FIELD_UNDEFINED \n\n\nsecond\n\ngetSecond() + getMillisecond()/1000 or\ngetSecond() + getFractionalSecond()\n\n\ngetSecond() from 0 to 60 or DatatypeConstants.FIELD_UNDEFINED.\n(Note: 60 only allowable for leap second.)\ngetFractionalSecond() allows for infinite precision over the range from 0.0 to 1.0 when\n         the getSecond() is defined.\nFractionalSecond is optional and has a value of null when it is undefined.\ngetMillisecond() is the convenience\n            millisecond precision of value of getFractionalSecond().\n       \n\n\ntimezone\n getTimezone() \n Number of minutes or DatatypeConstants.FIELD_UNDEFINED.\n         Value range from -14 hours (-14 * 60 minutes) to 14 hours (14 * 60 minutes).\n       \n\n\n\nAll maximum value space constraints listed for the fields in the table\n above are checked by factory methods, DatatypeFactory,\n setter methods and parse methods of\n this class. IllegalArgumentException is thrown when a\n parameter's value is outside the value constraint for the field or\n if the composite\n values constitute an invalid XMLGregorianCalendar instance (for example, if\n the 31st of June is specified).\n\n The following operations are defined for this class:\n \naccessors/mutators for independent date/time fields\nconversion between this class and W3C XML Schema 1.0 lexical representation,\n     toString(), DatatypeFactory.newXMLGregorianCalendar(String lexicalRepresentation)\nconversion between this class and GregorianCalendar,\n     toGregorianCalendar(java.util.TimeZone timezone, java.util.Locale aLocale, XMLGregorianCalendar defaults),\n     DatatypeFactory\npartial order relation comparator method, compare(XMLGregorianCalendar xmlGregorianCalendar)\nequals(Object) defined relative to compare(XMLGregorianCalendar xmlGregorianCalendar).\naddition operation with Duration\n      instance as defined in \n      W3C XML Schema 1.0 Part 2, Appendix E, Adding durations to dateTimes.\n   \n", "codes": ["public abstract class XMLGregorianCalendar\nextends Object\nimplements Cloneable"], "fields": [], "methods": [{"method_name": "clear", "method_sig": "public abstract void clear()", "description": "Unset all fields to undefined.\n\n Set all int fields to DatatypeConstants.FIELD_UNDEFINED and reference fields\n to null."}, {"method_name": "reset", "method_sig": "public abstract void reset()", "description": "Reset this XMLGregorianCalendar to its original values.\n\n XMLGregorianCalendar is reset to the same values as when it was created with\n DatatypeFactory.newXMLGregorianCalendar(),\n DatatypeFactory.newXMLGregorianCalendar(String lexicalRepresentation),\n DatatypeFactory.newXMLGregorianCalendar(\n   BigInteger year,\n   int month,\n   int day,\n   int hour,\n   int minute,\n   int second,\n   BigDecimal fractionalSecond,\n   int timezone),\n DatatypeFactory.newXMLGregorianCalendar(\n   int year,\n   int month,\n   int day,\n   int hour,\n   int minute,\n   int second,\n   int millisecond,\n   int timezone),\n DatatypeFactory.newXMLGregorianCalendar(GregorianCalendar cal),\n DatatypeFactory.newXMLGregorianCalendarDate(\n   int year,\n   int month,\n   int day,\n   int timezone),\n DatatypeFactory.newXMLGregorianCalendarTime(\n   int hours,\n   int minutes,\n   int seconds,\n   int timezone),\n DatatypeFactory.newXMLGregorianCalendarTime(\n   int hours,\n   int minutes,\n   int seconds,\n   BigDecimal fractionalSecond,\n   int timezone) or\n DatatypeFactory.newXMLGregorianCalendarTime(\n   int hours,\n   int minutes,\n   int seconds,\n   int milliseconds,\n   int timezone).\n\n reset() is designed to allow the reuse of existing XMLGregorianCalendars\n thus saving resources associated with the creation of new XMLGregorianCalendars."}, {"method_name": "setYear", "method_sig": "public abstract void setYear (BigInteger year)", "description": "Set low and high order component of XSD dateTime year field.\n\n Unset this field by invoking the setter with a parameter value of null."}, {"method_name": "setYear", "method_sig": "public abstract void setYear (int year)", "description": "Set year of XSD dateTime year field.\n\n Unset this field by invoking the setter with a parameter value of\n DatatypeConstants.FIELD_UNDEFINED.\n\n Note: if the absolute value of the year parameter\n is less than 10^9, the eon component of the XSD year field is set to\n null by this method."}, {"method_name": "setMonth", "method_sig": "public abstract void setMonth (int month)", "description": "Set month.\n\n Unset this field by invoking the setter with a parameter value of DatatypeConstants.FIELD_UNDEFINED."}, {"method_name": "setDay", "method_sig": "public abstract void setDay (int day)", "description": "Set days in month.\n\n Unset this field by invoking the setter with a parameter value of DatatypeConstants.FIELD_UNDEFINED."}, {"method_name": "setTimezone", "method_sig": "public abstract void setTimezone (int offset)", "description": "Set the number of minutes in the timezone offset.\n\n Unset this field by invoking the setter with a parameter value of DatatypeConstants.FIELD_UNDEFINED."}, {"method_name": "setTime", "method_sig": "public void setTime (int hour,\n                    int minute,\n                    int second)", "description": "Set time as one unit."}, {"method_name": "setHour", "method_sig": "public abstract void setHour (int hour)", "description": "Set hours.\n\n Unset this field by invoking the setter with a parameter value of DatatypeConstants.FIELD_UNDEFINED."}, {"method_name": "setMinute", "method_sig": "public abstract void setMinute (int minute)", "description": "Set minutes.\n\n Unset this field by invoking the setter with a parameter value of DatatypeConstants.FIELD_UNDEFINED."}, {"method_name": "setSecond", "method_sig": "public abstract void setSecond (int second)", "description": "Set seconds.\n\n Unset this field by invoking the setter with a parameter value of DatatypeConstants.FIELD_UNDEFINED."}, {"method_name": "setMillisecond", "method_sig": "public abstract void setMillisecond (int millisecond)", "description": "Set milliseconds.\n\n Unset this field by invoking the setter with a parameter value of DatatypeConstants.FIELD_UNDEFINED."}, {"method_name": "setFractionalSecond", "method_sig": "public abstract void setFractionalSecond (BigDecimal fractional)", "description": "Set fractional seconds.\n\n Unset this field by invoking the setter with a parameter value of null."}, {"method_name": "setTime", "method_sig": "public void setTime (int hour,\n                    int minute,\n                    int second,\n                    BigDecimal fractional)", "description": "Set time as one unit, including the optional infinite precision\n fractional seconds."}, {"method_name": "setTime", "method_sig": "public void setTime (int hour,\n                    int minute,\n                    int second,\n                    int millisecond)", "description": "Set time as one unit, including optional milliseconds."}, {"method_name": "getEon", "method_sig": "public abstract BigInteger getEon()", "description": "Returns the high order component for XML Schema 1.0 dateTime datatype field for\n year.\n null if this optional part of the year field is not defined.\n\n Value constraints for this value are summarized in\n year field of date/time field mapping table."}, {"method_name": "getYear", "method_sig": "public abstract int getYear()", "description": "Returns the low order component for XML Schema 1.0 dateTime datatype field for\n year or DatatypeConstants.FIELD_UNDEFINED.\n\n Value constraints for this value are summarized in\n year field of date/time field mapping table."}, {"method_name": "getEonAndYear", "method_sig": "public abstract BigInteger getEonAndYear()", "description": "Returns the XML Schema 1.0 dateTime datatype field for\n year.\n\n Value constraints for this value are summarized in\n year field of date/time field mapping table."}, {"method_name": "getMonth", "method_sig": "public abstract int getMonth()", "description": "Returns the month of this calendar or DatatypeConstants.FIELD_UNDEFINED.\n\n Value constraints for this value are summarized in\n month field of date/time field mapping table."}, {"method_name": "getDay", "method_sig": "public abstract int getDay()", "description": "Returns the day of month or DatatypeConstants.FIELD_UNDEFINED.\n\n Value constraints for this value are summarized in\n day field of date/time field mapping table."}, {"method_name": "getTimezone", "method_sig": "public abstract int getTimezone()", "description": "Returns the Timezone offset in minutes or\n DatatypeConstants.FIELD_UNDEFINED if this optional field is not defined.\n\n Value constraints for this value are summarized in\n timezone field of date/time field mapping table."}, {"method_name": "getHour", "method_sig": "public abstract int getHour()", "description": "Returns the hour of day or\n DatatypeConstants.FIELD_UNDEFINED if this field is not defined.\n\n Value constraints for this value are summarized in\n hour field of date/time field mapping table."}, {"method_name": "getMinute", "method_sig": "public abstract int getMinute()", "description": "Returns the minute of hour or\n DatatypeConstants.FIELD_UNDEFINED if this field is not defined.\n\n Value constraints for this value are summarized in\n minute field of date/time field mapping table."}, {"method_name": "getSecond", "method_sig": "public abstract int getSecond()", "description": "Returns the second of minute or\n DatatypeConstants.FIELD_UNDEFINED if this field is not defined.\n When this field is not defined, the optional xs:dateTime\n fractional seconds field, represented by\n getFractionalSecond() and getMillisecond(),\n must not be defined.\n\n Value constraints for this value are summarized in\n second field of date/time field mapping table."}, {"method_name": "getMillisecond", "method_sig": "public int getMillisecond()", "description": "Returns the millisecond precision of getFractionalSecond().\n\n This method represents a convenience accessor to infinite\n precision fractional second value returned by\n getFractionalSecond(). The returned value is the rounded\n down to milliseconds value of\n getFractionalSecond(). When getFractionalSecond()\n returns null, this method must return\n DatatypeConstants.FIELD_UNDEFINED.\n\n Value constraints for this value are summarized in\n second field of date/time field mapping table."}, {"method_name": "getFractionalSecond", "method_sig": "public abstract BigDecimal getFractionalSecond()", "description": "Returns fractional seconds.\n\n null is returned when this optional field is not defined.\n\n Value constraints are detailed in\n second field of date/time field mapping table.\n\n This optional field can only have a defined value when the\n xs:dateTime second field, represented by getSecond(),\n does not return DatatypeConstants.FIELD_UNDEFINED."}, {"method_name": "compare", "method_sig": "public abstract int compare (XMLGregorianCalendar xmlGregorianCalendar)", "description": "Compare two instances of W3C XML Schema 1.0 date/time datatypes\n according to partial order relation defined in\n W3C XML Schema 1.0 Part 2, Section 3.2.7.3,\n Order relation on dateTime.\n\n xsd:dateTime datatype field mapping to accessors of\n this class are defined in\n date/time field mapping table."}, {"method_name": "normalize", "method_sig": "public abstract XMLGregorianCalendar normalize()", "description": "Normalize this instance to UTC.\n\n 2000-03-04T23:00:00+03:00 normalizes to 2000-03-04T20:00:00Z\n Implements W3C XML Schema Part 2, Section 3.2.7.3 (A)."}, {"method_name": "equals", "method_sig": "public boolean equals (Object obj)", "description": "Compares this calendar to the specified object. The result is\n true if and only if the argument is not null and is an\n XMLGregorianCalendar object that represents the same\n instant in time as this object."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Returns a hash code consistent with the definition of the equals method."}, {"method_name": "toXMLFormat", "method_sig": "public abstract String toXMLFormat()", "description": "Return the lexical representation of this instance.\n The format is specified in\n XML Schema 1.0 Part 2, Section 3.2.[7-14].1,\n Lexical Representation\".\nSpecific target lexical representation format is determined by\n getXMLSchemaType()."}, {"method_name": "getXMLSchemaType", "method_sig": "public abstract QName getXMLSchemaType()", "description": "Return the name of the XML Schema date/time type that this instance\n maps to. Type is computed based on fields that are set.\n\n \nRequired fields for XML Schema 1.0 Date/Time Datatypes.\n(timezone is optional for all date/time datatypes)\n\n\nDatatype\nyear\nmonth\nday\nhour\nminute\nsecond\n\n\n\n\nDatatypeConstants.DATETIME\nX\nX\nX\nX\nX\nX\n\n\nDatatypeConstants.DATE\nX\nX\nX\n\n\n\n\n\nDatatypeConstants.TIME\n\n\n\nX\nX\nX\n\n\nDatatypeConstants.GYEARMONTH\nX\nX\n\n\n\n\n\n\nDatatypeConstants.GMONTHDAY\n\nX\nX\n\n\n\n\n\nDatatypeConstants.GYEAR\nX\n\n\n\n\n\n\n\nDatatypeConstants.GMONTH\n\nX\n\n\n\n\n\n\nDatatypeConstants.GDAY\n\n\nX\n\n\n\n\n\n"}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a String representation of this XMLGregorianCalendar Object.\n\n The result is a lexical representation generated by toXMLFormat()."}, {"method_name": "isValid", "method_sig": "public abstract boolean isValid()", "description": "Validate instance by getXMLSchemaType() constraints."}, {"method_name": "add", "method_sig": "public abstract void add (Duration duration)", "description": "Add duration to this instance.\n\n The computation is specified in\n XML Schema 1.0 Part 2, Appendix E,\n Adding durations to dateTimes.\n date/time field mapping table\n defines the mapping from XML Schema 1.0 dateTime fields\n to this class' representation of those fields."}, {"method_name": "toGregorianCalendar", "method_sig": "public abstract GregorianCalendar toGregorianCalendar()", "description": "Convert this XMLGregorianCalendar to a GregorianCalendar.\n\n When this instance has an undefined field, this\n conversion relies on the java.util.GregorianCalendar default\n for its corresponding field. A notable difference between\n XML Schema 1.0 date/time datatypes and java.util.GregorianCalendar\n is that Timezone value is optional for date/time datatypes and it is\n a required field for java.util.GregorianCalendar. See javadoc\n for java.util.TimeZone.getDefault() on how the default\n is determined. To explicitly specify the TimeZone\n instance, see\n toGregorianCalendar(TimeZone, Locale, XMLGregorianCalendar).\n\n \nField by Field Conversion from this class to\n          java.util.GregorianCalendar\n\n\njava.util.GregorianCalendar field\njavax.xml.datatype.XMLGregorianCalendar field\n\n\n\n\nERA\ngetEonAndYear().signum() < 0 ? GregorianCalendar.BC : GregorianCalendar.AD\n\n\nYEAR\ngetEonAndYear().abs().intValue()*\n\n\nMONTH\ngetMonth() - DatatypeConstants.JANUARY + Calendar.JANUARY\n\n\nDAY_OF_MONTH\ngetDay()\n\n\nHOUR_OF_DAY\ngetHour()\n\n\nMINUTE\ngetMinute()\n\n\nSECOND\ngetSecond()\n\n\nMILLISECOND\nget millisecond order from getFractionalSecond()* \n\n\nGregorianCalendar.setTimeZone(TimeZone)\ngetTimezone() formatted into Custom timezone id\n\n\n\n* designates possible loss of precision during the conversion due\n to source datatype having higher precision than target datatype.\n\n To ensure consistency in conversion implementations, the new\n GregorianCalendar should be instantiated in following\n manner.\n \nUsing timeZone value as defined above, create a new\n java.util.GregorianCalendar(timeZone,Locale.getDefault()).\n   \nInitialize all GregorianCalendar fields by calling Calendar.clear().\nObtain a pure Gregorian Calendar by invoking\n   GregorianCalendar.setGregorianChange(\n   new Date(Long.MIN_VALUE)).\nIts fields ERA, YEAR, MONTH, DAY_OF_MONTH, HOUR_OF_DAY,\n       MINUTE, SECOND and MILLISECOND are set using the method\n       Calendar.set(int,int)\n"}, {"method_name": "toGregorianCalendar", "method_sig": "public abstract GregorianCalendar toGregorianCalendar (TimeZone timezone,\n                                                      Locale aLocale,\n                                                      XMLGregorianCalendar defaults)", "description": "Convert this XMLGregorianCalendar along with provided parameters\n to a GregorianCalendar instance.\n\n  Since XML Schema 1.0 date/time datetypes has no concept of\n timezone ids or daylight savings timezone ids, this conversion operation\n allows the user to explicitly specify one with\n timezone parameter.\n\n To compute the return value's TimeZone field,\n \nwhen parameter timeZone is non-null,\n it is the timezone field.\nelse when this.getTimezone() != FIELD_UNDEFINED,\n create a java.util.TimeZone with a custom timezone id\n using the this.getTimezone().\nelse when defaults.getTimezone() != FIELD_UNDEFINED,\n create a java.util.TimeZone with a custom timezone id\n using defaults.getTimezone().\nelse use the GregorianCalendar default timezone value\n for the host is defined as specified by\n java.util.TimeZone.getDefault().\n\nTo ensure consistency in conversion implementations, the new\n GregorianCalendar should be instantiated in following\n manner.\n \nCreate a new java.util.GregorianCalendar(TimeZone,\n       Locale) with TimeZone set as specified above and the\n       Locale parameter.\n   \nInitialize all GregorianCalendar fields by calling Calendar.clear()\nObtain a pure Gregorian Calendar by invoking\n   GregorianCalendar.setGregorianChange(\n   new Date(Long.MIN_VALUE)).\nIts fields ERA, YEAR, MONTH, DAY_OF_MONTH, HOUR_OF_DAY,\n       MINUTE, SECOND and MILLISECOND are set using the method\n       Calendar.set(int,int)\n"}, {"method_name": "getTimeZone", "method_sig": "public abstract TimeZone getTimeZone (int defaultZoneoffset)", "description": "Returns a java.util.TimeZone for this class.\n\n If timezone field is defined for this instance,\n returns TimeZone initialized with custom timezone id\n of zoneoffset. If timezone field is undefined,\n try the defaultZoneoffset that was passed in.\n If defaultZoneoffset is FIELD_UNDEFINED, return\n default timezone for this host.\n (Same default as java.util.GregorianCalendar)."}, {"method_name": "clone", "method_sig": "public abstract Object clone()", "description": "Creates and returns a copy of this object."}]}