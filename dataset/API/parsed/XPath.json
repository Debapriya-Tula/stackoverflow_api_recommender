{"name": "Interface XPath", "module": "java.xml", "package": "javax.xml.xpath", "text": "XPath provides access to the XPath evaluation environment and expressions.\n The XPath evaluation is affected by the factors described in the following table.\n\n \n\nEvaluation of XPath Expressions\n\n\nFactor\nBehavior\n\n\n\n\ncontext\n\n        The type of the context is implementation-dependent. If the value is\n        null, the operation must have no dependency on the context, otherwise\n        an XPathExpressionException will be thrown.\n\n        For the purposes of evaluating XPath expressions, a DocumentFragment\n        is treated like a Document node.\n      \n\n\nvariables\n\n        If the expression contains a variable reference, its value will be found through the XPathVariableResolver\n        set with setXPathVariableResolver(XPathVariableResolver resolver).\n        An XPathExpressionException is raised if the variable resolver is undefined or\n        the resolver returns null for the variable.\n        The value of a variable must be immutable through the course of any single evaluation.\n      \n\n\nfunctions\n\n        If the expression contains a function reference, the function will be found through the XPathFunctionResolver\n        set with setXPathFunctionResolver(XPathFunctionResolver resolver).\n        An XPathExpressionException is raised if the function resolver is undefined or\n        the function resolver returns null for the function.\n      \n\n\nQNames\n\n        QNames in the expression are resolved against the XPath namespace context\n        set with setNamespaceContext(NamespaceContext nsContext).\n      \n\n\nresult\n\n        This result of evaluating an expression is converted to an instance of the desired return type.\n        Valid return types are defined in XPathConstants.\n        Conversion to the return type follows XPath conversion rules.\n      \n\n\n\nAn XPath object is not thread-safe and not reentrant.\n In other words, it is the application's responsibility to make\n sure that one XPath object is not used from\n more than one thread at any given time, and while the evaluate\n method is invoked, applications may not recursively call\n the evaluate method.", "codes": ["public interface XPath"], "fields": [], "methods": [{"method_name": "reset", "method_sig": "void reset()", "description": "Reset this XPath to its original configuration.\n\n XPath is reset to the same state as when it was created with\n XPathFactory.newXPath().\n reset() is designed to allow the reuse of existing XPaths\n thus saving resources associated with the creation of new XPaths.\n\n The reset XPath is not guaranteed to have the same\n XPathFunctionResolver, XPathVariableResolver\n or NamespaceContext Objects, e.g. Object.equals(Object obj).\n It is guaranteed to have a functionally equal XPathFunctionResolver,\n XPathVariableResolver and NamespaceContext."}, {"method_name": "setXPathVariableResolver", "method_sig": "void setXPathVariableResolver (XPathVariableResolver resolver)", "description": "Establish a variable resolver.\n\n A NullPointerException is thrown if resolver is null."}, {"method_name": "getXPathVariableResolver", "method_sig": "XPathVariableResolver getXPathVariableResolver()", "description": "Return the current variable resolver.\n\n null is returned in no variable resolver is in effect."}, {"method_name": "setXPathFunctionResolver", "method_sig": "void setXPathFunctionResolver (XPathFunctionResolver resolver)", "description": "Establish a function resolver.\n\n A NullPointerException is thrown if resolver is null."}, {"method_name": "getXPathFunctionResolver", "method_sig": "XPathFunctionResolver getXPathFunctionResolver()", "description": "Return the current function resolver.\n \nnull is returned in no function resolver is in effect."}, {"method_name": "setNamespaceContext", "method_sig": "void setNamespaceContext (NamespaceContext nsContext)", "description": "Establish a namespace context.\n\n A NullPointerException is thrown if nsContext is null."}, {"method_name": "getNamespaceContext", "method_sig": "NamespaceContext getNamespaceContext()", "description": "Return the current namespace context.\n\n null is returned in no namespace context is in effect."}, {"method_name": "compile", "method_sig": "XPathExpression compile (String expression)\n                 throws XPathExpressionException", "description": "Compile an XPath expression for later evaluation.\n\n If expression contains any XPathFunctions,\n they must be available via the XPathFunctionResolver.\n An XPathExpressionException will be thrown if the\n XPathFunction\n cannot be resovled with the XPathFunctionResolver.\n\n If expression contains any variables, the\n XPathVariableResolver in effect\n at compile time will be used to resolve them."}, {"method_name": "evaluate", "method_sig": "Object evaluate (String expression,\n                Object item,\n                QName returnType)\n         throws XPathExpressionException", "description": "Evaluate an XPath expression in the specified context and\n return the result as the specified type.\n\n \n See Evaluation of XPath Expressions\n for context item evaluation, variable, function and QName resolution\n and return type conversion.\n \n The parameter item represents the context the XPath expression\n will be operated on. The type of the context is implementation-dependent.\n If the value is null, the operation must have no dependency on\n the context, otherwise an XPathExpressionException will be thrown."}, {"method_name": "evaluate", "method_sig": "String evaluate (String expression,\n                Object item)\n         throws XPathExpressionException", "description": "Evaluate an XPath expression in the specified context and return the result as a String.\n\n This method calls evaluate(String expression, Object item, QName returnType) with a returnType of\n XPathConstants.STRING.\n\n See Evaluation of XPath Expressions for context item evaluation,\n variable, function and QName resolution and return type conversion.\n\n \n The parameter item represents the context the XPath expression\n will be operated on. The type of the context is implementation-dependent.\n If the value is null, the operation must have no dependency on\n the context, otherwise an XPathExpressionException will be thrown."}, {"method_name": "evaluate", "method_sig": "Object evaluate (String expression,\n                InputSource source,\n                QName returnType)\n         throws XPathExpressionException", "description": "Evaluate an XPath expression in the context of the specified InputSource\n and return the result as the specified type.\n\n This method builds a data model for the InputSource and calls\n evaluate(String expression, Object item, QName returnType) on the resulting document object.\n\n See Evaluation of XPath Expressions for context item evaluation,\n variable, function and QName resolution and return type conversion."}, {"method_name": "evaluate", "method_sig": "String evaluate (String expression,\n                InputSource source)\n         throws XPathExpressionException", "description": "Evaluate an XPath expression in the context of the specified InputSource\n and return the result as a String.\n\n This method calls evaluate(String expression, InputSource source, QName returnType) with a\n returnType of XPathConstants.STRING.\n\n See Evaluation of XPath Expressions for context item evaluation,\n variable, function and QName resolution and return type conversion."}, {"method_name": "evaluateExpression", "method_sig": "default <T> T evaluateExpression (String expression,\n                                 Object item,\n                                 Class<T> type)\n                          throws XPathExpressionException", "description": "Evaluate an XPath expression in the specified context and return\n the result with the type specified through the class type\n\n The parameter item represents the context the XPath expression\n will be operated on. The type of the context is implementation-dependent.\n If the value is null, the operation must have no dependency on\n the context, otherwise an XPathExpressionException will be thrown."}, {"method_name": "evaluateExpression", "method_sig": "default XPathEvaluationResult<?> evaluateExpression (String expression,\n                                                    Object item)\n                                             throws XPathExpressionException", "description": "Evaluate an XPath expression in the specified context. This is equivalent to\n calling evaluateExpression(String expression, Object item, Class type)\n with type XPathEvaluationResult:\n  \n     evaluateExpression(expression, item, XPathEvaluationResult.class);\n \n\n The parameter item represents the context the XPath expression\n will be operated on. The type of the context is implementation-dependent.\n If the value is null, the operation must have no dependency on\n the context, otherwise an XPathExpressionException will be thrown."}, {"method_name": "evaluateExpression", "method_sig": "default <T> T evaluateExpression (String expression,\n                                 InputSource source,\n                                 Class<T> type)\n                          throws XPathExpressionException", "description": "Evaluate an XPath expression in the context of the specified source\n and return the result as specified.\n \n This method builds a data model for the InputSource and calls\n evaluateExpression(String expression, Object item, Class type)\n on the resulting document object. The data model is usually\n Document"}, {"method_name": "evaluateExpression", "method_sig": "default XPathEvaluationResult<?> evaluateExpression (String expression,\n                                                    InputSource source)\n                                             throws XPathExpressionException", "description": "Evaluate an XPath expression in the specified context. This is equivalent to\n calling evaluateExpression(String expression, Object item, Class type)\n with type XPathEvaluationResult:\n  \n     evaluateExpression(expression, item, XPathEvaluationResult.class);\n "}]}