{"name": "Class DefaultMutableTreeNode", "module": "java.desktop", "package": "javax.swing.tree", "text": "A DefaultMutableTreeNode is a general-purpose node in a tree data\n structure.\n For examples of using default mutable tree nodes, see\n How to Use Trees\n in The Java Tutorial.\n\n\n A tree node may have at most one parent and 0 or more children.\n DefaultMutableTreeNode provides operations for examining and modifying a\n node's parent and children and also operations for examining the tree that\n the node is a part of.  A node's tree is the set of all nodes that can be\n reached by starting at the node and following all the possible links to\n parents and children.  A node with no parent is the root of its tree; a\n node with no children is a leaf.  A tree may consist of many subtrees,\n each node acting as the root for its own subtree.\n \n This class provides enumerations for efficiently traversing a tree or\n subtree in various orders or for following the path between two nodes.\n A DefaultMutableTreeNode may also hold a reference to a user object, the\n use of which is left to the user.  Asking a DefaultMutableTreeNode for its\n string representation with toString() returns the string\n representation of its user object.\n \nThis is not a thread safe class.If you intend to use\n a DefaultMutableTreeNode (or a tree of TreeNodes) in more than one thread, you\n need to do your own synchronizing. A good convention to adopt is\n synchronizing on the root node of a tree.\n \n While DefaultMutableTreeNode implements the MutableTreeNode interface and\n will allow you to add in any implementation of MutableTreeNode not all\n of the methods in DefaultMutableTreeNode will be applicable to all\n MutableTreeNodes implementations. Especially with some of the enumerations\n that are provided, using some of these methods assumes the\n DefaultMutableTreeNode contains only DefaultMutableNode instances. All\n of the TreeNode/MutableTreeNode methods will behave as defined no\n matter what implementations are added.\n\n \nWarning:\n Serialized objects of this class will not be compatible with\n future Swing releases. The current serialization support is\n appropriate for short term storage or RMI between applications running\n the same version of Swing.  As of 1.4, support for long term storage\n of all JavaBeans\u2122\n has been added to the java.beans package.\n Please see XMLEncoder.", "codes": ["public class DefaultMutableTreeNode\nextends Object\nimplements Cloneable, MutableTreeNode, Serializable"], "fields": [{"field_name": "EMPTY_ENUMERATION", "field_sig": "public static final\u00a0Enumeration<TreeNode> EMPTY_ENUMERATION", "description": "An enumeration that is always empty. This is used when an enumeration\n of a leaf node's children is requested."}, {"field_name": "parent", "field_sig": "protected\u00a0MutableTreeNode parent", "description": "this node's parent, or null if this node has no parent"}, {"field_name": "children", "field_sig": "protected\u00a0Vector<TreeNode> children", "description": "array of children, may be null if this node has no children"}, {"field_name": "userObject", "field_sig": "protected transient\u00a0Object userObject", "description": "optional user object"}, {"field_name": "allowsChildren", "field_sig": "protected\u00a0boolean allowsChildren", "description": "true if the node is able to have children"}], "methods": [{"method_name": "insert", "method_sig": "public void insert (MutableTreeNode newChild,\n                   int childIndex)", "description": "Removes newChild from its present parent (if it has a\n parent), sets the child's parent to this node, and then adds the child\n to this node's child array at index childIndex.\n newChild must not be null and must not be an ancestor of\n this node."}, {"method_name": "remove", "method_sig": "public void remove (int childIndex)", "description": "Removes the child at the specified index from this node's children\n and sets that node's parent to null. The child node to remove\n must be a MutableTreeNode."}, {"method_name": "setParent", "method_sig": "public void setParent (MutableTreeNode newParent)", "description": "Sets this node's parent to newParent but does not\n change the parent's child array.  This method is called from\n insert() and remove() to\n reassign a child's parent, it should not be messaged from anywhere\n else."}, {"method_name": "getParent", "method_sig": "public TreeNode getParent()", "description": "Returns this node's parent or null if this node has no parent."}, {"method_name": "getChildAt", "method_sig": "public TreeNode getChildAt (int index)", "description": "Returns the child at the specified index in this node's child array."}, {"method_name": "getChildCount", "method_sig": "public int getChildCount()", "description": "Returns the number of children of this node."}, {"method_name": "getIndex", "method_sig": "public int getIndex (TreeNode aChild)", "description": "Returns the index of the specified child in this node's child array.\n If the specified node is not a child of this node, returns\n -1.  This method performs a linear search and is O(n)\n where n is the number of children."}, {"method_name": "children", "method_sig": "public Enumeration<TreeNode> children()", "description": "Creates and returns a forward-order enumeration of this node's\n children.  Modifying this node's child array invalidates any child\n enumerations created before the modification."}, {"method_name": "setAllowsChildren", "method_sig": "public void setAllowsChildren (boolean allows)", "description": "Determines whether or not this node is allowed to have children.\n If allows is false, all of this node's children are\n removed.\n \n Note: By default, a node allows children."}, {"method_name": "getAllowsChildren", "method_sig": "public boolean getAllowsChildren()", "description": "Returns true if this node is allowed to have children."}, {"method_name": "setUserObject", "method_sig": "public void setUserObject (Object userObject)", "description": "Sets the user object for this node to userObject."}, {"method_name": "getUserObject", "method_sig": "public Object getUserObject()", "description": "Returns this node's user object."}, {"method_name": "removeFromParent", "method_sig": "public void removeFromParent()", "description": "Removes the subtree rooted at this node from the tree, giving this\n node a null parent.  Does nothing if this node is the root of its\n tree."}, {"method_name": "remove", "method_sig": "public void remove (MutableTreeNode aChild)", "description": "Removes aChild from this node's child array, giving it a\n null parent."}, {"method_name": "removeAllChildren", "method_sig": "public void removeAllChildren()", "description": "Removes all of this node's children, setting their parents to null.\n If this node has no children, this method does nothing."}, {"method_name": "add", "method_sig": "public void add (MutableTreeNode newChild)", "description": "Removes newChild from its parent and makes it a child of\n this node by adding it to the end of this node's child array."}, {"method_name": "isNodeAncestor", "method_sig": "public boolean isNodeAncestor (TreeNode anotherNode)", "description": "Returns true if anotherNode is an ancestor of this node\n -- if it is this node, this node's parent, or an ancestor of this\n node's parent.  (Note that a node is considered an ancestor of itself.)\n If anotherNode is null, this method returns false.  This\n operation is at worst O(h) where h is the distance from the root to\n this node."}, {"method_name": "isNodeDescendant", "method_sig": "public boolean isNodeDescendant (DefaultMutableTreeNode anotherNode)", "description": "Returns true if anotherNode is a descendant of this node\n -- if it is this node, one of this node's children, or a descendant of\n one of this node's children.  Note that a node is considered a\n descendant of itself.  If anotherNode is null, returns\n false.  This operation is at worst O(h) where h is the distance from the\n root to anotherNode."}, {"method_name": "getSharedAncestor", "method_sig": "public TreeNode getSharedAncestor (DefaultMutableTreeNode aNode)", "description": "Returns the nearest common ancestor to this node and aNode.\n Returns null, if no such ancestor exists -- if this node and\n aNode are in different trees or if aNode is\n null.  A node is considered an ancestor of itself."}, {"method_name": "isNodeRelated", "method_sig": "public boolean isNodeRelated (DefaultMutableTreeNode aNode)", "description": "Returns true if and only if aNode is in the same tree\n as this node.  Returns false if aNode is null."}, {"method_name": "getDepth", "method_sig": "public int getDepth()", "description": "Returns the depth of the tree rooted at this node -- the longest\n distance from this node to a leaf.  If this node has no children,\n returns 0.  This operation is much more expensive than\n getLevel() because it must effectively traverse the entire\n tree rooted at this node."}, {"method_name": "getLevel", "method_sig": "public int getLevel()", "description": "Returns the number of levels above this node -- the distance from\n the root to this node.  If this node is the root, returns 0."}, {"method_name": "getPath", "method_sig": "public TreeNode[] getPath()", "description": "Returns the path from the root, to get to this node.  The last\n element in the path is this node."}, {"method_name": "getPathToRoot", "method_sig": "protected TreeNode[] getPathToRoot (TreeNode aNode,\n                                   int depth)", "description": "Builds the parents of node up to and including the root node,\n where the original node is the last element in the returned array.\n The length of the returned array gives the node's depth in the\n tree."}, {"method_name": "getUserObjectPath", "method_sig": "public Object[] getUserObjectPath()", "description": "Returns the user object path, from the root, to get to this node.\n If some of the TreeNodes in the path have null user objects, the\n returned path will contain nulls."}, {"method_name": "getRoot", "method_sig": "public TreeNode getRoot()", "description": "Returns the root of the tree that contains this node.  The root is\n the ancestor with a null parent."}, {"method_name": "isRoot", "method_sig": "public boolean isRoot()", "description": "Returns true if this node is the root of the tree.  The root is\n the only node in the tree with a null parent; every tree has exactly\n one root."}, {"method_name": "getNextNode", "method_sig": "public DefaultMutableTreeNode getNextNode()", "description": "Returns the node that follows this node in a preorder traversal of this\n node's tree.  Returns null if this node is the last node of the\n traversal.  This is an inefficient way to traverse the entire tree; use\n an enumeration, instead."}, {"method_name": "getPreviousNode", "method_sig": "public DefaultMutableTreeNode getPreviousNode()", "description": "Returns the node that precedes this node in a preorder traversal of\n this node's tree.  Returns null if this node is the\n first node of the traversal -- the root of the tree.\n This is an inefficient way to\n traverse the entire tree; use an enumeration, instead."}, {"method_name": "preorderEnumeration", "method_sig": "public Enumeration<TreeNode> preorderEnumeration()", "description": "Creates and returns an enumeration that traverses the subtree rooted at\n this node in preorder.  The first node returned by the enumeration's\n nextElement() method is this node.\n\n Modifying the tree by inserting, removing, or moving a node invalidates\n any enumerations created before the modification."}, {"method_name": "postorderEnumeration", "method_sig": "public Enumeration<TreeNode> postorderEnumeration()", "description": "Creates and returns an enumeration that traverses the subtree rooted at\n this node in postorder.  The first node returned by the enumeration's\n nextElement() method is the leftmost leaf.  This is the\n same as a depth-first traversal.\n\n Modifying the tree by inserting, removing, or moving a node invalidates\n any enumerations created before the modification."}, {"method_name": "breadthFirstEnumeration", "method_sig": "public Enumeration<TreeNode> breadthFirstEnumeration()", "description": "Creates and returns an enumeration that traverses the subtree rooted at\n this node in breadth-first order.  The first node returned by the\n enumeration's nextElement() method is this node.\n\n Modifying the tree by inserting, removing, or moving a node invalidates\n any enumerations created before the modification."}, {"method_name": "depthFirstEnumeration", "method_sig": "public Enumeration<TreeNode> depthFirstEnumeration()", "description": "Creates and returns an enumeration that traverses the subtree rooted at\n this node in depth-first order.  The first node returned by the\n enumeration's nextElement() method is the leftmost leaf.\n This is the same as a postorder traversal.\n\n Modifying the tree by inserting, removing, or moving a node invalidates\n any enumerations created before the modification."}, {"method_name": "pathFromAncestorEnumeration", "method_sig": "public Enumeration<TreeNode> pathFromAncestorEnumeration (TreeNode ancestor)", "description": "Creates and returns an enumeration that follows the path from\n ancestor to this node.  The enumeration's\n nextElement() method first returns ancestor,\n then the child of ancestor that is an ancestor of this\n node, and so on, and finally returns this node.  Creation of the\n enumeration is O(m) where m is the number of nodes between this node\n and ancestor, inclusive.  Each nextElement()\n message is O(1).\n\n Modifying the tree by inserting, removing, or moving a node invalidates\n any enumerations created before the modification."}, {"method_name": "isNodeChild", "method_sig": "public boolean isNodeChild (TreeNode aNode)", "description": "Returns true if aNode is a child of this node.  If\n aNode is null, this method returns false."}, {"method_name": "getFirstChild", "method_sig": "public TreeNode getFirstChild()", "description": "Returns this node's first child.  If this node has no children,\n throws NoSuchElementException."}, {"method_name": "getLastChild", "method_sig": "public TreeNode getLastChild()", "description": "Returns this node's last child.  If this node has no children,\n throws NoSuchElementException."}, {"method_name": "getChildAfter", "method_sig": "public TreeNode getChildAfter (TreeNode aChild)", "description": "Returns the child in this node's child array that immediately\n follows aChild, which must be a child of this node.  If\n aChild is the last child, returns null.  This method\n performs a linear search of this node's children for\n aChild and is O(n) where n is the number of children; to\n traverse the entire array of children, use an enumeration instead."}, {"method_name": "getChildBefore", "method_sig": "public TreeNode getChildBefore (TreeNode aChild)", "description": "Returns the child in this node's child array that immediately\n precedes aChild, which must be a child of this node.  If\n aChild is the first child, returns null.  This method\n performs a linear search of this node's children for aChild\n and is O(n) where n is the number of children."}, {"method_name": "isNodeSibling", "method_sig": "public boolean isNodeSibling (TreeNode anotherNode)", "description": "Returns true if anotherNode is a sibling of (has the\n same parent as) this node.  A node is its own sibling.  If\n anotherNode is null, returns false."}, {"method_name": "getSiblingCount", "method_sig": "public int getSiblingCount()", "description": "Returns the number of siblings of this node.  A node is its own sibling\n (if it has no parent or no siblings, this method returns\n 1)."}, {"method_name": "getNextSibling", "method_sig": "public DefaultMutableTreeNode getNextSibling()", "description": "Returns the next sibling of this node in the parent's children array.\n Returns null if this node has no parent or is the parent's last child.\n This method performs a linear search that is O(n) where n is the number\n of children; to traverse the entire array, use the parent's child\n enumeration instead."}, {"method_name": "getPreviousSibling", "method_sig": "public DefaultMutableTreeNode getPreviousSibling()", "description": "Returns the previous sibling of this node in the parent's children\n array.  Returns null if this node has no parent or is the parent's\n first child.  This method performs a linear search that is O(n) where n\n is the number of children."}, {"method_name": "isLeaf", "method_sig": "public boolean isLeaf()", "description": "Returns true if this node has no children.  To distinguish between\n nodes that have no children and nodes that cannot have\n children (e.g. to distinguish files from empty directories), use this\n method in conjunction with getAllowsChildren"}, {"method_name": "getFirstLeaf", "method_sig": "public DefaultMutableTreeNode getFirstLeaf()", "description": "Finds and returns the first leaf that is a descendant of this node --\n either this node or its first child's first leaf.\n Returns this node if it is a leaf."}, {"method_name": "getLastLeaf", "method_sig": "public DefaultMutableTreeNode getLastLeaf()", "description": "Finds and returns the last leaf that is a descendant of this node --\n either this node or its last child's last leaf.\n Returns this node if it is a leaf."}, {"method_name": "getNextLeaf", "method_sig": "public DefaultMutableTreeNode getNextLeaf()", "description": "Returns the leaf after this node or null if this node is the\n last leaf in the tree.\n \n In this implementation of the MutableNode interface,\n this operation is very inefficient. In order to determine the\n next node, this method first performs a linear search in the\n parent's child-list in order to find the current node.\n \n That implementation makes the operation suitable for short\n traversals from a known position. But to traverse all of the\n leaves in the tree, you should use depthFirstEnumeration\n to enumerate the nodes in the tree and use isLeaf\n on each node to determine which are leaves."}, {"method_name": "getPreviousLeaf", "method_sig": "public DefaultMutableTreeNode getPreviousLeaf()", "description": "Returns the leaf before this node or null if this node is the\n first leaf in the tree.\n \n In this implementation of the MutableNode interface,\n this operation is very inefficient. In order to determine the\n previous node, this method first performs a linear search in the\n parent's child-list in order to find the current node.\n \n That implementation makes the operation suitable for short\n traversals from a known position. But to traverse all of the\n leaves in the tree, you should use depthFirstEnumeration\n to enumerate the nodes in the tree and use isLeaf\n on each node to determine which are leaves."}, {"method_name": "getLeafCount", "method_sig": "public int getLeafCount()", "description": "Returns the total number of leaves that are descendants of this node.\n If this node is a leaf, returns 1.  This method is O(n)\n where n is the number of descendants of this node."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns the result of sending toString() to this node's\n user object, or the empty string if the node has no user object."}, {"method_name": "clone", "method_sig": "public Object clone()", "description": "Overridden to make clone public.  Returns a shallow copy of this node;\n the new node has no parent or children and has a reference to the same\n user object, if any."}]}