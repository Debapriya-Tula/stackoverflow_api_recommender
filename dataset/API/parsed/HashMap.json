{"name": "Class HashMap<K,\u200bV>", "module": "java.base", "package": "java.util", "text": "Hash table based implementation of the Map interface.  This\n implementation provides all of the optional map operations, and permits\n null values and the null key.  (The HashMap\n class is roughly equivalent to Hashtable, except that it is\n unsynchronized and permits nulls.)  This class makes no guarantees as to\n the order of the map; in particular, it does not guarantee that the order\n will remain constant over time.\n\n This implementation provides constant-time performance for the basic\n operations (get and put), assuming the hash function\n disperses the elements properly among the buckets.  Iteration over\n collection views requires time proportional to the \"capacity\" of the\n HashMap instance (the number of buckets) plus its size (the number\n of key-value mappings).  Thus, it's very important not to set the initial\n capacity too high (or the load factor too low) if iteration performance is\n important.\n\n An instance of HashMap has two parameters that affect its\n performance: initial capacity and load factor.  The\n capacity is the number of buckets in the hash table, and the initial\n capacity is simply the capacity at the time the hash table is created.  The\n load factor is a measure of how full the hash table is allowed to\n get before its capacity is automatically increased.  When the number of\n entries in the hash table exceeds the product of the load factor and the\n current capacity, the hash table is rehashed (that is, internal data\n structures are rebuilt) so that the hash table has approximately twice the\n number of buckets.\n\n As a general rule, the default load factor (.75) offers a good\n tradeoff between time and space costs.  Higher values decrease the\n space overhead but increase the lookup cost (reflected in most of\n the operations of the HashMap class, including\n get and put).  The expected number of entries in\n the map and its load factor should be taken into account when\n setting its initial capacity, so as to minimize the number of\n rehash operations.  If the initial capacity is greater than the\n maximum number of entries divided by the load factor, no rehash\n operations will ever occur.\n\n If many mappings are to be stored in a HashMap\n instance, creating it with a sufficiently large capacity will allow\n the mappings to be stored more efficiently than letting it perform\n automatic rehashing as needed to grow the table.  Note that using\n many keys with the same hashCode() is a sure way to slow\n down performance of any hash table. To ameliorate impact, when keys\n are Comparable, this class may use comparison order among\n keys to help break ties.\n\n Note that this implementation is not synchronized.\n If multiple threads access a hash map concurrently, and at least one of\n the threads modifies the map structurally, it must be\n synchronized externally.  (A structural modification is any operation\n that adds or deletes one or more mappings; merely changing the value\n associated with a key that an instance already contains is not a\n structural modification.)  This is typically accomplished by\n synchronizing on some object that naturally encapsulates the map.\n\n If no such object exists, the map should be \"wrapped\" using the\n Collections.synchronizedMap\n method.  This is best done at creation time, to prevent accidental\n unsynchronized access to the map:\n   Map m = Collections.synchronizedMap(new HashMap(...));\nThe iterators returned by all of this class's \"collection view methods\"\n are fail-fast: if the map is structurally modified at any time after\n the iterator is created, in any way except through the iterator's own\n remove method, the iterator will throw a\n ConcurrentModificationException.  Thus, in the face of concurrent\n modification, the iterator fails quickly and cleanly, rather than risking\n arbitrary, non-deterministic behavior at an undetermined time in the\n future.\n\n Note that the fail-fast behavior of an iterator cannot be guaranteed\n as it is, generally speaking, impossible to make any hard guarantees in the\n presence of unsynchronized concurrent modification.  Fail-fast iterators\n throw ConcurrentModificationException on a best-effort basis.\n Therefore, it would be wrong to write a program that depended on this\n exception for its correctness: the fail-fast behavior of iterators\n should be used only to detect bugs.\nThis class is a member of the\n \n Java Collections Framework.", "codes": ["public class HashMap<K, V>\nextends AbstractMap<K, V>\nimplements Map<K, V>, Cloneable, Serializable"], "fields": [], "methods": [{"method_name": "size", "method_sig": "public int size()", "description": "Returns the number of key-value mappings in this map."}, {"method_name": "isEmpty", "method_sig": "public boolean isEmpty()", "description": "Returns true if this map contains no key-value mappings."}, {"method_name": "get", "method_sig": "public V get (Object key)", "description": "Returns the value to which the specified key is mapped,\n or null if this map contains no mapping for the key.\n\n More formally, if this map contains a mapping from a key\n k to a value v such that (key==null ? k==null :\n key.equals(k)), then this method returns v; otherwise\n it returns null.  (There can be at most one such mapping.)\n\n A return value of null does not necessarily\n indicate that the map contains no mapping for the key; it's also\n possible that the map explicitly maps the key to null.\n The containsKey operation may be used to\n distinguish these two cases."}, {"method_name": "containsKey", "method_sig": "public boolean containsKey (Object key)", "description": "Returns true if this map contains a mapping for the\n specified key."}, {"method_name": "put", "method_sig": "public V put (K key,\n             V value)", "description": "Associates the specified value with the specified key in this map.\n If the map previously contained a mapping for the key, the old\n value is replaced."}, {"method_name": "putAll", "method_sig": "public void putAll (Map<? extends K, ? extends V> m)", "description": "Copies all of the mappings from the specified map to this map.\n These mappings will replace any mappings that this map had for\n any of the keys currently in the specified map."}, {"method_name": "remove", "method_sig": "public V remove (Object key)", "description": "Removes the mapping for the specified key from this map if present."}, {"method_name": "clear", "method_sig": "public void clear()", "description": "Removes all of the mappings from this map.\n The map will be empty after this call returns."}, {"method_name": "containsValue", "method_sig": "public boolean containsValue (Object value)", "description": "Returns true if this map maps one or more keys to the\n specified value."}, {"method_name": "keySet", "method_sig": "public Set<K> keySet()", "description": "Returns a Set view of the keys contained in this map.\n The set is backed by the map, so changes to the map are\n reflected in the set, and vice-versa.  If the map is modified\n while an iteration over the set is in progress (except through\n the iterator's own remove operation), the results of\n the iteration are undefined.  The set supports element removal,\n which removes the corresponding mapping from the map, via the\n Iterator.remove, Set.remove,\n removeAll, retainAll, and clear\n operations.  It does not support the add or addAll\n operations."}, {"method_name": "values", "method_sig": "public Collection<V> values()", "description": "Returns a Collection view of the values contained in this map.\n The collection is backed by the map, so changes to the map are\n reflected in the collection, and vice-versa.  If the map is\n modified while an iteration over the collection is in progress\n (except through the iterator's own remove operation),\n the results of the iteration are undefined.  The collection\n supports element removal, which removes the corresponding\n mapping from the map, via the Iterator.remove,\n Collection.remove, removeAll,\n retainAll and clear operations.  It does not\n support the add or addAll operations."}, {"method_name": "entrySet", "method_sig": "public Set<Map.Entry<K, V>> entrySet()", "description": "Returns a Set view of the mappings contained in this map.\n The set is backed by the map, so changes to the map are\n reflected in the set, and vice-versa.  If the map is modified\n while an iteration over the set is in progress (except through\n the iterator's own remove operation, or through the\n setValue operation on a map entry returned by the\n iterator) the results of the iteration are undefined.  The set\n supports element removal, which removes the corresponding\n mapping from the map, via the Iterator.remove,\n Set.remove, removeAll, retainAll and\n clear operations.  It does not support the\n add or addAll operations."}, {"method_name": "computeIfAbsent", "method_sig": "public V computeIfAbsent (K key,\n                         Function<? super K, ? extends V> mappingFunction)", "description": "If the specified key is not already associated with a value (or is mapped\n to null), attempts to compute its value using the given mapping\n function and enters it into this map unless null.\n\n If the mapping function returns null, no mapping is recorded.\n If the mapping function itself throws an (unchecked) exception, the\n exception is rethrown, and no mapping is recorded.  The most\n common usage is to construct a new object serving as an initial\n mapped value or memoized result, as in:\n\n  \n map.computeIfAbsent(key, k -> new Value(f(k)));\n \nOr to implement a multi-value map, Map<K,Collection<V>>,\n supporting multiple values per key:\n\n  \n map.computeIfAbsent(key, k -> new HashSet<V>()).add(v);\n \nThe mapping function should not modify this map during computation.\n\n This method will, on a best-effort basis, throw a\n ConcurrentModificationException if it is detected that the\n mapping function modifies this map during computation."}, {"method_name": "computeIfPresent", "method_sig": "public V computeIfPresent (K key,\n                          BiFunction<? super K, ? super V, ? extends V> remappingFunction)", "description": "If the value for the specified key is present and non-null, attempts to\n compute a new mapping given the key and its current mapped value.\n\n If the remapping function returns null, the mapping is removed.\n If the remapping function itself throws an (unchecked) exception, the\n exception is rethrown, and the current mapping is left unchanged.\n\n The remapping function should not modify this map during computation.\n\n This method will, on a best-effort basis, throw a\n ConcurrentModificationException if it is detected that the\n remapping function modifies this map during computation."}, {"method_name": "compute", "method_sig": "public V compute (K key,\n                 BiFunction<? super K, ? super V, ? extends V> remappingFunction)", "description": "Attempts to compute a mapping for the specified key and its current\n mapped value (or null if there is no current mapping). For\n example, to either create or append a String msg to a value\n mapping:\n\n  \n map.compute(key, (k, v) -> (v == null) ? msg : v.concat(msg))\n (Method merge() is often simpler to use for such purposes.)\n\n If the remapping function returns null, the mapping is removed\n (or remains absent if initially absent).  If the remapping function\n itself throws an (unchecked) exception, the exception is rethrown, and\n the current mapping is left unchanged.\n\n The remapping function should not modify this map during computation.\n\n This method will, on a best-effort basis, throw a\n ConcurrentModificationException if it is detected that the\n remapping function modifies this map during computation."}, {"method_name": "merge", "method_sig": "public V merge (K key,\n               V value,\n               BiFunction<? super V, ? super V, ? extends V> remappingFunction)", "description": "If the specified key is not already associated with a value or is\n associated with null, associates it with the given non-null value.\n Otherwise, replaces the associated value with the results of the given\n remapping function, or removes if the result is null. This\n method may be of use when combining multiple mapped values for a key.\n For example, to either create or append a String msg to a\n value mapping:\n\n  \n map.merge(key, msg, String::concat)\n \nIf the remapping function returns null, the mapping is removed.\n If the remapping function itself throws an (unchecked) exception, the\n exception is rethrown, and the current mapping is left unchanged.\n\n The remapping function should not modify this map during computation.\n\n This method will, on a best-effort basis, throw a\n ConcurrentModificationException if it is detected that the\n remapping function modifies this map during computation."}, {"method_name": "clone", "method_sig": "public Object clone()", "description": "Returns a shallow copy of this HashMap instance: the keys and\n values themselves are not cloned."}]}