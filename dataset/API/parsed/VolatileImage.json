{"name": "Class VolatileImage", "module": "java.desktop", "package": "java.awt.image", "text": "VolatileImage is an image which can lose its\n contents at any time due to circumstances beyond the control of the\n application (e.g., situations caused by the operating system or by\n other applications). Because of the potential for hardware acceleration,\n a VolatileImage object can have significant performance benefits on\n some platforms.\n \n The drawing surface of an image (the memory where the image contents\n actually reside) can be lost or invalidated, causing the contents of that\n memory to go away.  The drawing surface thus needs to be restored\n or recreated and the contents of that surface need to be\n re-rendered.  VolatileImage provides an interface for\n allowing the user to detect these problems and fix them\n when they occur.\n \n When a VolatileImage object is created, limited system resources\n such as video memory (VRAM) may be allocated in order to support\n the image.\n When a VolatileImage object is no longer used, it may be\n garbage-collected and those system resources will be returned,\n but this process does not happen at guaranteed times.\n Applications that create many VolatileImage objects (for example,\n a resizing window may force recreation of its back buffer as the\n size changes) may run out of optimal system resources for new\n VolatileImage objects simply because the old objects have not\n yet been removed from the system.\n (New VolatileImage objects may still be created, but they\n may not perform as well as those created in accelerated\n memory).\n The flush method may be called at any time to proactively release\n the resources used by a VolatileImage so that it does not prevent\n subsequent VolatileImage objects from being accelerated.\n In this way, applications can have more control over the state\n of the resources taken up by obsolete VolatileImage objects.\n \n This image should not be subclassed directly but should be created\n by using the Component.createVolatileImage or\n GraphicsConfiguration.createCompatibleVolatileImage(int, int) methods.\n \n An example of using a VolatileImage object follows:\n \n // image creation\n VolatileImage vImg = createVolatileImage(w, h);\n\n\n // rendering to the image\n void renderOffscreen() {\n      do {\n          if (vImg.validate(getGraphicsConfiguration()) ==\n              VolatileImage.IMAGE_INCOMPATIBLE)\n          {\n              // old vImg doesn't work with new GraphicsConfig; re-create it\n              vImg = createVolatileImage(w, h);\n          }\n          Graphics2D g = vImg.createGraphics();\n          //\n          // miscellaneous rendering commands...\n          //\n          g.dispose();\n      } while (vImg.contentsLost());\n }\n\n\n // copying from the image (here, gScreen is the Graphics\n // object for the onscreen window)\n do {\n      int returnCode = vImg.validate(getGraphicsConfiguration());\n      if (returnCode == VolatileImage.IMAGE_RESTORED) {\n          // Contents need to be restored\n          renderOffscreen();      // restore contents\n      } else if (returnCode == VolatileImage.IMAGE_INCOMPATIBLE) {\n          // old vImg doesn't work with new GraphicsConfig; re-create it\n          vImg = createVolatileImage(w, h);\n          renderOffscreen();\n      }\n      gScreen.drawImage(vImg, 0, 0, this);\n } while (vImg.contentsLost());\n \n\n Note that this class subclasses from the Image class, which\n includes methods that take an ImageObserver parameter for\n asynchronous notifications as information is received from\n a potential ImageProducer.  Since this VolatileImage\n is not loaded from an asynchronous source, the various methods that take\n an ImageObserver parameter will behave as if the data has\n already been obtained from the ImageProducer.\n Specifically, this means that the return values from such methods\n will never indicate that the information is not yet available and\n the ImageObserver used in such methods will never\n need to be recorded for an asynchronous callback notification.", "codes": ["public abstract class VolatileImage\nextends Image\nimplements Transparency"], "fields": [{"field_name": "IMAGE_OK", "field_sig": "public static final\u00a0int IMAGE_OK", "description": "Validated image is ready to use as-is."}, {"field_name": "IMAGE_RESTORED", "field_sig": "public static final\u00a0int IMAGE_RESTORED", "description": "Validated image has been restored and is now ready to use.\n Note that restoration causes contents of the image to be lost."}, {"field_name": "IMAGE_INCOMPATIBLE", "field_sig": "public static final\u00a0int IMAGE_INCOMPATIBLE", "description": "Validated image is incompatible with supplied\n GraphicsConfiguration object and should be\n re-created as appropriate.  Usage of the image as-is\n after receiving this return code from validate\n is undefined."}, {"field_name": "transparency", "field_sig": "protected\u00a0int transparency", "description": "The transparency value with which this image was created."}], "methods": [{"method_name": "getSnapshot", "method_sig": "public abstract BufferedImage getSnapshot()", "description": "Returns a static snapshot image of this object.  The\n BufferedImage returned is only current with\n the VolatileImage at the time of the request\n and will not be updated with any future changes to the\n VolatileImage."}, {"method_name": "getWidth", "method_sig": "public abstract int getWidth()", "description": "Returns the width of the VolatileImage."}, {"method_name": "getHeight", "method_sig": "public abstract int getHeight()", "description": "Returns the height of the VolatileImage."}, {"method_name": "getSource", "method_sig": "public ImageProducer getSource()", "description": "This returns an ImageProducer for this VolatileImage.\n Note that the VolatileImage object is optimized for\n rendering operations and blitting to the screen or other\n VolatileImage objects, as opposed to reading back the\n pixels of the image.  Therefore, operations such as\n getSource may not perform as fast as\n operations that do not rely on reading the pixels.\n Note also that the pixel values read from the image are current\n with those in the image only at the time that they are\n retrieved. This method takes a snapshot\n of the image at the time the request is made and the\n ImageProducer object returned works with\n that static snapshot image, not the original VolatileImage.\n Calling getSource()\n is equivalent to calling getSnapshot().getSource()."}, {"method_name": "getGraphics", "method_sig": "public Graphics getGraphics()", "description": "This method returns a Graphics2D, but is here\n for backwards compatibility.  createGraphics is more\n convenient, since it is declared to return a\n Graphics2D."}, {"method_name": "createGraphics", "method_sig": "public abstract Graphics2D createGraphics()", "description": "Creates a Graphics2D, which can be used to draw into\n this VolatileImage."}, {"method_name": "validate", "method_sig": "public abstract int validate (GraphicsConfiguration gc)", "description": "Attempts to restore the drawing surface of the image if the surface\n had been lost since the last validate call.  Also\n validates this image against the given GraphicsConfiguration\n parameter to see whether operations from this image to the\n GraphicsConfiguration are compatible.  An example of an\n incompatible combination might be a situation where a VolatileImage\n object was created on one graphics device and then was used\n to render to a different graphics device.  Since VolatileImage\n objects tend to be very device-specific, this operation might\n not work as intended, so the return code from this validate\n call would note that incompatibility.  A null or incorrect\n value for gc may cause incorrect values to be returned from\n validate and may cause later problems with rendering."}, {"method_name": "contentsLost", "method_sig": "public abstract boolean contentsLost()", "description": "Returns true if rendering data was lost since last\n validate call.  This method should be called by the\n application at the end of any series of rendering operations to\n or from the image to see whether\n the image needs to be validated and the rendering redone."}, {"method_name": "getCapabilities", "method_sig": "public abstract ImageCapabilities getCapabilities()", "description": "Returns an ImageCapabilities object which can be\n inquired as to the specific capabilities of this\n VolatileImage.  This would allow programmers to find\n out more runtime information on the specific VolatileImage\n object that they have created.  For example, the user\n might create a VolatileImage but the system may have\n no video memory left for creating an image of that\n size, so although the object is a VolatileImage, it is\n not as accelerated as other VolatileImage objects on\n this platform might be.  The user might want that\n information to find other solutions to their problem."}, {"method_name": "getTransparency", "method_sig": "public int getTransparency()", "description": "Returns the transparency.  Returns either OPAQUE, BITMASK,\n or TRANSLUCENT."}]}