{"name": "Interface BeanContextServiceProvider", "module": "java.desktop", "package": "java.beans.beancontext", "text": "\n One of the primary functions of a BeanContext is to act a as rendezvous\n between JavaBeans, and BeanContextServiceProviders.\n \n\n A JavaBean nested within a BeanContext, may ask that BeanContext to\n provide an instance of a \"service\", based upon a reference to a Java\n Class object that represents that service.\n \n\n If such a service has been registered with the context, or one of its\n nesting context's, in the case where a context delegate to its context\n to satisfy a service request, then the BeanContextServiceProvider associated with\n the service is asked to provide an instance of that service.\n \n\n The ServcieProvider may always return the same instance, or it may\n construct a new instance for each request.\n ", "codes": ["public interface BeanContextServiceProvider"], "fields": [], "methods": [{"method_name": "getService", "method_sig": "Object getService (BeanContextServices bcs,\n                  Object requestor,\n                  Class<?> serviceClass,\n                  Object serviceSelector)", "description": "Invoked by BeanContextServices, this method\n requests an instance of a\n service from this BeanContextServiceProvider."}, {"method_name": "releaseService", "method_sig": "void releaseService (BeanContextServices bcs,\n                    Object requestor,\n                    Object service)", "description": "Invoked by BeanContextServices,\n this method releases a nested BeanContextChild's\n (or any arbitrary object associated with a\n BeanContextChild) reference to the specified service."}, {"method_name": "getCurrentServiceSelectors", "method_sig": "Iterator<?> getCurrentServiceSelectors (BeanContextServices bcs,\n                                       Class<?> serviceClass)", "description": "Invoked by BeanContextServices, this method\n gets the current service selectors for the specified service.\n A service selector is a service specific parameter,\n typical examples of which could include: a\n parameter to a constructor for the service implementation class,\n a value for a particular service's property, or a key into a\n map of existing implementations."}]}