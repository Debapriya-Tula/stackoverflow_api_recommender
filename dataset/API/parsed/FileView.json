{"name": "Class FileView", "module": "java.desktop", "package": "javax.swing.filechooser", "text": "FileView defines an abstract class that can be implemented\n to provide the filechooser with UI information for a File.\n Each L&F JFileChooserUI object implements this\n class to pass back the correct icons and type descriptions specific to\n that L&F. For example, the Microsoft Windows L&F returns the\n generic Windows icons for directories and generic files.\n Additionally, you may want to provide your own FileView to\n JFileChooser to return different icons or additional\n information using JFileChooser.setFileView(javax.swing.filechooser.FileView).\n\n \nJFileChooser first looks to see if there is a user defined\n FileView, if there is, it gets type information from\n there first. If FileView returns null for\n any method, JFileChooser then uses the L&F specific\n view to get the information.\n So, for example, if you provide a FileView class that\n returns an Icon for JPG files, and returns null\n icons for all other files, the UI's FileView will provide\n default icons for all other files.\n\n \n\n For an example implementation of a simple file view, see\n yourJDK/demo/jfc/FileChooserDemo/ExampleFileView.java.\n For more information and examples see\n How to Use File Choosers,\n a section in The Java Tutorial.", "codes": ["public abstract class FileView\nextends Object"], "fields": [], "methods": [{"method_name": "getName", "method_sig": "public String getName (File f)", "description": "The name of the file. Normally this would be simply\n f.getName()."}, {"method_name": "getDescription", "method_sig": "public String getDescription (File f)", "description": "A human readable description of the file. For example,\n a file named jag.jpg might have a description that read:\n \"A JPEG image file of James Gosling's face\"."}, {"method_name": "getTypeDescription", "method_sig": "public String getTypeDescription (File f)", "description": "A human readable description of the type of the file. For\n example, a jpg file might have a type description of:\n \"A JPEG Compressed Image File\""}, {"method_name": "getIcon", "method_sig": "public Icon getIcon (File f)", "description": "The icon that represents this file in the JFileChooser."}, {"method_name": "isTraversable", "method_sig": "public Boolean isTraversable (File f)", "description": "Whether the directory is traversable or not. This might be\n useful, for example, if you want a directory to represent\n a compound document and don't want the user to descend into it."}]}