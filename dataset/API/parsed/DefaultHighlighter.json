{"name": "Class DefaultHighlighter", "module": "java.desktop", "package": "javax.swing.text", "text": "Implements the Highlighter interfaces.  Implements a simple highlight\n painter that renders in a solid color.", "codes": ["public class DefaultHighlighter\nextends LayeredHighlighter"], "fields": [{"field_name": "DefaultPainter", "field_sig": "public static final\u00a0LayeredHighlighter.LayerPainter DefaultPainter", "description": "Default implementation of LayeredHighlighter.LayerPainter that can\n be used for painting highlights.\n \n As of 1.4 this field is final."}], "methods": [{"method_name": "paint", "method_sig": "public void paint (Graphics g)", "description": "Renders the highlights."}, {"method_name": "install", "method_sig": "public void install (JTextComponent c)", "description": "Called when the UI is being installed into the\n interface of a JTextComponent.  Installs the editor, and\n removes any existing highlights."}, {"method_name": "deinstall", "method_sig": "public void deinstall (JTextComponent c)", "description": "Called when the UI is being removed from the interface of\n a JTextComponent."}, {"method_name": "addHighlight", "method_sig": "public Object addHighlight (int p0,\n                           int p1,\n                           Highlighter.HighlightPainter p)\n                    throws BadLocationException", "description": "Adds a highlight to the view.  Returns a tag that can be used\n to refer to the highlight."}, {"method_name": "removeHighlight", "method_sig": "public void removeHighlight (Object tag)", "description": "Removes a highlight from the view."}, {"method_name": "removeAllHighlights", "method_sig": "public void removeAllHighlights()", "description": "Removes all highlights."}, {"method_name": "changeHighlight", "method_sig": "public void changeHighlight (Object tag,\n                            int p0,\n                            int p1)\n                     throws BadLocationException", "description": "Changes a highlight."}, {"method_name": "getHighlights", "method_sig": "public Highlighter.Highlight[] getHighlights()", "description": "Makes a copy of the highlights.  Does not actually clone each highlight,\n but only makes references to them."}, {"method_name": "paintLayeredHighlights", "method_sig": "public void paintLayeredHighlights (Graphics g,\n                                   int p0,\n                                   int p1,\n                                   Shape viewBounds,\n                                   JTextComponent editor,\n                                   View view)", "description": "When leaf Views (such as LabelView) are rendering they should\n call into this method. If a highlight is in the given region it will\n be drawn immediately."}, {"method_name": "setDrawsLayeredHighlights", "method_sig": "public void setDrawsLayeredHighlights (boolean newValue)", "description": "If true, highlights are drawn as the Views draw the text. That is\n the Views will call into paintLayeredHighlight which\n will result in a rectangle being drawn before the text is drawn\n (if the offsets are in a highlighted region that is). For this to\n work the painter supplied must be an instance of\n LayeredHighlightPainter."}, {"method_name": "getDrawsLayeredHighlights", "method_sig": "public boolean getDrawsLayeredHighlights()", "description": "Return the draw layered highlights."}]}