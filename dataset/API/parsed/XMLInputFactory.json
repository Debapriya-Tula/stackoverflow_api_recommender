{"name": "Class XMLInputFactory", "module": "java.xml", "package": "javax.xml.stream", "text": "Defines an abstract implementation of a factory for getting streams.\n\n The following table defines the standard properties of this specification.\n Each property varies in the level of support required by each implementation.\n The level of support required is described in the 'Required' column.\n\n   \nConfiguration Parameters\n\n\nProperty Name\nBehavior\nReturn type\nDefault Value\nRequired\n\n\n\njavax.xml.stream.isValidatingTurns on/off implementation specific DTD validationBooleanFalseNo\njavax.xml.stream.isNamespaceAwareTurns on/off namespace processing for XML 1.0 supportBooleanTrueTrue (required) / False (optional)\njavax.xml.stream.isCoalescingRequires the processor to coalesce adjacent character dataBooleanFalseYes\njavax.xml.stream.isReplacingEntityReferencesreplace internal entity references with their replacement text and report them as charactersBooleanTrueYes\njavax.xml.stream.isSupportingExternalEntitiesResolve external parsed entitiesBooleanUnspecifiedYes\njavax.xml.stream.supportDTDUse this property to request processors that do not support DTDsBooleanTrueYes\njavax.xml.stream.reportersets/gets the impl of the XMLReporter javax.xml.stream.XMLReporterNullYes\njavax.xml.stream.resolversets/gets the impl of the XMLResolver interfacejavax.xml.stream.XMLResolverNullYes\njavax.xml.stream.allocatorsets/gets the impl of the XMLEventAllocator interfacejavax.xml.stream.util.XMLEventAllocatorNullYes\n\n", "codes": ["public abstract class XMLInputFactory\nextends Object"], "fields": [{"field_name": "IS_NAMESPACE_AWARE", "field_sig": "public static final\u00a0String IS_NAMESPACE_AWARE", "description": "The property used to turn on/off namespace support,\n this is to support XML 1.0 documents,\n only the true setting must be supported"}, {"field_name": "IS_VALIDATING", "field_sig": "public static final\u00a0String IS_VALIDATING", "description": "The property used to turn on/off implementation specific validation"}, {"field_name": "IS_COALESCING", "field_sig": "public static final\u00a0String IS_COALESCING", "description": "The property that requires the parser to coalesce adjacent character data sections"}, {"field_name": "IS_REPLACING_ENTITY_REFERENCES", "field_sig": "public static final\u00a0String IS_REPLACING_ENTITY_REFERENCES", "description": "Requires the parser to replace internal\n entity references with their replacement\n text and report them as characters"}, {"field_name": "IS_SUPPORTING_EXTERNAL_ENTITIES", "field_sig": "public static final\u00a0String IS_SUPPORTING_EXTERNAL_ENTITIES", "description": "The property that requires the parser to resolve external parsed entities"}, {"field_name": "SUPPORT_DTD", "field_sig": "public static final\u00a0String SUPPORT_DTD", "description": "The property that requires the parser to support DTDs"}, {"field_name": "REPORTER", "field_sig": "public static final\u00a0String REPORTER", "description": "The property used to\n set/get the implementation of the XMLReporter interface"}, {"field_name": "RESOLVER", "field_sig": "public static final\u00a0String RESOLVER", "description": "The property used to set/get the implementation of the XMLResolver"}, {"field_name": "ALLOCATOR", "field_sig": "public static final\u00a0String ALLOCATOR", "description": "The property used to set/get the implementation of the allocator"}], "methods": [{"method_name": "newDefaultFactory", "method_sig": "public static XMLInputFactory newDefaultFactory()", "description": "Creates a new instance of the XMLInputFactory builtin\n system-default implementation."}, {"method_name": "newInstance", "method_sig": "public static XMLInputFactory newInstance()\n                                   throws FactoryConfigurationError", "description": "Creates a new instance of the factory in exactly the same manner as the\n newFactory() method."}, {"method_name": "newFactory", "method_sig": "public static XMLInputFactory newFactory()\n                                  throws FactoryConfigurationError", "description": "Create a new instance of the factory.\n \n This static method creates a new factory instance.\n This method uses the following ordered lookup procedure to determine\n the XMLInputFactory implementation class to load:\n\n \n\nUse the javax.xml.stream.XMLInputFactory system property.\n \n\nUse the configuration file \"stax.properties\". The file is in standard\n   Properties format and typically located in the\n   conf directory of the Java installation. It contains the fully qualified\n   name of the implementation class with the key being the system property\n   defined above.\n\n   The stax.properties file is read only once by the implementation\n   and its values are then cached for future use.  If the file does not exist\n   when the first attempt is made to read from it, no further attempts are\n   made to check for its existence.  It is not possible to change the value\n   of any property in stax.properties after it has been read for the first time.\n\n   \n   Use the jaxp configuration file \"jaxp.properties\". The file is in the same\n   format as stax.properties and will only be read if stax.properties does\n   not exist.\n \n\nUse the service-provider loading facility, defined by the\n   ServiceLoader class, to attempt to locate and load an\n   implementation of the service using the default loading mechanism:\n   the service-provider loading facility will use the current thread's context class loader\n   to attempt to load the service. If the context class\n   loader is null, the system class loader will be used.\n \n\nOtherwise, the system-default\n    implementation is returned.\n \n\n\n   Once an application has obtained a reference to a XMLInputFactory it\n   can use the factory to configure and obtain stream instances."}, {"method_name": "newInstance", "method_sig": "@Deprecated(since=\"1.7\")\npublic static XMLInputFactory newInstance (String factoryId,\n                                          ClassLoader classLoader)\n                                   throws FactoryConfigurationError", "description": "Create a new instance of the factory"}, {"method_name": "newFactory", "method_sig": "public static XMLInputFactory newFactory (String factoryId,\n                                         ClassLoader classLoader)\n                                  throws FactoryConfigurationError", "description": "Create a new instance of the factory.\n If the classLoader argument is null, then the ContextClassLoader is used.\n \n This method uses the following ordered lookup procedure to determine\n the XMLInputFactory implementation class to load:\n \n\n\n   Use the value of the system property identified by factoryId.\n \n\n\n   Use the configuration file \"stax.properties\". The file is in standard\n   Properties format and typically located in the\n   conf directory of the Java installation. It contains the fully qualified\n   name of the implementation class with the key being the system property\n   defined above.\n\n   \n   The stax.properties file is read only once by the implementation\n   and its values are then cached for future use.  If the file does not exist\n   when the first attempt is made to read from it, no further attempts are\n   made to check for its existence.  It is not possible to change the value\n   of any property in stax.properties after it has been read for the first time.\n\n   \n   Use the jaxp configuration file \"jaxp.properties\". The file is in the same\n   format as stax.properties and will only be read if stax.properties does\n   not exist.\n \n\n\n   If factoryId is \"javax.xml.stream.XMLInputFactory\",\n   use the service-provider loading facility, defined by the\n   ServiceLoader class, to attempt to locate and load\n   an implementation of the service using the specified ClassLoader.\n   If classLoader is null, the default loading mechanism will apply:\n   That is, the service-provider loading facility will use the current thread's context class loader\n   to attempt to load the service. If the context class\n   loader is null, the system class loader will be used.\n \n\n\n   Otherwise, throws a FactoryConfigurationError.\n \n\n\n Note that this is a new method that replaces the deprecated\n   newInstance(String factoryId, ClassLoader classLoader) method.\n No changes in behavior are defined by this replacement method relative\n to the deprecated method."}, {"method_name": "createXMLStreamReader", "method_sig": "public abstract XMLStreamReader createXMLStreamReader (Reader reader)\n                                               throws XMLStreamException", "description": "Create a new XMLStreamReader from a reader"}, {"method_name": "createXMLStreamReader", "method_sig": "public abstract XMLStreamReader createXMLStreamReader (Source source)\n                                               throws XMLStreamException", "description": "Create a new XMLStreamReader from a JAXP source.  This method is optional."}, {"method_name": "createXMLStreamReader", "method_sig": "public abstract XMLStreamReader createXMLStreamReader (InputStream stream)\n                                               throws XMLStreamException", "description": "Create a new XMLStreamReader from a java.io.InputStream"}, {"method_name": "createXMLStreamReader", "method_sig": "public abstract XMLStreamReader createXMLStreamReader (InputStream stream,\n                                                      String encoding)\n                                               throws XMLStreamException", "description": "Create a new XMLStreamReader from a java.io.InputStream"}, {"method_name": "createXMLStreamReader", "method_sig": "public abstract XMLStreamReader createXMLStreamReader (String systemId,\n                                                      InputStream stream)\n                                               throws XMLStreamException", "description": "Create a new XMLStreamReader from a java.io.InputStream"}, {"method_name": "createXMLStreamReader", "method_sig": "public abstract XMLStreamReader createXMLStreamReader (String systemId,\n                                                      Reader reader)\n                                               throws XMLStreamException", "description": "Create a new XMLStreamReader from a java.io.InputStream"}, {"method_name": "createXMLEventReader", "method_sig": "public abstract XMLEventReader createXMLEventReader (Reader reader)\n                                             throws XMLStreamException", "description": "Create a new XMLEventReader from a reader"}, {"method_name": "createXMLEventReader", "method_sig": "public abstract XMLEventReader createXMLEventReader (String systemId,\n                                                    Reader reader)\n                                             throws XMLStreamException", "description": "Create a new XMLEventReader from a reader"}, {"method_name": "createXMLEventReader", "method_sig": "public abstract XMLEventReader createXMLEventReader (XMLStreamReader reader)\n                                             throws XMLStreamException", "description": "Create a new XMLEventReader from an XMLStreamReader.  After being used\n to construct the XMLEventReader instance returned from this method\n the XMLStreamReader must not be used."}, {"method_name": "createXMLEventReader", "method_sig": "public abstract XMLEventReader createXMLEventReader (Source source)\n                                             throws XMLStreamException", "description": "Create a new XMLEventReader from a JAXP source.\n Support of this method is optional."}, {"method_name": "createXMLEventReader", "method_sig": "public abstract XMLEventReader createXMLEventReader (InputStream stream)\n                                             throws XMLStreamException", "description": "Create a new XMLEventReader from a java.io.InputStream"}, {"method_name": "createXMLEventReader", "method_sig": "public abstract XMLEventReader createXMLEventReader (InputStream stream,\n                                                    String encoding)\n                                             throws XMLStreamException", "description": "Create a new XMLEventReader from a java.io.InputStream"}, {"method_name": "createXMLEventReader", "method_sig": "public abstract XMLEventReader createXMLEventReader (String systemId,\n                                                    InputStream stream)\n                                             throws XMLStreamException", "description": "Create a new XMLEventReader from a java.io.InputStream"}, {"method_name": "createFilteredReader", "method_sig": "public abstract XMLStreamReader createFilteredReader (XMLStreamReader reader,\n                                                     StreamFilter filter)\n                                              throws XMLStreamException", "description": "Create a filtered reader that wraps the filter around the reader"}, {"method_name": "createFilteredReader", "method_sig": "public abstract XMLEventReader createFilteredReader (XMLEventReader reader,\n                                                    EventFilter filter)\n                                             throws XMLStreamException", "description": "Create a filtered event reader that wraps the filter around the event reader"}, {"method_name": "getXMLResolver", "method_sig": "public abstract XMLResolver getXMLResolver()", "description": "The resolver that will be set on any XMLStreamReader or XMLEventReader created\n by this factory instance."}, {"method_name": "setXMLResolver", "method_sig": "public abstract void setXMLResolver (XMLResolver resolver)", "description": "The resolver that will be set on any XMLStreamReader or XMLEventReader created\n by this factory instance."}, {"method_name": "getXMLReporter", "method_sig": "public abstract XMLReporter getXMLReporter()", "description": "The reporter that will be set on any XMLStreamReader or XMLEventReader created\n by this factory instance."}, {"method_name": "setXMLReporter", "method_sig": "public abstract void setXMLReporter (XMLReporter reporter)", "description": "The reporter that will be set on any XMLStreamReader or XMLEventReader created\n by this factory instance."}, {"method_name": "setProperty", "method_sig": "public abstract void setProperty (String name,\n                                 Object value)\n                          throws IllegalArgumentException", "description": "Allows the user to set specific feature/property on the underlying\n implementation. The underlying implementation is not required to support\n every setting of every property in the specification and may use\n IllegalArgumentException to signal that an unsupported property may not be\n set with the specified value.\n \n All implementations that implement JAXP 1.5 or newer are required to\n support the XMLConstants.ACCESS_EXTERNAL_DTD property.\n \n\n\n        Access to external DTDs, external Entity References is restricted to the\n        protocols specified by the property. If access is denied during parsing\n        due to the restriction of this property, XMLStreamException\n        will be thrown by the XMLStreamReader.next() or\n        XMLEventReader.nextEvent() method.\n\n   \n"}, {"method_name": "getProperty", "method_sig": "public abstract Object getProperty (String name)\n                            throws IllegalArgumentException", "description": "Get the value of a feature/property from the underlying implementation"}, {"method_name": "isPropertySupported", "method_sig": "public abstract boolean isPropertySupported (String name)", "description": "Query the set of properties that this factory supports."}, {"method_name": "setEventAllocator", "method_sig": "public abstract void setEventAllocator (XMLEventAllocator allocator)", "description": "Set a user defined event allocator for events"}, {"method_name": "getEventAllocator", "method_sig": "public abstract XMLEventAllocator getEventAllocator()", "description": "Gets the allocator used by streams created with this factory"}]}