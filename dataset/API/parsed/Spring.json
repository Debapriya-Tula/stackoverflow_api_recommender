{"name": "Class Spring", "module": "java.desktop", "package": "javax.swing", "text": "An instance of the Spring class holds three properties that\n  characterize its behavior: the minimum, preferred, and\n  maximum values. Each of these properties may be involved in\n  defining its fourth, value, property based on a series of rules.\n  \n  An instance of the Spring class can be visualized as a\n  mechanical spring that provides a corrective force as the spring is compressed\n  or stretched away from its preferred value. This force is modelled\n  as linear function of the distance from the preferred value, but with\n  two different constants -- one for the compressional force and one for the\n  tensional one. Those constants are specified by the minimum and maximum\n  values of the spring such that a spring at its minimum value produces an\n  equal and opposite force to that which is created when it is at its\n  maximum value. The difference between the preferred and\n  minimum values, therefore, represents the ease with which the\n  spring can be compressed and the difference between its maximum\n  and preferred values, indicates the ease with which the\n  Spring can be extended.\n  See the sum(javax.swing.Spring, javax.swing.Spring) method for details.\n\n  \n  By defining simple arithmetic operations on Springs,\n  the behavior of a collection of Springs\n  can be reduced to that of an ordinary (non-compound) Spring. We define\n  the \"+\", \"-\", max, and min operators on\n  Springs so that, in each case, the result is a Spring\n  whose characteristics bear a useful mathematical relationship to its constituent\n  springs.\n\n  \n  A Spring can be treated as a pair of intervals\n  with a single common point: the preferred value.\n  The following rules define some of the\n  arithmetic operators that can be applied to intervals\n  ([a, b] refers to the interval\n  from a\n  to b,\n  where a <= b).\n\n  \n          [a1, b1] + [a2, b2] = [a1 + a2, b1 + b2]\n\n                      -[a, b] = [-b, -a]\n\n      max([a1, b1], [a2, b2]) = [max(a1, a2), max(b1, b2)]\n  \n\n\n  If we denote Springs as [a, b, c],\n  where a <= b <= c, we can define the same\n  arithmetic operators on Springs:\n\n  \n          [a1, b1, c1] + [a2, b2, c2] = [a1 + a2, b1 + b2, c1 + c2]\n\n                           -[a, b, c] = [-c, -b, -a]\n\n      max([a1, b1, c1], [a2, b2, c2]) = [max(a1, a2), max(b1, b2), max(c1, c2)]\n  \n\n  With both intervals and Springs we can define \"-\" and min\n  in terms of negation:\n\n  \n      X - Y = X + (-Y)\n\n      min(X, Y) = -max(-X, -Y)\n  \n\n  For the static methods in this class that embody the arithmetic\n  operators, we do not actually perform the operation in question as\n  that would snapshot the values of the properties of the method's arguments\n  at the time the static method is called. Instead, the static methods\n  create a new Spring instance containing references to\n  the method's arguments so that the characteristics of the new spring track the\n  potentially changing characteristics of the springs from which it\n  was made. This is a little like the idea of a lazy value\n  in a functional language.\n \n If you are implementing a SpringLayout you\n can find further information and examples in\n How to Use SpringLayout,\n a section in The Java Tutorial.\n\nWarning:\n Serialized objects of this class will not be compatible with\n future Swing releases. The current serialization support is\n appropriate for short term storage or RMI between applications running\n the same version of Swing.  As of 1.4, support for long term storage\n of all JavaBeans\u2122\n has been added to the java.beans package.\n Please see XMLEncoder.", "codes": ["public abstract class Spring\nextends Object"], "fields": [{"field_name": "UNSET", "field_sig": "public static final\u00a0int UNSET", "description": "An integer value signifying that a property value has not yet been calculated."}], "methods": [{"method_name": "getMinimumValue", "method_sig": "public abstract int getMinimumValue()", "description": "Returns the minimum value of this Spring."}, {"method_name": "getPreferredValue", "method_sig": "public abstract int getPreferredValue()", "description": "Returns the preferred value of this Spring."}, {"method_name": "getMaximumValue", "method_sig": "public abstract int getMaximumValue()", "description": "Returns the maximum value of this Spring."}, {"method_name": "getValue", "method_sig": "public abstract int getValue()", "description": "Returns the current value of this Spring."}, {"method_name": "setValue", "method_sig": "public abstract void setValue (int value)", "description": "Sets the current value of this Spring to value."}, {"method_name": "constant", "method_sig": "public static Spring constant (int pref)", "description": "Returns a strut -- a spring whose minimum, preferred, and\n maximum values each have the value pref."}, {"method_name": "constant", "method_sig": "public static Spring constant (int min,\n                              int pref,\n                              int max)", "description": "Returns a spring whose minimum, preferred, and\n maximum values have the values: min, pref,\n and max respectively."}, {"method_name": "minus", "method_sig": "public static Spring minus (Spring s)", "description": "Returns -s: a spring running in the opposite direction to s."}, {"method_name": "sum", "method_sig": "public static Spring sum (Spring s1,\n                         Spring s2)", "description": "Returns s1+s2: a spring representing s1 and s2\n in series. In a sum, s3, of two springs, s1 and s2,\n the strains of s1, s2, and s3 are maintained\n at the same level (to within the precision implied by their integer values).\n The strain of a spring in compression is:\n \n         value - pref\n         ------------\n          pref - min\n \n and the strain of a spring in tension is:\n \n         value - pref\n         ------------\n          max - pref\n \n When setValue is called on the sum spring, s3, the strain\n in s3 is calculated using one of the formulas above. Once the strain of\n the sum is known, the values of s1 and s2 are\n then set so that they are have a strain equal to that of the sum. The formulas are\n evaluated so as to take rounding errors into account and ensure that the sum of\n the values of s1 and s2 is exactly equal to\n the value of s3."}, {"method_name": "max", "method_sig": "public static Spring max (Spring s1,\n                         Spring s2)", "description": "Returns max(s1, s2): a spring whose value is always greater than (or equal to)\n         the values of both s1 and s2."}, {"method_name": "scale", "method_sig": "public static Spring scale (Spring s,\n                           float factor)", "description": "Returns a spring whose minimum, preferred, maximum\n and value properties are each multiples of the properties of the\n argument spring, s. Minimum and maximum properties are\n swapped when factor is negative (in accordance with the\n rules of interval arithmetic).\n \n When factor is, for example, 0.5f the result represents 'the mid-point'\n of its input - an operation that is useful for centering components in\n a container."}, {"method_name": "width", "method_sig": "public static Spring width (Component c)", "description": "Returns a spring whose minimum, preferred, maximum\n and value properties are defined by the widths of the minimumSize,\n preferredSize, maximumSize and size properties\n of the supplied component. The returned spring is a 'wrapper' implementation\n whose methods call the appropriate size methods of the supplied component.\n The minimum, preferred, maximum and value properties of the returned spring\n therefore report the current state of the appropriate properties in the\n component and track them as they change."}, {"method_name": "height", "method_sig": "public static Spring height (Component c)", "description": "Returns a spring whose minimum, preferred, maximum\n and value properties are defined by the heights of the minimumSize,\n preferredSize, maximumSize and size properties\n of the supplied component. The returned spring is a 'wrapper' implementation\n whose methods call the appropriate size methods of the supplied component.\n The minimum, preferred, maximum and value properties of the returned spring\n therefore report the current state of the appropriate properties in the\n component and track them as they change."}]}