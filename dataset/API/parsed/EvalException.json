{"name": "Class EvalException", "module": "jdk.jshell", "package": "jdk.jshell", "text": "Wraps an throwable thrown in the executing client.\n An instance of EvalException can be returned in the\n SnippetEvent.exception() query.\n The name of the throwable thrown is available from\n getExceptionClassName().\n Message and stack can be queried by methods on Exception.\n \n Note that in stack trace frames representing JShell Snippets,\n StackTraceElement.getFileName() will return \"#\" followed by\n the Snippet id and for snippets without a method name (for example an\n expression) StackTraceElement.getMethodName() will be the\n empty string.", "codes": ["public class EvalException\nextends JShellException"], "fields": [], "methods": [{"method_name": "getExceptionClassName", "method_sig": "public String getExceptionClassName()", "description": "Returns the name of the Throwable subclass which was thrown in the\n executing client. Note this class may not be loaded in the controlling\n process.\n See\n Class.getName() for the format of the string."}, {"method_name": "getCause", "method_sig": "public JShellException getCause()", "description": "Returns the wrapped cause of the throwable in the executing client\n represented by this EvalException or null if the cause is\n nonexistent or unknown."}]}