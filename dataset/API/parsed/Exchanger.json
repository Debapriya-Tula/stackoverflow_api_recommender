{"name": "Class Exchanger<V>", "module": "java.base", "package": "java.util.concurrent", "text": "A synchronization point at which threads can pair and swap elements\n within pairs.  Each thread presents some object on entry to the\n exchange method, matches with a partner thread,\n and receives its partner's object on return.  An Exchanger may be\n viewed as a bidirectional form of a SynchronousQueue.\n Exchangers may be useful in applications such as genetic algorithms\n and pipeline designs.\n\n Sample Usage:\n Here are the highlights of a class that uses an Exchanger\n to swap buffers between threads so that the thread filling the\n buffer gets a freshly emptied one when it needs it, handing off the\n filled one to the thread emptying the buffer.\n  \n class FillAndEmpty {\n   Exchanger<DataBuffer> exchanger = new Exchanger<>();\n   DataBuffer initialEmptyBuffer = ... a made-up type\n   DataBuffer initialFullBuffer = ...\n\n   class FillingLoop implements Runnable {\n     public void run() {\n       DataBuffer currentBuffer = initialEmptyBuffer;\n       try {\n         while (currentBuffer != null) {\n           addToBuffer(currentBuffer);\n           if (currentBuffer.isFull())\n             currentBuffer = exchanger.exchange(currentBuffer);\n         }\n       } catch (InterruptedException ex) { ... handle ... }\n     }\n   }\n\n   class EmptyingLoop implements Runnable {\n     public void run() {\n       DataBuffer currentBuffer = initialFullBuffer;\n       try {\n         while (currentBuffer != null) {\n           takeFromBuffer(currentBuffer);\n           if (currentBuffer.isEmpty())\n             currentBuffer = exchanger.exchange(currentBuffer);\n         }\n       } catch (InterruptedException ex) { ... handle ...}\n     }\n   }\n\n   void start() {\n     new Thread(new FillingLoop()).start();\n     new Thread(new EmptyingLoop()).start();\n   }\n }\nMemory consistency effects: For each pair of threads that\n successfully exchange objects via an Exchanger, actions\n prior to the exchange() in each thread\n happen-before\n those subsequent to a return from the corresponding exchange()\n in the other thread.", "codes": ["public class Exchanger<V>\nextends Object"], "fields": [], "methods": [{"method_name": "exchange", "method_sig": "public V exchange (V x)\n           throws InterruptedException", "description": "Waits for another thread to arrive at this exchange point (unless\n the current thread is interrupted),\n and then transfers the given object to it, receiving its object\n in return.\n\n If another thread is already waiting at the exchange point then\n it is resumed for thread scheduling purposes and receives the object\n passed in by the current thread.  The current thread returns immediately,\n receiving the object passed to the exchange by that other thread.\n\n If no other thread is already waiting at the exchange then the\n current thread is disabled for thread scheduling purposes and lies\n dormant until one of two things happens:\n \nSome other thread enters the exchange; or\n Some other thread interrupts\n the current thread.\n \nIf the current thread:\n \nhas its interrupted status set on entry to this method; or\n is interrupted while waiting\n for the exchange,\n \n then InterruptedException is thrown and the current thread's\n interrupted status is cleared."}, {"method_name": "exchange", "method_sig": "public V exchange (V x,\n                  long timeout,\n                  TimeUnit unit)\n           throws InterruptedException,\n                  TimeoutException", "description": "Waits for another thread to arrive at this exchange point (unless\n the current thread is interrupted or\n the specified waiting time elapses), and then transfers the given\n object to it, receiving its object in return.\n\n If another thread is already waiting at the exchange point then\n it is resumed for thread scheduling purposes and receives the object\n passed in by the current thread.  The current thread returns immediately,\n receiving the object passed to the exchange by that other thread.\n\n If no other thread is already waiting at the exchange then the\n current thread is disabled for thread scheduling purposes and lies\n dormant until one of three things happens:\n \nSome other thread enters the exchange; or\n Some other thread interrupts\n the current thread; or\n The specified waiting time elapses.\n \nIf the current thread:\n \nhas its interrupted status set on entry to this method; or\n is interrupted while waiting\n for the exchange,\n \n then InterruptedException is thrown and the current thread's\n interrupted status is cleared.\n\n If the specified waiting time elapses then TimeoutException is thrown.  If the time is less than or equal\n to zero, the method will not wait at all."}]}