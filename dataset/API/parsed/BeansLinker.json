{"name": "Class BeansLinker", "module": "jdk.dynalink", "package": "jdk.dynalink.beans", "text": "A linker for ordinary Java objects. Normally used as the ultimate fallback\n linker by the DynamicLinkerFactory so it is given the chance to link\n calls to all objects that no other linker recognized. Specifically, this\n linker will:\n \nexpose all public methods of form setXxx(), getXxx(),\n and isXxx() as property setters and getters for\n StandardOperation.SET and StandardOperation.GET operations in the\n StandardNamespace.PROPERTY namespace;\nexpose all public methods for retrieval for\n StandardOperation.GET operation in the StandardNamespace.METHOD namespace;\n the methods thus retrieved can then be invoked using StandardOperation.CALL.\nexpose all public fields as properties, unless there are getters or\n setters for the properties of the same name;\n expose elements of native Java arrays, List and Map objects as\n StandardOperation.GET and StandardOperation.SET operations in the\n StandardNamespace.ELEMENT namespace;\n expose removal of elements of List and Map objects as\n StandardOperation.REMOVE operation in the StandardNamespace.ELEMENT namespace;\nexpose a virtual property named length on Java arrays, Collection and\n Map objects;\nexpose StandardOperation.NEW on instances of StaticClass\n as calls to constructors, including those static class objects that represent\n Java arrays (their constructors take a single int parameter\n representing the length of the array to create);\nexpose static methods, fields, and properties of classes in a similar\n manner to how instance method, fields, and properties are exposed, on\n StaticClass objects.\nexpose a virtual property named static on instances of\n Class to access their StaticClass.\n\nOverloaded method resolution is performed automatically\n for property setters, methods, and constructors. Additionally, manual\n overloaded method selection is supported by having a call site specify a name\n for a method that contains an explicit signature, e.g.\n StandardOperation.GET.withNamespace(METHOD).named(\"parseInt(String,int)\")\n You can use non-qualified class names in such signatures regardless of those\n classes' packages, they will match any class with the same non-qualified name. You\n only have to use a fully qualified class name in case non-qualified class\n names would cause selection ambiguity (that is extremely rare). Overloaded\n resolution for constructors is not automatic as there is no logical place to\n attach that functionality to but if a language wishes to provide this\n functionality, it can use getConstructorMethod(Class, String) as a\n useful building block for it.\nVariable argument invocation is handled for both methods\n and constructors.\nCaller sensitive methods can be linked as long as they\n are otherwise public and link requests have call site descriptors carrying\n full-strength MethodHandles.Lookup objects and not weakened lookups or the public\n lookup.\nThe behavior for handling missing members can be\n customized by passing a MissingMemberHandlerFactory to the\n constructor.\n \nThe class also exposes various methods for discovery of available\n property and method names on classes and class instances, as well as access\n to per-class linkers using the getLinkerForClass(Class)\n method.", "codes": ["public class BeansLinker\nextends Object\nimplements GuardingDynamicLinker"], "fields": [], "methods": [{"method_name": "getLinkerForClass", "method_sig": "public TypeBasedGuardingDynamicLinker getLinkerForClass (Class<?> clazz)", "description": "Returns a bean linker for a particular single class. Useful when you need\n to override or extend the behavior of linking for some classes in your\n language runtime's linker, but still want to delegate to the default\n behavior in some cases."}, {"method_name": "isDynamicMethod", "method_sig": "public static boolean isDynamicMethod (Object obj)", "description": "Returns true if the object is a Java dynamic method (e.g., one\n obtained through a GET:METHOD operation on a Java object or\n StaticClass or through\n getConstructorMethod(Class, String)."}, {"method_name": "isDynamicConstructor", "method_sig": "public static boolean isDynamicConstructor (Object obj)", "description": "Returns true if the object is a Java constructor (obtained through\n getConstructorMethod(Class, String)}."}, {"method_name": "getConstructorMethod", "method_sig": "public static Object getConstructorMethod (Class<?> clazz,\n                                          String signature)", "description": "Return the dynamic method of constructor of the given class and the given\n signature. This method is useful for exposing a functionality for\n selecting an overloaded constructor based on an explicit signature, as\n this functionality is not otherwise exposed by Dynalink as\n StaticClass objects act as overloaded constructors without\n explicit signature selection. Example usage would be:\n getConstructorMethod(java.awt.Color.class, \"int, int, int\")."}, {"method_name": "getReadableInstancePropertyNames", "method_sig": "public static Set<String> getReadableInstancePropertyNames (Class<?> clazz)", "description": "Returns a set of names of all readable instance properties of a class."}, {"method_name": "getWritableInstancePropertyNames", "method_sig": "public static Set<String> getWritableInstancePropertyNames (Class<?> clazz)", "description": "Returns a set of names of all writable instance properties of a class."}, {"method_name": "getInstanceMethodNames", "method_sig": "public static Set<String> getInstanceMethodNames (Class<?> clazz)", "description": "Returns a set of names of all instance methods of a class."}, {"method_name": "getReadableStaticPropertyNames", "method_sig": "public static Set<String> getReadableStaticPropertyNames (Class<?> clazz)", "description": "Returns a set of names of all readable static properties of a class."}, {"method_name": "getWritableStaticPropertyNames", "method_sig": "public static Set<String> getWritableStaticPropertyNames (Class<?> clazz)", "description": "Returns a set of names of all writable static properties of a class."}, {"method_name": "getStaticMethodNames", "method_sig": "public static Set<String> getStaticMethodNames (Class<?> clazz)", "description": "Returns a set of names of all static methods of a class."}]}