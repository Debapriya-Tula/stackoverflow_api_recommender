{"name": "Interface TreeModel", "module": "java.desktop", "package": "javax.swing.tree", "text": "The model used by JTree.\n \nJTree and its related classes make extensive use of\n TreePaths for identifying nodes in the TreeModel.\n If a TreeModel returns the same object, as compared by\n equals, at two different indices under the same parent\n than the resulting TreePath objects will be considered equal\n as well. Some implementations may assume that if two\n TreePaths are equal, they identify the same node. If this\n condition is not met, painting problems and other oddities may result.\n In other words, if getChild for a given parent returns\n the same Object (as determined by equals) problems may\n result, and it is recommended you avoid doing this.\n \n Similarly JTree and its related classes place\n TreePaths in Maps.  As such if\n a node is requested twice, the return values must be equal\n (using the equals method) and have the same\n hashCode.\n \n For further information on tree models,\n including an example of a custom implementation,\n see How to Use Trees\n in The Java Tutorial.", "codes": ["public interface TreeModel"], "fields": [], "methods": [{"method_name": "getRoot", "method_sig": "Object getRoot()", "description": "Returns the root of the tree.  Returns null\n only if the tree has no nodes."}, {"method_name": "getChild", "method_sig": "Object getChild (Object parent,\n                int index)", "description": "Returns the child of parent at index index\n in the parent's\n child array.  parent must be a node previously obtained\n from this data source. This should not return null\n if index\n is a valid index for parent (that is index >= 0 &&\n index < getChildCount(parent))."}, {"method_name": "getChildCount", "method_sig": "int getChildCount (Object parent)", "description": "Returns the number of children of parent.\n Returns 0 if the node\n is a leaf or if it has no children.  parent must be a node\n previously obtained from this data source."}, {"method_name": "isLeaf", "method_sig": "boolean isLeaf (Object node)", "description": "Returns true if node is a leaf.\n It is possible for this method to return false\n even if node has no children.\n A directory in a filesystem, for example,\n may contain no files; the node representing\n the directory is not a leaf, but it also has no children."}, {"method_name": "valueForPathChanged", "method_sig": "void valueForPathChanged (TreePath path,\n                         Object newValue)", "description": "Messaged when the user has altered the value for the item identified\n by path to newValue.\n If newValue signifies a truly new value\n the model should post a treeNodesChanged event."}, {"method_name": "getIndexOfChild", "method_sig": "int getIndexOfChild (Object parent,\n                    Object child)", "description": "Returns the index of child in parent.  If either parent\n or child is null, returns -1.\n If either parent or child don't\n belong to this tree model, returns -1."}, {"method_name": "addTreeModelListener", "method_sig": "void addTreeModelListener (TreeModelListener l)", "description": "Adds a listener for the TreeModelEvent\n posted after the tree changes."}, {"method_name": "removeTreeModelListener", "method_sig": "void removeTreeModelListener (TreeModelListener l)", "description": "Removes a listener previously added with\n addTreeModelListener."}]}