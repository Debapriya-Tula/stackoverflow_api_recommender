{"name": "Interface TypeElement", "module": "java.compiler", "package": "javax.lang.model.element", "text": "Represents a class or interface program element.  Provides access\n to information about the type and its members.  Note that an enum\n type is a kind of class and an annotation type is a kind of\n interface.\n\n  While a TypeElement represents a class or interface\n element, a DeclaredType represents a class\n or interface type, the latter being a use\n (or invocation) of the former.\n The distinction is most apparent with generic types,\n for which a single element can define a whole\n family of types.  For example, the element\n java.util.Set corresponds to the parameterized types\n java.util.Set<String> and java.util.Set<Number>\n (and many others), and to the raw type java.util.Set.\n\n  Each method of this interface that returns a list of elements\n will return them in the order that is natural for the underlying\n source of program information.  For example, if the underlying\n source of information is Java source code, then the elements will be\n returned in source code order.", "codes": ["public interface TypeElement\nextends Element, Parameterizable, QualifiedNameable"], "fields": [], "methods": [{"method_name": "getEnclosedElements", "method_sig": "List<? extends Element> getEnclosedElements()", "description": "Returns the fields, methods, constructors, and member types\n that are directly declared in this class or interface.\n\n This includes any mandated elements such as the (implicit) default constructor\n and the implicit values and valueOf methods of\n an enum type."}, {"method_name": "getNestingKind", "method_sig": "NestingKind getNestingKind()", "description": "Returns the nesting kind of this type element."}, {"method_name": "getQualifiedName", "method_sig": "Name getQualifiedName()", "description": "Returns the fully qualified name of this type element.\n More precisely, it returns the canonical name.\n For local and anonymous classes, which do not have canonical names,\n an empty name is returned.\n\n The name of a generic type does not include any reference\n to its formal type parameters.\n For example, the fully qualified name of the interface\n java.util.Set<E> is \"java.util.Set\".\n Nested types use \".\" as a separator, as in\n \"java.util.Map.Entry\"."}, {"method_name": "getSimpleName", "method_sig": "Name getSimpleName()", "description": "Returns the simple name of this type element.\n\n For an anonymous class, an empty name is returned."}, {"method_name": "getSuperclass", "method_sig": "TypeMirror getSuperclass()", "description": "Returns the direct superclass of this type element.\n If this type element represents an interface or the class\n java.lang.Object, then a NoType\n with kind NONE is returned."}, {"method_name": "getInterfaces", "method_sig": "List<? extends TypeMirror> getInterfaces()", "description": "Returns the interface types directly implemented by this class\n or extended by this interface."}, {"method_name": "getTypeParameters", "method_sig": "List<? extends TypeParameterElement> getTypeParameters()", "description": "Returns the formal type parameters of this type element\n in declaration order."}, {"method_name": "getEnclosingElement", "method_sig": "Element getEnclosingElement()", "description": "Returns the package of a top-level type and returns the\n immediately lexically enclosing element for a nested type."}]}