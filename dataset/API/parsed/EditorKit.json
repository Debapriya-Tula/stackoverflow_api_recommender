{"name": "Class EditorKit", "module": "java.desktop", "package": "javax.swing.text", "text": "Establishes the set of things needed by a text component\n to be a reasonably functioning editor for some type\n of text content.  The EditorKit acts as a factory for some\n kind of policy.  For example, an implementation\n of html and rtf can be provided that is replaceable\n with other implementations.\n \n A kit can safely store editing state as an instance\n of the kit will be dedicated to a text component.\n New kits will normally be created by cloning a\n prototype kit.  The kit will have its\n setComponent method called to establish\n its relationship with a JTextComponent.", "codes": ["public abstract class EditorKit\nextends Object\nimplements Cloneable, Serializable"], "fields": [], "methods": [{"method_name": "clone", "method_sig": "public Object clone()", "description": "Creates a copy of the editor kit.  This is implemented\n to use Object.clone().  If the kit cannot be cloned,\n null is returned."}, {"method_name": "install", "method_sig": "public void install (JEditorPane c)", "description": "Called when the kit is being installed into the\n a JEditorPane."}, {"method_name": "deinstall", "method_sig": "public void deinstall (JEditorPane c)", "description": "Called when the kit is being removed from the\n JEditorPane.  This is used to unregister any\n listeners that were attached."}, {"method_name": "getContentType", "method_sig": "public abstract String getContentType()", "description": "Gets the MIME type of the data that this\n kit represents support for."}, {"method_name": "getViewFactory", "method_sig": "public abstract ViewFactory getViewFactory()", "description": "Fetches a factory that is suitable for producing\n views of any models that are produced by this\n kit."}, {"method_name": "getActions", "method_sig": "public abstract Action[] getActions()", "description": "Fetches the set of commands that can be used\n on a text component that is using a model and\n view produced by this kit."}, {"method_name": "createCaret", "method_sig": "public abstract Caret createCaret()", "description": "Fetches a caret that can navigate through views\n produced by the associated ViewFactory."}, {"method_name": "createDefaultDocument", "method_sig": "public abstract Document createDefaultDocument()", "description": "Creates an uninitialized text storage model\n that is appropriate for this type of editor."}, {"method_name": "read", "method_sig": "public abstract void read (InputStream in,\n                          Document doc,\n                          int pos)\n                   throws IOException,\n                          BadLocationException", "description": "Inserts content from the given stream which is expected\n to be in a format appropriate for this kind of content\n handler."}, {"method_name": "write", "method_sig": "public abstract void write (OutputStream out,\n                           Document doc,\n                           int pos,\n                           int len)\n                    throws IOException,\n                           BadLocationException", "description": "Writes content from a document to the given stream\n in a format appropriate for this kind of content handler."}, {"method_name": "read", "method_sig": "public abstract void read (Reader in,\n                          Document doc,\n                          int pos)\n                   throws IOException,\n                          BadLocationException", "description": "Inserts content from the given stream which is expected\n to be in a format appropriate for this kind of content\n handler.\n \n Since actual text editing is unicode based, this would\n generally be the preferred way to read in the data.\n Some types of content are stored in an 8-bit form however,\n and will favor the InputStream."}, {"method_name": "write", "method_sig": "public abstract void write (Writer out,\n                           Document doc,\n                           int pos,\n                           int len)\n                    throws IOException,\n                           BadLocationException", "description": "Writes content from a document to the given stream\n in a format appropriate for this kind of content handler.\n \n Since actual text editing is unicode based, this would\n generally be the preferred way to write the data.\n Some types of content are stored in an 8-bit form however,\n and will favor the OutputStream."}]}