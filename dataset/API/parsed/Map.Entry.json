{"name": "Interface Map.Entry<K,\u200bV>", "module": "java.base", "package": "java.util", "text": "A map entry (key-value pair).  The Map.entrySet method returns\n a collection-view of the map, whose elements are of this class.  The\n only way to obtain a reference to a map entry is from the\n iterator of this collection-view.  These Map.Entry objects are\n valid only for the duration of the iteration; more formally,\n the behavior of a map entry is undefined if the backing map has been\n modified after the entry was returned by the iterator, except through\n the setValue operation on the map entry.", "codes": ["public static interface Map.Entry<K, V>"], "fields": [], "methods": [{"method_name": "getKey", "method_sig": "K getKey()", "description": "Returns the key corresponding to this entry."}, {"method_name": "getValue", "method_sig": "V getValue()", "description": "Returns the value corresponding to this entry.  If the mapping\n has been removed from the backing map (by the iterator's\n remove operation), the results of this call are undefined."}, {"method_name": "setValue", "method_sig": "V setValue (V value)", "description": "Replaces the value corresponding to this entry with the specified\n value (optional operation).  (Writes through to the map.)  The\n behavior of this call is undefined if the mapping has already been\n removed from the map (by the iterator's remove operation)."}, {"method_name": "equals", "method_sig": "boolean equals (Object o)", "description": "Compares the specified object with this entry for equality.\n Returns true if the given object is also a map entry and\n the two entries represent the same mapping.  More formally, two\n entries e1 and e2 represent the same mapping\n if\n     (e1.getKey()==null ?\n      e2.getKey()==null : e1.getKey().equals(e2.getKey()))  &&\n     (e1.getValue()==null ?\n      e2.getValue()==null : e1.getValue().equals(e2.getValue()))\n \n This ensures that the equals method works properly across\n different implementations of the Map.Entry interface."}, {"method_name": "hashCode", "method_sig": "int hashCode()", "description": "Returns the hash code value for this map entry.  The hash code\n of a map entry e is defined to be: \n     (e.getKey()==null   ? 0 : e.getKey().hashCode()) ^\n     (e.getValue()==null ? 0 : e.getValue().hashCode())\n \n This ensures that e1.equals(e2) implies that\n e1.hashCode()==e2.hashCode() for any two Entries\n e1 and e2, as required by the general\n contract of Object.hashCode."}, {"method_name": "comparingByKey", "method_sig": "static <K extends Comparable<? super K>, V> Comparator<Map.Entry<K, V>> comparingByKey()", "description": "Returns a comparator that compares Map.Entry in natural order on key.\n\n The returned comparator is serializable and throws NullPointerException when comparing an entry with a null key."}, {"method_name": "comparingByValue", "method_sig": "static <K, V extends Comparable<? super V>> Comparator<Map.Entry<K, V>> comparingByValue()", "description": "Returns a comparator that compares Map.Entry in natural order on value.\n\n The returned comparator is serializable and throws NullPointerException when comparing an entry with null values."}, {"method_name": "comparingByKey", "method_sig": "static <K, V> Comparator<Map.Entry<K, V>> comparingByKey (Comparator<? super K> cmp)", "description": "Returns a comparator that compares Map.Entry by key using the given\n Comparator.\n\n The returned comparator is serializable if the specified comparator\n is also serializable."}, {"method_name": "comparingByValue", "method_sig": "static <K, V> Comparator<Map.Entry<K, V>> comparingByValue (Comparator<? super V> cmp)", "description": "Returns a comparator that compares Map.Entry by value using the given\n Comparator.\n\n The returned comparator is serializable if the specified comparator\n is also serializable."}]}