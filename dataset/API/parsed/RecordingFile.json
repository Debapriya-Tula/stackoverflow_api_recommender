{"name": "Class RecordingFile", "module": "jdk.jfr", "package": "jdk.jfr.consumer", "text": "A recording file.\n \n The following example shows how read and print all events in a recording file.\n\n \n \n try (RecordingFile recordingFile = new RecordingFile(Paths.get(\"recording.jfr\"))) {\n   while (recordingFile.hasMoreEvents()) {\n     RecordedEvent event = recordingFile.readEvent();\n     System.out.println(event);\n   }\n }\n \n ", "codes": ["public final class RecordingFile\nextends Object\nimplements Closeable"], "fields": [], "methods": [{"method_name": "readEvent", "method_sig": "public RecordedEvent readEvent()\n                        throws IOException", "description": "Reads the next event in the recording."}, {"method_name": "hasMoreEvents", "method_sig": "public boolean hasMoreEvents()", "description": "Returns true if unread events exist in the recording file,\n false otherwise."}, {"method_name": "readEventTypes", "method_sig": "public List<EventType> readEventTypes()\n                               throws IOException", "description": "Returns a list of all event types in this recording."}, {"method_name": "close", "method_sig": "public void close()\n           throws IOException", "description": "Closes this recording file and releases any system resources that are\n associated with it."}, {"method_name": "readAllEvents", "method_sig": "public static List<RecordedEvent> readAllEvents (Path path)\n                                         throws IOException", "description": "Returns a list of all events in a file.\n \n This method is intended for simple cases where it's convenient to read all\n events in a single operation. It isn't intended for reading large files."}]}