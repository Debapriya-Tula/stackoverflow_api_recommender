{"name": "Class DateFormat", "module": "java.base", "package": "java.text", "text": "DateFormat is an abstract class for date/time formatting subclasses which\n formats and parses dates or time in a language-independent manner.\n The date/time formatting subclass, such as SimpleDateFormat, allows for\n formatting (i.e., date \u2192 text), parsing (text \u2192 date), and\n normalization.  The date is represented as a Date object or\n as the milliseconds since January 1, 1970, 00:00:00 GMT.\n\n DateFormat provides many class methods for obtaining default date/time\n formatters based on the default or a given locale and a number of formatting\n styles. The formatting styles include FULL, LONG, MEDIUM, and SHORT. More\n detail and examples of using these styles are provided in the method\n descriptions.\n\n DateFormat helps you to format and parse dates for any locale.\n Your code can be completely independent of the locale conventions for\n months, days of the week, or even the calendar format: lunar vs. solar.\n\n To format a date for the current Locale, use one of the\n static factory methods:\n \n\n myString = DateFormat.getDateInstance().format(myDate);\n \n\nIf you are formatting multiple dates, it is\n more efficient to get the format and use it multiple times so that\n the system doesn't have to fetch the information about the local\n language and country conventions multiple times.\n \n\n DateFormat df = DateFormat.getDateInstance();\n for (int i = 0; i < myDate.length; ++i) {\n     output.println(df.format(myDate[i]) + \"; \");\n }\n \n\nTo format a date for a different Locale, specify it in the\n call to getDateInstance().\n \n\n DateFormat df = DateFormat.getDateInstance(DateFormat.LONG, Locale.FRANCE);\n \n\nIf the specified locale contains \"ca\" (calendar), \"rg\" (region override),\n and/or \"tz\" (timezone) Unicode\n extensions, the calendar, the country and/or the time zone for formatting\n are overridden. If both \"ca\" and \"rg\" are specified, the calendar from the \"ca\"\n extension supersedes the implicit one from the \"rg\" extension.\n\n You can use a DateFormat to parse also.\n \n\n myDate = df.parse(myString);\n \n\nUse getDateInstance to get the normal date format for that country.\n There are other static factory methods available.\n Use getTimeInstance to get the time format for that country.\n Use getDateTimeInstance to get a date and time format. You can pass in\n different options to these factory methods to control the length of the\n result; from SHORT to MEDIUM to LONG to FULL. The exact result depends\n on the locale, but generally:\n SHORT is completely numeric, such as 12.13.52 or 3:30pm\nMEDIUM is longer, such as Jan 12, 1952\nLONG is longer, such as January 12, 1952 or 3:30:32pm\nFULL is pretty completely specified, such as\n Tuesday, April 12, 1952 AD or 3:30:42pm PST.\n \nYou can also set the time zone on the format if you wish.\n If you want even more control over the format or parsing,\n (or want to give your users more control),\n you can try casting the DateFormat you get from the factory methods\n to a SimpleDateFormat. This will work for the majority\n of countries; just remember to put it in a try block in case you\n encounter an unusual one.\n\n You can also use forms of the parse and format methods with\n ParsePosition and FieldPosition to\n allow you to\n progressively parse through pieces of a string.\n align any particular field, or find out where it is for selection\n on the screen.\n \nSynchronization\n\n Date formats are not synchronized.\n It is recommended to create separate format instances for each thread.\n If multiple threads access a format concurrently, it must be synchronized\n externally.", "codes": ["public abstract class DateFormat\nextends Format"], "fields": [{"field_name": "calendar", "field_sig": "protected\u00a0Calendar calendar", "description": "The Calendar instance used for calculating the date-time fields\n and the instant of time. This field is used for both formatting and\n parsing.\n\n Subclasses should initialize this field to a Calendar\n appropriate for the Locale associated with this\n DateFormat."}, {"field_name": "numberFormat", "field_sig": "protected\u00a0NumberFormat numberFormat", "description": "The number formatter that DateFormat uses to format numbers\n in dates and times.  Subclasses should initialize this to a number format\n appropriate for the locale associated with this DateFormat."}, {"field_name": "ERA_FIELD", "field_sig": "public static final\u00a0int ERA_FIELD", "description": "Useful constant for ERA field alignment.\n Used in FieldPosition of date/time formatting."}, {"field_name": "YEAR_FIELD", "field_sig": "public static final\u00a0int YEAR_FIELD", "description": "Useful constant for YEAR field alignment.\n Used in FieldPosition of date/time formatting."}, {"field_name": "MONTH_FIELD", "field_sig": "public static final\u00a0int MONTH_FIELD", "description": "Useful constant for MONTH field alignment.\n Used in FieldPosition of date/time formatting."}, {"field_name": "DATE_FIELD", "field_sig": "public static final\u00a0int DATE_FIELD", "description": "Useful constant for DATE field alignment.\n Used in FieldPosition of date/time formatting."}, {"field_name": "HOUR_OF_DAY1_FIELD", "field_sig": "public static final\u00a0int HOUR_OF_DAY1_FIELD", "description": "Useful constant for one-based HOUR_OF_DAY field alignment.\n Used in FieldPosition of date/time formatting.\n HOUR_OF_DAY1_FIELD is used for the one-based 24-hour clock.\n For example, 23:59 + 01:00 results in 24:59."}, {"field_name": "HOUR_OF_DAY0_FIELD", "field_sig": "public static final\u00a0int HOUR_OF_DAY0_FIELD", "description": "Useful constant for zero-based HOUR_OF_DAY field alignment.\n Used in FieldPosition of date/time formatting.\n HOUR_OF_DAY0_FIELD is used for the zero-based 24-hour clock.\n For example, 23:59 + 01:00 results in 00:59."}, {"field_name": "MINUTE_FIELD", "field_sig": "public static final\u00a0int MINUTE_FIELD", "description": "Useful constant for MINUTE field alignment.\n Used in FieldPosition of date/time formatting."}, {"field_name": "SECOND_FIELD", "field_sig": "public static final\u00a0int SECOND_FIELD", "description": "Useful constant for SECOND field alignment.\n Used in FieldPosition of date/time formatting."}, {"field_name": "MILLISECOND_FIELD", "field_sig": "public static final\u00a0int MILLISECOND_FIELD", "description": "Useful constant for MILLISECOND field alignment.\n Used in FieldPosition of date/time formatting."}, {"field_name": "DAY_OF_WEEK_FIELD", "field_sig": "public static final\u00a0int DAY_OF_WEEK_FIELD", "description": "Useful constant for DAY_OF_WEEK field alignment.\n Used in FieldPosition of date/time formatting."}, {"field_name": "DAY_OF_YEAR_FIELD", "field_sig": "public static final\u00a0int DAY_OF_YEAR_FIELD", "description": "Useful constant for DAY_OF_YEAR field alignment.\n Used in FieldPosition of date/time formatting."}, {"field_name": "DAY_OF_WEEK_IN_MONTH_FIELD", "field_sig": "public static final\u00a0int DAY_OF_WEEK_IN_MONTH_FIELD", "description": "Useful constant for DAY_OF_WEEK_IN_MONTH field alignment.\n Used in FieldPosition of date/time formatting."}, {"field_name": "WEEK_OF_YEAR_FIELD", "field_sig": "public static final\u00a0int WEEK_OF_YEAR_FIELD", "description": "Useful constant for WEEK_OF_YEAR field alignment.\n Used in FieldPosition of date/time formatting."}, {"field_name": "WEEK_OF_MONTH_FIELD", "field_sig": "public static final\u00a0int WEEK_OF_MONTH_FIELD", "description": "Useful constant for WEEK_OF_MONTH field alignment.\n Used in FieldPosition of date/time formatting."}, {"field_name": "AM_PM_FIELD", "field_sig": "public static final\u00a0int AM_PM_FIELD", "description": "Useful constant for AM_PM field alignment.\n Used in FieldPosition of date/time formatting."}, {"field_name": "HOUR1_FIELD", "field_sig": "public static final\u00a0int HOUR1_FIELD", "description": "Useful constant for one-based HOUR field alignment.\n Used in FieldPosition of date/time formatting.\n HOUR1_FIELD is used for the one-based 12-hour clock.\n For example, 11:30 PM + 1 hour results in 12:30 AM."}, {"field_name": "HOUR0_FIELD", "field_sig": "public static final\u00a0int HOUR0_FIELD", "description": "Useful constant for zero-based HOUR field alignment.\n Used in FieldPosition of date/time formatting.\n HOUR0_FIELD is used for the zero-based 12-hour clock.\n For example, 11:30 PM + 1 hour results in 00:30 AM."}, {"field_name": "TIMEZONE_FIELD", "field_sig": "public static final\u00a0int TIMEZONE_FIELD", "description": "Useful constant for TIMEZONE field alignment.\n Used in FieldPosition of date/time formatting."}, {"field_name": "FULL", "field_sig": "public static final\u00a0int FULL", "description": "Constant for full style pattern."}, {"field_name": "LONG", "field_sig": "public static final\u00a0int LONG", "description": "Constant for long style pattern."}, {"field_name": "MEDIUM", "field_sig": "public static final\u00a0int MEDIUM", "description": "Constant for medium style pattern."}, {"field_name": "SHORT", "field_sig": "public static final\u00a0int SHORT", "description": "Constant for short style pattern."}, {"field_name": "DEFAULT", "field_sig": "public static final\u00a0int DEFAULT", "description": "Constant for default style pattern.  Its value is MEDIUM."}], "methods": [{"method_name": "format", "method_sig": "public final StringBuffer format (Object obj,\n                                 StringBuffer toAppendTo,\n                                 FieldPosition fieldPosition)", "description": "Formats the given Object into a date-time string. The formatted\n string is appended to the given StringBuffer."}, {"method_name": "format", "method_sig": "public abstract StringBuffer format (Date date,\n                                    StringBuffer toAppendTo,\n                                    FieldPosition fieldPosition)", "description": "Formats a Date into a date-time string. The formatted\n string is appended to the given StringBuffer."}, {"method_name": "format", "method_sig": "public final String format (Date date)", "description": "Formats a Date into a date-time string."}, {"method_name": "parse", "method_sig": "public Date parse (String source)\n           throws ParseException", "description": "Parses text from the beginning of the given string to produce a date.\n The method may not use the entire text of the given string.\n \n See the parse(String, ParsePosition) method for more information\n on date parsing."}, {"method_name": "parse", "method_sig": "public abstract Date parse (String source,\n                           ParsePosition pos)", "description": "Parse a date/time string according to the given parse position.  For\n example, a time text \"07/10/96 4:5 PM, PDT\" will be parsed into a Date\n that is equivalent to Date(837039900000L).\n\n  By default, parsing is lenient: If the input is not in the form used\n by this object's format method but can still be parsed as a date, then\n the parse succeeds.  Clients may insist on strict adherence to the\n format by calling setLenient(false).\n\n This parsing operation uses the calendar to produce\n a Date. As a result, the calendar's date-time\n fields and the TimeZone value may have been\n overwritten, depending on subclass implementations. Any \n TimeZone value that has previously been set by a call to\n setTimeZone may need\n to be restored for further operations."}, {"method_name": "parseObject", "method_sig": "public Object parseObject (String source,\n                          ParsePosition pos)", "description": "Parses text from a string to produce a Date.\n \n The method attempts to parse text starting at the index given by\n pos.\n If parsing succeeds, then the index of pos is updated\n to the index after the last character used (parsing does not necessarily\n use all characters up to the end of the string), and the parsed\n date is returned. The updated pos can be used to\n indicate the starting point for the next call to this method.\n If an error occurs, then the index of pos is not\n changed, the error index of pos is set to the index of\n the character where the error occurred, and null is returned.\n \n See the parse(String, ParsePosition) method for more information\n on date parsing."}, {"method_name": "getTimeInstance", "method_sig": "public static final DateFormat getTimeInstance()", "description": "Gets the time formatter with the default formatting style\n for the default FORMAT locale.\n This is equivalent to calling\n getTimeInstance(DEFAULT,\n     Locale.getDefault(Locale.Category.FORMAT))."}, {"method_name": "getTimeInstance", "method_sig": "public static final DateFormat getTimeInstance (int style)", "description": "Gets the time formatter with the given formatting style\n for the default FORMAT locale.\n This is equivalent to calling\n getTimeInstance(style,\n     Locale.getDefault(Locale.Category.FORMAT))."}, {"method_name": "getTimeInstance", "method_sig": "public static final DateFormat getTimeInstance (int style,\n                                               Locale aLocale)", "description": "Gets the time formatter with the given formatting style\n for the given locale."}, {"method_name": "getDateInstance", "method_sig": "public static final DateFormat getDateInstance()", "description": "Gets the date formatter with the default formatting style\n for the default FORMAT locale.\n This is equivalent to calling\n getDateInstance(DEFAULT,\n     Locale.getDefault(Locale.Category.FORMAT))."}, {"method_name": "getDateInstance", "method_sig": "public static final DateFormat getDateInstance (int style)", "description": "Gets the date formatter with the given formatting style\n for the default FORMAT locale.\n This is equivalent to calling\n getDateInstance(style,\n     Locale.getDefault(Locale.Category.FORMAT))."}, {"method_name": "getDateInstance", "method_sig": "public static final DateFormat getDateInstance (int style,\n                                               Locale aLocale)", "description": "Gets the date formatter with the given formatting style\n for the given locale."}, {"method_name": "getDateTimeInstance", "method_sig": "public static final DateFormat getDateTimeInstance()", "description": "Gets the date/time formatter with the default formatting style\n for the default FORMAT locale.\n This is equivalent to calling\n getDateTimeInstance(DEFAULT,\n     DEFAULT, Locale.getDefault(Locale.Category.FORMAT))."}, {"method_name": "getDateTimeInstance", "method_sig": "public static final DateFormat getDateTimeInstance (int dateStyle,\n                                                   int timeStyle)", "description": "Gets the date/time formatter with the given date and time\n formatting styles for the default FORMAT locale.\n This is equivalent to calling\n getDateTimeInstance(dateStyle,\n     timeStyle, Locale.getDefault(Locale.Category.FORMAT))."}, {"method_name": "getDateTimeInstance", "method_sig": "public static final DateFormat getDateTimeInstance (int dateStyle,\n                                                   int timeStyle,\n                                                   Locale aLocale)", "description": "Gets the date/time formatter with the given formatting styles\n for the given locale."}, {"method_name": "getInstance", "method_sig": "public static final DateFormat getInstance()", "description": "Get a default date/time formatter that uses the SHORT style for both the\n date and the time."}, {"method_name": "getAvailableLocales", "method_sig": "public static Locale[] getAvailableLocales()", "description": "Returns an array of all locales for which the\n get*Instance methods of this class can return\n localized instances.\n The returned array represents the union of locales supported by the Java\n runtime and by installed\n DateFormatProvider implementations.\n It must contain at least a Locale instance equal to\n Locale.US."}, {"method_name": "setCalendar", "method_sig": "public void setCalendar (Calendar newCalendar)", "description": "Set the calendar to be used by this date format.  Initially, the default\n calendar for the specified or default locale is used.\n\n Any TimeZone and leniency values that have previously been set are\n overwritten by newCalendar's values."}, {"method_name": "getCalendar", "method_sig": "public Calendar getCalendar()", "description": "Gets the calendar associated with this date/time formatter."}, {"method_name": "setNumberFormat", "method_sig": "public void setNumberFormat (NumberFormat newNumberFormat)", "description": "Allows you to set the number formatter."}, {"method_name": "getNumberFormat", "method_sig": "public NumberFormat getNumberFormat()", "description": "Gets the number formatter which this date/time formatter uses to\n format and parse a time."}, {"method_name": "setTimeZone", "method_sig": "public void setTimeZone (TimeZone zone)", "description": "Sets the time zone for the calendar of this DateFormat object.\n This method is equivalent to the following call.\n \n getCalendar().setTimeZone(zone)\n \nThe TimeZone set by this method is overwritten by a\n setCalendar call.\n\n The TimeZone set by this method may be overwritten as\n a result of a call to the parse method."}, {"method_name": "getTimeZone", "method_sig": "public TimeZone getTimeZone()", "description": "Gets the time zone.\n This method is equivalent to the following call.\n \n getCalendar().getTimeZone()\n "}, {"method_name": "setLenient", "method_sig": "public void setLenient (boolean lenient)", "description": "Specify whether or not date/time parsing is to be lenient.  With\n lenient parsing, the parser may use heuristics to interpret inputs that\n do not precisely match this object's format.  With strict parsing,\n inputs must match this object's format.\n\n This method is equivalent to the following call.\n \n getCalendar().setLenient(lenient)\n \nThis leniency value is overwritten by a call to setCalendar()."}, {"method_name": "isLenient", "method_sig": "public boolean isLenient()", "description": "Tell whether date/time parsing is to be lenient.\n This method is equivalent to the following call.\n \n getCalendar().isLenient()\n "}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Overrides hashCode"}, {"method_name": "equals", "method_sig": "public boolean equals (Object obj)", "description": "Overrides equals"}, {"method_name": "clone", "method_sig": "public Object clone()", "description": "Overrides Cloneable"}]}