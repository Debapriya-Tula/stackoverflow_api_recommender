{"name": "Class ZoneRulesProvider", "module": "java.base", "package": "java.time.zone", "text": "Provider of time-zone rules to the system.\n \n This class manages the configuration of time-zone rules.\n The static methods provide the public API that can be used to manage the providers.\n The abstract methods provide the SPI that allows rules to be provided.\n \n ZoneRulesProvider may be installed in an instance of the Java Platform as\n extension classes, that is, jar files placed into any of the usual extension\n directories. Installed providers are loaded using the service-provider loading\n facility defined by the ServiceLoader class. A ZoneRulesProvider\n identifies itself with a provider configuration file named\n java.time.zone.ZoneRulesProvider in the resource directory\n META-INF/services. The file should contain a line that specifies the\n fully qualified concrete zonerules-provider class name.\n Providers may also be made available by adding them to the class path or by\n registering themselves via registerProvider(java.time.zone.ZoneRulesProvider) method.\n \n The Java virtual machine has a default provider that provides zone rules\n for the time-zones defined by IANA Time Zone Database (TZDB). If the system\n property java.time.zone.DefaultZoneRulesProvider is defined then\n it is taken to be the fully-qualified name of a concrete ZoneRulesProvider\n class to be loaded as the default provider, using the system class loader.\n If this system property is not defined, a system-default provider will be\n loaded to serve as the default provider.\n \n Rules are looked up primarily by zone ID, as used by ZoneId.\n Only zone region IDs may be used, zone offset IDs are not used here.\n \n Time-zone rules are political, thus the data can change at any time.\n Each provider will provide the latest rules for each zone ID, but they\n may also provide the history of how the rules changed.", "codes": ["public abstract class ZoneRulesProvider\nextends Object"], "fields": [], "methods": [{"method_name": "getAvailableZoneIds", "method_sig": "public static Set<String> getAvailableZoneIds()", "description": "Gets the set of available zone IDs.\n \n These IDs are the string form of a ZoneId."}, {"method_name": "getRules", "method_sig": "public static ZoneRules getRules (String zoneId,\n                                 boolean forCaching)", "description": "Gets the rules for the zone ID.\n \n This returns the latest available rules for the zone ID.\n \n This method relies on time-zone data provider files that are configured.\n These are loaded using a ServiceLoader.\n \n The caching flag is designed to allow provider implementations to\n prevent the rules being cached in ZoneId.\n Under normal circumstances, the caching of zone rules is highly desirable\n as it will provide greater performance. However, there is a use case where\n the caching would not be desirable, see provideRules(java.lang.String, boolean)."}, {"method_name": "getVersions", "method_sig": "public static NavigableMap<String, ZoneRules> getVersions (String zoneId)", "description": "Gets the history of rules for the zone ID.\n \n Time-zones are defined by governments and change frequently.\n This method allows applications to find the history of changes to the\n rules for a single zone ID. The map is keyed by a string, which is the\n version string associated with the rules.\n \n The exact meaning and format of the version is provider specific.\n The version must follow lexicographical order, thus the returned map will\n be order from the oldest known rules to the newest available rules.\n The default 'TZDB' group uses version numbering consisting of the year\n followed by a letter, such as '2009e' or '2012f'.\n \n Implementations must provide a result for each valid zone ID, however\n they do not have to provide a history of rules.\n Thus the map will always contain one element, and will only contain more\n than one element if historical rule information is available."}, {"method_name": "registerProvider", "method_sig": "public static void registerProvider (ZoneRulesProvider provider)", "description": "Registers a zone rules provider.\n \n This adds a new provider to those currently available.\n A provider supplies rules for one or more zone IDs.\n A provider cannot be registered if it supplies a zone ID that has already been\n registered. See the notes on time-zone IDs in ZoneId, especially\n the section on using the concept of a \"group\" to make IDs unique.\n \n To ensure the integrity of time-zones already created, there is no way\n to deregister providers."}, {"method_name": "refresh", "method_sig": "public static boolean refresh()", "description": "Refreshes the rules from the underlying data provider.\n \n This method allows an application to request that the providers check\n for any updates to the provided rules.\n After calling this method, the offset stored in any ZonedDateTime\n may be invalid for the zone ID.\n \n Dynamic update of rules is a complex problem and most applications\n should not use this method or dynamic rules.\n To achieve dynamic rules, a provider implementation will have to be written\n as per the specification of this class.\n In addition, instances of ZoneRules must not be cached in the\n application as they will become stale. However, the boolean flag on\n provideRules(String, boolean) allows provider implementations\n to control the caching of ZoneId, potentially ensuring that\n all objects in the system see the new rules.\n Note that there is likely to be a cost in performance of a dynamic rules\n provider. Note also that no dynamic rules provider is in this specification."}, {"method_name": "provideZoneIds", "method_sig": "protected abstract Set<String> provideZoneIds()", "description": "SPI method to get the available zone IDs.\n \n This obtains the IDs that this ZoneRulesProvider provides.\n A provider should provide data for at least one zone ID.\n \n The returned zone IDs remain available and valid for the lifetime of the application.\n A dynamic provider may increase the set of IDs as more data becomes available."}, {"method_name": "provideRules", "method_sig": "protected abstract ZoneRules provideRules (String zoneId,\n                                          boolean forCaching)", "description": "SPI method to get the rules for the zone ID.\n \n This loads the rules for the specified zone ID.\n The provider implementation must validate that the zone ID is valid and\n available, throwing a ZoneRulesException if it is not.\n The result of the method in the valid case depends on the caching flag.\n \n If the provider implementation is not dynamic, then the result of the\n method must be the non-null set of rules selected by the ID.\n \n If the provider implementation is dynamic, then the flag gives the option\n of preventing the returned rules from being cached in ZoneId.\n When the flag is true, the provider is permitted to return null, where\n null will prevent the rules from being cached in ZoneId.\n When the flag is false, the provider must return non-null rules."}, {"method_name": "provideVersions", "method_sig": "protected abstract NavigableMap<String, ZoneRules> provideVersions (String zoneId)", "description": "SPI method to get the history of rules for the zone ID.\n \n This returns a map of historical rules keyed by a version string.\n The exact meaning and format of the version is provider specific.\n The version must follow lexicographical order, thus the returned map will\n be order from the oldest known rules to the newest available rules.\n The default 'TZDB' group uses version numbering consisting of the year\n followed by a letter, such as '2009e' or '2012f'.\n \n Implementations must provide a result for each valid zone ID, however\n they do not have to provide a history of rules.\n Thus the map will contain at least one element, and will only contain\n more than one element if historical rule information is available.\n \n The returned versions remain available and valid for the lifetime of the application.\n A dynamic provider may increase the set of versions as more data becomes available."}, {"method_name": "provideRefresh", "method_sig": "protected boolean provideRefresh()", "description": "SPI method to refresh the rules from the underlying data provider.\n \n This method provides the opportunity for a provider to dynamically\n recheck the underlying data provider to find the latest rules.\n This could be used to load new rules without stopping the JVM.\n Dynamic behavior is entirely optional and most providers do not support it.\n \n This implementation returns false."}]}