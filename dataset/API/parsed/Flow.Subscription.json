{"name": "Interface Flow.Subscription", "module": "java.base", "package": "java.util.concurrent", "text": "Message control linking a Flow.Publisher and Flow.Subscriber.  Subscribers receive items only when requested,\n and may cancel at any time. The methods in this interface are\n intended to be invoked only by their Subscribers; usages in\n other contexts have undefined effects.", "codes": ["public static interface Flow.Subscription"], "fields": [], "methods": [{"method_name": "request", "method_sig": "void request (long n)", "description": "Adds the given number n of items to the current\n unfulfilled demand for this subscription.  If n is\n less than or equal to zero, the Subscriber will receive an\n onError signal with an IllegalArgumentException argument.  Otherwise, the\n Subscriber will receive up to n additional \n onNext invocations (or fewer if terminated)."}, {"method_name": "cancel", "method_sig": "void cancel()", "description": "Causes the Subscriber to (eventually) stop receiving\n messages.  Implementation is best-effort -- additional\n messages may be received after invoking this method.\n A cancelled subscription need not ever receive an\n onComplete or onError signal."}]}