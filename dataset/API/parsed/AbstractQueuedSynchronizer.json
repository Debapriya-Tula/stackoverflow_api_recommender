{"name": "Class AbstractQueuedSynchronizer", "module": "java.base", "package": "java.util.concurrent.locks", "text": "Provides a framework for implementing blocking locks and related\n synchronizers (semaphores, events, etc) that rely on\n first-in-first-out (FIFO) wait queues.  This class is designed to\n be a useful basis for most kinds of synchronizers that rely on a\n single atomic int value to represent state. Subclasses\n must define the protected methods that change this state, and which\n define what that state means in terms of this object being acquired\n or released.  Given these, the other methods in this class carry\n out all queuing and blocking mechanics. Subclasses can maintain\n other state fields, but only the atomically updated int\n value manipulated using methods getState(), setState(int) and compareAndSetState(int, int) is tracked with respect\n to synchronization.\n\n Subclasses should be defined as non-public internal helper\n classes that are used to implement the synchronization properties\n of their enclosing class.  Class\n AbstractQueuedSynchronizer does not implement any\n synchronization interface.  Instead it defines methods such as\n acquireInterruptibly(int) that can be invoked as\n appropriate by concrete locks and related synchronizers to\n implement their public methods.\n\n This class supports either or both a default exclusive\n mode and a shared mode. When acquired in exclusive mode,\n attempted acquires by other threads cannot succeed. Shared mode\n acquires by multiple threads may (but need not) succeed. This class\n does not \"understand\" these differences except in the\n mechanical sense that when a shared mode acquire succeeds, the next\n waiting thread (if one exists) must also determine whether it can\n acquire as well. Threads waiting in the different modes share the\n same FIFO queue. Usually, implementation subclasses support only\n one of these modes, but both can come into play for example in a\n ReadWriteLock. Subclasses that support only exclusive or\n only shared modes need not define the methods supporting the unused mode.\n\n This class defines a nested AbstractQueuedSynchronizer.ConditionObject class that\n can be used as a Condition implementation by subclasses\n supporting exclusive mode for which method isHeldExclusively() reports whether synchronization is exclusively\n held with respect to the current thread, method release(int)\n invoked with the current getState() value fully releases\n this object, and acquire(int), given this saved state value,\n eventually restores this object to its previous acquired state.  No\n AbstractQueuedSynchronizer method otherwise creates such a\n condition, so if this constraint cannot be met, do not use it.  The\n behavior of AbstractQueuedSynchronizer.ConditionObject depends of course on the\n semantics of its synchronizer implementation.\n\n This class provides inspection, instrumentation, and monitoring\n methods for the internal queue, as well as similar methods for\n condition objects. These can be exported as desired into classes\n using an AbstractQueuedSynchronizer for their\n synchronization mechanics.\n\n Serialization of this class stores only the underlying atomic\n integer maintaining state, so deserialized objects have empty\n thread queues. Typical subclasses requiring serializability will\n define a readObject method that restores this to a known\n initial state upon deserialization.\n\n Usage\nTo use this class as the basis of a synchronizer, redefine the\n following methods, as applicable, by inspecting and/or modifying\n the synchronization state using getState(), setState(int) and/or compareAndSetState(int, int):\n\n \ntryAcquire(int)\ntryRelease(int)\ntryAcquireShared(int)\ntryReleaseShared(int)\nisHeldExclusively()\n\n\n Each of these methods by default throws UnsupportedOperationException.  Implementations of these methods\n must be internally thread-safe, and should in general be short and\n not block. Defining these methods is the only supported\n means of using this class. All other methods are declared\n final because they cannot be independently varied.\n\n You may also find the inherited methods from AbstractOwnableSynchronizer useful to keep track of the thread\n owning an exclusive synchronizer.  You are encouraged to use them\n -- this enables monitoring and diagnostic tools to assist users in\n determining which threads hold locks.\n\n Even though this class is based on an internal FIFO queue, it\n does not automatically enforce FIFO acquisition policies.  The core\n of exclusive synchronization takes the form:\n\n \n Acquire:\n     while (!tryAcquire(arg)) {\n        enqueue thread if it is not already queued;\n        possibly block current thread;\n     }\n\n Release:\n     if (tryRelease(arg))\n        unblock the first queued thread;\n \n\n (Shared mode is similar but may involve cascading signals.)\n\n Because checks in acquire are invoked before\n enqueuing, a newly acquiring thread may barge ahead of\n others that are blocked and queued.  However, you can, if desired,\n define tryAcquire and/or tryAcquireShared to\n disable barging by internally invoking one or more of the inspection\n methods, thereby providing a fair FIFO acquisition order.\n In particular, most fair synchronizers can define tryAcquire\n to return false if hasQueuedPredecessors() (a method\n specifically designed to be used by fair synchronizers) returns\n true.  Other variations are possible.\n\n Throughput and scalability are generally highest for the\n default barging (also known as greedy,\n renouncement, and convoy-avoidance) strategy.\n While this is not guaranteed to be fair or starvation-free, earlier\n queued threads are allowed to recontend before later queued\n threads, and each recontention has an unbiased chance to succeed\n against incoming threads.  Also, while acquires do not\n \"spin\" in the usual sense, they may perform multiple\n invocations of tryAcquire interspersed with other\n computations before blocking.  This gives most of the benefits of\n spins when exclusive synchronization is only briefly held, without\n most of the liabilities when it isn't. If so desired, you can\n augment this by preceding calls to acquire methods with\n \"fast-path\" checks, possibly prechecking hasContended()\n and/or hasQueuedThreads() to only do so if the synchronizer\n is likely not to be contended.\n\n This class provides an efficient and scalable basis for\n synchronization in part by specializing its range of use to\n synchronizers that can rely on int state, acquire, and\n release parameters, and an internal FIFO wait queue. When this does\n not suffice, you can build synchronizers from a lower level using\n atomic classes, your own custom\n Queue classes, and LockSupport blocking\n support.\n\n Usage Examples\nHere is a non-reentrant mutual exclusion lock class that uses\n the value zero to represent the unlocked state, and one to\n represent the locked state. While a non-reentrant lock\n does not strictly require recording of the current owner\n thread, this class does so anyway to make usage easier to monitor.\n It also supports conditions and exposes some instrumentation methods:\n\n  \n class Mutex implements Lock, java.io.Serializable {\n\n   // Our internal helper class\n   private static class Sync extends AbstractQueuedSynchronizer {\n     // Acquires the lock if state is zero\n     public boolean tryAcquire(int acquires) {\n       assert acquires == 1; // Otherwise unused\n       if (compareAndSetState(0, 1)) {\n         setExclusiveOwnerThread(Thread.currentThread());\n         return true;\n       }\n       return false;\n     }\n\n     // Releases the lock by setting state to zero\n     protected boolean tryRelease(int releases) {\n       assert releases == 1; // Otherwise unused\n       if (!isHeldExclusively())\n         throw new IllegalMonitorStateException();\n       setExclusiveOwnerThread(null);\n       setState(0);\n       return true;\n     }\n\n     // Reports whether in locked state\n     public boolean isLocked() {\n       return getState() != 0;\n     }\n\n     public boolean isHeldExclusively() {\n       // a data race, but safe due to out-of-thin-air guarantees\n       return getExclusiveOwnerThread() == Thread.currentThread();\n     }\n\n     // Provides a Condition\n     public Condition newCondition() {\n       return new ConditionObject();\n     }\n\n     // Deserializes properly\n     private void readObject(ObjectInputStream s)\n         throws IOException, ClassNotFoundException {\n       s.defaultReadObject();\n       setState(0); // reset to unlocked state\n     }\n   }\n\n   // The sync object does all the hard work. We just forward to it.\n   private final Sync sync = new Sync();\n\n   public void lock()              { sync.acquire(1); }\n   public boolean tryLock()        { return sync.tryAcquire(1); }\n   public void unlock()            { sync.release(1); }\n   public Condition newCondition() { return sync.newCondition(); }\n   public boolean isLocked()       { return sync.isLocked(); }\n   public boolean isHeldByCurrentThread() {\n     return sync.isHeldExclusively();\n   }\n   public boolean hasQueuedThreads() {\n     return sync.hasQueuedThreads();\n   }\n   public void lockInterruptibly() throws InterruptedException {\n     sync.acquireInterruptibly(1);\n   }\n   public boolean tryLock(long timeout, TimeUnit unit)\n       throws InterruptedException {\n     return sync.tryAcquireNanos(1, unit.toNanos(timeout));\n   }\n }\nHere is a latch class that is like a\n CountDownLatch\n except that it only requires a single signal to\n fire. Because a latch is non-exclusive, it uses the shared\n acquire and release methods.\n\n  \n class BooleanLatch {\n\n   private static class Sync extends AbstractQueuedSynchronizer {\n     boolean isSignalled() { return getState() != 0; }\n\n     protected int tryAcquireShared(int ignore) {\n       return isSignalled() ? 1 : -1;\n     }\n\n     protected boolean tryReleaseShared(int ignore) {\n       setState(1);\n       return true;\n     }\n   }\n\n   private final Sync sync = new Sync();\n   public boolean isSignalled() { return sync.isSignalled(); }\n   public void signal()         { sync.releaseShared(1); }\n   public void await() throws InterruptedException {\n     sync.acquireSharedInterruptibly(1);\n   }\n }", "codes": ["public abstract class AbstractQueuedSynchronizer\nextends AbstractOwnableSynchronizer\nimplements Serializable"], "fields": [], "methods": [{"method_name": "getState", "method_sig": "protected final int getState()", "description": "Returns the current value of synchronization state.\n This operation has memory semantics of a volatile read."}, {"method_name": "setState", "method_sig": "protected final void setState (int newState)", "description": "Sets the value of synchronization state.\n This operation has memory semantics of a volatile write."}, {"method_name": "compareAndSetState", "method_sig": "protected final boolean compareAndSetState (int expect,\n                                           int update)", "description": "Atomically sets synchronization state to the given updated\n value if the current state value equals the expected value.\n This operation has memory semantics of a volatile read\n and write."}, {"method_name": "tryAcquire", "method_sig": "protected boolean tryAcquire (int arg)", "description": "Attempts to acquire in exclusive mode. This method should query\n if the state of the object permits it to be acquired in the\n exclusive mode, and if so to acquire it.\n\n This method is always invoked by the thread performing\n acquire.  If this method reports failure, the acquire method\n may queue the thread, if it is not already queued, until it is\n signalled by a release from some other thread. This can be used\n to implement method Lock.tryLock().\n\n The default\n implementation throws UnsupportedOperationException."}, {"method_name": "tryRelease", "method_sig": "protected boolean tryRelease (int arg)", "description": "Attempts to set the state to reflect a release in exclusive\n mode.\n\n This method is always invoked by the thread performing release.\n\n The default implementation throws\n UnsupportedOperationException."}, {"method_name": "tryAcquireShared", "method_sig": "protected int tryAcquireShared (int arg)", "description": "Attempts to acquire in shared mode. This method should query if\n the state of the object permits it to be acquired in the shared\n mode, and if so to acquire it.\n\n This method is always invoked by the thread performing\n acquire.  If this method reports failure, the acquire method\n may queue the thread, if it is not already queued, until it is\n signalled by a release from some other thread.\n\n The default implementation throws UnsupportedOperationException."}, {"method_name": "tryReleaseShared", "method_sig": "protected boolean tryReleaseShared (int arg)", "description": "Attempts to set the state to reflect a release in shared mode.\n\n This method is always invoked by the thread performing release.\n\n The default implementation throws\n UnsupportedOperationException."}, {"method_name": "isHeldExclusively", "method_sig": "protected boolean isHeldExclusively()", "description": "Returns true if synchronization is held exclusively with\n respect to the current (calling) thread.  This method is invoked\n upon each call to a AbstractQueuedSynchronizer.ConditionObject method.\n\n The default implementation throws UnsupportedOperationException. This method is invoked\n internally only within AbstractQueuedSynchronizer.ConditionObject methods, so need\n not be defined if conditions are not used."}, {"method_name": "acquire", "method_sig": "public final void acquire (int arg)", "description": "Acquires in exclusive mode, ignoring interrupts.  Implemented\n by invoking at least once tryAcquire(int),\n returning on success.  Otherwise the thread is queued, possibly\n repeatedly blocking and unblocking, invoking tryAcquire(int) until success.  This method can be used\n to implement method Lock.lock()."}, {"method_name": "acquireInterruptibly", "method_sig": "public final void acquireInterruptibly (int arg)\n                                throws InterruptedException", "description": "Acquires in exclusive mode, aborting if interrupted.\n Implemented by first checking interrupt status, then invoking\n at least once tryAcquire(int), returning on\n success.  Otherwise the thread is queued, possibly repeatedly\n blocking and unblocking, invoking tryAcquire(int)\n until success or the thread is interrupted.  This method can be\n used to implement method Lock.lockInterruptibly()."}, {"method_name": "tryAcquireNanos", "method_sig": "public final boolean tryAcquireNanos (int arg,\n                                     long nanosTimeout)\n                              throws InterruptedException", "description": "Attempts to acquire in exclusive mode, aborting if interrupted,\n and failing if the given timeout elapses.  Implemented by first\n checking interrupt status, then invoking at least once tryAcquire(int), returning on success.  Otherwise, the thread is\n queued, possibly repeatedly blocking and unblocking, invoking\n tryAcquire(int) until success or the thread is interrupted\n or the timeout elapses.  This method can be used to implement\n method Lock.tryLock(long, TimeUnit)."}, {"method_name": "release", "method_sig": "public final boolean release (int arg)", "description": "Releases in exclusive mode.  Implemented by unblocking one or\n more threads if tryRelease(int) returns true.\n This method can be used to implement method Lock.unlock()."}, {"method_name": "acquireShared", "method_sig": "public final void acquireShared (int arg)", "description": "Acquires in shared mode, ignoring interrupts.  Implemented by\n first invoking at least once tryAcquireShared(int),\n returning on success.  Otherwise the thread is queued, possibly\n repeatedly blocking and unblocking, invoking tryAcquireShared(int) until success."}, {"method_name": "acquireSharedInterruptibly", "method_sig": "public final void acquireSharedInterruptibly (int arg)\n                                      throws InterruptedException", "description": "Acquires in shared mode, aborting if interrupted.  Implemented\n by first checking interrupt status, then invoking at least once\n tryAcquireShared(int), returning on success.  Otherwise the\n thread is queued, possibly repeatedly blocking and unblocking,\n invoking tryAcquireShared(int) until success or the thread\n is interrupted."}, {"method_name": "tryAcquireSharedNanos", "method_sig": "public final boolean tryAcquireSharedNanos (int arg,\n                                           long nanosTimeout)\n                                    throws InterruptedException", "description": "Attempts to acquire in shared mode, aborting if interrupted, and\n failing if the given timeout elapses.  Implemented by first\n checking interrupt status, then invoking at least once tryAcquireShared(int), returning on success.  Otherwise, the\n thread is queued, possibly repeatedly blocking and unblocking,\n invoking tryAcquireShared(int) until success or the thread\n is interrupted or the timeout elapses."}, {"method_name": "releaseShared", "method_sig": "public final boolean releaseShared (int arg)", "description": "Releases in shared mode.  Implemented by unblocking one or more\n threads if tryReleaseShared(int) returns true."}, {"method_name": "hasQueuedThreads", "method_sig": "public final boolean hasQueuedThreads()", "description": "Queries whether any threads are waiting to acquire. Note that\n because cancellations due to interrupts and timeouts may occur\n at any time, a true return does not guarantee that any\n other thread will ever acquire."}, {"method_name": "hasContended", "method_sig": "public final boolean hasContended()", "description": "Queries whether any threads have ever contended to acquire this\n synchronizer; that is, if an acquire method has ever blocked.\n\n In this implementation, this operation returns in\n constant time."}, {"method_name": "getFirstQueuedThread", "method_sig": "public final Thread getFirstQueuedThread()", "description": "Returns the first (longest-waiting) thread in the queue, or\n null if no threads are currently queued.\n\n In this implementation, this operation normally returns in\n constant time, but may iterate upon contention if other threads are\n concurrently modifying the queue."}, {"method_name": "isQueued", "method_sig": "public final boolean isQueued (Thread thread)", "description": "Returns true if the given thread is currently queued.\n\n This implementation traverses the queue to determine\n presence of the given thread."}, {"method_name": "hasQueuedPredecessors", "method_sig": "public final boolean hasQueuedPredecessors()", "description": "Queries whether any threads have been waiting to acquire longer\n than the current thread.\n\n An invocation of this method is equivalent to (but may be\n more efficient than):\n  \n getFirstQueuedThread() != Thread.currentThread()\n   && hasQueuedThreads()\nNote that because cancellations due to interrupts and\n timeouts may occur at any time, a true return does not\n guarantee that some other thread will acquire before the current\n thread.  Likewise, it is possible for another thread to win a\n race to enqueue after this method has returned false,\n due to the queue being empty.\n\n This method is designed to be used by a fair synchronizer to\n avoid barging.\n Such a synchronizer's tryAcquire(int) method should return\n false, and its tryAcquireShared(int) method should\n return a negative value, if this method returns true\n (unless this is a reentrant acquire).  For example, the \n tryAcquire method for a fair, reentrant, exclusive mode\n synchronizer might look like this:\n\n  \n protected boolean tryAcquire(int arg) {\n   if (isHeldExclusively()) {\n     // A reentrant acquire; increment hold count\n     return true;\n   } else if (hasQueuedPredecessors()) {\n     return false;\n   } else {\n     // try to acquire normally\n   }\n }"}, {"method_name": "getQueueLength", "method_sig": "public final int getQueueLength()", "description": "Returns an estimate of the number of threads waiting to\n acquire.  The value is only an estimate because the number of\n threads may change dynamically while this method traverses\n internal data structures.  This method is designed for use in\n monitoring system state, not for synchronization control."}, {"method_name": "getQueuedThreads", "method_sig": "public final Collection<Thread> getQueuedThreads()", "description": "Returns a collection containing threads that may be waiting to\n acquire.  Because the actual set of threads may change\n dynamically while constructing this result, the returned\n collection is only a best-effort estimate.  The elements of the\n returned collection are in no particular order.  This method is\n designed to facilitate construction of subclasses that provide\n more extensive monitoring facilities."}, {"method_name": "getExclusiveQueuedThreads", "method_sig": "public final Collection<Thread> getExclusiveQueuedThreads()", "description": "Returns a collection containing threads that may be waiting to\n acquire in exclusive mode. This has the same properties\n as getQueuedThreads() except that it only returns\n those threads waiting due to an exclusive acquire."}, {"method_name": "getSharedQueuedThreads", "method_sig": "public final Collection<Thread> getSharedQueuedThreads()", "description": "Returns a collection containing threads that may be waiting to\n acquire in shared mode. This has the same properties\n as getQueuedThreads() except that it only returns\n those threads waiting due to a shared acquire."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a string identifying this synchronizer, as well as its state.\n The state, in brackets, includes the String \"State =\"\n followed by the current value of getState(), and either\n \"nonempty\" or \"empty\" depending on whether the\n queue is empty."}, {"method_name": "owns", "method_sig": "public final boolean owns (AbstractQueuedSynchronizer.ConditionObject condition)", "description": "Queries whether the given ConditionObject\n uses this synchronizer as its lock."}, {"method_name": "hasWaiters", "method_sig": "public final boolean hasWaiters (AbstractQueuedSynchronizer.ConditionObject condition)", "description": "Queries whether any threads are waiting on the given condition\n associated with this synchronizer. Note that because timeouts\n and interrupts may occur at any time, a true return\n does not guarantee that a future signal will awaken\n any threads.  This method is designed primarily for use in\n monitoring of the system state."}, {"method_name": "getWaitQueueLength", "method_sig": "public final int getWaitQueueLength (AbstractQueuedSynchronizer.ConditionObject condition)", "description": "Returns an estimate of the number of threads waiting on the\n given condition associated with this synchronizer. Note that\n because timeouts and interrupts may occur at any time, the\n estimate serves only as an upper bound on the actual number of\n waiters.  This method is designed for use in monitoring system\n state, not for synchronization control."}, {"method_name": "getWaitingThreads", "method_sig": "public final Collection<Thread> getWaitingThreads (AbstractQueuedSynchronizer.ConditionObject condition)", "description": "Returns a collection containing those threads that may be\n waiting on the given condition associated with this\n synchronizer.  Because the actual set of threads may change\n dynamically while constructing this result, the returned\n collection is only a best-effort estimate. The elements of the\n returned collection are in no particular order."}]}