{"name": "Class URLStreamHandler", "module": "java.base", "package": "java.net", "text": "The abstract class URLStreamHandler is the common\n superclass for all stream protocol handlers. A stream protocol\n handler knows how to make a connection for a particular protocol\n type, such as http or https.\n \n In most cases, an instance of a URLStreamHandler\n subclass is not created directly by an application. Rather, the\n first time a protocol name is encountered when constructing a\n URL, the appropriate stream protocol handler is\n automatically loaded.", "codes": ["public abstract class URLStreamHandler\nextends Object"], "fields": [], "methods": [{"method_name": "openConnection", "method_sig": "protected abstract URLConnection openConnection (URL u)\n                                         throws IOException", "description": "Opens a connection to the object referenced by the\n URL argument.\n This method should be overridden by a subclass.\n\n If for the handler's protocol (such as HTTP or JAR), there\n exists a public, specialized URLConnection subclass belonging\n to one of the following packages or one of their subpackages:\n java.lang, java.io, java.util, java.net, the connection\n returned will be of that subclass. For example, for HTTP an\n HttpURLConnection will be returned, and for JAR a\n JarURLConnection will be returned."}, {"method_name": "openConnection", "method_sig": "protected URLConnection openConnection (URL u,\n                                       Proxy p)\n                                throws IOException", "description": "Same as openConnection(URL), except that the connection will be\n made through the specified proxy; Protocol handlers that do not\n support proxying will ignore the proxy parameter and make a\n normal connection.\n\n Calling this method preempts the system's default\n ProxySelector settings."}, {"method_name": "parseURL", "method_sig": "protected void parseURL (URL u,\n                        String spec,\n                        int start,\n                        int limit)", "description": "Parses the string representation of a URL into a\n URL object.\n \n If there is any inherited context, then it has already been\n copied into the URL argument.\n \n The parseURL method of URLStreamHandler\n parses the string representation as if it were an\n http specification. Most URL protocol families have a\n similar parsing. A stream protocol handler for a protocol that has\n a different syntax must override this routine."}, {"method_name": "getDefaultPort", "method_sig": "protected int getDefaultPort()", "description": "Returns the default port for a URL parsed by this handler. This method\n is meant to be overidden by handlers with default port numbers."}, {"method_name": "equals", "method_sig": "protected boolean equals (URL u1,\n                         URL u2)", "description": "Provides the default equals calculation. May be overidden by handlers\n for other protocols that have different requirements for equals().\n This method requires that none of its arguments is null. This is\n guaranteed by the fact that it is only called by java.net.URL class."}, {"method_name": "hashCode", "method_sig": "protected int hashCode (URL u)", "description": "Provides the default hash calculation. May be overidden by handlers for\n other protocols that have different requirements for hashCode\n calculation."}, {"method_name": "sameFile", "method_sig": "protected boolean sameFile (URL u1,\n                           URL u2)", "description": "Compare two urls to see whether they refer to the same file,\n i.e., having the same protocol, host, port, and path.\n This method requires that none of its arguments is null. This is\n guaranteed by the fact that it is only called indirectly\n by java.net.URL class."}, {"method_name": "getHostAddress", "method_sig": "protected InetAddress getHostAddress (URL u)", "description": "Get the IP address of our host. An empty host field or a DNS failure\n will result in a null return."}, {"method_name": "hostsEqual", "method_sig": "protected boolean hostsEqual (URL u1,\n                             URL u2)", "description": "Compares the host components of two URLs."}, {"method_name": "toExternalForm", "method_sig": "protected String toExternalForm (URL u)", "description": "Converts a URL of a specific protocol to a\n String."}, {"method_name": "setURL", "method_sig": "protected void setURL (URL u,\n                      String protocol,\n                      String host,\n                      int port,\n                      String authority,\n                      String userInfo,\n                      String path,\n                      String query,\n                      String ref)", "description": "Sets the fields of the URL argument to the indicated values.\n Only classes derived from URLStreamHandler are able\n to use this method to set the values of the URL fields."}, {"method_name": "setURL", "method_sig": "@Deprecated\nprotected void setURL (URL u,\n                      String protocol,\n                      String host,\n                      int port,\n                      String file,\n                      String ref)", "description": "Sets the fields of the URL argument to the indicated values.\n Only classes derived from URLStreamHandler are able\n to use this method to set the values of the URL fields."}]}