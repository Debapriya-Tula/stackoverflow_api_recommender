{"name": "Interface Tag", "module": "jdk.javadoc", "package": "com.sun.javadoc", "text": "Represents a simple documentation tag, such as @since, @author, @version.\n Given a tag (e.g. \"@since 1.2\"), holds tag name (e.g. \"@since\")\n and tag text (e.g. \"1.2\").  Tags with structure or which require\n special processing are handled by subclasses such as ParamTag\n (for @param), SeeTag (for @see and ), and ThrowsTag\n (for @throws).", "codes": ["@Deprecated(since=\"9\",\n            forRemoval=true)\npublic interface Tag"], "fields": [], "methods": [{"method_name": "name", "method_sig": "String name()", "description": "Return the name of this tag.  The name is the string\n starting with \"@\" that is used in a doc comment, such as\n @return.  For inline tags, such as\n {@link}, the curly brackets\n are not part of the name, so in this example the name\n would be simply @link."}, {"method_name": "holder", "method_sig": "Doc holder()", "description": "Return the containing Doc of this Tag element."}, {"method_name": "kind", "method_sig": "String kind()", "description": "Return the kind of this tag.\n For most tags,\n kind() == name();\n the following table lists those cases where there is more\n than one tag of a given kind:\n\n \nRelated Tags\n\nname()   kind()      \n\n\n@exception   @throws \n@link        @see    \n@linkplain   @see    \n@see         @see    \n@serial      @serial \n@serialData  @serial \n@throws      @throws \n\n"}, {"method_name": "text", "method_sig": "String text()", "description": "Return the text of this tag, that is, the portion beyond tag name."}, {"method_name": "toString", "method_sig": "String toString()", "description": "Convert this object to a string."}, {"method_name": "inlineTags", "method_sig": "Tag[] inlineTags()", "description": "For a documentation comment with embedded {@link}\n tags, return an array of Tag objects.  The entire\n doc comment is broken down into strings separated by\n {@link} tags, where each successive element\n of the array represents either a string or\n {@link} tag, in order, from start to end.\n Each string is represented by a Tag object of\n name \"Text\", where text() returns the string.  Each\n {@link} tag is represented by a\n SeeTag of name \"@link\" and kind \"@see\".\n For example, given the following comment\n tag:\n \nThis is a {@link Doc commentlabel} example.\n\n return an array of Tag objects:\n \n tags[0] is a Tag with name \"Text\" and text consisting\n         of \"This is a \"\n     tags[1] is a SeeTag with name \"@link\", referenced\n         class Doc and label \"commentlabel\"\n     tags[2] is a Tag with name \"Text\" and text consisting\n         of \" example.\"\n "}, {"method_name": "firstSentenceTags", "method_sig": "Tag[] firstSentenceTags()", "description": "Return the first sentence of the comment as an array of tags.\n Includes inline tags\n (i.e. {@link reference} tags)  but not\n block tags.\n Each section of plain text is represented as a Tag\n of kind \"Text\".\n Inline tags are represented as a SeeTag of kind \"@link\".\n If the locale is English language, the first sentence is\n determined by the rules described in the Java Language\n Specification (first version): \"This sentence ends\n at the first period that is followed by a blank, tab, or\n line terminator or at the first tagline.\", in\n addition a line will be terminated by paragraph and\n section terminating HTML tags: <p>  </p>  <h1>\n <h2>  <h3> <h4>  <h5>  <h6>\n <hr>  <pre>  or </pre>.\n If the locale is not English, the sentence end will be\n determined by\n BreakIterator.getSentenceInstance(Locale)."}, {"method_name": "position", "method_sig": "SourcePosition position()", "description": "Return the source position of this tag."}]}