{"name": "Interface FlightRecorderMXBean", "module": "jdk.management.jfr", "package": "jdk.management.jfr", "text": "Management interface for controlling Flight Recorder.\n \n The object name for identifying the MXBean in the platform MBean\n server is:  jdk.management.jfr:type=FlightRecorder \n\n Flight Recorder can be configured in the following ways:\n \nRecording options\n Specify how long a recording should last, and where and when data\n should be dumped.\nSettings\n Specify which events should be enabled and what kind information each\n event should capture.\nConfigurations\n Predefined sets of settings, typically derived from a settings file,\n that specify the configuration of multiple events simultaneously.\n\n\n See the package jdk.jfr documentation for descriptions of the settings\n syntax and the ConfigurationInfo class documentation for configuration information.\n\n Recording options\n\n The following table shows the options names to use with setRecordingOptions(long, Map)\n and getRecordingOptions(long).\n\n \nRecording options\n\n\nName\nDescripion\nDefault value\nFormat\nExample values\n\n\n\n\nname\nSets a human-readable recording name\nString representation of the recording id\nString\n\"My Recording\", \n\"profiling\"\n\n\nmaxAge\nSpecify the length of time that the data is kept in the disk repository until the\n oldest data may be deleted. Only works if disk=true, otherwise\n this parameter is ignored.\n\"0\" (no limit)\n\"0\" if no limit is imposed, otherwise a string\n representation of a positive Long value followed by an empty space\n and one of the following units,\n\n\"ns\" (nanoseconds)\n\"us\" (microseconds)\n\"ms\" (milliseconds)\n\"s\" (seconds)\n\"m\" (minutes)\n\"h\" (hours)\n\"d\" (days)\n\n\"2 h\",\n\"24 h\",\n\"2 d\",\n\"0\"\n\n\nmaxSize\nSpecifies the size, measured in bytes, at which data is kept in disk\n repository. Only works if\n disk=true, otherwise this parameter is ignored.\n\"0\" (no limit)\nString representation of a Long value, must be positive\n\"0\", \n\"1000000000\"\n\n\ndumpOnExit\nDumps recording data to disk on Java Virtual Machine (JVM) exit\n\"false\"\nString representation of a Boolean value, \"true\" or\n \"false\"\n\"true\",\n\"false\"\n\n\ndestination\nSpecifies the path where recording data is written when the recording stops.\n\"false\"\nSee Paths#getPath for format. \n If this method is invoked from another process, the data is written on the\n machine where the target JVM is running. If destination is a relative path, it\n is relative to the working directory where the target JVM was started.}\n\"c:\\recording\\recotding.jfr\",\n\"/recordings/recording.jfr\", \"recording.jfr\"\n\n\ndisk\nStores recorded data as it is recorded\n\"false\"\nString representation of a Boolean value, \"true\" or\n \"false\"\n\"true\",\n\"false\"\n\nduration\nSets how long the recording should be running\n\"0\" (no limit, continuous)\n\"0\" if no limit should be imposed, otherwise a string\n representation of a positive Long followed by an empty space and one\n of the following units:\n\n\"ns\" (nanoseconds)\n\"us\" (microseconds)\n\"ms\" (milliseconds)\n\"s\" (seconds)\n\"m\" (minutes)\n\"h\" (hours)\n\"d\" (days)\n\n\"60 s\",\n\"10 m\",\n\"4 h\",\n\"0\"\n\n\n", "codes": ["public interface FlightRecorderMXBean\nextends PlatformManagedObject"], "fields": [{"field_name": "MXBEAN_NAME", "field_sig": "static final\u00a0String MXBEAN_NAME", "description": "String representation of the ObjectName for the\n FlightRecorderMXBean."}], "methods": [{"method_name": "newRecording", "method_sig": "long newRecording()\n           throws IllegalStateException,\n                  SecurityException", "description": "Creates a recording, but doesn't start it."}, {"method_name": "takeSnapshot", "method_sig": "long takeSnapshot()", "description": "Creates a snapshot recording of all available recorded data.\n \n A snapshot is a synthesized recording in a stopped state. If no data is\n available, a recording with size 0 is returned.\n \n A snapshot provides stable access to data for later operations (for example,\n operations to change the time interval or to reduce the data size).\n \n The caller must close the recording when access to the data is no longer\n needed."}, {"method_name": "cloneRecording", "method_sig": "long cloneRecording (long recordingId,\n                    boolean stop)\n             throws IllegalArgumentException,\n                    SecurityException", "description": "Creates a copy of an existing recording, useful for extracting parts of a\n recording.\n \n The cloned recording contains the same recording data as the\n original, but it has a new ID and a name prefixed with\n \"Clone of recording\". If the original recording is running, then\n the clone is also running."}, {"method_name": "startRecording", "method_sig": "void startRecording (long recordingId)\n             throws IllegalStateException,\n                    SecurityException", "description": "Starts the recording with the specified ID.\n \n A recording that is stopped can't be restarted."}, {"method_name": "stopRecording", "method_sig": "boolean stopRecording (long recordingId)\n               throws IllegalArgumentException,\n                      IllegalStateException,\n                      SecurityException", "description": "Stops the running recording with the specified ID."}, {"method_name": "closeRecording", "method_sig": "void closeRecording (long recordingId)\n             throws IOException", "description": "Closes the recording with the specified ID and releases any system\n resources that are associated with the recording.\n \n If the recording is already closed, invoking this method has no effect."}, {"method_name": "openStream", "method_sig": "long openStream (long recordingId,\n                Map<String, String> streamOptions)\n         throws IOException", "description": "Opens a data stream for the recording with the specified ID, or 0\n to get data irrespective of recording.\n \nRecording stream options\n\n\nName\nDescripion\nDefault value\nFormat\nExample values\n\n\n\n\nstartTime\nSpecifies the point in time to start a recording stream. Due to\n how data is stored, some events that start or end prior to the\n start time may be included.\nInstant.MIN_VALUE.toString()\nISO-8601. See Instant.toString()\n or milliseconds since epoch\n\"2015-11-03T00:00\",\n\"1446508800000\"\n\n\nendTime\nSpecifies the point in time to end a recording stream. Due to how\n data is stored, some events that start or end after the end time may\n be included.\nInstant.MAX_VALUE.toString()\nISO-8601. See Instant.toString() \n or milliseconds since epoch\n\"2015-11-03T01:00\", \n\"1446512400000\"\n\n\nblockSize\nSpecifies the maximum number of bytes to read with a call to readStream\n\n\"50000\"\nA positive long value. \n\n Setting blockSize to a very high value may result in\n OutOfMemoryError or an IllegalArgumentException, if the\n Java Virtual Machine (JVM) deems the value too large to handle.\n\"50000\",\n\"1000000\",\n\n\n\n If an option is omitted from the map the default value is used.\n \n The recording with the specified ID must be stopped before a stream can\n be opened. This restriction might be lifted in future releases."}, {"method_name": "closeStream", "method_sig": "void closeStream (long streamId)\n          throws IOException", "description": "Closes the recording stream with the specified ID and releases any system\n resources that are associated with the stream.\n \n If the stream is already closed, invoking this method has no effect."}, {"method_name": "readStream", "method_sig": "byte[] readStream (long streamId)\n           throws IOException", "description": "Reads a portion of data from the stream with the specified ID, or returns\n null if no more data is available.\n \n To read all data for a recording, invoke this method repeatedly until\n null is returned."}, {"method_name": "getRecordingOptions", "method_sig": "Map<String, String> getRecordingOptions (long recordingId)\n                                      throws IllegalArgumentException", "description": "Returns a map that contains the options for the recording with the\n specified ID (for example, the destination file or time span to keep\n recorded data).\n \n See FlightRecorderMXBean for available option names."}, {"method_name": "getRecordingSettings", "method_sig": "Map<String, String> getRecordingSettings (long recordingId)\n                                       throws IllegalArgumentException", "description": "Returns a Map that contains the settings for the recording with the specified ID,\n (for example, the event thresholds)\n \n If multiple recordings are running at the same time, more data could be\n recorded than what is specified in the Map object.\n \n The name in the Map is the event name and the setting name separated by\n \"#\" (for example, \"jdk.VMInfo#period\"). The value\n is a textual representation of the settings value (for example,\n \"60 s\")."}, {"method_name": "setConfiguration", "method_sig": "void setConfiguration (long recordingId,\n                      String contents)\n               throws IllegalArgumentException", "description": "Sets a configuration as a string representation for the recording with the\n specified ID."}, {"method_name": "setPredefinedConfiguration", "method_sig": "void setPredefinedConfiguration (long recordingId,\n                                String configurationName)\n                         throws IllegalArgumentException", "description": "Sets a predefined configuration for the recording with the specified ID."}, {"method_name": "setRecordingSettings", "method_sig": "void setRecordingSettings (long recordingId,\n                          Map<String, String> settings)\n                   throws IllegalArgumentException", "description": "Sets and replaces all previous settings for the specified recording.\n \n A setting consists of a name/value pair, where name specifies the\n event and setting to configure, and the value specifies what to set\n it to.\n \n The name can be formed in the following ways:\n \n\n   <event-name> + \"#\" + <setting-name>\n \n\n or\n \n\n   <event-id> + \"#\" + <setting-name>\n \n\n For example, to set the sample interval of the CPU Load event to once every\n second, use the name \"jdk.CPULoad#period\" and the value\n \"1 s\". If multiple events use the same name, for example if an event\n class is loaded in multiple class loaders, and differentiation is needed\n between them, then the name is \"56#period\". The ID for an event is\n obtained by invoking EventType.getId() method and is valid\n for the Java Virtual Machine (JVM) instance that the event is registered in.\n \n A list of available event names is retrieved by invoking\n FlightRecorder.getEventTypes() and\n EventType.getName(). A list of available settings for an\n event type is obtained by invoking\n EventType.getSettingDescriptors() and\n ValueDescriptor.getName().\n "}, {"method_name": "setRecordingOptions", "method_sig": "void setRecordingOptions (long recordingId,\n                         Map<String, String> options)\n                  throws IllegalArgumentException", "description": "Configures the recording options (for example, destination file and time span\n to keep data).\n \n See FlightRecorderMXBean for a description of the options and values\n that can be used. Setting a value to null restores the value to the\n default value."}, {"method_name": "getRecordings", "method_sig": "List<RecordingInfo> getRecordings()", "description": "Returns the list of the available recordings, not necessarily running.\n \nMBeanServer access:\n The mapped type of RecordingInfo is CompositeData with\n attributes as specified in the RecordingInfo.from method."}, {"method_name": "getConfigurations", "method_sig": "List<ConfigurationInfo> getConfigurations()", "description": "Returns the list of predefined configurations for this Java Virtual Machine (JVM).\n \nMBeanServer access:\n The mapped type of ConfigurationInfo is CompositeData\n with attributes as specified in the ConfigurationInfo.from method."}, {"method_name": "getEventTypes", "method_sig": "List<EventTypeInfo> getEventTypes()", "description": "Returns the list of currently registered event types.\n \nMBeanServer access:\n The mapped type of EventTypeInfo is CompositeData with\n attributes as specified in the EventTypeInfo.from method."}, {"method_name": "copyTo", "method_sig": "void copyTo (long recordingId,\n            String outputFile)\n     throws IOException,\n            SecurityException", "description": "Writes recording data to the specified file.\n \n If this method is invoked remotely from another process, the data is written\n to a file named outputFile on the machine where the target Java\n Virtual Machine (JVM) is running. If the file location is a relative path, it\n is relative to the working directory where the target JVM was started."}]}