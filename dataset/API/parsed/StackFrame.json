{"name": "Interface StackFrame", "module": "jdk.jdi", "package": "com.sun.jdi", "text": "The state of one method invocation on a thread's call stack.\n As a thread executes, stack frames are pushed and popped from\n its call stack as methods are invoked and then return. A StackFrame\n mirrors one such frame from a target VM at some point in its\n thread's execution. The call stack is, then, simply a List of\n StackFrame objects. The call stack can be obtained any time a thread\n is suspended through a call to ThreadReference.frames()\n\n StackFrames provide access to a method's local variables and their\n current values.\n \n The lifetime of a StackFrame is very limited. It is available only\n for suspended threads and becomes invalid once its thread is resumed.\n \n Any method on StackFrame which\n takes StackFrame as an parameter may throw\n VMDisconnectedException if the target VM is\n disconnected and the VMDisconnectEvent has been or is\n available to be read from the EventQueue.\n \n Any method on StackFrame which\n takes StackFrame as an parameter may throw\n VMOutOfMemoryException if the target VM has run out of memory.", "codes": ["public interface StackFrame\nextends Mirror, Locatable"], "fields": [], "methods": [{"method_name": "location", "method_sig": "Location location()", "description": "Returns the Location of the current instruction in the frame.\n The method for which this frame was created can also be accessed\n through the returned location.\n For the top frame in the stack, this location identifies the\n next instruction to be executed. For all other frames, this\n location identifies the instruction that caused the next frame's\n method to be invoked.\n If the frame represents a native method invocation, the returned\n location indicates the class and method, but the code index will\n not be valid (-1)."}, {"method_name": "thread", "method_sig": "ThreadReference thread()", "description": "Returns the thread under which this frame's method is running."}, {"method_name": "thisObject", "method_sig": "ObjectReference thisObject()", "description": "Returns the value of 'this' for the current frame.\n The ObjectReference for 'this' is only available for\n non-native instance methods."}, {"method_name": "visibleVariables", "method_sig": "List<LocalVariable> visibleVariables()\n                              throws AbsentInformationException", "description": "Returns a list containing each LocalVariable\n that can be accessed from this frame's location.\n \n Visibility is based on the code index of the current instruction of\n this StackFrame. Each variable has a range of byte code indices in which\n it is accessible.\n If this stack frame's method\n matches this variable's method and if the code index of this\n StackFrame is within the variable's byte code range, the variable is\n visible.\n \n A variable's byte code range is at least as large as the scope of\n that variable, but can continue beyond the end of the scope under\n certain circumstances:\n \nthe compiler/VM does not immediately reuse the variable's slot.\n the compiler/VM is implemented to report the extended range that\n would result from the item above.\n \n The advantage of an extended range is that variables from recently\n exited scopes may remain available for examination (this is especially\n useful for loop indices). If, as a result of the extensions above,\n the current frame location is contained within the range\n of multiple local variables of the same name, the variable with the\n highest-starting range is chosen for the returned list."}, {"method_name": "visibleVariableByName", "method_sig": "LocalVariable visibleVariableByName (String name)\n                             throws AbsentInformationException", "description": "Finds a LocalVariable that matches the given name and is\n visible at the current frame location.\n See visibleVariables() for more information on visibility."}, {"method_name": "getValue", "method_sig": "Value getValue (LocalVariable variable)", "description": "Gets the Value of a LocalVariable in this frame.\n The variable must be valid for this frame's method and visible\n according to the rules described in visibleVariables()."}, {"method_name": "getValues", "method_sig": "Map<LocalVariable, Value> getValues (List<? extends LocalVariable> variables)", "description": "Returns the values of multiple local variables in this frame.\n Each variable must be valid for this frame's method and visible\n according to the rules described in visibleVariables()."}, {"method_name": "setValue", "method_sig": "void setValue (LocalVariable variable,\n              Value value)\n       throws InvalidTypeException,\n              ClassNotLoadedException", "description": "Sets the Value of a LocalVariable in this frame.\n The variable must be valid for this frame's method and visible\n according to the rules described in visibleVariables().\n \n Object values must be assignment compatible with the variable type\n (This implies that the variable type must be loaded through the\n enclosing class's class loader). Primitive values must be\n either assignment compatible with the variable type or must be\n convertible to the variable type without loss of information.\n See JLS section 5.2 for more information on assignment\n compatibility."}, {"method_name": "getArgumentValues", "method_sig": "List<Value> getArgumentValues()", "description": "Returns the values of all arguments in this frame.  Values are\n returned even if no local variable information is present."}]}