{"name": "Class BasicEditorPaneUI", "module": "java.desktop", "package": "javax.swing.plaf.basic", "text": "Provides the look and feel for a JEditorPane.\n \nWarning:\n Serialized objects of this class will not be compatible with\n future Swing releases. The current serialization support is\n appropriate for short term storage or RMI between applications running\n the same version of Swing.  As of 1.4, support for long term storage\n of all JavaBeans\u2122\n has been added to the java.beans package.\n Please see XMLEncoder.", "codes": ["public class BasicEditorPaneUI\nextends BasicTextUI"], "fields": [], "methods": [{"method_name": "createUI", "method_sig": "public static ComponentUI createUI (JComponent c)", "description": "Creates a UI for the JTextPane."}, {"method_name": "getPropertyPrefix", "method_sig": "protected String getPropertyPrefix()", "description": "Fetches the name used as a key to lookup properties through the\n UIManager.  This is used as a prefix to all the standard\n text properties."}, {"method_name": "installUI", "method_sig": "public void installUI (JComponent c)", "description": "Installs the UI for a component.  This does the following\n things.\n \n\n Sets the associated component to opaque if the opaque property\n has not already been set by the client program. This will cause the\n component's background color to be painted.\n \n Installs the default caret and highlighter into the\n associated component. These properties are only set if their\n current value is either null or an instance of\n UIResource.\n \n Attaches to the editor and model.  If there is no\n model, a default one is created.\n \n Creates the view factory and the view hierarchy used\n to represent the model.\n "}, {"method_name": "uninstallUI", "method_sig": "public void uninstallUI (JComponent c)", "description": "Deinstalls the UI for a component.  This removes the listeners,\n uninstalls the highlighter, removes views, and nulls out the keymap."}, {"method_name": "getEditorKit", "method_sig": "public EditorKit getEditorKit (JTextComponent tc)", "description": "Fetches the EditorKit for the UI.  This is whatever is\n currently set in the associated JEditorPane."}, {"method_name": "propertyChange", "method_sig": "protected void propertyChange (PropertyChangeEvent evt)", "description": "This method gets called when a bound property is changed\n on the associated JTextComponent.  This is a hook\n which UI implementations may change to reflect how the\n UI displays bound properties of JTextComponent subclasses.\n This is implemented to rebuild the ActionMap based upon an\n EditorKit change."}]}