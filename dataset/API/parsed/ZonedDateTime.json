{"name": "Class ZonedDateTime", "module": "java.base", "package": "java.time", "text": "A date-time with a time-zone in the ISO-8601 calendar system,\n such as 2007-12-03T10:15:30+01:00 Europe/Paris.\n \nZonedDateTime is an immutable representation of a date-time with a time-zone.\n This class stores all date and time fields, to a precision of nanoseconds,\n and a time-zone, with a zone offset used to handle ambiguous local date-times.\n For example, the value\n \"2nd October 2007 at 13:45.30.123456789 +02:00 in the Europe/Paris time-zone\"\n can be stored in a ZonedDateTime.\n \n This class handles conversion from the local time-line of LocalDateTime\n to the instant time-line of Instant.\n The difference between the two time-lines is the offset from UTC/Greenwich,\n represented by a ZoneOffset.\n \n Converting between the two time-lines involves calculating the offset using the\n rules accessed from the ZoneId.\n Obtaining the offset for an instant is simple, as there is exactly one valid\n offset for each instant. By contrast, obtaining the offset for a local date-time\n is not straightforward. There are three cases:\n \nNormal, with one valid offset. For the vast majority of the year, the normal\n  case applies, where there is a single valid offset for the local date-time.\nGap, with zero valid offsets. This is when clocks jump forward typically\n  due to the spring daylight savings change from \"winter\" to \"summer\".\n  In a gap there are local date-time values with no valid offset.\nOverlap, with two valid offsets. This is when clocks are set back typically\n  due to the autumn daylight savings change from \"summer\" to \"winter\".\n  In an overlap there are local date-time values with two valid offsets.\n\n\n Any method that converts directly or implicitly from a local date-time to an\n instant by obtaining the offset has the potential to be complicated.\n \n For Gaps, the general strategy is that if the local date-time falls in the\n middle of a Gap, then the resulting zoned date-time will have a local date-time\n shifted forwards by the length of the Gap, resulting in a date-time in the later\n offset, typically \"summer\" time.\n \n For Overlaps, the general strategy is that if the local date-time falls in the\n middle of an Overlap, then the previous offset will be retained. If there is no\n previous offset, or the previous offset is invalid, then the earlier offset is\n used, typically \"summer\" time.. Two additional methods,\n withEarlierOffsetAtOverlap() and withLaterOffsetAtOverlap(),\n help manage the case of an overlap.\n \n In terms of design, this class should be viewed primarily as the combination\n of a LocalDateTime and a ZoneId. The ZoneOffset is\n a vital, but secondary, piece of information, used to ensure that the class\n represents an instant, especially during a daylight savings overlap.\n\n \n This is a value-based\n class; use of identity-sensitive operations (including reference equality\n (==), identity hash code, or synchronization) on instances of\n ZonedDateTime may have unpredictable results and should be avoided.\n The equals method should be used for comparisons.", "codes": ["public final class ZonedDateTime\nextends Object\nimplements Temporal, ChronoZonedDateTime<LocalDate>, Serializable"], "fields": [], "methods": [{"method_name": "now", "method_sig": "public static ZonedDateTime now()", "description": "Obtains the current date-time from the system clock in the default time-zone.\n \n This will query the system clock in the default\n time-zone to obtain the current date-time.\n The zone and offset will be set based on the time-zone in the clock.\n \n Using this method will prevent the ability to use an alternate clock for testing\n because the clock is hard-coded."}, {"method_name": "now", "method_sig": "public static ZonedDateTime now (ZoneId zone)", "description": "Obtains the current date-time from the system clock in the specified time-zone.\n \n This will query the system clock to obtain the current date-time.\n Specifying the time-zone avoids dependence on the default time-zone.\n The offset will be calculated from the specified time-zone.\n \n Using this method will prevent the ability to use an alternate clock for testing\n because the clock is hard-coded."}, {"method_name": "now", "method_sig": "public static ZonedDateTime now (Clock clock)", "description": "Obtains the current date-time from the specified clock.\n \n This will query the specified clock to obtain the current date-time.\n The zone and offset will be set based on the time-zone in the clock.\n \n Using this method allows the use of an alternate clock for testing.\n The alternate clock may be introduced using dependency injection."}, {"method_name": "of", "method_sig": "public static ZonedDateTime of (LocalDate date,\n                               LocalTime time,\n                               ZoneId zone)", "description": "Obtains an instance of ZonedDateTime from a local date and time.\n \n This creates a zoned date-time matching the input local date and time as closely as possible.\n Time-zone rules, such as daylight savings, mean that not every local date-time\n is valid for the specified zone, thus the local date-time may be adjusted.\n \n The local date time and first combined to form a local date-time.\n The local date-time is then resolved to a single instant on the time-line.\n This is achieved by finding a valid offset from UTC/Greenwich for the local\n date-time as defined by the rules of the zone ID.\n\n In most cases, there is only one valid offset for a local date-time.\n In the case of an overlap, when clocks are set back, there are two valid offsets.\n This method uses the earlier offset typically corresponding to \"summer\".\n \n In the case of a gap, when clocks jump forward, there is no valid offset.\n Instead, the local date-time is adjusted to be later by the length of the gap.\n For a typical one hour daylight savings change, the local date-time will be\n moved one hour later into the offset typically corresponding to \"summer\"."}, {"method_name": "of", "method_sig": "public static ZonedDateTime of (LocalDateTime localDateTime,\n                               ZoneId zone)", "description": "Obtains an instance of ZonedDateTime from a local date-time.\n \n This creates a zoned date-time matching the input local date-time as closely as possible.\n Time-zone rules, such as daylight savings, mean that not every local date-time\n is valid for the specified zone, thus the local date-time may be adjusted.\n \n The local date-time is resolved to a single instant on the time-line.\n This is achieved by finding a valid offset from UTC/Greenwich for the local\n date-time as defined by the rules of the zone ID.\n\n In most cases, there is only one valid offset for a local date-time.\n In the case of an overlap, when clocks are set back, there are two valid offsets.\n This method uses the earlier offset typically corresponding to \"summer\".\n \n In the case of a gap, when clocks jump forward, there is no valid offset.\n Instead, the local date-time is adjusted to be later by the length of the gap.\n For a typical one hour daylight savings change, the local date-time will be\n moved one hour later into the offset typically corresponding to \"summer\"."}, {"method_name": "of", "method_sig": "public static ZonedDateTime of (int year,\n                               int month,\n                               int dayOfMonth,\n                               int hour,\n                               int minute,\n                               int second,\n                               int nanoOfSecond,\n                               ZoneId zone)", "description": "Obtains an instance of ZonedDateTime from a year, month, day,\n hour, minute, second, nanosecond and time-zone.\n \n This creates a zoned date-time matching the local date-time of the seven\n specified fields as closely as possible.\n Time-zone rules, such as daylight savings, mean that not every local date-time\n is valid for the specified zone, thus the local date-time may be adjusted.\n \n The local date-time is resolved to a single instant on the time-line.\n This is achieved by finding a valid offset from UTC/Greenwich for the local\n date-time as defined by the rules of the zone ID.\n\n In most cases, there is only one valid offset for a local date-time.\n In the case of an overlap, when clocks are set back, there are two valid offsets.\n This method uses the earlier offset typically corresponding to \"summer\".\n \n In the case of a gap, when clocks jump forward, there is no valid offset.\n Instead, the local date-time is adjusted to be later by the length of the gap.\n For a typical one hour daylight savings change, the local date-time will be\n moved one hour later into the offset typically corresponding to \"summer\".\n \n This method exists primarily for writing test cases.\n Non test-code will typically use other methods to create an offset time.\n LocalDateTime has five additional convenience variants of the\n equivalent factory method taking fewer arguments.\n They are not provided here to reduce the footprint of the API."}, {"method_name": "ofLocal", "method_sig": "public static ZonedDateTime ofLocal (LocalDateTime localDateTime,\n                                    ZoneId zone,\n                                    ZoneOffset preferredOffset)", "description": "Obtains an instance of ZonedDateTime from a local date-time\n using the preferred offset if possible.\n \n The local date-time is resolved to a single instant on the time-line.\n This is achieved by finding a valid offset from UTC/Greenwich for the local\n date-time as defined by the rules of the zone ID.\n\n In most cases, there is only one valid offset for a local date-time.\n In the case of an overlap, where clocks are set back, there are two valid offsets.\n If the preferred offset is one of the valid offsets then it is used.\n Otherwise the earlier valid offset is used, typically corresponding to \"summer\".\n \n In the case of a gap, where clocks jump forward, there is no valid offset.\n Instead, the local date-time is adjusted to be later by the length of the gap.\n For a typical one hour daylight savings change, the local date-time will be\n moved one hour later into the offset typically corresponding to \"summer\"."}, {"method_name": "ofInstant", "method_sig": "public static ZonedDateTime ofInstant (Instant instant,\n                                      ZoneId zone)", "description": "Obtains an instance of ZonedDateTime from an Instant.\n \n This creates a zoned date-time with the same instant as that specified.\n Calling ChronoZonedDateTime.toInstant() will return an instant equal to the one used here.\n \n Converting an instant to a zoned date-time is simple as there is only one valid\n offset for each instant."}, {"method_name": "ofInstant", "method_sig": "public static ZonedDateTime ofInstant (LocalDateTime localDateTime,\n                                      ZoneOffset offset,\n                                      ZoneId zone)", "description": "Obtains an instance of ZonedDateTime from the instant formed by combining\n the local date-time and offset.\n \n This creates a zoned date-time by combining\n the LocalDateTime and ZoneOffset.\n This combination uniquely specifies an instant without ambiguity.\n \n Converting an instant to a zoned date-time is simple as there is only one valid\n offset for each instant. If the valid offset is different to the offset specified,\n then the date-time and offset of the zoned date-time will differ from those specified.\n \n If the ZoneId to be used is a ZoneOffset, this method is equivalent\n to of(LocalDateTime, ZoneId)."}, {"method_name": "ofStrict", "method_sig": "public static ZonedDateTime ofStrict (LocalDateTime localDateTime,\n                                     ZoneOffset offset,\n                                     ZoneId zone)", "description": "Obtains an instance of ZonedDateTime strictly validating the\n combination of local date-time, offset and zone ID.\n \n This creates a zoned date-time ensuring that the offset is valid for the\n local date-time according to the rules of the specified zone.\n If the offset is invalid, an exception is thrown."}, {"method_name": "from", "method_sig": "public static ZonedDateTime from (TemporalAccessor temporal)", "description": "Obtains an instance of ZonedDateTime from a temporal object.\n \n This obtains a zoned date-time based on the specified temporal.\n A TemporalAccessor represents an arbitrary set of date and time information,\n which this factory converts to an instance of ZonedDateTime.\n \n The conversion will first obtain a ZoneId from the temporal object,\n falling back to a ZoneOffset if necessary. It will then try to obtain\n an Instant, falling back to a LocalDateTime if necessary.\n The result will be either the combination of ZoneId or ZoneOffset\n with Instant or LocalDateTime.\n Implementations are permitted to perform optimizations such as accessing\n those fields that are equivalent to the relevant objects.\n \n This method matches the signature of the functional interface TemporalQuery\n allowing it to be used as a query via method reference, ZonedDateTime::from."}, {"method_name": "parse", "method_sig": "public static ZonedDateTime parse (CharSequence text)", "description": "Obtains an instance of ZonedDateTime from a text string such as\n 2007-12-03T10:15:30+01:00[Europe/Paris].\n \n The string must represent a valid date-time and is parsed using\n DateTimeFormatter.ISO_ZONED_DATE_TIME."}, {"method_name": "parse", "method_sig": "public static ZonedDateTime parse (CharSequence text,\n                                  DateTimeFormatter formatter)", "description": "Obtains an instance of ZonedDateTime from a text string using a specific formatter.\n \n The text is parsed using the formatter, returning a date-time."}, {"method_name": "isSupported", "method_sig": "public boolean isSupported (TemporalField field)", "description": "Checks if the specified field is supported.\n \n This checks if this date-time can be queried for the specified field.\n If false, then calling the range,\n get and with(TemporalField, long)\n methods will throw an exception.\n \n If the field is a ChronoField then the query is implemented here.\n The supported fields are:\n \nNANO_OF_SECOND\nNANO_OF_DAY\nMICRO_OF_SECOND\nMICRO_OF_DAY\nMILLI_OF_SECOND\nMILLI_OF_DAY\nSECOND_OF_MINUTE\nSECOND_OF_DAY\nMINUTE_OF_HOUR\nMINUTE_OF_DAY\nHOUR_OF_AMPM\nCLOCK_HOUR_OF_AMPM\nHOUR_OF_DAY\nCLOCK_HOUR_OF_DAY\nAMPM_OF_DAY\nDAY_OF_WEEK\nALIGNED_DAY_OF_WEEK_IN_MONTH\nALIGNED_DAY_OF_WEEK_IN_YEAR\nDAY_OF_MONTH\nDAY_OF_YEAR\nEPOCH_DAY\nALIGNED_WEEK_OF_MONTH\nALIGNED_WEEK_OF_YEAR\nMONTH_OF_YEAR\nPROLEPTIC_MONTH\nYEAR_OF_ERA\nYEAR\nERA\nINSTANT_SECONDS\nOFFSET_SECONDS\n\n All other ChronoField instances will return false.\n \n If the field is not a ChronoField, then the result of this method\n is obtained by invoking TemporalField.isSupportedBy(TemporalAccessor)\n passing this as the argument.\n Whether the field is supported is determined by the field."}, {"method_name": "isSupported", "method_sig": "public boolean isSupported (TemporalUnit unit)", "description": "Checks if the specified unit is supported.\n \n This checks if the specified unit can be added to, or subtracted from, this date-time.\n If false, then calling the plus(long, TemporalUnit) and\n minus methods will throw an exception.\n \n If the unit is a ChronoUnit then the query is implemented here.\n The supported units are:\n \nNANOS\nMICROS\nMILLIS\nSECONDS\nMINUTES\nHOURS\nHALF_DAYS\nDAYS\nWEEKS\nMONTHS\nYEARS\nDECADES\nCENTURIES\nMILLENNIA\nERAS\n\n All other ChronoUnit instances will return false.\n \n If the unit is not a ChronoUnit, then the result of this method\n is obtained by invoking TemporalUnit.isSupportedBy(Temporal)\n passing this as the argument.\n Whether the unit is supported is determined by the unit."}, {"method_name": "range", "method_sig": "public ValueRange range (TemporalField field)", "description": "Gets the range of valid values for the specified field.\n \n The range object expresses the minimum and maximum valid values for a field.\n This date-time is used to enhance the accuracy of the returned range.\n If it is not possible to return the range, because the field is not supported\n or for some other reason, an exception is thrown.\n \n If the field is a ChronoField then the query is implemented here.\n The supported fields will return\n appropriate range instances.\n All other ChronoField instances will throw an UnsupportedTemporalTypeException.\n \n If the field is not a ChronoField, then the result of this method\n is obtained by invoking TemporalField.rangeRefinedBy(TemporalAccessor)\n passing this as the argument.\n Whether the range can be obtained is determined by the field."}, {"method_name": "get", "method_sig": "public int get (TemporalField field)", "description": "Gets the value of the specified field from this date-time as an int.\n \n This queries this date-time for the value of the specified field.\n The returned value will always be within the valid range of values for the field.\n If it is not possible to return the value, because the field is not supported\n or for some other reason, an exception is thrown.\n \n If the field is a ChronoField then the query is implemented here.\n The supported fields will return valid\n values based on this date-time, except NANO_OF_DAY, MICRO_OF_DAY,\n EPOCH_DAY, PROLEPTIC_MONTH and INSTANT_SECONDS which are too\n large to fit in an int and throw an UnsupportedTemporalTypeException.\n All other ChronoField instances will throw an UnsupportedTemporalTypeException.\n \n If the field is not a ChronoField, then the result of this method\n is obtained by invoking TemporalField.getFrom(TemporalAccessor)\n passing this as the argument. Whether the value can be obtained,\n and what the value represents, is determined by the field."}, {"method_name": "getLong", "method_sig": "public long getLong (TemporalField field)", "description": "Gets the value of the specified field from this date-time as a long.\n \n This queries this date-time for the value of the specified field.\n If it is not possible to return the value, because the field is not supported\n or for some other reason, an exception is thrown.\n \n If the field is a ChronoField then the query is implemented here.\n The supported fields will return valid\n values based on this date-time.\n All other ChronoField instances will throw an UnsupportedTemporalTypeException.\n \n If the field is not a ChronoField, then the result of this method\n is obtained by invoking TemporalField.getFrom(TemporalAccessor)\n passing this as the argument. Whether the value can be obtained,\n and what the value represents, is determined by the field."}, {"method_name": "getOffset", "method_sig": "public ZoneOffset getOffset()", "description": "Gets the zone offset, such as '+01:00'.\n \n This is the offset of the local date-time from UTC/Greenwich."}, {"method_name": "withEarlierOffsetAtOverlap", "method_sig": "public ZonedDateTime withEarlierOffsetAtOverlap()", "description": "Returns a copy of this date-time changing the zone offset to the\n earlier of the two valid offsets at a local time-line overlap.\n \n This method only has any effect when the local time-line overlaps, such as\n at an autumn daylight savings cutover. In this scenario, there are two\n valid offsets for the local date-time. Calling this method will return\n a zoned date-time with the earlier of the two selected.\n \n If this method is called when it is not an overlap, this\n is returned.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "withLaterOffsetAtOverlap", "method_sig": "public ZonedDateTime withLaterOffsetAtOverlap()", "description": "Returns a copy of this date-time changing the zone offset to the\n later of the two valid offsets at a local time-line overlap.\n \n This method only has any effect when the local time-line overlaps, such as\n at an autumn daylight savings cutover. In this scenario, there are two\n valid offsets for the local date-time. Calling this method will return\n a zoned date-time with the later of the two selected.\n \n If this method is called when it is not an overlap, this\n is returned.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "getZone", "method_sig": "public ZoneId getZone()", "description": "Gets the time-zone, such as 'Europe/Paris'.\n \n This returns the zone ID. This identifies the time-zone rules\n that determine when and how the offset from UTC/Greenwich changes.\n \n The zone ID may be same as the offset.\n If this is true, then any future calculations, such as addition or subtraction,\n have no complex edge cases due to time-zone rules.\n See also withFixedOffsetZone()."}, {"method_name": "withZoneSameLocal", "method_sig": "public ZonedDateTime withZoneSameLocal (ZoneId zone)", "description": "Returns a copy of this date-time with a different time-zone,\n retaining the local date-time if possible.\n \n This method changes the time-zone and retains the local date-time.\n The local date-time is only changed if it is invalid for the new zone,\n determined using the same approach as\n ofLocal(LocalDateTime, ZoneId, ZoneOffset).\n \n To change the zone and adjust the local date-time,\n use withZoneSameInstant(ZoneId).\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "withZoneSameInstant", "method_sig": "public ZonedDateTime withZoneSameInstant (ZoneId zone)", "description": "Returns a copy of this date-time with a different time-zone,\n retaining the instant.\n \n This method changes the time-zone and retains the instant.\n This normally results in a change to the local date-time.\n \n This method is based on retaining the same instant, thus gaps and overlaps\n in the local time-line have no effect on the result.\n \n To change the offset while keeping the local time,\n use withZoneSameLocal(ZoneId)."}, {"method_name": "withFixedOffsetZone", "method_sig": "public ZonedDateTime withFixedOffsetZone()", "description": "Returns a copy of this date-time with the zone ID set to the offset.\n \n This returns a zoned date-time where the zone ID is the same as getOffset().\n The local date-time, offset and instant of the result will be the same as in this date-time.\n \n Setting the date-time to a fixed single offset means that any future\n calculations, such as addition or subtraction, have no complex edge cases\n due to time-zone rules.\n This might also be useful when sending a zoned date-time across a network,\n as most protocols, such as ISO-8601, only handle offsets,\n and not region-based zone IDs.\n \n This is equivalent to ZonedDateTime.of(zdt.toLocalDateTime(), zdt.getOffset())."}, {"method_name": "toLocalDateTime", "method_sig": "public LocalDateTime toLocalDateTime()", "description": "Gets the LocalDateTime part of this date-time.\n \n This returns a LocalDateTime with the same year, month, day and time\n as this date-time."}, {"method_name": "toLocalDate", "method_sig": "public LocalDate toLocalDate()", "description": "Gets the LocalDate part of this date-time.\n \n This returns a LocalDate with the same year, month and day\n as this date-time."}, {"method_name": "getYear", "method_sig": "public int getYear()", "description": "Gets the year field.\n \n This method returns the primitive int value for the year.\n \n The year returned by this method is proleptic as per get(YEAR).\n To obtain the year-of-era, use get(YEAR_OF_ERA)."}, {"method_name": "getMonthValue", "method_sig": "public int getMonthValue()", "description": "Gets the month-of-year field from 1 to 12.\n \n This method returns the month as an int from 1 to 12.\n Application code is frequently clearer if the enum Month\n is used by calling getMonth()."}, {"method_name": "getMonth", "method_sig": "public Month getMonth()", "description": "Gets the month-of-year field using the Month enum.\n \n This method returns the enum Month for the month.\n This avoids confusion as to what int values mean.\n If you need access to the primitive int value then the enum\n provides the int value."}, {"method_name": "getDayOfMonth", "method_sig": "public int getDayOfMonth()", "description": "Gets the day-of-month field.\n \n This method returns the primitive int value for the day-of-month."}, {"method_name": "getDayOfYear", "method_sig": "public int getDayOfYear()", "description": "Gets the day-of-year field.\n \n This method returns the primitive int value for the day-of-year."}, {"method_name": "getDayOfWeek", "method_sig": "public DayOfWeek getDayOfWeek()", "description": "Gets the day-of-week field, which is an enum DayOfWeek.\n \n This method returns the enum DayOfWeek for the day-of-week.\n This avoids confusion as to what int values mean.\n If you need access to the primitive int value then the enum\n provides the int value.\n \n Additional information can be obtained from the DayOfWeek.\n This includes textual names of the values."}, {"method_name": "toLocalTime", "method_sig": "public LocalTime toLocalTime()", "description": "Gets the LocalTime part of this date-time.\n \n This returns a LocalTime with the same hour, minute, second and\n nanosecond as this date-time."}, {"method_name": "getHour", "method_sig": "public int getHour()", "description": "Gets the hour-of-day field."}, {"method_name": "getMinute", "method_sig": "public int getMinute()", "description": "Gets the minute-of-hour field."}, {"method_name": "getSecond", "method_sig": "public int getSecond()", "description": "Gets the second-of-minute field."}, {"method_name": "getNano", "method_sig": "public int getNano()", "description": "Gets the nano-of-second field."}, {"method_name": "with", "method_sig": "public ZonedDateTime with (TemporalAdjuster adjuster)", "description": "Returns an adjusted copy of this date-time.\n \n This returns a ZonedDateTime, based on this one, with the date-time adjusted.\n The adjustment takes place using the specified adjuster strategy object.\n Read the documentation of the adjuster to understand what adjustment will be made.\n \n A simple adjuster might simply set the one of the fields, such as the year field.\n A more complex adjuster might set the date to the last day of the month.\n A selection of common adjustments is provided in\n TemporalAdjusters.\n These include finding the \"last day of the month\" and \"next Wednesday\".\n Key date-time classes also implement the TemporalAdjuster interface,\n such as Month and MonthDay.\n The adjuster is responsible for handling special cases, such as the varying\n lengths of month and leap years.\n \n For example this code returns a date on the last day of July:\n \n  import static java.time.Month.*;\n  import static java.time.temporal.TemporalAdjusters.*;\n\n  result = zonedDateTime.with(JULY).with(lastDayOfMonth());\n \n\n The classes LocalDate and LocalTime implement TemporalAdjuster,\n thus this method can be used to change the date, time or offset:\n \n  result = zonedDateTime.with(date);\n  result = zonedDateTime.with(time);\n \n\nZoneOffset also implements TemporalAdjuster however using it\n as an argument typically has no effect. The offset of a ZonedDateTime is\n controlled primarily by the time-zone. As such, changing the offset does not generally\n make sense, because there is only one valid offset for the local date-time and zone.\n If the zoned date-time is in a daylight savings overlap, then the offset is used\n to switch between the two valid offsets. In all other cases, the offset is ignored.\n \n The result of this method is obtained by invoking the\n TemporalAdjuster.adjustInto(Temporal) method on the\n specified adjuster passing this as the argument.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "with", "method_sig": "public ZonedDateTime with (TemporalField field,\n                          long newValue)", "description": "Returns a copy of this date-time with the specified field set to a new value.\n \n This returns a ZonedDateTime, based on this one, with the value\n for the specified field changed.\n This can be used to change any supported field, such as the year, month or day-of-month.\n If it is not possible to set the value, because the field is not supported or for\n some other reason, an exception is thrown.\n \n In some cases, changing the specified field can cause the resulting date-time to become invalid,\n such as changing the month from 31st January to February would make the day-of-month invalid.\n In cases like this, the field is responsible for resolving the date. Typically it will choose\n the previous valid date, which would be the last valid day of February in this example.\n \n If the field is a ChronoField then the adjustment is implemented here.\n \n The INSTANT_SECONDS field will return a date-time with the specified instant.\n The zone and nano-of-second are unchanged.\n The result will have an offset derived from the new instant and original zone.\n If the new instant value is outside the valid range then a DateTimeException will be thrown.\n \n The OFFSET_SECONDS field will typically be ignored.\n The offset of a ZonedDateTime is controlled primarily by the time-zone.\n As such, changing the offset does not generally make sense, because there is only\n one valid offset for the local date-time and zone.\n If the zoned date-time is in a daylight savings overlap, then the offset is used\n to switch between the two valid offsets. In all other cases, the offset is ignored.\n If the new offset value is outside the valid range then a DateTimeException will be thrown.\n \n The other supported fields will behave as per\n the matching method on LocalDateTime.\n The zone is not part of the calculation and will be unchanged.\n When converting back to ZonedDateTime, if the local date-time is in an overlap,\n then the offset will be retained if possible, otherwise the earlier offset will be used.\n If in a gap, the local date-time will be adjusted forward by the length of the gap.\n \n All other ChronoField instances will throw an UnsupportedTemporalTypeException.\n \n If the field is not a ChronoField, then the result of this method\n is obtained by invoking TemporalField.adjustInto(Temporal, long)\n passing this as the argument. In this case, the field determines\n whether and how to adjust the instant.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "withYear", "method_sig": "public ZonedDateTime withYear (int year)", "description": "Returns a copy of this ZonedDateTime with the year altered.\n \n This operates on the local time-line,\n changing the year of the local date-time.\n This is then converted back to a ZonedDateTime, using the zone ID\n to obtain the offset.\n \n When converting back to ZonedDateTime, if the local date-time is in an overlap,\n then the offset will be retained if possible, otherwise the earlier offset will be used.\n If in a gap, the local date-time will be adjusted forward by the length of the gap.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "withMonth", "method_sig": "public ZonedDateTime withMonth (int month)", "description": "Returns a copy of this ZonedDateTime with the month-of-year altered.\n \n This operates on the local time-line,\n changing the month of the local date-time.\n This is then converted back to a ZonedDateTime, using the zone ID\n to obtain the offset.\n \n When converting back to ZonedDateTime, if the local date-time is in an overlap,\n then the offset will be retained if possible, otherwise the earlier offset will be used.\n If in a gap, the local date-time will be adjusted forward by the length of the gap.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "withDayOfMonth", "method_sig": "public ZonedDateTime withDayOfMonth (int dayOfMonth)", "description": "Returns a copy of this ZonedDateTime with the day-of-month altered.\n \n This operates on the local time-line,\n changing the day-of-month of the local date-time.\n This is then converted back to a ZonedDateTime, using the zone ID\n to obtain the offset.\n \n When converting back to ZonedDateTime, if the local date-time is in an overlap,\n then the offset will be retained if possible, otherwise the earlier offset will be used.\n If in a gap, the local date-time will be adjusted forward by the length of the gap.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "withDayOfYear", "method_sig": "public ZonedDateTime withDayOfYear (int dayOfYear)", "description": "Returns a copy of this ZonedDateTime with the day-of-year altered.\n \n This operates on the local time-line,\n changing the day-of-year of the local date-time.\n This is then converted back to a ZonedDateTime, using the zone ID\n to obtain the offset.\n \n When converting back to ZonedDateTime, if the local date-time is in an overlap,\n then the offset will be retained if possible, otherwise the earlier offset will be used.\n If in a gap, the local date-time will be adjusted forward by the length of the gap.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "withHour", "method_sig": "public ZonedDateTime withHour (int hour)", "description": "Returns a copy of this ZonedDateTime with the hour-of-day altered.\n \n This operates on the local time-line,\n changing the time of the local date-time.\n This is then converted back to a ZonedDateTime, using the zone ID\n to obtain the offset.\n \n When converting back to ZonedDateTime, if the local date-time is in an overlap,\n then the offset will be retained if possible, otherwise the earlier offset will be used.\n If in a gap, the local date-time will be adjusted forward by the length of the gap.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "withMinute", "method_sig": "public ZonedDateTime withMinute (int minute)", "description": "Returns a copy of this ZonedDateTime with the minute-of-hour altered.\n \n This operates on the local time-line,\n changing the time of the local date-time.\n This is then converted back to a ZonedDateTime, using the zone ID\n to obtain the offset.\n \n When converting back to ZonedDateTime, if the local date-time is in an overlap,\n then the offset will be retained if possible, otherwise the earlier offset will be used.\n If in a gap, the local date-time will be adjusted forward by the length of the gap.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "withSecond", "method_sig": "public ZonedDateTime withSecond (int second)", "description": "Returns a copy of this ZonedDateTime with the second-of-minute altered.\n \n This operates on the local time-line,\n changing the time of the local date-time.\n This is then converted back to a ZonedDateTime, using the zone ID\n to obtain the offset.\n \n When converting back to ZonedDateTime, if the local date-time is in an overlap,\n then the offset will be retained if possible, otherwise the earlier offset will be used.\n If in a gap, the local date-time will be adjusted forward by the length of the gap.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "withNano", "method_sig": "public ZonedDateTime withNano (int nanoOfSecond)", "description": "Returns a copy of this ZonedDateTime with the nano-of-second altered.\n \n This operates on the local time-line,\n changing the time of the local date-time.\n This is then converted back to a ZonedDateTime, using the zone ID\n to obtain the offset.\n \n When converting back to ZonedDateTime, if the local date-time is in an overlap,\n then the offset will be retained if possible, otherwise the earlier offset will be used.\n If in a gap, the local date-time will be adjusted forward by the length of the gap.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "truncatedTo", "method_sig": "public ZonedDateTime truncatedTo (TemporalUnit unit)", "description": "Returns a copy of this ZonedDateTime with the time truncated.\n \n Truncation returns a copy of the original date-time with fields\n smaller than the specified unit set to zero.\n For example, truncating with the minutes unit\n will set the second-of-minute and nano-of-second field to zero.\n \n The unit must have a duration\n that divides into the length of a standard day without remainder.\n This includes all supplied time units on ChronoUnit and\n DAYS. Other units throw an exception.\n \n This operates on the local time-line,\n truncating\n the underlying local date-time. This is then converted back to a\n ZonedDateTime, using the zone ID to obtain the offset.\n \n When converting back to ZonedDateTime, if the local date-time is in an overlap,\n then the offset will be retained if possible, otherwise the earlier offset will be used.\n If in a gap, the local date-time will be adjusted forward by the length of the gap.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "plus", "method_sig": "public ZonedDateTime plus (TemporalAmount amountToAdd)", "description": "Returns a copy of this date-time with the specified amount added.\n \n This returns a ZonedDateTime, based on this one, with the specified amount added.\n The amount is typically Period or Duration but may be\n any other type implementing the TemporalAmount interface.\n \n The calculation is delegated to the amount object by calling\n TemporalAmount.addTo(Temporal). The amount implementation is free\n to implement the addition in any way it wishes, however it typically\n calls back to plus(long, TemporalUnit). Consult the documentation\n of the amount implementation to determine if it can be successfully added.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "plus", "method_sig": "public ZonedDateTime plus (long amountToAdd,\n                          TemporalUnit unit)", "description": "Returns a copy of this date-time with the specified amount added.\n \n This returns a ZonedDateTime, based on this one, with the amount\n in terms of the unit added. If it is not possible to add the amount, because the\n unit is not supported or for some other reason, an exception is thrown.\n \n If the field is a ChronoUnit then the addition is implemented here.\n The zone is not part of the calculation and will be unchanged in the result.\n The calculation for date and time units differ.\n \n Date units operate on the local time-line.\n The period is first added to the local date-time, then converted back\n to a zoned date-time using the zone ID.\n The conversion uses ofLocal(LocalDateTime, ZoneId, ZoneOffset)\n with the offset before the addition.\n \n Time units operate on the instant time-line.\n The period is first added to the local date-time, then converted back to\n a zoned date-time using the zone ID.\n The conversion uses ofInstant(LocalDateTime, ZoneOffset, ZoneId)\n with the offset before the addition.\n \n If the field is not a ChronoUnit, then the result of this method\n is obtained by invoking TemporalUnit.addTo(Temporal, long)\n passing this as the argument. In this case, the unit determines\n whether and how to perform the addition.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "plusYears", "method_sig": "public ZonedDateTime plusYears (long years)", "description": "Returns a copy of this ZonedDateTime with the specified number of years added.\n \n This operates on the local time-line,\n adding years to the local date-time.\n This is then converted back to a ZonedDateTime, using the zone ID\n to obtain the offset.\n \n When converting back to ZonedDateTime, if the local date-time is in an overlap,\n then the offset will be retained if possible, otherwise the earlier offset will be used.\n If in a gap, the local date-time will be adjusted forward by the length of the gap.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "plusMonths", "method_sig": "public ZonedDateTime plusMonths (long months)", "description": "Returns a copy of this ZonedDateTime with the specified number of months added.\n \n This operates on the local time-line,\n adding months to the local date-time.\n This is then converted back to a ZonedDateTime, using the zone ID\n to obtain the offset.\n \n When converting back to ZonedDateTime, if the local date-time is in an overlap,\n then the offset will be retained if possible, otherwise the earlier offset will be used.\n If in a gap, the local date-time will be adjusted forward by the length of the gap.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "plusWeeks", "method_sig": "public ZonedDateTime plusWeeks (long weeks)", "description": "Returns a copy of this ZonedDateTime with the specified number of weeks added.\n \n This operates on the local time-line,\n adding weeks to the local date-time.\n This is then converted back to a ZonedDateTime, using the zone ID\n to obtain the offset.\n \n When converting back to ZonedDateTime, if the local date-time is in an overlap,\n then the offset will be retained if possible, otherwise the earlier offset will be used.\n If in a gap, the local date-time will be adjusted forward by the length of the gap.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "plusDays", "method_sig": "public ZonedDateTime plusDays (long days)", "description": "Returns a copy of this ZonedDateTime with the specified number of days added.\n \n This operates on the local time-line,\n adding days to the local date-time.\n This is then converted back to a ZonedDateTime, using the zone ID\n to obtain the offset.\n \n When converting back to ZonedDateTime, if the local date-time is in an overlap,\n then the offset will be retained if possible, otherwise the earlier offset will be used.\n If in a gap, the local date-time will be adjusted forward by the length of the gap.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "plusHours", "method_sig": "public ZonedDateTime plusHours (long hours)", "description": "Returns a copy of this ZonedDateTime with the specified number of hours added.\n \n This operates on the instant time-line, such that adding one hour will\n always be a duration of one hour later.\n This may cause the local date-time to change by an amount other than one hour.\n Note that this is a different approach to that used by days, months and years,\n thus adding one day is not the same as adding 24 hours.\n \n For example, consider a time-zone, such as 'Europe/Paris', where the\n Autumn DST cutover means that the local times 02:00 to 02:59 occur twice\n changing from offset +02:00 in summer to +01:00 in winter.\n \nAdding one hour to 01:30+02:00 will result in 02:30+02:00\n     (both in summer time)\n Adding one hour to 02:30+02:00 will result in 02:30+01:00\n     (moving from summer to winter time)\n Adding one hour to 02:30+01:00 will result in 03:30+01:00\n     (both in winter time)\n Adding three hours to 01:30+02:00 will result in 03:30+01:00\n     (moving from summer to winter time)\n \n\n This instance is immutable and unaffected by this method call."}, {"method_name": "plusMinutes", "method_sig": "public ZonedDateTime plusMinutes (long minutes)", "description": "Returns a copy of this ZonedDateTime with the specified number of minutes added.\n \n This operates on the instant time-line, such that adding one minute will\n always be a duration of one minute later.\n This may cause the local date-time to change by an amount other than one minute.\n Note that this is a different approach to that used by days, months and years.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "plusSeconds", "method_sig": "public ZonedDateTime plusSeconds (long seconds)", "description": "Returns a copy of this ZonedDateTime with the specified number of seconds added.\n \n This operates on the instant time-line, such that adding one second will\n always be a duration of one second later.\n This may cause the local date-time to change by an amount other than one second.\n Note that this is a different approach to that used by days, months and years.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "plusNanos", "method_sig": "public ZonedDateTime plusNanos (long nanos)", "description": "Returns a copy of this ZonedDateTime with the specified number of nanoseconds added.\n \n This operates on the instant time-line, such that adding one nano will\n always be a duration of one nano later.\n This may cause the local date-time to change by an amount other than one nano.\n Note that this is a different approach to that used by days, months and years.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "minus", "method_sig": "public ZonedDateTime minus (TemporalAmount amountToSubtract)", "description": "Returns a copy of this date-time with the specified amount subtracted.\n \n This returns a ZonedDateTime, based on this one, with the specified amount subtracted.\n The amount is typically Period or Duration but may be\n any other type implementing the TemporalAmount interface.\n \n The calculation is delegated to the amount object by calling\n TemporalAmount.subtractFrom(Temporal). The amount implementation is free\n to implement the subtraction in any way it wishes, however it typically\n calls back to minus(long, TemporalUnit). Consult the documentation\n of the amount implementation to determine if it can be successfully subtracted.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "minus", "method_sig": "public ZonedDateTime minus (long amountToSubtract,\n                           TemporalUnit unit)", "description": "Returns a copy of this date-time with the specified amount subtracted.\n \n This returns a ZonedDateTime, based on this one, with the amount\n in terms of the unit subtracted. If it is not possible to subtract the amount,\n because the unit is not supported or for some other reason, an exception is thrown.\n \n The calculation for date and time units differ.\n \n Date units operate on the local time-line.\n The period is first subtracted from the local date-time, then converted back\n to a zoned date-time using the zone ID.\n The conversion uses ofLocal(LocalDateTime, ZoneId, ZoneOffset)\n with the offset before the subtraction.\n \n Time units operate on the instant time-line.\n The period is first subtracted from the local date-time, then converted back to\n a zoned date-time using the zone ID.\n The conversion uses ofInstant(LocalDateTime, ZoneOffset, ZoneId)\n with the offset before the subtraction.\n \n This method is equivalent to plus(long, TemporalUnit) with the amount negated.\n See that method for a full description of how addition, and thus subtraction, works.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "minusYears", "method_sig": "public ZonedDateTime minusYears (long years)", "description": "Returns a copy of this ZonedDateTime with the specified number of years subtracted.\n \n This operates on the local time-line,\n subtracting years to the local date-time.\n This is then converted back to a ZonedDateTime, using the zone ID\n to obtain the offset.\n \n When converting back to ZonedDateTime, if the local date-time is in an overlap,\n then the offset will be retained if possible, otherwise the earlier offset will be used.\n If in a gap, the local date-time will be adjusted forward by the length of the gap.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "minusMonths", "method_sig": "public ZonedDateTime minusMonths (long months)", "description": "Returns a copy of this ZonedDateTime with the specified number of months subtracted.\n \n This operates on the local time-line,\n subtracting months to the local date-time.\n This is then converted back to a ZonedDateTime, using the zone ID\n to obtain the offset.\n \n When converting back to ZonedDateTime, if the local date-time is in an overlap,\n then the offset will be retained if possible, otherwise the earlier offset will be used.\n If in a gap, the local date-time will be adjusted forward by the length of the gap.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "minusWeeks", "method_sig": "public ZonedDateTime minusWeeks (long weeks)", "description": "Returns a copy of this ZonedDateTime with the specified number of weeks subtracted.\n \n This operates on the local time-line,\n subtracting weeks to the local date-time.\n This is then converted back to a ZonedDateTime, using the zone ID\n to obtain the offset.\n \n When converting back to ZonedDateTime, if the local date-time is in an overlap,\n then the offset will be retained if possible, otherwise the earlier offset will be used.\n If in a gap, the local date-time will be adjusted forward by the length of the gap.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "minusDays", "method_sig": "public ZonedDateTime minusDays (long days)", "description": "Returns a copy of this ZonedDateTime with the specified number of days subtracted.\n \n This operates on the local time-line,\n subtracting days to the local date-time.\n This is then converted back to a ZonedDateTime, using the zone ID\n to obtain the offset.\n \n When converting back to ZonedDateTime, if the local date-time is in an overlap,\n then the offset will be retained if possible, otherwise the earlier offset will be used.\n If in a gap, the local date-time will be adjusted forward by the length of the gap.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "minusHours", "method_sig": "public ZonedDateTime minusHours (long hours)", "description": "Returns a copy of this ZonedDateTime with the specified number of hours subtracted.\n \n This operates on the instant time-line, such that subtracting one hour will\n always be a duration of one hour earlier.\n This may cause the local date-time to change by an amount other than one hour.\n Note that this is a different approach to that used by days, months and years,\n thus subtracting one day is not the same as adding 24 hours.\n \n For example, consider a time-zone, such as 'Europe/Paris', where the\n Autumn DST cutover means that the local times 02:00 to 02:59 occur twice\n changing from offset +02:00 in summer to +01:00 in winter.\n \nSubtracting one hour from 03:30+01:00 will result in 02:30+01:00\n     (both in winter time)\n Subtracting one hour from 02:30+01:00 will result in 02:30+02:00\n     (moving from winter to summer time)\n Subtracting one hour from 02:30+02:00 will result in 01:30+02:00\n     (both in summer time)\n Subtracting three hours from 03:30+01:00 will result in 01:30+02:00\n     (moving from winter to summer time)\n \n\n This instance is immutable and unaffected by this method call."}, {"method_name": "minusMinutes", "method_sig": "public ZonedDateTime minusMinutes (long minutes)", "description": "Returns a copy of this ZonedDateTime with the specified number of minutes subtracted.\n \n This operates on the instant time-line, such that subtracting one minute will\n always be a duration of one minute earlier.\n This may cause the local date-time to change by an amount other than one minute.\n Note that this is a different approach to that used by days, months and years.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "minusSeconds", "method_sig": "public ZonedDateTime minusSeconds (long seconds)", "description": "Returns a copy of this ZonedDateTime with the specified number of seconds subtracted.\n \n This operates on the instant time-line, such that subtracting one second will\n always be a duration of one second earlier.\n This may cause the local date-time to change by an amount other than one second.\n Note that this is a different approach to that used by days, months and years.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "minusNanos", "method_sig": "public ZonedDateTime minusNanos (long nanos)", "description": "Returns a copy of this ZonedDateTime with the specified number of nanoseconds subtracted.\n \n This operates on the instant time-line, such that subtracting one nano will\n always be a duration of one nano earlier.\n This may cause the local date-time to change by an amount other than one nano.\n Note that this is a different approach to that used by days, months and years.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "query", "method_sig": "public <R> R query (TemporalQuery<R> query)", "description": "Queries this date-time using the specified query.\n \n This queries this date-time using the specified query strategy object.\n The TemporalQuery object defines the logic to be used to\n obtain the result. Read the documentation of the query to understand\n what the result of this method will be.\n \n The result of this method is obtained by invoking the\n TemporalQuery.queryFrom(TemporalAccessor) method on the\n specified query passing this as the argument."}, {"method_name": "until", "method_sig": "public long until (Temporal endExclusive,\n                  TemporalUnit unit)", "description": "Calculates the amount of time until another date-time in terms of the specified unit.\n \n This calculates the amount of time between two ZonedDateTime\n objects in terms of a single TemporalUnit.\n The start and end points are this and the specified date-time.\n The result will be negative if the end is before the start.\n For example, the amount in days between two date-times can be calculated\n using startDateTime.until(endDateTime, DAYS).\n \n The Temporal passed to this method is converted to a\n ZonedDateTime using from(TemporalAccessor).\n If the time-zone differs between the two zoned date-times, the specified\n end date-time is normalized to have the same zone as this date-time.\n \n The calculation returns a whole number, representing the number of\n complete units between the two date-times.\n For example, the amount in months between 2012-06-15T00:00Z and 2012-08-14T23:59Z\n will only be one month as it is one minute short of two months.\n \n There are two equivalent ways of using this method.\n The first is to invoke this method.\n The second is to use TemporalUnit.between(Temporal, Temporal):\n \n   // these two lines are equivalent\n   amount = start.until(end, MONTHS);\n   amount = MONTHS.between(start, end);\n \n The choice should be made based on which makes the code more readable.\n \n The calculation is implemented in this method for ChronoUnit.\n The units NANOS, MICROS, MILLIS, SECONDS,\n MINUTES, HOURS and HALF_DAYS, DAYS,\n WEEKS, MONTHS, YEARS, DECADES,\n CENTURIES, MILLENNIA and ERAS are supported.\n Other ChronoUnit values will throw an exception.\n \n The calculation for date and time units differ.\n \n Date units operate on the local time-line, using the local date-time.\n For example, the period from noon on day 1 to noon the following day\n in days will always be counted as exactly one day, irrespective of whether\n there was a daylight savings change or not.\n \n Time units operate on the instant time-line.\n The calculation effectively converts both zoned date-times to instants\n and then calculates the period between the instants.\n For example, the period from noon on day 1 to noon the following day\n in hours may be 23, 24 or 25 hours (or some other amount) depending on\n whether there was a daylight savings change or not.\n \n If the unit is not a ChronoUnit, then the result of this method\n is obtained by invoking TemporalUnit.between(Temporal, Temporal)\n passing this as the first argument and the converted input temporal\n as the second argument.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "format", "method_sig": "public String format (DateTimeFormatter formatter)", "description": "Formats this date-time using the specified formatter.\n \n This date-time will be passed to the formatter to produce a string."}, {"method_name": "toOffsetDateTime", "method_sig": "public OffsetDateTime toOffsetDateTime()", "description": "Converts this date-time to an OffsetDateTime.\n \n This creates an offset date-time using the local date-time and offset.\n The zone ID is ignored."}, {"method_name": "equals", "method_sig": "public boolean equals (Object obj)", "description": "Checks if this date-time is equal to another date-time.\n \n The comparison is based on the offset date-time and the zone.\n Only objects of type ZonedDateTime are compared, other types return false."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "A hash code for this date-time."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Outputs this date-time as a String, such as\n 2007-12-03T10:15:30+01:00[Europe/Paris].\n \n The format consists of the LocalDateTime followed by the ZoneOffset.\n If the ZoneId is not the same as the offset, then the ID is output.\n The output is compatible with ISO-8601 if the offset and ID are the same."}]}