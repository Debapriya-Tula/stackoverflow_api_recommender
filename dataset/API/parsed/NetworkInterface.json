{"name": "Class NetworkInterface", "module": "java.base", "package": "java.net", "text": "This class represents a Network Interface made up of a name,\n and a list of IP addresses assigned to this interface.\n It is used to identify the local interface on which a multicast group\n is joined.\n\n Interfaces are normally known by names such as \"le0\".", "codes": ["public final class NetworkInterface\nextends Object"], "fields": [], "methods": [{"method_name": "getName", "method_sig": "public String getName()", "description": "Get the name of this network interface."}, {"method_name": "getInetAddresses", "method_sig": "public Enumeration<InetAddress> getInetAddresses()", "description": "Get an Enumeration with all or a subset of the InetAddresses bound to\n this network interface.\n \n If there is a security manager, its checkConnect\n method is called for each InetAddress. Only InetAddresses where\n the checkConnect doesn't throw a SecurityException\n will be returned in the Enumeration. However, if the caller has the\n NetPermission(\"getNetworkInformation\") permission, then all\n InetAddresses are returned."}, {"method_name": "inetAddresses", "method_sig": "public Stream<InetAddress> inetAddresses()", "description": "Get a Stream of all or a subset of the InetAddresses bound to this\n network interface.\n \n If there is a security manager, its checkConnect\n method is called for each InetAddress. Only InetAddresses where\n the checkConnect doesn't throw a SecurityException will be\n returned in the Stream. However, if the caller has the\n NetPermission(\"getNetworkInformation\") permission, then all\n InetAddresses are returned."}, {"method_name": "getInterfaceAddresses", "method_sig": "public List<InterfaceAddress> getInterfaceAddresses()", "description": "Get a List of all or a subset of the InterfaceAddresses\n of this network interface.\n \n If there is a security manager, its checkConnect\n method is called with the InetAddress for each InterfaceAddress.\n Only InterfaceAddresses where the checkConnect doesn't throw\n a SecurityException will be returned in the List."}, {"method_name": "getSubInterfaces", "method_sig": "public Enumeration<NetworkInterface> getSubInterfaces()", "description": "Get an Enumeration with all the subinterfaces (also known as virtual\n interfaces) attached to this network interface.\n \n For instance eth0:1 will be a subinterface to eth0."}, {"method_name": "subInterfaces", "method_sig": "public Stream<NetworkInterface> subInterfaces()", "description": "Get a Stream of all subinterfaces (also known as virtual\n interfaces) attached to this network interface."}, {"method_name": "getParent", "method_sig": "public NetworkInterface getParent()", "description": "Returns the parent NetworkInterface of this interface if this is\n a subinterface, or null if it is a physical\n (non virtual) interface or has no parent."}, {"method_name": "getIndex", "method_sig": "public int getIndex()", "description": "Returns the index of this network interface. The index is an integer greater\n or equal to zero, or -1 for unknown. This is a system specific value\n and interfaces with the same name can have different indexes on different\n machines."}, {"method_name": "getDisplayName", "method_sig": "public String getDisplayName()", "description": "Get the display name of this network interface.\n A display name is a human readable String describing the network\n device."}, {"method_name": "getByName", "method_sig": "public static NetworkInterface getByName (String name)\n                                  throws SocketException", "description": "Searches for the network interface with the specified name."}, {"method_name": "getByIndex", "method_sig": "public static NetworkInterface getByIndex (int index)\n                                   throws SocketException", "description": "Get a network interface given its index."}, {"method_name": "getByInetAddress", "method_sig": "public static NetworkInterface getByInetAddress (InetAddress addr)\n                                         throws SocketException", "description": "Convenience method to search for a network interface that\n has the specified Internet Protocol (IP) address bound to\n it.\n \n If the specified IP address is bound to multiple network\n interfaces it is not defined which network interface is\n returned."}, {"method_name": "getNetworkInterfaces", "method_sig": "public static Enumeration<NetworkInterface> getNetworkInterfaces()\n                                                          throws SocketException", "description": "Returns an Enumeration of all the interfaces on this machine. The\n Enumeration contains at least one element, possibly representing\n a loopback interface that only supports communication between entities on\n this machine."}, {"method_name": "networkInterfaces", "method_sig": "public static Stream<NetworkInterface> networkInterfaces()\n                                                  throws SocketException", "description": "Returns a Stream of all the interfaces on this machine.  The\n Stream contains at least one interface, possibly representing a\n loopback interface that only supports communication between entities on\n this machine."}, {"method_name": "isUp", "method_sig": "public boolean isUp()\n             throws SocketException", "description": "Returns whether a network interface is up and running."}, {"method_name": "isLoopback", "method_sig": "public boolean isLoopback()\n                   throws SocketException", "description": "Returns whether a network interface is a loopback interface."}, {"method_name": "isPointToPoint", "method_sig": "public boolean isPointToPoint()\n                       throws SocketException", "description": "Returns whether a network interface is a point to point interface.\n A typical point to point interface would be a PPP connection through\n a modem."}, {"method_name": "supportsMulticast", "method_sig": "public boolean supportsMulticast()\n                          throws SocketException", "description": "Returns whether a network interface supports multicasting or not."}, {"method_name": "getHardwareAddress", "method_sig": "public byte[] getHardwareAddress()\n                          throws SocketException", "description": "Returns the hardware address (usually MAC) of the interface if it\n has one and if it can be accessed given the current privileges.\n If a security manager is set, then the caller must have\n the permission NetPermission(\"getNetworkInformation\")."}, {"method_name": "getMTU", "method_sig": "public int getMTU()\n           throws SocketException", "description": "Returns the Maximum Transmission Unit (MTU) of this interface."}, {"method_name": "isVirtual", "method_sig": "public boolean isVirtual()", "description": "Returns whether this interface is a virtual interface (also called\n subinterface).\n Virtual interfaces are, on some systems, interfaces created as a child\n of a physical interface and given different settings (like address or\n MTU). Usually the name of the interface will the name of the parent\n followed by a colon (:) and a number identifying the child since there\n can be several virtual interfaces attached to a single physical\n interface."}, {"method_name": "equals", "method_sig": "public boolean equals (Object obj)", "description": "Compares this object against the specified object.\n The result is true if and only if the argument is\n not null and it represents the same NetworkInterface\n as this object.\n \n Two instances of NetworkInterface represent the same\n NetworkInterface if both name and addrs are the same for both."}]}