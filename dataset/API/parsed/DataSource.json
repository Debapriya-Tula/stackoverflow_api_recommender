{"name": "Interface DataSource", "module": "java.sql", "package": "javax.sql", "text": "A factory for connections to the physical data source that this\n DataSource object represents.  An alternative to the\n DriverManager facility, a DataSource object\n is the preferred means of getting a connection. An object that implements\n the DataSource interface will typically be\n registered with a naming service based on the\n Java\u2122 Naming and Directory (JNDI) API.\n \n The DataSource interface is implemented by a driver vendor.\n There are three types of implementations:\n \nBasic implementation -- produces a standard Connection\n       object\n   Connection pooling implementation -- produces a Connection\n       object that will automatically participate in connection pooling.  This\n       implementation works with a middle-tier connection pooling manager.\n   Distributed transaction implementation -- produces a\n       Connection object that may be used for distributed\n       transactions and almost always participates in connection pooling.\n       This implementation works with a middle-tier\n       transaction manager and almost always with a connection\n       pooling manager.\n \n\n A DataSource object has properties that can be modified\n when necessary.  For example, if the data source is moved to a different\n server, the property for the server can be changed.  The benefit is that\n because the data source's properties can be changed, any code accessing\n that data source does not need to be changed.\n \n A driver that is accessed via a DataSource object does not\n register itself with the DriverManager.  Rather, a\n DataSource object is retrieved through a lookup operation\n and then used to create a Connection object.  With a basic\n implementation, the connection obtained through a DataSource\n object is identical to a connection obtained through the\n DriverManager facility.\n \n An implementation of DataSource must include a public no-arg\n constructor.", "codes": ["public interface DataSource\nextends CommonDataSource, Wrapper"], "fields": [], "methods": [{"method_name": "getConnection", "method_sig": "Connection getConnection()\n                  throws SQLException", "description": "Attempts to establish a connection with the data source that\n this DataSource object represents."}, {"method_name": "getConnection", "method_sig": "Connection getConnection (String username,\n                         String password)\n                  throws SQLException", "description": "Attempts to establish a connection with the data source that\n this DataSource object represents."}, {"method_name": "getLogWriter", "method_sig": "PrintWriter getLogWriter()\n                  throws SQLException", "description": "Retrieves the log writer for this DataSource\n object.\n\n The log writer is a character output stream to which all logging\n and tracing messages for this data source will be\n printed.  This includes messages printed by the methods of this\n object, messages printed by methods of other objects manufactured\n by this object, and so on.  Messages printed to a data source\n specific log writer are not printed to the log writer associated\n with the java.sql.DriverManager class.  When a\n DataSource object is\n created, the log writer is initially null; in other words, the\n default is for logging to be disabled."}, {"method_name": "setLogWriter", "method_sig": "void setLogWriter (PrintWriter out)\n           throws SQLException", "description": "Sets the log writer for this DataSource\n object to the given java.io.PrintWriter object.\n\n The log writer is a character output stream to which all logging\n and tracing messages for this data source will be\n printed.  This includes messages printed by the methods of this\n object, messages printed by methods of other objects manufactured\n by this object, and so on.  Messages printed to a data source-\n specific log writer are not printed to the log writer associated\n with the java.sql.DriverManager class. When a\n DataSource object is created the log writer is\n initially null; in other words, the default is for logging to be\n disabled."}, {"method_name": "setLoginTimeout", "method_sig": "void setLoginTimeout (int seconds)\n              throws SQLException", "description": "Sets the maximum time in seconds that this data source will wait\n while attempting to connect to a database.  A value of zero\n specifies that the timeout is the default system timeout\n if there is one; otherwise, it specifies that there is no timeout.\n When a DataSource object is created, the login timeout is\n initially zero."}, {"method_name": "getLoginTimeout", "method_sig": "int getLoginTimeout()\n             throws SQLException", "description": "Gets the maximum time in seconds that this data source can wait\n while attempting to connect to a database.  A value of zero\n means that the timeout is the default system timeout\n if there is one; otherwise, it means that there is no timeout.\n When a DataSource object is created, the login timeout is\n initially zero."}, {"method_name": "createConnectionBuilder", "method_sig": "default ConnectionBuilder createConnectionBuilder()\n                                           throws SQLException", "description": "Create a new ConnectionBuilder instance"}]}