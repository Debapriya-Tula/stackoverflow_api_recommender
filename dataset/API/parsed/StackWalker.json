{"name": "Class StackWalker", "module": "java.base", "package": "java.lang", "text": "A stack walker.\n\n  The walk method opens a sequential stream\n of StackFrames for the current thread and then applies\n the given function to walk the StackFrame stream.\n The stream reports stack frame elements in order, from the top most frame\n that represents the execution point at which the stack was generated to\n the bottom most frame.\n The StackFrame stream is closed when the walk method returns.\n If an attempt is made to reuse the closed stream,\n IllegalStateException will be thrown.\n\n  The stack walking options of a\n StackWalker determines the information of\n StackFrame objects to be returned.\n By default, stack frames of the reflection API and implementation\n classes are hidden\n and StackFrames have the class name and method name\n available but not the Class reference.\n\n  StackWalker is thread-safe. Multiple threads can share\n a single StackWalker object to traverse its own stack.\n A permission check is performed when a StackWalker is created,\n according to the options it requests.\n No further permission check is done at stack walking time.", "codes": ["public final class StackWalker\nextends Object"], "fields": [], "methods": [{"method_name": "getInstance", "method_sig": "public static StackWalker getInstance()", "description": "Returns a StackWalker instance.\n\n  This StackWalker is configured to skip all\n hidden frames and\n no class reference is retained."}, {"method_name": "getInstance", "method_sig": "public static StackWalker getInstance (StackWalker.Option option)", "description": "Returns a StackWalker instance with the given option specifying\n the stack frame information it can access.\n\n \n If a security manager is present and the given option is\n Option.RETAIN_CLASS_REFERENCE,\n it calls its checkPermission\n method for RuntimePermission(\"getStackWalkerWithClassReference\")."}, {"method_name": "getInstance", "method_sig": "public static StackWalker getInstance (Set<StackWalker.Option> options)", "description": "Returns a StackWalker instance with the given options specifying\n the stack frame information it can access.  If the given options\n is empty, this StackWalker is configured to skip all\n hidden frames and no\n class reference is retained.\n\n \n If a security manager is present and the given options contains\n Option.RETAIN_CLASS_REFERENCE,\n it calls its checkPermission\n method for RuntimePermission(\"getStackWalkerWithClassReference\")."}, {"method_name": "getInstance", "method_sig": "public static StackWalker getInstance (Set<StackWalker.Option> options,\n                                      int estimateDepth)", "description": "Returns a StackWalker instance with the given options specifying\n the stack frame information it can access. If the given options\n is empty, this StackWalker is configured to skip all\n hidden frames and no\n class reference is retained.\n\n \n If a security manager is present and the given options contains\n Option.RETAIN_CLASS_REFERENCE,\n it calls its checkPermission\n method for RuntimePermission(\"getStackWalkerWithClassReference\").\n\n \n The estimateDepth specifies the estimate number of stack frames\n this StackWalker will traverse that the StackWalker could\n use as a hint for the buffer size."}, {"method_name": "walk", "method_sig": "public <T> T walk (Function<? super Stream<StackWalker.StackFrame>, ? extends T> function)", "description": "Applies the given function to the stream of StackFrames\n for the current thread, traversing from the top frame of the stack,\n which is the method calling this walk method.\n\n The StackFrame stream will be closed when\n this method returns.  When a closed Stream<StackFrame> object\n is reused, IllegalStateException will be thrown."}, {"method_name": "forEach", "method_sig": "public void forEach (Consumer<? super StackWalker.StackFrame> action)", "description": "Performs the given action on each element of StackFrame stream\n of the current thread, traversing from the top frame of the stack,\n which is the method calling this forEach method.\n\n  This method is equivalent to calling\n \nwalk(s -> { s.forEach(action); return null; });\n"}, {"method_name": "getCallerClass", "method_sig": "public Class<?> getCallerClass()", "description": "Gets the Class object of the caller who invoked the method\n that invoked getCallerClass.\n\n  This method filters reflection\n frames, MethodHandle, and\n hidden frames regardless of the\n SHOW_REFLECT_FRAMES\n and SHOW_HIDDEN_FRAMES options\n this StackWalker has been configured with.\n\n  This method should be called when a caller frame is present.  If\n it is called from the bottom most frame on the stack,\n IllegalCallerException will be thrown.\n\n  This method throws UnsupportedOperationException\n if this StackWalker is not configured with the\n RETAIN_CLASS_REFERENCE option."}]}