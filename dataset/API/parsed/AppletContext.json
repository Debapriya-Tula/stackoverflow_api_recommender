{"name": "Interface AppletContext", "module": "java.desktop", "package": "java.applet", "text": "This interface corresponds to an applet's environment: the\n document containing the applet and the other applets in the same\n document.\n \n The methods in this interface can be used by an applet to obtain\n information about its environment.", "codes": ["@Deprecated(since=\"9\")\npublic interface AppletContext"], "fields": [], "methods": [{"method_name": "getAudioClip", "method_sig": "AudioClip getAudioClip (URL url)", "description": "Creates an audio clip."}, {"method_name": "getImage", "method_sig": "Image getImage (URL url)", "description": "Returns an Image object that can then be painted on\n the screen. The url argument that is\n passed as an argument must specify an absolute URL.\n \n This method always returns immediately, whether or not the image\n exists. When the applet attempts to draw the image on the screen,\n the data will be loaded. The graphics primitives that draw the\n image will incrementally paint on the screen."}, {"method_name": "getApplet", "method_sig": "Applet getApplet (String name)", "description": "Finds and returns the applet in the document represented by this\n applet context with the given name. The name can be set in the\n HTML tag by setting the name attribute."}, {"method_name": "getApplets", "method_sig": "Enumeration<Applet> getApplets()", "description": "Finds all the applets in the document represented by this applet\n context."}, {"method_name": "showDocument", "method_sig": "void showDocument (URL url)", "description": "Requests that the browser or applet viewer show the Web page\n indicated by the url argument. The browser or\n applet viewer determines which window or frame to display the\n Web page. This method may be ignored by applet contexts that\n are not browsers."}, {"method_name": "showDocument", "method_sig": "void showDocument (URL url,\n                  String target)", "description": "Requests that the browser or applet viewer show the Web page\n indicated by the url argument. The\n target argument indicates in which HTML frame the\n document is to be displayed.\n The target argument is interpreted as follows:\n\n \nTarget arguments and their descriptions\n\n\nTarget Argument\n     Description\n \n\n\n\"_self\"\nShow in the window and frame that contain the applet.\n   \n\"_parent\"\nShow in the applet's parent frame. If the applet's frame has no\n     parent frame, acts the same as \"_self\".\n   \n\"_top\"\nShow in the top-level frame of the applet's window. If the\n     applet's frame is the top-level frame, acts the same as \"_self\".\n   \n\"_blank\"\nShow in a new, unnamed top-level window.\n   \nname\nShow in the frame or window named name. If a target named\n     name does not already exist, a new top-level window with the\n     specified name is created, and the document is shown there.\n \n\n\n An applet viewer or browser is free to ignore showDocument."}, {"method_name": "showStatus", "method_sig": "void showStatus (String status)", "description": "Requests that the argument string be displayed in the\n \"status window\". Many browsers and applet viewers\n provide such a window, where the application can inform users of\n its current state."}, {"method_name": "setStream", "method_sig": "void setStream (String key,\n               InputStream stream)\n        throws IOException", "description": "Associates the specified stream with the specified key in this\n applet context. If the applet context previously contained a mapping\n for this key, the old value is replaced.\n \n For security reasons, mapping of streams and keys exists for each\n codebase. In other words, applet from one codebase cannot access\n the streams created by an applet from a different codebase"}, {"method_name": "getStream", "method_sig": "InputStream getStream (String key)", "description": "Returns the stream to which specified key is associated within this\n applet context. Returns null if the applet context contains\n no stream for this key.\n \n For security reasons, mapping of streams and keys exists for each\n codebase. In other words, applet from one codebase cannot access\n the streams created by an applet from a different codebase"}, {"method_name": "getStreamKeys", "method_sig": "Iterator<String> getStreamKeys()", "description": "Finds all the keys of the streams in this applet context.\n \n For security reasons, mapping of streams and keys exists for each\n codebase. In other words, applet from one codebase cannot access\n the streams created by an applet from a different codebase"}]}