{"name": "Interface Doc", "module": "java.desktop", "package": "javax.print", "text": "Interface Doc specifies the interface for an object that supplies one\n piece of print data for a Print Job. \"Doc\" is a short, easy-to-pronounce term\n that means \"a piece of print data.\" The client passes to the Print Job an\n object that implements interface Doc, and the Print Job calls methods\n on that object to obtain the print data. The Doc interface lets a\n Print Job:\n \nDetermine the format, or \"doc flavor\" (class\n   DocFlavor), in which the print data is available. A doc\n   flavor designates the print data format (a MIME type) and the\n   representation class of the object from which the print data comes.\n   Obtain the print data representation object, which is an instance of\n   the doc flavor's representation class. The Print Job can then obtain the\n   actual print data from the representation object.\n   Obtain the printing attributes that specify additional characteristics\n   of the doc or that specify processing instructions to be applied to the\n   doc. Printing attributes are defined in package\n   javax.print.attribute. The doc returns its printing attributes\n   stored in an javax.print.attribute.DocAttributeSet.\n \n Each method in an implementation of interface Doc is permitted always\n to return the same object each time the method is called. This has\n implications for a Print Job or other caller of a doc object whose print data\n representation object \"consumes\" the print data as the caller obtains the\n print data, such as a print data representation object which is a stream.\n Once the Print Job has called getPrintData() and\n obtained the stream, any further calls to getPrintData() will return the same stream object upon which reading may\n already be in progress, not a new stream object that will re-read the\n print data from the beginning. Specifying a doc object to behave this way\n simplifies the implementation of doc objects, and is justified on the grounds\n that a particular doc is intended to convey print data only to one Print Job,\n not to several different Print Jobs. (To convey the same print data to\n several different Print Jobs, you have to create several different doc\n objects on top of the same print data source.)\n \n Interface Doc affords considerable implementation flexibility. The\n print data might already be in existence when the doc object is constructed.\n In this case the objects returned by the doc's methods can be supplied to the\n doc's constructor, be stored in the doc ahead of time, and simply be returned\n when called for. Alternatively, the print data might not exist yet when the\n doc object is constructed. In this case the doc object might provide a \"lazy\"\n implementation that generates the print data representation object (and/or\n the print data) only when the Print Job calls for it (when the Print Job\n calls the getPrintData() method).\n \n There is no restriction on the number of client threads that may be\n simultaneously accessing the same doc. Therefore, all implementations of\n interface Doc must be designed to be multiple thread safe.\n \n However there can only be one consumer of the print data obtained from a\n Doc.\n \n If print data is obtained from the client as a stream, by calling\n Doc's getReaderForText() or getStreamForBytes()\n methods, or because the print data source is already an InputStream\n or Reader, then the print service should always close these streams\n for the client on all job completion conditions. With the following caveat.\n If the print data is itself a stream, the service will always close it. If\n the print data is otherwise something that can be requested as a stream, the\n service will only close the stream if it has obtained the stream before\n terminating. That is, just because a print service might request data as a\n stream does not mean that it will, with the implications that Doc\n implementors which rely on the service to close them should create such\n streams only in response to a request from the service.", "codes": ["public interface Doc"], "fields": [], "methods": [{"method_name": "getDocFlavor", "method_sig": "DocFlavor getDocFlavor()", "description": "Determines the doc flavor in which this doc object will supply its piece\n of print data."}, {"method_name": "getPrintData", "method_sig": "Object getPrintData()\n             throws IOException", "description": "Obtains the print data representation object that contains this doc\n object's piece of print data in the format corresponding to the supported\n doc flavor. The getPrintData() method returns an instance of the\n representation class whose name is given bygetDocFlavor().getRepresentationClassName(), and the return value can be cast from\n class Object to that representation class."}, {"method_name": "getAttributes", "method_sig": "DocAttributeSet getAttributes()", "description": "Obtains the set of printing attributes for this doc object. If the\n returned attribute set includes an instance of a particular attribute\n X, the printer must use that attribute value for this doc,\n overriding any value of attribute X in the job's attribute set. If\n the returned attribute set does not include an instance of a particular\n attribute X or if null is returned, the printer must\n consult the job's attribute set to obtain the value for attribute\n X, and if not found there, the printer must use an\n implementation-dependent default value. The returned attribute set is\n unmodifiable."}, {"method_name": "getReaderForText", "method_sig": "Reader getReaderForText()\n                 throws IOException", "description": "Obtains a reader for extracting character print data from this doc. The\n Doc implementation is required to support this method if the\n DocFlavor has one of the following print data representation\n classes, and return null otherwise:\n \nchar[]\n   java.lang.String\n   java.io.Reader\n \n The doc's print data representation object is used to construct and\n return a Reader for reading the print data as a stream of\n characters from the print data representation object. However, if the\n print data representation object is itself a Reader, then the\n print data representation object is simply returned."}, {"method_name": "getStreamForBytes", "method_sig": "InputStream getStreamForBytes()\n                       throws IOException", "description": "Obtains an input stream for extracting byte print data from this doc. The\n Doc implementation is required to support this method if the\n DocFlavor has one of the following print data representation\n classes, and return null otherwise:\n \nbyte[]\n   java.io.InputStream\n \n This doc's print data representation object is obtained, then an input\n stream for reading the print data from the print data representation\n object as a stream of bytes is created and returned. However, if the\n print data representation object is itself an input stream, then the\n print data representation object is simply returned."}]}