{"name": "Class URL", "module": "java.base", "package": "java.net", "text": "Class URL represents a Uniform Resource\n Locator, a pointer to a \"resource\" on the World\n Wide Web. A resource can be something as simple as a file or a\n directory, or it can be a reference to a more complicated object,\n such as a query to a database or to a search engine. More\n information on the types of URLs and their formats can be found at:\n \nTypes of URL\n\n In general, a URL can be broken into several parts. Consider the\n following example:\n \n     http://www.example.com/docs/resource1.html\n \n\n The URL above indicates that the protocol to use is\n http (HyperText Transfer Protocol) and that the\n information resides on a host machine named\n www.example.com. The information on that host\n machine is named /docs/resource1.html. The exact\n meaning of this name on the host machine is both protocol\n dependent and host dependent. The information normally resides in\n a file, but it could be generated on the fly. This component of\n the URL is called the path component.\n \n A URL can optionally specify a \"port\", which is the\n port number to which the TCP connection is made on the remote host\n machine. If the port is not specified, the default port for\n the protocol is used instead. For example, the default port for\n http is 80. An alternative port could be\n specified as:\n \n     http://www.example.com:1080/docs/resource1.html\n \n\n The syntax of URL is defined by  RFC\u00a02396: Uniform\n Resource Identifiers (URI): Generic Syntax, amended by RFC\u00a02732: Format for\n Literal IPv6 Addresses in URLs. The Literal IPv6 address format\n also supports scope_ids. The syntax and usage of scope_ids is described\n here.\n \n A URL may have appended to it a \"fragment\", also known\n as a \"ref\" or a \"reference\". The fragment is indicated by the sharp\n sign character \"#\" followed by more characters. For example,\n \n     http://java.sun.com/index.html#chapter1\n \n\n This fragment is not technically part of the URL. Rather, it\n indicates that after the specified resource is retrieved, the\n application is specifically interested in that part of the\n document that has the tag chapter1 attached to it. The\n meaning of a tag is resource specific.\n \n An application can also specify a \"relative URL\",\n which contains only enough information to reach the resource\n relative to another URL. Relative URLs are frequently used within\n HTML pages. For example, if the contents of the URL:\n \n     http://java.sun.com/index.html\n \n contained within it the relative URL:\n \n     FAQ.html\n \n it would be a shorthand for:\n \n     http://java.sun.com/FAQ.html\n \n\n The relative URL need not specify all the components of a URL. If\n the protocol, host name, or port number is missing, the value is\n inherited from the fully specified URL. The file component must be\n specified. The optional fragment is not inherited.\n \n The URL class does not itself encode or decode any URL components\n according to the escaping mechanism defined in RFC2396. It is the\n responsibility of the caller to encode any fields, which need to be\n escaped prior to calling URL, and also to decode any escaped fields,\n that are returned from URL. Furthermore, because URL has no knowledge\n of URL escaping, it does not recognise equivalence between the encoded\n or decoded form of the same URL. For example, the two URLs:\n    http://foo.com/hello world/ and http://foo.com/hello%20world\n would be considered not equal to each other.\n \n Note, the URI class does perform escaping of its\n component fields in certain circumstances. The recommended way\n to manage the encoding and decoding of URLs is to use URI,\n and to convert between these two classes using toURI() and\n URI.toURL().\n \n The URLEncoder and URLDecoder classes can also be\n used, but only for HTML form encoding, which is not the same\n as the encoding scheme defined in RFC2396.", "codes": ["public final class URL\nextends Object\nimplements Serializable"], "fields": [], "methods": [{"method_name": "getQuery", "method_sig": "public String getQuery()", "description": "Gets the query part of this URL."}, {"method_name": "getPath", "method_sig": "public String getPath()", "description": "Gets the path part of this URL."}, {"method_name": "getUserInfo", "method_sig": "public String getUserInfo()", "description": "Gets the userInfo part of this URL."}, {"method_name": "getAuthority", "method_sig": "public String getAuthority()", "description": "Gets the authority part of this URL."}, {"method_name": "getPort", "method_sig": "public int getPort()", "description": "Gets the port number of this URL."}, {"method_name": "getDefaultPort", "method_sig": "public int getDefaultPort()", "description": "Gets the default port number of the protocol associated\n with this URL. If the URL scheme or the URLStreamHandler\n for the URL do not define a default port number,\n then -1 is returned."}, {"method_name": "getProtocol", "method_sig": "public String getProtocol()", "description": "Gets the protocol name of this URL."}, {"method_name": "getHost", "method_sig": "public String getHost()", "description": "Gets the host name of this URL, if applicable.\n The format of the host conforms to RFC 2732, i.e. for a\n literal IPv6 address, this method will return the IPv6 address\n enclosed in square brackets ('[' and ']')."}, {"method_name": "getFile", "method_sig": "public String getFile()", "description": "Gets the file name of this URL.\n The returned file portion will be\n the same as getPath(), plus the concatenation of\n the value of getQuery(), if any. If there is\n no query portion, this method and getPath() will\n return identical results."}, {"method_name": "getRef", "method_sig": "public String getRef()", "description": "Gets the anchor (also known as the \"reference\") of this\n URL."}, {"method_name": "equals", "method_sig": "public boolean equals (Object obj)", "description": "Compares this URL for equality with another object.\n\n If the given object is not a URL then this method immediately returns\n false.\n\n Two URL objects are equal if they have the same protocol, reference\n equivalent hosts, have the same port number on the host, and the same\n file and fragment of the file.\n\n Two hosts are considered equivalent if both host names can be resolved\n into the same IP addresses; else if either host name can't be\n resolved, the host names must be equal without regard to case; or both\n host names equal to null.\n\n Since hosts comparison requires name resolution, this operation is a\n blocking operation. \n\n Note: The defined behavior for equals is known to\n be inconsistent with virtual hosting in HTTP."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Creates an integer suitable for hash table indexing.\n\n The hash code is based upon all the URL components relevant for URL\n comparison. As such, this operation is a blocking operation."}, {"method_name": "sameFile", "method_sig": "public boolean sameFile (URL other)", "description": "Compares two URLs, excluding the fragment component.\n\n Returns true if this URL and the\n other argument are equal without taking the\n fragment component into consideration."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Constructs a string representation of this URL. The\n string is created by calling the toExternalForm\n method of the stream protocol handler for this object."}, {"method_name": "toExternalForm", "method_sig": "public String toExternalForm()", "description": "Constructs a string representation of this URL. The\n string is created by calling the toExternalForm\n method of the stream protocol handler for this object."}, {"method_name": "toURI", "method_sig": "public URI toURI()\n          throws URISyntaxException", "description": "Returns a URI equivalent to this URL.\n This method functions in the same way as new URI (this.toString()).\n Note, any URL instance that complies with RFC 2396 can be converted\n to a URI. However, some URLs that are not strictly in compliance\n can not be converted to a URI."}, {"method_name": "openConnection", "method_sig": "public URLConnection openConnection()\n                             throws IOException", "description": "Returns a URLConnection instance that\n represents a connection to the remote object referred to by the\n URL.\n\n A new instance of URLConnection is\n created every time when invoking the\n URLStreamHandler.openConnection(URL) method of the protocol handler for\n this URL.\nIt should be noted that a URLConnection instance does not establish\n the actual network connection on creation. This will happen only when\n calling URLConnection.connect().\nIf for the URL's protocol (such as HTTP or JAR), there\n exists a public, specialized URLConnection subclass belonging\n to one of the following packages or one of their subpackages:\n java.lang, java.io, java.util, java.net, the connection\n returned will be of that subclass. For example, for HTTP an\n HttpURLConnection will be returned, and for JAR a\n JarURLConnection will be returned."}, {"method_name": "openConnection", "method_sig": "public URLConnection openConnection (Proxy proxy)\n                             throws IOException", "description": "Same as openConnection(), except that the connection will be\n made through the specified proxy; Protocol handlers that do not\n support proxing will ignore the proxy parameter and make a\n normal connection.\n\n Invoking this method preempts the system's default\n ProxySelector settings."}, {"method_name": "openStream", "method_sig": "public final InputStream openStream()\n                             throws IOException", "description": "Opens a connection to this URL and returns an\n InputStream for reading from that connection. This\n method is a shorthand for:\n \n     openConnection().getInputStream()\n "}, {"method_name": "getContent", "method_sig": "public final Object getContent()\n                        throws IOException", "description": "Gets the contents of this URL. This method is a shorthand for:\n \n     openConnection().getContent()\n "}, {"method_name": "getContent", "method_sig": "public final Object getContent (Class<?>[] classes)\n                        throws IOException", "description": "Gets the contents of this URL. This method is a shorthand for:\n \n     openConnection().getContent(classes)\n "}, {"method_name": "setURLStreamHandlerFactory", "method_sig": "public static void setURLStreamHandlerFactory (URLStreamHandlerFactory fac)", "description": "Sets an application's URLStreamHandlerFactory.\n This method can be called at most once in a given Java Virtual\n Machine.\n\n The URLStreamHandlerFactory instance is used to\nconstruct a stream protocol handler from a protocol name.\n\n  If there is a security manager, this method first calls\n the security manager's checkSetFactory method\n to ensure the operation is allowed.\n This could result in a SecurityException."}]}