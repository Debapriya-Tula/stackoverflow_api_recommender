{"name": "Class DropTargetDragEvent", "module": "java.desktop", "package": "java.awt.dnd", "text": "The DropTargetDragEvent is delivered to a\n DropTargetListener via its\n dragEnter() and dragOver() methods.\n \n The DropTargetDragEvent reports the source drop actions\n and the user drop action that reflect the current state of\n the drag operation.\n \nSource drop actions is a bitwise mask of DnDConstants\n that represents the set of drop actions supported by the drag source for\n this drag operation.\n \nUser drop action depends on the drop actions supported by the drag\n source and the drop action selected by the user. The user can select a drop\n action by pressing modifier keys during the drag operation:\n \n   Ctrl + Shift -> ACTION_LINK\n   Ctrl         -> ACTION_COPY\n   Shift        -> ACTION_MOVE\n \n If the user selects a drop action, the user drop action is one of\n DnDConstants that represents the selected drop action if this\n drop action is supported by the drag source or\n DnDConstants.ACTION_NONE if this drop action is not supported\n by the drag source.\n \n If the user doesn't select a drop action, the set of\n DnDConstants that represents the set of drop actions supported\n by the drag source is searched for DnDConstants.ACTION_MOVE,\n then for DnDConstants.ACTION_COPY, then for\n DnDConstants.ACTION_LINK and the user drop action is the\n first constant found. If no constant is found the user drop action\n is DnDConstants.ACTION_NONE.", "codes": ["public class DropTargetDragEvent\nextends DropTargetEvent"], "fields": [], "methods": [{"method_name": "getLocation", "method_sig": "public Point getLocation()", "description": "This method returns a Point\n indicating the Cursor's current\n location within the Component's\n coordinates."}, {"method_name": "getCurrentDataFlavors", "method_sig": "public DataFlavor[] getCurrentDataFlavors()", "description": "This method returns the current DataFlavors from the\n DropTargetContext."}, {"method_name": "getCurrentDataFlavorsAsList", "method_sig": "public List<DataFlavor> getCurrentDataFlavorsAsList()", "description": "This method returns the current DataFlavors\n as a java.util.List"}, {"method_name": "isDataFlavorSupported", "method_sig": "public boolean isDataFlavorSupported (DataFlavor df)", "description": "This method returns a boolean indicating\n if the specified DataFlavor is supported."}, {"method_name": "getSourceActions", "method_sig": "public int getSourceActions()", "description": "This method returns the source drop actions."}, {"method_name": "getDropAction", "method_sig": "public int getDropAction()", "description": "This method returns the user drop action."}, {"method_name": "getTransferable", "method_sig": "public Transferable getTransferable()", "description": "This method returns the Transferable object that represents\n the data associated with the current drag operation."}, {"method_name": "acceptDrag", "method_sig": "public void acceptDrag (int dragOperation)", "description": "Accepts the drag.\n\n This method should be called from a\n DropTargetListeners dragEnter,\n dragOver, and dropActionChanged\n methods if the implementation wishes to accept an operation\n from the srcActions other than the one selected by\n the user as represented by the dropAction."}, {"method_name": "rejectDrag", "method_sig": "public void rejectDrag()", "description": "Rejects the drag as a result of examining either the\n dropAction or the available DataFlavor\n types."}]}