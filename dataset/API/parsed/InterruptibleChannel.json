{"name": "Interface InterruptibleChannel", "module": "java.base", "package": "java.nio.channels", "text": "A channel that can be asynchronously closed and interrupted.\n\n  A channel that implements this interface is asynchronously\n closeable: If a thread is blocked in an I/O operation on an\n interruptible channel then another thread may invoke the channel's close method.  This will cause the blocked thread to receive an\n AsynchronousCloseException.\n\n  A channel that implements this interface is also interruptible:\n If a thread is blocked in an I/O operation on an interruptible channel then\n another thread may invoke the blocked thread's interrupt method.  This will cause the channel to be closed, the blocked\n thread to receive a ClosedByInterruptException, and the blocked\n thread's interrupt status to be set.\n\n  If a thread's interrupt status is already set and it invokes a blocking\n I/O operation upon a channel then the channel will be closed and the thread\n will immediately receive a ClosedByInterruptException; its interrupt\n status will remain set.\n\n  A channel supports asynchronous closing and interruption if, and only\n if, it implements this interface.  This can be tested at runtime, if\n necessary, via the instanceof operator.", "codes": ["public interface InterruptibleChannel\nextends Channel"], "fields": [], "methods": [{"method_name": "close", "method_sig": "void close()\n    throws IOException", "description": "Closes this channel.\n\n  Any thread currently blocked in an I/O operation upon this channel\n will receive an AsynchronousCloseException.\n\n  This method otherwise behaves exactly as specified by the Channel interface.  "}]}