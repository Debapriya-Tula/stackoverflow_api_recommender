{"name": "Interface IIOMetadataController", "module": "java.desktop", "package": "javax.imageio.metadata", "text": "An interface to be implemented by objects that can determine the\n settings of an IIOMetadata object, either by putting\n up a GUI to obtain values from a user, or by other means.  This\n interface merely specifies a generic activate method\n that invokes the controller, without regard for how the controller\n obtains values (i.e., whether the controller puts up a GUI\n or merely computes a set of values is irrelevant to this\n interface).\n\n  Within the activate method, a controller obtains\n initial values by querying the IIOMetadata object's\n settings, either using the XML DOM tree or a plug-in specific\n interface, modifies values by whatever means, then modifies the\n IIOMetadata object's settings, using either the\n setFromTree or mergeTree methods, or a\n plug-in specific interface.  In general, applications may expect\n that when the activate method returns\n true, the IIOMetadata object is ready for\n use in a write operation.\n\n  Vendors may choose to provide GUIs for the\n IIOMetadata subclasses they define for a particular\n plug-in.  These can be set up as default controllers in the\n corresponding IIOMetadata subclasses.\n\n  Alternatively, an algorithmic process such as a database lookup\n or the parsing of a command line could be used as a controller, in\n which case the activate method would simply look up or\n compute the settings, call methods on IIOMetadata to\n set its state, and return true.", "codes": ["public interface IIOMetadataController"], "fields": [], "methods": [{"method_name": "activate", "method_sig": "boolean activate (IIOMetadata metadata)", "description": "Activates the controller.  If true is returned,\n all settings in the IIOMetadata object should be\n ready for use in a write operation.  If false is\n returned, no settings in the IIOMetadata object\n will be disturbed (i.e., the user canceled the\n operation)."}]}