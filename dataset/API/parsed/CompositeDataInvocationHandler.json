{"name": "Class CompositeDataInvocationHandler", "module": "java.management", "package": "javax.management.openmbean", "text": "An InvocationHandler that forwards getter methods to a\n   CompositeData.  If you have an interface that contains\n   only getter methods (such as String getName() or\n   boolean isActive()) then you can use this class in\n   conjunction with the Proxy class to produce an implementation\n   of the interface where each getter returns the value of the\n   corresponding item in a CompositeData.\nFor example, suppose you have an interface like this:\n\n   \n\n   public interface NamedNumber {\n       public int getNumber();\n       public String getName();\n   }\n   \n\n\n   and a CompositeData constructed like this:\n\n   \n\n   CompositeData cd =\n       new CompositeDataSupport(\n           someCompositeType,\n           new String[] {\"number\", \"name\"},\n           new Object[] {5, \"five\"}\n       );\n   \n\n\n   then you can construct an object implementing NamedNumber\n   and backed by the object cd like this:\n\n   \n\n   InvocationHandler handler =\n       new CompositeDataInvocationHandler(cd);\n   NamedNumber nn = (NamedNumber)\n       Proxy.newProxyInstance(NamedNumber.class.getClassLoader(),\n                              new Class[] {NamedNumber.class},\n                              handler);\n   \n\n\n   A call to nn.getNumber() will then return 5.\n\n   If the first letter of the property defined by a getter is a\n   capital, then this handler will look first for an item in the\n   CompositeData beginning with a capital, then, if that is\n   not found, for an item beginning with the corresponding lowercase\n   letter or code point.  For a getter called getNumber(), the\n   handler will first look for an item called Number, then for\n   number.  If the getter is called getnumber(), then\n   the item must be called number.\nIf the method given to invoke is the method\n   boolean equals(Object) inherited from Object, then\n   it will return true if and only if the argument is a Proxy\n   whose InvocationHandler is also a \n   CompositeDataInvocationHandler and whose backing \n   CompositeData is equal (not necessarily identical) to this\n   object's.  If the method given to invoke is the method\n   int hashCode() inherited from Object, then it will\n   return a value that is consistent with this definition of \n   equals: if two objects are equal according to equals, then\n   they will have the same hashCode.", "codes": ["public class CompositeDataInvocationHandler\nextends Object\nimplements InvocationHandler"], "fields": [], "methods": [{"method_name": "getCompositeData", "method_sig": "public CompositeData getCompositeData()", "description": "Return the CompositeData that was supplied to the\n       constructor."}]}