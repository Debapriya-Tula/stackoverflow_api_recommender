{"name": "Class DropTargetAdapter", "module": "java.desktop", "package": "java.awt.dnd", "text": "An abstract adapter class for receiving drop target events. The methods in\n this class are empty. This class exists only as a convenience for creating\n listener objects.\n \n Extend this class to create a DropTargetEvent listener\n and override the methods for the events of interest. (If you implement the\n DropTargetListener interface, you have to define all of\n the methods in it. This abstract class defines a null implementation for\n every method except drop(DropTargetDropEvent), so you only have\n to define methods for events you care about.) You must provide an\n implementation for at least drop(DropTargetDropEvent). This\n method cannot have a null implementation because its specification requires\n that you either accept or reject the drop, and, if accepted, indicate\n whether the drop was successful.\n \n Create a listener object using the extended class and then register it with\n a DropTarget. When the drag enters, moves over, or exits\n the operable part of the drop site for that DropTarget, when\n the drop action changes, and when the drop occurs, the relevant method in\n the listener object is invoked, and the DropTargetEvent is\n passed to it.\n \n The operable part of the drop site for the DropTarget is\n the part of the associated Component's geometry that is not\n obscured by an overlapping top-level window or by another\n Component higher in the Z-order that has an associated active\n DropTarget.\n \n During the drag, the data associated with the current drag operation can be\n retrieved by calling getTransferable() on\n DropTargetDragEvent instances passed to the listener's\n methods.\n \n Note that getTransferable() on the\n DropTargetDragEvent instance should only be called within the\n respective listener's method and all the necessary data should be retrieved\n from the returned Transferable before that method returns.", "codes": ["public abstract class DropTargetAdapter\nextends Object\nimplements DropTargetListener"], "fields": [], "methods": [{"method_name": "dragEnter", "method_sig": "public void dragEnter (DropTargetDragEvent dtde)", "description": "Called while a drag operation is ongoing, when the mouse pointer enters\n the operable part of the drop site for the DropTarget\n registered with this listener."}, {"method_name": "dragOver", "method_sig": "public void dragOver (DropTargetDragEvent dtde)", "description": "Called when a drag operation is ongoing, while the mouse pointer is still\n over the operable part of the drop site for the DropTarget\n registered with this listener."}, {"method_name": "dropActionChanged", "method_sig": "public void dropActionChanged (DropTargetDragEvent dtde)", "description": "Called if the user has modified\n the current drop gesture."}, {"method_name": "dragExit", "method_sig": "public void dragExit (DropTargetEvent dte)", "description": "Called while a drag operation is ongoing, when the mouse pointer has\n exited the operable part of the drop site for the\n DropTarget registered with this listener."}]}