{"name": "Interface HttpResponse.PushPromiseHandler<T>", "module": "java.net.http", "package": "java.net.http", "text": "A handler for push promises.\n\n  A push promise is a synthetic request sent by an HTTP/2 server\n when retrieving an initiating client-sent request. The server has\n determined, possibly through inspection of the initiating request, that\n the client will likely need the promised resource, and hence pushes a\n synthetic push request, in the form of a push promise, to the client. The\n client can choose to accept or reject the push promise request.\n\n  A push promise request may be received up to the point where the\n response body of the initiating client-sent request has been fully\n received. The delivery of a push promise response, however, is not\n coordinated with the delivery of the response to the initiating\n client-sent request.", "codes": ["public static interface HttpResponse.PushPromiseHandler<T>"], "fields": [], "methods": [{"method_name": "applyPushPromise", "method_sig": "void applyPushPromise (HttpRequest initiatingRequest,\n                      HttpRequest pushPromiseRequest,\n                      Function<HttpResponse.BodyHandler<T>, CompletableFuture<HttpResponse<T>>> acceptor)", "description": "Notification of an incoming push promise.\n\n  This method is invoked once for each push promise received, up\n to the point where the response body of the initiating client-sent\n request has been fully received.\n\n  A push promise is accepted by invoking the given acceptor\n function. The acceptor function must be passed a non-null\n BodyHandler, that is to be used to handle the promise's\n response body. The acceptor function will return a \n CompletableFuture that completes with the promise's response.\n\n  If the acceptor function is not successfully invoked,\n then the push promise is rejected. The acceptor function will\n throw an IllegalStateException if invoked more than once."}, {"method_name": "of", "method_sig": "static <T> HttpResponse.PushPromiseHandler<T> of (Function<HttpRequest, HttpResponse.BodyHandler<T>> pushPromiseHandler,\n                                                 ConcurrentMap<HttpRequest, CompletableFuture<HttpResponse<T>>> pushPromisesMap)", "description": "Returns a push promise handler that accumulates push promises, and\n their responses, into the given map.\n\n  Entries are added to the given map for each push promise accepted.\n The entry's key is the push request, and the entry's value is a\n CompletableFuture that completes with the response\n corresponding to the key's push request. A push request is rejected /\n cancelled if there is already an entry in the map whose key is\n equal to it. A push request is\n rejected / cancelled if it  does not have the same origin as its\n initiating request.\n\n  Entries are added to the given map as soon as practically\n possible when a push promise is received and accepted. That way code,\n using such a map like a cache, can determine if a push promise has\n been issued by the server and avoid making, possibly, unnecessary\n requests.\n\n  The delivery of a push promise response is not coordinated with\n the delivery of the response to the initiating client-sent request.\n However, when the response body for the initiating client-sent\n request has been fully received, the map is guaranteed to be fully\n populated, that is, no more entries will be added. The individual\n CompletableFutures contained in the map may or may not\n already be completed at this point."}]}