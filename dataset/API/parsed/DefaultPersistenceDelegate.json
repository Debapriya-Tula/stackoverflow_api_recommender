{"name": "Class DefaultPersistenceDelegate", "module": "java.desktop", "package": "java.beans", "text": "The DefaultPersistenceDelegate is a concrete implementation of\n the abstract PersistenceDelegate class and\n is the delegate used by default for classes about\n which no information is available. The DefaultPersistenceDelegate\n provides, version resilient, public API-based persistence for\n classes that follow the JavaBeans\u2122 conventions without any class specific\n configuration.\n \n The key assumptions are that the class has a nullary constructor\n and that its state is accurately represented by matching pairs\n of \"setter\" and \"getter\" methods in the order they are returned\n by the Introspector.\n In addition to providing code-free persistence for JavaBeans,\n the DefaultPersistenceDelegate provides a convenient means\n to effect persistent storage for classes that have a constructor\n that, while not nullary, simply requires some property values\n as arguments.", "codes": ["public class DefaultPersistenceDelegate\nextends PersistenceDelegate"], "fields": [], "methods": [{"method_name": "mutatesTo", "method_sig": "protected boolean mutatesTo (Object oldInstance,\n                            Object newInstance)", "description": "If the number of arguments in the specified constructor is non-zero and\n the class of oldInstance explicitly declares an \"equals\" method\n this method returns the value of oldInstance.equals(newInstance).\n Otherwise, this method uses the superclass's definition which returns true if the\n classes of the two instances are equal."}, {"method_name": "instantiate", "method_sig": "protected Expression instantiate (Object oldInstance,\n                                 Encoder out)", "description": "This default implementation of the instantiate method returns\n an expression containing the predefined method name \"new\" which denotes a\n call to a constructor with the arguments as specified in\n the DefaultPersistenceDelegate's constructor."}, {"method_name": "initialize", "method_sig": "protected void initialize (Class<?> type,\n                          Object oldInstance,\n                          Object newInstance,\n                          Encoder out)", "description": "This default implementation of the initialize method assumes\n all state held in objects of this type is exposed via the\n matching pairs of \"setter\" and \"getter\" methods in the order\n they are returned by the Introspector. If a property descriptor\n defines a \"transient\" attribute with a value equal to\n Boolean.TRUE the property is ignored by this\n default implementation. Note that this use of the word\n \"transient\" is quite independent of the field modifier\n that is used by the ObjectOutputStream.\n \n For each non-transient property, an expression is created\n in which the nullary \"getter\" method is applied\n to the oldInstance. The value of this\n expression is the value of the property in the instance that is\n being serialized. If the value of this expression\n in the cloned environment mutatesTo the\n target value, the new value is initialized to make it\n equivalent to the old value. In this case, because\n the property value has not changed there is no need to\n call the corresponding \"setter\" method and no statement\n is emitted. If not however, the expression for this value\n is replaced with another expression (normally a constructor)\n and the corresponding \"setter\" method is called to install\n the new property value in the object. This scheme removes\n default information from the output produced by streams\n using this delegate.\n \n In passing these statements to the output stream, where they\n will be executed, side effects are made to the newInstance.\n In most cases this allows the problem of properties\n whose values depend on each other to actually help the\n serialization process by making the number of statements\n that need to be written to the output smaller. In general,\n the problem of handling interdependent properties is reduced to\n that of finding an order for the properties in\n a class such that no property value depends on the value of\n a subsequent property."}]}