{"name": "Class PixelGrabber", "module": "java.desktop", "package": "java.awt.image", "text": "The PixelGrabber class implements an ImageConsumer which can be attached\n to an Image or ImageProducer object to retrieve a subset of the pixels\n in that image.  Here is an example:\n \n\n public void handlesinglepixel(int x, int y, int pixel) {\n      int alpha = (pixel >> 24) & 0xff;\n      int red   = (pixel >> 16) & 0xff;\n      int green = (pixel >>  8) & 0xff;\n      int blue  = (pixel      ) & 0xff;\n      // Deal with the pixel as necessary...\n }\n\n public void handlepixels(Image img, int x, int y, int w, int h) {\n      int[] pixels = new int[w * h];\n      PixelGrabber pg = new PixelGrabber(img, x, y, w, h, pixels, 0, w);\n      try {\n          pg.grabPixels();\n      } catch (InterruptedException e) {\n          System.err.println(\"interrupted waiting for pixels!\");\n          return;\n      }\n      if ((pg.getStatus() & ImageObserver.ABORT) != 0) {\n          System.err.println(\"image fetch aborted or errored\");\n          return;\n      }\n      for (int j = 0; j < h; j++) {\n          for (int i = 0; i < w; i++) {\n              handlesinglepixel(x+i, y+j, pixels[j * w + i]);\n          }\n      }\n }\n\n ", "codes": ["public class PixelGrabber\nextends Object\nimplements ImageConsumer"], "fields": [], "methods": [{"method_name": "startGrabbing", "method_sig": "public void startGrabbing()", "description": "Request the PixelGrabber to start fetching the pixels."}, {"method_name": "abortGrabbing", "method_sig": "public void abortGrabbing()", "description": "Request the PixelGrabber to abort the image fetch."}, {"method_name": "grabPixels", "method_sig": "public boolean grabPixels()\n                   throws InterruptedException", "description": "Request the Image or ImageProducer to start delivering pixels and\n wait for all of the pixels in the rectangle of interest to be\n delivered."}, {"method_name": "grabPixels", "method_sig": "public boolean grabPixels (long ms)\n                   throws InterruptedException", "description": "Request the Image or ImageProducer to start delivering pixels and\n wait for all of the pixels in the rectangle of interest to be\n delivered or until the specified timeout has elapsed.  This method\n behaves in the following ways, depending on the value of\n ms:\n \n If ms == 0, waits until all pixels are delivered\n  If ms > 0, waits until all pixels are delivered\n as timeout expires.\n  If ms < 0, returns true if all pixels\n are grabbed, false otherwise and does not wait.\n "}, {"method_name": "getStatus", "method_sig": "public int getStatus()", "description": "Return the status of the pixels.  The ImageObserver flags\n representing the available pixel information are returned."}, {"method_name": "getWidth", "method_sig": "public int getWidth()", "description": "Get the width of the pixel buffer (after adjusting for image width).\n If no width was specified for the rectangle of pixels to grab then\n then this information will only be available after the image has\n delivered the dimensions."}, {"method_name": "getHeight", "method_sig": "public int getHeight()", "description": "Get the height of the pixel buffer (after adjusting for image height).\n If no width was specified for the rectangle of pixels to grab then\n then this information will only be available after the image has\n delivered the dimensions."}, {"method_name": "getPixels", "method_sig": "public Object getPixels()", "description": "Get the pixel buffer.  If the PixelGrabber was not constructed\n with an explicit pixel buffer to hold the pixels then this method\n will return null until the size and format of the image data is\n known.\n Since the PixelGrabber may fall back on accumulating the data\n in the default RGB ColorModel at any time if the source image\n uses more than one ColorModel to deliver the data, the array\n object returned by this method may change over time until the\n image grab is complete."}, {"method_name": "getColorModel", "method_sig": "public ColorModel getColorModel()", "description": "Get the ColorModel for the pixels stored in the array.  If the\n PixelGrabber was constructed with an explicit pixel buffer then\n this method will always return the default RGB ColorModel,\n otherwise it may return null until the ColorModel used by the\n ImageProducer is known.\n Since the PixelGrabber may fall back on accumulating the data\n in the default RGB ColorModel at any time if the source image\n uses more than one ColorModel to deliver the data, the ColorModel\n object returned by this method may change over time until the\n image grab is complete and may not reflect any of the ColorModel\n objects that was used by the ImageProducer to deliver the pixels."}, {"method_name": "setDimensions", "method_sig": "public void setDimensions (int width,\n                          int height)", "description": "The setDimensions method is part of the ImageConsumer API which\n this class must implement to retrieve the pixels.\n \n Note: This method is intended to be called by the ImageProducer\n of the Image whose pixels are being grabbed.  Developers using\n this class to retrieve pixels from an image should avoid calling\n this method directly since that operation could result in problems\n with retrieving the requested pixels."}, {"method_name": "setHints", "method_sig": "public void setHints (int hints)", "description": "The setHints method is part of the ImageConsumer API which\n this class must implement to retrieve the pixels.\n \n Note: This method is intended to be called by the ImageProducer\n of the Image whose pixels are being grabbed.  Developers using\n this class to retrieve pixels from an image should avoid calling\n this method directly since that operation could result in problems\n with retrieving the requested pixels."}, {"method_name": "setProperties", "method_sig": "public void setProperties (Hashtable<?, ?> props)", "description": "The setProperties method is part of the ImageConsumer API which\n this class must implement to retrieve the pixels.\n \n Note: This method is intended to be called by the ImageProducer\n of the Image whose pixels are being grabbed.  Developers using\n this class to retrieve pixels from an image should avoid calling\n this method directly since that operation could result in problems\n with retrieving the requested pixels."}, {"method_name": "setColorModel", "method_sig": "public void setColorModel (ColorModel model)", "description": "The setColorModel method is part of the ImageConsumer API which\n this class must implement to retrieve the pixels.\n \n Note: This method is intended to be called by the ImageProducer\n of the Image whose pixels are being grabbed.  Developers using\n this class to retrieve pixels from an image should avoid calling\n this method directly since that operation could result in problems\n with retrieving the requested pixels."}, {"method_name": "setPixels", "method_sig": "public void setPixels (int srcX,\n                      int srcY,\n                      int srcW,\n                      int srcH,\n                      ColorModel model,\n                      byte[] pixels,\n                      int srcOff,\n                      int srcScan)", "description": "The setPixels method is part of the ImageConsumer API which\n this class must implement to retrieve the pixels.\n \n Note: This method is intended to be called by the ImageProducer\n of the Image whose pixels are being grabbed.  Developers using\n this class to retrieve pixels from an image should avoid calling\n this method directly since that operation could result in problems\n with retrieving the requested pixels."}, {"method_name": "setPixels", "method_sig": "public void setPixels (int srcX,\n                      int srcY,\n                      int srcW,\n                      int srcH,\n                      ColorModel model,\n                      int[] pixels,\n                      int srcOff,\n                      int srcScan)", "description": "The setPixels method is part of the ImageConsumer API which\n this class must implement to retrieve the pixels.\n \n Note: This method is intended to be called by the ImageProducer\n of the Image whose pixels are being grabbed.  Developers using\n this class to retrieve pixels from an image should avoid calling\n this method directly since that operation could result in problems\n with retrieving the requested pixels."}, {"method_name": "imageComplete", "method_sig": "public void imageComplete (int status)", "description": "The imageComplete method is part of the ImageConsumer API which\n this class must implement to retrieve the pixels.\n \n Note: This method is intended to be called by the ImageProducer\n of the Image whose pixels are being grabbed.  Developers using\n this class to retrieve pixels from an image should avoid calling\n this method directly since that operation could result in problems\n with retrieving the requested pixels."}, {"method_name": "status", "method_sig": "public int status()", "description": "Returns the status of the pixels.  The ImageObserver flags\n representing the available pixel information are returned.\n This method and getStatus have the\n same implementation, but getStatus is the\n preferred method because it conforms to the convention of\n naming information-retrieval methods with the form\n \"getXXX\"."}]}