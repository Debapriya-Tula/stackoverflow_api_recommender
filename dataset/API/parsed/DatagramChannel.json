{"name": "Class DatagramChannel", "module": "java.base", "package": "java.nio.channels", "text": "A selectable channel for datagram-oriented sockets.\n\n  A datagram channel is created by invoking one of the open methods\n of this class. It is not possible to create a channel for an arbitrary,\n pre-existing datagram socket. A newly-created datagram channel is open but not\n connected. A datagram channel need not be connected in order for the send and receive methods to be used.  A datagram channel may be\n connected, by invoking its connect method, in order to\n avoid the overhead of the security checks are otherwise performed as part of\n every send and receive operation.  A datagram channel must be connected in\n order to use the read and write methods, since those methods do not\n accept or return socket addresses.\n\n  Once connected, a datagram channel remains connected until it is\n disconnected or closed.  Whether or not a datagram channel is connected may\n be determined by invoking its isConnected method.\n\n  Socket options are configured using the setOption method. A datagram channel to an Internet Protocol socket supports\n the following options:\n \n\nSocket options\n\n\nOption Name\nDescription\n\n\n\n\n SO_SNDBUF \n The size of the socket send buffer \n\n\n SO_RCVBUF \n The size of the socket receive buffer \n\n\n SO_REUSEADDR \n Re-use address \n\n\n SO_BROADCAST \n Allow transmission of broadcast datagrams \n\n\n IP_TOS \n The Type of Service (ToS) octet in the Internet Protocol (IP) header \n\n\n IP_MULTICAST_IF \n The network interface for Internet Protocol (IP) multicast datagrams \n\n\n IP_MULTICAST_TTL \n The time-to-live for Internet Protocol (IP) multicast\n       datagrams \n\n\n IP_MULTICAST_LOOP \n Loopback for Internet Protocol (IP) multicast datagrams \n\n\n\n\n Additional (implementation specific) options may also be supported.\n\n  Datagram channels are safe for use by multiple concurrent threads.  They\n support concurrent reading and writing, though at most one thread may be\n reading and at most one thread may be writing at any given time.  ", "codes": ["public abstract class DatagramChannel\nextends AbstractSelectableChannel\nimplements ByteChannel, ScatteringByteChannel, GatheringByteChannel, MulticastChannel"], "fields": [], "methods": [{"method_name": "open", "method_sig": "public static DatagramChannel open()\n                            throws IOException", "description": "Opens a datagram channel.\n\n  The new channel is created by invoking the openDatagramChannel method of the system-wide default SelectorProvider object.  The channel will not be\n connected.\n\n  The ProtocolFamily of the channel's socket\n is platform (and possibly configuration) dependent and therefore unspecified.\n The open allows the protocol family to be\n selected when opening a datagram channel, and should be used to open\n datagram channels that are intended for Internet Protocol multicasting."}, {"method_name": "open", "method_sig": "public static DatagramChannel open (ProtocolFamily family)\n                            throws IOException", "description": "Opens a datagram channel.\n\n  The family parameter is used to specify the ProtocolFamily. If the datagram channel is to be used for IP multicasting\n then this should correspond to the address type of the multicast groups\n that this channel will join.\n\n  The new channel is created by invoking the openDatagramChannel method of the system-wide default SelectorProvider object.  The channel will not be\n connected."}, {"method_name": "validOps", "method_sig": "public final int validOps()", "description": "Returns an operation set identifying this channel's supported\n operations.\n\n  Datagram channels support reading and writing, so this method\n returns (SelectionKey.OP_READ |\u00a0SelectionKey.OP_WRITE)."}, {"method_name": "bind", "method_sig": "public abstract DatagramChannel bind (SocketAddress local)\n                              throws IOException", "description": "Description copied from interface:\u00a0NetworkChannel"}, {"method_name": "setOption", "method_sig": "public abstract <T> DatagramChannel setOption (SocketOption<T> name,\n                                              T value)\n                                       throws IOException", "description": "Description copied from interface:\u00a0NetworkChannel"}, {"method_name": "socket", "method_sig": "public abstract DatagramSocket socket()", "description": "Retrieves a datagram socket associated with this channel.\n\n  The returned object will not declare any public methods that are not\n declared in the DatagramSocket class.  "}, {"method_name": "isConnected", "method_sig": "public abstract boolean isConnected()", "description": "Tells whether or not this channel's socket is connected."}, {"method_name": "connect", "method_sig": "public abstract DatagramChannel connect (SocketAddress remote)\n                                 throws IOException", "description": "Connects this channel's socket.\n\n  The channel's socket is configured so that it only receives\n datagrams from, and sends datagrams to, the given remote peer\n address.  Once connected, datagrams may not be received from or sent to\n any other address.  A datagram socket remains connected until it is\n explicitly disconnected or until it is closed.\n\n  This method performs exactly the same security checks as the connect method of the DatagramSocket class.  That is, if a security manager has been\n installed then this method verifies that its checkAccept and checkConnect methods permit\n datagrams to be received from and sent to, respectively, the given\n remote address.\n\n  This method may be invoked at any time.  It will not have any effect\n on read or write operations that are already in progress at the moment\n that it is invoked. If this channel's socket is not bound then this method\n will first cause the socket to be bound to an address that is assigned\n automatically, as if invoking the bind method with a\n parameter of null. "}, {"method_name": "disconnect", "method_sig": "public abstract DatagramChannel disconnect()\n                                    throws IOException", "description": "Disconnects this channel's socket.\n\n  The channel's socket is configured so that it can receive datagrams\n from, and sends datagrams to, any remote address so long as the security\n manager, if installed, permits it.\n\n  This method may be invoked at any time.  It will not have any effect\n on read or write operations that are already in progress at the moment\n that it is invoked.\n\n  If this channel's socket is not connected, or if the channel is\n closed, then invoking this method has no effect.  "}, {"method_name": "getRemoteAddress", "method_sig": "public abstract SocketAddress getRemoteAddress()\n                                        throws IOException", "description": "Returns the remote address to which this channel's socket is connected."}, {"method_name": "receive", "method_sig": "public abstract SocketAddress receive (ByteBuffer dst)\n                               throws IOException", "description": "Receives a datagram via this channel.\n\n  If a datagram is immediately available, or if this channel is in\n blocking mode and one eventually becomes available, then the datagram is\n copied into the given byte buffer and its source address is returned.\n If this channel is in non-blocking mode and a datagram is not\n immediately available then this method immediately returns\n null.\n\n  The datagram is transferred into the given byte buffer starting at\n its current position, as if by a regular read operation.  If there\n are fewer bytes remaining in the buffer than are required to hold the\n datagram then the remainder of the datagram is silently discarded.\n\n  This method performs exactly the same security checks as the receive method of the DatagramSocket class.  That is, if the socket is not connected\n to a specific remote address and a security manager has been installed\n then for each datagram received this method verifies that the source's\n address and port number are permitted by the security manager's checkAccept method.  The overhead\n of this security check can be avoided by first connecting the socket via\n the connect method.\n\n  This method may be invoked at any time.  If another thread has\n already initiated a read operation upon this channel, however, then an\n invocation of this method will block until the first operation is\n complete. If this channel's socket is not bound then this method will\n first cause the socket to be bound to an address that is assigned\n automatically, as if invoking the bind method with a\n parameter of null. "}, {"method_name": "send", "method_sig": "public abstract int send (ByteBuffer src,\n                         SocketAddress target)\n                  throws IOException", "description": "Sends a datagram via this channel.\n\n  If this channel is in non-blocking mode and there is sufficient room\n in the underlying output buffer, or if this channel is in blocking mode\n and sufficient room becomes available, then the remaining bytes in the\n given buffer are transmitted as a single datagram to the given target\n address.\n\n  The datagram is transferred from the byte buffer as if by a regular\n write operation.\n\n  This method performs exactly the same security checks as the send method of the DatagramSocket class.  That is, if the socket is not connected\n to a specific remote address and a security manager has been installed\n then for each datagram sent this method verifies that the target address\n and port number are permitted by the security manager's checkConnect method.  The\n overhead of this security check can be avoided by first connecting the\n socket via the connect method.\n\n  This method may be invoked at any time.  If another thread has\n already initiated a write operation upon this channel, however, then an\n invocation of this method will block until the first operation is\n complete. If this channel's socket is not bound then this method will\n first cause the socket to be bound to an address that is assigned\n automatically, as if by invoking the bind method with a\n parameter of null. "}, {"method_name": "read", "method_sig": "public abstract int read (ByteBuffer dst)\n                  throws IOException", "description": "Reads a datagram from this channel.\n\n  This method may only be invoked if this channel's socket is\n connected, and it only accepts datagrams from the socket's peer.  If\n there are more bytes in the datagram than remain in the given buffer\n then the remainder of the datagram is silently discarded.  Otherwise\n this method behaves exactly as specified in the ReadableByteChannel interface.  "}, {"method_name": "read", "method_sig": "public abstract long read (ByteBuffer[] dsts,\n                          int offset,\n                          int length)\n                   throws IOException", "description": "Reads a datagram from this channel.\n\n  This method may only be invoked if this channel's socket is\n connected, and it only accepts datagrams from the socket's peer.  If\n there are more bytes in the datagram than remain in the given buffers\n then the remainder of the datagram is silently discarded.  Otherwise\n this method behaves exactly as specified in the ScatteringByteChannel interface.  "}, {"method_name": "read", "method_sig": "public final long read (ByteBuffer[] dsts)\n                throws IOException", "description": "Reads a datagram from this channel.\n\n  This method may only be invoked if this channel's socket is\n connected, and it only accepts datagrams from the socket's peer.  If\n there are more bytes in the datagram than remain in the given buffers\n then the remainder of the datagram is silently discarded.  Otherwise\n this method behaves exactly as specified in the ScatteringByteChannel interface.  "}, {"method_name": "write", "method_sig": "public abstract int write (ByteBuffer src)\n                   throws IOException", "description": "Writes a datagram to this channel.\n\n  This method may only be invoked if this channel's socket is\n connected, in which case it sends datagrams directly to the socket's\n peer.  Otherwise it behaves exactly as specified in the WritableByteChannel interface.  "}, {"method_name": "write", "method_sig": "public abstract long write (ByteBuffer[] srcs,\n                           int offset,\n                           int length)\n                    throws IOException", "description": "Writes a datagram to this channel.\n\n  This method may only be invoked if this channel's socket is\n connected, in which case it sends datagrams directly to the socket's\n peer.  Otherwise it behaves exactly as specified in the GatheringByteChannel interface.  "}, {"method_name": "write", "method_sig": "public final long write (ByteBuffer[] srcs)\n                 throws IOException", "description": "Writes a datagram to this channel.\n\n  This method may only be invoked if this channel's socket is\n connected, in which case it sends datagrams directly to the socket's\n peer.  Otherwise it behaves exactly as specified in the GatheringByteChannel interface.  "}, {"method_name": "getLocalAddress", "method_sig": "public abstract SocketAddress getLocalAddress()\n                                       throws IOException", "description": "Returns the socket address that this channel's socket is bound to.\n\n  Where the channel is bound to an Internet Protocol\n socket address then the return value from this method is of type InetSocketAddress.\n \n If there is a security manager set, its checkConnect method is\n called with the local address and -1 as its arguments to see\n if the operation is allowed. If the operation is not allowed,\n a SocketAddress representing the\n loopback address and the\n local port of the channel's socket is returned."}]}