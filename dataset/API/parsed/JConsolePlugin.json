{"name": "Class JConsolePlugin", "module": "jdk.jconsole", "package": "com.sun.tools.jconsole", "text": "A JConsole plugin class.  JConsole uses the\n service provider\n mechanism to search the JConsole plugins.\n Users can provide their JConsole plugins in a jar file\n containing a file named\n\n \n META-INF/services/com.sun.tools.jconsole.JConsolePlugin\n This file contains one line for each plugin, for example,\n\n \n com.sun.example.JTop\n which is the fully qualified class name of the class implementing\n JConsolePlugin.\n\n  To load the JConsole plugins in JConsole, run:\n\n \n jconsole -pluginpath <plugin-path> \n where <plugin-path> specifies the paths of JConsole\n plugins to look up which can be a directory or a jar file. Multiple\n paths are separated by the path separator character of the platform.\n\n  When a new JConsole window is created for a connection,\n an instance of each JConsolePlugin will be created.\n The JConsoleContext object is not available at its\n construction time.\n JConsole will set the JConsoleContext object for\n a plugin after the plugin object is created.  It will then\n call its getTabs method and add the returned\n tabs to the JConsole window.", "codes": ["public abstract class JConsolePlugin\nextends Object"], "fields": [], "methods": [{"method_name": "setContext", "method_sig": "public final void setContext (JConsoleContext context)", "description": "Sets the JConsoleContext object representing\n the connection to an application.  This method will be called\n only once after the plugin is created and before the getTabs()\n is called. The given context can be in any\n connection state when\n this method is called."}, {"method_name": "getContext", "method_sig": "public final JConsoleContext getContext()", "description": "Returns the JConsoleContext object representing\n the connection to an application.  This method may return null\n if it is called before the context is initialized."}, {"method_name": "getTabs", "method_sig": "public abstract Map<String, JPanel> getTabs()", "description": "Returns the tabs to be added in JConsole window.\n \n The returned map contains one entry for each tab\n to be added in the tabbed pane in a JConsole window with\n the tab name as the key\n and the JPanel object as the value.\n This method returns an empty map if no tab is added by this plugin.\n This method will be called from the Event Dispatch Thread\n once at the new connection time."}, {"method_name": "newSwingWorker", "method_sig": "public abstract SwingWorker<?, ?> newSwingWorker()", "description": "Returns a SwingWorker to perform\n the GUI update for this plugin at the same interval\n as JConsole updates the GUI.\n \n JConsole schedules the GUI update at an interval specified\n for a connection.  This method will be called at every\n update to obtain a SwingWorker for each plugin.\n \n JConsole will invoke the execute()\n method to schedule the returned SwingWorker for execution\n if:\n \n the SwingWorker object has not been executed\n        (i.e. the SwingWorker.getState() method\n        returns PENDING\n        state); and\n the SwingWorker object returned in the previous\n        update has completed the task if it was not null\n        (i.e. the SwingWorker.isDone method\n        returns true).\n\n\n Otherwise, SwingWorker object will not be scheduled to work.\n\n \n A plugin can schedule its own GUI update and this method\n will return null."}, {"method_name": "dispose", "method_sig": "public void dispose()", "description": "Dispose this plugin. This method is called by JConsole to inform\n that this plugin will be discarded and that it should free\n any resources that it has allocated.\n The JConsoleContext can be in any\n connection state when\n this method is called."}, {"method_name": "addContextPropertyChangeListener", "method_sig": "public final void addContextPropertyChangeListener (PropertyChangeListener listener)", "description": "Adds a PropertyChangeListener\n to the JConsoleContext object for this plugin.\n This method is a convenient method for this plugin to register\n a listener when the JConsoleContext object may or\n may not be available.\n\n For example, a plugin constructor can\n call this method to register a listener to listen to the\n connectionState\n property changes and the listener will be added to the\n JConsoleContext\n object when it is available."}, {"method_name": "removeContextPropertyChangeListener", "method_sig": "public final void removeContextPropertyChangeListener (PropertyChangeListener listener)", "description": "Removes a PropertyChangeListener\n from the listener list of the JConsoleContext\n object for this plugin.\n If listener was never added, no exception is\n thrown and no action is taken."}]}