{"name": "Interface TimerMBean", "module": "java.management", "package": "javax.management.timer", "text": "Exposes the management interface of the timer MBean.", "codes": ["public interface TimerMBean"], "fields": [], "methods": [{"method_name": "start", "method_sig": "void start()", "description": "Starts the timer.\n \n If there is one or more timer notifications before the time in the list of notifications, the notification\n is sent according to the sendPastNotifications flag and then, updated\n according to its period and remaining number of occurrences.\n If the timer notification date remains earlier than the current date, this notification is just removed\n from the list of notifications."}, {"method_name": "stop", "method_sig": "void stop()", "description": "Stops the timer."}, {"method_name": "addNotification", "method_sig": "Integer addNotification (String type,\n                        String message,\n                        Object userData,\n                        Date date,\n                        long period,\n                        long nbOccurences,\n                        boolean fixedRate)\n                 throws IllegalArgumentException", "description": "Creates a new timer notification with the specified type, message\n and userData and inserts it into the list of notifications with a given date,\n period and number of occurrences.\n \n If the timer notification to be inserted has a date that is before the current date,\n the method behaves as if the specified date were the current date. \n For once-off notifications, the notification is delivered immediately. \n For periodic notifications, the first notification is delivered immediately and the\n subsequent ones are spaced as specified by the period parameter.\n \n Note that once the timer notification has been added into the list of notifications,\n its associated date, period and number of occurrences cannot be updated.\n \n In the case of a periodic notification, the value of parameter fixedRate is used to\n specify the execution scheme, as specified in Timer."}, {"method_name": "addNotification", "method_sig": "Integer addNotification (String type,\n                        String message,\n                        Object userData,\n                        Date date,\n                        long period,\n                        long nbOccurences)\n                 throws IllegalArgumentException", "description": "Creates a new timer notification with the specified type, message\n and userData and inserts it into the list of notifications with a given date,\n period and number of occurrences.\n \n If the timer notification to be inserted has a date that is before the current date,\n the method behaves as if the specified date were the current date. \n For once-off notifications, the notification is delivered immediately. \n For periodic notifications, the first notification is delivered immediately and the\n subsequent ones are spaced as specified by the period parameter.\n \n Note that once the timer notification has been added into the list of notifications,\n its associated date, period and number of occurrences cannot be updated.\n \n In the case of a periodic notification, uses a fixed-delay execution scheme, as specified in\n Timer. In order to use a fixed-rate execution scheme, use\n addNotification(String, String, Object, Date, long, long, boolean) instead."}, {"method_name": "addNotification", "method_sig": "Integer addNotification (String type,\n                        String message,\n                        Object userData,\n                        Date date,\n                        long period)\n                 throws IllegalArgumentException", "description": "Creates a new timer notification with the specified type, message\n and userData and inserts it into the list of notifications with a given date\n and period and a null number of occurrences.\n \n The timer notification will repeat continuously using the timer period using a fixed-delay\n execution scheme, as specified in Timer. In order to use a fixed-rate\n execution scheme, use addNotification(String, String, Object, Date, long, long,\n boolean) instead.\n \n If the timer notification to be inserted has a date that is before the current date,\n the method behaves as if the specified date were the current date. The\n first notification is delivered immediately and the subsequent ones are\n spaced as specified by the period parameter."}, {"method_name": "addNotification", "method_sig": "Integer addNotification (String type,\n                        String message,\n                        Object userData,\n                        Date date)\n                 throws IllegalArgumentException", "description": "Creates a new timer notification with the specified type, message\n and userData and inserts it into the list of notifications with a given date\n and a null period and number of occurrences.\n \n The timer notification will be handled once at the specified date.\n \n If the timer notification to be inserted has a date that is before the current date,\n the method behaves as if the specified date were the current date and the\n notification is delivered immediately."}, {"method_name": "removeNotification", "method_sig": "void removeNotification (Integer id)\n                 throws InstanceNotFoundException", "description": "Removes the timer notification corresponding to the specified identifier from the list of notifications."}, {"method_name": "removeNotifications", "method_sig": "void removeNotifications (String type)\n                  throws InstanceNotFoundException", "description": "Removes all the timer notifications corresponding to the specified type from the list of notifications."}, {"method_name": "removeAllNotifications", "method_sig": "void removeAllNotifications()", "description": "Removes all the timer notifications from the list of notifications\n and resets the counter used to update the timer notification identifiers."}, {"method_name": "getNbNotifications", "method_sig": "int getNbNotifications()", "description": "Gets the number of timer notifications registered into the list of notifications."}, {"method_name": "getAllNotificationIDs", "method_sig": "Vector<Integer> getAllNotificationIDs()", "description": "Gets all timer notification identifiers registered into the list of notifications."}, {"method_name": "getNotificationIDs", "method_sig": "Vector<Integer> getNotificationIDs (String type)", "description": "Gets all the identifiers of timer notifications corresponding to the specified type."}, {"method_name": "getNotificationType", "method_sig": "String getNotificationType (Integer id)", "description": "Gets the timer notification type corresponding to the specified identifier."}, {"method_name": "getNotificationMessage", "method_sig": "String getNotificationMessage (Integer id)", "description": "Gets the timer notification detailed message corresponding to the specified identifier."}, {"method_name": "getNotificationUserData", "method_sig": "Object getNotificationUserData (Integer id)", "description": "Gets the timer notification user data object corresponding to the specified identifier."}, {"method_name": "getDate", "method_sig": "Date getDate (Integer id)", "description": "Gets a copy of the date associated to a timer notification."}, {"method_name": "getPeriod", "method_sig": "Long getPeriod (Integer id)", "description": "Gets a copy of the period (in milliseconds) associated to a timer notification."}, {"method_name": "getNbOccurences", "method_sig": "Long getNbOccurences (Integer id)", "description": "Gets a copy of the remaining number of occurrences associated to a timer notification."}, {"method_name": "getFixedRate", "method_sig": "Boolean getFixedRate (Integer id)", "description": "Gets a copy of the flag indicating whether a periodic notification is\n executed at fixed-delay or at fixed-rate."}, {"method_name": "getSendPastNotifications", "method_sig": "boolean getSendPastNotifications()", "description": "Gets the flag indicating whether or not the timer sends past notifications."}, {"method_name": "setSendPastNotifications", "method_sig": "void setSendPastNotifications (boolean value)", "description": "Sets the flag indicating whether the timer sends past notifications or not."}, {"method_name": "isActive", "method_sig": "boolean isActive()", "description": "Tests whether the timer MBean is active.\n A timer MBean is marked active when the start method is called.\n It becomes inactive when the stop method is called."}, {"method_name": "isEmpty", "method_sig": "boolean isEmpty()", "description": "Tests whether the list of timer notifications is empty."}]}