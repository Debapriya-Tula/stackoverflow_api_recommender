{"name": "Class PrintStream", "module": "java.base", "package": "java.io", "text": "A PrintStream adds functionality to another output stream,\n namely the ability to print representations of various data values\n conveniently.  Two other features are provided as well.  Unlike other output\n streams, a PrintStream never throws an\n IOException; instead, exceptional situations merely set an\n internal flag that can be tested via the checkError method.\n Optionally, a PrintStream can be created so as to flush\n automatically; this means that the flush method is\n automatically invoked after a byte array is written, one of the\n println methods is invoked, or a newline character or byte\n ('\\n') is written.\n\n  All characters printed by a PrintStream are converted into\n bytes using the given encoding or charset, or platform's default character\n encoding if not specified.\n The PrintWriter class should be used in situations that require\n  writing characters rather than bytes.\n\n  This class always replaces malformed and unmappable character sequences with\n the charset's default replacement string.\n The CharsetEncoder class should be used when more\n control over the encoding process is required.", "codes": ["public class PrintStream\nextends FilterOutputStream\nimplements Appendable, Closeable"], "fields": [], "methods": [{"method_name": "flush", "method_sig": "public void flush()", "description": "Flushes the stream.  This is done by writing any buffered output bytes to\n the underlying output stream and then flushing that stream."}, {"method_name": "close", "method_sig": "public void close()", "description": "Closes the stream.  This is done by flushing the stream and then closing\n the underlying output stream."}, {"method_name": "checkError", "method_sig": "public boolean checkError()", "description": "Flushes the stream and checks its error state. The internal error state\n is set to true when the underlying output stream throws an\n IOException other than InterruptedIOException,\n and when the setError method is invoked.  If an operation\n on the underlying output stream throws an\n InterruptedIOException, then the PrintStream\n converts the exception back into an interrupt by doing:\n \n     Thread.currentThread().interrupt();\n \n or the equivalent."}, {"method_name": "setError", "method_sig": "protected void setError()", "description": "Sets the error state of the stream to true.\n\n  This method will cause subsequent invocations of checkError() to return true until\n clearError() is invoked."}, {"method_name": "clearError", "method_sig": "protected void clearError()", "description": "Clears the internal error state of this stream.\n\n  This method will cause subsequent invocations of checkError() to return false until another write\n operation fails and invokes setError()."}, {"method_name": "write", "method_sig": "public void write (int b)", "description": "Writes the specified byte to this stream.  If the byte is a newline and\n automatic flushing is enabled then the flush method will be\n invoked.\n\n  Note that the byte is written as given; to write a character that\n will be translated according to the platform's default character\n encoding, use the print(char) or println(char)\n methods."}, {"method_name": "write", "method_sig": "public void write (byte[] buf,\n                  int off,\n                  int len)", "description": "Writes len bytes from the specified byte array starting at\n offset off to this stream.  If automatic flushing is\n enabled then the flush method will be invoked.\n\n  Note that the bytes will be written as given; to write characters\n that will be translated according to the platform's default character\n encoding, use the print(char) or println(char)\n methods."}, {"method_name": "print", "method_sig": "public void print (boolean b)", "description": "Prints a boolean value.  The string produced by String.valueOf(boolean) is translated into bytes\n according to the platform's default character encoding, and these bytes\n are written in exactly the manner of the\n write(int) method."}, {"method_name": "print", "method_sig": "public void print (char c)", "description": "Prints a character.  The character is translated into one or more bytes\n according to the platform's default character encoding, and these bytes\n are written in exactly the manner of the\n write(int) method."}, {"method_name": "print", "method_sig": "public void print (int i)", "description": "Prints an integer.  The string produced by String.valueOf(int) is translated into bytes\n according to the platform's default character encoding, and these bytes\n are written in exactly the manner of the\n write(int) method."}, {"method_name": "print", "method_sig": "public void print (long l)", "description": "Prints a long integer.  The string produced by String.valueOf(long) is translated into bytes\n according to the platform's default character encoding, and these bytes\n are written in exactly the manner of the\n write(int) method."}, {"method_name": "print", "method_sig": "public void print (float f)", "description": "Prints a floating-point number.  The string produced by String.valueOf(float) is translated into bytes\n according to the platform's default character encoding, and these bytes\n are written in exactly the manner of the\n write(int) method."}, {"method_name": "print", "method_sig": "public void print (double d)", "description": "Prints a double-precision floating-point number.  The string produced by\n String.valueOf(double) is translated into\n bytes according to the platform's default character encoding, and these\n bytes are written in exactly the manner of the write(int) method."}, {"method_name": "print", "method_sig": "public void print (char[] s)", "description": "Prints an array of characters.  The characters are converted into bytes\n according to the platform's default character encoding, and these bytes\n are written in exactly the manner of the\n write(int) method."}, {"method_name": "print", "method_sig": "public void print (String s)", "description": "Prints a string.  If the argument is null then the string\n \"null\" is printed.  Otherwise, the string's characters are\n converted into bytes according to the platform's default character\n encoding, and these bytes are written in exactly the manner of the\n write(int) method."}, {"method_name": "print", "method_sig": "public void print (Object obj)", "description": "Prints an object.  The string produced by the String.valueOf(Object) method is translated into bytes\n according to the platform's default character encoding, and these bytes\n are written in exactly the manner of the\n write(int) method."}, {"method_name": "println", "method_sig": "public void println()", "description": "Terminates the current line by writing the line separator string.  The\n line separator string is defined by the system property\n line.separator, and is not necessarily a single newline\n character ('\\n')."}, {"method_name": "println", "method_sig": "public void println (boolean x)", "description": "Prints a boolean and then terminate the line.  This method behaves as\n though it invokes print(boolean) and then\n println()."}, {"method_name": "println", "method_sig": "public void println (char x)", "description": "Prints a character and then terminate the line.  This method behaves as\n though it invokes print(char) and then\n println()."}, {"method_name": "println", "method_sig": "public void println (int x)", "description": "Prints an integer and then terminate the line.  This method behaves as\n though it invokes print(int) and then\n println()."}, {"method_name": "println", "method_sig": "public void println (long x)", "description": "Prints a long and then terminate the line.  This method behaves as\n though it invokes print(long) and then\n println()."}, {"method_name": "println", "method_sig": "public void println (float x)", "description": "Prints a float and then terminate the line.  This method behaves as\n though it invokes print(float) and then\n println()."}, {"method_name": "println", "method_sig": "public void println (double x)", "description": "Prints a double and then terminate the line.  This method behaves as\n though it invokes print(double) and then\n println()."}, {"method_name": "println", "method_sig": "public void println (char[] x)", "description": "Prints an array of characters and then terminate the line.  This method\n behaves as though it invokes print(char[]) and\n then println()."}, {"method_name": "println", "method_sig": "public void println (String x)", "description": "Prints a String and then terminate the line.  This method behaves as\n though it invokes print(String) and then\n println()."}, {"method_name": "println", "method_sig": "public void println (Object x)", "description": "Prints an Object and then terminate the line.  This method calls\n at first String.valueOf(x) to get the printed object's string value,\n then behaves as\n though it invokes print(String) and then\n println()."}, {"method_name": "printf", "method_sig": "public PrintStream printf (String format,\n                          Object... args)", "description": "A convenience method to write a formatted string to this output stream\n using the specified format string and arguments.\n\n  An invocation of this method of the form\n out.printf(format, args) behaves\n in exactly the same way as the invocation\n\n \n     out.format(format, args)\n "}, {"method_name": "printf", "method_sig": "public PrintStream printf (Locale l,\n                          String format,\n                          Object... args)", "description": "A convenience method to write a formatted string to this output stream\n using the specified format string and arguments.\n\n  An invocation of this method of the form\n out.printf(l, format, args) behaves\n in exactly the same way as the invocation\n\n \n     out.format(l, format, args)\n "}, {"method_name": "format", "method_sig": "public PrintStream format (String format,\n                          Object... args)", "description": "Writes a formatted string to this output stream using the specified\n format string and arguments.\n\n  The locale always used is the one returned by Locale.getDefault(Locale.Category) with\n FORMAT category specified,\n regardless of any previous invocations of other formatting methods on\n this object."}, {"method_name": "format", "method_sig": "public PrintStream format (Locale l,\n                          String format,\n                          Object... args)", "description": "Writes a formatted string to this output stream using the specified\n format string and arguments."}, {"method_name": "append", "method_sig": "public PrintStream append (CharSequence csq)", "description": "Appends the specified character sequence to this output stream.\n\n  An invocation of this method of the form out.append(csq)\n behaves in exactly the same way as the invocation\n\n \n     out.print(csq.toString())\n \n Depending on the specification of toString for the\n character sequence csq, the entire sequence may not be\n appended.  For instance, invoking then toString method of a\n character buffer will return a subsequence whose content depends upon\n the buffer's position and limit."}, {"method_name": "append", "method_sig": "public PrintStream append (CharSequence csq,\n                          int start,\n                          int end)", "description": "Appends a subsequence of the specified character sequence to this output\n stream.\n\n  An invocation of this method of the form\n out.append(csq, start, end) when\n csq is not null, behaves in\n exactly the same way as the invocation\n\n \n     out.print(csq.subSequence(start, end).toString())\n "}, {"method_name": "append", "method_sig": "public PrintStream append (char c)", "description": "Appends the specified character to this output stream.\n\n  An invocation of this method of the form out.append(c)\n behaves in exactly the same way as the invocation\n\n \n     out.print(c)\n "}]}