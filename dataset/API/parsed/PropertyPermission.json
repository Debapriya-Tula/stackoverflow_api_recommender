{"name": "Class PropertyPermission", "module": "java.base", "package": "java.util", "text": "This class is for property permissions.\n\n \n The name is the name of the property (\"java.home\",\n \"os.name\", etc). The naming\n convention follows the  hierarchical property naming convention.\n Also, an asterisk\n may appear at the end of the name, following a \".\", or by itself, to\n signify a wildcard match. For example: \"java.*\" and \"*\" signify a wildcard\n match, while \"*java\" and \"a*b\" do not.\n \n The actions to be granted are passed to the constructor in a string containing\n a list of one or more comma-separated keywords. The possible keywords are\n \"read\" and \"write\". Their meaning is defined as follows:\n\n \n read\n     read permission. Allows System.getProperty to\n         be called.\n     write\n     write permission. Allows System.setProperty to\n         be called.\n \n\n The actions string is converted to lowercase before processing.\n \n Care should be taken before granting code permission to access\n certain system properties.  For example, granting permission to\n access the \"java.home\" system property gives potentially malevolent\n code sensitive information about the system environment (the Java\n installation directory).  Also, granting permission to access\n the \"user.name\" and \"user.home\" system properties gives potentially\n malevolent code sensitive information about the user environment\n (the user's account name and home directory).", "codes": ["public final class PropertyPermission\nextends BasicPermission"], "fields": [], "methods": [{"method_name": "implies", "method_sig": "public boolean implies (Permission p)", "description": "Checks if this PropertyPermission object \"implies\" the specified\n permission.\n \n More specifically, this method returns true if:\n \n p is an instanceof PropertyPermission,\n  p's actions are a subset of this\n object's actions, and\n  p's name is implied by this object's\n      name. For example, \"java.*\" implies \"java.home\".\n "}, {"method_name": "equals", "method_sig": "public boolean equals (Object obj)", "description": "Checks two PropertyPermission objects for equality. Checks that obj is\n a PropertyPermission, and has the same name and actions as this object."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Returns the hash code value for this object.\n The hash code used is the hash code of this permissions name, that is,\n getName().hashCode(), where getName is\n from the Permission superclass."}, {"method_name": "getActions", "method_sig": "public String getActions()", "description": "Returns the \"canonical string representation\" of the actions.\n That is, this method always returns present actions in the following order:\n read, write. For example, if this PropertyPermission object\n allows both write and read actions, a call to getActions\n will return the string \"read,write\"."}, {"method_name": "newPermissionCollection", "method_sig": "public PermissionCollection newPermissionCollection()", "description": "Returns a new PermissionCollection object for storing\n PropertyPermission objects."}]}