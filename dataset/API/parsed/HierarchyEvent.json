{"name": "Class HierarchyEvent", "module": "java.desktop", "package": "java.awt.event", "text": "An event which indicates a change to the Component\n hierarchy to which Component belongs.\n \nHierarchy Change Events (HierarchyListener)\n     \n addition of an ancestor\n      removal of an ancestor\n      hierarchy made displayable\n      hierarchy made undisplayable\n      hierarchy shown on the screen (both visible and displayable)\n      hierarchy hidden on the screen (either invisible or undisplayable)\n     \nAncestor Reshape Events (HierarchyBoundsListener)\n     \n an ancestor was resized\n      an ancestor was moved\n     \n\n\n Hierarchy events are provided for notification purposes ONLY.\n The AWT will automatically handle changes to the hierarchy internally so\n that GUI layout and displayability works properly regardless of whether a\n program is receiving these events or not.\n \n This event is generated by a Container object (such as a Panel) when the\n Container is added, removed, moved, or resized, and passed down the\n hierarchy. It is also generated by a Component object when that object's\n addNotify, removeNotify, show, or\n hide method is called. The ANCESTOR_MOVED and\n ANCESTOR_RESIZED\n events are dispatched to every HierarchyBoundsListener or\n HierarchyBoundsAdapter object which registered to receive\n such events using the Component's addHierarchyBoundsListener\n method. (HierarchyBoundsAdapter objects implement the\n HierarchyBoundsListener interface.) The HIERARCHY_CHANGED events are\n dispatched to every HierarchyListener object which registered\n to receive such events using the Component's addHierarchyListener\n method. Each such listener object gets this HierarchyEvent\n when the event occurs.\n \n An unspecified behavior will be caused if the id parameter\n of any particular HierarchyEvent instance is not\n in the range from HIERARCHY_FIRST to HIERARCHY_LAST.\n \n The changeFlags parameter of any HierarchyEvent instance takes one of the following\n values:\n \n HierarchyEvent.PARENT_CHANGED\n HierarchyEvent.DISPLAYABILITY_CHANGED\n HierarchyEvent.SHOWING_CHANGED\n\n Assigning the value different from listed above will cause unspecified behavior.", "codes": ["public class HierarchyEvent\nextends AWTEvent"], "fields": [{"field_name": "HIERARCHY_FIRST", "field_sig": "public static final\u00a0int HIERARCHY_FIRST", "description": "Marks the first integer id for the range of hierarchy event ids."}, {"field_name": "HIERARCHY_CHANGED", "field_sig": "public static final\u00a0int HIERARCHY_CHANGED", "description": "The event id indicating that modification was made to the\n entire hierarchy tree."}, {"field_name": "ANCESTOR_MOVED", "field_sig": "public static final\u00a0int ANCESTOR_MOVED", "description": "The event id indicating an ancestor-Container was moved."}, {"field_name": "ANCESTOR_RESIZED", "field_sig": "public static final\u00a0int ANCESTOR_RESIZED", "description": "The event id indicating an ancestor-Container was resized."}, {"field_name": "HIERARCHY_LAST", "field_sig": "public static final\u00a0int HIERARCHY_LAST", "description": "Marks the last integer id for the range of ancestor event ids."}, {"field_name": "PARENT_CHANGED", "field_sig": "public static final\u00a0int PARENT_CHANGED", "description": "A change flag indicates that the HIERARCHY_CHANGED event\n was generated by a reparenting operation."}, {"field_name": "DISPLAYABILITY_CHANGED", "field_sig": "public static final\u00a0int DISPLAYABILITY_CHANGED", "description": "A change flag indicates that the HIERARCHY_CHANGED event\n was generated due to the changing of the hierarchy displayability.\n To discern the\n current displayability of the hierarchy, call the\n Component.isDisplayable method. Displayability changes occur\n in response to explicit or implicit calls of the\n Component.addNotify and\n Component.removeNotify methods."}, {"field_name": "SHOWING_CHANGED", "field_sig": "public static final\u00a0int SHOWING_CHANGED", "description": "A change flag indicates that the HIERARCHY_CHANGED event\n was generated due to the changing of the hierarchy showing state.\n To discern the\n current showing state of the hierarchy, call the\n Component.isShowing method. Showing state changes occur\n when either the displayability or visibility of the\n hierarchy occurs. Visibility changes occur in response to explicit\n or implicit calls of the Component.show and\n Component.hide methods."}], "methods": [{"method_name": "getComponent", "method_sig": "public Component getComponent()", "description": "Returns the originator of the event."}, {"method_name": "getChanged", "method_sig": "public Component getChanged()", "description": "Returns the Component at the top of the hierarchy which was\n changed."}, {"method_name": "getChangedParent", "method_sig": "public Container getChangedParent()", "description": "Returns the parent of the Component returned by\n getChanged(). For a HIERARCHY_CHANGED event where the\n change was of type PARENT_CHANGED via a call to\n Container.add, the parent returned is the parent\n after the add operation. For a HIERARCHY_CHANGED event where\n the change was of type PARENT_CHANGED via a call to\n Container.remove, the parent returned is the parent\n before the remove operation. For all other events and types,\n the parent returned is the parent during the operation."}, {"method_name": "getChangeFlags", "method_sig": "public long getChangeFlags()", "description": "Returns a bitmask which indicates the type(s) of\n HIERARCHY_CHANGED events represented in this event object.\n The bits have been bitwise-ored together."}, {"method_name": "paramString", "method_sig": "public String paramString()", "description": "Returns a parameter string identifying this event.\n This method is useful for event-logging and for debugging."}]}