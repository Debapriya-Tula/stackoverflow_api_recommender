{"name": "Class MemoryUsage", "module": "java.management", "package": "java.lang.management", "text": "A MemoryUsage object represents a snapshot of memory usage.\n Instances of the MemoryUsage class are usually constructed\n by methods that are used to obtain memory usage\n information about individual memory pool of the Java virtual machine or\n the heap or non-heap memory of the Java virtual machine as a whole.\n\n  A MemoryUsage object contains four values:\n \nDescribes the MemoryUsage object content\n\nValueDescription\n\n\n\n init \n represents the initial amount of memory (in bytes) that\n      the Java virtual machine requests from the operating system\n      for memory management during startup.  The Java virtual machine\n      may request additional memory from the operating system and\n      may also release memory to the system over time.\n      The value of init may be undefined.\n \n\n\n used \n represents the amount of memory currently used (in bytes).\n \n\n\n committed \n represents the amount of memory (in bytes) that is\n      guaranteed to be available for use by the Java virtual machine.\n      The amount of committed memory may change over time (increase\n      or decrease).  The Java virtual machine may release memory to\n      the system and committed could be less than init.\n      committed will always be greater than\n      or equal to used.\n \n\n\n max \n represents the maximum amount of memory (in bytes)\n      that can be used for memory management. Its value may be undefined.\n      The maximum amount of memory may change over time if defined.\n      The amount of used and committed memory will always be less than\n      or equal to max if max is defined.\n      A memory allocation may fail if it attempts to increase the\n      used memory such that used > committed even\n      if used <= max would still be true (for example,\n      when the system is low on virtual memory).\n \n\n\n\n\n Below is a picture showing an example of a memory pool:\n\n \n        +----------------------------------------------+\n        +////////////////           |                  +\n        +////////////////           |                  +\n        +----------------------------------------------+\n\n        |--------|\n           init\n        |---------------|\n               used\n        |---------------------------|\n                  committed\n        |----------------------------------------------|\n                            max\n \nMXBean Mapping\nMemoryUsage is mapped to a CompositeData\n with attributes as specified in the from method.", "codes": ["public class MemoryUsage\nextends Object"], "fields": [], "methods": [{"method_name": "getInit", "method_sig": "public long getInit()", "description": "Returns the amount of memory in bytes that the Java virtual machine\n initially requests from the operating system for memory management.\n This method returns -1 if the initial memory size is undefined."}, {"method_name": "getUsed", "method_sig": "public long getUsed()", "description": "Returns the amount of used memory in bytes."}, {"method_name": "getCommitted", "method_sig": "public long getCommitted()", "description": "Returns the amount of memory in bytes that is committed for\n the Java virtual machine to use.  This amount of memory is\n guaranteed for the Java virtual machine to use."}, {"method_name": "getMax", "method_sig": "public long getMax()", "description": "Returns the maximum amount of memory in bytes that can be\n used for memory management.  This method returns -1\n if the maximum memory size is undefined.\n\n  This amount of memory is not guaranteed to be available\n for memory management if it is greater than the amount of\n committed memory.  The Java virtual machine may fail to allocate\n memory even if the amount of used memory does not exceed this\n maximum size."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a descriptive representation of this memory usage."}, {"method_name": "from", "method_sig": "public static MemoryUsage from (CompositeData cd)", "description": "Returns a MemoryUsage object represented by the\n given CompositeData. The given CompositeData\n must contain the following attributes:\n\n \nThe attributes and the types the given CompositeData contains\n\n\nAttribute Name\nType\n\n\n\n\ninit\njava.lang.Long\n\n\nused\njava.lang.Long\n\n\ncommitted\njava.lang.Long\n\n\nmax\njava.lang.Long\n\n\n"}]}