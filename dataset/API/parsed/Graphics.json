{"name": "Class Graphics", "module": "java.desktop", "package": "java.awt", "text": "The Graphics class is the abstract base class for\n all graphics contexts that allow an application to draw onto\n components that are realized on various devices, as well as\n onto off-screen images.\n \n A Graphics object encapsulates state information needed\n for the basic rendering operations that Java supports.  This\n state information includes the following properties:\n\n \nThe Component object on which to draw.\n A translation origin for rendering and clipping coordinates.\n The current clip.\n The current color.\n The current font.\n The current logical pixel operation function (XOR or Paint).\n The current XOR alternation color\n     (see setXORMode(java.awt.Color)).\n \n\n Coordinates are infinitely thin and lie between the pixels of the\n output device.\n Operations that draw the outline of a figure operate by traversing\n an infinitely thin path between pixels with a pixel-sized pen that hangs\n down and to the right of the anchor point on the path.\n Operations that fill a figure operate by filling the interior\n of that infinitely thin path.\n Operations that render horizontal text render the ascending\n portion of character glyphs entirely above the baseline coordinate.\n \n The graphics pen hangs down and to the right from the path it traverses.\n This has the following implications:\n \nIf you draw a figure that covers a given rectangle, that\n figure occupies one extra row of pixels on the right and bottom edges\n as compared to filling a figure that is bounded by that same rectangle.\n If you draw a horizontal line along the same y coordinate as\n the baseline of a line of text, that line is drawn entirely below\n the text, except for any descenders.\n \n All coordinates that appear as arguments to the methods of this\n Graphics object are considered relative to the\n translation origin of this Graphics object prior to\n the invocation of the method.\n \n All rendering operations modify only pixels which lie within the\n area bounded by the current clip, which is specified by a Shape\n in user space and is controlled by the program using the\n Graphics object.  This user clip\n is transformed into device space and combined with the\n device clip, which is defined by the visibility of windows and\n device extents.  The combination of the user clip and device clip\n defines the composite clip, which determines the final clipping\n region.  The user clip cannot be modified by the rendering\n system to reflect the resulting composite clip. The user clip can only\n be changed through the setClip or clipRect\n methods.\n All drawing or writing is done in the current color,\n using the current paint mode, and in the current font.", "codes": ["public abstract class Graphics\nextends Object"], "fields": [], "methods": [{"method_name": "create", "method_sig": "public abstract Graphics create()", "description": "Creates a new Graphics object that is\n a copy of this Graphics object."}, {"method_name": "create", "method_sig": "public Graphics create (int x,\n                       int y,\n                       int width,\n                       int height)", "description": "Creates a new Graphics object based on this\n Graphics object, but with a new translation and clip area.\n The new Graphics object has its origin\n translated to the specified point (x,\u00a0y).\n Its clip area is determined by the intersection of the original\n clip area with the specified rectangle.  The arguments are all\n interpreted in the coordinate system of the original\n Graphics object. The new graphics context is\n identical to the original, except in two respects:\n\n \n\n The new graphics context is translated by (x,\u00a0y).\n That is to say, the point (0,\u00a00) in the\n new graphics context is the same as (x,\u00a0y) in\n the original graphics context.\n \n The new graphics context has an additional clipping rectangle, in\n addition to whatever (translated) clipping rectangle it inherited\n from the original graphics context. The origin of the new clipping\n rectangle is at (0,\u00a00), and its size\n is specified by the width and height\n arguments.\n "}, {"method_name": "translate", "method_sig": "public abstract void translate (int x,\n                               int y)", "description": "Translates the origin of the graphics context to the point\n (x,\u00a0y) in the current coordinate system.\n Modifies this graphics context so that its new origin corresponds\n to the point (x,\u00a0y) in this graphics context's\n original coordinate system.  All coordinates used in subsequent\n rendering operations on this graphics context will be relative\n to this new origin."}, {"method_name": "getColor", "method_sig": "public abstract Color getColor()", "description": "Gets this graphics context's current color."}, {"method_name": "setColor", "method_sig": "public abstract void setColor (Color c)", "description": "Sets this graphics context's current color to the specified\n color. All subsequent graphics operations using this graphics\n context use this specified color."}, {"method_name": "setPaintMode", "method_sig": "public abstract void setPaintMode()", "description": "Sets the paint mode of this graphics context to overwrite the\n destination with this graphics context's current color.\n This sets the logical pixel operation function to the paint or\n overwrite mode.  All subsequent rendering operations will\n overwrite the destination with the current color."}, {"method_name": "setXORMode", "method_sig": "public abstract void setXORMode (Color c1)", "description": "Sets the paint mode of this graphics context to alternate between\n this graphics context's current color and the new specified color.\n This specifies that logical pixel operations are performed in the\n XOR mode, which alternates pixels between the current color and\n a specified XOR color.\n \n When drawing operations are performed, pixels which are the\n current color are changed to the specified color, and vice versa.\n \n Pixels that are of colors other than those two colors are changed\n in an unpredictable but reversible manner; if the same figure is\n drawn twice, then all pixels are restored to their original values."}, {"method_name": "getFont", "method_sig": "public abstract Font getFont()", "description": "Gets the current font."}, {"method_name": "setFont", "method_sig": "public abstract void setFont (Font font)", "description": "Sets this graphics context's font to the specified font.\n All subsequent text operations using this graphics context\n use this font. A null argument is silently ignored."}, {"method_name": "getFontMetrics", "method_sig": "public FontMetrics getFontMetrics()", "description": "Gets the font metrics of the current font."}, {"method_name": "getFontMetrics", "method_sig": "public abstract FontMetrics getFontMetrics (Font f)", "description": "Gets the font metrics for the specified font."}, {"method_name": "getClipBounds", "method_sig": "public abstract Rectangle getClipBounds()", "description": "Returns the bounding rectangle of the current clipping area.\n This method refers to the user clip, which is independent of the\n clipping associated with device bounds and window visibility.\n If no clip has previously been set, or if the clip has been\n cleared using setClip(null), this method returns\n null.\n The coordinates in the rectangle are relative to the coordinate\n system origin of this graphics context."}, {"method_name": "clipRect", "method_sig": "public abstract void clipRect (int x,\n                              int y,\n                              int width,\n                              int height)", "description": "Intersects the current clip with the specified rectangle.\n The resulting clipping area is the intersection of the current\n clipping area and the specified rectangle.  If there is no\n current clipping area, either because the clip has never been\n set, or the clip has been cleared using setClip(null),\n the specified rectangle becomes the new clip.\n This method sets the user clip, which is independent of the\n clipping associated with device bounds and window visibility.\n This method can only be used to make the current clip smaller.\n To set the current clip larger, use any of the setClip methods.\n Rendering operations have no effect outside of the clipping area."}, {"method_name": "setClip", "method_sig": "public abstract void setClip (int x,\n                             int y,\n                             int width,\n                             int height)", "description": "Sets the current clip to the rectangle specified by the given\n coordinates.  This method sets the user clip, which is\n independent of the clipping associated with device bounds\n and window visibility.\n Rendering operations have no effect outside of the clipping area."}, {"method_name": "getClip", "method_sig": "public abstract Shape getClip()", "description": "Gets the current clipping area.\n This method returns the user clip, which is independent of the\n clipping associated with device bounds and window visibility.\n If no clip has previously been set, or if the clip has been\n cleared using setClip(null), this method returns\n null."}, {"method_name": "setClip", "method_sig": "public abstract void setClip (Shape clip)", "description": "Sets the current clipping area to an arbitrary clip shape.\n Not all objects that implement the Shape\n interface can be used to set the clip.  The only\n Shape objects that are guaranteed to be\n supported are Shape objects that are\n obtained via the getClip method and via\n Rectangle objects.  This method sets the\n user clip, which is independent of the clipping associated\n with device bounds and window visibility."}, {"method_name": "copyArea", "method_sig": "public abstract void copyArea (int x,\n                              int y,\n                              int width,\n                              int height,\n                              int dx,\n                              int dy)", "description": "Copies an area of the component by a distance specified by\n dx and dy. From the point specified\n by x and y, this method\n copies downwards and to the right.  To copy an area of the\n component to the left or upwards, specify a negative value for\n dx or dy.\n If a portion of the source rectangle lies outside the bounds\n of the component, or is obscured by another window or component,\n copyArea will be unable to copy the associated\n pixels. The area that is omitted can be refreshed by calling\n the component's paint method."}, {"method_name": "drawLine", "method_sig": "public abstract void drawLine (int x1,\n                              int y1,\n                              int x2,\n                              int y2)", "description": "Draws a line, using the current color, between the points\n (x1,\u00a0y1) and (x2,\u00a0y2)\n in this graphics context's coordinate system."}, {"method_name": "fillRect", "method_sig": "public abstract void fillRect (int x,\n                              int y,\n                              int width,\n                              int height)", "description": "Fills the specified rectangle.\n The left and right edges of the rectangle are at\n x and x\u00a0+\u00a0width\u00a0-\u00a01.\n The top and bottom edges are at\n y and y\u00a0+\u00a0height\u00a0-\u00a01.\n The resulting rectangle covers an area\n width pixels wide by\n height pixels tall.\n The rectangle is filled using the graphics context's current color."}, {"method_name": "drawRect", "method_sig": "public void drawRect (int x,\n                     int y,\n                     int width,\n                     int height)", "description": "Draws the outline of the specified rectangle.\n The left and right edges of the rectangle are at\n x and x\u00a0+\u00a0width.\n The top and bottom edges are at\n y and y\u00a0+\u00a0height.\n The rectangle is drawn using the graphics context's current color."}, {"method_name": "clearRect", "method_sig": "public abstract void clearRect (int x,\n                               int y,\n                               int width,\n                               int height)", "description": "Clears the specified rectangle by filling it with the background\n color of the current drawing surface. This operation does not\n use the current paint mode.\n \n Beginning with Java\u00a01.1, the background color\n of offscreen images may be system dependent. Applications should\n use setColor followed by fillRect to\n ensure that an offscreen image is cleared to a specific color."}, {"method_name": "drawRoundRect", "method_sig": "public abstract void drawRoundRect (int x,\n                                   int y,\n                                   int width,\n                                   int height,\n                                   int arcWidth,\n                                   int arcHeight)", "description": "Draws an outlined round-cornered rectangle using this graphics\n context's current color. The left and right edges of the rectangle\n are at x and x\u00a0+\u00a0width,\n respectively. The top and bottom edges of the rectangle are at\n y and y\u00a0+\u00a0height."}, {"method_name": "fillRoundRect", "method_sig": "public abstract void fillRoundRect (int x,\n                                   int y,\n                                   int width,\n                                   int height,\n                                   int arcWidth,\n                                   int arcHeight)", "description": "Fills the specified rounded corner rectangle with the current color.\n The left and right edges of the rectangle\n are at x and x\u00a0+\u00a0width\u00a0-\u00a01,\n respectively. The top and bottom edges of the rectangle are at\n y and y\u00a0+\u00a0height\u00a0-\u00a01."}, {"method_name": "draw3DRect", "method_sig": "public void draw3DRect (int x,\n                       int y,\n                       int width,\n                       int height,\n                       boolean raised)", "description": "Draws a 3-D highlighted outline of the specified rectangle.\n The edges of the rectangle are highlighted so that they\n appear to be beveled and lit from the upper left corner.\n \n The colors used for the highlighting effect are determined\n based on the current color.\n The resulting rectangle covers an area that is\n width\u00a0+\u00a01 pixels wide\n by height\u00a0+\u00a01 pixels tall."}, {"method_name": "fill3DRect", "method_sig": "public void fill3DRect (int x,\n                       int y,\n                       int width,\n                       int height,\n                       boolean raised)", "description": "Paints a 3-D highlighted rectangle filled with the current color.\n The edges of the rectangle will be highlighted so that it appears\n as if the edges were beveled and lit from the upper left corner.\n The colors used for the highlighting effect will be determined from\n the current color."}, {"method_name": "drawOval", "method_sig": "public abstract void drawOval (int x,\n                              int y,\n                              int width,\n                              int height)", "description": "Draws the outline of an oval.\n The result is a circle or ellipse that fits within the\n rectangle specified by the x, y,\n width, and height arguments.\n \n The oval covers an area that is\n width\u00a0+\u00a01 pixels wide\n and height\u00a0+\u00a01 pixels tall."}, {"method_name": "fillOval", "method_sig": "public abstract void fillOval (int x,\n                              int y,\n                              int width,\n                              int height)", "description": "Fills an oval bounded by the specified rectangle with the\n current color."}, {"method_name": "drawArc", "method_sig": "public abstract void drawArc (int x,\n                             int y,\n                             int width,\n                             int height,\n                             int startAngle,\n                             int arcAngle)", "description": "Draws the outline of a circular or elliptical arc\n covering the specified rectangle.\n \n The resulting arc begins at startAngle and extends\n for arcAngle degrees, using the current color.\n Angles are interpreted such that 0\u00a0degrees\n is at the 3\u00a0o'clock position.\n A positive value indicates a counter-clockwise rotation\n while a negative value indicates a clockwise rotation.\n \n The center of the arc is the center of the rectangle whose origin\n is (x,\u00a0y) and whose size is specified by the\n width and height arguments.\n \n The resulting arc covers an area\n width\u00a0+\u00a01 pixels wide\n by height\u00a0+\u00a01 pixels tall.\n \n The angles are specified relative to the non-square extents of\n the bounding rectangle such that 45 degrees always falls on the\n line from the center of the ellipse to the upper right corner of\n the bounding rectangle. As a result, if the bounding rectangle is\n noticeably longer in one axis than the other, the angles to the\n start and end of the arc segment will be skewed farther along the\n longer axis of the bounds."}, {"method_name": "fillArc", "method_sig": "public abstract void fillArc (int x,\n                             int y,\n                             int width,\n                             int height,\n                             int startAngle,\n                             int arcAngle)", "description": "Fills a circular or elliptical arc covering the specified rectangle.\n \n The resulting arc begins at startAngle and extends\n for arcAngle degrees.\n Angles are interpreted such that 0\u00a0degrees\n is at the 3\u00a0o'clock position.\n A positive value indicates a counter-clockwise rotation\n while a negative value indicates a clockwise rotation.\n \n The center of the arc is the center of the rectangle whose origin\n is (x,\u00a0y) and whose size is specified by the\n width and height arguments.\n \n The resulting arc covers an area\n width\u00a0+\u00a01 pixels wide\n by height\u00a0+\u00a01 pixels tall.\n \n The angles are specified relative to the non-square extents of\n the bounding rectangle such that 45 degrees always falls on the\n line from the center of the ellipse to the upper right corner of\n the bounding rectangle. As a result, if the bounding rectangle is\n noticeably longer in one axis than the other, the angles to the\n start and end of the arc segment will be skewed farther along the\n longer axis of the bounds."}, {"method_name": "drawPolyline", "method_sig": "public abstract void drawPolyline (int[] xPoints,\n                                  int[] yPoints,\n                                  int nPoints)", "description": "Draws a sequence of connected lines defined by\n arrays of x and y coordinates.\n Each pair of (x,\u00a0y) coordinates defines a point.\n The figure is not closed if the first point\n differs from the last point."}, {"method_name": "drawPolygon", "method_sig": "public abstract void drawPolygon (int[] xPoints,\n                                 int[] yPoints,\n                                 int nPoints)", "description": "Draws a closed polygon defined by\n arrays of x and y coordinates.\n Each pair of (x,\u00a0y) coordinates defines a point.\n \n This method draws the polygon defined by nPoint line\n segments, where the first nPoint\u00a0-\u00a01\n line segments are line segments from\n (xPoints[i\u00a0-\u00a01],\u00a0yPoints[i\u00a0-\u00a01])\n to (xPoints[i],\u00a0yPoints[i]), for\n 1\u00a0\u2264\u00a0i\u00a0\u2264\u00a0nPoints.\n The figure is automatically closed by drawing a line connecting\n the final point to the first point, if those points are different."}, {"method_name": "drawPolygon", "method_sig": "public void drawPolygon (Polygon p)", "description": "Draws the outline of a polygon defined by the specified\n Polygon object."}, {"method_name": "fillPolygon", "method_sig": "public abstract void fillPolygon (int[] xPoints,\n                                 int[] yPoints,\n                                 int nPoints)", "description": "Fills a closed polygon defined by\n arrays of x and y coordinates.\n \n This method draws the polygon defined by nPoint line\n segments, where the first nPoint\u00a0-\u00a01\n line segments are line segments from\n (xPoints[i\u00a0-\u00a01],\u00a0yPoints[i\u00a0-\u00a01])\n to (xPoints[i],\u00a0yPoints[i]), for\n 1\u00a0\u2264\u00a0i\u00a0\u2264\u00a0nPoints.\n The figure is automatically closed by drawing a line connecting\n the final point to the first point, if those points are different.\n \n The area inside the polygon is defined using an\n even-odd fill rule, also known as the alternating rule."}, {"method_name": "fillPolygon", "method_sig": "public void fillPolygon (Polygon p)", "description": "Fills the polygon defined by the specified Polygon object with\n the graphics context's current color.\n \n The area inside the polygon is defined using an\n even-odd fill rule, also known as the alternating rule."}, {"method_name": "drawString", "method_sig": "public abstract void drawString (String str,\n                                int x,\n                                int y)", "description": "Draws the text given by the specified string, using this\n graphics context's current font and color. The baseline of the\n leftmost character is at position (x,\u00a0y) in this\n graphics context's coordinate system."}, {"method_name": "drawString", "method_sig": "public abstract void drawString (AttributedCharacterIterator iterator,\n                                int x,\n                                int y)", "description": "Renders the text of the specified iterator applying its attributes\n in accordance with the specification of the\n TextAttribute class.\n \n The baseline of the leftmost character is at position\n (x,\u00a0y) in this graphics context's coordinate system."}, {"method_name": "drawChars", "method_sig": "public void drawChars (char[] data,\n                      int offset,\n                      int length,\n                      int x,\n                      int y)", "description": "Draws the text given by the specified character array, using this\n graphics context's current font and color. The baseline of the\n first character is at position (x,\u00a0y) in this\n graphics context's coordinate system."}, {"method_name": "drawBytes", "method_sig": "public void drawBytes (byte[] data,\n                      int offset,\n                      int length,\n                      int x,\n                      int y)", "description": "Draws the text given by the specified byte array, using this\n graphics context's current font and color. The baseline of the\n first character is at position (x,\u00a0y) in this\n graphics context's coordinate system.\n \n Use of this method is not recommended as each byte is interpreted\n as a Unicode code point in the range 0 to 255, and so can only be\n used to draw Latin characters in that range."}, {"method_name": "drawImage", "method_sig": "public abstract boolean drawImage (Image img,\n                                  int x,\n                                  int y,\n                                  ImageObserver observer)", "description": "Draws as much of the specified image as is currently available.\n The image is drawn with its top-left corner at\n (x,\u00a0y) in this graphics context's coordinate\n space. Transparent pixels in the image do not affect whatever\n pixels are already there.\n \n This method returns immediately in all cases, even if the\n complete image has not yet been loaded, and it has not been dithered\n and converted for the current output device.\n \n If the image has completely loaded and its pixels are\n no longer being changed, then\n drawImage returns true.\n Otherwise, drawImage returns false\n and as more of\n the image becomes available\n or it is time to draw another frame of animation,\n the process that loads the image notifies\n the specified image observer."}, {"method_name": "drawImage", "method_sig": "public abstract boolean drawImage (Image img,\n                                  int x,\n                                  int y,\n                                  int width,\n                                  int height,\n                                  ImageObserver observer)", "description": "Draws as much of the specified image as has already been scaled\n to fit inside the specified rectangle.\n \n The image is drawn inside the specified rectangle of this\n graphics context's coordinate space, and is scaled if\n necessary. Transparent pixels do not affect whatever pixels\n are already there.\n \n This method returns immediately in all cases, even if the\n entire image has not yet been scaled, dithered, and converted\n for the current output device.\n If the current output representation is not yet complete, then\n drawImage returns false. As more of\n the image becomes available, the process that loads the image notifies\n the image observer by calling its imageUpdate method.\n \n A scaled version of an image will not necessarily be\n available immediately just because an unscaled version of the\n image has been constructed for this output device.  Each size of\n the image may be cached separately and generated from the original\n data in a separate image production sequence."}, {"method_name": "drawImage", "method_sig": "public abstract boolean drawImage (Image img,\n                                  int x,\n                                  int y,\n                                  Color bgcolor,\n                                  ImageObserver observer)", "description": "Draws as much of the specified image as is currently available.\n The image is drawn with its top-left corner at\n (x,\u00a0y) in this graphics context's coordinate\n space.  Transparent pixels are drawn in the specified\n background color.\n \n This operation is equivalent to filling a rectangle of the\n width and height of the specified image with the given color and then\n drawing the image on top of it, but possibly more efficient.\n \n This method returns immediately in all cases, even if the\n complete image has not yet been loaded, and it has not been dithered\n and converted for the current output device.\n \n If the image has completely loaded and its pixels are\n no longer being changed, then\n drawImage returns true.\n Otherwise, drawImage returns false\n and as more of\n the image becomes available\n or it is time to draw another frame of animation,\n the process that loads the image notifies\n the specified image observer."}, {"method_name": "drawImage", "method_sig": "public abstract boolean drawImage (Image img,\n                                  int x,\n                                  int y,\n                                  int width,\n                                  int height,\n                                  Color bgcolor,\n                                  ImageObserver observer)", "description": "Draws as much of the specified image as has already been scaled\n to fit inside the specified rectangle.\n \n The image is drawn inside the specified rectangle of this\n graphics context's coordinate space, and is scaled if\n necessary. Transparent pixels are drawn in the specified\n background color.\n This operation is equivalent to filling a rectangle of the\n width and height of the specified image with the given color and then\n drawing the image on top of it, but possibly more efficient.\n \n This method returns immediately in all cases, even if the\n entire image has not yet been scaled, dithered, and converted\n for the current output device.\n If the current output representation is not yet complete then\n drawImage returns false. As more of\n the image becomes available, the process that loads the image notifies\n the specified image observer.\n \n A scaled version of an image will not necessarily be\n available immediately just because an unscaled version of the\n image has been constructed for this output device.  Each size of\n the image may be cached separately and generated from the original\n data in a separate image production sequence."}, {"method_name": "drawImage", "method_sig": "public abstract boolean drawImage (Image img,\n                                  int dx1,\n                                  int dy1,\n                                  int dx2,\n                                  int dy2,\n                                  int sx1,\n                                  int sy1,\n                                  int sx2,\n                                  int sy2,\n                                  ImageObserver observer)", "description": "Draws as much of the specified area of the specified image as is\n currently available, scaling it on the fly to fit inside the\n specified area of the destination drawable surface. Transparent pixels\n do not affect whatever pixels are already there.\n \n This method returns immediately in all cases, even if the\n image area to be drawn has not yet been scaled, dithered, and converted\n for the current output device.\n If the current output representation is not yet complete then\n drawImage returns false. As more of\n the image becomes available, the process that loads the image notifies\n the specified image observer.\n \n This method always uses the unscaled version of the image\n to render the scaled rectangle and performs the required\n scaling on the fly. It does not use a cached, scaled version\n of the image for this operation. Scaling of the image from source\n to destination is performed such that the first coordinate\n of the source rectangle is mapped to the first coordinate of\n the destination rectangle, and the second source coordinate is\n mapped to the second destination coordinate. The subimage is\n scaled and flipped as needed to preserve those mappings."}, {"method_name": "drawImage", "method_sig": "public abstract boolean drawImage (Image img,\n                                  int dx1,\n                                  int dy1,\n                                  int dx2,\n                                  int dy2,\n                                  int sx1,\n                                  int sy1,\n                                  int sx2,\n                                  int sy2,\n                                  Color bgcolor,\n                                  ImageObserver observer)", "description": "Draws as much of the specified area of the specified image as is\n currently available, scaling it on the fly to fit inside the\n specified area of the destination drawable surface.\n \n Transparent pixels are drawn in the specified background color.\n This operation is equivalent to filling a rectangle of the\n width and height of the specified image with the given color and then\n drawing the image on top of it, but possibly more efficient.\n \n This method returns immediately in all cases, even if the\n image area to be drawn has not yet been scaled, dithered, and converted\n for the current output device.\n If the current output representation is not yet complete then\n drawImage returns false. As more of\n the image becomes available, the process that loads the image notifies\n the specified image observer.\n \n This method always uses the unscaled version of the image\n to render the scaled rectangle and performs the required\n scaling on the fly. It does not use a cached, scaled version\n of the image for this operation. Scaling of the image from source\n to destination is performed such that the first coordinate\n of the source rectangle is mapped to the first coordinate of\n the destination rectangle, and the second source coordinate is\n mapped to the second destination coordinate. The subimage is\n scaled and flipped as needed to preserve those mappings."}, {"method_name": "dispose", "method_sig": "public abstract void dispose()", "description": "Disposes of this graphics context and releases\n any system resources that it is using.\n A Graphics object cannot be used after\n dispose has been called.\n \n When a Java program runs, a large number of Graphics\n objects can be created within a short time frame.\n Although the finalization process of the garbage collector\n also disposes of the same system resources, it is preferable\n to manually free the associated resources by calling this\n method rather than to rely on a finalization process which\n may not run to completion for a long period of time.\n \n Graphics objects which are provided as arguments to the\n paint and update methods\n of components are automatically released by the system when\n those methods return. For efficiency, programmers should\n call dispose when finished using\n a Graphics object only if it was created\n directly from a component or another Graphics object."}, {"method_name": "finalize", "method_sig": "@Deprecated(since=\"9\")\npublic void finalize()", "description": "Disposes of this graphics context once it is no longer referenced."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a String object representing this\n                        Graphics object's value."}, {"method_name": "getClipRect", "method_sig": "@Deprecated\npublic Rectangle getClipRect()", "description": "Returns the bounding rectangle of the current clipping area."}, {"method_name": "hitClip", "method_sig": "public boolean hitClip (int x,\n                       int y,\n                       int width,\n                       int height)", "description": "Returns true if the specified rectangular area might intersect\n the current clipping area.\n The coordinates of the specified rectangular area are in the\n user coordinate space and are relative to the coordinate\n system origin of this graphics context.\n This method may use an algorithm that calculates a result quickly\n but which sometimes might return true even if the specified\n rectangular area does not intersect the clipping area.\n The specific algorithm employed may thus trade off accuracy for\n speed, but it will never return false unless it can guarantee\n that the specified rectangular area does not intersect the\n current clipping area.\n The clipping area used by this method can represent the\n intersection of the user clip as specified through the clip\n methods of this graphics context as well as the clipping\n associated with the device or image bounds and window visibility."}, {"method_name": "getClipBounds", "method_sig": "public Rectangle getClipBounds (Rectangle r)", "description": "Returns the bounding rectangle of the current clipping area.\n The coordinates in the rectangle are relative to the coordinate\n system origin of this graphics context.  This method differs\n from getClipBounds in that an existing\n rectangle is used instead of allocating a new one.\n This method refers to the user clip, which is independent of the\n clipping associated with device bounds and window visibility.\n  If no clip has previously been set, or if the clip has been\n cleared using setClip(null), this method returns the\n specified Rectangle."}]}