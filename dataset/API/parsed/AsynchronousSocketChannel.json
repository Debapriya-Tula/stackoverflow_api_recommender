{"name": "Class AsynchronousSocketChannel", "module": "java.base", "package": "java.nio.channels", "text": "An asynchronous channel for stream-oriented connecting sockets.\n\n  Asynchronous socket channels are created in one of two ways. A newly-created\n AsynchronousSocketChannel is created by invoking one of the open methods defined by this class. A newly-created channel is open but\n not yet connected. A connected AsynchronousSocketChannel is created\n when a connection is made to the socket of an AsynchronousServerSocketChannel.\n It is not possible to create an asynchronous socket channel for an arbitrary,\n pre-existing socket.\n\n  A newly-created channel is connected by invoking its connect\n method; once connected, a channel remains connected until it is closed.  Whether\n or not a socket channel is connected may be determined by invoking its getRemoteAddress method. An attempt to invoke an I/O\n operation upon an unconnected channel will cause a NotYetConnectedException\n to be thrown.\n\n  Channels of this type are safe for use by multiple concurrent threads.\n They support concurrent reading and writing, though at most one read operation\n and one write operation can be outstanding at any time.\n If a thread initiates a read operation before a previous read operation has\n completed then a ReadPendingException will be thrown. Similarly, an\n attempt to initiate a write operation before a previous write has completed\n will throw a WritePendingException.\n\n  Socket options are configured using the setOption method. Asynchronous socket channels support the following options:\n \n\nSocket options\n\n\nOption Name\nDescription\n\n\n\n\n SO_SNDBUF \n The size of the socket send buffer \n\n\n SO_RCVBUF \n The size of the socket receive buffer \n\n\n SO_KEEPALIVE \n Keep connection alive \n\n\n SO_REUSEADDR \n Re-use address \n\n\n TCP_NODELAY \n Disable the Nagle algorithm \n\n\n\n\n Additional (implementation specific) options may also be supported.\n\n Timeouts\n The read\n and write\n methods defined by this class allow a timeout to be specified when initiating\n a read or write operation. If the timeout elapses before an operation completes\n then the operation completes with the exception InterruptedByTimeoutException. A timeout may leave the channel, or the\n underlying connection, in an inconsistent state. Where the implementation\n cannot guarantee that bytes have not been read from the channel then it puts\n the channel into an implementation specific error state. A subsequent\n attempt to initiate a read operation causes an unspecified runtime\n exception to be thrown. Similarly if a write operation times out and\n the implementation cannot guarantee bytes have not been written to the\n channel then further attempts to write to the channel cause an\n unspecified runtime exception to be thrown. When a timeout elapses then the\n state of the ByteBuffer, or the sequence of buffers, for the I/O\n operation is not defined. Buffers should be discarded or at least care must\n be taken to ensure that the buffers are not accessed while the channel remains\n open. All methods that accept timeout parameters treat values less than or\n equal to zero to mean that the I/O operation does not timeout.", "codes": ["public abstract class AsynchronousSocketChannel\nextends Object\nimplements AsynchronousByteChannel, NetworkChannel"], "fields": [], "methods": [{"method_name": "provider", "method_sig": "public final AsynchronousChannelProvider provider()", "description": "Returns the provider that created this channel."}, {"method_name": "open", "method_sig": "public static AsynchronousSocketChannel open (AsynchronousChannelGroup group)\n                                      throws IOException", "description": "Opens an asynchronous socket channel.\n\n  The new channel is created by invoking the openAsynchronousSocketChannel method on the AsynchronousChannelProvider that created the group. If the group parameter\n is null then the resulting channel is created by the system-wide\n default provider, and bound to the default group."}, {"method_name": "open", "method_sig": "public static AsynchronousSocketChannel open()\n                                      throws IOException", "description": "Opens an asynchronous socket channel.\n\n  This method returns an asynchronous socket channel that is bound to\n the default group.This method is equivalent to evaluating the\n expression:\n \n open((AsynchronousChannelGroup)null);\n "}, {"method_name": "bind", "method_sig": "public abstract AsynchronousSocketChannel bind (SocketAddress local)\n                                        throws IOException", "description": "Description copied from interface:\u00a0NetworkChannel"}, {"method_name": "setOption", "method_sig": "public abstract <T> AsynchronousSocketChannel setOption (SocketOption<T> name,\n                                                        T value)\n                                                 throws IOException", "description": "Description copied from interface:\u00a0NetworkChannel"}, {"method_name": "shutdownInput", "method_sig": "public abstract AsynchronousSocketChannel shutdownInput()\n                                                 throws IOException", "description": "Shutdown the connection for reading without closing the channel.\n\n  Once shutdown for reading then further reads on the channel will\n return -1, the end-of-stream indication. If the input side of the\n connection is already shutdown then invoking this method has no effect.\n The effect on an outstanding read operation is system dependent and\n therefore not specified. The effect, if any, when there is data in the\n socket receive buffer that has not been read, or data arrives subsequently,\n is also system dependent."}, {"method_name": "shutdownOutput", "method_sig": "public abstract AsynchronousSocketChannel shutdownOutput()\n                                                  throws IOException", "description": "Shutdown the connection for writing without closing the channel.\n\n  Once shutdown for writing then further attempts to write to the\n channel will throw ClosedChannelException. If the output side of\n the connection is already shutdown then invoking this method has no\n effect. The effect on an outstanding write operation is system dependent\n and therefore not specified."}, {"method_name": "getRemoteAddress", "method_sig": "public abstract SocketAddress getRemoteAddress()\n                                        throws IOException", "description": "Returns the remote address to which this channel's socket is connected.\n\n  Where the channel is bound and connected to an Internet Protocol\n socket address then the return value from this method is of type InetSocketAddress."}, {"method_name": "connect", "method_sig": "public abstract <A> void connect (SocketAddress remote,\n                                 A attachment,\n                                 CompletionHandler<Void, ? super A> handler)", "description": "Connects this channel.\n\n  This method initiates an operation to connect this channel. The\n handler parameter is a completion handler that is invoked when\n the connection is successfully established or connection cannot be\n established. If the connection cannot be established then the channel is\n closed.\n\n  This method performs exactly the same security checks as the Socket class.  That is, if a security manager has been\n installed then this method verifies that its checkConnect method permits\n connecting to the address and port number of the given remote endpoint."}, {"method_name": "connect", "method_sig": "public abstract Future<Void> connect (SocketAddress remote)", "description": "Connects this channel.\n\n  This method initiates an operation to connect this channel. This\n method behaves in exactly the same manner as the connect(SocketAddress, Object, CompletionHandler) method except that\n instead of specifying a completion handler, this method returns a \n Future representing the pending result. The Future's get method returns null on successful completion."}, {"method_name": "read", "method_sig": "public abstract <A> void read (ByteBuffer dst,\n                              long timeout,\n                              TimeUnit unit,\n                              A attachment,\n                              CompletionHandler<Integer, ? super A> handler)", "description": "Reads a sequence of bytes from this channel into the given buffer.\n\n  This method initiates an asynchronous read operation to read a\n sequence of bytes from this channel into the given buffer. The \n handler parameter is a completion handler that is invoked when the read\n operation completes (or fails). The result passed to the completion\n handler is the number of bytes read or -1 if no bytes could be\n read because the channel has reached end-of-stream.\n\n  If a timeout is specified and the timeout elapses before the operation\n completes then the operation completes with the exception InterruptedByTimeoutException. Where a timeout occurs, and the\n implementation cannot guarantee that bytes have not been read, or will not\n be read from the channel into the given buffer, then further attempts to\n read from the channel will cause an unspecific runtime exception to be\n thrown.\n\n  Otherwise this method works in the same manner as the AsynchronousByteChannel.read(ByteBuffer,Object,CompletionHandler)\n method."}, {"method_name": "read", "method_sig": "public final <A> void read (ByteBuffer dst,\n                           A attachment,\n                           CompletionHandler<Integer, ? super A> handler)", "description": "Description copied from interface:\u00a0AsynchronousByteChannel"}, {"method_name": "read", "method_sig": "public abstract Future<Integer> read (ByteBuffer dst)", "description": "Description copied from interface:\u00a0AsynchronousByteChannel"}, {"method_name": "read", "method_sig": "public abstract <A> void read (ByteBuffer[] dsts,\n                              int offset,\n                              int length,\n                              long timeout,\n                              TimeUnit unit,\n                              A attachment,\n                              CompletionHandler<Long, ? super A> handler)", "description": "Reads a sequence of bytes from this channel into a subsequence of the\n given buffers. This operation, sometimes called a scattering read,\n is often useful when implementing network protocols that group data into\n segments consisting of one or more fixed-length headers followed by a\n variable-length body. The handler parameter is a completion\n handler that is invoked when the read operation completes (or fails). The\n result passed to the completion handler is the number of bytes read or\n -1 if no bytes could be read because the channel has reached\n end-of-stream.\n\n  This method initiates a read of up to r bytes from this channel,\n where r is the total number of bytes remaining in the specified\n subsequence of the given buffer array, that is,\n\n \n dsts[offset].remaining()\n     + dsts[offset+1].remaining()\n     + ... + dsts[offset+length-1].remaining()\n\n at the moment that the read is attempted.\n\n  Suppose that a byte sequence of length n is read, where\n 0\u00a0<\u00a0n\u00a0<=\u00a0r.\n Up to the first dsts[offset].remaining() bytes of this sequence\n are transferred into buffer dsts[offset], up to the next\n dsts[offset+1].remaining() bytes are transferred into buffer\n dsts[offset+1], and so forth, until the entire byte sequence\n is transferred into the given buffers.  As many bytes as possible are\n transferred into each buffer, hence the final position of each updated\n buffer, except the last updated buffer, is guaranteed to be equal to\n that buffer's limit. The underlying operating system may impose a limit\n on the number of buffers that may be used in an I/O operation. Where the\n number of buffers (with bytes remaining), exceeds this limit, then the\n I/O operation is performed with the maximum number of buffers allowed by\n the operating system.\n\n  If a timeout is specified and the timeout elapses before the operation\n completes then it completes with the exception InterruptedByTimeoutException. Where a timeout occurs, and the\n implementation cannot guarantee that bytes have not been read, or will not\n be read from the channel into the given buffers, then further attempts to\n read from the channel will cause an unspecific runtime exception to be\n thrown."}, {"method_name": "write", "method_sig": "public abstract <A> void write (ByteBuffer src,\n                               long timeout,\n                               TimeUnit unit,\n                               A attachment,\n                               CompletionHandler<Integer, ? super A> handler)", "description": "Writes a sequence of bytes to this channel from the given buffer.\n\n  This method initiates an asynchronous write operation to write a\n sequence of bytes to this channel from the given buffer. The \n handler parameter is a completion handler that is invoked when the write\n operation completes (or fails). The result passed to the completion\n handler is the number of bytes written.\n\n  If a timeout is specified and the timeout elapses before the operation\n completes then it completes with the exception InterruptedByTimeoutException. Where a timeout occurs, and the\n implementation cannot guarantee that bytes have not been written, or will\n not be written to the channel from the given buffer, then further attempts\n to write to the channel will cause an unspecific runtime exception to be\n thrown.\n\n  Otherwise this method works in the same manner as the AsynchronousByteChannel.write(ByteBuffer,Object,CompletionHandler)\n method."}, {"method_name": "write", "method_sig": "public final <A> void write (ByteBuffer src,\n                            A attachment,\n                            CompletionHandler<Integer, ? super A> handler)", "description": "Description copied from interface:\u00a0AsynchronousByteChannel"}, {"method_name": "write", "method_sig": "public abstract Future<Integer> write (ByteBuffer src)", "description": "Description copied from interface:\u00a0AsynchronousByteChannel"}, {"method_name": "write", "method_sig": "public abstract <A> void write (ByteBuffer[] srcs,\n                               int offset,\n                               int length,\n                               long timeout,\n                               TimeUnit unit,\n                               A attachment,\n                               CompletionHandler<Long, ? super A> handler)", "description": "Writes a sequence of bytes to this channel from a subsequence of the given\n buffers. This operation, sometimes called a gathering write, is\n often useful when implementing network protocols that group data into\n segments consisting of one or more fixed-length headers followed by a\n variable-length body. The handler parameter is a completion\n handler that is invoked when the write operation completes (or fails).\n The result passed to the completion handler is the number of bytes written.\n\n  This method initiates a write of up to r bytes to this channel,\n where r is the total number of bytes remaining in the specified\n subsequence of the given buffer array, that is,\n\n \n srcs[offset].remaining()\n     + srcs[offset+1].remaining()\n     + ... + srcs[offset+length-1].remaining()\n\n at the moment that the write is attempted.\n\n  Suppose that a byte sequence of length n is written, where\n 0\u00a0<\u00a0n\u00a0<=\u00a0r.\n Up to the first srcs[offset].remaining() bytes of this sequence\n are written from buffer srcs[offset], up to the next\n srcs[offset+1].remaining() bytes are written from buffer\n srcs[offset+1], and so forth, until the entire byte sequence is\n written.  As many bytes as possible are written from each buffer, hence\n the final position of each updated buffer, except the last updated\n buffer, is guaranteed to be equal to that buffer's limit. The underlying\n operating system may impose a limit on the number of buffers that may be\n used in an I/O operation. Where the number of buffers (with bytes\n remaining), exceeds this limit, then the I/O operation is performed with\n the maximum number of buffers allowed by the operating system.\n\n  If a timeout is specified and the timeout elapses before the operation\n completes then it completes with the exception InterruptedByTimeoutException. Where a timeout occurs, and the\n implementation cannot guarantee that bytes have not been written, or will\n not be written to the channel from the given buffers, then further attempts\n to write to the channel will cause an unspecific runtime exception to be\n thrown."}, {"method_name": "getLocalAddress", "method_sig": "public abstract SocketAddress getLocalAddress()\n                                       throws IOException", "description": "Returns the socket address that this channel's socket is bound to.\n\n  Where the channel is bound to an Internet Protocol\n socket address then the return value from this method is of type InetSocketAddress.\n \n If there is a security manager set, its checkConnect method is\n called with the local address and -1 as its arguments to see\n if the operation is allowed. If the operation is not allowed,\n a SocketAddress representing the\n loopback address and the\n local port of the channel's socket is returned."}]}