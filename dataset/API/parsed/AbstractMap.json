{"name": "Class AbstractMap<K,\u200bV>", "module": "java.base", "package": "java.util", "text": "This class provides a skeletal implementation of the Map\n interface, to minimize the effort required to implement this interface.\n\n To implement an unmodifiable map, the programmer needs only to extend this\n class and provide an implementation for the entrySet method, which\n returns a set-view of the map's mappings.  Typically, the returned set\n will, in turn, be implemented atop AbstractSet.  This set should\n not support the add or remove methods, and its iterator\n should not support the remove method.\n\n To implement a modifiable map, the programmer must additionally override\n this class's put method (which otherwise throws an\n UnsupportedOperationException), and the iterator returned by\n entrySet().iterator() must additionally implement its\n remove method.\n\n The programmer should generally provide a void (no argument) and map\n constructor, as per the recommendation in the Map interface\n specification.\n\n The documentation for each non-abstract method in this class describes its\n implementation in detail.  Each of these methods may be overridden if the\n map being implemented admits a more efficient implementation.\n\n This class is a member of the\n \n Java Collections Framework.", "codes": ["public abstract class AbstractMap<K, V>\nextends Object\nimplements Map<K, V>"], "fields": [], "methods": [{"method_name": "size", "method_sig": "public int size()", "description": "Returns the number of key-value mappings in this map.  If the\n map contains more than Integer.MAX_VALUE elements, returns\n Integer.MAX_VALUE."}, {"method_name": "isEmpty", "method_sig": "public boolean isEmpty()", "description": "Returns true if this map contains no key-value mappings."}, {"method_name": "containsValue", "method_sig": "public boolean containsValue (Object value)", "description": "Returns true if this map maps one or more keys to the\n specified value.  More formally, returns true if and only if\n this map contains at least one mapping to a value v such that\n Objects.equals(value, v).  This operation\n will probably require time linear in the map size for most\n implementations of the Map interface."}, {"method_name": "containsKey", "method_sig": "public boolean containsKey (Object key)", "description": "Returns true if this map contains a mapping for the specified\n key.  More formally, returns true if and only if\n this map contains a mapping for a key k such that\n Objects.equals(key, k).  (There can be\n at most one such mapping.)"}, {"method_name": "get", "method_sig": "public V get (Object key)", "description": "Returns the value to which the specified key is mapped,\n or null if this map contains no mapping for the key.\n\n More formally, if this map contains a mapping from a key\n k to a value v such that\n Objects.equals(key, k),\n then this method returns v; otherwise\n it returns null.  (There can be at most one such mapping.)\n\n If this map permits null values, then a return value of\n null does not necessarily indicate that the map\n contains no mapping for the key; it's also possible that the map\n explicitly maps the key to null.  The containsKey operation may be used to distinguish these two cases."}, {"method_name": "put", "method_sig": "public V put (K key,\n             V value)", "description": "Associates the specified value with the specified key in this map\n (optional operation).  If the map previously contained a mapping for\n the key, the old value is replaced by the specified value.  (A map\n m is said to contain a mapping for a key k if and only\n if m.containsKey(k) would return\n true.)"}, {"method_name": "remove", "method_sig": "public V remove (Object key)", "description": "Removes the mapping for a key from this map if it is present\n (optional operation).   More formally, if this map contains a mapping\n from key k to value v such that\n Objects.equals(key, k), that mapping\n is removed.  (The map can contain at most one such mapping.)\n\n Returns the value to which this map previously associated the key,\n or null if the map contained no mapping for the key.\n\n If this map permits null values, then a return value of\n null does not necessarily indicate that the map\n contained no mapping for the key; it's also possible that the map\n explicitly mapped the key to null.\n\n The map will not contain a mapping for the specified key once the\n call returns."}, {"method_name": "putAll", "method_sig": "public void putAll (Map<? extends K, ? extends V> m)", "description": "Copies all of the mappings from the specified map to this map\n (optional operation).  The effect of this call is equivalent to that\n of calling put(k, v) on this map once\n for each mapping from key k to value v in the\n specified map.  The behavior of this operation is undefined if the\n specified map is modified while the operation is in progress."}, {"method_name": "clear", "method_sig": "public void clear()", "description": "Removes all of the mappings from this map (optional operation).\n The map will be empty after this call returns."}, {"method_name": "keySet", "method_sig": "public Set<K> keySet()", "description": "Returns a Set view of the keys contained in this map.\n The set is backed by the map, so changes to the map are\n reflected in the set, and vice-versa.  If the map is modified\n while an iteration over the set is in progress (except through\n the iterator's own remove operation), the results of\n the iteration are undefined.  The set supports element removal,\n which removes the corresponding mapping from the map, via the\n Iterator.remove, Set.remove,\n removeAll, retainAll, and clear\n operations.  It does not support the add or addAll\n operations."}, {"method_name": "values", "method_sig": "public Collection<V> values()", "description": "Returns a Collection view of the values contained in this map.\n The collection is backed by the map, so changes to the map are\n reflected in the collection, and vice-versa.  If the map is\n modified while an iteration over the collection is in progress\n (except through the iterator's own remove operation),\n the results of the iteration are undefined.  The collection\n supports element removal, which removes the corresponding\n mapping from the map, via the Iterator.remove,\n Collection.remove, removeAll,\n retainAll and clear operations.  It does not\n support the add or addAll operations."}, {"method_name": "equals", "method_sig": "public boolean equals (Object o)", "description": "Compares the specified object with this map for equality.  Returns\n true if the given object is also a map and the two maps\n represent the same mappings.  More formally, two maps m1 and\n m2 represent the same mappings if\n m1.entrySet().equals(m2.entrySet()).  This ensures that the\n equals method works properly across different implementations\n of the Map interface."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Returns the hash code value for this map.  The hash code of a map is\n defined to be the sum of the hash codes of each entry in the map's\n entrySet() view.  This ensures that m1.equals(m2)\n implies that m1.hashCode()==m2.hashCode() for any two maps\n m1 and m2, as required by the general contract of\n Object.hashCode()."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a string representation of this map.  The string representation\n consists of a list of key-value mappings in the order returned by the\n map's entrySet view's iterator, enclosed in braces\n (\"{}\").  Adjacent mappings are separated by the characters\n \", \" (comma and space).  Each key-value mapping is rendered as\n the key followed by an equals sign (\"=\") followed by the\n associated value.  Keys and values are converted to strings as by\n String.valueOf(Object)."}, {"method_name": "clone", "method_sig": "protected Object clone()\n                throws CloneNotSupportedException", "description": "Returns a shallow copy of this AbstractMap instance: the keys\n and values themselves are not cloned."}]}