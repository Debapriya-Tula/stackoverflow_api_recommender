{"name": "Class JViewport", "module": "java.desktop", "package": "javax.swing", "text": "The \"viewport\" or \"porthole\" through which you see the underlying\n information. When you scroll, what moves is the viewport. It is like\n peering through a camera's viewfinder. Moving the viewfinder upwards\n brings new things into view at the top of the picture and loses\n things that were at the bottom.\n \n By default, JViewport is opaque. To change this, use the\n setOpaque method.\n \nNOTE:We have implemented a faster scrolling algorithm that\n does not require a buffer to draw in. The algorithm works as follows:\n The view and parent view are checked to see if they are\n JComponents,\n if they aren't, stop and repaint the whole viewport.\n If the viewport is obscured by an ancestor, stop and repaint the whole\n viewport.\n Compute the region that will become visible, if it is as big as\n the viewport, stop and repaint the whole view region.\n Obtain the ancestor Window's graphics and\n do a copyArea on the scrolled region.\n Message the view to repaint the newly visible region.\n The next time paint is invoked on the viewport, if the clip region\n is smaller than the viewport size a timer is kicked off to repaint the\n whole region.\n \n In general this approach is much faster. Compared to the backing store\n approach this avoids the overhead of maintaining an offscreen buffer and\n having to do two copyAreas.\n Compared to the non backing store case this\n approach will greatly reduce the painted region.\n \n This approach can cause slower times than the backing store approach\n when the viewport is obscured by another window, or partially offscreen.\n When another window\n obscures the viewport the copyArea will copy garbage and a\n paint event will be generated by the system to inform us we need to\n paint the newly exposed region. The only way to handle this is to\n repaint the whole viewport, which can cause slower performance than the\n backing store case. In most applications very rarely will the user be\n scrolling while the viewport is obscured by another window or offscreen,\n so this optimization is usually worth the performance hit when obscured.\n \nWarning: Swing is not thread safe. For more\n information see Swing's Threading\n Policy.\n \nWarning:\n Serialized objects of this class will not be compatible with\n future Swing releases. The current serialization support is\n appropriate for short term storage or RMI between applications running\n the same version of Swing.  As of 1.4, support for long term storage\n of all JavaBeans\u2122\n has been added to the java.beans package.\n Please see XMLEncoder.", "codes": ["public class JViewport\nextends JComponent\nimplements Accessible"], "fields": [{"field_name": "isViewSizeSet", "field_sig": "protected\u00a0boolean isViewSizeSet", "description": "True when the viewport dimensions have been determined.\n The default is false."}, {"field_name": "lastPaintPosition", "field_sig": "protected\u00a0Point lastPaintPosition", "description": "The last viewPosition that we've painted, so we know how\n much of the backing store image is valid."}, {"field_name": "backingStore", "field_sig": "@Deprecated\nprotected\u00a0boolean backingStore", "description": "True when this viewport is maintaining an offscreen image of its\n contents, so that some scrolling can take place using fast \"bit-blit\"\n operations instead of by accessing the view object to construct the\n display.  The default is false."}, {"field_name": "backingStoreImage", "field_sig": "protected transient\u00a0Image backingStoreImage", "description": "The view image used for a backing store."}, {"field_name": "scrollUnderway", "field_sig": "protected\u00a0boolean scrollUnderway", "description": "The scrollUnderway flag is used for components like\n JList.  When the downarrow key is pressed on a\n JList and the selected\n cell is the last in the list, the scrollpane autoscrolls.\n Here, the old selected cell needs repainting and so we need\n a flag to make the viewport do the optimized painting\n only when there is an explicit call to\n setViewPosition(Point).\n When setBounds is called through other routes,\n the flag is off and the view repaints normally.  Another approach\n would be to remove this from the JViewport\n class and have the JList manage this case by using\n setBackingStoreEnabled.  The default is\n false."}, {"field_name": "BLIT_SCROLL_MODE", "field_sig": "public static final\u00a0int BLIT_SCROLL_MODE", "description": "Use graphics.copyArea to implement scrolling.\n This is the fastest for most applications."}, {"field_name": "BACKINGSTORE_SCROLL_MODE", "field_sig": "public static final\u00a0int BACKINGSTORE_SCROLL_MODE", "description": "Draws viewport contents into an offscreen image.\n This was previously the default mode for JTable.\n This mode may offer advantages over \"blit mode\"\n in some cases, but it requires a large chunk of extra RAM."}, {"field_name": "SIMPLE_SCROLL_MODE", "field_sig": "public static final\u00a0int SIMPLE_SCROLL_MODE", "description": "This mode uses the very simple method of redrawing the entire\n contents of the scrollpane each time it is scrolled.\n This was the default behavior in Swing 1.0 and Swing 1.1.\n Either of the other two options will provide better performance\n in most cases."}], "methods": [{"method_name": "getUI", "method_sig": "public ViewportUI getUI()", "description": "Returns the L&F object that renders this component."}, {"method_name": "setUI", "method_sig": "@BeanProperty(hidden=true,\n              visualUpdate=true,\n              description=\"The UI object that implements the Component\\'s LookAndFeel.\")\npublic void setUI (ViewportUI ui)", "description": "Sets the L&F object that renders this component."}, {"method_name": "updateUI", "method_sig": "public void updateUI()", "description": "Resets the UI property to a value from the current look and feel."}, {"method_name": "getUIClassID", "method_sig": "public String getUIClassID()", "description": "Returns a string that specifies the name of the L&F class\n that renders this component."}, {"method_name": "addImpl", "method_sig": "protected void addImpl (Component child,\n                       Object constraints,\n                       int index)", "description": "Sets the JViewport's one lightweight child,\n which can be null.\n (Since there is only one child which occupies the entire viewport,\n the constraints and index\n arguments are ignored.)"}, {"method_name": "remove", "method_sig": "public void remove (Component child)", "description": "Removes the Viewports one lightweight child."}, {"method_name": "scrollRectToVisible", "method_sig": "public void scrollRectToVisible (Rectangle contentRect)", "description": "Scrolls the view so that Rectangle\n within the view becomes visible.\n \n This attempts to validate the view before scrolling if the\n view is currently not valid - isValid returns false.\n To avoid excessive validation when the containment hierarchy is\n being created this will not validate if one of the ancestors does not\n have a peer, or there is no validate root ancestor, or one of the\n ancestors is not a Window or Applet.\n \n Note that this method will not scroll outside of the\n valid viewport; for example, if contentRect is larger\n than the viewport, scrolling will be confined to the viewport's\n bounds."}, {"method_name": "setBorder", "method_sig": "public final void setBorder (Border border)", "description": "The viewport \"scrolls\" its child (called the \"view\") by the\n normal parent/child clipping (typically the view is moved in\n the opposite direction of the scroll).  A non-null border,\n or non-zero insets, isn't supported, to prevent the geometry\n of this component from becoming complex enough to inhibit\n subclassing.  To create a JViewport with a border,\n add it to a JPanel that has a border.\n Note:  If border is non-null, this\n method will throw an exception as borders are not supported on\n a JViewPort."}, {"method_name": "getInsets", "method_sig": "public final Insets getInsets()", "description": "Returns the insets (border) dimensions as (0,0,0,0), since borders\n are not supported on a JViewport."}, {"method_name": "getInsets", "method_sig": "@BeanProperty(expert=true)\npublic final Insets getInsets (Insets insets)", "description": "Returns an Insets object containing this\n JViewports inset values.  The passed-in\n Insets object will be reinitialized, and\n all existing values within this object are overwritten."}, {"method_name": "isOptimizedDrawingEnabled", "method_sig": "public boolean isOptimizedDrawingEnabled()", "description": "The JViewport overrides the default implementation of\n this method (in JComponent) to return false.\n This ensures\n that the drawing machinery will call the Viewport's\n paint\n implementation rather than messaging the JViewport's\n children directly."}, {"method_name": "isPaintingOrigin", "method_sig": "protected boolean isPaintingOrigin()", "description": "Returns true if scroll mode is a BACKINGSTORE_SCROLL_MODE to cause\n painting to originate from JViewport, or one of its\n ancestors. Otherwise returns false."}, {"method_name": "paint", "method_sig": "public void paint (Graphics g)", "description": "Depending on whether the backingStore is enabled,\n either paint the image through the backing store or paint\n just the recently exposed part, using the backing store\n to \"blit\" the remainder.\n \n The term \"blit\" is the pronounced version of the PDP-10\n BLT (BLock Transfer) instruction, which copied a block of\n bits. (In case you were curious.)\n "}, {"method_name": "reshape", "method_sig": "public void reshape (int x,\n                    int y,\n                    int w,\n                    int h)", "description": "Sets the bounds of this viewport.  If the viewport's width\n or height has changed, fire a StateChanged event."}, {"method_name": "setScrollMode", "method_sig": "@BeanProperty(bound=false,\n              enumerationValues={\"JViewport.BLIT_SCROLL_MODE\",\"JViewport.BACKINGSTORE_SCROLL_MODE\",\"JViewport.SIMPLE_SCROLL_MODE\"},\n              description=\"Method of moving contents for incremental scrolls.\")\npublic void setScrollMode (int mode)", "description": "Used to control the method of scrolling the viewport contents.\n You may want to change this mode to get maximum performance for your\n use case."}, {"method_name": "getScrollMode", "method_sig": "public int getScrollMode()", "description": "Returns the current scrolling mode."}, {"method_name": "isBackingStoreEnabled", "method_sig": "@Deprecated\npublic boolean isBackingStoreEnabled()", "description": "Returns true if this viewport is maintaining\n an offscreen image of its contents."}, {"method_name": "setBackingStoreEnabled", "method_sig": "@Deprecated\npublic void setBackingStoreEnabled (boolean enabled)", "description": "If true if this viewport will maintain an offscreen\n image of its contents.  The image is used to reduce the cost\n of small one dimensional changes to the viewPosition.\n Rather than repainting the entire viewport we use\n Graphics.copyArea to effect some of the scroll."}, {"method_name": "getView", "method_sig": "public Component getView()", "description": "Returns the JViewport's one child or null."}, {"method_name": "setView", "method_sig": "public void setView (Component view)", "description": "Sets the JViewport's one lightweight child\n (view), which can be null."}, {"method_name": "getViewSize", "method_sig": "public Dimension getViewSize()", "description": "If the view's size hasn't been explicitly set, return the\n preferred size, otherwise return the view's current size.\n If there is no view, return 0,0."}, {"method_name": "setViewSize", "method_sig": "public void setViewSize (Dimension newSize)", "description": "Sets the size of the view.  A state changed event will be fired."}, {"method_name": "getViewPosition", "method_sig": "public Point getViewPosition()", "description": "Returns the view coordinates that appear in the upper left\n hand corner of the viewport, or 0,0 if there's no view."}, {"method_name": "setViewPosition", "method_sig": "public void setViewPosition (Point p)", "description": "Sets the view coordinates that appear in the upper left\n hand corner of the viewport, does nothing if there's no view."}, {"method_name": "getViewRect", "method_sig": "public Rectangle getViewRect()", "description": "Returns a rectangle whose origin is getViewPosition\n and size is getExtentSize.\n This is the visible part of the view, in view coordinates."}, {"method_name": "computeBlit", "method_sig": "protected boolean computeBlit (int dx,\n                              int dy,\n                              Point blitFrom,\n                              Point blitTo,\n                              Dimension blitSize,\n                              Rectangle blitPaint)", "description": "Computes the parameters for a blit where the backing store image\n currently contains oldLoc in the upper left hand corner\n and we're scrolling to newLoc.\n The parameters are modified\n to return the values required for the blit."}, {"method_name": "getExtentSize", "method_sig": "public Dimension getExtentSize()", "description": "Returns the size of the visible part of the view in view coordinates."}, {"method_name": "toViewCoordinates", "method_sig": "public Dimension toViewCoordinates (Dimension size)", "description": "Converts a size in pixel coordinates to view coordinates.\n Subclasses of viewport that support \"logical coordinates\"\n will override this method."}, {"method_name": "toViewCoordinates", "method_sig": "public Point toViewCoordinates (Point p)", "description": "Converts a point in pixel coordinates to view coordinates.\n Subclasses of viewport that support \"logical coordinates\"\n will override this method."}, {"method_name": "setExtentSize", "method_sig": "public void setExtentSize (Dimension newExtent)", "description": "Sets the size of the visible part of the view using view coordinates."}, {"method_name": "createViewListener", "method_sig": "protected JViewport.ViewListener createViewListener()", "description": "Creates a listener for the view."}, {"method_name": "createLayoutManager", "method_sig": "protected LayoutManager createLayoutManager()", "description": "Subclassers can override this to install a different\n layout manager (or null) in the constructor.  Returns\n the LayoutManager to install on the JViewport."}, {"method_name": "addChangeListener", "method_sig": "public void addChangeListener (ChangeListener l)", "description": "Adds a ChangeListener to the list that is\n notified each time the view's\n size, position, or the viewport's extent size has changed."}, {"method_name": "removeChangeListener", "method_sig": "public void removeChangeListener (ChangeListener l)", "description": "Removes a ChangeListener from the list that's notified each\n time the views size, position, or the viewports extent size\n has changed."}, {"method_name": "getChangeListeners", "method_sig": "public ChangeListener[] getChangeListeners()", "description": "Returns an array of all the ChangeListeners added\n to this JViewport with addChangeListener()."}, {"method_name": "fireStateChanged", "method_sig": "protected void fireStateChanged()", "description": "Notifies all ChangeListeners when the views\n size, position, or the viewports extent size has changed."}, {"method_name": "repaint", "method_sig": "public void repaint (long tm,\n                    int x,\n                    int y,\n                    int w,\n                    int h)", "description": "Always repaint in the parents coordinate system to make sure\n only one paint is performed by the RepaintManager."}, {"method_name": "paramString", "method_sig": "protected String paramString()", "description": "Returns a string representation of this JViewport.\n This method\n is intended to be used only for debugging purposes, and the\n content and format of the returned string may vary between\n implementations. The returned string may be empty but may not\n be null."}, {"method_name": "firePropertyChange", "method_sig": "protected void firePropertyChange (String propertyName,\n                                  Object oldValue,\n                                  Object newValue)", "description": "Notifies listeners of a property change. This is subclassed to update\n the windowBlit property.\n (The putClientProperty property is final)."}, {"method_name": "getAccessibleContext", "method_sig": "public AccessibleContext getAccessibleContext()", "description": "Gets the AccessibleContext associated with this JViewport.\n For viewports, the AccessibleContext takes the form of an\n AccessibleJViewport.\n A new AccessibleJViewport instance is created if necessary."}]}