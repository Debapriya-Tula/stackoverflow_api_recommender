{"name": "Interface Activator", "module": "java.rmi", "package": "java.rmi.activation", "text": "The Activator facilitates remote object activation. A\n \"faulting\" remote reference calls the activator's\n activate method to obtain a \"live\" reference to a\n \"activatable\" remote object. Upon receiving a request for activation,\n the activator looks up the activation descriptor for the activation\n identifier, id, determines the group in which the\n object should be activated initiates object re-creation via the\n group's ActivationInstantiator (via a call to the\n newInstance method). The activator initiates the\n execution of activation groups as necessary. For example, if an\n activation group for a specific group identifier is not already\n executing, the activator initiates the execution of a VM for the\n group. \n\n The Activator works closely with\n ActivationSystem, which provides a means for registering\n groups and objects within those groups, and ActivationMonitor,\n which receives information about active and inactive objects and inactive\n groups. \n\n The activator is responsible for monitoring and detecting when\n activation groups fail so that it can remove stale remote references\n to groups and active object's within those groups.", "codes": ["public interface Activator\nextends Remote"], "fields": [], "methods": [{"method_name": "activate", "method_sig": "MarshalledObject<? extends Remote> activate (ActivationID id,\n                                            boolean force)\n                                     throws ActivationException,\n                                            UnknownObjectException,\n                                            RemoteException", "description": "Activate the object associated with the activation identifier,\n id. If the activator knows the object to be active\n already, and force is false , the stub with a\n \"live\" reference is returned immediately to the caller;\n otherwise, if the activator does not know that corresponding\n the remote object is active, the activator uses the activation\n descriptor information (previously registered) to determine the\n group (VM) in which the object should be activated. If an\n ActivationInstantiator corresponding to the\n object's group descriptor already exists, the activator invokes\n the activation group's newInstance method passing\n it the object's id and descriptor. \n\n If the activation group for the object's group descriptor does\n not yet exist, the activator starts an\n ActivationInstantiator executing (by spawning a\n child process, for example). When the activator receives the\n activation group's call back (via the\n ActivationSystem's activeGroup\n method) specifying the activation group's reference, the\n activator can then invoke that activation instantiator's\n newInstance method to forward each pending\n activation request to the activation group and return the\n result (a marshalled remote object reference, a stub) to the\n caller.\n\n Note that the activator receives a \"marshalled\" object instead of a\n Remote object so that the activator does not need to load the\n code for that object, or participate in distributed garbage\n collection for that object. If the activator kept a strong\n reference to the remote object, the activator would then\n prevent the object from being garbage collected under the\n normal distributed garbage collection mechanism."}]}