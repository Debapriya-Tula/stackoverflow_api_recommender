{"name": "Interface HttpResponse.BodyHandler<T>", "module": "java.net.http", "package": "java.net.http", "text": "A handler for response bodies.  The class BodyHandlers\n provides implementations of many common body handlers.\n\n  The BodyHandler interface allows inspection of the response\n code and headers, before the actual response body is received, and is\n responsible for creating the response BodySubscriber. The BodySubscriber consumes the actual response\n body bytes and, typically, converts them into a higher-level Java type.\n\n  A BodyHandler is a function that takes a ResponseInfo object; and which returns a BodySubscriber. The\n BodyHandler is invoked when the response status code and headers\n are available, but before the response  body bytes are received.\n\n  The following example uses one of the predefined body handlers that always process the response body in the\n same way ( streams the response body to a file ).\n\n   HttpRequest request = HttpRequest.newBuilder()\n        .uri(URI.create(\"http://www.foo.com/\"))\n        .build();\n  client.sendAsync(request, BodyHandlers.ofFile(Paths.get(\"/tmp/f\")))\n        .thenApply(HttpResponse::body)\n        .thenAccept(System.out::println); \n\n Note, that even though the pre-defined handlers do not examine the\n response code, the response code and headers are always retrievable from\n the HttpResponse, when it is returned.\n\n  In the second example, the function returns a different subscriber\n depending on the status code.\n   HttpRequest request = HttpRequest.newBuilder()\n        .uri(URI.create(\"http://www.foo.com/\"))\n        .build();\n  BodyHandler<Path> bodyHandler = (rspInfo) -> rspInfo.statusCode() == 200\n                      ? BodySubscribers.ofFile(Paths.get(\"/tmp/f\"))\n                      : BodySubscribers.replacing(Paths.get(\"/NULL\"));\n  client.sendAsync(request, bodyHandler)\n        .thenApply(HttpResponse::body)\n        .thenAccept(System.out::println); ", "codes": ["@FunctionalInterface\npublic static interface HttpResponse.BodyHandler<T>"], "fields": [], "methods": [{"method_name": "apply", "method_sig": "HttpResponse.BodySubscriber<T> apply (HttpResponse.ResponseInfo responseInfo)", "description": "Returns a BodySubscriber considering the\n given response status code and headers. This method is invoked before\n the actual response body bytes are read and its implementation must\n return a BodySubscriber to consume the response\n body bytes.\n\n  The response body can be discarded using one of discarding or replacing."}]}