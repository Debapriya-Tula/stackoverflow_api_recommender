{"name": "Class KeyAgreementSpi", "module": "java.base", "package": "javax.crypto", "text": "This class defines the Service Provider Interface (SPI)\n for the KeyAgreement class.\n All the abstract methods in this class must be implemented by each\n cryptographic service provider who wishes to supply the implementation\n of a particular key agreement algorithm.\n\n  The keys involved in establishing a shared secret are created by one\n of the\n key generators (KeyPairGenerator or\n KeyGenerator), a KeyFactory, or as a result from\n an intermediate phase of the key agreement protocol\n (engineDoPhase).\n\n  For each of the correspondents in the key exchange,\n engineDoPhase\n needs to be called. For example, if the key exchange is with one other\n party, engineDoPhase needs to be called once, with the\n lastPhase flag set to true.\n If the key exchange is\n with two other parties, engineDoPhase needs to be called twice,\n the first time setting the lastPhase flag to\n false, and the second time setting it to true.\n There may be any number of parties involved in a key exchange.", "codes": ["public abstract class KeyAgreementSpi\nextends Object"], "fields": [], "methods": [{"method_name": "engineInit", "method_sig": "protected abstract void engineInit (Key key,\n                                   SecureRandom random)\n                            throws InvalidKeyException", "description": "Initializes this key agreement with the given key and source of\n randomness. The given key is required to contain all the algorithm\n parameters required for this key agreement.\n\n  If the key agreement algorithm requires random bytes, it gets them\n from the given source of randomness, random.\n However, if the underlying\n algorithm implementation does not require any random bytes,\n random is ignored."}, {"method_name": "engineInit", "method_sig": "protected abstract void engineInit (Key key,\n                                   AlgorithmParameterSpec params,\n                                   SecureRandom random)\n                            throws InvalidKeyException,\n                                   InvalidAlgorithmParameterException", "description": "Initializes this key agreement with the given key, set of\n algorithm parameters, and source of randomness."}, {"method_name": "engineDoPhase", "method_sig": "protected abstract Key engineDoPhase (Key key,\n                                     boolean lastPhase)\n                              throws InvalidKeyException,\n                                     IllegalStateException", "description": "Executes the next phase of this key agreement with the given\n key that was received from one of the other parties involved in this key\n agreement."}, {"method_name": "engineGenerateSecret", "method_sig": "protected abstract byte[] engineGenerateSecret()\n                                        throws IllegalStateException", "description": "Generates the shared secret and returns it in a new buffer.\n\n This method resets this KeyAgreementSpi object,\n so that it\n can be reused for further key agreements. Unless this key agreement is\n reinitialized with one of the engineInit methods, the same\n private information and algorithm parameters will be used for\n subsequent key agreements."}, {"method_name": "engineGenerateSecret", "method_sig": "protected abstract int engineGenerateSecret (byte[] sharedSecret,\n                                            int offset)\n                                     throws IllegalStateException,\n                                            ShortBufferException", "description": "Generates the shared secret, and places it into the buffer\n sharedSecret, beginning at offset inclusive.\n\n If the sharedSecret buffer is too small to hold the\n result, a ShortBufferException is thrown.\n In this case, this call should be repeated with a larger output buffer.\n\n This method resets this KeyAgreementSpi object,\n so that it\n can be reused for further key agreements. Unless this key agreement is\n reinitialized with one of the engineInit methods, the same\n private information and algorithm parameters will be used for\n subsequent key agreements."}, {"method_name": "engineGenerateSecret", "method_sig": "protected abstract SecretKey engineGenerateSecret (String algorithm)\n                                           throws IllegalStateException,\n                                                  NoSuchAlgorithmException,\n                                                  InvalidKeyException", "description": "Creates the shared secret and returns it as a secret key object\n of the requested algorithm type.\n\n This method resets this KeyAgreementSpi object,\n so that it\n can be reused for further key agreements. Unless this key agreement is\n reinitialized with one of the engineInit methods, the same\n private information and algorithm parameters will be used for\n subsequent key agreements."}]}