{"name": "Class Long", "module": "java.base", "package": "java.lang", "text": "The Long class wraps a value of the primitive type \n long in an object. An object of type Long contains a\n single field whose type is long.\n\n  In addition, this class provides several methods for converting\n a long to a String and a String to a \n long, as well as other constants and methods useful when dealing\n with a long.\n\n Implementation note: The implementations of the \"bit twiddling\"\n methods (such as highestOneBit and\n numberOfTrailingZeros) are\n based on material from Henry S. Warren, Jr.'s Hacker's\n Delight, (Addison Wesley, 2002).", "codes": ["public final class Long\nextends Number\nimplements Comparable<Long>"], "fields": [{"field_name": "MIN_VALUE", "field_sig": "@Native\npublic static final\u00a0long MIN_VALUE", "description": "A constant holding the minimum value a long can\n have, -263."}, {"field_name": "MAX_VALUE", "field_sig": "@Native\npublic static final\u00a0long MAX_VALUE", "description": "A constant holding the maximum value a long can\n have, 263-1."}, {"field_name": "TYPE", "field_sig": "public static final\u00a0Class<Long> TYPE", "description": "The Class instance representing the primitive type\n long."}, {"field_name": "SIZE", "field_sig": "@Native\npublic static final\u00a0int SIZE", "description": "The number of bits used to represent a long value in two's\n complement binary form."}, {"field_name": "BYTES", "field_sig": "public static final\u00a0int BYTES", "description": "The number of bytes used to represent a long value in two's\n complement binary form."}], "methods": [{"method_name": "toString", "method_sig": "public static String toString (long i,\n                              int radix)", "description": "Returns a string representation of the first argument in the\n radix specified by the second argument.\n\n If the radix is smaller than Character.MIN_RADIX\n or larger than Character.MAX_RADIX, then the radix\n 10 is used instead.\n\n If the first argument is negative, the first element of the\n result is the ASCII minus sign '-'\n ('\\u002d'). If the first argument is not\n negative, no sign character appears in the result.\n\n The remaining characters of the result represent the magnitude\n of the first argument. If the magnitude is zero, it is\n represented by a single zero character '0'\n ('\\u0030'); otherwise, the first character of\n the representation of the magnitude will not be the zero\n character.  The following ASCII characters are used as digits:\n\n \n0123456789abcdefghijklmnopqrstuvwxyz\n\n\n These are '\\u0030' through\n '\\u0039' and '\\u0061' through\n '\\u007a'. If radix is\n N, then the first N of these characters\n are used as radix-N digits in the order shown. Thus,\n the digits for hexadecimal (radix 16) are\n 0123456789abcdef. If uppercase letters are\n desired, the String.toUpperCase() method may\n be called on the result:\n\n \nLong.toString(n, 16).toUpperCase()\n"}, {"method_name": "toUnsignedString", "method_sig": "public static String toUnsignedString (long i,\n                                      int radix)", "description": "Returns a string representation of the first argument as an\n unsigned integer value in the radix specified by the second\n argument.\n\n If the radix is smaller than Character.MIN_RADIX\n or larger than Character.MAX_RADIX, then the radix\n 10 is used instead.\n\n Note that since the first argument is treated as an unsigned\n value, no leading sign character is printed.\n\n If the magnitude is zero, it is represented by a single zero\n character '0' ('\\u0030'); otherwise,\n the first character of the representation of the magnitude will\n not be the zero character.\n\n The behavior of radixes and the characters used as digits\n are the same as toString."}, {"method_name": "toHexString", "method_sig": "public static String toHexString (long i)", "description": "Returns a string representation of the long\n argument as an unsigned integer in base\u00a016.\n\n The unsigned long value is the argument plus\n 264 if the argument is negative; otherwise, it is\n equal to the argument.  This value is converted to a string of\n ASCII digits in hexadecimal (base\u00a016) with no extra\n leading 0s.\n\n The value of the argument can be recovered from the returned\n string s by calling Long.parseUnsignedLong(s,\n 16).\n\n If the unsigned magnitude is zero, it is represented by a\n single zero character '0' ('\\u0030');\n otherwise, the first character of the representation of the\n unsigned magnitude will not be the zero character. The\n following characters are used as hexadecimal digits:\n\n \n0123456789abcdef\n\n\n These are the characters '\\u0030' through\n '\\u0039' and  '\\u0061' through\n '\\u0066'.  If uppercase letters are desired,\n the String.toUpperCase() method may be called\n on the result:\n\n \nLong.toHexString(n).toUpperCase()\n"}, {"method_name": "toOctalString", "method_sig": "public static String toOctalString (long i)", "description": "Returns a string representation of the long\n argument as an unsigned integer in base\u00a08.\n\n The unsigned long value is the argument plus\n 264 if the argument is negative; otherwise, it is\n equal to the argument.  This value is converted to a string of\n ASCII digits in octal (base\u00a08) with no extra leading\n 0s.\n\n The value of the argument can be recovered from the returned\n string s by calling Long.parseUnsignedLong(s,\n 8).\n\n If the unsigned magnitude is zero, it is represented by a\n single zero character '0' ('\\u0030');\n otherwise, the first character of the representation of the\n unsigned magnitude will not be the zero character. The\n following characters are used as octal digits:\n\n \n01234567\n\n\n These are the characters '\\u0030' through\n '\\u0037'."}, {"method_name": "toBinaryString", "method_sig": "public static String toBinaryString (long i)", "description": "Returns a string representation of the long\n argument as an unsigned integer in base\u00a02.\n\n The unsigned long value is the argument plus\n 264 if the argument is negative; otherwise, it is\n equal to the argument.  This value is converted to a string of\n ASCII digits in binary (base\u00a02) with no extra leading\n 0s.\n\n The value of the argument can be recovered from the returned\n string s by calling Long.parseUnsignedLong(s,\n 2).\n\n If the unsigned magnitude is zero, it is represented by a\n single zero character '0' ('\\u0030');\n otherwise, the first character of the representation of the\n unsigned magnitude will not be the zero character. The\n characters '0' ('\\u0030') and \n '1' ('\\u0031') are used as binary digits."}, {"method_name": "toString", "method_sig": "public static String toString (long i)", "description": "Returns a String object representing the specified\n long.  The argument is converted to signed decimal\n representation and returned as a string, exactly as if the\n argument and the radix 10 were given as arguments to the toString(long, int) method."}, {"method_name": "toUnsignedString", "method_sig": "public static String toUnsignedString (long i)", "description": "Returns a string representation of the argument as an unsigned\n decimal value.\n\n The argument is converted to unsigned decimal representation\n and returned as a string exactly as if the argument and radix\n 10 were given as arguments to the toUnsignedString(long,\n int) method."}, {"method_name": "parseLong", "method_sig": "public static long parseLong (String s,\n                             int radix)\n                      throws NumberFormatException", "description": "Parses the string argument as a signed long in the\n radix specified by the second argument. The characters in the\n string must all be digits of the specified radix (as determined\n by whether Character.digit(char, int) returns\n a nonnegative value), except that the first character may be an\n ASCII minus sign '-' ('\\u002D') to\n indicate a negative value or an ASCII plus sign '+'\n ('\\u002B') to indicate a positive value. The\n resulting long value is returned.\n\n Note that neither the character L\n ('\\u004C') nor l\n ('\\u006C') is permitted to appear at the end\n of the string as a type indicator, as would be permitted in\n Java programming language source code - except that either\n L or l may appear as a digit for a\n radix greater than or equal to 22.\n\n An exception of type NumberFormatException is\n thrown if any of the following situations occurs:\n \nThe first argument is null or is a string of\n length zero.\n\n The radix is either smaller than Character.MIN_RADIX or larger than Character.MAX_RADIX.\n\n Any character of the string is not a digit of the specified\n radix, except that the first character may be a minus sign\n '-' ('\\u002d') or plus sign \n '+' ('\\u002B') provided that the string is\n longer than length 1.\n\n The value represented by the string is not a value of type\n      long.\n \nExamples:\n \n parseLong(\"0\", 10) returns 0L\n parseLong(\"473\", 10) returns 473L\n parseLong(\"+42\", 10) returns 42L\n parseLong(\"-0\", 10) returns 0L\n parseLong(\"-FF\", 16) returns -255L\n parseLong(\"1100110\", 2) returns 102L\n parseLong(\"99\", 8) throws a NumberFormatException\n parseLong(\"Hazelnut\", 10) throws a NumberFormatException\n parseLong(\"Hazelnut\", 36) returns 1356099454469L\n "}, {"method_name": "parseLong", "method_sig": "public static long parseLong (CharSequence s,\n                             int beginIndex,\n                             int endIndex,\n                             int radix)\n                      throws NumberFormatException", "description": "Parses the CharSequence argument as a signed long in\n the specified radix, beginning at the specified\n beginIndex and extending to endIndex - 1.\n\n The method does not take steps to guard against the\n CharSequence being mutated while parsing."}, {"method_name": "parseLong", "method_sig": "public static long parseLong (String s)\n                      throws NumberFormatException", "description": "Parses the string argument as a signed decimal long.\n The characters in the string must all be decimal digits, except\n that the first character may be an ASCII minus sign '-'\n (\\u002D') to indicate a negative value or an\n ASCII plus sign '+' ('\\u002B') to\n indicate a positive value. The resulting long value is\n returned, exactly as if the argument and the radix 10\n were given as arguments to the parseLong(java.lang.String, int) method.\n\n Note that neither the character L\n ('\\u004C') nor l\n ('\\u006C') is permitted to appear at the end\n of the string as a type indicator, as would be permitted in\n Java programming language source code."}, {"method_name": "parseUnsignedLong", "method_sig": "public static long parseUnsignedLong (String s,\n                                     int radix)\n                              throws NumberFormatException", "description": "Parses the string argument as an unsigned long in the\n radix specified by the second argument.  An unsigned integer\n maps the values usually associated with negative numbers to\n positive numbers larger than MAX_VALUE.\n\n The characters in the string must all be digits of the\n specified radix (as determined by whether Character.digit(char, int) returns a nonnegative\n value), except that the first character may be an ASCII plus\n sign '+' ('\\u002B'). The resulting\n integer value is returned.\n\n An exception of type NumberFormatException is\n thrown if any of the following situations occurs:\n \nThe first argument is null or is a string of\n length zero.\n\n The radix is either smaller than\n Character.MIN_RADIX or\n larger than Character.MAX_RADIX.\n\n Any character of the string is not a digit of the specified\n radix, except that the first character may be a plus sign\n '+' ('\\u002B') provided that the\n string is longer than length 1.\n\n The value represented by the string is larger than the\n largest unsigned long, 264-1.\n\n "}, {"method_name": "parseUnsignedLong", "method_sig": "public static long parseUnsignedLong (CharSequence s,\n                                     int beginIndex,\n                                     int endIndex,\n                                     int radix)\n                              throws NumberFormatException", "description": "Parses the CharSequence argument as an unsigned long in\n the specified radix, beginning at the specified\n beginIndex and extending to endIndex - 1.\n\n The method does not take steps to guard against the\n CharSequence being mutated while parsing."}, {"method_name": "parseUnsignedLong", "method_sig": "public static long parseUnsignedLong (String s)\n                              throws NumberFormatException", "description": "Parses the string argument as an unsigned decimal long. The\n characters in the string must all be decimal digits, except\n that the first character may be an ASCII plus sign \n '+' ('\\u002B'). The resulting integer value\n is returned, exactly as if the argument and the radix 10 were\n given as arguments to the parseUnsignedLong(java.lang.String, int) method."}, {"method_name": "valueOf", "method_sig": "public static Long valueOf (String s,\n                           int radix)\n                    throws NumberFormatException", "description": "Returns a Long object holding the value\n extracted from the specified String when parsed\n with the radix given by the second argument.  The first\n argument is interpreted as representing a signed\n long in the radix specified by the second\n argument, exactly as if the arguments were given to the parseLong(java.lang.String, int) method. The result is a\n Long object that represents the long\n value specified by the string.\n\n In other words, this method returns a Long object equal\n to the value of:\n\n \nnew Long(Long.parseLong(s, radix))\n"}, {"method_name": "valueOf", "method_sig": "public static Long valueOf (String s)\n                    throws NumberFormatException", "description": "Returns a Long object holding the value\n of the specified String. The argument is\n interpreted as representing a signed decimal long,\n exactly as if the argument were given to the parseLong(java.lang.String) method. The result is a\n Long object that represents the integer value\n specified by the string.\n\n In other words, this method returns a Long object\n equal to the value of:\n\n \nnew Long(Long.parseLong(s))\n"}, {"method_name": "valueOf", "method_sig": "public static Long valueOf (long l)", "description": "Returns a Long instance representing the specified\n long value.\n If a new Long instance is not required, this method\n should generally be used in preference to the constructor\n Long(long), as this method is likely to yield\n significantly better space and time performance by caching\n frequently requested values.\n\n This method will always cache values in the range -128 to 127,\n inclusive, and may cache other values outside of this range."}, {"method_name": "decode", "method_sig": "public static Long decode (String nm)\n                   throws NumberFormatException", "description": "Decodes a String into a Long.\n Accepts decimal, hexadecimal, and octal numbers given by the\n following grammar:\n\n \n\nDecodableString:\nSignopt DecimalNumeral\nSignopt 0x HexDigits\nSignopt 0X HexDigits\nSignopt # HexDigits\nSignopt 0 OctalDigits\nSign:\n-\n+\n\n\nDecimalNumeral, HexDigits, and OctalDigits\n are as defined in section 3.10.1 of\n The Java\u2122 Language Specification,\n except that underscores are not accepted between digits.\n\n The sequence of characters following an optional\n sign and/or radix specifier (\"0x\", \"0X\",\n \"#\", or leading zero) is parsed as by the \n Long.parseLong method with the indicated radix (10, 16, or 8).\n This sequence of characters must represent a positive value or\n a NumberFormatException will be thrown.  The result is\n negated if first character of the specified String is\n the minus sign.  No whitespace characters are permitted in the\n String."}, {"method_name": "byteValue", "method_sig": "public byte byteValue()", "description": "Returns the value of this Long as a byte after\n a narrowing primitive conversion."}, {"method_name": "shortValue", "method_sig": "public short shortValue()", "description": "Returns the value of this Long as a short after\n a narrowing primitive conversion."}, {"method_name": "intValue", "method_sig": "public int intValue()", "description": "Returns the value of this Long as an int after\n a narrowing primitive conversion."}, {"method_name": "longValue", "method_sig": "public long longValue()", "description": "Returns the value of this Long as a\n long value."}, {"method_name": "floatValue", "method_sig": "public float floatValue()", "description": "Returns the value of this Long as a float after\n a widening primitive conversion."}, {"method_name": "doubleValue", "method_sig": "public double doubleValue()", "description": "Returns the value of this Long as a double\n after a widening primitive conversion."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a String object representing this\n Long's value.  The value is converted to signed\n decimal representation and returned as a string, exactly as if\n the long value were given as an argument to the\n toString(long) method."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Returns a hash code for this Long. The result is\n the exclusive OR of the two halves of the primitive\n long value held by this Long\n object. That is, the hashcode is the value of the expression:\n\n \n(int)(this.longValue()^(this.longValue()>>>32))\n"}, {"method_name": "hashCode", "method_sig": "public static int hashCode (long value)", "description": "Returns a hash code for a long value; compatible with\n Long.hashCode()."}, {"method_name": "equals", "method_sig": "public boolean equals (Object obj)", "description": "Compares this object to the specified object.  The result is\n true if and only if the argument is not\n null and is a Long object that\n contains the same long value as this object."}, {"method_name": "getLong", "method_sig": "public static Long getLong (String nm)", "description": "Determines the long value of the system property\n with the specified name.\n\n The first argument is treated as the name of a system\n property.  System properties are accessible through the System.getProperty(java.lang.String) method. The\n string value of this property is then interpreted as a \n long value using the grammar supported by decode\n and a Long object representing this value is returned.\n\n If there is no property with the specified name, if the\n specified name is empty or null, or if the property\n does not have the correct numeric format, then null is\n returned.\n\n In other words, this method returns a Long object\n equal to the value of:\n\n \ngetLong(nm, null)\n"}, {"method_name": "getLong", "method_sig": "public static Long getLong (String nm,\n                           long val)", "description": "Determines the long value of the system property\n with the specified name.\n\n The first argument is treated as the name of a system\n property.  System properties are accessible through the System.getProperty(java.lang.String) method. The\n string value of this property is then interpreted as a \n long value using the grammar supported by decode\n and a Long object representing this value is returned.\n\n The second argument is the default value. A Long object\n that represents the value of the second argument is returned if there\n is no property of the specified name, if the property does not have\n the correct numeric format, or if the specified name is empty or null.\n\n In other words, this method returns a Long object equal\n to the value of:\n\n \ngetLong(nm, new Long(val))\n\n\n but in practice it may be implemented in a manner such as:\n\n \n Long result = getLong(nm, null);\n return (result == null) ? new Long(val) : result;\n \n\n to avoid the unnecessary allocation of a Long object when\n the default value is not needed."}, {"method_name": "getLong", "method_sig": "public static Long getLong (String nm,\n                           Long val)", "description": "Returns the long value of the system property with\n the specified name.  The first argument is treated as the name\n of a system property.  System properties are accessible through\n the System.getProperty(java.lang.String)\n method. The string value of this property is then interpreted\n as a long value, as per the\n decode method, and a Long object\n representing this value is returned; in summary:\n\n \nIf the property value begins with the two ASCII characters\n 0x or the ASCII character #, not followed by\n a minus sign, then the rest of it is parsed as a hexadecimal integer\n exactly as for the method valueOf(java.lang.String, int)\n with radix 16.\n If the property value begins with the ASCII character\n 0 followed by another character, it is parsed as\n an octal integer exactly as by the method valueOf(java.lang.String, int) with radix 8.\n Otherwise the property value is parsed as a decimal\n integer exactly as by the method\n valueOf(java.lang.String, int) with radix 10.\n \nNote that, in every case, neither L\n ('\\u004C') nor l\n ('\\u006C') is permitted to appear at the end\n of the property value as a type indicator, as would be\n permitted in Java programming language source code.\n\n The second argument is the default value. The default value is\n returned if there is no property of the specified name, if the\n property does not have the correct numeric format, or if the\n specified name is empty or null."}, {"method_name": "compareTo", "method_sig": "public int compareTo (Long anotherLong)", "description": "Compares two Long objects numerically."}, {"method_name": "compare", "method_sig": "public static int compare (long x,\n                          long y)", "description": "Compares two long values numerically.\n The value returned is identical to what would be returned by:\n \n    Long.valueOf(x).compareTo(Long.valueOf(y))\n "}, {"method_name": "compareUnsigned", "method_sig": "public static int compareUnsigned (long x,\n                                  long y)", "description": "Compares two long values numerically treating the values\n as unsigned."}, {"method_name": "divideUnsigned", "method_sig": "public static long divideUnsigned (long dividend,\n                                  long divisor)", "description": "Returns the unsigned quotient of dividing the first argument by\n the second where each argument and the result is interpreted as\n an unsigned value.\n\n Note that in two's complement arithmetic, the three other\n basic arithmetic operations of add, subtract, and multiply are\n bit-wise identical if the two operands are regarded as both\n being signed or both being unsigned.  Therefore separate \n addUnsigned, etc. methods are not provided."}, {"method_name": "remainderUnsigned", "method_sig": "public static long remainderUnsigned (long dividend,\n                                     long divisor)", "description": "Returns the unsigned remainder from dividing the first argument\n by the second where each argument and the result is interpreted\n as an unsigned value."}, {"method_name": "highestOneBit", "method_sig": "public static long highestOneBit (long i)", "description": "Returns a long value with at most a single one-bit, in the\n position of the highest-order (\"leftmost\") one-bit in the specified\n long value.  Returns zero if the specified value has no\n one-bits in its two's complement binary representation, that is, if it\n is equal to zero."}, {"method_name": "lowestOneBit", "method_sig": "public static long lowestOneBit (long i)", "description": "Returns a long value with at most a single one-bit, in the\n position of the lowest-order (\"rightmost\") one-bit in the specified\n long value.  Returns zero if the specified value has no\n one-bits in its two's complement binary representation, that is, if it\n is equal to zero."}, {"method_name": "numberOfLeadingZeros", "method_sig": "public static int numberOfLeadingZeros (long i)", "description": "Returns the number of zero bits preceding the highest-order\n (\"leftmost\") one-bit in the two's complement binary representation\n of the specified long value.  Returns 64 if the\n specified value has no one-bits in its two's complement representation,\n in other words if it is equal to zero.\n\n Note that this method is closely related to the logarithm base 2.\n For all positive long values x:\n \nfloor(log2(x)) = 63 - numberOfLeadingZeros(x)\nceil(log2(x)) = 64 - numberOfLeadingZeros(x - 1)\n"}, {"method_name": "numberOfTrailingZeros", "method_sig": "public static int numberOfTrailingZeros (long i)", "description": "Returns the number of zero bits following the lowest-order (\"rightmost\")\n one-bit in the two's complement binary representation of the specified\n long value.  Returns 64 if the specified value has no\n one-bits in its two's complement representation, in other words if it is\n equal to zero."}, {"method_name": "bitCount", "method_sig": "public static int bitCount (long i)", "description": "Returns the number of one-bits in the two's complement binary\n representation of the specified long value.  This function is\n sometimes referred to as the population count."}, {"method_name": "rotateLeft", "method_sig": "public static long rotateLeft (long i,\n                              int distance)", "description": "Returns the value obtained by rotating the two's complement binary\n representation of the specified long value left by the\n specified number of bits.  (Bits shifted out of the left hand, or\n high-order, side reenter on the right, or low-order.)\n\n Note that left rotation with a negative distance is equivalent to\n right rotation: rotateLeft(val, -distance) == rotateRight(val,\n distance).  Note also that rotation by any multiple of 64 is a\n no-op, so all but the last six bits of the rotation distance can be\n ignored, even if the distance is negative: rotateLeft(val,\n distance) == rotateLeft(val, distance & 0x3F)."}, {"method_name": "rotateRight", "method_sig": "public static long rotateRight (long i,\n                               int distance)", "description": "Returns the value obtained by rotating the two's complement binary\n representation of the specified long value right by the\n specified number of bits.  (Bits shifted out of the right hand, or\n low-order, side reenter on the left, or high-order.)\n\n Note that right rotation with a negative distance is equivalent to\n left rotation: rotateRight(val, -distance) == rotateLeft(val,\n distance).  Note also that rotation by any multiple of 64 is a\n no-op, so all but the last six bits of the rotation distance can be\n ignored, even if the distance is negative: rotateRight(val,\n distance) == rotateRight(val, distance & 0x3F)."}, {"method_name": "reverse", "method_sig": "public static long reverse (long i)", "description": "Returns the value obtained by reversing the order of the bits in the\n two's complement binary representation of the specified long\n value."}, {"method_name": "signum", "method_sig": "public static int signum (long i)", "description": "Returns the signum function of the specified long value.  (The\n return value is -1 if the specified value is negative; 0 if the\n specified value is zero; and 1 if the specified value is positive.)"}, {"method_name": "reverseBytes", "method_sig": "public static long reverseBytes (long i)", "description": "Returns the value obtained by reversing the order of the bytes in the\n two's complement representation of the specified long value."}, {"method_name": "sum", "method_sig": "public static long sum (long a,\n                       long b)", "description": "Adds two long values together as per the + operator."}, {"method_name": "max", "method_sig": "public static long max (long a,\n                       long b)", "description": "Returns the greater of two long values\n as if by calling Math.max."}, {"method_name": "min", "method_sig": "public static long min (long a,\n                       long b)", "description": "Returns the smaller of two long values\n as if by calling Math.min."}]}