{"name": "Class CharBuffer", "module": "java.base", "package": "java.nio", "text": "A char buffer.\n\n  This class defines four categories of operations upon\n char buffers:\n\n \n Absolute and relative get and\n   put methods that read and write\n   single chars; \n Relative bulk get\n   methods that transfer contiguous sequences of chars from this buffer\n   into an array; and\n Relative bulk put\n   methods that transfer contiguous sequences of chars from a\n   char array, a string, or some other char\n   buffer into this buffer; and \n A method for compacting\n   a char buffer.  \n\n Char buffers can be created either by allocation, which allocates space for the buffer's\n\n\n\n\n\n\n\n\n content, by wrapping an existing\n char array or string into a buffer, or by creating a\n view of an existing byte buffer.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Like a byte buffer, a char buffer is either direct or non-direct.  A\n char buffer created via the wrap methods of this class will\n be non-direct.  A char buffer created as a view of a byte buffer will\n be direct if, and only if, the byte buffer itself is direct.  Whether or not\n a char buffer is direct may be determined by invoking the isDirect method.  \n This class implements the CharSequence interface so that\n character buffers may be used wherever character sequences are accepted, for\n example in the regular-expression package java.util.regex.\n \n Methods in this class that do not otherwise have a value to return are\n specified to return the buffer upon which they are invoked.  This allows\n method invocations to be chained.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n The sequence of statements\n\n \n cb.put(\"text/\");\n cb.put(subtype);\n cb.put(\"; charset=\");\n cb.put(enc);\n\n can, for example, be replaced by the single statement\n\n \n cb.put(\"text/\").put(subtype).put(\"; charset=\").put(enc);", "codes": ["public abstract class CharBuffer\nextends Buffer\nimplements Comparable<CharBuffer>, Appendable, CharSequence, Readable"], "fields": [], "methods": [{"method_name": "allocate", "method_sig": "public static CharBuffer allocate (int capacity)", "description": "Allocates a new char buffer.\n\n  The new buffer's position will be zero, its limit will be its\n capacity, its mark will be undefined, each of its elements will be\n initialized to zero, and its byte order will be\n\n\n\n the native order of the underlying\n hardware.\n\n It will have a backing array, and its\n array offset will be zero."}, {"method_name": "wrap", "method_sig": "public static CharBuffer wrap (char[] array,\n                              int offset,\n                              int length)", "description": "Wraps a char array into a buffer.\n\n  The new buffer will be backed by the given char array;\n that is, modifications to the buffer will cause the array to be modified\n and vice versa.  The new buffer's capacity will be\n array.length, its position will be offset, its limit\n will be offset + length, its mark will be undefined, and its\n byte order will be\n\n\n\n the native order of the underlying\n hardware.\n\n Its backing array will be the given array, and\n its array offset will be zero.  "}, {"method_name": "wrap", "method_sig": "public static CharBuffer wrap (char[] array)", "description": "Wraps a char array into a buffer.\n\n  The new buffer will be backed by the given char array;\n that is, modifications to the buffer will cause the array to be modified\n and vice versa.  The new buffer's capacity and limit will be\n array.length, its position will be zero, its mark will be\n undefined, and its byte order will be\n\n\n\n the native order of the underlying\n hardware.\n\n Its backing array will be the given array, and its\n array offset will be zero.  "}, {"method_name": "read", "method_sig": "public int read (CharBuffer target)\n         throws IOException", "description": "Attempts to read characters into the specified character buffer.\n The buffer is used as a repository of characters as-is: the only\n changes made are the results of a put operation. No flipping or\n rewinding of the buffer is performed."}, {"method_name": "wrap", "method_sig": "public static CharBuffer wrap (CharSequence csq,\n                              int start,\n                              int end)", "description": "Wraps a character sequence into a buffer.\n\n  The content of the new, read-only buffer will be the content of the\n given character sequence.  The buffer's capacity will be\n csq.length(), its position will be start, its limit\n will be end, and its mark will be undefined.  "}, {"method_name": "wrap", "method_sig": "public static CharBuffer wrap (CharSequence csq)", "description": "Wraps a character sequence into a buffer.\n\n  The content of the new, read-only buffer will be the content of the\n given character sequence.  The new buffer's capacity and limit will be\n csq.length(), its position will be zero, and its mark will be\n undefined.  "}, {"method_name": "slice", "method_sig": "public abstract CharBuffer slice()", "description": "Creates a new char buffer whose content is a shared subsequence of\n this buffer's content.\n\n  The content of the new buffer will start at this buffer's current\n position.  Changes to this buffer's content will be visible in the new\n buffer, and vice versa; the two buffers' position, limit, and mark\n values will be independent.\n\n  The new buffer's position will be zero, its capacity and its limit\n will be the number of chars remaining in this buffer, its mark will be\n undefined, and its byte order will be\n\n\n\n identical to that of this buffer.\n\n The new buffer will be direct if, and only if, this buffer is direct, and\n it will be read-only if, and only if, this buffer is read-only.  "}, {"method_name": "duplicate", "method_sig": "public abstract CharBuffer duplicate()", "description": "Creates a new char buffer that shares this buffer's content.\n\n  The content of the new buffer will be that of this buffer.  Changes\n to this buffer's content will be visible in the new buffer, and vice\n versa; the two buffers' position, limit, and mark values will be\n independent.\n\n  The new buffer's capacity, limit, position,\n\n\n\n\n mark values, and byte order will be identical to those of this buffer.\n\n The new buffer will be direct if, and only if, this buffer is direct, and\n it will be read-only if, and only if, this buffer is read-only.  "}, {"method_name": "asReadOnlyBuffer", "method_sig": "public abstract CharBuffer asReadOnlyBuffer()", "description": "Creates a new, read-only char buffer that shares this buffer's\n content.\n\n  The content of the new buffer will be that of this buffer.  Changes\n to this buffer's content will be visible in the new buffer; the new\n buffer itself, however, will be read-only and will not allow the shared\n content to be modified.  The two buffers' position, limit, and mark\n values will be independent.\n\n  The new buffer's capacity, limit, position,\n\n\n\n\n mark values, and byte order will be identical to those of this buffer.\n\n\n  If this buffer is itself read-only then this method behaves in\n exactly the same way as the duplicate method.  "}, {"method_name": "get", "method_sig": "public abstract char get()", "description": "Relative get method.  Reads the char at this buffer's\n current position, and then increments the position."}, {"method_name": "put", "method_sig": "public abstract CharBuffer put (char c)", "description": "Relative put method\u00a0\u00a0(optional operation).\n\n  Writes the given char into this buffer at the current\n position, and then increments the position. "}, {"method_name": "get", "method_sig": "public abstract char get (int index)", "description": "Absolute get method.  Reads the char at the given\n index."}, {"method_name": "put", "method_sig": "public abstract CharBuffer put (int index,\n                               char c)", "description": "Absolute put method\u00a0\u00a0(optional operation).\n\n  Writes the given char into this buffer at the given\n index. "}, {"method_name": "get", "method_sig": "public CharBuffer get (char[] dst,\n                      int offset,\n                      int length)", "description": "Relative bulk get method.\n\n  This method transfers chars from this buffer into the given\n destination array.  If there are fewer chars remaining in the\n buffer than are required to satisfy the request, that is, if\n length\u00a0>\u00a0remaining(), then no\n chars are transferred and a BufferUnderflowException is\n thrown.\n\n  Otherwise, this method copies length chars from this\n buffer into the given array, starting at the current position of this\n buffer and at the given offset in the array.  The position of this\n buffer is then incremented by length.\n\n  In other words, an invocation of this method of the form\n src.get(dst,\u00a0off,\u00a0len) has exactly the same effect as\n the loop\n\n \n     for (int i = off; i < off + len; i++)\n         dst[i] = src.get();\n \n\n except that it first checks that there are sufficient chars in\n this buffer and it is potentially much more efficient."}, {"method_name": "get", "method_sig": "public CharBuffer get (char[] dst)", "description": "Relative bulk get method.\n\n  This method transfers chars from this buffer into the given\n destination array.  An invocation of this method of the form\n src.get(a) behaves in exactly the same way as the invocation\n\n \n     src.get(a, 0, a.length) "}, {"method_name": "put", "method_sig": "public CharBuffer put (CharBuffer src)", "description": "Relative bulk put method\u00a0\u00a0(optional operation).\n\n  This method transfers the chars remaining in the given source\n buffer into this buffer.  If there are more chars remaining in the\n source buffer than in this buffer, that is, if\n src.remaining()\u00a0>\u00a0remaining(),\n then no chars are transferred and a BufferOverflowException is thrown.\n\n  Otherwise, this method copies\n n\u00a0=\u00a0src.remaining() chars from the given\n buffer into this buffer, starting at each buffer's current position.\n The positions of both buffers are then incremented by n.\n\n  In other words, an invocation of this method of the form\n dst.put(src) has exactly the same effect as the loop\n\n \n     while (src.hasRemaining())\n         dst.put(src.get()); \n\n except that it first checks that there is sufficient space in this\n buffer and it is potentially much more efficient."}, {"method_name": "put", "method_sig": "public CharBuffer put (char[] src,\n                      int offset,\n                      int length)", "description": "Relative bulk put method\u00a0\u00a0(optional operation).\n\n  This method transfers chars into this buffer from the given\n source array.  If there are more chars to be copied from the array\n than remain in this buffer, that is, if\n length\u00a0>\u00a0remaining(), then no\n chars are transferred and a BufferOverflowException is\n thrown.\n\n  Otherwise, this method copies length chars from the\n given array into this buffer, starting at the given offset in the array\n and at the current position of this buffer.  The position of this buffer\n is then incremented by length.\n\n  In other words, an invocation of this method of the form\n dst.put(src,\u00a0off,\u00a0len) has exactly the same effect as\n the loop\n\n \n     for (int i = off; i < off + len; i++)\n         dst.put(a[i]);\n \n\n except that it first checks that there is sufficient space in this\n buffer and it is potentially much more efficient."}, {"method_name": "put", "method_sig": "public final CharBuffer put (char[] src)", "description": "Relative bulk put method\u00a0\u00a0(optional operation).\n\n  This method transfers the entire content of the given source\n char array into this buffer.  An invocation of this method of the\n form dst.put(a) behaves in exactly the same way as the\n invocation\n\n \n     dst.put(a, 0, a.length) "}, {"method_name": "put", "method_sig": "public CharBuffer put (String src,\n                      int start,\n                      int end)", "description": "Relative bulk put method\u00a0\u00a0(optional operation).\n\n  This method transfers chars from the given string into this\n buffer.  If there are more chars to be copied from the string than\n remain in this buffer, that is, if\n end\u00a0-\u00a0start\u00a0>\u00a0remaining(),\n then no chars are transferred and a BufferOverflowException is thrown.\n\n  Otherwise, this method copies\n n\u00a0=\u00a0end\u00a0-\u00a0start chars\n from the given string into this buffer, starting at the given\n start index and at the current position of this buffer.  The\n position of this buffer is then incremented by n.\n\n  In other words, an invocation of this method of the form\n dst.put(src,\u00a0start,\u00a0end) has exactly the same effect\n as the loop\n\n \n     for (int i = start; i < end; i++)\n         dst.put(src.charAt(i));\n \n\n except that it first checks that there is sufficient space in this\n buffer and it is potentially much more efficient."}, {"method_name": "put", "method_sig": "public final CharBuffer put (String src)", "description": "Relative bulk put method\u00a0\u00a0(optional operation).\n\n  This method transfers the entire content of the given source string\n into this buffer.  An invocation of this method of the form\n dst.put(s) behaves in exactly the same way as the invocation\n\n \n     dst.put(s, 0, s.length()) "}, {"method_name": "hasArray", "method_sig": "public final boolean hasArray()", "description": "Tells whether or not this buffer is backed by an accessible char\n array.\n\n  If this method returns true then the array\n and arrayOffset methods may safely be invoked.\n "}, {"method_name": "array", "method_sig": "public final char[] array()", "description": "Returns the char array that backs this\n buffer\u00a0\u00a0(optional operation).\n\n  Modifications to this buffer's content will cause the returned\n array's content to be modified, and vice versa.\n\n  Invoke the hasArray method before invoking this\n method in order to ensure that this buffer has an accessible backing\n array.  "}, {"method_name": "arrayOffset", "method_sig": "public final int arrayOffset()", "description": "Returns the offset within this buffer's backing array of the first\n element of the buffer\u00a0\u00a0(optional operation).\n\n  If this buffer is backed by an array then buffer position p\n corresponds to array index p\u00a0+\u00a0arrayOffset().\n\n  Invoke the hasArray method before invoking this\n method in order to ensure that this buffer has an accessible backing\n array.  "}, {"method_name": "compact", "method_sig": "public abstract CharBuffer compact()", "description": "Compacts this buffer\u00a0\u00a0(optional operation).\n\n  The chars between the buffer's current position and its limit,\n if any, are copied to the beginning of the buffer.  That is, the\n char at index p\u00a0=\u00a0position() is copied\n to index zero, the char at index p\u00a0+\u00a01 is copied\n to index one, and so forth until the char at index\n limit()\u00a0-\u00a01 is copied to index\n n\u00a0=\u00a0limit()\u00a0-\u00a01\u00a0-\u00a0p.\n The buffer's position is then set to n+1 and its limit is set to\n its capacity.  The mark, if defined, is discarded.\n\n  The buffer's position is set to the number of chars copied,\n rather than to zero, so that an invocation of this method can be\n followed immediately by an invocation of another relative put\n method. "}, {"method_name": "isDirect", "method_sig": "public abstract boolean isDirect()", "description": "Tells whether or not this char buffer is direct."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Returns the current hash code of this buffer.\n\n  The hash code of a char buffer depends only upon its remaining\n elements; that is, upon the elements from position() up to, and\n including, the element at limit()\u00a0-\u00a01.\n\n  Because buffer hash codes are content-dependent, it is inadvisable\n to use buffers as keys in hash maps or similar data structures unless it\n is known that their contents will not change.  "}, {"method_name": "equals", "method_sig": "public boolean equals (Object ob)", "description": "Tells whether or not this buffer is equal to another object.\n\n  Two char buffers are equal if, and only if,\n\n \n They have the same element type,  \n They have the same number of remaining elements, and\n   \n The two sequences of remaining elements, considered\n   independently of their starting positions, are pointwise equal.\n\n\n\n\n\n\n\n   \n\n A char buffer is not equal to any other type of object.  "}, {"method_name": "compareTo", "method_sig": "public int compareTo (CharBuffer that)", "description": "Compares this buffer to another.\n\n  Two char buffers are compared by comparing their sequences of\n remaining elements lexicographically, without regard to the starting\n position of each sequence within its corresponding buffer.\n\n\n\n\n\n\n\n\n Pairs of char elements are compared as if by invoking\n Character.compare(char,char).\n\n\n  A char buffer is not comparable to any other type of object."}, {"method_name": "mismatch", "method_sig": "public int mismatch (CharBuffer that)", "description": "Finds and returns the relative index of the first mismatch between this\n buffer and a given buffer.  The index is relative to the\n position of each buffer and will be in the range of\n 0 (inclusive) up to the smaller of the remaining\n elements in each buffer (exclusive).\n\n  If the two buffers share a common prefix then the returned index is\n the length of the common prefix and it follows that there is a mismatch\n between the two buffers at that index within the respective buffers.\n If one buffer is a proper prefix of the other then the returned index is\n the smaller of the remaining elements in each buffer, and it follows that\n the index is only valid for the buffer with the larger number of\n remaining elements.\n Otherwise, there is no mismatch."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a string containing the characters in this buffer.\n\n  The first character of the resulting string will be the character at\n this buffer's position, while the last character will be the character\n at index limit()\u00a0-\u00a01.  Invoking this method does not\n change the buffer's position. "}, {"method_name": "length", "method_sig": "public final int length()", "description": "Returns the length of this character buffer.\n\n  When viewed as a character sequence, the length of a character\n buffer is simply the number of characters between the position\n (inclusive) and the limit (exclusive); that is, it is equivalent to\n remaining(). "}, {"method_name": "charAt", "method_sig": "public final char charAt (int index)", "description": "Reads the character at the given index relative to the current\n position."}, {"method_name": "subSequence", "method_sig": "public abstract CharBuffer subSequence (int start,\n                                       int end)", "description": "Creates a new character buffer that represents the specified subsequence\n of this buffer, relative to the current position.\n\n  The new buffer will share this buffer's content; that is, if the\n content of this buffer is mutable then modifications to one buffer will\n cause the other to be modified.  The new buffer's capacity will be that\n of this buffer, its position will be\n position()\u00a0+\u00a0start, and its limit will be\n position()\u00a0+\u00a0end.  The new buffer will be\n direct if, and only if, this buffer is direct, and it will be read-only\n if, and only if, this buffer is read-only.  "}, {"method_name": "append", "method_sig": "public CharBuffer append (CharSequence csq)", "description": "Appends the specified character sequence  to this\n buffer\u00a0\u00a0(optional operation).\n\n  An invocation of this method of the form dst.append(csq)\n behaves in exactly the same way as the invocation\n\n \n     dst.put(csq.toString()) \n Depending on the specification of toString for the\n character sequence csq, the entire sequence may not be\n appended.  For instance, invoking the toString method of a character buffer will return a subsequence whose\n content depends upon the buffer's position and limit."}, {"method_name": "append", "method_sig": "public CharBuffer append (CharSequence csq,\n                         int start,\n                         int end)", "description": "Appends a subsequence of the  specified character sequence  to this\n buffer\u00a0\u00a0(optional operation).\n\n  An invocation of this method of the form dst.append(csq, start,\n end) when csq is not null, behaves in exactly the\n same way as the invocation\n\n \n     dst.put(csq.subSequence(start, end).toString()) "}, {"method_name": "append", "method_sig": "public CharBuffer append (char c)", "description": "Appends the specified char  to this\n buffer\u00a0\u00a0(optional operation).\n\n  An invocation of this method of the form dst.append(c)\n behaves in exactly the same way as the invocation\n\n \n     dst.put(c) "}, {"method_name": "order", "method_sig": "public abstract ByteOrder order()", "description": "Retrieves this buffer's byte order.\n\n  The byte order of a char buffer created by allocation or by\n wrapping an existing char array is the native order of the underlying\n hardware.  The byte order of a char buffer created as a view of a byte buffer is that of the\n byte buffer at the moment that the view is created.  "}]}