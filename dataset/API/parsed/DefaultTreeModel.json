{"name": "Class DefaultTreeModel", "module": "java.desktop", "package": "javax.swing.tree", "text": "A simple tree data model that uses TreeNodes.\n For further information and examples that use DefaultTreeModel,\n see How to Use Trees\n in The Java Tutorial.\n\nWarning:\n Serialized objects of this class will not be compatible with\n future Swing releases. The current serialization support is\n appropriate for short term storage or RMI between applications running\n the same version of Swing.  As of 1.4, support for long term storage\n of all JavaBeans\u2122\n has been added to the java.beans package.\n Please see XMLEncoder.", "codes": ["public class DefaultTreeModel\nextends Object\nimplements Serializable, TreeModel"], "fields": [{"field_name": "root", "field_sig": "protected\u00a0TreeNode root", "description": "Root of the tree."}, {"field_name": "listenerList", "field_sig": "protected\u00a0EventListenerList listenerList", "description": "Listeners."}, {"field_name": "asksAllowsChildren", "field_sig": "protected\u00a0boolean asksAllowsChildren", "description": "Determines how the isLeaf method figures\n out if a node is a leaf node. If true, a node is a leaf\n node if it does not allow children. (If it allows\n children, it is not a leaf node, even if no children\n are present.) That lets you distinguish between folder\n nodes and file nodes in a file system, for example.\n \n If this value is false, then any node which has no\n children is a leaf node, and any node may acquire\n children."}], "methods": [{"method_name": "setAsksAllowsChildren", "method_sig": "public void setAsksAllowsChildren (boolean newValue)", "description": "Sets whether or not to test leafness by asking getAllowsChildren()\n or isLeaf() to the TreeNodes.  If newvalue is true, getAllowsChildren()\n is messaged, otherwise isLeaf() is messaged."}, {"method_name": "asksAllowsChildren", "method_sig": "public boolean asksAllowsChildren()", "description": "Tells how leaf nodes are determined."}, {"method_name": "setRoot", "method_sig": "public void setRoot (TreeNode root)", "description": "Sets the root to root. A null root implies\n the tree is to display nothing, and is legal."}, {"method_name": "getRoot", "method_sig": "public Object getRoot()", "description": "Returns the root of the tree.  Returns null only if the tree has\n no nodes."}, {"method_name": "getIndexOfChild", "method_sig": "public int getIndexOfChild (Object parent,\n                           Object child)", "description": "Returns the index of child in parent.\n If either the parent or child is null, returns -1."}, {"method_name": "getChild", "method_sig": "public Object getChild (Object parent,\n                       int index)", "description": "Returns the child of parent at index index in the parent's\n child array.  parent must be a node previously obtained from\n this data source. This should not return null if index\n is a valid index for parent (that is index >= 0 &&\n index < getChildCount(parent))."}, {"method_name": "getChildCount", "method_sig": "public int getChildCount (Object parent)", "description": "Returns the number of children of parent.  Returns 0 if the node\n is a leaf or if it has no children.  parent must be a node\n previously obtained from this data source."}, {"method_name": "isLeaf", "method_sig": "public boolean isLeaf (Object node)", "description": "Returns whether the specified node is a leaf node.\n The way the test is performed depends on the\n askAllowsChildren setting."}, {"method_name": "reload", "method_sig": "public void reload()", "description": "Invoke this method if you've modified the TreeNodes upon which\n this model depends. The model will notify all of its listeners that the\n model has changed."}, {"method_name": "valueForPathChanged", "method_sig": "public void valueForPathChanged (TreePath path,\n                                Object newValue)", "description": "This sets the user object of the TreeNode identified by path\n and posts a node changed.  If you use custom user objects in\n the TreeModel you're going to need to subclass this and\n set the user object of the changed node to something meaningful."}, {"method_name": "insertNodeInto", "method_sig": "public void insertNodeInto (MutableTreeNode newChild,\n                           MutableTreeNode parent,\n                           int index)", "description": "Invoked this to insert newChild at location index in parents children.\n This will then message nodesWereInserted to create the appropriate\n event. This is the preferred way to add children as it will create\n the appropriate event."}, {"method_name": "removeNodeFromParent", "method_sig": "public void removeNodeFromParent (MutableTreeNode node)", "description": "Message this to remove node from its parent. This will message\n nodesWereRemoved to create the appropriate event. This is the\n preferred way to remove a node as it handles the event creation\n for you."}, {"method_name": "nodeChanged", "method_sig": "public void nodeChanged (TreeNode node)", "description": "Invoke this method after you've changed how node is to be\n represented in the tree."}, {"method_name": "reload", "method_sig": "public void reload (TreeNode node)", "description": "Invoke this method if you've modified the TreeNodes upon which\n this model depends. The model will notify all of its listeners that the\n model has changed below the given node."}, {"method_name": "nodesWereInserted", "method_sig": "public void nodesWereInserted (TreeNode node,\n                              int[] childIndices)", "description": "Invoke this method after you've inserted some TreeNodes into\n node.  childIndices should be the index of the new elements and\n must be sorted in ascending order."}, {"method_name": "nodesWereRemoved", "method_sig": "public void nodesWereRemoved (TreeNode node,\n                             int[] childIndices,\n                             Object[] removedChildren)", "description": "Invoke this method after you've removed some TreeNodes from\n node.  childIndices should be the index of the removed elements and\n must be sorted in ascending order. And removedChildren should be\n the array of the children objects that were removed."}, {"method_name": "nodesChanged", "method_sig": "public void nodesChanged (TreeNode node,\n                         int[] childIndices)", "description": "Invoke this method after you've changed how the children identified by\n childIndicies are to be represented in the tree."}, {"method_name": "nodeStructureChanged", "method_sig": "public void nodeStructureChanged (TreeNode node)", "description": "Invoke this method if you've totally changed the children of\n node and its children's children...  This will post a\n treeStructureChanged event."}, {"method_name": "getPathToRoot", "method_sig": "public TreeNode[] getPathToRoot (TreeNode aNode)", "description": "Builds the parents of node up to and including the root node,\n where the original node is the last element in the returned array.\n The length of the returned array gives the node's depth in the\n tree."}, {"method_name": "getPathToRoot", "method_sig": "protected TreeNode[] getPathToRoot (TreeNode aNode,\n                                   int depth)", "description": "Builds the parents of node up to and including the root node,\n where the original node is the last element in the returned array.\n The length of the returned array gives the node's depth in the\n tree."}, {"method_name": "addTreeModelListener", "method_sig": "public void addTreeModelListener (TreeModelListener l)", "description": "Adds a listener for the TreeModelEvent posted after the tree changes."}, {"method_name": "removeTreeModelListener", "method_sig": "public void removeTreeModelListener (TreeModelListener l)", "description": "Removes a listener previously added with addTreeModelListener()."}, {"method_name": "getTreeModelListeners", "method_sig": "public TreeModelListener[] getTreeModelListeners()", "description": "Returns an array of all the tree model listeners\n registered on this model."}, {"method_name": "fireTreeNodesChanged", "method_sig": "protected void fireTreeNodesChanged (Object source,\n                                    Object[] path,\n                                    int[] childIndices,\n                                    Object[] children)", "description": "Notifies all listeners that have registered interest for\n notification on this event type.  The event instance\n is lazily created using the parameters passed into\n the fire method."}, {"method_name": "fireTreeNodesInserted", "method_sig": "protected void fireTreeNodesInserted (Object source,\n                                     Object[] path,\n                                     int[] childIndices,\n                                     Object[] children)", "description": "Notifies all listeners that have registered interest for\n notification on this event type.  The event instance\n is lazily created using the parameters passed into\n the fire method."}, {"method_name": "fireTreeNodesRemoved", "method_sig": "protected void fireTreeNodesRemoved (Object source,\n                                    Object[] path,\n                                    int[] childIndices,\n                                    Object[] children)", "description": "Notifies all listeners that have registered interest for\n notification on this event type.  The event instance\n is lazily created using the parameters passed into\n the fire method."}, {"method_name": "fireTreeStructureChanged", "method_sig": "protected void fireTreeStructureChanged (Object source,\n                                        Object[] path,\n                                        int[] childIndices,\n                                        Object[] children)", "description": "Notifies all listeners that have registered interest for\n notification on this event type.  The event instance\n is lazily created using the parameters passed into\n the fire method."}, {"method_name": "getListeners", "method_sig": "public <T extends EventListener> T[] getListeners (Class<T> listenerType)", "description": "Returns an array of all the objects currently registered\n as FooListeners\n upon this model.\n FooListeners are registered using the\n addFooListener method.\n\n \n\n You can specify the listenerType argument\n with a class literal,\n such as\n FooListener.class.\n For example, you can query a\n DefaultTreeModel m\n for its tree model listeners with the following code:\n\n TreeModelListener[] tmls = (TreeModelListener[])(m.getListeners(TreeModelListener.class));\n\n If no such listeners exist, this method returns an empty array."}]}