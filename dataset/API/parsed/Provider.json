{"name": "Class Provider", "module": "java.base", "package": "java.security", "text": "This class represents a \"provider\" for the\n Java Security API, where a provider implements some or all parts of\n Java Security. Services that a provider may implement include:\n\n \nAlgorithms (such as DSA, RSA, or SHA-256).\n\n Key generation, conversion, and management facilities (such as for\n algorithm-specific keys).\n\n \nSome provider implementations may encounter unrecoverable internal\n errors during their operation, for example a failure to communicate with a\n security token. A ProviderException should be used to indicate\n such errors.\n\n Please note that a provider can be used to implement any security\n service in Java that uses a pluggable architecture with a choice\n of implementations that fit underneath.\n\n The service type Provider is reserved for use by the\n security framework. Services of this type cannot be added, removed,\n or modified by applications.\n The following attributes are automatically placed in each Provider object:\n \nAttributes Automatically Placed in a Provider Object\n\nNameValue\n\n\nProvider.id name\nString.valueOf(provider.getName())\nProvider.id version\nString.valueOf(provider.getVersionStr())\nProvider.id info\nString.valueOf(provider.getInfo())\nProvider.id className\nprovider.getClass().getName()\n\n\nEach provider has a name and a version string. A provider normally\n identifies itself with a file named java.security.Provider\n in the resource directory META-INF/services.\n Security providers are looked up via the ServiceLoader mechanism\n using the application class loader.\n\n Providers may be configured such that they are automatically\n installed and made available at runtime via the\n Security.getProviders() method.\n The mechanism for configuring and installing security providers is\n implementation-specific.", "codes": ["public abstract class Provider\nextends Properties"], "fields": [], "methods": [{"method_name": "configure", "method_sig": "public Provider configure (String configArg)", "description": "Apply the supplied configuration argument to this provider instance\n and return the configured provider. Note that if this provider cannot\n be configured in-place, a new provider will be created and returned.\n Therefore, callers should always use the returned provider."}, {"method_name": "isConfigured", "method_sig": "public boolean isConfigured()", "description": "Check if this provider instance has been configured."}, {"method_name": "getName", "method_sig": "public String getName()", "description": "Returns the name of this provider."}, {"method_name": "getVersion", "method_sig": "@Deprecated(since=\"9\")\npublic double getVersion()", "description": "Returns the version number for this provider."}, {"method_name": "getVersionStr", "method_sig": "public String getVersionStr()", "description": "Returns the version string for this provider."}, {"method_name": "getInfo", "method_sig": "public String getInfo()", "description": "Returns a human-readable description of the provider and its\n services.  This may return an HTML page, with relevant links."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a string with the name and the version string\n of this provider."}, {"method_name": "clear", "method_sig": "public void clear()", "description": "Clears this provider so that it no longer contains the properties\n used to look up facilities implemented by the provider.\n\n If a security manager is enabled, its checkSecurityAccess\n method is called with the string \"clearProviderProperties.\"+name\n (where name is the provider name) to see if it's ok to clear\n this provider."}, {"method_name": "load", "method_sig": "public void load (InputStream inStream)\n          throws IOException", "description": "Reads a property list (key and element pairs) from the input stream."}, {"method_name": "putAll", "method_sig": "public void putAll (Map<?, ?> t)", "description": "Copies all of the mappings from the specified Map to this provider.\n These mappings will replace any properties that this provider had\n for any of the keys currently in the specified Map."}, {"method_name": "entrySet", "method_sig": "public Set<Map.Entry<Object, Object>> entrySet()", "description": "Returns an unmodifiable Set view of the property entries contained\n in this Provider."}, {"method_name": "keySet", "method_sig": "public Set<Object> keySet()", "description": "Returns an unmodifiable Set view of the property keys contained in\n this provider."}, {"method_name": "values", "method_sig": "public Collection<Object> values()", "description": "Returns an unmodifiable Collection view of the property values\n contained in this provider."}, {"method_name": "put", "method_sig": "public Object put (Object key,\n                  Object value)", "description": "Sets the key property to have the specified\n value.\n\n If a security manager is enabled, its checkSecurityAccess\n method is called with the string \"putProviderProperty.\"+name,\n where name is the provider name, to see if it's ok to set this\n provider's property values."}, {"method_name": "putIfAbsent", "method_sig": "public Object putIfAbsent (Object key,\n                          Object value)", "description": "If the specified key is not already associated with a value (or is mapped\n to null) associates it with the given value and returns\n null, else returns the current value.\n\n If a security manager is enabled, its checkSecurityAccess\n method is called with the string \"putProviderProperty.\"+name,\n where name is the provider name, to see if it's ok to set this\n provider's property values."}, {"method_name": "remove", "method_sig": "public Object remove (Object key)", "description": "Removes the key property (and its corresponding\n value).\n\n If a security manager is enabled, its checkSecurityAccess\n method is called with the string \"removeProviderProperty.\"+name,\n where name is the provider name, to see if it's ok to remove this\n provider's properties."}, {"method_name": "remove", "method_sig": "public boolean remove (Object key,\n                      Object value)", "description": "Removes the entry for the specified key only if it is currently\n mapped to the specified value.\n\n If a security manager is enabled, its checkSecurityAccess\n method is called with the string \"removeProviderProperty.\"+name,\n where name is the provider name, to see if it's ok to remove this\n provider's properties."}, {"method_name": "replace", "method_sig": "public boolean replace (Object key,\n                       Object oldValue,\n                       Object newValue)", "description": "Replaces the entry for the specified key only if currently\n mapped to the specified value.\n\n If a security manager is enabled, its checkSecurityAccess\n method is called with the string \"putProviderProperty.\"+name,\n where name is the provider name, to see if it's ok to set this\n provider's property values."}, {"method_name": "replace", "method_sig": "public Object replace (Object key,\n                      Object value)", "description": "Replaces the entry for the specified key only if it is\n currently mapped to some value.\n\n If a security manager is enabled, its checkSecurityAccess\n method is called with the string \"putProviderProperty.\"+name,\n where name is the provider name, to see if it's ok to set this\n provider's property values."}, {"method_name": "replaceAll", "method_sig": "public void replaceAll (BiFunction<? super Object, ? super Object, ? extends Object> function)", "description": "Replaces each entry's value with the result of invoking the given\n function on that entry, in the order entries are returned by an entry\n set iterator, until all entries have been processed or the function\n throws an exception.\n\n If a security manager is enabled, its checkSecurityAccess\n method is called with the string \"putProviderProperty.\"+name,\n where name is the provider name, to see if it's ok to set this\n provider's property values."}, {"method_name": "compute", "method_sig": "public Object compute (Object key,\n                      BiFunction<? super Object, ? super Object, ? extends Object> remappingFunction)", "description": "Attempts to compute a mapping for the specified key and its\n current mapped value (or null if there is no current\n mapping).\n\n If a security manager is enabled, its checkSecurityAccess\n method is called with the strings \"putProviderProperty.\"+name\n and \"removeProviderProperty.\"+name, where name is the\n provider name, to see if it's ok to set this provider's property values\n and remove this provider's properties."}, {"method_name": "computeIfAbsent", "method_sig": "public Object computeIfAbsent (Object key,\n                              Function<? super Object, ? extends Object> mappingFunction)", "description": "If the specified key is not already associated with a value (or\n is mapped to null), attempts to compute its value using\n the given mapping function and enters it into this map unless\n null.\n\n If a security manager is enabled, its checkSecurityAccess\n method is called with the strings \"putProviderProperty.\"+name\n and \"removeProviderProperty.\"+name, where name is the\n provider name, to see if it's ok to set this provider's property values\n and remove this provider's properties."}, {"method_name": "computeIfPresent", "method_sig": "public Object computeIfPresent (Object key,\n                               BiFunction<? super Object, ? super Object, ? extends Object> remappingFunction)", "description": "If the value for the specified key is present and non-null, attempts to\n compute a new mapping given the key and its current mapped value.\n\n If a security manager is enabled, its checkSecurityAccess\n method is called with the strings \"putProviderProperty.\"+name\n and \"removeProviderProperty.\"+name, where name is the\n provider name, to see if it's ok to set this provider's property values\n and remove this provider's properties."}, {"method_name": "merge", "method_sig": "public Object merge (Object key,\n                    Object value,\n                    BiFunction<? super Object, ? super Object, ? extends Object> remappingFunction)", "description": "If the specified key is not already associated with a value or is\n associated with null, associates it with the given value. Otherwise,\n replaces the value with the results of the given remapping function,\n or removes if the result is null. This method may be of use when\n combining multiple mapped values for a key.\n\n If a security manager is enabled, its checkSecurityAccess\n method is called with the strings \"putProviderProperty.\"+name\n and \"removeProviderProperty.\"+name, where name is the\n provider name, to see if it's ok to set this provider's property values\n and remove this provider's properties."}, {"method_name": "getOrDefault", "method_sig": "public Object getOrDefault (Object key,\n                           Object defaultValue)", "description": "Description copied from interface:\u00a0Map"}, {"method_name": "forEach", "method_sig": "public void forEach (BiConsumer<? super Object, ? super Object> action)", "description": "Description copied from interface:\u00a0Map"}, {"method_name": "getService", "method_sig": "public Provider.Service getService (String type,\n                                   String algorithm)", "description": "Get the service describing this Provider's implementation of the\n specified type of this algorithm or alias. If no such\n implementation exists, this method returns null. If there are two\n matching services, one added to this provider using\n putService() and one added via put(),\n the service added via putService() is returned."}, {"method_name": "getServices", "method_sig": "public Set<Provider.Service> getServices()", "description": "Get an unmodifiable Set of all services supported by\n this Provider."}, {"method_name": "putService", "method_sig": "protected void putService (Provider.Service s)", "description": "Add a service. If a service of the same type with the same algorithm\n name exists and it was added using putService(),\n it is replaced by the new service.\n This method also places information about this service\n in the provider's Hashtable values in the format described in the\n Java Cryptography Architecture (JCA) Reference Guide.\n\n Also, if there is a security manager, its\n checkSecurityAccess method is called with the string\n \"putProviderProperty.\"+name, where name is\n the provider name, to see if it's ok to set this provider's property\n values. If the default implementation of checkSecurityAccess\n is used (that is, that method is not overriden), then this results in\n a call to the security manager's checkPermission method with\n a SecurityPermission(\"putProviderProperty.\"+name)\n permission."}, {"method_name": "removeService", "method_sig": "protected void removeService (Provider.Service s)", "description": "Remove a service previously added using\n putService(). The specified service is removed from\n this provider. It will no longer be returned by\n getService() and its information will be removed\n from this provider's Hashtable.\n\n Also, if there is a security manager, its\n checkSecurityAccess method is called with the string\n \"removeProviderProperty.\"+name, where name is\n the provider name, to see if it's ok to remove this provider's\n properties. If the default implementation of\n checkSecurityAccess is used (that is, that method is not\n overriden), then this results in a call to the security manager's\n checkPermission method with a\n SecurityPermission(\"removeProviderProperty.\"+name)\n permission."}]}