{"name": "Class SctpStandardSocketOptions", "module": "jdk.sctp", "package": "com.sun.nio.sctp", "text": "SCTP channels supports the socket options defined by this class\n (as well as those listed in the particular channel class) and may support\n additional Implementation specific socket options.", "codes": ["public class SctpStandardSocketOptions\nextends Object"], "fields": [{"field_name": "SCTP_DISABLE_FRAGMENTS", "field_sig": "public static final\u00a0SctpSocketOption<Boolean> SCTP_DISABLE_FRAGMENTS", "description": "Enables or disables message fragmentation.\n\n  The value of this socket option is a Boolean that represents\n whether the option is enabled or disabled. If enabled no SCTP message\n fragmentation will be performed. Instead if a message being sent\n exceeds the current PMTU size, the message will NOT be sent and\n an error will be indicated to the user.\n\n  It is implementation specific whether or not this option is\n supported."}, {"field_name": "SCTP_EXPLICIT_COMPLETE", "field_sig": "public static final\u00a0SctpSocketOption<Boolean> SCTP_EXPLICIT_COMPLETE", "description": "Enables or disables explicit message completion.\n\n  The value of this socket option is a Boolean that represents\n whether the option is enabled or disabled. When this option is enabled,\n the send method may be invoked multiple times to a send message.\n The isComplete parameter of the MessageInfo must only\n be set to true for the final send to indicate that the message is\n complete. If this option is disabled then each individual send\n invocation is considered complete.\n\n  The default value of the option is false indicating that the\n option is disabled. It is implementation specific whether or not this\n option is supported."}, {"field_name": "SCTP_FRAGMENT_INTERLEAVE", "field_sig": "public static final\u00a0SctpSocketOption<Integer> SCTP_FRAGMENT_INTERLEAVE", "description": "Fragmented interleave controls how the presentation of messages occur\n for the message receiver. There are three levels of fragment interleave\n defined. Two of the levels effect SctpChannel, while\n SctpMultiChannel is effected by all three levels.\n\n  This option takes an Integer value. It can be set to a value\n of 0, 1 or 2.\n\n  Setting the three levels provides the following receiver\n interactions:\n\n  level 0 - Prevents the interleaving of any messages. This\n means that when a partial delivery begins, no other messages will be\n received except the message being partially delivered. If another message\n arrives on a different stream (or association) that could be delivered,\n it will be blocked waiting for the user to read all of the partially\n delivered message.\n\n  level 1 - Allows interleaving of messages that are from\n different associations. For SctpChannel, level 0 and\n level 1 have the same meaning since an SctpChannel always\n receives messages from the same association. Note that setting an \n SctpMultiChannel to this level may cause multiple partial\n delivers from different associations but for any given association, only\n one message will be delivered until all parts of a message have been\n delivered. This means that one large message, being read with an\n association identification of \"X\", will block other messages from\n association \"X\" from being delivered.\n\n  level 2 - Allows complete interleaving of messages. This\n level requires that the sender carefully observe not only the peer\n Association but also must pay careful attention to the stream\n number. With this option enabled a partially delivered message may begin\n being delivered for association \"X\" stream \"Y\" and the next subsequent\n receive may return a message from association \"X\" stream \"Z\". Note that\n no other messages would be delivered for association \"X\" stream \"Y\"\n until all of stream \"Y\"'s partially delivered message was read.\n Note that this option effects both channel types.  Also note that\n for an SctpMultiChannel not only may another streams\n message from the same association be delivered from the next receive,\n some other associations message may be delivered upon the next receive.\n\n  It is implementation specific whether or not this option is\n supported."}, {"field_name": "SCTP_INIT_MAXSTREAMS", "field_sig": "public static final\u00a0SctpSocketOption<SctpStandardSocketOptions.InitMaxStreams> SCTP_INIT_MAXSTREAMS", "description": "The maximum number of streams requested by the local endpoint during\n association initialization.\n\n  The value of this socket option is an InitMaxStreams, that represents\n the maximum number of inbound and outbound streams that an association\n on the channel is prepared to support.\n\n  For an SctpChannel this option may only be used to\n change the number of inbound/outbound streams prior to connecting.\n\n  For an SctpMultiChannel this option determines\n the maximum number of inbound/outbound streams new associations setup\n on the channel will be prepared to support.\n\n  For an SctpServerChannel this option determines the\n maximum number of inbound/outbound streams accepted sockets will\n negotiate with their connecting peer.\n\n  In all cases the value set by this option is used in the negotiation\n of new associations setup on the channel's socket and the actual\n maximum number of inbound/outbound streams that have been negotiated\n with the peer can be retrieved from the appropriate Association. The Association can be retrieved from the\n COMM_UP\nAssociationChangeNotification belonging to that association.\n\n  This value is bounded by the actual implementation. In other\n words the user may be able to support more streams than the Operating\n System. In such a case, the Operating System limit may override the\n value requested by the user. The default value of 0 indicates to use\n the endpoints default value."}, {"field_name": "SCTP_NODELAY", "field_sig": "public static final\u00a0SctpSocketOption<Boolean> SCTP_NODELAY", "description": "Enables or disables a Nagle-like algorithm.\n\n  The value of this socket option is a Boolean that represents\n whether the option is enabled or disabled. SCTP uses an algorithm like\n The Nagle Algorithm to coalesce short segments and\n improve network efficiency."}, {"field_name": "SCTP_PRIMARY_ADDR", "field_sig": "public static final\u00a0SctpSocketOption<SocketAddress> SCTP_PRIMARY_ADDR", "description": "Requests that the local SCTP stack use the given peer address as\n the association primary.\n\n  The value of this socket option is a SocketAddress\n that represents the peer address that the local SCTP stack should use as\n the association primary. The address must be one of the association\n peer's addresses.\n\n  An SctpMultiChannel can control more than one\n association, the association parameter must be given when setting or\n retrieving this option.\n\n  Since SctpChannel only controls one association,\n the association parameter is not required and this option can be\n set or queried directly."}, {"field_name": "SCTP_SET_PEER_PRIMARY_ADDR", "field_sig": "public static final\u00a0SctpSocketOption<SocketAddress> SCTP_SET_PEER_PRIMARY_ADDR", "description": "Requests that the peer mark the enclosed address as the association\n primary.\n\n  The value of this socket option is a SocketAddress\n that represents the local address that the peer should use as its\n primary address. The given address must be one of the association's\n locally bound addresses.\n\n  An SctpMultiChannel can control more than one\n association, the association parameter must be given when setting or\n retrieving this option.\n\n  Since SctpChannel only controls one association,\n the association parameter is not required and this option can be\n queried directly.\n\n  Note, this is a set only option and cannot be retrieved by \n getOption. It is implementation specific whether or not this\n option is supported."}, {"field_name": "SO_SNDBUF", "field_sig": "public static final\u00a0SctpSocketOption<Integer> SO_SNDBUF", "description": "The size of the socket send buffer.\n\n  The value of this socket option is an Integer that is the\n size of the socket send buffer in bytes. The socket send buffer is an\n output buffer used by the networking implementation. It may need to be\n increased for high-volume connections. The value of the socket option is\n a hint to the implementation to size the buffer and the actual\n size may differ. The socket option can be queried to retrieve the actual\n size.\n\n  For SctpChannel, this controls the amount of data\n the SCTP stack may have waiting in internal buffers to be sent. This\n option therefore bounds the maximum size of data that can be sent in a\n single send call.\n\n  For SctpMultiChannel, the effect is the same as for \n SctpChannel, except that it applies to all associations. The option\n applies to each association's window size separately.\n\n  An implementation allows this socket option to be set before the\n socket is bound or connected. Whether an implementation allows the\n socket send buffer to be changed after the socket is bound is system\n dependent."}, {"field_name": "SO_RCVBUF", "field_sig": "public static final\u00a0SctpSocketOption<Integer> SO_RCVBUF", "description": "The size of the socket receive buffer.\n\n  The value of this socket option is an Integer that is the\n size of the socket receive buffer in bytes. The socket receive buffer is\n an input buffer used by the networking implementation. It may need to be\n increased for high-volume connections or decreased to limit the possible\n backlog of incoming data. The value of the socket option is a\n hint to the implementation to size the buffer and the actual\n size may differ.\n\n  For SctpChannel, this controls the receiver window size.\n\n  For SctpMultiChannel, the meaning is implementation\n dependent. It might control the receive buffer for each association bound\n to the socket descriptor or it might control the receive buffer for the\n whole socket.\n\n  An implementation allows this socket option to be set before the\n socket is bound or connected. Whether an implementation allows the\n socket receive buffer to be changed after the socket is bound is system\n dependent."}, {"field_name": "SO_LINGER", "field_sig": "public static final\u00a0SctpSocketOption<Integer> SO_LINGER", "description": "Linger on close if data is present.\n\n  The value of this socket option is an Integer that controls\n the action taken when unsent data is queued on the socket and a method\n to close the socket is invoked. If the value of the socket option is zero\n or greater, then it represents a timeout value, in seconds, known as the\n linger interval. The linger interval is the timeout for the\n close method to block while the operating system attempts to\n transmit the unsent data or it decides that it is unable to transmit the\n data. If the value of the socket option is less than zero then the option\n is disabled. In that case the close method does not wait until\n unsent data is transmitted; if possible the operating system will transmit\n any unsent data before the connection is closed.\n\n  This socket option is intended for use with sockets that are configured\n in blocking mode\n only. The behavior of the close method when this option is\n enabled on a non-blocking socket is not defined.\n\n  The initial value of this socket option is a negative value, meaning\n that the option is disabled. The option may be enabled, or the linger\n interval changed, at any time. The maximum value of the linger interval\n is system dependent. Setting the linger interval to a value that is\n greater than its maximum value causes the linger interval to be set to\n its maximum value."}], "methods": []}