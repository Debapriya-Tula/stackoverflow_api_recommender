{"name": "Interface ClassType", "module": "jdk.jdi", "package": "com.sun.jdi", "text": "A mirror of a class in the target VM. A ClassType is a refinement\n of ReferenceType that applies to true classes in the JLS\n sense of the definition (not an interface, not an array type). Any\n ObjectReference that mirrors an instance of such a class\n will have a ClassType as its type.", "codes": ["public interface ClassType\nextends ReferenceType"], "fields": [{"field_name": "INVOKE_SINGLE_THREADED", "field_sig": "static final\u00a0int INVOKE_SINGLE_THREADED", "description": "Perform method invocation with only the invoking thread resumed"}], "methods": [{"method_name": "superclass", "method_sig": "ClassType superclass()", "description": "Gets the superclass of this class."}, {"method_name": "interfaces", "method_sig": "List<InterfaceType> interfaces()", "description": "Gets the interfaces directly implemented by this class.\n Only the interfaces that are declared with the \"implements\"\n keyword in this class are included."}, {"method_name": "allInterfaces", "method_sig": "List<InterfaceType> allInterfaces()", "description": "Gets the interfaces directly and indirectly implemented\n by this class. Interfaces returned by interfaces()\n are returned as well all superinterfaces."}, {"method_name": "subclasses", "method_sig": "List<ClassType> subclasses()", "description": "Gets the currently loaded, direct subclasses of this class.\n No ordering of this list is guaranteed."}, {"method_name": "isEnum", "method_sig": "boolean isEnum()", "description": "Determine if this class was declared as an enum."}, {"method_name": "setValue", "method_sig": "void setValue (Field field,\n              Value value)\n       throws InvalidTypeException,\n              ClassNotLoadedException", "description": "Assigns a value to a static field.\n The Field must be valid for this ClassType; that is,\n it must be from the mirrored object's class or a superclass of that class.\n The field must not be final.\n \n Object values must be assignment compatible with the field type\n (This implies that the field type must be loaded through the\n enclosing class' class loader). Primitive values must be\n either assignment compatible with the field type or must be\n convertible to the field type without loss of information.\n See JLS section 5.2 for more information on assignment\n compatibility."}, {"method_name": "invokeMethod", "method_sig": "Value invokeMethod (ThreadReference thread,\n                   Method method,\n                   List<? extends Value> arguments,\n                   int options)\n            throws InvalidTypeException,\n                   ClassNotLoadedException,\n                   IncompatibleThreadStateException,\n                   InvocationException", "description": "Invokes the specified static Method in the\n target VM. The\n specified method can be defined in this class,\n or in a superclass.\n The method must be a static method\n but not a static initializer.\n Use newInstance(com.sun.jdi.ThreadReference, com.sun.jdi.Method, java.util.List<? extends com.sun.jdi.Value>, int) to create a new object and\n run its constructor.\n \n The method invocation will occur in the specified thread.\n Method invocation can occur only if the specified thread\n has been suspended by an event which occurred in that thread.\n Method invocation is not supported\n when the target VM has been suspended through\n VirtualMachine.suspend() or when the specified thread\n is suspended through ThreadReference.suspend().\n \n The specified method is invoked with the arguments in the specified\n argument list.  The method invocation is synchronous; this method\n does not return until the invoked method returns in the target VM.\n If the invoked method throws an exception, this method will throw\n an InvocationException which contains a mirror to the exception\n object thrown.\n \n Object arguments must be assignment compatible with the argument type\n (This implies that the argument type must be loaded through the\n enclosing class' class loader). Primitive arguments must be\n either assignment compatible with the argument type or must be\n convertible to the argument type without loss of information.\n If the method being called accepts a variable number of arguments,\n then the last argument type is an array of some component type.\n The argument in the matching position can be omitted, or can be null,\n an array of the same component type, or an argument of the\n component type followed by any number of other arguments of the same\n type. If the argument is omitted, then a 0 length array of the\n component type is passed.  The component type can be a primitive type.\n Autoboxing is not supported.\n\n See Section 5.2 of\n The Java\u2122 Language Specification\n for more information on assignment compatibility.\n \n By default, all threads in the target VM are resumed while\n the method is being invoked if they were previously\n suspended by an event or by VirtualMachine.suspend() or\n ThreadReference.suspend(). This is done to prevent the deadlocks\n that will occur if any of the threads own monitors\n that will be needed by the invoked method.\n Note, however, that this implicit resume acts exactly like\n ThreadReference.resume(), so if the thread's suspend\n count is greater than 1, it will remain in a suspended state\n during the invocation and thus a deadlock could still occur.\n By default, when the invocation completes,\n all threads in the target VM are suspended, regardless their state\n before the invocation.\n It is possible that\n breakpoints or other events might occur during the invocation.\n This can cause deadlocks as described above. It can also cause a deadlock\n if invokeMethod is called from the client's event handler thread.  In this\n case, this thread will be waiting for the invokeMethod to complete and\n won't read the EventSet that comes in for the new event.  If this\n new EventSet is SUSPEND_ALL, then a deadlock will occur because no\n one will resume the EventSet.  To avoid this, all EventRequests should\n be disabled before doing the invokeMethod, or the invokeMethod should\n not be done from the client's event handler thread.\n \n The resumption of other threads during the invocation can be prevented\n by specifying the INVOKE_SINGLE_THREADED\n bit flag in the options argument; however,\n there is no protection against or recovery from the deadlocks\n described above, so this option should be used with great caution.\n Only the specified thread will be resumed (as described for all\n threads above). Upon completion of a single threaded invoke, the invoking thread\n will be suspended once again. Note that any threads started during\n the single threaded invocation will not be suspended when the\n invocation completes.\n \n If the target VM is disconnected during the invoke (for example, through\n VirtualMachine.dispose()) the method invocation continues."}, {"method_name": "newInstance", "method_sig": "ObjectReference newInstance (ThreadReference thread,\n                            Method method,\n                            List<? extends Value> arguments,\n                            int options)\n                     throws InvalidTypeException,\n                            ClassNotLoadedException,\n                            IncompatibleThreadStateException,\n                            InvocationException", "description": "Constructs a new instance of this type, using\n the given constructor Method in the\n target VM. The\n specified constructor must be defined in this class.\n \n Instance creation will occur in the specified thread.\n Instance creation can occur only if the specified thread\n has been suspended by an event which occurred in that thread.\n Instance creation is not supported\n when the target VM has been suspended through\n VirtualMachine.suspend() or when the specified thread\n is suspended through ThreadReference.suspend().\n \n The specified constructor is invoked with the arguments in the specified\n argument list.  The invocation is synchronous; this method\n does not return until the constructor returns in the target VM.\n If the invoked method throws an\n exception, this method will throw an InvocationException\n which contains a mirror to the exception object thrown.\n \n Object arguments must be assignment compatible with the argument type\n (This implies that the argument type must be loaded through the\n enclosing class' class loader). Primitive arguments must be\n either assignment compatible with the argument type or must be\n convertible to the argument type without loss of information.\n If the method being called accepts a variable number of arguments,\n then the last argument type is an array of some component type.\n The argument in the matching position can be omitted, or can be null,\n an array of the same component type, or an argument of the\n component type, followed by any number of other arguments of the same\n type. If the argument is omitted, then a 0 length array of the\n component type is passed.  The component type can be a primitive type.\n Autoboxing is not supported.\n\n See section 5.2 of\n The Java\u2122 Language Specification\n for more information on assignment compatibility.\n \n By default, all threads in the target VM are resumed while\n the method is being invoked if they were previously\n suspended by an event or by VirtualMachine.suspend() or\n ThreadReference.suspend(). This is done to prevent the deadlocks\n that will occur if any of the threads own monitors\n that will be needed by the invoked method. It is possible that\n breakpoints or other events might occur during the invocation.\n Note, however, that this implicit resume acts exactly like\n ThreadReference.resume(), so if the thread's suspend\n count is greater than 1, it will remain in a suspended state\n during the invocation. By default, when the invocation completes,\n all threads in the target VM are suspended, regardless their state\n before the invocation.\n \n The resumption of other threads during the invocation can be prevented\n by specifying the INVOKE_SINGLE_THREADED\n bit flag in the options argument; however,\n there is no protection against or recovery from the deadlocks\n described above, so this option should be used with great caution.\n Only the specified thread will be resumed (as described for all\n threads above). Upon completion of a single threaded invoke, the invoking thread\n will be suspended once again. Note that any threads started during\n the single threaded invocation will not be suspended when the\n invocation completes.\n \n If the target VM is disconnected during the invoke (for example, through\n VirtualMachine.dispose()) the method invocation continues."}, {"method_name": "concreteMethodByName", "method_sig": "Method concreteMethodByName (String name,\n                            String signature)", "description": "Returns a the single non-abstract Method visible from\n this class that has the given name and signature.\n See ReferenceType.methodsByName(java.lang.String, java.lang.String)\n for information on signature format.\n \n The returned method (if non-null) is a component of\n ClassType."}]}