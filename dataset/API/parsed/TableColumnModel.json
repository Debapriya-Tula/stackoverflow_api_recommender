{"name": "Interface TableColumnModel", "module": "java.desktop", "package": "javax.swing.table", "text": "Defines the requirements for a table column model object suitable for\n use with JTable.", "codes": ["public interface TableColumnModel"], "fields": [], "methods": [{"method_name": "addColumn", "method_sig": "void addColumn (TableColumn aColumn)", "description": "Appends aColumn to the end of the\n  tableColumns array.\n  This method posts a columnAdded\n  event to its listeners."}, {"method_name": "removeColumn", "method_sig": "void removeColumn (TableColumn column)", "description": "Deletes the TableColumn column from the\n  tableColumns array.  This method will do nothing if\n  column is not in the table's column list.\n  This method posts a columnRemoved\n  event to its listeners."}, {"method_name": "moveColumn", "method_sig": "void moveColumn (int columnIndex,\n                int newIndex)", "description": "Moves the column and its header at columnIndex to\n newIndex.  The old column at columnIndex\n will now be found at newIndex.  The column that used\n to be at newIndex is shifted left or right\n to make room.  This will not move any columns if\n columnIndex equals newIndex.  This method\n posts a columnMoved event to its listeners."}, {"method_name": "setColumnMargin", "method_sig": "void setColumnMargin (int newMargin)", "description": "Sets the TableColumn's column margin to\n newMargin.  This method posts\n a columnMarginChanged event to its listeners."}, {"method_name": "getColumnCount", "method_sig": "int getColumnCount()", "description": "Returns the number of columns in the model."}, {"method_name": "getColumns", "method_sig": "Enumeration<TableColumn> getColumns()", "description": "Returns an Enumeration of all the columns in the model."}, {"method_name": "getColumnIndex", "method_sig": "int getColumnIndex (Object columnIdentifier)", "description": "Returns the index of the first column in the table\n whose identifier is equal to identifier,\n when compared using equals."}, {"method_name": "getColumn", "method_sig": "TableColumn getColumn (int columnIndex)", "description": "Returns the TableColumn object for the column at\n columnIndex."}, {"method_name": "getColumnMargin", "method_sig": "int getColumnMargin()", "description": "Returns the width between the cells in each column."}, {"method_name": "getColumnIndexAtX", "method_sig": "int getColumnIndexAtX (int xPosition)", "description": "Returns the index of the column that lies on the\n horizontal point, xPosition;\n or -1 if it lies outside the any of the column's bounds.\n\n In keeping with Swing's separable model architecture, a\n TableColumnModel does not know how the table columns actually appear on\n screen.  The visual presentation of the columns is the responsibility\n of the view/controller object using this model (typically JTable).  The\n view/controller need not display the columns sequentially from left to\n right.  For example, columns could be displayed from right to left to\n accommodate a locale preference or some columns might be hidden at the\n request of the user.  Because the model does not know how the columns\n are laid out on screen, the given xPosition should not be\n considered to be a coordinate in 2D graphics space.  Instead, it should\n be considered to be a width from the start of the first column in the\n model.  If the column index for a given X coordinate in 2D space is\n required, JTable.columnAtPoint can be used instead."}, {"method_name": "getTotalColumnWidth", "method_sig": "int getTotalColumnWidth()", "description": "Returns the total width of all the columns."}, {"method_name": "setColumnSelectionAllowed", "method_sig": "void setColumnSelectionAllowed (boolean flag)", "description": "Sets whether the columns in this model may be selected."}, {"method_name": "getColumnSelectionAllowed", "method_sig": "boolean getColumnSelectionAllowed()", "description": "Returns true if columns may be selected."}, {"method_name": "getSelectedColumns", "method_sig": "int[] getSelectedColumns()", "description": "Returns an array of indicies of all selected columns."}, {"method_name": "getSelectedColumnCount", "method_sig": "int getSelectedColumnCount()", "description": "Returns the number of selected columns."}, {"method_name": "setSelectionModel", "method_sig": "void setSelectionModel (ListSelectionModel newModel)", "description": "Sets the selection model."}, {"method_name": "getSelectionModel", "method_sig": "ListSelectionModel getSelectionModel()", "description": "Returns the current selection model."}, {"method_name": "addColumnModelListener", "method_sig": "void addColumnModelListener (TableColumnModelListener x)", "description": "Adds a listener for table column model events."}, {"method_name": "removeColumnModelListener", "method_sig": "void removeColumnModelListener (TableColumnModelListener x)", "description": "Removes a listener for table column model events."}]}