{"name": "Class StyledEditorKit", "module": "java.desktop", "package": "javax.swing.text", "text": "This is the set of things needed by a text component\n to be a reasonably functioning editor for some type\n of text document.  This implementation provides a default\n implementation which treats text as styled text and\n provides a minimal set of actions for editing styled text.", "codes": ["public class StyledEditorKit\nextends DefaultEditorKit"], "fields": [], "methods": [{"method_name": "getInputAttributes", "method_sig": "public MutableAttributeSet getInputAttributes()", "description": "Gets the input attributes for the pane.  When\n the caret moves and there is no selection, the\n input attributes are automatically mutated to\n reflect the character attributes of the current\n caret location.  The styled editing actions\n use the input attributes to carry out their\n actions."}, {"method_name": "getCharacterAttributeRun", "method_sig": "public Element getCharacterAttributeRun()", "description": "Fetches the element representing the current\n run of character attributes for the caret."}, {"method_name": "getActions", "method_sig": "public Action[] getActions()", "description": "Fetches the command list for the editor.  This is\n the list of commands supported by the superclass\n augmented by the collection of commands defined\n locally for style operations."}, {"method_name": "createDefaultDocument", "method_sig": "public Document createDefaultDocument()", "description": "Creates an uninitialized text storage model\n that is appropriate for this type of editor."}, {"method_name": "install", "method_sig": "public void install (JEditorPane c)", "description": "Called when the kit is being installed into\n a JEditorPane."}, {"method_name": "deinstall", "method_sig": "public void deinstall (JEditorPane c)", "description": "Called when the kit is being removed from the\n JEditorPane.  This is used to unregister any\n listeners that were attached."}, {"method_name": "getViewFactory", "method_sig": "public ViewFactory getViewFactory()", "description": "Fetches a factory that is suitable for producing\n views of any models that are produced by this\n kit.  This is implemented to return View implementations\n for the following kinds of elements:\n \nAbstractDocument.ContentElementName\n AbstractDocument.ParagraphElementName\n AbstractDocument.SectionElementName\n StyleConstants.ComponentElementName\n StyleConstants.IconElementName\n "}, {"method_name": "clone", "method_sig": "public Object clone()", "description": "Creates a copy of the editor kit."}, {"method_name": "createInputAttributes", "method_sig": "protected void createInputAttributes (Element element,\n                                     MutableAttributeSet set)", "description": "Copies the key/values in elements AttributeSet into\n set. This does not copy component, icon, or element\n names attributes. Subclasses may wish to refine what is and what\n isn't copied here. But be sure to first remove all the attributes that\n are in set.\n This is called anytime the caret moves over a different location."}]}