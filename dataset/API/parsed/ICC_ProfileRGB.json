{"name": "Class ICC_ProfileRGB", "module": "java.desktop", "package": "java.awt.color", "text": "The ICC_ProfileRGB class is a subclass of the ICC_Profile class\n that represents profiles which meet the following criteria:\n \nThe profile's color space type is RGB.\nThe profile includes the redColorantTag,\n greenColorantTag, blueColorantTag,\n redTRCTag, greenTRCTag,\n blueTRCTag, and mediaWhitePointTag tags.\n\n The ICC_Profile getInstance method will\n return an ICC_ProfileRGB object when these conditions are met.\n Three-component, matrix-based input profiles and RGB display profiles are\n examples of this type of profile.\n \n This profile class provides color transform matrices and lookup tables\n that Java or native methods can use directly to\n optimize color conversion in some cases.\n \n To transform from a device profile color space to the CIEXYZ Profile\n Connection Space, each device color component is first linearized by\n a lookup through the corresponding tone reproduction curve (TRC).\n The resulting linear RGB components are converted to the CIEXYZ PCS\n using a a 3x3 matrix constructed from the RGB colorants.\n \n\n \u00a0               linearR = redTRC[deviceR]\n\n \u00a0               linearG = greenTRC[deviceG]\n\n \u00a0               linearB = blueTRC[deviceB]\n\n \u00a0 _      _       _                                             _   _         _\n \u00a0[  PCSX  ]     [  redColorantX  greenColorantX  blueColorantX  ] [  linearR  ]\n \u00a0[        ]     [                                               ] [           ]\n \u00a0[  PCSY  ]  =  [  redColorantY  greenColorantY  blueColorantY  ] [  linearG  ]\n \u00a0[        ]     [                                               ] [           ]\n \u00a0[_ PCSZ _]     [_ redColorantZ  greenColorantZ  blueColorantZ _] [_ linearB _]\n\n \n The inverse transform is performed by converting PCS XYZ components to linear\n RGB components through the inverse of the above 3x3 matrix, and then converting\n linear RGB to device RGB through inverses of the TRCs.", "codes": ["public class ICC_ProfileRGB\nextends ICC_Profile"], "fields": [{"field_name": "REDCOMPONENT", "field_sig": "public static final\u00a0int REDCOMPONENT", "description": "Used to get a gamma value or TRC for the red component."}, {"field_name": "GREENCOMPONENT", "field_sig": "public static final\u00a0int GREENCOMPONENT", "description": "Used to get a gamma value or TRC for the green component."}, {"field_name": "BLUECOMPONENT", "field_sig": "public static final\u00a0int BLUECOMPONENT", "description": "Used to get a gamma value or TRC for the blue component."}], "methods": [{"method_name": "getMediaWhitePoint", "method_sig": "public float[] getMediaWhitePoint()", "description": "Returns an array that contains the components of the profile's\n mediaWhitePointTag."}, {"method_name": "getMatrix", "method_sig": "public float[][] getMatrix()", "description": "Returns a 3x3 float matrix constructed from the\n X, Y, and Z components of the profile's redColorantTag,\n greenColorantTag, and blueColorantTag.\n \n This matrix can be used for color transforms in the forward\n direction of the profile--from the profile color space\n to the CIEXYZ PCS."}, {"method_name": "getGamma", "method_sig": "public float getGamma (int component)", "description": "Returns a gamma value representing the tone reproduction curve\n (TRC) for a particular component.  The component parameter\n must be one of REDCOMPONENT, GREENCOMPONENT, or BLUECOMPONENT.\n \n If the profile\n represents the TRC for the corresponding component\n as a table rather than a single gamma value, an\n exception is thrown.  In this case the actual table\n can be obtained through the getTRC(int) method.\n When using a gamma value,\n the linear component (R, G, or B) is computed as follows:\n \n\n \u00a0                                         gamma\n \u00a0        linearComponent = deviceComponent\n\n"}, {"method_name": "getTRC", "method_sig": "public short[] getTRC (int component)", "description": "Returns the TRC for a particular component as an array.\n Component must be REDCOMPONENT,\n GREENCOMPONENT, or BLUECOMPONENT.\n Otherwise the returned array\n represents a lookup table where the input component value\n is conceptually in the range [0.0, 1.0].  Value 0.0 maps\n to array index 0 and value 1.0 maps to array index length-1.\n Interpolation might be used to generate output values for\n input values that do not map exactly to an index in the\n array.  Output values also map linearly to the range [0.0, 1.0].\n Value 0.0 is represented by an array value of 0x0000 and\n value 1.0 by 0xFFFF.  In other words, the values are really unsigned\n short values even though they are returned in a\n short array.\n\n If the profile has specified the corresponding TRC\n as linear (gamma = 1.0) or as a simple gamma value, this method\n throws an exception.  In this case, the getGamma(int)\n method should be used to get the gamma value."}]}