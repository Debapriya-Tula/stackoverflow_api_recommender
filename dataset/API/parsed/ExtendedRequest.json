{"name": "Interface ExtendedRequest", "module": "java.naming", "package": "javax.naming.ldap", "text": "This interface represents an LDAPv3 extended operation request as defined in\n RFC 2251.\n \n     ExtendedRequest ::= [APPLICATION 23] SEQUENCE {\n              requestName      [0] LDAPOID,\n              requestValue     [1] OCTET STRING OPTIONAL }\n \n It comprises an object identifier string and an optional ASN.1 BER\n encoded value.\n\n The methods in this class are used by the service provider to construct\n the bits to send to the LDAP server. Applications typically only deal with\n the classes that implement this interface, supplying them with\n any information required for a particular extended operation request.\n It would then pass such a class as an argument to the\n LdapContext.extendedOperation() method for performing the\n LDAPv3 extended operation.\n\n For example, suppose the LDAP server supported a 'get time' extended operation.\n It would supply GetTimeRequest and GetTimeResponse classes:\n\n public class GetTimeRequest implements ExtendedRequest {\n     public GetTimeRequest() {... };\n     public ExtendedResponse createExtendedResponse(String id,\n         byte[] berValue, int offset, int length)\n         throws NamingException {\n         return new GetTimeResponse(id, berValue, offset, length);\n     }\n     ...\n }\n public class GetTimeResponse implements ExtendedResponse {\n     long time;\n     public GetTimeResponse(String id, byte[] berValue, int offset,\n         int length) throws NamingException {\n         time =      ... // decode berValue to get time\n     }\n     public java.util.Date getDate() { return new java.util.Date(time) };\n     public long getTime() { return time };\n     ...\n }\n\n A program would use then these classes as follows:\n\n GetTimeResponse resp =\n     (GetTimeResponse) ectx.extendedOperation(new GetTimeRequest());\n long time = resp.getTime();\n", "codes": ["public interface ExtendedRequest\nextends Serializable"], "fields": [], "methods": [{"method_name": "getID", "method_sig": "String getID()", "description": "Retrieves the object identifier of the request."}, {"method_name": "getEncodedValue", "method_sig": "byte[] getEncodedValue()", "description": "Retrieves the ASN.1 BER encoded value of the LDAP extended operation\n request. Null is returned if the value is absent.\n\n The result is the raw BER bytes including the tag and length of\n the request value. It does not include the request OID.\n This method is called by the service provider to get the bits to\n put into the extended operation to be sent to the LDAP server."}, {"method_name": "createExtendedResponse", "method_sig": "ExtendedResponse createExtendedResponse (String id,\n                                        byte[] berValue,\n                                        int offset,\n                                        int length)\n                                 throws NamingException", "description": "Creates the response object that corresponds to this request.\n\n After the service provider has sent the extended operation request\n to the LDAP server, it will receive a response from the server.\n If the operation failed, the provider will throw a NamingException.\n If the operation succeeded, the provider will invoke this method\n using the data that it got back in the response.\n It is the job of this method to return a class that implements\n the ExtendedResponse interface that is appropriate for the\n extended operation request.\n\n For example, a Start TLS extended request class would need to know\n how to process a Start TLS extended response. It does this by creating\n a class that implements ExtendedResponse."}]}