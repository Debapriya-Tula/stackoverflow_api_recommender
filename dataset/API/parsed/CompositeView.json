{"name": "Class CompositeView", "module": "java.desktop", "package": "javax.swing.text", "text": "CompositeView is an abstract View\n implementation which manages one or more child views.\n (Note that CompositeView is intended\n for managing relatively small numbers of child views.)\n CompositeView is intended to be used as\n a starting point for View implementations,\n such as BoxView, that will contain child\n Views. Subclasses that wish to manage the\n collection of child Views should use the\n replace(int, int, javax.swing.text.View[]) method.  As View invokes\n replace during DocumentListener\n notification, you normally won't need to directly\n invoke replace.\n\n While CompositeView\n does not impose a layout policy on its child Views,\n it does allow for inseting the child Views\n it will contain.  The insets can be set by either\n setInsets(short, short, short, short) or setParagraphInsets(javax.swing.text.AttributeSet).\n\n In addition to the abstract methods of\n View,\n subclasses of CompositeView will need to\n override:\n \nisBefore(int, int, java.awt.Rectangle) - Used to test if a given\n     View location is before the visual space\n     of the CompositeView.\n isAfter(int, int, java.awt.Rectangle) - Used to test if a given\n     View location is after the visual space\n     of the CompositeView.\n getViewAtPoint(int, int, java.awt.Rectangle) - Returns the view at\n     a given visual location.\n childAllocation(int, java.awt.Rectangle) - Returns the bounds of\n     a particular child View.\n     getChildAllocation will invoke\n     childAllocation after offseting\n     the bounds by the Insets of the\n     CompositeView.\n ", "codes": ["public abstract class CompositeView\nextends View"], "fields": [], "methods": [{"method_name": "loadChildren", "method_sig": "protected void loadChildren (ViewFactory f)", "description": "Loads all of the children to initialize the view.\n This is called by the setParent(javax.swing.text.View)\n method.  Subclasses can reimplement this to initialize\n their child views in a different manner.  The default\n implementation creates a child view for each\n child element."}, {"method_name": "setParent", "method_sig": "public void setParent (View parent)", "description": "Sets the parent of the view.\n This is reimplemented to provide the superclass\n behavior as well as calling the loadChildren\n method if this view does not already have children.\n The children should not be loaded in the\n constructor because the act of setting the parent\n may cause them to try to search up the hierarchy\n (to get the hosting Container for example).\n If this view has children (the view is being moved\n from one place in the view hierarchy to another),\n the loadChildren method will not be called."}, {"method_name": "getViewCount", "method_sig": "public int getViewCount()", "description": "Returns the number of child views of this view."}, {"method_name": "getView", "method_sig": "public View getView (int n)", "description": "Returns the n-th view in this container."}, {"method_name": "replace", "method_sig": "public void replace (int offset,\n                    int length,\n                    View[] views)", "description": "Replaces child views.  If there are no views to remove\n this acts as an insert.  If there are no views to\n add this acts as a remove.  Views being removed will\n have the parent set to null,\n and the internal reference to them removed so that they\n may be garbage collected."}, {"method_name": "getChildAllocation", "method_sig": "public Shape getChildAllocation (int index,\n                                Shape a)", "description": "Fetches the allocation for the given child view to\n render into. This enables finding out where various views\n are located."}, {"method_name": "modelToView", "method_sig": "public Shape modelToView (int pos,\n                         Shape a,\n                         Position.Bias b)\n                  throws BadLocationException", "description": "Provides a mapping from the document model coordinate space\n to the coordinate space of the view mapped to it."}, {"method_name": "modelToView", "method_sig": "public Shape modelToView (int p0,\n                         Position.Bias b0,\n                         int p1,\n                         Position.Bias b1,\n                         Shape a)\n                  throws BadLocationException", "description": "Provides a mapping from the document model coordinate space\n to the coordinate space of the view mapped to it."}, {"method_name": "viewToModel", "method_sig": "public int viewToModel (float x,\n                       float y,\n                       Shape a,\n                       Position.Bias[] bias)", "description": "Provides a mapping from the view coordinate space to the logical\n coordinate space of the model."}, {"method_name": "getNextVisualPositionFrom", "method_sig": "public int getNextVisualPositionFrom (int pos,\n                                     Position.Bias b,\n                                     Shape a,\n                                     int direction,\n                                     Position.Bias[] biasRet)\n                              throws BadLocationException", "description": "Provides a way to determine the next visually represented model\n location that one might place a caret.  Some views may not be visible,\n they might not be in the same order found in the model, or they just\n might not allow access to some of the locations in the model.\n This is a convenience method for getNextNorthSouthVisualPositionFrom(int, javax.swing.text.Position.Bias, java.awt.Shape, int, javax.swing.text.Position.Bias[])\n and getNextEastWestVisualPositionFrom(int, javax.swing.text.Position.Bias, java.awt.Shape, int, javax.swing.text.Position.Bias[]).\n This method enables specifying a position to convert\n within the range of >=0.  If the value is -1, a position\n will be calculated automatically.  If the value < -1,\n the BadLocationException will be thrown."}, {"method_name": "getViewIndex", "method_sig": "public int getViewIndex (int pos,\n                        Position.Bias b)", "description": "Returns the child view index representing the given\n position in the model.  This is implemented to call the\n getViewIndexByPosition\n method for backward compatibility."}, {"method_name": "isBefore", "method_sig": "protected abstract boolean isBefore (int x,\n                                    int y,\n                                    Rectangle alloc)", "description": "Tests whether a point lies before the rectangle range."}, {"method_name": "isAfter", "method_sig": "protected abstract boolean isAfter (int x,\n                                   int y,\n                                   Rectangle alloc)", "description": "Tests whether a point lies after the rectangle range."}, {"method_name": "getViewAtPoint", "method_sig": "protected abstract View getViewAtPoint (int x,\n                                       int y,\n                                       Rectangle alloc)", "description": "Fetches the child view at the given coordinates."}, {"method_name": "childAllocation", "method_sig": "protected abstract void childAllocation (int index,\n                                        Rectangle a)", "description": "Returns the allocation for a given child."}, {"method_name": "getViewAtPosition", "method_sig": "protected View getViewAtPosition (int pos,\n                                 Rectangle a)", "description": "Fetches the child view that represents the given position in\n the model.  This is implemented to fetch the view in the case\n where there is a child view for each child element."}, {"method_name": "getViewIndexAtPosition", "method_sig": "protected int getViewIndexAtPosition (int pos)", "description": "Fetches the child view index representing the given position in\n the model.  This is implemented to fetch the view in the case\n where there is a child view for each child element."}, {"method_name": "getInsideAllocation", "method_sig": "protected Rectangle getInsideAllocation (Shape a)", "description": "Translates the immutable allocation given to the view\n to a mutable allocation that represents the interior\n allocation (i.e. the bounds of the given allocation\n with the top, left, bottom, and right insets removed.\n It is expected that the returned value would be further\n mutated to represent an allocation to a child view.\n This is implemented to reuse an instance variable so\n it avoids creating excessive Rectangles.  Typically\n the result of calling this method would be fed to\n the childAllocation method."}, {"method_name": "setParagraphInsets", "method_sig": "protected void setParagraphInsets (AttributeSet attr)", "description": "Sets the insets from the paragraph attributes specified in\n the given attributes."}, {"method_name": "setInsets", "method_sig": "protected void setInsets (short top,\n                         short left,\n                         short bottom,\n                         short right)", "description": "Sets the insets for the view."}, {"method_name": "getLeftInset", "method_sig": "protected short getLeftInset()", "description": "Gets the left inset."}, {"method_name": "getRightInset", "method_sig": "protected short getRightInset()", "description": "Gets the right inset."}, {"method_name": "getTopInset", "method_sig": "protected short getTopInset()", "description": "Gets the top inset."}, {"method_name": "getBottomInset", "method_sig": "protected short getBottomInset()", "description": "Gets the bottom inset."}, {"method_name": "getNextNorthSouthVisualPositionFrom", "method_sig": "protected int getNextNorthSouthVisualPositionFrom (int pos,\n                                                  Position.Bias b,\n                                                  Shape a,\n                                                  int direction,\n                                                  Position.Bias[] biasRet)\n                                           throws BadLocationException", "description": "Returns the next visual position for the cursor, in either the\n north or south direction."}, {"method_name": "getNextEastWestVisualPositionFrom", "method_sig": "protected int getNextEastWestVisualPositionFrom (int pos,\n                                                Position.Bias b,\n                                                Shape a,\n                                                int direction,\n                                                Position.Bias[] biasRet)\n                                         throws BadLocationException", "description": "Returns the next visual position for the cursor, in either the\n east or west direction."}, {"method_name": "flipEastAndWestAtEnds", "method_sig": "protected boolean flipEastAndWestAtEnds (int position,\n                                        Position.Bias bias)", "description": "Determines in which direction the next view lays.\n Consider the View at index n. Typically the\n Views are layed out from left to right,\n so that the View to the EAST will be\n at index n + 1, and the View to the WEST\n will be at index n - 1. In certain situations,\n such as with bidirectional text, it is possible\n that the View to EAST is not at index n + 1,\n but rather at index n - 1, or that the View\n to the WEST is not at index n - 1, but index n + 1.\n In this case this method would return true, indicating the\n Views are layed out in descending order.\n \n This unconditionally returns false, subclasses should override this\n method if there is the possibility for laying Views in\n descending order."}]}