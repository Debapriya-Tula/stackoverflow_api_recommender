{"name": "Enum NestingKind", "module": "java.compiler", "package": "javax.lang.model.element", "text": "The nesting kind of a type element.\n Type elements come in four varieties:\n top-level, member, local, and anonymous.\n Nesting kind is a non-standard term used here to denote this\n classification.\n\n Note that it is possible additional nesting kinds will be added\n in future versions of the platform.\n\n Example: The classes below are annotated with their nesting kind.\n \n\n import java.lang.annotation.*;\n import static java.lang.annotation.RetentionPolicy.*;\n import javax.lang.model.element.*;\n import static javax.lang.model.element.NestingKind.*;\n\n @Nesting(TOP_LEVEL)\n public class NestingExamples {\n     @Nesting(MEMBER)\n     static class MemberClass1{}\n\n     @Nesting(MEMBER)\n     class MemberClass2{}\n\n     public static void main(String... argv) {\n         @Nesting(LOCAL)\n         class LocalClass{};\n\n         Class<?>[] classes = {\n             NestingExamples.class,\n             MemberClass1.class,\n             MemberClass2.class,\n             LocalClass.class\n         };\n\n         for(Class<?> clazz : classes) {\n             System.out.format(\"%s is %s%n\",\n                               clazz.getName(),\n                               clazz.getAnnotation(Nesting.class).value());\n         }\n     }\n }\n\n @Retention(RUNTIME)\n @interface Nesting {\n     NestingKind value();\n }\n ", "codes": ["public enum NestingKind\nextends Enum<NestingKind>"], "fields": [], "methods": [{"method_name": "values", "method_sig": "public static NestingKind[] values()", "description": "Returns an array containing the constants of this enum type, in\nthe order they are declared. This method may be used to iterate\nover the constants as follows:\n\nfor (NestingKind c : NestingKind.values())\n\u00a0   System.out.println(c);\n"}, {"method_name": "valueOf", "method_sig": "public static NestingKind valueOf (String name)", "description": "Returns the enum constant of this type with the specified name.\nThe string must match exactly an identifier used to declare an\nenum constant in this type.  (Extraneous whitespace characters are \nnot permitted.)"}, {"method_name": "isNested", "method_sig": "public boolean isNested()", "description": "Does this constant correspond to a nested type element?\n A nested type element is any that is not top-level.\n More specifically, an inner type element is any nested type element that\n is not static."}]}