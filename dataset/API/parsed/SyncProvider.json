{"name": "Class SyncProvider", "module": "java.sql.rowset", "package": "javax.sql.rowset.spi", "text": "The synchronization mechanism that provides reader/writer capabilities for\n disconnected RowSet objects.\n A SyncProvider implementation is a class that extends the\n SyncProvider abstract class.\n \n A SyncProvider implementation is\n identified by a unique ID, which is its fully qualified class name.\n This name must be registered with the\n SyncFactory SPI, thus making the implementation available to\n all RowSet implementations.\n The factory mechanism in the reference implementation uses this name to instantiate\n the implementation, which can then provide a RowSet object with its\n reader (a javax.sql.RowSetReader object) and its writer (a\n javax.sql.RowSetWriter object).\n \n The Jdbc RowSet Implementations specification provides two\n reference implementations of the SyncProvider abstract class:\n RIOptimisticProvider and RIXMLProvider.\n The RIOptimisticProvider can set any RowSet\n implementation with a RowSetReader object and a\n RowSetWriter object.  However, only the RIXMLProvider\n implementation can set an XmlReader object and an\n XmlWriter object. A WebRowSet object uses the\n XmlReader object to read data in XML format to populate itself with that\n data.  It uses the XmlWriter object to write itself to a stream or\n java.io.Writer object in XML format.\n\n 1.0 Naming Convention for Implementations\n As a guide  to naming SyncProvider\n implementations, the following should be noted:\n \nThe name for a SyncProvider implementation\n is its fully qualified class name.\n It is recommended that vendors supply a\n SyncProvider implementation in a package named providers.\n \n\n For instance, if a vendor named Fred, Inc. offered a\n SyncProvider implementation, you could have the following:\n \n     Vendor name:  Fred, Inc.\n     Domain name of vendor:  com.fred\n     Package name:  com.fred.providers\n     SyncProvider implementation class name:  HighAvailabilityProvider\n\n     Fully qualified class name of SyncProvider implementation:\n                        com.fred.providers.HighAvailabilityProvider\n \n\n The following line of code uses the fully qualified name to register\n this implementation with the SyncFactory static instance.\n \n     SyncFactory.registerProvider(\n                          \"com.fred.providers.HighAvailabilityProvider\");\n \n\n The default SyncProvider object provided with the reference\n implementation uses the following name:\n \n     com.sun.rowset.providers.RIOptimisticProvider\n \n\n A vendor can register a SyncProvider implementation class name\n with Oracle Corporation by sending email to jdbc@sun.com.\n Oracle will maintain a database listing the\n available SyncProvider implementations for use with compliant\n RowSet implementations.  This database will be similar to the\n one already maintained to list available JDBC drivers.\n \n Vendors should refer to the reference implementation synchronization\n providers for additional guidance on how to implement a new\n SyncProvider implementation.\n\n 2.0 How a RowSet Object Gets Its Provider\n\n A disconnected Rowset object may get access to a\n SyncProvider object in one of the following two ways:\n \nUsing a constructor\n\n       CachedRowSet crs = new CachedRowSet(\n                  \"com.fred.providers.HighAvailabilitySyncProvider\");\n      \nUsing the setSyncProvider method\n      \n       CachedRowSet crs = new CachedRowSet();\n       crs.setSyncProvider(\"com.fred.providers.HighAvailabilitySyncProvider\");\n      \n\n\n By default, the reference implementations of the RowSet synchronization\n providers are always available to the Java platform.\n If no other pluggable synchronization providers have been correctly\n registered, the SyncFactory will automatically generate\n an instance of the default SyncProvider reference implementation.\n Thus, in the preceding code fragment, if no implementation named\n com.fred.providers.HighAvailabilitySyncProvider has been\n registered with the SyncFactory instance, crs will be\n assigned the default provider in the reference implementation, which is\n com.sun.rowset.providers.RIOptimisticProvider.\n\n 3.0 Violations and Synchronization Issues\n If an update between a disconnected RowSet object\n and a data source violates\n the original query or the underlying data source constraints, this will\n result in undefined behavior for all disconnected RowSet implementations\n and their designated SyncProvider implementations.\n Not defining the behavior when such violations occur offers greater flexibility\n for a SyncProvider\n implementation to determine its own best course of action.\n \n A SyncProvider implementation\n may choose to implement a specific handler to\n handle a subset of query violations.\n However if an original query violation or a more general data source constraint\n violation is not handled by the SyncProvider implementation,\n all SyncProvider\n objects must throw a SyncProviderException.\n\n 4.0 Updatable SQL VIEWs\n It is possible for any disconnected or connected RowSet object to be populated\n from an SQL query that is formulated originally from an SQL VIEW.\n While in many cases it is possible for an update to be performed to an\n underlying view, such an update requires additional metadata, which may vary.\n The SyncProvider class provides two constants to indicate whether\n an implementation supports updating an SQL VIEW.\n \nNONUPDATABLE_VIEW_SYNC - Indicates that a SyncProvider\n implementation does not support synchronization with an SQL VIEW as the\n underlying source of data for the RowSet object.\n UPDATABLE_VIEW_SYNC - Indicates that a\n SyncProvider implementation\n supports synchronization with an SQL VIEW as the underlying source\n of data.\n \n\n The default is for a RowSet object not to be updatable if it was\n populated with data from an SQL VIEW.\n\n 5.0 SyncProvider Constants\n The SyncProvider class provides three sets of constants that\n are used as return values or parameters for SyncProvider methods.\n SyncProvider objects may be implemented to perform synchronization\n between a RowSet object and its underlying data source with varying\n degrees of care. The first group of constants indicate how synchronization\n is handled. For example, GRADE_NONE indicates that a\n SyncProvider object will not take any care to see what data is\n valid and will simply write the RowSet data to the data source.\n GRADE_MODIFIED_AT_COMMIT indicates that the provider will check\n only modified data for validity.  Other grades check all data for validity\n or set locks when data is modified or loaded.\n \nConstants to indicate the synchronization grade of a\n     SyncProvider object\n   \nSyncProvider.GRADE_NONE\n    SyncProvider.GRADE_MODIFIED_AT_COMMIT\n    SyncProvider.GRADE_CHECK_ALL_AT_COMMIT\n    SyncProvider.GRADE_LOCK_WHEN_MODIFIED\n    SyncProvider.GRADE_LOCK_WHEN_LOADED\n   \nConstants to indicate what locks are set on the data source\n   \nSyncProvider.DATASOURCE_NO_LOCK\n     SyncProvider.DATASOURCE_ROW_LOCK\n     SyncProvider.DATASOURCE_TABLE_LOCK\n     SyncProvider.DATASOURCE_DB_LOCK\n   \nConstants to indicate whether a SyncProvider object can\n       perform updates to an SQL VIEW \n       These constants are explained in the preceding section (4.0).\n   \nSyncProvider.UPDATABLE_VIEW_SYNC\n     SyncProvider.NONUPDATABLE_VIEW_SYNC\n   \n", "codes": ["public abstract class SyncProvider\nextends Object"], "fields": [{"field_name": "GRADE_NONE", "field_sig": "public static final\u00a0int GRADE_NONE", "description": "Indicates that no synchronization with the originating data source is\n provided. A SyncProvider\n implementation returning this grade will simply attempt to write\n updates in the RowSet object to the underlying data\n source without checking the validity of any data."}, {"field_name": "GRADE_CHECK_MODIFIED_AT_COMMIT", "field_sig": "public static final\u00a0int GRADE_CHECK_MODIFIED_AT_COMMIT", "description": "Indicates a low level optimistic synchronization grade with\n respect to the originating data source.\n\n A SyncProvider implementation\n returning this grade will check only rows that have changed."}, {"field_name": "GRADE_CHECK_ALL_AT_COMMIT", "field_sig": "public static final\u00a0int GRADE_CHECK_ALL_AT_COMMIT", "description": "Indicates a high level optimistic synchronization grade with\n respect to the originating data source.\n\n A SyncProvider implementation\n returning this grade will check all rows, including rows that have not\n changed."}, {"field_name": "GRADE_LOCK_WHEN_MODIFIED", "field_sig": "public static final\u00a0int GRADE_LOCK_WHEN_MODIFIED", "description": "Indicates a pessimistic synchronization grade with\n respect to the originating data source.\n\n A SyncProvider\n implementation returning this grade will lock the row in the originating\n data source."}, {"field_name": "GRADE_LOCK_WHEN_LOADED", "field_sig": "public static final\u00a0int GRADE_LOCK_WHEN_LOADED", "description": "Indicates the most pessimistic synchronization grade with\n respect to the originating\n data source. A SyncProvider\n implementation returning this grade will lock the entire view and/or\n table affected by the original statement used to populate a\n RowSet object."}, {"field_name": "DATASOURCE_NO_LOCK", "field_sig": "public static final\u00a0int DATASOURCE_NO_LOCK", "description": "Indicates that no locks remain on the originating data source. This is the default\n lock setting for all SyncProvider implementations unless\n otherwise directed by a RowSet object."}, {"field_name": "DATASOURCE_ROW_LOCK", "field_sig": "public static final\u00a0int DATASOURCE_ROW_LOCK", "description": "Indicates that a lock is placed on the rows that are touched by the original\n SQL statement used to populate the RowSet object\n that is using this SyncProvider object."}, {"field_name": "DATASOURCE_TABLE_LOCK", "field_sig": "public static final\u00a0int DATASOURCE_TABLE_LOCK", "description": "Indicates that a lock is placed on all tables that are touched by the original\n SQL statement used to populate the RowSet object\n that is using this SyncProvider object."}, {"field_name": "DATASOURCE_DB_LOCK", "field_sig": "public static final\u00a0int DATASOURCE_DB_LOCK", "description": "Indicates that a lock is placed on the entire data source that is the source of\n data for the RowSet object\n that is using this SyncProvider object."}, {"field_name": "UPDATABLE_VIEW_SYNC", "field_sig": "public static final\u00a0int UPDATABLE_VIEW_SYNC", "description": "Indicates that a SyncProvider implementation\n supports synchronization between a RowSet object and\n the SQL VIEW used to populate it."}, {"field_name": "NONUPDATABLE_VIEW_SYNC", "field_sig": "public static final\u00a0int NONUPDATABLE_VIEW_SYNC", "description": "Indicates that a SyncProvider implementation\n does not support synchronization between a RowSet\n object and the SQL VIEW used to populate it."}], "methods": [{"method_name": "getProviderID", "method_sig": "public abstract String getProviderID()", "description": "Returns the unique identifier for this SyncProvider object."}, {"method_name": "getRowSetReader", "method_sig": "public abstract RowSetReader getRowSetReader()", "description": "Returns a javax.sql.RowSetReader object, which can be used to\n populate a RowSet object with data."}, {"method_name": "getRowSetWriter", "method_sig": "public abstract RowSetWriter getRowSetWriter()", "description": "Returns a javax.sql.RowSetWriter object, which can be\n used to write a RowSet object's data back to the\n underlying data source."}, {"method_name": "getProviderGrade", "method_sig": "public abstract int getProviderGrade()", "description": "Returns a constant indicating the\n grade of synchronization a RowSet object can expect from\n this SyncProvider object."}, {"method_name": "setDataSourceLock", "method_sig": "public abstract void setDataSourceLock (int datasource_lock)\n                                throws SyncProviderException", "description": "Sets a lock on the underlying data source at the level indicated by\n datasource_lock. This should cause the\n SyncProvider to adjust its behavior by increasing or\n decreasing the level of optimism it provides for a successful\n synchronization."}, {"method_name": "getDataSourceLock", "method_sig": "public abstract int getDataSourceLock()\n                               throws SyncProviderException", "description": "Returns the current data source lock severity level active in this\n SyncProvider implementation."}, {"method_name": "supportsUpdatableView", "method_sig": "public abstract int supportsUpdatableView()", "description": "Returns whether this SyncProvider implementation\n can perform synchronization between a RowSet object\n and the SQL VIEW in the data source from which\n the RowSet object got its data."}, {"method_name": "getVersion", "method_sig": "public abstract String getVersion()", "description": "Returns the release version of this SyncProvider instance."}, {"method_name": "getVendor", "method_sig": "public abstract String getVendor()", "description": "Returns the vendor name of this SyncProvider instance"}]}