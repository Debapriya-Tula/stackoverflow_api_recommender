{"name": "Class NimbusLookAndFeel", "module": "java.desktop", "package": "javax.swing.plaf.nimbus", "text": "The NimbusLookAndFeel class.", "codes": ["public class NimbusLookAndFeel\nextends SynthLookAndFeel"], "fields": [], "methods": [{"method_name": "initialize", "method_sig": "public void initialize()", "description": "Called by UIManager when this look and feel is installed."}, {"method_name": "uninitialize", "method_sig": "public void uninitialize()", "description": "Called by UIManager when this look and feel is uninstalled."}, {"method_name": "getStyle", "method_sig": "public static NimbusStyle getStyle (JComponent c,\n                                   Region r)", "description": "Gets the style associated with the given component and region. This\n will never return null. If an appropriate component and region cannot\n be determined, then a default style is returned."}, {"method_name": "getName", "method_sig": "public String getName()", "description": "Return a short string that identifies this look and feel. This\n String will be the unquoted String \"Nimbus\"."}, {"method_name": "getID", "method_sig": "public String getID()", "description": "Return a string that identifies this look and feel. This String will\n be the unquoted String \"Nimbus\"."}, {"method_name": "getDescription", "method_sig": "public String getDescription()", "description": "Returns a textual description of this look and feel."}, {"method_name": "shouldUpdateStyleOnAncestorChanged", "method_sig": "public boolean shouldUpdateStyleOnAncestorChanged()", "description": "Returns whether or not the UIs should update their\n SynthStyles from the SynthStyleFactory\n when the ancestor of the JComponent changes. A subclass\n that provided a SynthStyleFactory that based the\n return value from getStyle off the containment hierarchy\n would override this method to return true."}, {"method_name": "shouldUpdateStyleOnEvent", "method_sig": "protected boolean shouldUpdateStyleOnEvent (PropertyChangeEvent ev)", "description": "Returns whether or not the UIs should update their styles when a\n particular event occurs.\n\n Overridden to return true when one of the following\n properties change:\n \n\"Nimbus.Overrides\"\n\"Nimbus.Overrides.InheritDefaults\"\n\"JComponent.sizeVariant\"\n"}, {"method_name": "register", "method_sig": "public void register (Region region,\n                     String prefix)", "description": "Registers a third party component with the NimbusLookAndFeel.\nRegions represent Components and areas within Components that act as\n independent painting areas. Once registered with the NimbusLookAndFeel,\n NimbusStyles for these Regions can be retrieved via the\n getStyle method.\nThe NimbusLookAndFeel uses a standard naming scheme for entries in the\n UIDefaults table. The key for each property, state, painter, and other\n default registered in UIDefaults for a specific Region will begin with\n the specified prefix\nFor example, suppose I had a component named JFoo. Suppose I then registered\n this component with the NimbusLookAndFeel in this manner:\n\n     laf.register(NimbusFooUI.FOO_REGION, \"Foo\");\n \nIn this case, I could then register properties for this component with\n UIDefaults in the following manner:\n\n     UIManager.put(\"Foo.background\", new ColorUIResource(Color.BLACK));\n     UIManager.put(\"Foo.Enabled.backgroundPainter\", new FooBackgroundPainter());\n \nIt is also possible to register a named component with Nimbus.\n For example, suppose you wanted to style the background of a JPanel\n named \"MyPanel\" differently from other JPanels. You could accomplish this\n by doing the following:\n\n     laf.register(Region.PANEL, \"\\\"MyPanel\\\"\");\n     UIManager.put(\"\\\"MyPanel\\\".background\", new ColorUIResource(Color.RED));\n "}, {"method_name": "getDerivedColor", "method_sig": "public Color getDerivedColor (String uiDefaultParentName,\n                             float hOffset,\n                             float sOffset,\n                             float bOffset,\n                             int aOffset,\n                             boolean uiResource)", "description": "Get a derived color, derived colors are shared instances and is color\n value will change when its parent UIDefault color changes."}, {"method_name": "getDerivedColor", "method_sig": "protected final Color getDerivedColor (Color color1,\n                                      Color color2,\n                                      float midPoint,\n                                      boolean uiResource)", "description": "Decodes and returns a color, which is derived from an offset between two\n other colors."}, {"method_name": "getDerivedColor", "method_sig": "protected final Color getDerivedColor (Color color1,\n                                      Color color2,\n                                      float midPoint)", "description": "Decodes and returns a color, which is derived from a offset between two\n other colors."}]}