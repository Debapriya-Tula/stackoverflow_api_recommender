{"name": "Interface ChronoPeriod", "module": "java.base", "package": "java.time.chrono", "text": "A date-based amount of time, such as '3 years, 4 months and 5 days' in an\n arbitrary chronology, intended for advanced globalization use cases.\n \n This interface models a date-based amount of time in a calendar system.\n While most calendar systems use years, months and days, some do not.\n Therefore, this interface operates solely in terms of a set of supported\n units that are defined by the Chronology.\n The set of supported units is fixed for a given chronology.\n The amount of a supported unit may be set to zero.\n \n The period is modeled as a directed amount of time, meaning that individual\n parts of the period may be negative.", "codes": ["public interface ChronoPeriod\nextends TemporalAmount"], "fields": [], "methods": [{"method_name": "between", "method_sig": "static ChronoPeriod between (ChronoLocalDate startDateInclusive,\n                            ChronoLocalDate endDateExclusive)", "description": "Obtains a ChronoPeriod consisting of amount of time between two dates.\n \n The start date is included, but the end date is not.\n The period is calculated using ChronoLocalDate.until(ChronoLocalDate).\n As such, the calculation is chronology specific.\n \n The chronology of the first date is used.\n The chronology of the second date is ignored, with the date being converted\n to the target chronology system before the calculation starts.\n \n The result of this method can be a negative period if the end is before the start.\n In most cases, the positive/negative sign will be the same in each of the supported fields."}, {"method_name": "get", "method_sig": "long get (TemporalUnit unit)", "description": "Gets the value of the requested unit.\n \n The supported units are chronology specific.\n They will typically be YEARS,\n MONTHS and DAYS.\n Requesting an unsupported unit will throw an exception."}, {"method_name": "getUnits", "method_sig": "List<TemporalUnit> getUnits()", "description": "Gets the set of units supported by this period.\n \n The supported units are chronology specific.\n They will typically be YEARS,\n MONTHS and DAYS.\n They are returned in order from largest to smallest.\n \n This set can be used in conjunction with get(TemporalUnit)\n to access the entire state of the period."}, {"method_name": "getChronology", "method_sig": "Chronology getChronology()", "description": "Gets the chronology that defines the meaning of the supported units.\n \n The period is defined by the chronology.\n It controls the supported units and restricts addition/subtraction\n to ChronoLocalDate instances of the same chronology."}, {"method_name": "isZero", "method_sig": "default boolean isZero()", "description": "Checks if all the supported units of this period are zero."}, {"method_name": "isNegative", "method_sig": "default boolean isNegative()", "description": "Checks if any of the supported units of this period are negative."}, {"method_name": "plus", "method_sig": "ChronoPeriod plus (TemporalAmount amountToAdd)", "description": "Returns a copy of this period with the specified period added.\n \n If the specified amount is a ChronoPeriod then it must have\n the same chronology as this period. Implementations may choose to\n accept or reject other TemporalAmount implementations.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "minus", "method_sig": "ChronoPeriod minus (TemporalAmount amountToSubtract)", "description": "Returns a copy of this period with the specified period subtracted.\n \n If the specified amount is a ChronoPeriod then it must have\n the same chronology as this period. Implementations may choose to\n accept or reject other TemporalAmount implementations.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "multipliedBy", "method_sig": "ChronoPeriod multipliedBy (int scalar)", "description": "Returns a new instance with each amount in this period in this period\n multiplied by the specified scalar.\n \n This returns a period with each supported unit individually multiplied.\n For example, a period of \"2 years, -3 months and 4 days\" multiplied by\n 3 will return \"6 years, -9 months and 12 days\".\n No normalization is performed."}, {"method_name": "negated", "method_sig": "default ChronoPeriod negated()", "description": "Returns a new instance with each amount in this period negated.\n \n This returns a period with each supported unit individually negated.\n For example, a period of \"2 years, -3 months and 4 days\" will be\n negated to \"-2 years, 3 months and -4 days\".\n No normalization is performed."}, {"method_name": "normalized", "method_sig": "ChronoPeriod normalized()", "description": "Returns a copy of this period with the amounts of each unit normalized.\n \n The process of normalization is specific to each calendar system.\n For example, in the ISO calendar system, the years and months are\n normalized but the days are not, such that \"15 months\" would be\n normalized to \"1 year and 3 months\".\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "addTo", "method_sig": "Temporal addTo (Temporal temporal)", "description": "Adds this period to the specified temporal object.\n \n This returns a temporal object of the same observable type as the input\n with this period added.\n \n In most cases, it is clearer to reverse the calling pattern by using\n Temporal.plus(TemporalAmount).\n \n   // these two lines are equivalent, but the second approach is recommended\n   dateTime = thisPeriod.addTo(dateTime);\n   dateTime = dateTime.plus(thisPeriod);\n \n\n The specified temporal must have the same chronology as this period.\n This returns a temporal with the non-zero supported units added.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "subtractFrom", "method_sig": "Temporal subtractFrom (Temporal temporal)", "description": "Subtracts this period from the specified temporal object.\n \n This returns a temporal object of the same observable type as the input\n with this period subtracted.\n \n In most cases, it is clearer to reverse the calling pattern by using\n Temporal.minus(TemporalAmount).\n \n   // these two lines are equivalent, but the second approach is recommended\n   dateTime = thisPeriod.subtractFrom(dateTime);\n   dateTime = dateTime.minus(thisPeriod);\n \n\n The specified temporal must have the same chronology as this period.\n This returns a temporal with the non-zero supported units subtracted.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "equals", "method_sig": "boolean equals (Object obj)", "description": "Checks if this period is equal to another period, including the chronology.\n \n Compares this period with another ensuring that the type, each amount and\n the chronology are the same.\n Note that this means that a period of \"15 Months\" is not equal to a period\n of \"1 Year and 3 Months\"."}, {"method_name": "hashCode", "method_sig": "int hashCode()", "description": "A hash code for this period."}, {"method_name": "toString", "method_sig": "String toString()", "description": "Outputs this period as a String.\n \n The output will include the period amounts and chronology."}]}