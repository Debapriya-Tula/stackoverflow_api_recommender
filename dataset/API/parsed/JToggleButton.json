{"name": "Class JToggleButton", "module": "java.desktop", "package": "javax.swing", "text": "An implementation of a two-state button.\n The JRadioButton and JCheckBox classes\n are subclasses of this class.\n For information on using them see\n How to Use Buttons, Check Boxes, and Radio Buttons,\n a section in The Java Tutorial.\n \n Buttons can be configured, and to some degree controlled, by\n Actions.  Using an\n Action with a button has many benefits beyond directly\n configuring a button.  Refer to \n Swing Components Supporting Action for more\n details, and you can find more information in How\n to Use Actions, a section in The Java Tutorial.\n \nWarning: Swing is not thread safe. For more\n information see Swing's Threading\n Policy.\n \nWarning:\n Serialized objects of this class will not be compatible with\n future Swing releases. The current serialization support is\n appropriate for short term storage or RMI between applications running\n the same version of Swing.  As of 1.4, support for long term storage\n of all JavaBeans\u2122\n has been added to the java.beans package.\n Please see XMLEncoder.", "codes": ["@JavaBean(defaultProperty=\"UIClassID\",\n          description=\"An implementation of a two-state button.\")\npublic class JToggleButton\nextends AbstractButton\nimplements Accessible"], "fields": [], "methods": [{"method_name": "updateUI", "method_sig": "public void updateUI()", "description": "Resets the UI property to a value from the current look and feel."}, {"method_name": "getUIClassID", "method_sig": "@BeanProperty(bound=false,\n              description=\"A string that specifies the name of the L&F class\")\npublic String getUIClassID()", "description": "Returns a string that specifies the name of the l&f class\n that renders this component."}, {"method_name": "requestFocus", "method_sig": "public void requestFocus (FocusEvent.Cause cause)", "description": "If this toggle button is a member of the ButtonGroup which has\n another toggle button which is selected and can be the focus owner,\n and the focus cause argument denotes window activation or focus\n traversal action of any direction the result of the method execution\n is the same as calling\n Component.requestFocus(FocusEvent.Cause) on the toggle button\n selected in the group.\n In all other cases the result of the method is the same as calling\n Component.requestFocus(FocusEvent.Cause) on this toggle button."}, {"method_name": "requestFocusInWindow", "method_sig": "public boolean requestFocusInWindow (FocusEvent.Cause cause)", "description": "If this toggle button is a member of the ButtonGroup which has\n another toggle button which is selected and can be the focus owner,\n and the focus cause argument denotes window activation or focus\n traversal action of any direction the result of the method execution\n is the same as calling\n Component.requestFocusInWindow(FocusEvent.Cause) on the toggle\n button selected in the group.\n In all other cases the result of the method is the same as calling\n Component.requestFocusInWindow(FocusEvent.Cause) on this toggle\n button."}, {"method_name": "paramString", "method_sig": "protected String paramString()", "description": "Returns a string representation of this JToggleButton. This method\n is intended to be used only for debugging purposes, and the\n content and format of the returned string may vary between\n implementations. The returned string may be empty but may not\n be null."}, {"method_name": "getAccessibleContext", "method_sig": "@BeanProperty(bound=false,\n              expert=true,\n              description=\"The AccessibleContext associated with this ToggleButton.\")\npublic AccessibleContext getAccessibleContext()", "description": "Gets the AccessibleContext associated with this JToggleButton.\n For toggle buttons, the AccessibleContext takes the form of an\n AccessibleJToggleButton.\n A new AccessibleJToggleButton instance is created if necessary."}]}