{"name": "Class RelationService", "module": "java.management", "package": "javax.management.relation", "text": "The Relation Service is in charge of creating and deleting relation types\n and relations, of handling the consistency and of providing query\n mechanisms.\n It implements the NotificationBroadcaster by extending\n NotificationBroadcasterSupport to send notifications when a relation is\n removed from it.\n It implements the NotificationListener interface to be able to receive\n notifications concerning unregistration of MBeans referenced in relation\n roles and of relation MBeans.\n It implements the MBeanRegistration interface to be able to retrieve\n its ObjectName and MBean Server.", "codes": ["public class RelationService\nextends NotificationBroadcasterSupport\nimplements RelationServiceMBean, MBeanRegistration, NotificationListener"], "fields": [], "methods": [{"method_name": "isActive", "method_sig": "public void isActive()\n              throws RelationServiceNotRegisteredException", "description": "Checks if the Relation Service is active.\n Current condition is that the Relation Service must be registered in the\n MBean Server"}, {"method_name": "getPurgeFlag", "method_sig": "public boolean getPurgeFlag()", "description": "Returns the flag to indicate if when a notification is received for the\n unregistration of an MBean referenced in a relation, if an immediate\n \"purge\" of the relations (look for the relations no longer valid)\n has to be performed , or if that will be performed only when the\n purgeRelations method will be explicitly called.\n true is immediate purge."}, {"method_name": "setPurgeFlag", "method_sig": "public void setPurgeFlag (boolean purgeFlag)", "description": "Sets the flag to indicate if when a notification is received for the\n unregistration of an MBean referenced in a relation, if an immediate\n \"purge\" of the relations (look for the relations no longer valid)\n has to be performed , or if that will be performed only when the\n purgeRelations method will be explicitly called.\n true is immediate purge."}, {"method_name": "createRelationType", "method_sig": "public void createRelationType (String relationTypeName,\n                               RoleInfo[] roleInfoArray)\n                        throws IllegalArgumentException,\n                               InvalidRelationTypeException", "description": "Creates a relation type (a RelationTypeSupport object) with given\n role infos (provided by the RoleInfo objects), and adds it in the\n Relation Service."}, {"method_name": "addRelationType", "method_sig": "public void addRelationType (RelationType relationTypeObj)\n                     throws IllegalArgumentException,\n                            InvalidRelationTypeException", "description": "Adds given object as a relation type. The object is expected to\n implement the RelationType interface."}, {"method_name": "getAllRelationTypeNames", "method_sig": "public List<String> getAllRelationTypeNames()", "description": "Retrieves names of all known relation types."}, {"method_name": "getRoleInfos", "method_sig": "public List<RoleInfo> getRoleInfos (String relationTypeName)\n                            throws IllegalArgumentException,\n                                   RelationTypeNotFoundException", "description": "Retrieves list of role infos (RoleInfo objects) of a given relation\n type."}, {"method_name": "getRoleInfo", "method_sig": "public RoleInfo getRoleInfo (String relationTypeName,\n                            String roleInfoName)\n                     throws IllegalArgumentException,\n                            RelationTypeNotFoundException,\n                            RoleInfoNotFoundException", "description": "Retrieves role info for given role name of a given relation type."}, {"method_name": "removeRelationType", "method_sig": "public void removeRelationType (String relationTypeName)\n                        throws RelationServiceNotRegisteredException,\n                               IllegalArgumentException,\n                               RelationTypeNotFoundException", "description": "Removes given relation type from Relation Service.\n The relation objects of that type will be removed from the\n Relation Service."}, {"method_name": "createRelation", "method_sig": "public void createRelation (String relationId,\n                           String relationTypeName,\n                           RoleList roleList)\n                    throws RelationServiceNotRegisteredException,\n                           IllegalArgumentException,\n                           RoleNotFoundException,\n                           InvalidRelationIdException,\n                           RelationTypeNotFoundException,\n                           InvalidRoleValueException", "description": "Creates a simple relation (represented by a RelationSupport object) of\n given relation type, and adds it in the Relation Service.\n Roles are initialized according to the role list provided in\n parameter. The ones not initialized in this way are set to an empty\n ArrayList of ObjectNames.\n A RelationNotification, with type RELATION_BASIC_CREATION, is sent."}, {"method_name": "addRelation", "method_sig": "public void addRelation (ObjectName relationObjectName)\n                 throws IllegalArgumentException,\n                        RelationServiceNotRegisteredException,\n                        NoSuchMethodException,\n                        InvalidRelationIdException,\n                        InstanceNotFoundException,\n                        InvalidRelationServiceException,\n                        RelationTypeNotFoundException,\n                        RoleNotFoundException,\n                        InvalidRoleValueException", "description": "Adds an MBean created by the user (and registered by him in the MBean\n Server) as a relation in the Relation Service.\n To be added as a relation, the MBean must conform to the\n following:\n - implement the Relation interface\n - have for RelationService ObjectName the ObjectName of current\n Relation Service\n - have a relation id unique and unused in current Relation Service\n - have for relation type a relation type created in the Relation\n Service\n - have roles conforming to the role info provided in the relation\n type."}, {"method_name": "isRelationMBean", "method_sig": "public ObjectName isRelationMBean (String relationId)\n                           throws IllegalArgumentException,\n                                  RelationNotFoundException", "description": "If the relation is represented by an MBean (created by the user and\n added as a relation in the Relation Service), returns the ObjectName of\n the MBean."}, {"method_name": "isRelation", "method_sig": "public String isRelation (ObjectName objectName)\n                  throws IllegalArgumentException", "description": "Returns the relation id associated to the given ObjectName if the\n MBean has been added as a relation in the Relation Service."}, {"method_name": "hasRelation", "method_sig": "public Boolean hasRelation (String relationId)\n                    throws IllegalArgumentException", "description": "Checks if there is a relation identified in Relation Service with given\n relation id."}, {"method_name": "getAllRelationIds", "method_sig": "public List<String> getAllRelationIds()", "description": "Returns all the relation ids for all the relations handled by the\n Relation Service."}, {"method_name": "checkRoleReading", "method_sig": "public Integer checkRoleReading (String roleName,\n                                String relationTypeName)\n                         throws IllegalArgumentException,\n                                RelationTypeNotFoundException", "description": "Checks if given Role can be read in a relation of the given type."}, {"method_name": "checkRoleWriting", "method_sig": "public Integer checkRoleWriting (Role role,\n                                String relationTypeName,\n                                Boolean initFlag)\n                         throws IllegalArgumentException,\n                                RelationTypeNotFoundException", "description": "Checks if given Role can be set in a relation of given type."}, {"method_name": "sendRelationCreationNotification", "method_sig": "public void sendRelationCreationNotification (String relationId)\n                                      throws IllegalArgumentException,\n                                             RelationNotFoundException", "description": "Sends a notification (RelationNotification) for a relation creation.\n The notification type is:\n - RelationNotification.RELATION_BASIC_CREATION if the relation is an\n object internal to the Relation Service\n - RelationNotification.RELATION_MBEAN_CREATION if the relation is a\n MBean added as a relation.\n The source object is the Relation Service itself.\n It is called in Relation Service createRelation() and\n addRelation() methods."}, {"method_name": "sendRoleUpdateNotification", "method_sig": "public void sendRoleUpdateNotification (String relationId,\n                                       Role newRole,\n                                       List<ObjectName> oldValue)\n                                throws IllegalArgumentException,\n                                       RelationNotFoundException", "description": "Sends a notification (RelationNotification) for a role update in the\n given relation. The notification type is:\n - RelationNotification.RELATION_BASIC_UPDATE if the relation is an\n object internal to the Relation Service\n - RelationNotification.RELATION_MBEAN_UPDATE if the relation is a\n MBean added as a relation.\n The source object is the Relation Service itself.\n It is called in relation MBean setRole() (for given role) and\n setRoles() (for each role) methods (implementation provided in\n RelationSupport class).\n It is also called in Relation Service setRole() (for given role) and\n setRoles() (for each role) methods."}, {"method_name": "sendRelationRemovalNotification", "method_sig": "public void sendRelationRemovalNotification (String relationId,\n                                            List<ObjectName> unregMBeanList)\n                                     throws IllegalArgumentException,\n                                            RelationNotFoundException", "description": "Sends a notification (RelationNotification) for a relation removal.\n The notification type is:\n - RelationNotification.RELATION_BASIC_REMOVAL if the relation is an\n object internal to the Relation Service\n - RelationNotification.RELATION_MBEAN_REMOVAL if the relation is a\n MBean added as a relation.\n The source object is the Relation Service itself.\n It is called in Relation Service removeRelation() method."}, {"method_name": "updateRoleMap", "method_sig": "public void updateRoleMap (String relationId,\n                          Role newRole,\n                          List<ObjectName> oldValue)\n                   throws IllegalArgumentException,\n                          RelationServiceNotRegisteredException,\n                          RelationNotFoundException", "description": "Handles update of the Relation Service role map for the update of given\n role in given relation.\n It is called in relation MBean setRole() (for given role) and\n setRoles() (for each role) methods (implementation provided in\n RelationSupport class).\n It is also called in Relation Service setRole() (for given role) and\n setRoles() (for each role) methods.\n To allow the Relation Service to maintain the consistency (in case\n of MBean unregistration) and to be able to perform queries, this method\n must be called when a role is updated."}, {"method_name": "removeRelation", "method_sig": "public void removeRelation (String relationId)\n                    throws RelationServiceNotRegisteredException,\n                           IllegalArgumentException,\n                           RelationNotFoundException", "description": "Removes given relation from the Relation Service.\n A RelationNotification notification is sent, its type being:\n - RelationNotification.RELATION_BASIC_REMOVAL if the relation was\n only internal to the Relation Service\n - RelationNotification.RELATION_MBEAN_REMOVAL if the relation is\n registered as an MBean.\n For MBeans referenced in such relation, nothing will be done,"}, {"method_name": "purgeRelations", "method_sig": "public void purgeRelations()\n                    throws RelationServiceNotRegisteredException", "description": "Purges the relations.\n\n Depending on the purgeFlag value, this method is either called\n automatically when a notification is received for the unregistration of\n an MBean referenced in a relation (if the flag is set to true), or not\n (if the flag is set to false).\n In that case it is up to the user to call it to maintain the\n consistency of the relations. To be kept in mind that if an MBean is\n unregistered and the purge not done immediately, if the ObjectName is\n reused and assigned to another MBean referenced in a relation, calling\n manually this purgeRelations() method will cause trouble, as will\n consider the ObjectName as corresponding to the unregistered MBean, not\n seeing the new one.\n\n The behavior depends on the cardinality of the role where the\n unregistered MBean is referenced:\n - if removing one MBean reference in the role makes its number of\n references less than the minimum degree, the relation has to be removed.\n - if the remaining number of references after removing the MBean\n reference is still in the cardinality range, keep the relation and\n update it calling its handleMBeanUnregistration() callback."}, {"method_name": "findReferencingRelations", "method_sig": "public Map<String, List<String>> findReferencingRelations (ObjectName mbeanName,\n                                                               String relationTypeName,\n                                                               String roleName)\n                                                        throws IllegalArgumentException", "description": "Retrieves the relations where a given MBean is referenced.\n This corresponds to the CIM \"References\" and \"ReferenceNames\"\n operations."}, {"method_name": "findAssociatedMBeans", "method_sig": "public Map<ObjectName, List<String>> findAssociatedMBeans (ObjectName mbeanName,\n                                                               String relationTypeName,\n                                                               String roleName)\n                                                        throws IllegalArgumentException", "description": "Retrieves the MBeans associated to given one in a relation.\n This corresponds to CIM Associators and AssociatorNames operations."}, {"method_name": "findRelationsOfType", "method_sig": "public List<String> findRelationsOfType (String relationTypeName)\n                                 throws IllegalArgumentException,\n                                        RelationTypeNotFoundException", "description": "Returns the relation ids for relations of the given type."}, {"method_name": "getRole", "method_sig": "public List<ObjectName> getRole (String relationId,\n                                String roleName)\n                         throws RelationServiceNotRegisteredException,\n                                IllegalArgumentException,\n                                RelationNotFoundException,\n                                RoleNotFoundException", "description": "Retrieves role value for given role name in given relation."}, {"method_name": "getRoles", "method_sig": "public RoleResult getRoles (String relationId,\n                           String[] roleNameArray)\n                    throws RelationServiceNotRegisteredException,\n                           IllegalArgumentException,\n                           RelationNotFoundException", "description": "Retrieves values of roles with given names in given relation."}, {"method_name": "getAllRoles", "method_sig": "public RoleResult getAllRoles (String relationId)\n                       throws IllegalArgumentException,\n                              RelationNotFoundException,\n                              RelationServiceNotRegisteredException", "description": "Returns all roles present in the relation."}, {"method_name": "getRoleCardinality", "method_sig": "public Integer getRoleCardinality (String relationId,\n                                  String roleName)\n                           throws IllegalArgumentException,\n                                  RelationNotFoundException,\n                                  RoleNotFoundException", "description": "Retrieves the number of MBeans currently referenced in the given role."}, {"method_name": "setRole", "method_sig": "public void setRole (String relationId,\n                    Role role)\n             throws RelationServiceNotRegisteredException,\n                    IllegalArgumentException,\n                    RelationNotFoundException,\n                    RoleNotFoundException,\n                    InvalidRoleValueException", "description": "Sets the given role in given relation.\n Will check the role according to its corresponding role definition\n provided in relation's relation type\n The Relation Service will keep track of the change to keep the\n consistency of relations by handling referenced MBean deregistrations."}, {"method_name": "setRoles", "method_sig": "public RoleResult setRoles (String relationId,\n                           RoleList roleList)\n                    throws RelationServiceNotRegisteredException,\n                           IllegalArgumentException,\n                           RelationNotFoundException", "description": "Sets the given roles in given relation.\n Will check the role according to its corresponding role definition\n provided in relation's relation type\n The Relation Service keeps track of the changes to keep the\n consistency of relations by handling referenced MBean deregistrations."}, {"method_name": "getReferencedMBeans", "method_sig": "public Map<ObjectName, List<String>> getReferencedMBeans (String relationId)\n                                                       throws IllegalArgumentException,\n                                                              RelationNotFoundException", "description": "Retrieves MBeans referenced in the various roles of the relation."}, {"method_name": "getRelationTypeName", "method_sig": "public String getRelationTypeName (String relationId)\n                           throws IllegalArgumentException,\n                                  RelationNotFoundException", "description": "Returns name of associated relation type for given relation."}, {"method_name": "handleNotification", "method_sig": "public void handleNotification (Notification notif,\n                               Object handback)", "description": "Invoked when a JMX notification occurs.\n Currently handles notifications for unregistration of MBeans, either\n referenced in a relation role or being a relation itself."}, {"method_name": "getNotificationInfo", "method_sig": "public MBeanNotificationInfo[] getNotificationInfo()", "description": "Returns a NotificationInfo object containing the name of the Java class\n of the notification and the notification types sent."}]}