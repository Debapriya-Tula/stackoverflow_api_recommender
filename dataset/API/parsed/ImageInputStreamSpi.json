{"name": "Class ImageInputStreamSpi", "module": "java.desktop", "package": "javax.imageio.spi", "text": "The service provider interface (SPI) for\n ImageInputStreams.  For more information on service\n provider interfaces, see the class comment for the\n IIORegistry class.\n\n  This interface allows arbitrary objects to be \"wrapped\" by\n instances of ImageInputStream.  For example,\n a particular ImageInputStreamSpi might allow\n a generic InputStream to be used as an input source;\n another might take input from a URL.\n\n  By treating the creation of ImageInputStreams as a\n pluggable service, it becomes possible to handle future input\n sources without changing the API.  Also, high-performance\n implementations of ImageInputStream (for example,\n native implementations for a particular platform) can be installed\n and used transparently by applications.", "codes": ["public abstract class ImageInputStreamSpi\nextends IIOServiceProvider"], "fields": [{"field_name": "inputClass", "field_sig": "protected\u00a0Class<?> inputClass", "description": "A Class object indicating the legal object type\n for use by the createInputStreamInstance method."}], "methods": [{"method_name": "getInputClass", "method_sig": "public Class<?> getInputClass()", "description": "Returns a Class object representing the class or\n interface type that must be implemented by an input source in\n order to be \"wrapped\" in an ImageInputStream via\n the createInputStreamInstance method.\n\n  Typical return values might include\n InputStream.class or URL.class, but\n any class may be used."}, {"method_name": "canUseCacheFile", "method_sig": "public boolean canUseCacheFile()", "description": "Returns true if the ImageInputStream\n implementation associated with this service provider can\n optionally make use of a cache file for improved performance\n and/or memory footrprint.  If false, the value of\n the useCache argument to\n createInputStreamInstance will be ignored.\n\n  The default implementation returns false."}, {"method_name": "needsCacheFile", "method_sig": "public boolean needsCacheFile()", "description": "Returns true if the ImageInputStream\n implementation associated with this service provider requires\n the use of a cache File.  If true,\n the value of the useCache argument to\n createInputStreamInstance will be ignored.\n\n  The default implementation returns false."}, {"method_name": "createInputStreamInstance", "method_sig": "public abstract ImageInputStream createInputStreamInstance (Object input,\n                                                           boolean useCache,\n                                                           File cacheDir)\n                                                    throws IOException", "description": "Returns an instance of the ImageInputStream\n implementation associated with this service provider.  If the\n use of a cache file is optional, the useCache\n parameter will be consulted.  Where a cache is required, or\n not applicable, the value of useCache will be ignored."}, {"method_name": "createInputStreamInstance", "method_sig": "public ImageInputStream createInputStreamInstance (Object input)\n                                           throws IOException", "description": "Returns an instance of the ImageInputStream\n implementation associated with this service provider.  A cache\n file will be created in the system-dependent default\n temporary-file directory, if needed."}]}