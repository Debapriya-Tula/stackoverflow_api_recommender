{"name": "Class Locale.LanguageRange", "module": "java.base", "package": "java.util", "text": "This class expresses a Language Range defined in\n RFC 4647 Matching of\n Language Tags. A language range is an identifier which is used to\n select language tag(s) meeting specific requirements by using the\n mechanisms described in Locale\n Matching. A list which represents a user's preferences and consists\n of language ranges is called a Language Priority List.\n\n There are two types of language ranges: basic and extended. In RFC\n 4647, the syntax of language ranges is expressed in\n ABNF as follows:\n \n\n     basic-language-range    = (1*8ALPHA *(\"-\" 1*8alphanum)) / \"*\"\n     extended-language-range = (1*8ALPHA / \"*\")\n                               *(\"-\" (1*8alphanum / \"*\"))\n     alphanum                = ALPHA / DIGIT\n \n\n For example, \"en\" (English), \"ja-JP\" (Japanese, Japan),\n \"*\" (special language range which matches any language tag) are\n basic language ranges, whereas \"*-CH\" (any languages,\n Switzerland), \"es-*\" (Spanish, any regions), and\n \"zh-Hant-*\" (Traditional Chinese, any regions) are extended\n language ranges.", "codes": ["public static final class Locale.LanguageRange\nextends Object"], "fields": [{"field_name": "MAX_WEIGHT", "field_sig": "public static final\u00a0double MAX_WEIGHT", "description": "A constant holding the maximum value of weight, 1.0, which indicates\n that the language range is a good fit for the user."}, {"field_name": "MIN_WEIGHT", "field_sig": "public static final\u00a0double MIN_WEIGHT", "description": "A constant holding the minimum value of weight, 0.0, which indicates\n that the language range is not a good fit for the user."}], "methods": [{"method_name": "getRange", "method_sig": "public String getRange()", "description": "Returns the language range of this LanguageRange."}, {"method_name": "getWeight", "method_sig": "public double getWeight()", "description": "Returns the weight of this LanguageRange."}, {"method_name": "parse", "method_sig": "public static List<Locale.LanguageRange> parse (String ranges)", "description": "Parses the given ranges to generate a Language Priority List.\n\n This method performs a syntactic check for each language range in\n the given ranges but doesn't do validation using the IANA\n Language Subtag Registry.\n\n The ranges to be given can take one of the following\n forms:\n\n \n   \"Accept-Language: ja,en;q=0.4\"  (weighted list with Accept-Language prefix)\n   \"ja,en;q=0.4\"                   (weighted list)\n   \"ja,en\"                         (prioritized list)\n \n\n In a weighted list, each language range is given a weight value.\n The weight value is identical to the \"quality value\" in\n RFC 2616, and it\n expresses how much the user prefers  the language. A weight value is\n specified after a corresponding language range followed by\n \";q=\", and the default weight value is MAX_WEIGHT\n when it is omitted.\n\n Unlike a weighted list, language ranges in a prioritized list\n are sorted in the descending order based on its priority. The first\n language range has the highest priority and meets the user's\n preference most.\n\n In either case, language ranges are sorted in descending order in\n the Language Priority List based on priority or weight. If a\n language range appears in the given ranges more than once,\n only the first one is included on the Language Priority List.\n\n The returned list consists of language ranges from the given\n ranges and their equivalents found in the IANA Language\n Subtag Registry. For example, if the given ranges is\n \"Accept-Language: iw,en-us;q=0.7,en;q=0.3\", the elements in\n the list to be returned are:\n\n \n  Range                                   Weight\n    \"iw\" (older tag for Hebrew)             1.0\n    \"he\" (new preferred code for Hebrew)    1.0\n    \"en-us\" (English, United States)        0.7\n    \"en\" (English)                          0.3\n \n\n Two language ranges, \"iw\" and \"he\", have the same\n highest priority in the list. By adding \"he\" to the user's\n Language Priority List, locale-matching method can find Hebrew as a\n matching locale (or language tag) even if the application or system\n offers only \"he\" as a supported locale (or language tag)."}, {"method_name": "parse", "method_sig": "public static List<Locale.LanguageRange> parse (String ranges,\n                                               Map<String, List<String>> map)", "description": "Parses the given ranges to generate a Language Priority\n List, and then customizes the list using the given map.\n This method is equivalent to\n mapEquivalents(parse(ranges), map)."}, {"method_name": "mapEquivalents", "method_sig": "public static List<Locale.LanguageRange> mapEquivalents (List<Locale.LanguageRange> priorityList,\n                                                        Map<String, List<String>> map)", "description": "Generates a new customized Language Priority List using the given\n priorityList and map. If the given map is\n empty, this method returns a copy of the given priorityList.\n\n In the map, a key represents a language range whereas a value is\n a list of equivalents of it. '*' cannot be used in the map.\n Each equivalent language range has the same weight value as its\n original language range.\n\n \n  An example of map:\n    Key                            Value\n      \"zh\" (Chinese)                 \"zh\",\n                                     \"zh-Hans\"(Simplified Chinese)\n      \"zh-HK\" (Chinese, Hong Kong)   \"zh-HK\"\n      \"zh-TW\" (Chinese, Taiwan)      \"zh-TW\"\n \n\n The customization is performed after modification using the IANA\n Language Subtag Registry.\n\n For example, if a user's Language Priority List consists of five\n language ranges (\"zh\", \"zh-CN\", \"en\",\n \"zh-TW\", and \"zh-HK\"), the newly generated Language\n Priority List which is customized using the above map example will\n consists of \"zh\", \"zh-Hans\", \"zh-CN\",\n \"zh-Hans-CN\", \"en\", \"zh-TW\", and\n \"zh-HK\".\n\n \"zh-HK\" and \"zh-TW\" aren't converted to\n \"zh-Hans-HK\" nor \"zh-Hans-TW\" even if they are\n included in the Language Priority List. In this example, mapping\n is used to clearly distinguish Simplified Chinese and Traditional\n Chinese.\n\n If the \"zh\"-to-\"zh\" mapping isn't included in the\n map, a simple replacement will be performed and the customized list\n won't include \"zh\" and \"zh-CN\"."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Returns a hash code value for the object."}, {"method_name": "equals", "method_sig": "public boolean equals (Object obj)", "description": "Compares this object to the specified object. The result is true if\n and only if the argument is not null and is a\n LanguageRange object that contains the same range\n and weight values as this object."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns an informative string representation of this LanguageRange\n object, consisting of language range and weight if the range is\n weighted and the weight is less than the max weight."}]}