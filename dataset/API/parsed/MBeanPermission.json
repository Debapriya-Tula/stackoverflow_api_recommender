{"name": "Class MBeanPermission", "module": "java.management", "package": "javax.management", "text": "Permission controlling access to MBeanServer operations.  If a\n security manager has been set using System.setSecurityManager(java.lang.SecurityManager), most operations on the MBean Server\n require that the caller's permissions imply an MBeanPermission\n appropriate for the operation.  This is described in detail in the\n documentation for the MBeanServer interface.\nAs with other Permission objects, an MBeanPermission can\n represent either a permission that you have or a\n permission that you need.  When a sensitive operation is\n being checked for permission, an MBeanPermission is constructed\n representing the permission you need.  The operation is only\n allowed if the permissions you have imply the\n permission you need.\nAn MBeanPermission contains four items of information:\n\nThe action.  For a permission you need,\n this is one of the actions in the list below.  For a permission you have, this is\n a comma-separated list of those actions, or *,\n representing all actions.\nThe action is returned by getActions().\nThe class name.\nFor a permission you need, this is the class name of an MBean\n you are accessing, as returned by MBeanServer.getMBeanInfo(name).getClassName().  Certain operations do not reference a class name,\n in which case the class name is null.\nFor a permission you have, this is either empty or a class\n name pattern.  A class name pattern is a string following the\n Java conventions for dot-separated class names.  It may end with\n \".*\" meaning that the permission grants access to any\n class that begins with the string preceding \".*\".  For\n instance, \"javax.management.*\" grants access to\n javax.management.MBeanServerDelegate and\n javax.management.timer.Timer, among other classes.\nA class name pattern can also be empty or the single character\n \"*\", both of which grant access to any class.\nThe member.\nFor a permission you need, this is the name of the attribute or\n operation you are accessing.  For operations that do not reference\n an attribute or operation, the member is null.\nFor a permission you have, this is either the name of an attribute\n or operation you can access, or it is empty or the single character\n \"*\", both of which grant access to any member.\nThe object name.\nFor a permission you need, this is the ObjectName of the\n MBean you are accessing.  For operations that do not reference a\n single MBean, it is null.  It is never an object name pattern.\nFor a permission you have, this is the ObjectName of the\n MBean or MBeans you can access.  It may be an object name pattern\n to grant access to all MBeans whose names match the pattern.  It\n may also be empty, which grants access to all MBeans whatever their\n name.\n\nIf you have an MBeanPermission, it allows operations only if all\n four of the items match.\nThe class name, member, and object name can be written together\n as a single string, which is the name of this permission.\n The name of the permission is the string returned by getName().  The format of the string is:\n\nclassName#member[objectName]\n\nThe object name is written using the usual syntax for ObjectName.  It may contain any legal characters, including\n ].  It is terminated by a ] character\n that is the last character in the string.\nOne or more of the className, member,\n or objectName may be omitted.  If the\n member is omitted, the # may be too (but\n does not have to be).  If the objectName is omitted,\n the [] may be too (but does not have to be).  It is\n not legal to omit all three items, that is to have a name\n that is the empty string.\nOne or more of the className, member,\n or objectName may be the character \"-\",\n which is equivalent to a null value.  A null value is implied by\n any value (including another null value) but does not imply any\n other value.\nThe possible actions are these:\n\naddNotificationListener\ngetAttribute\ngetClassLoader\ngetClassLoaderFor\ngetClassLoaderRepository\ngetDomains\ngetMBeanInfo\ngetObjectInstance\ninstantiate\ninvoke\nisInstanceOf\nqueryMBeans\nqueryNames\nregisterMBean\nremoveNotificationListener\nsetAttribute\nunregisterMBean\n\nIn a comma-separated list of actions, spaces are allowed before\n and after each action.", "codes": ["public class MBeanPermission\nextends Permission"], "fields": [], "methods": [{"method_name": "getActions", "method_sig": "public String getActions()", "description": "Returns the \"canonical string representation\" of the actions. That is,\n this method always returns present actions in alphabetical order."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Returns the hash code value for this object."}, {"method_name": "implies", "method_sig": "public boolean implies (Permission p)", "description": "Checks if this MBeanPermission object \"implies\" the\n specified permission.\nMore specifically, this method returns true if:\n\n p is an instance of MBeanPermission; and\n p has a null className or p's className\n matches this object's className; and\n p has a null member or p's member matches this\n object's member; and\n p has a null object name or p's\n object name matches this object's object name; and\n p's actions are a subset of this object's actions\n\nIf this object's className is \"*\", p's\n className always matches it.  If it is \"a.*\", p's\n className matches it if it begins with \"a.\".\nIf this object's member is \"*\", p's\n member always matches it.\nIf this object's objectName n1 is an object name pattern,\n p's objectName n2 matches it if\n n1.equals(n2) or if\n n1.apply(n2).\nA permission that includes the queryMBeans action\n is considered to include queryNames as well."}, {"method_name": "equals", "method_sig": "public boolean equals (Object obj)", "description": "Checks two MBeanPermission objects for equality. Checks\n that obj is an MBeanPermission, and has the same\n name and actions as this object."}]}