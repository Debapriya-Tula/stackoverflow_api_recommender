{"name": "Interface JdbcRowSet", "module": "java.sql.rowset", "package": "javax.sql.rowset", "text": "The standard interface that all standard implementations of\n JdbcRowSet must implement.\n\n 1.0 Overview\n A wrapper around a ResultSet object that makes it possible\n to use the result set as a JavaBeans\u2122\n component.  Thus, a JdbcRowSet object can be one of the Beans that\n a tool makes available for composing an application.  Because\n a JdbcRowSet is a connected rowset, that is, it continually\n maintains its connection to a database using a JDBC technology-enabled\n driver, it also effectively makes the driver a JavaBeans component.\n \n Because it is always connected to its database, an instance of\n JdbcRowSet\n can simply take calls invoked on it and in turn call them on its\n ResultSet object. As a consequence, a result set can, for\n example, be a component in a Swing application.\n \n Another advantage of a JdbcRowSet object is that it can be\n used to make a ResultSet object scrollable and updatable.  All\n RowSet objects are by default scrollable and updatable. If\n the driver and database being used do not support scrolling and/or updating\n of result sets, an application can populate a JdbcRowSet object\n with the data of a ResultSet object and then operate on the\n JdbcRowSet object as if it were the ResultSet\n object.\n\n 2.0 Creating a JdbcRowSet Object\n The reference implementation of the JdbcRowSet interface,\n JdbcRowSetImpl, provides an implementation of\n the default constructor.  A new instance is initialized with\n default values, which can be set with new values as needed. A\n new instance is not really functional until its execute\n method is called. In general, this method does the following:\n \n establishes a connection with a database\n    creates a PreparedStatement object and sets any of its\n        placeholder parameters\n    executes the statement to create a ResultSet object\n \n If the execute method is successful, it will set the\n appropriate private JdbcRowSet fields with the following:\n \n a Connection object -- the connection between the rowset\n       and the database\n   a PreparedStatement object -- the query that produces\n       the result set\n   a ResultSet object -- the result set that the rowset's\n       command produced and that is being made, in effect, a JavaBeans\n       component\n \n If these fields have not been set, meaning that the execute\n method has not executed successfully, no methods other than\n execute and close may be called on the\n rowset.  All other public methods will throw an exception.\n \n Before calling the execute method, however, the command\n and properties needed for establishing a connection must be set.\n The following code fragment creates a JdbcRowSetImpl object,\n sets the command and connection properties, sets the placeholder parameter,\n and then invokes the method execute.\n \n     JdbcRowSetImpl jrs = new JdbcRowSetImpl();\n     jrs.setCommand(\"SELECT * FROM TITLES WHERE TYPE = ?\");\n     jrs.setURL(\"jdbc:myDriver:myAttribute\");\n     jrs.setUsername(\"cervantes\");\n     jrs.setPassword(\"sancho\");\n     jrs.setString(1, \"BIOGRAPHY\");\n     jrs.execute();\n \n The variable jrs now represents an instance of\n JdbcRowSetImpl that is a thin wrapper around the\n ResultSet object containing all the rows in the\n table TITLES where the type of book is biography.\n At this point, operations called on jrs will\n affect the rows in the result set, which is effectively a JavaBeans\n component.\n \n The implementation of the RowSet method execute in the\n JdbcRowSet reference implementation differs from that in the\n CachedRowSet\u2122\n reference implementation to account for the different\n requirements of connected and disconnected RowSet objects.", "codes": ["public interface JdbcRowSet\nextends RowSet, Joinable"], "fields": [], "methods": [{"method_name": "getShowDeleted", "method_sig": "boolean getShowDeleted()\n                throws SQLException", "description": "Retrieves a boolean indicating whether rows marked\n for deletion appear in the set of current rows. If true is\n returned, deleted rows are visible with the current rows. If\n false is returned, rows are not visible with the set of\n current rows. The default value is false.\n \n Standard rowset implementations may choose to restrict this behavior\n for security considerations or for certain deployment\n scenarios. The visibility of deleted rows is implementation-defined\n and does not represent standard behavior.\n \n Note: Allowing deleted rows to remain visible complicates the behavior\n of some standard JDBC RowSet implementations methods.\n However, most rowset users can simply ignore this extra detail because\n only very specialized applications will likely want to take advantage of\n this feature."}, {"method_name": "setShowDeleted", "method_sig": "void setShowDeleted (boolean b)\n             throws SQLException", "description": "Sets the property showDeleted to the given\n boolean value. This property determines whether\n rows marked for deletion continue to appear in the set of current rows.\n If the value is set to true, deleted rows are immediately\n visible with the set of current rows. If the value is set to\n false, the deleted rows are set as invisible with the\n current set of rows.\n \n Standard rowset implementations may choose to restrict this behavior\n for security considerations or for certain deployment\n scenarios. This is left as implementation-defined and does not\n represent standard behavior."}, {"method_name": "getRowSetWarnings", "method_sig": "RowSetWarning getRowSetWarnings()\n                         throws SQLException", "description": "Retrieves the first warning reported by calls on this JdbcRowSet\n object.\n If a second warning was reported on this JdbcRowSet object,\n it will be chained to the first warning and can be retrieved by\n calling the method RowSetWarning.getNextWarning on the\n first warning. Subsequent warnings on this JdbcRowSet\n object will be chained to the RowSetWarning objects\n returned by the method RowSetWarning.getNextWarning.\n\n The warning chain is automatically cleared each time a new row is read.\n This method may not be called on a RowSet object\n that has been closed;\n doing so will cause an SQLException to be thrown.\n \n Because it is always connected to its data source, a JdbcRowSet\n object can rely on the presence of active\n Statement, Connection, and ResultSet\n instances. This means that  applications can obtain additional\n SQLWarning\n notifications by calling the getNextWarning methods that\n they provide.\n Disconnected Rowset objects, such as a\n CachedRowSet object, do not have access to\n these getNextWarning methods."}, {"method_name": "commit", "method_sig": "void commit()\n     throws SQLException", "description": "Each JdbcRowSet contains a Connection object from\n the ResultSet or JDBC properties passed to it's constructors.\n This method wraps the Connection commit method to allow flexible\n auto commit or non auto commit transactional control support.\n \n Makes all changes made since the previous commit/rollback permanent\n and releases any database locks currently held by this Connection\n object. This method should be used only when auto-commit mode has\n been disabled."}, {"method_name": "getAutoCommit", "method_sig": "boolean getAutoCommit()\n               throws SQLException", "description": "Each JdbcRowSet contains a Connection object from\n the original ResultSet or JDBC properties passed to it. This\n method wraps the Connection's getAutoCommit method\n to allow an application to determine the JdbcRowSet transaction\n behavior.\n \n Sets this connection's auto-commit mode to the given state. If a\n connection is in auto-commit mode, then all its SQL statements will\n be executed and committed as individual transactions. Otherwise, its\n SQL statements are grouped into transactions that are terminated by a\n call to either the method commit or the method rollback. By default,\n new connections are in auto-commit mode."}, {"method_name": "setAutoCommit", "method_sig": "void setAutoCommit (boolean autoCommit)\n            throws SQLException", "description": "Each JdbcRowSet contains a Connection object from\n the original ResultSet or JDBC properties passed to it. This\n method wraps the Connection's getAutoCommit method\n to allow an application to set the JdbcRowSet transaction behavior.\n \n Sets the current auto-commit mode for this Connection object."}, {"method_name": "rollback", "method_sig": "void rollback()\n       throws SQLException", "description": "Each JdbcRowSet contains a Connection object from\n the original ResultSet or JDBC properties passed to it.\n Undoes all changes made in the current transaction and releases any\n database locks currently held by this Connection object. This method\n should be used only when auto-commit mode has been disabled."}, {"method_name": "rollback", "method_sig": "void rollback (Savepoint s)\n       throws SQLException", "description": "Each JdbcRowSet contains a Connection object from\n the original ResultSet or JDBC properties passed to it.\n Undoes all changes made in the current transaction to the last set savepoint\n and releases any database locks currently held by this Connection\n object. This method should be used only when auto-commit mode has been disabled."}]}