{"name": "Interface FilteredRowSet", "module": "java.sql.rowset", "package": "javax.sql.rowset", "text": "The standard interface that all standard implementations of\n FilteredRowSet must implement. The FilteredRowSetImpl class\n provides the reference implementation which may be extended if required.\n Alternatively, a vendor is free to implement its own version\n by implementing this interface.\n\n 1.0 Background\n\n There are occasions when a RowSet object has a need to provide a degree\n of filtering to its contents. One possible solution is to provide\n a query language for all standard RowSet implementations; however,\n this is an impractical approach for lightweight components such as disconnected\n RowSet\n objects. The FilteredRowSet interface seeks to address this need\n without supplying a heavyweight query language along with the processing that\n such a query language would require.\n \n A JDBC FilteredRowSet standard implementation implements the\n RowSet interfaces and extends the\n CachedRowSet\u2122 class. The\n CachedRowSet class provides a set of protected cursor manipulation\n methods, which a FilteredRowSet implementation can override\n to supply filtering support.\n\n 2.0 Predicate Sharing\n\n If a FilteredRowSet implementation is shared using the\n inherited createShared method in parent interfaces, the\n Predicate should be shared without modification by all\n FilteredRowSet instance clones.\n\n 3.0 Usage\n\n By implementing a Predicate (see example in Predicate\n class JavaDoc), a FilteredRowSet could then be used as described\n below.\n\n \n \n     FilteredRowSet frs = new FilteredRowSetImpl();\n     frs.populate(rs);\n\n     Range name = new Range(\"Alpha\", \"Bravo\", \"columnName\");\n     frs.setFilter(name);\n\n     frs.next() // only names from \"Alpha\" to \"Bravo\" will be returned\n \n \n In the example above, we initialize a Range object which\n implements the Predicate interface. This object expresses\n the following constraints: All rows outputted or modified from this\n FilteredRowSet object must fall between the values 'Alpha' and\n 'Bravo' both values inclusive, in the column 'columnName'. If a filter is\n applied to a FilteredRowSet object that contains no data that\n falls within the range of the filter, no rows are returned.\n \n This framework allows multiple classes implementing predicates to be\n used in combination to achieved the required filtering result with\n out the need for query language processing.\n\n 4.0 Updating a FilteredRowSet Object\n The predicate set on a FilteredRowSet object\n applies a criterion on all rows in a\n RowSet object to manage a subset of rows in a RowSet\n object. This criterion governs the subset of rows that are visible and also\n defines which rows can be modified, deleted or inserted.\n \n Therefore, the predicate set on a FilteredRowSet object must be\n considered as bi-directional and the set criterion as the gating mechanism\n for all views and updates to the FilteredRowSet object. Any attempt\n to update the FilteredRowSet that violates the criterion will\n result in a SQLException object being thrown.\n \n The FilteredRowSet range criterion can be modified by applying\n a new Predicate object to the FilteredRowSet\n instance at any time. This is  possible if no additional references to the\n FilteredRowSet object are detected. A new filter has an\n immediate effect on criterion enforcement within the\n FilteredRowSet object, and all subsequent views and updates will be\n subject to similar enforcement.\n\n 5.0 Behavior of Rows Outside the Filter\n Rows that fall outside of the filter set on a FilteredRowSet\n object cannot be modified until the filter is removed or a\n new filter is applied.\n \n Furthermore, only rows that fall within the bounds of a filter will be\n synchronized with the data source.", "codes": ["public interface FilteredRowSet\nextends WebRowSet"], "fields": [], "methods": [{"method_name": "setFilter", "method_sig": "void setFilter (Predicate p)\n        throws SQLException", "description": "Applies the given Predicate object to this\n FilteredRowSet\n object. The filter applies controls both to inbound and outbound views,\n constraining which rows are visible and which\n rows can be manipulated.\n \n A new Predicate object may be set at any time. This has the\n effect of changing constraints on the RowSet object's data.\n In addition, modifying the filter at runtime presents issues whereby\n multiple components may be operating on one FilteredRowSet object.\n Application developers must take responsibility for managing multiple handles\n to FilteredRowSet objects when their underling Predicate\n objects change."}, {"method_name": "getFilter", "method_sig": "Predicate getFilter()", "description": "Retrieves the active filter for this FilteredRowSet object."}]}