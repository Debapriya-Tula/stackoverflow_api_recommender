{"name": "Class ActivationGroup", "module": "java.rmi", "package": "java.rmi.activation", "text": "An ActivationGroup is responsible for creating new\n instances of \"activatable\" objects in its group, informing its\n ActivationMonitor when either: its object's become\n active or inactive, or the group as a whole becomes inactive. \n\n An ActivationGroup is initially created in one\n of several ways: \nas a side-effect of creating an ActivationDesc\n     without an explicit ActivationGroupID for the\n     first activatable object in the group, or\n via the ActivationGroup.createGroup method\n as a side-effect of activating the first object in a group\n     whose ActivationGroupDesc was only registered.\n\n Only the activator can recreate an\n ActivationGroup.  The activator spawns, as needed, a\n separate VM (as a child process, for example) for each registered\n activation group and directs activation requests to the appropriate\n group. It is implementation specific how VMs are spawned. An\n activation group is created via the\n ActivationGroup.createGroup static method. The\n createGroup method has two requirements on the group\n to be created: 1) the group must be a concrete subclass of\n ActivationGroup, and 2) the group must have a\n constructor that takes two arguments:\n\n \n the group's ActivationGroupID, and\n  the group's initialization data (in a\n      java.rmi.MarshalledObject)\n\n When created, the default implementation of\n ActivationGroup will override the system properties\n with the properties requested when its\n ActivationGroupDesc was created, and will set a\n SecurityManager as the default system\n security manager.  If your application requires specific properties\n to be set when objects are activated in the group, the application\n should create a special Properties object containing\n these properties, then create an ActivationGroupDesc\n with the Properties object, and use\n ActivationGroup.createGroup before creating any\n ActivationDescs (before the default\n ActivationGroupDesc is created).  If your application\n requires the use of a security manager other than\n SecurityManager, in the\n ActivativationGroupDescriptor properties list you can set\n java.security.manager property to the name of the security\n manager you would like to install.", "codes": ["public abstract class ActivationGroup\nextends UnicastRemoteObject\nimplements ActivationInstantiator"], "fields": [], "methods": [{"method_name": "inactiveObject", "method_sig": "public boolean inactiveObject (ActivationID id)\n                       throws ActivationException,\n                              UnknownObjectException,\n                              RemoteException", "description": "The group's inactiveObject method is called\n indirectly via a call to the Activatable.inactive\n method. A remote object implementation must call\n Activatable's inactive method when\n that object deactivates (the object deems that it is no longer\n active). If the object does not call\n Activatable.inactive when it deactivates, the\n object will never be garbage collected since the group keeps\n strong references to the objects it creates.\n\n The group's inactiveObject method unexports the\n remote object from the RMI runtime so that the object can no\n longer receive incoming RMI calls. An object will only be unexported\n if the object has no pending or executing calls.\n The subclass of ActivationGroup must override this\n method and unexport the object.\n\n After removing the object from the RMI runtime, the group\n must inform its ActivationMonitor (via the monitor's\n inactiveObject method) that the remote object is\n not currently active so that the remote object will be\n re-activated by the activator upon a subsequent activation\n request.\n\n This method simply informs the group's monitor that the object\n is inactive.  It is up to the concrete subclass of ActivationGroup\n to fulfill the additional requirement of unexporting the object."}, {"method_name": "activeObject", "method_sig": "public abstract void activeObject (ActivationID id,\n                                  Remote obj)\n                           throws ActivationException,\n                                  UnknownObjectException,\n                                  RemoteException", "description": "The group's activeObject method is called when an\n object is exported (either by Activatable object\n construction or an explicit call to\n Activatable.exportObject. The group must inform its\n ActivationMonitor that the object is active (via\n the monitor's activeObject method) if the group\n hasn't already done so."}, {"method_name": "createGroup", "method_sig": "public static ActivationGroup createGroup (ActivationGroupID id,\n                                          ActivationGroupDesc desc,\n                                          long incarnation)\n                                   throws ActivationException", "description": "Create and set the activation group for the current VM.  The\n activation group can only be set if it is not currently set.\n An activation group is set using the createGroup\n method when the Activator initiates the\n re-creation of an activation group in order to carry out\n incoming activate requests. A group must first be\n registered with the ActivationSystem before it can\n be created via this method.\n\n The group class specified by the\n ActivationGroupDesc must be a concrete subclass of\n ActivationGroup and have a public constructor that\n takes two arguments: the ActivationGroupID for the\n group and the MarshalledObject containing the\n group's initialization data (obtained from the\n ActivationGroupDesc.\n\n If the group class name specified in the\n ActivationGroupDesc is null, then\n this method will behave as if the group descriptor contained\n the name of the default activation group implementation class.\n\n Note that if your application creates its own custom\n activation group, a security manager must be set for that\n group.  Otherwise objects cannot be activated in the group.\n SecurityManager is set by default.\n\n If a security manager is already set in the group VM, this\n method first calls the security manager's\n checkSetFactory method.  This could result in a\n SecurityException. If your application needs to\n set a different security manager, you must ensure that the\n policy file specified by the group's\n ActivationGroupDesc grants the group the necessary\n permissions to set a new security manager.  (Note: This will be\n necessary if your group downloads and sets a security manager).\n\n After the group is created, the\n ActivationSystem is informed that the group is\n active by calling the activeGroup method which\n returns the ActivationMonitor for the group. The\n application need not call activeGroup\n independently since it is taken care of by this method.\n\n Once a group is created, subsequent calls to the\n currentGroupID method will return the identifier\n for this group until the group becomes inactive."}, {"method_name": "currentGroupID", "method_sig": "public static ActivationGroupID currentGroupID()", "description": "Returns the current activation group's identifier.  Returns null\n if no group is currently active for this VM."}, {"method_name": "setSystem", "method_sig": "public static void setSystem (ActivationSystem system)\n                      throws ActivationException", "description": "Set the activation system for the VM.  The activation system can\n only be set it if no group is currently active. If the activation\n system is not set via this call, then the getSystem\n method attempts to obtain a reference to the\n ActivationSystem by looking up the name\n \"java.rmi.activation.ActivationSystem\" in the Activator's\n registry. By default, the port number used to look up the\n activation system is defined by\n ActivationSystem.SYSTEM_PORT. This port can be overridden\n by setting the property java.rmi.activation.port.\n\n If there is a security manager, this method first\n calls the security manager's checkSetFactory method.\n This could result in a SecurityException."}, {"method_name": "getSystem", "method_sig": "public static ActivationSystem getSystem()\n                                  throws ActivationException", "description": "Returns the activation system for the VM. The activation system\n may be set by the setSystem method. If the\n activation system is not set via the setSystem\n method, then the getSystem method attempts to\n obtain a reference to the ActivationSystem by\n looking up the name \"java.rmi.activation.ActivationSystem\" in\n the Activator's registry. By default, the port number used to\n look up the activation system is defined by\n ActivationSystem.SYSTEM_PORT. This port can be\n overridden by setting the property\n java.rmi.activation.port."}, {"method_name": "activeObject", "method_sig": "protected void activeObject (ActivationID id,\n                            MarshalledObject<? extends Remote> mobj)\n                     throws ActivationException,\n                            UnknownObjectException,\n                            RemoteException", "description": "This protected method is necessary for subclasses to\n make the activeObject callback to the group's\n monitor. The call is simply forwarded to the group's\n ActivationMonitor."}, {"method_name": "inactiveGroup", "method_sig": "protected void inactiveGroup()\n                      throws UnknownGroupException,\n                             RemoteException", "description": "This protected method is necessary for subclasses to\n make the inactiveGroup callback to the group's\n monitor. The call is simply forwarded to the group's\n ActivationMonitor. Also, the current group\n for the VM is set to null."}]}