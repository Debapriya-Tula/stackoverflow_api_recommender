{"name": "Interface ClassDoc", "module": "jdk.javadoc", "package": "com.sun.javadoc", "text": "Represents a java class or interface and provides access to\n information about the class, the class's comment and tags, and the\n members of the class.  A ClassDoc only exists if it was\n processed in this run of javadoc.  References to classes\n which may or may not have been processed in this run are\n referred to using Type (which can be converted to ClassDoc,\n if possible).", "codes": ["@Deprecated(since=\"9\",\n            forRemoval=true)\npublic interface ClassDoc\nextends ProgramElementDoc, Type"], "fields": [], "methods": [{"method_name": "isAbstract", "method_sig": "boolean isAbstract()", "description": "Return true if this class is abstract.  Return true\n for all interfaces."}, {"method_name": "isSerializable", "method_sig": "boolean isSerializable()", "description": "Return true if this class implements or interface extends\n java.io.Serializable.\n\n Since java.io.Externalizable extends\n java.io.Serializable,\n Externalizable objects are also Serializable."}, {"method_name": "isExternalizable", "method_sig": "boolean isExternalizable()", "description": "Return true if this class implements or interface extends\n java.io.Externalizable."}, {"method_name": "serializationMethods", "method_sig": "MethodDoc[] serializationMethods()", "description": "Return the serialization methods for this class or\n interface."}, {"method_name": "serializableFields", "method_sig": "FieldDoc[] serializableFields()", "description": "Return the Serializable fields of this class or interface.\n \n Return either a list of default fields documented by\n serial tag\n or return a single FieldDoc for\n serialPersistentField member.\n There should be a serialField tag for\n each Serializable field defined by an ObjectStreamField\n array component of serialPersistentField."}, {"method_name": "definesSerializableFields", "method_sig": "boolean definesSerializableFields()", "description": "Return true if Serializable fields are explicitly defined with\n  the special class member serialPersistentFields."}, {"method_name": "superclass", "method_sig": "ClassDoc superclass()", "description": "Return the superclass of this class.  Return null if this is an\n interface.\n\n  This method cannot accommodate certain generic type constructs.\n The superclassType method should be used instead."}, {"method_name": "superclassType", "method_sig": "Type superclassType()", "description": "Return the superclass of this class.  Return null if this is an\n interface.  A superclass is represented by either a\n ClassDoc or a ParametrizedType."}, {"method_name": "subclassOf", "method_sig": "boolean subclassOf (ClassDoc cd)", "description": "Test whether this class is a subclass of the specified class.\n If this is an interface, return false for all classes except\n java.lang.Object (we must keep this unexpected\n behavior for compatibility reasons)."}, {"method_name": "interfaces", "method_sig": "ClassDoc[] interfaces()", "description": "Return interfaces implemented by this class or interfaces extended\n by this interface. Includes only directly-declared interfaces, not\n inherited interfaces.\n Return an empty array if there are no interfaces.\n\n  This method cannot accommodate certain generic type constructs.\n The interfaceTypes method should be used instead."}, {"method_name": "interfaceTypes", "method_sig": "Type[] interfaceTypes()", "description": "Return interfaces implemented by this class or interfaces extended\n by this interface. Includes only directly-declared interfaces, not\n inherited interfaces.\n Return an empty array if there are no interfaces."}, {"method_name": "typeParameters", "method_sig": "TypeVariable[] typeParameters()", "description": "Return the formal type parameters of this class or interface.\n Return an empty array if there are none."}, {"method_name": "typeParamTags", "method_sig": "ParamTag[] typeParamTags()", "description": "Return the type parameter tags of this class or interface.\n Return an empty array if there are none."}, {"method_name": "fields", "method_sig": "FieldDoc[] fields()", "description": "Return\n included\n fields in this class or interface.\n Excludes enum constants if this is an enum type."}, {"method_name": "fields", "method_sig": "FieldDoc[] fields (boolean filter)", "description": "Return fields in this class or interface, filtered to the specified\n access\n modifier option.\n Excludes enum constants if this is an enum type."}, {"method_name": "enumConstants", "method_sig": "FieldDoc[] enumConstants()", "description": "Return the enum constants if this is an enum type.\n Return an empty array if there are no enum constants, or if\n this is not an enum type."}, {"method_name": "methods", "method_sig": "MethodDoc[] methods()", "description": "Return\n included\n methods in this class or interface.\n Same as methods(true)."}, {"method_name": "methods", "method_sig": "MethodDoc[] methods (boolean filter)", "description": "Return methods in this class or interface, filtered to the specified\n access\n modifier option.  Does not include constructors or annotation\n          type elements."}, {"method_name": "constructors", "method_sig": "ConstructorDoc[] constructors()", "description": "Return\n included\n constructors in this class.  An array containing the default\n no-arg constructor is returned if no other constructors exist.\n Return empty array if this is an interface."}, {"method_name": "constructors", "method_sig": "ConstructorDoc[] constructors (boolean filter)", "description": "Return constructors in this class, filtered to the specified\n access\n modifier option.  Return an array containing the default\n no-arg constructor if no other constructors exist."}, {"method_name": "innerClasses", "method_sig": "ClassDoc[] innerClasses()", "description": "Return\n included\n nested classes and interfaces within this class or interface.\n This includes both static and non-static nested classes.\n (This method should have been named nestedClasses(),\n as inner classes are technically non-static.)  Anonymous and local classes\n or interfaces are not included."}, {"method_name": "innerClasses", "method_sig": "ClassDoc[] innerClasses (boolean filter)", "description": "Return nested classes and interfaces within this class or interface\n filtered to the specified\n access\n modifier option.\n This includes both static and non-static nested classes.\n Anonymous and local classes are not included."}, {"method_name": "findClass", "method_sig": "ClassDoc findClass (String className)", "description": "Find the specified class or interface within the context of this class doc.\n Search order: 1) qualified name, 2) nested in this class or interface,\n 3) in this package, 4) in the class imports, 5) in the package imports.\n Return the ClassDoc if found, null if not found."}, {"method_name": "importedClasses", "method_sig": "@Deprecated(since=\"9\",\n            forRemoval=true)\nClassDoc[] importedClasses()", "description": "Get the list of classes and interfaces declared as imported.\n These are called \"single-type-import declarations\" in\n The Java\u2122 Language Specification."}, {"method_name": "importedPackages", "method_sig": "@Deprecated(since=\"9\",\n            forRemoval=true)\nPackageDoc[] importedPackages()", "description": "Get the list of packages declared as imported.\n These are called \"type-import-on-demand declarations\" in\n The Java\u2122 Language Specification."}]}