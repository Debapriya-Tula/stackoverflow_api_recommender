{"name": "Class DoubleAdder", "module": "java.base", "package": "java.util.concurrent.atomic", "text": "One or more variables that together maintain an initially zero\n double sum.  When updates (method add(double)) are\n contended across threads, the set of variables may grow dynamically\n to reduce contention.  Method sum() (or, equivalently doubleValue()) returns the current total combined across the\n variables maintaining the sum. The order of accumulation within or\n across threads is not guaranteed. Thus, this class may not be\n applicable if numerical stability is required, especially when\n combining values of substantially different orders of magnitude.\n\n This class is usually preferable to alternatives when multiple\n threads update a common value that is used for purposes such as\n summary statistics that are frequently updated but less frequently\n read.\n\n This class extends Number, but does not define\n methods such as equals, hashCode and \n compareTo because instances are expected to be mutated, and so are\n not useful as collection keys.", "codes": ["public class DoubleAdder\nextends Number\nimplements Serializable"], "fields": [], "methods": [{"method_name": "add", "method_sig": "public void add (double x)", "description": "Adds the given value."}, {"method_name": "sum", "method_sig": "public double sum()", "description": "Returns the current sum.  The returned value is NOT an\n atomic snapshot; invocation in the absence of concurrent\n updates returns an accurate result, but concurrent updates that\n occur while the sum is being calculated might not be\n incorporated.  Also, because floating-point arithmetic is not\n strictly associative, the returned result need not be identical\n to the value that would be obtained in a sequential series of\n updates to a single variable."}, {"method_name": "reset", "method_sig": "public void reset()", "description": "Resets variables maintaining the sum to zero.  This method may\n be a useful alternative to creating a new adder, but is only\n effective if there are no concurrent updates.  Because this\n method is intrinsically racy, it should only be used when it is\n known that no threads are concurrently updating."}, {"method_name": "sumThenReset", "method_sig": "public double sumThenReset()", "description": "Equivalent in effect to sum() followed by reset(). This method may apply for example during quiescent\n points between multithreaded computations.  If there are\n updates concurrent with this method, the returned value is\n not guaranteed to be the final value occurring before\n the reset."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns the String representation of the sum()."}, {"method_name": "doubleValue", "method_sig": "public double doubleValue()", "description": "Equivalent to sum()."}, {"method_name": "longValue", "method_sig": "public long longValue()", "description": "Returns the sum() as a long after a\n narrowing primitive conversion."}, {"method_name": "intValue", "method_sig": "public int intValue()", "description": "Returns the sum() as an int after a\n narrowing primitive conversion."}, {"method_name": "floatValue", "method_sig": "public float floatValue()", "description": "Returns the sum() as a float\n after a narrowing primitive conversion."}]}