{"name": "Class Matcher", "module": "java.base", "package": "java.util.regex", "text": "An engine that performs match operations on a character sequence by interpreting a Pattern.\n\n  A matcher is created from a pattern by invoking the pattern's matcher method.  Once created, a matcher can be used to\n perform three different kinds of match operations:\n\n \n The matches method attempts to match the entire\n   input sequence against the pattern.  \n The lookingAt method attempts to match the\n   input sequence, starting at the beginning, against the pattern.  \n The find method scans the input sequence looking\n   for the next subsequence that matches the pattern.  \n\n Each of these methods returns a boolean indicating success or failure.\n More information about a successful match can be obtained by querying the\n state of the matcher.\n\n  A matcher finds matches in a subset of its input called the\n region. By default, the region contains all of the matcher's input.\n The region can be modified via the region method\n and queried via the regionStart and regionEnd methods. The way that the region boundaries interact\n with some pattern constructs can be changed. See useAnchoringBounds and useTransparentBounds for more details.\n\n  This class also defines methods for replacing matched subsequences with\n new strings whose contents can, if desired, be computed from the match\n result.  The appendReplacement and appendTail methods can be used in tandem in order to collect\n the result into an existing string buffer or string builder. Alternatively,\n the more convenient replaceAll method can be used to\n create a string in which every matching subsequence in the input sequence\n is replaced.\n\n  The explicit state of a matcher includes the start and end indices of\n the most recent successful match.  It also includes the start and end\n indices of the input subsequence captured by each capturing group in the pattern as well as a total\n count of such subsequences.  As a convenience, methods are also provided for\n returning these captured subsequences in string form.\n\n  The explicit state of a matcher is initially undefined; attempting to\n query any part of it before a successful match will cause an IllegalStateException to be thrown.  The explicit state of a matcher is\n recomputed by every match operation.\n\n  The implicit state of a matcher includes the input character sequence as\n well as the append position, which is initially zero and is updated\n by the appendReplacement method.\n\n  A matcher may be reset explicitly by invoking its reset()\n method or, if a new input sequence is desired, its reset(CharSequence) method.  Resetting a\n matcher discards its explicit state information and sets the append position\n to zero.\n\n  Instances of this class are not safe for use by multiple concurrent\n threads. ", "codes": ["public final class Matcher\nextends Object\nimplements MatchResult"], "fields": [], "methods": [{"method_name": "pattern", "method_sig": "public Pattern pattern()", "description": "Returns the pattern that is interpreted by this matcher."}, {"method_name": "toMatchResult", "method_sig": "public MatchResult toMatchResult()", "description": "Returns the match state of this matcher as a MatchResult.\n The result is unaffected by subsequent operations performed upon this\n matcher."}, {"method_name": "usePattern", "method_sig": "public Matcher usePattern (Pattern newPattern)", "description": "Changes the Pattern that this Matcher uses to\n find matches with.\n\n  This method causes this matcher to lose information\n about the groups of the last match that occurred. The\n matcher's position in the input is maintained and its\n last append position is unaffected."}, {"method_name": "reset", "method_sig": "public Matcher reset()", "description": "Resets this matcher.\n\n  Resetting a matcher discards all of its explicit state information\n and sets its append position to zero. The matcher's region is set to the\n default region, which is its entire character sequence. The anchoring\n and transparency of this matcher's region boundaries are unaffected."}, {"method_name": "reset", "method_sig": "public Matcher reset (CharSequence input)", "description": "Resets this matcher with a new input sequence.\n\n  Resetting a matcher discards all of its explicit state information\n and sets its append position to zero.  The matcher's region is set to\n the default region, which is its entire character sequence.  The\n anchoring and transparency of this matcher's region boundaries are\n unaffected."}, {"method_name": "start", "method_sig": "public int start()", "description": "Returns the start index of the previous match."}, {"method_name": "start", "method_sig": "public int start (int group)", "description": "Returns the start index of the subsequence captured by the given group\n during the previous match operation.\n\n  Capturing groups are indexed from left\n to right, starting at one.  Group zero denotes the entire pattern, so\n the expression m.start(0) is equivalent to\n m.start().  "}, {"method_name": "start", "method_sig": "public int start (String name)", "description": "Returns the start index of the subsequence captured by the given\n named-capturing group during the\n previous match operation."}, {"method_name": "end", "method_sig": "public int end()", "description": "Returns the offset after the last character matched."}, {"method_name": "end", "method_sig": "public int end (int group)", "description": "Returns the offset after the last character of the subsequence\n captured by the given group during the previous match operation.\n\n  Capturing groups are indexed from left\n to right, starting at one.  Group zero denotes the entire pattern, so\n the expression m.end(0) is equivalent to\n m.end().  "}, {"method_name": "end", "method_sig": "public int end (String name)", "description": "Returns the offset after the last character of the subsequence\n captured by the given named-capturing\n group during the previous match operation."}, {"method_name": "group", "method_sig": "public String group()", "description": "Returns the input subsequence matched by the previous match.\n\n  For a matcher m with input sequence s,\n the expressions m.group() and\n s.substring(m.start(),\u00a0m.\nend()) are equivalent.  \n Note that some patterns, for example a*, match the empty\n string.  This method will return the empty string when the pattern\n successfully matches the empty string in the input.  "}, {"method_name": "group", "method_sig": "public String group (int group)", "description": "Returns the input subsequence captured by the given group during the\n previous match operation.\n\n  For a matcher m, input sequence s, and group index\n g, the expressions m.group(g) and\n s.substring(m.start(g\n ),\u00a0m.end(g))\n are equivalent.  \n Capturing groups are indexed from left\n to right, starting at one.  Group zero denotes the entire pattern, so\n the expression m.group(0) is equivalent to m.group().\n \n If the match was successful but the group specified failed to match\n any part of the input sequence, then null is returned. Note\n that some groups, for example (a*), match the empty string.\n This method will return the empty string when such a group successfully\n matches the empty string in the input.  "}, {"method_name": "group", "method_sig": "public String group (String name)", "description": "Returns the input subsequence captured by the given\n named-capturing group during the\n previous match operation.\n\n  If the match was successful but the group specified failed to match\n any part of the input sequence, then null is returned. Note\n that some groups, for example (a*), match the empty string.\n This method will return the empty string when such a group successfully\n matches the empty string in the input.  "}, {"method_name": "groupCount", "method_sig": "public int groupCount()", "description": "Returns the number of capturing groups in this matcher's pattern.\n\n  Group zero denotes the entire pattern by convention. It is not\n included in this count.\n\n  Any non-negative integer smaller than or equal to the value\n returned by this method is guaranteed to be a valid group index for\n this matcher.  "}, {"method_name": "matches", "method_sig": "public boolean matches()", "description": "Attempts to match the entire region against the pattern.\n\n  If the match succeeds then more information can be obtained via the\n start, end, and group methods.  "}, {"method_name": "find", "method_sig": "public boolean find()", "description": "Attempts to find the next subsequence of the input sequence that matches\n the pattern.\n\n  This method starts at the beginning of this matcher's region, or, if\n a previous invocation of the method was successful and the matcher has\n not since been reset, at the first character not matched by the previous\n match.\n\n  If the match succeeds then more information can be obtained via the\n start, end, and group methods.  "}, {"method_name": "find", "method_sig": "public boolean find (int start)", "description": "Resets this matcher and then attempts to find the next subsequence of\n the input sequence that matches the pattern, starting at the specified\n index.\n\n  If the match succeeds then more information can be obtained via the\n start, end, and group methods, and subsequent\n invocations of the find() method will start at the first\n character not matched by this match.  "}, {"method_name": "lookingAt", "method_sig": "public boolean lookingAt()", "description": "Attempts to match the input sequence, starting at the beginning of the\n region, against the pattern.\n\n  Like the matches method, this method always starts\n at the beginning of the region; unlike that method, it does not\n require that the entire region be matched.\n\n  If the match succeeds then more information can be obtained via the\n start, end, and group methods.  "}, {"method_name": "quoteReplacement", "method_sig": "public static String quoteReplacement (String s)", "description": "Returns a literal replacement String for the specified\n String.\n\n This method produces a String that will work\n as a literal replacement s in the\n appendReplacement method of the Matcher class.\n The String produced will match the sequence of characters\n in s treated as a literal sequence. Slashes ('\\') and\n dollar signs ('$') will be given no special meaning."}, {"method_name": "appendReplacement", "method_sig": "public Matcher appendReplacement (StringBuffer sb,\n                                 String replacement)", "description": "Implements a non-terminal append-and-replace step.\n\n  This method performs the following actions: \n\n It reads characters from the input sequence, starting at the\n   append position, and appends them to the given string buffer.  It\n   stops after reading the last character preceding the previous match,\n   that is, the character at index start()\u00a0-\u00a01.  \n It appends the given replacement string to the string buffer.\n   \n It sets the append position of this matcher to the index of\n   the last character matched, plus one, that is, to end().\n   \n\n The replacement string may contain references to subsequences\n captured during the previous match: Each occurrence of\n ${name} or $g\n will be replaced by the result of evaluating the corresponding\n group(name) or group(g)\n respectively. For $g,\n the first number after the $ is always treated as part of\n the group reference. Subsequent numbers are incorporated into g if\n they would form a legal group reference. Only the numerals '0'\n through '9' are considered as potential components of the group\n reference. If the second group matched the string \"foo\", for\n example, then passing the replacement string \"$2bar\" would\n cause \"foobar\" to be appended to the string buffer. A dollar\n sign ($) may be included as a literal in the replacement\n string by preceding it with a backslash (\\$).\n\n  Note that backslashes (\\) and dollar signs ($) in\n the replacement string may cause the results to be different than if it\n were being treated as a literal replacement string. Dollar signs may be\n treated as references to captured subsequences as described above, and\n backslashes are used to escape literal characters in the replacement\n string.\n\n  This method is intended to be used in a loop together with the\n appendTail and find\n methods.  The following code, for example, writes one dog two dogs\n in the yard to the standard-output stream: \n\n Pattern p = Pattern.compile(\"cat\");\n Matcher m = p.matcher(\"one cat two cats in the yard\");\n StringBuffer sb = new StringBuffer();\n while (m.find()) {\n     m.appendReplacement(sb, \"dog\");\n }\n m.appendTail(sb);\n System.out.println(sb.toString());"}, {"method_name": "appendReplacement", "method_sig": "public Matcher appendReplacement (StringBuilder sb,\n                                 String replacement)", "description": "Implements a non-terminal append-and-replace step.\n\n  This method performs the following actions: \n\n It reads characters from the input sequence, starting at the\n   append position, and appends them to the given string builder.  It\n   stops after reading the last character preceding the previous match,\n   that is, the character at index start()\u00a0-\u00a01.  \n It appends the given replacement string to the string builder.\n   \n It sets the append position of this matcher to the index of\n   the last character matched, plus one, that is, to end().\n   \n\n The replacement string may contain references to subsequences\n captured during the previous match: Each occurrence of\n $g will be replaced by the result of\n evaluating group(g).\n The first number after the $ is always treated as part of\n the group reference. Subsequent numbers are incorporated into g if\n they would form a legal group reference. Only the numerals '0'\n through '9' are considered as potential components of the group\n reference. If the second group matched the string \"foo\", for\n example, then passing the replacement string \"$2bar\" would\n cause \"foobar\" to be appended to the string builder. A dollar\n sign ($) may be included as a literal in the replacement\n string by preceding it with a backslash (\\$).\n\n  Note that backslashes (\\) and dollar signs ($) in\n the replacement string may cause the results to be different than if it\n were being treated as a literal replacement string. Dollar signs may be\n treated as references to captured subsequences as described above, and\n backslashes are used to escape literal characters in the replacement\n string.\n\n  This method is intended to be used in a loop together with the\n appendTail and\n find methods. The following code, for example, writes\n one dog two dogs in the yard to the standard-output stream: \n\n Pattern p = Pattern.compile(\"cat\");\n Matcher m = p.matcher(\"one cat two cats in the yard\");\n StringBuilder sb = new StringBuilder();\n while (m.find()) {\n     m.appendReplacement(sb, \"dog\");\n }\n m.appendTail(sb);\n System.out.println(sb.toString());"}, {"method_name": "appendTail", "method_sig": "public StringBuffer appendTail (StringBuffer sb)", "description": "Implements a terminal append-and-replace step.\n\n  This method reads characters from the input sequence, starting at\n the append position, and appends them to the given string buffer.  It is\n intended to be invoked after one or more invocations of the appendReplacement method in\n order to copy the remainder of the input sequence.  "}, {"method_name": "appendTail", "method_sig": "public StringBuilder appendTail (StringBuilder sb)", "description": "Implements a terminal append-and-replace step.\n\n  This method reads characters from the input sequence, starting at\n the append position, and appends them to the given string builder.  It is\n intended to be invoked after one or more invocations of the appendReplacement method in order to copy the remainder of the input\n sequence.  "}, {"method_name": "replaceAll", "method_sig": "public String replaceAll (String replacement)", "description": "Replaces every subsequence of the input sequence that matches the\n pattern with the given replacement string.\n\n  This method first resets this matcher.  It then scans the input\n sequence looking for matches of the pattern.  Characters that are not\n part of any match are appended directly to the result string; each match\n is replaced in the result by the replacement string.  The replacement\n string may contain references to captured subsequences as in the appendReplacement method.\n\n  Note that backslashes (\\) and dollar signs ($) in\n the replacement string may cause the results to be different than if it\n were being treated as a literal replacement string. Dollar signs may be\n treated as references to captured subsequences as described above, and\n backslashes are used to escape literal characters in the replacement\n string.\n\n  Given the regular expression a*b, the input\n \"aabfooaabfooabfoob\", and the replacement string\n \"-\", an invocation of this method on a matcher for that\n expression would yield the string \"-foo-foo-foo-\".\n\n  Invoking this method changes this matcher's state.  If the matcher\n is to be used in further matching operations then it should first be\n reset.  "}, {"method_name": "replaceAll", "method_sig": "public String replaceAll (Function<MatchResult, String> replacer)", "description": "Replaces every subsequence of the input sequence that matches the\n pattern with the result of applying the given replacer function to the\n match result of this matcher corresponding to that subsequence.\n Exceptions thrown by the function are relayed to the caller.\n\n  This method first resets this matcher.  It then scans the input\n sequence looking for matches of the pattern.  Characters that are not\n part of any match are appended directly to the result string; each match\n is replaced in the result by the applying the replacer function that\n returns a replacement string.  Each replacement string may contain\n references to captured subsequences as in the appendReplacement method.\n\n  Note that backslashes (\\) and dollar signs ($) in\n a replacement string may cause the results to be different than if it\n were being treated as a literal replacement string. Dollar signs may be\n treated as references to captured subsequences as described above, and\n backslashes are used to escape literal characters in the replacement\n string.\n\n  Given the regular expression dog, the input\n \"zzzdogzzzdogzzz\", and the function\n mr -> mr.group().toUpperCase(), an invocation of this method on\n a matcher for that expression would yield the string\n \"zzzDOGzzzDOGzzz\".\n\n  Invoking this method changes this matcher's state.  If the matcher\n is to be used in further matching operations then it should first be\n reset.  \n The replacer function should not modify this matcher's state during\n replacement.  This method will, on a best-effort basis, throw a\n ConcurrentModificationException if such modification is\n detected.\n\n  The state of each match result passed to the replacer function is\n guaranteed to be constant only for the duration of the replacer function\n call and only if the replacer function does not modify this matcher's\n state."}, {"method_name": "results", "method_sig": "public Stream<MatchResult> results()", "description": "Returns a stream of match results for each subsequence of the input\n sequence that matches the pattern.  The match results occur in the\n same order as the matching subsequences in the input sequence.\n\n  Each match result is produced as if by toMatchResult().\n\n  This method does not reset this matcher.  Matching starts on\n initiation of the terminal stream operation either at the beginning of\n this matcher's region, or, if the matcher has not since been reset, at\n the first character not matched by a previous match.\n\n  If the matcher is to be used for further matching operations after\n the terminal stream operation completes then it should be first reset.\n\n  This matcher's state should not be modified during execution of the\n returned stream's pipeline.  The returned stream's source\n Spliterator is fail-fast and will, on a best-effort\n basis, throw a ConcurrentModificationException if such\n modification is detected."}, {"method_name": "replaceFirst", "method_sig": "public String replaceFirst (String replacement)", "description": "Replaces the first subsequence of the input sequence that matches the\n pattern with the given replacement string.\n\n  This method first resets this matcher.  It then scans the input\n sequence looking for a match of the pattern.  Characters that are not\n part of the match are appended directly to the result string; the match\n is replaced in the result by the replacement string.  The replacement\n string may contain references to captured subsequences as in the appendReplacement method.\n\n Note that backslashes (\\) and dollar signs ($) in\n the replacement string may cause the results to be different than if it\n were being treated as a literal replacement string. Dollar signs may be\n treated as references to captured subsequences as described above, and\n backslashes are used to escape literal characters in the replacement\n string.\n\n  Given the regular expression dog, the input\n \"zzzdogzzzdogzzz\", and the replacement string\n \"cat\", an invocation of this method on a matcher for that\n expression would yield the string \"zzzcatzzzdogzzz\".  \n Invoking this method changes this matcher's state.  If the matcher\n is to be used in further matching operations then it should first be\n reset.  "}, {"method_name": "replaceFirst", "method_sig": "public String replaceFirst (Function<MatchResult, String> replacer)", "description": "Replaces the first subsequence of the input sequence that matches the\n pattern with the result of applying the given replacer function to the\n match result of this matcher corresponding to that subsequence.\n Exceptions thrown by the replace function are relayed to the caller.\n\n  This method first resets this matcher.  It then scans the input\n sequence looking for a match of the pattern.  Characters that are not\n part of the match are appended directly to the result string; the match\n is replaced in the result by the applying the replacer function that\n returns a replacement string.  The replacement string may contain\n references to captured subsequences as in the appendReplacement method.\n\n Note that backslashes (\\) and dollar signs ($) in\n the replacement string may cause the results to be different than if it\n were being treated as a literal replacement string. Dollar signs may be\n treated as references to captured subsequences as described above, and\n backslashes are used to escape literal characters in the replacement\n string.\n\n  Given the regular expression dog, the input\n \"zzzdogzzzdogzzz\", and the function\n mr -> mr.group().toUpperCase(), an invocation of this method on\n a matcher for that expression would yield the string\n \"zzzDOGzzzdogzzz\".\n\n  Invoking this method changes this matcher's state.  If the matcher\n is to be used in further matching operations then it should first be\n reset.\n\n  The replacer function should not modify this matcher's state during\n replacement.  This method will, on a best-effort basis, throw a\n ConcurrentModificationException if such modification is\n detected.\n\n  The state of the match result passed to the replacer function is\n guaranteed to be constant only for the duration of the replacer function\n call and only if the replacer function does not modify this matcher's\n state."}, {"method_name": "region", "method_sig": "public Matcher region (int start,\n                      int end)", "description": "Sets the limits of this matcher's region. The region is the part of the\n input sequence that will be searched to find a match. Invoking this\n method resets the matcher, and then sets the region to start at the\n index specified by the start parameter and end at the\n index specified by the end parameter.\n\n Depending on the transparency and anchoring being used (see\n useTransparentBounds and\n useAnchoringBounds), certain\n constructs such as anchors may behave differently at or around the\n boundaries of the region."}, {"method_name": "regionStart", "method_sig": "public int regionStart()", "description": "Reports the start index of this matcher's region. The\n searches this matcher conducts are limited to finding matches\n within regionStart (inclusive) and\n regionEnd (exclusive)."}, {"method_name": "regionEnd", "method_sig": "public int regionEnd()", "description": "Reports the end index (exclusive) of this matcher's region.\n The searches this matcher conducts are limited to finding matches\n within regionStart (inclusive) and\n regionEnd (exclusive)."}, {"method_name": "hasTransparentBounds", "method_sig": "public boolean hasTransparentBounds()", "description": "Queries the transparency of region bounds for this matcher.\n\n  This method returns true if this matcher uses\n transparent bounds, false if it uses opaque\n bounds.\n\n  See useTransparentBounds for a\n description of transparent and opaque bounds.\n\n  By default, a matcher uses opaque region boundaries."}, {"method_name": "useTransparentBounds", "method_sig": "public Matcher useTransparentBounds (boolean b)", "description": "Sets the transparency of region bounds for this matcher.\n\n  Invoking this method with an argument of true will set this\n matcher to use transparent bounds. If the boolean\n argument is false, then opaque bounds will be used.\n\n  Using transparent bounds, the boundaries of this\n matcher's region are transparent to lookahead, lookbehind,\n and boundary matching constructs. Those constructs can see beyond the\n boundaries of the region to see if a match is appropriate.\n\n  Using opaque bounds, the boundaries of this matcher's\n region are opaque to lookahead, lookbehind, and boundary matching\n constructs that may try to see beyond them. Those constructs cannot\n look past the boundaries so they will fail to match anything outside\n of the region.\n\n  By default, a matcher uses opaque bounds."}, {"method_name": "hasAnchoringBounds", "method_sig": "public boolean hasAnchoringBounds()", "description": "Queries the anchoring of region bounds for this matcher.\n\n  This method returns true if this matcher uses\n anchoring bounds, false otherwise.\n\n  See useAnchoringBounds for a\n description of anchoring bounds.\n\n  By default, a matcher uses anchoring region boundaries."}, {"method_name": "useAnchoringBounds", "method_sig": "public Matcher useAnchoringBounds (boolean b)", "description": "Sets the anchoring of region bounds for this matcher.\n\n  Invoking this method with an argument of true will set this\n matcher to use anchoring bounds. If the boolean\n argument is false, then non-anchoring bounds will be\n used.\n\n  Using anchoring bounds, the boundaries of this\n matcher's region match anchors such as ^ and $.\n\n  Without anchoring bounds, the boundaries of this\n matcher's region will not match anchors such as ^ and $.\n\n  By default, a matcher uses anchoring region boundaries."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns the string representation of this matcher. The\n string representation of a Matcher contains information\n that may be useful for debugging. The exact format is unspecified."}, {"method_name": "hitEnd", "method_sig": "public boolean hitEnd()", "description": "Returns true if the end of input was hit by the search engine in\n the last match operation performed by this matcher.\n\n When this method returns true, then it is possible that more input\n would have changed the result of the last search."}, {"method_name": "requireEnd", "method_sig": "public boolean requireEnd()", "description": "Returns true if more input could change a positive match into a\n negative one.\n\n If this method returns true, and a match was found, then more\n input could cause the match to be lost. If this method returns false\n and a match was found, then more input might change the match but the\n match won't be lost. If a match was not found, then requireEnd has no\n meaning."}]}