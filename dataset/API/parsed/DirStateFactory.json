{"name": "Interface DirStateFactory", "module": "java.naming", "package": "javax.naming.spi", "text": "This interface represents a factory for obtaining the state of an\n object and corresponding attributes for binding.\n\n The JNDI framework allows for object implementations to\n be loaded in dynamically via object factories.\n \n A DirStateFactory extends StateFactory\n by allowing an Attributes instance\n to be supplied to and be returned by the getStateToBind() method.\n DirStateFactory implementations are intended to be used by\n DirContext service providers.\n When a caller binds an object using DirContext.bind(),\n he might also specify a set of attributes to be bound with the object.\n The object and attributes to be bound are passed to\n the getStateToBind() method of a factory.\n If the factory processes the object and attributes, it returns\n a corresponding pair of object and attributes to be bound.\n If the factory does not process the object, it must return null.\n\n For example, a caller might bind a printer object with some printer-related\n attributes.\n\n ctx.rebind(\"inky\", printer, printerAttrs);\n\n An LDAP service provider for ctx uses a DirStateFactory\n (indirectly via DirectoryManager.getStateToBind())\n and gives it printer and printerAttrs. A factory for\n an LDAP directory might turn printer into a set of attributes\n and merge that with printerAttrs. The service provider then\n uses the resulting attributes to create an LDAP entry and updates\n the directory.\n\n  Since DirStateFactory extends StateFactory, it\n has two getStateToBind() methods, where one\n differs from the other by the attributes\n argument. DirectoryManager.getStateToBind() will only use\n the form that accepts the attributes argument, while\n NamingManager.getStateToBind() will only use the form that\n does not accept the attributes argument.\n\n  Either form of the getStateToBind() method of a\n DirStateFactory may be invoked multiple times, possibly using different\n parameters.  The implementation is thread-safe.", "codes": ["public interface DirStateFactory\nextends StateFactory"], "fields": [], "methods": [{"method_name": "getStateToBind", "method_sig": "DirStateFactory.Result getStateToBind (Object obj,\n                                      Name name,\n                                      Context nameCtx,\n                                      Hashtable<?, ?> environment,\n                                      Attributes inAttrs)\n                               throws NamingException", "description": "Retrieves the state of an object for binding given the object and attributes\n to be transformed.\n\nDirectoryManager.getStateToBind()\n successively loads in state factories. If a factory implements\n DirStateFactory, DirectoryManager invokes this method;\n otherwise, it invokes StateFactory.getStateToBind().\n It does this until a factory produces a non-null answer.\n\n When an exception is thrown by a factory,\n the exception is passed on to the caller\n of DirectoryManager.getStateToBind(). The search for other factories\n that may produce a non-null answer is halted.\n A factory should only throw an exception if it is sure that\n it is the only intended factory and that no other factories\n should be tried.\n If this factory cannot create an object using the arguments supplied,\n it should return null.\n \n The name and nameCtx parameters may\n optionally be used to specify the name of the object being created.\n See the description of \"Name and Context Parameters\" in\n ObjectFactory.getObjectInstance()\n for details.\n If a factory uses nameCtx it should synchronize its use\n against concurrent access, since context implementations are not\n guaranteed to be thread-safe.\n\n The name, inAttrs, and environment parameters\n are owned by the caller.\n The implementation will not modify these objects or keep references\n to them, although it may keep references to clones or copies.\n The object returned by this method is owned by the caller.\n The implementation will not subsequently modify it.\n It will contain either a new Attributes object that is\n likewise owned by the caller, or a reference to the original\n inAttrs parameter."}]}