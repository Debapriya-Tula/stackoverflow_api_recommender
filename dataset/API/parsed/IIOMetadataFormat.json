{"name": "Interface IIOMetadataFormat", "module": "java.desktop", "package": "javax.imageio.metadata", "text": "An object describing the structure of metadata documents returned\n from IIOMetadata.getAsTree and passed to\n IIOMetadata.setFromTree and mergeTree.\n Document structures are described by a set of constraints on the\n type and number of child elements that may belong to a given parent\n element type, the names, types, and values of attributes that may\n belong to an element, and the type and values of\n Object reference that may be stored at a node.\n\n  N.B: classes that implement this interface should contain a\n method declared as public static getInstance() which\n returns an instance of the class.  Commonly, an implementation will\n construct only a single instance and cache it for future\n invocations of getInstance.\n  In the event that the plugin is provided as part of a named module,\n that module must export the package containing the implementation class\n to the java.desktop module via a qualified export.\n An unqualified export is not recommended unless also needed for\n some other reason. Failing to export the package will result in\n access failure at runtime.\n\n  The structures that may be described by this class are a subset\n of those expressible using XML document type definitions (DTDs),\n with the addition of some basic information on the datatypes of\n attributes and the ability to store an Object\n reference within a node.  In the future, XML Schemas could be used\n to represent these structures, and many others.\n\n  The differences between\n IIOMetadataFormat-described structures and DTDs are as\n follows:\n\n \n Elements may not contain text or mix text with embedded\n tags.\n\n  The children of an element must conform to one of a few simple\n patterns, described in the documentation for the\n CHILD_* constants;\n\n  The in-memory representation of an elements may contain a\n reference to an Object.  There is no provision for\n representing such objects textually.\n ", "codes": ["public interface IIOMetadataFormat"], "fields": [{"field_name": "CHILD_POLICY_EMPTY", "field_sig": "static final\u00a0int CHILD_POLICY_EMPTY", "description": "A constant returned by getChildPolicy to indicate\n that an element may not have any children.  In other words, it\n is required to be a leaf node."}, {"field_name": "CHILD_POLICY_ALL", "field_sig": "static final\u00a0int CHILD_POLICY_ALL", "description": "A constant returned by getChildPolicy to indicate\n that an element must have a single instance of each of its\n legal child elements, in order.  In DTD terms, the contents of\n the element are defined by a sequence a,b,c,d,...."}, {"field_name": "CHILD_POLICY_SOME", "field_sig": "static final\u00a0int CHILD_POLICY_SOME", "description": "A constant returned by getChildPolicy to indicate\n that an element must have zero or one instance of each of its\n legal child elements, in order.  In DTD terms, the contents of\n the element are defined by a sequence\n a?,b?,c?,d?,...."}, {"field_name": "CHILD_POLICY_CHOICE", "field_sig": "static final\u00a0int CHILD_POLICY_CHOICE", "description": "A constant returned by getChildPolicy to indicate\n that an element must have zero or one children, selected from\n among its legal child elements.  In DTD terms, the contents of\n the element are defined by a selection\n a|b|c|d|...."}, {"field_name": "CHILD_POLICY_SEQUENCE", "field_sig": "static final\u00a0int CHILD_POLICY_SEQUENCE", "description": "A constant returned by getChildPolicy to indicate\n that an element must have a sequence of instances of any of its\n legal child elements.  In DTD terms, the contents of the\n element are defined by a sequence (a|b|c|d|...)*."}, {"field_name": "CHILD_POLICY_REPEAT", "field_sig": "static final\u00a0int CHILD_POLICY_REPEAT", "description": "A constant returned by getChildPolicy to indicate\n that an element must have zero or more instances of its unique\n legal child element.  In DTD terms, the contents of the element\n are defined by a starred expression a*."}, {"field_name": "CHILD_POLICY_MAX", "field_sig": "static final\u00a0int CHILD_POLICY_MAX", "description": "The largest valid CHILD_POLICY_* constant,\n to be used for range checks."}, {"field_name": "VALUE_NONE", "field_sig": "static final\u00a0int VALUE_NONE", "description": "A constant returned by getObjectValueType to\n indicate the absence of a user object."}, {"field_name": "VALUE_ARBITRARY", "field_sig": "static final\u00a0int VALUE_ARBITRARY", "description": "A constant returned by getAttributeValueType and\n getObjectValueType to indicate that the attribute\n or user object may be set a single, arbitrary value."}, {"field_name": "VALUE_RANGE", "field_sig": "static final\u00a0int VALUE_RANGE", "description": "A constant returned by getAttributeValueType and\n getObjectValueType to indicate that the attribute\n or user object may be set a range of values.  Both the minimum\n and maximum values of the range are exclusive.  It is\n recommended that ranges of integers be inclusive on both ends,\n and that exclusive ranges be used only for floating-point data."}, {"field_name": "VALUE_RANGE_MIN_INCLUSIVE_MASK", "field_sig": "static final\u00a0int VALUE_RANGE_MIN_INCLUSIVE_MASK", "description": "A value that may be or'ed with VALUE_RANGE to\n obtain VALUE_RANGE_MIN_INCLUSIVE, and with\n VALUE_RANGE_MAX_INCLUSIVE to obtain\n VALUE_RANGE_MIN_MAX_INCLUSIVE.\n\n  Similarly, the value may be and'ed with the value of\n getAttributeValueType or\n getObjectValueType to determine if the minimum\n value of the range is inclusive."}, {"field_name": "VALUE_RANGE_MAX_INCLUSIVE_MASK", "field_sig": "static final\u00a0int VALUE_RANGE_MAX_INCLUSIVE_MASK", "description": "A value that may be or'ed with VALUE_RANGE to\n obtain VALUE_RANGE_MAX_INCLUSIVE, and with\n VALUE_RANGE_MIN_INCLUSIVE to obtain\n VALUE_RANGE_MIN_MAX_INCLUSIVE.\n\n  Similarly, the value may be and'ed with the value of\n getAttributeValueType or\n getObjectValueType to determine if the maximum\n value of the range is inclusive."}, {"field_name": "VALUE_RANGE_MIN_INCLUSIVE", "field_sig": "static final\u00a0int VALUE_RANGE_MIN_INCLUSIVE", "description": "A constant returned by getAttributeValueType and\n getObjectValueType to indicate that the attribute\n or user object may be set to a range of values.  The minimum\n (but not the maximum) value of the range is inclusive."}, {"field_name": "VALUE_RANGE_MAX_INCLUSIVE", "field_sig": "static final\u00a0int VALUE_RANGE_MAX_INCLUSIVE", "description": "A constant returned by getAttributeValueType and\n getObjectValueType to indicate that the attribute\n or user object may be set to a range of values.  The maximum\n (but not the minimum) value of the range is inclusive."}, {"field_name": "VALUE_RANGE_MIN_MAX_INCLUSIVE", "field_sig": "static final\u00a0int VALUE_RANGE_MIN_MAX_INCLUSIVE", "description": "A constant returned by getAttributeValueType and\n getObjectValueType to indicate that the attribute\n or user object may be set a range of values.  Both the minimum\n and maximum values of the range are inclusive.  It is\n recommended that ranges of integers be inclusive on both ends,\n and that exclusive ranges be used only for floating-point data."}, {"field_name": "VALUE_ENUMERATION", "field_sig": "static final\u00a0int VALUE_ENUMERATION", "description": "A constant returned by getAttributeValueType and\n getObjectValueType to indicate that the attribute\n or user object may be set one of a number of enumerated values.\n In the case of attributes, these values are\n Strings; for objects, they are\n Objects implementing a given class or interface.\n\n  Attribute values of type DATATYPE_BOOLEAN\n should be marked as enumerations."}, {"field_name": "VALUE_LIST", "field_sig": "static final\u00a0int VALUE_LIST", "description": "A constant returned by getAttributeValueType and\n getObjectValueType to indicate that the attribute\n or user object may be set to a list or array of values.  In the\n case of attributes, the list will consist of\n whitespace-separated values within a String; for\n objects, an array will be used."}, {"field_name": "DATATYPE_STRING", "field_sig": "static final\u00a0int DATATYPE_STRING", "description": "A constant returned by getAttributeDataType\n indicating that the value of an attribute is a general Unicode\n string."}, {"field_name": "DATATYPE_BOOLEAN", "field_sig": "static final\u00a0int DATATYPE_BOOLEAN", "description": "A constant returned by getAttributeDataType\n indicating that the value of an attribute is one of the boolean\n values 'true' or 'false'.\n Attribute values of type DATATYPE_BOOLEAN should be marked as\n enumerations, and the permitted values should be the string\n literal values \"TRUE\" or \"FALSE\", although a plugin may also\n recognise lower or mixed case equivalents."}, {"field_name": "DATATYPE_INTEGER", "field_sig": "static final\u00a0int DATATYPE_INTEGER", "description": "A constant returned by getAttributeDataType\n indicating that the value of an attribute is a string\n representation of an integer."}, {"field_name": "DATATYPE_FLOAT", "field_sig": "static final\u00a0int DATATYPE_FLOAT", "description": "A constant returned by getAttributeDataType\n indicating that the value of an attribute is a string\n representation of a decimal floating-point number."}, {"field_name": "DATATYPE_DOUBLE", "field_sig": "static final\u00a0int DATATYPE_DOUBLE", "description": "A constant returned by getAttributeDataType\n indicating that the value of an attribute is a string\n representation of a double-precision decimal floating-point\n number."}], "methods": [{"method_name": "getRootName", "method_sig": "String getRootName()", "description": "Returns the name of the root element of the format."}, {"method_name": "canNodeAppear", "method_sig": "boolean canNodeAppear (String elementName,\n                      ImageTypeSpecifier imageType)", "description": "Returns true if the element (and the subtree below\n it) is allowed to appear in a metadata document for an image of\n the given type, defined by an ImageTypeSpecifier.\n For example, a metadata document format might contain an\n element that describes the primary colors of the image, which\n would not be allowed when writing a grayscale image."}, {"method_name": "getElementMinChildren", "method_sig": "int getElementMinChildren (String elementName)", "description": "Returns the minimum number of children of the named element\n with child policy CHILD_POLICY_REPEAT.  For\n example, an element representing color primary information\n might be required to have at least 3 children, one for each\n primary."}, {"method_name": "getElementMaxChildren", "method_sig": "int getElementMaxChildren (String elementName)", "description": "Returns the maximum number of children of the named element\n with child policy CHILD_POLICY_REPEAT.  For\n example, an element representing an entry in an 8-bit color\n palette might be allowed to repeat up to 256 times.  A value of\n Integer.MAX_VALUE may be used to specify that\n there is no upper bound."}, {"method_name": "getElementDescription", "method_sig": "String getElementDescription (String elementName,\n                             Locale locale)", "description": "Returns a String containing a description of the\n named element, or null.  The description will be\n localized for the supplied Locale if possible.\n\n  If locale is null, the current\n default Locale returned by Locale.getLocale\n will be used."}, {"method_name": "getChildPolicy", "method_sig": "int getChildPolicy (String elementName)", "description": "Returns one of the constants starting with\n CHILD_POLICY_, indicating the legal pattern of\n children for the named element."}, {"method_name": "getChildNames", "method_sig": "String[] getChildNames (String elementName)", "description": "Returns an array of Strings indicating the names\n of the element which are allowed to be children of the named\n element, in the order in which they should appear.  If the\n element cannot have children, null is returned."}, {"method_name": "getAttributeNames", "method_sig": "String[] getAttributeNames (String elementName)", "description": "Returns an array of Strings listing the names of\n the attributes that may be associated with the named element."}, {"method_name": "getAttributeValueType", "method_sig": "int getAttributeValueType (String elementName,\n                          String attrName)", "description": "Returns one of the constants starting with VALUE_,\n indicating whether the values of the given attribute within the\n named element are arbitrary, constrained to lie within a\n specified range, constrained to be one of a set of enumerated\n values, or are a whitespace-separated list of arbitrary values."}, {"method_name": "getAttributeDataType", "method_sig": "int getAttributeDataType (String elementName,\n                         String attrName)", "description": "Returns one of the constants starting with\n DATATYPE_, indicating the format and\n interpretation of the value of the given attribute within the\n named element.  If getAttributeValueType returns\n VALUE_LIST, then the legal value is a\n whitespace-spearated list of values of the returned datatype."}, {"method_name": "isAttributeRequired", "method_sig": "boolean isAttributeRequired (String elementName,\n                            String attrName)", "description": "Returns true if the named attribute must be\n present within the named element."}, {"method_name": "getAttributeDefaultValue", "method_sig": "String getAttributeDefaultValue (String elementName,\n                                String attrName)", "description": "Returns the default value of the named attribute, if it is not\n explicitly present within the named element, as a\n String, or null if no default value\n is available."}, {"method_name": "getAttributeEnumerations", "method_sig": "String[] getAttributeEnumerations (String elementName,\n                                  String attrName)", "description": "Returns an array of Strings containing the legal\n enumerated values for the given attribute within the named\n element.  This method should only be called if\n getAttributeValueType returns\n VALUE_ENUMERATION."}, {"method_name": "getAttributeMinValue", "method_sig": "String getAttributeMinValue (String elementName,\n                            String attrName)", "description": "Returns the minimum legal value for the attribute.  Whether\n this value is inclusive or exclusive may be determined by the\n value of getAttributeValueType.  The value is\n returned as a String; its interpretation is\n dependent on the value of getAttributeDataType.\n This method should only be called if\n getAttributeValueType returns\n VALUE_RANGE_*."}, {"method_name": "getAttributeMaxValue", "method_sig": "String getAttributeMaxValue (String elementName,\n                            String attrName)", "description": "Returns the maximum legal value for the attribute.  Whether\n this value is inclusive or exclusive may be determined by the\n value of getAttributeValueType.  The value is\n returned as a String; its interpretation is\n dependent on the value of getAttributeDataType.\n This method should only be called if\n getAttributeValueType returns\n VALUE_RANGE_*."}, {"method_name": "getAttributeListMinLength", "method_sig": "int getAttributeListMinLength (String elementName,\n                              String attrName)", "description": "Returns the minimum number of list items that may be used to\n define this attribute.  The attribute itself is defined as a\n String containing multiple whitespace-separated\n items.  This method should only be called if\n getAttributeValueType returns\n VALUE_LIST."}, {"method_name": "getAttributeListMaxLength", "method_sig": "int getAttributeListMaxLength (String elementName,\n                              String attrName)", "description": "Returns the maximum number of list items that may be used to\n define this attribute.  A value of\n Integer.MAX_VALUE may be used to specify that\n there is no upper bound.  The attribute itself is defined as a\n String containing multiple whitespace-separated\n items.  This method should only be called if\n getAttributeValueType returns\n VALUE_LIST."}, {"method_name": "getAttributeDescription", "method_sig": "String getAttributeDescription (String elementName,\n                               String attrName,\n                               Locale locale)", "description": "Returns a String containing a description of the\n named attribute, or null.  The description will be\n localized for the supplied Locale if possible.\n\n  If locale is null, the current\n default Locale returned by Locale.getLocale\n will be used."}, {"method_name": "getObjectValueType", "method_sig": "int getObjectValueType (String elementName)", "description": "Returns one of the enumerated values starting with\n VALUE_, indicating the type of values\n (enumeration, range, or array) that are allowed for the\n Object reference.  If no object value can be\n stored within the given element, the result of this method will\n be VALUE_NONE.\n\n  Object references whose legal values are\n defined as a range must implement the Comparable\n interface."}, {"method_name": "getObjectClass", "method_sig": "Class<?> getObjectClass (String elementName)", "description": "Returns the Class type of the Object\n reference stored within the element.  If this element may not\n contain an Object reference, an\n IllegalArgumentException will be thrown.  If the\n class type is an array, this field indicates the underlying\n class type (e.g, for an array of ints, this\n method would return int.class).\n\n  Object references whose legal values are\n defined as a range must implement the Comparable\n interface."}, {"method_name": "getObjectDefaultValue", "method_sig": "Object getObjectDefaultValue (String elementName)", "description": "Returns an Objects containing the default\n value for the Object reference within\n the named element."}, {"method_name": "getObjectEnumerations", "method_sig": "Object[] getObjectEnumerations (String elementName)", "description": "Returns an array of Objects containing the legal\n enumerated values for the Object reference within\n the named element.  This method should only be called if\n getObjectValueType returns\n VALUE_ENUMERATION.\n\n  The Object associated with a node that accepts\n enumerated values must be equal to one of the values returned by\n this method, as defined by the == operator (as\n opposed to the Object.equals method)."}, {"method_name": "getObjectMinValue", "method_sig": "Comparable<?> getObjectMinValue (String elementName)", "description": "Returns the minimum legal value for the Object\n reference within the named element.  Whether this value is\n inclusive or exclusive may be determined by the value of\n getObjectValueType.  This method should only be\n called if getObjectValueType returns one of the\n constants starting with VALUE_RANGE."}, {"method_name": "getObjectMaxValue", "method_sig": "Comparable<?> getObjectMaxValue (String elementName)", "description": "Returns the maximum legal value for the Object\n reference within the named element.  Whether this value is\n inclusive or exclusive may be determined by the value of\n getObjectValueType.  This method should only be\n called if getObjectValueType returns one of the\n constants starting with VALUE_RANGE."}, {"method_name": "getObjectArrayMinLength", "method_sig": "int getObjectArrayMinLength (String elementName)", "description": "Returns the minimum number of array elements that may be used\n to define the Object reference within the named\n element.  This method should only be called if\n getObjectValueType returns\n VALUE_LIST."}, {"method_name": "getObjectArrayMaxLength", "method_sig": "int getObjectArrayMaxLength (String elementName)", "description": "Returns the maximum number of array elements that may be used\n to define the Object reference within the named\n element.  A value of Integer.MAX_VALUE may be used\n to specify that there is no upper bound.  This method should\n only be called if getObjectValueType returns\n VALUE_LIST."}]}