{"name": "Class SocketChannel", "module": "java.base", "package": "java.nio.channels", "text": "A selectable channel for stream-oriented connecting sockets.\n\n  A socket channel is created by invoking one of the open\n methods of this class.  It is not possible to create a channel for an arbitrary,\n pre-existing socket. A newly-created socket channel is open but not yet\n connected.  An attempt to invoke an I/O operation upon an unconnected\n channel will cause a NotYetConnectedException to be thrown.  A\n socket channel can be connected by invoking its connect\n method; once connected, a socket channel remains connected until it is\n closed.  Whether or not a socket channel is connected may be determined by\n invoking its isConnected method.\n\n  Socket channels support non-blocking connection:\u00a0A socket\n channel may be created and the process of establishing the link to the\n remote socket may be initiated via the connect method for\n later completion by the finishConnect method.\n Whether or not a connection operation is in progress may be determined by\n invoking the isConnectionPending method.\n\n  Socket channels support asynchronous shutdown, which is similar\n to the asynchronous close operation specified in the Channel class.\n If the input side of a socket is shut down by one thread while another\n thread is blocked in a read operation on the socket's channel, then the read\n operation in the blocked thread will complete without reading any bytes and\n will return -1.  If the output side of a socket is shut down by one\n thread while another thread is blocked in a write operation on the socket's\n channel, then the blocked thread will receive an AsynchronousCloseException.\n\n  Socket options are configured using the setOption method. Socket channels support the following options:\n \n\nSocket options\n\n\nOption Name\nDescription\n\n\n\n\n SO_SNDBUF \n The size of the socket send buffer \n\n\n SO_RCVBUF \n The size of the socket receive buffer \n\n\n SO_KEEPALIVE \n Keep connection alive \n\n\n SO_REUSEADDR \n Re-use address \n\n\n SO_LINGER \n Linger on close if data is present (when configured in blocking mode\n          only) \n\n\n TCP_NODELAY \n Disable the Nagle algorithm \n\n\n\n\n Additional (implementation specific) options may also be supported.\n\n  Socket channels are safe for use by multiple concurrent threads.  They\n support concurrent reading and writing, though at most one thread may be\n reading and at most one thread may be writing at any given time.  The connect and finishConnect methods are\n mutually synchronized against each other, and an attempt to initiate a read\n or write operation while an invocation of one of these methods is in\n progress will block until that invocation is complete.  ", "codes": ["public abstract class SocketChannel\nextends AbstractSelectableChannel\nimplements ByteChannel, ScatteringByteChannel, GatheringByteChannel, NetworkChannel"], "fields": [], "methods": [{"method_name": "open", "method_sig": "public static SocketChannel open()\n                          throws IOException", "description": "Opens a socket channel.\n\n  The new channel is created by invoking the openSocketChannel method of the system-wide default SelectorProvider object.  "}, {"method_name": "open", "method_sig": "public static SocketChannel open (SocketAddress remote)\n                          throws IOException", "description": "Opens a socket channel and connects it to a remote address.\n\n  This convenience method works as if by invoking the open()\n method, invoking the connect method upon\n the resulting socket channel, passing it remote, and then\n returning that channel.  "}, {"method_name": "validOps", "method_sig": "public final int validOps()", "description": "Returns an operation set identifying this channel's supported\n operations.\n\n  Socket channels support connecting, reading, and writing, so this\n method returns (SelectionKey.OP_CONNECT\n|\u00a0SelectionKey.OP_READ |\u00a0SelectionKey.OP_WRITE)."}, {"method_name": "bind", "method_sig": "public abstract SocketChannel bind (SocketAddress local)\n                            throws IOException", "description": "Description copied from interface:\u00a0NetworkChannel"}, {"method_name": "setOption", "method_sig": "public abstract <T> SocketChannel setOption (SocketOption<T> name,\n                                            T value)\n                                     throws IOException", "description": "Description copied from interface:\u00a0NetworkChannel"}, {"method_name": "shutdownInput", "method_sig": "public abstract SocketChannel shutdownInput()\n                                     throws IOException", "description": "Shutdown the connection for reading without closing the channel.\n\n  Once shutdown for reading then further reads on the channel will\n return -1, the end-of-stream indication. If the input side of the\n connection is already shutdown then invoking this method has no effect."}, {"method_name": "shutdownOutput", "method_sig": "public abstract SocketChannel shutdownOutput()\n                                      throws IOException", "description": "Shutdown the connection for writing without closing the channel.\n\n  Once shutdown for writing then further attempts to write to the\n channel will throw ClosedChannelException. If the output side of\n the connection is already shutdown then invoking this method has no\n effect."}, {"method_name": "socket", "method_sig": "public abstract Socket socket()", "description": "Retrieves a socket associated with this channel.\n\n  The returned object will not declare any public methods that are not\n declared in the Socket class.  "}, {"method_name": "isConnected", "method_sig": "public abstract boolean isConnected()", "description": "Tells whether or not this channel's network socket is connected."}, {"method_name": "isConnectionPending", "method_sig": "public abstract boolean isConnectionPending()", "description": "Tells whether or not a connection operation is in progress on this\n channel."}, {"method_name": "connect", "method_sig": "public abstract boolean connect (SocketAddress remote)\n                         throws IOException", "description": "Connects this channel's socket.\n\n  If this channel is in non-blocking mode then an invocation of this\n method initiates a non-blocking connection operation.  If the connection\n is established immediately, as can happen with a local connection, then\n this method returns true.  Otherwise this method returns\n false and the connection operation must later be completed by\n invoking the finishConnect method.\n\n  If this channel is in blocking mode then an invocation of this\n method will block until the connection is established or an I/O error\n occurs.\n\n  This method performs exactly the same security checks as the Socket class.  That is, if a security manager has been\n installed then this method verifies that its checkConnect method permits\n connecting to the address and port number of the given remote endpoint.\n\n  This method may be invoked at any time.  If a read or write\n operation upon this channel is invoked while an invocation of this\n method is in progress then that operation will first block until this\n invocation is complete.  If a connection attempt is initiated but fails,\n that is, if an invocation of this method throws a checked exception,\n then the channel will be closed.  "}, {"method_name": "finishConnect", "method_sig": "public abstract boolean finishConnect()\n                               throws IOException", "description": "Finishes the process of connecting a socket channel.\n\n  A non-blocking connection operation is initiated by placing a socket\n channel in non-blocking mode and then invoking its connect method.  Once the connection is established, or the attempt has\n failed, the socket channel will become connectable and this method may\n be invoked to complete the connection sequence.  If the connection\n operation failed then invoking this method will cause an appropriate\n IOException to be thrown.\n\n  If this channel is already connected then this method will not block\n and will immediately return true.  If this channel is in\n non-blocking mode then this method will return false if the\n connection process is not yet complete.  If this channel is in blocking\n mode then this method will block until the connection either completes\n or fails, and will always either return true or throw a checked\n exception describing the failure.\n\n  This method may be invoked at any time.  If a read or write\n operation upon this channel is invoked while an invocation of this\n method is in progress then that operation will first block until this\n invocation is complete.  If a connection attempt fails, that is, if an\n invocation of this method throws a checked exception, then the channel\n will be closed.  "}, {"method_name": "getRemoteAddress", "method_sig": "public abstract SocketAddress getRemoteAddress()\n                                        throws IOException", "description": "Returns the remote address to which this channel's socket is connected.\n\n  Where the channel is bound and connected to an Internet Protocol\n socket address then the return value from this method is of type InetSocketAddress."}, {"method_name": "read", "method_sig": "public abstract int read (ByteBuffer dst)\n                  throws IOException", "description": "Description copied from interface:\u00a0ReadableByteChannel"}, {"method_name": "read", "method_sig": "public abstract long read (ByteBuffer[] dsts,\n                          int offset,\n                          int length)\n                   throws IOException", "description": "Description copied from interface:\u00a0ScatteringByteChannel"}, {"method_name": "read", "method_sig": "public final long read (ByteBuffer[] dsts)\n                throws IOException", "description": "Description copied from interface:\u00a0ScatteringByteChannel"}, {"method_name": "write", "method_sig": "public abstract int write (ByteBuffer src)\n                   throws IOException", "description": "Description copied from interface:\u00a0WritableByteChannel"}, {"method_name": "write", "method_sig": "public abstract long write (ByteBuffer[] srcs,\n                           int offset,\n                           int length)\n                    throws IOException", "description": "Description copied from interface:\u00a0GatheringByteChannel"}, {"method_name": "write", "method_sig": "public final long write (ByteBuffer[] srcs)\n                 throws IOException", "description": "Description copied from interface:\u00a0GatheringByteChannel"}, {"method_name": "getLocalAddress", "method_sig": "public abstract SocketAddress getLocalAddress()\n                                       throws IOException", "description": "Returns the socket address that this channel's socket is bound to.\n\n  Where the channel is bound to an Internet Protocol\n socket address then the return value from this method is of type InetSocketAddress.\n \n If there is a security manager set, its checkConnect method is\n called with the local address and -1 as its arguments to see\n if the operation is allowed. If the operation is not allowed,\n a SocketAddress representing the\n loopback address and the\n local port of the channel's socket is returned."}]}