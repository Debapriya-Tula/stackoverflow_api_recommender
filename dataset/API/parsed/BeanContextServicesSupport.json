{"name": "Class BeanContextServicesSupport", "module": "java.desktop", "package": "java.beans.beancontext", "text": "\n This helper class provides a utility implementation of the\n java.beans.beancontext.BeanContextServices interface.\n \n\n Since this class directly implements the BeanContextServices interface,\n the class can, and is intended to be used either by subclassing this\n implementation, or via delegation of an instance of this class\n from another through the BeanContextProxy interface.\n ", "codes": ["public class BeanContextServicesSupport\nextends BeanContextSupport\nimplements BeanContextServices"], "fields": [{"field_name": "services", "field_sig": "protected transient\u00a0HashMap<Object,\u200bBeanContextServicesSupport.BCSSServiceProvider> services", "description": "all accesses to the protected transient HashMap services\n field should be synchronized on that object"}, {"field_name": "serializable", "field_sig": "protected transient\u00a0int serializable", "description": "The number of instances of a serializable BeanContextServceProvider."}, {"field_name": "proxy", "field_sig": "protected transient\u00a0BeanContextServicesSupport.BCSSProxyServiceProvider proxy", "description": "Delegate for the BeanContextServiceProvider."}, {"field_name": "bcsListeners", "field_sig": "protected transient\u00a0ArrayList<BeanContextServicesListener> bcsListeners", "description": "List of BeanContextServicesListener objects."}], "methods": [{"method_name": "initialize", "method_sig": "public void initialize()", "description": "called by BeanContextSupport superclass during construction and\n deserialization to initialize subclass transient state.\n\n subclasses may envelope this method, but should not override it or\n call it directly."}, {"method_name": "getBeanContextServicesPeer", "method_sig": "public BeanContextServices getBeanContextServicesPeer()", "description": "Gets the BeanContextServices associated with this\n BeanContextServicesSupport."}, {"method_name": "createBCSChild", "method_sig": "protected BeanContextSupport.BCSChild createBCSChild (Object targetChild,\n                                                     Object peer)", "description": "\n Subclasses can override this method to insert their own subclass\n of Child without having to override add() or the other Collection\n methods that add children to the set.\n "}, {"method_name": "createBCSSServiceProvider", "method_sig": "protected BeanContextServicesSupport.BCSSServiceProvider createBCSSServiceProvider (Class<?> sc,\n                                                                                   BeanContextServiceProvider bcsp)", "description": "subclasses can override this method to create new subclasses of\n BCSSServiceProvider without having to override addService() in\n order to instantiate."}, {"method_name": "addBeanContextServicesListener", "method_sig": "public void addBeanContextServicesListener (BeanContextServicesListener bcsl)", "description": "add a BeanContextServicesListener"}, {"method_name": "removeBeanContextServicesListener", "method_sig": "public void removeBeanContextServicesListener (BeanContextServicesListener bcsl)", "description": "remove a BeanContextServicesListener"}, {"method_name": "addService", "method_sig": "public boolean addService (Class<?> serviceClass,\n                          BeanContextServiceProvider bcsp)", "description": "add a service"}, {"method_name": "addService", "method_sig": "protected boolean addService (Class<?> serviceClass,\n                             BeanContextServiceProvider bcsp,\n                             boolean fireEvent)", "description": "add a service"}, {"method_name": "revokeService", "method_sig": "public void revokeService (Class<?> serviceClass,\n                          BeanContextServiceProvider bcsp,\n                          boolean revokeCurrentServicesNow)", "description": "remove a service"}, {"method_name": "hasService", "method_sig": "public boolean hasService (Class<?> serviceClass)", "description": "has a service, which may be delegated"}, {"method_name": "getService", "method_sig": "public Object getService (BeanContextChild child,\n                         Object requestor,\n                         Class<?> serviceClass,\n                         Object serviceSelector,\n                         BeanContextServiceRevokedListener bcsrl)\n                  throws TooManyListenersException", "description": "obtain a service which may be delegated"}, {"method_name": "releaseService", "method_sig": "public void releaseService (BeanContextChild child,\n                           Object requestor,\n                           Object service)", "description": "release a service"}, {"method_name": "getCurrentServiceClasses", "method_sig": "public Iterator<Object> getCurrentServiceClasses()", "description": "Description copied from interface:\u00a0BeanContextServices"}, {"method_name": "getCurrentServiceSelectors", "method_sig": "public Iterator<?> getCurrentServiceSelectors (Class<?> serviceClass)", "description": "Description copied from interface:\u00a0BeanContextServices"}, {"method_name": "serviceAvailable", "method_sig": "public void serviceAvailable (BeanContextServiceAvailableEvent bcssae)", "description": "BeanContextServicesListener callback, propagates event to all\n currently registered listeners and BeanContextServices children,\n if this BeanContextService does not already implement this service\n itself.\n\n subclasses may override or envelope this method to implement their\n own propagation semantics."}, {"method_name": "serviceRevoked", "method_sig": "public void serviceRevoked (BeanContextServiceRevokedEvent bcssre)", "description": "BeanContextServicesListener callback, propagates event to all\n currently registered listeners and BeanContextServices children,\n if this BeanContextService does not already implement this service\n itself.\n\n subclasses may override or envelope this method to implement their\n own propagation semantics."}, {"method_name": "getChildBeanContextServicesListener", "method_sig": "protected static final BeanContextServicesListener getChildBeanContextServicesListener (Object child)", "description": "Gets the BeanContextServicesListener (if any) of the specified\n child."}, {"method_name": "childJustRemovedHook", "method_sig": "protected void childJustRemovedHook (Object child,\n                                    BeanContextSupport.BCSChild bcsc)", "description": "called from superclass child removal operations after a child\n has been successfully removed. called with child synchronized.\n\n This subclass uses this hook to immediately revoke any services\n being used by this child if it is a BeanContextChild.\n\n subclasses may envelope this method in order to implement their\n own child removal side-effects."}, {"method_name": "releaseBeanContextResources", "method_sig": "protected void releaseBeanContextResources()", "description": "called from setBeanContext to notify a BeanContextChild\n to release resources obtained from the nesting BeanContext.\n\n This method revokes any services obtained from its parent.\n\n subclasses may envelope this method to implement their own semantics."}, {"method_name": "initializeBeanContextResources", "method_sig": "protected void initializeBeanContextResources()", "description": "called from setBeanContext to notify a BeanContextChild\n to allocate resources obtained from the nesting BeanContext.\n\n subclasses may envelope this method to implement their own semantics."}, {"method_name": "fireServiceAdded", "method_sig": "protected final void fireServiceAdded (Class<?> serviceClass)", "description": "Fires a BeanContextServiceEvent notifying of a new service."}, {"method_name": "fireServiceAdded", "method_sig": "protected final void fireServiceAdded (BeanContextServiceAvailableEvent bcssae)", "description": "Fires a BeanContextServiceAvailableEvent indicating that a new\n service has become available."}, {"method_name": "fireServiceRevoked", "method_sig": "protected final void fireServiceRevoked (BeanContextServiceRevokedEvent bcsre)", "description": "Fires a BeanContextServiceEvent notifying of a service being revoked."}, {"method_name": "fireServiceRevoked", "method_sig": "protected final void fireServiceRevoked (Class<?> serviceClass,\n                                        boolean revokeNow)", "description": "Fires a BeanContextServiceRevokedEvent\n indicating that a particular service is\n no longer available."}, {"method_name": "bcsPreSerializationHook", "method_sig": "protected void bcsPreSerializationHook (ObjectOutputStream oos)\n                                throws IOException", "description": "called from BeanContextSupport writeObject before it serializes the\n children ...\n\n This class will serialize any Serializable BeanContextServiceProviders\n herein.\n\n subclasses may envelope this method to insert their own serialization\n processing that has to occur prior to serialization of the children"}, {"method_name": "bcsPreDeserializationHook", "method_sig": "protected void bcsPreDeserializationHook (ObjectInputStream ois)\n                                  throws IOException,\n                                         ClassNotFoundException", "description": "called from BeanContextSupport readObject before it deserializes the\n children ...\n\n This class will deserialize any Serializable BeanContextServiceProviders\n serialized earlier thus making them available to the children when they\n deserialized.\n\n subclasses may envelope this method to insert their own serialization\n processing that has to occur prior to serialization of the children"}]}