{"name": "Class MouseAdapter", "module": "java.desktop", "package": "java.awt.event", "text": "An abstract adapter class for receiving mouse events.\n The methods in this class are empty. This class exists as\n convenience for creating listener objects.\n \n Mouse events let you track when a mouse is pressed, released, clicked,\n moved, dragged, when it enters a component, when it exits and\n when a mouse wheel is moved.\n \n Extend this class to create a MouseEvent\n (including drag and motion events) or/and MouseWheelEvent\n listener and override the methods for the events of interest. (If you implement the\n MouseListener,\n MouseMotionListener\n interface, you have to define all of\n the methods in it. This abstract class defines null methods for them\n all, so you can only have to define methods for events you care about.)\n \n Create a listener object using the extended class and then register it with\n a component using the component's addMouseListener\naddMouseMotionListener, addMouseWheelListener\n methods.\n The relevant method in the listener object is invoked  and the MouseEvent\n or MouseWheelEvent  is passed to it in following cases:\n \nwhen a mouse button is pressed, released, or clicked (pressed and  released)\n when the mouse cursor enters or exits the component\n when the mouse wheel rotated, or mouse moved or dragged\n ", "codes": ["public abstract class MouseAdapter\nextends Object\nimplements MouseListener, MouseWheelListener, MouseMotionListener"], "fields": [], "methods": [{"method_name": "mouseWheelMoved", "method_sig": "public void mouseWheelMoved (MouseWheelEvent e)", "description": "Invoked when the mouse wheel is rotated."}, {"method_name": "mouseDragged", "method_sig": "public void mouseDragged (MouseEvent e)", "description": "Invoked when a mouse button is pressed on a component and then\n dragged.  MOUSE_DRAGGED events will continue to be\n delivered to the component where the drag originated until the\n mouse button is released (regardless of whether the mouse position\n is within the bounds of the component).\n \n Due to platform-dependent Drag&Drop implementations,\n MOUSE_DRAGGED events may not be delivered during a native\n Drag&Drop operation."}, {"method_name": "mouseMoved", "method_sig": "public void mouseMoved (MouseEvent e)", "description": "Invoked when the mouse cursor has been moved onto a component\n but no buttons have been pushed."}]}