{"name": "Class FilePermission", "module": "java.base", "package": "java.io", "text": "This class represents access to a file or directory.  A FilePermission consists\n of a pathname and a set of actions valid for that pathname.\n \n Pathname is the pathname of the file or directory granted the specified\n actions. A pathname that ends in \"/*\" (where \"/\" is\n the file separator character, File.separatorChar) indicates\n all the files and directories contained in that directory. A pathname\n that ends with \"/-\" indicates (recursively) all files\n and subdirectories contained in that directory. Such a pathname is called\n a wildcard pathname. Otherwise, it's a simple pathname.\n \n A pathname consisting of the special token \"<<ALL FILES>>\"\n matches any file.\n \n Note: A pathname consisting of a single \"*\" indicates all the files\n in the current directory, while a pathname consisting of a single \"-\"\n indicates all the files in the current directory and\n (recursively) all files and subdirectories contained in the current\n directory.\n \n The actions to be granted are passed to the constructor in a string containing\n a list of one or more comma-separated keywords. The possible keywords are\n \"read\", \"write\", \"execute\", \"delete\", and \"readlink\". Their meaning is\n defined as follows:\n\n \n read  read permission\n     write  write permission\n     execute\n     execute permission. Allows Runtime.exec to\n         be called. Corresponds to SecurityManager.checkExec.\n     delete\n     delete permission. Allows File.delete to\n         be called. Corresponds to SecurityManager.checkDelete.\n     readlink\n     read link permission. Allows the target of a\n         symbolic link\n         to be read by invoking the readSymbolicLink  method.\n \n\n The actions string is converted to lowercase before processing.\n \n Be careful when granting FilePermissions. Think about the implications\n of granting read and especially write access to various files and\n directories. The \"<<ALL FILES>>\" permission with write action is\n especially dangerous. This grants permission to write to the entire\n file system. One thing this effectively allows is replacement of the\n system binary, including the JVM runtime environment.\n \n Please note: Code can always read a file from the same\n directory it's in (or a subdirectory of that directory); it does not\n need explicit permission to do so.", "codes": ["public final class FilePermission\nextends Permission\nimplements Serializable"], "fields": [], "methods": [{"method_name": "implies", "method_sig": "public boolean implies (Permission p)", "description": "Checks if this FilePermission object \"implies\" the specified permission.\n \n More specifically, this method returns true if:\n \n p is an instanceof FilePermission,\n  p's actions are a proper subset of this\n object's actions, and\n  p's pathname is implied by this object's\n      pathname. For example, \"/tmp/*\" implies \"/tmp/foo\", since\n      \"/tmp/*\" encompasses all files in the \"/tmp\" directory,\n      including the one named \"foo\".\n \n\n Precisely, a simple pathname implies another simple pathname\n if and only if they are equal. A simple pathname never implies\n a wildcard pathname. A wildcard pathname implies another wildcard\n pathname if and only if all simple pathnames implied by the latter\n are implied by the former. A wildcard pathname implies a simple\n pathname if and only if\n \nif the wildcard flag is \"*\", the simple pathname's path\n     must be right inside the wildcard pathname's path.\n     if the wildcard flag is \"-\", the simple pathname's path\n     must be recursively inside the wildcard pathname's path.\n \n\n \"<<ALL FILES>>\" implies every other pathname. No pathname,\n except for \"<<ALL FILES>>\" itself, implies\n \"<<ALL FILES>>\"."}, {"method_name": "equals", "method_sig": "public boolean equals (Object obj)", "description": "Checks two FilePermission objects for equality. Checks that obj is\n a FilePermission, and has the same pathname and actions as this object."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Returns the hash code value for this object."}, {"method_name": "getActions", "method_sig": "public String getActions()", "description": "Returns the \"canonical string representation\" of the actions.\n That is, this method always returns present actions in the following order:\n read, write, execute, delete, readlink. For example, if this FilePermission\n object allows both write and read actions, a call to getActions\n will return the string \"read,write\"."}, {"method_name": "newPermissionCollection", "method_sig": "public PermissionCollection newPermissionCollection()", "description": "Returns a new PermissionCollection object for storing FilePermission\n objects.\n \n FilePermission objects must be stored in a manner that allows them\n to be inserted into the collection in any order, but that also enables the\n PermissionCollection implies\n method to be implemented in an efficient (and consistent) manner.\n\n For example, if you have two FilePermissions:\n \n \"/tmp/-\", \"read\"\n \"/tmp/scratch/foo\", \"write\"\n\nand you are calling the implies method with the FilePermission:\n\n \n   \"/tmp/scratch/foo\", \"read,write\",\n \n\n then the implies function must\n take into account both the \"/tmp/-\" and \"/tmp/scratch/foo\"\n permissions, so the effective permission is \"read,write\",\n and implies returns true. The \"implies\" semantics for\n FilePermissions are handled properly by the PermissionCollection object\n returned by this newPermissionCollection method."}]}