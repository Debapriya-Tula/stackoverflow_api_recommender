{"name": "Class JProgressBar", "module": "java.desktop", "package": "javax.swing", "text": "A component that visually displays the progress of some task.  As the task\n progresses towards completion, the progress bar displays the\n task's percentage of completion.\n This percentage is typically represented visually by a rectangle which\n starts out empty and gradually becomes filled in as the task progresses.\n In addition, the progress bar can display a textual representation of this\n percentage.\n \nJProgressBar uses a BoundedRangeModel as its data model,\n with the value property representing the \"current\" state of the task,\n and the minimum and maximum properties representing the\n beginning and end points, respectively.\n \n To indicate that a task of unknown length is executing,\n you can put a progress bar into indeterminate mode.\n While the bar is in indeterminate mode,\n it animates constantly to show that work is occurring.\n As soon as you can determine the task's length and amount of progress,\n you should update the progress bar's value\n and switch it back to determinate mode.\n\n \n\n Here is an example of creating a progress bar,\n where task is an object (representing some piece of work)\n which returns information about the progress of the task:\n\n\nprogressBar = new JProgressBar(0, task.getLengthOfTask());\nprogressBar.setValue(0);\nprogressBar.setStringPainted(true);\n\n\n Here is an example of querying the current state of the task, and using\n the returned value to update the progress bar:\n\n\nprogressBar.setValue(task.getCurrent());\n\n\n Here is an example of putting a progress bar into\n indeterminate mode,\n and then switching back to determinate mode\n once the length of the task is known:\n\n\nprogressBar = new JProgressBar();\n...//when the task of (initially) unknown length begins:\nprogressBar.setIndeterminate(true);\n...//do some work; get length of task...\nprogressBar.setMaximum(newLength);\nprogressBar.setValue(newValue);\nprogressBar.setIndeterminate(false);\n\n\n\n For complete examples and further documentation see\n How to Monitor Progress,\n a section in The Java Tutorial.\n\nWarning: Swing is not thread safe. For more\n information see Swing's Threading\n Policy.\n \nWarning:\n Serialized objects of this class will not be compatible with\n future Swing releases. The current serialization support is\n appropriate for short term storage or RMI between applications running\n the same version of Swing.  As of 1.4, support for long term storage\n of all JavaBeans\u2122\n has been added to the java.beans package.\n Please see XMLEncoder.", "codes": ["@JavaBean(defaultProperty=\"UI\",\n          description=\"A component that displays an integer value.\")\npublic class JProgressBar\nextends JComponent\nimplements SwingConstants, Accessible"], "fields": [{"field_name": "orientation", "field_sig": "protected\u00a0int orientation", "description": "Whether the progress bar is horizontal or vertical.\n The default is HORIZONTAL."}, {"field_name": "paintBorder", "field_sig": "protected\u00a0boolean paintBorder", "description": "Whether to display a border around the progress bar.\n The default is true."}, {"field_name": "model", "field_sig": "protected\u00a0BoundedRangeModel model", "description": "The object that holds the data for the progress bar."}, {"field_name": "progressString", "field_sig": "protected\u00a0String progressString", "description": "An optional string that can be displayed on the progress bar.\n The default is null. Setting this to a non-null\n value does not imply that the string will be displayed.\n To display the string, paintString must be true."}, {"field_name": "paintString", "field_sig": "protected\u00a0boolean paintString", "description": "Whether to display a string of text on the progress bar.\n The default is false.\n Setting this to true causes a textual\n display of the progress to be rendered on the progress bar. If\n the progressString is null,\n the percentage of completion is displayed on the progress bar.\n Otherwise, the progressString is\n rendered on the progress bar."}, {"field_name": "changeEvent", "field_sig": "protected transient\u00a0ChangeEvent changeEvent", "description": "Only one ChangeEvent is needed per instance since the\n event's only interesting property is the immutable source, which\n is the progress bar.\n The event is lazily created the first time that an\n event notification is fired."}, {"field_name": "changeListener", "field_sig": "protected\u00a0ChangeListener changeListener", "description": "Listens for change events sent by the progress bar's model,\n redispatching them\n to change-event listeners registered upon\n this progress bar."}], "methods": [{"method_name": "getOrientation", "method_sig": "public int getOrientation()", "description": "Returns SwingConstants.VERTICAL or\n SwingConstants.HORIZONTAL, depending on the orientation\n of the progress bar. The default orientation is\n SwingConstants.HORIZONTAL."}, {"method_name": "setOrientation", "method_sig": "@BeanProperty(preferred=true,\n              visualUpdate=true,\n              description=\"Set the progress bar\\'s orientation.\")\npublic void setOrientation (int newOrientation)", "description": "Sets the progress bar's orientation to newOrientation,\n which must be SwingConstants.VERTICAL or\n SwingConstants.HORIZONTAL. The default orientation\n is SwingConstants.HORIZONTAL."}, {"method_name": "isStringPainted", "method_sig": "public boolean isStringPainted()", "description": "Returns the value of the stringPainted property."}, {"method_name": "setStringPainted", "method_sig": "@BeanProperty(visualUpdate=true,\n              description=\"Whether the progress bar should render a string.\")\npublic void setStringPainted (boolean b)", "description": "Sets the value of the stringPainted property,\n which determines whether the progress bar\n should render a progress string.\n The default is false, meaning\n no string is painted.\n Some look and feels might not support progress strings\n or might support them only when the progress bar is in determinate mode."}, {"method_name": "getString", "method_sig": "public String getString()", "description": "Returns a String representation of the current progress.\n By default, this returns a simple percentage String based on\n the value returned from getPercentComplete.  An example\n would be the \"42%\".  You can change this by calling setString."}, {"method_name": "setString", "method_sig": "@BeanProperty(visualUpdate=true,\n              description=\"Specifies the progress string to paint\")\npublic void setString (String s)", "description": "Sets the value of the progress string. By default,\n this string is null, implying the built-in behavior of\n using a simple percent string.\n If you have provided a custom progress string and want to revert to\n the built-in behavior, set the string back to null.\n \n The progress string is painted only if\n the isStringPainted method returns true."}, {"method_name": "getPercentComplete", "method_sig": "@BeanProperty(bound=false)\npublic double getPercentComplete()", "description": "Returns the percent complete for the progress bar.\n Note that this number is between 0.0 and 1.0."}, {"method_name": "isBorderPainted", "method_sig": "public boolean isBorderPainted()", "description": "Returns the borderPainted property."}, {"method_name": "setBorderPainted", "method_sig": "@BeanProperty(visualUpdate=true,\n              description=\"Whether the progress bar should paint its border.\")\npublic void setBorderPainted (boolean b)", "description": "Sets the borderPainted property, which is\n true if the progress bar should paint its border.\n The default value for this property is true.\n Some look and feels might not implement painted borders;\n they will ignore this property."}, {"method_name": "paintBorder", "method_sig": "protected void paintBorder (Graphics g)", "description": "Paints the progress bar's border if the borderPainted\n property is true."}, {"method_name": "getUI", "method_sig": "public ProgressBarUI getUI()", "description": "Returns the look-and-feel object that renders this component."}, {"method_name": "setUI", "method_sig": "@BeanProperty(hidden=true,\n              visualUpdate=true,\n              description=\"The UI object that implements the Component\\'s LookAndFeel.\")\npublic void setUI (ProgressBarUI ui)", "description": "Sets the look-and-feel object that renders this component."}, {"method_name": "updateUI", "method_sig": "public void updateUI()", "description": "Resets the UI property to a value from the current look and feel."}, {"method_name": "getUIClassID", "method_sig": "@BeanProperty(bound=false,\n              expert=true,\n              description=\"A string that specifies the name of the look-and-feel class.\")\npublic String getUIClassID()", "description": "Returns the name of the look-and-feel class that renders this component."}, {"method_name": "createChangeListener", "method_sig": "protected ChangeListener createChangeListener()", "description": "Subclasses that want to handle change events\n from the model differently\n can override this to return\n an instance of a custom ChangeListener implementation.\n The default ChangeListener simply calls the\n fireStateChanged method to forward ChangeEvents\n to the ChangeListeners that have been added directly to the\n progress bar."}, {"method_name": "addChangeListener", "method_sig": "public void addChangeListener (ChangeListener l)", "description": "Adds the specified ChangeListener to the progress bar."}, {"method_name": "removeChangeListener", "method_sig": "public void removeChangeListener (ChangeListener l)", "description": "Removes a ChangeListener from the progress bar."}, {"method_name": "getChangeListeners", "method_sig": "@BeanProperty(bound=false)\npublic ChangeListener[] getChangeListeners()", "description": "Returns an array of all the ChangeListeners added\n to this progress bar with addChangeListener."}, {"method_name": "fireStateChanged", "method_sig": "protected void fireStateChanged()", "description": "Send a ChangeEvent, whose source is this JProgressBar, to\n all ChangeListeners that have registered interest in\n ChangeEvents.\n This method is called each time a ChangeEvent is received from\n the model.\n \n\n The event instance is created if necessary, and stored in\n changeEvent."}, {"method_name": "getModel", "method_sig": "public BoundedRangeModel getModel()", "description": "Returns the data model used by this progress bar."}, {"method_name": "setModel", "method_sig": "@BeanProperty(bound=false,\n              expert=true,\n              description=\"The data model used by the JProgressBar.\")\npublic void setModel (BoundedRangeModel newModel)", "description": "Sets the data model used by the JProgressBar.\n Note that the BoundedRangeModel's extent is not used,\n and is set to 0."}, {"method_name": "getValue", "method_sig": "public int getValue()", "description": "Returns the progress bar's current value\n from the BoundedRangeModel.\n The value is always between the\n minimum and maximum values, inclusive."}, {"method_name": "getMinimum", "method_sig": "public int getMinimum()", "description": "Returns the progress bar's minimum value\n from the BoundedRangeModel."}, {"method_name": "getMaximum", "method_sig": "public int getMaximum()", "description": "Returns the progress bar's maximum value\n from the BoundedRangeModel."}, {"method_name": "setValue", "method_sig": "@BeanProperty(bound=false,\n              preferred=true,\n              description=\"The progress bar\\'s current value.\")\npublic void setValue (int n)", "description": "Sets the progress bar's current value to n.  This method\n forwards the new value to the model.\n \n The data model (an instance of BoundedRangeModel)\n handles any mathematical\n issues arising from assigning faulty values.  See the\n BoundedRangeModel documentation for details.\n \n If the new value is different from the previous value,\n all change listeners are notified."}, {"method_name": "setMinimum", "method_sig": "@BeanProperty(bound=false,\n              preferred=true,\n              description=\"The progress bar\\'s minimum value.\")\npublic void setMinimum (int n)", "description": "Sets the progress bar's minimum value\n (stored in the progress bar's data model) to n.\n \n The data model (a BoundedRangeModel instance)\n handles any mathematical\n issues arising from assigning faulty values.\n See the BoundedRangeModel documentation for details.\n \n If the minimum value is different from the previous minimum,\n all change listeners are notified."}, {"method_name": "setMaximum", "method_sig": "@BeanProperty(bound=false,\n              preferred=true,\n              description=\"The progress bar\\'s maximum value.\")\npublic void setMaximum (int n)", "description": "Sets the progress bar's maximum value\n (stored in the progress bar's data model) to n.\n \n The underlying BoundedRangeModel handles any mathematical\n issues arising from assigning faulty values.\n See the BoundedRangeModel documentation for details.\n \n If the maximum value is different from the previous maximum,\n all change listeners are notified."}, {"method_name": "setIndeterminate", "method_sig": "public void setIndeterminate (boolean newValue)", "description": "Sets the indeterminate property of the progress bar,\n which determines whether the progress bar is in determinate\n or indeterminate mode.\n An indeterminate progress bar continuously displays animation\n indicating that an operation of unknown length is occurring.\n By default, this property is false.\n Some look and feels might not support indeterminate progress bars;\n they will ignore this property.\n\n \n\n See\n How to Monitor Progress\n for examples of using indeterminate progress bars."}, {"method_name": "isIndeterminate", "method_sig": "@BeanProperty(bound=false,\n              description=\"Is the progress bar indeterminate (true) or normal (false)?\")\npublic boolean isIndeterminate()", "description": "Returns the value of the indeterminate property."}, {"method_name": "paramString", "method_sig": "protected String paramString()", "description": "Returns a string representation of this JProgressBar.\n This method is intended to be used only for debugging purposes. The\n content and format of the returned string may vary between\n implementations. The returned string may be empty but may not\n be null."}, {"method_name": "getAccessibleContext", "method_sig": "@BeanProperty(bound=false,\n              expert=true,\n              description=\"The AccessibleContext associated with this ProgressBar.\")\npublic AccessibleContext getAccessibleContext()", "description": "Gets the AccessibleContext associated with this\n JProgressBar. For progress bars, the\n AccessibleContext takes the form of an\n AccessibleJProgressBar.\n A new AccessibleJProgressBar instance is created if necessary."}]}