{"name": "Interface DeclHandler", "module": "java.xml", "package": "org.xml.sax.ext", "text": "SAX2 extension handler for DTD declaration events.\n\n \nThis module, both source code and documentation, is in the\n Public Domain, and comes with NO WARRANTY.\n See http://www.saxproject.org\n for further information.\n \nThis is an optional extension handler for SAX2 to provide more\n complete information about DTD declarations in an XML document.\n XML readers are not required to recognize this handler, and it\n is not part of core-only SAX2 distributions.\nNote that data-related DTD declarations (unparsed entities and\n notations) are already reported through the DTDHandler interface.\nIf you are using the declaration handler together with a lexical\n handler, all of the events will occur between the\n startDTD and the\n endDTD events.\nTo set the DeclHandler for an XML reader, use the\n setProperty method\n with the property name\n http://xml.org/sax/properties/declaration-handler\n and an object implementing this interface (or null) as the value.\n If the reader does not report declaration events, it will throw a\n SAXNotRecognizedException\n when you attempt to register the handler.", "codes": ["public interface DeclHandler"], "fields": [], "methods": [{"method_name": "elementDecl", "method_sig": "void elementDecl (String name,\n                 String model)\n          throws SAXException", "description": "Report an element type declaration.\n\n The content model will consist of the string \"EMPTY\", the\n string \"ANY\", or a parenthesised group, optionally followed\n by an occurrence indicator.  The model will be normalized so\n that all parameter entities are fully resolved and all whitespace\n is removed,and will include the enclosing parentheses.  Other\n normalization (such as removing redundant parentheses or\n simplifying occurrence indicators) is at the discretion of the\n parser."}, {"method_name": "attributeDecl", "method_sig": "void attributeDecl (String eName,\n                   String aName,\n                   String type,\n                   String mode,\n                   String value)\n            throws SAXException", "description": "Report an attribute type declaration.\n\n Only the effective (first) declaration for an attribute will\n be reported.  The type will be one of the strings \"CDATA\",\n \"ID\", \"IDREF\", \"IDREFS\", \"NMTOKEN\", \"NMTOKENS\", \"ENTITY\",\n \"ENTITIES\", a parenthesized token group with\n the separator \"|\" and all whitespace removed, or the word\n \"NOTATION\" followed by a space followed by a parenthesized\n token group with all whitespace removed.\nThe value will be the value as reported to applications,\n appropriately normalized and with entity and character\n references expanded.  "}, {"method_name": "internalEntityDecl", "method_sig": "void internalEntityDecl (String name,\n                        String value)\n                 throws SAXException", "description": "Report an internal entity declaration.\n\n Only the effective (first) declaration for each entity\n will be reported.  All parameter entities in the value\n will be expanded, but general entities will not."}, {"method_name": "externalEntityDecl", "method_sig": "void externalEntityDecl (String name,\n                        String publicId,\n                        String systemId)\n                 throws SAXException", "description": "Report a parsed external entity declaration.\n\n Only the effective (first) declaration for each entity\n will be reported.\nIf the system identifier is a URL, the parser must resolve it\n fully before passing it to the application."}]}