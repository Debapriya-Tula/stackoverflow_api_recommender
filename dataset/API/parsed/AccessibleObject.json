{"name": "Class AccessibleObject", "module": "java.base", "package": "java.lang.reflect", "text": "The AccessibleObject class is the base class for Field,\n Method, and Constructor objects (known as reflected\n objects). It provides the ability to flag a reflected object as\n suppressing checks for Java language access control when it is used. This\n permits sophisticated applications with sufficient privilege, such as Java\n Object Serialization or other persistence mechanisms, to manipulate objects\n in a manner that would normally be prohibited.\n\n  Java language access control prevents use of private members outside\n their top-level class; package access members outside their package; protected members\n outside their package or subclasses; and public members outside their\n module unless they are declared in an exported package and the user reads their module. By\n default, Java language access control is enforced (with one variation) when\n Fields, Methods, or Constructors are used to get or\n set fields, to invoke methods, or to create and initialize new instances of\n classes, respectively. Every reflected object checks that the code using it\n is in an appropriate class, package, or module. \n The one variation from Java language access control is that the checks\n by reflected objects assume readability. That is, the module containing\n the use of a reflected object is assumed to read the module in which\n the underlying field, method, or constructor is declared. \n Whether the checks for Java language access control can be suppressed\n (and thus, whether access can be enabled) depends on whether the reflected\n object corresponds to a member in an exported or open package\n (see setAccessible(boolean)). ", "codes": ["public class AccessibleObject\nextends Object\nimplements AnnotatedElement"], "fields": [], "methods": [{"method_name": "setAccessible", "method_sig": "public static void setAccessible (AccessibleObject[] array,\n                                 boolean flag)", "description": "Convenience method to set the accessible flag for an\n array of reflected objects with a single security check (for efficiency).\n\n  This method may be used to enable access to all reflected objects in\n the array when access to each reflected object can be enabled as\n specified by setAccessible(boolean). \nIf there is a security manager, its\n checkPermission method is first called with a\n ReflectPermission(\"suppressAccessChecks\") permission.\n\n A SecurityException is also thrown if any of the elements of\n the input array is a Constructor\n object for the class java.lang.Class and flag is true."}, {"method_name": "setAccessible", "method_sig": "public void setAccessible (boolean flag)", "description": "Set the accessible flag for this reflected object to\n the indicated boolean value.  A value of true indicates that\n the reflected object should suppress checks for Java language access\n control when it is used. A value of false indicates that\n the reflected object should enforce checks for Java language access\n control when it is used, with the variation noted in the class description.\n\n  This method may be used by a caller in class C to enable\n access to a member of declaring class D if any of the following hold: \n\n C and D are in the same module. \n The member is public and D is public in\n     a package that the module containing D exports to at least the module\n     containing C. \n The member is protected static, D is\n     public in a package that the module containing D\n     exports to at least the module containing C, and C\n     is a subclass of D. \n D is in a package that the module containing D\nopens to at least the module\n     containing C.\n     All packages in unnamed and open modules are open to all modules and\n     so this method always succeeds when D is in an unnamed or\n     open module. \n\n This method cannot be used to enable access to private members,\n members with default (package) access, protected instance members, or\n protected constructors when the declaring class is in a different module\n to the caller and the package containing the declaring class is not open\n to the caller's module. \n If there is a security manager, its\n checkPermission method is first called with a\n ReflectPermission(\"suppressAccessChecks\") permission."}, {"method_name": "trySetAccessible", "method_sig": "public final boolean trySetAccessible()", "description": "Set the accessible flag for this reflected object to true\n if possible. This method sets the accessible flag, as if by\n invoking setAccessible(true), and returns\n the possibly-updated value for the accessible flag. If access\n cannot be enabled, i.e. the checks or Java language access control cannot\n be suppressed, this method returns false (as opposed to \n setAccessible(true) throwing InaccessibleObjectException when\n it fails).\n\n  This method is a no-op if the accessible flag for\n this reflected object is true.\n\n  For example, a caller can invoke trySetAccessible\n on a Method object for a private instance method\n p.T::privateMethod to suppress the checks for Java language access\n control when the Method is invoked.\n If p.T class is in a different module to the caller and\n package p is open to at least the caller's module,\n the code below successfully sets the accessible flag\n to true.\n\n \n \n     p.T obj = ....;  // instance of p.T\n     :\n     Method m = p.T.class.getDeclaredMethod(\"privateMethod\");\n     if (m.trySetAccessible()) {\n         m.invoke(obj);\n     } else {\n         // package p is not opened to the caller to access private member of T\n         ...\n     }\n \n If there is a security manager, its checkPermission method\n is first called with a ReflectPermission(\"suppressAccessChecks\")\n permission. "}, {"method_name": "isAccessible", "method_sig": "@Deprecated(since=\"9\")\npublic boolean isAccessible()", "description": "Get the value of the accessible flag for this reflected object."}, {"method_name": "canAccess", "method_sig": "public final boolean canAccess (Object obj)", "description": "Test if the caller can access this reflected object. If this reflected\n object corresponds to an instance method or field then this method tests\n if the caller can access the given obj with the reflected object.\n For instance methods or fields then the obj argument must be an\n instance of the declaring class. For\n static members and constructors then obj must be null.\n\n  This method returns true if the accessible flag\n is set to true, i.e. the checks for Java language access control\n are suppressed, or if the caller can access the member as\n specified in The Java\u2122 Language Specification,\n with the variation noted in the class description. "}, {"method_name": "getAnnotation", "method_sig": "public <T extends Annotation> T getAnnotation (Class<T> annotationClass)", "description": "Description copied from interface:\u00a0AnnotatedElement"}, {"method_name": "isAnnotationPresent", "method_sig": "public boolean isAnnotationPresent (Class<? extends Annotation> annotationClass)", "description": "Returns true if an annotation for the specified type\n is present on this element, else false.  This method\n is designed primarily for convenient access to marker annotations.\n\n The truth value returned by this method is equivalent to:\n getAnnotation(annotationClass) != null\nThe body of the default method is specified to be the code\n above."}, {"method_name": "getAnnotationsByType", "method_sig": "public <T extends Annotation> T[] getAnnotationsByType (Class<T> annotationClass)", "description": "Description copied from interface:\u00a0AnnotatedElement"}, {"method_name": "getAnnotations", "method_sig": "public Annotation[] getAnnotations()", "description": "Description copied from interface:\u00a0AnnotatedElement"}, {"method_name": "getDeclaredAnnotation", "method_sig": "public <T extends Annotation> T getDeclaredAnnotation (Class<T> annotationClass)", "description": "Description copied from interface:\u00a0AnnotatedElement"}, {"method_name": "getDeclaredAnnotationsByType", "method_sig": "public <T extends Annotation> T[] getDeclaredAnnotationsByType (Class<T> annotationClass)", "description": "Description copied from interface:\u00a0AnnotatedElement"}, {"method_name": "getDeclaredAnnotations", "method_sig": "public Annotation[] getDeclaredAnnotations()", "description": "Description copied from interface:\u00a0AnnotatedElement"}]}