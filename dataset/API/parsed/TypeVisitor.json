{"name": "Interface TypeVisitor<R,\u200bP>", "module": "java.compiler", "package": "javax.lang.model.type", "text": "A visitor of types, in the style of the\n visitor design pattern.  Classes implementing this\n interface are used to operate on a type when the kind of\n type is unknown at compile time.  When a visitor is passed to a\n type's accept method, the visitXyz\n method most applicable to that type is invoked.\n\n  Classes implementing this interface may or may not throw a\n NullPointerException if the additional parameter p\n is null; see documentation of the implementing class for\n details.\n\n  WARNING: It is possible that methods will be added to\n this interface to accommodate new, currently unknown, language\n structures added to future versions of the Java\u2122 programming\n language.  Therefore, visitor classes directly implementing this\n interface may be source incompatible with future versions of the\n platform.  To avoid this source incompatibility, visitor\n implementations are encouraged to instead extend the appropriate\n abstract visitor class that implements this interface.  However, an\n API should generally use this visitor interface as the type for\n parameters, return type, etc. rather than one of the abstract\n classes.\n\n Note that methods to accommodate new language constructs could\n be added in a source compatible way if they were added as\n default methods.  However, default methods are only\n available on Java SE 8 and higher releases and the \n javax.lang.model.* packages bundled in Java SE 8 were required to\n also be runnable on Java SE 7.  Therefore, default methods\n were not used when extending javax.lang.model.*\n to cover Java SE 8 language features.  However, default methods\n are used in subsequent revisions of the javax.lang.model.*\n packages that are only required to run on Java SE 8 and higher\n platform versions.", "codes": ["public interface TypeVisitor<R, P>"], "fields": [], "methods": [{"method_name": "visit", "method_sig": "R visit (TypeMirror t,\n        P p)", "description": "Visits a type."}, {"method_name": "visit", "method_sig": "default R visit (TypeMirror t)", "description": "A convenience method equivalent to visit(t, null)."}, {"method_name": "visitPrimitive", "method_sig": "R visitPrimitive (PrimitiveType t,\n                 P p)", "description": "Visits a primitive type."}, {"method_name": "visitNull", "method_sig": "R visitNull (NullType t,\n            P p)", "description": "Visits the null type."}, {"method_name": "visitArray", "method_sig": "R visitArray (ArrayType t,\n             P p)", "description": "Visits an array type."}, {"method_name": "visitDeclared", "method_sig": "R visitDeclared (DeclaredType t,\n                P p)", "description": "Visits a declared type."}, {"method_name": "visitError", "method_sig": "R visitError (ErrorType t,\n             P p)", "description": "Visits an error type."}, {"method_name": "visitTypeVariable", "method_sig": "R visitTypeVariable (TypeVariable t,\n                    P p)", "description": "Visits a type variable."}, {"method_name": "visitWildcard", "method_sig": "R visitWildcard (WildcardType t,\n                P p)", "description": "Visits a wildcard type."}, {"method_name": "visitExecutable", "method_sig": "R visitExecutable (ExecutableType t,\n                  P p)", "description": "Visits an executable type."}, {"method_name": "visitNoType", "method_sig": "R visitNoType (NoType t,\n              P p)", "description": "Visits a NoType instance."}, {"method_name": "visitUnknown", "method_sig": "R visitUnknown (TypeMirror t,\n               P p)", "description": "Visits an unknown kind of type.\n This can occur if the language evolves and new kinds\n of types are added to the TypeMirror hierarchy."}, {"method_name": "visitUnion", "method_sig": "R visitUnion (UnionType t,\n             P p)", "description": "Visits a union type."}, {"method_name": "visitIntersection", "method_sig": "R visitIntersection (IntersectionType t,\n                    P p)", "description": "Visits an intersection type."}]}