{"name": "Interface LoginModule", "module": "java.base", "package": "javax.security.auth.spi", "text": " Service-provider interface for authentication technology providers.\n LoginModules are plugged in under applications to provide a particular\n type of authentication.\n\n  While applications write to the LoginContext API,\n authentication technology providers implement the\n LoginModule interface.\n A Configuration specifies the LoginModule(s)\n to be used with a particular login application.  Therefore different\n LoginModules can be plugged in under the application without\n requiring any modifications to the application itself.\n\n  The LoginContext is responsible for reading the\n Configuration and instantiating the appropriate\n LoginModules.  Each LoginModule is initialized with\n a Subject, a CallbackHandler, shared\n LoginModule state, and LoginModule-specific options.\n\n The Subject represents the\n Subject currently being authenticated and is updated\n with relevant Credentials if authentication succeeds.\n LoginModules use the CallbackHandler to\n communicate with users.  The CallbackHandler may be\n used to prompt for usernames and passwords, for example.\n Note that the CallbackHandler may be null.  LoginModules\n which absolutely require a CallbackHandler to authenticate\n the Subject may throw a LoginException.\n LoginModules optionally use the shared state to share information\n or data among themselves.\n\n  The LoginModule-specific options represent the options\n configured for this LoginModule by an administrator or user\n in the login Configuration.\n The options are defined by the LoginModule itself\n and control the behavior within it.  For example, a\n LoginModule may define options to support debugging/testing\n capabilities.  Options are defined using a key-value syntax,\n such as debug=true.  The LoginModule\n stores the options as a Map so that the values may\n be retrieved using the key.  Note that there is no limit to the number\n of options a LoginModule chooses to define.\n\n  The calling application sees the authentication process as a single\n operation.  However, the authentication process within the\n LoginModule proceeds in two distinct phases.\n In the first phase, the LoginModule's\n login method gets invoked by the LoginContext's\n login method.  The login\n method for the LoginModule then performs\n the actual authentication (prompt for and verify a password for example)\n and saves its authentication status as private state\n information.  Once finished, the LoginModule's login\n method either returns true (if it succeeded) or\n false (if it should be ignored), or throws a\n LoginException to specify a failure.\n In the failure case, the LoginModule must not retry the\n authentication or introduce delays.  The responsibility of such tasks\n belongs to the application.  If the application attempts to retry\n the authentication, the LoginModule's login method will be\n called again.\n\n  In the second phase, if the LoginContext's overall authentication\n succeeded (the relevant REQUIRED, REQUISITE, SUFFICIENT and OPTIONAL\n LoginModules succeeded), then the commit\n method for the LoginModule gets invoked.\n The commit method for a LoginModule checks its\n privately saved state to see if its own authentication succeeded.\n If the overall LoginContext authentication succeeded\n and the LoginModule's own authentication succeeded, then the\n commit method associates the relevant\n Principals (authenticated identities) and Credentials (authentication data\n such as cryptographic keys) with the Subject\n located within the LoginModule.\n\n  If the LoginContext's overall authentication failed (the relevant\n REQUIRED, REQUISITE, SUFFICIENT and OPTIONAL LoginModules did not succeed),\n then the abort method for each LoginModule\n gets invoked.  In this case, the LoginModule removes/destroys\n any authentication state originally saved.\n\n  Logging out a Subject involves only one phase.\n The LoginContext invokes the LoginModule's logout\n method.  The logout method for the LoginModule\n then performs the logout procedures, such as removing Principals or\n Credentials from the Subject or logging session information.\n\n  A LoginModule implementation must have a constructor with\n no arguments.  This allows classes which load the LoginModule\n to instantiate it.", "codes": ["public interface LoginModule"], "fields": [], "methods": [{"method_name": "initialize", "method_sig": "void initialize (Subject subject,\n                CallbackHandler callbackHandler,\n                Map<String, ?> sharedState,\n                Map<String, ?> options)", "description": "Initialize this LoginModule.\n\n  This method is called by the LoginContext\n after this LoginModule has been instantiated.\n The purpose of this method is to initialize this\n LoginModule with the relevant information.\n If this LoginModule does not understand\n any of the data stored in sharedState or\n options parameters, they can be ignored."}, {"method_name": "login", "method_sig": "boolean login()\n       throws LoginException", "description": "Method to authenticate a Subject (phase 1).\n\n  The implementation of this method authenticates\n a Subject.  For example, it may prompt for\n Subject information such\n as a username and password and then attempt to verify the password.\n This method saves the result of the authentication attempt\n as private state within the LoginModule."}, {"method_name": "commit", "method_sig": "boolean commit()\n        throws LoginException", "description": "Method to commit the authentication process (phase 2).\n\n  This method is called if the LoginContext's\n overall authentication succeeded\n (the relevant REQUIRED, REQUISITE, SUFFICIENT and OPTIONAL LoginModules\n succeeded).\n\n  If this LoginModule's own authentication attempt\n succeeded (checked by retrieving the private state saved by the\n login method), then this method associates relevant\n Principals and Credentials with the Subject located in the\n LoginModule.  If this LoginModule's own\n authentication attempted failed, then this method removes/destroys\n any state that was originally saved."}, {"method_name": "abort", "method_sig": "boolean abort()\n       throws LoginException", "description": "Method to abort the authentication process (phase 2).\n\n  This method is called if the LoginContext's\n overall authentication failed.\n (the relevant REQUIRED, REQUISITE, SUFFICIENT and OPTIONAL LoginModules\n did not succeed).\n\n  If this LoginModule's own authentication attempt\n succeeded (checked by retrieving the private state saved by the\n login method), then this method cleans up any state\n that was originally saved."}, {"method_name": "logout", "method_sig": "boolean logout()\n        throws LoginException", "description": "Method which logs out a Subject.\n\n An implementation of this method might remove/destroy a Subject's\n Principals and Credentials."}]}