{"name": "Class RMIConnectorServer", "module": "java.management.rmi", "package": "javax.management.remote.rmi", "text": "A JMX API connector server that creates RMI-based connections\n from remote clients.  Usually, such connector servers are made\n using JMXConnectorServerFactory.  However, specialized applications can\n use this class directly, for example with an RMIServerImpl\n object.", "codes": ["public class RMIConnectorServer\nextends JMXConnectorServer"], "fields": [{"field_name": "JNDI_REBIND_ATTRIBUTE", "field_sig": "public static final\u00a0String JNDI_REBIND_ATTRIBUTE", "description": "Name of the attribute that specifies whether the RMIServer stub that represents an RMI connector server should\n override an existing stub at the same address.  The value\n associated with this attribute, if any, should be a string that\n is equal, ignoring case, to \"true\" or\n \"false\".  The default value is false."}, {"field_name": "RMI_CLIENT_SOCKET_FACTORY_ATTRIBUTE", "field_sig": "public static final\u00a0String RMI_CLIENT_SOCKET_FACTORY_ATTRIBUTE", "description": "Name of the attribute that specifies the RMIClientSocketFactory for the RMI objects created in\n conjunction with this connector. The value associated with this\n attribute must be of type RMIClientSocketFactory and can\n only be specified in the Map argument supplied when\n creating a connector server."}, {"field_name": "RMI_SERVER_SOCKET_FACTORY_ATTRIBUTE", "field_sig": "public static final\u00a0String RMI_SERVER_SOCKET_FACTORY_ATTRIBUTE", "description": "Name of the attribute that specifies the RMIServerSocketFactory for the RMI objects created in\n conjunction with this connector. The value associated with this\n attribute must be of type RMIServerSocketFactory and can\n only be specified in the Map argument supplied when\n creating a connector server."}, {"field_name": "CREDENTIAL_TYPES", "field_sig": "@Deprecated(since=\"10\",\n            forRemoval=true)\npublic static final\u00a0String CREDENTIAL_TYPES", "description": "Name of the attribute that specifies a list of class names acceptable\n as parameters to the RMIServer.newClient()\n remote method call.\n \n This list of classes should correspond to the transitive closure of the\n credentials class (or classes) used by the installed JMXAuthenticator\n associated with the RMIServer implementation.\n \n If the attribute is not set, or is null, then any class is\n deemed acceptable."}, {"field_name": "CREDENTIALS_FILTER_PATTERN", "field_sig": "public static final\u00a0String CREDENTIALS_FILTER_PATTERN", "description": "Name of the attribute that specifies an\n ObjectInputFilter pattern string to filter classes acceptable\n for RMIServer.newClient()\n remote method call.\n \n The filter pattern must be in same format as used in\n ObjectInputFilter.Config.createFilter(java.lang.String)\n\n This list of classes allowed by filter should correspond to the\n transitive closure of the credentials class (or classes) used by the\n installed JMXAuthenticator associated with the\n RMIServer implementation.\n If the attribute is not set then any class is deemed acceptable."}, {"field_name": "SERIAL_FILTER_PATTERN", "field_sig": "public static final\u00a0String SERIAL_FILTER_PATTERN", "description": "This attribute defines a pattern from which to create a\n ObjectInputFilter that will be used when deserializing\n objects sent to the JMXConnectorServer by any client.\n \n The filter will be called for any class found in the serialized\n stream sent to server by client, including all JMX defined classes\n (such as ObjectName), all method parameters,\n and, if present in the stream, all classes transitively referred by\n the serial form of any deserialized object.\n The pattern must be in same format as used in\n ObjectInputFilter.Config.createFilter(java.lang.String).\n It may define a white list of permitted classes, a black list of\n rejected classes, a maximum depth for the deserialized objects,\n etc.\n \n To be functional, the filter should allow at least all the\n concrete types in the transitive closure of all objects that\n might get serialized when serializing all JMX classes referred\n as parameters in the RMIConnection interface,\n plus all classes that a client\n might need to transmit wrapped in marshalled objects in order to interoperate with the MBeans registered\n in the MBeanServer. That would potentially include all the\n concrete JMX OpenTypes and the\n classes they use in their serial form.\n \n Care must be taken when defining such a filter, as defining\n a white list too restrictive or a too wide a black list may\n prevent legitimate clients from interoperating with the\n JMXConnectorServer."}], "methods": [{"method_name": "toJMXConnector", "method_sig": "public JMXConnector toJMXConnector (Map<String, ?> env)\n                            throws IOException", "description": "Returns a client stub for this connector server.  A client\n stub is a serializable object whose connect method can be used to make\n one new connection to this connector server."}, {"method_name": "start", "method_sig": "public void start()\n           throws IOException", "description": "Activates the connector server, that is starts listening for\n client connections.  Calling this method when the connector\n server is already active has no effect.  Calling this method\n when the connector server has been stopped will generate an\n IOException.\nThe behavior of this method when called for the first time\n depends on the parameters that were supplied at construction,\n as described below.\nFirst, an object of a subclass of RMIServerImpl is\n required, to export the connector server through RMI:\n\nIf an RMIServerImpl was supplied to the\n constructor, it is used.\n\n Otherwise, if the JMXServiceURL\n was null, or its protocol part was rmi, an object\n of type RMIJRMPServerImpl is created.\n\n Otherwise, the implementation can create an\n implementation-specific RMIServerImpl or it can throw\n MalformedURLException.\n\n \nIf the given address includes a JNDI directory URL as\n specified in the package documentation for javax.management.remote.rmi, then this\n RMIConnectorServer will bootstrap by binding the\n RMIServerImpl to the given address.\nIf the URL path part of the JMXServiceURL was\n empty or a single slash (/), then the RMI object\n will not be bound to a directory.  Instead, a reference to it\n will be encoded in the URL path of the RMIConnectorServer\n address (returned by JMXConnectorServerMBean.getAddress()).  The encodings for\n rmi are described in the package documentation for\n javax.management.remote.rmi.\nThe behavior when the URL path is neither empty nor a JNDI\n directory URL, or when the protocol is not rmi,\n is implementation defined, and may include throwing\n MalformedURLException when the connector server is created\n or when it is started."}, {"method_name": "stop", "method_sig": "public void stop()\n          throws IOException", "description": "Deactivates the connector server, that is, stops listening for\n client connections.  Calling this method will also close all\n client connections that were made by this server.  After this\n method returns, whether normally or with an exception, the\n connector server will not create any new client\n connections.\nOnce a connector server has been stopped, it cannot be started\n again.\nCalling this method when the connector server has already\n been stopped has no effect.  Calling this method when the\n connector server has not yet been started will disable the\n connector server object permanently.\nIf closing a client connection produces an exception, that\n exception is not thrown from this method.  A JMXConnectionNotification is emitted from this MBean with the\n connection ID of the connection that could not be closed.\nClosing a connector server is a potentially slow operation.\n For example, if a client machine with an open connection has\n crashed, the close operation might have to wait for a network\n protocol timeout.  Callers that do not want to block in a close\n operation should do it in a separate thread.\nThis method calls the method close on the connector server's RMIServerImpl\n object.\nIf the RMIServerImpl was bound to a JNDI\n directory by the start method, it is unbound\n from the directory by this method."}]}