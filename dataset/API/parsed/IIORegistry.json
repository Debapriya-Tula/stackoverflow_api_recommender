{"name": "Class IIORegistry", "module": "java.desktop", "package": "javax.imageio.spi", "text": "A registry for Image I/O service provider instances.  Service provider\n classes may be discovered at runtime by the mechanisms documented in\n ServiceLoader.\n\n The intent is that it be relatively inexpensive to load and inspect\n all available Image I/O service provider classes.\n These classes may then be used to locate and instantiate\n more heavyweight classes that will perform actual work, in this\n case instances of ImageReader,\n ImageWriter, ImageTranscoder,\n ImageInputStream, and ImageOutputStream.\n\n Service providers included in the Java runtime are automatically\n loaded as soon as this class is instantiated.\n\n  When the registerApplicationClasspathSpis method\n is called, additional service provider instances will be discovered\n using ServiceLoader.\n\n  It is also possible to manually add service providers not found\n automatically, as well as to remove those that are using the\n interfaces of the ServiceRegistry class.  Thus\n the application may customize the contents of the registry as it\n sees fit.\n\n  For information on how to create and deploy service providers,\n refer to the documentation on ServiceLoader", "codes": ["public final class IIORegistry\nextends ServiceRegistry"], "fields": [], "methods": [{"method_name": "getDefaultInstance", "method_sig": "public static IIORegistry getDefaultInstance()", "description": "Returns the default IIORegistry instance used by\n the Image I/O API.  This instance should be used for all\n registry functions.\n\n  Each ThreadGroup will receive its own\n instance; this allows different Applets in the\n same browser (for example) to each have their own registry."}, {"method_name": "registerApplicationClasspathSpis", "method_sig": "public void registerApplicationClasspathSpis()", "description": "Registers all available service providers found on the\n application class path, using the default\n ClassLoader.  This method is typically invoked by\n the ImageIO.scanForPlugins method."}]}