{"name": "Class SSLServerSocket", "module": "java.base", "package": "javax.net.ssl", "text": "This class extends ServerSocket and\n provides secure server sockets using protocols such as the Secure\n Sockets Layer (SSL) or Transport Layer Security (TLS) protocols.\n \n Instances of this class are generally created using an\n SSLServerSocketFactory.  The primary function\n of an SSLServerSocket\n is to create SSLSockets by accepting\n connections.\n \n An SSLServerSocket contains several pieces of state data\n which are inherited by the SSLSocket at\n socket creation.  These include the enabled cipher\n suites and protocols, whether client\n authentication is necessary, and whether created sockets should\n begin handshaking in client or server mode.  The state\n inherited by the created SSLSocket can be\n overriden by calling the appropriate methods.", "codes": ["public abstract class SSLServerSocket\nextends ServerSocket"], "fields": [], "methods": [{"method_name": "getEnabledCipherSuites", "method_sig": "public abstract String[] getEnabledCipherSuites()", "description": "Returns the list of cipher suites which are currently enabled\n for use by newly accepted connections.\n \n If this list has not been explicitly modified, a system-provided\n default guarantees a minimum quality of service in all enabled\n cipher suites.\n \n Note that even if a suite is enabled, it may never be used. This\n can occur if the peer does not support it, or its use is restricted,\n or the requisite certificates (and private keys) for the suite are\n not available, or an anonymous suite is enabled but authentication\n is required.\n \n The returned array includes cipher suites from the list of standard\n cipher suite names in the \n JSSE Cipher Suite Names section of the Java Cryptography\n Architecture Standard Algorithm Name Documentation, and may also\n include other cipher suites that the provider supports."}, {"method_name": "setEnabledCipherSuites", "method_sig": "public abstract void setEnabledCipherSuites (String[] suites)", "description": "Sets the cipher suites enabled for use by accepted connections.\n \n The cipher suites must have been listed by getSupportedCipherSuites()\n as being supported.  Following a successful call to this method,\n only suites listed in the suites parameter are enabled\n for use.\n \n Suites that require authentication information which is not available\n in this ServerSocket's authentication context will not be used\n in any case, even if they are enabled.\n \n Note that the standard list of cipher suite names may be found in the\n \n JSSE Cipher Suite Names section of the Java Cryptography\n Architecture Standard Algorithm Name Documentation.  Providers\n may support cipher suite names not found in this list or might not\n use the recommended name for a certain cipher suite.\n \nSSLSockets returned from accept()\n inherit this setting."}, {"method_name": "getSupportedCipherSuites", "method_sig": "public abstract String[] getSupportedCipherSuites()", "description": "Returns the names of the cipher suites which could be enabled for use\n on an SSL connection.\n \n Normally, only a subset of these will actually\n be enabled by default, since this list may include cipher suites which\n do not meet quality of service requirements for those defaults.  Such\n cipher suites are useful in specialized applications.\n \n The returned array includes cipher suites from the list of standard\n cipher suite names in the \n JSSE Cipher Suite Names section of the Java Cryptography\n Architecture Standard Algorithm Name Documentation, and may also\n include other cipher suites that the provider supports."}, {"method_name": "getSupportedProtocols", "method_sig": "public abstract String[] getSupportedProtocols()", "description": "Returns the names of the protocols which could be enabled for use."}, {"method_name": "getEnabledProtocols", "method_sig": "public abstract String[] getEnabledProtocols()", "description": "Returns the names of the protocols which are currently\n enabled for use by the newly accepted connections.\n \n Note that even if a protocol is enabled, it may never be used.\n This can occur if the peer does not support the protocol, or its\n use is restricted, or there are no enabled cipher suites supported\n by the protocol."}, {"method_name": "setEnabledProtocols", "method_sig": "public abstract void setEnabledProtocols (String[] protocols)", "description": "Controls which particular protocols are enabled for use by\n accepted connections.\n \n The protocols must have been listed by\n getSupportedProtocols() as being supported.\n Following a successful call to this method, only protocols listed\n in the protocols parameter are enabled for use.\n \nSSLSockets returned from accept()\n inherit this setting."}, {"method_name": "setNeedClientAuth", "method_sig": "public abstract void setNeedClientAuth (boolean need)", "description": "Controls whether accepted server-mode\n SSLSockets will be initially configured to\n require client authentication.\n \n A socket's client authentication setting is one of the following:\n \n client authentication required\n  client authentication requested\n  no client authentication desired\n \n\n Unlike setWantClientAuth(boolean), if the accepted\n socket's option is set and the client chooses not to provide\n authentication information about itself, the negotiations\n will stop and the connection will be dropped.\n \n Calling this method overrides any previous setting made by\n this method or setWantClientAuth(boolean).\n \n The initial inherited setting may be overridden by calling\n SSLSocket.setNeedClientAuth(boolean) or\n SSLSocket.setWantClientAuth(boolean)."}, {"method_name": "getNeedClientAuth", "method_sig": "public abstract boolean getNeedClientAuth()", "description": "Returns true if client authentication will be required on\n newly accepted server-mode SSLSockets.\n \n The initial inherited setting may be overridden by calling\n SSLSocket.setNeedClientAuth(boolean) or\n SSLSocket.setWantClientAuth(boolean)."}, {"method_name": "setWantClientAuth", "method_sig": "public abstract void setWantClientAuth (boolean want)", "description": "Controls whether accepted server-mode\n SSLSockets will be initially configured to\n request client authentication.\n \n A socket's client authentication setting is one of the following:\n \n client authentication required\n  client authentication requested\n  no client authentication desired\n \n\n Unlike setNeedClientAuth(boolean), if the accepted\n socket's option is set and the client chooses not to provide\n authentication information about itself, the negotiations\n will continue.\n \n Calling this method overrides any previous setting made by\n this method or setNeedClientAuth(boolean).\n \n The initial inherited setting may be overridden by calling\n SSLSocket.setNeedClientAuth(boolean) or\n SSLSocket.setWantClientAuth(boolean)."}, {"method_name": "getWantClientAuth", "method_sig": "public abstract boolean getWantClientAuth()", "description": "Returns true if client authentication will be requested on\n newly accepted server-mode connections.\n \n The initial inherited setting may be overridden by calling\n SSLSocket.setNeedClientAuth(boolean) or\n SSLSocket.setWantClientAuth(boolean)."}, {"method_name": "setUseClientMode", "method_sig": "public abstract void setUseClientMode (boolean mode)", "description": "Controls whether accepted connections are in the (default) SSL\n server mode, or the SSL client mode.\n \n Servers normally authenticate themselves, and clients are not\n required to do so.\n \n In rare cases, TCP servers\n need to act in the SSL client mode on newly accepted\n connections. For example, FTP clients acquire server sockets\n and listen there for reverse connections from the server. An\n FTP client would use an SSLServerSocket in \"client\" mode to\n accept the reverse connection while the FTP server uses an\n SSLSocket with \"client\" mode disabled to initiate the\n connection. During the resulting handshake, existing SSL\n sessions may be reused.\n \nSSLSockets returned from accept()\n inherit this setting."}, {"method_name": "getUseClientMode", "method_sig": "public abstract boolean getUseClientMode()", "description": "Returns true if accepted connections will be in SSL client mode."}, {"method_name": "setEnableSessionCreation", "method_sig": "public abstract void setEnableSessionCreation (boolean flag)", "description": "Controls whether new SSL sessions may be established by the\n sockets which are created from this server socket.\n \nSSLSockets returned from accept()\n inherit this setting."}, {"method_name": "getEnableSessionCreation", "method_sig": "public abstract boolean getEnableSessionCreation()", "description": "Returns true if new SSL sessions may be established by the\n sockets which are created from this server socket."}, {"method_name": "getSSLParameters", "method_sig": "public SSLParameters getSSLParameters()", "description": "Returns the SSLParameters in effect for newly accepted connections.\n The ciphersuites and protocols of the returned SSLParameters\n are always non-null."}, {"method_name": "setSSLParameters", "method_sig": "public void setSSLParameters (SSLParameters params)", "description": "Applies SSLParameters to newly accepted connections.\n\n This means:\n \nIf params.getCipherSuites() is non-null,\n   setEnabledCipherSuites() is called with that value.\nIf params.getProtocols() is non-null,\n   setEnabledProtocols() is called with that value.\nIf params.getNeedClientAuth() or\n   params.getWantClientAuth() return true,\n   setNeedClientAuth(true) and\n   setWantClientAuth(true) are called, respectively;\n   otherwise setWantClientAuth(false) is called.\nIf params.getServerNames() is non-null, the socket will\n   configure its server names with that value.\nIf params.getSNIMatchers() is non-null, the socket will\n   configure its SNI matchers with that value.\n"}]}