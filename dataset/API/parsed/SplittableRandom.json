{"name": "Class SplittableRandom", "module": "java.base", "package": "java.util", "text": "A generator of uniform pseudorandom values applicable for use in\n (among other contexts) isolated parallel computations that may\n generate subtasks. Class SplittableRandom supports methods for\n producing pseudorandom numbers of type int, long,\n and double with similar usages as for class\n Random but differs in the following ways:\n\n \nSeries of generated values pass the DieHarder suite testing\n independence and uniformity properties of random number generators.\n (Most recently validated with  version\n 3.31.1.) These tests validate only the methods for certain\n types and ranges, but similar properties are expected to hold, at\n least approximately, for others as well. The period\n (length of any series of generated values before it repeats) is at\n least 264.\n\n Method split() constructs and returns a new\n SplittableRandom instance that shares no mutable state with the\n current instance. However, with very high probability, the\n values collectively generated by the two objects have the same\n statistical properties as if the same quantity of values were\n generated by a single thread using a single \n SplittableRandom object.\n\n Instances of SplittableRandom are not thread-safe.\n They are designed to be split, not shared, across threads. For\n example, a fork/join-style computation using random numbers might include a\n construction of the form new\n Subtask(aSplittableRandom.split()).fork().\n\n This class provides additional methods for generating random\n streams, that employ the above techniques when used in \n stream.parallel() mode.\n\n \nInstances of SplittableRandom are not cryptographically\n secure.  Consider instead using SecureRandom\n in security-sensitive applications. Additionally,\n default-constructed instances do not use a cryptographically random\n seed unless the system property\njava.util.secureRandomSeed is set to true.", "codes": ["public final class SplittableRandom\nextends Object"], "fields": [], "methods": [{"method_name": "split", "method_sig": "public SplittableRandom split()", "description": "Constructs and returns a new SplittableRandom instance that\n shares no mutable state with this instance. However, with very\n high probability, the set of values collectively generated by\n the two objects has the same statistical properties as if the\n same quantity of values were generated by a single thread using\n a single SplittableRandom object.  Either or both of the two\n objects may be further split using the split() method,\n and the same expected statistical properties apply to the\n entire set of generators constructed by such recursive\n splitting."}, {"method_name": "nextBytes", "method_sig": "public void nextBytes (byte[] bytes)", "description": "Fills a user-supplied byte array with generated pseudorandom bytes."}, {"method_name": "nextInt", "method_sig": "public int nextInt()", "description": "Returns a pseudorandom int value."}, {"method_name": "nextInt", "method_sig": "public int nextInt (int bound)", "description": "Returns a pseudorandom int value between zero (inclusive)\n and the specified bound (exclusive)."}, {"method_name": "nextInt", "method_sig": "public int nextInt (int origin,\n                   int bound)", "description": "Returns a pseudorandom int value between the specified\n origin (inclusive) and the specified bound (exclusive)."}, {"method_name": "nextLong", "method_sig": "public long nextLong()", "description": "Returns a pseudorandom long value."}, {"method_name": "nextLong", "method_sig": "public long nextLong (long bound)", "description": "Returns a pseudorandom long value between zero (inclusive)\n and the specified bound (exclusive)."}, {"method_name": "nextLong", "method_sig": "public long nextLong (long origin,\n                     long bound)", "description": "Returns a pseudorandom long value between the specified\n origin (inclusive) and the specified bound (exclusive)."}, {"method_name": "nextDouble", "method_sig": "public double nextDouble()", "description": "Returns a pseudorandom double value between zero\n (inclusive) and one (exclusive)."}, {"method_name": "nextDouble", "method_sig": "public double nextDouble (double bound)", "description": "Returns a pseudorandom double value between 0.0\n (inclusive) and the specified bound (exclusive)."}, {"method_name": "nextDouble", "method_sig": "public double nextDouble (double origin,\n                         double bound)", "description": "Returns a pseudorandom double value between the specified\n origin (inclusive) and bound (exclusive)."}, {"method_name": "nextBoolean", "method_sig": "public boolean nextBoolean()", "description": "Returns a pseudorandom boolean value."}, {"method_name": "ints", "method_sig": "public IntStream ints (long streamSize)", "description": "Returns a stream producing the given streamSize number\n of pseudorandom int values from this generator and/or\n one split from it."}, {"method_name": "ints", "method_sig": "public IntStream ints()", "description": "Returns an effectively unlimited stream of pseudorandom int\n values from this generator and/or one split from it."}, {"method_name": "ints", "method_sig": "public IntStream ints (long streamSize,\n                      int randomNumberOrigin,\n                      int randomNumberBound)", "description": "Returns a stream producing the given streamSize number\n of pseudorandom int values from this generator and/or one split\n from it; each value conforms to the given origin (inclusive) and bound\n (exclusive)."}, {"method_name": "ints", "method_sig": "public IntStream ints (int randomNumberOrigin,\n                      int randomNumberBound)", "description": "Returns an effectively unlimited stream of pseudorandom \n int values from this generator and/or one split from it; each value\n conforms to the given origin (inclusive) and bound (exclusive)."}, {"method_name": "longs", "method_sig": "public LongStream longs (long streamSize)", "description": "Returns a stream producing the given streamSize number\n of pseudorandom long values from this generator and/or\n one split from it."}, {"method_name": "longs", "method_sig": "public LongStream longs()", "description": "Returns an effectively unlimited stream of pseudorandom \n long values from this generator and/or one split from it."}, {"method_name": "longs", "method_sig": "public LongStream longs (long streamSize,\n                        long randomNumberOrigin,\n                        long randomNumberBound)", "description": "Returns a stream producing the given streamSize number of\n pseudorandom long values from this generator and/or one split\n from it; each value conforms to the given origin (inclusive) and bound\n (exclusive)."}, {"method_name": "longs", "method_sig": "public LongStream longs (long randomNumberOrigin,\n                        long randomNumberBound)", "description": "Returns an effectively unlimited stream of pseudorandom \n long values from this generator and/or one split from it; each value\n conforms to the given origin (inclusive) and bound (exclusive)."}, {"method_name": "doubles", "method_sig": "public DoubleStream doubles (long streamSize)", "description": "Returns a stream producing the given streamSize number of\n pseudorandom double values from this generator and/or one split\n from it; each value is between zero (inclusive) and one (exclusive)."}, {"method_name": "doubles", "method_sig": "public DoubleStream doubles()", "description": "Returns an effectively unlimited stream of pseudorandom \n double values from this generator and/or one split from it; each value\n is between zero (inclusive) and one (exclusive)."}, {"method_name": "doubles", "method_sig": "public DoubleStream doubles (long streamSize,\n                            double randomNumberOrigin,\n                            double randomNumberBound)", "description": "Returns a stream producing the given streamSize number of\n pseudorandom double values from this generator and/or one split\n from it; each value conforms to the given origin (inclusive) and bound\n (exclusive)."}, {"method_name": "doubles", "method_sig": "public DoubleStream doubles (double randomNumberOrigin,\n                            double randomNumberBound)", "description": "Returns an effectively unlimited stream of pseudorandom \n double values from this generator and/or one split from it; each value\n conforms to the given origin (inclusive) and bound (exclusive)."}]}