{"name": "Interface JavaCompiler", "module": "java.compiler", "package": "javax.tools", "text": "Interface to invoke Java\u2122 programming language compilers from\n programs.\n\n The compiler might generate diagnostics during compilation (for\n example, error messages).  If a diagnostic listener is provided,\n the diagnostics will be supplied to the listener.  If no listener\n is provided, the diagnostics will be formatted in an unspecified\n format and written to the default output, which is \n System.err unless otherwise specified.  Even if a diagnostic\n listener is supplied, some diagnostics might not fit in a \n Diagnostic and will be written to the default output.\n\n A compiler tool has an associated standard file manager, which\n is the file manager that is native to the tool (or built-in).  The\n standard file manager can be obtained by calling getStandardFileManager.\n\n A compiler tool must function with any file manager as long as\n any additional requirements as detailed in the methods below are\n met.  If no file manager is provided, the compiler tool will use a\n standard file manager such as the one returned by getStandardFileManager.\n\n An instance implementing this interface must conform to\n The Java\u2122 Language Specification\n and generate class files conforming to\n The Java\u2122 Virtual Machine Specification.\n The versions of these\n specifications are defined in the Tool interface.\n\n Additionally, an instance of this interface supporting SourceVersion.RELEASE_6\n or higher must also support annotation processing.\n\n The compiler relies on two services: diagnostic listener and file manager.  Although most classes and\n interfaces in this package defines an API for compilers (and\n tools in general) the interfaces DiagnosticListener,\n JavaFileManager, FileObject, and\n JavaFileObject are not intended to be used in\n applications.  Instead these interfaces are intended to be\n implemented and used to provide customized services for a\n compiler and thus defines an SPI for compilers.\n\n There are a number of classes and interfaces in this package\n which are designed to ease the implementation of the SPI to\n customize the behavior of a compiler:\n\n \nStandardJavaFileManager\n\n\n     Every compiler which implements this interface provides a\n     standard file manager for operating on regular files.  The StandardJavaFileManager interface\n     defines additional methods for creating file objects from\n     regular files.\n\n     The standard file manager serves two purposes:\n\n     \nbasic building block for customizing how a compiler reads\n       and writes files\nsharing between multiple compilation tasks\n\nReusing a file manager can potentially reduce overhead of\n     scanning the file system and reading jar files.  Although there\n     might be no reduction in overhead, a standard file manager must\n     work with multiple sequential compilations making the following\n     example a recommended coding pattern:\n\n     \n       File[] files1 = ... ; // input for first compilation task\n       File[] files2 = ... ; // input for second compilation task\n\n       JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();\n       StandardJavaFileManager fileManager = compiler.getStandardFileManager(null, null, null);\n\n       Iterable<? extends JavaFileObject> compilationUnits1 =\n           fileManager.getJavaFileObjectsFromFiles(Arrays.asList(files1));\n       compiler.getTask(null, fileManager, null, null, null, compilationUnits1).call();\n\n       Iterable<? extends JavaFileObject> compilationUnits2 =\n           fileManager.getJavaFileObjects(files2); // use alternative method\n       // reuse the same file manager to allow caching of jar files\n       compiler.getTask(null, fileManager, null, null, null, compilationUnits2).call();\n\n       fileManager.close();\n\nDiagnosticCollector\n\n     Used to collect diagnostics in a list, for example:\n     \n       Iterable<? extends JavaFileObject> compilationUnits = ...;\n       JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();\n       DiagnosticCollector<JavaFileObject> diagnostics = new DiagnosticCollector<JavaFileObject>();\n       StandardJavaFileManager fileManager = compiler.getStandardFileManager(diagnostics, null, null);\n       compiler.getTask(null, fileManager, diagnostics, null, null, compilationUnits).call();\n\n       for (Diagnostic<? extends JavaFileObject> diagnostic : diagnostics.getDiagnostics())\n           System.out.format(\"Error on line %d in %s%n\",\n                             diagnostic.getLineNumber(),\n                             diagnostic.getSource().toUri());\n\n       fileManager.close();\n\n\nForwardingJavaFileManager, ForwardingFileObject, and\n     ForwardingJavaFileObject\n\n\n\n     Subclassing is not available for overriding the behavior of a\n     standard file manager as it is created by calling a method on a\n     compiler, not by invoking a constructor.  Instead forwarding\n     (or delegation) should be used.  These classes makes it easy to\n     forward most calls to a given file manager or file object while\n     allowing customizing behavior.  For example, consider how to\n     log all calls to JavaFileManager.flush():\n\n     \n       final  Logger logger = ...;\n       Iterable<? extends JavaFileObject> compilationUnits = ...;\n       JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();\n       StandardJavaFileManager stdFileManager = compiler.getStandardFileManager(null, null, null);\n       JavaFileManager fileManager = new ForwardingJavaFileManager(stdFileManager) {\n           public void flush() throws IOException {\n               logger.entering(StandardJavaFileManager.class.getName(), \"flush\");\n               super.flush();\n               logger.exiting(StandardJavaFileManager.class.getName(), \"flush\");\n           }\n       };\n       compiler.getTask(null, fileManager, null, null, null, compilationUnits).call();\n\nSimpleJavaFileObject\n\n\n     This class provides a basic file object implementation which\n     can be used as building block for creating file objects.  For\n     example, here is how to define a file object which represent\n     source code stored in a string:\n\n     \n       /**\n        * A file object used to represent source coming from a string.\n        */\n       public class JavaSourceFromString extends SimpleJavaFileObject {\n           /**\n            * The source code of this \"file\".\n            */\n           final String code;\n\n           /**\n            * Constructs a new JavaSourceFromString.\n            * @param name the name of the compilation unit represented by this file object\n            * @param code the source code for the compilation unit represented by this file object\n            */\n           JavaSourceFromString(String name, String code) {\n               super(URI.create(\"string:///\" + name.replace('.','/') + Kind.SOURCE.extension),\n                     Kind.SOURCE);\n               this.code = code;\n           }\n\n           @Override\n           public CharSequence getCharContent(boolean ignoreEncodingErrors) {\n               return code;\n           }\n       }\n\n", "codes": ["public interface JavaCompiler\nextends Tool, OptionChecker"], "fields": [], "methods": [{"method_name": "getTask", "method_sig": "JavaCompiler.CompilationTask getTask (Writer out,\n                                     JavaFileManager fileManager,\n                                     DiagnosticListener<? super JavaFileObject> diagnosticListener,\n                                     Iterable<String> options,\n                                     Iterable<String> classes,\n                                     Iterable<? extends JavaFileObject> compilationUnits)", "description": "Creates a future for a compilation task with the given\n components and arguments.  The compilation might not have\n completed as described in the CompilationTask interface.\n\n If a file manager is provided, it must be able to handle all\n locations defined in StandardLocation.\n\n Note that annotation processing can process both the\n compilation units of source code to be compiled, passed with\n the compilationUnits parameter, as well as class\n files, whose names are passed with the classes\n parameter."}, {"method_name": "getStandardFileManager", "method_sig": "StandardJavaFileManager getStandardFileManager (DiagnosticListener<? super JavaFileObject> diagnosticListener,\n                                               Locale locale,\n                                               Charset charset)", "description": "Returns a new instance of the standard file manager implementation\n for this tool.  The file manager will use the given diagnostic\n listener for producing any non-fatal diagnostics.  Fatal errors\n will be signaled with the appropriate exceptions.\n\n The standard file manager will be automatically reopened if\n it is accessed after calls to flush or close.\n The standard file manager must be usable with other tools."}]}