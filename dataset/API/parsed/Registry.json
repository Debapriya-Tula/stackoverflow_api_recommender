{"name": "Interface Registry", "module": "java.rmi", "package": "java.rmi.registry", "text": "Registry is a remote interface to a simple remote\n object registry that provides methods for storing and retrieving\n remote object references bound with arbitrary string names.  The\n bind, unbind, and rebind\n methods are used to alter the name bindings in the registry, and\n the lookup and list methods are used to\n query the current name bindings.\n\n In its typical usage, a Registry enables RMI client\n bootstrapping: it provides a simple means for a client to obtain an\n initial reference to a remote object.  Therefore, a registry's\n remote object implementation is typically exported with a\n well-known address, such as with a well-known ObjID and TCP port number\n (default is 1099).\n\n The LocateRegistry class provides a programmatic API for\n constructing a bootstrap reference to a Registry at a\n remote address (see the static getRegistry methods)\n and for creating and exporting a Registry in the\n current VM on a particular local address (see the static\n createRegistry methods).\n\n A Registry implementation may choose to restrict\n access to some or all of its methods (for example, methods that\n mutate the registry's bindings may be restricted to calls\n originating from the local host).  If a Registry\n method chooses to deny access for a given invocation, its\n implementation may throw AccessException, which\n (because it extends RemoteException) will be\n wrapped in a ServerException when caught by a\n remote client.\n\n The names used for bindings in a Registry are pure\n strings, not parsed.  A service which stores its remote reference\n in a Registry may wish to use a package name as a\n prefix in the name binding to reduce the likelihood of name\n collisions in the registry.", "codes": ["public interface Registry\nextends Remote"], "fields": [{"field_name": "REGISTRY_PORT", "field_sig": "static final\u00a0int REGISTRY_PORT", "description": "Well known port for registry."}], "methods": [{"method_name": "lookup", "method_sig": "Remote lookup (String name)\n       throws RemoteException,\n              NotBoundException,\n              AccessException", "description": "Returns the remote reference bound to the specified\n name in this registry."}, {"method_name": "bind", "method_sig": "void bind (String name,\n          Remote obj)\n   throws RemoteException,\n          AlreadyBoundException,\n          AccessException", "description": "Binds a remote reference to the specified name in\n this registry."}, {"method_name": "unbind", "method_sig": "void unbind (String name)\n     throws RemoteException,\n            NotBoundException,\n            AccessException", "description": "Removes the binding for the specified name in\n this registry."}, {"method_name": "rebind", "method_sig": "void rebind (String name,\n            Remote obj)\n     throws RemoteException,\n            AccessException", "description": "Replaces the binding for the specified name in\n this registry with the supplied remote reference.  If there is\n an existing binding for the specified name, it is\n discarded."}, {"method_name": "list", "method_sig": "String[] list()\n       throws RemoteException,\n              AccessException", "description": "Returns an array of the names bound in this registry.  The\n array will contain a snapshot of the names bound in this\n registry at the time of the given invocation of this method."}]}