{"name": "Interface Pack200.Unpacker", "module": "java.base", "package": "java.util.jar", "text": "The unpacker engine converts the packed stream to a JAR file.\n An instance of the engine can be obtained\n using Pack200.newUnpacker().\n \n Every JAR file produced by this engine will include the string\n \"PACK200\" as a zip file comment.\n This allows a deployer to detect if a JAR archive was packed and unpacked.\n \n Note: Unless otherwise noted, passing a null argument to a\n constructor or method in this class will cause a NullPointerException\n to be thrown.\n \n This version of the unpacker is compatible with all previous versions.", "codes": ["@Deprecated(since=\"11\",\n            forRemoval=true)\npublic static interface Pack200.Unpacker"], "fields": [{"field_name": "KEEP", "field_sig": "static final\u00a0String KEEP", "description": "The string \"keep\", a possible value for certain properties."}, {"field_name": "TRUE", "field_sig": "static final\u00a0String TRUE", "description": "The string \"true\", a possible value for certain properties."}, {"field_name": "FALSE", "field_sig": "static final\u00a0String FALSE", "description": "The string \"false\", a possible value for certain properties."}, {"field_name": "DEFLATE_HINT", "field_sig": "static final\u00a0String DEFLATE_HINT", "description": "Property indicating that the unpacker should\n ignore all transmitted values for DEFLATE_HINT,\n replacing them by the given value, TRUE or FALSE.\n The default value is the special string KEEP,\n which asks the unpacker to preserve all transmitted\n deflation hints."}, {"field_name": "PROGRESS", "field_sig": "static final\u00a0String PROGRESS", "description": "The unpacker's progress as a percentage, as periodically\n updated by the unpacker.\n Values of 0 - 100 are normal, and -1 indicates a stall.\n Progress can be monitored by polling the value of this\n property.\n \n At a minimum, the unpacker must set progress to 0\n at the beginning of an unpacking operation, and to 100\n at the end."}], "methods": [{"method_name": "properties", "method_sig": "SortedMap<String, String> properties()", "description": "Get the set of this engine's properties. This set is\n a \"live view\", so that changing its\n contents immediately affects the Unpacker engine, and\n changes from the engine (such as progress indications)\n are immediately visible in the map.\n\n The property map may contain pre-defined implementation\n specific and default properties.  Users are encouraged to\n read the information and fully understand the implications,\n before modifying pre-existing properties.\n \n Implementation specific properties are prefixed with a\n package name associated with the implementor, beginning\n with com. or a similar prefix.\n All property names beginning with pack. and\n unpack. are reserved for use by this API.\n \n Unknown properties may be ignored or rejected with an\n unspecified error, and invalid entries may cause an\n unspecified error to be thrown."}, {"method_name": "unpack", "method_sig": "void unpack (InputStream in,\n            JarOutputStream out)\n     throws IOException", "description": "Read a Pack200 archive, and write the encoded JAR to\n a JarOutputStream.\n The entire contents of the input stream will be read.\n It may be more efficient to read the Pack200 archive\n to a file and pass the File object, using the alternate\n method described below.\n \n Closes its input but not its output.  (The output can accumulate more elements.)"}, {"method_name": "unpack", "method_sig": "void unpack (File in,\n            JarOutputStream out)\n     throws IOException", "description": "Read a Pack200 archive, and write the encoded JAR to\n a JarOutputStream.\n \n Does not close its output.  (The output can accumulate more elements.)"}]}