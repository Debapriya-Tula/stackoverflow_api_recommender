{"name": "Class VirtualMachine", "module": "jdk.attach", "package": "com.sun.tools.attach", "text": "A Java virtual machine.\n\n  A VirtualMachine represents a Java virtual machine to which this\n Java virtual machine has attached. The Java virtual machine to which it is\n attached is sometimes called the target virtual machine, or target VM.\n An application (typically a tool such as a managemet console or profiler) uses a\n VirtualMachine to load an agent into the target VM. For example, a profiler tool\n written in the Java Language might attach to a running application and load its\n profiler agent to profile the running application. \n A VirtualMachine is obtained by invoking the attach method\n with an identifier that identifies the target virtual machine. The identifier is\n implementation-dependent but is typically the process identifier (or pid) in\n environments where each Java virtual machine runs in its own operating system process.\n Alternatively, a VirtualMachine instance is obtained by invoking the\n attach method with a VirtualMachineDescriptor obtained\n from the list of virtual machine descriptors returned by the list method.\n Once a reference to a virtual machine is obtained, the loadAgent,\n loadAgentLibrary, and loadAgentPath\n methods are used to load agents into target virtual machine. The loadAgent method is used to load agents that are written in the Java\n Language and deployed in a JAR file. (See\n java.lang.instrument for a detailed description on how these agents\n are loaded and started). The loadAgentLibrary and\n loadAgentPath methods are used to load agents that\n are deployed either in a dynamic library or statically linked into the VM and\n make use of the JVM Tools Interface.\n \n In addition to loading agents a VirtualMachine provides read access to the\n system properties in the target VM.\n This can be useful in some environments where properties such as\n java.home, os.name, or os.arch are\n used to construct the path to agent that will be loaded into the target VM.\n\n  The following example demonstrates how VirtualMachine may be used:\n\n\n      // attach to target VM\n      VirtualMachine vm = VirtualMachine.attach(\"2177\");\n\n      // start management agent\n      Properties props = new Properties();\n      props.put(\"com.sun.management.jmxremote.port\", \"5000\");\n      vm.startManagementAgent(props);\n\n      // detach\n      vm.detach();\n\n \n In this example we attach to a Java virtual machine that is identified by\n the process identifier 2177. Then the JMX management agent is\n started in the target process using the supplied arguments. Finally, the\n client detaches from the target VM. \n A VirtualMachine is safe for use by multiple concurrent threads. ", "codes": ["public abstract class VirtualMachine\nextends Object"], "fields": [], "methods": [{"method_name": "list", "method_sig": "public static List<VirtualMachineDescriptor> list()", "description": "Return a list of Java virtual machines.\n\n  This method returns a list of Java VirtualMachineDescriptor elements.\n The list is an aggregation of the virtual machine\n descriptor lists obtained by invoking the listVirtualMachines method of all installed\n attach providers.\n If there are no Java virtual machines known to any provider\n then an empty list is returned."}, {"method_name": "attach", "method_sig": "public static VirtualMachine attach (String id)\n                             throws AttachNotSupportedException,\n                                    IOException", "description": "Attaches to a Java virtual machine.\n\n  This method obtains the list of attach providers by invoking the\n AttachProvider.providers() method. It then iterates overs the list\n and invokes each provider's attachVirtualMachine method in turn. If a provider successfully\n attaches then the iteration terminates, and the VirtualMachine created\n by the provider that successfully attached is returned by this method.\n If the attachVirtualMachine method of all providers throws\n AttachNotSupportedException\n then this method also throws AttachNotSupportedException.\n This means that AttachNotSupportedException is thrown when\n the identifier provided to this method is invalid, or the identifier\n corresponds to a Java virtual machine that does not exist, or none\n of the providers can attach to it. This exception is also thrown if\n AttachProvider.providers() returns an empty list. "}, {"method_name": "attach", "method_sig": "public static VirtualMachine attach (VirtualMachineDescriptor vmd)\n                             throws AttachNotSupportedException,\n                                    IOException", "description": "Attaches to a Java virtual machine.\n\n  This method first invokes the provider() method\n of the given virtual machine descriptor to obtain the attach provider. It\n then invokes the attach provider's attachVirtualMachine to attach to the target VM."}, {"method_name": "detach", "method_sig": "public abstract void detach()\n                     throws IOException", "description": "Detach from the virtual machine.\n\n  After detaching from the virtual machine, any further attempt to invoke\n operations on that virtual machine will cause an IOException to be thrown. If an operation (such as loadAgent for example) is in progress when this method is invoked then\n the behaviour is implementation dependent. In other words, it is\n implementation specific if the operation completes or throws\n IOException.\n\n  If already detached from the virtual machine then invoking this\n method has no effect. "}, {"method_name": "provider", "method_sig": "public final AttachProvider provider()", "description": "Returns the provider that created this virtual machine."}, {"method_name": "id", "method_sig": "public final String id()", "description": "Returns the identifier for this Java virtual machine."}, {"method_name": "loadAgentLibrary", "method_sig": "public abstract void loadAgentLibrary (String agentLibrary,\n                                      String options)\n                               throws AgentLoadException,\n                                      AgentInitializationException,\n                                      IOException", "description": "Loads an agent library.\n\n  A JVM TI\n client is called an agent. It is developed in a native language.\n A JVM TI agent is deployed in a platform specific manner but it is typically the\n platform equivalent of a dynamic library. Alternatively, it may be statically linked into the VM.\n This method causes the given agent library to be loaded into the target\n VM (if not already loaded or if not statically linked into the VM).\n It then causes the target VM to invoke the Agent_OnAttach function\n or, for a statically linked agent named 'L', the Agent_OnAttach_L function\n as specified in the\n JVM Tools Interface specification.\n Note that the Agent_OnAttach[_L]\n function is invoked even if the agent library was loaded prior to invoking\n this method.\n\n  The agent library provided is the name of the agent library. It is interpreted\n in the target virtual machine in an implementation-dependent manner. Typically an\n implementation will expand the library name into an operating system specific file\n name. For example, on UNIX systems, the name L might be expanded to\n libL.so, and located using the search path specified by the\n LD_LIBRARY_PATH environment variable. If the agent named 'L' is\n statically linked into the VM then the VM must export a function named\n Agent_OnAttach_L.\n If the Agent_OnAttach[_L] function in the agent library returns\n an error then an AgentInitializationException is\n thrown. The return value from the Agent_OnAttach[_L] can then be\n obtained by invoking the returnValue\n method on the exception. "}, {"method_name": "loadAgentLibrary", "method_sig": "public void loadAgentLibrary (String agentLibrary)\n                      throws AgentLoadException,\n                             AgentInitializationException,\n                             IOException", "description": "Loads an agent library.\n\n  This convenience method works as if by invoking:\n\n \nloadAgentLibrary(agentLibrary,\u00a0null);\n "}, {"method_name": "loadAgentPath", "method_sig": "public abstract void loadAgentPath (String agentPath,\n                                   String options)\n                            throws AgentLoadException,\n                                   AgentInitializationException,\n                                   IOException", "description": "Load a native agent library by full pathname.\n\n  A JVM TI\n client is called an agent. It is developed in a native language.\n A JVM TI agent is deployed in a platform specific manner but it is typically the\n platform equivalent of a dynamic library. Alternatively, the native\n library specified by the agentPath parameter may be statically\n linked with the VM. The parsing of the agentPath parameter into\n a statically linked library name is done in a platform\n specific manner in the VM. For example, in UNIX, an agentPath parameter\n of /a/b/libL.so would name a library 'L'.\n\n See the JVM TI Specification for more details.\n\n This method causes the given agent library to be loaded into the target\n VM (if not already loaded or if not statically linked into the VM).\n It then causes the target VM to invoke the Agent_OnAttach\n function or, for a statically linked agent named 'L', the\n Agent_OnAttach_L function as specified in the\n JVM Tools Interface specification.\n Note that the Agent_OnAttach[_L]\n function is invoked even if the agent library was loaded prior to invoking\n this method.\n\n  The agent library provided is the absolute path from which to load the\n agent library. Unlike loadAgentLibrary, the library name\n is not expanded in the target virtual machine. \n If the Agent_OnAttach[_L] function in the agent library returns\n an error then an AgentInitializationException is\n thrown. The return value from the Agent_OnAttach[_L] can then be\n obtained by invoking the returnValue\n method on the exception. "}, {"method_name": "loadAgentPath", "method_sig": "public void loadAgentPath (String agentPath)\n                   throws AgentLoadException,\n                          AgentInitializationException,\n                          IOException", "description": "Load a native agent library by full pathname.\n\n  This convenience method works as if by invoking:\n\n \nloadAgentPath(agentLibrary,\u00a0null);\n "}, {"method_name": "loadAgent", "method_sig": "public abstract void loadAgent (String agent,\n                               String options)\n                        throws AgentLoadException,\n                               AgentInitializationException,\n                               IOException", "description": "Loads an agent.\n\n  The agent provided to this method is a path name to a JAR file on the file\n system of the target virtual machine. This path is passed to the target virtual\n machine where it is interpreted. The target virtual machine attempts to start\n the agent as specified by the java.lang.instrument specification.\n That is, the specified JAR file is added to the system class path (of the target\n virtual machine), and the agentmain method of the agent class, specified\n by the Agent-Class attribute in the JAR manifest, is invoked. This\n method completes when the agentmain method completes."}, {"method_name": "loadAgent", "method_sig": "public void loadAgent (String agent)\n               throws AgentLoadException,\n                      AgentInitializationException,\n                      IOException", "description": "Loads an agent.\n\n  This convenience method works as if by invoking:\n\n \nloadAgent(agent,\u00a0null);\n "}, {"method_name": "getSystemProperties", "method_sig": "public abstract Properties getSystemProperties()\n                                        throws IOException", "description": "Returns the current system properties in the target virtual machine.\n\n  This method returns the system properties in the target virtual\n machine. Properties whose key or value is not a String are\n omitted. The method is approximately equivalent to the invocation of the\n method System.getProperties\n in the target virtual machine except that properties with a key or\n value that is not a String are not included.\n\n  This method is typically used to decide which agent to load into\n the target virtual machine with loadAgent, or\n loadAgentLibrary. For example, the\n java.home or user.dir properties might be\n use to create the path to the agent library or JAR file."}, {"method_name": "getAgentProperties", "method_sig": "public abstract Properties getAgentProperties()\n                                       throws IOException", "description": "Returns the current agent properties in the target virtual\n machine.\n\n  The target virtual machine can maintain a list of properties on\n behalf of agents. The manner in which this is done, the names of the\n properties, and the types of values that are allowed, is implementation\n specific. Agent properties are typically used to store communication\n end-points and other agent configuration details. For example, a debugger\n agent might create an agent property for its transport address.\n\n  This method returns the agent properties whose key and value is a\n String. Properties whose key or value is not a String\n are omitted. If there are no agent properties maintained in the target\n virtual machine then an empty property list is returned."}, {"method_name": "startManagementAgent", "method_sig": "public abstract void startManagementAgent (Properties agentProperties)\n                                   throws IOException", "description": "Starts the JMX management agent in the target virtual machine.\n\n  The configuration properties are the same as those specified on\n the command line when starting the JMX management agent. In the same\n way as on the command line, you need to specify at least the\n com.sun.management.jmxremote.port property.\n\n  See the online documentation for\n Monitoring and Management Using JMX Technology for further details."}, {"method_name": "startLocalManagementAgent", "method_sig": "public abstract String startLocalManagementAgent()\n                                          throws IOException", "description": "Starts the local JMX management agent in the target virtual machine.\n\n  See the online documentation for\n Monitoring and Management Using JMX Technology for further details."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Returns a hash-code value for this VirtualMachine. The hash\n code is based upon the VirtualMachine's components, and satifies\n the general contract of the Object.hashCode method."}, {"method_name": "equals", "method_sig": "public boolean equals (Object ob)", "description": "Tests this VirtualMachine for equality with another object.\n\n  If the given object is not a VirtualMachine then this\n method returns false. For two VirtualMachines to\n be considered equal requires that they both reference the same\n provider, and their identifiers are equal. \n This method satisfies the general contract of the Object.equals method. "}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns the string representation of the VirtualMachine."}]}