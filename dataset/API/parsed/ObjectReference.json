{"name": "Interface ObjectReference", "module": "jdk.jdi", "package": "com.sun.jdi", "text": "An object that currently exists in the target VM. An ObjectReference\n mirrors only the object itself and is not specific to any\n Field or LocalVariable to which it is currently\n assigned. An ObjectReference can have 0 or more references from\n field(s) and/or variable(s).\n \n Any method on ObjectReference which directly or indirectly\n takes ObjectReference as a parameter may throw\n VMDisconnectedException if the target VM is disconnected and the\n VMDisconnectEvent has been or is available to be read from the\n EventQueue.\n \n Any method on ObjectReference which directly or indirectly\n takes ObjectReference as a parameter may throw\n VMOutOfMemoryException if the target VM has run out of memory.\n \n Any method on ObjectReference or which directly or indirectly\n takes ObjectReference as parameter may throw\n ObjectCollectedException if the mirrored object has been\n garbage collected.", "codes": ["public interface ObjectReference\nextends Value"], "fields": [{"field_name": "INVOKE_SINGLE_THREADED", "field_sig": "static final\u00a0int INVOKE_SINGLE_THREADED", "description": "Perform method invocation with only the invoking thread resumed"}, {"field_name": "INVOKE_NONVIRTUAL", "field_sig": "static final\u00a0int INVOKE_NONVIRTUAL", "description": "Perform non-virtual method invocation"}], "methods": [{"method_name": "referenceType", "method_sig": "ReferenceType referenceType()", "description": "Gets the ReferenceType that mirrors the type\n of this object. The type may be a subclass or implementor of the\n declared type of any field or variable which currently holds it.\n For example, right after the following statement.\n \nObject obj = new String(\"Hello, world!\");\n\n The ReferenceType of obj will mirror java.lang.String and not\n java.lang.Object.\n \n The type of an object never changes, so this method will\n always return the same ReferenceType over the lifetime of the\n mirrored object.\n \n The returned ReferenceType will be a ClassType or\n ArrayType and never an InterfaceType."}, {"method_name": "getValue", "method_sig": "Value getValue (Field sig)", "description": "Gets the value of a given instance or static field in this object.\n The Field must be valid for this ObjectReference;\n that is, it must be from\n the mirrored object's class or a superclass of that class."}, {"method_name": "getValues", "method_sig": "Map<Field, Value> getValues (List<? extends Field> fields)", "description": "Gets the value of multiple instance and/or static fields in this object.\n The Fields must be valid for this ObjectReference;\n that is, they must be from\n the mirrored object's class or a superclass of that class."}, {"method_name": "setValue", "method_sig": "void setValue (Field field,\n              Value value)\n       throws InvalidTypeException,\n              ClassNotLoadedException", "description": "Sets the value of a given instance or static field in this object.\n The Field must be valid for this ObjectReference; that is,\n it must be from the mirrored object's class or a superclass of that class.\n If static, the field must not be final.\n \n Object values must be assignment compatible with the field type\n (This implies that the field type must be loaded through the\n enclosing class's class loader). Primitive values must be\n either assignment compatible with the field type or must be\n convertible to the field type without loss of information.\n See section 5.2 of\n The Java\u2122 Language Specification\n for more information on assignment\n compatibility."}, {"method_name": "invokeMethod", "method_sig": "Value invokeMethod (ThreadReference thread,\n                   Method method,\n                   List<? extends Value> arguments,\n                   int options)\n            throws InvalidTypeException,\n                   ClassNotLoadedException,\n                   IncompatibleThreadStateException,\n                   InvocationException", "description": "Invokes the specified Method on this object in the\n target VM. The\n specified method can be defined in this object's class,\n in a superclass of this object's class, or in an interface\n implemented by this object. The method may be a static method\n or an instance method, but not a static initializer or constructor.\n Use ClassType.newInstance(com.sun.jdi.ThreadReference, com.sun.jdi.Method, java.util.List<? extends com.sun.jdi.Value>, int) to create a new object and\n run its constructor.\n \n The method invocation will occur in the specified thread.\n Method invocation can occur only if the specified thread\n has been suspended by an event which occurred in that thread.\n Method invocation is not supported\n when the target VM has been suspended through\n VirtualMachine.suspend() or when the specified thread\n is suspended through ThreadReference.suspend().\n \n The specified method is invoked with the arguments in the specified\n argument list.  The method invocation is synchronous; this method\n does not return until the invoked method returns in the target VM.\n If the invoked method throws an exception, this method\n will throw an InvocationException which contains\n a mirror to the exception object thrown.\n \n Object arguments must be assignment compatible with the argument type\n (This implies that the argument type must be loaded through the\n enclosing class's class loader). Primitive arguments must be\n either assignment compatible with the argument type or must be\n convertible to the argument type without loss of information.\n If the method being called accepts a variable number of arguments,\n then the last argument type is an array of some component type.\n The argument in the matching position can be omitted, or can be null,\n an array of the same component type, or an argument of the\n component type followed by any number of other arguments of the same\n type. If the argument is omitted, then a 0 length array of the\n component type is passed.  The component type can be a primitive type.\n Autoboxing is not supported.\n\n See section 5.2 of\n The Java\u2122 Language Specification\n for more information on assignment compatibility.\n \n By default, the method is invoked using dynamic lookup as\n documented in section 15.12.4.4 of\n The Java\u2122 Language Specification\n in particular, overriding based on the runtime type of the object\n mirrored by this ObjectReference will occur. This\n behavior can be changed by specifying the\n INVOKE_NONVIRTUAL bit flag in the options\n argument. If this flag is set, the specified method is invoked\n whether or not it is overridden for this object's runtime type.\n The method, in this case, must have an implementation, either in a class\n or an interface. This option is useful for performing method invocations\n like those done with the super keyword in the Java programming\n language.\n \n By default, all threads in the target VM are resumed while\n the method is being invoked if they were previously\n suspended by an event or by VirtualMachine.suspend() or\n ThreadReference.suspend(). This is done to prevent the deadlocks\n that will occur if any of the threads own monitors\n that will be needed by the invoked method.\n Note, however, that this implicit resume acts exactly like\n ThreadReference.resume(), so if the thread's suspend\n count is greater than 1, it will remain in a suspended state\n during the invocation and thus a deadlock could still occur.\n By default, when the invocation completes,\n all threads in the target VM are suspended, regardless their state\n before the invocation.\n It is possible that\n breakpoints or other events might occur during the invocation.\n This can cause deadlocks as described above. It can also cause a deadlock\n if invokeMethod is called from the client's event handler thread.  In this\n case, this thread will be waiting for the invokeMethod to complete and\n won't read the EventSet that comes in for the new event.  If this\n new EventSet is SUSPEND_ALL, then a deadlock will occur because no\n one will resume the EventSet.  To avoid this, all EventRequests should\n be disabled before doing the invokeMethod, or the invokeMethod should\n not be done from the client's event handler thread.\n \n The resumption of other threads during the invocation can be prevented\n by specifying the INVOKE_SINGLE_THREADED\n bit flag in the options argument; however,\n there is no protection against or recovery from the deadlocks\n described above, so this option should be used with great caution.\n Only the specified thread will be resumed (as described for all\n threads above). Upon completion of a single threaded invoke, the invoking thread\n will be suspended once again. Note that any threads started during\n the single threaded invocation will not be suspended when the\n invocation completes.\n \n If the target VM is disconnected during the invoke (for example, through\n VirtualMachine.dispose()) the method invocation continues."}, {"method_name": "disableCollection", "method_sig": "void disableCollection()", "description": "Prevents garbage collection for this object. By default all\n ObjectReference values returned by JDI may be collected\n at any time the target VM is running. A call to this method\n guarantees that the object will not be collected.\n enableCollection() can be used to allow collection once\n again.\n \n Calls to this method are counted. Every call to this method\n requires a corresponding call to enableCollection() before\n garbage collection is re-enabled.\n \n Note that while the target VM is suspended, no garbage collection\n will occur because all threads are suspended. The typical\n examination of variables, fields, and arrays during the suspension\n is safe without explicitly disabling garbage collection.\n \n This method should be used sparingly, as it alters the\n pattern of garbage collection in the target VM and,\n consequently, may result in application behavior under the\n debugger that differs from its non-debugged behavior."}, {"method_name": "enableCollection", "method_sig": "void enableCollection()", "description": "Permits garbage collection for this object. By default all\n ObjectReference values returned by JDI may be collected\n at any time the target VM is running. A call to this method\n is necessary only if garbage collection was previously disabled\n with disableCollection()."}, {"method_name": "isCollected", "method_sig": "boolean isCollected()", "description": "Determines if this object has been garbage collected in the target\n VM."}, {"method_name": "uniqueID", "method_sig": "long uniqueID()", "description": "Returns a unique identifier for this ObjectReference.\n It is guaranteed to be unique among all\n ObjectReferences from the same VM that have not yet been disposed.\n The guarantee applies as long\n as this ObjectReference has not yet been disposed."}, {"method_name": "waitingThreads", "method_sig": "List<ThreadReference> waitingThreads()\n                              throws IncompatibleThreadStateException", "description": "Returns a List containing a ThreadReference for\n each thread currently waiting for this object's monitor.\n See ThreadReference.currentContendedMonitor() for\n information about when a thread is considered to be waiting\n for a monitor.\n \n Not all target VMs support this operation. See\n VirtualMachine#canGetMonitorInfo to determine if the\n operation is supported."}, {"method_name": "owningThread", "method_sig": "ThreadReference owningThread()\n                      throws IncompatibleThreadStateException", "description": "Returns an ThreadReference for the thread, if any,\n which currently owns this object's monitor.\n See ThreadReference.ownedMonitors() for a definition\n of ownership.\n \n Not all target VMs support this operation. See\n VirtualMachine#canGetMonitorInfo to determine if the\n operation is supported."}, {"method_name": "entryCount", "method_sig": "int entryCount()\n        throws IncompatibleThreadStateException", "description": "Returns the number times this object's monitor has been\n entered by the current owning thread.\n See ThreadReference.ownedMonitors() for a definition\n of ownership.\n \n Not all target VMs support this operation. See\n VirtualMachine#canGetMonitorInfo to determine if the\n operation is supported."}, {"method_name": "referringObjects", "method_sig": "List<ObjectReference> referringObjects (long maxReferrers)", "description": "Returns objects that directly reference this object.\n Only objects that are reachable for the purposes of garbage collection\n are returned.  Note that an object can also be referenced in other ways,\n such as from a local variable in a stack frame, or from a JNI global\n reference.  Such non-object referrers are not returned by this method.\n \n Not all target virtual machines support this operation.\n Use VirtualMachine.canGetInstanceInfo()\n to determine if the operation is supported."}, {"method_name": "equals", "method_sig": "boolean equals (Object obj)", "description": "Compares the specified Object with this ObjectReference for equality."}, {"method_name": "hashCode", "method_sig": "int hashCode()", "description": "Returns the hash code value for this ObjectReference."}]}