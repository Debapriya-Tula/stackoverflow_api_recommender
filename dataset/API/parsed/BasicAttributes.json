{"name": "Class BasicAttributes", "module": "java.naming", "package": "javax.naming.directory", "text": "This class provides a basic implementation\n of the Attributes interface.\n\n BasicAttributes is either case-sensitive or case-insensitive (case-ignore).\n This property is determined at the time the BasicAttributes constructor\n is called.\n In a case-insensitive BasicAttributes, the case of its attribute identifiers\n is ignored when searching for an attribute, or adding attributes.\n In a case-sensitive BasicAttributes, the case is significant.\n\n When the BasicAttributes class needs to create an Attribute, it\n uses BasicAttribute. There is no other dependency on BasicAttribute.\n\n Note that updates to BasicAttributes (such as adding or removing an attribute)\n does not affect the corresponding representation in the directory.\n Updates to the directory can only be effected\n using operations in the DirContext interface.\n\n A BasicAttributes instance is not synchronized against concurrent\n multithreaded access. Multiple threads trying to access and modify\n a single BasicAttributes instance should lock the object.", "codes": ["public class BasicAttributes\nextends Object\nimplements Attributes"], "fields": [], "methods": [{"method_name": "toString", "method_sig": "public String toString()", "description": "Generates the string representation of this attribute set.\n The string consists of each attribute identifier and the contents\n of each attribute. The contents of this string is useful\n for debugging and is not meant to be interpreted programmatically."}, {"method_name": "equals", "method_sig": "public boolean equals (Object obj)", "description": "Determines whether this BasicAttributes is equal to another\n Attributes\n Two Attributes are equal if they are both instances of\n Attributes,\n treat the case of attribute IDs the same way, and contain the\n same attributes. Each Attribute in this BasicAttributes\n is checked for equality using Object.equals(), which may have\n be overridden by implementations of Attribute).\n If a subclass overrides equals(),\n it should override hashCode()\n as well so that two Attributes instances that are equal\n have the same hash code."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Calculates the hash code of this BasicAttributes.\n\n The hash code is computed by adding the hash code of\n the attributes of this object. If this BasicAttributes\n ignores case of its attribute IDs, one is added to the hash code.\n If a subclass overrides hashCode(),\n it should override equals()\n as well so that two Attributes instances that are equal\n have the same hash code."}]}