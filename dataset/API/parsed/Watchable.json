{"name": "Interface Watchable", "module": "java.base", "package": "java.nio.file", "text": "An object that may be registered with a watch service so that it can be\n watched for changes and events.\n\n  This interface defines the register method to register\n the object with a WatchService returning a WatchKey to\n represent the registration. An object may be registered with more than one\n watch service. Registration with a watch service is cancelled by invoking the\n key's cancel method.", "codes": ["public interface Watchable"], "fields": [], "methods": [{"method_name": "register", "method_sig": "WatchKey register (WatchService watcher,\n                  WatchEvent.Kind<?>[] events,\n                  WatchEvent.Modifier... modifiers)\n           throws IOException", "description": "Registers an object with a watch service.\n\n  If the file system object identified by this object is currently\n registered with the watch service then the watch key, representing that\n registration, is returned after changing the event set or modifiers to\n those specified by the events and modifiers parameters.\n Changing the event set does not cause pending events for the object to be\n discarded. Objects are automatically registered for the OVERFLOW event. This event is not\n required to be present in the array of events.\n\n  Otherwise the file system object has not yet been registered with the\n given watch service, so it is registered and the resulting new key is\n returned.\n\n  Implementations of this interface should specify the events they\n support."}, {"method_name": "register", "method_sig": "WatchKey register (WatchService watcher,\n                  WatchEvent.Kind<?>... events)\n           throws IOException", "description": "Registers an object with a watch service.\n\n  An invocation of this method behaves in exactly the same way as the\n invocation\n \n     watchable.register(watcher, events, new WatchEvent.Modifier[0]);\n "}]}