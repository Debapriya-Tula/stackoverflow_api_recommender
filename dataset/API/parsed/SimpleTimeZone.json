{"name": "Class SimpleTimeZone", "module": "java.base", "package": "java.util", "text": "SimpleTimeZone is a concrete subclass of TimeZone\n that represents a time zone for use with a Gregorian calendar.\n The class holds an offset from GMT, called raw offset, and start\n and end rules for a daylight saving time schedule.  Since it only holds\n single values for each, it cannot handle historical changes in the offset\n from GMT and the daylight saving schedule, except that the setStartYear method can specify the year when the daylight\n saving time schedule starts in effect.\n \n To construct a SimpleTimeZone with a daylight saving time\n schedule, the schedule can be described with a set of rules,\n start-rule and end-rule. A day when daylight saving time\n starts or ends is specified by a combination of month,\n day-of-month, and day-of-week values. The month\n value is represented by a Calendar MONTH field\n value, such as Calendar.MARCH. The day-of-week value is\n represented by a Calendar DAY_OF_WEEK value,\n such as SUNDAY. The meanings of value combinations\n are as follows.\n\n \nExact day of month\n To specify an exact day of month, set the month and\n day-of-month to an exact value, and day-of-week to zero. For\n example, to specify March 1, set the month to MARCH, day-of-month to 1, and day-of-week to 0.\nDay of week on or after day of month\n To specify a day of week on or after an exact day of month, set the\n month to an exact month value, day-of-month to the day on\n or after which the rule is applied, and day-of-week to a negative DAY_OF_WEEK field value. For example, to specify the\n second Sunday of April, set month to APRIL,\n day-of-month to 8, and day-of-week to -SUNDAY.\nDay of week on or before day of month\n To specify a day of the week on or before an exact day of the month, set\n day-of-month and day-of-week to a negative value. For\n example, to specify the last Wednesday on or before the 21st of March, set\n month to MARCH, day-of-month is -21\n and day-of-week is -WEDNESDAY. \nLast day-of-week of month\n To specify, the last day-of-week of the month, set day-of-week to a\n DAY_OF_WEEK value and day-of-month to\n -1. For example, to specify the last Sunday of October, set month\n to OCTOBER, day-of-week to SUNDAY and day-of-month to -1.  \n\n The time of the day at which daylight saving time starts or ends is\n specified by a millisecond value within the day. There are three kinds of\n modes to specify the time: WALL_TIME, STANDARD_TIME and UTC_TIME. For example, if daylight\n saving time ends\n at 2:00 am in the wall clock time, it can be specified by 7200000\n milliseconds in the WALL_TIME mode. In this case, the wall clock time\n for an end-rule means the same thing as the daylight time.\n \n The following are examples of parameters for constructing time zone objects.\n \n      // Base GMT offset: -8:00\n      // DST starts:      at 2:00am in standard time\n      //                  on the first Sunday in April\n      // DST ends:        at 2:00am in daylight time\n      //                  on the last Sunday in October\n      // Save:            1 hour\n      SimpleTimeZone(-28800000,\n                     \"America/Los_Angeles\",\n                     Calendar.APRIL, 1, -Calendar.SUNDAY,\n                     7200000,\n                     Calendar.OCTOBER, -1, Calendar.SUNDAY,\n                     7200000,\n                     3600000)\n\n      // Base GMT offset: +1:00\n      // DST starts:      at 1:00am in UTC time\n      //                  on the last Sunday in March\n      // DST ends:        at 1:00am in UTC time\n      //                  on the last Sunday in October\n      // Save:            1 hour\n      SimpleTimeZone(3600000,\n                     \"Europe/Paris\",\n                     Calendar.MARCH, -1, Calendar.SUNDAY,\n                     3600000, SimpleTimeZone.UTC_TIME,\n                     Calendar.OCTOBER, -1, Calendar.SUNDAY,\n                     3600000, SimpleTimeZone.UTC_TIME,\n                     3600000)\n \n These parameter rules are also applicable to the set rule methods, such as\n setStartRule.", "codes": ["public class SimpleTimeZone\nextends TimeZone"], "fields": [{"field_name": "WALL_TIME", "field_sig": "public static final\u00a0int WALL_TIME", "description": "Constant for a mode of start or end time specified as wall clock\n time.  Wall clock time is standard time for the onset rule, and\n daylight time for the end rule."}, {"field_name": "STANDARD_TIME", "field_sig": "public static final\u00a0int STANDARD_TIME", "description": "Constant for a mode of start or end time specified as standard time."}, {"field_name": "UTC_TIME", "field_sig": "public static final\u00a0int UTC_TIME", "description": "Constant for a mode of start or end time specified as UTC. European\n Union rules are specified as UTC time, for example."}], "methods": [{"method_name": "setStartYear", "method_sig": "public void setStartYear (int year)", "description": "Sets the daylight saving time starting year."}, {"method_name": "setStartRule", "method_sig": "public void setStartRule (int startMonth,\n                         int startDay,\n                         int startDayOfWeek,\n                         int startTime)", "description": "Sets the daylight saving time start rule. For example, if daylight saving\n time starts on the first Sunday in April at 2 am in local wall clock\n time, you can set the start rule by calling:\n setStartRule(Calendar.APRIL, 1, Calendar.SUNDAY, 2*60*60*1000);"}, {"method_name": "setStartRule", "method_sig": "public void setStartRule (int startMonth,\n                         int startDay,\n                         int startTime)", "description": "Sets the daylight saving time start rule to a fixed date within a month.\n This method is equivalent to:\n setStartRule(startMonth, startDay, 0, startTime)"}, {"method_name": "setStartRule", "method_sig": "public void setStartRule (int startMonth,\n                         int startDay,\n                         int startDayOfWeek,\n                         int startTime,\n                         boolean after)", "description": "Sets the daylight saving time start rule to a weekday before or after the given date within\n a month, e.g., the first Monday on or after the 8th."}, {"method_name": "setEndRule", "method_sig": "public void setEndRule (int endMonth,\n                       int endDay,\n                       int endDayOfWeek,\n                       int endTime)", "description": "Sets the daylight saving time end rule. For example, if daylight saving time\n ends on the last Sunday in October at 2 am in wall clock time,\n you can set the end rule by calling:\n setEndRule(Calendar.OCTOBER, -1, Calendar.SUNDAY, 2*60*60*1000);"}, {"method_name": "setEndRule", "method_sig": "public void setEndRule (int endMonth,\n                       int endDay,\n                       int endTime)", "description": "Sets the daylight saving time end rule to a fixed date within a month.\n This method is equivalent to:\n setEndRule(endMonth, endDay, 0, endTime)"}, {"method_name": "setEndRule", "method_sig": "public void setEndRule (int endMonth,\n                       int endDay,\n                       int endDayOfWeek,\n                       int endTime,\n                       boolean after)", "description": "Sets the daylight saving time end rule to a weekday before or after the given date within\n a month, e.g., the first Monday on or after the 8th."}, {"method_name": "getOffset", "method_sig": "public int getOffset (long date)", "description": "Returns the offset of this time zone from UTC at the given\n time. If daylight saving time is in effect at the given time,\n the offset value is adjusted with the amount of daylight\n saving."}, {"method_name": "getOffset", "method_sig": "public int getOffset (int era,\n                     int year,\n                     int month,\n                     int day,\n                     int dayOfWeek,\n                     int millis)", "description": "Returns the difference in milliseconds between local time and\n UTC, taking into account both the raw offset and the effect of\n daylight saving, for the specified date and time.  This method\n assumes that the start and end month are distinct.  It also\n uses a default GregorianCalendar object as its\n underlying calendar, such as for determining leap years.  Do\n not use the result of this method with a calendar other than a\n default GregorianCalendar.\n\n Note:  In general, clients should use\n Calendar.get(ZONE_OFFSET) + Calendar.get(DST_OFFSET)\n instead of calling this method."}, {"method_name": "getRawOffset", "method_sig": "public int getRawOffset()", "description": "Gets the GMT offset for this time zone."}, {"method_name": "setRawOffset", "method_sig": "public void setRawOffset (int offsetMillis)", "description": "Sets the base time zone offset to GMT.\n This is the offset to add to UTC to get local time."}, {"method_name": "setDSTSavings", "method_sig": "public void setDSTSavings (int millisSavedDuringDST)", "description": "Sets the amount of time in milliseconds that the clock is advanced\n during daylight saving time."}, {"method_name": "getDSTSavings", "method_sig": "public int getDSTSavings()", "description": "Returns the amount of time in milliseconds that the clock is\n advanced during daylight saving time."}, {"method_name": "useDaylightTime", "method_sig": "public boolean useDaylightTime()", "description": "Queries if this time zone uses daylight saving time."}, {"method_name": "observesDaylightTime", "method_sig": "public boolean observesDaylightTime()", "description": "Returns true if this SimpleTimeZone observes\n Daylight Saving Time. This method is equivalent to useDaylightTime()."}, {"method_name": "inDaylightTime", "method_sig": "public boolean inDaylightTime (Date date)", "description": "Queries if the given date is in daylight saving time."}, {"method_name": "clone", "method_sig": "public Object clone()", "description": "Returns a clone of this SimpleTimeZone instance."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Generates the hash code for the SimpleDateFormat object."}, {"method_name": "equals", "method_sig": "public boolean equals (Object obj)", "description": "Compares the equality of two SimpleTimeZone objects."}, {"method_name": "hasSameRules", "method_sig": "public boolean hasSameRules (TimeZone other)", "description": "Returns true if this zone has the same rules and offset as another zone."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a string representation of this time zone."}]}