{"name": "Interface XMLReader", "module": "java.xml", "package": "org.xml.sax", "text": "Interface for reading an XML document using callbacks.\n\n \nThis module, both source code and documentation, is in the\n Public Domain, and comes with NO WARRANTY.\n See http://www.saxproject.org\n for further information.\n \nNote: despite its name, this interface does\n not extend the standard Java Reader\n interface, because reading XML is a fundamentally different activity\n than reading character data.\nXMLReader is the interface that an XML parser's SAX2 driver must\n implement.  This interface allows an application to set and\n query features and properties in the parser, to register\n event handlers for document processing, and to initiate\n a document parse.\nAll SAX interfaces are assumed to be synchronous: the\n parse methods must not return until parsing\n is complete, and readers must wait for an event-handler callback\n to return before reporting the next event.\nThis interface replaces the (now deprecated) SAX 1.0 Parser interface.  The XMLReader interface\n contains two important enhancements over the old Parser\n interface (as well as some minor ones):\n\nit adds a standard way to query and set features and\n  properties; and\nit adds Namespace support, which is required for many\n  higher-level XML standards.\n\nThere are adapters available to convert a SAX1 Parser to\n a SAX2 XMLReader and vice-versa.", "codes": ["public interface XMLReader"], "fields": [], "methods": [{"method_name": "getFeature", "method_sig": "boolean getFeature (String name)\n            throws SAXNotRecognizedException,\n                   SAXNotSupportedException", "description": "Look up the value of a feature flag.\n\n The feature name is any fully-qualified URI.  It is\n possible for an XMLReader to recognize a feature name but\n temporarily be unable to return its value.\n Some feature values may be available only in specific\n contexts, such as before, during, or after a parse.\n Also, some feature values may not be programmatically accessible.\n (In the case of an adapter for SAX1 Parser, there is no\n implementation-independent way to expose whether the underlying\n parser is performing validation, expanding external entities,\n and so forth.) \nAll XMLReaders are required to recognize the\n http://xml.org/sax/features/namespaces and the\n http://xml.org/sax/features/namespace-prefixes feature names.\nTypical usage is something like this:\n\n XMLReader r = new MySAXDriver();\n\n                         // try to activate validation\n try {\n   r.setFeature(\"http://xml.org/sax/features/validation\", true);\n } catch (SAXException e) {\n   System.err.println(\"Cannot activate validation.\");\n }\n\n                         // register event handlers\n r.setContentHandler(new MyContentHandler());\n r.setErrorHandler(new MyErrorHandler());\n\n                         // parse the first document\n try {\n   r.parse(\"http://www.foo.com/mydoc.xml\");\n } catch (IOException e) {\n   System.err.println(\"I/O exception reading XML document\");\n } catch (SAXException e) {\n   System.err.println(\"XML exception reading document.\");\n }\n \nImplementors are free (and encouraged) to invent their own features,\n using names built on their own URIs."}, {"method_name": "setFeature", "method_sig": "void setFeature (String name,\n                boolean value)\n         throws SAXNotRecognizedException,\n                SAXNotSupportedException", "description": "Set the value of a feature flag.\n\n The feature name is any fully-qualified URI.  It is\n possible for an XMLReader to expose a feature value but\n to be unable to change the current value.\n Some feature values may be immutable or mutable only\n in specific contexts, such as before, during, or after\n a parse.\nAll XMLReaders are required to support setting\n http://xml.org/sax/features/namespaces to true and\n http://xml.org/sax/features/namespace-prefixes to false."}, {"method_name": "getProperty", "method_sig": "Object getProperty (String name)\n            throws SAXNotRecognizedException,\n                   SAXNotSupportedException", "description": "Look up the value of a property.\n\n The property name is any fully-qualified URI.  It is\n possible for an XMLReader to recognize a property name but\n temporarily be unable to return its value.\n Some property values may be available only in specific\n contexts, such as before, during, or after a parse.\nXMLReaders are not required to recognize any specific\n property names, though an initial core set is documented for\n SAX2.\nImplementors are free (and encouraged) to invent their own properties,\n using names built on their own URIs."}, {"method_name": "setProperty", "method_sig": "void setProperty (String name,\n                 Object value)\n          throws SAXNotRecognizedException,\n                 SAXNotSupportedException", "description": "Set the value of a property.\n\n The property name is any fully-qualified URI.  It is\n possible for an XMLReader to recognize a property name but\n to be unable to change the current value.\n Some property values may be immutable or mutable only\n in specific contexts, such as before, during, or after\n a parse.\nXMLReaders are not required to recognize setting\n any specific property names, though a core set is defined by\n SAX2.\nThis method is also the standard mechanism for setting\n extended handlers."}, {"method_name": "setEntityResolver", "method_sig": "void setEntityResolver (EntityResolver resolver)", "description": "Allow an application to register an entity resolver.\n\n If the application does not register an entity resolver,\n the XMLReader will perform its own default resolution.\nApplications may register a new or different resolver in the\n middle of a parse, and the SAX parser must begin using the new\n resolver immediately."}, {"method_name": "getEntityResolver", "method_sig": "EntityResolver getEntityResolver()", "description": "Return the current entity resolver."}, {"method_name": "setDTDHandler", "method_sig": "void setDTDHandler (DTDHandler handler)", "description": "Allow an application to register a DTD event handler.\n\n If the application does not register a DTD handler, all DTD\n events reported by the SAX parser will be silently ignored.\nApplications may register a new or different handler in the\n middle of a parse, and the SAX parser must begin using the new\n handler immediately."}, {"method_name": "getDTDHandler", "method_sig": "DTDHandler getDTDHandler()", "description": "Return the current DTD handler."}, {"method_name": "setContentHandler", "method_sig": "void setContentHandler (ContentHandler handler)", "description": "Allow an application to register a content event handler.\n\n If the application does not register a content handler, all\n content events reported by the SAX parser will be silently\n ignored.\nApplications may register a new or different handler in the\n middle of a parse, and the SAX parser must begin using the new\n handler immediately."}, {"method_name": "getContentHandler", "method_sig": "ContentHandler getContentHandler()", "description": "Return the current content handler."}, {"method_name": "setErrorHandler", "method_sig": "void setErrorHandler (ErrorHandler handler)", "description": "Allow an application to register an error event handler.\n\n If the application does not register an error handler, all\n error events reported by the SAX parser will be silently\n ignored; however, normal processing may not continue.  It is\n highly recommended that all SAX applications implement an\n error handler to avoid unexpected bugs.\nApplications may register a new or different handler in the\n middle of a parse, and the SAX parser must begin using the new\n handler immediately."}, {"method_name": "getErrorHandler", "method_sig": "ErrorHandler getErrorHandler()", "description": "Return the current error handler."}, {"method_name": "parse", "method_sig": "void parse (InputSource input)\n    throws IOException,\n           SAXException", "description": "Parse an XML document.\n\n The application can use this method to instruct the XML\n reader to begin parsing an XML document from any valid input\n source (a character stream, a byte stream, or a URI).\nApplications may not invoke this method while a parse is in\n progress (they should create a new XMLReader instead for each\n nested XML document).  Once a parse is complete, an\n application may reuse the same XMLReader object, possibly with a\n different input source.\n Configuration of the XMLReader object (such as handler bindings and\n values established for feature flags and properties) is unchanged\n by completion of a parse, unless the definition of that aspect of\n the configuration explicitly specifies other behavior.\n (For example, feature flags or properties exposing\n characteristics of the document being parsed.)\n \nDuring the parse, the XMLReader will provide information\n about the XML document through the registered event\n handlers.\nThis method is synchronous: it will not return until parsing\n has ended.  If a client application wants to terminate\n parsing early, it should throw an exception."}, {"method_name": "parse", "method_sig": "void parse (String systemId)\n    throws IOException,\n           SAXException", "description": "Parse an XML document from a system identifier (URI).\n\n This method is a shortcut for the common case of reading a\n document from a system identifier.  It is the exact\n equivalent of the following:\n\n parse(new InputSource(systemId));\n \nIf the system identifier is a URL, it must be fully resolved\n by the application before it is passed to the parser."}]}