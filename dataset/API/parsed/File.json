{"name": "Class File", "module": "java.base", "package": "java.io", "text": "An abstract representation of file and directory pathnames.\n\n  User interfaces and operating systems use system-dependent pathname\n strings to name files and directories.  This class presents an\n abstract, system-independent view of hierarchical pathnames.  An\n abstract pathname has two components:\n\n \n An optional system-dependent prefix string,\n      such as a disk-drive specifier, \"/\"\u00a0for the UNIX root\n      directory, or \"\\\\\\\\\"\u00a0for a Microsoft Windows UNC pathname, and\n  A sequence of zero or more string names.\n \n\n The first name in an abstract pathname may be a directory name or, in the\n case of Microsoft Windows UNC pathnames, a hostname.  Each subsequent name\n in an abstract pathname denotes a directory; the last name may denote\n either a directory or a file.  The empty abstract pathname has no\n prefix and an empty name sequence.\n\n  The conversion of a pathname string to or from an abstract pathname is\n inherently system-dependent.  When an abstract pathname is converted into a\n pathname string, each name is separated from the next by a single copy of\n the default separator character.  The default name-separator\n character is defined by the system property file.separator, and\n is made available in the public static fields separator and separatorChar of this class.\n When a pathname string is converted into an abstract pathname, the names\n within it may be separated by the default name-separator character or by any\n other name-separator character that is supported by the underlying system.\n\n  A pathname, whether abstract or in string form, may be either\n absolute or relative.  An absolute pathname is complete in\n that no other information is required in order to locate the file that it\n denotes.  A relative pathname, in contrast, must be interpreted in terms of\n information taken from some other pathname.  By default the classes in the\n java.io package always resolve relative pathnames against the\n current user directory.  This directory is named by the system property\n user.dir, and is typically the directory in which the Java\n virtual machine was invoked.\n\n  The parent of an abstract pathname may be obtained by invoking\n the getParent() method of this class and consists of the pathname's\n prefix and each name in the pathname's name sequence except for the last.\n Each directory's absolute pathname is an ancestor of any File\n object with an absolute abstract pathname which begins with the directory's\n absolute pathname.  For example, the directory denoted by the abstract\n pathname \"/usr\" is an ancestor of the directory denoted by the\n pathname \"/usr/local/bin\".\n\n  The prefix concept is used to handle root directories on UNIX platforms,\n and drive specifiers, root directories and UNC pathnames on Microsoft Windows platforms,\n as follows:\n\n \n For UNIX platforms, the prefix of an absolute pathname is always\n \"/\".  Relative pathnames have no prefix.  The abstract pathname\n denoting the root directory has the prefix \"/\" and an empty\n name sequence.\n\n  For Microsoft Windows platforms, the prefix of a pathname that contains a drive\n specifier consists of the drive letter followed by \":\" and\n possibly followed by \"\\\\\" if the pathname is absolute.  The\n prefix of a UNC pathname is \"\\\\\\\\\"; the hostname and the share\n name are the first two names in the name sequence.  A relative pathname that\n does not specify a drive has no prefix.\n\n \n Instances of this class may or may not denote an actual file-system\n object such as a file or a directory.  If it does denote such an object\n then that object resides in a partition.  A partition is an\n operating system-specific portion of storage for a file system.  A single\n storage device (e.g. a physical disk-drive, flash memory, CD-ROM) may\n contain multiple partitions.  The object, if any, will reside on the\n partition named by some ancestor of the absolute\n form of this pathname.\n\n  A file system may implement restrictions to certain operations on the\n actual file-system object, such as reading, writing, and executing.  These\n restrictions are collectively known as access permissions.  The file\n system may have multiple sets of access permissions on a single object.\n For example, one set may apply to the object's owner, and another\n may apply to all other users.  The access permissions on an object may\n cause some methods in this class to fail.\n\n  Instances of the File class are immutable; that is, once\n created, the abstract pathname represented by a File object\n will never change.\n\n Interoperability with java.nio.file package\n The java.nio.file\n package defines interfaces and classes for the Java virtual machine to access\n files, file attributes, and file systems. This API may be used to overcome\n many of the limitations of the java.io.File class.\n The toPath method may be used to obtain a Path that uses the abstract path represented by a File object to\n locate a file. The resulting Path may be used with the Files class to provide more efficient and extensive access to\n additional file operations, file attributes, and I/O exceptions to help\n diagnose errors when an operation on a file fails.", "codes": ["public class File\nextends Object\nimplements Serializable, Comparable<File>"], "fields": [{"field_name": "separatorChar", "field_sig": "public static final\u00a0char separatorChar", "description": "The system-dependent default name-separator character.  This field is\n initialized to contain the first character of the value of the system\n property file.separator.  On UNIX systems the value of this\n field is '/'; on Microsoft Windows systems it is '\\\\'."}, {"field_name": "separator", "field_sig": "public static final\u00a0String separator", "description": "The system-dependent default name-separator character, represented as a\n string for convenience.  This string contains a single character, namely\n separatorChar."}, {"field_name": "pathSeparatorChar", "field_sig": "public static final\u00a0char pathSeparatorChar", "description": "The system-dependent path-separator character.  This field is\n initialized to contain the first character of the value of the system\n property path.separator.  This character is used to\n separate filenames in a sequence of files given as a path list.\n On UNIX systems, this character is ':'; on Microsoft Windows systems it\n is ';'."}, {"field_name": "pathSeparator", "field_sig": "public static final\u00a0String pathSeparator", "description": "The system-dependent path-separator character, represented as a string\n for convenience.  This string contains a single character, namely\n pathSeparatorChar."}], "methods": [{"method_name": "getName", "method_sig": "public String getName()", "description": "Returns the name of the file or directory denoted by this abstract\n pathname.  This is just the last name in the pathname's name\n sequence.  If the pathname's name sequence is empty, then the empty\n string is returned."}, {"method_name": "getParent", "method_sig": "public String getParent()", "description": "Returns the pathname string of this abstract pathname's parent, or\n null if this pathname does not name a parent directory.\n\n  The parent of an abstract pathname consists of the\n pathname's prefix, if any, and each name in the pathname's name\n sequence except for the last.  If the name sequence is empty then\n the pathname does not name a parent directory."}, {"method_name": "getParentFile", "method_sig": "public File getParentFile()", "description": "Returns the abstract pathname of this abstract pathname's parent,\n or null if this pathname does not name a parent\n directory.\n\n  The parent of an abstract pathname consists of the\n pathname's prefix, if any, and each name in the pathname's name\n sequence except for the last.  If the name sequence is empty then\n the pathname does not name a parent directory."}, {"method_name": "getPath", "method_sig": "public String getPath()", "description": "Converts this abstract pathname into a pathname string.  The resulting\n string uses the default name-separator character to\n separate the names in the name sequence."}, {"method_name": "isAbsolute", "method_sig": "public boolean isAbsolute()", "description": "Tests whether this abstract pathname is absolute.  The definition of\n absolute pathname is system dependent.  On UNIX systems, a pathname is\n absolute if its prefix is \"/\".  On Microsoft Windows systems, a\n pathname is absolute if its prefix is a drive specifier followed by\n \"\\\\\", or if its prefix is \"\\\\\\\\\"."}, {"method_name": "getAbsolutePath", "method_sig": "public String getAbsolutePath()", "description": "Returns the absolute pathname string of this abstract pathname.\n\n  If this abstract pathname is already absolute, then the pathname\n string is simply returned as if by the getPath()\n method.  If this abstract pathname is the empty abstract pathname then\n the pathname string of the current user directory, which is named by the\n system property user.dir, is returned.  Otherwise this\n pathname is resolved in a system-dependent way.  On UNIX systems, a\n relative pathname is made absolute by resolving it against the current\n user directory.  On Microsoft Windows systems, a relative pathname is made absolute\n by resolving it against the current directory of the drive named by the\n pathname, if any; if not, it is resolved against the current user\n directory."}, {"method_name": "getAbsoluteFile", "method_sig": "public File getAbsoluteFile()", "description": "Returns the absolute form of this abstract pathname.  Equivalent to\n new\u00a0File(this.getAbsolutePath())."}, {"method_name": "getCanonicalPath", "method_sig": "public String getCanonicalPath()\n                        throws IOException", "description": "Returns the canonical pathname string of this abstract pathname.\n\n  A canonical pathname is both absolute and unique.  The precise\n definition of canonical form is system-dependent.  This method first\n converts this pathname to absolute form if necessary, as if by invoking the\n getAbsolutePath() method, and then maps it to its unique form in a\n system-dependent way.  This typically involves removing redundant names\n such as \".\" and \"..\" from the pathname, resolving\n symbolic links (on UNIX platforms), and converting drive letters to a\n standard case (on Microsoft Windows platforms).\n\n  Every pathname that denotes an existing file or directory has a\n unique canonical form.  Every pathname that denotes a nonexistent file\n or directory also has a unique canonical form.  The canonical form of\n the pathname of a nonexistent file or directory may be different from\n the canonical form of the same pathname after the file or directory is\n created.  Similarly, the canonical form of the pathname of an existing\n file or directory may be different from the canonical form of the same\n pathname after the file or directory is deleted."}, {"method_name": "getCanonicalFile", "method_sig": "public File getCanonicalFile()\n                      throws IOException", "description": "Returns the canonical form of this abstract pathname.  Equivalent to\n new\u00a0File(this.getCanonicalPath())."}, {"method_name": "toURL", "method_sig": "@Deprecated\npublic URL toURL()\n          throws MalformedURLException", "description": "Converts this abstract pathname into a file: URL.  The\n exact form of the URL is system-dependent.  If it can be determined that\n the file denoted by this abstract pathname is a directory, then the\n resulting URL will end with a slash."}, {"method_name": "toURI", "method_sig": "public URI toURI()", "description": "Constructs a file: URI that represents this abstract pathname.\n\n  The exact form of the URI is system-dependent.  If it can be\n determined that the file denoted by this abstract pathname is a\n directory, then the resulting URI will end with a slash.\n\n  For a given abstract pathname f, it is guaranteed that\n\n \n new File(\u00a0f.toURI()).equals(\n \u00a0f.getAbsoluteFile())\n \n\n so long as the original abstract pathname, the URI, and the new abstract\n pathname are all created in (possibly different invocations of) the same\n Java virtual machine.  Due to the system-dependent nature of abstract\n pathnames, however, this relationship typically does not hold when a\n file: URI that is created in a virtual machine on one operating\n system is converted into an abstract pathname in a virtual machine on a\n different operating system.\n\n  Note that when this abstract pathname represents a UNC pathname then\n all components of the UNC (including the server name component) are encoded\n in the URI path. The authority component is undefined, meaning\n that it is represented as null. The Path class defines the\n toUri method to encode the server name in the authority\n component of the resulting URI. The toPath method\n may be used to obtain a Path representing this abstract pathname."}, {"method_name": "canRead", "method_sig": "public boolean canRead()", "description": "Tests whether the application can read the file denoted by this\n abstract pathname. On some platforms it may be possible to start the\n Java virtual machine with special privileges that allow it to read\n files that are marked as unreadable. Consequently this method may return\n true even though the file does not have read permissions."}, {"method_name": "canWrite", "method_sig": "public boolean canWrite()", "description": "Tests whether the application can modify the file denoted by this\n abstract pathname. On some platforms it may be possible to start the\n Java virtual machine with special privileges that allow it to modify\n files that are marked read-only. Consequently this method may return\n true even though the file is marked read-only."}, {"method_name": "exists", "method_sig": "public boolean exists()", "description": "Tests whether the file or directory denoted by this abstract pathname\n exists."}, {"method_name": "isDirectory", "method_sig": "public boolean isDirectory()", "description": "Tests whether the file denoted by this abstract pathname is a\n directory.\n\n  Where it is required to distinguish an I/O exception from the case\n that the file is not a directory, or where several attributes of the\n same file are required at the same time, then the Files.readAttributes method may be used."}, {"method_name": "isFile", "method_sig": "public boolean isFile()", "description": "Tests whether the file denoted by this abstract pathname is a normal\n file.  A file is normal if it is not a directory and, in\n addition, satisfies other system-dependent criteria.  Any non-directory\n file created by a Java application is guaranteed to be a normal file.\n\n  Where it is required to distinguish an I/O exception from the case\n that the file is not a normal file, or where several attributes of the\n same file are required at the same time, then the Files.readAttributes method may be used."}, {"method_name": "isHidden", "method_sig": "public boolean isHidden()", "description": "Tests whether the file named by this abstract pathname is a hidden\n file.  The exact definition of hidden is system-dependent.  On\n UNIX systems, a file is considered to be hidden if its name begins with\n a period character ('.').  On Microsoft Windows systems, a file is\n considered to be hidden if it has been marked as such in the filesystem."}, {"method_name": "lastModified", "method_sig": "public long lastModified()", "description": "Returns the time that the file denoted by this abstract pathname was\n last modified."}, {"method_name": "length", "method_sig": "public long length()", "description": "Returns the length of the file denoted by this abstract pathname.\n The return value is unspecified if this pathname denotes a directory.\n\n  Where it is required to distinguish an I/O exception from the case\n that 0L is returned, or where several attributes of the same file\n are required at the same time, then the Files.readAttributes method may be used."}, {"method_name": "createNewFile", "method_sig": "public boolean createNewFile()\n                      throws IOException", "description": "Atomically creates a new, empty file named by this abstract pathname if\n and only if a file with this name does not yet exist.  The check for the\n existence of the file and the creation of the file if it does not exist\n are a single operation that is atomic with respect to all other\n filesystem activities that might affect the file.\n \n Note: this method should not be used for file-locking, as\n the resulting protocol cannot be made to work reliably. The\n FileLock\n facility should be used instead."}, {"method_name": "delete", "method_sig": "public boolean delete()", "description": "Deletes the file or directory denoted by this abstract pathname.  If\n this pathname denotes a directory, then the directory must be empty in\n order to be deleted.\n\n  Note that the Files class defines the delete method to throw an IOException\n when a file cannot be deleted. This is useful for error reporting and to\n diagnose why a file cannot be deleted."}, {"method_name": "deleteOnExit", "method_sig": "public void deleteOnExit()", "description": "Requests that the file or directory denoted by this abstract\n pathname be deleted when the virtual machine terminates.\n Files (or directories) are deleted in the reverse order that\n they are registered. Invoking this method to delete a file or\n directory that is already registered for deletion has no effect.\n Deletion will be attempted only for normal termination of the\n virtual machine, as defined by the Java Language Specification.\n\n  Once deletion has been requested, it is not possible to cancel the\n request.  This method should therefore be used with care.\n\n \n Note: this method should not be used for file-locking, as\n the resulting protocol cannot be made to work reliably. The\n FileLock\n facility should be used instead."}, {"method_name": "list", "method_sig": "public String[] list()", "description": "Returns an array of strings naming the files and directories in the\n directory denoted by this abstract pathname.\n\n  If this abstract pathname does not denote a directory, then this\n method returns null.  Otherwise an array of strings is\n returned, one for each file or directory in the directory.  Names\n denoting the directory itself and the directory's parent directory are\n not included in the result.  Each string is a file name rather than a\n complete path.\n\n  There is no guarantee that the name strings in the resulting array\n will appear in any specific order; they are not, in particular,\n guaranteed to appear in alphabetical order.\n\n  Note that the Files class defines the newDirectoryStream method to\n open a directory and iterate over the names of the files in the directory.\n This may use less resources when working with very large directories, and\n may be more responsive when working with remote directories."}, {"method_name": "list", "method_sig": "public String[] list (FilenameFilter filter)", "description": "Returns an array of strings naming the files and directories in the\n directory denoted by this abstract pathname that satisfy the specified\n filter.  The behavior of this method is the same as that of the\n list() method, except that the strings in the returned array\n must satisfy the filter.  If the given filter is null\n then all names are accepted.  Otherwise, a name satisfies the filter if\n and only if the value true results when the FilenameFilter.accept(File,\u00a0String) method\n of the filter is invoked on this abstract pathname and the name of a\n file or directory in the directory that it denotes."}, {"method_name": "listFiles", "method_sig": "public File[] listFiles()", "description": "Returns an array of abstract pathnames denoting the files in the\n directory denoted by this abstract pathname.\n\n  If this abstract pathname does not denote a directory, then this\n method returns null.  Otherwise an array of File objects\n is returned, one for each file or directory in the directory.  Pathnames\n denoting the directory itself and the directory's parent directory are\n not included in the result.  Each resulting abstract pathname is\n constructed from this abstract pathname using the File(File,\u00a0String) constructor.  Therefore if this\n pathname is absolute then each resulting pathname is absolute; if this\n pathname is relative then each resulting pathname will be relative to\n the same directory.\n\n  There is no guarantee that the name strings in the resulting array\n will appear in any specific order; they are not, in particular,\n guaranteed to appear in alphabetical order.\n\n  Note that the Files class defines the newDirectoryStream method\n to open a directory and iterate over the names of the files in the\n directory. This may use less resources when working with very large\n directories."}, {"method_name": "listFiles", "method_sig": "public File[] listFiles (FilenameFilter filter)", "description": "Returns an array of abstract pathnames denoting the files and\n directories in the directory denoted by this abstract pathname that\n satisfy the specified filter.  The behavior of this method is the same\n as that of the listFiles() method, except that the pathnames in\n the returned array must satisfy the filter.  If the given filter\n is null then all pathnames are accepted.  Otherwise, a pathname\n satisfies the filter if and only if the value true results when\n the FilenameFilter.accept(File,\u00a0String) method of the filter is\n invoked on this abstract pathname and the name of a file or directory in\n the directory that it denotes."}, {"method_name": "listFiles", "method_sig": "public File[] listFiles (FileFilter filter)", "description": "Returns an array of abstract pathnames denoting the files and\n directories in the directory denoted by this abstract pathname that\n satisfy the specified filter.  The behavior of this method is the same\n as that of the listFiles() method, except that the pathnames in\n the returned array must satisfy the filter.  If the given filter\n is null then all pathnames are accepted.  Otherwise, a pathname\n satisfies the filter if and only if the value true results when\n the FileFilter.accept(File) method of the\n filter is invoked on the pathname."}, {"method_name": "mkdir", "method_sig": "public boolean mkdir()", "description": "Creates the directory named by this abstract pathname."}, {"method_name": "mkdirs", "method_sig": "public boolean mkdirs()", "description": "Creates the directory named by this abstract pathname, including any\n necessary but nonexistent parent directories.  Note that if this\n operation fails it may have succeeded in creating some of the necessary\n parent directories."}, {"method_name": "renameTo", "method_sig": "public boolean renameTo (File dest)", "description": "Renames the file denoted by this abstract pathname.\n\n  Many aspects of the behavior of this method are inherently\n platform-dependent: The rename operation might not be able to move a\n file from one filesystem to another, it might not be atomic, and it\n might not succeed if a file with the destination abstract pathname\n already exists.  The return value should always be checked to make sure\n that the rename operation was successful.\n\n  Note that the Files class defines the move method to move or rename a file in a\n platform independent manner."}, {"method_name": "setLastModified", "method_sig": "public boolean setLastModified (long time)", "description": "Sets the last-modified time of the file or directory named by this\n abstract pathname.\n\n  All platforms support file-modification times to the nearest second,\n but some provide more precision.  The argument will be truncated to fit\n the supported precision.  If the operation succeeds and no intervening\n operations on the file take place, then the next invocation of the\n lastModified() method will return the (possibly\n truncated) time argument that was passed to this method."}, {"method_name": "setReadOnly", "method_sig": "public boolean setReadOnly()", "description": "Marks the file or directory named by this abstract pathname so that\n only read operations are allowed. After invoking this method the file\n or directory will not change until it is either deleted or marked\n to allow write access. On some platforms it may be possible to start the\n Java virtual machine with special privileges that allow it to modify\n files that are marked read-only. Whether or not a read-only file or\n directory may be deleted depends upon the underlying system."}, {"method_name": "setWritable", "method_sig": "public boolean setWritable (boolean writable,\n                           boolean ownerOnly)", "description": "Sets the owner's or everybody's write permission for this abstract\n pathname. On some platforms it may be possible to start the Java virtual\n machine with special privileges that allow it to modify files that\n disallow write operations.\n\n  The Files class defines methods that operate on\n file attributes including file permissions. This may be used when finer\n manipulation of file permissions is required."}, {"method_name": "setWritable", "method_sig": "public boolean setWritable (boolean writable)", "description": "A convenience method to set the owner's write permission for this abstract\n pathname. On some platforms it may be possible to start the Java virtual\n machine with special privileges that allow it to modify files that\n disallow write operations.\n\n  An invocation of this method of the form file.setWritable(arg)\n behaves in exactly the same way as the invocation\n\n \n     file.setWritable(arg, true)\n "}, {"method_name": "setReadable", "method_sig": "public boolean setReadable (boolean readable,\n                           boolean ownerOnly)", "description": "Sets the owner's or everybody's read permission for this abstract\n pathname. On some platforms it may be possible to start the Java virtual\n machine with special privileges that allow it to read files that are\n marked as unreadable.\n\n  The Files class defines methods that operate on\n file attributes including file permissions. This may be used when finer\n manipulation of file permissions is required."}, {"method_name": "setReadable", "method_sig": "public boolean setReadable (boolean readable)", "description": "A convenience method to set the owner's read permission for this abstract\n pathname. On some platforms it may be possible to start the Java virtual\n machine with special privileges that allow it to read files that are\n marked as unreadable.\n\n An invocation of this method of the form file.setReadable(arg)\n behaves in exactly the same way as the invocation\n\n \n     file.setReadable(arg, true)\n "}, {"method_name": "setExecutable", "method_sig": "public boolean setExecutable (boolean executable,\n                             boolean ownerOnly)", "description": "Sets the owner's or everybody's execute permission for this abstract\n pathname. On some platforms it may be possible to start the Java virtual\n machine with special privileges that allow it to execute files that are\n not marked executable.\n\n  The Files class defines methods that operate on\n file attributes including file permissions. This may be used when finer\n manipulation of file permissions is required."}, {"method_name": "setExecutable", "method_sig": "public boolean setExecutable (boolean executable)", "description": "A convenience method to set the owner's execute permission for this\n abstract pathname. On some platforms it may be possible to start the Java\n virtual machine with special privileges that allow it to execute files\n that are not marked executable.\n\n An invocation of this method of the form file.setExcutable(arg)\n behaves in exactly the same way as the invocation\n\n \n     file.setExecutable(arg, true)\n "}, {"method_name": "canExecute", "method_sig": "public boolean canExecute()", "description": "Tests whether the application can execute the file denoted by this\n abstract pathname. On some platforms it may be possible to start the\n Java virtual machine with special privileges that allow it to execute\n files that are not marked executable. Consequently this method may return\n true even though the file does not have execute permissions."}, {"method_name": "listRoots", "method_sig": "public static File[] listRoots()", "description": "List the available filesystem roots.\n\n  A particular Java platform may support zero or more\n hierarchically-organized file systems.  Each file system has a\n root directory from which all other files in that file system\n can be reached.  Windows platforms, for example, have a root directory\n for each active drive; UNIX platforms have a single root directory,\n namely \"/\".  The set of available filesystem roots is affected\n by various system-level operations such as the insertion or ejection of\n removable media and the disconnecting or unmounting of physical or\n virtual disk drives.\n\n  This method returns an array of File objects that denote the\n root directories of the available filesystem roots.  It is guaranteed\n that the canonical pathname of any file physically present on the local\n machine will begin with one of the roots returned by this method.\n\n  The canonical pathname of a file that resides on some other machine\n and is accessed via a remote-filesystem protocol such as SMB or NFS may\n or may not begin with one of the roots returned by this method.  If the\n pathname of a remote file is syntactically indistinguishable from the\n pathname of a local file then it will begin with one of the roots\n returned by this method.  Thus, for example, File objects\n denoting the root directories of the mapped network drives of a Windows\n platform will be returned by this method, while File objects\n containing UNC pathnames will not be returned by this method.\n\n  Unlike most methods in this class, this method does not throw\n security exceptions.  If a security manager exists and its SecurityManager.checkRead(String) method denies read access to a\n particular root directory, then that directory will not appear in the\n result."}, {"method_name": "getTotalSpace", "method_sig": "public long getTotalSpace()", "description": "Returns the size of the partition named by this\n abstract pathname."}, {"method_name": "getFreeSpace", "method_sig": "public long getFreeSpace()", "description": "Returns the number of unallocated bytes in the partition named by this abstract path name.\n\n  The returned number of unallocated bytes is a hint, but not\n a guarantee, that it is possible to use most or any of these\n bytes.  The number of unallocated bytes is most likely to be\n accurate immediately after this call.  It is likely to be made\n inaccurate by any external I/O operations including those made\n on the system outside of this virtual machine.  This method\n makes no guarantee that write operations to this file system\n will succeed."}, {"method_name": "getUsableSpace", "method_sig": "public long getUsableSpace()", "description": "Returns the number of bytes available to this virtual machine on the\n partition named by this abstract pathname.  When\n possible, this method checks for write permissions and other operating\n system restrictions and will therefore usually provide a more accurate\n estimate of how much new data can actually be written than getFreeSpace().\n\n  The returned number of available bytes is a hint, but not a\n guarantee, that it is possible to use most or any of these bytes.  The\n number of unallocated bytes is most likely to be accurate immediately\n after this call.  It is likely to be made inaccurate by any external\n I/O operations including those made on the system outside of this\n virtual machine.  This method makes no guarantee that write operations\n to this file system will succeed."}, {"method_name": "createTempFile", "method_sig": "public static File createTempFile (String prefix,\n                                  String suffix,\n                                  File directory)\n                           throws IOException", "description": " Creates a new empty file in the specified directory, using the\n given prefix and suffix strings to generate its name.  If this method\n returns successfully then it is guaranteed that:\n\n \n The file denoted by the returned abstract pathname did not exist\n      before this method was invoked, and\n  Neither this method nor any of its variants will return the same\n      abstract pathname again in the current invocation of the virtual\n      machine.\n \n\n This method provides only part of a temporary-file facility.  To arrange\n for a file created by this method to be deleted automatically, use the\n deleteOnExit() method.\n\n  The prefix argument must be at least three characters\n long.  It is recommended that the prefix be a short, meaningful string\n such as \"hjb\" or \"mail\".  The\n suffix argument may be null, in which case the\n suffix \".tmp\" will be used.\n\n  To create the new file, the prefix and the suffix may first be\n adjusted to fit the limitations of the underlying platform.  If the\n prefix is too long then it will be truncated, but its first three\n characters will always be preserved.  If the suffix is too long then it\n too will be truncated, but if it begins with a period character\n ('.') then the period and the first three characters\n following it will always be preserved.  Once these adjustments have been\n made the name of the new file will be generated by concatenating the\n prefix, five or more internally-generated characters, and the suffix.\n\n  If the directory argument is null then the\n system-dependent default temporary-file directory will be used.  The\n default temporary-file directory is specified by the system property\n java.io.tmpdir.  On UNIX systems the default value of this\n property is typically \"/tmp\" or \"/var/tmp\"; on\n Microsoft Windows systems it is typically \"C:\\\\WINNT\\\\TEMP\".  A different\n value may be given to this system property when the Java virtual machine\n is invoked, but programmatic changes to this property are not guaranteed\n to have any effect upon the temporary directory used by this method."}, {"method_name": "createTempFile", "method_sig": "public static File createTempFile (String prefix,\n                                  String suffix)\n                           throws IOException", "description": "Creates an empty file in the default temporary-file directory, using\n the given prefix and suffix to generate its name. Invoking this method\n is equivalent to invoking createTempFile(prefix,\u00a0suffix,\u00a0null).\n\n  The Files.createTempFile method provides an alternative method to create an\n empty file in the temporary-file directory. Files created by that method\n may have more restrictive access permissions to files created by this\n method and so may be more suited to security-sensitive applications."}, {"method_name": "compareTo", "method_sig": "public int compareTo (File pathname)", "description": "Compares two abstract pathnames lexicographically.  The ordering\n defined by this method depends upon the underlying system.  On UNIX\n systems, alphabetic case is significant in comparing pathnames; on Microsoft Windows\n systems it is not."}, {"method_name": "equals", "method_sig": "public boolean equals (Object obj)", "description": "Tests this abstract pathname for equality with the given object.\n Returns true if and only if the argument is not\n null and is an abstract pathname that denotes the same file\n or directory as this abstract pathname.  Whether or not two abstract\n pathnames are equal depends upon the underlying system.  On UNIX\n systems, alphabetic case is significant in comparing pathnames; on Microsoft Windows\n systems it is not."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Computes a hash code for this abstract pathname.  Because equality of\n abstract pathnames is inherently system-dependent, so is the computation\n of their hash codes.  On UNIX systems, the hash code of an abstract\n pathname is equal to the exclusive or of the hash code\n of its pathname string and the decimal value\n 1234321.  On Microsoft Windows systems, the hash\n code is equal to the exclusive or of the hash code of\n its pathname string converted to lower case and the decimal\n value 1234321.  Locale is not taken into account on\n lowercasing the pathname string."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns the pathname string of this abstract pathname.  This is just the\n string returned by the getPath() method."}, {"method_name": "toPath", "method_sig": "public Path toPath()", "description": "Returns a java.nio.file.Path object constructed from\n this abstract path. The resulting Path is associated with the\n default-filesystem.\n\n  The first invocation of this method works as if invoking it were\n equivalent to evaluating the expression:\n \n FileSystems.getDefault().getPath(this.getPath());\n \n Subsequent invocations of this method return the same Path.\n\n  If this abstract pathname is the empty abstract pathname then this\n method returns a Path that may be used to access the current\n user directory."}]}