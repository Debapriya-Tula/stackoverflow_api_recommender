{"name": "Interface Comparator<T>", "module": "java.base", "package": "java.util", "text": "A comparison function, which imposes a total ordering on some\n collection of objects.  Comparators can be passed to a sort method (such\n as Collections.sort or Arrays.sort) to allow precise control\n over the sort order.  Comparators can also be used to control the order of\n certain data structures (such as sorted sets or sorted maps), or to provide an ordering for collections of\n objects that don't have a natural ordering.\n\n The ordering imposed by a comparator c on a set of elements\n S is said to be consistent with equals if and only if\n c.compare(e1, e2)==0 has the same boolean value as\n e1.equals(e2) for every e1 and e2 in\n S.\n\n Caution should be exercised when using a comparator capable of imposing an\n ordering inconsistent with equals to order a sorted set (or sorted map).\n Suppose a sorted set (or sorted map) with an explicit comparator c\n is used with elements (or keys) drawn from a set S.  If the\n ordering imposed by c on S is inconsistent with equals,\n the sorted set (or sorted map) will behave \"strangely.\"  In particular the\n sorted set (or sorted map) will violate the general contract for set (or\n map), which is defined in terms of equals.\n\n For example, suppose one adds two elements a and b such that\n (a.equals(b) && c.compare(a, b) != 0)\n to an empty TreeSet with comparator c.\n The second add operation will return\n true (and the size of the tree set will increase) because a and\n b are not equivalent from the tree set's perspective, even though\n this is contrary to the specification of the\n Set.add method.\n\n Note: It is generally a good idea for comparators to also implement\n java.io.Serializable, as they may be used as ordering methods in\n serializable data structures (like TreeSet, TreeMap).  In\n order for the data structure to serialize successfully, the comparator (if\n provided) must implement Serializable.\n\n For the mathematically inclined, the relation that defines the\n imposed ordering that a given comparator c imposes on a\n given set of objects S is:\n       {(x, y) such that c.compare(x, y) <= 0}.\n  The quotient for this total order is:\n       {(x, y) such that c.compare(x, y) == 0}.\n \n\n It follows immediately from the contract for compare that the\n quotient is an equivalence relation on S, and that the\n imposed ordering is a total order on S.  When we say that\n the ordering imposed by c on S is consistent with\n equals, we mean that the quotient for the ordering is the equivalence\n relation defined by the objects' equals(Object) method(s):\n     {(x, y) such that x.equals(y)}. \nUnlike Comparable, a comparator may optionally permit\n comparison of null arguments, while maintaining the requirements for\n an equivalence relation.\n\n This interface is a member of the\n \n Java Collections Framework.", "codes": ["@FunctionalInterface\npublic interface Comparator<T>"], "fields": [], "methods": [{"method_name": "compare", "method_sig": "int compare (T o1,\n            T o2)", "description": "Compares its two arguments for order.  Returns a negative integer,\n zero, or a positive integer as the first argument is less than, equal\n to, or greater than the second.\n\n The implementor must ensure that sgn(compare(x, y)) ==\n -sgn(compare(y, x)) for all x and y.  (This\n implies that compare(x, y) must throw an exception if and only\n if compare(y, x) throws an exception.)\n\n The implementor must also ensure that the relation is transitive:\n ((compare(x, y)>0) && (compare(y, z)>0)) implies\n compare(x, z)>0.\n\n Finally, the implementor must ensure that compare(x, y)==0\n implies that sgn(compare(x, z))==sgn(compare(y, z)) for all\n z.\n\n It is generally the case, but not strictly required that\n (compare(x, y)==0) == (x.equals(y)).  Generally speaking,\n any comparator that violates this condition should clearly indicate\n this fact.  The recommended language is \"Note: this comparator\n imposes orderings that are inconsistent with equals.\"\n\n In the foregoing description, the notation\n sgn(expression) designates the mathematical\n signum function, which is defined to return one of -1,\n 0, or 1 according to whether the value of\n expression is negative, zero, or positive, respectively."}, {"method_name": "equals", "method_sig": "boolean equals (Object obj)", "description": "Indicates whether some other object is \"equal to\" this\n comparator.  This method must obey the general contract of\n Object.equals(Object).  Additionally, this method can return\n true only if the specified object is also a comparator\n and it imposes the same ordering as this comparator.  Thus,\n comp1.equals(comp2) implies that sgn(comp1.compare(o1,\n o2))==sgn(comp2.compare(o1, o2)) for every object reference\n o1 and o2.\n\n Note that it is always safe not to override\n Object.equals(Object).  However, overriding this method may,\n in some cases, improve performance by allowing programs to determine\n that two distinct comparators impose the same order."}, {"method_name": "reversed", "method_sig": "default Comparator<T> reversed()", "description": "Returns a comparator that imposes the reverse ordering of this\n comparator."}, {"method_name": "thenComparing", "method_sig": "default Comparator<T> thenComparing (Comparator<? super T> other)", "description": "Returns a lexicographic-order comparator with another comparator.\n If this Comparator considers two elements equal, i.e.\n compare(a, b) == 0, other is used to determine the order.\n\n The returned comparator is serializable if the specified comparator\n is also serializable."}, {"method_name": "thenComparing", "method_sig": "default <U> Comparator<T> thenComparing (Function<? super T, ? extends U> keyExtractor,\n                                        Comparator<? super U> keyComparator)", "description": "Returns a lexicographic-order comparator with a function that\n extracts a key to be compared with the given Comparator."}, {"method_name": "thenComparing", "method_sig": "default <U extends Comparable<? super U>> Comparator<T> thenComparing (Function<? super T, ? extends U> keyExtractor)", "description": "Returns a lexicographic-order comparator with a function that\n extracts a Comparable sort key."}, {"method_name": "thenComparingInt", "method_sig": "default Comparator<T> thenComparingInt (ToIntFunction<? super T> keyExtractor)", "description": "Returns a lexicographic-order comparator with a function that\n extracts an int sort key."}, {"method_name": "thenComparingLong", "method_sig": "default Comparator<T> thenComparingLong (ToLongFunction<? super T> keyExtractor)", "description": "Returns a lexicographic-order comparator with a function that\n extracts a long sort key."}, {"method_name": "thenComparingDouble", "method_sig": "default Comparator<T> thenComparingDouble (ToDoubleFunction<? super T> keyExtractor)", "description": "Returns a lexicographic-order comparator with a function that\n extracts a double sort key."}, {"method_name": "reverseOrder", "method_sig": "static <T extends Comparable<? super T>> Comparator<T> reverseOrder()", "description": "Returns a comparator that imposes the reverse of the natural\n ordering.\n\n The returned comparator is serializable and throws NullPointerException when comparing null."}, {"method_name": "naturalOrder", "method_sig": "static <T extends Comparable<? super T>> Comparator<T> naturalOrder()", "description": "Returns a comparator that compares Comparable objects in natural\n order.\n\n The returned comparator is serializable and throws NullPointerException when comparing null."}, {"method_name": "nullsFirst", "method_sig": "static <T> Comparator<T> nullsFirst (Comparator<? super T> comparator)", "description": "Returns a null-friendly comparator that considers null to be\n less than non-null. When both are null, they are considered\n equal. If both are non-null, the specified Comparator is used\n to determine the order. If the specified comparator is null,\n then the returned comparator considers all non-null values to be equal.\n\n The returned comparator is serializable if the specified comparator\n is serializable."}, {"method_name": "nullsLast", "method_sig": "static <T> Comparator<T> nullsLast (Comparator<? super T> comparator)", "description": "Returns a null-friendly comparator that considers null to be\n greater than non-null. When both are null, they are considered\n equal. If both are non-null, the specified Comparator is used\n to determine the order. If the specified comparator is null,\n then the returned comparator considers all non-null values to be equal.\n\n The returned comparator is serializable if the specified comparator\n is serializable."}, {"method_name": "comparing", "method_sig": "static <T, U> Comparator<T> comparing (Function<? super T, ? extends U> keyExtractor,\n                                           Comparator<? super U> keyComparator)", "description": "Accepts a function that extracts a sort key from a type T, and\n returns a Comparator<T> that compares by that sort key using\n the specified Comparator.\n\n The returned comparator is serializable if the specified function\n and comparator are both serializable."}, {"method_name": "comparing", "method_sig": "static <T, U extends Comparable<? super U>> Comparator<T> comparing (Function<? super T, ? extends U> keyExtractor)", "description": "Accepts a function that extracts a Comparable sort key from a type T, and returns a \n Comparator<T> that compares by that sort key.\n\n The returned comparator is serializable if the specified function\n is also serializable."}, {"method_name": "comparingInt", "method_sig": "static <T> Comparator<T> comparingInt (ToIntFunction<? super T> keyExtractor)", "description": "Accepts a function that extracts an int sort key from a type\n T, and returns a Comparator<T> that compares by that\n sort key.\n\n The returned comparator is serializable if the specified function\n is also serializable."}, {"method_name": "comparingLong", "method_sig": "static <T> Comparator<T> comparingLong (ToLongFunction<? super T> keyExtractor)", "description": "Accepts a function that extracts a long sort key from a type\n T, and returns a Comparator<T> that compares by that\n sort key.\n\n The returned comparator is serializable if the specified function is\n also serializable."}, {"method_name": "comparingDouble", "method_sig": "static <T> Comparator<T> comparingDouble (ToDoubleFunction<? super T> keyExtractor)", "description": "Accepts a function that extracts a double sort key from a type\n T, and returns a Comparator<T> that compares by that\n sort key.\n\n The returned comparator is serializable if the specified function\n is also serializable."}]}