{"name": "Interface AsynchronousByteChannel", "module": "java.base", "package": "java.nio.channels", "text": "An asynchronous channel that can read and write bytes.\n\n  Some channels may not allow more than one read or write to be outstanding\n at any given time. If a thread invokes a read method before a previous read\n operation has completed then a ReadPendingException will be thrown.\n Similarly, if a write method is invoked before a previous write has completed\n then WritePendingException is thrown. Whether or not other kinds of\n I/O operations may proceed concurrently with a read operation depends upon\n the type of the channel.\n\n  Note that ByteBuffers are not safe for use by\n multiple concurrent threads. When a read or write operation is initiated then\n care must be taken to ensure that the buffer is not accessed until the\n operation completes.", "codes": ["public interface AsynchronousByteChannel\nextends AsynchronousChannel"], "fields": [], "methods": [{"method_name": "read", "method_sig": "<A> void read (ByteBuffer dst,\n              A attachment,\n              CompletionHandler<Integer, ? super A> handler)", "description": "Reads a sequence of bytes from this channel into the given buffer.\n\n  This method initiates an asynchronous read operation to read a\n sequence of bytes from this channel into the given buffer. The \n handler parameter is a completion handler that is invoked when the read\n operation completes (or fails). The result passed to the completion\n handler is the number of bytes read or -1 if no bytes could be\n read because the channel has reached end-of-stream.\n\n  The read operation may read up to r bytes from the channel,\n where r is the number of bytes remaining in the buffer, that is,\n dst.remaining() at the time that the read is attempted. Where\n r is 0, the read operation completes immediately with a result of\n 0 without initiating an I/O operation.\n\n  Suppose that a byte sequence of length n is read, where\n 0\u00a0<\u00a0n\u00a0<=\u00a0r.\n This byte sequence will be transferred into the buffer so that the first\n byte in the sequence is at index p and the last byte is at index\n p\u00a0+\u00a0n\u00a0-\u00a01,\n where p is the buffer's position at the moment the read is\n performed. Upon completion the buffer's position will be equal to\n p\u00a0+\u00a0n; its limit will not have changed.\n\n  Buffers are not safe for use by multiple concurrent threads so care\n should be taken to not access the buffer until the operation has\n completed.\n\n  This method may be invoked at any time. Some channel types may not\n allow more than one read to be outstanding at any given time. If a thread\n initiates a read operation before a previous read operation has\n completed then a ReadPendingException will be thrown."}, {"method_name": "read", "method_sig": "Future<Integer> read (ByteBuffer dst)", "description": "Reads a sequence of bytes from this channel into the given buffer.\n\n  This method initiates an asynchronous read operation to read a\n sequence of bytes from this channel into the given buffer. The method\n behaves in exactly the same manner as the read(ByteBuffer,Object,CompletionHandler) method except that instead\n of specifying a completion handler, this method returns a Future\n representing the pending result. The Future's get method returns the number of bytes read or -1 if no bytes\n could be read because the channel has reached end-of-stream."}, {"method_name": "write", "method_sig": "<A> void write (ByteBuffer src,\n               A attachment,\n               CompletionHandler<Integer, ? super A> handler)", "description": "Writes a sequence of bytes to this channel from the given buffer.\n\n  This method initiates an asynchronous write operation to write a\n sequence of bytes to this channel from the given buffer. The \n handler parameter is a completion handler that is invoked when the write\n operation completes (or fails). The result passed to the completion\n handler is the number of bytes written.\n\n  The write operation may write up to r bytes to the channel,\n where r is the number of bytes remaining in the buffer, that is,\n src.remaining() at the time that the write is attempted. Where\n r is 0, the write operation completes immediately with a result of\n 0 without initiating an I/O operation.\n\n  Suppose that a byte sequence of length n is written, where\n 0\u00a0<\u00a0n\u00a0<=\u00a0r.\n This byte sequence will be transferred from the buffer starting at index\n p, where p is the buffer's position at the moment the\n write is performed; the index of the last byte written will be\n p\u00a0+\u00a0n\u00a0-\u00a01.\n Upon completion the buffer's position will be equal to\n p\u00a0+\u00a0n; its limit will not have changed.\n\n  Buffers are not safe for use by multiple concurrent threads so care\n should be taken to not access the buffer until the operation has\n completed.\n\n  This method may be invoked at any time. Some channel types may not\n allow more than one write to be outstanding at any given time. If a thread\n initiates a write operation before a previous write operation has\n completed then a WritePendingException will be thrown."}, {"method_name": "write", "method_sig": "Future<Integer> write (ByteBuffer src)", "description": "Writes a sequence of bytes to this channel from the given buffer.\n\n  This method initiates an asynchronous write operation to write a\n sequence of bytes to this channel from the given buffer. The method\n behaves in exactly the same manner as the write(ByteBuffer,Object,CompletionHandler) method except that instead\n of specifying a completion handler, this method returns a Future\n representing the pending result. The Future's get method returns the number of bytes written."}]}