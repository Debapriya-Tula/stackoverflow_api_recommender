{"name": "Class ConsoleHandler", "module": "java.logging", "package": "java.util.logging", "text": "This Handler publishes log records to System.err.\n By default the SimpleFormatter is used to generate brief summaries.\n \nConfiguration:\n By default each ConsoleHandler is initialized using the following\n LogManager configuration properties where <handler-name>\n refers to the fully-qualified class name of the handler.\n If properties are not defined\n (or have invalid values) then the specified default values are used.\n \n   <handler-name>.level\n        specifies the default level for the Handler\n        (defaults to Level.INFO). \n   <handler-name>.filter\n        specifies the name of a Filter class to use\n        (defaults to no Filter). \n   <handler-name>.formatter\n        specifies the name of a Formatter class to use\n        (defaults to java.util.logging.SimpleFormatter). \n   <handler-name>.encoding\n        the name of the character set encoding to use (defaults to\n        the default platform encoding). \n\n\n For example, the properties for ConsoleHandler would be:\n \n   java.util.logging.ConsoleHandler.level=INFO \n   java.util.logging.ConsoleHandler.formatter=java.util.logging.SimpleFormatter \n\n\n For a custom handler, e.g. com.foo.MyHandler, the properties would be:\n \n   com.foo.MyHandler.level=INFO \n   com.foo.MyHandler.formatter=java.util.logging.SimpleFormatter \n", "codes": ["public class ConsoleHandler\nextends StreamHandler"], "fields": [], "methods": [{"method_name": "publish", "method_sig": "public void publish (LogRecord record)", "description": "Publish a LogRecord.\n \n The logging request was made initially to a Logger object,\n which initialized the LogRecord and forwarded it here."}, {"method_name": "close", "method_sig": "public void close()", "description": "Override StreamHandler.close to do a flush but not\n to close the output stream.  That is, we do not\n close System.err."}]}