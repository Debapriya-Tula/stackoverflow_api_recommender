{"name": "Interface ThreadMXBean", "module": "java.management", "package": "java.lang.management", "text": "The management interface for the thread system of\n the Java virtual machine.\n\n  A Java virtual machine has a single instance of the implementation\n class of this interface.  This instance implementing this interface is\n an MXBean\n that can be obtained by calling\n the ManagementFactory.getThreadMXBean() method or\n from the platform MBeanServer method.\n\n The ObjectName for uniquely identifying the MXBean for\n the thread system within an MBeanServer is:\n \njava.lang:type=Threading\n\n\n It can be obtained by calling the\n PlatformManagedObject.getObjectName() method.\n\n Thread ID\n Thread ID is a positive long value returned by calling the\n Thread.getId() method for a thread.\n The thread ID is unique during its lifetime.  When a thread\n is terminated, this thread ID may be reused.\n\n  Some methods in this interface take a thread ID or an array\n of thread IDs as the input parameter and return per-thread information.\n\n Thread CPU time\n A Java virtual machine implementation may support measuring\n the CPU time for the current thread, for any thread, or for no threads.\n\n \n The isThreadCpuTimeSupported() method can be used to determine\n if a Java virtual machine supports measuring of the CPU time for any\n thread.  The isCurrentThreadCpuTimeSupported() method can\n be used to determine if a Java virtual machine supports measuring of\n the CPU time for the current  thread.\n A Java virtual machine implementation that supports CPU time measurement\n for any thread will also support that for the current thread.\n\n  The CPU time provided by this interface has nanosecond precision\n but not necessarily nanosecond accuracy.\n\n \n A Java virtual machine may disable CPU time measurement\n by default.\n The isThreadCpuTimeEnabled() and setThreadCpuTimeEnabled(boolean)\n methods can be used to test if CPU time measurement is enabled\n and to enable/disable this support respectively.\n Enabling thread CPU measurement could be expensive in some\n Java virtual machine implementations.\n\n Thread Contention Monitoring\n Some Java virtual machines may support thread contention monitoring.\n When thread contention monitoring is enabled, the accumulated elapsed\n time that the thread has blocked for synchronization or waited for\n notification will be collected and returned in the\n ThreadInfo object.\n \n The isThreadContentionMonitoringSupported() method can be used to\n determine if a Java virtual machine supports thread contention monitoring.\n The thread contention monitoring is disabled by default.  The\n setThreadContentionMonitoringEnabled(boolean) method can be used to enable\n thread contention monitoring.\n\n Synchronization Information and Deadlock Detection\n Some Java virtual machines may support monitoring of\n object monitor usage and\n ownable synchronizer usage.\n The getThreadInfo(long[], boolean, boolean) and\n dumpAllThreads(boolean, boolean) methods can be used to obtain the thread stack trace\n and synchronization information including which\n lock a thread is blocked to\n acquire or waiting on and which locks the thread currently owns.\n \n The ThreadMXBean interface provides the\n findMonitorDeadlockedThreads() and\n findDeadlockedThreads() methods to find deadlocks in\n the running application.", "codes": ["public interface ThreadMXBean\nextends PlatformManagedObject"], "fields": [], "methods": [{"method_name": "getThreadCount", "method_sig": "int getThreadCount()", "description": "Returns the current number of live threads including both\n daemon and non-daemon threads."}, {"method_name": "getPeakThreadCount", "method_sig": "int getPeakThreadCount()", "description": "Returns the peak live thread count since the Java virtual machine\n started or peak was reset."}, {"method_name": "getTotalStartedThreadCount", "method_sig": "long getTotalStartedThreadCount()", "description": "Returns the total number of threads created and also started\n since the Java virtual machine started."}, {"method_name": "getDaemonThreadCount", "method_sig": "int getDaemonThreadCount()", "description": "Returns the current number of live daemon threads."}, {"method_name": "getAllThreadIds", "method_sig": "long[] getAllThreadIds()", "description": "Returns all live thread IDs.\n Some threads included in the returned array\n may have been terminated when this method returns."}, {"method_name": "getThreadInfo", "method_sig": "ThreadInfo getThreadInfo (long id)", "description": "Returns the thread info for a thread of the specified\n id with no stack trace.\n This method is equivalent to calling:\n \ngetThreadInfo(id, 0);\n\n\n This method returns a ThreadInfo object representing\n the thread information for the thread of the specified ID.\n The stack trace, locked monitors, and locked synchronizers\n in the returned ThreadInfo object will\n be empty.\n\n If a thread of the given ID is not alive or does not exist,\n this method will return null.  A thread is alive if\n it has been started and has not yet died.\n\n \nMBeanServer access:\n The mapped type of ThreadInfo is\n CompositeData with attributes as specified in the\n ThreadInfo.from method."}, {"method_name": "getThreadInfo", "method_sig": "ThreadInfo[] getThreadInfo (long[] ids)", "description": "Returns the thread info for each thread\n whose ID is in the input array ids with no stack trace.\n This method is equivalent to calling:\n \n   getThreadInfo(ids, 0);\n \n\n This method returns an array of the ThreadInfo objects.\n The stack trace, locked monitors, and locked synchronizers\n in each ThreadInfo object will be empty.\n\n If a thread of a given ID is not alive or does not exist,\n the corresponding element in the returned array will\n contain null.  A thread is alive if\n it has been started and has not yet died.\n\n \nMBeanServer access:\n The mapped type of ThreadInfo is\n CompositeData with attributes as specified in the\n ThreadInfo.from method."}, {"method_name": "getThreadInfo", "method_sig": "ThreadInfo getThreadInfo (long id,\n                         int maxDepth)", "description": "Returns a thread info for a thread of the specified id,\n with stack trace of a specified number of stack trace elements.\n The maxDepth parameter indicates the maximum number of\n StackTraceElement to be retrieved from the stack trace.\n If maxDepth == Integer.MAX_VALUE, the entire stack trace of\n the thread will be dumped.\n If maxDepth == 0, no stack trace of the thread\n will be dumped.\n This method does not obtain the locked monitors and locked\n synchronizers of the thread.\n \n When the Java virtual machine has no stack trace information\n about a thread or maxDepth == 0,\n the stack trace in the\n ThreadInfo object will be an empty array of\n StackTraceElement.\n\n \n If a thread of the given ID is not alive or does not exist,\n this method will return null.  A thread is alive if\n it has been started and has not yet died.\n\n \nMBeanServer access:\n The mapped type of ThreadInfo is\n CompositeData with attributes as specified in the\n ThreadInfo.from method."}, {"method_name": "getThreadInfo", "method_sig": "ThreadInfo[] getThreadInfo (long[] ids,\n                           int maxDepth)", "description": "Returns the thread info for each thread\n whose ID is in the input array ids,\n with stack trace of a specified number of stack trace elements.\n The maxDepth parameter indicates the maximum number of\n StackTraceElement to be retrieved from the stack trace.\n If maxDepth == Integer.MAX_VALUE, the entire stack trace of\n the thread will be dumped.\n If maxDepth == 0, no stack trace of the thread\n will be dumped.\n This method does not obtain the locked monitors and locked\n synchronizers of the threads.\n \n When the Java virtual machine has no stack trace information\n about a thread or maxDepth == 0,\n the stack trace in the\n ThreadInfo object will be an empty array of\n StackTraceElement.\n \n This method returns an array of the ThreadInfo objects,\n each is the thread information about the thread with the same index\n as in the ids array.\n If a thread of the given ID is not alive or does not exist,\n null will be set in the corresponding element\n in the returned array.  A thread is alive if\n it has been started and has not yet died.\n\n \nMBeanServer access:\n The mapped type of ThreadInfo is\n CompositeData with attributes as specified in the\n ThreadInfo.from method."}, {"method_name": "isThreadContentionMonitoringSupported", "method_sig": "boolean isThreadContentionMonitoringSupported()", "description": "Tests if the Java virtual machine supports thread contention monitoring."}, {"method_name": "isThreadContentionMonitoringEnabled", "method_sig": "boolean isThreadContentionMonitoringEnabled()", "description": "Tests if thread contention monitoring is enabled."}, {"method_name": "setThreadContentionMonitoringEnabled", "method_sig": "void setThreadContentionMonitoringEnabled (boolean enable)", "description": "Enables or disables thread contention monitoring.\n Thread contention monitoring is disabled by default."}, {"method_name": "getCurrentThreadCpuTime", "method_sig": "long getCurrentThreadCpuTime()", "description": "Returns the total CPU time for the current thread in nanoseconds.\n The returned value is of nanoseconds precision but\n not necessarily nanoseconds accuracy.\n If the implementation distinguishes between user mode time and system\n mode time, the returned CPU time is the amount of time that\n the current thread has executed in user mode or system mode.\n\n \n This is a convenient method for local management use and is\n equivalent to calling:\n \n   getThreadCpuTime(Thread.currentThread().getId());\n "}, {"method_name": "getCurrentThreadUserTime", "method_sig": "long getCurrentThreadUserTime()", "description": "Returns the CPU time that the current thread has executed\n in user mode in nanoseconds.\n The returned value is of nanoseconds precision but\n not necessarily nanoseconds accuracy.\n\n \n This is a convenient method for local management use and is\n equivalent to calling:\n \n   getThreadUserTime(Thread.currentThread().getId());\n "}, {"method_name": "getThreadCpuTime", "method_sig": "long getThreadCpuTime (long id)", "description": "Returns the total CPU time for a thread of the specified ID in nanoseconds.\n The returned value is of nanoseconds precision but\n not necessarily nanoseconds accuracy.\n If the implementation distinguishes between user mode time and system\n mode time, the returned CPU time is the amount of time that\n the thread has executed in user mode or system mode.\n\n \n If the thread of the specified ID is not alive or does not exist,\n this method returns -1. If CPU time measurement\n is disabled, this method returns -1.\n A thread is alive if it has been started and has not yet died.\n \n If CPU time measurement is enabled after the thread has started,\n the Java virtual machine implementation may choose any time up to\n and including the time that the capability is enabled as the point\n where CPU time measurement starts."}, {"method_name": "getThreadUserTime", "method_sig": "long getThreadUserTime (long id)", "description": "Returns the CPU time that a thread of the specified ID\n has executed in user mode in nanoseconds.\n The returned value is of nanoseconds precision but\n not necessarily nanoseconds accuracy.\n\n \n If the thread of the specified ID is not alive or does not exist,\n this method returns -1. If CPU time measurement\n is disabled, this method returns -1.\n A thread is alive if it has been started and has not yet died.\n \n If CPU time measurement is enabled after the thread has started,\n the Java virtual machine implementation may choose any time up to\n and including the time that the capability is enabled as the point\n where CPU time measurement starts."}, {"method_name": "isThreadCpuTimeSupported", "method_sig": "boolean isThreadCpuTimeSupported()", "description": "Tests if the Java virtual machine implementation supports CPU time\n measurement for any thread.\n A Java virtual machine implementation that supports CPU time\n measurement for any thread will also support CPU time\n measurement for the current thread."}, {"method_name": "isCurrentThreadCpuTimeSupported", "method_sig": "boolean isCurrentThreadCpuTimeSupported()", "description": "Tests if the Java virtual machine supports CPU time\n measurement for the current thread.\n This method returns true if isThreadCpuTimeSupported()\n returns true."}, {"method_name": "isThreadCpuTimeEnabled", "method_sig": "boolean isThreadCpuTimeEnabled()", "description": "Tests if thread CPU time measurement is enabled."}, {"method_name": "setThreadCpuTimeEnabled", "method_sig": "void setThreadCpuTimeEnabled (boolean enable)", "description": "Enables or disables thread CPU time measurement.  The default\n is platform dependent."}, {"method_name": "findMonitorDeadlockedThreads", "method_sig": "long[] findMonitorDeadlockedThreads()", "description": "Finds cycles of threads that are in deadlock waiting to acquire\n object monitors. That is, threads that are blocked waiting to enter a\n synchronization block or waiting to reenter a synchronization block\n after an Object.wait call,\n where each thread owns one monitor while\n trying to obtain another monitor already held by another thread\n in a cycle.\n \n More formally, a thread is monitor deadlocked if it is\n part of a cycle in the relation \"is waiting for an object monitor\n owned by\".  In the simplest case, thread A is blocked waiting\n for a monitor owned by thread B, and thread B is blocked waiting\n for a monitor owned by thread A.\n \n This method is designed for troubleshooting use, but not for\n synchronization control.  It might be an expensive operation.\n \n This method finds deadlocks involving only object monitors.\n To find deadlocks involving both object monitors and\n ownable synchronizers,\n the findDeadlockedThreads method\n should be used."}, {"method_name": "resetPeakThreadCount", "method_sig": "void resetPeakThreadCount()", "description": "Resets the peak thread count to the current number of\n live threads."}, {"method_name": "findDeadlockedThreads", "method_sig": "long[] findDeadlockedThreads()", "description": "Finds cycles of threads that are in deadlock waiting to acquire\n object monitors or\n ownable synchronizers.\n\n Threads are deadlocked in a cycle waiting for a lock of\n these two types if each thread owns one lock while\n trying to acquire another lock already held\n by another thread in the cycle.\n \n This method is designed for troubleshooting use, but not for\n synchronization control.  It might be an expensive operation."}, {"method_name": "isObjectMonitorUsageSupported", "method_sig": "boolean isObjectMonitorUsageSupported()", "description": "Tests if the Java virtual machine supports monitoring of\n object monitor usage."}, {"method_name": "isSynchronizerUsageSupported", "method_sig": "boolean isSynchronizerUsageSupported()", "description": "Tests if the Java virtual machine supports monitoring of\n \n ownable synchronizer usage."}, {"method_name": "getThreadInfo", "method_sig": "ThreadInfo[] getThreadInfo (long[] ids,\n                           boolean lockedMonitors,\n                           boolean lockedSynchronizers)", "description": "Returns the thread info for each thread\n whose ID is in the input array ids,\n with stack trace and synchronization information.\n This is equivalent to calling:\n \ngetThreadInfo(ids, lockedMonitors, lockedSynchronizers, Integer.MAX_VALUE)\n"}, {"method_name": "getThreadInfo", "method_sig": "default ThreadInfo[] getThreadInfo (long[] ids,\n                                   boolean lockedMonitors,\n                                   boolean lockedSynchronizers,\n                                   int maxDepth)", "description": "Returns the thread info for each thread whose ID\n is in the input array ids,\n with stack trace of the specified maximum number of elements\n and synchronization information.\n If maxDepth == 0, no stack trace of the thread\n will be dumped.\n\n \n This method obtains a snapshot of the thread information\n for each thread including:\n \nstack trace of the specified maximum number of elements,\nthe object monitors currently locked by the thread\n        if lockedMonitors is true, and\nthe \n        ownable synchronizers currently locked by the thread\n        if lockedSynchronizers is true.\n\n\n This method returns an array of the ThreadInfo objects,\n each is the thread information about the thread with the same index\n as in the ids array.\n If a thread of the given ID is not alive or does not exist,\n null will be set in the corresponding element\n in the returned array.  A thread is alive if\n it has been started and has not yet died.\n \n If a thread does not lock any object monitor or lockedMonitors\n is false, the returned ThreadInfo object will have an\n empty MonitorInfo array.  Similarly, if a thread does not\n lock any synchronizer or lockedSynchronizers is false,\n the returned ThreadInfo object\n will have an empty LockInfo array.\n\n \n When both lockedMonitors and lockedSynchronizers\n parameters are false, it is equivalent to calling:\n \n     getThreadInfo(ids, maxDepth)\n \n\n This method is designed for troubleshooting use, but not for\n synchronization control.  It might be an expensive operation.\n\n \nMBeanServer access:\n The mapped type of ThreadInfo is\n CompositeData with attributes as specified in the\n ThreadInfo.from method."}, {"method_name": "dumpAllThreads", "method_sig": "ThreadInfo[] dumpAllThreads (boolean lockedMonitors,\n                            boolean lockedSynchronizers)", "description": "Returns the thread info for all live threads with stack trace\n and synchronization information.\n This is equivalent to calling:\n \ndumpAllThreads(lockedMonitors, lockedSynchronizers, Integer.MAX_VALUE)\n"}, {"method_name": "dumpAllThreads", "method_sig": "default ThreadInfo[] dumpAllThreads (boolean lockedMonitors,\n                                    boolean lockedSynchronizers,\n                                    int maxDepth)", "description": "Returns the thread info for all live threads\n with stack trace of the specified maximum number of elements\n and synchronization information.\n if maxDepth == 0, no stack trace of the thread\n will be dumped.\n Some threads included in the returned array\n may have been terminated when this method returns.\n\n \n This method returns an array of ThreadInfo objects\n as specified in the getThreadInfo(long[], boolean, boolean, int)\n method."}]}