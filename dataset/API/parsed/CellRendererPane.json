{"name": "Class CellRendererPane", "module": "java.desktop", "package": "javax.swing", "text": "This class is inserted in between cell renderers and the components that\n use them.  It just exists to thwart the repaint() and invalidate() methods\n which would otherwise propagate up the tree when the renderer was configured.\n It's used by the implementations of JTable, JTree, and JList.  For example,\n here's how CellRendererPane is used in the code the paints each row\n in a JList:\n \n   cellRendererPane = new CellRendererPane();\n   ...\n   Component rendererComponent = renderer.getListCellRendererComponent();\n   renderer.configureListCellRenderer(dataModel.getElementAt(row), row);\n   cellRendererPane.paintComponent(g, rendererComponent, this, x, y, w, h);\n \n\n A renderer component must override isShowing() and unconditionally return\n true to work correctly because the Swing paint does nothing for components\n with isShowing false.\n \nWarning:\n Serialized objects of this class will not be compatible with\n future Swing releases. The current serialization support is\n appropriate for short term storage or RMI between applications running\n the same version of Swing.  As of 1.4, support for long term storage\n of all JavaBeans\u2122\n has been added to the java.beans package.\n Please see XMLEncoder.", "codes": ["public class CellRendererPane\nextends Container\nimplements Accessible"], "fields": [{"field_name": "accessibleContext", "field_sig": "protected\u00a0AccessibleContext accessibleContext", "description": "AccessibleContext associated with this CellRendererPan"}], "methods": [{"method_name": "invalidate", "method_sig": "public void invalidate()", "description": "Overridden to avoid propagating a invalidate up the tree when the\n cell renderer child is configured."}, {"method_name": "paint", "method_sig": "public void paint (Graphics g)", "description": "Shouldn't be called."}, {"method_name": "update", "method_sig": "public void update (Graphics g)", "description": "Shouldn't be called."}, {"method_name": "addImpl", "method_sig": "protected void addImpl (Component x,\n                       Object constraints,\n                       int index)", "description": "If the specified component is already a child of this then we don't\n bother doing anything - stacking order doesn't matter for cell\n renderer components (CellRendererPane doesn't paint anyway)."}, {"method_name": "paintComponent", "method_sig": "public void paintComponent (Graphics g,\n                           Component c,\n                           Container p,\n                           int x,\n                           int y,\n                           int w,\n                           int h,\n                           boolean shouldValidate)", "description": "Paint a cell renderer component c on graphics object g.  Before the component\n is drawn it's reparented to this (if that's necessary), it's bounds\n are set to w,h and the graphics object is (effectively) translated to x,y.\n If it's a JComponent, double buffering is temporarily turned off. After\n the component is painted it's bounds are reset to -w, -h, 0, 0 so that, if\n it's the last renderer component painted, it will not start consuming input.\n The Container p is the component we're actually drawing on, typically it's\n equal to this.getParent(). If shouldValidate is true the component c will be\n validated before painted."}, {"method_name": "paintComponent", "method_sig": "public void paintComponent (Graphics g,\n                           Component c,\n                           Container p,\n                           int x,\n                           int y,\n                           int w,\n                           int h)", "description": "Calls this.paintComponent(g, c, p, x, y, w, h, false)."}, {"method_name": "paintComponent", "method_sig": "public void paintComponent (Graphics g,\n                           Component c,\n                           Container p,\n                           Rectangle r)", "description": "Calls this.paintComponent() with the rectangles x,y,width,height fields."}, {"method_name": "getAccessibleContext", "method_sig": "public AccessibleContext getAccessibleContext()", "description": "Gets the AccessibleContext associated with this CellRendererPane.\n For CellRendererPanes, the AccessibleContext takes the form of an\n AccessibleCellRendererPane.\n A new AccessibleCellRendererPane instance is created if necessary."}]}