{"name": "Class Math", "module": "java.base", "package": "java.lang", "text": "The class Math contains methods for performing basic\n numeric operations such as the elementary exponential, logarithm,\n square root, and trigonometric functions.\n\n Unlike some of the numeric methods of class\n StrictMath, all implementations of the equivalent\n functions of class Math are not defined to return the\n bit-for-bit same results.  This relaxation permits\n better-performing implementations where strict reproducibility is\n not required.\n\n By default many of the Math methods simply call\n the equivalent method in StrictMath for their\n implementation.  Code generators are encouraged to use\n platform-specific native libraries or microprocessor instructions,\n where available, to provide higher-performance implementations of\n Math methods.  Such higher-performance\n implementations still must conform to the specification for\n Math.\n\n The quality of implementation specifications concern two\n properties, accuracy of the returned result and monotonicity of the\n method.  Accuracy of the floating-point Math methods is\n measured in terms of ulps, units in the last place.  For a\n given floating-point format, an ulp of a\n specific real number value is the distance between the two\n floating-point values bracketing that numerical value.  When\n discussing the accuracy of a method as a whole rather than at a\n specific argument, the number of ulps cited is for the worst-case\n error at any argument.  If a method always has an error less than\n 0.5 ulps, the method always returns the floating-point number\n nearest the exact result; such a method is correctly\n rounded.  A correctly rounded method is generally the best a\n floating-point approximation can be; however, it is impractical for\n many floating-point methods to be correctly rounded.  Instead, for\n the Math class, a larger error bound of 1 or 2 ulps is\n allowed for certain methods.  Informally, with a 1 ulp error bound,\n when the exact result is a representable number, the exact result\n should be returned as the computed result; otherwise, either of the\n two floating-point values which bracket the exact result may be\n returned.  For exact results large in magnitude, one of the\n endpoints of the bracket may be infinite.  Besides accuracy at\n individual arguments, maintaining proper relations between the\n method at different arguments is also important.  Therefore, most\n methods with more than 0.5 ulp errors are required to be\n semi-monotonic: whenever the mathematical function is\n non-decreasing, so is the floating-point approximation, likewise,\n whenever the mathematical function is non-increasing, so is the\n floating-point approximation.  Not all approximations that have 1\n ulp accuracy will automatically meet the monotonicity requirements.\n\n \n The platform uses signed two's complement integer arithmetic with\n int and long primitive types.  The developer should choose\n the primitive type to ensure that arithmetic operations consistently\n produce correct results, which in some cases means the operations\n will not overflow the range of values of the computation.\n The best practice is to choose the primitive type and algorithm to avoid\n overflow. In cases where the size is int or long and\n overflow errors need to be detected, the methods addExact,\n subtractExact, multiplyExact, and toIntExact\n throw an ArithmeticException when the results overflow.\n For other arithmetic operations such as divide, absolute value,\n increment by one, decrement by one, and negation, overflow occurs only with\n a specific minimum or maximum value and should be checked against\n the minimum or maximum as appropriate.", "codes": ["public final class Math\nextends Object"], "fields": [{"field_name": "E", "field_sig": "public static final\u00a0double E", "description": "The double value that is closer than any other to\n e, the base of the natural logarithms."}, {"field_name": "PI", "field_sig": "public static final\u00a0double PI", "description": "The double value that is closer than any other to\n pi, the ratio of the circumference of a circle to its\n diameter."}], "methods": [{"method_name": "sin", "method_sig": "public static double sin (double a)", "description": "Returns the trigonometric sine of an angle.  Special cases:\n If the argument is NaN or an infinity, then the\n result is NaN.\n If the argument is zero, then the result is a zero with the\n same sign as the argument.\nThe computed result must be within 1 ulp of the exact result.\n Results must be semi-monotonic."}, {"method_name": "cos", "method_sig": "public static double cos (double a)", "description": "Returns the trigonometric cosine of an angle. Special cases:\n If the argument is NaN or an infinity, then the\n result is NaN.\nThe computed result must be within 1 ulp of the exact result.\n Results must be semi-monotonic."}, {"method_name": "tan", "method_sig": "public static double tan (double a)", "description": "Returns the trigonometric tangent of an angle.  Special cases:\n If the argument is NaN or an infinity, then the result\n is NaN.\n If the argument is zero, then the result is a zero with the\n same sign as the argument.\nThe computed result must be within 1 ulp of the exact result.\n Results must be semi-monotonic."}, {"method_name": "asin", "method_sig": "public static double asin (double a)", "description": "Returns the arc sine of a value; the returned angle is in the\n range -pi/2 through pi/2.  Special cases:\n If the argument is NaN or its absolute value is greater\n than 1, then the result is NaN.\n If the argument is zero, then the result is a zero with the\n same sign as the argument.\nThe computed result must be within 1 ulp of the exact result.\n Results must be semi-monotonic."}, {"method_name": "acos", "method_sig": "public static double acos (double a)", "description": "Returns the arc cosine of a value; the returned angle is in the\n range 0.0 through pi.  Special case:\n If the argument is NaN or its absolute value is greater\n than 1, then the result is NaN.\nThe computed result must be within 1 ulp of the exact result.\n Results must be semi-monotonic."}, {"method_name": "atan", "method_sig": "public static double atan (double a)", "description": "Returns the arc tangent of a value; the returned angle is in the\n range -pi/2 through pi/2.  Special cases:\n If the argument is NaN, then the result is NaN.\n If the argument is zero, then the result is a zero with the\n same sign as the argument.\nThe computed result must be within 1 ulp of the exact result.\n Results must be semi-monotonic."}, {"method_name": "toRadians", "method_sig": "public static double toRadians (double angdeg)", "description": "Converts an angle measured in degrees to an approximately\n equivalent angle measured in radians.  The conversion from\n degrees to radians is generally inexact."}, {"method_name": "toDegrees", "method_sig": "public static double toDegrees (double angrad)", "description": "Converts an angle measured in radians to an approximately\n equivalent angle measured in degrees.  The conversion from\n radians to degrees is generally inexact; users should\n not expect cos(toRadians(90.0)) to exactly\n equal 0.0."}, {"method_name": "exp", "method_sig": "public static double exp (double a)", "description": "Returns Euler's number e raised to the power of a\n double value.  Special cases:\n If the argument is NaN, the result is NaN.\n If the argument is positive infinity, then the result is\n positive infinity.\n If the argument is negative infinity, then the result is\n positive zero.\nThe computed result must be within 1 ulp of the exact result.\n Results must be semi-monotonic."}, {"method_name": "log", "method_sig": "public static double log (double a)", "description": "Returns the natural logarithm (base e) of a double\n value.  Special cases:\n If the argument is NaN or less than zero, then the result\n is NaN.\n If the argument is positive infinity, then the result is\n positive infinity.\n If the argument is positive zero or negative zero, then the\n result is negative infinity.\nThe computed result must be within 1 ulp of the exact result.\n Results must be semi-monotonic."}, {"method_name": "log10", "method_sig": "public static double log10 (double a)", "description": "Returns the base 10 logarithm of a double value.\n Special cases:\n\n If the argument is NaN or less than zero, then the result\n is NaN.\n If the argument is positive infinity, then the result is\n positive infinity.\n If the argument is positive zero or negative zero, then the\n result is negative infinity.\n  If the argument is equal to 10n for\n integer n, then the result is n.\n \nThe computed result must be within 1 ulp of the exact result.\n Results must be semi-monotonic."}, {"method_name": "sqrt", "method_sig": "public static double sqrt (double a)", "description": "Returns the correctly rounded positive square root of a\n double value.\n Special cases:\n If the argument is NaN or less than zero, then the result\n is NaN.\n If the argument is positive infinity, then the result is positive\n infinity.\n If the argument is positive zero or negative zero, then the\n result is the same as the argument.\n Otherwise, the result is the double value closest to\n the true mathematical square root of the argument value."}, {"method_name": "cbrt", "method_sig": "public static double cbrt (double a)", "description": "Returns the cube root of a double value.  For\n positive finite x, cbrt(-x) ==\n -cbrt(x); that is, the cube root of a negative value is\n the negative of the cube root of that value's magnitude.\n\n Special cases:\n\n \nIf the argument is NaN, then the result is NaN.\n\n If the argument is infinite, then the result is an infinity\n with the same sign as the argument.\n\n If the argument is zero, then the result is a zero with the\n same sign as the argument.\n\n \nThe computed result must be within 1 ulp of the exact result."}, {"method_name": "IEEEremainder", "method_sig": "public static double IEEEremainder (double f1,\n                                   double f2)", "description": "Computes the remainder operation on two arguments as prescribed\n by the IEEE 754 standard.\n The remainder value is mathematically equal to\n f1\u00a0-\u00a0f2\u00a0\u00d7\u00a0n,\n where n is the mathematical integer closest to the exact\n mathematical value of the quotient f1/f2, and if two\n mathematical integers are equally close to f1/f2,\n then n is the integer that is even. If the remainder is\n zero, its sign is the same as the sign of the first argument.\n Special cases:\n If either argument is NaN, or the first argument is infinite,\n or the second argument is positive zero or negative zero, then the\n result is NaN.\n If the first argument is finite and the second argument is\n infinite, then the result is the same as the first argument."}, {"method_name": "ceil", "method_sig": "public static double ceil (double a)", "description": "Returns the smallest (closest to negative infinity)\n double value that is greater than or equal to the\n argument and is equal to a mathematical integer. Special cases:\n If the argument value is already equal to a\n mathematical integer, then the result is the same as the\n argument.  If the argument is NaN or an infinity or\n positive zero or negative zero, then the result is the same as\n the argument.  If the argument value is less than zero but\n greater than -1.0, then the result is negative zero. Note\n that the value of Math.ceil(x) is exactly the\n value of -Math.floor(-x)."}, {"method_name": "floor", "method_sig": "public static double floor (double a)", "description": "Returns the largest (closest to positive infinity)\n double value that is less than or equal to the\n argument and is equal to a mathematical integer. Special cases:\n If the argument value is already equal to a\n mathematical integer, then the result is the same as the\n argument.  If the argument is NaN or an infinity or\n positive zero or negative zero, then the result is the same as\n the argument."}, {"method_name": "rint", "method_sig": "public static double rint (double a)", "description": "Returns the double value that is closest in value\n to the argument and is equal to a mathematical integer. If two\n double values that are mathematical integers are\n equally close, the result is the integer value that is\n even. Special cases:\n If the argument value is already equal to a mathematical\n integer, then the result is the same as the argument.\n If the argument is NaN or an infinity or positive zero or negative\n zero, then the result is the same as the argument."}, {"method_name": "atan2", "method_sig": "public static double atan2 (double y,\n                           double x)", "description": "Returns the angle theta from the conversion of rectangular\n coordinates (x,\u00a0y) to polar\n coordinates (r,\u00a0theta).\n This method computes the phase theta by computing an arc tangent\n of y/x in the range of -pi to pi. Special\n cases:\n If either argument is NaN, then the result is NaN.\n If the first argument is positive zero and the second argument\n is positive, or the first argument is positive and finite and the\n second argument is positive infinity, then the result is positive\n zero.\n If the first argument is negative zero and the second argument\n is positive, or the first argument is negative and finite and the\n second argument is positive infinity, then the result is negative zero.\n If the first argument is positive zero and the second argument\n is negative, or the first argument is positive and finite and the\n second argument is negative infinity, then the result is the\n double value closest to pi.\n If the first argument is negative zero and the second argument\n is negative, or the first argument is negative and finite and the\n second argument is negative infinity, then the result is the\n double value closest to -pi.\n If the first argument is positive and the second argument is\n positive zero or negative zero, or the first argument is positive\n infinity and the second argument is finite, then the result is the\n double value closest to pi/2.\n If the first argument is negative and the second argument is\n positive zero or negative zero, or the first argument is negative\n infinity and the second argument is finite, then the result is the\n double value closest to -pi/2.\n If both arguments are positive infinity, then the result is the\n double value closest to pi/4.\n If the first argument is positive infinity and the second argument\n is negative infinity, then the result is the double\n value closest to 3*pi/4.\n If the first argument is negative infinity and the second argument\n is positive infinity, then the result is the double value\n closest to -pi/4.\n If both arguments are negative infinity, then the result is the\n double value closest to -3*pi/4.\nThe computed result must be within 2 ulps of the exact result.\n Results must be semi-monotonic."}, {"method_name": "pow", "method_sig": "public static double pow (double a,\n                         double b)", "description": "Returns the value of the first argument raised to the power of the\n second argument. Special cases:\n\n If the second argument is positive or negative zero, then the\n result is 1.0.\n If the second argument is 1.0, then the result is the same as the\n first argument.\n If the second argument is NaN, then the result is NaN.\n If the first argument is NaN and the second argument is nonzero,\n then the result is NaN.\n\n If\n \nthe absolute value of the first argument is greater than 1\n and the second argument is positive infinity, or\n the absolute value of the first argument is less than 1 and\n the second argument is negative infinity,\n \n then the result is positive infinity.\n\n If\n \nthe absolute value of the first argument is greater than 1 and\n the second argument is negative infinity, or\n the absolute value of the\n first argument is less than 1 and the second argument is positive\n infinity,\n \n then the result is positive zero.\n\n If the absolute value of the first argument equals 1 and the\n second argument is infinite, then the result is NaN.\n\n If\n \nthe first argument is positive zero and the second argument\n is greater than zero, or\n the first argument is positive infinity and the second\n argument is less than zero,\n \n then the result is positive zero.\n\n If\n \nthe first argument is positive zero and the second argument\n is less than zero, or\n the first argument is positive infinity and the second\n argument is greater than zero,\n \n then the result is positive infinity.\n\n If\n \nthe first argument is negative zero and the second argument\n is greater than zero but not a finite odd integer, or\n the first argument is negative infinity and the second\n argument is less than zero but not a finite odd integer,\n \n then the result is positive zero.\n\n If\n \nthe first argument is negative zero and the second argument\n is a positive finite odd integer, or\n the first argument is negative infinity and the second\n argument is a negative finite odd integer,\n \n then the result is negative zero.\n\n If\n \nthe first argument is negative zero and the second argument\n is less than zero but not a finite odd integer, or\n the first argument is negative infinity and the second\n argument is greater than zero but not a finite odd integer,\n \n then the result is positive infinity.\n\n If\n \nthe first argument is negative zero and the second argument\n is a negative finite odd integer, or\n the first argument is negative infinity and the second\n argument is a positive finite odd integer,\n \n then the result is negative infinity.\n\n If the first argument is finite and less than zero\n \n if the second argument is a finite even integer, the\n result is equal to the result of raising the absolute value of\n the first argument to the power of the second argument\n\n if the second argument is a finite odd integer, the result\n is equal to the negative of the result of raising the absolute\n value of the first argument to the power of the second\n argument\n\n if the second argument is finite and not an integer, then\n the result is NaN.\n \nIf both arguments are integers, then the result is exactly equal\n to the mathematical result of raising the first argument to the power\n of the second argument if that result can in fact be represented\n exactly as a double value.\n(In the foregoing descriptions, a floating-point value is\n considered to be an integer if and only if it is finite and a\n fixed point of the method ceil or,\n equivalently, a fixed point of the method floor. A value is a fixed point of a one-argument\n method if and only if the result of applying the method to the\n value is equal to the value.)\n\n The computed result must be within 1 ulp of the exact result.\n Results must be semi-monotonic."}, {"method_name": "round", "method_sig": "public static int round (float a)", "description": "Returns the closest int to the argument, with ties\n rounding to positive infinity.\n\n \n Special cases:\n If the argument is NaN, the result is 0.\n If the argument is negative infinity or any value less than or\n equal to the value of Integer.MIN_VALUE, the result is\n equal to the value of Integer.MIN_VALUE.\n If the argument is positive infinity or any value greater than or\n equal to the value of Integer.MAX_VALUE, the result is\n equal to the value of Integer.MAX_VALUE."}, {"method_name": "round", "method_sig": "public static long round (double a)", "description": "Returns the closest long to the argument, with ties\n rounding to positive infinity.\n\n Special cases:\n If the argument is NaN, the result is 0.\n If the argument is negative infinity or any value less than or\n equal to the value of Long.MIN_VALUE, the result is\n equal to the value of Long.MIN_VALUE.\n If the argument is positive infinity or any value greater than or\n equal to the value of Long.MAX_VALUE, the result is\n equal to the value of Long.MAX_VALUE."}, {"method_name": "random", "method_sig": "public static double random()", "description": "Returns a double value with a positive sign, greater\n than or equal to 0.0 and less than 1.0.\n Returned values are chosen pseudorandomly with (approximately)\n uniform distribution from that range.\n\n When this method is first called, it creates a single new\n pseudorandom-number generator, exactly as if by the expression\n\n new java.util.Random()\n\n This new pseudorandom-number generator is used thereafter for\n all calls to this method and is used nowhere else.\n\n This method is properly synchronized to allow correct use by\n more than one thread. However, if many threads need to generate\n pseudorandom numbers at a great rate, it may reduce contention\n for each thread to have its own pseudorandom-number generator."}, {"method_name": "addExact", "method_sig": "public static int addExact (int x,\n                           int y)", "description": "Returns the sum of its arguments,\n throwing an exception if the result overflows an int."}, {"method_name": "addExact", "method_sig": "public static long addExact (long x,\n                            long y)", "description": "Returns the sum of its arguments,\n throwing an exception if the result overflows a long."}, {"method_name": "subtractExact", "method_sig": "public static int subtractExact (int x,\n                                int y)", "description": "Returns the difference of the arguments,\n throwing an exception if the result overflows an int."}, {"method_name": "subtractExact", "method_sig": "public static long subtractExact (long x,\n                                 long y)", "description": "Returns the difference of the arguments,\n throwing an exception if the result overflows a long."}, {"method_name": "multiplyExact", "method_sig": "public static int multiplyExact (int x,\n                                int y)", "description": "Returns the product of the arguments,\n throwing an exception if the result overflows an int."}, {"method_name": "multiplyExact", "method_sig": "public static long multiplyExact (long x,\n                                 int y)", "description": "Returns the product of the arguments, throwing an exception if the result\n overflows a long."}, {"method_name": "multiplyExact", "method_sig": "public static long multiplyExact (long x,\n                                 long y)", "description": "Returns the product of the arguments,\n throwing an exception if the result overflows a long."}, {"method_name": "incrementExact", "method_sig": "public static int incrementExact (int a)", "description": "Returns the argument incremented by one, throwing an exception if the\n result overflows an int."}, {"method_name": "incrementExact", "method_sig": "public static long incrementExact (long a)", "description": "Returns the argument incremented by one, throwing an exception if the\n result overflows a long."}, {"method_name": "decrementExact", "method_sig": "public static int decrementExact (int a)", "description": "Returns the argument decremented by one, throwing an exception if the\n result overflows an int."}, {"method_name": "decrementExact", "method_sig": "public static long decrementExact (long a)", "description": "Returns the argument decremented by one, throwing an exception if the\n result overflows a long."}, {"method_name": "negateExact", "method_sig": "public static int negateExact (int a)", "description": "Returns the negation of the argument, throwing an exception if the\n result overflows an int."}, {"method_name": "negateExact", "method_sig": "public static long negateExact (long a)", "description": "Returns the negation of the argument, throwing an exception if the\n result overflows a long."}, {"method_name": "toIntExact", "method_sig": "public static int toIntExact (long value)", "description": "Returns the value of the long argument;\n throwing an exception if the value overflows an int."}, {"method_name": "multiplyFull", "method_sig": "public static long multiplyFull (int x,\n                                int y)", "description": "Returns the exact mathematical product of the arguments."}, {"method_name": "multiplyHigh", "method_sig": "public static long multiplyHigh (long x,\n                                long y)", "description": "Returns as a long the most significant 64 bits of the 128-bit\n product of two 64-bit factors."}, {"method_name": "floorDiv", "method_sig": "public static int floorDiv (int x,\n                           int y)", "description": "Returns the largest (closest to positive infinity)\n int value that is less than or equal to the algebraic quotient.\n There is one special case, if the dividend is the\n Integer.MIN_VALUE and the divisor is -1,\n then integer overflow occurs and\n the result is equal to Integer.MIN_VALUE.\n \n Normal integer division operates under the round to zero rounding mode\n (truncation).  This operation instead acts under the round toward\n negative infinity (floor) rounding mode.\n The floor rounding mode gives different results from truncation\n when the exact result is negative.\n \nIf the signs of the arguments are the same, the results of\n       floorDiv and the / operator are the same.  \n       For example, floorDiv(4, 3) == 1 and (4 / 3) == 1.\nIf the signs of the arguments are different,  the quotient is negative and\n       floorDiv returns the integer less than or equal to the quotient\n       and the / operator returns the integer closest to zero.\n       For example, floorDiv(-4, 3) == -2,\n       whereas (-4 / 3) == -1.\n   \n"}, {"method_name": "floorDiv", "method_sig": "public static long floorDiv (long x,\n                            int y)", "description": "Returns the largest (closest to positive infinity)\n long value that is less than or equal to the algebraic quotient.\n There is one special case, if the dividend is the\n Long.MIN_VALUE and the divisor is -1,\n then integer overflow occurs and\n the result is equal to Long.MIN_VALUE.\n \n Normal integer division operates under the round to zero rounding mode\n (truncation).  This operation instead acts under the round toward\n negative infinity (floor) rounding mode.\n The floor rounding mode gives different results from truncation\n when the exact result is negative.\n \n For examples, see floorDiv(int, int)."}, {"method_name": "floorDiv", "method_sig": "public static long floorDiv (long x,\n                            long y)", "description": "Returns the largest (closest to positive infinity)\n long value that is less than or equal to the algebraic quotient.\n There is one special case, if the dividend is the\n Long.MIN_VALUE and the divisor is -1,\n then integer overflow occurs and\n the result is equal to Long.MIN_VALUE.\n \n Normal integer division operates under the round to zero rounding mode\n (truncation).  This operation instead acts under the round toward\n negative infinity (floor) rounding mode.\n The floor rounding mode gives different results from truncation\n when the exact result is negative.\n \n For examples, see floorDiv(int, int)."}, {"method_name": "floorMod", "method_sig": "public static int floorMod (int x,\n                           int y)", "description": "Returns the floor modulus of the int arguments.\n \n The floor modulus is x - (floorDiv(x, y) * y),\n has the same sign as the divisor y, and\n is in the range of -abs(y) < r < +abs(y).\n\n \n The relationship between floorDiv and floorMod is such that:\n \nfloorDiv(x, y) * y + floorMod(x, y) == x\n\n\n The difference in values between floorMod and\n the % operator is due to the difference between\n floorDiv that returns the integer less than or equal to the quotient\n and the / operator that returns the integer closest to zero.\n \n Examples:\n \nIf the signs of the arguments are the same, the results\n       of floorMod and the % operator are the same.  \n\nfloorMod(4, 3) == 1; \u00a0 and (4 % 3) == 1\n\nIf the signs of the arguments are different, the results differ from the % operator.\n\nfloorMod(+4, -3) == -2; \u00a0 and (+4 % -3) == +1 \nfloorMod(-4, +3) == +2; \u00a0 and (-4 % +3) == -1 \nfloorMod(-4, -3) == -1; \u00a0 and (-4 % -3) == -1  \n\n\n\n\n If the signs of arguments are unknown and a positive modulus\n is needed it can be computed as (floorMod(x, y) + abs(y)) % abs(y)."}, {"method_name": "floorMod", "method_sig": "public static int floorMod (long x,\n                           int y)", "description": "Returns the floor modulus of the long and int arguments.\n \n The floor modulus is x - (floorDiv(x, y) * y),\n has the same sign as the divisor y, and\n is in the range of -abs(y) < r < +abs(y).\n\n \n The relationship between floorDiv and floorMod is such that:\n \nfloorDiv(x, y) * y + floorMod(x, y) == x\n\n\n For examples, see floorMod(int, int)."}, {"method_name": "floorMod", "method_sig": "public static long floorMod (long x,\n                            long y)", "description": "Returns the floor modulus of the long arguments.\n \n The floor modulus is x - (floorDiv(x, y) * y),\n has the same sign as the divisor y, and\n is in the range of -abs(y) < r < +abs(y).\n\n \n The relationship between floorDiv and floorMod is such that:\n \nfloorDiv(x, y) * y + floorMod(x, y) == x\n\n\n For examples, see floorMod(int, int)."}, {"method_name": "abs", "method_sig": "public static int abs (int a)", "description": "Returns the absolute value of an int value.\n If the argument is not negative, the argument is returned.\n If the argument is negative, the negation of the argument is returned.\n\n Note that if the argument is equal to the value of\n Integer.MIN_VALUE, the most negative representable\n int value, the result is that same value, which is\n negative."}, {"method_name": "abs", "method_sig": "public static long abs (long a)", "description": "Returns the absolute value of a long value.\n If the argument is not negative, the argument is returned.\n If the argument is negative, the negation of the argument is returned.\n\n Note that if the argument is equal to the value of\n Long.MIN_VALUE, the most negative representable\n long value, the result is that same value, which\n is negative."}, {"method_name": "abs", "method_sig": "public static float abs (float a)", "description": "Returns the absolute value of a float value.\n If the argument is not negative, the argument is returned.\n If the argument is negative, the negation of the argument is returned.\n Special cases:\n If the argument is positive zero or negative zero, the\n result is positive zero.\n If the argument is infinite, the result is positive infinity.\n If the argument is NaN, the result is NaN."}, {"method_name": "abs", "method_sig": "public static double abs (double a)", "description": "Returns the absolute value of a double value.\n If the argument is not negative, the argument is returned.\n If the argument is negative, the negation of the argument is returned.\n Special cases:\n If the argument is positive zero or negative zero, the result\n is positive zero.\n If the argument is infinite, the result is positive infinity.\n If the argument is NaN, the result is NaN."}, {"method_name": "max", "method_sig": "public static int max (int a,\n                      int b)", "description": "Returns the greater of two int values. That is, the\n result is the argument closer to the value of\n Integer.MAX_VALUE. If the arguments have the same value,\n the result is that same value."}, {"method_name": "max", "method_sig": "public static long max (long a,\n                       long b)", "description": "Returns the greater of two long values. That is, the\n result is the argument closer to the value of\n Long.MAX_VALUE. If the arguments have the same value,\n the result is that same value."}, {"method_name": "max", "method_sig": "public static float max (float a,\n                        float b)", "description": "Returns the greater of two float values.  That is,\n the result is the argument closer to positive infinity. If the\n arguments have the same value, the result is that same\n value. If either value is NaN, then the result is NaN.  Unlike\n the numerical comparison operators, this method considers\n negative zero to be strictly smaller than positive zero. If one\n argument is positive zero and the other negative zero, the\n result is positive zero."}, {"method_name": "max", "method_sig": "public static double max (double a,\n                         double b)", "description": "Returns the greater of two double values.  That\n is, the result is the argument closer to positive infinity. If\n the arguments have the same value, the result is that same\n value. If either value is NaN, then the result is NaN.  Unlike\n the numerical comparison operators, this method considers\n negative zero to be strictly smaller than positive zero. If one\n argument is positive zero and the other negative zero, the\n result is positive zero."}, {"method_name": "min", "method_sig": "public static int min (int a,\n                      int b)", "description": "Returns the smaller of two int values. That is,\n the result the argument closer to the value of\n Integer.MIN_VALUE.  If the arguments have the same\n value, the result is that same value."}, {"method_name": "min", "method_sig": "public static long min (long a,\n                       long b)", "description": "Returns the smaller of two long values. That is,\n the result is the argument closer to the value of\n Long.MIN_VALUE. If the arguments have the same\n value, the result is that same value."}, {"method_name": "min", "method_sig": "public static float min (float a,\n                        float b)", "description": "Returns the smaller of two float values.  That is,\n the result is the value closer to negative infinity. If the\n arguments have the same value, the result is that same\n value. If either value is NaN, then the result is NaN.  Unlike\n the numerical comparison operators, this method considers\n negative zero to be strictly smaller than positive zero.  If\n one argument is positive zero and the other is negative zero,\n the result is negative zero."}, {"method_name": "min", "method_sig": "public static double min (double a,\n                         double b)", "description": "Returns the smaller of two double values.  That\n is, the result is the value closer to negative infinity. If the\n arguments have the same value, the result is that same\n value. If either value is NaN, then the result is NaN.  Unlike\n the numerical comparison operators, this method considers\n negative zero to be strictly smaller than positive zero. If one\n argument is positive zero and the other is negative zero, the\n result is negative zero."}, {"method_name": "fma", "method_sig": "public static double fma (double a,\n                         double b,\n                         double c)", "description": "Returns the fused multiply add of the three arguments; that is,\n returns the exact product of the first two arguments summed\n with the third argument and then rounded once to the nearest\n double.\n\n The rounding is done using the round to nearest even\n rounding mode.\n\n In contrast, if a * b + c is evaluated as a regular\n floating-point expression, two rounding errors are involved,\n the first for the multiply operation, the second for the\n addition operation.\n\n Special cases:\n \n If any argument is NaN, the result is NaN.\n\n  If one of the first two arguments is infinite and the\n other is zero, the result is NaN.\n\n  If the exact product of the first two arguments is infinite\n (in other words, at least one of the arguments is infinite and\n the other is neither zero nor NaN) and the third argument is an\n infinity of the opposite sign, the result is NaN.\n\n \nNote that fma(a, 1.0, c) returns the same\n result as (a + c).  However,\n fma(a, b, +0.0) does not always return the\n same result as (a * b) since\n fma(-0.0, +0.0, +0.0) is +0.0 while\n (-0.0 * +0.0) is -0.0; fma(a, b, -0.0) is\n equivalent to (a * b) however."}, {"method_name": "fma", "method_sig": "public static float fma (float a,\n                        float b,\n                        float c)", "description": "Returns the fused multiply add of the three arguments; that is,\n returns the exact product of the first two arguments summed\n with the third argument and then rounded once to the nearest\n float.\n\n The rounding is done using the round to nearest even\n rounding mode.\n\n In contrast, if a * b + c is evaluated as a regular\n floating-point expression, two rounding errors are involved,\n the first for the multiply operation, the second for the\n addition operation.\n\n Special cases:\n \n If any argument is NaN, the result is NaN.\n\n  If one of the first two arguments is infinite and the\n other is zero, the result is NaN.\n\n  If the exact product of the first two arguments is infinite\n (in other words, at least one of the arguments is infinite and\n the other is neither zero nor NaN) and the third argument is an\n infinity of the opposite sign, the result is NaN.\n\n \nNote that fma(a, 1.0f, c) returns the same\n result as (a + c).  However,\n fma(a, b, +0.0f) does not always return the\n same result as (a * b) since\n fma(-0.0f, +0.0f, +0.0f) is +0.0f while\n (-0.0f * +0.0f) is -0.0f; fma(a, b, -0.0f) is\n equivalent to (a * b) however."}, {"method_name": "ulp", "method_sig": "public static double ulp (double d)", "description": "Returns the size of an ulp of the argument.  An ulp, unit in\n the last place, of a double value is the positive\n distance between this floating-point value and the \n double value next larger in magnitude.  Note that for non-NaN\n x, ulp(-x) == ulp(x).\n\n Special Cases:\n \n If the argument is NaN, then the result is NaN.\n  If the argument is positive or negative infinity, then the\n result is positive infinity.\n  If the argument is positive or negative zero, then the result is\n Double.MIN_VALUE.\n  If the argument is \u00b1Double.MAX_VALUE, then\n the result is equal to 2971.\n "}, {"method_name": "ulp", "method_sig": "public static float ulp (float f)", "description": "Returns the size of an ulp of the argument.  An ulp, unit in\n the last place, of a float value is the positive\n distance between this floating-point value and the \n float value next larger in magnitude.  Note that for non-NaN\n x, ulp(-x) == ulp(x).\n\n Special Cases:\n \n If the argument is NaN, then the result is NaN.\n  If the argument is positive or negative infinity, then the\n result is positive infinity.\n  If the argument is positive or negative zero, then the result is\n Float.MIN_VALUE.\n  If the argument is \u00b1Float.MAX_VALUE, then\n the result is equal to 2104.\n "}, {"method_name": "signum", "method_sig": "public static double signum (double d)", "description": "Returns the signum function of the argument; zero if the argument\n is zero, 1.0 if the argument is greater than zero, -1.0 if the\n argument is less than zero.\n\n Special Cases:\n \n If the argument is NaN, then the result is NaN.\n  If the argument is positive zero or negative zero, then the\n      result is the same as the argument.\n "}, {"method_name": "signum", "method_sig": "public static float signum (float f)", "description": "Returns the signum function of the argument; zero if the argument\n is zero, 1.0f if the argument is greater than zero, -1.0f if the\n argument is less than zero.\n\n Special Cases:\n \n If the argument is NaN, then the result is NaN.\n  If the argument is positive zero or negative zero, then the\n      result is the same as the argument.\n "}, {"method_name": "sinh", "method_sig": "public static double sinh (double x)", "description": "Returns the hyperbolic sine of a double value.\n The hyperbolic sine of x is defined to be\n (ex\u00a0-\u00a0e-x)/2\n where e is Euler's number.\n\n Special cases:\n \nIf the argument is NaN, then the result is NaN.\n\n If the argument is infinite, then the result is an infinity\n with the same sign as the argument.\n\n If the argument is zero, then the result is a zero with the\n same sign as the argument.\n\n \nThe computed result must be within 2.5 ulps of the exact result."}, {"method_name": "cosh", "method_sig": "public static double cosh (double x)", "description": "Returns the hyperbolic cosine of a double value.\n The hyperbolic cosine of x is defined to be\n (ex\u00a0+\u00a0e-x)/2\n where e is Euler's number.\n\n Special cases:\n \nIf the argument is NaN, then the result is NaN.\n\n If the argument is infinite, then the result is positive\n infinity.\n\n If the argument is zero, then the result is 1.0.\n\n \nThe computed result must be within 2.5 ulps of the exact result."}, {"method_name": "tanh", "method_sig": "public static double tanh (double x)", "description": "Returns the hyperbolic tangent of a double value.\n The hyperbolic tangent of x is defined to be\n (ex\u00a0-\u00a0e-x)/(ex\u00a0+\u00a0e-x),\n in other words, sinh(x)/cosh(x).  Note\n that the absolute value of the exact tanh is always less than\n 1.\n\n Special cases:\n \nIf the argument is NaN, then the result is NaN.\n\n If the argument is zero, then the result is a zero with the\n same sign as the argument.\n\n If the argument is positive infinity, then the result is\n +1.0.\n\n If the argument is negative infinity, then the result is\n -1.0.\n\n \nThe computed result must be within 2.5 ulps of the exact result.\n The result of tanh for any finite input must have\n an absolute value less than or equal to 1.  Note that once the\n exact result of tanh is within 1/2 of an ulp of the limit value\n of \u00b11, correctly signed \u00b11.0 should\n be returned."}, {"method_name": "hypot", "method_sig": "public static double hypot (double x,\n                           double y)", "description": "Returns sqrt(x2\u00a0+y2)\n without intermediate overflow or underflow.\n\n Special cases:\n \n If either argument is infinite, then the result\n is positive infinity.\n\n  If either argument is NaN and neither argument is infinite,\n then the result is NaN.\n\n \nThe computed result must be within 1 ulp of the exact\n result.  If one parameter is held constant, the results must be\n semi-monotonic in the other parameter."}, {"method_name": "expm1", "method_sig": "public static double expm1 (double x)", "description": "Returns ex\u00a0-1.  Note that for values of\n x near 0, the exact sum of\n expm1(x)\u00a0+\u00a01 is much closer to the true\n result of ex than exp(x).\n\n Special cases:\n \nIf the argument is NaN, the result is NaN.\n\n If the argument is positive infinity, then the result is\n positive infinity.\n\n If the argument is negative infinity, then the result is\n -1.0.\n\n If the argument is zero, then the result is a zero with the\n same sign as the argument.\n\n \nThe computed result must be within 1 ulp of the exact result.\n Results must be semi-monotonic.  The result of\n expm1 for any finite input must be greater than or\n equal to -1.0.  Note that once the exact result of\n ex\u00a0-\u00a01 is within 1/2\n ulp of the limit value -1, -1.0 should be\n returned."}, {"method_name": "log1p", "method_sig": "public static double log1p (double x)", "description": "Returns the natural logarithm of the sum of the argument and 1.\n Note that for small values x, the result of\n log1p(x) is much closer to the true result of ln(1\n + x) than the floating-point evaluation of\n log(1.0+x).\n\n Special cases:\n\n \nIf the argument is NaN or less than -1, then the result is\n NaN.\n\n If the argument is positive infinity, then the result is\n positive infinity.\n\n If the argument is negative one, then the result is\n negative infinity.\n\n If the argument is zero, then the result is a zero with the\n same sign as the argument.\n\n \nThe computed result must be within 1 ulp of the exact result.\n Results must be semi-monotonic."}, {"method_name": "copySign", "method_sig": "public static double copySign (double magnitude,\n                              double sign)", "description": "Returns the first floating-point argument with the sign of the\n second floating-point argument.  Note that unlike the StrictMath.copySign\n method, this method does not require NaN sign\n arguments to be treated as positive values; implementations are\n permitted to treat some NaN arguments as positive and other NaN\n arguments as negative to allow greater performance."}, {"method_name": "copySign", "method_sig": "public static float copySign (float magnitude,\n                             float sign)", "description": "Returns the first floating-point argument with the sign of the\n second floating-point argument.  Note that unlike the StrictMath.copySign\n method, this method does not require NaN sign\n arguments to be treated as positive values; implementations are\n permitted to treat some NaN arguments as positive and other NaN\n arguments as negative to allow greater performance."}, {"method_name": "getExponent", "method_sig": "public static int getExponent (float f)", "description": "Returns the unbiased exponent used in the representation of a\n float.  Special cases:\n\n \nIf the argument is NaN or infinite, then the result is\n Float.MAX_EXPONENT + 1.\n If the argument is zero or subnormal, then the result is\n Float.MIN_EXPONENT -1.\n "}, {"method_name": "getExponent", "method_sig": "public static int getExponent (double d)", "description": "Returns the unbiased exponent used in the representation of a\n double.  Special cases:\n\n \nIf the argument is NaN or infinite, then the result is\n Double.MAX_EXPONENT + 1.\n If the argument is zero or subnormal, then the result is\n Double.MIN_EXPONENT -1.\n "}, {"method_name": "nextAfter", "method_sig": "public static double nextAfter (double start,\n                               double direction)", "description": "Returns the floating-point number adjacent to the first\n argument in the direction of the second argument.  If both\n arguments compare as equal the second argument is returned.\n\n \n Special cases:\n \n If either argument is a NaN, then NaN is returned.\n\n  If both arguments are signed zeros, direction\n is returned unchanged (as implied by the requirement of\n returning the second argument if the arguments compare as\n equal).\n\n  If start is\n \u00b1Double.MIN_VALUE and direction\n has a value such that the result should have a smaller\n magnitude, then a zero with the same sign as start\n is returned.\n\n  If start is infinite and\n direction has a value such that the result should\n have a smaller magnitude, Double.MAX_VALUE with the\n same sign as start is returned.\n\n  If start is equal to \u00b1\n Double.MAX_VALUE and direction has a\n value such that the result should have a larger magnitude, an\n infinity with same sign as start is returned.\n "}, {"method_name": "nextAfter", "method_sig": "public static float nextAfter (float start,\n                              double direction)", "description": "Returns the floating-point number adjacent to the first\n argument in the direction of the second argument.  If both\n arguments compare as equal a value equivalent to the second argument\n is returned.\n\n \n Special cases:\n \n If either argument is a NaN, then NaN is returned.\n\n  If both arguments are signed zeros, a value equivalent\n to direction is returned.\n\n  If start is\n \u00b1Float.MIN_VALUE and direction\n has a value such that the result should have a smaller\n magnitude, then a zero with the same sign as start\n is returned.\n\n  If start is infinite and\n direction has a value such that the result should\n have a smaller magnitude, Float.MAX_VALUE with the\n same sign as start is returned.\n\n  If start is equal to \u00b1\n Float.MAX_VALUE and direction has a\n value such that the result should have a larger magnitude, an\n infinity with same sign as start is returned.\n "}, {"method_name": "nextUp", "method_sig": "public static double nextUp (double d)", "description": "Returns the floating-point value adjacent to d in\n the direction of positive infinity.  This method is\n semantically equivalent to nextAfter(d,\n Double.POSITIVE_INFINITY); however, a nextUp\n implementation may run faster than its equivalent\n nextAfter call.\n\n Special Cases:\n \n If the argument is NaN, the result is NaN.\n\n  If the argument is positive infinity, the result is\n positive infinity.\n\n  If the argument is zero, the result is\n Double.MIN_VALUE\n"}, {"method_name": "nextUp", "method_sig": "public static float nextUp (float f)", "description": "Returns the floating-point value adjacent to f in\n the direction of positive infinity.  This method is\n semantically equivalent to nextAfter(f,\n Float.POSITIVE_INFINITY); however, a nextUp\n implementation may run faster than its equivalent\n nextAfter call.\n\n Special Cases:\n \n If the argument is NaN, the result is NaN.\n\n  If the argument is positive infinity, the result is\n positive infinity.\n\n  If the argument is zero, the result is\n Float.MIN_VALUE\n"}, {"method_name": "nextDown", "method_sig": "public static double nextDown (double d)", "description": "Returns the floating-point value adjacent to d in\n the direction of negative infinity.  This method is\n semantically equivalent to nextAfter(d,\n Double.NEGATIVE_INFINITY); however, a\n nextDown implementation may run faster than its\n equivalent nextAfter call.\n\n Special Cases:\n \n If the argument is NaN, the result is NaN.\n\n  If the argument is negative infinity, the result is\n negative infinity.\n\n  If the argument is zero, the result is\n -Double.MIN_VALUE\n"}, {"method_name": "nextDown", "method_sig": "public static float nextDown (float f)", "description": "Returns the floating-point value adjacent to f in\n the direction of negative infinity.  This method is\n semantically equivalent to nextAfter(f,\n Float.NEGATIVE_INFINITY); however, a\n nextDown implementation may run faster than its\n equivalent nextAfter call.\n\n Special Cases:\n \n If the argument is NaN, the result is NaN.\n\n  If the argument is negative infinity, the result is\n negative infinity.\n\n  If the argument is zero, the result is\n -Float.MIN_VALUE\n"}, {"method_name": "scalb", "method_sig": "public static double scalb (double d,\n                           int scaleFactor)", "description": "Returns d \u00d7\n 2scaleFactor rounded as if performed\n by a single correctly rounded floating-point multiply to a\n member of the double value set.  See the Java\n Language Specification for a discussion of floating-point\n value sets.  If the exponent of the result is between Double.MIN_EXPONENT and Double.MAX_EXPONENT, the\n answer is calculated exactly.  If the exponent of the result\n would be larger than Double.MAX_EXPONENT, an\n infinity is returned.  Note that if the result is subnormal,\n precision may be lost; that is, when scalb(x, n)\n is subnormal, scalb(scalb(x, n), -n) may not equal\n x.  When the result is non-NaN, the result has the same\n sign as d.\n\n Special cases:\n \n If the first argument is NaN, NaN is returned.\n  If the first argument is infinite, then an infinity of the\n same sign is returned.\n  If the first argument is zero, then a zero of the same\n sign is returned.\n "}, {"method_name": "scalb", "method_sig": "public static float scalb (float f,\n                          int scaleFactor)", "description": "Returns f \u00d7\n 2scaleFactor rounded as if performed\n by a single correctly rounded floating-point multiply to a\n member of the float value set.  See the Java\n Language Specification for a discussion of floating-point\n value sets.  If the exponent of the result is between Float.MIN_EXPONENT and Float.MAX_EXPONENT, the\n answer is calculated exactly.  If the exponent of the result\n would be larger than Float.MAX_EXPONENT, an\n infinity is returned.  Note that if the result is subnormal,\n precision may be lost; that is, when scalb(x, n)\n is subnormal, scalb(scalb(x, n), -n) may not equal\n x.  When the result is non-NaN, the result has the same\n sign as f.\n\n Special cases:\n \n If the first argument is NaN, NaN is returned.\n  If the first argument is infinite, then an infinity of the\n same sign is returned.\n  If the first argument is zero, then a zero of the same\n sign is returned.\n "}]}