{"name": "Class KerberosTicket", "module": "java.security.jgss", "package": "javax.security.auth.kerberos", "text": "This class encapsulates a Kerberos ticket and associated\n information as viewed from the client's point of view. It captures all\n information that the Key Distribution Center (KDC) sends to the client\n in the reply message KDC-REP defined in the Kerberos Protocol\n Specification (RFC 4120).\n \n All Kerberos JAAS login modules that authenticate a user to a KDC should\n use this class. Where available, the login module might even read this\n information from a ticket cache in the operating system instead of\n directly communicating with the KDC. During the commit phase of the JAAS\n authentication process, the JAAS login module should instantiate this\n class and store the instance in the private credential set of a\n Subject.\n\n It might be necessary for the application to be granted a\n PrivateCredentialPermission if it needs to access a KerberosTicket\n instance from a Subject. This permission is not needed when the\n application depends on the default JGSS Kerberos mechanism to access the\n KerberosTicket. In that case, however, the application will need an\n appropriate\n ServicePermission.\n \n Note that this class is applicable to both ticket granting tickets and\n other regular service tickets. A ticket granting ticket is just a\n special case of a more generalized service ticket.", "codes": ["public class KerberosTicket\nextends Object\nimplements Destroyable, Refreshable, Serializable"], "fields": [], "methods": [{"method_name": "getClient", "method_sig": "public final KerberosPrincipal getClient()", "description": "Returns the client principal associated with this ticket."}, {"method_name": "getServer", "method_sig": "public final KerberosPrincipal getServer()", "description": "Returns the service principal associated with this ticket."}, {"method_name": "getSessionKey", "method_sig": "public final SecretKey getSessionKey()", "description": "Returns the session key associated with this ticket. The return value\n is always a EncryptionKey object."}, {"method_name": "getSessionKeyType", "method_sig": "public final int getSessionKeyType()", "description": "Returns the key type of the session key associated with this\n ticket as defined by the Kerberos Protocol Specification."}, {"method_name": "isForwardable", "method_sig": "public final boolean isForwardable()", "description": "Determines if this ticket is forwardable."}, {"method_name": "isForwarded", "method_sig": "public final boolean isForwarded()", "description": "Determines if this ticket had been forwarded or was issued based on\n authentication involving a forwarded ticket-granting ticket."}, {"method_name": "isProxiable", "method_sig": "public final boolean isProxiable()", "description": "Determines if this ticket is proxiable."}, {"method_name": "isProxy", "method_sig": "public final boolean isProxy()", "description": "Determines is this ticket is a proxy-ticket."}, {"method_name": "isPostdated", "method_sig": "public final boolean isPostdated()", "description": "Determines is this ticket is post-dated."}, {"method_name": "isRenewable", "method_sig": "public final boolean isRenewable()", "description": "Determines is this ticket is renewable. If so, the refresh method can be called, assuming the validity period for\n renewing is not already over."}, {"method_name": "isInitial", "method_sig": "public final boolean isInitial()", "description": "Determines if this ticket was issued using the Kerberos AS-Exchange\n protocol, and not issued based on some ticket-granting ticket."}, {"method_name": "getFlags", "method_sig": "public final boolean[] getFlags()", "description": "Returns the flags associated with this ticket. Each element in the\n returned array indicates the value for the corresponding bit in the\n ASN.1 BitString that represents the ticket flags."}, {"method_name": "getAuthTime", "method_sig": "public final Date getAuthTime()", "description": "Returns the time that the client was authenticated."}, {"method_name": "getStartTime", "method_sig": "public final Date getStartTime()", "description": "Returns the start time for this ticket's validity period."}, {"method_name": "getEndTime", "method_sig": "public final Date getEndTime()", "description": "Returns the expiration time for this ticket's validity period."}, {"method_name": "getRenewTill", "method_sig": "public final Date getRenewTill()", "description": "Returns the latest expiration time for this ticket, including all\n renewals. This will return a null value for non-renewable tickets."}, {"method_name": "getClientAddresses", "method_sig": "public final InetAddress[] getClientAddresses()", "description": "Returns a list of addresses from where the ticket can be used."}, {"method_name": "getEncoded", "method_sig": "public final byte[] getEncoded()", "description": "Returns an ASN.1 encoding of the entire ticket."}, {"method_name": "isCurrent", "method_sig": "public boolean isCurrent()", "description": "Determines if this ticket is still current."}, {"method_name": "refresh", "method_sig": "public void refresh()\n             throws RefreshFailedException", "description": "Extends the validity period of this ticket. The ticket will contain\n a new session key if the refresh operation succeeds. The refresh\n operation will fail if the ticket is not renewable or the latest\n allowable renew time has passed. Any other error returned by the\n KDC will also cause this method to fail.\n\n Note: This method is not synchronized with the accessor\n methods of this object. Hence callers need to be aware of multiple\n threads that might access this and try to renew it at the same\n time."}, {"method_name": "destroy", "method_sig": "public void destroy()\n             throws DestroyFailedException", "description": "Destroys the ticket and destroys any sensitive information stored in\n it."}, {"method_name": "isDestroyed", "method_sig": "public boolean isDestroyed()", "description": "Determines if this ticket has been destroyed."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns an informative textual representation of this KerberosTicket."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Returns a hash code for this KerberosTicket."}, {"method_name": "equals", "method_sig": "public boolean equals (Object other)", "description": "Compares the specified object with this KerberosTicket for equality.\n Returns true if the given object is also a\n KerberosTicket and the two\n KerberosTicket instances are equivalent.\n A destroyed KerberosTicket object is only equal to itself."}]}