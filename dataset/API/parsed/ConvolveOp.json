{"name": "Class ConvolveOp", "module": "java.desktop", "package": "java.awt.image", "text": "This class implements a convolution from the source\n to the destination.\n Convolution using a convolution kernel is a spatial operation that\n computes the output pixel from an input pixel by multiplying the kernel\n with the surround of the input pixel.\n This allows the output pixel to be affected by the immediate neighborhood\n in a way that can be mathematically specified with a kernel.\n\n This class operates with BufferedImage data in which color components are\n premultiplied with the alpha component.  If the Source BufferedImage has\n an alpha component, and the color components are not premultiplied with\n the alpha component, then the data are premultiplied before being\n convolved.  If the Destination has color components which are not\n premultiplied, then alpha is divided out before storing into the\n Destination (if alpha is 0, the color components are set to 0).  If the\n Destination has no alpha component, then the resulting alpha is discarded\n after first dividing it out of the color components.\n \n Rasters are treated as having no alpha channel.  If the above treatment\n of the alpha channel in BufferedImages is not desired, it may be avoided\n by getting the Raster of a source BufferedImage and using the filter method\n of this class which works with Rasters.\n \n If a RenderingHints object is specified in the constructor, the\n color rendering hint and the dithering hint may be used when color\n conversion is required.\n\n Note that the Source and the Destination may not be the same object.", "codes": ["public class ConvolveOp\nextends Object\nimplements BufferedImageOp, RasterOp"], "fields": [{"field_name": "EDGE_ZERO_FILL", "field_sig": "@Native\npublic static final\u00a0int EDGE_ZERO_FILL", "description": "Pixels at the edge of the destination image are set to zero.  This\n is the default."}, {"field_name": "EDGE_NO_OP", "field_sig": "@Native\npublic static final\u00a0int EDGE_NO_OP", "description": "Pixels at the edge of the source image are copied to\n the corresponding pixels in the destination without modification."}], "methods": [{"method_name": "getEdgeCondition", "method_sig": "public int getEdgeCondition()", "description": "Returns the edge condition."}, {"method_name": "getKernel", "method_sig": "public final Kernel getKernel()", "description": "Returns the Kernel."}, {"method_name": "filter", "method_sig": "public final BufferedImage filter (BufferedImage src,\n                                  BufferedImage dst)", "description": "Performs a convolution on BufferedImages.  Each component of the\n source image will be convolved (including the alpha component, if\n present).\n If the color model in the source image is not the same as that\n in the destination image, the pixels will be converted\n in the destination.  If the destination image is null,\n a BufferedImage will be created with the source ColorModel.\n The IllegalArgumentException may be thrown if the source is the\n same as the destination."}, {"method_name": "filter", "method_sig": "public final WritableRaster filter (Raster src,\n                                   WritableRaster dst)", "description": "Performs a convolution on Rasters.  Each band of the source Raster\n will be convolved.\n The source and destination must have the same number of bands.\n If the destination Raster is null, a new Raster will be created.\n The IllegalArgumentException may be thrown if the source is\n the same as the destination."}, {"method_name": "createCompatibleDestImage", "method_sig": "public BufferedImage createCompatibleDestImage (BufferedImage src,\n                                               ColorModel destCM)", "description": "Creates a zeroed destination image with the correct size and number\n of bands.  If destCM is null, an appropriate ColorModel will be used."}, {"method_name": "createCompatibleDestRaster", "method_sig": "public WritableRaster createCompatibleDestRaster (Raster src)", "description": "Creates a zeroed destination Raster with the correct size and number\n of bands, given this source."}, {"method_name": "getBounds2D", "method_sig": "public final Rectangle2D getBounds2D (BufferedImage src)", "description": "Returns the bounding box of the filtered destination image.  Since\n this is not a geometric operation, the bounding box does not\n change."}, {"method_name": "getBounds2D", "method_sig": "public final Rectangle2D getBounds2D (Raster src)", "description": "Returns the bounding box of the filtered destination Raster.  Since\n this is not a geometric operation, the bounding box does not\n change."}, {"method_name": "getPoint2D", "method_sig": "public final Point2D getPoint2D (Point2D srcPt,\n                                Point2D dstPt)", "description": "Returns the location of the destination point given a\n point in the source.  If dstPt is non-null, it will\n be used to hold the return value.  Since this is not a geometric\n operation, the srcPt will equal the dstPt."}, {"method_name": "getRenderingHints", "method_sig": "public final RenderingHints getRenderingHints()", "description": "Returns the rendering hints for this op."}]}