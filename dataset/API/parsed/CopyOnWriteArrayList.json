{"name": "Class CopyOnWriteArrayList<E>", "module": "java.base", "package": "java.util.concurrent", "text": "A thread-safe variant of ArrayList in which all mutative\n operations (add, set, and so on) are implemented by\n making a fresh copy of the underlying array.\n\n This is ordinarily too costly, but may be more efficient\n than alternatives when traversal operations vastly outnumber\n mutations, and is useful when you cannot or don't want to\n synchronize traversals, yet need to preclude interference among\n concurrent threads.  The \"snapshot\" style iterator method uses a\n reference to the state of the array at the point that the iterator\n was created. This array never changes during the lifetime of the\n iterator, so interference is impossible and the iterator is\n guaranteed not to throw ConcurrentModificationException.\n The iterator will not reflect additions, removals, or changes to\n the list since the iterator was created.  Element-changing\n operations on iterators themselves (remove, set, and\n add) are not supported. These methods throw\n UnsupportedOperationException.\n\n All elements are permitted, including null.\n\n Memory consistency effects: As with other concurrent\n collections, actions in a thread prior to placing an object into a\n CopyOnWriteArrayList\nhappen-before\n actions subsequent to the access or removal of that element from\n the CopyOnWriteArrayList in another thread.\n\n This class is a member of the\n \n Java Collections Framework.", "codes": ["public class CopyOnWriteArrayList<E>\nextends Object\nimplements List<E>, RandomAccess, Cloneable, Serializable"], "fields": [], "methods": [{"method_name": "size", "method_sig": "public int size()", "description": "Returns the number of elements in this list."}, {"method_name": "isEmpty", "method_sig": "public boolean isEmpty()", "description": "Returns true if this list contains no elements."}, {"method_name": "contains", "method_sig": "public boolean contains (Object o)", "description": "Returns true if this list contains the specified element.\n More formally, returns true if and only if this list contains\n at least one element e such that Objects.equals(o, e)."}, {"method_name": "indexOf", "method_sig": "public int indexOf (E e,\n                   int index)", "description": "Returns the index of the first occurrence of the specified element in\n this list, searching forwards from index, or returns -1 if\n the element is not found.\n More formally, returns the lowest index i such that\n i >= index && Objects.equals(get(i), e),\n or -1 if there is no such index."}, {"method_name": "lastIndexOf", "method_sig": "public int lastIndexOf (E e,\n                       int index)", "description": "Returns the index of the last occurrence of the specified element in\n this list, searching backwards from index, or returns -1 if\n the element is not found.\n More formally, returns the highest index i such that\n i <= index && Objects.equals(get(i), e),\n or -1 if there is no such index."}, {"method_name": "clone", "method_sig": "public Object clone()", "description": "Returns a shallow copy of this list.  (The elements themselves\n are not copied.)"}, {"method_name": "toArray", "method_sig": "public Object[] toArray()", "description": "Returns an array containing all of the elements in this list\n in proper sequence (from first to last element).\n\n The returned array will be \"safe\" in that no references to it are\n maintained by this list.  (In other words, this method must allocate\n a new array).  The caller is thus free to modify the returned array.\n\n This method acts as bridge between array-based and collection-based\n APIs."}, {"method_name": "toArray", "method_sig": "public <T> T[] toArray (T[] a)", "description": "Returns an array containing all of the elements in this list in\n proper sequence (from first to last element); the runtime type of\n the returned array is that of the specified array.  If the list fits\n in the specified array, it is returned therein.  Otherwise, a new\n array is allocated with the runtime type of the specified array and\n the size of this list.\n\n If this list fits in the specified array with room to spare\n (i.e., the array has more elements than this list), the element in\n the array immediately following the end of the list is set to\n null.  (This is useful in determining the length of this\n list only if the caller knows that this list does not contain\n any null elements.)\n\n Like the toArray() method, this method acts as bridge between\n array-based and collection-based APIs.  Further, this method allows\n precise control over the runtime type of the output array, and may,\n under certain circumstances, be used to save allocation costs.\n\n Suppose x is a list known to contain only strings.\n The following code can be used to dump the list into a newly\n allocated array of String:\n\n  String[] y = x.toArray(new String[0]);\n\n Note that toArray(new Object[0]) is identical in function to\n toArray()."}, {"method_name": "get", "method_sig": "public E get (int index)", "description": "Returns the element at the specified position in this list."}, {"method_name": "set", "method_sig": "public E set (int index,\n             E element)", "description": "Replaces the element at the specified position in this list with the\n specified element."}, {"method_name": "add", "method_sig": "public boolean add (E e)", "description": "Appends the specified element to the end of this list."}, {"method_name": "add", "method_sig": "public void add (int index,\n                E element)", "description": "Inserts the specified element at the specified position in this\n list. Shifts the element currently at that position (if any) and\n any subsequent elements to the right (adds one to their indices)."}, {"method_name": "remove", "method_sig": "public E remove (int index)", "description": "Removes the element at the specified position in this list.\n Shifts any subsequent elements to the left (subtracts one from their\n indices).  Returns the element that was removed from the list."}, {"method_name": "remove", "method_sig": "public boolean remove (Object o)", "description": "Removes the first occurrence of the specified element from this list,\n if it is present.  If this list does not contain the element, it is\n unchanged.  More formally, removes the element with the lowest index\n i such that Objects.equals(o, get(i))\n (if such an element exists).  Returns true if this list\n contained the specified element (or equivalently, if this list\n changed as a result of the call)."}, {"method_name": "addIfAbsent", "method_sig": "public boolean addIfAbsent (E e)", "description": "Appends the element, if not present."}, {"method_name": "containsAll", "method_sig": "public boolean containsAll (Collection<?> c)", "description": "Returns true if this list contains all of the elements of the\n specified collection."}, {"method_name": "removeAll", "method_sig": "public boolean removeAll (Collection<?> c)", "description": "Removes from this list all of its elements that are contained in\n the specified collection. This is a particularly expensive operation\n in this class because of the need for an internal temporary array."}, {"method_name": "retainAll", "method_sig": "public boolean retainAll (Collection<?> c)", "description": "Retains only the elements in this list that are contained in the\n specified collection.  In other words, removes from this list all of\n its elements that are not contained in the specified collection."}, {"method_name": "addAllAbsent", "method_sig": "public int addAllAbsent (Collection<? extends E> c)", "description": "Appends all of the elements in the specified collection that\n are not already contained in this list, to the end of\n this list, in the order that they are returned by the\n specified collection's iterator."}, {"method_name": "clear", "method_sig": "public void clear()", "description": "Removes all of the elements from this list.\n The list will be empty after this call returns."}, {"method_name": "addAll", "method_sig": "public boolean addAll (Collection<? extends E> c)", "description": "Appends all of the elements in the specified collection to the end\n of this list, in the order that they are returned by the specified\n collection's iterator."}, {"method_name": "addAll", "method_sig": "public boolean addAll (int index,\n                      Collection<? extends E> c)", "description": "Inserts all of the elements in the specified collection into this\n list, starting at the specified position.  Shifts the element\n currently at that position (if any) and any subsequent elements to\n the right (increases their indices).  The new elements will appear\n in this list in the order that they are returned by the\n specified collection's iterator."}, {"method_name": "forEach", "method_sig": "public void forEach (Consumer<? super E> action)", "description": "Description copied from interface:\u00a0Iterable"}, {"method_name": "removeIf", "method_sig": "public boolean removeIf (Predicate<? super E> filter)", "description": "Description copied from interface:\u00a0Collection"}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a string representation of this list.  The string\n representation consists of the string representations of the list's\n elements in the order they are returned by its iterator, enclosed in\n square brackets (\"[]\").  Adjacent elements are separated by\n the characters \", \" (comma and space).  Elements are\n converted to strings as by String.valueOf(Object)."}, {"method_name": "equals", "method_sig": "public boolean equals (Object o)", "description": "Compares the specified object with this list for equality.\n Returns true if the specified object is the same object\n as this object, or if it is also a List and the sequence\n of elements returned by an iterator\n over the specified list is the same as the sequence returned by\n an iterator over this list.  The two sequences are considered to\n be the same if they have the same length and corresponding\n elements at the same position in the sequence are equal.\n Two elements e1 and e2 are considered\n equal if Objects.equals(e1, e2)."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Returns the hash code value for this list.\n\n This implementation uses the definition in List.hashCode()."}, {"method_name": "iterator", "method_sig": "public Iterator<E> iterator()", "description": "Returns an iterator over the elements in this list in proper sequence.\n\n The returned iterator provides a snapshot of the state of the list\n when the iterator was constructed. No synchronization is needed while\n traversing the iterator. The iterator does NOT support the\n remove method."}, {"method_name": "listIterator", "method_sig": "public ListIterator<E> listIterator()", "description": "Returns a list iterator over the elements in this list (in proper\n sequence).\n\n The returned iterator provides a snapshot of the state of the list\n when the iterator was constructed. No synchronization is needed while\n traversing the iterator. The iterator does NOT support the\n remove, set or add methods."}, {"method_name": "listIterator", "method_sig": "public ListIterator<E> listIterator (int index)", "description": "Returns a list iterator over the elements in this list (in proper\n sequence), starting at the specified position in the list.\n The specified index indicates the first element that would be\n returned by an initial call to next.\n An initial call to previous would\n return the element with the specified index minus one.\n\n The returned iterator provides a snapshot of the state of the list\n when the iterator was constructed. No synchronization is needed while\n traversing the iterator. The iterator does NOT support the\n remove, set or add methods."}, {"method_name": "spliterator", "method_sig": "public Spliterator<E> spliterator()", "description": "Returns a Spliterator over the elements in this list.\n\n The Spliterator reports Spliterator.IMMUTABLE,\n Spliterator.ORDERED, Spliterator.SIZED, and\n Spliterator.SUBSIZED.\n\n The spliterator provides a snapshot of the state of the list\n when the spliterator was constructed. No synchronization is needed while\n operating on the spliterator."}, {"method_name": "subList", "method_sig": "public List<E> subList (int fromIndex,\n                       int toIndex)", "description": "Returns a view of the portion of this list between\n fromIndex, inclusive, and toIndex, exclusive.\n The returned list is backed by this list, so changes in the\n returned list are reflected in this list.\n\n The semantics of the list returned by this method become\n undefined if the backing list (i.e., this list) is modified in\n any way other than via the returned list."}]}