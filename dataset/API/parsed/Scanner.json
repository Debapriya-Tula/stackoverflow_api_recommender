{"name": "Class Scanner", "module": "java.base", "package": "java.util", "text": "A simple text scanner which can parse primitive types and strings using\n regular expressions.\n\n A Scanner breaks its input into tokens using a\n delimiter pattern, which by default matches whitespace. The resulting\n tokens may then be converted into values of different types using the\n various next methods.\n\n For example, this code allows a user to read a number from\n System.in:\n \n     Scanner sc = new Scanner(System.in);\n     int i = sc.nextInt();\n \nAs another example, this code allows long types to be\n assigned from entries in a file myNumbers:\n \n      Scanner sc = new Scanner(new File(\"myNumbers\"));\n      while (sc.hasNextLong()) {\n          long aLong = sc.nextLong();\n      }\n \nThe scanner can also use delimiters other than whitespace. This\n example reads several items in from a string:\n \n     String input = \"1 fish 2 fish red fish blue fish\";\n     Scanner s = new Scanner(input).useDelimiter(\"\\\\s*fish\\\\s*\");\n     System.out.println(s.nextInt());\n     System.out.println(s.nextInt());\n     System.out.println(s.next());\n     System.out.println(s.next());\n     s.close();\n \n\n prints the following output:\n \n     1\n     2\n     red\n     blue\n \nThe same output can be generated with this code, which uses a regular\n expression to parse all four tokens at once:\n \n     String input = \"1 fish 2 fish red fish blue fish\";\n     Scanner s = new Scanner(input);\n     s.findInLine(\"(\\\\d+) fish (\\\\d+) fish (\\\\w+) fish (\\\\w+)\");\n     MatchResult result = s.match();\n     for (int i=1; i<=result.groupCount(); i++)\n         System.out.println(result.group(i));\n     s.close();\n \nThe default whitespace delimiter used\n by a scanner is as recognized by Character.isWhitespace(). The reset()\n method will reset the value of the scanner's delimiter to the default\n whitespace delimiter regardless of whether it was previously changed.\n\n A scanning operation may block waiting for input.\n\n The next() and hasNext() methods and their\n companion methods (such as nextInt() and\n hasNextInt()) first skip any input that matches the delimiter\n pattern, and then attempt to return the next token. Both hasNext()\n and next() methods may block waiting for further input.  Whether a\n hasNext() method blocks has no connection to whether or not its\n associated next() method will block. The tokens() method\n may also block waiting for input.\n\n The findInLine(),\n findWithinHorizon(),\n skip(), and findAll()\n methods operate independently of the delimiter pattern. These methods will\n attempt to match the specified pattern with no regard to delimiters in the\n input and thus can be used in special circumstances where delimiters are\n not relevant. These methods may block waiting for more input.\n\n When a scanner throws an InputMismatchException, the scanner\n will not pass the token that caused the exception, so that it may be\n retrieved or skipped via some other method.\n\n Depending upon the type of delimiting pattern, empty tokens may be\n returned. For example, the pattern \"\\\\s+\" will return no empty\n tokens since it matches multiple instances of the delimiter. The delimiting\n pattern \"\\\\s\" could return empty tokens since it only passes one\n space at a time.\n\n  A scanner can read text from any object which implements the Readable interface.  If an invocation of the underlying\n readable's read() method throws an IOException then the scanner assumes that the end of the input\n has been reached.  The most recent IOException thrown by the\n underlying readable can be retrieved via the ioException() method.\n\n When a Scanner is closed, it will close its input source\n if the source implements the Closeable interface.\n\n A Scanner is not safe for multithreaded use without\n external synchronization.\n\n Unless otherwise mentioned, passing a null parameter into\n any method of a Scanner will cause a\n NullPointerException to be thrown.\n\n A scanner will default to interpreting numbers as decimal unless a\n different radix has been set by using the useRadix(int) method. The\n reset() method will reset the value of the scanner's radix to\n 10 regardless of whether it was previously changed.\n\n  Localized numbers \n An instance of this class is capable of scanning numbers in the standard\n formats as well as in the formats of the scanner's locale. A scanner's\n initial locale is the value returned by the Locale.getDefault(Locale.Category.FORMAT) method; it may be changed via the useLocale() method. The reset() method will reset the value of the\n scanner's locale to the initial locale regardless of whether it was\n previously changed.\n\n The localized formats are defined in terms of the following parameters,\n which for a particular locale are taken from that locale's DecimalFormat object, df, and its and\n DecimalFormatSymbols object,\n dfs.\n\n \nLocalGroupSeparator\u00a0\u00a0\nThe character used to separate thousands groups,\n         i.e.,\u00a0dfs.getGroupingSeparator()\nLocalDecimalSeparator\u00a0\u00a0\nThe character used for the decimal point,\n     i.e.,\u00a0dfs.getDecimalSeparator()\nLocalPositivePrefix\u00a0\u00a0\nThe string that appears before a positive number (may\n         be empty), i.e.,\u00a0df.getPositivePrefix()\nLocalPositiveSuffix\u00a0\u00a0\nThe string that appears after a positive number (may be\n         empty), i.e.,\u00a0df.getPositiveSuffix()\nLocalNegativePrefix\u00a0\u00a0\nThe string that appears before a negative number (may\n         be empty), i.e.,\u00a0df.getNegativePrefix()\nLocalNegativeSuffix\u00a0\u00a0\nThe string that appears after a negative number (may be\n         empty), i.e.,\u00a0df.getNegativeSuffix()\nLocalNaN\u00a0\u00a0\nThe string that represents not-a-number for\n         floating-point values,\n         i.e.,\u00a0dfs.getNaN()\nLocalInfinity\u00a0\u00a0\nThe string that represents infinity for floating-point\n         values, i.e.,\u00a0dfs.getInfinity()\n\n Number syntax \n The strings that can be parsed as numbers by an instance of this class\n are specified in terms of the following regular-expression grammar, where\n Rmax is the highest digit in the radix being used (for example, Rmax is 9 in base 10).\n\n \nNonAsciiDigit:\n       A non-ASCII character c for which\n            Character.isDigit(c)\n                        returns\u00a0true\n\n   Non0Digit:\n       [1-Rmax] | NonASCIIDigit\nDigit:\n       [0-Rmax] | NonASCIIDigit\nGroupedNumeral:\n       (\u00a0Non0Digit\nDigit?\n                   Digit?\n\u00a0\u00a0\u00a0\u00a0(\u00a0LocalGroupSeparator\nDigit\nDigit\nDigit )+ )\nNumeral:\n       ( ( Digit+ )\n               | GroupedNumeral )\nInteger:\n( [-+]? ( Numeral\n                               ) )\n| LocalPositivePrefix Numeral\nLocalPositiveSuffix\n| LocalNegativePrefix Numeral\nLocalNegativeSuffix\nDecimalNumeral:\n       Numeral\n| Numeral\nLocalDecimalSeparator\nDigit*\n| LocalDecimalSeparator\nDigit+\nExponent:\n       ( [eE] [+-]? Digit+ )\nDecimal:\n( [-+]? DecimalNumeral\nExponent? )\n| LocalPositivePrefix\nDecimalNumeral\nLocalPositiveSuffix\nExponent?\n| LocalNegativePrefix\nDecimalNumeral\nLocalNegativeSuffix\nExponent?\nHexFloat:\n       [-+]? 0[xX][0-9a-fA-F]*\\.[0-9a-fA-F]+\n                 ([pP][-+]?[0-9]+)?\nNonNumber:\n       NaN\n                          | LocalNan\n                          | Infinity\n                          | LocalInfinity\nSignedNonNumber:\n       ( [-+]? NonNumber )\n| LocalPositivePrefix\nNonNumber\nLocalPositiveSuffix\n| LocalNegativePrefix\nNonNumber\nLocalNegativeSuffix\nFloat:\n       Decimal\n| HexFloat\n| SignedNonNumber\n\nWhitespace is not significant in the above regular expressions.", "codes": ["public final class Scanner\nextends Object\nimplements Iterator<String>, Closeable"], "fields": [], "methods": [{"method_name": "close", "method_sig": "public void close()", "description": "Closes this scanner.\n\n  If this scanner has not yet been closed then if its underlying\n readable also implements the Closeable interface then the readable's close method\n will be invoked.  If this scanner is already closed then invoking this\n method will have no effect.\n\n Attempting to perform search operations after a scanner has\n been closed will result in an IllegalStateException."}, {"method_name": "ioException", "method_sig": "public IOException ioException()", "description": "Returns the IOException last thrown by this\n Scanner's underlying Readable. This method\n returns null if no such exception exists."}, {"method_name": "delimiter", "method_sig": "public Pattern delimiter()", "description": "Returns the Pattern this Scanner is currently\n using to match delimiters."}, {"method_name": "useDelimiter", "method_sig": "public Scanner useDelimiter (Pattern pattern)", "description": "Sets this scanner's delimiting pattern to the specified pattern."}, {"method_name": "useDelimiter", "method_sig": "public Scanner useDelimiter (String pattern)", "description": "Sets this scanner's delimiting pattern to a pattern constructed from\n the specified String.\n\n  An invocation of this method of the form\n useDelimiter(pattern) behaves in exactly the same way as the\n invocation useDelimiter(Pattern.compile(pattern)).\n\n  Invoking the reset() method will set the scanner's delimiter\n to the default."}, {"method_name": "locale", "method_sig": "public Locale locale()", "description": "Returns this scanner's locale.\n\n A scanner's locale affects many elements of its default\n primitive matching regular expressions; see\n localized numbers above."}, {"method_name": "useLocale", "method_sig": "public Scanner useLocale (Locale locale)", "description": "Sets this scanner's locale to the specified locale.\n\n A scanner's locale affects many elements of its default\n primitive matching regular expressions; see\n localized numbers above.\n\n Invoking the reset() method will set the scanner's locale to\n the initial locale."}, {"method_name": "radix", "method_sig": "public int radix()", "description": "Returns this scanner's default radix.\n\n A scanner's radix affects elements of its default\n number matching regular expressions; see\n localized numbers above."}, {"method_name": "useRadix", "method_sig": "public Scanner useRadix (int radix)", "description": "Sets this scanner's default radix to the specified radix.\n\n A scanner's radix affects elements of its default\n number matching regular expressions; see\n localized numbers above.\n\n If the radix is less than Character.MIN_RADIX\n or greater than Character.MAX_RADIX, then an\n IllegalArgumentException is thrown.\n\n Invoking the reset() method will set the scanner's radix to\n 10."}, {"method_name": "match", "method_sig": "public MatchResult match()", "description": "Returns the match result of the last scanning operation performed\n by this scanner. This method throws IllegalStateException\n if no match has been performed, or if the last match was\n not successful.\n\n The various next methods of Scanner\n make a match result available if they complete without throwing an\n exception. For instance, after an invocation of the nextInt()\n method that returned an int, this method returns a\n MatchResult for the search of the\n Integer regular expression\n defined above. Similarly the findInLine(),\n findWithinHorizon(), and skip()\n methods will make a match available if they succeed."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns the string representation of this Scanner. The\n string representation of a Scanner contains information\n that may be useful for debugging. The exact format is unspecified."}, {"method_name": "hasNext", "method_sig": "public boolean hasNext()", "description": "Returns true if this scanner has another token in its input.\n This method may block while waiting for input to scan.\n The scanner does not advance past any input."}, {"method_name": "next", "method_sig": "public String next()", "description": "Finds and returns the next complete token from this scanner.\n A complete token is preceded and followed by input that matches\n the delimiter pattern. This method may block while waiting for input\n to scan, even if a previous invocation of hasNext() returned\n true."}, {"method_name": "remove", "method_sig": "public void remove()", "description": "The remove operation is not supported by this implementation of\n Iterator."}, {"method_name": "hasNext", "method_sig": "public boolean hasNext (String pattern)", "description": "Returns true if the next token matches the pattern constructed from the\n specified string. The scanner does not advance past any input.\n\n  An invocation of this method of the form hasNext(pattern)\n behaves in exactly the same way as the invocation\n hasNext(Pattern.compile(pattern))."}, {"method_name": "next", "method_sig": "public String next (String pattern)", "description": "Returns the next token if it matches the pattern constructed from the\n specified string.  If the match is successful, the scanner advances\n past the input that matched the pattern.\n\n  An invocation of this method of the form next(pattern)\n behaves in exactly the same way as the invocation\n next(Pattern.compile(pattern))."}, {"method_name": "hasNext", "method_sig": "public boolean hasNext (Pattern pattern)", "description": "Returns true if the next complete token matches the specified pattern.\n A complete token is prefixed and postfixed by input that matches\n the delimiter pattern. This method may block while waiting for input.\n The scanner does not advance past any input."}, {"method_name": "next", "method_sig": "public String next (Pattern pattern)", "description": "Returns the next token if it matches the specified pattern. This\n method may block while waiting for input to scan, even if a previous\n invocation of hasNext(Pattern) returned true.\n If the match is successful, the scanner advances past the input that\n matched the pattern."}, {"method_name": "hasNextLine", "method_sig": "public boolean hasNextLine()", "description": "Returns true if there is another line in the input of this scanner.\n This method may block while waiting for input. The scanner does not\n advance past any input."}, {"method_name": "nextLine", "method_sig": "public String nextLine()", "description": "Advances this scanner past the current line and returns the input\n that was skipped.\n\n This method returns the rest of the current line, excluding any line\n separator at the end. The position is set to the beginning of the next\n line.\n\n Since this method continues to search through the input looking\n for a line separator, it may buffer all of the input searching for\n the line to skip if no line separators are present."}, {"method_name": "findInLine", "method_sig": "public String findInLine (String pattern)", "description": "Attempts to find the next occurrence of a pattern constructed from the\n specified string, ignoring delimiters.\n\n An invocation of this method of the form findInLine(pattern)\n behaves in exactly the same way as the invocation\n findInLine(Pattern.compile(pattern))."}, {"method_name": "findInLine", "method_sig": "public String findInLine (Pattern pattern)", "description": "Attempts to find the next occurrence of the specified pattern ignoring\n delimiters. If the pattern is found before the next line separator, the\n scanner advances past the input that matched and returns the string that\n matched the pattern.\n If no such pattern is detected in the input up to the next line\n separator, then null is returned and the scanner's\n position is unchanged. This method may block waiting for input that\n matches the pattern.\n\n Since this method continues to search through the input looking\n for the specified pattern, it may buffer all of the input searching for\n the desired token if no line separators are present."}, {"method_name": "findWithinHorizon", "method_sig": "public String findWithinHorizon (String pattern,\n                                int horizon)", "description": "Attempts to find the next occurrence of a pattern constructed from the\n specified string, ignoring delimiters.\n\n An invocation of this method of the form\n findWithinHorizon(pattern) behaves in exactly the same way as\n the invocation\n findWithinHorizon(Pattern.compile(pattern), horizon)."}, {"method_name": "findWithinHorizon", "method_sig": "public String findWithinHorizon (Pattern pattern,\n                                int horizon)", "description": "Attempts to find the next occurrence of the specified pattern.\n\n This method searches through the input up to the specified\n search horizon, ignoring delimiters. If the pattern is found the\n scanner advances past the input that matched and returns the string\n that matched the pattern. If no such pattern is detected then the\n null is returned and the scanner's position remains unchanged. This\n method may block waiting for input that matches the pattern.\n\n A scanner will never search more than horizon code\n points beyond its current position. Note that a match may be clipped\n by the horizon; that is, an arbitrary match result may have been\n different if the horizon had been larger. The scanner treats the\n horizon as a transparent, non-anchoring bound (see Matcher.useTransparentBounds(boolean) and Matcher.useAnchoringBounds(boolean)).\n\n If horizon is 0, then the horizon is ignored and\n this method continues to search through the input looking for the\n specified pattern without bound. In this case it may buffer all of\n the input searching for the pattern.\n\n If horizon is negative, then an IllegalArgumentException is\n thrown."}, {"method_name": "skip", "method_sig": "public Scanner skip (Pattern pattern)", "description": "Skips input that matches the specified pattern, ignoring delimiters.\n This method will skip input if an anchored match of the specified\n pattern succeeds.\n\n If a match to the specified pattern is not found at the\n current position, then no input is skipped and a\n NoSuchElementException is thrown.\n\n Since this method seeks to match the specified pattern starting at\n the scanner's current position, patterns that can match a lot of\n input (\".*\", for example) may cause the scanner to buffer a large\n amount of input.\n\n Note that it is possible to skip something without risking a\n NoSuchElementException by using a pattern that can\n match nothing, e.g., sc.skip(\"[ \\t]*\")."}, {"method_name": "skip", "method_sig": "public Scanner skip (String pattern)", "description": "Skips input that matches a pattern constructed from the specified\n string.\n\n  An invocation of this method of the form skip(pattern)\n behaves in exactly the same way as the invocation\n skip(Pattern.compile(pattern))."}, {"method_name": "hasNextBoolean", "method_sig": "public boolean hasNextBoolean()", "description": "Returns true if the next token in this scanner's input can be\n interpreted as a boolean value using a case insensitive pattern\n created from the string \"true|false\".  The scanner does not\n advance past the input that matched."}, {"method_name": "nextBoolean", "method_sig": "public boolean nextBoolean()", "description": "Scans the next token of the input into a boolean value and returns\n that value. This method will throw InputMismatchException\n if the next token cannot be translated into a valid boolean value.\n If the match is successful, the scanner advances past the input that\n matched."}, {"method_name": "hasNextByte", "method_sig": "public boolean hasNextByte()", "description": "Returns true if the next token in this scanner's input can be\n interpreted as a byte value in the default radix using the\n nextByte() method. The scanner does not advance past any input."}, {"method_name": "hasNextByte", "method_sig": "public boolean hasNextByte (int radix)", "description": "Returns true if the next token in this scanner's input can be\n interpreted as a byte value in the specified radix using the\n nextByte() method. The scanner does not advance past any input.\n\n If the radix is less than Character.MIN_RADIX\n or greater than Character.MAX_RADIX, then an\n IllegalArgumentException is thrown."}, {"method_name": "nextByte", "method_sig": "public byte nextByte()", "description": "Scans the next token of the input as a byte.\n\n  An invocation of this method of the form\n nextByte() behaves in exactly the same way as the\n invocation nextByte(radix), where radix\n is the default radix of this scanner."}, {"method_name": "nextByte", "method_sig": "public byte nextByte (int radix)", "description": "Scans the next token of the input as a byte.\n This method will throw InputMismatchException\n if the next token cannot be translated into a valid byte value as\n described below. If the translation is successful, the scanner advances\n past the input that matched.\n\n  If the next token matches the Integer regular expression defined\n above then the token is converted into a byte value as if by\n removing all locale specific prefixes, group separators, and locale\n specific suffixes, then mapping non-ASCII digits into ASCII\n digits via Character.digit, prepending a\n negative sign (-) if the locale specific negative prefixes and suffixes\n were present, and passing the resulting string to\n Byte.parseByte with the\n specified radix.\n\n If the radix is less than Character.MIN_RADIX\n or greater than Character.MAX_RADIX, then an\n IllegalArgumentException is thrown."}, {"method_name": "hasNextShort", "method_sig": "public boolean hasNextShort()", "description": "Returns true if the next token in this scanner's input can be\n interpreted as a short value in the default radix using the\n nextShort() method. The scanner does not advance past any input."}, {"method_name": "hasNextShort", "method_sig": "public boolean hasNextShort (int radix)", "description": "Returns true if the next token in this scanner's input can be\n interpreted as a short value in the specified radix using the\n nextShort() method. The scanner does not advance past any input.\n\n If the radix is less than Character.MIN_RADIX\n or greater than Character.MAX_RADIX, then an\n IllegalArgumentException is thrown."}, {"method_name": "nextShort", "method_sig": "public short nextShort()", "description": "Scans the next token of the input as a short.\n\n  An invocation of this method of the form\n nextShort() behaves in exactly the same way as the\n invocation nextShort(radix), where radix\n is the default radix of this scanner."}, {"method_name": "nextShort", "method_sig": "public short nextShort (int radix)", "description": "Scans the next token of the input as a short.\n This method will throw InputMismatchException\n if the next token cannot be translated into a valid short value as\n described below. If the translation is successful, the scanner advances\n past the input that matched.\n\n  If the next token matches the Integer regular expression defined\n above then the token is converted into a short value as if by\n removing all locale specific prefixes, group separators, and locale\n specific suffixes, then mapping non-ASCII digits into ASCII\n digits via Character.digit, prepending a\n negative sign (-) if the locale specific negative prefixes and suffixes\n were present, and passing the resulting string to\n Short.parseShort with the\n specified radix.\n\n If the radix is less than Character.MIN_RADIX\n or greater than Character.MAX_RADIX, then an\n IllegalArgumentException is thrown."}, {"method_name": "hasNextInt", "method_sig": "public boolean hasNextInt()", "description": "Returns true if the next token in this scanner's input can be\n interpreted as an int value in the default radix using the\n nextInt() method. The scanner does not advance past any input."}, {"method_name": "hasNextInt", "method_sig": "public boolean hasNextInt (int radix)", "description": "Returns true if the next token in this scanner's input can be\n interpreted as an int value in the specified radix using the\n nextInt() method. The scanner does not advance past any input.\n\n If the radix is less than Character.MIN_RADIX\n or greater than Character.MAX_RADIX, then an\n IllegalArgumentException is thrown."}, {"method_name": "nextInt", "method_sig": "public int nextInt()", "description": "Scans the next token of the input as an int.\n\n  An invocation of this method of the form\n nextInt() behaves in exactly the same way as the\n invocation nextInt(radix), where radix\n is the default radix of this scanner."}, {"method_name": "nextInt", "method_sig": "public int nextInt (int radix)", "description": "Scans the next token of the input as an int.\n This method will throw InputMismatchException\n if the next token cannot be translated into a valid int value as\n described below. If the translation is successful, the scanner advances\n past the input that matched.\n\n  If the next token matches the Integer regular expression defined\n above then the token is converted into an int value as if by\n removing all locale specific prefixes, group separators, and locale\n specific suffixes, then mapping non-ASCII digits into ASCII\n digits via Character.digit, prepending a\n negative sign (-) if the locale specific negative prefixes and suffixes\n were present, and passing the resulting string to\n Integer.parseInt with the\n specified radix.\n\n If the radix is less than Character.MIN_RADIX\n or greater than Character.MAX_RADIX, then an\n IllegalArgumentException is thrown."}, {"method_name": "hasNextLong", "method_sig": "public boolean hasNextLong()", "description": "Returns true if the next token in this scanner's input can be\n interpreted as a long value in the default radix using the\n nextLong() method. The scanner does not advance past any input."}, {"method_name": "hasNextLong", "method_sig": "public boolean hasNextLong (int radix)", "description": "Returns true if the next token in this scanner's input can be\n interpreted as a long value in the specified radix using the\n nextLong() method. The scanner does not advance past any input.\n\n If the radix is less than Character.MIN_RADIX\n or greater than Character.MAX_RADIX, then an\n IllegalArgumentException is thrown."}, {"method_name": "nextLong", "method_sig": "public long nextLong()", "description": "Scans the next token of the input as a long.\n\n  An invocation of this method of the form\n nextLong() behaves in exactly the same way as the\n invocation nextLong(radix), where radix\n is the default radix of this scanner."}, {"method_name": "nextLong", "method_sig": "public long nextLong (int radix)", "description": "Scans the next token of the input as a long.\n This method will throw InputMismatchException\n if the next token cannot be translated into a valid long value as\n described below. If the translation is successful, the scanner advances\n past the input that matched.\n\n  If the next token matches the Integer regular expression defined\n above then the token is converted into a long value as if by\n removing all locale specific prefixes, group separators, and locale\n specific suffixes, then mapping non-ASCII digits into ASCII\n digits via Character.digit, prepending a\n negative sign (-) if the locale specific negative prefixes and suffixes\n were present, and passing the resulting string to\n Long.parseLong with the\n specified radix.\n\n If the radix is less than Character.MIN_RADIX\n or greater than Character.MAX_RADIX, then an\n IllegalArgumentException is thrown."}, {"method_name": "hasNextFloat", "method_sig": "public boolean hasNextFloat()", "description": "Returns true if the next token in this scanner's input can be\n interpreted as a float value using the nextFloat()\n method. The scanner does not advance past any input."}, {"method_name": "nextFloat", "method_sig": "public float nextFloat()", "description": "Scans the next token of the input as a float.\n This method will throw InputMismatchException\n if the next token cannot be translated into a valid float value as\n described below. If the translation is successful, the scanner advances\n past the input that matched.\n\n  If the next token matches the Float regular expression defined above\n then the token is converted into a float value as if by\n removing all locale specific prefixes, group separators, and locale\n specific suffixes, then mapping non-ASCII digits into ASCII\n digits via Character.digit, prepending a\n negative sign (-) if the locale specific negative prefixes and suffixes\n were present, and passing the resulting string to\n Float.parseFloat. If the token matches\n the localized NaN or infinity strings, then either \"Nan\" or \"Infinity\"\n is passed to Float.parseFloat as\n appropriate."}, {"method_name": "hasNextDouble", "method_sig": "public boolean hasNextDouble()", "description": "Returns true if the next token in this scanner's input can be\n interpreted as a double value using the nextDouble()\n method. The scanner does not advance past any input."}, {"method_name": "nextDouble", "method_sig": "public double nextDouble()", "description": "Scans the next token of the input as a double.\n This method will throw InputMismatchException\n if the next token cannot be translated into a valid double value.\n If the translation is successful, the scanner advances past the input\n that matched.\n\n  If the next token matches the Float regular expression defined above\n then the token is converted into a double value as if by\n removing all locale specific prefixes, group separators, and locale\n specific suffixes, then mapping non-ASCII digits into ASCII\n digits via Character.digit, prepending a\n negative sign (-) if the locale specific negative prefixes and suffixes\n were present, and passing the resulting string to\n Double.parseDouble. If the token matches\n the localized NaN or infinity strings, then either \"Nan\" or \"Infinity\"\n is passed to Double.parseDouble as\n appropriate."}, {"method_name": "hasNextBigInteger", "method_sig": "public boolean hasNextBigInteger()", "description": "Returns true if the next token in this scanner's input can be\n interpreted as a BigInteger in the default radix using the\n nextBigInteger() method. The scanner does not advance past any\n input."}, {"method_name": "hasNextBigInteger", "method_sig": "public boolean hasNextBigInteger (int radix)", "description": "Returns true if the next token in this scanner's input can be\n interpreted as a BigInteger in the specified radix using\n the nextBigInteger() method. The scanner does not advance past\n any input.\n\n If the radix is less than Character.MIN_RADIX\n or greater than Character.MAX_RADIX, then an\n IllegalArgumentException is thrown."}, {"method_name": "nextBigInteger", "method_sig": "public BigInteger nextBigInteger()", "description": "Scans the next token of the input as a BigInteger.\n\n  An invocation of this method of the form\n nextBigInteger() behaves in exactly the same way as the\n invocation nextBigInteger(radix), where radix\n is the default radix of this scanner."}, {"method_name": "nextBigInteger", "method_sig": "public BigInteger nextBigInteger (int radix)", "description": "Scans the next token of the input as a BigInteger.\n\n  If the next token matches the Integer regular expression defined\n above then the token is converted into a BigInteger value as if\n by removing all group separators, mapping non-ASCII digits into ASCII\n digits via the Character.digit, and passing the\n resulting string to the BigInteger(String, int) constructor with the specified radix.\n\n If the radix is less than Character.MIN_RADIX\n or greater than Character.MAX_RADIX, then an\n IllegalArgumentException is thrown."}, {"method_name": "hasNextBigDecimal", "method_sig": "public boolean hasNextBigDecimal()", "description": "Returns true if the next token in this scanner's input can be\n interpreted as a BigDecimal using the\n nextBigDecimal() method. The scanner does not advance past any\n input."}, {"method_name": "nextBigDecimal", "method_sig": "public BigDecimal nextBigDecimal()", "description": "Scans the next token of the input as a BigDecimal.\n\n  If the next token matches the Decimal regular expression defined\n above then the token is converted into a BigDecimal value as if\n by removing all group separators, mapping non-ASCII digits into ASCII\n digits via the Character.digit, and passing the\n resulting string to the BigDecimal(String)\n constructor."}, {"method_name": "reset", "method_sig": "public Scanner reset()", "description": "Resets this scanner.\n\n  Resetting a scanner discards all of its explicit state\n information which may have been changed by invocations of\n useDelimiter(),\n useLocale(), or\n useRadix().\n\n  An invocation of this method of the form\n scanner.reset() behaves in exactly the same way as the\n invocation\n\n \n   scanner.useDelimiter(\"\\\\p{javaWhitespace}+\")\n          .useLocale(Locale.getDefault(Locale.Category.FORMAT))\n          .useRadix(10);\n "}, {"method_name": "tokens", "method_sig": "public Stream<String> tokens()", "description": "Returns a stream of delimiter-separated tokens from this scanner. The\n stream contains the same tokens that would be returned, starting from\n this scanner's current state, by calling the next() method\n repeatedly until the hasNext() method returns false.\n\n The resulting stream is sequential and ordered. All stream elements are\n non-null.\n\n Scanning starts upon initiation of the terminal stream operation, using the\n current state of this scanner. Subsequent calls to any methods on this scanner\n other than close() and ioException() may return undefined results\n or may cause undefined effects on the returned stream. The returned stream's source\n Spliterator is fail-fast and will, on a best-effort basis, throw a\n ConcurrentModificationException if any such calls are detected\n during stream pipeline execution.\n\n After stream pipeline execution completes, this scanner is left in an indeterminate\n state and cannot be reused.\n\n If this scanner contains a resource that must be released, this scanner\n should be closed, either by calling its close() method, or by\n closing the returned stream. Closing the stream will close the underlying scanner.\n IllegalStateException is thrown if the scanner has been closed when this\n method is called, or if this scanner is closed during stream pipeline execution.\n\n This method might block waiting for more input."}, {"method_name": "findAll", "method_sig": "public Stream<MatchResult> findAll (Pattern pattern)", "description": "Returns a stream of match results from this scanner. The stream\n contains the same results in the same order that would be returned by\n calling findWithinHorizon(pattern, 0) and then match()\n successively as long as findWithinHorizon()\n finds matches.\n\n The resulting stream is sequential and ordered. All stream elements are\n non-null.\n\n Scanning starts upon initiation of the terminal stream operation, using the\n current state of this scanner. Subsequent calls to any methods on this scanner\n other than close() and ioException() may return undefined results\n or may cause undefined effects on the returned stream. The returned stream's source\n Spliterator is fail-fast and will, on a best-effort basis, throw a\n ConcurrentModificationException if any such calls are detected\n during stream pipeline execution.\n\n After stream pipeline execution completes, this scanner is left in an indeterminate\n state and cannot be reused.\n\n If this scanner contains a resource that must be released, this scanner\n should be closed, either by calling its close() method, or by\n closing the returned stream. Closing the stream will close the underlying scanner.\n IllegalStateException is thrown if the scanner has been closed when this\n method is called, or if this scanner is closed during stream pipeline execution.\n\n As with the findWithinHorizon() methods, this method\n might block waiting for additional input, and it might buffer an unbounded amount of\n input searching for a match."}, {"method_name": "findAll", "method_sig": "public Stream<MatchResult> findAll (String patString)", "description": "Returns a stream of match results that match the provided pattern string.\n The effect is equivalent to the following code:\n\n \n     scanner.findAll(Pattern.compile(patString))\n "}]}