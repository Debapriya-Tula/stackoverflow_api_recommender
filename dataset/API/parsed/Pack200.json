{"name": "Class Pack200", "module": "java.base", "package": "java.util.jar", "text": "Transforms a JAR file to or from a packed stream in Pack200 format.\n Please refer to Network Transfer Format JSR 200 Specification\n\n Typically the packer engine is used by application developers\n to deploy or host JAR files on a website.\n The unpacker  engine is used by deployment applications to\n transform the byte-stream back to JAR format.\n \n Here is an example using  packer and unpacker:\n \n    import java.util.jar.Pack200;\n    import java.util.jar.Pack200.*;\n    ...\n    // Create the Packer object\n    Packer packer = Pack200.newPacker();\n\n    // Initialize the state by setting the desired properties\n    Map p = packer.properties();\n    // take more time choosing codings for better compression\n    p.put(Packer.EFFORT, \"7\");  // default is \"5\"\n    // use largest-possible archive segments (>10% better compression).\n    p.put(Packer.SEGMENT_LIMIT, \"-1\");\n    // reorder files for better compression.\n    p.put(Packer.KEEP_FILE_ORDER, Packer.FALSE);\n    // smear modification times to a single value.\n    p.put(Packer.MODIFICATION_TIME, Packer.LATEST);\n    // ignore all JAR deflation requests,\n    // transmitting a single request to use \"store\" mode.\n    p.put(Packer.DEFLATE_HINT, Packer.FALSE);\n    // discard debug attributes\n    p.put(Packer.CODE_ATTRIBUTE_PFX+\"LineNumberTable\", Packer.STRIP);\n    // throw an error if an attribute is unrecognized\n    p.put(Packer.UNKNOWN_ATTRIBUTE, Packer.ERROR);\n    // pass one class file uncompressed:\n    p.put(Packer.PASS_FILE_PFX+0, \"mutants/Rogue.class\");\n    try {\n        JarFile jarFile = new JarFile(\"/tmp/testref.jar\");\n        FileOutputStream fos = new FileOutputStream(\"/tmp/test.pack\");\n        // Call the packer\n        packer.pack(jarFile, fos);\n        jarFile.close();\n        fos.close();\n\n        File f = new File(\"/tmp/test.pack\");\n        FileOutputStream fostream = new FileOutputStream(\"/tmp/test.jar\");\n        JarOutputStream jostream = new JarOutputStream(fostream);\n        Unpacker unpacker = Pack200.newUnpacker();\n        // Call the unpacker\n        unpacker.unpack(f, jostream);\n        // Must explicitly close the output.\n        jostream.close();\n    } catch (IOException ioe) {\n        ioe.printStackTrace();\n    }\n \n\n A Pack200 file compressed with gzip can be hosted on HTTP/1.1 web servers.\n The deployment applications can use \"Accept-Encoding=pack200-gzip\". This\n indicates to the server that the client application desires a version of\n the file encoded with Pack200 and further compressed with gzip. Please\n refer to the Java Deployment Guide for techniques and details.\n \n Unless otherwise noted, passing a null argument to a constructor or\n method in this class will cause a NullPointerException to be thrown.", "codes": ["@Deprecated(since=\"11\",\n            forRemoval=true)\npublic abstract class Pack200\nextends Object"], "fields": [], "methods": [{"method_name": "newPacker", "method_sig": "public static Pack200.Packer newPacker()", "description": "Obtain new instance of a class that implements Packer.\n \nIf the system property java.util.jar.Pack200.Packer\n is defined, then the value is taken to be the fully-qualified name\n of a concrete implementation class, which must implement Packer.\n This class is loaded and instantiated.  If this process fails\n then an unspecified error is thrown.\nIf an implementation has not been specified with the system\n property, then the system-default implementation class is instantiated,\n and the result is returned.\n\nNote:  The returned object is not guaranteed to operate\n correctly if multiple threads use it at the same time.\n A multi-threaded application should either allocate multiple\n packer engines, or else serialize use of one engine with a lock."}, {"method_name": "newUnpacker", "method_sig": "public static Pack200.Unpacker newUnpacker()", "description": "Obtain new instance of a class that implements Unpacker.\n \nIf the system property java.util.jar.Pack200.Unpacker\n is defined, then the value is taken to be the fully-qualified\n name of a concrete implementation class, which must implement Unpacker.\n The class is loaded and instantiated.  If this process fails\n then an unspecified error is thrown.\nIf an implementation has not been specified with the\n system property, then the system-default implementation class\n is instantiated, and the result is returned.\n\nNote:  The returned object is not guaranteed to operate\n correctly if multiple threads use it at the same time.\n A multi-threaded application should either allocate multiple\n unpacker engines, or else serialize use of one engine with a lock."}]}