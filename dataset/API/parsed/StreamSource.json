{"name": "Class StreamSource", "module": "java.xml", "package": "javax.xml.transform.stream", "text": "Acts as an holder for a transformation Source in the form\n of a stream of XML markup.\nNote: Due to their internal use of either a Reader or InputStream instance,\n StreamSource instances may only be used once.", "codes": ["public class StreamSource\nextends Object\nimplements Source"], "fields": [{"field_name": "FEATURE", "field_sig": "public static final\u00a0String FEATURE", "description": "If TransformerFactory.getFeature(java.lang.String)\n returns true when passed this value as an argument,\n the Transformer supports Source input of this type."}], "methods": [{"method_name": "setInputStream", "method_sig": "public void setInputStream (InputStream inputStream)", "description": "Set the byte stream to be used as input.  Normally,\n a stream should be used rather than a reader, so that\n the XML parser can resolve character encoding specified\n by the XML declaration.\n\n If this Source object is used to process a stylesheet, normally\n setSystemId should also be called, so that relative URL references\n can be resolved."}, {"method_name": "getInputStream", "method_sig": "public InputStream getInputStream()", "description": "Get the byte stream that was set with setByteStream."}, {"method_name": "setReader", "method_sig": "public void setReader (Reader reader)", "description": "Set the input to be a character reader.  Normally,\n a stream should be used rather than a reader, so that\n the XML parser can resolve character encoding specified\n by the XML declaration.  However, in many cases the encoding\n of the input stream is already resolved, as in the case of\n reading XML from a StringReader."}, {"method_name": "getReader", "method_sig": "public Reader getReader()", "description": "Get the character stream that was set with setReader."}, {"method_name": "setPublicId", "method_sig": "public void setPublicId (String publicId)", "description": "Set the public identifier for this Source.\n\n The public identifier is always optional: if the application\n writer includes one, it will be provided as part of the\n location information."}, {"method_name": "getPublicId", "method_sig": "public String getPublicId()", "description": "Get the public identifier that was set with setPublicId."}, {"method_name": "setSystemId", "method_sig": "public void setSystemId (String systemId)", "description": "Set the system identifier for this Source.\n\n The system identifier is optional if there is a byte stream\n or a character stream, but it is still useful to provide one,\n since the application can use it to resolve relative URIs\n and can include it in error messages and warnings (the parser\n will attempt to open a connection to the URI only if\n there is no byte stream or character stream specified)."}, {"method_name": "getSystemId", "method_sig": "public String getSystemId()", "description": "Get the system identifier that was set with setSystemId."}, {"method_name": "setSystemId", "method_sig": "public void setSystemId (File f)", "description": "Set the system ID from a File reference."}, {"method_name": "isEmpty", "method_sig": "public boolean isEmpty()", "description": "Indicates whether the StreamSource object is empty. Empty is\n defined as follows:\n \nAll of the input sources, including the public identifier, system\n identifier, byte stream, and character stream, are null.\n \nThe public identifier and system identifier are null, and\n byte and character stream are either null or contain no byte or\n character.\n \n Note that this method will reset the byte stream if it is provided, or\n the character stream if the byte stream is not provided.\n \n\n\n In case of error while checking the byte or character stream, the method\n will return false to allow the XML processor to handle the error."}]}