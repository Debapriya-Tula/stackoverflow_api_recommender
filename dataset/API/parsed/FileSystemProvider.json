{"name": "Class FileSystemProvider", "module": "java.base", "package": "java.nio.file.spi", "text": "Service-provider class for file systems. The methods defined by the Files class will typically delegate to an instance of this\n class.\n\n  A file system provider is a concrete implementation of this class that\n implements the abstract methods defined by this class. A provider is\n identified by a URI scheme. The default provider\n is identified by the URI scheme \"file\". It creates the FileSystem that\n provides access to the file systems accessible to the Java virtual machine.\n The FileSystems class defines how file system providers are located\n and loaded. The default provider is typically a system-default provider but\n may be overridden if the system property \n java.nio.file.spi.DefaultFileSystemProvider is set. In that case, the\n provider has a one argument constructor whose formal parameter type is \n FileSystemProvider. All other providers have a zero argument constructor\n that initializes the provider.\n\n  A provider is a factory for one or more FileSystem instances. Each\n file system is identified by a URI where the URI's scheme matches\n the provider's scheme. The default file system, for example,\n is identified by the URI \"file:///\". A memory-based file system,\n for example, may be identified by a URI such as \"memory:///?name=logfs\".\n The newFileSystem method may be used to create a file\n system, and the getFileSystem method may be used to\n obtain a reference to an existing file system created by the provider. Where\n a provider is the factory for a single file system then it is provider dependent\n if the file system is created when the provider is initialized, or later when\n the newFileSystem method is invoked. In the case of the default\n provider, the FileSystem is created when the provider is initialized.\n\n  All of the methods in this class are safe for use by multiple concurrent\n threads.", "codes": ["public abstract class FileSystemProvider\nextends Object"], "fields": [], "methods": [{"method_name": "installedProviders", "method_sig": "public static List<FileSystemProvider> installedProviders()", "description": "Returns a list of the installed file system providers.\n\n  The first invocation of this method causes the default provider to be\n initialized (if not already initialized) and loads any other installed\n providers as described by the FileSystems class."}, {"method_name": "getScheme", "method_sig": "public abstract String getScheme()", "description": "Returns the URI scheme that identifies this provider."}, {"method_name": "newFileSystem", "method_sig": "public abstract FileSystem newFileSystem (URI uri,\n                                         Map<String, ?> env)\n                                  throws IOException", "description": "Constructs a new FileSystem object identified by a URI. This\n method is invoked by the FileSystems.newFileSystem(URI,Map)\n method to open a new file system identified by a URI.\n\n  The uri parameter is an absolute, hierarchical URI, with a\n scheme equal (without regard to case) to the scheme supported by this\n provider. The exact form of the URI is highly provider dependent. The\n env parameter is a map of provider specific properties to configure\n the file system.\n\n  This method throws FileSystemAlreadyExistsException if the\n file system already exists because it was previously created by an\n invocation of this method. Once a file system is closed it is provider-dependent if the\n provider allows a new file system to be created with the same URI as a\n file system it previously created."}, {"method_name": "getFileSystem", "method_sig": "public abstract FileSystem getFileSystem (URI uri)", "description": "Returns an existing FileSystem created by this provider.\n\n  This method returns a reference to a FileSystem that was\n created by invoking the newFileSystem(URI,Map)\n method. File systems created the newFileSystem(Path,Map) method are not returned by this method.\n The file system is identified by its URI. Its exact form\n is highly provider dependent. In the case of the default provider the URI's\n path component is \"/\" and the authority, query and fragment components\n are undefined (Undefined components are represented by null).\n\n  Once a file system created by this provider is closed it is provider-dependent if this\n method returns a reference to the closed file system or throws FileSystemNotFoundException. If the provider allows a new file system to\n be created with the same URI as a file system it previously created then\n this method throws the exception if invoked after the file system is\n closed (and before a new instance is created by the newFileSystem method).\n\n  If a security manager is installed then a provider implementation\n may require to check a permission before returning a reference to an\n existing file system. In the case of the default file system, no permission check is required."}, {"method_name": "getPath", "method_sig": "public abstract Path getPath (URI uri)", "description": "Return a Path object by converting the given URI. The\n resulting Path is associated with a FileSystem that\n already exists or is constructed automatically.\n\n  The exact form of the URI is file system provider dependent. In the\n case of the default provider, the URI scheme is \"file\" and the\n given URI has a non-empty path component, and undefined query, and\n fragment components. The resulting Path is associated with the\n default default FileSystem.\n\n  If a security manager is installed then a provider implementation\n may require to check a permission. In the case of the default file system, no permission check is\n required."}, {"method_name": "newFileSystem", "method_sig": "public FileSystem newFileSystem (Path path,\n                                Map<String, ?> env)\n                         throws IOException", "description": "Constructs a new FileSystem to access the contents of a file as a\n file system.\n\n  This method is intended for specialized providers of pseudo file\n systems where the contents of one or more files is treated as a file\n system. The env parameter is a map of provider specific properties\n to configure the file system.\n\n  If this provider does not support the creation of such file systems\n or if the provider does not recognize the file type of the given file then\n it throws UnsupportedOperationException. The default implementation\n of this method throws UnsupportedOperationException."}, {"method_name": "newInputStream", "method_sig": "public InputStream newInputStream (Path path,\n                                  OpenOption... options)\n                           throws IOException", "description": "Opens a file, returning an input stream to read from the file. This\n method works in exactly the manner specified by the Files.newInputStream(java.nio.file.Path, java.nio.file.OpenOption...) method.\n\n  The default implementation of this method opens a channel to the file\n as if by invoking the newByteChannel(java.nio.file.Path, java.util.Set<? extends java.nio.file.OpenOption>, java.nio.file.attribute.FileAttribute<?>...) method and constructs a\n stream that reads bytes from the channel. This method should be overridden\n where appropriate."}, {"method_name": "newOutputStream", "method_sig": "public OutputStream newOutputStream (Path path,\n                                    OpenOption... options)\n                             throws IOException", "description": "Opens or creates a file, returning an output stream that may be used to\n write bytes to the file. This method works in exactly the manner\n specified by the Files.newOutputStream(java.nio.file.Path, java.nio.file.OpenOption...) method.\n\n  The default implementation of this method opens a channel to the file\n as if by invoking the newByteChannel(java.nio.file.Path, java.util.Set<? extends java.nio.file.OpenOption>, java.nio.file.attribute.FileAttribute<?>...) method and constructs a\n stream that writes bytes to the channel. This method should be overridden\n where appropriate."}, {"method_name": "newFileChannel", "method_sig": "public FileChannel newFileChannel (Path path,\n                                  Set<? extends OpenOption> options,\n                                  FileAttribute<?>... attrs)\n                           throws IOException", "description": "Opens or creates a file for reading and/or writing, returning a file\n channel to access the file. This method works in exactly the manner\n specified by the FileChannel.open method. A provider that does not support all the\n features required to construct a file channel throws \n UnsupportedOperationException. The default provider is required to\n support the creation of file channels. When not overridden, the default\n implementation throws UnsupportedOperationException."}, {"method_name": "newAsynchronousFileChannel", "method_sig": "public AsynchronousFileChannel newAsynchronousFileChannel (Path path,\n                                                          Set<? extends OpenOption> options,\n                                                          ExecutorService executor,\n                                                          FileAttribute<?>... attrs)\n                                                   throws IOException", "description": "Opens or creates a file for reading and/or writing, returning an\n asynchronous file channel to access the file. This method works in\n exactly the manner specified by the AsynchronousFileChannel.open method.\n A provider that does not support all the features required to construct\n an asynchronous file channel throws UnsupportedOperationException.\n The default provider is required to support the creation of asynchronous\n file channels. When not overridden, the default implementation of this\n method throws UnsupportedOperationException."}, {"method_name": "newByteChannel", "method_sig": "public abstract SeekableByteChannel newByteChannel (Path path,\n                                                   Set<? extends OpenOption> options,\n                                                   FileAttribute<?>... attrs)\n                                            throws IOException", "description": "Opens or creates a file, returning a seekable byte channel to access the\n file. This method works in exactly the manner specified by the Files.newByteChannel(Path,Set,FileAttribute[]) method."}, {"method_name": "newDirectoryStream", "method_sig": "public abstract DirectoryStream<Path> newDirectoryStream (Path dir,\n                                                         DirectoryStream.Filter<? super Path> filter)\n                                                  throws IOException", "description": "Opens a directory, returning a DirectoryStream to iterate over\n the entries in the directory. This method works in exactly the manner\n specified by the Files.newDirectoryStream(java.nio.file.Path, java.nio.file.DirectoryStream.Filter)\n method."}, {"method_name": "createDirectory", "method_sig": "public abstract void createDirectory (Path dir,\n                                     FileAttribute<?>... attrs)\n                              throws IOException", "description": "Creates a new directory. This method works in exactly the manner\n specified by the Files.createDirectory(java.nio.file.Path, java.nio.file.attribute.FileAttribute<?>...) method."}, {"method_name": "createSymbolicLink", "method_sig": "public void createSymbolicLink (Path link,\n                               Path target,\n                               FileAttribute<?>... attrs)\n                        throws IOException", "description": "Creates a symbolic link to a target. This method works in exactly the\n manner specified by the Files.createSymbolicLink(java.nio.file.Path, java.nio.file.Path, java.nio.file.attribute.FileAttribute<?>...) method.\n\n  The default implementation of this method throws \n UnsupportedOperationException."}, {"method_name": "createLink", "method_sig": "public void createLink (Path link,\n                       Path existing)\n                throws IOException", "description": "Creates a new link (directory entry) for an existing file. This method\n works in exactly the manner specified by the Files.createLink(java.nio.file.Path, java.nio.file.Path)\n method.\n\n  The default implementation of this method throws \n UnsupportedOperationException."}, {"method_name": "delete", "method_sig": "public abstract void delete (Path path)\n                     throws IOException", "description": "Deletes a file. This method works in exactly the  manner specified by the\n Files.delete(java.nio.file.Path) method."}, {"method_name": "deleteIfExists", "method_sig": "public boolean deleteIfExists (Path path)\n                       throws IOException", "description": "Deletes a file if it exists. This method works in exactly the manner\n specified by the Files.deleteIfExists(java.nio.file.Path) method.\n\n  The default implementation of this method simply invokes delete(java.nio.file.Path) ignoring the NoSuchFileException when the file does not\n exist. It may be overridden where appropriate."}, {"method_name": "readSymbolicLink", "method_sig": "public Path readSymbolicLink (Path link)\n                      throws IOException", "description": "Reads the target of a symbolic link. This method works in exactly the\n manner specified by the Files.readSymbolicLink(java.nio.file.Path) method.\n\n  The default implementation of this method throws \n UnsupportedOperationException."}, {"method_name": "copy", "method_sig": "public abstract void copy (Path source,\n                          Path target,\n                          CopyOption... options)\n                   throws IOException", "description": "Copy a file to a target file. This method works in exactly the manner\n specified by the Files.copy(Path,Path,CopyOption[]) method\n except that both the source and target paths must be associated with\n this provider."}, {"method_name": "move", "method_sig": "public abstract void move (Path source,\n                          Path target,\n                          CopyOption... options)\n                   throws IOException", "description": "Move or rename a file to a target file. This method works in exactly the\n manner specified by the Files.move(java.nio.file.Path, java.nio.file.Path, java.nio.file.CopyOption...) method except that both the\n source and target paths must be associated with this provider."}, {"method_name": "isSameFile", "method_sig": "public abstract boolean isSameFile (Path path,\n                                   Path path2)\n                            throws IOException", "description": "Tests if two paths locate the same file. This method works in exactly the\n manner specified by the Files.isSameFile(java.nio.file.Path, java.nio.file.Path) method."}, {"method_name": "isHidden", "method_sig": "public abstract boolean isHidden (Path path)\n                          throws IOException", "description": "Tells whether or not a file is considered hidden. This method\n works in exactly the manner specified by the Files.isHidden(java.nio.file.Path)\n method.\n\n  This method is invoked by the isHidden method."}, {"method_name": "getFileStore", "method_sig": "public abstract FileStore getFileStore (Path path)\n                                throws IOException", "description": "Returns the FileStore representing the file store where a file\n is located. This method works in exactly the manner specified by the\n Files.getFileStore(java.nio.file.Path) method."}, {"method_name": "checkAccess", "method_sig": "public abstract void checkAccess (Path path,\n                                 AccessMode... modes)\n                          throws IOException", "description": "Checks the existence, and optionally the accessibility, of a file.\n\n  This method may be used by the isReadable,\n isWritable and isExecutable methods to check the accessibility of a file.\n\n  This method checks the existence of a file and that this Java virtual\n machine has appropriate privileges that would allow it access the file\n according to all of access modes specified in the modes parameter\n as follows:\n\n \nAccess Modes\n\n Value Description \n\n\n\n READ \n Checks that the file exists and that the Java virtual machine has\n     permission to read the file. \n\n\n WRITE \n Checks that the file exists and that the Java virtual machine has\n     permission to write to the file, \n\n\n EXECUTE \n Checks that the file exists and that the Java virtual machine has\n     permission to execute the file. The semantics\n     may differ when checking access to a directory. For example, on UNIX\n     systems, checking for EXECUTE access checks that the Java\n     virtual machine has permission to search the directory in order to\n     access file or subdirectories. \n\n\n\n If the modes parameter is of length zero, then the existence\n of the file is checked.\n\n  This method follows symbolic links if the file referenced by this\n object is a symbolic link. Depending on the implementation, this method\n may require to read file permissions, access control lists, or other\n file attributes in order to check the effective access to the file. To\n determine the effective access to a file may require access to several\n attributes and so in some implementations this method may not be atomic\n with respect to other file system operations."}, {"method_name": "getFileAttributeView", "method_sig": "public abstract <V extends FileAttributeView> V getFileAttributeView (Path path,\n                                                                     Class<V> type,\n                                                                     LinkOption... options)", "description": "Returns a file attribute view of a given type. This method works in\n exactly the manner specified by the Files.getFileAttributeView(java.nio.file.Path, java.lang.Class<V>, java.nio.file.LinkOption...)\n method."}, {"method_name": "readAttributes", "method_sig": "public abstract <A extends BasicFileAttributes> A readAttributes (Path path,\n                                                                 Class<A> type,\n                                                                 LinkOption... options)\n                                                          throws IOException", "description": "Reads a file's attributes as a bulk operation. This method works in\n exactly the manner specified by the Files.readAttributes(Path,Class,LinkOption[]) method."}, {"method_name": "readAttributes", "method_sig": "public abstract Map<String, Object> readAttributes (Path path,\n                                                        String attributes,\n                                                        LinkOption... options)\n                                                 throws IOException", "description": "Reads a set of file attributes as a bulk operation. This method works in\n exactly the manner specified by the Files.readAttributes(Path,String,LinkOption[]) method."}, {"method_name": "setAttribute", "method_sig": "public abstract void setAttribute (Path path,\n                                  String attribute,\n                                  Object value,\n                                  LinkOption... options)\n                           throws IOException", "description": "Sets the value of a file attribute. This method works in exactly the\n manner specified by the Files.setAttribute(java.nio.file.Path, java.lang.String, java.lang.Object, java.nio.file.LinkOption...) method."}]}