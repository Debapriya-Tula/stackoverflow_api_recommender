{"name": "Interface Chronology", "module": "java.base", "package": "java.time.chrono", "text": "A calendar system, used to organize and identify dates.\n \n The main date and time API is built on the ISO calendar system.\n The chronology operates behind the scenes to represent the general concept of a calendar system.\n For example, the Japanese, Minguo, Thai Buddhist and others.\n \n Most other calendar systems also operate on the shared concepts of year, month and day,\n linked to the cycles of the Earth around the Sun, and the Moon around the Earth.\n These shared concepts are defined by ChronoField and are available\n for use by any Chronology implementation:\n \n   LocalDate isoDate = ...\n   ThaiBuddhistDate thaiDate = ...\n   int isoYear = isoDate.get(ChronoField.YEAR);\n   int thaiYear = thaiDate.get(ChronoField.YEAR);\n \n As shown, although the date objects are in different calendar systems, represented by different\n Chronology instances, both can be queried using the same constant on ChronoField.\n For a full discussion of the implications of this, see ChronoLocalDate.\n In general, the advice is to use the known ISO-based LocalDate, rather than\n ChronoLocalDate.\n \n While a Chronology object typically uses ChronoField and is based on\n an era, year-of-era, month-of-year, day-of-month model of a date, this is not required.\n A Chronology instance may represent a totally different kind of calendar system,\n such as the Mayan.\n \n In practical terms, the Chronology instance also acts as a factory.\n The of(String) method allows an instance to be looked up by identifier,\n while the ofLocale(Locale) method allows lookup by locale.\n \n The Chronology instance provides a set of methods to create ChronoLocalDate instances.\n The date classes are used to manipulate specific dates.\n \n dateNow()\n dateNow(clock)\n dateNow(zone)\n date(yearProleptic, month, day)\n date(era, yearOfEra, month, day)\n dateYearDay(yearProleptic, dayOfYear)\n dateYearDay(era, yearOfEra, dayOfYear)\n date(TemporalAccessor)\n\nAdding New Calendars\n The set of available chronologies can be extended by applications.\n Adding a new calendar system requires the writing of an implementation of\n Chronology, ChronoLocalDate and Era.\n The majority of the logic specific to the calendar system will be in the\n ChronoLocalDate implementation.\n The Chronology implementation acts as a factory.\n \n To permit the discovery of additional chronologies, the ServiceLoader\n is used. A file must be added to the META-INF/services directory with the\n name 'java.time.chrono.Chronology' listing the implementation classes.\n See the ServiceLoader for more details on service loading.\n For lookup by id or calendarType, the system provided calendars are found\n first followed by application provided calendars.\n \n Each chronology must define a chronology ID that is unique within the system.\n If the chronology represents a calendar system defined by the\n CLDR specification then the calendar type is the concatenation of the\n CLDR type and, if applicable, the CLDR variant.", "codes": ["public interface Chronology\nextends Comparable<Chronology>"], "fields": [], "methods": [{"method_name": "from", "method_sig": "static Chronology from (TemporalAccessor temporal)", "description": "Obtains an instance of Chronology from a temporal object.\n \n This obtains a chronology based on the specified temporal.\n A TemporalAccessor represents an arbitrary set of date and time information,\n which this factory converts to an instance of Chronology.\n \n The conversion will obtain the chronology using TemporalQueries.chronology().\n If the specified temporal object does not have a chronology, IsoChronology is returned.\n \n This method matches the signature of the functional interface TemporalQuery\n allowing it to be used as a query via method reference, Chronology::from."}, {"method_name": "ofLocale", "method_sig": "static Chronology ofLocale (Locale locale)", "description": "Obtains an instance of Chronology from a locale.\n \n This returns a Chronology based on the specified locale,\n typically returning IsoChronology. Other calendar systems\n are only returned if they are explicitly selected within the locale.\n \n The Locale class provide access to a range of information useful\n for localizing an application. This includes the language and region,\n such as \"en-GB\" for English as used in Great Britain.\n \n The Locale class also supports an extension mechanism that\n can be used to identify a calendar system. The mechanism is a form\n of key-value pairs, where the calendar system has the key \"ca\".\n For example, the locale \"en-JP-u-ca-japanese\" represents the English\n language as used in Japan with the Japanese calendar system.\n \n This method finds the desired calendar system in a manner equivalent\n to passing \"ca\" to Locale.getUnicodeLocaleType(String).\n If the \"ca\" key is not present, then IsoChronology is returned.\n \n Note that the behavior of this method differs from the older\n Calendar.getInstance(Locale) method.\n If that method receives a locale of \"th_TH\" it will return BuddhistCalendar.\n By contrast, this method will return IsoChronology.\n Passing the locale \"th-TH-u-ca-buddhist\" into either method will\n result in the Thai Buddhist calendar system and is therefore the\n recommended approach going forward for Thai calendar system localization.\n \n A similar, but simpler, situation occurs for the Japanese calendar system.\n The locale \"jp_JP_JP\" has previously been used to access the calendar.\n However, unlike the Thai locale, \"ja_JP_JP\" is automatically converted by\n Locale to the modern and recommended form of \"ja-JP-u-ca-japanese\".\n Thus, there is no difference in behavior between this method and\n Calendar#getInstance(Locale)."}, {"method_name": "of", "method_sig": "static Chronology of (String id)", "description": "Obtains an instance of Chronology from a chronology ID or\n calendar system type.\n \n This returns a chronology based on either the ID or the type.\n The chronology ID uniquely identifies the chronology.\n The calendar system type is defined by the\n CLDR specification.\n \n The chronology may be a system chronology or a chronology\n provided by the application via ServiceLoader configuration.\n \n Since some calendars can be customized, the ID or type typically refers\n to the default customization. For example, the Gregorian calendar can have multiple\n cutover dates from the Julian, but the lookup only provides the default cutover date."}, {"method_name": "getAvailableChronologies", "method_sig": "static Set<Chronology> getAvailableChronologies()", "description": "Returns the available chronologies.\n \n Each returned Chronology is available for use in the system.\n The set of chronologies includes the system chronologies and\n any chronologies provided by the application via ServiceLoader\n configuration."}, {"method_name": "getId", "method_sig": "String getId()", "description": "Gets the ID of the chronology.\n \n The ID uniquely identifies the Chronology.\n It can be used to lookup the Chronology using of(String)."}, {"method_name": "getCalendarType", "method_sig": "String getCalendarType()", "description": "Gets the calendar type of the calendar system.\n \n The calendar type is an identifier defined by the CLDR and\n Unicode Locale Data Markup Language (LDML) specifications\n to uniquely identify a calendar.\n The getCalendarType is the concatenation of the CLDR calendar type\n and the variant, if applicable, is appended separated by \"-\".\n The calendar type is used to lookup the Chronology using of(String)."}, {"method_name": "date", "method_sig": "default ChronoLocalDate date (Era era,\n                             int yearOfEra,\n                             int month,\n                             int dayOfMonth)", "description": "Obtains a local date in this chronology from the era, year-of-era,\n month-of-year and day-of-month fields."}, {"method_name": "date", "method_sig": "ChronoLocalDate date (int prolepticYear,\n                     int month,\n                     int dayOfMonth)", "description": "Obtains a local date in this chronology from the proleptic-year,\n month-of-year and day-of-month fields."}, {"method_name": "dateYearDay", "method_sig": "default ChronoLocalDate dateYearDay (Era era,\n                                    int yearOfEra,\n                                    int dayOfYear)", "description": "Obtains a local date in this chronology from the era, year-of-era and\n day-of-year fields."}, {"method_name": "dateYearDay", "method_sig": "ChronoLocalDate dateYearDay (int prolepticYear,\n                            int dayOfYear)", "description": "Obtains a local date in this chronology from the proleptic-year and\n day-of-year fields."}, {"method_name": "dateEpochDay", "method_sig": "ChronoLocalDate dateEpochDay (long epochDay)", "description": "Obtains a local date in this chronology from the epoch-day.\n \n The definition of EPOCH_DAY is the same\n for all calendar systems, thus it can be used for conversion."}, {"method_name": "dateNow", "method_sig": "default ChronoLocalDate dateNow()", "description": "Obtains the current local date in this chronology from the system clock in the default time-zone.\n \n This will query the system clock in the default\n time-zone to obtain the current date.\n \n Using this method will prevent the ability to use an alternate clock for testing\n because the clock is hard-coded."}, {"method_name": "dateNow", "method_sig": "default ChronoLocalDate dateNow (ZoneId zone)", "description": "Obtains the current local date in this chronology from the system clock in the specified time-zone.\n \n This will query the system clock to obtain the current date.\n Specifying the time-zone avoids dependence on the default time-zone.\n \n Using this method will prevent the ability to use an alternate clock for testing\n because the clock is hard-coded."}, {"method_name": "dateNow", "method_sig": "default ChronoLocalDate dateNow (Clock clock)", "description": "Obtains the current local date in this chronology from the specified clock.\n \n This will query the specified clock to obtain the current date - today.\n Using this method allows the use of an alternate clock for testing.\n The alternate clock may be introduced using dependency injection."}, {"method_name": "date", "method_sig": "ChronoLocalDate date (TemporalAccessor temporal)", "description": "Obtains a local date in this chronology from another temporal object.\n \n This obtains a date in this chronology based on the specified temporal.\n A TemporalAccessor represents an arbitrary set of date and time information,\n which this factory converts to an instance of ChronoLocalDate.\n \n The conversion typically uses the EPOCH_DAY\n field, which is standardized across calendar systems.\n \n This method matches the signature of the functional interface TemporalQuery\n allowing it to be used as a query via method reference, aChronology::date."}, {"method_name": "localDateTime", "method_sig": "default ChronoLocalDateTime<? extends ChronoLocalDate> localDateTime (TemporalAccessor temporal)", "description": "Obtains a local date-time in this chronology from another temporal object.\n \n This obtains a date-time in this chronology based on the specified temporal.\n A TemporalAccessor represents an arbitrary set of date and time information,\n which this factory converts to an instance of ChronoLocalDateTime.\n \n The conversion extracts and combines the ChronoLocalDate and the\n LocalTime from the temporal object.\n Implementations are permitted to perform optimizations such as accessing\n those fields that are equivalent to the relevant objects.\n The result uses this chronology.\n \n This method matches the signature of the functional interface TemporalQuery\n allowing it to be used as a query via method reference, aChronology::localDateTime."}, {"method_name": "zonedDateTime", "method_sig": "default ChronoZonedDateTime<? extends ChronoLocalDate> zonedDateTime (TemporalAccessor temporal)", "description": "Obtains a ChronoZonedDateTime in this chronology from another temporal object.\n \n This obtains a zoned date-time in this chronology based on the specified temporal.\n A TemporalAccessor represents an arbitrary set of date and time information,\n which this factory converts to an instance of ChronoZonedDateTime.\n \n The conversion will first obtain a ZoneId from the temporal object,\n falling back to a ZoneOffset if necessary. It will then try to obtain\n an Instant, falling back to a ChronoLocalDateTime if necessary.\n The result will be either the combination of ZoneId or ZoneOffset\n with Instant or ChronoLocalDateTime.\n Implementations are permitted to perform optimizations such as accessing\n those fields that are equivalent to the relevant objects.\n The result uses this chronology.\n \n This method matches the signature of the functional interface TemporalQuery\n allowing it to be used as a query via method reference, aChronology::zonedDateTime."}, {"method_name": "zonedDateTime", "method_sig": "default ChronoZonedDateTime<? extends ChronoLocalDate> zonedDateTime (Instant instant,\n                                                                     ZoneId zone)", "description": "Obtains a ChronoZonedDateTime in this chronology from an Instant.\n \n This obtains a zoned date-time with the same instant as that specified."}, {"method_name": "isLeapYear", "method_sig": "boolean isLeapYear (long prolepticYear)", "description": "Checks if the specified year is a leap year.\n \n A leap-year is a year of a longer length than normal.\n The exact meaning is determined by the chronology according to the following constraints.\n \na leap-year must imply a year-length longer than a non leap-year.\n a chronology that does not support the concept of a year must return false.\n the correct result must be returned for all years within the\n     valid range of years for the chronology.\n \n\n Outside the range of valid years an implementation is free to return\n either a best guess or false.\n An implementation must not throw an exception, even if the year is\n outside the range of valid years."}, {"method_name": "prolepticYear", "method_sig": "int prolepticYear (Era era,\n                  int yearOfEra)", "description": "Calculates the proleptic-year given the era and year-of-era.\n \n This combines the era and year-of-era into the single proleptic-year field.\n \n If the chronology makes active use of eras, such as JapaneseChronology\n then the year-of-era will be validated against the era.\n For other chronologies, validation is optional."}, {"method_name": "eraOf", "method_sig": "Era eraOf (int eraValue)", "description": "Creates the chronology era object from the numeric value.\n \n The era is, conceptually, the largest division of the time-line.\n Most calendar systems have a single epoch dividing the time-line into two eras.\n However, some have multiple eras, such as one for the reign of each leader.\n The exact meaning is determined by the chronology according to the following constraints.\n \n The era in use at 1970-01-01 must have the value 1.\n Later eras must have sequentially higher values.\n Earlier eras must have sequentially lower values.\n Each chronology must refer to an enum or similar singleton to provide the era values.\n \n This method returns the singleton era of the correct type for the specified era value."}, {"method_name": "eras", "method_sig": "List<Era> eras()", "description": "Gets the list of eras for the chronology.\n \n Most calendar systems have an era, within which the year has meaning.\n If the calendar system does not support the concept of eras, an empty\n list must be returned."}, {"method_name": "range", "method_sig": "ValueRange range (ChronoField field)", "description": "Gets the range of valid values for the specified field.\n \n All fields can be expressed as a long integer.\n This method returns an object that describes the valid range for that value.\n \n Note that the result only describes the minimum and maximum valid values\n and it is important not to read too much into them. For example, there\n could be values within the range that are invalid for the field.\n \n This method will return a result whether or not the chronology supports the field."}, {"method_name": "getDisplayName", "method_sig": "default String getDisplayName (TextStyle style,\n                              Locale locale)", "description": "Gets the textual representation of this chronology.\n \n This returns the textual name used to identify the chronology,\n suitable for presentation to the user.\n The parameters control the style of the returned text and the locale."}, {"method_name": "resolveDate", "method_sig": "ChronoLocalDate resolveDate (Map<TemporalField, Long> fieldValues,\n                            ResolverStyle resolverStyle)", "description": "Resolves parsed ChronoField values into a date during parsing.\n \n Most TemporalField implementations are resolved using the\n resolve method on the field. By contrast, the ChronoField class\n defines fields that only have meaning relative to the chronology.\n As such, ChronoField date fields are resolved here in the\n context of a specific chronology.\n \n The default implementation, which explains typical resolve behaviour,\n is provided in AbstractChronology."}, {"method_name": "period", "method_sig": "default ChronoPeriod period (int years,\n                            int months,\n                            int days)", "description": "Obtains a period for this chronology based on years, months and days.\n \n This returns a period tied to this chronology using the specified\n years, months and days.  All supplied chronologies use periods\n based on years, months and days, however the ChronoPeriod API\n allows the period to be represented using other units."}, {"method_name": "epochSecond", "method_sig": "default long epochSecond (int prolepticYear,\n                         int month,\n                         int dayOfMonth,\n                         int hour,\n                         int minute,\n                         int second,\n                         ZoneOffset zoneOffset)", "description": "Gets the number of seconds from the epoch of 1970-01-01T00:00:00Z.\n \n The number of seconds is calculated using the proleptic-year,\n month, day-of-month, hour, minute, second, and zoneOffset."}, {"method_name": "epochSecond", "method_sig": "default long epochSecond (Era era,\n                         int yearOfEra,\n                         int month,\n                         int dayOfMonth,\n                         int hour,\n                         int minute,\n                         int second,\n                         ZoneOffset zoneOffset)", "description": "Gets the number of seconds from the epoch of 1970-01-01T00:00:00Z.\n \n The number of seconds is calculated using the era, year-of-era,\n month, day-of-month, hour, minute, second, and zoneOffset."}, {"method_name": "compareTo", "method_sig": "int compareTo (Chronology other)", "description": "Compares this chronology to another chronology.\n \n The comparison order first by the chronology ID string, then by any\n additional information specific to the subclass.\n It is \"consistent with equals\", as defined by Comparable."}, {"method_name": "equals", "method_sig": "boolean equals (Object obj)", "description": "Checks if this chronology is equal to another chronology.\n \n The comparison is based on the entire state of the object."}, {"method_name": "hashCode", "method_sig": "int hashCode()", "description": "A hash code for this chronology.\n \n The hash code should be based on the entire state of the object."}, {"method_name": "toString", "method_sig": "String toString()", "description": "Outputs this chronology as a String.\n \n The format should include the entire state of the object."}]}