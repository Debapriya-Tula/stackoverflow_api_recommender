{"name": "Class BorderLayout", "module": "java.desktop", "package": "java.awt", "text": "A border layout lays out a container, arranging and resizing\n its components to fit in five regions:\n north, south, east, west, and center.\n Each region may contain no more than one component, and\n is identified by a corresponding constant:\n NORTH, SOUTH, EAST,\n WEST, and CENTER.  When adding a\n component to a container with a border layout, use one of these\n five constants, for example:\n \n    Panel p = new Panel();\n    p.setLayout(new BorderLayout());\n    p.add(new Button(\"Okay\"), BorderLayout.SOUTH);\n \n As a convenience, BorderLayout interprets the\n absence of a string specification the same as the constant\n CENTER:\n \n    Panel p2 = new Panel();\n    p2.setLayout(new BorderLayout());\n    p2.add(new TextArea());  // Same as p.add(new TextArea(), BorderLayout.CENTER);\n \n\n In addition, BorderLayout supports the relative\n positioning constants, PAGE_START, PAGE_END,\n LINE_START, and LINE_END.\n In a container whose ComponentOrientation is set to\n ComponentOrientation.LEFT_TO_RIGHT, these constants map to\n NORTH, SOUTH, WEST, and\n EAST, respectively.\n \n For compatibility with previous releases, BorderLayout\n also includes the relative positioning constants BEFORE_FIRST_LINE,\n AFTER_LAST_LINE, BEFORE_LINE_BEGINS and\n AFTER_LINE_ENDS.  These are equivalent to\n PAGE_START, PAGE_END, LINE_START\n and LINE_END respectively.  For\n consistency with the relative positioning constants used by other\n components, the latter constants are preferred.\n \n Mixing both absolute and relative positioning constants can lead to\n unpredictable results.  If\n you use both types, the relative constants will take precedence.\n For example, if you add components using both the NORTH\n and PAGE_START constants in a container whose\n orientation is LEFT_TO_RIGHT, only the\n PAGE_START will be laid out.\n \n NOTE: Currently,\n BorderLayout does not support vertical\n orientations.  The isVertical setting on the container's\n ComponentOrientation is not respected.\n \n The components are laid out according to their\n preferred sizes and the constraints of the container's size.\n The NORTH and SOUTH components may\n be stretched horizontally; the EAST and\n WEST components may be stretched vertically;\n the CENTER component may stretch both horizontally\n and vertically to fill any space left over.\n \n Here is an example of five buttons in an applet laid out using\n the BorderLayout layout manager:\n \n\n\n The code for this applet is as follows:\n\n \n import java.awt.*;\n import java.applet.Applet;\n\n public class buttonDir extends Applet {\n   public void init() {\n     setLayout(new BorderLayout());\n     add(new Button(\"North\"), BorderLayout.NORTH);\n     add(new Button(\"South\"), BorderLayout.SOUTH);\n     add(new Button(\"East\"), BorderLayout.EAST);\n     add(new Button(\"West\"), BorderLayout.WEST);\n     add(new Button(\"Center\"), BorderLayout.CENTER);\n   }\n }\n ", "codes": ["public class BorderLayout\nextends Object\nimplements LayoutManager2, Serializable"], "fields": [{"field_name": "NORTH", "field_sig": "public static final\u00a0String NORTH", "description": "The north layout constraint (top of container)."}, {"field_name": "SOUTH", "field_sig": "public static final\u00a0String SOUTH", "description": "The south layout constraint (bottom of container)."}, {"field_name": "EAST", "field_sig": "public static final\u00a0String EAST", "description": "The east layout constraint (right side of container)."}, {"field_name": "WEST", "field_sig": "public static final\u00a0String WEST", "description": "The west layout constraint (left side of container)."}, {"field_name": "CENTER", "field_sig": "public static final\u00a0String CENTER", "description": "The center layout constraint (middle of container)."}, {"field_name": "BEFORE_FIRST_LINE", "field_sig": "public static final\u00a0String BEFORE_FIRST_LINE", "description": "Synonym for PAGE_START.  Exists for compatibility with previous\n versions.  PAGE_START is preferred."}, {"field_name": "AFTER_LAST_LINE", "field_sig": "public static final\u00a0String AFTER_LAST_LINE", "description": "Synonym for PAGE_END.  Exists for compatibility with previous\n versions.  PAGE_END is preferred."}, {"field_name": "BEFORE_LINE_BEGINS", "field_sig": "public static final\u00a0String BEFORE_LINE_BEGINS", "description": "Synonym for LINE_START.  Exists for compatibility with previous\n versions.  LINE_START is preferred."}, {"field_name": "AFTER_LINE_ENDS", "field_sig": "public static final\u00a0String AFTER_LINE_ENDS", "description": "Synonym for LINE_END.  Exists for compatibility with previous\n versions.  LINE_END is preferred."}, {"field_name": "PAGE_START", "field_sig": "public static final\u00a0String PAGE_START", "description": "The component comes before the first line of the layout's content.\n For Western, left-to-right and top-to-bottom orientations, this is\n equivalent to NORTH."}, {"field_name": "PAGE_END", "field_sig": "public static final\u00a0String PAGE_END", "description": "The component comes after the last line of the layout's content.\n For Western, left-to-right and top-to-bottom orientations, this is\n equivalent to SOUTH."}, {"field_name": "LINE_START", "field_sig": "public static final\u00a0String LINE_START", "description": "The component goes at the beginning of the line direction for the\n layout. For Western, left-to-right and top-to-bottom orientations,\n this is equivalent to WEST."}, {"field_name": "LINE_END", "field_sig": "public static final\u00a0String LINE_END", "description": "The component goes at the end of the line direction for the\n layout. For Western, left-to-right and top-to-bottom orientations,\n this is equivalent to EAST."}], "methods": [{"method_name": "getHgap", "method_sig": "public int getHgap()", "description": "Returns the horizontal gap between components."}, {"method_name": "setHgap", "method_sig": "public void setHgap (int hgap)", "description": "Sets the horizontal gap between components."}, {"method_name": "getVgap", "method_sig": "public int getVgap()", "description": "Returns the vertical gap between components."}, {"method_name": "setVgap", "method_sig": "public void setVgap (int vgap)", "description": "Sets the vertical gap between components."}, {"method_name": "addLayoutComponent", "method_sig": "public void addLayoutComponent (Component comp,\n                               Object constraints)", "description": "Adds the specified component to the layout, using the specified\n constraint object.  For border layouts, the constraint must be\n one of the following constants:  NORTH,\n SOUTH, EAST,\n WEST, or CENTER.\n \n Most applications do not call this method directly. This method\n is called when a component is added to a container using the\n Container.add method with the same argument types."}, {"method_name": "addLayoutComponent", "method_sig": "@Deprecated\npublic void addLayoutComponent (String name,\n                               Component comp)", "description": "Description copied from interface:\u00a0LayoutManager"}, {"method_name": "removeLayoutComponent", "method_sig": "public void removeLayoutComponent (Component comp)", "description": "Removes the specified component from this border layout. This\n method is called when a container calls its remove or\n removeAll methods. Most applications do not call this\n method directly."}, {"method_name": "getLayoutComponent", "method_sig": "public Component getLayoutComponent (Object constraints)", "description": "Gets the component that was added using the given constraint"}, {"method_name": "getLayoutComponent", "method_sig": "public Component getLayoutComponent (Container target,\n                                    Object constraints)", "description": "Returns the component that corresponds to the given constraint location\n based on the target Container's component orientation.\n Components added with the relative constraints PAGE_START,\n PAGE_END, LINE_START, and LINE_END\n take precedence over components added with the explicit constraints\n NORTH, SOUTH, WEST, and EAST.\n The Container's component orientation is used to determine the location of components\n added with LINE_START and LINE_END."}, {"method_name": "getConstraints", "method_sig": "public Object getConstraints (Component comp)", "description": "Gets the constraints for the specified component"}, {"method_name": "minimumLayoutSize", "method_sig": "public Dimension minimumLayoutSize (Container target)", "description": "Determines the minimum size of the target container\n using this layout manager.\n \n This method is called when a container calls its\n getMinimumSize method. Most applications do not call\n this method directly."}, {"method_name": "preferredLayoutSize", "method_sig": "public Dimension preferredLayoutSize (Container target)", "description": "Determines the preferred size of the target\n container using this layout manager, based on the components\n in the container.\n \n Most applications do not call this method directly. This method\n is called when a container calls its getPreferredSize\n method."}, {"method_name": "maximumLayoutSize", "method_sig": "public Dimension maximumLayoutSize (Container target)", "description": "Returns the maximum dimensions for this layout given the components\n in the specified target container."}, {"method_name": "getLayoutAlignmentX", "method_sig": "public float getLayoutAlignmentX (Container parent)", "description": "Returns the alignment along the x axis.  This specifies how\n the component would like to be aligned relative to other\n components.  The value should be a number between 0 and 1\n where 0 represents alignment along the origin, 1 is aligned\n the furthest away from the origin, 0.5 is centered, etc."}, {"method_name": "getLayoutAlignmentY", "method_sig": "public float getLayoutAlignmentY (Container parent)", "description": "Returns the alignment along the y axis.  This specifies how\n the component would like to be aligned relative to other\n components.  The value should be a number between 0 and 1\n where 0 represents alignment along the origin, 1 is aligned\n the furthest away from the origin, 0.5 is centered, etc."}, {"method_name": "invalidateLayout", "method_sig": "public void invalidateLayout (Container target)", "description": "Invalidates the layout, indicating that if the layout manager\n has cached information it should be discarded."}, {"method_name": "layoutContainer", "method_sig": "public void layoutContainer (Container target)", "description": "Lays out the container argument using this border layout.\n \n This method actually reshapes the components in the specified\n container in order to satisfy the constraints of this\n BorderLayout object. The NORTH\n and SOUTH components, if any, are placed at\n the top and bottom of the container, respectively. The\n WEST and EAST components are\n then placed on the left and right, respectively. Finally,\n the CENTER object is placed in any remaining\n space in the middle.\n \n Most applications do not call this method directly. This method\n is called when a container calls its doLayout method."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a string representation of the state of this border layout."}]}