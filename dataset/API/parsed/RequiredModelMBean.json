{"name": "Class RequiredModelMBean", "module": "java.management", "package": "javax.management.modelmbean", "text": "This class is the implementation of a ModelMBean. An appropriate\n implementation of a ModelMBean must be shipped with every JMX Agent\n and the class must be named RequiredModelMBean.\n \n Java resources wishing to be manageable instantiate the\n RequiredModelMBean using the MBeanServer's createMBean method.\n The resource then sets the MBeanInfo and Descriptors for the\n RequiredModelMBean instance. The attributes and operations exposed\n via the ModelMBeanInfo for the ModelMBean are accessible\n from MBeans, connectors/adaptors like other MBeans. Through the\n Descriptors, values and methods in the managed application can be\n defined and mapped to attributes and operations of the ModelMBean.\n This mapping can be defined in an XML formatted file or dynamically and\n programmatically at runtime.\n \n Every RequiredModelMBean which is instantiated in the MBeanServer\n becomes manageable:\n its attributes and operations become remotely accessible through the\n connectors/adaptors connected to that MBeanServer.\n \n A Java object cannot be registered in the MBeanServer unless it is a\n JMX compliant MBean. By instantiating a RequiredModelMBean, resources\n are guaranteed that the MBean is valid.\n\n MBeanException and RuntimeOperationsException must be thrown on every\n public method.  This allows for wrapping exceptions from distributed\n communications (RMI, EJB, etc.)", "codes": ["public class RequiredModelMBean\nextends Object\nimplements ModelMBean, MBeanRegistration, NotificationEmitter"], "fields": [], "methods": [{"method_name": "setModelMBeanInfo", "method_sig": "public void setModelMBeanInfo (ModelMBeanInfo mbi)\n                       throws MBeanException,\n                              RuntimeOperationsException", "description": "Initializes a ModelMBean object using ModelMBeanInfo passed in.\n This method makes it possible to set a customized ModelMBeanInfo on\n the ModelMBean as long as it is not registered with the MBeanServer.\n \n Once the ModelMBean's ModelMBeanInfo (with Descriptors) are\n customized and set on the ModelMBean, the  ModelMBean be\n registered with the MBeanServer.\n \n If the ModelMBean is currently registered, this method throws\n a RuntimeOperationsException wrapping an\n IllegalStateException\n\n If the given inModelMBeanInfo does not contain any\n ModelMBeanNotificationInfo for the GENERIC\n or ATTRIBUTE_CHANGE notifications, then the\n RequiredModelMBean will supply its own default\n ModelMBeanNotificationInfos for\n those missing notifications."}, {"method_name": "setManagedResource", "method_sig": "public void setManagedResource (Object mr,\n                               String mr_type)\n                        throws MBeanException,\n                               RuntimeOperationsException,\n                               InstanceNotFoundException,\n                               InvalidTargetObjectTypeException", "description": "Sets the instance handle of the object against which to\n execute all methods in this ModelMBean management interface\n (MBeanInfo and Descriptors)."}, {"method_name": "load", "method_sig": "public void load()\n          throws MBeanException,\n                 RuntimeOperationsException,\n                 InstanceNotFoundException", "description": "Instantiates this MBean instance with the data found for\n the MBean in the persistent store.  The data loaded could include\n attribute and operation values.\nThis method should be called during construction or\n initialization of this instance, and before the MBean is\n registered with the MBeanServer.\nIf the implementation of this class does not support\n persistence, an MBeanException wrapping a ServiceNotFoundException is thrown."}, {"method_name": "store", "method_sig": "public void store()\n           throws MBeanException,\n                  RuntimeOperationsException,\n                  InstanceNotFoundException", "description": "Captures the current state of this MBean instance and writes\n it out to the persistent store.  The state stored could include\n attribute and operation values.\nIf the implementation of this class does not support\n persistence, an MBeanException wrapping a ServiceNotFoundException is thrown.\nPersistence policy from the MBean and attribute descriptor\n is used to guide execution of this method. The MBean should be\n stored if 'persistPolicy' field is:\n != \"never\"\n   = \"always\"\n   = \"onTimer\" and now > 'lastPersistTime' + 'persistPeriod'\n   = \"NoMoreOftenThan\" and now > 'lastPersistTime' + 'persistPeriod'\n   = \"onUnregister\"\n \nDo not store the MBean if 'persistPolicy' field is:\n\n    = \"never\"\n    = \"onUpdate\"\n    = \"onTimer\" && now < 'lastPersistTime' + 'persistPeriod'\n "}, {"method_name": "getMBeanInfo", "method_sig": "public MBeanInfo getMBeanInfo()", "description": "Returns the attributes, operations, constructors and notifications\n that this RequiredModelMBean exposes for management."}, {"method_name": "invoke", "method_sig": "public Object invoke (String opName,\n                     Object[] opArgs,\n                     String[] sig)\n              throws MBeanException,\n                     ReflectionException", "description": "Invokes a method on or through a RequiredModelMBean and returns\n the result of the method execution.\n \n If the given method to be invoked, together with the provided\n signature, matches one of RequiredModelMbean\n accessible methods, this one will be call. Otherwise the call to\n the given method will be tried on the managed resource.\n \n The last value returned by an operation may be cached in\n the operation's descriptor which\n is in the ModelMBeanOperationInfo's descriptor.\n The valid value will be in the 'value' field if there is one.\n If the 'currencyTimeLimit' field in the descriptor is:\n \n<0 Then the value is not cached and is never valid.\n      The operation method is invoked.\n      The 'value' and 'lastUpdatedTimeStamp' fields are cleared.\n=0 Then the value is always cached and always valid.\n      The 'value' field is returned. If there is no 'value' field\n      then the operation method is invoked for the attribute.\n      The 'lastUpdatedTimeStamp' field and `value' fields are set to\n      the operation's return value and the current time stamp.\n>0 Represents the number of seconds that the 'value'\n      field is valid.\n      The 'value' field is no longer valid when\n      'lastUpdatedTimeStamp' + 'currencyTimeLimit' > Now.\n      \nWhen 'value' is valid, 'value' is returned.\nWhen 'value' is no longer valid then the operation\n             method is invoked. The 'lastUpdatedTimeStamp' field\n             and `value' fields are updated.\n\n\n\nNote: because of inconsistencies in previous versions of\n this specification, it is recommended not to use negative or zero\n values for currencyTimeLimit.  To indicate that a\n cached value is never valid, omit the\n currencyTimeLimit field.  To indicate that it is\n always valid, use a very large number for this field."}, {"method_name": "getAttribute", "method_sig": "public Object getAttribute (String attrName)\n                    throws AttributeNotFoundException,\n                           MBeanException,\n                           ReflectionException", "description": "Returns the value of a specific attribute defined for this\n ModelMBean.\n The last value returned by an attribute may be cached in the\n attribute's descriptor.\n The valid value will be in the 'value' field if there is one.\n If the 'currencyTimeLimit' field in the descriptor is:\n \n <0 Then the value is not cached and is never valid.\n       The getter method is invoked for the attribute.\n       The 'value' and 'lastUpdatedTimeStamp' fields are cleared.\n =0 Then the value is always cached and always valid.\n       The 'value' field is returned. If there is no'value' field\n       then the getter method is invoked for the attribute.\n       The 'lastUpdatedTimeStamp' field and `value' fields are set\n       to the attribute's value and the current time stamp.\n >0 Represents the number of seconds that the 'value'\n       field is valid.\n       The 'value' field is no longer valid when\n       'lastUpdatedTimeStamp' + 'currencyTimeLimit' > Now.\n   \nWhen 'value' is valid, 'value' is returned.\nWhen 'value' is no longer valid then the getter\n            method is invoked for the attribute.\n            The 'lastUpdatedTimeStamp' field and `value' fields\n            are updated.\n\n\nNote: because of inconsistencies in previous versions of\n this specification, it is recommended not to use negative or zero\n values for currencyTimeLimit.  To indicate that a\n cached value is never valid, omit the\n currencyTimeLimit field.  To indicate that it is\n always valid, use a very large number for this field.\nIf the 'getMethod' field contains the name of a valid\n operation descriptor, then the method described by the\n operation descriptor is executed.  The response from the\n method is returned as the value of the attribute.  If the\n operation fails or the returned value is not compatible with\n the declared type of the attribute, an exception will be thrown.\nIf no 'getMethod' field is defined then the default value of the\n attribute is returned. If the returned value is not compatible with\n the declared type of the attribute, an exception will be thrown.\nThe declared type of the attribute is the String returned by\n MBeanAttributeInfo.getType().  A value is compatible\n with this type if one of the following is true:\n \nthe value is null;\nthe declared name is a primitive type name (such as \"int\")\n     and the value is an instance of the corresponding wrapper\n     type (such as java.lang.Integer);\nthe name of the value's class is identical to the declared name;\nthe declared name can be loaded by the value's class loader and\n     produces a class to which the value can be assigned.\n\nIn this implementation, in every case where the getMethod needs to\n be called, because the method is invoked through the standard \"invoke\"\n method and thus needs operationInfo, an operation must be specified\n for that getMethod so that the invocation works correctly."}, {"method_name": "getAttributes", "method_sig": "public AttributeList getAttributes (String[] attrNames)", "description": "Returns the values of several attributes in the ModelMBean.\n Executes a getAttribute for each attribute name in the\n attrNames array passed in."}, {"method_name": "setAttribute", "method_sig": "public void setAttribute (Attribute attribute)\n                  throws AttributeNotFoundException,\n                         InvalidAttributeValueException,\n                         MBeanException,\n                         ReflectionException", "description": "Sets the value of a specific attribute of a named ModelMBean.\n\n If the 'setMethod' field of the attribute's descriptor\n contains the name of a valid operation descriptor, then the\n method described by the operation descriptor is executed.\n In this implementation, the operation descriptor must be specified\n correctly and assigned to the modelMBeanInfo so that the 'setMethod'\n works correctly.\n The response from the method is set as the value of the attribute\n in the descriptor.\n\n If currencyTimeLimit is > 0, then the new value for the\n attribute is cached in the attribute descriptor's\n 'value' field and the 'lastUpdatedTimeStamp' field is set to\n the current time stamp.\n\n If the persist field of the attribute's descriptor is not null\n then Persistence policy from the attribute descriptor is used to\n guide storing the attribute in a persistent store.\n Store the MBean if 'persistPolicy' field is:\n \n != \"never\"\n = \"always\"\n = \"onUpdate\"\n = \"onTimer\" and now > 'lastPersistTime' + 'persistPeriod'\n = \"NoMoreOftenThan\" and now > 'lastPersistTime' +\n         'persistPeriod'\n\n Do not store the MBean if 'persistPolicy' field is:\n \n = \"never\"\n = = \"onTimer\" && now < 'lastPersistTime' + 'persistPeriod'\n = \"onUnregister\"\n = = \"NoMoreOftenThan\" and now < 'lastPersistTime' +\n        'persistPeriod'\n\nThe ModelMBeanInfo of the Model MBean is stored in a file."}, {"method_name": "setAttributes", "method_sig": "public AttributeList setAttributes (AttributeList attributes)", "description": "Sets the values of an array of attributes of this ModelMBean.\n Executes the setAttribute() method for each attribute in the list."}, {"method_name": "addNotificationListener", "method_sig": "public void addNotificationListener (NotificationListener listener,\n                                    NotificationFilter filter,\n                                    Object handback)\n                             throws IllegalArgumentException", "description": "Registers an object which implements the NotificationListener\n interface as a listener.  This\n object's 'handleNotification()' method will be invoked when any\n notification is issued through or by the ModelMBean.  This does\n not include attributeChangeNotifications.  They must be registered\n for independently."}, {"method_name": "removeNotificationListener", "method_sig": "public void removeNotificationListener (NotificationListener listener)\n                                throws ListenerNotFoundException", "description": "Removes a listener for Notifications from the RequiredModelMBean."}, {"method_name": "getNotificationInfo", "method_sig": "public MBeanNotificationInfo[] getNotificationInfo()", "description": "Returns the array of Notifications always generated by the\n RequiredModelMBean.\n \n\n RequiredModelMBean may always send also two additional notifications:\n \n One with descriptor \"name=GENERIC,descriptorType=notification,log=T,severity=6,displayName=jmx.modelmbean.generic\"\n Second is a standard attribute change notification\n        with descriptor \"name=ATTRIBUTE_CHANGE,descriptorType=notification,log=T,severity=6,displayName=jmx.attribute.change\"\n\n Thus these two notifications are always added to those specified\n by the application."}, {"method_name": "getClassLoaderRepository", "method_sig": "protected ClassLoaderRepository getClassLoaderRepository()", "description": "Return the Class Loader Repository used to perform class loading.\n Subclasses may wish to redefine this method in order to return\n the appropriate ClassLoaderRepository\n that should be used in this object."}, {"method_name": "preRegister", "method_sig": "public ObjectName preRegister (MBeanServer server,\n                              ObjectName name)\n                       throws Exception", "description": "Allows the MBean to perform any operations it needs before\n being registered in the MBean server.  If the name of the MBean\n is not specified, the MBean can provide a name for its\n registration.  If any exception is raised, the MBean will not be\n registered in the MBean server.\n \n In order to ensure proper run-time semantics of RequireModelMBean,\n Any subclass of RequiredModelMBean overloading or overriding this\n method should call super.preRegister(server, name)\n in its own preRegister implementation."}, {"method_name": "postRegister", "method_sig": "public void postRegister (Boolean registrationDone)", "description": "Allows the MBean to perform any operations needed after having been\n registered in the MBean server or after the registration has failed.\n \n In order to ensure proper run-time semantics of RequireModelMBean,\n Any subclass of RequiredModelMBean overloading or overriding this\n method should call super.postRegister(registrationDone)\n in its own postRegister implementation."}, {"method_name": "preDeregister", "method_sig": "public void preDeregister()\n                   throws Exception", "description": "Allows the MBean to perform any operations it needs before\n being unregistered by the MBean server.\n \n In order to ensure proper run-time semantics of RequireModelMBean,\n Any subclass of RequiredModelMBean overloading or overriding this\n method should call super.preDeregister() in its own\n preDeregister implementation."}, {"method_name": "postDeregister", "method_sig": "public void postDeregister()", "description": "Allows the MBean to perform any operations needed after having been\n unregistered in the MBean server.\n \n In order to ensure proper run-time semantics of RequireModelMBean,\n Any subclass of RequiredModelMBean overloading or overriding this\n method should call super.postDeregister() in its own\n postDeregister implementation."}]}