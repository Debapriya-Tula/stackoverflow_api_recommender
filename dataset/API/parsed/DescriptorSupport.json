{"name": "Class DescriptorSupport", "module": "java.management", "package": "javax.management.modelmbean", "text": "This class represents the metadata set for a ModelMBean element.  A\n descriptor is part of the ModelMBeanInfo,\n ModelMBeanNotificationInfo, ModelMBeanAttributeInfo,\n ModelMBeanConstructorInfo, and ModelMBeanParameterInfo.\n \n A descriptor consists of a collection of fields.  Each field is in\n fieldname=fieldvalue format.  Field names are not case sensitive,\n case will be preserved on field values.\n \n All field names and values are not predefined. New fields can be\n defined and added by any program.  Some fields have been predefined\n for consistency of implementation and support by the\n ModelMBeanInfo, ModelMBeanAttributeInfo, ModelMBeanConstructorInfo,\n ModelMBeanNotificationInfo, ModelMBeanOperationInfo and ModelMBean\n classes.\n\n The serialVersionUID of this class is -6292969195866300415L.", "codes": ["public class DescriptorSupport\nextends Object\nimplements Descriptor"], "fields": [], "methods": [{"method_name": "clone", "method_sig": "public Object clone()\n             throws RuntimeOperationsException", "description": "Returns a new Descriptor which is a duplicate of the Descriptor."}, {"method_name": "equals", "method_sig": "public boolean equals (Object o)", "description": "Compares this descriptor to the given object.  The objects are equal if\n the given object is also a Descriptor, and if the two Descriptors have\n the same field names (possibly differing in case) and the same\n associated values.  The respective values for a field in the two\n Descriptors are equal if the following conditions hold:\n\n \nIf one value is null then the other must be too.\nIf one value is a primitive array then the other must be a primitive\n array of the same type with the same elements.\nIf one value is an object array then the other must be too and\n Arrays.deepEquals\n must return true.\nOtherwise Object.equals(Object) must return true.\n"}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Returns the hash code value for this descriptor.  The hash\n code is computed as the sum of the hash codes for each field in\n the descriptor.  The hash code of a field with name n\n and value v is n.toLowerCase().hashCode() ^ h.\n Here h is the hash code of v, computed as\n follows:\n\nIf v is null then h is 0.\nIf v is a primitive array then h is computed using\n the appropriate overloading of java.util.Arrays.hashCode.\nIf v is an object array then h is computed using\n Arrays.deepHashCode.\nOtherwise h is v.hashCode().\n"}, {"method_name": "isValid", "method_sig": "public boolean isValid()\n                throws RuntimeOperationsException", "description": "Returns true if all of the fields have legal values given their\n names.\n \n This implementation does not support  interoperating with a directory\n or lookup service. Thus, conforming to the specification, no checking is\n done on the \"export\" field.\n \n Otherwise this implementation returns false if:\n \n name and descriptorType fieldNames are not defined, or\n null, or empty, or not String\n  class, role, getMethod, setMethod fieldNames, if defined,\n are null or not String\n  persistPeriod, currencyTimeLimit, lastUpdatedTimeStamp,\n lastReturnedTimeStamp if defined, are null, or not a Numeric\n String or not a Numeric Value >= -1\n  log fieldName, if defined, is null, or not a Boolean or\n not a String with value \"t\", \"f\", \"true\", \"false\". These String\n values must not be case sensitive.\n  visibility fieldName, if defined, is null, or not a\n Numeric String or a not Numeric Value >= 1 and <= 4\n  severity fieldName, if defined, is null, or not a Numeric\n String or not a Numeric Value >= 0 and <= 6\n persistPolicy fieldName, if defined, is null, or not one of\n the following strings:\n   \"OnUpdate\", \"OnTimer\", \"NoMoreOftenThan\", \"OnUnregister\", \"Always\",\n   \"Never\". These String values must not be case sensitive.\n"}, {"method_name": "toXMLString", "method_sig": "public String toXMLString()", "description": "Returns an XML String representing the descriptor.\nThe format is not defined, but an implementation must\n ensure that the string returned by this method can be\n used to build an equivalent descriptor when instantiated\n using the constructor DescriptorSupport(String inStr).\nFields which are not String objects will have toString()\n called on them to create the value. The value will be\n enclosed in parentheses.  It is not guaranteed that you can\n reconstruct these objects unless they have been\n specifically set up to support toString() in a meaningful\n format and have a matching constructor that accepts a\n String in the same format.\nIf the descriptor is empty the following String is\n returned: <Descriptor></Descriptor>"}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a human readable string representing the\n descriptor.  The string will be in the format of\n \"fieldName=fieldValue,fieldName2=fieldValue2,...\"\n\n If there are no fields in the descriptor, then an empty String\n is returned.\n\n If a fieldValue is an object then the toString() method is\n called on it and its returned value is used as the value for\n the field enclosed in parenthesis."}]}