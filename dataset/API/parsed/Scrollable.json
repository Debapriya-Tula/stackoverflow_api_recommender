{"name": "Interface Scrollable", "module": "java.desktop", "package": "javax.swing", "text": "An interface that provides information to a scrolling container\n like JScrollPane.  A complex component that's likely to be used\n as a viewing a JScrollPane viewport (or other scrolling container)\n should implement this interface.", "codes": ["public interface Scrollable"], "fields": [], "methods": [{"method_name": "getPreferredScrollableViewportSize", "method_sig": "Dimension getPreferredScrollableViewportSize()", "description": "Returns the preferred size of the viewport for a view component.\n For example, the preferred size of a JList component\n is the size required to accommodate all of the cells in its list.\n However, the value of preferredScrollableViewportSize\n is the size required for JList.getVisibleRowCount rows.\n A component without any properties that would affect the viewport\n size should just return getPreferredSize here."}, {"method_name": "getScrollableUnitIncrement", "method_sig": "int getScrollableUnitIncrement (Rectangle visibleRect,\n                               int orientation,\n                               int direction)", "description": "Components that display logical rows or columns should compute\n the scroll increment that will completely expose one new row\n or column, depending on the value of orientation.  Ideally,\n components should handle a partially exposed row or column by\n returning the distance required to completely expose the item.\n \n Scrolling containers, like JScrollPane, will use this method\n each time the user requests a unit scroll."}, {"method_name": "getScrollableBlockIncrement", "method_sig": "int getScrollableBlockIncrement (Rectangle visibleRect,\n                                int orientation,\n                                int direction)", "description": "Components that display logical rows or columns should compute\n the scroll increment that will completely expose one block\n of rows or columns, depending on the value of orientation.\n \n Scrolling containers, like JScrollPane, will use this method\n each time the user requests a block scroll."}, {"method_name": "getScrollableTracksViewportWidth", "method_sig": "boolean getScrollableTracksViewportWidth()", "description": "Return true if a viewport should always force the width of this\n Scrollable to match the width of the viewport.\n For example a normal\n text view that supported line wrapping would return true here, since it\n would be undesirable for wrapped lines to disappear beyond the right\n edge of the viewport.  Note that returning true for a Scrollable\n whose ancestor is a JScrollPane effectively disables horizontal\n scrolling.\n \n Scrolling containers, like JViewport, will use this method each\n time they are validated."}, {"method_name": "getScrollableTracksViewportHeight", "method_sig": "boolean getScrollableTracksViewportHeight()", "description": "Return true if a viewport should always force the height of this\n Scrollable to match the height of the viewport.  For example a\n columnar text view that flowed text in left to right columns\n could effectively disable vertical scrolling by returning\n true here.\n \n Scrolling containers, like JViewport, will use this method each\n time they are validated."}]}