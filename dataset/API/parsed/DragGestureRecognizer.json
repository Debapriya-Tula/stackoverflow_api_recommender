{"name": "Class DragGestureRecognizer", "module": "java.desktop", "package": "java.awt.dnd", "text": "The DragGestureRecognizer is an\n abstract base class for the specification\n of a platform-dependent listener that can be associated with a particular\n Component in order to\n identify platform-dependent drag initiating gestures.\n \n The appropriate DragGestureRecognizer\n subclass instance is obtained from the\n DragSource associated with\n a particular Component, or from the Toolkit object via its\n createDragGestureRecognizer()\n method.\n \n Once the DragGestureRecognizer\n is associated with a particular Component\n it will register the appropriate listener interfaces on that\n Component\n in order to track the input events delivered to the Component.\n \n Once the DragGestureRecognizer identifies a sequence of events\n on the Component as a drag initiating gesture, it will notify\n its unicast DragGestureListener by\n invoking its\n gestureRecognized()\n method.\n \n When a concrete DragGestureRecognizer\n instance detects a drag initiating\n gesture on the Component it is associated with,\n it fires a DragGestureEvent to\n the DragGestureListener registered on\n its unicast event source for DragGestureListener\n events. This DragGestureListener is responsible\n for causing the associated\n DragSource to start the Drag and Drop operation (if\n appropriate).", "codes": ["public abstract class DragGestureRecognizer\nextends Object\nimplements Serializable"], "fields": [{"field_name": "dragSource", "field_sig": "protected\u00a0DragSource dragSource", "description": "The DragSource\n associated with this\n DragGestureRecognizer."}, {"field_name": "component", "field_sig": "protected\u00a0Component component", "description": "The Component\n associated with this DragGestureRecognizer."}, {"field_name": "dragGestureListener", "field_sig": "protected transient\u00a0DragGestureListener dragGestureListener", "description": "The DragGestureListener\n associated with this DragGestureRecognizer."}, {"field_name": "sourceActions", "field_sig": "protected\u00a0int sourceActions", "description": "An int representing\n the type(s) of action(s) used\n in this Drag and Drop operation."}, {"field_name": "events", "field_sig": "protected\u00a0ArrayList<InputEvent> events", "description": "The list of events (in order) that\n the DragGestureRecognizer\n \"recognized\" as a \"gesture\" that triggers a drag."}], "methods": [{"method_name": "registerListeners", "method_sig": "protected abstract void registerListeners()", "description": "register this DragGestureRecognizer's Listeners with the Component\n\n subclasses must override this method"}, {"method_name": "unregisterListeners", "method_sig": "protected abstract void unregisterListeners()", "description": "unregister this DragGestureRecognizer's Listeners with the Component\n\n subclasses must override this method"}, {"method_name": "getDragSource", "method_sig": "public DragSource getDragSource()", "description": "This method returns the DragSource\n this DragGestureRecognizer\n will use in order to process the Drag and Drop\n operation."}, {"method_name": "getComponent", "method_sig": "public Component getComponent()", "description": "This method returns the Component\n that is to be \"observed\" by the\n DragGestureRecognizer\n for drag initiating gestures."}, {"method_name": "setComponent", "method_sig": "public void setComponent (Component c)", "description": "set the Component that the DragGestureRecognizer is associated with\n\n registerListeners() and unregisterListeners() are called as a side\n effect as appropriate."}, {"method_name": "getSourceActions", "method_sig": "public int getSourceActions()", "description": "This method returns an int representing the\n type of action(s) this Drag and Drop\n operation will support."}, {"method_name": "setSourceActions", "method_sig": "public void setSourceActions (int actions)", "description": "This method sets the permitted source drag action(s)\n for this Drag and Drop operation."}, {"method_name": "getTriggerEvent", "method_sig": "public InputEvent getTriggerEvent()", "description": "This method returns the first event in the\n series of events that initiated\n the Drag and Drop operation."}, {"method_name": "resetRecognizer", "method_sig": "public void resetRecognizer()", "description": "Reset the Recognizer, if its currently recognizing a gesture, ignore\n it."}, {"method_name": "addDragGestureListener", "method_sig": "public void addDragGestureListener (DragGestureListener dgl)\n                            throws TooManyListenersException", "description": "Register a new DragGestureListener."}, {"method_name": "removeDragGestureListener", "method_sig": "public void removeDragGestureListener (DragGestureListener dgl)", "description": "unregister the current DragGestureListener"}, {"method_name": "fireDragGestureRecognized", "method_sig": "protected void fireDragGestureRecognized (int dragAction,\n                                         Point p)", "description": "Notify the DragGestureListener that a Drag and Drop initiating\n gesture has occurred. Then reset the state of the Recognizer."}, {"method_name": "appendEvent", "method_sig": "protected void appendEvent (InputEvent awtie)", "description": "Listeners registered on the Component by this Recognizer shall record\n all Events that are recognized as part of the series of Events that go\n to comprise a Drag and Drop initiating gesture via this API.\n \n This method is used by a DragGestureRecognizer\n implementation to add an InputEvent\n subclass (that it believes is one in a series\n of events that comprise a Drag and Drop operation)\n to the array of events that this\n DragGestureRecognizer maintains internally."}]}