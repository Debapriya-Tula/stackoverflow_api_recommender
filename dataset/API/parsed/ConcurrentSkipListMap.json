{"name": "Class ConcurrentSkipListMap<K,\u200bV>", "module": "java.base", "package": "java.util.concurrent", "text": "A scalable concurrent ConcurrentNavigableMap implementation.\n The map is sorted according to the natural\n ordering of its keys, or by a Comparator provided at map\n creation time, depending on which constructor is used.\n\n This class implements a concurrent variant of SkipLists\n providing expected average log(n) time cost for the\n containsKey, get, put and\n remove operations and their variants.  Insertion, removal,\n update, and access operations safely execute concurrently by\n multiple threads.\n\n Iterators and spliterators are\n weakly consistent.\n\n Ascending key ordered views and their iterators are faster than\n descending ones.\n\n All Map.Entry pairs returned by methods in this class\n and its views represent snapshots of mappings at the time they were\n produced. They do not support the Entry.setValue\n method. (Note however that it is possible to change mappings in the\n associated map using put, putIfAbsent, or\n replace, depending on exactly which effect you need.)\n\n Beware that bulk operations putAll, equals,\n toArray, containsValue, and clear are\n not guaranteed to be performed atomically. For example, an\n iterator operating concurrently with a putAll operation\n might view only some of the added elements.\n\n This class and its views and iterators implement all of the\n optional methods of the Map and Iterator\n interfaces. Like most other concurrent collections, this class does\n not permit the use of null keys or values because some\n null return values cannot be reliably distinguished from the absence of\n elements.\n\n This class is a member of the\n \n Java Collections Framework.", "codes": ["public class ConcurrentSkipListMap<K, V>\nextends AbstractMap<K, V>\nimplements ConcurrentNavigableMap<K, V>, Cloneable, Serializable"], "fields": [], "methods": [{"method_name": "clone", "method_sig": "public ConcurrentSkipListMap<K, V> clone()", "description": "Returns a shallow copy of this ConcurrentSkipListMap\n instance. (The keys and values themselves are not cloned.)"}, {"method_name": "containsKey", "method_sig": "public boolean containsKey (Object key)", "description": "Returns true if this map contains a mapping for the specified\n key."}, {"method_name": "get", "method_sig": "public V get (Object key)", "description": "Returns the value to which the specified key is mapped,\n or null if this map contains no mapping for the key.\n\n More formally, if this map contains a mapping from a key\n k to a value v such that key compares\n equal to k according to the map's ordering, then this\n method returns v; otherwise it returns null.\n (There can be at most one such mapping.)"}, {"method_name": "getOrDefault", "method_sig": "public V getOrDefault (Object key,\n                      V defaultValue)", "description": "Returns the value to which the specified key is mapped,\n or the given defaultValue if this map contains no mapping for the key."}, {"method_name": "put", "method_sig": "public V put (K key,\n             V value)", "description": "Associates the specified value with the specified key in this map.\n If the map previously contained a mapping for the key, the old\n value is replaced."}, {"method_name": "remove", "method_sig": "public V remove (Object key)", "description": "Removes the mapping for the specified key from this map if present."}, {"method_name": "containsValue", "method_sig": "public boolean containsValue (Object value)", "description": "Returns true if this map maps one or more keys to the\n specified value.  This operation requires time linear in the\n map size. Additionally, it is possible for the map to change\n during execution of this method, in which case the returned\n result may be inaccurate."}, {"method_name": "clear", "method_sig": "public void clear()", "description": "Removes all of the mappings from this map."}, {"method_name": "computeIfAbsent", "method_sig": "public V computeIfAbsent (K key,\n                         Function<? super K, ? extends V> mappingFunction)", "description": "If the specified key is not already associated with a value,\n attempts to compute its value using the given mapping function\n and enters it into this map unless null.  The function\n is NOT guaranteed to be applied once atomically only\n if the value is not present."}, {"method_name": "computeIfPresent", "method_sig": "public V computeIfPresent (K key,\n                          BiFunction<? super K, ? super V, ? extends V> remappingFunction)", "description": "If the value for the specified key is present, attempts to\n compute a new mapping given the key and its current mapped\n value. The function is NOT guaranteed to be applied\n once atomically."}, {"method_name": "compute", "method_sig": "public V compute (K key,\n                 BiFunction<? super K, ? super V, ? extends V> remappingFunction)", "description": "Attempts to compute a mapping for the specified key and its\n current mapped value (or null if there is no current\n mapping). The function is NOT guaranteed to be applied\n once atomically."}, {"method_name": "merge", "method_sig": "public V merge (K key,\n               V value,\n               BiFunction<? super V, ? super V, ? extends V> remappingFunction)", "description": "If the specified key is not already associated with a value,\n associates it with the given value.  Otherwise, replaces the\n value with the results of the given remapping function, or\n removes if null. The function is NOT\n guaranteed to be applied once atomically."}, {"method_name": "keySet", "method_sig": "public NavigableSet<K> keySet()", "description": "Returns a NavigableSet view of the keys contained in this map.\n\n The set's iterator returns the keys in ascending order.\n The set's spliterator additionally reports Spliterator.CONCURRENT,\n Spliterator.NONNULL, Spliterator.SORTED and\n Spliterator.ORDERED, with an encounter order that is ascending\n key order.\n\n The spliterator's comparator\n is null if the map's comparator\n is null.\n Otherwise, the spliterator's comparator is the same as or imposes the\n same total ordering as the map's comparator.\n\n The set is backed by the map, so changes to the map are\n reflected in the set, and vice-versa.  The set supports element\n removal, which removes the corresponding mapping from the map,\n via the Iterator.remove, Set.remove,\n removeAll, retainAll, and clear\n operations.  It does not support the add or addAll\n operations.\n\n The view's iterators and spliterators are\n weakly consistent.\n\n This method is equivalent to method navigableKeySet."}, {"method_name": "values", "method_sig": "public Collection<V> values()", "description": "Returns a Collection view of the values contained in this map.\n The collection's iterator returns the values in ascending order\n of the corresponding keys. The collections's spliterator additionally\n reports Spliterator.CONCURRENT, Spliterator.NONNULL and\n Spliterator.ORDERED, with an encounter order that is ascending\n order of the corresponding keys.\n\n The collection is backed by the map, so changes to the map are\n reflected in the collection, and vice-versa.  The collection\n supports element removal, which removes the corresponding\n mapping from the map, via the Iterator.remove,\n Collection.remove, removeAll,\n retainAll and clear operations.  It does not\n support the add or addAll operations.\n\n The view's iterators and spliterators are\n weakly consistent."}, {"method_name": "entrySet", "method_sig": "public Set<Map.Entry<K, V>> entrySet()", "description": "Returns a Set view of the mappings contained in this map.\n\n The set's iterator returns the entries in ascending key order.  The\n set's spliterator additionally reports Spliterator.CONCURRENT,\n Spliterator.NONNULL, Spliterator.SORTED and\n Spliterator.ORDERED, with an encounter order that is ascending\n key order.\n\n The set is backed by the map, so changes to the map are\n reflected in the set, and vice-versa.  The set supports element\n removal, which removes the corresponding mapping from the map,\n via the Iterator.remove, Set.remove,\n removeAll, retainAll and clear\n operations.  It does not support the add or\n addAll operations.\n\n The view's iterators and spliterators are\n weakly consistent.\n\n The Map.Entry elements traversed by the iterator\n or spliterator do not support the setValue\n operation."}, {"method_name": "equals", "method_sig": "public boolean equals (Object o)", "description": "Compares the specified object with this map for equality.\n Returns true if the given object is also a map and the\n two maps represent the same mappings.  More formally, two maps\n m1 and m2 represent the same mappings if\n m1.entrySet().equals(m2.entrySet()).  This\n operation may return misleading results if either map is\n concurrently modified during execution of this method."}, {"method_name": "putIfAbsent", "method_sig": "public V putIfAbsent (K key,\n                     V value)", "description": "If the specified key is not already associated\n with a value, associates it with the given value.\n This is equivalent to, for this map:\n  \n if (!map.containsKey(key))\n   return map.put(key, value);\n else\n   return map.get(key);\n\n except that the action is performed atomically."}, {"method_name": "remove", "method_sig": "public boolean remove (Object key,\n                      Object value)", "description": "Removes the entry for a key only if currently mapped to a given value.\n This is equivalent to, for this map:\n  \n if (map.containsKey(key)\n     && Objects.equals(map.get(key), value)) {\n   map.remove(key);\n   return true;\n } else {\n   return false;\n }\n\n except that the action is performed atomically."}, {"method_name": "replace", "method_sig": "public boolean replace (K key,\n                       V oldValue,\n                       V newValue)", "description": "Replaces the entry for a key only if currently mapped to a given value.\n This is equivalent to, for this map:\n  \n if (map.containsKey(key)\n     && Objects.equals(map.get(key), oldValue)) {\n   map.put(key, newValue);\n   return true;\n } else {\n   return false;\n }\n\n except that the action is performed atomically."}, {"method_name": "replace", "method_sig": "public V replace (K key,\n                 V value)", "description": "Replaces the entry for a key only if currently mapped to some value.\n This is equivalent to, for this map:\n  \n if (map.containsKey(key))\n   return map.put(key, value);\n else\n   return null;\n\n except that the action is performed atomically."}, {"method_name": "firstKey", "method_sig": "public K firstKey()", "description": "Description copied from interface:\u00a0SortedMap"}, {"method_name": "lastKey", "method_sig": "public K lastKey()", "description": "Description copied from interface:\u00a0SortedMap"}, {"method_name": "subMap", "method_sig": "public ConcurrentNavigableMap<K, V> subMap (K fromKey,\n                                                boolean fromInclusive,\n                                                K toKey,\n                                                boolean toInclusive)", "description": "Description copied from interface:\u00a0NavigableMap"}, {"method_name": "headMap", "method_sig": "public ConcurrentNavigableMap<K, V> headMap (K toKey,\n                                                 boolean inclusive)", "description": "Description copied from interface:\u00a0NavigableMap"}, {"method_name": "tailMap", "method_sig": "public ConcurrentNavigableMap<K, V> tailMap (K fromKey,\n                                                 boolean inclusive)", "description": "Description copied from interface:\u00a0NavigableMap"}, {"method_name": "subMap", "method_sig": "public ConcurrentNavigableMap<K, V> subMap (K fromKey,\n                                                K toKey)", "description": "Description copied from interface:\u00a0NavigableMap"}, {"method_name": "headMap", "method_sig": "public ConcurrentNavigableMap<K, V> headMap (K toKey)", "description": "Description copied from interface:\u00a0NavigableMap"}, {"method_name": "tailMap", "method_sig": "public ConcurrentNavigableMap<K, V> tailMap (K fromKey)", "description": "Description copied from interface:\u00a0NavigableMap"}, {"method_name": "lowerEntry", "method_sig": "public Map.Entry<K, V> lowerEntry (K key)", "description": "Returns a key-value mapping associated with the greatest key\n strictly less than the given key, or null if there is\n no such key. The returned entry does not support the\n Entry.setValue method."}, {"method_name": "lowerKey", "method_sig": "public K lowerKey (K key)", "description": "Description copied from interface:\u00a0NavigableMap"}, {"method_name": "floorEntry", "method_sig": "public Map.Entry<K, V> floorEntry (K key)", "description": "Returns a key-value mapping associated with the greatest key\n less than or equal to the given key, or null if there\n is no such key. The returned entry does not support\n the Entry.setValue method."}, {"method_name": "floorKey", "method_sig": "public K floorKey (K key)", "description": "Description copied from interface:\u00a0NavigableMap"}, {"method_name": "ceilingEntry", "method_sig": "public Map.Entry<K, V> ceilingEntry (K key)", "description": "Returns a key-value mapping associated with the least key\n greater than or equal to the given key, or null if\n there is no such entry. The returned entry does not\n support the Entry.setValue method."}, {"method_name": "ceilingKey", "method_sig": "public K ceilingKey (K key)", "description": "Description copied from interface:\u00a0NavigableMap"}, {"method_name": "higherEntry", "method_sig": "public Map.Entry<K, V> higherEntry (K key)", "description": "Returns a key-value mapping associated with the least key\n strictly greater than the given key, or null if there\n is no such key. The returned entry does not support\n the Entry.setValue method."}, {"method_name": "higherKey", "method_sig": "public K higherKey (K key)", "description": "Description copied from interface:\u00a0NavigableMap"}, {"method_name": "firstEntry", "method_sig": "public Map.Entry<K, V> firstEntry()", "description": "Returns a key-value mapping associated with the least\n key in this map, or null if the map is empty.\n The returned entry does not support\n the Entry.setValue method."}, {"method_name": "lastEntry", "method_sig": "public Map.Entry<K, V> lastEntry()", "description": "Returns a key-value mapping associated with the greatest\n key in this map, or null if the map is empty.\n The returned entry does not support\n the Entry.setValue method."}, {"method_name": "pollFirstEntry", "method_sig": "public Map.Entry<K, V> pollFirstEntry()", "description": "Removes and returns a key-value mapping associated with\n the least key in this map, or null if the map is empty.\n The returned entry does not support\n the Entry.setValue method."}, {"method_name": "pollLastEntry", "method_sig": "public Map.Entry<K, V> pollLastEntry()", "description": "Removes and returns a key-value mapping associated with\n the greatest key in this map, or null if the map is empty.\n The returned entry does not support\n the Entry.setValue method."}]}