{"name": "Class DeflaterInputStream", "module": "java.base", "package": "java.util.zip", "text": "Implements an input stream filter for compressing data in the \"deflate\"\n compression format.", "codes": ["public class DeflaterInputStream\nextends FilterInputStream"], "fields": [{"field_name": "def", "field_sig": "protected final\u00a0Deflater def", "description": "Compressor for this stream."}, {"field_name": "buf", "field_sig": "protected final\u00a0byte[] buf", "description": "Input buffer for reading compressed data."}], "methods": [{"method_name": "close", "method_sig": "public void close()\n           throws IOException", "description": "Closes this input stream and its underlying input stream, discarding\n any pending uncompressed data."}, {"method_name": "read", "method_sig": "public int read()\n         throws IOException", "description": "Reads a single byte of compressed data from the input stream.\n This method will block until some input can be read and compressed."}, {"method_name": "read", "method_sig": "public int read (byte[] b,\n                int off,\n                int len)\n         throws IOException", "description": "Reads compressed data into a byte array.\n This method will block until some input can be read and compressed."}, {"method_name": "skip", "method_sig": "public long skip (long n)\n          throws IOException", "description": "Skips over and discards data from the input stream.\n This method may block until the specified number of bytes are read and\n skipped. Note: While n is given as a long,\n the maximum number of bytes which can be skipped is\n Integer.MAX_VALUE."}, {"method_name": "available", "method_sig": "public int available()\n              throws IOException", "description": "Returns 0 after EOF has been reached, otherwise always return 1.\n \n Programs should not count on this method to return the actual number\n of bytes that could be read without blocking"}, {"method_name": "markSupported", "method_sig": "public boolean markSupported()", "description": "Always returns false because this input stream does not support\n the mark() and reset() methods."}, {"method_name": "mark", "method_sig": "public void mark (int limit)", "description": "This operation is not supported."}, {"method_name": "reset", "method_sig": "public void reset()\n           throws IOException", "description": "This operation is not supported."}]}