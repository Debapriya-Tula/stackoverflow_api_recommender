{"name": "Interface EventRequestManager", "module": "jdk.jdi", "package": "com.sun.jdi.request", "text": "Manages the creation and deletion of EventRequests. A single\n implementor of this interface exists in a particular VM and\n is accessed through VirtualMachine.eventRequestManager()", "codes": ["public interface EventRequestManager\nextends Mirror"], "fields": [], "methods": [{"method_name": "createClassPrepareRequest", "method_sig": "ClassPrepareRequest createClassPrepareRequest()", "description": "Creates a new disabled ClassPrepareRequest.\n The new event request is added to the list managed by this\n EventRequestManager. Use EventRequest.enable() to\n activate this event request."}, {"method_name": "createClassUnloadRequest", "method_sig": "ClassUnloadRequest createClassUnloadRequest()", "description": "Creates a new disabled ClassUnloadRequest.\n The new event request is added to the list managed by this\n EventRequestManager. Use EventRequest.enable() to\n activate this event request."}, {"method_name": "createThreadStartRequest", "method_sig": "ThreadStartRequest createThreadStartRequest()", "description": "Creates a new disabled ThreadStartRequest.\n The new event request is added to the list managed by this\n EventRequestManager. Use EventRequest.enable() to\n activate this event request."}, {"method_name": "createThreadDeathRequest", "method_sig": "ThreadDeathRequest createThreadDeathRequest()", "description": "Creates a new disabled ThreadDeathRequest.\n The new event request is added to the list managed by this\n EventRequestManager. Use EventRequest.enable() to\n activate this event request."}, {"method_name": "createExceptionRequest", "method_sig": "ExceptionRequest createExceptionRequest (ReferenceType refType,\n                                        boolean notifyCaught,\n                                        boolean notifyUncaught)", "description": "Creates a new disabled ExceptionRequest.\n The new event request is added to the list managed by this\n EventRequestManager. Use EventRequest.enable() to\n activate this event request.\n \n A specific exception type and its subclasses can be selected\n for exception events. Caught exceptions,  uncaught exceptions,\n or both can be selected. Note, however, that\n at the time an exception is thrown, it is not always\n possible to determine whether it is truly caught. See\n ExceptionEvent.catchLocation() for\n details."}, {"method_name": "createMethodEntryRequest", "method_sig": "MethodEntryRequest createMethodEntryRequest()", "description": "Creates a new disabled MethodEntryRequest.\n The new event request is added to the list managed by this\n EventRequestManager. Use EventRequest.enable() to\n activate this event request."}, {"method_name": "createMethodExitRequest", "method_sig": "MethodExitRequest createMethodExitRequest()", "description": "Creates a new disabled MethodExitRequest.\n The new event request is added to the list managed by this\n EventRequestManager. Use EventRequest.enable() to\n activate this event request."}, {"method_name": "createMonitorContendedEnterRequest", "method_sig": "MonitorContendedEnterRequest createMonitorContendedEnterRequest()", "description": "Creates a new disabled MonitorContendedEnterRequest.\n The new event request is added to the list managed by this\n EventRequestManager. Use EventRequest.enable() to\n activate this event request.\n\n Not all target virtual machines support this operation.\n Use VirtualMachine.canRequestMonitorEvents()\n to determine if the operation is supported."}, {"method_name": "createMonitorContendedEnteredRequest", "method_sig": "MonitorContendedEnteredRequest createMonitorContendedEnteredRequest()", "description": "Creates a new disabled MonitorContendedEnteredRequest.\n The new event request is added to the list managed by this\n EventRequestManager. Use EventRequest.enable() to\n activate this event request.\n\n Not all target virtual machines support this operation.\n Use VirtualMachine.canRequestMonitorEvents()\n to determine if the operation is supported."}, {"method_name": "createMonitorWaitRequest", "method_sig": "MonitorWaitRequest createMonitorWaitRequest()", "description": "Creates a new disabled MonitorWaitRequest.\n The new event request is added to the list managed by this\n EventRequestManager. Use EventRequest.enable() to\n activate this event request.\n\n Not all target virtual machines support this operation.\n Use VirtualMachine.canRequestMonitorEvents()\n to determine if the operation is supported."}, {"method_name": "createMonitorWaitedRequest", "method_sig": "MonitorWaitedRequest createMonitorWaitedRequest()", "description": "Creates a new disabled MonitorWaitedRequest.\n The new event request is added to the list managed by this\n EventRequestManager. Use EventRequest.enable() to\n activate this event request.\n\n Not all target virtual machines support this operation.\n Use VirtualMachine.canRequestMonitorEvents()\n to determine if the operation is supported."}, {"method_name": "createStepRequest", "method_sig": "StepRequest createStepRequest (ThreadReference thread,\n                              int size,\n                              int depth)", "description": "Creates a new disabled StepRequest.\n The new event request is added to the list managed by this\n EventRequestManager. Use EventRequest.enable() to\n activate this event request.\n \n The returned request will control stepping only in the specified\n thread; all other threads will be unaffected.\n A size value of StepRequest.STEP_MIN will generate a\n step event each time the code index changes. It represents the\n smallest step size available and often maps to the instruction\n level.\n A size value of StepRequest.STEP_LINE will generate a\n step event each time the source line changes unless line number information is not available,\n in which case a STEP_MIN will be done instead.  For example, no line number information is\n available during the execution of a method that has been rendered obsolete by\n by a VirtualMachine.redefineClasses(java.util.Map<? extends com.sun.jdi.ReferenceType, byte[]>) operation.\n A depth value of StepRequest.STEP_INTO will generate\n step events in any called methods.  A depth value\n of StepRequest.STEP_OVER restricts step events to the current frame\n or caller frames. A depth value of StepRequest.STEP_OUT\n restricts step events to caller frames only. All depth\n restrictions are relative to the call stack immediately before the\n step takes place.\n \n Only one pending step request is allowed per thread.\n \n Note that a typical debugger will want to cancel stepping\n after the first step is detected.  Thus a next line method\n would do the following:\n \n     EventRequestManager mgr = myVM.{@link VirtualMachine#eventRequestManager eventRequestManager}();\n     StepRequest request = mgr.createStepRequest(myThread,\n                                                 StepRequest.{@link StepRequest#STEP_LINE STEP_LINE},\n                                                 StepRequest.{@link StepRequest#STEP_OVER STEP_OVER});\n     request.{@link EventRequest#addCountFilter addCountFilter}(1);  // next step only\n     request.enable();\n     myVM.{@link VirtualMachine#resume resume}();\n "}, {"method_name": "createBreakpointRequest", "method_sig": "BreakpointRequest createBreakpointRequest (Location location)", "description": "Creates a new disabled BreakpointRequest.\n The given Location must have a valid\n (that is, non-negative) code index. The new\n breakpoint is added to the list managed by this\n EventRequestManager. Multiple breakpoints at the\n same location are permitted. Use EventRequest.enable() to\n activate this event request."}, {"method_name": "createAccessWatchpointRequest", "method_sig": "AccessWatchpointRequest createAccessWatchpointRequest (Field field)", "description": "Creates a new disabled watchpoint which watches accesses to the\n specified field. The new\n watchpoint is added to the list managed by this\n EventRequestManager. Multiple watchpoints on the\n same field are permitted.\n Use EventRequest.enable() to\n activate this event request.\n \n Not all target virtual machines support this operation.\n Use VirtualMachine.canWatchFieldAccess()\n to determine if the operation is supported."}, {"method_name": "createModificationWatchpointRequest", "method_sig": "ModificationWatchpointRequest createModificationWatchpointRequest (Field field)", "description": "Creates a new disabled watchpoint which watches accesses to the\n specified field. The new\n watchpoint is added to the list managed by this\n EventRequestManager. Multiple watchpoints on the\n same field are permitted.\n Use EventRequest.enable() to\n activate this event request.\n \n Not all target virtual machines support this operation.\n Use VirtualMachine.canWatchFieldModification()\n to determine if the operation is supported."}, {"method_name": "createVMDeathRequest", "method_sig": "VMDeathRequest createVMDeathRequest()", "description": "Creates a new disabled VMDeathRequest.\n The new request is added to the list managed by this\n EventRequestManager.\n Use EventRequest.enable() to\n activate this event request.\n \n This request (if enabled) will cause a\n VMDeathEvent\n to be sent on termination of the target VM.\n \n A VMDeathRequest with a suspend policy of\n SUSPEND_ALL\n can be used to assure processing of incoming\n SUSPEND_NONE or\n SUSPEND_EVENT_THREAD\n events before VM death.  If all event processing is being\n done in the same thread as event sets are being read,\n enabling the request is all that is needed since the VM\n will be suspended until the EventSet\n containing the VMDeathEvent\n is resumed.\n \n Not all target virtual machines support this operation.\n Use VirtualMachine.canRequestVMDeathEvent()\n to determine if the operation is supported."}, {"method_name": "deleteEventRequest", "method_sig": "void deleteEventRequest (EventRequest eventRequest)", "description": "Removes an eventRequest. The eventRequest is disabled and\n the removed from the requests managed by this\n EventRequestManager. Once the eventRequest is deleted, no\n operations (for example, EventRequest.setEnabled(boolean))\n are permitted - attempts to do so will generally cause an\n InvalidRequestStateException.\n No other eventRequests are effected.\n \n Because this method changes the underlying lists of event\n requests, attempting to directly delete from a list returned\n by a request accessor (e.g. below):\n \n   Iterator iter = requestManager.stepRequests().iterator();\n   while (iter.hasNext()) {\n      requestManager.deleteEventRequest(iter.next());\n  }\n \n may cause a ConcurrentModificationException.\n Instead use\n deleteEventRequests(List)\n or copy the list before iterating."}, {"method_name": "deleteEventRequests", "method_sig": "void deleteEventRequests (List<? extends EventRequest> eventRequests)", "description": "Removes a list of EventRequests."}, {"method_name": "deleteAllBreakpoints", "method_sig": "void deleteAllBreakpoints()", "description": "Remove all breakpoints managed by this EventRequestManager."}, {"method_name": "stepRequests", "method_sig": "List<StepRequest> stepRequests()", "description": "Return an unmodifiable list of the enabled and disabled step requests.\n This list is a live view of these requests and thus changes as requests\n are added and deleted."}, {"method_name": "classPrepareRequests", "method_sig": "List<ClassPrepareRequest> classPrepareRequests()", "description": "Return an unmodifiable list of the enabled and disabled class prepare requests.\n This list is a live view of these requests and thus changes as requests\n are added and deleted."}, {"method_name": "classUnloadRequests", "method_sig": "List<ClassUnloadRequest> classUnloadRequests()", "description": "Return an unmodifiable list of the enabled and disabled class unload requests.\n This list is a live view of these requests and thus changes as requests\n are added and deleted."}, {"method_name": "threadStartRequests", "method_sig": "List<ThreadStartRequest> threadStartRequests()", "description": "Return an unmodifiable list of the enabled and disabled thread start requests.\n This list is a live view of these requests and thus changes as requests\n are added and deleted."}, {"method_name": "threadDeathRequests", "method_sig": "List<ThreadDeathRequest> threadDeathRequests()", "description": "Return an unmodifiable list of the enabled and disabled thread death requests.\n This list is a live view of these requests and thus changes as requests\n are added and deleted."}, {"method_name": "exceptionRequests", "method_sig": "List<ExceptionRequest> exceptionRequests()", "description": "Return an unmodifiable list of the enabled and disabled exception requests.\n This list is a live view of these requests and thus changes as requests\n are added and deleted."}, {"method_name": "breakpointRequests", "method_sig": "List<BreakpointRequest> breakpointRequests()", "description": "Return an unmodifiable list of the enabled and disabled breakpoint requests.\n This list is a live view of these requests and thus changes as requests\n are added and deleted."}, {"method_name": "accessWatchpointRequests", "method_sig": "List<AccessWatchpointRequest> accessWatchpointRequests()", "description": "Return an unmodifiable list of the enabled and disabled access\n watchpoint requests.\n This list is a live view of these requests and thus changes as requests\n are added and deleted."}, {"method_name": "modificationWatchpointRequests", "method_sig": "List<ModificationWatchpointRequest> modificationWatchpointRequests()", "description": "Return an unmodifiable list of the enabled and disabled modification\n watchpoint requests.\n This list is a live view of these requests and thus changes as requests\n are added and deleted."}, {"method_name": "methodEntryRequests", "method_sig": "List<MethodEntryRequest> methodEntryRequests()", "description": "Return an unmodifiable list of the enabled and disabled method entry requests.\n This list is a live view of these requests and thus changes as requests\n are added and deleted."}, {"method_name": "methodExitRequests", "method_sig": "List<MethodExitRequest> methodExitRequests()", "description": "Return an unmodifiable list of the enabled and disabled method exit requests.\n This list is a live view of these requests and thus changes as requests\n are added and deleted."}, {"method_name": "monitorContendedEnterRequests", "method_sig": "List<MonitorContendedEnterRequest> monitorContendedEnterRequests()", "description": "Return an unmodifiable list of the enabled and disabled monitor contended enter requests.\n This list is a live view of these requests and thus changes as requests\n are added and deleted."}, {"method_name": "monitorContendedEnteredRequests", "method_sig": "List<MonitorContendedEnteredRequest> monitorContendedEnteredRequests()", "description": "Return an unmodifiable list of the enabled and disabled monitor contended entered requests.\n This list is a live view of these requests and thus changes as requests\n are added and deleted."}, {"method_name": "monitorWaitRequests", "method_sig": "List<MonitorWaitRequest> monitorWaitRequests()", "description": "Return an unmodifiable list of the enabled and disabled monitor wait requests.\n This list is a live view of these requests and thus changes as requests\n are added and deleted."}, {"method_name": "monitorWaitedRequests", "method_sig": "List<MonitorWaitedRequest> monitorWaitedRequests()", "description": "Return an unmodifiable list of the enabled and disabled monitor waited requests.\n This list is a live view of these requests and thus changes as requests\n are added and deleted."}, {"method_name": "vmDeathRequests", "method_sig": "List<VMDeathRequest> vmDeathRequests()", "description": "Return an unmodifiable list of the enabled and disabled VM death requests.\n This list is a live view of these requests and thus changes as requests\n are added and deleted.\n Note: the unsolicited VMDeathEvent does not have a\n corresponding request."}]}