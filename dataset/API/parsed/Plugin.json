{"name": "Interface Plugin", "module": "jdk.compiler", "package": "com.sun.source.util", "text": "The interface for a javac plug-in.\n\n The javac plug-in mechanism allows a user to specify one or more plug-ins\n on the javac command line, to be started soon after the compilation\n has begun. Plug-ins are identified by a user-friendly name. Each plug-in that\n is started will be passed an array of strings, which may be used to\n provide the plug-in with values for any desired options or other arguments.\n\n Plug-ins are located via a ServiceLoader,\n using the same class path as annotation processors (i.e.\n ANNOTATION_PROCESSOR_PATH or\n -processorpath).\n\n It is expected that a typical plug-in will simply register a\n TaskListener to be informed of events during the execution\n of the compilation, and that the rest of the work will be done\n by the task listener.", "codes": ["public interface Plugin"], "fields": [], "methods": [{"method_name": "getName", "method_sig": "String getName()", "description": "Returns the user-friendly name of this plug-in."}, {"method_name": "init", "method_sig": "void init (JavacTask task,\n          String... args)", "description": "Initializes the plug-in for a given compilation task."}]}