{"name": "Class LinkedBlockingDeque<E>", "module": "java.base", "package": "java.util.concurrent", "text": "An optionally-bounded blocking deque based on\n linked nodes.\n\n The optional capacity bound constructor argument serves as a\n way to prevent excessive expansion. The capacity, if unspecified,\n is equal to Integer.MAX_VALUE.  Linked nodes are\n dynamically created upon each insertion unless this would bring the\n deque above capacity.\n\n Most operations run in constant time (ignoring time spent\n blocking).  Exceptions include remove,\n removeFirstOccurrence, removeLastOccurrence, contains, iterator.remove(), and the bulk\n operations, all of which run in linear time.\n\n This class and its iterator implement all of the optional\n methods of the Collection and Iterator interfaces.\n\n This class is a member of the\n \n Java Collections Framework.", "codes": ["public class LinkedBlockingDeque<E>\nextends AbstractQueue<E>\nimplements BlockingDeque<E>, Serializable"], "fields": [], "methods": [{"method_name": "addFirst", "method_sig": "public void addFirst (E e)", "description": "Description copied from interface:\u00a0BlockingDeque"}, {"method_name": "addLast", "method_sig": "public void addLast (E e)", "description": "Description copied from interface:\u00a0BlockingDeque"}, {"method_name": "offerFirst", "method_sig": "public boolean offerFirst (E e)", "description": "Description copied from interface:\u00a0BlockingDeque"}, {"method_name": "offerLast", "method_sig": "public boolean offerLast (E e)", "description": "Description copied from interface:\u00a0BlockingDeque"}, {"method_name": "putFirst", "method_sig": "public void putFirst (E e)\n              throws InterruptedException", "description": "Description copied from interface:\u00a0BlockingDeque"}, {"method_name": "putLast", "method_sig": "public void putLast (E e)\n             throws InterruptedException", "description": "Description copied from interface:\u00a0BlockingDeque"}, {"method_name": "offerFirst", "method_sig": "public boolean offerFirst (E e,\n                          long timeout,\n                          TimeUnit unit)\n                   throws InterruptedException", "description": "Description copied from interface:\u00a0BlockingDeque"}, {"method_name": "offerLast", "method_sig": "public boolean offerLast (E e,\n                         long timeout,\n                         TimeUnit unit)\n                  throws InterruptedException", "description": "Description copied from interface:\u00a0BlockingDeque"}, {"method_name": "removeFirst", "method_sig": "public E removeFirst()", "description": "Description copied from interface:\u00a0Deque"}, {"method_name": "removeLast", "method_sig": "public E removeLast()", "description": "Description copied from interface:\u00a0Deque"}, {"method_name": "getFirst", "method_sig": "public E getFirst()", "description": "Description copied from interface:\u00a0Deque"}, {"method_name": "getLast", "method_sig": "public E getLast()", "description": "Description copied from interface:\u00a0Deque"}, {"method_name": "add", "method_sig": "public boolean add (E e)", "description": "Inserts the specified element at the end of this deque unless it would\n violate capacity restrictions.  When using a capacity-restricted deque,\n it is generally preferable to use method offer.\n\n This method is equivalent to addLast(E)."}, {"method_name": "offer", "method_sig": "public boolean offer (E e)", "description": "Description copied from interface:\u00a0BlockingDeque"}, {"method_name": "put", "method_sig": "public void put (E e)\n         throws InterruptedException", "description": "Description copied from interface:\u00a0BlockingDeque"}, {"method_name": "offer", "method_sig": "public boolean offer (E e,\n                     long timeout,\n                     TimeUnit unit)\n              throws InterruptedException", "description": "Description copied from interface:\u00a0BlockingDeque"}, {"method_name": "remove", "method_sig": "public E remove()", "description": "Retrieves and removes the head of the queue represented by this deque.\n This method differs from poll() only in that it throws an\n exception if this deque is empty.\n\n This method is equivalent to removeFirst."}, {"method_name": "element", "method_sig": "public E element()", "description": "Retrieves, but does not remove, the head of the queue represented by\n this deque.  This method differs from peek() only in that\n it throws an exception if this deque is empty.\n\n This method is equivalent to getFirst."}, {"method_name": "remainingCapacity", "method_sig": "public int remainingCapacity()", "description": "Returns the number of additional elements that this deque can ideally\n (in the absence of memory or resource constraints) accept without\n blocking. This is always equal to the initial capacity of this deque\n less the current size of this deque.\n\n Note that you cannot always tell if an attempt to insert\n an element will succeed by inspecting remainingCapacity\n because it may be the case that another thread is about to\n insert or remove an element."}, {"method_name": "drainTo", "method_sig": "public int drainTo (Collection<? super E> c)", "description": "Description copied from interface:\u00a0BlockingQueue"}, {"method_name": "drainTo", "method_sig": "public int drainTo (Collection<? super E> c,\n                   int maxElements)", "description": "Description copied from interface:\u00a0BlockingQueue"}, {"method_name": "push", "method_sig": "public void push (E e)", "description": "Description copied from interface:\u00a0BlockingDeque"}, {"method_name": "pop", "method_sig": "public E pop()", "description": "Description copied from interface:\u00a0Deque"}, {"method_name": "remove", "method_sig": "public boolean remove (Object o)", "description": "Removes the first occurrence of the specified element from this deque.\n If the deque does not contain the element, it is unchanged.\n More formally, removes the first element e such that\n o.equals(e) (if such an element exists).\n Returns true if this deque contained the specified element\n (or equivalently, if this deque changed as a result of the call).\n\n This method is equivalent to\n removeFirstOccurrence."}, {"method_name": "size", "method_sig": "public int size()", "description": "Returns the number of elements in this deque."}, {"method_name": "contains", "method_sig": "public boolean contains (Object o)", "description": "Returns true if this deque contains the specified element.\n More formally, returns true if and only if this deque contains\n at least one element e such that o.equals(e)."}, {"method_name": "addAll", "method_sig": "public boolean addAll (Collection<? extends E> c)", "description": "Appends all of the elements in the specified collection to the end of\n this deque, in the order that they are returned by the specified\n collection's iterator.  Attempts to addAll of a deque to\n itself result in IllegalArgumentException."}, {"method_name": "toArray", "method_sig": "public Object[] toArray()", "description": "Returns an array containing all of the elements in this deque, in\n proper sequence (from first to last element).\n\n The returned array will be \"safe\" in that no references to it are\n maintained by this deque.  (In other words, this method must allocate\n a new array).  The caller is thus free to modify the returned array.\n\n This method acts as bridge between array-based and collection-based\n APIs."}, {"method_name": "toArray", "method_sig": "public <T> T[] toArray (T[] a)", "description": "Returns an array containing all of the elements in this deque, in\n proper sequence; the runtime type of the returned array is that of\n the specified array.  If the deque fits in the specified array, it\n is returned therein.  Otherwise, a new array is allocated with the\n runtime type of the specified array and the size of this deque.\n\n If this deque fits in the specified array with room to spare\n (i.e., the array has more elements than this deque), the element in\n the array immediately following the end of the deque is set to\n null.\n\n Like the toArray() method, this method acts as bridge between\n array-based and collection-based APIs.  Further, this method allows\n precise control over the runtime type of the output array, and may,\n under certain circumstances, be used to save allocation costs.\n\n Suppose x is a deque known to contain only strings.\n The following code can be used to dump the deque into a newly\n allocated array of String:\n\n  String[] y = x.toArray(new String[0]);\n\n Note that toArray(new Object[0]) is identical in function to\n toArray()."}, {"method_name": "clear", "method_sig": "public void clear()", "description": "Atomically removes all of the elements from this deque.\n The deque will be empty after this call returns."}, {"method_name": "iterator", "method_sig": "public Iterator<E> iterator()", "description": "Returns an iterator over the elements in this deque in proper sequence.\n The elements will be returned in order from first (head) to last (tail).\n\n The returned iterator is\n weakly consistent."}, {"method_name": "descendingIterator", "method_sig": "public Iterator<E> descendingIterator()", "description": "Returns an iterator over the elements in this deque in reverse\n sequential order.  The elements will be returned in order from\n last (tail) to first (head).\n\n The returned iterator is\n weakly consistent."}, {"method_name": "spliterator", "method_sig": "public Spliterator<E> spliterator()", "description": "Returns a Spliterator over the elements in this deque.\n\n The returned spliterator is\n weakly consistent.\n\n The Spliterator reports Spliterator.CONCURRENT,\n Spliterator.ORDERED, and Spliterator.NONNULL."}, {"method_name": "forEach", "method_sig": "public void forEach (Consumer<? super E> action)", "description": "Description copied from interface:\u00a0Iterable"}, {"method_name": "removeIf", "method_sig": "public boolean removeIf (Predicate<? super E> filter)", "description": "Description copied from interface:\u00a0Collection"}, {"method_name": "removeAll", "method_sig": "public boolean removeAll (Collection<?> c)", "description": "Description copied from class:\u00a0AbstractCollection"}, {"method_name": "retainAll", "method_sig": "public boolean retainAll (Collection<?> c)", "description": "Description copied from class:\u00a0AbstractCollection"}]}