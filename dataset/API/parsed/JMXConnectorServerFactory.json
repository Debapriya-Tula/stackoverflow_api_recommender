{"name": "Class JMXConnectorServerFactory", "module": "java.management", "package": "javax.management.remote", "text": "Factory to create JMX API connector servers.  There\n are no instances of this class.\nEach connector server is created by an instance of JMXConnectorServerProvider.  This instance is found as follows.  Suppose\n the given JMXServiceURL looks like\n \"service:jmx:protocol:remainder\".\n Then the factory will attempt to find the appropriate JMXConnectorServerProvider for protocol.  Each\n occurrence of the character + or - in\n protocol is replaced by . or\n _, respectively.\nA provider package list is searched for as follows:\n\nIf the environment parameter to newJMXConnectorServer contains the key\n jmx.remote.protocol.provider.pkgs then the associated\n value is the provider package list.\n\n Otherwise, if the system property\n jmx.remote.protocol.provider.pkgs exists, then its value\n is the provider package list.\n\n Otherwise, there is no provider package list.\n\n \nThe provider package list is a string that is interpreted as a\n list of non-empty Java package names separated by vertical bars\n (|).  If the string is empty, then so is the provider\n package list.  If the provider package list is not a String, or if\n it contains an element that is an empty string, a JMXProviderException is thrown.\nIf the provider package list exists and is not empty, then for\n each element pkg of the list, the factory\n will attempt to load the class\n\n \npkg.protocol.ServerProvider\n\nIf the environment parameter to newJMXConnectorServer contains the key\n jmx.remote.protocol.provider.class.loader then the\n associated value is the class loader to use to load the provider.\n If the associated value is not an instance of ClassLoader, an IllegalArgumentException is thrown.\nIf the jmx.remote.protocol.provider.class.loader\n key is not present in the environment parameter, the\n calling thread's context class loader is used.\nIf the attempt to load this class produces a ClassNotFoundException, the search for a handler continues with\n the next element of the list.\nOtherwise, a problem with the provider found is signalled by a\n JMXProviderException whose cause indicates the\n underlying exception, as follows:\n\nif the attempt to load the class produces an exception other\n than ClassNotFoundException, that is the\n cause;\n\n if Class.newInstance() for the class produces an\n exception, that is the cause.\n\n \nIf no provider is found by the above steps, including the\n default case where there is no provider package list, then the\n implementation will use its own provider for\n protocol, or it will throw a\n MalformedURLException if there is none.  An\n implementation may choose to find providers by other means.  For\n example, it may support service providers,\n where the service interface is JMXConnectorServerProvider.\nEvery implementation must support the RMI connector protocol with\n the default RMI transport, specified with string rmi.\n \nOnce a provider is found, the result of the\n newJMXConnectorServer method is the result of calling\n newJMXConnectorServer on the provider.\nThe Map parameter passed to the\n JMXConnectorServerProvider is a new read-only\n Map that contains all the entries that were in the\n environment parameter to JMXConnectorServerFactory.newJMXConnectorServer, if there was one.\n Additionally, if the\n jmx.remote.protocol.provider.class.loader key is not\n present in the environment parameter, it is added to\n the new read-only Map. The associated value is the\n calling thread's context class loader.", "codes": ["public class JMXConnectorServerFactory\nextends Object"], "fields": [{"field_name": "DEFAULT_CLASS_LOADER", "field_sig": "public static final\u00a0String DEFAULT_CLASS_LOADER", "description": "Name of the attribute that specifies the default class\n loader.  This class loader is used to deserialize objects in\n requests received from the client, possibly after consulting an\n MBean-specific class loader.  The value associated with this\n attribute is an instance of ClassLoader."}, {"field_name": "DEFAULT_CLASS_LOADER_NAME", "field_sig": "public static final\u00a0String DEFAULT_CLASS_LOADER_NAME", "description": "Name of the attribute that specifies the default class\n loader MBean name.  This class loader is used to deserialize objects in\n requests received from the client, possibly after consulting an\n MBean-specific class loader.  The value associated with this\n attribute is an instance of ObjectName."}, {"field_name": "PROTOCOL_PROVIDER_PACKAGES", "field_sig": "public static final\u00a0String PROTOCOL_PROVIDER_PACKAGES", "description": "Name of the attribute that specifies the provider packages\n that are consulted when looking for the handler for a protocol.\n The value associated with this attribute is a string with\n package names separated by vertical bars (|)."}, {"field_name": "PROTOCOL_PROVIDER_CLASS_LOADER", "field_sig": "public static final\u00a0String PROTOCOL_PROVIDER_CLASS_LOADER", "description": "Name of the attribute that specifies the class\n loader for loading protocol providers.\n The value associated with this attribute is an instance\n of ClassLoader."}], "methods": [{"method_name": "newJMXConnectorServer", "method_sig": "public static JMXConnectorServer newJMXConnectorServer (JMXServiceURL serviceURL,\n                                                       Map<String, ?> environment,\n                                                       MBeanServer mbeanServer)\n                                                throws IOException", "description": "Creates a connector server at the given address.  The\n resultant server is not started until its start method is called."}]}