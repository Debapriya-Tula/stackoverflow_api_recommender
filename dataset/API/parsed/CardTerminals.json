{"name": "Class CardTerminals", "module": "java.smartcardio", "package": "javax.smartcardio", "text": "The set of terminals supported by a TerminalFactory.\n This class allows applications to enumerate the available CardTerminals,\n obtain a specific CardTerminal, or wait for the insertion or removal of\n cards.\n\n This class is multi-threading safe and can be used by multiple\n threads concurrently. However, this object keeps track of the card\n presence state of each of its terminals. Multiple objects should be used\n if independent calls to waitForChange() are required.\n\n Applications can obtain instances of this class by calling\n TerminalFactory.terminals().", "codes": ["public abstract class CardTerminals\nextends Object"], "fields": [], "methods": [{"method_name": "list", "method_sig": "public List<CardTerminal> list()\n                        throws CardException", "description": "Returns an unmodifiable list of all available terminals."}, {"method_name": "list", "method_sig": "public abstract List<CardTerminal> list (CardTerminals.State state)\n                                 throws CardException", "description": "Returns an unmodifiable list of all terminals matching the specified\n state.\n\n If state is State.ALL, this method returns\n all CardTerminals encapsulated by this object.\n If state is State.CARD_PRESENT or\n State.CARD_ABSENT, it returns all\n CardTerminals where a card is currently present or absent, respectively.\n\n If state is State.CARD_INSERTION or\n State.CARD_REMOVAL, it returns all\n CardTerminals for which an insertion (or removal, respectively)\n was detected during the last call to waitForChange().\n If waitForChange() has not been called on this object,\n CARD_INSERTION is equivalent to CARD_PRESENT\n and CARD_REMOVAL is equivalent to CARD_ABSENT.\n For an example of the use of CARD_INSERTION,\n see waitForChange()."}, {"method_name": "getTerminal", "method_sig": "public CardTerminal getTerminal (String name)", "description": "Returns the terminal with the specified name or null if no such\n terminal exists."}, {"method_name": "waitForChange", "method_sig": "public void waitForChange()\n                   throws CardException", "description": "Waits for card insertion or removal in any of the terminals of this\n object.\n\n This call is equivalent to calling\n waitForChange(0)."}, {"method_name": "waitForChange", "method_sig": "public abstract boolean waitForChange (long timeout)\n                               throws CardException", "description": "Waits for card insertion or removal in any of the terminals of this\n object or until the timeout expires.\n\n This method examines each CardTerminal of this object.\n If a card was inserted into or removed from a CardTerminal since the\n previous call to waitForChange(), it returns\n immediately.\n Otherwise, or if this is the first call to waitForChange()\n on this object, it blocks until a card is inserted into or removed from\n a CardTerminal.\n\n If timeout is greater than 0, the method returns after\n timeout milliseconds even if there is no change in state.\n In that case, this method returns false; otherwise it\n returns true.\n\n This method is often used in a loop in combination with\n list(State.CARD_INSERTION),\n for example:\n \n  TerminalFactory factory = ...;\n  CardTerminals terminals = factory.terminals();\n  while (true) {\n      for (CardTerminal terminal : terminals.list(CARD_INSERTION)) {\n          // examine Card in terminal, return if it matches\n      }\n      terminals.waitForChange();\n  }"}]}