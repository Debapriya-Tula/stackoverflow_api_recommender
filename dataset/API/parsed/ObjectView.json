{"name": "Class ObjectView", "module": "java.desktop", "package": "javax.swing.text.html", "text": "Component decorator that implements the view interface\n for <object> elements.\n \n This view will try to load the class specified by the\n classid attribute.  If possible, the Classloader\n used to load the associated Document is used.\n This would typically be the same as the ClassLoader\n used to load the EditorKit.  If the document's\n ClassLoader is null, Class.forName is used.\n \n If the class can successfully be loaded, an attempt will\n be made to create an instance of it by calling\n Class.newInstance.  An attempt will be made\n to narrow the instance to type java.awt.Component\n to display the object.\n \n This view can also manage a set of parameters with limitations.\n The parameters to the <object> element are expected to\n be present on the associated elements attribute set as simple\n strings.  Each bean property will be queried as a key on\n the AttributeSet, with the expectation that a non-null value\n (of type String) will be present if there was a parameter\n specification for the property.  Reflection is used to\n set the parameter.  Currently, this is limited to a very\n simple single parameter of type String.\n \n A simple example HTML invocation is:\n \n      <object classid=\"javax.swing.JLabel\">\n      <param name=\"text\" value=\"sample text\">\n      </object>\n ", "codes": ["public class ObjectView\nextends ComponentView"], "fields": [], "methods": [{"method_name": "createComponent", "method_sig": "protected Component createComponent()", "description": "Create the component.  The classid is used\n as a specification of the classname, which\n we try to load."}]}