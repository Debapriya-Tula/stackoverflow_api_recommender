{"name": "Class BoxView", "module": "java.desktop", "package": "javax.swing.text", "text": "A view that arranges its children into a box shape by tiling\n its children along an axis.  The box is somewhat like that\n found in TeX where there is alignment of the\n children, flexibility of the children is considered, etc.\n This is a building block that might be useful to represent\n things like a collection of lines, paragraphs,\n lists, columns, pages, etc.  The axis along which the children are tiled is\n considered the major axis.  The orthogonal axis is the minor axis.\n \n Layout for each axis is handled separately by the methods\n layoutMajorAxis and layoutMinorAxis.\n Subclasses can change the layout algorithm by\n reimplementing these methods.    These methods will be called\n as necessary depending upon whether or not there is cached\n layout information and the cache is considered\n valid.  These methods are typically called if the given size\n along the axis changes, or if layoutChanged is\n called to force an updated layout.  The layoutChanged\n method invalidates cached layout information, if there is any.\n The requirements published to the parent view are calculated by\n the methods calculateMajorAxisRequirements\n and  calculateMinorAxisRequirements.\n If the layout algorithm is changed, these methods will\n likely need to be reimplemented.", "codes": ["public class BoxView\nextends CompositeView"], "fields": [], "methods": [{"method_name": "getAxis", "method_sig": "public int getAxis()", "description": "Fetches the tile axis property.  This is the axis along which\n the child views are tiled."}, {"method_name": "setAxis", "method_sig": "public void setAxis (int axis)", "description": "Sets the tile axis property.  This is the axis along which\n the child views are tiled."}, {"method_name": "layoutChanged", "method_sig": "public void layoutChanged (int axis)", "description": "Invalidates the layout along an axis.  This happens\n automatically if the preferences have changed for\n any of the child views.  In some cases the layout\n may need to be recalculated when the preferences\n have not changed.  The layout can be marked as\n invalid by calling this method.  The layout will\n be updated the next time the setSize method\n is called on this view (typically in paint)."}, {"method_name": "isLayoutValid", "method_sig": "protected boolean isLayoutValid (int axis)", "description": "Determines if the layout is valid along the given axis."}, {"method_name": "paintChild", "method_sig": "protected void paintChild (Graphics g,\n                          Rectangle alloc,\n                          int index)", "description": "Paints a child.  By default\n that is all it does, but a subclass can use this to paint\n things relative to the child."}, {"method_name": "replace", "method_sig": "public void replace (int index,\n                    int length,\n                    View[] elems)", "description": "Invalidates the layout and resizes the cache of\n requests/allocations.  The child allocations can still\n be accessed for the old layout, but the new children\n will have an offset and span of 0."}, {"method_name": "forwardUpdate", "method_sig": "protected void forwardUpdate (DocumentEvent.ElementChange ec,\n                             DocumentEvent e,\n                             Shape a,\n                             ViewFactory f)", "description": "Forwards the given DocumentEvent to the child views\n that need to be notified of the change to the model.\n If a child changed its requirements and the allocation\n was valid prior to forwarding the portion of the box\n from the starting child to the end of the box will\n be repainted."}, {"method_name": "preferenceChanged", "method_sig": "public void preferenceChanged (View child,\n                              boolean width,\n                              boolean height)", "description": "This is called by a child to indicate its\n preferred span has changed.  This is implemented to\n throw away cached layout information so that new\n calculations will be done the next time the children\n need an allocation."}, {"method_name": "getResizeWeight", "method_sig": "public int getResizeWeight (int axis)", "description": "Gets the resize weight.  A value of 0 or less is not resizable."}, {"method_name": "setSize", "method_sig": "public void setSize (float width,\n                    float height)", "description": "Sets the size of the view.  This should cause\n layout of the view if the view caches any layout\n information.  This is implemented to call the\n layout method with the sizes inside of the insets."}, {"method_name": "paint", "method_sig": "public void paint (Graphics g,\n                  Shape allocation)", "description": "Renders the BoxView using the given\n rendering surface and area\n on that surface.  Only the children that intersect\n the clip bounds of the given Graphics\n will be rendered."}, {"method_name": "getChildAllocation", "method_sig": "public Shape getChildAllocation (int index,\n                                Shape a)", "description": "Fetches the allocation for the given child view.\n This enables finding out where various views\n are located.  This is implemented to return\n null if the layout is invalid,\n otherwise the superclass behavior is executed."}, {"method_name": "modelToView", "method_sig": "public Shape modelToView (int pos,\n                         Shape a,\n                         Position.Bias b)\n                  throws BadLocationException", "description": "Provides a mapping from the document model coordinate space\n to the coordinate space of the view mapped to it.  This makes\n sure the allocation is valid before calling the superclass."}, {"method_name": "viewToModel", "method_sig": "public int viewToModel (float x,\n                       float y,\n                       Shape a,\n                       Position.Bias[] bias)", "description": "Provides a mapping from the view coordinate space to the logical\n coordinate space of the model."}, {"method_name": "getAlignment", "method_sig": "public float getAlignment (int axis)", "description": "Determines the desired alignment for this view along an\n axis.  This is implemented to give the total alignment\n needed to position the children with the alignment points\n lined up along the axis orthogonal to the axis that is\n being tiled.  The axis being tiled will request to be\n centered (i.e. 0.5f)."}, {"method_name": "getPreferredSpan", "method_sig": "public float getPreferredSpan (int axis)", "description": "Determines the preferred span for this view along an\n axis."}, {"method_name": "getMinimumSpan", "method_sig": "public float getMinimumSpan (int axis)", "description": "Determines the minimum span for this view along an\n axis."}, {"method_name": "getMaximumSpan", "method_sig": "public float getMaximumSpan (int axis)", "description": "Determines the maximum span for this view along an\n axis."}, {"method_name": "isAllocationValid", "method_sig": "protected boolean isAllocationValid()", "description": "Are the allocations for the children still\n valid?"}, {"method_name": "isBefore", "method_sig": "protected boolean isBefore (int x,\n                           int y,\n                           Rectangle innerAlloc)", "description": "Determines if a point falls before an allocated region."}, {"method_name": "isAfter", "method_sig": "protected boolean isAfter (int x,\n                          int y,\n                          Rectangle innerAlloc)", "description": "Determines if a point falls after an allocated region."}, {"method_name": "getViewAtPoint", "method_sig": "protected View getViewAtPoint (int x,\n                              int y,\n                              Rectangle alloc)", "description": "Fetches the child view at the given coordinates."}, {"method_name": "childAllocation", "method_sig": "protected void childAllocation (int index,\n                               Rectangle alloc)", "description": "Allocates a region for a child view."}, {"method_name": "layout", "method_sig": "protected void layout (int width,\n                      int height)", "description": "Perform layout on the box"}, {"method_name": "getWidth", "method_sig": "public int getWidth()", "description": "Returns the current width of the box.  This is the width that\n it was last allocated."}, {"method_name": "getHeight", "method_sig": "public int getHeight()", "description": "Returns the current height of the box.  This is the height that\n it was last allocated."}, {"method_name": "layoutMajorAxis", "method_sig": "protected void layoutMajorAxis (int targetSpan,\n                               int axis,\n                               int[] offsets,\n                               int[] spans)", "description": "Performs layout for the major axis of the box (i.e. the\n axis that it represents). The results of the layout (the\n offset and span for each children) are placed in the given\n arrays which represent the allocations to the children\n along the major axis."}, {"method_name": "layoutMinorAxis", "method_sig": "protected void layoutMinorAxis (int targetSpan,\n                               int axis,\n                               int[] offsets,\n                               int[] spans)", "description": "Performs layout for the minor axis of the box (i.e. the\n axis orthogonal to the axis that it represents). The results\n of the layout (the offset and span for each children) are\n placed in the given arrays which represent the allocations to\n the children along the minor axis."}, {"method_name": "calculateMajorAxisRequirements", "method_sig": "protected SizeRequirements calculateMajorAxisRequirements (int axis,\n                                                          SizeRequirements r)", "description": "Calculates the size requirements for the major axis\n axis."}, {"method_name": "calculateMinorAxisRequirements", "method_sig": "protected SizeRequirements calculateMinorAxisRequirements (int axis,\n                                                          SizeRequirements r)", "description": "Calculates the size requirements for the minor axis\n axis."}, {"method_name": "baselineLayout", "method_sig": "protected void baselineLayout (int targetSpan,\n                              int axis,\n                              int[] offsets,\n                              int[] spans)", "description": "Computes the location and extent of each child view\n in this BoxView given the targetSpan,\n which is the width (or height) of the region we have to\n work with."}, {"method_name": "baselineRequirements", "method_sig": "protected SizeRequirements baselineRequirements (int axis,\n                                                SizeRequirements r)", "description": "Calculates the size requirements for this BoxView\n by examining the size of each child view."}, {"method_name": "getOffset", "method_sig": "protected int getOffset (int axis,\n                        int childIndex)", "description": "Fetches the offset of a particular child's current layout."}, {"method_name": "getSpan", "method_sig": "protected int getSpan (int axis,\n                      int childIndex)", "description": "Fetches the span of a particular child's current layout."}, {"method_name": "flipEastAndWestAtEnds", "method_sig": "protected boolean flipEastAndWestAtEnds (int position,\n                                        Position.Bias bias)", "description": "Determines in which direction the next view lays.\n Consider the View at index n. Typically the Views\n are layed out from left to right, so that the View\n to the EAST will be at index n + 1, and the View\n to the WEST will be at index n - 1. In certain situations,\n such as with bidirectional text, it is possible\n that the View to EAST is not at index n + 1,\n but rather at index n - 1, or that the View\n to the WEST is not at index n - 1, but index n + 1.\n In this case this method would return true,\n indicating the Views are layed out in\n descending order. Otherwise the method would return false\n indicating the Views are layed out in ascending order.\n \n If the receiver is laying its Views along the\n Y_AXIS, this will return the value from\n invoking the same method on the View\n responsible for rendering position and\n bias. Otherwise this will return false."}]}