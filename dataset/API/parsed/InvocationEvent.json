{"name": "Class InvocationEvent", "module": "java.desktop", "package": "java.awt.event", "text": "An event which executes the run() method on a Runnable\n  when dispatched by the AWT event dispatcher thread. This class can\n be used as a reference implementation of ActiveEvent rather\n than declaring a new class and defining dispatch().\n\n Instances of this class are placed on the EventQueue by calls\n to invokeLater and invokeAndWait. Client code\n can use this fact to write replacement functions for invokeLater\n  and invokeAndWait without writing special-case code\n in any AWTEventListener objects.\n \n An unspecified behavior will be caused if the id parameter\n of any particular InvocationEvent instance is not\n in the range from INVOCATION_FIRST to INVOCATION_LAST.", "codes": ["public class InvocationEvent\nextends AWTEvent\nimplements ActiveEvent"], "fields": [{"field_name": "INVOCATION_FIRST", "field_sig": "public static final\u00a0int INVOCATION_FIRST", "description": "Marks the first integer id for the range of invocation event ids."}, {"field_name": "INVOCATION_DEFAULT", "field_sig": "public static final\u00a0int INVOCATION_DEFAULT", "description": "The default id for all InvocationEvents."}, {"field_name": "INVOCATION_LAST", "field_sig": "public static final\u00a0int INVOCATION_LAST", "description": "Marks the last integer id for the range of invocation event ids."}, {"field_name": "runnable", "field_sig": "protected\u00a0Runnable runnable", "description": "The Runnable whose run() method will be called."}, {"field_name": "notifier", "field_sig": "protected volatile\u00a0Object notifier", "description": "The (potentially null) Object whose notifyAll() method will be called\n immediately after the Runnable.run() method has returned or thrown an exception\n or after the event was disposed."}, {"field_name": "catchExceptions", "field_sig": "protected\u00a0boolean catchExceptions", "description": "Set to true if dispatch() catches Throwable and stores it in the\n exception instance variable. If false, Throwables are propagated up\n to the EventDispatchThread's dispatch loop."}], "methods": [{"method_name": "dispatch", "method_sig": "public void dispatch()", "description": "Executes the Runnable's run() method and notifies the\n notifier (if any) when run() has returned or thrown an exception."}, {"method_name": "getException", "method_sig": "public Exception getException()", "description": "Returns any Exception caught while executing\n the Runnable's run() method."}, {"method_name": "getThrowable", "method_sig": "public Throwable getThrowable()", "description": "Returns any Throwable caught while executing\n the Runnable's run() method."}, {"method_name": "getWhen", "method_sig": "public long getWhen()", "description": "Returns the timestamp of when this event occurred."}, {"method_name": "isDispatched", "method_sig": "public boolean isDispatched()", "description": "Returns true if the event is dispatched or any exception is\n thrown while dispatching, false otherwise. The method should\n be called by a waiting thread that calls the notifier.wait() method.\n Since spurious wakeups are possible (as explained in Object.wait()),\n this method should be used in a waiting loop to ensure that the event\n got dispatched:\n \n     while (!event.isDispatched()) {\n         notifier.wait();\n     }\n \n If the waiting thread wakes up without dispatching the event,\n the isDispatched() method returns false, and\n the while loop executes once more, thus, causing\n the awakened thread to revert to the waiting mode.\n \n If the notifier.notifyAll() happens before the waiting thread\n enters the notifier.wait() method, the while loop ensures\n that the waiting thread will not enter the notifier.wait() method.\n Otherwise, there is no guarantee that the waiting thread will ever be woken\n from the wait."}, {"method_name": "paramString", "method_sig": "public String paramString()", "description": "Returns a parameter string identifying this event.\n This method is useful for event-logging and for debugging."}]}