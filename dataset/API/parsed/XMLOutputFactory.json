{"name": "Class XMLOutputFactory", "module": "java.xml", "package": "javax.xml.stream", "text": "Defines an abstract implementation of a factory for\n getting XMLEventWriters and XMLStreamWriters.\n\n The following table defines the standard properties of this specification.\n Each property varies in the level of support required by each implementation.\n The level of support required is described in the 'Required' column.\n\n     \nConfiguration Parameters\n\n\nProperty Name\nBehavior\nReturn type\nDefault Value\nRequired\n\n\n\njavax.xml.stream.isRepairingNamespacesdefaults prefixes\n                 on the output sideBooleanFalseYes\n\n\nThe following paragraphs describe the namespace and prefix repair algorithm:\n\n The property can be set with the following code line:\n setProperty(\"javax.xml.stream.isRepairingNamespaces\", new Boolean(true|false));\nThis property specifies that the writer default namespace prefix declarations.\n The default value is false.\n\n If a writer isRepairingNamespaces it will create a namespace declaration\n on the current StartElement for\n any attribute that does not\n currently have a namespace declaration in scope.  If the StartElement\n has a uri but no prefix specified a prefix will be assigned, if the prefix\n has not been declared in a parent of the current StartElement it will be declared\n on the current StartElement.  If the defaultNamespace is bound and in scope\n and the default namespace matches the URI of the attribute or StartElement\n QName no prefix will be assigned.\n\n If an element or attribute name has a prefix, but is not\n bound to any namespace URI, then the prefix will be removed\n during serialization.\n\n If element and/or attribute names in the same start or\n empty-element tag are bound to different namespace URIs and\n are using the same prefix then the element or the first\n occurring attribute retains the original prefix and the\n following attributes have their prefixes replaced with a\n new prefix that is bound to the namespace URIs of those\n attributes.\n\n If an element or attribute name uses a prefix that is\n bound to a different URI than that inherited from the\n namespace context of the parent of that element and there\n is no namespace declaration in the context of the current\n element then such a namespace declaration is added.\n\n If an element or attribute name is bound to a prefix and\n there is a namespace declaration that binds that prefix\n to a different URI then that namespace declaration is\n either removed if the correct mapping is inherited from\n the parent context of that element, or changed to the\n namespace URI of the element or attribute using that prefix.", "codes": ["public abstract class XMLOutputFactory\nextends Object"], "fields": [{"field_name": "IS_REPAIRING_NAMESPACES", "field_sig": "public static final\u00a0String IS_REPAIRING_NAMESPACES", "description": "Property used to set prefix defaulting on the output side"}], "methods": [{"method_name": "newDefaultFactory", "method_sig": "public static XMLOutputFactory newDefaultFactory()", "description": "Creates a new instance of the XMLOutputFactory builtin\n system-default implementation."}, {"method_name": "newInstance", "method_sig": "public static XMLOutputFactory newInstance()\n                                    throws FactoryConfigurationError", "description": "Creates a new instance of the factory in exactly the same manner as the\n newFactory() method."}, {"method_name": "newFactory", "method_sig": "public static XMLOutputFactory newFactory()\n                                   throws FactoryConfigurationError", "description": "Create a new instance of the factory.\n \n This static method creates a new factory instance. This method uses the\n following ordered lookup procedure to determine the XMLOutputFactory\n implementation class to load:\n \n\n   Use the javax.xml.stream.XMLOutputFactory system property.\n \n\n\n   Use the configuration file \"stax.properties\". The file is in standard\n   Properties format and typically located in the\n   conf directory of the Java installation. It contains the fully qualified\n   name of the implementation class with the key being the system property\n   defined above.\n\n   \n   The stax.properties file is read only once by the implementation\n   and its values are then cached for future use.  If the file does not exist\n   when the first attempt is made to read from it, no further attempts are\n   made to check for its existence.  It is not possible to change the value\n   of any property in stax.properties after it has been read for the first time.\n\n   \n   Use the jaxp configuration file \"jaxp.properties\". The file is in the same\n   format as stax.properties and will only be read if stax.properties does\n   not exist.\n \n\n\n   Use the service-provider loading facility, defined by the\n   ServiceLoader class, to attempt to locate and load an\n   implementation of the service using the default loading mechanism:\n   the service-provider loading facility will use the current thread's context class loader\n   to attempt to load the service. If the context class\n   loader is null, the system class loader will be used.\n \n\n\n   Otherwise, the system-default\n   implementation is returned.\n \n\n\n Once an application has obtained a reference to a XMLOutputFactory it\n can use the factory to configure and obtain stream instances."}, {"method_name": "newInstance", "method_sig": "@Deprecated(since=\"1.7\")\npublic static XMLInputFactory newInstance (String factoryId,\n                                          ClassLoader classLoader)\n                                   throws FactoryConfigurationError", "description": "Create a new instance of the factory."}, {"method_name": "newFactory", "method_sig": "public static XMLOutputFactory newFactory (String factoryId,\n                                          ClassLoader classLoader)\n                                   throws FactoryConfigurationError", "description": "Create a new instance of the factory.\n If the classLoader argument is null, then the ContextClassLoader is used.\n \n This method uses the following ordered lookup procedure to determine\n the XMLOutputFactory implementation class to load:\n \n\n   Use the value of the system property identified by factoryId.\n \n\n\n   Use the configuration file \"stax.properties\". The file is in standard\n   Properties format and typically located in the\n   conf directory of the Java installation. It contains the fully qualified\n   name of the implementation class with the key being the system property\n   defined above.\n\n   \n   The stax.properties file is read only once by the implementation\n   and its values are then cached for future use.  If the file does not exist\n   when the first attempt is made to read from it, no further attempts are\n   made to check for its existence.  It is not possible to change the value\n   of any property in stax.properties after it has been read for the first time.\n\n   \n   Use the jaxp configuration file \"jaxp.properties\". The file is in the same\n   format as stax.properties and will only be read if stax.properties does\n   not exist.\n \n\n\n   If factoryId is \"javax.xml.stream.XMLOutputFactory\",\n   use the service-provider loading facility, defined by the\n   ServiceLoader class, to attempt to locate and load\n   an implementation of the service using the specified ClassLoader.\n   If classLoader is null, the default loading mechanism will apply:\n   That is, the service-provider loading facility will use the current thread's context class loader\n   to attempt to load the service. If the context class\n   loader is null, the system class loader will be used.\n \n\n\n   Otherwise, throws a FactoryConfigurationError.\n \n"}, {"method_name": "createXMLStreamWriter", "method_sig": "public abstract XMLStreamWriter createXMLStreamWriter (Writer stream)\n                                               throws XMLStreamException", "description": "Create a new XMLStreamWriter that writes to a writer"}, {"method_name": "createXMLStreamWriter", "method_sig": "public abstract XMLStreamWriter createXMLStreamWriter (OutputStream stream)\n                                               throws XMLStreamException", "description": "Create a new XMLStreamWriter that writes to a stream"}, {"method_name": "createXMLStreamWriter", "method_sig": "public abstract XMLStreamWriter createXMLStreamWriter (OutputStream stream,\n                                                      String encoding)\n                                               throws XMLStreamException", "description": "Create a new XMLStreamWriter that writes to a stream"}, {"method_name": "createXMLStreamWriter", "method_sig": "public abstract XMLStreamWriter createXMLStreamWriter (Result result)\n                                               throws XMLStreamException", "description": "Create a new XMLStreamWriter that writes to a JAXP result.  This method is optional."}, {"method_name": "createXMLEventWriter", "method_sig": "public abstract XMLEventWriter createXMLEventWriter (Result result)\n                                             throws XMLStreamException", "description": "Create a new XMLEventWriter that writes to a JAXP result.  This method is optional."}, {"method_name": "createXMLEventWriter", "method_sig": "public abstract XMLEventWriter createXMLEventWriter (OutputStream stream)\n                                             throws XMLStreamException", "description": "Create a new XMLEventWriter that writes to a stream"}, {"method_name": "createXMLEventWriter", "method_sig": "public abstract XMLEventWriter createXMLEventWriter (OutputStream stream,\n                                                    String encoding)\n                                             throws XMLStreamException", "description": "Create a new XMLEventWriter that writes to a stream"}, {"method_name": "createXMLEventWriter", "method_sig": "public abstract XMLEventWriter createXMLEventWriter (Writer stream)\n                                             throws XMLStreamException", "description": "Create a new XMLEventWriter that writes to a writer"}, {"method_name": "setProperty", "method_sig": "public abstract void setProperty (String name,\n                                 Object value)\n                          throws IllegalArgumentException", "description": "Allows the user to set specific features/properties on the underlying implementation."}, {"method_name": "getProperty", "method_sig": "public abstract Object getProperty (String name)\n                            throws IllegalArgumentException", "description": "Get a feature/property on the underlying implementation"}, {"method_name": "isPropertySupported", "method_sig": "public abstract boolean isPropertySupported (String name)", "description": "Query the set of properties that this factory supports."}]}