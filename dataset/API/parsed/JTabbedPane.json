{"name": "Class JTabbedPane", "module": "java.desktop", "package": "javax.swing", "text": "A component that lets the user switch between a group of components by\n clicking on a tab with a given title and/or icon.\n For examples and information on using tabbed panes see\n How to Use Tabbed Panes,\n a section in The Java Tutorial.\n \n Tabs/components are added to a TabbedPane object by using the\n addTab and insertTab methods.\n A tab is represented by an index corresponding\n to the position it was added in, where the first tab has an index equal to 0\n and the last tab has an index equal to the tab count minus 1.\n \n The TabbedPane uses a SingleSelectionModel\n to represent the set\n of tab indices and the currently selected index.  If the tab count\n is greater than 0, then there will always be a selected index, which\n by default will be initialized to the first tab.  If the tab count is\n 0, then the selected index will be -1.\n \n The tab title can be rendered by a Component.\n For example, the following produce similar results:\n \n // In this case the look and feel renders the title for the tab.\n tabbedPane.addTab(\"Tab\", myComponent);\n // In this case the custom component is responsible for rendering the\n // title of the tab.\n tabbedPane.addTab(null, myComponent);\n tabbedPane.setTabComponentAt(0, new JLabel(\"Tab\"));\n \n The latter is typically used when you want a more complex user interaction\n that requires custom components on the tab.  For example, you could\n provide a custom component that animates or one that has widgets for\n closing the tab.\n \n If you specify a component for a tab, the JTabbedPane\n will not render any text or icon you have specified for the tab.\n \nNote:\n Do not use setVisible directly on a tab component to make it visible,\n use setSelectedComponent or setSelectedIndex methods instead.\n \nWarning: Swing is not thread safe. For more\n information see Swing's Threading\n Policy.\n \nWarning:\n Serialized objects of this class will not be compatible with\n future Swing releases. The current serialization support is\n appropriate for short term storage or RMI between applications running\n the same version of Swing.  As of 1.4, support for long term storage\n of all JavaBeans\u2122\n has been added to the java.beans package.\n Please see XMLEncoder.", "codes": ["@JavaBean(defaultProperty=\"UI\",\n          description=\"A component which provides a tab folder metaphor for displaying one component from a set of components.\")\npublic class JTabbedPane\nextends JComponent\nimplements Serializable, Accessible, SwingConstants"], "fields": [{"field_name": "WRAP_TAB_LAYOUT", "field_sig": "public static final\u00a0int WRAP_TAB_LAYOUT", "description": "The tab layout policy for wrapping tabs in multiple runs when all\n tabs will not fit within a single run."}, {"field_name": "SCROLL_TAB_LAYOUT", "field_sig": "public static final\u00a0int SCROLL_TAB_LAYOUT", "description": "Tab layout policy for providing a subset of available tabs when all\n the tabs will not fit within a single run.  If all the tabs do\n not fit within a single run the look and feel will provide a way\n to navigate to hidden tabs."}, {"field_name": "tabPlacement", "field_sig": "protected\u00a0int tabPlacement", "description": "Where the tabs are placed."}, {"field_name": "model", "field_sig": "protected\u00a0SingleSelectionModel model", "description": "The default selection model"}, {"field_name": "changeListener", "field_sig": "protected\u00a0ChangeListener changeListener", "description": "The changeListener is the listener we add to the\n model."}, {"field_name": "changeEvent", "field_sig": "protected transient\u00a0ChangeEvent changeEvent", "description": "Only one ChangeEvent is needed per TabPane\n instance since the\n event's only (read-only) state is the source property.  The source\n of events generated here is always \"this\"."}], "methods": [{"method_name": "getUI", "method_sig": "public TabbedPaneUI getUI()", "description": "Returns the UI object which implements the L&F for this component."}, {"method_name": "setUI", "method_sig": "@BeanProperty(hidden=true,\n              visualUpdate=true,\n              description=\"The UI object that implements the tabbedpane\\'s LookAndFeel\")\npublic void setUI (TabbedPaneUI ui)", "description": "Sets the UI object which implements the L&F for this component."}, {"method_name": "updateUI", "method_sig": "public void updateUI()", "description": "Resets the UI property to a value from the current look and feel."}, {"method_name": "getUIClassID", "method_sig": "@BeanProperty(bound=false)\npublic String getUIClassID()", "description": "Returns the name of the UI class that implements the\n L&F for this component."}, {"method_name": "createChangeListener", "method_sig": "protected ChangeListener createChangeListener()", "description": "Subclasses that want to handle ChangeEvents differently\n can override this to return a subclass of ModelListener or\n another ChangeListener implementation."}, {"method_name": "addChangeListener", "method_sig": "public void addChangeListener (ChangeListener l)", "description": "Adds a ChangeListener to this tabbedpane."}, {"method_name": "removeChangeListener", "method_sig": "public void removeChangeListener (ChangeListener l)", "description": "Removes a ChangeListener from this tabbedpane."}, {"method_name": "getChangeListeners", "method_sig": "@BeanProperty(bound=false)\npublic ChangeListener[] getChangeListeners()", "description": "Returns an array of all the ChangeListeners added\n to this JTabbedPane with addChangeListener."}, {"method_name": "fireStateChanged", "method_sig": "protected void fireStateChanged()", "description": "Sends a ChangeEvent, with this JTabbedPane as the source,\n to each registered listener. This method is called each time there is\n a change to either the selected index or the selected tab in the\n JTabbedPane. Usually, the selected index and selected tab change\n together. However, there are some cases, such as tab addition, where the\n selected index changes and the same tab remains selected. There are other\n cases, such as deleting the selected tab, where the index remains the\n same, but a new tab moves to that index. Events are fired for all of\n these cases."}, {"method_name": "getModel", "method_sig": "public SingleSelectionModel getModel()", "description": "Returns the model associated with this tabbedpane."}, {"method_name": "setModel", "method_sig": "@BeanProperty(description=\"The tabbedpane\\'s SingleSelectionModel.\")\npublic void setModel (SingleSelectionModel model)", "description": "Sets the model to be used with this tabbedpane."}, {"method_name": "getTabPlacement", "method_sig": "public int getTabPlacement()", "description": "Returns the placement of the tabs for this tabbedpane."}, {"method_name": "setTabPlacement", "method_sig": "@BeanProperty(preferred=true,\n              visualUpdate=true,\n              enumerationValues={\"JTabbedPane.TOP\",\"JTabbedPane.LEFT\",\"JTabbedPane.BOTTOM\",\"JTabbedPane.RIGHT\"},\n              description=\"The tabbedpane\\'s tab placement.\")\npublic void setTabPlacement (int tabPlacement)", "description": "Sets the tab placement for this tabbedpane.\n Possible values are:\nJTabbedPane.TOP\nJTabbedPane.BOTTOM\nJTabbedPane.LEFT\nJTabbedPane.RIGHT\n\n The default value, if not set, is SwingConstants.TOP."}, {"method_name": "getTabLayoutPolicy", "method_sig": "public int getTabLayoutPolicy()", "description": "Returns the policy used by the tabbedpane to layout the tabs when all the\n tabs will not fit within a single run."}, {"method_name": "setTabLayoutPolicy", "method_sig": "@BeanProperty(preferred=true,\n              visualUpdate=true,\n              enumerationValues={\"JTabbedPane.WRAP_TAB_LAYOUT\",\"JTabbedPane.SCROLL_TAB_LAYOUT\"},\n              description=\"The tabbedpane\\'s policy for laying out the tabs\")\npublic void setTabLayoutPolicy (int tabLayoutPolicy)", "description": "Sets the policy which the tabbedpane will use in laying out the tabs\n when all the tabs will not fit within a single run.\n Possible values are:\n \nJTabbedPane.WRAP_TAB_LAYOUT\nJTabbedPane.SCROLL_TAB_LAYOUT\n\n\n The default value, if not set by the UI, is JTabbedPane.WRAP_TAB_LAYOUT.\n \n Some look and feels might only support a subset of the possible\n layout policies, in which case the value of this property may be\n ignored."}, {"method_name": "getSelectedIndex", "method_sig": "public int getSelectedIndex()", "description": "Returns the currently selected index for this tabbedpane.\n Returns -1 if there is no currently selected tab."}, {"method_name": "setSelectedIndex", "method_sig": "@BeanProperty(bound=false,\n              preferred=true,\n              description=\"The tabbedpane\\'s selected tab index.\")\npublic void setSelectedIndex (int index)", "description": "Sets the selected index for this tabbedpane. The index must be\n a valid tab index or -1, which indicates that no tab should be selected\n (can also be used when there are no tabs in the tabbedpane).  If a -1\n value is specified when the tabbedpane contains one or more tabs, then\n the results will be implementation defined."}, {"method_name": "getSelectedComponent", "method_sig": "public Component getSelectedComponent()", "description": "Returns the currently selected component for this tabbedpane.\n Returns null if there is no currently selected tab."}, {"method_name": "setSelectedComponent", "method_sig": "@BeanProperty(bound=false,\n              preferred=true,\n              description=\"The tabbedpane\\'s selected component.\")\npublic void setSelectedComponent (Component c)", "description": "Sets the selected component for this tabbedpane.  This\n will automatically set the selectedIndex to the index\n corresponding to the specified component."}, {"method_name": "insertTab", "method_sig": "public void insertTab (String title,\n                      Icon icon,\n                      Component component,\n                      String tip,\n                      int index)", "description": "Inserts a new tab for the given component, at the given index,\n represented by the given title and/or icon, either of which may\n be null."}, {"method_name": "addTab", "method_sig": "public void addTab (String title,\n                   Icon icon,\n                   Component component,\n                   String tip)", "description": "Adds a component and tip\n represented by a title and/or icon,\n either of which can be null.\n Cover method for insertTab."}, {"method_name": "addTab", "method_sig": "public void addTab (String title,\n                   Icon icon,\n                   Component component)", "description": "Adds a component represented by a title\n and/or icon, either of which can be null.\n Cover method for insertTab."}, {"method_name": "addTab", "method_sig": "public void addTab (String title,\n                   Component component)", "description": "Adds a component represented by a title\n and no icon.\n Cover method for insertTab."}, {"method_name": "add", "method_sig": "public Component add (Component component)", "description": "Adds a component with a tab title defaulting to\n the name of the component which is the result of calling\n component.getName.\n Cover method for insertTab."}, {"method_name": "add", "method_sig": "public Component add (String title,\n                     Component component)", "description": "Adds a component with the specified tab title.\n Cover method for insertTab."}, {"method_name": "add", "method_sig": "public Component add (Component component,\n                     int index)", "description": "Adds a component at the specified tab index with a tab\n title defaulting to the name of the component.\n Cover method for insertTab."}, {"method_name": "add", "method_sig": "public void add (Component component,\n                Object constraints)", "description": "Adds a component to the tabbed pane.\n If constraints is a String or an\n Icon, it will be used for the tab title,\n otherwise the component's name will be used as the tab title.\n Cover method for insertTab."}, {"method_name": "add", "method_sig": "public void add (Component component,\n                Object constraints,\n                int index)", "description": "Adds a component at the specified tab index.\n If constraints is a String or an\n Icon, it will be used for the tab title,\n otherwise the component's name will be used as the tab title.\n Cover method for insertTab."}, {"method_name": "removeTabAt", "method_sig": "public void removeTabAt (int index)", "description": "Removes the tab at index.\n After the component associated with index is removed,\n its visibility is reset to true to ensure it will be visible\n if added to other containers."}, {"method_name": "remove", "method_sig": "public void remove (Component component)", "description": "Removes the specified Component from the\n JTabbedPane. The method does nothing\n if the component is null."}, {"method_name": "remove", "method_sig": "public void remove (int index)", "description": "Removes the tab and component which corresponds to the specified index."}, {"method_name": "removeAll", "method_sig": "public void removeAll()", "description": "Removes all the tabs and their corresponding components\n from the tabbedpane."}, {"method_name": "getTabCount", "method_sig": "@BeanProperty(bound=false)\npublic int getTabCount()", "description": "Returns the number of tabs in this tabbedpane."}, {"method_name": "getTabRunCount", "method_sig": "@BeanProperty(bound=false)\npublic int getTabRunCount()", "description": "Returns the number of tab runs currently used to display\n the tabs."}, {"method_name": "getTitleAt", "method_sig": "public String getTitleAt (int index)", "description": "Returns the tab title at index."}, {"method_name": "getIconAt", "method_sig": "public Icon getIconAt (int index)", "description": "Returns the tab icon at index."}, {"method_name": "getDisabledIconAt", "method_sig": "public Icon getDisabledIconAt (int index)", "description": "Returns the tab disabled icon at index.\n If the tab disabled icon doesn't exist at index\n this will forward the call to the look and feel to construct\n an appropriate disabled Icon from the corresponding enabled\n Icon. Some look and feels might not render the disabled Icon,\n in which case it won't be created."}, {"method_name": "getToolTipTextAt", "method_sig": "public String getToolTipTextAt (int index)", "description": "Returns the tab tooltip text at index."}, {"method_name": "getBackgroundAt", "method_sig": "public Color getBackgroundAt (int index)", "description": "Returns the tab background color at index."}, {"method_name": "getForegroundAt", "method_sig": "public Color getForegroundAt (int index)", "description": "Returns the tab foreground color at index."}, {"method_name": "isEnabledAt", "method_sig": "public boolean isEnabledAt (int index)", "description": "Returns whether or not the tab at index is\n currently enabled."}, {"method_name": "getComponentAt", "method_sig": "public Component getComponentAt (int index)", "description": "Returns the component at index."}, {"method_name": "getMnemonicAt", "method_sig": "public int getMnemonicAt (int tabIndex)", "description": "Returns the keyboard mnemonic for accessing the specified tab.\n The mnemonic is the key which when combined with the look and feel's\n mouseless modifier (usually Alt) will activate the specified\n tab."}, {"method_name": "getDisplayedMnemonicIndexAt", "method_sig": "public int getDisplayedMnemonicIndexAt (int tabIndex)", "description": "Returns the character, as an index, that the look and feel should\n provide decoration for as representing the mnemonic character."}, {"method_name": "getBoundsAt", "method_sig": "public Rectangle getBoundsAt (int index)", "description": "Returns the tab bounds at index.  If the tab at\n this index is not currently visible in the UI, then returns\n null.\n If there is no UI set on this tabbedpane,\n then returns null."}, {"method_name": "setTitleAt", "method_sig": "@BeanProperty(preferred=true,\n              visualUpdate=true,\n              description=\"The title at the specified tab index.\")\npublic void setTitleAt (int index,\n                       String title)", "description": "Sets the title at index to title which\n can be null.\n The title is not shown if a tab component for this tab was specified.\n An internal exception is raised if there is no tab at that index."}, {"method_name": "setIconAt", "method_sig": "@BeanProperty(preferred=true,\n              visualUpdate=true,\n              description=\"The icon at the specified tab index.\")\npublic void setIconAt (int index,\n                      Icon icon)", "description": "Sets the icon at index to icon which can be\n null. This does not set disabled icon at icon.\n If the new Icon is different than the current Icon and disabled icon\n is not explicitly set, the LookAndFeel will be asked to generate a disabled\n Icon. To explicitly set disabled icon, use setDisableIconAt().\n The icon is not shown if a tab component for this tab was specified.\n An internal exception is raised if there is no tab at that index."}, {"method_name": "setDisabledIconAt", "method_sig": "@BeanProperty(preferred=true,\n              visualUpdate=true,\n              description=\"The disabled icon at the specified tab index.\")\npublic void setDisabledIconAt (int index,\n                              Icon disabledIcon)", "description": "Sets the disabled icon at index to icon\n which can be null.\n An internal exception is raised if there is no tab at that index."}, {"method_name": "setToolTipTextAt", "method_sig": "@BeanProperty(preferred=true,\n              description=\"The tooltip text at the specified tab index.\")\npublic void setToolTipTextAt (int index,\n                             String toolTipText)", "description": "Sets the tooltip text at index to toolTipText\n which can be null.\n An internal exception is raised if there is no tab at that index."}, {"method_name": "setBackgroundAt", "method_sig": "@BeanProperty(preferred=true,\n              visualUpdate=true,\n              description=\"The background color at the specified tab index.\")\npublic void setBackgroundAt (int index,\n                            Color background)", "description": "Sets the background color at index to\n background\n which can be null, in which case the tab's background color\n will default to the background color of the tabbedpane.\n An internal exception is raised if there is no tab at that index.\n \n It is up to the look and feel to honor this property, some may\n choose to ignore it."}, {"method_name": "setForegroundAt", "method_sig": "@BeanProperty(preferred=true,\n              visualUpdate=true,\n              description=\"The foreground color at the specified tab index.\")\npublic void setForegroundAt (int index,\n                            Color foreground)", "description": "Sets the foreground color at index to\n foreground which can be\n null, in which case the tab's foreground color\n will default to the foreground color of this tabbedpane.\n An internal exception is raised if there is no tab at that index.\n \n It is up to the look and feel to honor this property, some may\n choose to ignore it."}, {"method_name": "setEnabledAt", "method_sig": "public void setEnabledAt (int index,\n                         boolean enabled)", "description": "Sets whether or not the tab at index is enabled.\n An internal exception is raised if there is no tab at that index."}, {"method_name": "setComponentAt", "method_sig": "@BeanProperty(visualUpdate=true,\n              description=\"The component at the specified tab index.\")\npublic void setComponentAt (int index,\n                           Component component)", "description": "Sets the component at index to component.\n An internal exception is raised if there is no tab at that index."}, {"method_name": "setDisplayedMnemonicIndexAt", "method_sig": "@BeanProperty(visualUpdate=true,\n              description=\"the index into the String to draw the keyboard character mnemonic at\")\npublic void setDisplayedMnemonicIndexAt (int tabIndex,\n                                        int mnemonicIndex)", "description": "Provides a hint to the look and feel as to which character in the\n text should be decorated to represent the mnemonic. Not all look and\n feels may support this. A value of -1 indicates either there is\n no mnemonic for this tab, or you do not wish the mnemonic to be\n displayed for this tab.\n \n The value of this is updated as the properties relating to the\n mnemonic change (such as the mnemonic itself, the text...).\n You should only ever have to call this if\n you do not wish the default character to be underlined. For example, if\n the text at tab index 3 was 'Apple Price', with a mnemonic of 'p',\n and you wanted the 'P'\n to be decorated, as 'Apple Price', you would have to invoke\n setDisplayedMnemonicIndex(3, 6) after invoking\n setMnemonicAt(3, KeyEvent.VK_P).\n Note that it is the programmer's responsibility to ensure\n that each tab has a unique mnemonic or unpredictable results may\n occur."}, {"method_name": "setMnemonicAt", "method_sig": "@BeanProperty(visualUpdate=true,\n              description=\"The keyboard mnenmonic, as a KeyEvent VK constant, for the specified tab\")\npublic void setMnemonicAt (int tabIndex,\n                          int mnemonic)", "description": "Sets the keyboard mnemonic for accessing the specified tab.\n The mnemonic is the key which when combined with the look and feel's\n mouseless modifier (usually Alt) will activate the specified\n tab.\n \n A mnemonic must correspond to a single key on the keyboard\n and should be specified using one of the VK_XXX\n keycodes defined in java.awt.event.KeyEvent\n or one of the extended keycodes obtained through\n java.awt.event.KeyEvent.getExtendedKeyCodeForChar.\n Mnemonics are case-insensitive, therefore a key event\n with the corresponding keycode would cause the button to be\n activated whether or not the Shift modifier was pressed.\n \n This will update the displayed mnemonic property for the specified\n tab."}, {"method_name": "indexOfTab", "method_sig": "public int indexOfTab (String title)", "description": "Returns the first tab index with a given title,  or\n -1 if no tab has this title."}, {"method_name": "indexOfTab", "method_sig": "public int indexOfTab (Icon icon)", "description": "Returns the first tab index with a given icon,\n or -1 if no tab has this icon."}, {"method_name": "indexOfComponent", "method_sig": "public int indexOfComponent (Component component)", "description": "Returns the index of the tab for the specified component.\n Returns -1 if there is no tab for this component."}, {"method_name": "indexAtLocation", "method_sig": "public int indexAtLocation (int x,\n                           int y)", "description": "Returns the tab index corresponding to the tab whose bounds\n intersect the specified location.  Returns -1 if no tab\n intersects the location."}, {"method_name": "getToolTipText", "method_sig": "public String getToolTipText (MouseEvent event)", "description": "Returns the tooltip text for the component determined by the\n mouse event location."}, {"method_name": "paramString", "method_sig": "protected String paramString()", "description": "Returns a string representation of this JTabbedPane.\n This method\n is intended to be used only for debugging purposes, and the\n content and format of the returned string may vary between\n implementations. The returned string may be empty but may not\n be null."}, {"method_name": "getAccessibleContext", "method_sig": "@BeanProperty(bound=false)\npublic AccessibleContext getAccessibleContext()", "description": "Gets the AccessibleContext associated with this JTabbedPane.\n For tabbed panes, the AccessibleContext takes the form of an\n AccessibleJTabbedPane.\n A new AccessibleJTabbedPane instance is created if necessary."}, {"method_name": "setTabComponentAt", "method_sig": "@BeanProperty(preferred=true,\n              visualUpdate=true,\n              description=\"The tab component at the specified tab index.\")\npublic void setTabComponentAt (int index,\n                              Component component)", "description": "Sets the component that is responsible for rendering the\n title for the specified tab.  A null value means\n JTabbedPane will render the title and/or icon for\n the specified tab.  A non-null value means the component will\n render the title and JTabbedPane will not render\n the title and/or icon.\n \n Note: The component must not be one that the developer has\n       already added to the tabbed pane."}, {"method_name": "getTabComponentAt", "method_sig": "public Component getTabComponentAt (int index)", "description": "Returns the tab component at index."}, {"method_name": "indexOfTabComponent", "method_sig": "public int indexOfTabComponent (Component tabComponent)", "description": "Returns the index of the tab for the specified tab component.\n Returns -1 if there is no tab for this tab component."}]}