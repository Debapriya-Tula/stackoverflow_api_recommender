{"name": "Class JSpinner", "module": "java.desktop", "package": "javax.swing", "text": "A single line input field that lets the user select a\n number or an object value from an ordered sequence. Spinners typically\n provide a pair of tiny arrow buttons for stepping through the elements\n of the sequence. The keyboard up/down arrow keys also cycle through the\n elements. The user may also be allowed to type a (legal) value directly\n into the spinner. Although combo boxes provide similar functionality,\n spinners are sometimes preferred because they don't require a drop down list\n that can obscure important data.\n \n A JSpinner's sequence value is defined by its\n SpinnerModel.\n The model can be specified as a constructor argument and\n changed with the model property.  SpinnerModel\n classes for some common types are provided: SpinnerListModel,\n SpinnerNumberModel, and SpinnerDateModel.\n \n A JSpinner has a single child component that's\n responsible for displaying\n and potentially changing the current element or value of\n the model, which is called the editor.  The editor is created\n by the JSpinner's constructor and can be changed with the\n editor property.  The JSpinner's editor stays\n in sync with the model by listening for ChangeEvents. If the\n user has changed the value displayed by the editor it is\n possible for the model's value to differ from that of\n the editor. To make sure the model has the same\n value as the editor use the commitEdit method, eg:\n \n   try {\n       spinner.commitEdit();\n   }\n   catch (ParseException pe) {\n       // Edited value is invalid, spinner.getValue() will return\n       // the last valid value, you could revert the spinner to show that:\n       JComponent editor = spinner.getEditor();\n       if (editor instanceof DefaultEditor) {\n           ((DefaultEditor)editor).getTextField().setValue(spinner.getValue());\n       }\n       // reset the value to some known value:\n       spinner.setValue(fallbackValue);\n       // or treat the last valid value as the current, in which\n       // case you don't need to do anything.\n   }\n   return spinner.getValue();\n \n\n For information and examples of using spinner see\n How to Use Spinners,\n a section in The Java Tutorial.\n\nWarning: Swing is not thread safe. For more\n information see Swing's Threading\n Policy.\n \nWarning:\n Serialized objects of this class will not be compatible with\n future Swing releases. The current serialization support is\n appropriate for short term storage or RMI between applications running\n the same version of Swing.  As of 1.4, support for long term storage\n of all JavaBeans\u2122\n has been added to the java.beans package.\n Please see XMLEncoder.", "codes": ["@JavaBean(defaultProperty=\"UI\",\n          description=\"A single line input field that lets the user select a number or an object value from an ordered set.\")\npublic class JSpinner\nextends JComponent\nimplements Accessible"], "fields": [], "methods": [{"method_name": "getUI", "method_sig": "public SpinnerUI getUI()", "description": "Returns the look and feel (L&F) object that renders this component."}, {"method_name": "setUI", "method_sig": "public void setUI (SpinnerUI ui)", "description": "Sets the look and feel (L&F) object that renders this component."}, {"method_name": "getUIClassID", "method_sig": "@BeanProperty(bound=false)\npublic String getUIClassID()", "description": "Returns the suffix used to construct the name of the look and feel\n (L&F) class used to render this component."}, {"method_name": "updateUI", "method_sig": "public void updateUI()", "description": "Resets the UI property with the value from the current look and feel."}, {"method_name": "createEditor", "method_sig": "protected JComponent createEditor (SpinnerModel model)", "description": "This method is called by the constructors to create the\n JComponent\n that displays the current value of the sequence.  The editor may\n also allow the user to enter an element of the sequence directly.\n An editor must listen for ChangeEvents on the\n model and keep the value it displays\n in sync with the value of the model.\n \n Subclasses may override this method to add support for new\n SpinnerModel classes.  Alternatively one can just\n replace the editor created here with the setEditor\n method.  The default mapping from model type to editor is:\n \n SpinnerNumberModel => JSpinner.NumberEditor\n SpinnerDateModel => JSpinner.DateEditor\n SpinnerListModel => JSpinner.ListEditor\n all others => JSpinner.DefaultEditor\n"}, {"method_name": "setModel", "method_sig": "@BeanProperty(visualUpdate=true,\n              description=\"Model that represents the value of this spinner.\")\npublic void setModel (SpinnerModel model)", "description": "Changes the model that represents the value of this spinner.\n If the editor property has not been explicitly set,\n the editor property is (implicitly) set after the \"model\"\nPropertyChangeEvent has been fired.  The editor\n property is set to the value returned by createEditor,\n as in:\n \n setEditor(createEditor(model));\n "}, {"method_name": "getModel", "method_sig": "public SpinnerModel getModel()", "description": "Returns the SpinnerModel that defines\n this spinners sequence of values."}, {"method_name": "getValue", "method_sig": "public Object getValue()", "description": "Returns the current value of the model, typically\n this value is displayed by the editor. If the\n user has changed the value displayed by the editor it is\n possible for the model's value to differ from that of\n the editor, refer to the class level javadoc for examples\n of how to deal with this.\n \n This method simply delegates to the model.\n It is equivalent to:\n \n getModel().getValue()\n "}, {"method_name": "setValue", "method_sig": "public void setValue (Object value)", "description": "Changes current value of the model, typically\n this value is displayed by the editor.\n If the SpinnerModel implementation\n doesn't support the specified value then an\n IllegalArgumentException is thrown.\n \n This method simply delegates to the model.\n It is equivalent to:\n \n getModel().setValue(value)\n "}, {"method_name": "getNextValue", "method_sig": "@BeanProperty(bound=false)\npublic Object getNextValue()", "description": "Returns the object in the sequence that comes after the object returned\n by getValue(). If the end of the sequence has been reached\n then return null.\n Calling this method does not effect value.\n \n This method simply delegates to the model.\n It is equivalent to:\n \n getModel().getNextValue()\n "}, {"method_name": "addChangeListener", "method_sig": "public void addChangeListener (ChangeListener listener)", "description": "Adds a listener to the list that is notified each time a change\n to the model occurs.  The source of ChangeEvents\n delivered to ChangeListeners will be this\n JSpinner.  Note also that replacing the model\n will not affect listeners added directly to JSpinner.\n Applications can add listeners to  the model directly.  In that\n case is that the source of the event would be the\n SpinnerModel."}, {"method_name": "removeChangeListener", "method_sig": "public void removeChangeListener (ChangeListener listener)", "description": "Removes a ChangeListener from this spinner."}, {"method_name": "getChangeListeners", "method_sig": "@BeanProperty(bound=false)\npublic ChangeListener[] getChangeListeners()", "description": "Returns an array of all the ChangeListeners added\n to this JSpinner with addChangeListener()."}, {"method_name": "fireStateChanged", "method_sig": "protected void fireStateChanged()", "description": "Sends a ChangeEvent, whose source is this\n JSpinner, to each ChangeListener.\n When a ChangeListener has been added\n to the spinner, this method is called each time\n a ChangeEvent is received from the model."}, {"method_name": "getPreviousValue", "method_sig": "@BeanProperty(bound=false)\npublic Object getPreviousValue()", "description": "Returns the object in the sequence that comes\n before the object returned by getValue().\n If the end of the sequence has been reached then\n return null. Calling this method does\n not effect value.\n \n This method simply delegates to the model.\n It is equivalent to:\n \n getModel().getPreviousValue()\n "}, {"method_name": "setEditor", "method_sig": "@BeanProperty(visualUpdate=true,\n              description=\"JComponent that displays the current value of the model\")\npublic void setEditor (JComponent editor)", "description": "Changes the JComponent that displays the current value\n of the SpinnerModel.  It is the responsibility of this\n method to disconnect the old editor from the model and to\n connect the new editor.  This may mean removing the\n old editors ChangeListener from the model or the\n spinner itself and adding one for the new editor."}, {"method_name": "getEditor", "method_sig": "public JComponent getEditor()", "description": "Returns the component that displays and potentially\n changes the model's value."}, {"method_name": "commitEdit", "method_sig": "public void commitEdit()\n                throws ParseException", "description": "Commits the currently edited value to the SpinnerModel.\n \n If the editor is an instance of DefaultEditor, the\n call if forwarded to the editor, otherwise this does nothing."}, {"method_name": "getAccessibleContext", "method_sig": "@BeanProperty(bound=false)\npublic AccessibleContext getAccessibleContext()", "description": "Gets the AccessibleContext for the JSpinner"}]}