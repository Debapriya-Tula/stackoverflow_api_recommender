{"name": "Class VolatileCallSite", "module": "java.base", "package": "java.lang.invoke", "text": "A VolatileCallSite is a CallSite whose target acts like a volatile variable.\n An invokedynamic instruction linked to a VolatileCallSite sees updates\n to its call site target immediately, even if the update occurs in another thread.\n There may be a performance penalty for such tight coupling between threads.\n \n Unlike MutableCallSite, there is no\n syncAll operation on volatile\n call sites, since every write to a volatile variable is implicitly\n synchronized with reader threads.\n \n In other respects, a VolatileCallSite is interchangeable\n with MutableCallSite.", "codes": ["public class VolatileCallSite\nextends CallSite"], "fields": [], "methods": [{"method_name": "getTarget", "method_sig": "public final MethodHandle getTarget()", "description": "Returns the target method of the call site, which behaves\n like a volatile field of the VolatileCallSite.\n \n The interactions of getTarget with memory are the same\n as of a read from a volatile field.\n \n In particular, the current thread is required to issue a fresh\n read of the target from memory, and must not fail to see\n a recent update to the target by another thread."}, {"method_name": "setTarget", "method_sig": "public void setTarget (MethodHandle newTarget)", "description": "Updates the target method of this call site, as a volatile variable.\n The type of the new target must agree with the type of the old target.\n \n The interactions with memory are the same as of a write to a volatile field.\n In particular, any threads is guaranteed to see the updated target\n the next time it calls getTarget."}]}