{"name": "Class XPathFactory", "module": "java.xml", "package": "javax.xml.xpath", "text": "An XPathFactory instance can be used to create\n XPath objects.\nSee newInstance(String uri) for lookup mechanism.\nThe XPathFactory class is not thread-safe. In other words,\n it is the application's responsibility to ensure that at most\n one thread is using a XPathFactory object at any\n given moment. Implementations are encouraged to mark methods\n as synchronized to protect themselves from broken clients.\n\n XPathFactory is not re-entrant. While one of the\n newInstance methods is being invoked, applications\n may not attempt to recursively invoke a newInstance method,\n even from the same thread.", "codes": ["public abstract class XPathFactory\nextends Object"], "fields": [{"field_name": "DEFAULT_PROPERTY_NAME", "field_sig": "public static final\u00a0String DEFAULT_PROPERTY_NAME", "description": "The default property name according to the JAXP spec."}, {"field_name": "DEFAULT_OBJECT_MODEL_URI", "field_sig": "public static final\u00a0String DEFAULT_OBJECT_MODEL_URI", "description": "Default Object Model URI."}], "methods": [{"method_name": "newDefaultInstance", "method_sig": "public static XPathFactory newDefaultInstance()", "description": "Creates a new instance of the XPathFactory builtin\n system-default implementation."}, {"method_name": "newInstance", "method_sig": "public static XPathFactory newInstance()", "description": "Get a new XPathFactory instance using the default object model,\n DEFAULT_OBJECT_MODEL_URI,\n the W3C DOM.\nThis method is functionally equivalent to:\n\n   newInstance(DEFAULT_OBJECT_MODEL_URI)\n \nSince the implementation for the W3C DOM is always available, this method will never fail."}, {"method_name": "newInstance", "method_sig": "public static XPathFactory newInstance (String uri)\n                                throws XPathFactoryConfigurationException", "description": "Get a new XPathFactory instance using the specified object model.\nTo find a XPathFactory object,\n this method looks the following places in the following order where \"the class loader\" refers to the context class loader:\n\n\n\n     If the system property DEFAULT_PROPERTY_NAME + \":uri\" is present,\n     where uri is the parameter to this method, then its value is read as a class name.\n     The method will try to create a new instance of this class by using the class loader,\n     and returns it if it is successfully created.\n   \n\n\n     Use the configuration file \"jaxp.properties\". The file is in standard\n     Properties format and typically located in the\n     conf directory of the Java installation. It contains the fully qualified\n     name of the implementation class with the key being the system property\n     defined above.\n     \n     The jaxp.properties file is read only once by the JAXP implementation\n     and its values are then cached for future use.  If the file does not exist\n     when the first attempt is made to read from it, no further attempts are\n     made to check for its existence.  It is not possible to change the value\n     of any property in jaxp.properties after it has been read for the first time.\n   \n\n\n     Use the service-provider loading facility, defined by the\n     ServiceLoader class, to attempt to locate and load an\n     implementation of the service using the default loading mechanism:\n     the service-provider loading facility will use the current thread's context class loader\n     to attempt to load the service. If the context class\n     loader is null, the system class loader will be used.\n     \n     Each potential service provider is required to implement the method\n     isObjectModelSupported(String objectModel).\n     The first service provider found that supports the specified object\n     model is returned.\n     \n     In case of ServiceConfigurationError an\n     XPathFactoryConfigurationException will be thrown.\n   \n\n\n     Platform default XPathFactory is located in a platform\n     specific way.\n     There must be a platform default\nXPathFactory for the W3C DOM, i.e.\n     DEFAULT_OBJECT_MODEL_URI.\n   \n\nIf everything fails, an XPathFactoryConfigurationException will be thrown.\n\n Tip for Trouble-shooting:\n See Properties.load(java.io.InputStream) for exactly how a property file is parsed.\n In particular, colons ':' need to be escaped in a property file, so make sure the URIs are properly escaped in it.\n For example:\n \n   http\\://java.sun.com/jaxp/xpath/dom=org.acme.DomXPathFactory\n "}, {"method_name": "newInstance", "method_sig": "public static XPathFactory newInstance (String uri,\n                                       String factoryClassName,\n                                       ClassLoader classLoader)\n                                throws XPathFactoryConfigurationException", "description": "Obtain a new instance of a XPathFactory from a factory class name. XPathFactory\n is returned if specified factory class supports the specified object model.\n This function is useful when there are multiple providers in the classpath.\n It gives more control to the application as it can specify which provider\n should be loaded.\nTip for Trouble-shooting\nSetting the jaxp.debug system property will cause\n this method to print a lot of debug messages\n to System.err about what it is doing and where it is looking at.\n If you have problems try:\n\n java -Djaxp.debug=1 YourProgram ....\n "}, {"method_name": "isObjectModelSupported", "method_sig": "public abstract boolean isObjectModelSupported (String objectModel)", "description": "Is specified object model supported by this XPathFactory?"}, {"method_name": "setFeature", "method_sig": "public abstract void setFeature (String name,\n                                boolean value)\n                         throws XPathFactoryConfigurationException", "description": "Set a feature for this XPathFactory and\n XPaths created by this factory.\n\n Feature names are fully qualified URIs.\n Implementations may define their own features.\n An XPathFactoryConfigurationException is thrown if this\n XPathFactory or the XPaths\n it creates cannot support the feature.\n It is possible for an XPathFactory to expose a feature value\n but be unable to change its state.\n \n\n All implementations are required to support the XMLConstants.FEATURE_SECURE_PROCESSING feature.\n When the feature is true, any reference to  an external function is an error.\n Under these conditions, the implementation must not call the XPathFunctionResolver\n and must throw an XPathFunctionException.\n "}, {"method_name": "getFeature", "method_sig": "public abstract boolean getFeature (String name)\n                            throws XPathFactoryConfigurationException", "description": "Get the state of the named feature.\n\n Feature names are fully qualified URIs.\n Implementations may define their own features.\n An XPathFactoryConfigurationException is thrown if this\n XPathFactory or the XPaths\n it creates cannot support the feature.\n It is possible for an XPathFactory to expose a feature value\n but be unable to change its state.\n "}, {"method_name": "setXPathVariableResolver", "method_sig": "public abstract void setXPathVariableResolver (XPathVariableResolver resolver)", "description": "Establish a default variable resolver.\nAny XPath objects constructed from this factory will use\n the specified resolver by default.\nA NullPointerException is thrown if resolver\n is null."}, {"method_name": "setXPathFunctionResolver", "method_sig": "public abstract void setXPathFunctionResolver (XPathFunctionResolver resolver)", "description": "Establish a default function resolver.\nAny XPath objects constructed from this factory will\n use the specified resolver by default.\nA NullPointerException is thrown if\n resolver is null."}, {"method_name": "newXPath", "method_sig": "public abstract XPath newXPath()", "description": "Return a new XPath using the underlying object\n model determined when the XPathFactory was instantiated."}]}