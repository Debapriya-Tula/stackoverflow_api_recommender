{"name": "Class MethodHandle", "module": "java.base", "package": "java.lang.invoke", "text": "A method handle is a typed, directly executable reference to an underlying method,\n constructor, field, or similar low-level operation, with optional\n transformations of arguments or return values.\n These transformations are quite general, and include such patterns as\n conversion,\n insertion,\n deletion,\n and substitution.\n\n Method handle contents\n Method handles are dynamically and strongly typed according to their parameter and return types.\n They are not distinguished by the name or the defining class of their underlying methods.\n A method handle must be invoked using a symbolic type descriptor which matches\n the method handle's own type descriptor.\n \n Every method handle reports its type descriptor via the type accessor.\n This type descriptor is a MethodType object,\n whose structure is a series of classes, one of which is\n the return type of the method (or void.class if none).\n \n A method handle's type controls the types of invocations it accepts,\n and the kinds of transformations that apply to it.\n \n A method handle contains a pair of special invoker methods\n called invokeExact and invoke.\n Both invoker methods provide direct access to the method handle's\n underlying method, constructor, field, or other operation,\n as modified by transformations of arguments and return values.\n Both invokers accept calls which exactly match the method handle's own type.\n The plain, inexact invoker also accepts a range of other call types.\n \n Method handles are immutable and have no visible state.\n Of course, they can be bound to underlying methods or data which exhibit state.\n With respect to the Java Memory Model, any method handle will behave\n as if all of its (internal) fields are final variables.  This means that any method\n handle made visible to the application will always be fully formed.\n This is true even if the method handle is published through a shared\n variable in a data race.\n \n Method handles cannot be subclassed by the user.\n Implementations may (or may not) create internal subclasses of MethodHandle\n which may be visible via the Object.getClass\n operation.  The programmer should not draw conclusions about a method handle\n from its specific class, as the method handle class hierarchy (if any)\n may change from time to time or across implementations from different vendors.\n\n Method handle compilation\n A Java method call expression naming invokeExact or invoke\n can invoke a method handle from Java source code.\n From the viewpoint of source code, these methods can take any arguments\n and their result can be cast to any return type.\n Formally this is accomplished by giving the invoker methods\n Object return types and variable arity Object arguments,\n but they have an additional quality called signature polymorphism\n which connects this freedom of invocation directly to the JVM execution stack.\n \n As is usual with virtual methods, source-level calls to invokeExact\n and invoke compile to an invokevirtual instruction.\n More unusually, the compiler must record the actual argument types,\n and may not perform method invocation conversions on the arguments.\n Instead, it must generate instructions that push them on the stack according\n to their own unconverted types.  The method handle object itself is pushed on\n the stack before the arguments.\n The compiler then generates an invokevirtual instruction that invokes\n the method handle with a symbolic type descriptor which describes the argument\n and return types.\n \n To issue a complete symbolic type descriptor, the compiler must also determine\n the return type.  This is based on a cast on the method invocation expression,\n if there is one, or else Object if the invocation is an expression,\n or else void if the invocation is a statement.\n The cast may be to a primitive type (but not void).\n \n As a corner case, an uncasted null argument is given\n a symbolic type descriptor of java.lang.Void.\n The ambiguity with the type Void is harmless, since there are no references of type\n Void except the null reference.\n\n Method handle invocation\n The first time an invokevirtual instruction is executed\n it is linked by symbolically resolving the names in the instruction\n and verifying that the method call is statically legal.\n This also holds for calls to invokeExact and invoke.\n In this case, the symbolic type descriptor emitted by the compiler is checked for\n correct syntax, and names it contains are resolved.\n Thus, an invokevirtual instruction which invokes\n a method handle will always link, as long\n as the symbolic type descriptor is syntactically well-formed\n and the types exist.\n \n When the invokevirtual is executed after linking,\n the receiving method handle's type is first checked by the JVM\n to ensure that it matches the symbolic type descriptor.\n If the type match fails, it means that the method which the\n caller is invoking is not present on the individual\n method handle being invoked.\n \n In the case of invokeExact, the type descriptor of the invocation\n (after resolving symbolic type names) must exactly match the method type\n of the receiving method handle.\n In the case of plain, inexact invoke, the resolved type descriptor\n must be a valid argument to the receiver's asType method.\n Thus, plain invoke is more permissive than invokeExact.\n \n After type matching, a call to invokeExact directly\n and immediately invoke the method handle's underlying method\n (or other behavior, as the case may be).\n \n A call to plain invoke works the same as a call to\n invokeExact, if the symbolic type descriptor specified by the caller\n exactly matches the method handle's own type.\n If there is a type mismatch, invoke attempts\n to adjust the type of the receiving method handle,\n as if by a call to asType,\n to obtain an exactly invokable method handle M2.\n This allows a more powerful negotiation of method type\n between caller and callee.\n \n (Note: The adjusted method handle M2 is not directly observable,\n and implementations are therefore not required to materialize it.)\n\n Invocation checking\n In typical programs, method handle type matching will usually succeed.\n But if a match fails, the JVM will throw a WrongMethodTypeException,\n either directly (in the case of invokeExact) or indirectly as if\n by a failed call to asType (in the case of invoke).\n \n Thus, a method type mismatch which might show up as a linkage error\n in a statically typed program can show up as\n a dynamic WrongMethodTypeException\n in a program which uses method handles.\n \n Because method types contain \"live\" Class objects,\n method type matching takes into account both type names and class loaders.\n Thus, even if a method handle M is created in one\n class loader L1 and used in another L2,\n method handle calls are type-safe, because the caller's symbolic type\n descriptor, as resolved in L2,\n is matched against the original callee method's symbolic type descriptor,\n as resolved in L1.\n The resolution in L1 happens when M is created\n and its type is assigned, while the resolution in L2 happens\n when the invokevirtual instruction is linked.\n \n Apart from type descriptor checks,\n a method handle's capability to call its underlying method is unrestricted.\n If a method handle is formed on a non-public method by a class\n that has access to that method, the resulting handle can be used\n in any place by any caller who receives a reference to it.\n \n Unlike with the Core Reflection API, where access is checked every time\n a reflective method is invoked,\n method handle access checking is performed\n when the method handle is created.\n In the case of ldc (see below), access checking is performed as part of linking\n the constant pool entry underlying the constant method handle.\n \n Thus, handles to non-public methods, or to methods in non-public classes,\n should generally be kept secret.\n They should not be passed to untrusted code unless their use from\n the untrusted code would be harmless.\n\n Method handle creation\n Java code can create a method handle that directly accesses\n any method, constructor, or field that is accessible to that code.\n This is done via a reflective, capability-based API called\n MethodHandles.Lookup.\n For example, a static method handle can be obtained\n from Lookup.findStatic.\n There are also conversion methods from Core Reflection API objects,\n such as Lookup.unreflect.\n \n Like classes and strings, method handles that correspond to accessible\n fields, methods, and constructors can also be represented directly\n in a class file's constant pool as constants to be loaded by ldc bytecodes.\n A new type of constant pool entry, CONSTANT_MethodHandle,\n refers directly to an associated CONSTANT_Methodref,\n CONSTANT_InterfaceMethodref, or CONSTANT_Fieldref\n constant pool entry.\n (For full details on method handle constants,\n see sections 4.4.8 and 5.4.3.5 of the Java Virtual Machine Specification.)\n \n Method handles produced by lookups or constant loads from methods or\n constructors with the variable arity modifier bit (0x0080)\n have a corresponding variable arity, as if they were defined with\n the help of asVarargsCollector\n or withVarargs.\n \n A method reference may refer either to a static or non-static method.\n In the non-static case, the method handle type includes an explicit\n receiver argument, prepended before any other arguments.\n In the method handle's type, the initial receiver argument is typed\n according to the class under which the method was initially requested.\n (E.g., if a non-static method handle is obtained via ldc,\n the type of the receiver is the class named in the constant pool entry.)\n \n Method handle constants are subject to the same link-time access checks\n their corresponding bytecode instructions, and the ldc instruction\n will throw corresponding linkage errors if the bytecode behaviors would\n throw such errors.\n \n As a corollary of this, access to protected members is restricted\n to receivers only of the accessing class, or one of its subclasses,\n and the accessing class must in turn be a subclass (or package sibling)\n of the protected member's defining class.\n If a method reference refers to a protected non-static method or field\n of a class outside the current package, the receiver argument will\n be narrowed to the type of the accessing class.\n \n When a method handle to a virtual method is invoked, the method is\n always looked up in the receiver (that is, the first argument).\n \n A non-virtual method handle to a specific virtual method implementation\n can also be created.  These do not perform virtual lookup based on\n receiver type.  Such a method handle simulates the effect of\n an invokespecial instruction to the same method.\n A non-virtual method handle can also be created to simulate the effect\n of an invokevirtual or invokeinterface instruction on\n a private method (as applicable).\n\n Usage examples\n Here are some examples of usage:\n \nObject x, y; String s; int i;\nMethodType mt; MethodHandle mh;\nMethodHandles.Lookup lookup = MethodHandles.lookup();\n// mt is (char,char)String\nmt = MethodType.methodType(String.class, char.class, char.class);\nmh = lookup.findVirtual(String.class, \"replace\", mt);\ns = (String) mh.invokeExact(\"daddy\",'d','n');\n// invokeExact(Ljava/lang/String;CC)Ljava/lang/String;\nassertEquals(s, \"nanny\");\n// weakly typed invocation (using MHs.invoke)\ns = (String) mh.invokeWithArguments(\"sappy\", 'p', 'v');\nassertEquals(s, \"savvy\");\n// mt is (Object[])List\nmt = MethodType.methodType(java.util.List.class, Object[].class);\nmh = lookup.findStatic(java.util.Arrays.class, \"asList\", mt);\nassert(mh.isVarargsCollector());\nx = mh.invoke(\"one\", \"two\");\n// invoke(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;\nassertEquals(x, java.util.Arrays.asList(\"one\",\"two\"));\n// mt is (Object,Object,Object)Object\nmt = MethodType.genericMethodType(3);\nmh = mh.asType(mt);\nx = mh.invokeExact((Object)1, (Object)2, (Object)3);\n// invokeExact(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\nassertEquals(x, java.util.Arrays.asList(1,2,3));\n// mt is ()int\nmt = MethodType.methodType(int.class);\nmh = lookup.findVirtual(java.util.List.class, \"size\", mt);\ni = (int) mh.invokeExact(java.util.Arrays.asList(1,2,3));\n// invokeExact(Ljava/util/List;)I\nassert(i == 3);\nmt = MethodType.methodType(void.class, String.class);\nmh = lookup.findVirtual(java.io.PrintStream.class, \"println\", mt);\nmh.invokeExact(System.out, \"Hello, world.\");\n// invokeExact(Ljava/io/PrintStream;Ljava/lang/String;)V\n \n Each of the above calls to invokeExact or plain invoke\n generates a single invokevirtual instruction with\n the symbolic type descriptor indicated in the following comment.\n In these examples, the helper method assertEquals is assumed to\n be a method which calls Objects.equals\n on its arguments, and asserts that the result is true.\n\n Exceptions\n The methods invokeExact and invoke are declared\n to throw Throwable,\n which is to say that there is no static restriction on what a method handle\n can throw.  Since the JVM does not distinguish between checked\n and unchecked exceptions (other than by their class, of course),\n there is no particular effect on bytecode shape from ascribing\n checked exceptions to method handle invocations.  But in Java source\n code, methods which perform method handle calls must either explicitly\n throw Throwable, or else must catch all\n throwables locally, rethrowing only those which are legal in the context,\n and wrapping ones which are illegal.\n\n Signature polymorphism\n The unusual compilation and linkage behavior of\n invokeExact and plain invoke\n is referenced by the term signature polymorphism.\n As defined in the Java Language Specification,\n a signature polymorphic method is one which can operate with\n any of a wide range of call signatures and return types.\n \n In source code, a call to a signature polymorphic method will\n compile, regardless of the requested symbolic type descriptor.\n As usual, the Java compiler emits an invokevirtual\n instruction with the given symbolic type descriptor against the named method.\n The unusual part is that the symbolic type descriptor is derived from\n the actual argument and return types, not from the method declaration.\n \n When the JVM processes bytecode containing signature polymorphic calls,\n it will successfully link any such call, regardless of its symbolic type descriptor.\n (In order to retain type safety, the JVM will guard such calls with suitable\n dynamic type checks, as described elsewhere.)\n \n Bytecode generators, including the compiler back end, are required to emit\n untransformed symbolic type descriptors for these methods.\n Tools which determine symbolic linkage are required to accept such\n untransformed descriptors, without reporting linkage errors.\n\n Interoperation between method handles and the Core Reflection API\n Using factory methods in the Lookup API,\n any class member represented by a Core Reflection API object\n can be converted to a behaviorally equivalent method handle.\n For example, a reflective Method can\n be converted to a method handle using\n Lookup.unreflect.\n The resulting method handles generally provide more direct and efficient\n access to the underlying class members.\n \n As a special case,\n when the Core Reflection API is used to view the signature polymorphic\n methods invokeExact or plain invoke in this class,\n they appear as ordinary non-polymorphic methods.\n Their reflective appearance, as viewed by\n Class.getDeclaredMethod,\n is unaffected by their special status in this API.\n For example, Method.getModifiers\n will report exactly those modifier bits required for any similarly\n declared method, including in this case native and varargs bits.\n \n As with any reflected method, these methods (when reflected) may be\n invoked via java.lang.reflect.Method.invoke.\n However, such reflective calls do not result in method handle invocations.\n Such a call, if passed the required argument\n (a single one, of type Object[]), will ignore the argument and\n will throw an UnsupportedOperationException.\n \n Since invokevirtual instructions can natively\n invoke method handles under any symbolic type descriptor, this reflective view conflicts\n with the normal presentation of these methods via bytecodes.\n Thus, these two native methods, when reflectively viewed by\n Class.getDeclaredMethod, may be regarded as placeholders only.\n \n In order to obtain an invoker method for a particular type descriptor,\n use MethodHandles.exactInvoker,\n or MethodHandles.invoker.\n The Lookup.findVirtual\n API is also able to return a method handle\n to call invokeExact or plain invoke,\n for any specified type descriptor .\n\n Interoperation between method handles and Java generics\n A method handle can be obtained on a method, constructor, or field\n which is declared with Java generic types.\n As with the Core Reflection API, the type of the method handle\n will constructed from the erasure of the source-level type.\n When a method handle is invoked, the types of its arguments\n or the return value cast type may be generic types or type instances.\n If this occurs, the compiler will replace those\n types by their erasures when it constructs the symbolic type descriptor\n for the invokevirtual instruction.\n \n Method handles do not represent\n their function-like types in terms of Java parameterized (generic) types,\n because there are three mismatches between function-like types and parameterized\n Java types.\n \nMethod types range over all possible arities,\n from no arguments to up to the  maximum number of allowed arguments.\n Generics are not variadic, and so cannot represent this.\nMethod types can specify arguments of primitive types,\n which Java generic types cannot range over.\nHigher order functions over method handles (combinators) are\n often generic across a wide range of function types, including\n those of multiple arities.  It is impossible to represent such\n genericity with a Java type parameter.\n\nArity limits\n The JVM imposes on all methods and constructors of any kind an absolute\n limit of 255 stacked arguments.  This limit can appear more restrictive\n in certain cases:\n \nA long or double argument counts (for purposes of arity limits) as two argument slots.\n A non-static method consumes an extra argument for the object on which the method is called.\n A constructor consumes an extra argument for the object which is being constructed.\n Since a method handle\u2019s invoke method (or other signature-polymorphic method) is non-virtual,\n     it consumes an extra argument for the method handle itself, in addition to any non-virtual receiver object.\n \n These limits imply that certain method handles cannot be created, solely because of the JVM limit on stacked arguments.\n For example, if a static JVM method accepts exactly 255 arguments, a method handle cannot be created for it.\n Attempts to create method handles with impossible method types lead to an IllegalArgumentException.\n In particular, a method handle\u2019s type must not have an arity of the exact maximum 255.", "codes": ["public abstract class MethodHandle\nextends Object"], "fields": [], "methods": [{"method_name": "type", "method_sig": "public MethodType type()", "description": "Reports the type of this method handle.\n Every invocation of this method handle via invokeExact must exactly match this type."}, {"method_name": "invokeExact", "method_sig": "public final Object invokeExact (Object... args)\n                         throws Throwable", "description": "Invokes the method handle, allowing any caller type descriptor, but requiring an exact type match.\n The symbolic type descriptor at the call site of invokeExact must\n exactly match this method handle's type.\n No conversions are allowed on arguments or return values.\n \n When this method is observed via the Core Reflection API,\n it will appear as a single native method, taking an object array and returning an object.\n If this native method is invoked directly via\n java.lang.reflect.Method.invoke, via JNI,\n or indirectly via Lookup.unreflect,\n it will throw an UnsupportedOperationException."}, {"method_name": "invoke", "method_sig": "public final Object invoke (Object... args)\n                    throws Throwable", "description": "Invokes the method handle, allowing any caller type descriptor,\n and optionally performing conversions on arguments and return values.\n \n If the call site's symbolic type descriptor exactly matches this method handle's type,\n the call proceeds as if by invokeExact.\n \n Otherwise, the call proceeds as if this method handle were first\n adjusted by calling asType to adjust this method handle\n to the required type, and then the call proceeds as if by\n invokeExact on the adjusted method handle.\n \n There is no guarantee that the asType call is actually made.\n If the JVM can predict the results of making the call, it may perform\n adaptations directly on the caller's arguments,\n and call the target method handle according to its own exact type.\n \n The resolved type descriptor at the call site of invoke must\n be a valid argument to the receivers asType method.\n In particular, the caller must specify the same argument arity\n as the callee's type,\n if the callee is not a variable arity collector.\n \n When this method is observed via the Core Reflection API,\n it will appear as a single native method, taking an object array and returning an object.\n If this native method is invoked directly via\n java.lang.reflect.Method.invoke, via JNI,\n or indirectly via Lookup.unreflect,\n it will throw an UnsupportedOperationException."}, {"method_name": "invokeWithArguments", "method_sig": "public Object invokeWithArguments (Object... arguments)\n                           throws Throwable", "description": "Performs a variable arity invocation, passing the arguments in the given array\n to the method handle, as if via an inexact invoke from a call site\n which mentions only the type Object, and whose actual argument count is the length\n of the argument array.\n \n Specifically, execution proceeds as if by the following steps,\n although the methods are not guaranteed to be called if the JVM\n can predict their effects.\n \nDetermine the length of the argument array as N.\n     For a null reference, N=0. \nCollect the N elements of the array as a logical\n     argument list, each argument statically typed as an Object. \nDetermine, as M, the parameter count of the type of this\n     method handle. \nDetermine the general type TN of N arguments or\n     M arguments, if smaller than N, as\n     TN=MethodType.genericMethodType(Math.min(N, M)).\nIf N is greater than M, perform the following\n     checks and actions to shorten the logical argument list: \nCheck that this method handle has variable arity with a\n         trailing parameter\n         of some array type A[].  If not, fail with a\n         WrongMethodTypeException. \nCollect the trailing elements (there are N-M+1 of them)\n         from the logical argument list into a single array of\n         type A[], using asType conversions to\n         convert each trailing argument to type A. \nIf any of these conversions proves impossible, fail with either\n         a ClassCastException if any trailing element cannot be\n         cast to A or a NullPointerException if any\n         trailing element is null and A is not a reference\n         type. \nReplace the logical arguments gathered into the array of\n         type A[] with the array itself, thus shortening\n         the argument list to length M. This final argument\n         retains the static type A[].\nAdjust the type TN by changing the Nth\n         parameter type from Object to A[].\n     \nForce the original target method handle MH0 to the\n     required type, as MH1 = MH0.asType(TN). \nSpread the argument list into N separate arguments A0, .... \nInvoke the type-adjusted method handle on the unpacked arguments:\n     MH1.invokeExact(A0, ...). \nTake the return value as an Object reference. \n\n\n If the target method handle has variable arity, and the argument list is longer\n than that arity, the excess arguments, starting at the position of the trailing\n array argument, will be gathered (if possible, as if by asType conversions)\n into an array of the appropriate type, and invocation will proceed on the\n shortened argument list.\n In this way, jumbo argument lists which would spread into more\n than 254 slots can still be processed uniformly.\n \n Unlike the generic invocation mode, which can\n \"recycle\" an array argument, passing it directly to the target method,\n this invocation mode always creates a new array parameter, even\n if the original array passed to invokeWithArguments would have\n been acceptable as a direct argument to the target method.\n Even if the number M of actual arguments is the arity N,\n and the last argument is dynamically a suitable array of type A[],\n it will still be boxed into a new one-element array, since the call\n site statically types the argument as Object, not an array type.\n This is not a special rule for this method, but rather a regular effect\n of the rules for variable-arity invocation.\n \n Because of the action of the asType step, the following argument\n conversions are applied as necessary:\n \nreference casting\n unboxing\n widening primitive conversions\n variable arity conversion\n \n\n The result returned by the call is boxed if it is a primitive,\n or forced to null if the return type is void.\n \n Unlike the signature polymorphic methods invokeExact and invoke,\n invokeWithArguments can be accessed normally via the Core Reflection API and JNI.\n It can therefore be used as a bridge between native or reflective code and method handles."}, {"method_name": "invokeWithArguments", "method_sig": "public Object invokeWithArguments (List<?> arguments)\n                           throws Throwable", "description": "Performs a variable arity invocation, passing the arguments in the given list\n to the method handle, as if via an inexact invoke from a call site\n which mentions only the type Object, and whose actual argument count is the length\n of the argument list.\n \n This method is also equivalent to the following code:\n \n   invokeWithArguments(arguments.toArray())\n \n\n Jumbo-sized lists are acceptable if this method handle has variable arity.\n See invokeWithArguments(Object[]) for details."}, {"method_name": "asType", "method_sig": "public MethodHandle asType (MethodType newType)", "description": "Produces an adapter method handle which adapts the type of the\n current method handle to a new type.\n The resulting method handle is guaranteed to report a type\n which is equal to the desired new type.\n \n If the original type and new type are equal, returns this.\n \n The new method handle, when invoked, will perform the following\n steps:\n \nConvert the incoming argument list to match the original\n     method handle's argument list.\n Invoke the original method handle on the converted argument list.\n Convert any result returned by the original method handle\n     to the return type of new method handle.\n \n\n This method provides the crucial behavioral difference between\n invokeExact and plain, inexact invoke.\n The two methods\n perform the same steps when the caller's type descriptor exactly matches\n the callee's, but when the types differ, plain invoke\n also calls asType (or some internal equivalent) in order\n to match up the caller's and callee's types.\n \n If the current method is a variable arity method handle\n argument list conversion may involve the conversion and collection\n of several arguments into an array, as\n described elsewhere.\n In every other case, all conversions are applied pairwise,\n which means that each argument or return value is converted to\n exactly one argument or return value (or no return value).\n The applied conversions are defined by consulting\n the corresponding component types of the old and new\n method handle types.\n \n Let T0 and T1 be corresponding new and old parameter types,\n or old and new return types.  Specifically, for some valid index i, let\n T0=newType.parameterType(i) and T1=this.type().parameterType(i).\n Or else, going the other way for return values, let\n T0=this.type().returnType() and T1=newType.returnType().\n If the types are the same, the new method handle makes no change\n to the corresponding argument or return value (if any).\n Otherwise, one of the following conversions is applied\n if possible:\n \nIf T0 and T1 are references, then a cast to T1 is applied.\n     (The types do not need to be related in any particular way.\n     This is because a dynamic value of null can convert to any reference type.)\n If T0 and T1 are primitives, then a Java method invocation\n     conversion (JLS 5.3) is applied, if one exists.\n     (Specifically, T0 must convert to T1 by a widening primitive conversion.)\n If T0 is a primitive and T1 a reference,\n     a Java casting conversion (JLS 5.5) is applied if one exists.\n     (Specifically, the value is boxed from T0 to its wrapper class,\n     which is then widened as needed to T1.)\n If T0 is a reference and T1 a primitive, an unboxing\n     conversion will be applied at runtime, possibly followed\n     by a Java method invocation conversion (JLS 5.3)\n     on the primitive value.  (These are the primitive widening conversions.)\n     T0 must be a wrapper class or a supertype of one.\n     (In the case where T0 is Object, these are the conversions\n     allowed by java.lang.reflect.Method.invoke.)\n     The unboxing conversion must have a possibility of success, which means that\n     if T0 is not itself a wrapper class, there must exist at least one\n     wrapper class TW which is a subtype of T0 and whose unboxed\n     primitive value can be widened to T1.\n If the return type T1 is marked as void, any returned value is discarded\n If the return type T0 is void and T1 a reference, a null value is introduced.\n If the return type T0 is void and T1 a primitive,\n     a zero value is introduced.\n \n (Note: Both T0 and T1 may be regarded as static types,\n because neither corresponds specifically to the dynamic type of any\n actual argument or return value.)\n \n The method handle conversion cannot be made if any one of the required\n pairwise conversions cannot be made.\n \n At runtime, the conversions applied to reference arguments\n or return values may require additional runtime checks which can fail.\n An unboxing operation may fail because the original reference is null,\n causing a NullPointerException.\n An unboxing operation or a reference cast may also fail on a reference\n to an object of the wrong type,\n causing a ClassCastException.\n Although an unboxing operation may accept several kinds of wrappers,\n if none are available, a ClassCastException will be thrown."}, {"method_name": "asSpreader", "method_sig": "public MethodHandle asSpreader (Class<?> arrayType,\n                               int arrayLength)", "description": "Makes an array-spreading method handle, which accepts a trailing array argument\n and spreads its elements as positional arguments.\n The new method handle adapts, as its target,\n the current method handle.  The type of the adapter will be\n the same as the type of the target, except that the final\n arrayLength parameters of the target's type are replaced\n by a single array parameter of type arrayType.\n \n If the array element type differs from any of the corresponding\n argument types on the original target,\n the original target is adapted to take the array elements directly,\n as if by a call to asType.\n \n When called, the adapter replaces a trailing array argument\n by the array's elements, each as its own argument to the target.\n (The order of the arguments is preserved.)\n They are converted pairwise by casting and/or unboxing\n to the types of the trailing parameters of the target.\n Finally the target is called.\n What the target eventually returns is returned unchanged by the adapter.\n \n Before calling the target, the adapter verifies that the array\n contains exactly enough elements to provide a correct argument count\n to the target method handle.\n (The array may also be null when zero elements are required.)\n \n When the adapter is called, the length of the supplied array\n argument is queried as if by array.length or arraylength\n bytecode. If the adapter accepts a zero-length trailing array argument,\n the supplied array argument can either be a zero-length array or\n null; otherwise, the adapter will throw a NullPointerException\n if the array is null and throw an IllegalArgumentException\n if the array does not have the correct number of elements.\n \n Here are some simple examples of array-spreading method handles:\n \nMethodHandle equals = publicLookup()\n  .findVirtual(String.class, \"equals\", methodType(boolean.class, Object.class));\nassert( (boolean) equals.invokeExact(\"me\", (Object)\"me\"));\nassert(!(boolean) equals.invokeExact(\"me\", (Object)\"thee\"));\n// spread both arguments from a 2-array:\nMethodHandle eq2 = equals.asSpreader(Object[].class, 2);\nassert( (boolean) eq2.invokeExact(new Object[]{ \"me\", \"me\" }));\nassert(!(boolean) eq2.invokeExact(new Object[]{ \"me\", \"thee\" }));\n// try to spread from anything but a 2-array:\nfor (int n = 0; n <= 10; n++) {\n  Object[] badArityArgs = (n == 2 ? new Object[0] : new Object[n]);\n  try { assert((boolean) eq2.invokeExact(badArityArgs) && false); }\n  catch (IllegalArgumentException ex) { } // OK\n}\n// spread both arguments from a String array:\nMethodHandle eq2s = equals.asSpreader(String[].class, 2);\nassert( (boolean) eq2s.invokeExact(new String[]{ \"me\", \"me\" }));\nassert(!(boolean) eq2s.invokeExact(new String[]{ \"me\", \"thee\" }));\n// spread second arguments from a 1-array:\nMethodHandle eq1 = equals.asSpreader(Object[].class, 1);\nassert( (boolean) eq1.invokeExact(\"me\", new Object[]{ \"me\" }));\nassert(!(boolean) eq1.invokeExact(\"me\", new Object[]{ \"thee\" }));\n// spread no arguments from a 0-array or null:\nMethodHandle eq0 = equals.asSpreader(Object[].class, 0);\nassert( (boolean) eq0.invokeExact(\"me\", (Object)\"me\", new Object[0]));\nassert(!(boolean) eq0.invokeExact(\"me\", (Object)\"thee\", (Object[])null));\n// asSpreader and asCollector are approximate inverses:\nfor (int n = 0; n <= 2; n++) {\n    for (Class<?> a : new Class<?>[]{Object[].class, String[].class, CharSequence[].class}) {\n        MethodHandle equals2 = equals.asSpreader(a, n).asCollector(a, n);\n        assert( (boolean) equals2.invokeWithArguments(\"me\", \"me\"));\n        assert(!(boolean) equals2.invokeWithArguments(\"me\", \"thee\"));\n    }\n}\nMethodHandle caToString = publicLookup()\n  .findStatic(Arrays.class, \"toString\", methodType(String.class, char[].class));\nassertEquals(\"[A, B, C]\", (String) caToString.invokeExact(\"ABC\".toCharArray()));\nMethodHandle caString3 = caToString.asCollector(char[].class, 3);\nassertEquals(\"[A, B, C]\", (String) caString3.invokeExact('A', 'B', 'C'));\nMethodHandle caToString2 = caString3.asSpreader(char[].class, 2);\nassertEquals(\"[A, B, C]\", (String) caToString2.invokeExact('A', \"BC\".toCharArray()));\n "}, {"method_name": "asSpreader", "method_sig": "public MethodHandle asSpreader (int spreadArgPos,\n                               Class<?> arrayType,\n                               int arrayLength)", "description": "Makes an array-spreading method handle, which accepts an array argument at a given position and spreads\n its elements as positional arguments in place of the array. The new method handle adapts, as its target,\n the current method handle. The type of the adapter will be the same as the type of the target, except that the\n arrayLength parameters of the target's type, starting at the zero-based position spreadArgPos,\n are replaced by a single array parameter of type arrayType.\n \n This method behaves very much like asSpreader(Class, int), but accepts an additional spreadArgPos\n argument to indicate at which position in the parameter list the spreading should take place."}, {"method_name": "withVarargs", "method_sig": "public MethodHandle withVarargs (boolean makeVarargs)", "description": "Adapts this method handle to be variable arity\n if the boolean flag is true, else fixed arity.\n If the method handle is already of the proper arity mode, it is returned\n unchanged."}, {"method_name": "asCollector", "method_sig": "public MethodHandle asCollector (Class<?> arrayType,\n                                int arrayLength)", "description": "Makes an array-collecting method handle, which accepts a given number of trailing\n positional arguments and collects them into an array argument.\n The new method handle adapts, as its target,\n the current method handle.  The type of the adapter will be\n the same as the type of the target, except that a single trailing\n parameter (usually of type arrayType) is replaced by\n arrayLength parameters whose type is element type of arrayType.\n \n If the array type differs from the final argument type on the original target,\n the original target is adapted to take the array type directly,\n as if by a call to asType.\n \n When called, the adapter replaces its trailing arrayLength\n arguments by a single new array of type arrayType, whose elements\n comprise (in order) the replaced arguments.\n Finally the target is called.\n What the target eventually returns is returned unchanged by the adapter.\n \n (The array may also be a shared constant when arrayLength is zero.)\n \n (Note: The arrayType is often identical to the\n last parameter type\n of the original target.\n It is an explicit argument for symmetry with asSpreader, and also\n to allow the target to use a simple Object as its last parameter type.)\n \n In order to create a collecting adapter which is not restricted to a particular\n number of collected arguments, use asVarargsCollector\n or withVarargs instead.\n \n Here are some examples of array-collecting method handles:\n \nMethodHandle deepToString = publicLookup()\n  .findStatic(Arrays.class, \"deepToString\", methodType(String.class, Object[].class));\nassertEquals(\"[won]\",   (String) deepToString.invokeExact(new Object[]{\"won\"}));\nMethodHandle ts1 = deepToString.asCollector(Object[].class, 1);\nassertEquals(methodType(String.class, Object.class), ts1.type());\n//assertEquals(\"[won]\", (String) ts1.invokeExact(         new Object[]{\"won\"})); //FAIL\nassertEquals(\"[[won]]\", (String) ts1.invokeExact((Object) new Object[]{\"won\"}));\n// arrayType can be a subtype of Object[]\nMethodHandle ts2 = deepToString.asCollector(String[].class, 2);\nassertEquals(methodType(String.class, String.class, String.class), ts2.type());\nassertEquals(\"[two, too]\", (String) ts2.invokeExact(\"two\", \"too\"));\nMethodHandle ts0 = deepToString.asCollector(Object[].class, 0);\nassertEquals(\"[]\", (String) ts0.invokeExact());\n// collectors can be nested, Lisp-style\nMethodHandle ts22 = deepToString.asCollector(Object[].class, 3).asCollector(String[].class, 2);\nassertEquals(\"[A, B, [C, D]]\", ((String) ts22.invokeExact((Object)'A', (Object)\"B\", \"C\", \"D\")));\n// arrayType can be any primitive array type\nMethodHandle bytesToString = publicLookup()\n  .findStatic(Arrays.class, \"toString\", methodType(String.class, byte[].class))\n  .asCollector(byte[].class, 3);\nassertEquals(\"[1, 2, 3]\", (String) bytesToString.invokeExact((byte)1, (byte)2, (byte)3));\nMethodHandle longsToString = publicLookup()\n  .findStatic(Arrays.class, \"toString\", methodType(String.class, long[].class))\n  .asCollector(long[].class, 1);\nassertEquals(\"[123]\", (String) longsToString.invokeExact((long)123));\n \n\nNote: The resulting adapter is never a variable-arity method handle, even if the original target method handle was."}, {"method_name": "asCollector", "method_sig": "public MethodHandle asCollector (int collectArgPos,\n                                Class<?> arrayType,\n                                int arrayLength)", "description": "Makes an array-collecting method handle, which accepts a given number of positional arguments starting\n at a given position, and collects them into an array argument. The new method handle adapts, as its\n target, the current method handle. The type of the adapter will be the same as the type of the target,\n except that the parameter at the position indicated by collectArgPos (usually of type arrayType)\n is replaced by arrayLength parameters whose type is element type of arrayType.\n \n This method behaves very much like asCollector(Class, int), but differs in that its \n collectArgPos argument indicates at which position in the parameter list arguments should be collected. This\n index is zero-based."}, {"method_name": "asVarargsCollector", "method_sig": "public MethodHandle asVarargsCollector (Class<?> arrayType)", "description": "Makes a variable arity adapter which is able to accept\n any number of trailing positional arguments and collect them\n into an array argument.\n \n The type and behavior of the adapter will be the same as\n the type and behavior of the target, except that certain\n invoke and asType requests can lead to\n trailing positional arguments being collected into target's\n trailing parameter.\n Also, the\n last parameter type\n of the adapter will be\n arrayType, even if the target has a different\n last parameter type.\n \n This transformation may return this if the method handle is\n already of variable arity and its trailing parameter type\n is identical to arrayType.\n \n When called with invokeExact, the adapter invokes\n the target with no argument changes.\n (Note: This behavior is different from a\n fixed arity collector,\n since it accepts a whole array of indeterminate length,\n rather than a fixed number of arguments.)\n \n When called with plain, inexact invoke, if the caller\n type is the same as the adapter, the adapter invokes the target as with\n invokeExact.\n (This is the normal behavior for invoke when types match.)\n \n Otherwise, if the caller and adapter arity are the same, and the\n trailing parameter type of the caller is a reference type identical to\n or assignable to the trailing parameter type of the adapter,\n the arguments and return values are converted pairwise,\n as if by asType on a fixed arity\n method handle.\n \n Otherwise, the arities differ, or the adapter's trailing parameter\n type is not assignable from the corresponding caller type.\n In this case, the adapter replaces all trailing arguments from\n the original trailing argument position onward, by\n a new array of type arrayType, whose elements\n comprise (in order) the replaced arguments.\n \n The caller type must provides as least enough arguments,\n and of the correct type, to satisfy the target's requirement for\n positional arguments before the trailing array argument.\n Thus, the caller must supply, at a minimum, N-1 arguments,\n where N is the arity of the target.\n Also, there must exist conversions from the incoming arguments\n to the target's arguments.\n As with other uses of plain invoke, if these basic\n requirements are not fulfilled, a WrongMethodTypeException\n may be thrown.\n \n In all cases, what the target eventually returns is returned unchanged by the adapter.\n \n In the final case, it is exactly as if the target method handle were\n temporarily adapted with a fixed arity collector\n to the arity required by the caller type.\n (As with asCollector, if the array length is zero,\n a shared constant may be used instead of a new array.\n If the implied call to asCollector would throw\n an IllegalArgumentException or WrongMethodTypeException,\n the call to the variable arity adapter must throw\n WrongMethodTypeException.)\n \n The behavior of asType is also specialized for\n variable arity adapters, to maintain the invariant that\n plain, inexact invoke is always equivalent to an asType\n call to adjust the target type, followed by invokeExact.\n Therefore, a variable arity adapter responds\n to an asType request by building a fixed arity collector,\n if and only if the adapter and requested type differ either\n in arity or trailing argument type.\n The resulting fixed arity collector has its type further adjusted\n (if necessary) to the requested type by pairwise conversion,\n as if by another application of asType.\n \n When a method handle is obtained by executing an ldc instruction\n of a CONSTANT_MethodHandle constant, and the target method is marked\n as a variable arity method (with the modifier bit 0x0080),\n the method handle will accept multiple arities, as if the method handle\n constant were created by means of a call to asVarargsCollector.\n \n In order to create a collecting adapter which collects a predetermined\n number of arguments, and whose type reflects this predetermined number,\n use asCollector instead.\n \n No method handle transformations produce new method handles with\n variable arity, unless they are documented as doing so.\n Therefore, besides asVarargsCollector and withVarargs,\n all methods in MethodHandle and MethodHandles\n will return a method handle with fixed arity,\n except in the cases where they are specified to return their original\n operand (e.g., asType of the method handle's own type).\n \n Calling asVarargsCollector on a method handle which is already\n of variable arity will produce a method handle with the same type and behavior.\n It may (or may not) return the original variable arity method handle.\n \n Here is an example, of a list-making variable arity method handle:\n \nMethodHandle deepToString = publicLookup()\n  .findStatic(Arrays.class, \"deepToString\", methodType(String.class, Object[].class));\nMethodHandle ts1 = deepToString.asVarargsCollector(Object[].class);\nassertEquals(\"[won]\",   (String) ts1.invokeExact(    new Object[]{\"won\"}));\nassertEquals(\"[won]\",   (String) ts1.invoke(         new Object[]{\"won\"}));\nassertEquals(\"[won]\",   (String) ts1.invoke(                      \"won\" ));\nassertEquals(\"[[won]]\", (String) ts1.invoke((Object) new Object[]{\"won\"}));\n// findStatic of Arrays.asList(...) produces a variable arity method handle:\nMethodHandle asList = publicLookup()\n  .findStatic(Arrays.class, \"asList\", methodType(List.class, Object[].class));\nassertEquals(methodType(List.class, Object[].class), asList.type());\nassert(asList.isVarargsCollector());\nassertEquals(\"[]\", asList.invoke().toString());\nassertEquals(\"[1]\", asList.invoke(1).toString());\nassertEquals(\"[two, too]\", asList.invoke(\"two\", \"too\").toString());\nString[] argv = { \"three\", \"thee\", \"tee\" };\nassertEquals(\"[three, thee, tee]\", asList.invoke(argv).toString());\nassertEquals(\"[three, thee, tee]\", asList.invoke((Object[])argv).toString());\nList ls = (List) asList.invoke((Object)argv);\nassertEquals(1, ls.size());\nassertEquals(\"[three, thee, tee]\", Arrays.toString((Object[])ls.get(0)));\n \n\nDiscussion:\n These rules are designed as a dynamically-typed variation\n of the Java rules for variable arity methods.\n In both cases, callers to a variable arity method or method handle\n can either pass zero or more positional arguments, or else pass\n pre-collected arrays of any length.  Users should be aware of the\n special role of the final argument, and of the effect of a\n type match on that final argument, which determines whether\n or not a single trailing argument is interpreted as a whole\n array or a single element of an array to be collected.\n Note that the dynamic type of the trailing argument has no\n effect on this decision, only a comparison between the symbolic\n type descriptor of the call site and the type descriptor of the method handle.)"}, {"method_name": "isVarargsCollector", "method_sig": "public boolean isVarargsCollector()", "description": "Determines if this method handle\n supports variable arity calls.\n Such method handles arise from the following sources:\n \na call to asVarargsCollector\na call to a lookup method\n     which resolves to a variable arity Java method or constructor\n an ldc instruction of a CONSTANT_MethodHandle\n     which resolves to a variable arity Java method or constructor\n "}, {"method_name": "asFixedArity", "method_sig": "public MethodHandle asFixedArity()", "description": "Makes a fixed arity method handle which is otherwise\n equivalent to the current method handle.\n \n If the current method handle is not of\n variable arity,\n the current method handle is returned.\n This is true even if the current method handle\n could not be a valid input to asVarargsCollector.\n \n Otherwise, the resulting fixed-arity method handle has the same\n type and behavior of the current method handle,\n except that isVarargsCollector\n will be false.\n The fixed-arity method handle may (or may not) be the\n a previous argument to asVarargsCollector.\n \n Here is an example, of a list-making variable arity method handle:\n \nMethodHandle asListVar = publicLookup()\n  .findStatic(Arrays.class, \"asList\", methodType(List.class, Object[].class))\n  .asVarargsCollector(Object[].class);\nMethodHandle asListFix = asListVar.asFixedArity();\nassertEquals(\"[1]\", asListVar.invoke(1).toString());\nException caught = null;\ntry { asListFix.invoke((Object)1); }\ncatch (Exception ex) { caught = ex; }\nassert(caught instanceof ClassCastException);\nassertEquals(\"[two, too]\", asListVar.invoke(\"two\", \"too\").toString());\ntry { asListFix.invoke(\"two\", \"too\"); }\ncatch (Exception ex) { caught = ex; }\nassert(caught instanceof WrongMethodTypeException);\nObject[] argv = { \"three\", \"thee\", \"tee\" };\nassertEquals(\"[three, thee, tee]\", asListVar.invoke(argv).toString());\nassertEquals(\"[three, thee, tee]\", asListFix.invoke(argv).toString());\nassertEquals(1, ((List) asListVar.invoke((Object)argv)).size());\nassertEquals(\"[three, thee, tee]\", asListFix.invoke((Object)argv).toString());\n "}, {"method_name": "bindTo", "method_sig": "public MethodHandle bindTo (Object x)", "description": "Binds a value x to the first argument of a method handle, without invoking it.\n The new method handle adapts, as its target,\n the current method handle by binding it to the given argument.\n The type of the bound handle will be\n the same as the type of the target, except that a single leading\n reference parameter will be omitted.\n \n When called, the bound handle inserts the given value x\n as a new leading argument to the target.  The other arguments are\n also passed unchanged.\n What the target eventually returns is returned unchanged by the bound handle.\n \n The reference x must be convertible to the first parameter\n type of the target.\n \nNote:  Because method handles are immutable, the target method handle\n retains its original type and behavior.\n \nNote: The resulting adapter is never a variable-arity method handle, even if the original target method handle was."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a string representation of the method handle,\n starting with the string \"MethodHandle\" and\n ending with the string representation of the method handle's type.\n In other words, this method returns a string equal to the value of:\n \n \"MethodHandle\" + type().toString()\n \n\n (Note:  Future releases of this API may add further information\n to the string representation.\n Therefore, the present syntax should not be parsed by applications.)"}]}