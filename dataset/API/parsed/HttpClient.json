{"name": "Class HttpClient", "module": "java.net.http", "package": "java.net.http", "text": "An HTTP Client.\n\n  An HttpClient can be used to send requests and retrieve their responses. An \n HttpClient is created through a builder. The\n builder can be used to configure per-client state, like: the preferred\n protocol version ( HTTP/1.1 or HTTP/2 ), whether to follow redirects, a\n proxy, an authenticator, etc. Once built, an HttpClient is immutable,\n and can be used to send multiple requests.\n\n  An HttpClient provides configuration information, and resource\n sharing, for all requests sent through it.\n\n  A BodyHandler must be supplied for each HttpRequest sent. The BodyHandler determines how to handle the\n response body, if any. Once an HttpResponse is received, the\n headers, response code, and body (typically) are available. Whether the\n response body bytes have been read or not depends on the type, T, of\n the response body.\n\n  Requests can be sent either synchronously or asynchronously:\n \nsend(HttpRequest, BodyHandler) blocks\n     until the request has been sent and the response has been received.\nsendAsync(HttpRequest, BodyHandler) sends the\n     request and receives the response asynchronously. The sendAsync\n     method returns immediately with a CompletableFuture<HttpResponse>. The \n     CompletableFuture completes when the response becomes available. The\n     returned CompletableFuture can be combined in different ways to\n     declare dependencies among several asynchronous tasks.\n\nSynchronous Example\n   HttpClient client = HttpClient.newBuilder()\n        .version(Version.HTTP_1_1)\n        .followRedirects(Redirect.NORMAL)\n        .connectTimeout(Duration.ofSeconds(20))\n        .proxy(ProxySelector.of(new InetSocketAddress(\"proxy.example.com\", 80)))\n        .authenticator(Authenticator.getDefault())\n        .build();\n   HttpResponse<String> response = client.send(request, BodyHandlers.ofString());\n   System.out.println(response.statusCode());\n   System.out.println(response.body());  \nAsynchronous Example\n   HttpRequest request = HttpRequest.newBuilder()\n        .uri(URI.create(\"https://foo.com/\"))\n        .timeout(Duration.ofMinutes(2))\n        .header(\"Content-Type\", \"application/json\")\n        .POST(BodyPublishers.ofFile(Paths.get(\"file.json\")))\n        .build();\n   client.sendAsync(request, BodyHandlers.ofString())\n        .thenApply(HttpResponse::body)\n        .thenAccept(System.out::println);  \n Security checks", "codes": ["public abstract class HttpClient\nextends Object"], "fields": [], "methods": [{"method_name": "newHttpClient", "method_sig": "public static HttpClient newHttpClient()", "description": "Returns a new HttpClient with default settings.\n\n  Equivalent to newBuilder().build().\n\n  The default settings include: the \"GET\" request method, a preference\n of HTTP/2, a redirection policy of\n NEVER, the default proxy selector, and the default SSL context."}, {"method_name": "newBuilder", "method_sig": "public static HttpClient.Builder newBuilder()", "description": "Creates a new HttpClient builder."}, {"method_name": "cookieHandler", "method_sig": "public abstract Optional<CookieHandler> cookieHandler()", "description": "Returns an Optional containing this client's CookieHandler. If no CookieHandler was set in this client's\n builder, then the Optional is empty."}, {"method_name": "connectTimeout", "method_sig": "public abstract Optional<Duration> connectTimeout()", "description": "Returns an Optional containing the connect timeout duration\n for this client. If the connect timeout duration was not set in the client's builder, then the\n Optional is empty."}, {"method_name": "followRedirects", "method_sig": "public abstract HttpClient.Redirect followRedirects()", "description": "Returns the follow redirects policy for this client. The default value\n for client's built by builders that do not specify a redirect policy is\n NEVER."}, {"method_name": "proxy", "method_sig": "public abstract Optional<ProxySelector> proxy()", "description": "Returns an Optional containing the ProxySelector\n supplied to this client. If no proxy selector was set in this client's\n builder, then the Optional is empty.\n\n  Even though this method may return an empty optional, the \n HttpClient may still have a non-exposed default proxy selector that is\n used for sending HTTP requests."}, {"method_name": "sslContext", "method_sig": "public abstract SSLContext sslContext()", "description": "Returns this client's SSLContext.\n\n  If no SSLContext was set in this client's builder, then the\n default context is returned."}, {"method_name": "sslParameters", "method_sig": "public abstract SSLParameters sslParameters()", "description": "Returns a copy of this client's SSLParameters.\n\n  If no SSLParameters were set in the client's builder, then an\n implementation specific default set of parameters, that the client will\n use, is returned."}, {"method_name": "authenticator", "method_sig": "public abstract Optional<Authenticator> authenticator()", "description": "Returns an Optional containing the Authenticator set on\n this client. If no Authenticator was set in the client's builder,\n then the Optional is empty."}, {"method_name": "version", "method_sig": "public abstract HttpClient.Version version()", "description": "Returns the preferred HTTP protocol version for this client. The default\n value is HttpClient.Version.HTTP_2"}, {"method_name": "executor", "method_sig": "public abstract Optional<Executor> executor()", "description": "Returns an Optional containing this client's Executor. If no Executor was set in the client's builder,\n then the Optional is empty.\n\n  Even though this method may return an empty optional, the \n HttpClient may still have an non-exposed default executor that is used for\n executing asynchronous and dependent tasks."}, {"method_name": "send", "method_sig": "public abstract <T> HttpResponse<T> send (HttpRequest request,\n                                         HttpResponse.BodyHandler<T> responseBodyHandler)\n                                  throws IOException,\n                                         InterruptedException", "description": "Sends the given request using this client, blocking if necessary to get\n the response. The returned HttpResponse<T> contains the\n response status, headers, and body ( as handled by given response body\n handler )."}, {"method_name": "sendAsync", "method_sig": "public abstract <T> CompletableFuture<HttpResponse<T>> sendAsync (HttpRequest request,\n                                                                 HttpResponse.BodyHandler<T> responseBodyHandler)", "description": "Sends the given request asynchronously using this client with the given\n response body handler.\n\n  Equivalent to: sendAsync(request, responseBodyHandler, null)."}, {"method_name": "sendAsync", "method_sig": "public abstract <T> CompletableFuture<HttpResponse<T>> sendAsync (HttpRequest request,\n                                                                 HttpResponse.BodyHandler<T> responseBodyHandler,\n                                                                 HttpResponse.PushPromiseHandler<T> pushPromiseHandler)", "description": "Sends the given request asynchronously using this client with the given\n response body handler and push promise handler.\n\n  The returned completable future, if completed successfully, completes\n with an HttpResponse<T> that contains the response status,\n headers, and body ( as handled by given response body handler ).\n\n  Push promises received, if any, are\n handled by the given pushPromiseHandler. A null valued\n pushPromiseHandler rejects any push promises.\n\n  The returned completable future completes exceptionally with:\n \nIOException - if an I/O error occurs when sending or receiving\nSecurityException - If a security manager has been installed\n          and it denies access to the\n          URL in the given request, or proxy if one is configured.\n          See security checks for further\n          information.\n"}, {"method_name": "newWebSocketBuilder", "method_sig": "public WebSocket.Builder newWebSocketBuilder()", "description": "Creates a new WebSocket builder (optional operation).\n\n  Example\n   HttpClient client = HttpClient.newHttpClient();\n   CompletableFuture<WebSocket> ws = client.newWebSocketBuilder()\n           .buildAsync(URI.create(\"ws://websocket.example.com\"), listener); \n Finer control over the WebSocket Opening Handshake can be achieved\n by using a custom HttpClient.\n\n  Example\n   InetSocketAddress addr = new InetSocketAddress(\"proxy.example.com\", 80);\n   HttpClient client = HttpClient.newBuilder()\n           .proxy(ProxySelector.of(addr))\n           .build();\n   CompletableFuture<WebSocket> ws = client.newWebSocketBuilder()\n           .buildAsync(URI.create(\"ws://websocket.example.com\"), listener); "}]}