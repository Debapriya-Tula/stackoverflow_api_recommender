{"name": "Class ManagementFactory", "module": "java.management", "package": "java.lang.management", "text": "The ManagementFactory class is a factory class for getting\n managed beans for the Java platform.\n This class consists of static methods each of which returns\n one or more platform MXBeans representing\n the management interface of a component of the Java virtual\n machine.\n\n Platform MXBeans\n\n A platform MXBean is a managed bean that\n conforms to the JMX\n Instrumentation Specification and only uses a set of basic data types.\n A JMX management application and the platform MBeanServer\n can interoperate without requiring classes for MXBean specific\n data types.\n The data types being transmitted between the JMX connector\n server and the connector client are\n open types\n and this allows interoperation across versions.\n See \n the specification of MXBeans for details.\n\n \nEach platform MXBean is a PlatformManagedObject\n and it has a unique\n ObjectName for\n registration in the platform MBeanServer as returned by\n by the getObjectName\n method.\n\n \n An application can access a platform MXBean in the following ways:\n 1. Direct access to an MXBean interface\n\n\nGet an MXBean instance by calling the\n         getPlatformMXBean or\n         getPlatformMXBeans method\n         and access the MXBean locally in the running\n         virtual machine.\n         \nConstruct an MXBean proxy instance that forwards the\n         method calls to a given MBeanServer by calling\n         the getPlatformMXBean(MBeanServerConnection, Class) or\n         getPlatformMXBeans(MBeanServerConnection, Class) method.\n         The newPlatformMXBeanProxy method\n         can also be used to construct an MXBean proxy instance of\n         a given ObjectName.\n         A proxy is typically constructed to remotely access\n         an MXBean of another running virtual machine.\n         \n\n2. Indirect access to an MXBean interface via MBeanServer\n\nGo through the platform MBeanServer to access MXBeans\n         locally or a specific MBeanServerConnection to access\n         MXBeans remotely.\n         The attributes and operations of an MXBean use only\n         JMX open types which include basic data types,\n         CompositeData,\n         and TabularData\n         defined in\n         OpenType.\n         The mapping is specified in\n         the MXBean specification\n         for details.\n        \n\n\n\n The getPlatformManagementInterfaces\n method returns all management interfaces supported in the Java virtual machine\n including the standard management interfaces listed in the tables\n below as well as the management interfaces extended by the JDK implementation.\n \n A Java virtual machine has a single instance of the following management\n interfaces:\n\n \nThe list of Management Interfaces and their single instances\n\n\nManagement Interface\nObjectName\n\n\n\n\n ClassLoadingMXBean \n java.lang:type=ClassLoading\n\n\n MemoryMXBean \n java.lang:type=Memory\n\n\n ThreadMXBean \n java.lang:type=Threading\n\n\n RuntimeMXBean \n java.lang:type=Runtime\n\n\n OperatingSystemMXBean \n java.lang:type=OperatingSystem\n\n\n PlatformLoggingMXBean \n java.util.logging:type=Logging\n\n\n\n\n A Java virtual machine has zero or a single instance of\n the following management interfaces.\n\n \nThe list of Management Interfaces and their single instances\n\n\nManagement Interface\nObjectName\n\n\n\n\n CompilationMXBean \n java.lang:type=Compilation\n\n\n\n\n A Java virtual machine may have one or more instances of the following\n management interfaces.\n \nThe list of Management Interfaces and their single instances\n\n\nManagement Interface\nObjectName\n\n\n\n\n GarbageCollectorMXBean \n java.lang:type=GarbageCollector,name=collector's name\n\n\n MemoryManagerMXBean \n java.lang:type=MemoryManager,name=manager's name\n\n\n MemoryPoolMXBean \n java.lang:type=MemoryPool,name=pool's name\n\n\n BufferPoolMXBean \n java.nio:type=BufferPool,name=pool name\n\n\n", "codes": ["public class ManagementFactory\nextends Object"], "fields": [{"field_name": "CLASS_LOADING_MXBEAN_NAME", "field_sig": "public static final\u00a0String CLASS_LOADING_MXBEAN_NAME", "description": "String representation of the\n ObjectName for the ClassLoadingMXBean."}, {"field_name": "COMPILATION_MXBEAN_NAME", "field_sig": "public static final\u00a0String COMPILATION_MXBEAN_NAME", "description": "String representation of the\n ObjectName for the CompilationMXBean."}, {"field_name": "MEMORY_MXBEAN_NAME", "field_sig": "public static final\u00a0String MEMORY_MXBEAN_NAME", "description": "String representation of the\n ObjectName for the MemoryMXBean."}, {"field_name": "OPERATING_SYSTEM_MXBEAN_NAME", "field_sig": "public static final\u00a0String OPERATING_SYSTEM_MXBEAN_NAME", "description": "String representation of the\n ObjectName for the OperatingSystemMXBean."}, {"field_name": "RUNTIME_MXBEAN_NAME", "field_sig": "public static final\u00a0String RUNTIME_MXBEAN_NAME", "description": "String representation of the\n ObjectName for the RuntimeMXBean."}, {"field_name": "THREAD_MXBEAN_NAME", "field_sig": "public static final\u00a0String THREAD_MXBEAN_NAME", "description": "String representation of the\n ObjectName for the ThreadMXBean."}, {"field_name": "GARBAGE_COLLECTOR_MXBEAN_DOMAIN_TYPE", "field_sig": "public static final\u00a0String GARBAGE_COLLECTOR_MXBEAN_DOMAIN_TYPE", "description": "The domain name and the type key property in\n the ObjectName for a GarbageCollectorMXBean.\n The unique ObjectName for a GarbageCollectorMXBean\n can be formed by appending this string with\n \",name=collector's name\"."}, {"field_name": "MEMORY_MANAGER_MXBEAN_DOMAIN_TYPE", "field_sig": "public static final\u00a0String MEMORY_MANAGER_MXBEAN_DOMAIN_TYPE", "description": "The domain name and the type key property in\n the ObjectName for a MemoryManagerMXBean.\n The unique ObjectName for a MemoryManagerMXBean\n can be formed by appending this string with\n \",name=manager's name\"."}, {"field_name": "MEMORY_POOL_MXBEAN_DOMAIN_TYPE", "field_sig": "public static final\u00a0String MEMORY_POOL_MXBEAN_DOMAIN_TYPE", "description": "The domain name and the type key property in\n the ObjectName for a MemoryPoolMXBean.\n The unique ObjectName for a MemoryPoolMXBean\n can be formed by appending this string with\n ,name=pool's name."}], "methods": [{"method_name": "getClassLoadingMXBean", "method_sig": "public static ClassLoadingMXBean getClassLoadingMXBean()", "description": "Returns the managed bean for the class loading system of\n the Java virtual machine."}, {"method_name": "getMemoryMXBean", "method_sig": "public static MemoryMXBean getMemoryMXBean()", "description": "Returns the managed bean for the memory system of\n the Java virtual machine."}, {"method_name": "getThreadMXBean", "method_sig": "public static ThreadMXBean getThreadMXBean()", "description": "Returns the managed bean for the thread system of\n the Java virtual machine."}, {"method_name": "getRuntimeMXBean", "method_sig": "public static RuntimeMXBean getRuntimeMXBean()", "description": "Returns the managed bean for the runtime system of\n the Java virtual machine."}, {"method_name": "getCompilationMXBean", "method_sig": "public static CompilationMXBean getCompilationMXBean()", "description": "Returns the managed bean for the compilation system of\n the Java virtual machine.  This method returns null\n if the Java virtual machine has no compilation system."}, {"method_name": "getOperatingSystemMXBean", "method_sig": "public static OperatingSystemMXBean getOperatingSystemMXBean()", "description": "Returns the managed bean for the operating system on which\n the Java virtual machine is running."}, {"method_name": "getMemoryPoolMXBeans", "method_sig": "public static List<MemoryPoolMXBean> getMemoryPoolMXBeans()", "description": "Returns a list of MemoryPoolMXBean objects in the\n Java virtual machine.\n The Java virtual machine can have one or more memory pools.\n It may add or remove memory pools during execution."}, {"method_name": "getMemoryManagerMXBeans", "method_sig": "public static List<MemoryManagerMXBean> getMemoryManagerMXBeans()", "description": "Returns a list of MemoryManagerMXBean objects\n in the Java virtual machine.\n The Java virtual machine can have one or more memory managers.\n It may add or remove memory managers during execution."}, {"method_name": "getGarbageCollectorMXBeans", "method_sig": "public static List<GarbageCollectorMXBean> getGarbageCollectorMXBeans()", "description": "Returns a list of GarbageCollectorMXBean objects\n in the Java virtual machine.\n The Java virtual machine may have one or more\n GarbageCollectorMXBean objects.\n It may add or remove GarbageCollectorMXBean\n during execution."}, {"method_name": "getPlatformMBeanServer", "method_sig": "public static MBeanServer getPlatformMBeanServer()", "description": "Returns the platform MBeanServer.\n On the first call to this method, it first creates the platform\n MBeanServer by calling the\n MBeanServerFactory.createMBeanServer\n method and registers each platform MXBean in this platform\n MBeanServer with its\n ObjectName.\n This method, in subsequent calls, will simply return the\n initially created platform MBeanServer.\n \n MXBeans that get created and destroyed dynamically, for example,\n memory pools and\n managers,\n will automatically be registered and deregistered into the platform\n MBeanServer.\n \n If the system property javax.management.builder.initial\n is set, the platform MBeanServer creation will be done\n by the specified MBeanServerBuilder.\n \n It is recommended that this platform MBeanServer also be used\n to register other application managed beans\n besides the platform MXBeans.\n This will allow all MBeans to be published through the same\n MBeanServer and hence allow for easier network publishing\n and discovery.\n Name conflicts with the platform MXBeans should be avoided."}, {"method_name": "newPlatformMXBeanProxy", "method_sig": "public static <T> T newPlatformMXBeanProxy (MBeanServerConnection connection,\n                                           String mxbeanName,\n                                           Class<T> mxbeanInterface)\n                                    throws IOException", "description": "Returns a proxy for a platform MXBean interface of a\n given MXBean name\n that forwards its method calls through the given\n MBeanServerConnection.\n\n This method is equivalent to:\n \nProxy.newProxyInstance(mxbeanInterface.getClassLoader(),\n        new Class[] { mxbeanInterface }, handler)\n\n\n where handler is an InvocationHandler to which method invocations to the MXBean interface\n are dispatched. This handler converts an input parameter\n from an MXBean data type to its mapped open type before forwarding\n to the MBeanServer and converts a return value from\n an MXBean method call through the MBeanServer\n from an open type to the corresponding return type declared in\n the MXBean interface.\n\n \n If the MXBean is a notification emitter (i.e.,\n it implements\n NotificationEmitter),\n both the mxbeanInterface and NotificationEmitter\n will be implemented by this proxy.\n\n \nNotes:\n\nUsing an MXBean proxy is a convenience remote access to\n a platform MXBean of a running virtual machine.  All method\n calls to the MXBean proxy are forwarded to an\n MBeanServerConnection where\n IOException may be thrown\n when the communication problem occurs with the connector server.\n If thrown, IOException will be wrappped in\n UndeclaredThrowableException.\n An application remotely accessing the platform MXBeans using\n proxy should prepare to catch UndeclaredThrowableException and\n handle its cause\n as if that cause had been thrown by the MBeanServerConnection\n interface.\nWhen a client application is designed to remotely access MXBeans\n for a running virtual machine whose version is different than\n the version on which the application is running,\n it should prepare to catch\n InvalidObjectException\n which is thrown when an MXBean proxy receives a name of an\n enum constant which is missing in the enum class loaded in\n the client application.   If thrown,\n InvalidObjectException will be\n wrappped in\n UndeclaredThrowableException.\n \nMBeanServerInvocationHandler or its\n newProxyInstance method cannot be used to create\n a proxy for a platform MXBean. The proxy object created\n by MBeanServerInvocationHandler does not handle\n the properties of the platform MXBeans described in\n the class specification.\n\n"}, {"method_name": "getPlatformMXBean", "method_sig": "public static <T extends PlatformManagedObject> T getPlatformMXBean (Class<T> mxbeanInterface)", "description": "Returns the platform MXBean implementing\n the given mxbeanInterface which is specified\n to have one single instance in the Java virtual machine.\n This method may return null if the management interface\n is not implemented in the Java virtual machine (for example,\n a Java virtual machine with no compilation system does not\n implement CompilationMXBean);\n otherwise, this method is equivalent to calling:\n \n    getPlatformMXBeans(mxbeanInterface).get(0);\n "}, {"method_name": "getPlatformMXBeans", "method_sig": "public static <T extends PlatformManagedObject> List<T> getPlatformMXBeans (Class<T> mxbeanInterface)", "description": "Returns the list of platform MXBeans implementing\n the given mxbeanInterface in the Java\n virtual machine.\n The returned list may contain zero, one, or more instances.\n The number of instances in the returned list is defined\n in the specification of the given management interface.\n The order is undefined and there is no guarantee that\n the list returned is in the same order as previous invocations."}, {"method_name": "getPlatformMXBean", "method_sig": "public static <T extends PlatformManagedObject> T getPlatformMXBean (MBeanServerConnection connection,\n                                                                    Class<T> mxbeanInterface)\n                                                             throws IOException", "description": "Returns the platform MXBean proxy for\n mxbeanInterface which is specified to have one single\n instance in a Java virtual machine and the proxy will\n forward the method calls through the given MBeanServerConnection.\n This method may return null if the management interface\n is not implemented in the Java virtual machine being monitored\n (for example, a Java virtual machine with no compilation system\n does not implement CompilationMXBean);\n otherwise, this method is equivalent to calling:\n \n     getPlatformMXBeans(connection, mxbeanInterface).get(0);\n "}, {"method_name": "getPlatformMXBeans", "method_sig": "public static <T extends PlatformManagedObject> List<T> getPlatformMXBeans (MBeanServerConnection connection,\n                                                                           Class<T> mxbeanInterface)\n                                                                    throws IOException", "description": "Returns the list of the platform MXBean proxies for\n forwarding the method calls of the mxbeanInterface\n through the given MBeanServerConnection.\n The returned list may contain zero, one, or more instances.\n The number of instances in the returned list is defined\n in the specification of the given management interface.\n The order is undefined and there is no guarantee that\n the list returned is in the same order as previous invocations."}, {"method_name": "getPlatformManagementInterfaces", "method_sig": "public static Set<Class<? extends PlatformManagedObject>> getPlatformManagementInterfaces()", "description": "Returns the set of Class objects, subinterface of\n PlatformManagedObject, representing\n all management interfaces for\n monitoring and managing the Java platform."}]}