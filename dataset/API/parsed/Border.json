{"name": "Interface Border", "module": "java.desktop", "package": "javax.swing.border", "text": "Interface describing an object capable of rendering a border\n around the edges of a swing component.\n For examples of using borders see\n How to Use Borders,\n a section in The Java Tutorial.\n\n In the Swing component set, borders supercede Insets as the\n mechanism for creating a (decorated or plain) area around the\n edge of a component.\n \n Usage Notes:\n \nUse EmptyBorder to create a plain border (this mechanism\n     replaces its predecessor, setInsets).\n Use CompoundBorder to nest multiple border objects, creating\n     a single, combined border.\n Border instances are designed to be shared. Rather than creating\n     a new border object using one of border classes, use the\n     BorderFactory methods, which produces a shared instance of the\n     common border types.\n Additional border styles include BevelBorder, SoftBevelBorder,\n     EtchedBorder, LineBorder, TitledBorder, and MatteBorder.\n To create a new border class, subclass AbstractBorder.\n ", "codes": ["public interface Border"], "fields": [], "methods": [{"method_name": "paintBorder", "method_sig": "void paintBorder (Component c,\n                 Graphics g,\n                 int x,\n                 int y,\n                 int width,\n                 int height)", "description": "Paints the border for the specified component with the specified\n position and size."}, {"method_name": "getBorderInsets", "method_sig": "Insets getBorderInsets (Component c)", "description": "Returns the insets of the border."}, {"method_name": "isBorderOpaque", "method_sig": "boolean isBorderOpaque()", "description": "Returns whether or not the border is opaque.  If the border\n is opaque, it is responsible for filling in it's own\n background when painting."}]}