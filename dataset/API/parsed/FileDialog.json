{"name": "Class FileDialog", "module": "java.desktop", "package": "java.awt", "text": "The FileDialog class displays a dialog window\n from which the user can select a file.\n \n Since it is a modal dialog, when the application calls\n its show method to display the dialog,\n it blocks the rest of the application until the user has\n chosen a file.", "codes": ["public class FileDialog\nextends Dialog"], "fields": [{"field_name": "LOAD", "field_sig": "public static final\u00a0int LOAD", "description": "This constant value indicates that the purpose of the file\n dialog window is to locate a file from which to read."}, {"field_name": "SAVE", "field_sig": "public static final\u00a0int SAVE", "description": "This constant value indicates that the purpose of the file\n dialog window is to locate a file to which to write."}], "methods": [{"method_name": "setTitle", "method_sig": "public void setTitle (String title)", "description": "Sets the title of the Dialog.\n \nNote: Some platforms may not support\n showing the user-specified title in a file dialog.\n In this situation, either no title will be displayed in the file dialog's\n title bar or, on some systems, the file dialog's title bar will not be\n displayed."}, {"method_name": "addNotify", "method_sig": "public void addNotify()", "description": "Creates the file dialog's peer.  The peer allows us to change the look\n of the file dialog without changing its functionality."}, {"method_name": "getMode", "method_sig": "public int getMode()", "description": "Indicates whether this file dialog box is for loading from a file\n or for saving to a file."}, {"method_name": "setMode", "method_sig": "public void setMode (int mode)", "description": "Sets the mode of the file dialog.  If mode is not\n a legal value, an exception will be thrown and mode\n will not be set."}, {"method_name": "getDirectory", "method_sig": "public String getDirectory()", "description": "Gets the directory of this file dialog."}, {"method_name": "setDirectory", "method_sig": "public void setDirectory (String dir)", "description": "Sets the directory of this file dialog window to be the\n specified directory. Specifying a null or an\n invalid directory implies an implementation-defined default.\n This default will not be realized, however, until the user\n has selected a file. Until this point, getDirectory()\n will return the value passed into this method.\n \n Specifying \"\" as the directory is exactly equivalent to\n specifying null as the directory."}, {"method_name": "getFile", "method_sig": "public String getFile()", "description": "Gets the selected file of this file dialog.  If the user\n selected CANCEL, the returned file is null."}, {"method_name": "getFiles", "method_sig": "public File[] getFiles()", "description": "Returns files that the user selects.\n \n If the user cancels the file dialog,\n then the method returns an empty array."}, {"method_name": "setFile", "method_sig": "public void setFile (String file)", "description": "Sets the selected file for this file dialog window to be the\n specified file. This file becomes the default file if it is set\n before the file dialog window is first shown.\n \n When the dialog is shown, the specified file is selected. The kind of\n selection depends on the file existence, the dialog type, and the native\n platform. E.g., the file could be highlighted in the file list, or a\n file name editbox could be populated with the file name.\n \n This method accepts either a full file path, or a file name with an\n extension if used together with the setDirectory method.\n \n Specifying \"\" as the file is exactly equivalent to specifying\n null as the file."}, {"method_name": "setMultipleMode", "method_sig": "public void setMultipleMode (boolean enable)", "description": "Enables or disables multiple file selection for the file dialog."}, {"method_name": "isMultipleMode", "method_sig": "public boolean isMultipleMode()", "description": "Returns whether the file dialog allows the multiple file selection."}, {"method_name": "getFilenameFilter", "method_sig": "public FilenameFilter getFilenameFilter()", "description": "Determines this file dialog's filename filter. A filename filter\n allows the user to specify which files appear in the file dialog\n window.  Filename filters do not function in Sun's reference\n implementation for Microsoft Windows."}, {"method_name": "setFilenameFilter", "method_sig": "public void setFilenameFilter (FilenameFilter filter)", "description": "Sets the filename filter for this file dialog window to the\n specified filter.\n Filename filters do not function in Sun's reference\n implementation for Microsoft Windows."}, {"method_name": "paramString", "method_sig": "protected String paramString()", "description": "Returns a string representing the state of this FileDialog\n window. This method is intended to be used only for debugging purposes,\n and the content and format of the returned string may vary between\n implementations. The returned string may be empty but may not be\n null."}]}