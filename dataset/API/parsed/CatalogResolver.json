{"name": "Interface CatalogResolver", "module": "java.xml", "package": "javax.xml.catalog", "text": "A Catalog Resolver that implements SAX EntityResolver,\n StAX XMLResolver,\n DOM LS LSResourceResolver used by Schema Validation, and\n Transform URIResolver, and resolves\n external references using catalogs.\n \n The \n Catalog Standard distinguished external identifiers from uri entries\n as being used to solely identify DTDs, while uri entries for\n other resources such as stylesheets and schema. The Java APIs, such as\n XMLResolver and LSResourceResolver\n however, make no such distinction.\n In consistent with the existing Java API, this CatalogResolver recognizes a\n system identifier as a URI and will search both system and uri\n entries in a catalog in order to find a matching entry.\n \n The search is started in the current catalog. If a match is found,\n no further attempt will be made. Only if there is no match in the current\n catalog, will alternate catalogs including delegate and next catalogs be considered.\n\n Search Order\n The resolver will first search the system-type of entries with the specified\n systemId. The system entries include system,\n rewriteSystem and systemSuffix entries.\n \n If no match is found, public entries may be searched in accordance with\n the prefer attribute.\n \nThe prefer attribute: if the prefer is public,\n and there is no match found through the system entries, public entries\n will be considered. If it is not specified, the prefer is public\n by default (Note that by the OASIS standard, system entries will always\n be considered before public entries. Prefer public means that public entries\n will be matched when both system and public identifiers are specified.\n In general therefore, prefer public is recommended.)\n \n If no match is found with the systemId and public identifier,\n the resolver will continue searching uri entries\n with the specified systemId or href. The uri entries\n include uri, rewriteURI, and uriSuffix entries.\n\n Error Handling\n The interfaces that the CatalogResolver extend specified checked exceptions, including:\n \n\nSAXException and IOException by\n EntityResolver.resolveEntity(java.lang.String, java.lang.String)\n\n\nXMLStreamException by\n XMLResolver.resolveEntity(java.lang.String, java.lang.String, java.lang.String, java.lang.String)\n\n\nTransformerException by\n URIResolver.resolve(java.lang.String, java.lang.String)\n\n\n\n The CatalogResolver however, will throw CatalogException\n only when javax.xml.catalog.resolve is specified as strict.\n For applications that expect to handle the checked Exceptions, it may be\n necessary to use a custom resolver to wrap the CatalogResolver or implement it\n with a Catalog object.", "codes": ["public interface CatalogResolver\nextends EntityResolver, XMLResolver, URIResolver, LSResourceResolver"], "fields": [], "methods": [{"method_name": "resolveEntity", "method_sig": "InputSource resolveEntity (String publicId,\n                          String systemId)", "description": "Implements EntityResolver. The method searches through\n the catalog entries in the main and alternative catalogs to attempt to find\n a match with the specified publicId or systemId."}, {"method_name": "resolve", "method_sig": "Source resolve (String href,\n               String base)", "description": "Implements URIResolver. The method searches through the catalog entries\n in the main and alternative catalogs to attempt to find a match\n with the specified href attribute. The href attribute will\n be used literally, with no attempt to be made absolute to the base.\n \n If the value is a URN, the href attribute is recognized as a\n publicId, and used to search public entries.\n If the value is a URI, it is taken as a systemId, and used to\n search both system and uri entries."}, {"method_name": "resolveEntity", "method_sig": "InputStream resolveEntity (String publicId,\n                          String systemId,\n                          String baseUri,\n                          String namespace)", "description": "Implements XMLResolver. For the purpose of resolving\n publicId and systemId, this method is equivalent to\n resolveEntity(java.lang.String, java.lang.String).\n \n The systemId will be used literally, with no attempt to be made\n absolute to the baseUri. The baseUri and namespace\n are not used in the search for a match in a catalog. However, a relative\n systemId in an xml source may have been made absolute by the parser\n with the baseURI, thus making it unable to find a system entry.\n In such a case, a systemSuffix entry is recommended over a\n system entry."}, {"method_name": "resolveResource", "method_sig": "LSInput resolveResource (String type,\n                        String namespaceUri,\n                        String publicId,\n                        String systemId,\n                        String baseUri)", "description": "Implements LSResourceResolver. For the purpose of\n resolving publicId and systemId, this method is equivalent\n to resolveEntity(java.lang.String, java.lang.String).\n \n The systemId will be used literally, with no attempt to be made\n absolute to the baseUri. The baseUri, namespaceUri\n and type are not used in the search for a match in a catalog.\n However, a relative systemId in a source may have been made absolute\n by the parser with the baseURI, thus making it unable to find a\n system entry. In such a case, a systemSuffix entry is\n recommended over a system entry."}]}