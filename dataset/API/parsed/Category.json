{"name": "Annotation Type Category", "module": "jdk.jfr", "package": "jdk.jfr", "text": "Event annotation, to associate the event type with a category, in the format\n of a human-readable path.\n \n The category determines how an event is presented to the user. Events that\n are in the same category are typically displayed together in graphs and\n trees. To avoid the overlap of durational events in graphical\n representations, overlapping events must be in separate categories.\n \n For example, to monitor image uploads to a web server with a separate thread\n for each upload, an event called File Upload starts when the user uploads a\n file and ends when the upload is complete. For advanced diagnostics about\n image uploads, more detailed events are created (for example, Image Read,\n Image Resize, and Image Write). During these detailed events. other low\n level-events could occur (for example, Socket Read and File Write).\n \n The following example shows a visualization that avoids overlaps:\n\n \n -------------------------------------------------------------------\n   |                         File Upload                        |\n ------------------------------------------------------------------\n   |       Image Read          | Image Resize |   Image Write   |\n ------------------------------------------------------------------\n   | Socket Read | Socket Read |              |    File Write   |\n -------------------------------------------------------------------\n \n\n The example can be achieved by using the following categories:\n\n \nRecording options and their purpose. \n\nEvent Name\nAnnotation\n\n \n\nFile Upload\n@Category(\"Upload\")\n\n\nImage Read\n@Category({\"Upload\", \"Image Upload\"})\n\n\nImage Resize\n@Category({\"Upload\", \"Image Upload\"})\n\n\nImage Write\n@Category({\"Upload\", \"Image Upload\"})\n\n\nSocket Read\n@Category(\"Java Application\")\n\n\nFile Write\n@Category(\"Java Application\")\n\n\n\n\n The File Upload, Image Read, and Socket Read events happen concurrently (in\n the same thread), but the events are in different categories so they do not\n overlap in the visualization.\n \n The following examples shows how the category is used to determine how events\n are visualized in a tree:\n\n \n  |- Java Application\n  |  |- Socket Read\n  |  |- File Write\n  |- Upload\n     |- File Upload\n     |- Image Upload\n        |- Image Read\n        |- Image Resize\n        |- File Write\n ", "codes": ["@Target(TYPE)\n@Inherited\n@Retention(RUNTIME)\npublic @interface Category"], "fields": [], "methods": []}