{"name": "Class TextMeasurer", "module": "java.desktop", "package": "java.awt.font", "text": "The TextMeasurer class provides the primitive operations\n needed for line break: measuring up to a given advance, determining the\n advance of a range of characters, and generating a\n TextLayout for a range of characters. It also provides\n methods for incremental editing of paragraphs.\n \n A TextMeasurer object is constructed with an\n AttributedCharacterIterator\n representing a single paragraph of text.  The value returned by the\n getBeginIndex\n method of AttributedCharacterIterator\n defines the absolute index of the first character.  The value\n returned by the\n getEndIndex\n method of AttributedCharacterIterator defines the index\n past the last character.  These values define the range of indexes to\n use in calls to the TextMeasurer.  For example, calls to\n get the advance of a range of text or the line break of a range of text\n must use indexes between the beginning and end index values.  Calls to\n insertChar\n and\n deleteChar\n reset the TextMeasurer to use the beginning index and end\n index of the AttributedCharacterIterator passed in those calls.\n \n Most clients will use the more convenient LineBreakMeasurer,\n which implements the standard line break policy (placing as many words\n as will fit on each line).", "codes": ["public final class TextMeasurer\nextends Object\nimplements Cloneable"], "fields": [], "methods": [{"method_name": "getLineBreakIndex", "method_sig": "public int getLineBreakIndex (int start,\n                             float maxAdvance)", "description": "Returns the index of the first character which will not fit on\n on a line beginning at start and possible\n measuring up to maxAdvance in graphical width."}, {"method_name": "getAdvanceBetween", "method_sig": "public float getAdvanceBetween (int start,\n                               int limit)", "description": "Returns the graphical width of a line beginning at start\n and including characters up to limit.\n start and limit are absolute indices,\n not relative to the start of the paragraph."}, {"method_name": "getLayout", "method_sig": "public TextLayout getLayout (int start,\n                            int limit)", "description": "Returns a TextLayout on the given character range."}, {"method_name": "insertChar", "method_sig": "public void insertChar (AttributedCharacterIterator newParagraph,\n                       int insertPos)", "description": "Updates the TextMeasurer after a single character has\n been inserted\n into the paragraph currently represented by this\n TextMeasurer.  After this call, this\n TextMeasurer is equivalent to a new\n TextMeasurer created from the text;  however, it will\n usually be more efficient to update an existing\n TextMeasurer than to create a new one from scratch."}, {"method_name": "deleteChar", "method_sig": "public void deleteChar (AttributedCharacterIterator newParagraph,\n                       int deletePos)", "description": "Updates the TextMeasurer after a single character has\n been deleted\n from the paragraph currently represented by this\n TextMeasurer.  After this call, this\n TextMeasurer is equivalent to a new TextMeasurer\n created from the text;  however, it will usually be more efficient\n to update an existing TextMeasurer than to create a new one\n from scratch."}]}