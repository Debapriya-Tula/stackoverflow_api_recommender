{"name": "Class HijrahDate", "module": "java.base", "package": "java.time.chrono", "text": "A date in the Hijrah calendar system.\n \n This date operates using one of several variants of the\n Hijrah calendar.\n \n The Hijrah calendar has a different total of days in a year than\n Gregorian calendar, and the length of each month is based on the period\n of a complete revolution of the moon around the earth\n (as between successive new moons).\n Refer to the HijrahChronology for details of supported variants.\n \n Each HijrahDate is created bound to a particular HijrahChronology,\n The same chronology is propagated to each HijrahDate computed from the date.\n To use a different Hijrah variant, its HijrahChronology can be used\n to create new HijrahDate instances.\n Alternatively, the withVariant(java.time.chrono.HijrahChronology) method can be used to convert\n to a new HijrahChronology.\n\n \n This is a value-based\n class; use of identity-sensitive operations (including reference equality\n (==), identity hash code, or synchronization) on instances of\n HijrahDate may have unpredictable results and should be avoided.\n The equals method should be used for comparisons.", "codes": ["public final class HijrahDate\nextends Object\nimplements ChronoLocalDate, Serializable"], "fields": [], "methods": [{"method_name": "now", "method_sig": "public static HijrahDate now()", "description": "Obtains the current HijrahDate of the Islamic Umm Al-Qura calendar\n in the default time-zone.\n \n This will query the system clock in the default\n time-zone to obtain the current date.\n \n Using this method will prevent the ability to use an alternate clock for testing\n because the clock is hard-coded."}, {"method_name": "now", "method_sig": "public static HijrahDate now (ZoneId zone)", "description": "Obtains the current HijrahDate of the Islamic Umm Al-Qura calendar\n in the specified time-zone.\n \n This will query the system clock to obtain the current date.\n Specifying the time-zone avoids dependence on the default time-zone.\n \n Using this method will prevent the ability to use an alternate clock for testing\n because the clock is hard-coded."}, {"method_name": "now", "method_sig": "public static HijrahDate now (Clock clock)", "description": "Obtains the current HijrahDate of the Islamic Umm Al-Qura calendar\n from the specified clock.\n \n This will query the specified clock to obtain the current date - today.\n Using this method allows the use of an alternate clock for testing.\n The alternate clock may be introduced using dependency injection."}, {"method_name": "of", "method_sig": "public static HijrahDate of (int prolepticYear,\n                            int month,\n                            int dayOfMonth)", "description": "Obtains a HijrahDate of the Islamic Umm Al-Qura calendar\n from the proleptic-year, month-of-year and day-of-month fields.\n \n This returns a HijrahDate with the specified fields.\n The day must be valid for the year and month, otherwise an exception will be thrown."}, {"method_name": "from", "method_sig": "public static HijrahDate from (TemporalAccessor temporal)", "description": "Obtains a HijrahDate of the Islamic Umm Al-Qura calendar from a temporal object.\n \n This obtains a date in the Hijrah calendar system based on the specified temporal.\n A TemporalAccessor represents an arbitrary set of date and time information,\n which this factory converts to an instance of HijrahDate.\n \n The conversion typically uses the EPOCH_DAY\n field, which is standardized across calendar systems.\n \n This method matches the signature of the functional interface TemporalQuery\n allowing it to be used as a query via method reference, HijrahDate::from."}, {"method_name": "getChronology", "method_sig": "public HijrahChronology getChronology()", "description": "Gets the chronology of this date, which is the Hijrah calendar system.\n \n The Chronology represents the calendar system in use.\n The era and other fields in ChronoField are defined by the chronology."}, {"method_name": "getEra", "method_sig": "public HijrahEra getEra()", "description": "Gets the era applicable at this date.\n \n The Hijrah calendar system has one era, 'AH',\n defined by HijrahEra."}, {"method_name": "lengthOfMonth", "method_sig": "public int lengthOfMonth()", "description": "Returns the length of the month represented by this date.\n \n This returns the length of the month in days.\n Month lengths in the Hijrah calendar system vary between 29 and 30 days."}, {"method_name": "lengthOfYear", "method_sig": "public int lengthOfYear()", "description": "Returns the length of the year represented by this date.\n \n This returns the length of the year in days.\n A Hijrah calendar system year is typically shorter than\n that of the ISO calendar system."}, {"method_name": "with", "method_sig": "public HijrahDate with (TemporalAdjuster adjuster)", "description": "Returns an adjusted object of the same type as this object with the adjustment made.\n \n This adjusts this date-time according to the rules of the specified adjuster.\n A simple adjuster might simply set the one of the fields, such as the year field.\n A more complex adjuster might set the date to the last day of the month.\n A selection of common adjustments is provided in\n TemporalAdjusters.\n These include finding the \"last day of the month\" and \"next Wednesday\".\n The adjuster is responsible for handling special cases, such as the varying\n lengths of month and leap years.\n \n Some example code indicating how and why this method is used:\n \n  date = date.with(Month.JULY);        // most key classes implement TemporalAdjuster\n  date = date.with(lastDayOfMonth());  // static import from Adjusters\n  date = date.with(next(WEDNESDAY));   // static import from Adjusters and DayOfWeek\n "}, {"method_name": "withVariant", "method_sig": "public HijrahDate withVariant (HijrahChronology chronology)", "description": "Returns a HijrahDate with the Chronology requested.\n \n The year, month, and day are checked against the new requested\n HijrahChronology.  If the chronology has a shorter month length\n for the month, the day is reduced to be the last day of the month."}, {"method_name": "plus", "method_sig": "public HijrahDate plus (TemporalAmount amount)", "description": "Returns an object of the same type as this object with an amount added.\n \n This adjusts this temporal, adding according to the rules of the specified amount.\n The amount is typically a Period but may be any other type implementing\n the TemporalAmount interface, such as Duration.\n \n Some example code indicating how and why this method is used:\n \n  date = date.plus(period);                // add a Period instance\n  date = date.plus(duration);              // add a Duration instance\n  date = date.plus(workingDays(6));        // example user-written workingDays method\n \n\n Note that calling plus followed by minus is not guaranteed to\n return the same date-time."}, {"method_name": "minus", "method_sig": "public HijrahDate minus (TemporalAmount amount)", "description": "Returns an object of the same type as this object with an amount subtracted.\n \n This adjusts this temporal, subtracting according to the rules of the specified amount.\n The amount is typically a Period but may be any other type implementing\n the TemporalAmount interface, such as Duration.\n \n Some example code indicating how and why this method is used:\n \n  date = date.minus(period);               // subtract a Period instance\n  date = date.minus(duration);             // subtract a Duration instance\n  date = date.minus(workingDays(6));       // example user-written workingDays method\n \n\n Note that calling plus followed by minus is not guaranteed to\n return the same date-time."}, {"method_name": "isLeapYear", "method_sig": "public boolean isLeapYear()", "description": "Checks if the year is a leap year, according to the Hijrah calendar system rules."}, {"method_name": "equals", "method_sig": "public boolean equals (Object obj)", "description": "Compares this date to another date, including the chronology.\n \n Compares this HijrahDate with another ensuring that the date is the same.\n \n Only objects of type HijrahDate are compared, other types return false.\n To compare the dates of two TemporalAccessor instances, including dates\n in two different chronologies, use ChronoField.EPOCH_DAY as a comparator."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "A hash code for this date."}, {"method_name": "until", "method_sig": "public long until (Temporal endExclusive,\n                  TemporalUnit unit)", "description": "Description copied from interface:\u00a0ChronoLocalDate"}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Description copied from class:\u00a0Object"}]}