{"name": "Class FileSystems", "module": "java.base", "package": "java.nio.file", "text": "Factory methods for file systems. This class defines the getDefault method to get the default file system and factory methods to\n construct other types of file systems.\n\n  The first invocation of any of the methods defined by this class causes\n the default provider to be loaded. The default\n provider, identified by the URI scheme \"file\", creates the FileSystem\n that provides access to the file systems accessible to the Java virtual\n machine. If the process of loading or initializing the default provider fails\n then an unspecified error is thrown.\n\n  The first invocation of the installedProviders method, by way of invoking any of the \n newFileSystem methods defined by this class, locates and loads all\n installed file system providers. Installed providers are loaded using the\n service-provider loading facility defined by the ServiceLoader class.\n Installed providers are loaded using the system class loader. If the\n system class loader cannot be found then the platform class loader is used.\n Providers are typically installed by placing them in a JAR file on the\n application class path, the JAR file contains a\n provider-configuration file named java.nio.file.spi.FileSystemProvider\n in the resource directory META-INF/services, and the file lists one or\n more fully-qualified names of concrete subclass of FileSystemProvider\n that have a zero argument constructor.\n The ordering that installed providers are located is implementation specific.\n If a provider is instantiated and its getScheme returns the same URI scheme of a provider that was previously\n instantiated then the most recently instantiated duplicate is discarded. URI\n schemes are compared without regard to case. During construction a provider\n may safely access files associated with the default provider but care needs\n to be taken to avoid circular loading of other installed providers. If\n circular loading of installed providers is detected then an unspecified error\n is thrown.\n\n  This class also defines factory methods that allow a ClassLoader\n to be specified when locating a provider. As with installed providers, the\n provider classes are identified by placing the provider configuration file\n in the resource directory META-INF/services.\n\n  If a thread initiates the loading of the installed file system providers\n and another thread invokes a method that also attempts to load the providers\n then the method will block until the loading completes.", "codes": ["public final class FileSystems\nextends Object"], "fields": [], "methods": [{"method_name": "getDefault", "method_sig": "public static FileSystem getDefault()", "description": "Returns the default FileSystem. The default file system creates\n objects that provide access to the file systems accessible to the Java\n virtual machine. The working directory of the file system is\n the current user directory, named by the system property user.dir.\n This allows for interoperability with the java.io.File\n class.\n\n  The first invocation of any of the methods defined by this class\n locates the default provider object. Where the\n system property java.nio.file.spi.DefaultFileSystemProvider is\n not defined then the default provider is a system-default provider that\n is invoked to create the default file system.\n\n  If the system property java.nio.file.spi.DefaultFileSystemProvider\n is defined then it is taken to be a list of one or more fully-qualified\n names of concrete provider classes identified by the URI scheme\n \"file\". Where the property is a list of more than one name then\n the names are separated by a comma. Each class is loaded, using the system\n class loader, and instantiated by invoking a one argument constructor\n whose formal parameter type is FileSystemProvider. The providers\n are loaded and instantiated in the order they are listed in the property.\n If this process fails or a provider's scheme is not equal to \"file\"\n then an unspecified error is thrown. URI schemes are normally compared\n without regard to case but for the default provider, the scheme is\n required to be \"file\". The first provider class is instantiated\n by invoking it with a reference to the system-default provider.\n The second provider class is instantiated by invoking it with a reference\n to the first provider instance. The third provider class is instantiated\n by invoking it with a reference to the second instance, and so on. The\n last provider to be instantiated becomes the default provider; its \n getFileSystem method is invoked with the URI \"file:///\" to\n get a reference to the default file system.\n\n  Subsequent invocations of this method return the file system that was\n returned by the first invocation."}, {"method_name": "getFileSystem", "method_sig": "public static FileSystem getFileSystem (URI uri)", "description": "Returns a reference to an existing FileSystem.\n\n  This method iterates over the installed providers to locate the provider that is identified by the URI\n scheme of the given URI. URI schemes are compared\n without regard to case. The exact form of the URI is highly provider\n dependent. If found, the provider's getFileSystem method is invoked to obtain a reference to the \n FileSystem.\n\n  Once a file system created by this provider is closed it is provider-dependent if this method returns a reference to\n the closed file system or throws FileSystemNotFoundException.\n If the provider allows a new file system to be created with the same URI\n as a file system it previously created then this method throws the\n exception if invoked after the file system is closed (and before a new\n instance is created by the newFileSystem method).\n\n  If a security manager is installed then a provider implementation\n may require to check a permission before returning a reference to an\n existing file system. In the case of the default file system, no permission check is required."}, {"method_name": "newFileSystem", "method_sig": "public static FileSystem newFileSystem (URI uri,\n                                       Map<String, ?> env)\n                                throws IOException", "description": "Constructs a new file system that is identified by a URI\n This method iterates over the installed providers to locate the provider that is identified by the URI\n scheme of the given URI. URI schemes are compared\n without regard to case. The exact form of the URI is highly provider\n dependent. If found, the provider's newFileSystem(URI,Map) method is invoked to construct the new file system.\n\n  Once a file system is closed it is\n provider-dependent if the provider allows a new file system to be created\n with the same URI as a file system it previously created.\n\n  Usage Example:\n Suppose there is a provider identified by the scheme \"memory\"\n installed:\n \n   Map<String,String> env = new HashMap<>();\n   env.put(\"capacity\", \"16G\");\n   env.put(\"blockSize\", \"4k\");\n   FileSystem fs = FileSystems.newFileSystem(URI.create(\"memory:///?name=logfs\"), env);\n "}, {"method_name": "newFileSystem", "method_sig": "public static FileSystem newFileSystem (URI uri,\n                                       Map<String, ?> env,\n                                       ClassLoader loader)\n                                throws IOException", "description": "Constructs a new file system that is identified by a URI\n This method first attempts to locate an installed provider in exactly\n the same manner as the newFileSystem(URI,Map)\n method. If none of the installed providers support the URI scheme then an\n attempt is made to locate the provider using the given class loader. If a\n provider supporting the URI scheme is located then its newFileSystem(URI,Map) is\n invoked to construct the new file system."}, {"method_name": "newFileSystem", "method_sig": "public static FileSystem newFileSystem (Path path,\n                                       ClassLoader loader)\n                                throws IOException", "description": "Constructs a new FileSystem to access the contents of a file as a\n file system.\n\n  This method makes use of specialized providers that create pseudo file\n systems where the contents of one or more files is treated as a file\n system.\n\n  This method iterates over the installed providers. It invokes, in turn, each provider's newFileSystem(Path,Map) method\n with an empty map. If a provider returns a file system then the iteration\n terminates and the file system is returned. If none of the installed\n providers return a FileSystem then an attempt is made to locate\n the provider using the given class loader. If a provider returns a file\n system then the lookup terminates and the file system is returned."}]}