{"name": "Interface AnnotationValueVisitor<R,\u200bP>", "module": "java.compiler", "package": "javax.lang.model.element", "text": "A visitor of the values of annotation type elements, using a\n variant of the visitor design pattern.  Unlike a standard visitor\n which dispatches based on the concrete type of a member of a type\n hierarchy, this visitor dispatches based on the type of data\n stored; there are no distinct subclasses for storing, for example,\n boolean values versus int values.  Classes\n implementing this interface are used to operate on a value when the\n type of that value is unknown at compile time.  When a visitor is\n passed to a value's accept method,\n the visitXyz method applicable to that value is\n invoked.\n\n  Classes implementing this interface may or may not throw a\n NullPointerException if the additional parameter p\n is null; see documentation of the implementing class for\n details.\n\n  WARNING: It is possible that methods will be added to\n this interface to accommodate new, currently unknown, language\n structures added to future versions of the Java\u2122 programming\n language.  Therefore, visitor classes directly implementing this\n interface may be source incompatible with future versions of the\n platform.  To avoid this source incompatibility, visitor\n implementations are encouraged to instead extend the appropriate\n abstract visitor class that implements this interface.  However, an\n API should generally use this visitor interface as the type for\n parameters, return type, etc. rather than one of the abstract\n classes.\n\n Note that methods to accommodate new language constructs could\n be added in a source compatible way if they were added as\n default methods.  However, default methods are only\n available on Java SE 8 and higher releases and the \n javax.lang.model.* packages bundled in Java SE 8 were required to\n also be runnable on Java SE 7.  Therefore, default methods\n were not used when extending javax.lang.model.*\n to cover Java SE 8 language features.  However, default methods\n are used in subsequent revisions of the javax.lang.model.*\n packages that are only required to run on Java SE 8 and higher\n platform versions.", "codes": ["public interface AnnotationValueVisitor<R, P>"], "fields": [], "methods": [{"method_name": "visit", "method_sig": "R visit (AnnotationValue av,\n        P p)", "description": "Visits an annotation value."}, {"method_name": "visit", "method_sig": "default R visit (AnnotationValue av)", "description": "A convenience method equivalent to visit(av, null)."}, {"method_name": "visitBoolean", "method_sig": "R visitBoolean (boolean b,\n               P p)", "description": "Visits a boolean value in an annotation."}, {"method_name": "visitByte", "method_sig": "R visitByte (byte b,\n            P p)", "description": "Visits a byte value in an annotation."}, {"method_name": "visitChar", "method_sig": "R visitChar (char c,\n            P p)", "description": "Visits a char value in an annotation."}, {"method_name": "visitDouble", "method_sig": "R visitDouble (double d,\n              P p)", "description": "Visits a double value in an annotation."}, {"method_name": "visitFloat", "method_sig": "R visitFloat (float f,\n             P p)", "description": "Visits a float value in an annotation."}, {"method_name": "visitInt", "method_sig": "R visitInt (int i,\n           P p)", "description": "Visits an int value in an annotation."}, {"method_name": "visitLong", "method_sig": "R visitLong (long i,\n            P p)", "description": "Visits a long value in an annotation."}, {"method_name": "visitShort", "method_sig": "R visitShort (short s,\n             P p)", "description": "Visits a short value in an annotation."}, {"method_name": "visitString", "method_sig": "R visitString (String s,\n              P p)", "description": "Visits a string value in an annotation."}, {"method_name": "visitType", "method_sig": "R visitType (TypeMirror t,\n            P p)", "description": "Visits a type value in an annotation."}, {"method_name": "visitEnumConstant", "method_sig": "R visitEnumConstant (VariableElement c,\n                    P p)", "description": "Visits an enum value in an annotation."}, {"method_name": "visitAnnotation", "method_sig": "R visitAnnotation (AnnotationMirror a,\n                  P p)", "description": "Visits an annotation value in an annotation."}, {"method_name": "visitArray", "method_sig": "R visitArray (List<? extends AnnotationValue> vals,\n             P p)", "description": "Visits an array value in an annotation."}, {"method_name": "visitUnknown", "method_sig": "R visitUnknown (AnnotationValue av,\n               P p)", "description": "Visits an unknown kind of annotation value.\n This can occur if the language evolves and new kinds\n of value can be stored in an annotation."}]}