{"name": "Class AtomicReferenceFieldUpdater<T,\u200bV>", "module": "java.base", "package": "java.util.concurrent.atomic", "text": "A reflection-based utility that enables atomic updates to\n designated volatile reference fields of designated\n classes.  This class is designed for use in atomic data structures\n in which several reference fields of the same node are\n independently subject to atomic updates. For example, a tree node\n might be declared as\n\n  \n class Node {\n   private volatile Node left, right;\n\n   private static final AtomicReferenceFieldUpdater<Node, Node> leftUpdater =\n     AtomicReferenceFieldUpdater.newUpdater(Node.class, Node.class, \"left\");\n   private static AtomicReferenceFieldUpdater<Node, Node> rightUpdater =\n     AtomicReferenceFieldUpdater.newUpdater(Node.class, Node.class, \"right\");\n\n   Node getLeft() { return left; }\n   boolean compareAndSetLeft(Node expect, Node update) {\n     return leftUpdater.compareAndSet(this, expect, update);\n   }\n   // ... and so on\n }\nNote that the guarantees of the compareAndSet\n method in this class are weaker than in other atomic classes.\n Because this class cannot ensure that all uses of the field\n are appropriate for purposes of atomic access, it can\n guarantee atomicity only with respect to other invocations of\n compareAndSet and set on the same updater.\n\n Object arguments for parameters of type T that are not\n instances of the class passed to newUpdater(java.lang.Class<U>, java.lang.Class<W>, java.lang.String) will result in\n a ClassCastException being thrown.", "codes": ["public abstract class AtomicReferenceFieldUpdater<T, V>\nextends Object"], "fields": [], "methods": [{"method_name": "newUpdater", "method_sig": "public static <U, W> AtomicReferenceFieldUpdater<U, W> newUpdater (Class<U> tclass,\n                                                                            Class<W> vclass,\n                                                                            String fieldName)", "description": "Creates and returns an updater for objects with the given field.\n The Class arguments are needed to check that reflective types and\n generic types match."}, {"method_name": "compareAndSet", "method_sig": "public abstract boolean compareAndSet (T obj,\n                                      V expect,\n                                      V update)", "description": "Atomically sets the field of the given object managed by this updater\n to the given updated value if the current value == the\n expected value. This method is guaranteed to be atomic with respect to\n other calls to compareAndSet and set, but not\n necessarily with respect to other changes in the field."}, {"method_name": "weakCompareAndSet", "method_sig": "public abstract boolean weakCompareAndSet (T obj,\n                                          V expect,\n                                          V update)", "description": "Atomically sets the field of the given object managed by this updater\n to the given updated value if the current value == the\n expected value. This method is guaranteed to be atomic with respect to\n other calls to compareAndSet and set, but not\n necessarily with respect to other changes in the field.\n\n May fail\n spuriously and does not provide ordering guarantees, so is\n only rarely an appropriate alternative to compareAndSet."}, {"method_name": "set", "method_sig": "public abstract void set (T obj,\n                         V newValue)", "description": "Sets the field of the given object managed by this updater to the\n given updated value. This operation is guaranteed to act as a volatile\n store with respect to subsequent invocations of compareAndSet."}, {"method_name": "lazySet", "method_sig": "public abstract void lazySet (T obj,\n                             V newValue)", "description": "Eventually sets the field of the given object managed by this\n updater to the given updated value."}, {"method_name": "get", "method_sig": "public abstract V get (T obj)", "description": "Returns the current value held in the field of the given object\n managed by this updater."}, {"method_name": "getAndSet", "method_sig": "public V getAndSet (T obj,\n                   V newValue)", "description": "Atomically sets the field of the given object managed by this updater\n to the given value and returns the old value."}, {"method_name": "getAndUpdate", "method_sig": "public final V getAndUpdate (T obj,\n                            UnaryOperator<V> updateFunction)", "description": "Atomically updates (with memory effects as specified by VarHandle.compareAndSet(java.lang.Object...)) the field of the given object managed\n by this updater with the results of applying the given\n function, returning the previous value. The function should be\n side-effect-free, since it may be re-applied when attempted\n updates fail due to contention among threads."}, {"method_name": "updateAndGet", "method_sig": "public final V updateAndGet (T obj,\n                            UnaryOperator<V> updateFunction)", "description": "Atomically updates (with memory effects as specified by VarHandle.compareAndSet(java.lang.Object...)) the field of the given object managed\n by this updater with the results of applying the given\n function, returning the updated value. The function should be\n side-effect-free, since it may be re-applied when attempted\n updates fail due to contention among threads."}, {"method_name": "getAndAccumulate", "method_sig": "public final V getAndAccumulate (T obj,\n                                V x,\n                                BinaryOperator<V> accumulatorFunction)", "description": "Atomically updates (with memory effects as specified by VarHandle.compareAndSet(java.lang.Object...)) the field of the given object managed\n by this updater with the results of applying the given function\n to the current and given values, returning the previous value.\n The function should be side-effect-free, since it may be\n re-applied when attempted updates fail due to contention among\n threads.  The function is applied with the current value as its\n first argument, and the given update as the second argument."}, {"method_name": "accumulateAndGet", "method_sig": "public final V accumulateAndGet (T obj,\n                                V x,\n                                BinaryOperator<V> accumulatorFunction)", "description": "Atomically updates (with memory effects as specified by VarHandle.compareAndSet(java.lang.Object...)) the field of the given object managed\n by this updater with the results of applying the given function\n to the current and given values, returning the updated value.\n The function should be side-effect-free, since it may be\n re-applied when attempted updates fail due to contention among\n threads.  The function is applied with the current value as its\n first argument, and the given update as the second argument."}]}