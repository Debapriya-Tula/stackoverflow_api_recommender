{"name": "Class BandedSampleModel", "module": "java.desktop", "package": "java.awt.image", "text": "This class represents image data which is stored in a band interleaved\n  fashion and for\n  which each sample of a pixel occupies one data element of the DataBuffer.\n  It subclasses ComponentSampleModel but provides a more efficient\n  implementation for accessing band interleaved image data than is provided\n  by ComponentSampleModel.  This class should typically be used when working\n  with images which store sample data for each band in a different bank of the\n  DataBuffer. Accessor methods are provided so that image data can be\n  manipulated directly. Pixel stride is the number of\n  data array elements between two samples for the same band on the same\n  scanline. The pixel stride for a BandedSampleModel is one.\n  Scanline stride is the number of data array elements between\n  a given sample and the corresponding sample in the same column of the next\n  scanline.  Band offsets denote the number\n  of data array elements from the first data array element of the bank\n  of the DataBuffer holding each band to the first sample of the band.\n  The bands are numbered from 0 to N-1.\n  Bank indices denote the correspondence between a bank of the data buffer\n  and a band of image data.  This class supports\n  TYPE_BYTE,\n  TYPE_USHORT,\n  TYPE_SHORT,\n  TYPE_INT,\n  TYPE_FLOAT, and\n  TYPE_DOUBLE datatypes", "codes": ["public final class BandedSampleModel\nextends ComponentSampleModel"], "fields": [], "methods": [{"method_name": "createCompatibleSampleModel", "method_sig": "public SampleModel createCompatibleSampleModel (int w,\n                                               int h)", "description": "Creates a new BandedSampleModel with the specified\n width and height.  The new BandedSampleModel will have the same\n number of bands, storage data type, and bank indices\n as this BandedSampleModel.  The band offsets will be compressed\n such that the offset between bands will be w*pixelStride and\n the minimum of all of the band offsets is zero."}, {"method_name": "createSubsetSampleModel", "method_sig": "public SampleModel createSubsetSampleModel (int[] bands)", "description": "Creates a new BandedSampleModel with a subset of the bands of this\n BandedSampleModel.  The new BandedSampleModel can be\n used with any DataBuffer that the existing BandedSampleModel\n can be used with.  The new BandedSampleModel/DataBuffer\n combination will represent an image with a subset of the bands\n of the original BandedSampleModel/DataBuffer combination."}, {"method_name": "createDataBuffer", "method_sig": "public DataBuffer createDataBuffer()", "description": "Creates a DataBuffer that corresponds to this BandedSampleModel,\n The DataBuffer's data type, number of banks, and size\n will be consistent with this BandedSampleModel."}, {"method_name": "getDataElements", "method_sig": "public Object getDataElements (int x,\n                              int y,\n                              Object obj,\n                              DataBuffer data)", "description": "Returns data for a single pixel in a primitive array of type\n TransferType.  For a BandedSampleModel, this will be the same\n as the data type, and samples will be returned one per array\n element.  Generally, obj\n should be passed in as null, so that the Object will be created\n automatically and will be of the right primitive data type.\n \n The following code illustrates transferring data for one pixel from\n DataBuffer db1, whose storage layout is described by\n BandedSampleModel bsm1, to DataBuffer db2,\n whose storage layout is described by\n BandedSampleModel bsm2.\n The transfer will generally be more efficient than using\n getPixel/setPixel.\n \n       BandedSampleModel bsm1, bsm2;\n       DataBufferInt db1, db2;\n       bsm2.setDataElements(x, y, bsm1.getDataElements(x, y, null, db1),\n                            db2);\n \n Using getDataElements/setDataElements to transfer between two\n DataBuffer/SampleModel pairs is legitimate if the SampleModels have\n the same number of bands, corresponding bands have the same number of\n bits per sample, and the TransferTypes are the same.\n \n If obj is non-null, it should be a primitive array of type TransferType.\n Otherwise, a ClassCastException is thrown.  An\n ArrayIndexOutOfBoundsException may be thrown if the coordinates are\n not in bounds, or if obj is non-null and is not large enough to hold\n the pixel data."}, {"method_name": "getPixel", "method_sig": "public int[] getPixel (int x,\n                      int y,\n                      int[] iArray,\n                      DataBuffer data)", "description": "Returns all samples for the specified pixel in an int array.\n ArrayIndexOutOfBoundsException may be thrown if the coordinates are\n not in bounds."}, {"method_name": "getPixels", "method_sig": "public int[] getPixels (int x,\n                       int y,\n                       int w,\n                       int h,\n                       int[] iArray,\n                       DataBuffer data)", "description": "Returns all samples for the specified rectangle of pixels in\n an int array, one sample per data array element.\n ArrayIndexOutOfBoundsException may be thrown if the coordinates are\n not in bounds."}, {"method_name": "getSample", "method_sig": "public int getSample (int x,\n                     int y,\n                     int b,\n                     DataBuffer data)", "description": "Returns as int the sample in a specified band for the pixel\n located at (x,y).\n ArrayIndexOutOfBoundsException may be thrown if the coordinates are\n not in bounds."}, {"method_name": "getSampleFloat", "method_sig": "public float getSampleFloat (int x,\n                            int y,\n                            int b,\n                            DataBuffer data)", "description": "Returns the sample in a specified band\n for the pixel located at (x,y) as a float.\n ArrayIndexOutOfBoundsException may be thrown if the coordinates are\n not in bounds."}, {"method_name": "getSampleDouble", "method_sig": "public double getSampleDouble (int x,\n                              int y,\n                              int b,\n                              DataBuffer data)", "description": "Returns the sample in a specified band\n for a pixel located at (x,y) as a double.\n ArrayIndexOutOfBoundsException may be thrown if the coordinates are\n not in bounds."}, {"method_name": "getSamples", "method_sig": "public int[] getSamples (int x,\n                        int y,\n                        int w,\n                        int h,\n                        int b,\n                        int[] iArray,\n                        DataBuffer data)", "description": "Returns the samples in a specified band for the specified rectangle\n of pixels in an int array, one sample per data array element.\n ArrayIndexOutOfBoundsException may be thrown if the coordinates are\n not in bounds."}, {"method_name": "setDataElements", "method_sig": "public void setDataElements (int x,\n                            int y,\n                            Object obj,\n                            DataBuffer data)", "description": "Sets the data for a single pixel in the specified DataBuffer from a\n primitive array of type TransferType.  For a BandedSampleModel,\n this will be the same as the data type, and samples are transferred\n one per array element.\n \n The following code illustrates transferring data for one pixel from\n DataBuffer db1, whose storage layout is described by\n BandedSampleModel bsm1, to DataBuffer db2,\n whose storage layout is described by\n BandedSampleModel bsm2.\n The transfer will generally be more efficient than using\n getPixel/setPixel.\n \n       BandedSampleModel bsm1, bsm2;\n       DataBufferInt db1, db2;\n       bsm2.setDataElements(x, y, bsm1.getDataElements(x, y, null, db1),\n                            db2);\n \n Using getDataElements/setDataElements to transfer between two\n DataBuffer/SampleModel pairs is legitimate if the SampleModels have\n the same number of bands, corresponding bands have the same number of\n bits per sample, and the TransferTypes are the same.\n \n obj must be a primitive array of type TransferType.  Otherwise,\n a ClassCastException is thrown.  An\n ArrayIndexOutOfBoundsException may be thrown if the coordinates are\n not in bounds, or if obj is not large enough to hold the pixel data."}, {"method_name": "setPixel", "method_sig": "public void setPixel (int x,\n                     int y,\n                     int[] iArray,\n                     DataBuffer data)", "description": "Sets a pixel in the DataBuffer using an int array of samples for input.\n ArrayIndexOutOfBoundsException may be thrown if the coordinates are\n not in bounds."}, {"method_name": "setPixels", "method_sig": "public void setPixels (int x,\n                      int y,\n                      int w,\n                      int h,\n                      int[] iArray,\n                      DataBuffer data)", "description": "Sets all samples for a rectangle of pixels from an int array containing\n one sample per array element.\n ArrayIndexOutOfBoundsException may be thrown if the coordinates are\n not in bounds."}, {"method_name": "setSample", "method_sig": "public void setSample (int x,\n                      int y,\n                      int b,\n                      int s,\n                      DataBuffer data)", "description": "Sets a sample in the specified band for the pixel located at (x,y)\n in the DataBuffer using an int for input.\n ArrayIndexOutOfBoundsException may be thrown if the coordinates are\n not in bounds."}, {"method_name": "setSample", "method_sig": "public void setSample (int x,\n                      int y,\n                      int b,\n                      float s,\n                      DataBuffer data)", "description": "Sets a sample in the specified band for the pixel located at (x,y)\n in the DataBuffer using a float for input.\n ArrayIndexOutOfBoundsException may be thrown if the coordinates are\n not in bounds."}, {"method_name": "setSample", "method_sig": "public void setSample (int x,\n                      int y,\n                      int b,\n                      double s,\n                      DataBuffer data)", "description": "Sets a sample in the specified band for the pixel located at (x,y)\n in the DataBuffer using a double for input.\n ArrayIndexOutOfBoundsException may be thrown if the coordinates are\n not in bounds."}, {"method_name": "setSamples", "method_sig": "public void setSamples (int x,\n                       int y,\n                       int w,\n                       int h,\n                       int b,\n                       int[] iArray,\n                       DataBuffer data)", "description": "Sets the samples in the specified band for the specified rectangle\n of pixels from an int array containing one sample per data array element.\n ArrayIndexOutOfBoundsException may be thrown if the coordinates are\n not in bounds."}]}