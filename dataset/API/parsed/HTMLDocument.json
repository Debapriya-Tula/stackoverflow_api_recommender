{"name": "Class HTMLDocument", "module": "java.desktop", "package": "javax.swing.text.html", "text": "A document that models HTML.  The purpose of this model is to\n support both browsing and editing.  As a result, the structure\n described by an HTML document is not exactly replicated by default.\n The element structure that is modeled by default, is built by the\n class HTMLDocument.HTMLReader, which implements the\n HTMLEditorKit.ParserCallback protocol that the parser\n expects.  To change the structure one can subclass\n HTMLReader, and reimplement the method getReader(int) to return the new reader implementation.  The\n documentation for HTMLReader should be consulted for\n the details of the default structure created.  The intent is that\n the document be non-lossy (although reproducing the HTML format may\n result in a different format).\n\n The document models only HTML, and makes no attempt to store\n view attributes in it.  The elements are identified by the\n StyleContext.NameAttribute attribute, which should\n always have a value of type HTML.Tag that identifies\n the kind of element.  Some of the elements (such as comments) are\n synthesized.  The HTMLFactory uses this attribute to\n determine what kind of view to build.\nThis document supports incremental loading.  The\n TokenThreshold property controls how much of the parse\n is buffered before trying to update the element structure of the\n document.  This property is set by the EditorKit so\n that subclasses can disable it.\nThe Base property determines the URL against which\n relative URLs are resolved.  By default, this will be the\n Document.StreamDescriptionProperty if the value of the\n property is a URL.  If a <BASE> tag is encountered, the base\n will become the URL specified by that tag.  Because the base URL is\n a property, it can of course be set directly.\nThe default content storage mechanism for this document is a gap\n buffer (GapContent).  Alternatives can be supplied by\n using the constructor that takes a Content\n implementation.\nModifying HTMLDocument\nIn addition to the methods provided by Document and\n StyledDocument for mutating an HTMLDocument, HTMLDocument provides\n a number of convenience methods.  The following methods can be used\n to insert HTML content into an existing document.\n\nsetInnerHTML(Element, String)\nsetOuterHTML(Element, String)\ninsertBeforeStart(Element, String)\ninsertAfterStart(Element, String)\ninsertBeforeEnd(Element, String)\ninsertAfterEnd(Element, String)\n\nThe following examples illustrate using these methods.  Each\n example assumes the HTML document is initialized in the following\n way:\n\n JEditorPane p = new JEditorPane();\n p.setContentType(\"text/html\");\n p.setText(\"...\"); // Document text is provided below.\n HTMLDocument d = (HTMLDocument) p.getDocument();\n \nWith the following HTML content:\n\n <html>\n   <head>\n     <title>An example HTMLDocument</title>\n     <style type=\"text/css\">\n       div { background-color: silver; }\n       ul { color: blue; }\n     </style>\n   </head>\n   <body>\n     <div id=\"BOX\">\n       <p>Paragraph 1</p>\n       <p>Paragraph 2</p>\n     </div>\n   </body>\n </html>\n \nAll the methods for modifying an HTML document require an Element.  Elements can be obtained from an HTML document by using\n the method getElement(Element e, Object attribute, Object\n value).  It returns the first descendant element that contains the\n specified attribute with the given value, in depth-first order.\n For example, d.getElement(d.getDefaultRootElement(),\n StyleConstants.NameAttribute, HTML.Tag.P) returns the first\n paragraph element.\nA convenient shortcut for locating elements is the method getElement(String); returns an element whose ID\n attribute matches the specified value.  For example,\n d.getElement(\"BOX\") returns the DIV\n element.\nThe getIterator(HTML.Tag t) method can also be used for\n finding all occurrences of the specified HTML tag in the\n document.\nInserting elements\nElements can be inserted before or after the existing children\n of any non-leaf element by using the methods\n insertAfterStart and insertBeforeEnd.\n For example, if e is the DIV element,\n d.insertAfterStart(e, \"<ul><li>List\n Item</li></ul>\") inserts the list before the first\n paragraph, and d.insertBeforeEnd(e, \"<ul><li>List\n Item</li></ul>\") inserts the list after the last\n paragraph.  The DIV block becomes the parent of the\n newly inserted elements.\nSibling elements can be inserted before or after any element by\n using the methods insertBeforeStart and\n insertAfterEnd.  For example, if e is the\n DIV element, d.insertBeforeStart(e,\n \"<ul><li>List Item</li></ul>\") inserts the list\n before the DIV element, and d.insertAfterEnd(e,\n \"<ul><li>List Item</li></ul>\") inserts the list\n after the DIV element.  The newly inserted elements\n become siblings of the DIV element.\nReplacing elements\nElements and all their descendants can be replaced by using the\n methods setInnerHTML and setOuterHTML.\n For example, if e is the DIV element,\n d.setInnerHTML(e, \"<ul><li>List\n Item</li></ul>\") replaces all children paragraphs with\n the list, and d.setOuterHTML(e, \"<ul><li>List\n Item</li></ul>\") replaces the DIV element\n itself.  In latter case the parent of the list is the\n BODY element.\n\n Summary\nThe following table shows the example document and the results\n of various methods described above.\n\nHTML Content of example above\n\nExample\ninsertAfterStart\ninsertBeforeEnd\ninsertBeforeStart\ninsertAfterEnd\nsetInnerHTML\nsetOuterHTML\n\n\n\n\nParagraph 1\nParagraph 2\n\n\n\n\n\n\nList Item\n\nParagraph 1\nParagraph 2\n\n\n\n\n\nParagraph 1\nParagraph 2\n\nList Item\n\n\n\n\n\n\nList Item\n\n\nParagraph 1\nParagraph 2\n\n\n\n\n\nParagraph 1\nParagraph 2\n\n\nList Item\n\n\n\n\n\n\nList Item\n\n\n\n\n\n\nList Item\n\n\n\n\nWarning: Serialized objects of this class will\n not be compatible with future Swing releases. The current\n serialization support is appropriate for short term storage or RMI\n between applications running the same version of Swing.  As of 1.4,\n support for long term storage of all JavaBeans\u2122\n has been added to the\n java.beans package.  Please see XMLEncoder.", "codes": ["public class HTMLDocument\nextends DefaultStyledDocument"], "fields": [{"field_name": "AdditionalComments", "field_sig": "public static final\u00a0String AdditionalComments", "description": "Document property key value. The value for the key will be a Vector\n of Strings that are comments not found in the body."}], "methods": [{"method_name": "getReader", "method_sig": "public HTMLEditorKit.ParserCallback getReader (int pos)", "description": "Fetches the reader for the parser to use when loading the document\n with HTML.  This is implemented to return an instance of\n HTMLDocument.HTMLReader.\n Subclasses can reimplement this\n method to change how the document gets structured if desired.\n (For example, to handle custom tags, or structurally represent character\n style elements.)"}, {"method_name": "getReader", "method_sig": "public HTMLEditorKit.ParserCallback getReader (int pos,\n                                              int popDepth,\n                                              int pushDepth,\n                                              HTML.Tag insertTag)", "description": "Returns the reader for the parser to use to load the document\n with HTML.  This is implemented to return an instance of\n HTMLDocument.HTMLReader.\n Subclasses can reimplement this\n method to change how the document gets structured if desired.\n (For example, to handle custom tags, or structurally represent character\n style elements.)\n This is a convenience method for\n getReader(int, int, int, HTML.Tag, TRUE)."}, {"method_name": "getBase", "method_sig": "public URL getBase()", "description": "Returns the location to resolve relative URLs against.  By\n default this will be the document's URL if the document\n was loaded from a URL.  If a base tag is found and\n can be parsed, it will be used as the base location."}, {"method_name": "setBase", "method_sig": "public void setBase (URL u)", "description": "Sets the location to resolve relative URLs against.  By\n default this will be the document's URL if the document\n was loaded from a URL.  If a base tag is found and\n can be parsed, it will be used as the base location.\n This also sets the base of the StyleSheet\n to be u as well as the base of the document."}, {"method_name": "insert", "method_sig": "protected void insert (int offset,\n                      DefaultStyledDocument.ElementSpec[] data)\n               throws BadLocationException", "description": "Inserts new elements in bulk.  This is how elements get created\n in the document.  The parsing determines what structure is needed\n and creates the specification as a set of tokens that describe the\n edit while leaving the document free of a write-lock.  This method\n can then be called in bursts by the reader to acquire a write-lock\n for a shorter duration (i.e. while the document is actually being\n altered)."}, {"method_name": "insertUpdate", "method_sig": "protected void insertUpdate (AbstractDocument.DefaultDocumentEvent chng,\n                            AttributeSet attr)", "description": "Updates document structure as a result of text insertion.  This\n will happen within a write lock.  This implementation simply\n parses the inserted content for line breaks and builds up a set\n of instructions for the element buffer."}, {"method_name": "create", "method_sig": "protected void create (DefaultStyledDocument.ElementSpec[] data)", "description": "Replaces the contents of the document with the given\n element specifications.  This is called before insert if\n the loading is done in bursts.  This is the only method called\n if loading the document entirely in one burst."}, {"method_name": "setParagraphAttributes", "method_sig": "public void setParagraphAttributes (int offset,\n                                   int length,\n                                   AttributeSet s,\n                                   boolean replace)", "description": "Sets attributes for a paragraph.\n \n This method is thread safe, although most Swing methods\n are not. Please see\n Concurrency\n in Swing for more information."}, {"method_name": "getStyleSheet", "method_sig": "public StyleSheet getStyleSheet()", "description": "Fetches the StyleSheet with the document-specific display\n rules (CSS) that were specified in the HTML document itself."}, {"method_name": "getIterator", "method_sig": "public HTMLDocument.Iterator getIterator (HTML.Tag t)", "description": "Fetches an iterator for the specified HTML tag.\n This can be used for things like iterating over the\n set of anchors contained, or iterating over the input\n elements."}, {"method_name": "createLeafElement", "method_sig": "protected Element createLeafElement (Element parent,\n                                    AttributeSet a,\n                                    int p0,\n                                    int p1)", "description": "Creates a document leaf element that directly represents\n text (doesn't have any children).  This is implemented\n to return an element of type\n HTMLDocument.RunElement."}, {"method_name": "createBranchElement", "method_sig": "protected Element createBranchElement (Element parent,\n                                      AttributeSet a)", "description": "Creates a document branch element, that can contain other elements.\n This is implemented to return an element of type\n HTMLDocument.BlockElement."}, {"method_name": "createDefaultRoot", "method_sig": "protected AbstractDocument.AbstractElement createDefaultRoot()", "description": "Creates the root element to be used to represent the\n default document structure."}, {"method_name": "setTokenThreshold", "method_sig": "public void setTokenThreshold (int n)", "description": "Sets the number of tokens to buffer before trying to update\n the documents element structure."}, {"method_name": "getTokenThreshold", "method_sig": "public int getTokenThreshold()", "description": "Gets the number of tokens to buffer before trying to update\n the documents element structure.  The default value is\n Integer.MAX_VALUE."}, {"method_name": "setPreservesUnknownTags", "method_sig": "public void setPreservesUnknownTags (boolean preservesTags)", "description": "Determines how unknown tags are handled by the parser.\n If set to true, unknown\n tags are put in the model, otherwise they are dropped."}, {"method_name": "getPreservesUnknownTags", "method_sig": "public boolean getPreservesUnknownTags()", "description": "Returns the behavior the parser observes when encountering\n unknown tags."}, {"method_name": "processHTMLFrameHyperlinkEvent", "method_sig": "public void processHTMLFrameHyperlinkEvent (HTMLFrameHyperlinkEvent e)", "description": "Processes HyperlinkEvents that\n are generated by documents in an HTML frame.\n The HyperlinkEvent type, as the parameter suggests,\n is HTMLFrameHyperlinkEvent.\n In addition to the typical information contained in a\n HyperlinkEvent,\n this event contains the element that corresponds to the frame in\n which the click happened (the source element) and the\n target name.  The target name has 4 possible values:\n \n  _self\n   _parent\n   _top\n   a named frame\n \n\n If target is _self, the action is to change the value of the\n HTML.Attribute.SRC attribute and fires a\n ChangedUpdate event.\n\n If the target is _parent, then it deletes the parent element,\n which is a <FRAMESET> element, and inserts a new <FRAME>\n element, and sets its HTML.Attribute.SRC attribute\n to have a value equal to the destination URL and fire a\n RemovedUpdate and InsertUpdate.\n\n If the target is _top, this method does nothing. In the implementation\n of the view for a frame, namely the FrameView,\n the processing of _top is handled.  Given that _top implies\n replacing the entire document, it made sense to handle this outside\n of the document that it will replace.\n\n If the target is a named frame, then the element hierarchy is searched\n for an element with a name equal to the target, its\n HTML.Attribute.SRC attribute is updated and a\n ChangedUpdate event is fired."}, {"method_name": "setParser", "method_sig": "public void setParser (HTMLEditorKit.Parser parser)", "description": "Sets the parser that is used by the methods that insert html\n into the existing document, such as setInnerHTML,\n and setOuterHTML.\n \nHTMLEditorKit.createDefaultDocument will set the parser\n for you. If you create an HTMLDocument by hand,\n be sure and set the parser accordingly."}, {"method_name": "getParser", "method_sig": "public HTMLEditorKit.Parser getParser()", "description": "Returns the parser that is used when inserting HTML into the existing\n document."}, {"method_name": "setInnerHTML", "method_sig": "public void setInnerHTML (Element elem,\n                         String htmlText)\n                  throws BadLocationException,\n                         IOException", "description": "Replaces the children of the given element with the contents\n specified as an HTML string.\n\n This will be seen as at least two events, n inserts followed by\n a remove.\nConsider the following structure (the elem\n parameter is in bold).\n\n     <body>\n       |\n     <div>\n      /  \\\n    <p>   <p>\n \nInvoking setInnerHTML(elem, \"<ul><li>\")\n results in the following structure (new elements are in blue).\n\n     <body>\n       |\n     <div>\n         \\\n         <ul>\n           \\\n           <li>\n \nParameter elem must not be a leaf element,\n otherwise an IllegalArgumentException is thrown.\n If either elem or htmlText parameter\n is null, no changes are made to the document.\nFor this to work correctly, the document must have an\n HTMLEditorKit.Parser set. This will be the case\n if the document was created from an HTMLEditorKit via the\n createDefaultDocument method."}, {"method_name": "setOuterHTML", "method_sig": "public void setOuterHTML (Element elem,\n                         String htmlText)\n                  throws BadLocationException,\n                         IOException", "description": "Replaces the given element in the parent with the contents\n specified as an HTML string.\n\n This will be seen as at least two events, n inserts followed by\n a remove.\nWhen replacing a leaf this will attempt to make sure there is\n a newline present if one is needed. This may result in an additional\n element being inserted. Consider, if you were to replace a character\n element that contained a newline with <img> this would create\n two elements, one for the image, and one for the newline.\nIf you try to replace the element at length you will most\n likely end up with two elements, eg\n setOuterHTML(getCharacterElement (getLength()),\n \"blah\") will result in two leaf elements at the end, one\n representing 'blah', and the other representing the end\n element.\nConsider the following structure (the elem\n parameter is in bold).\n\n     <body>\n       |\n     <div>\n      /  \\\n    <p>   <p>\n \nInvoking setOuterHTML(elem, \"<ul><li>\")\n results in the following structure (new elements are in blue).\n\n    <body>\n      |\n     <ul>\n       \\\n       <li>\n \nIf either elem or htmlText\n parameter is null, no changes are made to the\n document.\nFor this to work correctly, the document must have an\n HTMLEditorKit.Parser set. This will be the case if the document\n was created from an HTMLEditorKit via the\n createDefaultDocument method."}, {"method_name": "insertAfterStart", "method_sig": "public void insertAfterStart (Element elem,\n                             String htmlText)\n                      throws BadLocationException,\n                             IOException", "description": "Inserts the HTML specified as a string at the start\n of the element.\n\n Consider the following structure (the elem\n parameter is in bold).\n\n     <body>\n       |\n     <div>\n      /  \\\n    <p>   <p>\n \nInvoking insertAfterStart(elem,\n \"<ul><li>\") results in the following structure\n (new elements are in blue).\n\n        <body>\n          |\n        <div>\n       /  |  \\\n    <ul> <p> <p>\n     /\n  <li>\n \nUnlike the insertBeforeStart method, new\n  elements become children of the specified element,\n  not siblings.\nParameter elem must not be a leaf element,\n otherwise an IllegalArgumentException is thrown.\n If either elem or htmlText parameter\n is null, no changes are made to the document.\nFor this to work correctly, the document must have an\n HTMLEditorKit.Parser set. This will be the case\n if the document was created from an HTMLEditorKit via the\n createDefaultDocument method."}, {"method_name": "insertBeforeEnd", "method_sig": "public void insertBeforeEnd (Element elem,\n                            String htmlText)\n                     throws BadLocationException,\n                            IOException", "description": "Inserts the HTML specified as a string at the end of\n the element.\n\n  If elem's children are leaves, and the\n character at a elem.getEndOffset() - 1 is a newline,\n this will insert before the newline so that there isn't text after\n the newline.\nConsider the following structure (the elem\n parameter is in bold).\n\n     <body>\n       |\n     <div>\n      /  \\\n    <p>   <p>\n \nInvoking insertBeforeEnd(elem, \"<ul><li>\")\n results in the following structure (new elements are in blue).\n\n        <body>\n          |\n        <div>\n       /  |  \\\n     <p> <p> <ul>\n               \\\n               <li>\n \nUnlike the insertAfterEnd method, new elements\n become children of the specified element, not\n siblings.\nParameter elem must not be a leaf element,\n otherwise an IllegalArgumentException is thrown.\n If either elem or htmlText parameter\n is null, no changes are made to the document.\nFor this to work correctly, the document must have an\n HTMLEditorKit.Parser set. This will be the case\n if the document was created from an HTMLEditorKit via the\n createDefaultDocument method."}, {"method_name": "insertBeforeStart", "method_sig": "public void insertBeforeStart (Element elem,\n                              String htmlText)\n                       throws BadLocationException,\n                              IOException", "description": "Inserts the HTML specified as a string before the start of\n the given element.\n\n Consider the following structure (the elem\n parameter is in bold).\n\n     <body>\n       |\n     <div>\n      /  \\\n    <p>   <p>\n \nInvoking insertBeforeStart(elem,\n \"<ul><li>\") results in the following structure\n (new elements are in blue).\n\n        <body>\n         /  \\\n      <ul> <div>\n       /    /  \\\n     <li> <p>  <p>\n \nUnlike the insertAfterStart method, new\n elements become siblings of the specified element, not\n children.\nIf either elem or htmlText\n parameter is null, no changes are made to the\n document.\nFor this to work correctly, the document must have an\n HTMLEditorKit.Parser set. This will be the case\n if the document was created from an HTMLEditorKit via the\n createDefaultDocument method."}, {"method_name": "insertAfterEnd", "method_sig": "public void insertAfterEnd (Element elem,\n                           String htmlText)\n                    throws BadLocationException,\n                           IOException", "description": "Inserts the HTML specified as a string after the end of the\n given element.\n\n Consider the following structure (the elem\n parameter is in bold).\n\n     <body>\n       |\n     <div>\n      /  \\\n    <p>   <p>\n \nInvoking insertAfterEnd(elem, \"<ul><li>\")\n results in the following structure (new elements are in blue).\n\n        <body>\n         /  \\\n      <div> <ul>\n       / \\    \\\n     <p> <p>  <li>\n \nUnlike the insertBeforeEnd method, new elements\n become siblings of the specified element, not\n children.\nIf either elem or htmlText\n parameter is null, no changes are made to the\n document.\nFor this to work correctly, the document must have an\n HTMLEditorKit.Parser set. This will be the case\n if the document was created from an HTMLEditorKit via the\n createDefaultDocument method."}, {"method_name": "getElement", "method_sig": "public Element getElement (String id)", "description": "Returns the element that has the given id Attribute.\n If the element can't be found, null is returned.\n Note that this method works on an Attribute,\n not a character tag.  In the following HTML snippet:\n <a id=\"HelloThere\"> the attribute is\n 'id' and the character tag is 'a'.\n This is a convenience method for\n getElement(RootElement, HTML.Attribute.id, id).\n This is not thread-safe."}, {"method_name": "getElement", "method_sig": "public Element getElement (Element e,\n                          Object attribute,\n                          Object value)", "description": "Returns the child element of e that contains the\n attribute, attribute with value value, or\n null if one isn't found. This is not thread-safe."}, {"method_name": "fireChangedUpdate", "method_sig": "protected void fireChangedUpdate (DocumentEvent e)", "description": "Notifies all listeners that have registered interest for\n notification on this event type.  The event instance\n is lazily created using the parameters passed into\n the fire method."}, {"method_name": "fireUndoableEditUpdate", "method_sig": "protected void fireUndoableEditUpdate (UndoableEditEvent e)", "description": "Notifies all listeners that have registered interest for\n notification on this event type.  The event instance\n is lazily created using the parameters passed into\n the fire method."}]}