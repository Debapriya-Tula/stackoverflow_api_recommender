{"name": "Class ArrayType<T>", "module": "java.management", "package": "javax.management.openmbean", "text": "The ArrayType class is the open type class whose instances describe\n all open data values which are n-dimensional arrays of open data values.\n \n Examples of valid ArrayType instances are:\n \n // 2-dimension array of java.lang.String\n ArrayType<String[][]> a1 = new ArrayType<String[][]>(2, SimpleType.STRING);\n\n // 1-dimension array of int\n ArrayType<int[]> a2 = new ArrayType<int[]>(SimpleType.INTEGER, true);\n\n // 1-dimension array of java.lang.Integer\n ArrayType<Integer[]> a3 = new ArrayType<Integer[]>(SimpleType.INTEGER, false);\n\n // 4-dimension array of int\n ArrayType<int[][][][]> a4 = new ArrayType<int[][][][]>(3, a2);\n\n // 4-dimension array of java.lang.Integer\n ArrayType<Integer[][][][]> a5 = new ArrayType<Integer[][][][]>(3, a3);\n\n // 1-dimension array of java.lang.String\n ArrayType<String[]> a6 = new ArrayType<String[]>(SimpleType.STRING, false);\n\n // 1-dimension array of long\n ArrayType<long[]> a7 = new ArrayType<long[]>(SimpleType.LONG, true);\n\n // 1-dimension array of java.lang.Integer\n ArrayType<Integer[]> a8 = ArrayType.getArrayType(SimpleType.INTEGER);\n\n // 2-dimension array of java.lang.Integer\n ArrayType<Integer[][]> a9 = ArrayType.getArrayType(a8);\n\n // 2-dimension array of int\n ArrayType<int[][]> a10 = ArrayType.getPrimitiveArrayType(int[][].class);\n\n // 3-dimension array of int\n ArrayType<int[][][]> a11 = ArrayType.getArrayType(a10);\n\n // 1-dimension array of float\n ArrayType<float[]> a12 = ArrayType.getPrimitiveArrayType(float[].class);\n\n // 2-dimension array of float\n ArrayType<float[][]> a13 = ArrayType.getArrayType(a12);\n\n // 1-dimension array of javax.management.ObjectName\n ArrayType<ObjectName[]> a14 = ArrayType.getArrayType(SimpleType.OBJECTNAME);\n\n // 2-dimension array of javax.management.ObjectName\n ArrayType<ObjectName[][]> a15 = ArrayType.getArrayType(a14);\n\n // 3-dimension array of java.lang.String\n ArrayType<String[][][]> a16 = new ArrayType<String[][][]>(3, SimpleType.STRING);\n\n // 1-dimension array of java.lang.String\n ArrayType<String[]> a17 = new ArrayType<String[]>(1, SimpleType.STRING);\n\n // 2-dimension array of java.lang.String\n ArrayType<String[][]> a18 = new ArrayType<String[][]>(1, a17);\n\n // 3-dimension array of java.lang.String\n ArrayType<String[][][]> a19 = new ArrayType<String[][][]>(1, a18);\n ", "codes": ["public class ArrayType<T>\nextends OpenType<T>"], "fields": [], "methods": [{"method_name": "getDimension", "method_sig": "public int getDimension()", "description": "Returns the dimension of arrays described by this ArrayType instance."}, {"method_name": "getElementOpenType", "method_sig": "public OpenType<?> getElementOpenType()", "description": "Returns the open type of element values contained\n in the arrays described by this ArrayType instance."}, {"method_name": "isPrimitiveArray", "method_sig": "public boolean isPrimitiveArray()", "description": "Returns true if the open data values this open\n type describes are primitive arrays, false otherwise."}, {"method_name": "isValue", "method_sig": "public boolean isValue (Object obj)", "description": "Tests whether obj is a value for this ArrayType\n instance.\n \n This method returns true if and only if obj\n is not null, obj is an array and any one of the following\n is true:\n\n \nif this ArrayType instance describes an array of\n SimpleType elements or their corresponding primitive types,\n obj's class name is the same as the className field defined\n for this ArrayType instance (i.e. the class name returned\n by the getClassName method, which\n includes the dimension information),\u00a0\nif this ArrayType instance describes an array of\n classes implementing the TabularData interface or the\n CompositeData interface, obj is assignable to\n such a declared array, and each element contained in {obj\n is either null or a valid value for the element's open type specified\n by this ArrayType instance.\n"}, {"method_name": "equals", "method_sig": "public boolean equals (Object obj)", "description": "Compares the specified obj parameter with this\n ArrayType instance for equality.\n \n Two ArrayType instances are equal if and only if they\n describe array instances which have the same dimension, elements'\n open type and primitive array flag."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Returns the hash code value for this ArrayType instance.\n \n The hash code of an ArrayType instance is the sum of the\n hash codes of all the elements of information used in equals\n comparisons (i.e. dimension, elements' open type and primitive array flag).\n The hashcode for a primitive value is the hashcode of the corresponding boxed\n object (e.g. the hashcode for true is Boolean.TRUE.hashCode()).\n This ensures that t1.equals(t2) implies that\n t1.hashCode()==t2.hashCode() for any two\n ArrayType instances t1 and t2,\n as required by the general contract of the method\n Object.hashCode().\n \n As ArrayType instances are immutable, the hash\n code for this instance is calculated once, on the first call\n to hashCode, and then the same value is returned\n for subsequent calls."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a string representation of this ArrayType instance.\n \n The string representation consists of the name of this class (i.e.\n javax.management.openmbean.ArrayType), the type name,\n the dimension, the elements' open type and the primitive array flag\n defined for this instance.\n \n As ArrayType instances are immutable, the\n string representation for this instance is calculated\n once, on the first call to toString, and\n then the same value is returned for subsequent calls."}, {"method_name": "getArrayType", "method_sig": "public static <E> ArrayType<E[]> getArrayType (OpenType<E> elementType)\n                                       throws OpenDataException", "description": "Create an ArrayType instance in a type-safe manner.\n \n Multidimensional arrays can be built up by calling this method as many\n times as necessary.\n \n Calling this method twice with the same parameters may return the same\n object or two equal but not identical objects.\n \n As an example, the following piece of code:\n \n ArrayType<String[]> t1 = ArrayType.getArrayType(SimpleType.STRING);\n ArrayType<String[][]> t2 = ArrayType.getArrayType(t1);\n ArrayType<String[][][]> t3 = ArrayType.getArrayType(t2);\n System.out.println(\"array class name       = \" + t3.getClassName());\n System.out.println(\"element class name     = \" + t3.getElementOpenType().getClassName());\n System.out.println(\"array type name        = \" + t3.getTypeName());\n System.out.println(\"array type description = \" + t3.getDescription());\n \n would produce the following output:\n \n array class name       = [[[Ljava.lang.String;\n element class name     = java.lang.String\n array type name        = [[[Ljava.lang.String;\n array type description = 3-dimension array of java.lang.String\n "}, {"method_name": "getPrimitiveArrayType", "method_sig": "public static <T> ArrayType<T> getPrimitiveArrayType (Class<T> arrayClass)", "description": "Create an ArrayType instance in a type-safe manner.\n \n Calling this method twice with the same parameters may return the\n same object or two equal but not identical objects.\n \n As an example, the following piece of code:\n \n ArrayType<int[][][]> t = ArrayType.getPrimitiveArrayType(int[][][].class);\n System.out.println(\"array class name       = \" + t.getClassName());\n System.out.println(\"element class name     = \" + t.getElementOpenType().getClassName());\n System.out.println(\"array type name        = \" + t.getTypeName());\n System.out.println(\"array type description = \" + t.getDescription());\n \n would produce the following output:\n \n array class name       = [[[I\n element class name     = java.lang.Integer\n array type name        = [[[I\n array type description = 3-dimension array of int\n "}]}