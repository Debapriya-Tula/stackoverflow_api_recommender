{"name": "Class Segment", "module": "java.desktop", "package": "javax.swing.text", "text": "A segment of a character array representing a fragment\n of text.  It should be treated as immutable even though\n the array is directly accessible.  This gives fast access\n to fragments of text without the overhead of copying\n around characters.  This is effectively an unprotected\n String.\n \n The Segment implements the java.text.CharacterIterator\n interface to support use with the i18n support without\n copying text into a string.", "codes": ["public class Segment\nextends Object\nimplements Cloneable, CharacterIterator, CharSequence"], "fields": [{"field_name": "array", "field_sig": "public\u00a0char[] array", "description": "This is the array containing the text of\n interest.  This array should never be modified;\n it is available only for efficiency."}, {"field_name": "offset", "field_sig": "public\u00a0int offset", "description": "This is the offset into the array that\n the desired text begins."}, {"field_name": "count", "field_sig": "public\u00a0int count", "description": "This is the number of array elements that\n make up the text of interest."}], "methods": [{"method_name": "setPartialReturn", "method_sig": "public void setPartialReturn (boolean p)", "description": "Flag to indicate that partial returns are valid.  If the flag is true,\n an implementation of the interface method Document.getText(position,length,Segment)\n should return as much text as possible without making a copy.  The default\n state of the flag is false which will cause Document.getText(position,length,Segment)\n to provide the same return behavior it always had, which may or may not\n make a copy of the text depending upon the request."}, {"method_name": "isPartialReturn", "method_sig": "public boolean isPartialReturn()", "description": "Flag to indicate that partial returns are valid."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Converts a segment into a String."}, {"method_name": "first", "method_sig": "public char first()", "description": "Sets the position to getBeginIndex() and returns the character at that\n position."}, {"method_name": "last", "method_sig": "public char last()", "description": "Sets the position to getEndIndex()-1 (getEndIndex() if the text is empty)\n and returns the character at that position."}, {"method_name": "current", "method_sig": "public char current()", "description": "Gets the character at the current position (as returned by getIndex())."}, {"method_name": "next", "method_sig": "public char next()", "description": "Increments the iterator's index by one and returns the character\n at the new index.  If the resulting index is greater or equal\n to getEndIndex(), the current index is reset to getEndIndex() and\n a value of DONE is returned."}, {"method_name": "previous", "method_sig": "public char previous()", "description": "Decrements the iterator's index by one and returns the character\n at the new index. If the current index is getBeginIndex(), the index\n remains at getBeginIndex() and a value of DONE is returned."}, {"method_name": "setIndex", "method_sig": "public char setIndex (int position)", "description": "Sets the position to the specified position in the text and returns that\n character."}, {"method_name": "getBeginIndex", "method_sig": "public int getBeginIndex()", "description": "Returns the start index of the text."}, {"method_name": "getEndIndex", "method_sig": "public int getEndIndex()", "description": "Returns the end index of the text.  This index is the index of the first\n character following the end of the text."}, {"method_name": "getIndex", "method_sig": "public int getIndex()", "description": "Returns the current index."}, {"method_name": "charAt", "method_sig": "public char charAt (int index)", "description": "Returns the char value at the specified index.  An index ranges from zero\n to length() - 1.  The first char value of the sequence is at\n index zero, the next at index one, and so on, as for array\n indexing.\n\n If the char value specified by the index is a\n surrogate, the surrogate\n value is returned."}, {"method_name": "length", "method_sig": "public int length()", "description": "Returns the length of this character sequence.  The length is the number\n of 16-bit chars in the sequence."}, {"method_name": "subSequence", "method_sig": "public CharSequence subSequence (int start,\n                                int end)", "description": "Returns a CharSequence that is a subsequence of this sequence.\n The subsequence starts with the char value at the specified index and\n ends with the char value at index end - 1.  The length\n (in chars) of the\n returned sequence is end - start, so if start == end\n then an empty sequence is returned."}, {"method_name": "clone", "method_sig": "public Object clone()", "description": "Creates a shallow copy."}]}