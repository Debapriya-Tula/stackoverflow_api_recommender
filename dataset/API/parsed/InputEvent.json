{"name": "Class InputEvent", "module": "java.desktop", "package": "java.awt.event", "text": "The root event class for all component-level input events.\n\n Input events are delivered to listeners before they are\n processed normally by the source where they originated.\n This allows listeners and component subclasses to \"consume\"\n the event so that the source will not process them in their\n default manner.  For example, consuming mousePressed events\n on a Button component will prevent the Button from being\n activated.", "codes": ["public abstract class InputEvent\nextends ComponentEvent"], "fields": [{"field_name": "SHIFT_MASK", "field_sig": "@Deprecated(since=\"9\")\npublic static final\u00a0int SHIFT_MASK", "description": "The Shift key modifier constant."}, {"field_name": "CTRL_MASK", "field_sig": "@Deprecated(since=\"9\")\npublic static final\u00a0int CTRL_MASK", "description": "The Control key modifier constant."}, {"field_name": "META_MASK", "field_sig": "@Deprecated(since=\"9\")\npublic static final\u00a0int META_MASK", "description": "The Meta key modifier constant."}, {"field_name": "ALT_MASK", "field_sig": "@Deprecated(since=\"9\")\npublic static final\u00a0int ALT_MASK", "description": "The Alt key modifier constant."}, {"field_name": "ALT_GRAPH_MASK", "field_sig": "@Deprecated(since=\"9\")\npublic static final\u00a0int ALT_GRAPH_MASK", "description": "The AltGraph key modifier constant."}, {"field_name": "BUTTON1_MASK", "field_sig": "@Deprecated(since=\"9\")\npublic static final\u00a0int BUTTON1_MASK", "description": "The Mouse Button1 modifier constant."}, {"field_name": "BUTTON2_MASK", "field_sig": "@Deprecated(since=\"9\")\npublic static final\u00a0int BUTTON2_MASK", "description": "The Mouse Button2 modifier constant."}, {"field_name": "BUTTON3_MASK", "field_sig": "@Deprecated(since=\"9\")\npublic static final\u00a0int BUTTON3_MASK", "description": "The Mouse Button3 modifier constant."}, {"field_name": "SHIFT_DOWN_MASK", "field_sig": "public static final\u00a0int SHIFT_DOWN_MASK", "description": "The Shift key extended modifier constant."}, {"field_name": "CTRL_DOWN_MASK", "field_sig": "public static final\u00a0int CTRL_DOWN_MASK", "description": "The Control key extended modifier constant."}, {"field_name": "META_DOWN_MASK", "field_sig": "public static final\u00a0int META_DOWN_MASK", "description": "The Meta key extended modifier constant."}, {"field_name": "ALT_DOWN_MASK", "field_sig": "public static final\u00a0int ALT_DOWN_MASK", "description": "The Alt key extended modifier constant."}, {"field_name": "BUTTON1_DOWN_MASK", "field_sig": "public static final\u00a0int BUTTON1_DOWN_MASK", "description": "The Mouse Button1 extended modifier constant."}, {"field_name": "BUTTON2_DOWN_MASK", "field_sig": "public static final\u00a0int BUTTON2_DOWN_MASK", "description": "The Mouse Button2 extended modifier constant."}, {"field_name": "BUTTON3_DOWN_MASK", "field_sig": "public static final\u00a0int BUTTON3_DOWN_MASK", "description": "The Mouse Button3 extended modifier constant."}, {"field_name": "ALT_GRAPH_DOWN_MASK", "field_sig": "public static final\u00a0int ALT_GRAPH_DOWN_MASK", "description": "The AltGraph key extended modifier constant."}], "methods": [{"method_name": "getMaskForButton", "method_sig": "public static int getMaskForButton (int button)", "description": "A method to obtain a mask for any existing mouse button.\n The returned mask may be used for different purposes. Following are some of them:\n \n mousePress(buttons) and\n      mouseRelease(buttons)\n as a modifiers parameter when creating a new MouseEvent instance\n  to check modifiersEx of existing MouseEvent\n"}, {"method_name": "isShiftDown", "method_sig": "public boolean isShiftDown()", "description": "Returns whether or not the Shift modifier is down on this event."}, {"method_name": "isControlDown", "method_sig": "public boolean isControlDown()", "description": "Returns whether or not the Control modifier is down on this event."}, {"method_name": "isMetaDown", "method_sig": "public boolean isMetaDown()", "description": "Returns whether or not the Meta modifier is down on this event."}, {"method_name": "isAltDown", "method_sig": "public boolean isAltDown()", "description": "Returns whether or not the Alt modifier is down on this event."}, {"method_name": "isAltGraphDown", "method_sig": "public boolean isAltGraphDown()", "description": "Returns whether or not the AltGraph modifier is down on this event."}, {"method_name": "getWhen", "method_sig": "public long getWhen()", "description": "Returns the difference in milliseconds between the timestamp of when this event occurred and\n midnight, January 1, 1970 UTC."}, {"method_name": "getModifiers", "method_sig": "@Deprecated(since=\"9\")\npublic int getModifiers()", "description": "Returns the modifier mask for this event."}, {"method_name": "getModifiersEx", "method_sig": "public int getModifiersEx()", "description": "Returns the extended modifier mask for this event.\n \n Extended modifiers are the modifiers that ends with the _DOWN_MASK suffix,\n such as ALT_DOWN_MASK, BUTTON1_DOWN_MASK, and others.\n \n Extended modifiers represent the state of all modal keys,\n such as ALT, CTRL, META, and the mouse buttons just after\n the event occurred.\n \n For example, if the user presses button 1 followed by\n button 2, and then releases them in the same order,\n the following sequence of events is generated:\n \n    MOUSE_PRESSED:  BUTTON1_DOWN_MASK\n    MOUSE_PRESSED:  BUTTON1_DOWN_MASK | BUTTON2_DOWN_MASK\n    MOUSE_RELEASED: BUTTON2_DOWN_MASK\n    MOUSE_CLICKED:  BUTTON2_DOWN_MASK\n    MOUSE_RELEASED:\n    MOUSE_CLICKED:\n \n\n It is not recommended to compare the return value of this method\n using == because new modifiers can be added in the future.\n For example, the appropriate way to check that SHIFT and BUTTON1 are\n down, but CTRL is up is demonstrated by the following code:\n \n    int onmask = SHIFT_DOWN_MASK | BUTTON1_DOWN_MASK;\n    int offmask = CTRL_DOWN_MASK;\n    if ((event.getModifiersEx() & (onmask | offmask)) == onmask) {\n        ...\n    }\n \n The above code will work even if new modifiers are added."}, {"method_name": "consume", "method_sig": "public void consume()", "description": "Consumes this event so that it will not be processed\n in the default manner by the source which originated it."}, {"method_name": "isConsumed", "method_sig": "public boolean isConsumed()", "description": "Returns whether or not this event has been consumed."}, {"method_name": "getModifiersExText", "method_sig": "public static String getModifiersExText (int modifiers)", "description": "Returns a String describing the extended modifier keys and\n mouse buttons, such as \"Shift\", \"Button1\", or \"Ctrl+Shift\".\n These strings can be localized by changing the\n awt.properties file.\n \n Note that passing negative parameter is incorrect,\n and will cause the returning an unspecified string.\n Zero parameter means that no modifiers were passed and will\n cause the returning an empty string."}]}