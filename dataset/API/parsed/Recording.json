{"name": "Class Recording", "module": "jdk.jfr", "package": "jdk.jfr", "text": "Provides means to configure, start, stop and dump recording data to disk.\n \n The following example shows how configure, start, stop and dump recording data to disk.\n\n \n \n   Configuration c = Configuration.getConfiguration(\"default\");\n   Recording r = new Recording(c);\n   r.start();\n   System.gc();\n   Thread.sleep(5000);\n   r.stop();\n   r.copyTo(Files.createTempFile(\"my-recording\", \".jfr\"));\n \n ", "codes": ["public final class Recording\nextends Object\nimplements Closeable"], "fields": [], "methods": [{"method_name": "start", "method_sig": "public void start()", "description": "Starts this recording.\n \n It's recommended that the recording options and event settings are configured\n before calling this method. The benefits of doing so are a more consistent\n state when analyzing the recorded data, and improved performance because the\n configuration can be applied atomically.\n \n After a successful invocation of this method, this recording is in the\n RUNNING state."}, {"method_name": "scheduleStart", "method_sig": "public void scheduleStart (Duration delay)", "description": "Starts this recording after a delay.\n \n After a successful invocation of this method, this recording is in the\n DELAYED state."}, {"method_name": "stop", "method_sig": "public boolean stop()", "description": "Stops this recording.\n \n When a recording is stopped it can't be restarted. If this\n recording has a destination, data is written to that destination and\n the recording is closed. After a recording is closed, the data is no longer\n available.\n \n After a successful invocation of this method, this recording will be\n in the STOPPED state."}, {"method_name": "getSettings", "method_sig": "public Map<String, String> getSettings()", "description": "Returns settings used by this recording.\n \n Modifying the returned Map will not change the settings for this recording.\n \n If no settings are set for this recording, an empty Map is\n returned."}, {"method_name": "getSize", "method_sig": "public long getSize()", "description": "Returns the current size of this recording in the disk repository,\n measured in bytes.\n \n The size is updated when recording buffers are flushed. If the recording is\n not written to the disk repository the returned size is always 0."}, {"method_name": "getStopTime", "method_sig": "public Instant getStopTime()", "description": "Returns the time when this recording was stopped."}, {"method_name": "getStartTime", "method_sig": "public Instant getStartTime()", "description": "Returns the time when this recording was started."}, {"method_name": "getMaxSize", "method_sig": "public long getMaxSize()", "description": "Returns the maximum size, measured in bytes, at which data is no longer kept in the disk repository."}, {"method_name": "getMaxAge", "method_sig": "public Duration getMaxAge()", "description": "Returns the length of time that the data is kept in the disk repository\n before it is removed."}, {"method_name": "getName", "method_sig": "public String getName()", "description": "Returns the name of this recording.\n \n By default, the name is the same as the recording ID."}, {"method_name": "setSettings", "method_sig": "public void setSettings (Map<String, String> settings)", "description": "Replaces all settings for this recording.\n \n The following example shows how to set event settings for a recording.\n\n \n \n     Map<String, String> settings = new HashMap<>();\n     settings.putAll(EventSettings.enabled(\"jdk.CPUSample\").withPeriod(Duration.ofSeconds(2)).toMap());\n     settings.putAll(EventSettings.enabled(MyEvent.class).withThreshold(Duration.ofSeconds(2)).withoutStackTrace().toMap());\n     settings.put(\"jdk.ExecutionSample#period\", \"10 ms\");\n     recording.setSettings(settings);\n \n \n\n The following example shows how to merge settings.\n\n \n     \n     Map<String, String> settings = recording.getSettings();\n     settings.putAll(additionalSettings);\n     recording.setSettings(settings);\n \n "}, {"method_name": "getState", "method_sig": "public RecordingState getState()", "description": "Returns the recording state that this recording is currently in."}, {"method_name": "close", "method_sig": "public void close()", "description": "Releases all data that is associated with this recording.\n \n After a successful invocation of this method, this recording is in the\n CLOSED state."}, {"method_name": "copy", "method_sig": "public Recording copy (boolean stop)", "description": "Returns a clone of this recording, with a new recording ID and name.\n\n Clones are useful for dumping data without stopping the recording. After\n a clone is created, the amount of data to copy is constrained\n with the setMaxAge(Duration) method and the setMaxSize(long)method."}, {"method_name": "dump", "method_sig": "public void dump (Path destination)\n          throws IOException", "description": "Writes recording data to a file.\n \n Recording must be started, but not necessarily stopped."}, {"method_name": "isToDisk", "method_sig": "public boolean isToDisk()", "description": "Returns true if this recording uses the disk repository, false otherwise.\n \n If no value is set, true is returned."}, {"method_name": "setMaxSize", "method_sig": "public void setMaxSize (long maxSize)", "description": "Determines how much data is kept in the disk repository.\n \n To control the amount of recording data that is stored on disk, the maximum\n amount of data to retain can be specified. When the maximum limit is\n exceeded, the Java Virtual Machine (JVM) removes the oldest chunk to make\n room for a more recent chunk.\n \n If neither maximum limit or the maximum age is set, the size of the\n recording may grow indefinitely."}, {"method_name": "setMaxAge", "method_sig": "public void setMaxAge (Duration maxAge)", "description": "Determines how far back data is kept in the disk repository.\n \n To control the amount of recording data stored on disk, the maximum length of\n time to retain the data can be specified. Data stored on disk that is older\n than the specified length of time is removed by the Java Virtual Machine (JVM).\n \n If neither maximum limit or the maximum age is set, the size of the\n recording may grow indefinitely."}, {"method_name": "setDestination", "method_sig": "public void setDestination (Path destination)\n                    throws IOException", "description": "Sets a location where data is written on recording stop, or\n null if data is not to be dumped.\n \n If a destination is set, this recording is automatically closed\n after data is successfully copied to the destination path.\n \n If a destination is not set, Flight Recorder retains the\n recording data until this recording is closed. Use the dump(Path) method to\n manually write data to a file."}, {"method_name": "getDestination", "method_sig": "public Path getDestination()", "description": "Returns the destination file, where recording data is written when the\n recording stops, or null if no destination is set."}, {"method_name": "getId", "method_sig": "public long getId()", "description": "Returns a unique ID for this recording."}, {"method_name": "setName", "method_sig": "public void setName (String name)", "description": "Sets a human-readable name (for example, \"My Recording\")."}, {"method_name": "setDumpOnExit", "method_sig": "public void setDumpOnExit (boolean dumpOnExit)", "description": "Sets whether this recording is dumped to disk when the JVM exits."}, {"method_name": "getDumpOnExit", "method_sig": "public boolean getDumpOnExit()", "description": "Returns whether this recording is dumped to disk when the JVM exits.\n \n If dump on exit is not set, false is returned."}, {"method_name": "setToDisk", "method_sig": "public void setToDisk (boolean disk)", "description": "Determines whether this recording is continuously flushed to the disk\n repository or data is constrained to what is available in memory buffers."}, {"method_name": "getStream", "method_sig": "public InputStream getStream (Instant start,\n                             Instant end)\n                      throws IOException", "description": "Creates a data stream for a specified interval.\n \n The stream may contain some data outside the specified range."}, {"method_name": "getDuration", "method_sig": "public Duration getDuration()", "description": "Returns the specified duration for this recording, or null if no\n duration is set.\n \n The duration can be set only when the recording is in the\n RecordingState.NEW state."}, {"method_name": "setDuration", "method_sig": "public void setDuration (Duration duration)", "description": "Sets a duration for how long a recording runs before it stops.\n \n By default, a recording has no duration (null)."}, {"method_name": "enable", "method_sig": "public EventSettings enable (String name)", "description": "Enables the event with the specified name.\n \n If multiple events have the same name (for example, the same class is loaded\n in different class loaders), then all events that match the name are enabled. To\n enable a specific class, use the enable(Class) method or a String\n representation of the event type ID."}, {"method_name": "disable", "method_sig": "public EventSettings disable (String name)", "description": "Disables event with the specified name.\n \n If multiple events with same name (for example, the same class is loaded\n in different class loaders), then all events that match the\n name is disabled. To disable a specific class, use the\n disable(Class) method or a String representation of the event\n type ID."}, {"method_name": "enable", "method_sig": "public EventSettings enable (Class<? extends Event> eventClass)", "description": "Enables event."}, {"method_name": "disable", "method_sig": "public EventSettings disable (Class<? extends Event> eventClass)", "description": "Disables event."}]}