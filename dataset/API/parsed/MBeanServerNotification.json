{"name": "Class MBeanServerNotification", "module": "java.management", "package": "javax.management", "text": "Represents a notification emitted by the MBean Server through the MBeanServerDelegate MBean.\n The MBean Server emits the following types of notifications: MBean registration, MBean\n unregistration.\n \n To receive MBeanServerNotifications, you need to register a listener with\n the MBeanServerDelegate MBean\n that represents the MBeanServer. The ObjectName of the MBeanServerDelegate is\n MBeanServerDelegate.DELEGATE_NAME, which is\n JMImplementation:type=MBeanServerDelegate.\n\n The following code prints a message every time an MBean is registered\n or unregistered in the MBean Server mbeanServer:\n\n private static final NotificationListener printListener = new NotificationListener() {\n     public void handleNotification(Notification n, Object handback) {\n         if (!(n instanceof MBeanServerNotification)) {\n             System.out.println(\"Ignored notification of class \" + n.getClass().getName());\n             return;\n         }\n         MBeanServerNotification mbsn = (MBeanServerNotification) n;\n         String what;\n         if (n.getType().equals(MBeanServerNotification.REGISTRATION_NOTIFICATION))\n             what = \"MBean registered\";\n         else if (n.getType().equals(MBeanServerNotification.UNREGISTRATION_NOTIFICATION))\n             what = \"MBean unregistered\";\n         else\n             what = \"Unknown type \" + n.getType();\n         System.out.println(\"Received MBean Server notification: \" + what + \": \" +\n                 mbsn.getMBeanName());\n     }\n };\n\n ...\n     mbeanServer.addNotificationListener(\n             MBeanServerDelegate.DELEGATE_NAME, printListener, null, null);\n \n\n An MBean which is not an MBeanServerDelegate may also emit\n MBeanServerNotifications. In particular, there is a convention for\n MBeans to emit an MBeanServerNotification for a group of MBeans.\nAn MBeanServerNotification emitted to denote the registration or\n unregistration of a group of MBeans has the following characteristics:\n Its notification type is\n     \"JMX.mbean.registered.group\" or\n     \"JMX.mbean.unregistered.group\", which can also be written REGISTRATION_NOTIFICATION+ \".group\" or\n     UNREGISTRATION_NOTIFICATION+ \".group\".\n \nIts MBean name is an ObjectName pattern\n     that selects the set (or a superset) of the MBeans being registered\n     or unregistered\nIts user data can optionally\n     be set to an array of ObjectNames containing the names of all MBeans\n     being registered or unregistered.\n\n\n MBeans which emit these group registration/unregistration notifications will\n declare them in their MBeanNotificationInfo.\n ", "codes": ["public class MBeanServerNotification\nextends Notification"], "fields": [{"field_name": "REGISTRATION_NOTIFICATION", "field_sig": "public static final\u00a0String REGISTRATION_NOTIFICATION", "description": "Notification type denoting that an MBean has been registered.\n Value is \"JMX.mbean.registered\"."}, {"field_name": "UNREGISTRATION_NOTIFICATION", "field_sig": "public static final\u00a0String UNREGISTRATION_NOTIFICATION", "description": "Notification type denoting that an MBean has been unregistered.\n Value is \"JMX.mbean.unregistered\"."}], "methods": [{"method_name": "getMBeanName", "method_sig": "public ObjectName getMBeanName()", "description": "Returns the  object name of the MBean that caused the notification."}]}