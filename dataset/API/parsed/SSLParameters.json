{"name": "Class SSLParameters", "module": "java.base", "package": "javax.net.ssl", "text": "Encapsulates parameters for an SSL/TLS/DTLS connection. The parameters\n are the list of ciphersuites to be accepted in an SSL/TLS/DTLS handshake,\n the list of protocols to be allowed, the endpoint identification\n algorithm during SSL/TLS/DTLS handshaking, the Server Name Indication (SNI),\n the maximum network packet size, the algorithm constraints and whether\n SSL/TLS/DTLS servers should request or require client authentication, etc.\n \n SSLParameters can be created via the constructors in this class.\n Objects can also be obtained using the getSSLParameters()\n methods in\n SSLSocket and\n SSLServerSocket and\n SSLEngine or the\n getDefaultSSLParameters() and\n getSupportedSSLParameters()\n methods in SSLContext.\n \n SSLParameters can be applied to a connection via the methods\n SSLSocket.setSSLParameters() and\n SSLServerSocket.setSSLParameters()\n and SSLEngine.setSSLParameters().\n \n For example:\n\n \n     SSLParameters p = sslSocket.getSSLParameters();\n     p.setProtocols(new String[] { \"TLSv1.2\" });\n     p.setCipherSuites(\n         new String[] { \"TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\", ... });\n     p.setApplicationProtocols(new String[] {\"h2\", \"http/1.1\"});\n     sslSocket.setSSLParameters(p);\n ", "codes": ["public class SSLParameters\nextends Object"], "fields": [], "methods": [{"method_name": "getCipherSuites", "method_sig": "public String[] getCipherSuites()", "description": "Returns a copy of the array of ciphersuites or null if none\n have been set.\n \n The returned array includes cipher suites from the list of standard\n cipher suite names in the \n JSSE Cipher Suite Names section of the Java Cryptography\n Architecture Standard Algorithm Name Documentation, and may also\n include other cipher suites that the provider supports."}, {"method_name": "setCipherSuites", "method_sig": "public void setCipherSuites (String[] cipherSuites)", "description": "Sets the array of ciphersuites."}, {"method_name": "getProtocols", "method_sig": "public String[] getProtocols()", "description": "Returns a copy of the array of protocols or null if none\n have been set."}, {"method_name": "setProtocols", "method_sig": "public void setProtocols (String[] protocols)", "description": "Sets the array of protocols."}, {"method_name": "getWantClientAuth", "method_sig": "public boolean getWantClientAuth()", "description": "Returns whether client authentication should be requested."}, {"method_name": "setWantClientAuth", "method_sig": "public void setWantClientAuth (boolean wantClientAuth)", "description": "Sets whether client authentication should be requested. Calling\n this method clears the needClientAuth flag."}, {"method_name": "getNeedClientAuth", "method_sig": "public boolean getNeedClientAuth()", "description": "Returns whether client authentication should be required."}, {"method_name": "setNeedClientAuth", "method_sig": "public void setNeedClientAuth (boolean needClientAuth)", "description": "Sets whether client authentication should be required. Calling\n this method clears the wantClientAuth flag."}, {"method_name": "getAlgorithmConstraints", "method_sig": "public AlgorithmConstraints getAlgorithmConstraints()", "description": "Returns the cryptographic algorithm constraints."}, {"method_name": "setAlgorithmConstraints", "method_sig": "public void setAlgorithmConstraints (AlgorithmConstraints constraints)", "description": "Sets the cryptographic algorithm constraints, which will be used\n in addition to any configured by the runtime environment.\n \n If the constraints parameter is non-null, every\n cryptographic algorithm, key and algorithm parameters used in the\n SSL/TLS/DTLS handshake must be permitted by the constraints."}, {"method_name": "getEndpointIdentificationAlgorithm", "method_sig": "public String getEndpointIdentificationAlgorithm()", "description": "Gets the endpoint identification algorithm."}, {"method_name": "setEndpointIdentificationAlgorithm", "method_sig": "public void setEndpointIdentificationAlgorithm (String algorithm)", "description": "Sets the endpoint identification algorithm.\n \n If the algorithm parameter is non-null or non-empty, the\n endpoint identification/verification procedures must be handled during\n SSL/TLS/DTLS handshaking.  This is to prevent man-in-the-middle attacks."}, {"method_name": "setServerNames", "method_sig": "public final void setServerNames (List<SNIServerName> serverNames)", "description": "Sets the desired SNIServerNames of the Server Name\n Indication (SNI) parameter.\n \n This method is only useful to SSLSockets or SSLEngines\n operating in client mode.\n \n Note that the serverNames list is cloned\n to protect against subsequent modification."}, {"method_name": "getServerNames", "method_sig": "public final List<SNIServerName> getServerNames()", "description": "Returns a List containing all SNIServerNames of the\n Server Name Indication (SNI) parameter, or null if none has been set.\n \n This method is only useful to SSLSockets or SSLEngines\n operating in client mode.\n \n For SSL/TLS/DTLS connections, the underlying SSL/TLS/DTLS provider\n may specify a default value for a certain server name type.  In\n client mode, it is recommended that, by default, providers should\n include the server name indication whenever the server can be located\n by a supported server name type.\n \n It is recommended that providers initialize default Server Name\n Indications when creating SSLSocket/SSLEngines.\n In the following examples, the server name could be represented by an\n instance of SNIHostName which has been initialized with the\n hostname \"www.example.com\" and type\n StandardConstants.SNI_HOST_NAME.\n\n \n     Socket socket =\n         sslSocketFactory.createSocket(\"www.example.com\", 443);\n \n or\n \n     SSLEngine engine =\n         sslContext.createSSLEngine(\"www.example.com\", 443);\n "}, {"method_name": "setSNIMatchers", "method_sig": "public final void setSNIMatchers (Collection<SNIMatcher> matchers)", "description": "Sets the SNIMatchers of the Server Name Indication (SNI)\n parameter.\n \n This method is only useful to SSLSockets or SSLEngines\n operating in server mode.\n \n Note that the matchers collection is cloned to protect\n against subsequent modification."}, {"method_name": "getSNIMatchers", "method_sig": "public final Collection<SNIMatcher> getSNIMatchers()", "description": "Returns a Collection containing all SNIMatchers of the\n Server Name Indication (SNI) parameter, or null if none has been set.\n \n This method is only useful to SSLSockets or SSLEngines\n operating in server mode.\n \n For better interoperability, providers generally will not define\n default matchers so that by default servers will ignore the SNI\n extension and continue the handshake."}, {"method_name": "setUseCipherSuitesOrder", "method_sig": "public final void setUseCipherSuitesOrder (boolean honorOrder)", "description": "Sets whether the local cipher suites preference should be honored."}, {"method_name": "getUseCipherSuitesOrder", "method_sig": "public final boolean getUseCipherSuitesOrder()", "description": "Returns whether the local cipher suites preference should be honored."}, {"method_name": "setEnableRetransmissions", "method_sig": "public void setEnableRetransmissions (boolean enableRetransmissions)", "description": "Sets whether DTLS handshake retransmissions should be enabled.\n\n This method only applies to DTLS."}, {"method_name": "getEnableRetransmissions", "method_sig": "public boolean getEnableRetransmissions()", "description": "Returns whether DTLS handshake retransmissions should be enabled.\n\n This method only applies to DTLS."}, {"method_name": "setMaximumPacketSize", "method_sig": "public void setMaximumPacketSize (int maximumPacketSize)", "description": "Sets the maximum expected network packet size in bytes for\n SSL/TLS/DTLS records."}, {"method_name": "getMaximumPacketSize", "method_sig": "public int getMaximumPacketSize()", "description": "Returns the maximum expected network packet size in bytes for\n SSL/TLS/DTLS records."}, {"method_name": "getApplicationProtocols", "method_sig": "public String[] getApplicationProtocols()", "description": "Returns a prioritized array of application-layer protocol names that\n can be negotiated over the SSL/TLS/DTLS protocols.\n \n The array could be empty (zero-length), in which case protocol\n indications will not be used.\n \n This method will return a new array each time it is invoked."}, {"method_name": "setApplicationProtocols", "method_sig": "public void setApplicationProtocols (String[] protocols)", "description": "Sets the prioritized array of application-layer protocol names that\n can be negotiated over the SSL/TLS/DTLS protocols.\n \n If application-layer protocols are supported by the underlying\n SSL/TLS implementation, this method configures which values can\n be negotiated by protocols such as  RFC 7301 , the\n Application Layer Protocol Negotiation (ALPN).\n \n If this end of the connection is expected to offer application protocol\n values, all protocols configured by this method will be sent to the\n peer.\n \n If this end of the connection is expected to select the application\n protocol value, the protocols configured by this method are\n compared with those sent by the peer.  The first matched value becomes\n the negotiated value.  If none of the protocols were actually\n requested by the peer, the underlying protocol will determine what\n action to take.  (For example, ALPN will send a\n \"no_application_protocol\" alert and terminate the connection.)"}]}