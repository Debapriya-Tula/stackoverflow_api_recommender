{"name": "Class PriorityQueue<E>", "module": "java.base", "package": "java.util", "text": "An unbounded priority queue based on a priority heap.\n The elements of the priority queue are ordered according to their\n natural ordering, or by a Comparator\n provided at queue construction time, depending on which constructor is\n used.  A priority queue does not permit null elements.\n A priority queue relying on natural ordering also does not permit\n insertion of non-comparable objects (doing so may result in\n ClassCastException).\n\n The head of this queue is the least element\n with respect to the specified ordering.  If multiple elements are\n tied for least value, the head is one of those elements -- ties are\n broken arbitrarily.  The queue retrieval operations poll,\n remove, peek, and element access the\n element at the head of the queue.\n\n A priority queue is unbounded, but has an internal\n capacity governing the size of an array used to store the\n elements on the queue.  It is always at least as large as the queue\n size.  As elements are added to a priority queue, its capacity\n grows automatically.  The details of the growth policy are not\n specified.\n\n This class and its iterator implement all of the\n optional methods of the Collection and Iterator interfaces.  The Iterator provided in method iterator() and the Spliterator provided in method spliterator()\n are not guaranteed to traverse the elements of\n the priority queue in any particular order. If you need ordered\n traversal, consider using Arrays.sort(pq.toArray()).\n\n Note that this implementation is not synchronized.\n Multiple threads should not access a PriorityQueue\n instance concurrently if any of the threads modifies the queue.\n Instead, use the thread-safe PriorityBlockingQueue class.\n\n Implementation note: this implementation provides\n O(log(n)) time for the enqueuing and dequeuing methods\n (offer, poll, remove() and add);\n linear time for the remove(Object) and contains(Object)\n methods; and constant time for the retrieval methods\n (peek, element, and size).\n\n This class is a member of the\n \n Java Collections Framework.", "codes": ["public class PriorityQueue<E>\nextends AbstractQueue<E>\nimplements Serializable"], "fields": [], "methods": [{"method_name": "add", "method_sig": "public boolean add (E e)", "description": "Inserts the specified element into this priority queue."}, {"method_name": "offer", "method_sig": "public boolean offer (E e)", "description": "Inserts the specified element into this priority queue."}, {"method_name": "remove", "method_sig": "public boolean remove (Object o)", "description": "Removes a single instance of the specified element from this queue,\n if it is present.  More formally, removes an element e such\n that o.equals(e), if this queue contains one or more such\n elements.  Returns true if and only if this queue contained\n the specified element (or equivalently, if this queue changed as a\n result of the call)."}, {"method_name": "contains", "method_sig": "public boolean contains (Object o)", "description": "Returns true if this queue contains the specified element.\n More formally, returns true if and only if this queue contains\n at least one element e such that o.equals(e)."}, {"method_name": "toArray", "method_sig": "public Object[] toArray()", "description": "Returns an array containing all of the elements in this queue.\n The elements are in no particular order.\n\n The returned array will be \"safe\" in that no references to it are\n maintained by this queue.  (In other words, this method must allocate\n a new array).  The caller is thus free to modify the returned array.\n\n This method acts as bridge between array-based and collection-based\n APIs."}, {"method_name": "toArray", "method_sig": "public <T> T[] toArray (T[] a)", "description": "Returns an array containing all of the elements in this queue; the\n runtime type of the returned array is that of the specified array.\n The returned array elements are in no particular order.\n If the queue fits in the specified array, it is returned therein.\n Otherwise, a new array is allocated with the runtime type of the\n specified array and the size of this queue.\n\n If the queue fits in the specified array with room to spare\n (i.e., the array has more elements than the queue), the element in\n the array immediately following the end of the collection is set to\n null.\n\n Like the toArray() method, this method acts as bridge between\n array-based and collection-based APIs.  Further, this method allows\n precise control over the runtime type of the output array, and may,\n under certain circumstances, be used to save allocation costs.\n\n Suppose x is a queue known to contain only strings.\n The following code can be used to dump the queue into a newly\n allocated array of String:\n\n  String[] y = x.toArray(new String[0]);\n\n Note that toArray(new Object[0]) is identical in function to\n toArray()."}, {"method_name": "iterator", "method_sig": "public Iterator<E> iterator()", "description": "Returns an iterator over the elements in this queue. The iterator\n does not return the elements in any particular order."}, {"method_name": "clear", "method_sig": "public void clear()", "description": "Removes all of the elements from this priority queue.\n The queue will be empty after this call returns."}, {"method_name": "comparator", "method_sig": "public Comparator<? super E> comparator()", "description": "Returns the comparator used to order the elements in this\n queue, or null if this queue is sorted according to\n the natural ordering of its elements."}, {"method_name": "spliterator", "method_sig": "public final Spliterator<E> spliterator()", "description": "Creates a late-binding\n and fail-fast Spliterator over the elements in this\n queue. The spliterator does not traverse elements in any particular order\n (the ORDERED characteristic is not reported).\n\n The Spliterator reports Spliterator.SIZED,\n Spliterator.SUBSIZED, and Spliterator.NONNULL.\n Overriding implementations should document the reporting of additional\n characteristic values."}, {"method_name": "removeIf", "method_sig": "public boolean removeIf (Predicate<? super E> filter)", "description": "Description copied from interface:\u00a0Collection"}, {"method_name": "removeAll", "method_sig": "public boolean removeAll (Collection<?> c)", "description": "Description copied from class:\u00a0AbstractCollection"}, {"method_name": "retainAll", "method_sig": "public boolean retainAll (Collection<?> c)", "description": "Description copied from class:\u00a0AbstractCollection"}, {"method_name": "forEach", "method_sig": "public void forEach (Consumer<? super E> action)", "description": "Description copied from interface:\u00a0Iterable"}]}