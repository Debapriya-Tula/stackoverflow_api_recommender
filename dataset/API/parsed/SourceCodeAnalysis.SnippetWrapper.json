{"name": "Interface SourceCodeAnalysis.SnippetWrapper", "module": "jdk.jshell", "package": "jdk.jshell", "text": "The wrapping of a snippet of Java source into valid top-level Java\n source. The wrapping will always either be an import or include a\n synthetic class at the top-level. If a synthetic class is generated, it\n will be proceeded by the package and import declarations, and may contain\n synthetic class members.\n \n This interface, in addition to the mapped form, provides the context and\n position mapping information.", "codes": ["public static interface SourceCodeAnalysis.SnippetWrapper"], "fields": [], "methods": [{"method_name": "source", "method_sig": "String source()", "description": "Returns the input that is wrapped. For\n wrappers(String),\n this is the source of the snippet within the input. A variable\n declaration of N variables will map to N wrappers\n with the source separated.\n \n For wrapper(Snippet),\n this is Snippet.source()."}, {"method_name": "wrapped", "method_sig": "String wrapped()", "description": "Returns a Java class definition that wraps the\n source() or, if an import, the import source.\n \n If the input is not a valid Snippet, this will not be a valid\n class/import definition.\n \n The source may be divided and mapped to different locations within\n the wrapped source."}, {"method_name": "fullClassName", "method_sig": "String fullClassName()", "description": "Returns the fully qualified class name of the\n wrapped() class.\n For erroneous input, a best guess is returned."}, {"method_name": "kind", "method_sig": "Snippet.Kind kind()", "description": "Returns the Snippet.Kind of the\n source()."}, {"method_name": "sourceToWrappedPosition", "method_sig": "int sourceToWrappedPosition (int pos)", "description": "Maps character position within the source to character position\n within the wrapped."}, {"method_name": "wrappedToSourcePosition", "method_sig": "int wrappedToSourcePosition (int pos)", "description": "Maps character position within the wrapped to character position\n within the source."}]}