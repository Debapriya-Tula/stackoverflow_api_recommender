{"name": "Class VarHandle", "module": "java.base", "package": "java.lang.invoke", "text": "A VarHandle is a dynamically strongly typed reference to a variable, or to a\n parametrically-defined family of variables, including static fields,\n non-static fields, array elements, or components of an off-heap data\n structure.  Access to such variables is supported under various\n access modes, including plain read/write access, volatile\n read/write access, and compare-and-set.\n\n VarHandles are immutable and have no visible state.  VarHandles cannot be\n subclassed by the user.\n\n A VarHandle has:\n \na variable type T, the type of every variable referenced\n by this VarHandle; and\n a list of coordinate types\nCT1, CT2, ..., CTn, the types of coordinate expressions that\n jointly locate a variable referenced by this VarHandle.\n \n Variable and coordinate types may be primitive or reference, and are\n represented by Class objects.  The list of coordinate types may be\n empty.\n\n Factory methods that produce or lookup VarHandle instances document the supported variable type and the list\n of coordinate types.\n\n Each access mode is associated with one access mode method, a\n signature polymorphic method named\n for the access mode.  When an access mode method is invoked on a VarHandle\n instance, the initial arguments to the invocation are coordinate expressions\n that indicate in precisely which object the variable is to be accessed.\n Trailing arguments to the invocation represent values of importance to the\n access mode.  For example, the various compare-and-set or compare-and-exchange\n access modes require two trailing arguments for the variable's expected value\n and new value.\n\n The arity and types of arguments to the invocation of an access mode\n method are not checked statically.  Instead, each access mode method\n specifies an access mode type,\n represented as an instance of MethodType, that serves as a kind of\n method signature against which the arguments are checked dynamically.  An\n access mode type gives formal parameter types in terms of the coordinate\n types of a VarHandle instance and the types for values of importance to the\n access mode.  An access mode type also gives a return type, often in terms of\n the variable type of a VarHandle instance.  When an access mode method is\n invoked on a VarHandle instance, the symbolic type descriptor at the\n call site, the run time types of arguments to the invocation, and the run\n time type of the return value, must match the types\n given in the access mode type.  A runtime exception will be thrown if the\n match fails.\n\n For example, the access mode method compareAndSet(java.lang.Object...) specifies that if\n its receiver is a VarHandle instance with coordinate types\n CT1, ..., CTn and variable type T, then its access mode type\n is (CT1 c1, ..., CTn cn, T expectedValue, T newValue)boolean.\n Suppose that a VarHandle instance can access array elements, and that its\n coordinate types are String[] and int while its variable type\n is String.  The access mode type for compareAndSet on this\n VarHandle instance would be\n (String[] c1, int c2, String expectedValue, String newValue)boolean.\n Such a VarHandle instance may produced by the\n array factory method and\n access array elements as follows:\n  \n String[] sa = ...\n VarHandle avh = MethodHandles.arrayElementVarHandle(String[].class);\n boolean r = avh.compareAndSet(sa, 10, \"expected\", \"new\");\n \nAccess modes control atomicity and consistency properties.\n Plain read (get) and write (set)\n accesses are guaranteed to be bitwise atomic only for references\n and for primitive values of at most 32 bits, and impose no observable\n ordering constraints with respect to threads other than the\n executing thread. Opaque operations are bitwise atomic and\n coherently ordered with respect to accesses to the same variable.\n In addition to obeying Opaque properties, Acquire mode\n reads and their subsequent accesses are ordered after matching\n Release mode writes and their previous accesses.  In\n addition to obeying Acquire and Release properties, all\n Volatile operations are totally ordered with respect to\n each other.\n\n Access modes are grouped into the following categories:\n \nread access modes that get the value of a variable under specified\n memory ordering effects.\n The set of corresponding access mode methods belonging to this group\n consists of the methods\n get,\n getVolatile,\n getAcquire,\n getOpaque.\n write access modes that set the value of a variable under specified\n memory ordering effects.\n The set of corresponding access mode methods belonging to this group\n consists of the methods\n set,\n setVolatile,\n setRelease,\n setOpaque.\n atomic update access modes that, for example, atomically compare and set\n the value of a variable under specified memory ordering effects.\n The set of corresponding access mode methods belonging to this group\n consists of the methods\n compareAndSet,\n weakCompareAndSetPlain,\n weakCompareAndSet,\n weakCompareAndSetAcquire,\n weakCompareAndSetRelease,\n compareAndExchangeAcquire,\n compareAndExchange,\n compareAndExchangeRelease,\n getAndSet,\n getAndSetAcquire,\n getAndSetRelease.\n numeric atomic update access modes that, for example, atomically get and\n set with addition the value of a variable under specified memory ordering\n effects.\n The set of corresponding access mode methods belonging to this group\n consists of the methods\n getAndAdd,\n getAndAddAcquire,\n getAndAddRelease,\n bitwise atomic update access modes that, for example, atomically get and\n bitwise OR the value of a variable under specified memory ordering\n effects.\n The set of corresponding access mode methods belonging to this group\n consists of the methods\n getAndBitwiseOr,\n getAndBitwiseOrAcquire,\n getAndBitwiseOrRelease,\n getAndBitwiseAnd,\n getAndBitwiseAndAcquire,\n getAndBitwiseAndRelease,\n getAndBitwiseXor,\n getAndBitwiseXorAcquire,\n getAndBitwiseXorRelease.\n \nFactory methods that produce or lookup VarHandle instances document the set of access modes that are\n supported, which may also include documenting restrictions based on the\n variable type and whether a variable is read-only.  If an access mode is not\n supported then the corresponding access mode method will on invocation throw\n an UnsupportedOperationException.  Factory methods should document\n any additional undeclared exceptions that may be thrown by access mode\n methods.\n The get access mode is supported for all\n VarHandle instances and the corresponding method never throws\n UnsupportedOperationException.\n If a VarHandle references a read-only variable (for example a final\n field) then write, atomic update, numeric atomic update, and bitwise atomic\n update access modes are not supported and corresponding methods throw\n UnsupportedOperationException.\n Read/write access modes (if supported), with the exception of\n get and set, provide atomic access for\n reference types and all primitive types.\n Unless stated otherwise in the documentation of a factory method, the access\n modes get and set (if supported) provide atomic access for\n reference types and all primitives types, with the exception of long\n and double on 32-bit platforms.\n\n Access modes will override any memory ordering effects specified at\n the declaration site of a variable.  For example, a VarHandle accessing\n a field using the get access mode will access the field as\n specified by its access mode even if that field is declared\n volatile.  When mixed access is performed extreme care should be\n taken since the Java Memory Model may permit surprising results.\n\n In addition to supporting access to variables under various access modes,\n a set of static methods, referred to as memory fence methods, is also\n provided for fine-grained control of memory ordering.\n\n The Java Language Specification permits other threads to observe operations\n as if they were executed in orders different than are apparent in program\n source code, subject to constraints arising, for example, from the use of\n locks, volatile fields or VarHandles.  The static methods,\n fullFence, acquireFence,\n releaseFence, loadLoadFence and\n storeStoreFence, can also be used to impose\n constraints.  Their specifications, as is the case for certain access modes,\n are phrased in terms of the lack of \"reorderings\" -- observable ordering\n effects that might otherwise occur if the fence was not present.  More\n precise phrasing of the specification of access mode methods and memory fence\n methods may accompany future updates of the Java Language Specification.\n\n Compiling invocation of access mode methods\n A Java method call expression naming an access mode method can invoke a\n VarHandle from Java source code.  From the viewpoint of source code, these\n methods can take any arguments and their polymorphic result (if expressed)\n can be cast to any return type.  Formally this is accomplished by giving the\n access mode methods variable arity Object arguments and\n Object return types (if the return type is polymorphic), but they\n have an additional quality called signature polymorphism which\n connects this freedom of invocation directly to the JVM execution stack.\n \n As is usual with virtual methods, source-level calls to access mode methods\n compile to an invokevirtual instruction.  More unusually, the\n compiler must record the actual argument types, and may not perform method\n invocation conversions on the arguments.  Instead, it must generate\n instructions to push them on the stack according to their own unconverted\n types.  The VarHandle object itself will be pushed on the stack before the\n arguments.  The compiler then generates an invokevirtual instruction\n that invokes the access mode method with a symbolic type descriptor which\n describes the argument and return types.\n \n To issue a complete symbolic type descriptor, the compiler must also\n determine the return type (if polymorphic).  This is based on a cast on the\n method invocation expression, if there is one, or else Object if the\n invocation is an expression, or else void if the invocation is a\n statement.  The cast may be to a primitive type (but not void).\n \n As a corner case, an uncasted null argument is given a symbolic type\n descriptor of java.lang.Void.  The ambiguity with the type\n Void is harmless, since there are no references of type Void\n except the null reference.\n\n\n Performing invocation of access mode methods\n The first time an invokevirtual instruction is executed it is linked\n by symbolically resolving the names in the instruction and verifying that\n the method call is statically legal.  This also holds for calls to access mode\n methods.  In this case, the symbolic type descriptor emitted by the compiler\n is checked for correct syntax, and names it contains are resolved.  Thus, an\n invokevirtual instruction which invokes an access mode method will\n always link, as long as the symbolic type descriptor is syntactically\n well-formed and the types exist.\n \n When the invokevirtual is executed after linking, the receiving\n VarHandle's access mode type is first checked by the JVM to ensure that it\n matches the symbolic type descriptor.  If the type\n match fails, it means that the access mode method which the caller is\n invoking is not present on the individual VarHandle being invoked.\n\n \n Invocation of an access mode method behaves as if an invocation of\n MethodHandle.invoke(java.lang.Object...), where the receiving method handle accepts the\n VarHandle instance as the leading argument.  More specifically, the\n following, where {access-mode} corresponds to the access mode method\n name:\n  \n VarHandle vh = ..\n R r = (R) vh.{access-mode}(p1, p2, ..., pN);\n \n behaves as if:\n  \n VarHandle vh = ..\n VarHandle.AccessMode am = VarHandle.AccessMode.valueFromMethodName(\"{access-mode}\");\n MethodHandle mh = MethodHandles.varHandleExactInvoker(\n                       am,\n                       vh.accessModeType(am));\n\n R r = (R) mh.invoke(vh, p1, p2, ..., pN)\n \n (modulo access mode methods do not declare throwing of Throwable).\n This is equivalent to:\n  \n MethodHandle mh = MethodHandles.lookup().findVirtual(\n                       VarHandle.class,\n                       \"{access-mode}\",\n                       MethodType.methodType(R, p1, p2, ..., pN));\n\n R r = (R) mh.invokeExact(vh, p1, p2, ..., pN)\n \n where the desired method type is the symbolic type descriptor and a\n MethodHandle.invokeExact(java.lang.Object...) is performed, since before invocation of the\n target, the handle will apply reference casts as necessary and box, unbox, or\n widen primitive values, as if by asType (see also\n MethodHandles.varHandleInvoker(java.lang.invoke.VarHandle.AccessMode, java.lang.invoke.MethodType)).\n\n More concisely, such behaviour is equivalent to:\n  \n VarHandle vh = ..\n VarHandle.AccessMode am = VarHandle.AccessMode.valueFromMethodName(\"{access-mode}\");\n MethodHandle mh = vh.toMethodHandle(am);\n\n R r = (R) mh.invoke(p1, p2, ..., pN)\n \n Where, in this case, the method handle is bound to the VarHandle instance.\n\n\n Invocation checking\n In typical programs, VarHandle access mode type matching will usually\n succeed.  But if a match fails, the JVM will throw a\n WrongMethodTypeException.\n \n Thus, an access mode type mismatch which might show up as a linkage error\n in a statically typed program can show up as a dynamic\n WrongMethodTypeException in a program which uses VarHandles.\n \n Because access mode types contain \"live\" Class objects, method type\n matching takes into account both type names and class loaders.\n Thus, even if a VarHandle VH is created in one class loader\n L1 and used in another L2, VarHandle access mode method\n calls are type-safe, because the caller's symbolic type descriptor, as\n resolved in L2, is matched against the original callee method's\n symbolic type descriptor, as resolved in L1.  The resolution in\n L1 happens when VH is created and its access mode types are\n assigned, while the resolution in L2 happens when the\n invokevirtual instruction is linked.\n \n Apart from type descriptor checks, a VarHandles's capability to\n access it's variables is unrestricted.\n If a VarHandle is formed on a non-public variable by a class that has access\n to that variable, the resulting VarHandle can be used in any place by any\n caller who receives a reference to it.\n \n Unlike with the Core Reflection API, where access is checked every time a\n reflective method is invoked, VarHandle access checking is performed\n when the VarHandle is\n created.\n Thus, VarHandles to non-public variables, or to variables in non-public\n classes, should generally be kept secret.  They should not be passed to\n untrusted code unless their use from the untrusted code would be harmless.\n\n\n VarHandle creation\n Java code can create a VarHandle that directly accesses any field that is\n accessible to that code.  This is done via a reflective, capability-based\n API called MethodHandles.Lookup.\n For example, a VarHandle for a non-static field can be obtained\n from Lookup.findVarHandle.\n There is also a conversion method from Core Reflection API objects,\n Lookup.unreflectVarHandle.\n \n Access to protected field members is restricted to receivers only of the\n accessing class, or one of its subclasses, and the accessing class must in\n turn be a subclass (or package sibling) of the protected member's defining\n class.  If a VarHandle refers to a protected non-static field of a declaring\n class outside the current package, the receiver argument will be narrowed to\n the type of the accessing class.\n\n Interoperation between VarHandles and the Core Reflection API\n Using factory methods in the Lookup API, any field represented by a Core Reflection API object\n can be converted to a behaviorally equivalent VarHandle.\n For example, a reflective Field can\n be converted to a VarHandle using\n Lookup.unreflectVarHandle.\n The resulting VarHandles generally provide more direct and efficient\n access to the underlying fields.\n \n As a special case, when the Core Reflection API is used to view the\n signature polymorphic access mode methods in this class, they appear as\n ordinary non-polymorphic methods.  Their reflective appearance, as viewed by\n Class.getDeclaredMethod,\n is unaffected by their special status in this API.\n For example, Method.getModifiers\n will report exactly those modifier bits required for any similarly\n declared method, including in this case native and varargs\n bits.\n \n As with any reflected method, these methods (when reflected) may be invoked\n directly via java.lang.reflect.Method.invoke,\n via JNI, or indirectly via\n Lookup.unreflect.\n However, such reflective calls do not result in access mode method\n invocations.  Such a call, if passed the required argument (a single one, of\n type Object[]), will ignore the argument and will throw an\n UnsupportedOperationException.\n \n Since invokevirtual instructions can natively invoke VarHandle\n access mode methods under any symbolic type descriptor, this reflective view\n conflicts with the normal presentation of these methods via bytecodes.\n Thus, these native methods, when reflectively viewed by\n Class.getDeclaredMethod, may be regarded as placeholders only.\n \n In order to obtain an invoker method for a particular access mode type,\n use MethodHandles.varHandleExactInvoker(java.lang.invoke.VarHandle.AccessMode, java.lang.invoke.MethodType) or\n MethodHandles.varHandleInvoker(java.lang.invoke.VarHandle.AccessMode, java.lang.invoke.MethodType).  The\n Lookup.findVirtual\n API is also able to return a method handle to call an access mode method for\n any specified access mode type and is equivalent in behaviour to\n MethodHandles.varHandleInvoker(java.lang.invoke.VarHandle.AccessMode, java.lang.invoke.MethodType).\n\n Interoperation between VarHandles and Java generics\n A VarHandle can be obtained for a variable, such as a field, which is\n declared with Java generic types.  As with the Core Reflection API, the\n VarHandle's variable type will be constructed from the erasure of the\n source-level type.  When a VarHandle access mode method is invoked, the\n types\n of its arguments or the return value cast type may be generic types or type\n instances.  If this occurs, the compiler will replace those types by their\n erasures when it constructs the symbolic type descriptor for the\n invokevirtual instruction.", "codes": ["public abstract class VarHandle\nextends Object"], "fields": [], "methods": [{"method_name": "get", "method_sig": "public final Object get (Object... args)", "description": "Returns the value of a variable, with memory semantics of reading as\n if the variable was declared non-volatile.  Commonly referred to\n as plain read access.\n\n The method signature is of the form (CT1 ct1, ..., CTn ctn)T.\n\n The symbolic type descriptor at the call site of get\n must match the access mode type that is the result of calling\n accessModeType(VarHandle.AccessMode.GET) on this VarHandle.\n\n This access mode is supported by all VarHandle instances and never\n throws UnsupportedOperationException."}, {"method_name": "set", "method_sig": "public final void set (Object... args)", "description": "Sets the value of a variable to the newValue, with memory\n semantics of setting as if the variable was declared non-volatile\n and non-final.  Commonly referred to as plain write access.\n\n The method signature is of the form (CT1 ct1, ..., CTn ctn, T newValue)void\nThe symbolic type descriptor at the call site of set\n must match the access mode type that is the result of calling\n accessModeType(VarHandle.AccessMode.SET) on this VarHandle."}, {"method_name": "getVolatile", "method_sig": "public final Object getVolatile (Object... args)", "description": "Returns the value of a variable, with memory semantics of reading as if\n the variable was declared volatile.\n\n The method signature is of the form (CT1 ct1, ..., CTn ctn)T.\n\n The symbolic type descriptor at the call site of getVolatile\n must match the access mode type that is the result of calling\n accessModeType(VarHandle.AccessMode.GET_VOLATILE) on this\n VarHandle."}, {"method_name": "setVolatile", "method_sig": "public final void setVolatile (Object... args)", "description": "Sets the value of a variable to the newValue, with memory\n semantics of setting as if the variable was declared volatile.\n\n The method signature is of the form (CT1 ct1, ..., CTn ctn, T newValue)void.\n\n The symbolic type descriptor at the call site of setVolatile\n must match the access mode type that is the result of calling\n accessModeType(VarHandle.AccessMode.SET_VOLATILE) on this\n VarHandle."}, {"method_name": "getOpaque", "method_sig": "public final Object getOpaque (Object... args)", "description": "Returns the value of a variable, accessed in program order, but with no\n assurance of memory ordering effects with respect to other threads.\n\n The method signature is of the form (CT1 ct1, ..., CTn ctn)T.\n\n The symbolic type descriptor at the call site of getOpaque\n must match the access mode type that is the result of calling\n accessModeType(VarHandle.AccessMode.GET_OPAQUE) on this\n VarHandle."}, {"method_name": "setOpaque", "method_sig": "public final void setOpaque (Object... args)", "description": "Sets the value of a variable to the newValue, in program order,\n but with no assurance of memory ordering effects with respect to other\n threads.\n\n The method signature is of the form (CT1 ct1, ..., CTn ctn, T newValue)void.\n\n The symbolic type descriptor at the call site of setOpaque\n must match the access mode type that is the result of calling\n accessModeType(VarHandle.AccessMode.SET_OPAQUE) on this\n VarHandle."}, {"method_name": "getAcquire", "method_sig": "public final Object getAcquire (Object... args)", "description": "Returns the value of a variable, and ensures that subsequent loads and\n stores are not reordered before this access.\n\n The method signature is of the form (CT1 ct1, ..., CTn ctn)T.\n\n The symbolic type descriptor at the call site of getAcquire\n must match the access mode type that is the result of calling\n accessModeType(VarHandle.AccessMode.GET_ACQUIRE) on this\n VarHandle."}, {"method_name": "setRelease", "method_sig": "public final void setRelease (Object... args)", "description": "Sets the value of a variable to the newValue, and ensures that\n prior loads and stores are not reordered after this access.\n\n The method signature is of the form (CT1 ct1, ..., CTn ctn, T newValue)void.\n\n The symbolic type descriptor at the call site of setRelease\n must match the access mode type that is the result of calling\n accessModeType(VarHandle.AccessMode.SET_RELEASE) on this\n VarHandle."}, {"method_name": "compareAndSet", "method_sig": "public final boolean compareAndSet (Object... args)", "description": "Atomically sets the value of a variable to the newValue with the\n memory semantics of setVolatile(java.lang.Object...) if the variable's current value,\n referred to as the witness value, == the\n expectedValue, as accessed with the memory semantics of\n getVolatile(java.lang.Object...).\n\n The method signature is of the form (CT1 ct1, ..., CTn ctn, T expectedValue, T newValue)boolean.\n\n The symbolic type descriptor at the call site of \n compareAndSet must match the access mode type that is the result of\n calling accessModeType(VarHandle.AccessMode.COMPARE_AND_SET) on\n this VarHandle."}, {"method_name": "compareAndExchange", "method_sig": "public final Object compareAndExchange (Object... args)", "description": "Atomically sets the value of a variable to the newValue with the\n memory semantics of setVolatile(java.lang.Object...) if the variable's current value,\n referred to as the witness value, == the\n expectedValue, as accessed with the memory semantics of\n getVolatile(java.lang.Object...).\n\n The method signature is of the form (CT1 ct1, ..., CTn ctn, T expectedValue, T newValue)T.\n\n The symbolic type descriptor at the call site of \n compareAndExchange\n must match the access mode type that is the result of calling\n accessModeType(VarHandle.AccessMode.COMPARE_AND_EXCHANGE)\n on this VarHandle."}, {"method_name": "compareAndExchangeAcquire", "method_sig": "public final Object compareAndExchangeAcquire (Object... args)", "description": "Atomically sets the value of a variable to the newValue with the\n memory semantics of set(java.lang.Object...) if the variable's current value,\n referred to as the witness value, == the\n expectedValue, as accessed with the memory semantics of\n getAcquire(java.lang.Object...).\n\n The method signature is of the form (CT1 ct1, ..., CTn ctn, T expectedValue, T newValue)T.\n\n The symbolic type descriptor at the call site of \n compareAndExchangeAcquire\n must match the access mode type that is the result of calling\n accessModeType(VarHandle.AccessMode.COMPARE_AND_EXCHANGE_ACQUIRE) on\n this VarHandle."}, {"method_name": "compareAndExchangeRelease", "method_sig": "public final Object compareAndExchangeRelease (Object... args)", "description": "Atomically sets the value of a variable to the newValue with the\n memory semantics of setRelease(java.lang.Object...) if the variable's current value,\n referred to as the witness value, == the\n expectedValue, as accessed with the memory semantics of\n get(java.lang.Object...).\n\n The method signature is of the form (CT1 ct1, ..., CTn ctn, T expectedValue, T newValue)T.\n\n The symbolic type descriptor at the call site of \n compareAndExchangeRelease\n must match the access mode type that is the result of calling\n accessModeType(VarHandle.AccessMode.COMPARE_AND_EXCHANGE_RELEASE)\n on this VarHandle."}, {"method_name": "weakCompareAndSetPlain", "method_sig": "public final boolean weakCompareAndSetPlain (Object... args)", "description": "Possibly atomically sets the value of a variable to the newValue\n with the semantics of set(java.lang.Object...) if the variable's current value,\n referred to as the witness value, == the\n expectedValue, as accessed with the memory semantics of\n get(java.lang.Object...).\n\n This operation may fail spuriously (typically, due to memory\n contention) even if the witness value does match the expected value.\n\n The method signature is of the form (CT1 ct1, ..., CTn ctn, T expectedValue, T newValue)boolean.\n\n The symbolic type descriptor at the call site of \n weakCompareAndSetPlain must match the access mode type that is the result of\n calling accessModeType(VarHandle.AccessMode.WEAK_COMPARE_AND_SET_PLAIN)\n on this VarHandle."}, {"method_name": "weakCompareAndSet", "method_sig": "public final boolean weakCompareAndSet (Object... args)", "description": "Possibly atomically sets the value of a variable to the newValue\n with the memory semantics of setVolatile(java.lang.Object...) if the variable's\n current value, referred to as the witness value, == the\n expectedValue, as accessed with the memory semantics of\n getVolatile(java.lang.Object...).\n\n This operation may fail spuriously (typically, due to memory\n contention) even if the witness value does match the expected value.\n\n The method signature is of the form (CT1 ct1, ..., CTn ctn, T expectedValue, T newValue)boolean.\n\n The symbolic type descriptor at the call site of \n weakCompareAndSet must match the access mode type that is the\n result of calling accessModeType(VarHandle.AccessMode.WEAK_COMPARE_AND_SET)\n on this VarHandle."}, {"method_name": "weakCompareAndSetAcquire", "method_sig": "public final boolean weakCompareAndSetAcquire (Object... args)", "description": "Possibly atomically sets the value of a variable to the newValue\n with the semantics of set(java.lang.Object...) if the variable's current value,\n referred to as the witness value, == the\n expectedValue, as accessed with the memory semantics of\n getAcquire(java.lang.Object...).\n\n This operation may fail spuriously (typically, due to memory\n contention) even if the witness value does match the expected value.\n\n The method signature is of the form (CT1 ct1, ..., CTn ctn, T expectedValue, T newValue)boolean.\n\n The symbolic type descriptor at the call site of \n weakCompareAndSetAcquire\n must match the access mode type that is the result of calling\n accessModeType(VarHandle.AccessMode.WEAK_COMPARE_AND_SET_ACQUIRE)\n on this VarHandle."}, {"method_name": "weakCompareAndSetRelease", "method_sig": "public final boolean weakCompareAndSetRelease (Object... args)", "description": "Possibly atomically sets the value of a variable to the newValue\n with the semantics of setRelease(java.lang.Object...) if the variable's current\n value, referred to as the witness value, == the\n expectedValue, as accessed with the memory semantics of\n get(java.lang.Object...).\n\n This operation may fail spuriously (typically, due to memory\n contention) even if the witness value does match the expected value.\n\n The method signature is of the form (CT1 ct1, ..., CTn ctn, T expectedValue, T newValue)boolean.\n\n The symbolic type descriptor at the call site of \n weakCompareAndSetRelease\n must match the access mode type that is the result of calling\n accessModeType(VarHandle.AccessMode.WEAK_COMPARE_AND_SET_RELEASE)\n on this VarHandle."}, {"method_name": "getAndSet", "method_sig": "public final Object getAndSet (Object... args)", "description": "Atomically sets the value of a variable to the newValue with the\n memory semantics of setVolatile(java.lang.Object...) and returns the variable's\n previous value, as accessed with the memory semantics of\n getVolatile(java.lang.Object...).\n\n The method signature is of the form (CT1 ct1, ..., CTn ctn, T newValue)T.\n\n The symbolic type descriptor at the call site of getAndSet\n must match the access mode type that is the result of calling\n accessModeType(VarHandle.AccessMode.GET_AND_SET) on this\n VarHandle."}, {"method_name": "getAndSetAcquire", "method_sig": "public final Object getAndSetAcquire (Object... args)", "description": "Atomically sets the value of a variable to the newValue with the\n memory semantics of set(java.lang.Object...) and returns the variable's\n previous value, as accessed with the memory semantics of\n getAcquire(java.lang.Object...).\n\n The method signature is of the form (CT1 ct1, ..., CTn ctn, T newValue)T.\n\n The symbolic type descriptor at the call site of getAndSetAcquire\n must match the access mode type that is the result of calling\n accessModeType(VarHandle.AccessMode.GET_AND_SET_ACQUIRE) on this\n VarHandle."}, {"method_name": "getAndSetRelease", "method_sig": "public final Object getAndSetRelease (Object... args)", "description": "Atomically sets the value of a variable to the newValue with the\n memory semantics of setRelease(java.lang.Object...) and returns the variable's\n previous value, as accessed with the memory semantics of\n get(java.lang.Object...).\n\n The method signature is of the form (CT1 ct1, ..., CTn ctn, T newValue)T.\n\n The symbolic type descriptor at the call site of getAndSetRelease\n must match the access mode type that is the result of calling\n accessModeType(VarHandle.AccessMode.GET_AND_SET_RELEASE) on this\n VarHandle."}, {"method_name": "getAndAdd", "method_sig": "public final Object getAndAdd (Object... args)", "description": "Atomically adds the value to the current value of a variable with\n the memory semantics of setVolatile(java.lang.Object...), and returns the variable's\n previous value, as accessed with the memory semantics of\n getVolatile(java.lang.Object...).\n\n The method signature is of the form (CT1 ct1, ..., CTn ctn, T value)T.\n\n The symbolic type descriptor at the call site of getAndAdd\n must match the access mode type that is the result of calling\n accessModeType(VarHandle.AccessMode.GET_AND_ADD) on this\n VarHandle."}, {"method_name": "getAndAddAcquire", "method_sig": "public final Object getAndAddAcquire (Object... args)", "description": "Atomically adds the value to the current value of a variable with\n the memory semantics of set(java.lang.Object...), and returns the variable's\n previous value, as accessed with the memory semantics of\n getAcquire(java.lang.Object...).\n\n The method signature is of the form (CT1 ct1, ..., CTn ctn, T value)T.\n\n The symbolic type descriptor at the call site of getAndAddAcquire\n must match the access mode type that is the result of calling\n accessModeType(VarHandle.AccessMode.GET_AND_ADD_ACQUIRE) on this\n VarHandle."}, {"method_name": "getAndAddRelease", "method_sig": "public final Object getAndAddRelease (Object... args)", "description": "Atomically adds the value to the current value of a variable with\n the memory semantics of setRelease(java.lang.Object...), and returns the variable's\n previous value, as accessed with the memory semantics of\n get(java.lang.Object...).\n\n The method signature is of the form (CT1 ct1, ..., CTn ctn, T value)T.\n\n The symbolic type descriptor at the call site of getAndAddRelease\n must match the access mode type that is the result of calling\n accessModeType(VarHandle.AccessMode.GET_AND_ADD_RELEASE) on this\n VarHandle."}, {"method_name": "getAndBitwiseOr", "method_sig": "public final Object getAndBitwiseOr (Object... args)", "description": "Atomically sets the value of a variable to the result of\n bitwise OR between the variable's current value and the mask\n with the memory semantics of setVolatile(java.lang.Object...) and returns the\n variable's previous value, as accessed with the memory semantics of\n getVolatile(java.lang.Object...).\n\n If the variable type is the non-integral boolean type then a\n logical OR is performed instead of a bitwise OR.\n\n The method signature is of the form (CT1 ct1, ..., CTn ctn, T mask)T.\n\n The symbolic type descriptor at the call site of getAndBitwiseOr\n must match the access mode type that is the result of calling\n accessModeType(VarHandle.AccessMode.GET_AND_BITWISE_OR) on this\n VarHandle."}, {"method_name": "getAndBitwiseOrAcquire", "method_sig": "public final Object getAndBitwiseOrAcquire (Object... args)", "description": "Atomically sets the value of a variable to the result of\n bitwise OR between the variable's current value and the mask\n with the memory semantics of set(java.lang.Object...) and returns the\n variable's previous value, as accessed with the memory semantics of\n getAcquire(java.lang.Object...).\n\n If the variable type is the non-integral boolean type then a\n logical OR is performed instead of a bitwise OR.\n\n The method signature is of the form (CT1 ct1, ..., CTn ctn, T mask)T.\n\n The symbolic type descriptor at the call site of getAndBitwiseOrAcquire\n must match the access mode type that is the result of calling\n accessModeType(VarHandle.AccessMode.GET_AND_BITWISE_OR_ACQUIRE) on this\n VarHandle."}, {"method_name": "getAndBitwiseOrRelease", "method_sig": "public final Object getAndBitwiseOrRelease (Object... args)", "description": "Atomically sets the value of a variable to the result of\n bitwise OR between the variable's current value and the mask\n with the memory semantics of setRelease(java.lang.Object...) and returns the\n variable's previous value, as accessed with the memory semantics of\n get(java.lang.Object...).\n\n If the variable type is the non-integral boolean type then a\n logical OR is performed instead of a bitwise OR.\n\n The method signature is of the form (CT1 ct1, ..., CTn ctn, T mask)T.\n\n The symbolic type descriptor at the call site of getAndBitwiseOrRelease\n must match the access mode type that is the result of calling\n accessModeType(VarHandle.AccessMode.GET_AND_BITWISE_OR_RELEASE) on this\n VarHandle."}, {"method_name": "getAndBitwiseAnd", "method_sig": "public final Object getAndBitwiseAnd (Object... args)", "description": "Atomically sets the value of a variable to the result of\n bitwise AND between the variable's current value and the mask\n with the memory semantics of setVolatile(java.lang.Object...) and returns the\n variable's previous value, as accessed with the memory semantics of\n getVolatile(java.lang.Object...).\n\n If the variable type is the non-integral boolean type then a\n logical AND is performed instead of a bitwise AND.\n\n The method signature is of the form (CT1 ct1, ..., CTn ctn, T mask)T.\n\n The symbolic type descriptor at the call site of getAndBitwiseAnd\n must match the access mode type that is the result of calling\n accessModeType(VarHandle.AccessMode.GET_AND_BITWISE_AND) on this\n VarHandle."}, {"method_name": "getAndBitwiseAndAcquire", "method_sig": "public final Object getAndBitwiseAndAcquire (Object... args)", "description": "Atomically sets the value of a variable to the result of\n bitwise AND between the variable's current value and the mask\n with the memory semantics of set(java.lang.Object...) and returns the\n variable's previous value, as accessed with the memory semantics of\n getAcquire(java.lang.Object...).\n\n If the variable type is the non-integral boolean type then a\n logical AND is performed instead of a bitwise AND.\n\n The method signature is of the form (CT1 ct1, ..., CTn ctn, T mask)T.\n\n The symbolic type descriptor at the call site of getAndBitwiseAndAcquire\n must match the access mode type that is the result of calling\n accessModeType(VarHandle.AccessMode.GET_AND_BITWISE_AND_ACQUIRE) on this\n VarHandle."}, {"method_name": "getAndBitwiseAndRelease", "method_sig": "public final Object getAndBitwiseAndRelease (Object... args)", "description": "Atomically sets the value of a variable to the result of\n bitwise AND between the variable's current value and the mask\n with the memory semantics of setRelease(java.lang.Object...) and returns the\n variable's previous value, as accessed with the memory semantics of\n get(java.lang.Object...).\n\n If the variable type is the non-integral boolean type then a\n logical AND is performed instead of a bitwise AND.\n\n The method signature is of the form (CT1 ct1, ..., CTn ctn, T mask)T.\n\n The symbolic type descriptor at the call site of getAndBitwiseAndRelease\n must match the access mode type that is the result of calling\n accessModeType(VarHandle.AccessMode.GET_AND_BITWISE_AND_RELEASE) on this\n VarHandle."}, {"method_name": "getAndBitwiseXor", "method_sig": "public final Object getAndBitwiseXor (Object... args)", "description": "Atomically sets the value of a variable to the result of\n bitwise XOR between the variable's current value and the mask\n with the memory semantics of setVolatile(java.lang.Object...) and returns the\n variable's previous value, as accessed with the memory semantics of\n getVolatile(java.lang.Object...).\n\n If the variable type is the non-integral boolean type then a\n logical XOR is performed instead of a bitwise XOR.\n\n The method signature is of the form (CT1 ct1, ..., CTn ctn, T mask)T.\n\n The symbolic type descriptor at the call site of getAndBitwiseXor\n must match the access mode type that is the result of calling\n accessModeType(VarHandle.AccessMode.GET_AND_BITWISE_XOR) on this\n VarHandle."}, {"method_name": "getAndBitwiseXorAcquire", "method_sig": "public final Object getAndBitwiseXorAcquire (Object... args)", "description": "Atomically sets the value of a variable to the result of\n bitwise XOR between the variable's current value and the mask\n with the memory semantics of set(java.lang.Object...) and returns the\n variable's previous value, as accessed with the memory semantics of\n getAcquire(java.lang.Object...).\n\n If the variable type is the non-integral boolean type then a\n logical XOR is performed instead of a bitwise XOR.\n\n The method signature is of the form (CT1 ct1, ..., CTn ctn, T mask)T.\n\n The symbolic type descriptor at the call site of getAndBitwiseXorAcquire\n must match the access mode type that is the result of calling\n accessModeType(VarHandle.AccessMode.GET_AND_BITWISE_XOR_ACQUIRE) on this\n VarHandle."}, {"method_name": "getAndBitwiseXorRelease", "method_sig": "public final Object getAndBitwiseXorRelease (Object... args)", "description": "Atomically sets the value of a variable to the result of\n bitwise XOR between the variable's current value and the mask\n with the memory semantics of setRelease(java.lang.Object...) and returns the\n variable's previous value, as accessed with the memory semantics of\n get(java.lang.Object...).\n\n If the variable type is the non-integral boolean type then a\n logical XOR is performed instead of a bitwise XOR.\n\n The method signature is of the form (CT1 ct1, ..., CTn ctn, T mask)T.\n\n The symbolic type descriptor at the call site of getAndBitwiseXorRelease\n must match the access mode type that is the result of calling\n accessModeType(VarHandle.AccessMode.GET_AND_BITWISE_XOR_RELEASE) on this\n VarHandle."}, {"method_name": "varType", "method_sig": "public final Class<?> varType()", "description": "Returns the variable type of variables referenced by this VarHandle."}, {"method_name": "coordinateTypes", "method_sig": "public final List<Class<?>> coordinateTypes()", "description": "Returns the coordinate types for this VarHandle."}, {"method_name": "accessModeType", "method_sig": "public final MethodType accessModeType (VarHandle.AccessMode accessMode)", "description": "Obtains the access mode type for this VarHandle and a given access mode.\n\n The access mode type's parameter types will consist of a prefix that\n is the coordinate types of this VarHandle followed by further\n types as defined by the access mode method.\n The access mode type's return type is defined by the return type of the\n access mode method."}, {"method_name": "isAccessModeSupported", "method_sig": "public final boolean isAccessModeSupported (VarHandle.AccessMode accessMode)", "description": "Returns true if the given access mode is supported, otherwise\n false.\n\n The return of a false value for a given access mode indicates\n that an UnsupportedOperationException is thrown on invocation\n of the corresponding access mode method."}, {"method_name": "toMethodHandle", "method_sig": "public final MethodHandle toMethodHandle (VarHandle.AccessMode accessMode)", "description": "Obtains a method handle bound to this VarHandle and the given access\n mode."}, {"method_name": "fullFence", "method_sig": "public static void fullFence()", "description": "Ensures that loads and stores before the fence will not be reordered\n with\n loads and stores after the fence."}, {"method_name": "acquireFence", "method_sig": "public static void acquireFence()", "description": "Ensures that loads before the fence will not be reordered with loads and\n stores after the fence."}, {"method_name": "releaseFence", "method_sig": "public static void releaseFence()", "description": "Ensures that loads and stores before the fence will not be\n reordered with stores after the fence."}, {"method_name": "loadLoadFence", "method_sig": "public static void loadLoadFence()", "description": "Ensures that loads before the fence will not be reordered with\n loads after the fence."}, {"method_name": "storeStoreFence", "method_sig": "public static void storeStoreFence()", "description": "Ensures that stores before the fence will not be reordered with\n stores after the fence."}]}