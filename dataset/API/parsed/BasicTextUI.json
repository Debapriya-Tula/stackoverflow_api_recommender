{"name": "Class BasicTextUI", "module": "java.desktop", "package": "javax.swing.plaf.basic", "text": "\n Basis of a text components look-and-feel.  This provides the\n basic editor view and controller services that may be useful\n when creating a look-and-feel for an extension of\n JTextComponent.\n \n Most state is held in the associated JTextComponent\n as bound properties, and the UI installs default values for the\n various properties.  This default will install something for\n all of the properties.  Typically, a LAF implementation will\n do more however.  At a minimum, a LAF would generally install\n key bindings.\n \n This class also provides some concurrency support if the\n Document associated with the JTextComponent is a subclass of\n AbstractDocument.  Access to the View (or View hierarchy) is\n serialized between any thread mutating the model and the Swing\n event thread (which is expected to render, do model/view coordinate\n translation, etc).  Any access to the root view should first\n acquire a read-lock on the AbstractDocument and release that lock\n in a finally block.\n\n An important method to define is the getPropertyPrefix() method\n which is used as the basis of the keys used to fetch defaults\n from the UIManager.  The string should reflect the type of\n TextUI (eg. TextField, TextArea, etc) without the particular\n LAF part of the name (eg Metal, Motif, etc).\n \n To build a view of the model, one of the following strategies\n can be employed.\n \n\n One strategy is to simply redefine the\n ViewFactory interface in the UI.  By default, this UI itself acts\n as the factory for View implementations.  This is useful\n for simple factories.  To do this reimplement the\n create(javax.swing.text.Element) method.\n \n A common strategy for creating more complex types of documents\n is to have the EditorKit implementation return a factory.  Since\n the EditorKit ties all of the pieces necessary to maintain a type\n of document, the factory is typically an important part of that\n and should be produced by the EditorKit implementation.\n \n\nWarning:\n Serialized objects of this class will not be compatible with\n future Swing releases. The current serialization support is\n appropriate for short term storage or RMI between applications running\n the same version of Swing.  As of 1.4, support for long term storage\n of all JavaBeans\u2122\n has been added to the java.beans package.\n Please see XMLEncoder.", "codes": ["public abstract class BasicTextUI\nextends TextUI\nimplements ViewFactory"], "fields": [], "methods": [{"method_name": "createCaret", "method_sig": "protected Caret createCaret()", "description": "Creates the object to use for a caret.  By default an\n instance of BasicCaret is created.  This method\n can be redefined to provide something else that implements\n the InputPosition interface or a subclass of JCaret."}, {"method_name": "createHighlighter", "method_sig": "protected Highlighter createHighlighter()", "description": "Creates the object to use for adding highlights.  By default\n an instance of BasicHighlighter is created.  This method\n can be redefined to provide something else that implements\n the Highlighter interface or a subclass of DefaultHighlighter."}, {"method_name": "getKeymapName", "method_sig": "protected String getKeymapName()", "description": "Fetches the name of the keymap that will be installed/used\n by default for this UI. This is implemented to create a\n name based upon the classname.  The name is the name\n of the class with the package prefix removed."}, {"method_name": "createKeymap", "method_sig": "protected Keymap createKeymap()", "description": "Creates the keymap to use for the text component, and installs\n any necessary bindings into it.  By default, the keymap is\n shared between all instances of this type of TextUI. The\n keymap has the name defined by the getKeymapName method.  If the\n keymap is not found, then DEFAULT_KEYMAP from JTextComponent is used.\n \n The set of bindings used to create the keymap is fetched\n from the UIManager using a key formed by combining the\n getPropertyPrefix() method\n and the string .keyBindings.  The type is expected\n to be JTextComponent.KeyBinding[]."}, {"method_name": "propertyChange", "method_sig": "protected void propertyChange (PropertyChangeEvent evt)", "description": "This method gets called when a bound property is changed\n on the associated JTextComponent.  This is a hook\n which UI implementations may change to reflect how the\n UI displays bound properties of JTextComponent subclasses.\n This is implemented to do nothing (i.e. the response to\n properties in JTextComponent itself are handled prior\n to calling this method).\n\n This implementation updates the background of the text\n component if the editable and/or enabled state changes."}, {"method_name": "getPropertyPrefix", "method_sig": "protected abstract String getPropertyPrefix()", "description": "Gets the name used as a key to look up properties through the\n UIManager.  This is used as a prefix to all the standard\n text properties."}, {"method_name": "installDefaults", "method_sig": "protected void installDefaults()", "description": "Initializes component properties, such as font, foreground,\n background, caret color, selection color, selected text color,\n disabled text color, and border color.  The font, foreground, and\n background properties are only set if their current value is either null\n or a UIResource, other properties are set if the current\n value is null."}, {"method_name": "uninstallDefaults", "method_sig": "protected void uninstallDefaults()", "description": "Sets the component properties that have not been explicitly overridden\n to null.  A property is considered overridden if its current\n value is not a UIResource."}, {"method_name": "installListeners", "method_sig": "protected void installListeners()", "description": "Installs listeners for the UI."}, {"method_name": "uninstallListeners", "method_sig": "protected void uninstallListeners()", "description": "Uninstalls listeners for the UI."}, {"method_name": "installKeyboardActions", "method_sig": "protected void installKeyboardActions()", "description": "Registers keyboard actions."}, {"method_name": "uninstallKeyboardActions", "method_sig": "protected void uninstallKeyboardActions()", "description": "Unregisters keyboard actions."}, {"method_name": "paintBackground", "method_sig": "protected void paintBackground (Graphics g)", "description": "Paints a background for the view.  This will only be\n called if isOpaque() on the associated component is\n true.  The default is to paint the background color\n of the component."}, {"method_name": "getComponent", "method_sig": "protected final JTextComponent getComponent()", "description": "Fetches the text component associated with this\n UI implementation.  This will be null until\n the ui has been installed."}, {"method_name": "modelChanged", "method_sig": "protected void modelChanged()", "description": "Flags model changes.\n This is called whenever the model has changed.\n It is implemented to rebuild the view hierarchy\n to represent the default root element of the\n associated model."}, {"method_name": "setView", "method_sig": "protected final void setView (View v)", "description": "Sets the current root of the view hierarchy and calls invalidate().\n If there were any child components, they will be removed (i.e.\n there are assumed to have come from components embedded in views)."}, {"method_name": "paintSafely", "method_sig": "protected void paintSafely (Graphics g)", "description": "Paints the interface safely with a guarantee that\n the model won't change from the view of this thread.\n This does the following things, rendering from\n back to front.\n \n\n If the component is marked as opaque, the background\n is painted in the current background color of the\n component.\n \n The highlights (if any) are painted.\n \n The view hierarchy is painted.\n \n The caret is painted.\n "}, {"method_name": "installUI", "method_sig": "public void installUI (JComponent c)", "description": "Installs the UI for a component.  This does the following\n things.\n \n\n Sets the associated component to opaque if the opaque property\n has not already been set by the client program. This will cause the\n component's background color to be painted.\n \n Installs the default caret and highlighter into the\n associated component. These properties are only set if their\n current value is either null or an instance of\n UIResource.\n \n Attaches to the editor and model.  If there is no\n model, a default one is created.\n \n Creates the view factory and the view hierarchy used\n to represent the model.\n "}, {"method_name": "uninstallUI", "method_sig": "public void uninstallUI (JComponent c)", "description": "Deinstalls the UI for a component.  This removes the listeners,\n uninstalls the highlighter, removes views, and nulls out the keymap."}, {"method_name": "update", "method_sig": "public void update (Graphics g,\n                   JComponent c)", "description": "Superclass paints background in an uncontrollable way\n (i.e. one might want an image tiled into the background).\n To prevent this from happening twice, this method is\n reimplemented to simply paint.\n \nNOTE: Superclass is also not thread-safe in its\n rendering of the background, although that is not an issue with the\n default rendering."}, {"method_name": "paint", "method_sig": "public final void paint (Graphics g,\n                        JComponent c)", "description": "Paints the interface.  This is routed to the\n paintSafely method under the guarantee that\n the model won't change from the view of this thread\n while it's rendering (if the associated model is\n derived from AbstractDocument).  This enables the\n model to potentially be updated asynchronously."}, {"method_name": "getPreferredSize", "method_sig": "public Dimension getPreferredSize (JComponent c)", "description": "Gets the preferred size for the editor component.  If the component\n has been given a size prior to receiving this request, it will\n set the size of the view hierarchy to reflect the size of the component\n before requesting the preferred size of the view hierarchy.  This\n allows formatted views to format to the current component size before\n answering the request.  Other views don't care about currently formatted\n size and give the same answer either way."}, {"method_name": "getMinimumSize", "method_sig": "public Dimension getMinimumSize (JComponent c)", "description": "Gets the minimum size for the editor component."}, {"method_name": "getMaximumSize", "method_sig": "public Dimension getMaximumSize (JComponent c)", "description": "Gets the maximum size for the editor component."}, {"method_name": "getVisibleEditorRect", "method_sig": "protected Rectangle getVisibleEditorRect()", "description": "Gets the allocation to give the root View.  Due\n to an unfortunate set of historical events this\n method is inappropriately named.  The Rectangle\n returned has nothing to do with visibility.\n The component must have a non-zero positive size for\n this translation to be computed."}, {"method_name": "modelToView", "method_sig": "@Deprecated(since=\"9\")\npublic Rectangle modelToView (JTextComponent tc,\n                             int pos)\n                      throws BadLocationException", "description": "Converts the given location in the model to a place in\n the view coordinate system.\n The component must have a non-zero positive size for\n this translation to be computed."}, {"method_name": "modelToView", "method_sig": "@Deprecated(since=\"9\")\npublic Rectangle modelToView (JTextComponent tc,\n                             int pos,\n                             Position.Bias bias)\n                      throws BadLocationException", "description": "Converts the given location in the model to a place in\n the view coordinate system.\n The component must have a non-zero positive size for\n this translation to be computed."}, {"method_name": "viewToModel", "method_sig": "@Deprecated(since=\"9\")\npublic int viewToModel (JTextComponent tc,\n                       Point pt)", "description": "Converts the given place in the view coordinate system\n to the nearest representative location in the model.\n The component must have a non-zero positive size for\n this translation to be computed."}, {"method_name": "viewToModel", "method_sig": "@Deprecated(since=\"9\")\npublic int viewToModel (JTextComponent tc,\n                       Point pt,\n                       Position.Bias[] biasReturn)", "description": "Converts the given place in the view coordinate system\n to the nearest representative location in the model.\n The component must have a non-zero positive size for\n this translation to be computed."}, {"method_name": "damageRange", "method_sig": "public void damageRange (JTextComponent tc,\n                        int p0,\n                        int p1)", "description": "Causes the portion of the view responsible for the\n given part of the model to be repainted.  Does nothing if\n the view is not currently painted."}, {"method_name": "damageRange", "method_sig": "public void damageRange (JTextComponent t,\n                        int p0,\n                        int p1,\n                        Position.Bias p0Bias,\n                        Position.Bias p1Bias)", "description": "Causes the portion of the view responsible for the\n given part of the model to be repainted."}, {"method_name": "getEditorKit", "method_sig": "public EditorKit getEditorKit (JTextComponent tc)", "description": "Fetches the EditorKit for the UI."}, {"method_name": "getRootView", "method_sig": "public View getRootView (JTextComponent tc)", "description": "Fetches a View with the allocation of the associated\n text component (i.e. the root of the hierarchy) that\n can be traversed to determine how the model is being\n represented spatially.\n \nWarning: The View hierarchy can\n be traversed from the root view, and other things\n can be done as well.  Things done in this way cannot\n be protected like simple method calls through the TextUI.\n Therefore, proper operation in the presence of concurrency\n must be arranged by any logic that calls this method!"}, {"method_name": "getToolTipText", "method_sig": "public String getToolTipText (JTextComponent t,\n                             Point pt)", "description": "Returns the string to be used as the tooltip at the passed in location.\n This forwards the method onto the root View."}, {"method_name": "create", "method_sig": "public View create (Element elem)", "description": "Creates a view for an element.\n If a subclass wishes to directly implement the factory\n producing the view(s), it should reimplement this\n method.  By default it simply returns null indicating\n it is unable to represent the element."}, {"method_name": "create", "method_sig": "public View create (Element elem,\n                   int p0,\n                   int p1)", "description": "Creates a view for an element.\n If a subclass wishes to directly implement the factory\n producing the view(s), it should reimplement this\n method.  By default it simply returns null indicating\n it is unable to represent the part of the element."}]}