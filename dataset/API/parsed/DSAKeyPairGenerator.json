{"name": "Interface DSAKeyPairGenerator", "module": "java.base", "package": "java.security.interfaces", "text": "An interface to an object capable of generating DSA key pairs.\n\n The initialize methods may each be called any number\n of times. If no initialize method is called on a\n DSAKeyPairGenerator, each provider that implements this interface\n should supply (and document) a default initialization. Note that\n defaults may vary across different providers. Additionally, the default\n value for a provider may change in a future version. Therefore, it is\n recommended to explicitly initialize the DSAKeyPairGenerator instead\n of relying on provider-specific defaults.\n\n Users wishing to indicate DSA-specific parameters, and to generate a key\n pair suitable for use with the DSA algorithm typically\n\n \nGet a key pair generator for the DSA algorithm by calling the\n KeyPairGenerator getInstance method with \"DSA\"\n as its argument.\n\n Check if the returned key pair generator is an instance of\n DSAKeyPairGenerator before casting the result to a DSAKeyPairGenerator\n and calling one of the initialize methods from this\n DSAKeyPairGenerator interface.\n\n Generate a key pair by calling the generateKeyPair\n method of the KeyPairGenerator class.\n\n \nNote: it is not always necessary to do algorithm-specific\n initialization for a DSA key pair generator. That is, it is not always\n necessary to call an initialize method in this interface.\n Algorithm-independent initialization using the initialize method\n in the KeyPairGenerator\n interface is all that is needed when you accept defaults for algorithm-specific\n parameters.\n\n Note: Some earlier implementations of this interface may not support\n larger values of DSA parameters such as 3072-bit.", "codes": ["public interface DSAKeyPairGenerator"], "fields": [], "methods": [{"method_name": "initialize", "method_sig": "void initialize (DSAParams params,\n                SecureRandom random)\n         throws InvalidParameterException", "description": "Initializes the key pair generator using the DSA family parameters\n (p,q and g) and an optional SecureRandom bit source. If a\n SecureRandom bit source is needed but not supplied, i.e. null, a\n default SecureRandom instance will be used."}, {"method_name": "initialize", "method_sig": "void initialize (int modlen,\n                boolean genParams,\n                SecureRandom random)\n         throws InvalidParameterException", "description": "Initializes the key pair generator for a given modulus length\n (instead of parameters), and an optional SecureRandom bit source.\n If a SecureRandom bit source is needed but not supplied, i.e.\n null, a default SecureRandom instance will be used.\n\n If genParams is true, this method generates new\n p, q and g parameters. If it is false, the method uses precomputed\n parameters for the modulus length requested. If there are no\n precomputed parameters for that modulus length, an exception will be\n thrown."}]}