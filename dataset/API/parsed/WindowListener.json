{"name": "Interface WindowListener", "module": "java.desktop", "package": "java.awt.event", "text": "The listener interface for receiving window events.\n The class that is interested in processing a window event\n either implements this interface (and all the methods it\n contains) or extends the abstract WindowAdapter class\n (overriding only the methods of interest).\n The listener object created from that class is then registered with a\n Window using the window's addWindowListener\n method. When the window's status changes by virtue of being opened,\n closed, activated or deactivated, iconified or deiconified,\n the relevant method in the listener object is invoked, and the\n WindowEvent is passed to it.", "codes": ["public interface WindowListener\nextends EventListener"], "fields": [], "methods": [{"method_name": "windowOpened", "method_sig": "void windowOpened (WindowEvent e)", "description": "Invoked the first time a window is made visible."}, {"method_name": "windowClosing", "method_sig": "void windowClosing (WindowEvent e)", "description": "Invoked when the user attempts to close the window\n from the window's system menu."}, {"method_name": "windowClosed", "method_sig": "void windowClosed (WindowEvent e)", "description": "Invoked when a window has been closed as the result\n of calling dispose on the window."}, {"method_name": "windowIconified", "method_sig": "void windowIconified (WindowEvent e)", "description": "Invoked when a window is changed from a normal to a\n minimized state. For many platforms, a minimized window\n is displayed as the icon specified in the window's\n iconImage property."}, {"method_name": "windowDeiconified", "method_sig": "void windowDeiconified (WindowEvent e)", "description": "Invoked when a window is changed from a minimized\n to a normal state."}, {"method_name": "windowActivated", "method_sig": "void windowActivated (WindowEvent e)", "description": "Invoked when the Window is set to be the active Window. Only a Frame or\n a Dialog can be the active Window. The native windowing system may\n denote the active Window or its children with special decorations, such\n as a highlighted title bar. The active Window is always either the\n focused Window, or the first Frame or Dialog that is an owner of the\n focused Window."}, {"method_name": "windowDeactivated", "method_sig": "void windowDeactivated (WindowEvent e)", "description": "Invoked when a Window is no longer the active Window. Only a Frame or a\n Dialog can be the active Window. The native windowing system may denote\n the active Window or its children with special decorations, such as a\n highlighted title bar. The active Window is always either the focused\n Window, or the first Frame or Dialog that is an owner of the focused\n Window."}]}