{"name": "Interface ModelMBeanNotificationBroadcaster", "module": "java.management", "package": "javax.management.modelmbean", "text": "This interface must be implemented by the ModelMBeans. An implementation of this interface\n must be shipped with every JMX Agent.\n \n Java resources wishing to be manageable instantiate the ModelMBean using the MBeanServer's\n createMBean method.  The resource then sets the ModelMBeanInfo (with Descriptors) for the ModelMBean\n instance. The attributes and operations exposed via the ModelMBeanInfo for the ModelMBean are accessible\n from MBeans, connectors/adaptors like other MBeans. Through the ModelMBeanInfo Descriptors, values and methods in\n the managed application can be defined and mapped to attributes and operations of the ModelMBean.\n This mapping can be defined during development in an XML formatted file or dynamically and\n programmatically at runtime.\n \n Every ModelMBean which is instantiated in the MBeanServer becomes manageable:\n its attributes and operations\n become remotely accessible through the connectors/adaptors connected to that MBeanServer.\n A Java object cannot be registered in the MBeanServer unless it is a JMX compliant MBean.\n By instantiating a ModelMBean, resources are guaranteed that the MBean is valid.\n \n MBeanException and RuntimeOperationsException must be thrown on every public method.  This allows\n for wrapping exceptions from distributed communications (RMI, EJB, etc.).  These exceptions do\n not have to be thrown by the implementation except in the scenarios described in the specification\n and javadoc.", "codes": ["public interface ModelMBeanNotificationBroadcaster\nextends NotificationBroadcaster"], "fields": [], "methods": [{"method_name": "sendNotification", "method_sig": "void sendNotification (Notification ntfyObj)\n               throws MBeanException,\n                      RuntimeOperationsException", "description": "Sends a Notification which is passed in to the registered\n Notification listeners on the ModelMBean as a\n jmx.modelmbean.generic notification."}, {"method_name": "sendNotification", "method_sig": "void sendNotification (String ntfyText)\n               throws MBeanException,\n                      RuntimeOperationsException", "description": "Sends a Notification which contains the text string that is passed in\n to the registered Notification listeners on the ModelMBean."}, {"method_name": "sendAttributeChangeNotification", "method_sig": "void sendAttributeChangeNotification (AttributeChangeNotification notification)\n                              throws MBeanException,\n                                     RuntimeOperationsException", "description": "Sends an attributeChangeNotification which is passed in to\n the registered attributeChangeNotification listeners on the\n ModelMBean."}, {"method_name": "sendAttributeChangeNotification", "method_sig": "void sendAttributeChangeNotification (Attribute oldValue,\n                                     Attribute newValue)\n                              throws MBeanException,\n                                     RuntimeOperationsException", "description": "Sends an attributeChangeNotification which contains the old value and new value for the\n attribute to the registered AttributeChangeNotification listeners on the ModelMBean."}, {"method_name": "addAttributeChangeNotificationListener", "method_sig": "void addAttributeChangeNotificationListener (NotificationListener listener,\n                                            String attributeName,\n                                            Object handback)\n                                     throws MBeanException,\n                                            RuntimeOperationsException,\n                                            IllegalArgumentException", "description": "Registers an object which implements the NotificationListener interface as a listener.  This\n object's 'handleNotification()' method will be invoked when any attributeChangeNotification is issued through\n or by the ModelMBean.  This does not include other Notifications.  They must be registered\n for independently. An AttributeChangeNotification will be generated for this attributeName."}, {"method_name": "removeAttributeChangeNotificationListener", "method_sig": "void removeAttributeChangeNotificationListener (NotificationListener listener,\n                                               String attributeName)\n                                        throws MBeanException,\n                                               RuntimeOperationsException,\n                                               ListenerNotFoundException", "description": "Removes a listener for attributeChangeNotifications from the RequiredModelMBean."}]}