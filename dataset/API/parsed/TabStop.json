{"name": "Class TabStop", "module": "java.desktop", "package": "javax.swing.text", "text": "This class encapsulates a single tab stop (basically as tab stops\n are thought of by RTF). A tab stop is at a specified distance from the\n left margin, aligns text in a specified way, and has a specified leader.\n TabStops are immutable, and usually contained in TabSets.\n \nWarning:\n Serialized objects of this class will not be compatible with\n future Swing releases. The current serialization support is\n appropriate for short term storage or RMI between applications running\n the same version of Swing.  As of 1.4, support for long term storage\n of all JavaBeans\u2122\n has been added to the java.beans package.\n Please see XMLEncoder.", "codes": ["public class TabStop\nextends Object\nimplements Serializable"], "fields": [{"field_name": "ALIGN_LEFT", "field_sig": "public static final\u00a0int ALIGN_LEFT", "description": "Character following tab is positioned at location."}, {"field_name": "ALIGN_RIGHT", "field_sig": "public static final\u00a0int ALIGN_RIGHT", "description": "Characters following tab are positioned such that all following\n characters up to next tab/newline end at location."}, {"field_name": "ALIGN_CENTER", "field_sig": "public static final\u00a0int ALIGN_CENTER", "description": "Characters following tab are positioned such that all following\n characters up to next tab/newline are centered around the tabs\n location."}, {"field_name": "ALIGN_DECIMAL", "field_sig": "public static final\u00a0int ALIGN_DECIMAL", "description": "Characters following tab are aligned such that next\n decimal/tab/newline is at the tab location, very similar to\n RIGHT_TAB, just includes decimal as additional character to look for."}, {"field_name": "ALIGN_BAR", "field_sig": "public static final\u00a0int ALIGN_BAR", "description": "Align bar"}, {"field_name": "LEAD_NONE", "field_sig": "public static final\u00a0int LEAD_NONE", "description": "Lead none"}, {"field_name": "LEAD_DOTS", "field_sig": "public static final\u00a0int LEAD_DOTS", "description": "Lead dots"}, {"field_name": "LEAD_HYPHENS", "field_sig": "public static final\u00a0int LEAD_HYPHENS", "description": "Lead hyphens"}, {"field_name": "LEAD_UNDERLINE", "field_sig": "public static final\u00a0int LEAD_UNDERLINE", "description": "Lead underline"}, {"field_name": "LEAD_THICKLINE", "field_sig": "public static final\u00a0int LEAD_THICKLINE", "description": "Lead thickline"}, {"field_name": "LEAD_EQUALS", "field_sig": "public static final\u00a0int LEAD_EQUALS", "description": "Lead equals"}], "methods": [{"method_name": "getPosition", "method_sig": "public float getPosition()", "description": "Returns the position, as a float, of the tab."}, {"method_name": "getAlignment", "method_sig": "public int getAlignment()", "description": "Returns the alignment, as an integer, of the tab."}, {"method_name": "getLeader", "method_sig": "public int getLeader()", "description": "Returns the leader of the tab."}, {"method_name": "equals", "method_sig": "public boolean equals (Object other)", "description": "Returns true if the tabs are equal."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Returns the hashCode for the object.  This must be defined\n here to ensure 100% pure."}]}