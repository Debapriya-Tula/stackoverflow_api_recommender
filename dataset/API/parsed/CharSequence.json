{"name": "Interface CharSequence", "module": "java.base", "package": "java.lang", "text": "A CharSequence is a readable sequence of char values. This\n interface provides uniform, read-only access to many different kinds of\n char sequences.\n A char value represents a character in the Basic\n Multilingual Plane (BMP) or a surrogate. Refer to Unicode Character Representation for details.\n\n  This interface does not refine the general contracts of the equals and hashCode methods. The result of testing two objects\n that implement CharSequence for equality is therefore, in general, undefined.\n Each object may be implemented by a different class, and there\n is no guarantee that each class will be capable of testing its instances\n for equality with those of the other.  It is therefore inappropriate to use\n arbitrary CharSequence instances as elements in a set or as keys in\n a map. ", "codes": ["public interface CharSequence"], "fields": [], "methods": [{"method_name": "length", "method_sig": "int length()", "description": "Returns the length of this character sequence.  The length is the number\n of 16-bit chars in the sequence."}, {"method_name": "charAt", "method_sig": "char charAt (int index)", "description": "Returns the char value at the specified index.  An index ranges from zero\n to length() - 1.  The first char value of the sequence is at\n index zero, the next at index one, and so on, as for array\n indexing.\n\n If the char value specified by the index is a\n surrogate, the surrogate\n value is returned."}, {"method_name": "subSequence", "method_sig": "CharSequence subSequence (int start,\n                         int end)", "description": "Returns a CharSequence that is a subsequence of this sequence.\n The subsequence starts with the char value at the specified index and\n ends with the char value at index end - 1.  The length\n (in chars) of the\n returned sequence is end - start, so if start == end\n then an empty sequence is returned."}, {"method_name": "toString", "method_sig": "String toString()", "description": "Returns a string containing the characters in this sequence in the same\n order as this sequence.  The length of the string will be the length of\n this sequence."}, {"method_name": "chars", "method_sig": "default IntStream chars()", "description": "Returns a stream of int zero-extending the char values\n from this sequence.  Any char which maps to a surrogate code\n point is passed through uninterpreted.\n\n The stream binds to this sequence when the terminal stream operation\n commences (specifically, for mutable sequences the spliterator for the\n stream is late-binding).\n If the sequence is modified during that operation then the result is\n undefined."}, {"method_name": "codePoints", "method_sig": "default IntStream codePoints()", "description": "Returns a stream of code point values from this sequence.  Any surrogate\n pairs encountered in the sequence are combined as if by Character.toCodePoint and the result is passed\n to the stream. Any other code units, including ordinary BMP characters,\n unpaired surrogates, and undefined code units, are zero-extended to\n int values which are then passed to the stream.\n\n The stream binds to this sequence when the terminal stream operation\n commences (specifically, for mutable sequences the spliterator for the\n stream is late-binding).\n If the sequence is modified during that operation then the result is\n undefined."}, {"method_name": "compare", "method_sig": "static int compare (CharSequence cs1,\n                   CharSequence cs2)", "description": "Compares two CharSequence instances lexicographically. Returns a\n negative value, zero, or a positive value if the first sequence is lexicographically\n less than, equal to, or greater than the second, respectively.\n\n \n The lexicographical ordering of CharSequence is defined as follows.\n Consider a CharSequence cs of length len to be a\n sequence of char values, cs[0] to cs[len-1]. Suppose k\n is the lowest index at which the corresponding char values from each sequence\n differ. The lexicographic ordering of the sequences is determined by a numeric\n comparison of the char values cs1[k] with cs2[k]. If there is\n no such index k, the shorter sequence is considered lexicographically\n less than the other. If the sequences have the same length, the sequences are\n considered lexicographically equal."}]}