{"name": "Class Executable", "module": "java.base", "package": "java.lang.reflect", "text": "A shared superclass for the common functionality of Method\n and Constructor.", "codes": ["public abstract class Executable\nextends AccessibleObject\nimplements Member, GenericDeclaration"], "fields": [], "methods": [{"method_name": "getDeclaringClass", "method_sig": "public abstract Class<?> getDeclaringClass()", "description": "Returns the Class object representing the class or interface\n that declares the executable represented by this object."}, {"method_name": "getName", "method_sig": "public abstract String getName()", "description": "Returns the name of the executable represented by this object."}, {"method_name": "getModifiers", "method_sig": "public abstract int getModifiers()", "description": "Returns the Java language modifiers for\n the executable represented by this object."}, {"method_name": "getTypeParameters", "method_sig": "public abstract TypeVariable<?>[] getTypeParameters()", "description": "Returns an array of TypeVariable objects that represent the\n type variables declared by the generic declaration represented by this\n GenericDeclaration object, in declaration order.  Returns an\n array of length 0 if the underlying generic declaration declares no type\n variables."}, {"method_name": "getParameterTypes", "method_sig": "public abstract Class<?>[] getParameterTypes()", "description": "Returns an array of Class objects that represent the formal\n parameter types, in declaration order, of the executable\n represented by this object.  Returns an array of length\n 0 if the underlying executable takes no parameters."}, {"method_name": "getParameterCount", "method_sig": "public int getParameterCount()", "description": "Returns the number of formal parameters (whether explicitly\n declared or implicitly declared or neither) for the executable\n represented by this object."}, {"method_name": "getGenericParameterTypes", "method_sig": "public Type[] getGenericParameterTypes()", "description": "Returns an array of Type objects that represent the formal\n parameter types, in declaration order, of the executable represented by\n this object. Returns an array of length 0 if the\n underlying executable takes no parameters.\n\n If a formal parameter type is a parameterized type,\n the Type object returned for it must accurately reflect\n the actual type parameters used in the source code.\n\n If a formal parameter type is a type variable or a parameterized\n type, it is created. Otherwise, it is resolved."}, {"method_name": "getParameters", "method_sig": "public Parameter[] getParameters()", "description": "Returns an array of Parameter objects that represent\n all the parameters to the underlying executable represented by\n this object.  Returns an array of length 0 if the executable\n has no parameters.\n\n The parameters of the underlying executable do not necessarily\n have unique names, or names that are legal identifiers in the\n Java programming language (JLS 3.8)."}, {"method_name": "getExceptionTypes", "method_sig": "public abstract Class<?>[] getExceptionTypes()", "description": "Returns an array of Class objects that represent the\n types of exceptions declared to be thrown by the underlying\n executable represented by this object.  Returns an array of\n length 0 if the executable declares no exceptions in its \n throws clause."}, {"method_name": "getGenericExceptionTypes", "method_sig": "public Type[] getGenericExceptionTypes()", "description": "Returns an array of Type objects that represent the\n exceptions declared to be thrown by this executable object.\n Returns an array of length 0 if the underlying executable declares\n no exceptions in its throws clause.\n\n If an exception type is a type variable or a parameterized\n type, it is created. Otherwise, it is resolved."}, {"method_name": "toGenericString", "method_sig": "public abstract String toGenericString()", "description": "Returns a string describing this Executable, including\n any type parameters."}, {"method_name": "isVarArgs", "method_sig": "public boolean isVarArgs()", "description": "Returns true if this executable was declared to take a\n variable number of arguments; returns false otherwise."}, {"method_name": "isSynthetic", "method_sig": "public boolean isSynthetic()", "description": "Returns true if this executable is a synthetic\n construct; returns false otherwise."}, {"method_name": "getParameterAnnotations", "method_sig": "public abstract Annotation[][] getParameterAnnotations()", "description": "Returns an array of arrays of Annotations that\n represent the annotations on the formal parameters, in\n declaration order, of the Executable represented by\n this object.  Synthetic and mandated parameters (see\n explanation below), such as the outer \"this\" parameter to an\n inner class constructor will be represented in the returned\n array.  If the executable has no parameters (meaning no formal,\n no synthetic, and no mandated parameters), a zero-length array\n will be returned.  If the Executable has one or more\n parameters, a nested array of length zero is returned for each\n parameter with no annotations. The annotation objects contained\n in the returned arrays are serializable.  The caller of this\n method is free to modify the returned arrays; it will have no\n effect on the arrays returned to other callers.\n\n A compiler may add extra parameters that are implicitly\n declared in source (\"mandated\"), as well as parameters that\n are neither implicitly nor explicitly declared in source\n (\"synthetic\") to the parameter list for a method.  See Parameter for more information."}, {"method_name": "getAnnotation", "method_sig": "public <T extends Annotation> T getAnnotation (Class<T> annotationClass)", "description": "Returns this element's annotation for the specified type if\n such an annotation is present, else null."}, {"method_name": "getAnnotationsByType", "method_sig": "public <T extends Annotation> T[] getAnnotationsByType (Class<T> annotationClass)", "description": "Returns annotations that are associated with this element.\n\n If there are no annotations associated with this element, the return\n value is an array of length 0.\n\n The difference between this method and AnnotatedElement.getAnnotation(Class)\n is that this method detects if its argument is a repeatable\n annotation type (JLS 9.6), and if so, attempts to find one or\n more annotations of that type by \"looking through\" a container\n annotation.\n\n The caller of this method is free to modify the returned array; it will\n have no effect on the arrays returned to other callers."}, {"method_name": "getAnnotatedReturnType", "method_sig": "public abstract AnnotatedType getAnnotatedReturnType()", "description": "Returns an AnnotatedType object that represents the use of a type to\n specify the return type of the method/constructor represented by this\n Executable.\n\n If this Executable object represents a constructor, the \n AnnotatedType object represents the type of the constructed object.\n\n If this Executable object represents a method, the \n AnnotatedType object represents the use of a type to specify the return\n type of the method."}, {"method_name": "getAnnotatedReceiverType", "method_sig": "public AnnotatedType getAnnotatedReceiverType()", "description": "Returns an AnnotatedType object that represents the use of a\n type to specify the receiver type of the method/constructor represented\n by this Executable object.\n\n The receiver type of a method/constructor is available only if the\n method/constructor has a receiver parameter (JLS 8.4.1). If this \n Executable object represents an instance method or represents a\n constructor of an inner member class, and the\n method/constructor either has no receiver parameter or has a\n receiver parameter with no annotations on its type, then the return\n value is an AnnotatedType object representing an element with no\n annotations.\n\n If this Executable object represents a static method or\n represents a constructor of a top level, static member, local, or\n anonymous class, then the return value is null."}, {"method_name": "getAnnotatedParameterTypes", "method_sig": "public AnnotatedType[] getAnnotatedParameterTypes()", "description": "Returns an array of AnnotatedType objects that represent the use\n of types to specify formal parameter types of the method/constructor\n represented by this Executable. The order of the objects in the array\n corresponds to the order of the formal parameter types in the\n declaration of the method/constructor.\n\n Returns an array of length 0 if the method/constructor declares no\n parameters."}, {"method_name": "getAnnotatedExceptionTypes", "method_sig": "public AnnotatedType[] getAnnotatedExceptionTypes()", "description": "Returns an array of AnnotatedType objects that represent the use\n of types to specify the declared exceptions of the method/constructor\n represented by this Executable. The order of the objects in the array\n corresponds to the order of the exception types in the declaration of\n the method/constructor.\n\n Returns an array of length 0 if the method/constructor declares no\n exceptions."}]}