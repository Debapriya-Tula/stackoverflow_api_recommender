{"name": "Class Executors", "module": "java.base", "package": "java.util.concurrent", "text": "Factory and utility methods for Executor, ExecutorService, ScheduledExecutorService, ThreadFactory, and Callable classes defined in this\n package. This class supports the following kinds of methods:\n\n \nMethods that create and return an ExecutorService\n       set up with commonly useful configuration settings.\n   Methods that create and return a ScheduledExecutorService\n       set up with commonly useful configuration settings.\n   Methods that create and return a \"wrapped\" ExecutorService, that\n       disables reconfiguration by making implementation-specific methods\n       inaccessible.\n   Methods that create and return a ThreadFactory\n       that sets newly created threads to a known state.\n   Methods that create and return a Callable\n       out of other closure-like forms, so they can be used\n       in execution methods requiring Callable.\n ", "codes": ["public class Executors\nextends Object"], "fields": [], "methods": [{"method_name": "newFixedThreadPool", "method_sig": "public static ExecutorService newFixedThreadPool (int nThreads)", "description": "Creates a thread pool that reuses a fixed number of threads\n operating off a shared unbounded queue.  At any point, at most\n nThreads threads will be active processing tasks.\n If additional tasks are submitted when all threads are active,\n they will wait in the queue until a thread is available.\n If any thread terminates due to a failure during execution\n prior to shutdown, a new one will take its place if needed to\n execute subsequent tasks.  The threads in the pool will exist\n until it is explicitly shutdown."}, {"method_name": "newWorkStealingPool", "method_sig": "public static ExecutorService newWorkStealingPool (int parallelism)", "description": "Creates a thread pool that maintains enough threads to support\n the given parallelism level, and may use multiple queues to\n reduce contention. The parallelism level corresponds to the\n maximum number of threads actively engaged in, or available to\n engage in, task processing. The actual number of threads may\n grow and shrink dynamically. A work-stealing pool makes no\n guarantees about the order in which submitted tasks are\n executed."}, {"method_name": "newWorkStealingPool", "method_sig": "public static ExecutorService newWorkStealingPool()", "description": "Creates a work-stealing thread pool using the number of\n available processors\n as its target parallelism level."}, {"method_name": "newFixedThreadPool", "method_sig": "public static ExecutorService newFixedThreadPool (int nThreads,\n                                                 ThreadFactory threadFactory)", "description": "Creates a thread pool that reuses a fixed number of threads\n operating off a shared unbounded queue, using the provided\n ThreadFactory to create new threads when needed.  At any point,\n at most nThreads threads will be active processing\n tasks.  If additional tasks are submitted when all threads are\n active, they will wait in the queue until a thread is\n available.  If any thread terminates due to a failure during\n execution prior to shutdown, a new one will take its place if\n needed to execute subsequent tasks.  The threads in the pool will\n exist until it is explicitly shutdown."}, {"method_name": "newSingleThreadExecutor", "method_sig": "public static ExecutorService newSingleThreadExecutor()", "description": "Creates an Executor that uses a single worker thread operating\n off an unbounded queue. (Note however that if this single\n thread terminates due to a failure during execution prior to\n shutdown, a new one will take its place if needed to execute\n subsequent tasks.)  Tasks are guaranteed to execute\n sequentially, and no more than one task will be active at any\n given time. Unlike the otherwise equivalent\n newFixedThreadPool(1) the returned executor is\n guaranteed not to be reconfigurable to use additional threads."}, {"method_name": "newSingleThreadExecutor", "method_sig": "public static ExecutorService newSingleThreadExecutor (ThreadFactory threadFactory)", "description": "Creates an Executor that uses a single worker thread operating\n off an unbounded queue, and uses the provided ThreadFactory to\n create a new thread when needed. Unlike the otherwise\n equivalent newFixedThreadPool(1, threadFactory) the\n returned executor is guaranteed not to be reconfigurable to use\n additional threads."}, {"method_name": "newCachedThreadPool", "method_sig": "public static ExecutorService newCachedThreadPool()", "description": "Creates a thread pool that creates new threads as needed, but\n will reuse previously constructed threads when they are\n available.  These pools will typically improve the performance\n of programs that execute many short-lived asynchronous tasks.\n Calls to execute will reuse previously constructed\n threads if available. If no existing thread is available, a new\n thread will be created and added to the pool. Threads that have\n not been used for sixty seconds are terminated and removed from\n the cache. Thus, a pool that remains idle for long enough will\n not consume any resources. Note that pools with similar\n properties but different details (for example, timeout parameters)\n may be created using ThreadPoolExecutor constructors."}, {"method_name": "newCachedThreadPool", "method_sig": "public static ExecutorService newCachedThreadPool (ThreadFactory threadFactory)", "description": "Creates a thread pool that creates new threads as needed, but\n will reuse previously constructed threads when they are\n available, and uses the provided\n ThreadFactory to create new threads when needed."}, {"method_name": "newSingleThreadScheduledExecutor", "method_sig": "public static ScheduledExecutorService newSingleThreadScheduledExecutor()", "description": "Creates a single-threaded executor that can schedule commands\n to run after a given delay, or to execute periodically.\n (Note however that if this single\n thread terminates due to a failure during execution prior to\n shutdown, a new one will take its place if needed to execute\n subsequent tasks.)  Tasks are guaranteed to execute\n sequentially, and no more than one task will be active at any\n given time. Unlike the otherwise equivalent\n newScheduledThreadPool(1) the returned executor is\n guaranteed not to be reconfigurable to use additional threads."}, {"method_name": "newSingleThreadScheduledExecutor", "method_sig": "public static ScheduledExecutorService newSingleThreadScheduledExecutor (ThreadFactory threadFactory)", "description": "Creates a single-threaded executor that can schedule commands\n to run after a given delay, or to execute periodically.  (Note\n however that if this single thread terminates due to a failure\n during execution prior to shutdown, a new one will take its\n place if needed to execute subsequent tasks.)  Tasks are\n guaranteed to execute sequentially, and no more than one task\n will be active at any given time. Unlike the otherwise\n equivalent newScheduledThreadPool(1, threadFactory)\n the returned executor is guaranteed not to be reconfigurable to\n use additional threads."}, {"method_name": "newScheduledThreadPool", "method_sig": "public static ScheduledExecutorService newScheduledThreadPool (int corePoolSize)", "description": "Creates a thread pool that can schedule commands to run after a\n given delay, or to execute periodically."}, {"method_name": "newScheduledThreadPool", "method_sig": "public static ScheduledExecutorService newScheduledThreadPool (int corePoolSize,\n                                                              ThreadFactory threadFactory)", "description": "Creates a thread pool that can schedule commands to run after a\n given delay, or to execute periodically."}, {"method_name": "unconfigurableExecutorService", "method_sig": "public static ExecutorService unconfigurableExecutorService (ExecutorService executor)", "description": "Returns an object that delegates all defined ExecutorService methods to the given executor, but not any\n other methods that might otherwise be accessible using\n casts. This provides a way to safely \"freeze\" configuration and\n disallow tuning of a given concrete implementation."}, {"method_name": "unconfigurableScheduledExecutorService", "method_sig": "public static ScheduledExecutorService unconfigurableScheduledExecutorService (ScheduledExecutorService executor)", "description": "Returns an object that delegates all defined ScheduledExecutorService methods to the given executor, but\n not any other methods that might otherwise be accessible using\n casts. This provides a way to safely \"freeze\" configuration and\n disallow tuning of a given concrete implementation."}, {"method_name": "defaultThreadFactory", "method_sig": "public static ThreadFactory defaultThreadFactory()", "description": "Returns a default thread factory used to create new threads.\n This factory creates all new threads used by an Executor in the\n same ThreadGroup. If there is a SecurityManager, it uses the group of System.getSecurityManager(), else the group of the thread\n invoking this defaultThreadFactory method. Each new\n thread is created as a non-daemon thread with priority set to\n the smaller of Thread.NORM_PRIORITY and the maximum\n priority permitted in the thread group.  New threads have names\n accessible via Thread.getName() of\n pool-N-thread-M, where N is the sequence\n number of this factory, and M is the sequence number\n of the thread created by this factory."}, {"method_name": "privilegedThreadFactory", "method_sig": "public static ThreadFactory privilegedThreadFactory()", "description": "Returns a thread factory used to create new threads that\n have the same permissions as the current thread.\n This factory creates threads with the same settings as defaultThreadFactory(), additionally setting the\n AccessControlContext and contextClassLoader of new threads to\n be the same as the thread invoking this\n privilegedThreadFactory method.  A new\n privilegedThreadFactory can be created within an\n AccessController.doPrivileged\n action setting the current thread's access control context to\n create threads with the selected permission settings holding\n within that action.\n\n Note that while tasks running within such threads will have\n the same access control and class loader settings as the\n current thread, they need not have the same ThreadLocal or InheritableThreadLocal values. If necessary,\n particular values of thread locals can be set or reset before\n any task runs in ThreadPoolExecutor subclasses using\n ThreadPoolExecutor.beforeExecute(Thread, Runnable).\n Also, if it is necessary to initialize worker threads to have\n the same InheritableThreadLocal settings as some other\n designated thread, you can create a custom ThreadFactory in\n which that thread waits for and services requests to create\n others that will inherit its values."}, {"method_name": "callable", "method_sig": "public static <T> Callable<T> callable (Runnable task,\n                                       T result)", "description": "Returns a Callable object that, when\n called, runs the given task and returns the given result.  This\n can be useful when applying methods requiring a\n Callable to an otherwise resultless action."}, {"method_name": "callable", "method_sig": "public static Callable<Object> callable (Runnable task)", "description": "Returns a Callable object that, when\n called, runs the given task and returns null."}, {"method_name": "callable", "method_sig": "public static Callable<Object> callable (PrivilegedAction<?> action)", "description": "Returns a Callable object that, when\n called, runs the given privileged action and returns its result."}, {"method_name": "callable", "method_sig": "public static Callable<Object> callable (PrivilegedExceptionAction<?> action)", "description": "Returns a Callable object that, when\n called, runs the given privileged exception action and returns\n its result."}, {"method_name": "privilegedCallable", "method_sig": "public static <T> Callable<T> privilegedCallable (Callable<T> callable)", "description": "Returns a Callable object that will, when called,\n execute the given callable under the current access\n control context. This method should normally be invoked within\n an AccessController.doPrivileged\n action to create callables that will, if possible, execute\n under the selected permission settings holding within that\n action; or if not possible, throw an associated AccessControlException."}, {"method_name": "privilegedCallableUsingCurrentClassLoader", "method_sig": "public static <T> Callable<T> privilegedCallableUsingCurrentClassLoader (Callable<T> callable)", "description": "Returns a Callable object that will, when called,\n execute the given callable under the current access\n control context, with the current context class loader as the\n context class loader. This method should normally be invoked\n within an\n AccessController.doPrivileged\n action to create callables that will, if possible, execute\n under the selected permission settings holding within that\n action; or if not possible, throw an associated AccessControlException."}]}