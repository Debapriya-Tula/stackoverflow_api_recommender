{"name": "Class CompletableFuture<T>", "module": "java.base", "package": "java.util.concurrent", "text": "A Future that may be explicitly completed (setting its\n value and status), and may be used as a CompletionStage,\n supporting dependent functions and actions that trigger upon its\n completion.\n\n When two or more threads attempt to\n complete,\n completeExceptionally, or\n cancel\n a CompletableFuture, only one of them succeeds.\n\n In addition to these and related methods for directly\n manipulating status and results, CompletableFuture implements\n interface CompletionStage with the following policies: \nActions supplied for dependent completions of\n non-async methods may be performed by the thread that\n completes the current CompletableFuture, or by any other caller of\n a completion method.\n\n All async methods without an explicit Executor\n argument are performed using the ForkJoinPool.commonPool()\n (unless it does not support a parallelism level of at least two, in\n which case, a new Thread is created to run each task).  This may be\n overridden for non-static methods in subclasses by defining method\n defaultExecutor(). To simplify monitoring, debugging,\n and tracking, all generated asynchronous tasks are instances of the\n marker interface CompletableFuture.AsynchronousCompletionTask.  Operations\n with time-delays can use adapter methods defined in this class, for\n example: supplyAsync(supplier, delayedExecutor(timeout,\n timeUnit)).  To support methods with delays and timeouts, this\n class maintains at most one daemon thread for triggering and\n cancelling actions, not for running them.\n\n All CompletionStage methods are implemented independently of\n other public methods, so the behavior of one method is not impacted\n by overrides of others in subclasses.\n\n All CompletionStage methods return CompletableFutures.  To\n restrict usages to only those methods defined in interface\n CompletionStage, use method minimalCompletionStage(). Or to\n ensure only that clients do not themselves modify a future, use\n method copy().\n \nCompletableFuture also implements Future with the following\n policies: \nSince (unlike FutureTask) this class has no direct\n control over the computation that causes it to be completed,\n cancellation is treated as just another form of exceptional\n completion.  Method cancel has the same effect as\n completeExceptionally(new CancellationException()). Method\n isCompletedExceptionally() can be used to determine if a\n CompletableFuture completed in any exceptional fashion.\n\n In case of exceptional completion with a CompletionException,\n methods get() and get(long, TimeUnit) throw an\n ExecutionException with the same cause as held in the\n corresponding CompletionException.  To simplify usage in most\n contexts, this class also defines methods join() and\n getNow(T) that instead throw the CompletionException directly\n in these cases.\n \nArguments used to pass a completion result (that is, for\n parameters of type T) for methods accepting them may be\n null, but passing a null value for any other parameter will result\n in a NullPointerException being thrown.\n\n Subclasses of this class should normally override the \"virtual\n constructor\" method newIncompleteFuture(), which establishes\n the concrete type returned by CompletionStage methods. For example,\n here is a class that substitutes a different default Executor and\n disables the obtrude methods:\n\n  \n class MyCompletableFuture<T> extends CompletableFuture<T> {\n   static final Executor myExecutor = ...;\n   public MyCompletableFuture() { }\n   public <U> CompletableFuture<U> newIncompleteFuture() {\n     return new MyCompletableFuture<U>(); }\n   public Executor defaultExecutor() {\n     return myExecutor; }\n   public void obtrudeValue(T value) {\n     throw new UnsupportedOperationException(); }\n   public void obtrudeException(Throwable ex) {\n     throw new UnsupportedOperationException(); }\n }", "codes": ["public class CompletableFuture<T>\nextends Object\nimplements Future<T>, CompletionStage<T>"], "fields": [], "methods": [{"method_name": "supplyAsync", "method_sig": "public static <U> CompletableFuture<U> supplyAsync (Supplier<U> supplier)", "description": "Returns a new CompletableFuture that is asynchronously completed\n by a task running in the ForkJoinPool.commonPool() with\n the value obtained by calling the given Supplier."}, {"method_name": "supplyAsync", "method_sig": "public static <U> CompletableFuture<U> supplyAsync (Supplier<U> supplier,\n                                                   Executor executor)", "description": "Returns a new CompletableFuture that is asynchronously completed\n by a task running in the given executor with the value obtained\n by calling the given Supplier."}, {"method_name": "runAsync", "method_sig": "public static CompletableFuture<Void> runAsync (Runnable runnable)", "description": "Returns a new CompletableFuture that is asynchronously completed\n by a task running in the ForkJoinPool.commonPool() after\n it runs the given action."}, {"method_name": "runAsync", "method_sig": "public static CompletableFuture<Void> runAsync (Runnable runnable,\n                                               Executor executor)", "description": "Returns a new CompletableFuture that is asynchronously completed\n by a task running in the given executor after it runs the given\n action."}, {"method_name": "completedFuture", "method_sig": "public static <U> CompletableFuture<U> completedFuture (U value)", "description": "Returns a new CompletableFuture that is already completed with\n the given value."}, {"method_name": "isDone", "method_sig": "public boolean isDone()", "description": "Returns true if completed in any fashion: normally,\n exceptionally, or via cancellation."}, {"method_name": "get", "method_sig": "public T get()\n      throws InterruptedException,\n             ExecutionException", "description": "Waits if necessary for this future to complete, and then\n returns its result."}, {"method_name": "get", "method_sig": "public T get (long timeout,\n             TimeUnit unit)\n      throws InterruptedException,\n             ExecutionException,\n             TimeoutException", "description": "Waits if necessary for at most the given time for this future\n to complete, and then returns its result, if available."}, {"method_name": "join", "method_sig": "public T join()", "description": "Returns the result value when complete, or throws an\n (unchecked) exception if completed exceptionally. To better\n conform with the use of common functional forms, if a\n computation involved in the completion of this\n CompletableFuture threw an exception, this method throws an\n (unchecked) CompletionException with the underlying\n exception as its cause."}, {"method_name": "getNow", "method_sig": "public T getNow (T valueIfAbsent)", "description": "Returns the result value (or throws any encountered exception)\n if completed, else returns the given valueIfAbsent."}, {"method_name": "complete", "method_sig": "public boolean complete (T value)", "description": "If not already completed, sets the value returned by get() and related methods to the given value."}, {"method_name": "completeExceptionally", "method_sig": "public boolean completeExceptionally (Throwable ex)", "description": "If not already completed, causes invocations of get()\n and related methods to throw the given exception."}, {"method_name": "toCompletableFuture", "method_sig": "public CompletableFuture<T> toCompletableFuture()", "description": "Returns this CompletableFuture."}, {"method_name": "exceptionally", "method_sig": "public CompletableFuture<T> exceptionally (Function<Throwable, ? extends T> fn)", "description": "Returns a new CompletableFuture that is completed when this\n CompletableFuture completes, with the result of the given\n function of the exception triggering this CompletableFuture's\n completion when it completes exceptionally; otherwise, if this\n CompletableFuture completes normally, then the returned\n CompletableFuture also completes normally with the same value.\n Note: More flexible versions of this functionality are\n available using methods whenComplete and handle."}, {"method_name": "allOf", "method_sig": "public static CompletableFuture<Void> allOf (CompletableFuture<?>... cfs)", "description": "Returns a new CompletableFuture that is completed when all of\n the given CompletableFutures complete.  If any of the given\n CompletableFutures complete exceptionally, then the returned\n CompletableFuture also does so, with a CompletionException\n holding this exception as its cause.  Otherwise, the results,\n if any, of the given CompletableFutures are not reflected in\n the returned CompletableFuture, but may be obtained by\n inspecting them individually. If no CompletableFutures are\n provided, returns a CompletableFuture completed with the value\n null.\n\n Among the applications of this method is to await completion\n of a set of independent CompletableFutures before continuing a\n program, as in: CompletableFuture.allOf(c1, c2,\n c3).join();."}, {"method_name": "anyOf", "method_sig": "public static CompletableFuture<Object> anyOf (CompletableFuture<?>... cfs)", "description": "Returns a new CompletableFuture that is completed when any of\n the given CompletableFutures complete, with the same result.\n Otherwise, if it completed exceptionally, the returned\n CompletableFuture also does so, with a CompletionException\n holding this exception as its cause.  If no CompletableFutures\n are provided, returns an incomplete CompletableFuture."}, {"method_name": "cancel", "method_sig": "public boolean cancel (boolean mayInterruptIfRunning)", "description": "If not already completed, completes this CompletableFuture with\n a CancellationException. Dependent CompletableFutures\n that have not already completed will also complete\n exceptionally, with a CompletionException caused by\n this CancellationException."}, {"method_name": "isCancelled", "method_sig": "public boolean isCancelled()", "description": "Returns true if this CompletableFuture was cancelled\n before it completed normally."}, {"method_name": "isCompletedExceptionally", "method_sig": "public boolean isCompletedExceptionally()", "description": "Returns true if this CompletableFuture completed\n exceptionally, in any way. Possible causes include\n cancellation, explicit invocation of \n completeExceptionally, and abrupt termination of a\n CompletionStage action."}, {"method_name": "obtrudeValue", "method_sig": "public void obtrudeValue (T value)", "description": "Forcibly sets or resets the value subsequently returned by\n method get() and related methods, whether or not\n already completed. This method is designed for use only in\n error recovery actions, and even in such situations may result\n in ongoing dependent completions using established versus\n overwritten outcomes."}, {"method_name": "obtrudeException", "method_sig": "public void obtrudeException (Throwable ex)", "description": "Forcibly causes subsequent invocations of method get()\n and related methods to throw the given exception, whether or\n not already completed. This method is designed for use only in\n error recovery actions, and even in such situations may result\n in ongoing dependent completions using established versus\n overwritten outcomes."}, {"method_name": "getNumberOfDependents", "method_sig": "public int getNumberOfDependents()", "description": "Returns the estimated number of CompletableFutures whose\n completions are awaiting completion of this CompletableFuture.\n This method is designed for use in monitoring system state, not\n for synchronization control."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a string identifying this CompletableFuture, as well as\n its completion state.  The state, in brackets, contains the\n String \"Completed Normally\" or the String \n \"Completed Exceptionally\", or the String \"Not\n completed\" followed by the number of CompletableFutures\n dependent upon its completion, if any."}, {"method_name": "newIncompleteFuture", "method_sig": "public <U> CompletableFuture<U> newIncompleteFuture()", "description": "Returns a new incomplete CompletableFuture of the type to be\n returned by a CompletionStage method. Subclasses should\n normally override this method to return an instance of the same\n class as this CompletableFuture. The default implementation\n returns an instance of class CompletableFuture."}, {"method_name": "defaultExecutor", "method_sig": "public Executor defaultExecutor()", "description": "Returns the default Executor used for async methods that do not\n specify an Executor. This class uses the ForkJoinPool.commonPool() if it supports more than one\n parallel thread, or else an Executor using one thread per async\n task.  This method may be overridden in subclasses to return\n an Executor that provides at least one independent thread."}, {"method_name": "copy", "method_sig": "public CompletableFuture<T> copy()", "description": "Returns a new CompletableFuture that is completed normally with\n the same value as this CompletableFuture when it completes\n normally. If this CompletableFuture completes exceptionally,\n then the returned CompletableFuture completes exceptionally\n with a CompletionException with this exception as cause. The\n behavior is equivalent to thenApply(x -> x). This\n method may be useful as a form of \"defensive copying\", to\n prevent clients from completing, while still being able to\n arrange dependent actions."}, {"method_name": "minimalCompletionStage", "method_sig": "public CompletionStage<T> minimalCompletionStage()", "description": "Returns a new CompletionStage that is completed normally with\n the same value as this CompletableFuture when it completes\n normally, and cannot be independently completed or otherwise\n used in ways not defined by the methods of interface CompletionStage.  If this CompletableFuture completes\n exceptionally, then the returned CompletionStage completes\n exceptionally with a CompletionException with this exception as\n cause.\n\n Unless overridden by a subclass, a new non-minimal\n CompletableFuture with all methods available can be obtained from\n a minimal CompletionStage via toCompletableFuture().\n For example, completion of a minimal stage can be awaited by\n\n  minimalStage.toCompletableFuture().join(); "}, {"method_name": "completeAsync", "method_sig": "public CompletableFuture<T> completeAsync (Supplier<? extends T> supplier,\n                                          Executor executor)", "description": "Completes this CompletableFuture with the result of\n the given Supplier function invoked from an asynchronous\n task using the given executor."}, {"method_name": "completeAsync", "method_sig": "public CompletableFuture<T> completeAsync (Supplier<? extends T> supplier)", "description": "Completes this CompletableFuture with the result of the given\n Supplier function invoked from an asynchronous task using the\n default executor."}, {"method_name": "orTimeout", "method_sig": "public CompletableFuture<T> orTimeout (long timeout,\n                                      TimeUnit unit)", "description": "Exceptionally completes this CompletableFuture with\n a TimeoutException if not otherwise completed\n before the given timeout."}, {"method_name": "completeOnTimeout", "method_sig": "public CompletableFuture<T> completeOnTimeout (T value,\n                                              long timeout,\n                                              TimeUnit unit)", "description": "Completes this CompletableFuture with the given value if not\n otherwise completed before the given timeout."}, {"method_name": "delayedExecutor", "method_sig": "public static Executor delayedExecutor (long delay,\n                                       TimeUnit unit,\n                                       Executor executor)", "description": "Returns a new Executor that submits a task to the given base\n executor after the given delay (or no delay if non-positive).\n Each delay commences upon invocation of the returned executor's\n execute method."}, {"method_name": "delayedExecutor", "method_sig": "public static Executor delayedExecutor (long delay,\n                                       TimeUnit unit)", "description": "Returns a new Executor that submits a task to the default\n executor after the given delay (or no delay if non-positive).\n Each delay commences upon invocation of the returned executor's\n execute method."}, {"method_name": "completedStage", "method_sig": "public static <U> CompletionStage<U> completedStage (U value)", "description": "Returns a new CompletionStage that is already completed with\n the given value and supports only those methods in\n interface CompletionStage."}, {"method_name": "failedFuture", "method_sig": "public static <U> CompletableFuture<U> failedFuture (Throwable ex)", "description": "Returns a new CompletableFuture that is already completed\n exceptionally with the given exception."}, {"method_name": "failedStage", "method_sig": "public static <U> CompletionStage<U> failedStage (Throwable ex)", "description": "Returns a new CompletionStage that is already completed\n exceptionally with the given exception and supports only those\n methods in interface CompletionStage."}]}