{"name": "Class ModuleLayer", "module": "java.base", "package": "java.lang", "text": "A layer of modules in the Java virtual machine.\n\n  A layer is created from a graph of modules in a Configuration\n and a function that maps each module to a ClassLoader.\n Creating a layer informs the Java virtual machine about the classes that\n may be loaded from the modules so that the Java virtual machine knows which\n module that each class is a member of. \n Creating a layer creates a Module object for each ResolvedModule in the configuration. For each resolved module that is\n read, the Module reads the corresponding run-time Module, which may\n be in the same layer or a parent layer. \n The defineModulesWithOneLoader and\n defineModulesWithManyLoaders methods\n provide convenient ways to create a module layer where all modules are\n mapped to a single class loader or where each module is mapped to its own\n class loader. The defineModules method is for more\n advanced cases where modules are mapped to custom class loaders by means of\n a function specified to the method. Each of these methods has an instance\n and static variant. The instance methods create a layer with the receiver\n as the parent layer. The static methods are for more advanced cases where\n there can be more than one parent layer or where a Controller is needed to control modules in the layer\n \n A Java virtual machine has at least one non-empty layer, the boot layer, that is created when the Java virtual machine is\n started. The boot layer contains module java.base and is the only\n layer in the Java virtual machine with a module named \"java.base\".\n The modules in the boot layer are mapped to the bootstrap class loader and\n other class loaders that are \n built-in into the Java virtual machine. The boot layer will often be\n the parent when creating additional layers. \n Each Module in a layer is created so that it exports and opens\n the packages described by its ModuleDescriptor. Qualified exports\n (where a package is exported to a set of target modules rather than all\n modules) are reified when creating the layer as follows: \n\n If module X exports a package to Y, and if the\n     runtime Module X reads Module Y, then\n     the package is exported to Module Y (which may be in\n     the same layer as X or a parent layer). \n If module X exports a package to Y, and if the\n     runtime Module X does not read Y then target\n     Y is located as if by invoking findModule to find the module in the layer or its parent layers. If\n     Y is found then the package is exported to the instance of\n     Y that was found. If Y is not found then the qualified\n     export is ignored. \n\n Qualified opens are handled in same way as qualified exports. \n As when creating a Configuration,\n automatic modules receive special\n treatment when creating a layer. An automatic module is created in the\n Java virtual machine as a Module that reads every unnamed \n Module in the Java virtual machine. \n Unless otherwise specified, passing a null argument to a method\n in this class causes a NullPointerException to\n be thrown. \n Example usage: \n This example creates a configuration by resolving a module named\n \"myapp\" with the configuration for the boot layer as the parent. It\n then creates a new layer with the modules in this configuration. All modules\n are defined to the same class loader. \n\n     ModuleFinder finder = ModuleFinder.of(dir1, dir2, dir3);\n\n     ModuleLayer parent = ModuleLayer.boot();\n\n     Configuration cf = parent.configuration().resolve(finder, ModuleFinder.of(), Set.of(\"myapp\"));\n\n     ClassLoader scl = ClassLoader.getSystemClassLoader();\n\n     ModuleLayer layer = parent.defineModulesWithOneLoader(cf, scl);\n\n     Class<?> c = layer.findLoader(\"myapp\").loadClass(\"app.Main\");\n ", "codes": ["public final class ModuleLayer\nextends Object"], "fields": [], "methods": [{"method_name": "defineModulesWithOneLoader", "method_sig": "public ModuleLayer defineModulesWithOneLoader (Configuration cf,\n                                              ClassLoader parentLoader)", "description": "Creates a new module layer, with this layer as its parent, by defining the\n modules in the given Configuration to the Java virtual machine.\n This method creates one class loader and defines all modules to that\n class loader. The parent of each class\n loader is the given parent class loader. This method works exactly as\n specified by the static defineModulesWithOneLoader method when invoked with this layer as the\n parent. In other words, if this layer is thisLayer then this\n method is equivalent to invoking:\n  \n     ModuleLayer.defineModulesWithOneLoader(cf, List.of(thisLayer), parentLoader).layer();\n "}, {"method_name": "defineModulesWithManyLoaders", "method_sig": "public ModuleLayer defineModulesWithManyLoaders (Configuration cf,\n                                                ClassLoader parentLoader)", "description": "Creates a new module layer, with this layer as its parent, by defining the\n modules in the given Configuration to the Java virtual machine.\n Each module is defined to its own ClassLoader created by this\n method. The parent of each class loader\n is the given parent class loader. This method works exactly as specified\n by the static defineModulesWithManyLoaders method when invoked with this layer as the\n parent. In other words, if this layer is thisLayer then this\n method is equivalent to invoking:\n  \n     ModuleLayer.defineModulesWithManyLoaders(cf, List.of(thisLayer), parentLoader).layer();\n "}, {"method_name": "defineModules", "method_sig": "public ModuleLayer defineModules (Configuration cf,\n                                 Function<String, ClassLoader> clf)", "description": "Creates a new module layer, with this layer as its parent, by defining the\n modules in the given Configuration to the Java virtual machine.\n Each module is mapped, by name, to its class loader by means of the\n given function. This method works exactly as specified by the static\n defineModules\n method when invoked with this layer as the parent. In other words, if\n this layer is thisLayer then this method is equivalent to\n invoking:\n  \n     ModuleLayer.defineModules(cf, List.of(thisLayer), clf).layer();\n "}, {"method_name": "defineModulesWithOneLoader", "method_sig": "public static ModuleLayer.Controller defineModulesWithOneLoader (Configuration cf,\n                                                                List<ModuleLayer> parentLayers,\n                                                                ClassLoader parentLoader)", "description": "Creates a new module layer by defining the modules in the given \n Configuration to the Java virtual machine. This method creates one\n class loader and defines all modules to that class loader.\n\n  The class loader created by this method implements direct\n delegation when loading classes from modules. If the loadClass method is invoked to\n load a class then it uses the package name of the class to map it to a\n module. This may be a module in this layer and hence defined to the same\n class loader. It may be a package in a module in a parent layer that is\n exported to one or more of the modules in this layer. The class\n loader delegates to the class loader of the module, throwing \n ClassNotFoundException if not found by that class loader.\n When loadClass is invoked to load classes that do not map to a\n module then it delegates to the parent class loader. \n The class loader created by this method locates resources\n (getResource, getResources, and other resource\n methods) in all modules in the layer before searching the parent class\n loader. \n Attempting to create a layer with all modules defined to the same\n class loader can fail for the following reasons:\n\n \n Overlapping packages: Two or more modules in the\n     configuration have the same package. \n Split delegation: The resulting class loader would\n     need to delegate to more than one class loader in order to load\n     classes in a specific package. \n\n In addition, a layer cannot be created if the configuration contains\n a module named \"java.base\", or a module contains a package named\n \"java\" or a package with a name starting with \"java.\". \n If there is a security manager then the class loader created by\n this method will load classes and resources with privileges that are\n restricted by the calling context of this method. "}, {"method_name": "defineModulesWithManyLoaders", "method_sig": "public static ModuleLayer.Controller defineModulesWithManyLoaders (Configuration cf,\n                                                                  List<ModuleLayer> parentLayers,\n                                                                  ClassLoader parentLoader)", "description": "Creates a new module layer by defining the modules in the given \n Configuration to the Java virtual machine. Each module is defined to\n its own ClassLoader created by this method. The parent of each class loader is the given parent\n class loader.\n\n  The class loaders created by this method implement direct\n delegation when loading classes from modules. If the loadClass method is invoked to\n load a class then it uses the package name of the class to map it to a\n module. The package may be in the module defined to the class loader.\n The package may be exported by another module in this layer to the\n module defined to the class loader. It may be in a package exported by a\n module in a parent layer. The class loader delegates to the class loader\n of the module, throwing ClassNotFoundException if not found by\n that class loader. When loadClass is invoked to load a class\n that does not map to a module then it delegates to the parent class\n loader. \n The class loaders created by this method locate resources\n (getResource, getResources, and other resource\n methods) in the module defined to the class loader before searching\n the parent class loader. \n If there is a security manager then the class loaders created by\n this method will load classes and resources with privileges that are\n restricted by the calling context of this method. "}, {"method_name": "defineModules", "method_sig": "public static ModuleLayer.Controller defineModules (Configuration cf,\n                                                   List<ModuleLayer> parentLayers,\n                                                   Function<String, ClassLoader> clf)", "description": "Creates a new module layer by defining the modules in the given \n Configuration to the Java virtual machine. The given function maps each\n module in the configuration, by name, to a class loader. Creating the\n layer informs the Java virtual machine about the classes that may be\n loaded so that the Java virtual machine knows which module that each\n class is a member of.\n\n  The class loader delegation implemented by the class loaders must\n respect module readability. The class loaders should be\n parallel-capable so as to\n avoid deadlocks during class loading. In addition, the entity creating\n a new layer with this method should arrange that the class loaders be\n ready to load from these modules before there are any attempts to load\n classes or resources. \n Creating a layer can fail for the following reasons: \n\n Two or more modules with the same package are mapped to the\n     same class loader. \n A module is mapped to a class loader that already has a\n     module of the same name defined to it. \n A module is mapped to a class loader that has already\n     defined types in any of the packages in the module. \n\n In addition, a layer cannot be created if the configuration contains\n a module named \"java.base\", a configuration contains a module\n with a package named \"java\" or a package name starting with\n \"java.\", or the function to map a module name to a class loader\n returns null or the platform class loader. \n If the function to map a module name to class loader throws an error\n or runtime exception then it is propagated to the caller of this method.\n "}, {"method_name": "configuration", "method_sig": "public Configuration configuration()", "description": "Returns the configuration for this layer."}, {"method_name": "parents", "method_sig": "public List<ModuleLayer> parents()", "description": "Returns the list of this layer's parents unless this is the\n empty layer, which has no parents and so an\n empty list is returned."}, {"method_name": "modules", "method_sig": "public Set<Module> modules()", "description": "Returns the set of the modules in this layer."}, {"method_name": "findModule", "method_sig": "public Optional<Module> findModule (String name)", "description": "Returns the module with the given name in this layer, or if not in this\n layer, the parent layers. Finding a module in\n parent layers is equivalent to invoking findModule on each\n parent, in search order, until the module is found or all parents have\n been searched. In a tree of layers  then this is equivalent to\n a depth-first search."}, {"method_name": "findLoader", "method_sig": "public ClassLoader findLoader (String name)", "description": "Returns the ClassLoader for the module with the given name. If\n a module of the given name is not in this layer then the parent layers are searched in the manner specified by findModule.\n\n  If there is a security manager then its checkPermission\n method is called with a RuntimePermission(\"getClassLoader\")\n permission to check that the caller is allowed to get access to the\n class loader. "}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a string describing this module layer."}, {"method_name": "empty", "method_sig": "public static ModuleLayer empty()", "description": "Returns the empty layer. There are no modules in the empty\n layer. It has no parents."}, {"method_name": "boot", "method_sig": "public static ModuleLayer boot()", "description": "Returns the boot layer. The boot layer contains at least one module,\n java.base. Its parent is the empty layer."}]}