{"name": "Class InputStreamReader", "module": "java.base", "package": "java.io", "text": "An InputStreamReader is a bridge from byte streams to character streams: It\n reads bytes and decodes them into characters using a specified charset.  The charset that it uses\n may be specified by name or may be given explicitly, or the platform's\n default charset may be accepted.\n\n  Each invocation of one of an InputStreamReader's read() methods may\n cause one or more bytes to be read from the underlying byte-input stream.\n To enable the efficient conversion of bytes to characters, more bytes may\n be read ahead from the underlying stream than are necessary to satisfy the\n current read operation.\n\n  For top efficiency, consider wrapping an InputStreamReader within a\n BufferedReader.  For example:\n\n \n BufferedReader in\n   = new BufferedReader(new InputStreamReader(System.in));\n ", "codes": ["public class InputStreamReader\nextends Reader"], "fields": [], "methods": [{"method_name": "getEncoding", "method_sig": "public String getEncoding()", "description": "Returns the name of the character encoding being used by this stream.\n\n  If the encoding has an historical name then that name is returned;\n otherwise the encoding's canonical name is returned.\n\n  If this instance was created with the InputStreamReader(InputStream, String) constructor then the returned\n name, being unique for the encoding, may differ from the name passed to\n the constructor. This method will return null if the\n stream has been closed.\n "}, {"method_name": "read", "method_sig": "public int read()\n         throws IOException", "description": "Reads a single character."}, {"method_name": "read", "method_sig": "public int read (char[] cbuf,\n                int offset,\n                int length)\n         throws IOException", "description": "Reads characters into a portion of an array."}, {"method_name": "ready", "method_sig": "public boolean ready()\n              throws IOException", "description": "Tells whether this stream is ready to be read.  An InputStreamReader is\n ready if its input buffer is not empty, or if bytes are available to be\n read from the underlying byte stream."}]}