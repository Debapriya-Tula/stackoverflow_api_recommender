{"name": "Interface CompletionService<V>", "module": "java.base", "package": "java.util.concurrent", "text": "A service that decouples the production of new asynchronous tasks\n from the consumption of the results of completed tasks.  Producers\n submit tasks for execution. Consumers take\n completed tasks and process their results in the order they\n complete.  A CompletionService can for example be used to\n manage asynchronous I/O, in which tasks that perform reads are\n submitted in one part of a program or system, and then acted upon\n in a different part of the program when the reads complete,\n possibly in a different order than they were requested.\n\n Typically, a CompletionService relies on a separate\n Executor to actually execute the tasks, in which case the\n CompletionService only manages an internal completion\n queue. The ExecutorCompletionService class provides an\n implementation of this approach.\n\n Memory consistency effects: Actions in a thread prior to\n submitting a task to a CompletionService\nhappen-before\n actions taken by that task, which in turn happen-before\n actions following a successful return from the corresponding take().", "codes": ["public interface CompletionService<V>"], "fields": [], "methods": [{"method_name": "submit", "method_sig": "Future<V> submit (Callable<V> task)", "description": "Submits a value-returning task for execution and returns a Future\n representing the pending results of the task.  Upon completion,\n this task may be taken or polled."}, {"method_name": "submit", "method_sig": "Future<V> submit (Runnable task,\n                 V result)", "description": "Submits a Runnable task for execution and returns a Future\n representing that task.  Upon completion, this task may be\n taken or polled."}, {"method_name": "take", "method_sig": "Future<V> take()\n        throws InterruptedException", "description": "Retrieves and removes the Future representing the next\n completed task, waiting if none are yet present."}, {"method_name": "poll", "method_sig": "Future<V> poll()", "description": "Retrieves and removes the Future representing the next\n completed task, or null if none are present."}, {"method_name": "poll", "method_sig": "Future<V> poll (long timeout,\n               TimeUnit unit)\n        throws InterruptedException", "description": "Retrieves and removes the Future representing the next\n completed task, waiting if necessary up to the specified wait\n time if none are yet present."}]}