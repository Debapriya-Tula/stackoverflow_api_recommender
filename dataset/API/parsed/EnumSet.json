{"name": "Class EnumSet<E extends Enum<E>>", "module": "java.base", "package": "java.util", "text": "A specialized Set implementation for use with enum types.  All of\n the elements in an enum set must come from a single enum type that is\n specified, explicitly or implicitly, when the set is created.  Enum sets\n are represented internally as bit vectors.  This representation is\n extremely compact and efficient. The space and time performance of this\n class should be good enough to allow its use as a high-quality, typesafe\n alternative to traditional int-based \"bit flags.\"  Even bulk\n operations (such as containsAll and retainAll) should\n run very quickly if their argument is also an enum set.\n\n The iterator returned by the iterator method traverses the\n elements in their natural order (the order in which the enum\n constants are declared).  The returned iterator is weakly\n consistent: it will never throw ConcurrentModificationException\n and it may or may not show the effects of any modifications to the set that\n occur while the iteration is in progress.\n\n Null elements are not permitted.  Attempts to insert a null element\n will throw NullPointerException.  Attempts to test for the\n presence of a null element or to remove one will, however, function\n properly.\n\n Like most collection implementations, EnumSet is not\n synchronized.  If multiple threads access an enum set concurrently, and at\n least one of the threads modifies the set, it should be synchronized\n externally.  This is typically accomplished by synchronizing on some\n object that naturally encapsulates the enum set.  If no such object exists,\n the set should be \"wrapped\" using the Collections.synchronizedSet(java.util.Set<T>)\n method.  This is best done at creation time, to prevent accidental\n unsynchronized access:\n\n \n Set<MyEnum> s = Collections.synchronizedSet(EnumSet.noneOf(MyEnum.class));\n \nImplementation note: All basic operations execute in constant time.\n They are likely (though not guaranteed) to be much faster than their\n HashSet counterparts.  Even bulk operations execute in\n constant time if their argument is also an enum set.\n\n This class is a member of the\n \n Java Collections Framework.", "codes": ["public abstract class EnumSet<E extends Enum<E>>\nextends AbstractSet<E>\nimplements Cloneable, Serializable"], "fields": [], "methods": [{"method_name": "noneOf", "method_sig": "public static <E extends Enum<E>> EnumSet<E> noneOf (Class<E> elementType)", "description": "Creates an empty enum set with the specified element type."}, {"method_name": "allOf", "method_sig": "public static <E extends Enum<E>> EnumSet<E> allOf (Class<E> elementType)", "description": "Creates an enum set containing all of the elements in the specified\n element type."}, {"method_name": "copyOf", "method_sig": "public static <E extends Enum<E>> EnumSet<E> copyOf (EnumSet<E> s)", "description": "Creates an enum set with the same element type as the specified enum\n set, initially containing the same elements (if any)."}, {"method_name": "copyOf", "method_sig": "public static <E extends Enum<E>> EnumSet<E> copyOf (Collection<E> c)", "description": "Creates an enum set initialized from the specified collection.  If\n the specified collection is an EnumSet instance, this static\n factory method behaves identically to copyOf(EnumSet).\n Otherwise, the specified collection must contain at least one element\n (in order to determine the new enum set's element type)."}, {"method_name": "complementOf", "method_sig": "public static <E extends Enum<E>> EnumSet<E> complementOf (EnumSet<E> s)", "description": "Creates an enum set with the same element type as the specified enum\n set, initially containing all the elements of this type that are\n not contained in the specified set."}, {"method_name": "of", "method_sig": "public static <E extends Enum<E>> EnumSet<E> of (E e)", "description": "Creates an enum set initially containing the specified element.\n\n Overloadings of this method exist to initialize an enum set with\n one through five elements.  A sixth overloading is provided that\n uses the varargs feature.  This overloading may be used to create\n an enum set initially containing an arbitrary number of elements, but\n is likely to run slower than the overloadings that do not use varargs."}, {"method_name": "of", "method_sig": "public static <E extends Enum<E>> EnumSet<E> of (E e1,\n                                                E e2)", "description": "Creates an enum set initially containing the specified elements.\n\n Overloadings of this method exist to initialize an enum set with\n one through five elements.  A sixth overloading is provided that\n uses the varargs feature.  This overloading may be used to create\n an enum set initially containing an arbitrary number of elements, but\n is likely to run slower than the overloadings that do not use varargs."}, {"method_name": "of", "method_sig": "public static <E extends Enum<E>> EnumSet<E> of (E e1,\n                                                E e2,\n                                                E e3)", "description": "Creates an enum set initially containing the specified elements.\n\n Overloadings of this method exist to initialize an enum set with\n one through five elements.  A sixth overloading is provided that\n uses the varargs feature.  This overloading may be used to create\n an enum set initially containing an arbitrary number of elements, but\n is likely to run slower than the overloadings that do not use varargs."}, {"method_name": "of", "method_sig": "public static <E extends Enum<E>> EnumSet<E> of (E e1,\n                                                E e2,\n                                                E e3,\n                                                E e4)", "description": "Creates an enum set initially containing the specified elements.\n\n Overloadings of this method exist to initialize an enum set with\n one through five elements.  A sixth overloading is provided that\n uses the varargs feature.  This overloading may be used to create\n an enum set initially containing an arbitrary number of elements, but\n is likely to run slower than the overloadings that do not use varargs."}, {"method_name": "of", "method_sig": "public static <E extends Enum<E>> EnumSet<E> of (E e1,\n                                                E e2,\n                                                E e3,\n                                                E e4,\n                                                E e5)", "description": "Creates an enum set initially containing the specified elements.\n\n Overloadings of this method exist to initialize an enum set with\n one through five elements.  A sixth overloading is provided that\n uses the varargs feature.  This overloading may be used to create\n an enum set initially containing an arbitrary number of elements, but\n is likely to run slower than the overloadings that do not use varargs."}, {"method_name": "of", "method_sig": "@SafeVarargs\npublic static <E extends Enum<E>> EnumSet<E> of (E first,\n                                                E... rest)", "description": "Creates an enum set initially containing the specified elements.\n This factory, whose parameter list uses the varargs feature, may\n be used to create an enum set initially containing an arbitrary\n number of elements, but it is likely to run slower than the overloadings\n that do not use varargs."}, {"method_name": "range", "method_sig": "public static <E extends Enum<E>> EnumSet<E> range (E from,\n                                                   E to)", "description": "Creates an enum set initially containing all of the elements in the\n range defined by the two specified endpoints.  The returned set will\n contain the endpoints themselves, which may be identical but must not\n be out of order."}, {"method_name": "clone", "method_sig": "public EnumSet<E> clone()", "description": "Returns a copy of this set."}]}