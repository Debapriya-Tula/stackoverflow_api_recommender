{"name": "Class PrinterJob", "module": "java.desktop", "package": "java.awt.print", "text": "The PrinterJob class is the principal class that controls\n printing. An application calls methods in this class to set up a job,\n optionally to invoke a print dialog with the user, and then to print\n the pages of the job.", "codes": ["public abstract class PrinterJob\nextends Object"], "fields": [], "methods": [{"method_name": "getPrinterJob", "method_sig": "public static PrinterJob getPrinterJob()", "description": "Creates and returns a PrinterJob which is initially\n associated with the default printer.\n If no printers are available on the system, a PrinterJob will still\n be returned from this method, but getPrintService()\n will return null, and calling\n print with this PrinterJob might\n generate an exception.  Applications that need to determine if\n there are suitable printers before creating a PrinterJob\n should ensure that the array returned from\n lookupPrintServices is not empty."}, {"method_name": "lookupPrintServices", "method_sig": "public static PrintService[] lookupPrintServices()", "description": "A convenience method which looks up 2D print services.\n Services returned from this method may be installed on\n PrinterJobs which support print services.\n Calling this method is equivalent to calling\n PrintServiceLookup.lookupPrintServices()\n and specifying a Pageable DocFlavor."}, {"method_name": "lookupStreamPrintServices", "method_sig": "public static StreamPrintServiceFactory[] lookupStreamPrintServices (String mimeType)", "description": "A convenience method which locates factories for stream print\n services which can image 2D graphics.\n Sample usage :\n \n FileOutputStream outstream;\n StreamPrintService psPrinter;\n String psMimeType = \"application/postscript\";\n PrinterJob pj = PrinterJob.getPrinterJob();\n\n StreamPrintServiceFactory[] factories =\n     PrinterJob.lookupStreamPrintServices(psMimeType);\n if (factories.length > 0) {\n     try {\n         outstream = new File(\"out.ps\");\n         psPrinter =  factories[0].getPrintService(outstream);\n         // psPrinter can now be set as the service on a PrinterJob\n         pj.setPrintService(psPrinter)\n     } catch (Exception e) {\n         e.printStackTrace();\n     }\n }\n \n Services returned from this method may be installed on\n PrinterJob instances which support print services.\n Calling this method is equivalent to calling\n StreamPrintServiceFactory.lookupStreamPrintServiceFactories()\n  and specifying a Pageable DocFlavor."}, {"method_name": "getPrintService", "method_sig": "public PrintService getPrintService()", "description": "Returns the service (printer) for this printer job.\n Implementations of this class which do not support print services\n may return null.  null will also be returned if no printers are\n available."}, {"method_name": "setPrintService", "method_sig": "public void setPrintService (PrintService service)\n                     throws PrinterException", "description": "Associate this PrinterJob with a new PrintService.\n This method is overridden by subclasses which support\n specifying a Print Service.\n\n Throws PrinterException if the specified service\n cannot support the Pageable and\n Printable interfaces necessary to support 2D printing."}, {"method_name": "setPrintable", "method_sig": "public abstract void setPrintable (Printable painter)", "description": "Calls painter to render the pages.  The pages in the\n document to be printed by this\n PrinterJob are rendered by the Printable\n object, painter.  The PageFormat for each page\n is the default page format."}, {"method_name": "setPrintable", "method_sig": "public abstract void setPrintable (Printable painter,\n                                  PageFormat format)", "description": "Calls painter to render the pages in the specified\n format.  The pages in the document to be printed by\n this PrinterJob are rendered by the\n Printable object, painter. The\n PageFormat of each page is format."}, {"method_name": "setPageable", "method_sig": "public abstract void setPageable (Pageable document)\n                          throws NullPointerException", "description": "Queries document for the number of pages and\n the PageFormat and Printable for each\n page held in the Pageable instance,\n document."}, {"method_name": "printDialog", "method_sig": "public abstract boolean printDialog()\n                             throws HeadlessException", "description": "Presents a dialog to the user for changing the properties of\n the print job.\n This method will display a native dialog if a native print\n service is selected, and user choice of printers will be restricted\n to these native print services.\n To present the cross platform print dialog for all services,\n including native ones instead use\n printDialog(PrintRequestAttributeSet).\n \n PrinterJob implementations which can use PrintService's will update\n the PrintService for this PrinterJob to reflect the new service\n selected by the user."}, {"method_name": "printDialog", "method_sig": "public boolean printDialog (PrintRequestAttributeSet attributes)\n                    throws HeadlessException", "description": "A convenience method which displays a cross-platform print dialog\n for all services which are capable of printing 2D graphics using the\n Pageable interface. The selected printer when the\n dialog is initially displayed will reflect the print service currently\n attached to this print job.\n If the user changes the print service, the PrinterJob will be\n updated to reflect this, unless the user cancels the dialog.\n As well as allowing the user to select the destination printer,\n the user can also select values of various print request attributes.\n \n The attributes parameter on input will reflect the applications\n required initial selections in the user dialog. Attributes not\n specified display using the default for the service. On return it\n will reflect the user's choices. Selections may be updated by\n the implementation to be consistent with the supported values\n for the currently selected print service.\n \n As the user scrolls to a new print service selection, the values\n copied are based on the settings for the previous service, together\n with any user changes. The values are not based on the original\n settings supplied by the client.\n \n With the exception of selected printer, the PrinterJob state is\n not updated to reflect the user's changes.\n For the selections to affect a printer job, the attributes must\n be specified in the call to the\n print(PrintRequestAttributeSet) method. If using\n the Pageable interface, clients which intend to use media selected\n by the user must create a PageFormat derived from the user's\n selections.\n If the user cancels the dialog, the attributes will not reflect\n any changes made by the user."}, {"method_name": "pageDialog", "method_sig": "public abstract PageFormat pageDialog (PageFormat page)\n                               throws HeadlessException", "description": "Displays a dialog that allows modification of a\n PageFormat instance.\n The page argument is used to initialize controls\n in the page setup dialog.\n If the user cancels the dialog then this method returns the\n original page object unmodified.\n If the user okays the dialog then this method returns a new\n PageFormat object with the indicated changes.\n In either case, the original page object is\n not modified."}, {"method_name": "pageDialog", "method_sig": "public PageFormat pageDialog (PrintRequestAttributeSet attributes)\n                      throws HeadlessException", "description": "A convenience method which displays a cross-platform page setup dialog.\n The choices available will reflect the print service currently\n set on this PrinterJob.\n \n The attributes parameter on input will reflect the client's\n required initial selections in the user dialog. Attributes which are\n not specified display using the default for the service. On return it\n will reflect the user's choices. Selections may be updated by\n the implementation to be consistent with the supported values\n for the currently selected print service.\n \n The return value will be a PageFormat equivalent to the\n selections in the PrintRequestAttributeSet.\n If the user cancels the dialog, the attributes will not reflect\n any changes made by the user, and the return value will be null."}, {"method_name": "defaultPage", "method_sig": "public abstract PageFormat defaultPage (PageFormat page)", "description": "Clones the PageFormat argument and alters the\n clone to describe a default page size and orientation."}, {"method_name": "defaultPage", "method_sig": "public PageFormat defaultPage()", "description": "Creates a new PageFormat instance and\n sets it to a default size and orientation."}, {"method_name": "getPageFormat", "method_sig": "public PageFormat getPageFormat (PrintRequestAttributeSet attributes)", "description": "Calculates a PageFormat with values consistent with those\n supported by the current PrintService for this job\n (ie the value returned by getPrintService()) and media,\n printable area and orientation contained in attributes.\n \n Calling this method does not update the job.\n It is useful for clients that have a set of attributes obtained from\n printDialog(PrintRequestAttributeSet attributes)\n and need a PageFormat to print a Pageable object."}, {"method_name": "validatePage", "method_sig": "public abstract PageFormat validatePage (PageFormat page)", "description": "Returns the clone of page with its settings\n adjusted to be compatible with the current printer of this\n PrinterJob.  For example, the returned\n PageFormat could have its imageable area\n adjusted to fit within the physical area of the paper that\n is used by the current printer."}, {"method_name": "print", "method_sig": "public abstract void print()\n                    throws PrinterException", "description": "Prints a set of pages."}, {"method_name": "print", "method_sig": "public void print (PrintRequestAttributeSet attributes)\n           throws PrinterException", "description": "Prints a set of pages using the settings in the attribute\n set. The default implementation ignores the attribute set.\n \n Note that some attributes may be set directly on the PrinterJob\n by equivalent method calls, (for example), copies:\n setCopies(int), job name: setJobName(String)\n and specifying media size and orientation though the\n PageFormat object.\n \n If a supported attribute-value is specified in this attribute set,\n it will take precedence over the API settings for this print()\n operation only.\n The following behaviour is specified for PageFormat:\n If a client uses the Printable interface, then the\n attributes parameter to this method is examined\n for attributes which specify media (by size), orientation, and\n imageable area, and those are used to construct a new PageFormat\n which is passed to the Printable object's print() method.\n See Printable for an explanation of the required\n behaviour of a Printable to ensure optimal printing via PrinterJob.\n For clients of the Pageable interface, the PageFormat will always\n be as supplied by that interface, on a per page basis.\n \n These behaviours allow an application to directly pass the\n user settings returned from\n printDialog(PrintRequestAttributeSet attributes to\n this print() method."}, {"method_name": "setCopies", "method_sig": "public abstract void setCopies (int copies)", "description": "Sets the number of copies to be printed."}, {"method_name": "getCopies", "method_sig": "public abstract int getCopies()", "description": "Gets the number of copies to be printed."}, {"method_name": "getUserName", "method_sig": "public abstract String getUserName()", "description": "Gets the name of the printing user."}, {"method_name": "setJobName", "method_sig": "public abstract void setJobName (String jobName)", "description": "Sets the name of the document to be printed.\n The document name can not be null."}, {"method_name": "getJobName", "method_sig": "public abstract String getJobName()", "description": "Gets the name of the document to be printed."}, {"method_name": "cancel", "method_sig": "public abstract void cancel()", "description": "Cancels a print job that is in progress.  If\n print has been called but has not\n returned then this method signals\n that the job should be cancelled at the next\n chance. If there is no print job in progress then\n this call does nothing."}, {"method_name": "isCancelled", "method_sig": "public abstract boolean isCancelled()", "description": "Returns true if a print job is\n in progress, but is going to be cancelled\n at the next opportunity; otherwise returns\n false."}]}