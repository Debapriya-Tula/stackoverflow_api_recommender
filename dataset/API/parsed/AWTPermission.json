{"name": "Class AWTPermission", "module": "java.desktop", "package": "java.awt", "text": "This class is for AWT permissions.\n An AWTPermission contains a target name but\n no actions list; you either have the named permission\n or you don't.\n\n \n The target name is the name of the AWT permission (see below). The naming\n convention follows the hierarchical property naming convention.\n Also, an asterisk could be used to represent all AWT permissions.\n\n \n The following table lists all the possible AWTPermission\n target names, and for each provides a description of what the\n permission allows and a discussion of the risks of granting code\n the permission.\n\n \nAWTPermission target names, descriptions, and associated risks\n \n\n\nPermission Target Name\n     What the Permission Allows\n     Risks of Allowing this Permission\n \n\n\naccessClipboard\n     Posting and retrieval of information to and from the AWT clipboard\n     This would allow malfeasant code to share potentially sensitive or\n     confidential information.\n   \naccessEventQueue\n     Access to the AWT event queue\n     After retrieving the AWT event queue, malicious code may peek at and\n     even remove existing events from its event queue, as well as post bogus\n     events which may purposefully cause the application or applet to\n     misbehave in an insecure manner.\n   \naccessSystemTray\n     Access to the AWT SystemTray instance\n     This would allow malicious code to add tray icons to the system tray.\n     First, such an icon may look like the icon of some known application\n     (such as a firewall or anti-virus) and order a user to do something\n     unsafe (with help of balloon messages). Second, the system tray may be\n     glutted with tray icons so that no one could add a tray icon anymore.\n   \ncreateRobot\n     Create java.awt.Robot objects\n     The java.awt.Robot object allows code to generate native-level mouse\n     and keyboard events as well as read the screen. It could allow malicious\n     code to control the system, run other programs, read the display, and\n     deny mouse and keyboard access to the user.\n   \nfullScreenExclusive\n     Enter full-screen exclusive mode\n     Entering full-screen exclusive mode allows direct access to low-level\n     graphics card memory. This could be used to spoof the system, since the\n     program is in direct control of rendering. Depending on the\n     implementation, the security warning may not be shown for the windows\n     used to enter the full-screen exclusive mode (assuming that the\n     fullScreenExclusive permission has been granted to this\n     application). Note that this behavior does not mean that the\n     showWindowWithoutWarningBanner permission will be automatically\n     granted to the application which has the fullScreenExclusive\n     permission: non-full-screen windows will continue to be shown with the\n     security warning.\n   \nlistenToAllAWTEvents\n     Listen to all AWT events, system-wide\n     After adding an AWT event listener, malicious code may scan all AWT\n     events dispatched in the system, allowing it to read all user input (such\n     as passwords). Each AWT event listener is called from within the context\n     of that event queue's EventDispatchThread, so if the accessEventQueue\n     permission is also enabled, malicious code could modify the contents of\n     AWT event queues system-wide, causing the application or applet to\n     misbehave in an insecure manner.\n   \nreadDisplayPixels\n     Readback of pixels from the display screen\n     Interfaces such as the java.awt.Composite interface or the\n     java.awt.Robot class allow arbitrary code to examine pixels on the\n     display enable malicious code to snoop on the activities of the user.\n   \nreplaceKeyboardFocusManager\n     Sets the KeyboardFocusManager for a particular thread.\n     When SecurityManager is installed, the invoking thread must\n     be granted this permission in order to replace the current\n     KeyboardFocusManager. If permission is not granted, a\n     SecurityException will be thrown.\n   \nsetAppletStub\n     Setting the stub which implements Applet container services\n     Malicious code could set an applet's stub and result in unexpected\n     behavior or denial of service to an applet.\n   \nsetWindowAlwaysOnTop\n     Setting always-on-top property of the window:\n     Window.setAlwaysOnTop(boolean)\nThe malicious window might make itself look and behave like a real\n     full desktop, so that information entered by the unsuspecting user is\n     captured and subsequently misused\n   \nshowWindowWithoutWarningBanner\n     Display of a window without also displaying a banner warning that the\n     window was created by an applet\n     Without this warning, an applet may pop up windows without the user\n     knowing that they belong to an applet. Since users may make\n     security-sensitive decisions based on whether or not the window belongs\n     to an applet (entering a username and password into a dialog box, for\n     example), disabling this warning banner may allow applets to trick the\n     user into entering such information.\n   \ntoolkitModality\n     Creating TOOLKIT_MODAL\n     dialogs and setting the\n     TOOLKIT_EXCLUDE window\n     property.\n     When a toolkit-modal dialog is shown from an applet, it blocks all\n     other applets in the browser. When launching applications from Java Web\n     Start, its windows (such as the security dialog) may also be blocked by\n     toolkit-modal dialogs, shown from these applications.\n   \nwatchMousePointer\n     Getting the information about the mouse pointer position at any time\n     Constantly watching the mouse pointer, an applet can make guesses\n     about what the user is doing, i.e. moving the mouse to the lower left\n     corner of the screen most likely means that the user is about to launch\n     an application. If a virtual keypad is used so that keyboard is emulated\n     using the mouse, an applet may guess what is being typed.\n \n", "codes": ["public final class AWTPermission\nextends BasicPermission"], "fields": [], "methods": []}