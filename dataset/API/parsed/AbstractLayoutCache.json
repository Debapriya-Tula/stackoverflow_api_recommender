{"name": "Class AbstractLayoutCache", "module": "java.desktop", "package": "javax.swing.tree", "text": "Warning:\n Serialized objects of this class will not be compatible with\n future Swing releases. The current serialization support is\n appropriate for short term storage or RMI between applications running\n the same version of Swing.  As of 1.4, support for long term storage\n of all JavaBeans\u2122\n has been added to the java.beans package.\n Please see XMLEncoder.", "codes": ["public abstract class AbstractLayoutCache\nextends Object\nimplements RowMapper"], "fields": [{"field_name": "nodeDimensions", "field_sig": "protected\u00a0AbstractLayoutCache.NodeDimensions nodeDimensions", "description": "Object responsible for getting the size of a node."}, {"field_name": "treeModel", "field_sig": "protected\u00a0TreeModel treeModel", "description": "Model providing information."}, {"field_name": "treeSelectionModel", "field_sig": "protected\u00a0TreeSelectionModel treeSelectionModel", "description": "Selection model."}, {"field_name": "rootVisible", "field_sig": "protected\u00a0boolean rootVisible", "description": "True if the root node is displayed, false if its children are\n the highest visible nodes."}, {"field_name": "rowHeight", "field_sig": "protected\u00a0int rowHeight", "description": "Height to use for each row.  If this is <= 0 the renderer will be\n used to determine the height for each row."}], "methods": [{"method_name": "setNodeDimensions", "method_sig": "public void setNodeDimensions (AbstractLayoutCache.NodeDimensions nd)", "description": "Sets the renderer that is responsible for drawing nodes in the tree\n and which is therefore responsible for calculating the dimensions of\n individual nodes."}, {"method_name": "getNodeDimensions", "method_sig": "public AbstractLayoutCache.NodeDimensions getNodeDimensions()", "description": "Returns the object that renders nodes in the tree, and which is\n responsible for calculating the dimensions of individual nodes."}, {"method_name": "setModel", "method_sig": "public void setModel (TreeModel newModel)", "description": "Sets the TreeModel that will provide the data."}, {"method_name": "getModel", "method_sig": "public TreeModel getModel()", "description": "Returns the TreeModel that is providing the data."}, {"method_name": "setRootVisible", "method_sig": "@BeanProperty(description=\"Whether or not the root node from the TreeModel is visible.\")\npublic void setRootVisible (boolean rootVisible)", "description": "Determines whether or not the root node from\n the TreeModel is visible."}, {"method_name": "isRootVisible", "method_sig": "public boolean isRootVisible()", "description": "Returns true if the root node of the tree is displayed."}, {"method_name": "setRowHeight", "method_sig": "@BeanProperty(description=\"The height of each cell.\")\npublic void setRowHeight (int rowHeight)", "description": "Sets the height of each cell.  If the specified value\n is less than or equal to zero the current cell renderer is\n queried for each row's height."}, {"method_name": "getRowHeight", "method_sig": "public int getRowHeight()", "description": "Returns the height of each row.  If the returned value is less than\n or equal to 0 the height for each row is determined by the\n renderer."}, {"method_name": "setSelectionModel", "method_sig": "public void setSelectionModel (TreeSelectionModel newLSM)", "description": "Sets the TreeSelectionModel used to manage the\n selection to new LSM."}, {"method_name": "getSelectionModel", "method_sig": "public TreeSelectionModel getSelectionModel()", "description": "Returns the model used to maintain the selection."}, {"method_name": "getPreferredHeight", "method_sig": "public int getPreferredHeight()", "description": "Returns the preferred height."}, {"method_name": "getPreferredWidth", "method_sig": "public int getPreferredWidth (Rectangle bounds)", "description": "Returns the preferred width for the passed in region.\n The region is defined by the path closest to\n (bounds.x, bounds.y) and\n ends at bounds.height + bounds.y.\n If bounds is null,\n the preferred width for all the nodes\n will be returned (and this may be a VERY expensive\n computation)."}, {"method_name": "isExpanded", "method_sig": "public abstract boolean isExpanded (TreePath path)", "description": "Returns true if the value identified by row is currently expanded."}, {"method_name": "getBounds", "method_sig": "public abstract Rectangle getBounds (TreePath path,\n                                    Rectangle placeIn)", "description": "Returns a rectangle giving the bounds needed to draw path."}, {"method_name": "getPathForRow", "method_sig": "public abstract TreePath getPathForRow (int row)", "description": "Returns the path for passed in row.  If row is not visible\n null is returned."}, {"method_name": "getRowForPath", "method_sig": "public abstract int getRowForPath (TreePath path)", "description": "Returns the row that the last item identified in path is visible\n at.  Will return -1 if any of the elements in path are not\n currently visible."}, {"method_name": "getPathClosestTo", "method_sig": "public abstract TreePath getPathClosestTo (int x,\n                                          int y)", "description": "Returns the path to the node that is closest to x,y.  If\n there is nothing currently visible this will return null,\n otherwise it'll always return a valid path.\n If you need to test if the\n returned object is exactly at x, y you should get the bounds for\n the returned path and test x, y against that."}, {"method_name": "getVisiblePathsFrom", "method_sig": "public abstract Enumeration<TreePath> getVisiblePathsFrom (TreePath path)", "description": "Returns an Enumerator that increments over the visible\n paths starting at the passed in location. The ordering of the\n enumeration is based on how the paths are displayed.\n The first element of the returned enumeration will be path,\n unless it isn't visible,\n in which case null will be returned."}, {"method_name": "getVisibleChildCount", "method_sig": "public abstract int getVisibleChildCount (TreePath path)", "description": "Returns the number of visible children for row."}, {"method_name": "setExpandedState", "method_sig": "public abstract void setExpandedState (TreePath path,\n                                      boolean isExpanded)", "description": "Marks the path path expanded state to\n isExpanded."}, {"method_name": "getExpandedState", "method_sig": "public abstract boolean getExpandedState (TreePath path)", "description": "Returns true if the path is expanded, and visible."}, {"method_name": "getRowCount", "method_sig": "public abstract int getRowCount()", "description": "Number of rows being displayed."}, {"method_name": "invalidateSizes", "method_sig": "public abstract void invalidateSizes()", "description": "Informs the TreeState that it needs to recalculate\n all the sizes it is referencing."}, {"method_name": "invalidatePathBounds", "method_sig": "public abstract void invalidatePathBounds (TreePath path)", "description": "Instructs the LayoutCache that the bounds for\n path are invalid, and need to be updated."}, {"method_name": "treeNodesChanged", "method_sig": "public abstract void treeNodesChanged (TreeModelEvent e)", "description": "\n Invoked after a node (or a set of siblings) has changed in some\n way. The node(s) have not changed locations in the tree or\n altered their children arrays, but other attributes have\n changed and may affect presentation. Example: the name of a\n file has changed, but it is in the same location in the file\n system.\ne.path() returns the path the parent of the changed node(s).\ne.childIndices() returns the index(es) of the changed node(s)."}, {"method_name": "treeNodesInserted", "method_sig": "public abstract void treeNodesInserted (TreeModelEvent e)", "description": "Invoked after nodes have been inserted into the tree.\ne.path() returns the parent of the new nodes\ne.childIndices() returns the indices of the new nodes in\n ascending order."}, {"method_name": "treeNodesRemoved", "method_sig": "public abstract void treeNodesRemoved (TreeModelEvent e)", "description": "Invoked after nodes have been removed from the tree.  Note that\n if a subtree is removed from the tree, this method may only be\n invoked once for the root of the removed subtree, not once for\n each individual set of siblings removed.\ne.path() returns the former parent of the deleted nodes.\ne.childIndices() returns the indices the nodes had before they were deleted in ascending order."}, {"method_name": "treeStructureChanged", "method_sig": "public abstract void treeStructureChanged (TreeModelEvent e)", "description": "Invoked after the tree has drastically changed structure from a\n given node down.  If the path returned by e.getPath()\n is of length one and the first element does not identify the\n current root node the first element should become the new root\n of the tree.\ne.path() holds the path to the node.\ne.childIndices() returns null."}, {"method_name": "getRowsForPaths", "method_sig": "public int[] getRowsForPaths (TreePath[] paths)", "description": "Returns the rows that the TreePath instances in\n path are being displayed at.\n This method should return an array of the same length as that passed\n in, and if one of the TreePaths\n in path is not valid its entry in the array should\n be set to -1."}, {"method_name": "getNodeDimensions", "method_sig": "protected Rectangle getNodeDimensions (Object value,\n                                      int row,\n                                      int depth,\n                                      boolean expanded,\n                                      Rectangle placeIn)", "description": "Returns, by reference in placeIn,\n the size needed to represent value.\n If inPlace is null, a newly created\n Rectangle should be returned, otherwise the value\n should be placed in inPlace and returned. This will\n return null if there is no renderer."}, {"method_name": "isFixedRowHeight", "method_sig": "protected boolean isFixedRowHeight()", "description": "Returns true if the height of each row is a fixed size."}]}