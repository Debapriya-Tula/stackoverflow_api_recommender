{"name": "Class KeyStore", "module": "java.base", "package": "java.security", "text": "This class represents a storage facility for cryptographic\n keys and certificates.\n\n  A KeyStore manages different types of entries.\n Each type of entry implements the KeyStore.Entry interface.\n Three basic KeyStore.Entry implementations are provided:\n\n \nKeyStore.PrivateKeyEntry\n This type of entry holds a cryptographic PrivateKey,\n which is optionally stored in a protected format to prevent\n unauthorized access.  It is also accompanied by a certificate chain\n for the corresponding public key.\n\n  Private keys and certificate chains are used by a given entity for\n self-authentication. Applications for this authentication include software\n distribution organizations which sign JAR files as part of releasing\n and/or licensing software.\n\n KeyStore.SecretKeyEntry\n This type of entry holds a cryptographic SecretKey,\n which is optionally stored in a protected format to prevent\n unauthorized access.\n\n KeyStore.TrustedCertificateEntry\n This type of entry contains a single public key Certificate\n belonging to another party. It is called a trusted certificate\n because the keystore owner trusts that the public key in the certificate\n indeed belongs to the identity identified by the subject (owner)\n of the certificate.\n\n This type of entry can be used to authenticate other parties.\n \n Each entry in a keystore is identified by an \"alias\" string. In the\n case of private keys and their associated certificate chains, these strings\n distinguish among the different ways in which the entity may authenticate\n itself. For example, the entity may authenticate itself using different\n certificate authorities, or using different public key algorithms.\n\n  Whether aliases are case sensitive is implementation dependent. In order\n to avoid problems, it is recommended not to use aliases in a KeyStore that\n only differ in case.\n\n  Whether keystores are persistent, and the mechanisms used by the\n keystore if it is persistent, are not specified here. This allows\n use of a variety of techniques for protecting sensitive (e.g., private or\n secret) keys. Smart cards or other integrated cryptographic engines\n (SafeKeyper) are one option, and simpler mechanisms such as files may also\n be used (in a variety of formats).\n\n  Typical ways to request a KeyStore object include\n specifying an existing keystore file,\n relying on the default type and providing a specific keystore type.\n\n \nTo specify an existing keystore file:\n \n    // get keystore password\n    char[] password = getPassword();\n\n    // probe the keystore file and load the keystore entries\n    KeyStore ks = KeyStore.getInstance(new File(\"keyStoreName\"), password);\n\n The system will probe the specified file to determine its keystore type\n and return a keystore implementation with its entries already loaded.\n When this approach is used there is no need to call the keystore's\n load method.\n\n To rely on the default type:\n \n    KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n \n The system will return a keystore implementation for the default type.\n\n To provide a specific keystore type:\n \n      KeyStore ks = KeyStore.getInstance(\"JKS\");\n \n The system will return the most preferred implementation of the\n specified keystore type available in the environment.\n \n Before a keystore can be accessed, it must be\n loaded\n (unless it was already loaded during instantiation).\n \n    KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n\n    // get user password and file input stream\n    char[] password = getPassword();\n\n    try (FileInputStream fis = new FileInputStream(\"keyStoreName\")) {\n        ks.load(fis, password);\n    }\n \n\n To create an empty keystore using the above load method,\n pass null as the InputStream argument.\n\n  Once the keystore has been loaded, it is possible\n to read existing entries from the keystore, or to write new entries\n into the keystore:\n \n    KeyStore.ProtectionParameter protParam =\n        new KeyStore.PasswordProtection(password);\n\n    // get my private key\n    KeyStore.PrivateKeyEntry pkEntry = (KeyStore.PrivateKeyEntry)\n        ks.getEntry(\"privateKeyAlias\", protParam);\n    PrivateKey myPrivateKey = pkEntry.getPrivateKey();\n\n    // save my secret key\n    javax.crypto.SecretKey mySecretKey;\n    KeyStore.SecretKeyEntry skEntry =\n        new KeyStore.SecretKeyEntry(mySecretKey);\n    ks.setEntry(\"secretKeyAlias\", skEntry, protParam);\n\n    // store away the keystore\n    try (FileOutputStream fos = new FileOutputStream(\"newKeyStoreName\")) {\n        ks.store(fos, password);\n    }\n \n\n Note that although the same password may be used to\n load the keystore, to protect the private key entry,\n to protect the secret key entry, and to store the keystore\n (as is shown in the sample code above),\n different passwords or other protection parameters\n may also be used.\n\n  Every implementation of the Java platform is required to support\n the following standard KeyStore type:\n \nPKCS12\n\n This type is described in the \n KeyStore section of the\n Java Security Standard Algorithm Names Specification.\n Consult the release documentation for your implementation to see if any\n other types are supported.", "codes": ["public class KeyStore\nextends Object"], "fields": [], "methods": [{"method_name": "getInstance", "method_sig": "public static KeyStore getInstance (String type)\n                            throws KeyStoreException", "description": "Returns a keystore object of the specified type.\n\n  This method traverses the list of registered security Providers,\n starting with the most preferred Provider.\n A new KeyStore object encapsulating the\n KeyStoreSpi implementation from the first\n Provider that supports the specified type is returned.\n\n  Note that the list of registered providers may be retrieved via\n the Security.getProviders() method."}, {"method_name": "getInstance", "method_sig": "public static KeyStore getInstance (String type,\n                                   String provider)\n                            throws KeyStoreException,\n                                   NoSuchProviderException", "description": "Returns a keystore object of the specified type.\n\n  A new KeyStore object encapsulating the\n KeyStoreSpi implementation from the specified provider\n is returned.  The specified provider must be registered\n in the security provider list.\n\n  Note that the list of registered providers may be retrieved via\n the Security.getProviders() method."}, {"method_name": "getInstance", "method_sig": "public static KeyStore getInstance (String type,\n                                   Provider provider)\n                            throws KeyStoreException", "description": "Returns a keystore object of the specified type.\n\n  A new KeyStore object encapsulating the\n KeyStoreSpi implementation from the specified Provider\n object is returned.  Note that the specified Provider object\n does not have to be registered in the provider list."}, {"method_name": "getDefaultType", "method_sig": "public static final String getDefaultType()", "description": "Returns the default keystore type as specified by the\n keystore.type security property, or the string\n \"jks\" (acronym for \"Java keystore\")\n if no such property exists.\n\n The default keystore type can be used by applications that do not\n want to use a hard-coded keystore type when calling one of the\n getInstance methods, and want to provide a default keystore\n type in case a user does not specify its own.\n\n The default keystore type can be changed by setting the value of the\n keystore.type security property to the desired keystore type."}, {"method_name": "getProvider", "method_sig": "public final Provider getProvider()", "description": "Returns the provider of this keystore."}, {"method_name": "getType", "method_sig": "public final String getType()", "description": "Returns the type of this keystore."}, {"method_name": "getKey", "method_sig": "public final Key getKey (String alias,\n                        char[] password)\n                 throws KeyStoreException,\n                        NoSuchAlgorithmException,\n                        UnrecoverableKeyException", "description": "Returns the key associated with the given alias, using the given\n password to recover it.  The key must have been associated with\n the alias by a call to setKeyEntry,\n or by a call to setEntry with a\n PrivateKeyEntry or SecretKeyEntry."}, {"method_name": "getCertificateChain", "method_sig": "public final Certificate[] getCertificateChain (String alias)\n                                        throws KeyStoreException", "description": "Returns the certificate chain associated with the given alias.\n The certificate chain must have been associated with the alias\n by a call to setKeyEntry,\n or by a call to setEntry with a\n PrivateKeyEntry."}, {"method_name": "getCertificate", "method_sig": "public final Certificate getCertificate (String alias)\n                                 throws KeyStoreException", "description": "Returns the certificate associated with the given alias.\n\n  If the given alias name identifies an entry\n created by a call to setCertificateEntry,\n or created by a call to setEntry with a\n TrustedCertificateEntry,\n then the trusted certificate contained in that entry is returned.\n\n  If the given alias name identifies an entry\n created by a call to setKeyEntry,\n or created by a call to setEntry with a\n PrivateKeyEntry,\n then the first element of the certificate chain in that entry\n is returned."}, {"method_name": "getCreationDate", "method_sig": "public final Date getCreationDate (String alias)\n                           throws KeyStoreException", "description": "Returns the creation date of the entry identified by the given alias."}, {"method_name": "setKeyEntry", "method_sig": "public final void setKeyEntry (String alias,\n                              Key key,\n                              char[] password,\n                              Certificate[] chain)\n                       throws KeyStoreException", "description": "Assigns the given key to the given alias, protecting it with the given\n password.\n\n If the given key is of type java.security.PrivateKey,\n it must be accompanied by a certificate chain certifying the\n corresponding public key.\n\n If the given alias already exists, the keystore information\n associated with it is overridden by the given key (and possibly\n certificate chain)."}, {"method_name": "setKeyEntry", "method_sig": "public final void setKeyEntry (String alias,\n                              byte[] key,\n                              Certificate[] chain)\n                       throws KeyStoreException", "description": "Assigns the given key (that has already been protected) to the given\n alias.\n\n If the protected key is of type\n java.security.PrivateKey, it must be accompanied by a\n certificate chain certifying the corresponding public key. If the\n underlying keystore implementation is of type jks,\n key must be encoded as an\n EncryptedPrivateKeyInfo as defined in the PKCS #8 standard.\n\n If the given alias already exists, the keystore information\n associated with it is overridden by the given key (and possibly\n certificate chain)."}, {"method_name": "setCertificateEntry", "method_sig": "public final void setCertificateEntry (String alias,\n                                      Certificate cert)\n                               throws KeyStoreException", "description": "Assigns the given trusted certificate to the given alias.\n\n  If the given alias identifies an existing entry\n created by a call to setCertificateEntry,\n or created by a call to setEntry with a\n TrustedCertificateEntry,\n the trusted certificate in the existing entry\n is overridden by the given certificate."}, {"method_name": "deleteEntry", "method_sig": "public final void deleteEntry (String alias)\n                       throws KeyStoreException", "description": "Deletes the entry identified by the given alias from this keystore."}, {"method_name": "aliases", "method_sig": "public final Enumeration<String> aliases()\n                                  throws KeyStoreException", "description": "Lists all the alias names of this keystore."}, {"method_name": "containsAlias", "method_sig": "public final boolean containsAlias (String alias)\n                            throws KeyStoreException", "description": "Checks if the given alias exists in this keystore."}, {"method_name": "size", "method_sig": "public final int size()\n               throws KeyStoreException", "description": "Retrieves the number of entries in this keystore."}, {"method_name": "isKeyEntry", "method_sig": "public final boolean isKeyEntry (String alias)\n                         throws KeyStoreException", "description": "Returns true if the entry identified by the given alias\n was created by a call to setKeyEntry,\n or created by a call to setEntry with a\n PrivateKeyEntry or a SecretKeyEntry."}, {"method_name": "isCertificateEntry", "method_sig": "public final boolean isCertificateEntry (String alias)\n                                 throws KeyStoreException", "description": "Returns true if the entry identified by the given alias\n was created by a call to setCertificateEntry,\n or created by a call to setEntry with a\n TrustedCertificateEntry."}, {"method_name": "getCertificateAlias", "method_sig": "public final String getCertificateAlias (Certificate cert)\n                                 throws KeyStoreException", "description": "Returns the (alias) name of the first keystore entry whose certificate\n matches the given certificate.\n\n  This method attempts to match the given certificate with each\n keystore entry. If the entry being considered was\n created by a call to setCertificateEntry,\n or created by a call to setEntry with a\n TrustedCertificateEntry,\n then the given certificate is compared to that entry's certificate.\n\n  If the entry being considered was\n created by a call to setKeyEntry,\n or created by a call to setEntry with a\n PrivateKeyEntry,\n then the given certificate is compared to the first\n element of that entry's certificate chain."}, {"method_name": "store", "method_sig": "public final void store (OutputStream stream,\n                        char[] password)\n                 throws KeyStoreException,\n                        IOException,\n                        NoSuchAlgorithmException,\n                        CertificateException", "description": "Stores this keystore to the given output stream, and protects its\n integrity with the given password."}, {"method_name": "store", "method_sig": "public final void store (KeyStore.LoadStoreParameter param)\n                 throws KeyStoreException,\n                        IOException,\n                        NoSuchAlgorithmException,\n                        CertificateException", "description": "Stores this keystore using the given LoadStoreParameter."}, {"method_name": "load", "method_sig": "public final void load (InputStream stream,\n                       char[] password)\n                throws IOException,\n                       NoSuchAlgorithmException,\n                       CertificateException", "description": "Loads this KeyStore from the given input stream.\n\n A password may be given to unlock the keystore\n (e.g. the keystore resides on a hardware token device),\n or to check the integrity of the keystore data.\n If a password is not given for integrity checking,\n then integrity checking is not performed.\n\n In order to create an empty keystore, or if the keystore cannot\n be initialized from a stream, pass null\n as the stream argument.\n\n  Note that if this keystore has already been loaded, it is\n reinitialized and loaded again from the given input stream."}, {"method_name": "load", "method_sig": "public final void load (KeyStore.LoadStoreParameter param)\n                throws IOException,\n                       NoSuchAlgorithmException,\n                       CertificateException", "description": "Loads this keystore using the given LoadStoreParameter.\n\n  Note that if this KeyStore has already been loaded, it is\n reinitialized and loaded again from the given parameter."}, {"method_name": "getEntry", "method_sig": "public final KeyStore.Entry getEntry (String alias,\n                                     KeyStore.ProtectionParameter protParam)\n                              throws NoSuchAlgorithmException,\n                                     UnrecoverableEntryException,\n                                     KeyStoreException", "description": "Gets a keystore Entry for the specified alias\n with the specified protection parameter."}, {"method_name": "setEntry", "method_sig": "public final void setEntry (String alias,\n                           KeyStore.Entry entry,\n                           KeyStore.ProtectionParameter protParam)\n                    throws KeyStoreException", "description": "Saves a keystore Entry under the specified alias.\n The protection parameter is used to protect the\n Entry.\n\n  If an entry already exists for the specified alias,\n it is overridden."}, {"method_name": "entryInstanceOf", "method_sig": "public final boolean entryInstanceOf (String alias,\n                                     Class<? extends KeyStore.Entry> entryClass)\n                              throws KeyStoreException", "description": "Determines if the keystore Entry for the specified\n alias is an instance or subclass of the specified\n entryClass."}, {"method_name": "getInstance", "method_sig": "public static final KeyStore getInstance (File file,\n                                         char[] password)\n                                  throws KeyStoreException,\n                                         IOException,\n                                         NoSuchAlgorithmException,\n                                         CertificateException", "description": "Returns a loaded keystore object of the appropriate keystore type.\n First the keystore type is determined by probing the specified file.\n Then a keystore object is instantiated and loaded using the data from\n that file.\n\n \n A password may be given to unlock the keystore\n (e.g. the keystore resides on a hardware token device),\n or to check the integrity of the keystore data.\n If a password is not given for integrity checking,\n then integrity checking is not performed.\n\n \n This method traverses the list of registered security\n providers, starting with the most\n preferred Provider.\n For each KeyStoreSpi implementation supported by a\n Provider, it invokes the engineProbe method to\n determine if it supports the specified keystore.\n A new KeyStore object is returned that encapsulates the KeyStoreSpi\n implementation from the first Provider that supports the specified file.\n\n  Note that the list of registered providers may be retrieved via\n the Security.getProviders() method."}, {"method_name": "getInstance", "method_sig": "public static final KeyStore getInstance (File file,\n                                         KeyStore.LoadStoreParameter param)\n                                  throws KeyStoreException,\n                                         IOException,\n                                         NoSuchAlgorithmException,\n                                         CertificateException", "description": "Returns a loaded keystore object of the appropriate keystore type.\n First the keystore type is determined by probing the specified file.\n Then a keystore object is instantiated and loaded using the data from\n that file.\n A LoadStoreParameter may be supplied which specifies how to\n unlock the keystore data or perform an integrity check.\n\n \n This method traverses the list of registered security providers, starting with the most preferred Provider.\n For each KeyStoreSpi implementation supported by a\n Provider, it invokes the engineProbe method to\n determine if it supports the specified keystore.\n A new KeyStore object is returned that encapsulates the KeyStoreSpi\n implementation from the first Provider that supports the specified file.\n\n  Note that the list of registered providers may be retrieved via\n the Security.getProviders() method."}]}