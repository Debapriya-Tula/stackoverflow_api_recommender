{"name": "Class LayerUI<V extends Component>", "module": "java.desktop", "package": "javax.swing.plaf", "text": "The base class for all JLayer's UI delegates.\n \npaint(java.awt.Graphics, javax.swing.JComponent) method performs the\n painting of the JLayer\n and eventDispatched(AWTEvent, JLayer) method is notified\n about any AWTEvents which have been generated by a JLayer\n or any of its subcomponents.\n \n The LayerUI differs from the UI delegates of the other components,\n because it is LookAndFeel independent and is not updated by default when\n the system LookAndFeel is changed.\n \n The subclasses of LayerUI can either be stateless and shareable\n by multiple JLayers or not shareable.", "codes": ["public class LayerUI<V extends Component>\nextends ComponentUI\nimplements Serializable"], "fields": [], "methods": [{"method_name": "paint", "method_sig": "public void paint (Graphics g,\n                  JComponent c)", "description": "Paints the specified component.\n Subclasses should override this method and use\n the specified Graphics object to\n render the content of the component.\n \n The default implementation paints the passed component as is."}, {"method_name": "eventDispatched", "method_sig": "public void eventDispatched (AWTEvent e,\n                            JLayer<? extends V> l)", "description": "Processes AWTEvents for JLayer\n and all its descendants to this LayerUI instance.\n \n To enable the AWTEvents of a particular type,\n you call JLayer.setLayerEventMask(long)\n in installUI(javax.swing.JComponent)\n and set the layer event mask to 0\n in uninstallUI(javax.swing.JComponent) after that.\n By default this  method calls the appropriate\n process<event\u00a0type>Event\n method for the given class of event.\n \nNote: Events are processed only for displayable JLayers."}, {"method_name": "processComponentEvent", "method_sig": "protected void processComponentEvent (ComponentEvent e,\n                                     JLayer<? extends V> l)", "description": "Processes component events occurring on the JLayer\n or any of its subcomponents.\n \n This method is not called unless component events are\n enabled for the JLayer objects, this LayerUI is set to.\n Component events are enabled in the overridden installUI(javax.swing.JComponent) method\n and should be disabled in the uninstallUI(javax.swing.JComponent) method after that.\n \n public void installUI(JComponent c) {\n    super.installUI(c);\n    JLayer l = (JLayer) c;\n    l.setLayerEventMask(AWTEvent.COMPONENT_EVENT_MASK);\n }\n\n public void uninstallUI(JComponent c) {\n     super.uninstallUI(c);\n     JLayer l = (JLayer) c;\n     l.setLayerEventMask(0);\n }\n "}, {"method_name": "processFocusEvent", "method_sig": "protected void processFocusEvent (FocusEvent e,\n                                 JLayer<? extends V> l)", "description": "Processes focus events occurring on the JLayer\n or any of its subcomponents.\n \n This method is not called unless focus events are\n enabled for the JLayer objects, this LayerUI is set to.\n Focus events are enabled in the overridden installUI(javax.swing.JComponent) method\n and should be disabled in the uninstallUI(javax.swing.JComponent) method after that.\n \n public void installUI(JComponent c) {\n    super.installUI(c);\n    JLayer l = (JLayer) c;\n    l.setLayerEventMask(AWTEvent.FOCUS_EVENT_MASK);\n }\n\n public void uninstallUI(JComponent c) {\n     super.uninstallUI(c);\n     JLayer l = (JLayer) c;\n     l.setLayerEventMask(0);\n }\n "}, {"method_name": "processKeyEvent", "method_sig": "protected void processKeyEvent (KeyEvent e,\n                               JLayer<? extends V> l)", "description": "Processes key events occurring on the JLayer\n or any of its subcomponents.\n \n This method is not called unless key events are\n enabled for the JLayer objects, this LayerUI is set to.\n Key events are enabled in the overridden installUI(javax.swing.JComponent) method\n and should be disabled in the uninstallUI(javax.swing.JComponent) method after that.\n \n public void installUI(JComponent c) {\n    super.installUI(c);\n    JLayer l = (JLayer) c;\n    l.setLayerEventMask(AWTEvent.KEY_EVENT_MASK);\n }\n\n public void uninstallUI(JComponent c) {\n     super.uninstallUI(c);\n     JLayer l = (JLayer) c;\n     l.setLayerEventMask(0);\n }\n "}, {"method_name": "processMouseEvent", "method_sig": "protected void processMouseEvent (MouseEvent e,\n                                 JLayer<? extends V> l)", "description": "Processes mouse events occurring on the JLayer\n or any of its subcomponents.\n \n This method is not called unless mouse events are\n enabled for the JLayer objects, this LayerUI is set to.\n Mouse events are enabled in the overridden installUI(javax.swing.JComponent) method\n and should be disabled in the uninstallUI(javax.swing.JComponent) method after that.\n \n public void installUI(JComponent c) {\n    super.installUI(c);\n    JLayer l = (JLayer) c;\n    l.setLayerEventMask(AWTEvent.MOUSE_EVENT_MASK);\n }\n\n public void uninstallUI(JComponent c) {\n     super.uninstallUI(c);\n     JLayer l = (JLayer) c;\n     l.setLayerEventMask(0);\n }\n "}, {"method_name": "processMouseMotionEvent", "method_sig": "protected void processMouseMotionEvent (MouseEvent e,\n                                       JLayer<? extends V> l)", "description": "Processes mouse motion event occurring on the JLayer\n or any of its subcomponents.\n \n This method is not called unless mouse motion events are\n enabled for the JLayer objects, this LayerUI is set to.\n Mouse motion events are enabled in the overridden installUI(javax.swing.JComponent) method\n and should be disabled in the uninstallUI(javax.swing.JComponent) method after that.\n \n public void installUI(JComponent c) {\n    super.installUI(c);\n    JLayer l = (JLayer) c;\n    l.setLayerEventMask(AWTEvent.MOUSE_MOTION_EVENT_MASK);\n }\n\n public void uninstallUI(JComponent c) {\n     super.uninstallUI(c);\n     JLayer l = (JLayer) c;\n     l.setLayerEventMask(0);\n }\n "}, {"method_name": "processMouseWheelEvent", "method_sig": "protected void processMouseWheelEvent (MouseWheelEvent e,\n                                      JLayer<? extends V> l)", "description": "Processes mouse wheel event occurring on the JLayer\n or any of its subcomponents.\n \n This method is not called unless mouse wheel events are\n enabled for the JLayer objects, this LayerUI is set to.\n Mouse wheel events are enabled in the overridden installUI(javax.swing.JComponent) method\n and should be disabled in the uninstallUI(javax.swing.JComponent) method after that.\n \n public void installUI(JComponent c) {\n    super.installUI(c);\n    JLayer l = (JLayer) c;\n    l.setLayerEventMask(AWTEvent.MOUSE_WHEEL_EVENT_MASK);\n }\n\n public void uninstallUI(JComponent c) {\n     super.uninstallUI(c);\n     JLayer l = (JLayer) c;\n     l.setLayerEventMask(0);\n }\n "}, {"method_name": "processInputMethodEvent", "method_sig": "protected void processInputMethodEvent (InputMethodEvent e,\n                                       JLayer<? extends V> l)", "description": "Processes input event occurring on the JLayer\n or any of its subcomponents.\n \n This method is not called unless input events are\n enabled for the JLayer objects, this LayerUI is set to.\n Input events are enabled in the overridden installUI(javax.swing.JComponent) method\n and should be disabled in the uninstallUI(javax.swing.JComponent) method after that.\n \n public void installUI(JComponent c) {\n    super.installUI(c);\n    JLayer l = (JLayer) c;\n    l.setLayerEventMask(AWTEvent.INPUT_METHOD_EVENT_MASK);\n }\n\n public void uninstallUI(JComponent c) {\n     super.uninstallUI(c);\n     JLayer l = (JLayer) c;\n     l.setLayerEventMask(0);\n }\n "}, {"method_name": "processHierarchyEvent", "method_sig": "protected void processHierarchyEvent (HierarchyEvent e,\n                                     JLayer<? extends V> l)", "description": "Processes hierarchy event occurring on the JLayer\n or any of its subcomponents.\n \n This method is not called unless hierarchy events are\n enabled for the JLayer objects, this LayerUI is set to.\n Hierarchy events are enabled in the overridden installUI(javax.swing.JComponent) method\n and should be disabled in the uninstallUI(javax.swing.JComponent) method after that.\n \n public void installUI(JComponent c) {\n    super.installUI(c);\n    JLayer l = (JLayer) c;\n    l.setLayerEventMask(AWTEvent.HIERARCHY_EVENT_MASK);\n }\n\n public void uninstallUI(JComponent c) {\n     super.uninstallUI(c);\n     JLayer l = (JLayer) c;\n     l.setLayerEventMask(0);\n }\n "}, {"method_name": "processHierarchyBoundsEvent", "method_sig": "protected void processHierarchyBoundsEvent (HierarchyEvent e,\n                                           JLayer<? extends V> l)", "description": "Processes hierarchy bounds event occurring on the JLayer\n or any of its subcomponents.\n \n This method is not called unless hierarchy bounds events are\n enabled for the JLayer objects, this LayerUI is set to.\n Hierarchy bounds events are enabled in the overridden installUI(javax.swing.JComponent)\n method and should be disabled in the uninstallUI(javax.swing.JComponent) method after that.\n \n public void installUI(JComponent c) {\n    super.installUI(c);\n    JLayer l = (JLayer) c;\n    l.setLayerEventMask(AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK);\n }\n\n public void uninstallUI(JComponent c) {\n     super.uninstallUI(c);\n     JLayer l = (JLayer) c;\n     l.setLayerEventMask(0);\n }\n "}, {"method_name": "updateUI", "method_sig": "public void updateUI (JLayer<? extends V> l)", "description": "Invoked when JLayer.updateUI() is called\n by the JLayer this LayerUI is set to."}, {"method_name": "installUI", "method_sig": "public void installUI (JComponent c)", "description": "Configures the JLayer this LayerUI is set to.\n The default implementation registers the passed JLayer component\n as a PropertyChangeListener for the property changes of this LayerUI."}, {"method_name": "uninstallUI", "method_sig": "public void uninstallUI (JComponent c)", "description": "Reverses the configuration which was previously set\n in the installUI(JComponent) method.\n The default implementation unregisters the passed JLayer component\n as a PropertyChangeListener for the property changes of this LayerUI."}, {"method_name": "addPropertyChangeListener", "method_sig": "public void addPropertyChangeListener (PropertyChangeListener listener)", "description": "Adds a PropertyChangeListener to the listener list. The listener is\n registered for all bound properties of this class.\n \n If listener is null,\n no exception is thrown and no action is performed."}, {"method_name": "removePropertyChangeListener", "method_sig": "public void removePropertyChangeListener (PropertyChangeListener listener)", "description": "Removes a PropertyChangeListener from the listener list. This method\n should be used to remove PropertyChangeListeners that were registered\n for all bound properties of this class.\n \n If listener is null,\n no exception is thrown and no action is performed."}, {"method_name": "getPropertyChangeListeners", "method_sig": "public PropertyChangeListener[] getPropertyChangeListeners()", "description": "Returns an array of all the property change listeners\n registered on this component."}, {"method_name": "addPropertyChangeListener", "method_sig": "public void addPropertyChangeListener (String propertyName,\n                                      PropertyChangeListener listener)", "description": "Adds a PropertyChangeListener to the listener list for a specific\n property.\n \n If propertyName or listener is null,\n no exception is thrown and no action is taken."}, {"method_name": "removePropertyChangeListener", "method_sig": "public void removePropertyChangeListener (String propertyName,\n                                         PropertyChangeListener listener)", "description": "Removes a PropertyChangeListener from the listener\n list for a specific property. This method should be used to remove\n PropertyChangeListeners\n that were registered for a specific bound property.\n \n If propertyName or listener is null,\n no exception is thrown and no action is taken."}, {"method_name": "getPropertyChangeListeners", "method_sig": "public PropertyChangeListener[] getPropertyChangeListeners (String propertyName)", "description": "Returns an array of all the listeners which have been associated\n with the named property."}, {"method_name": "firePropertyChange", "method_sig": "protected void firePropertyChange (String propertyName,\n                                  Object oldValue,\n                                  Object newValue)", "description": "Support for reporting bound property changes for Object properties.\n This method can be called when a bound property has changed and it will\n send the appropriate PropertyChangeEvent to any registered\n PropertyChangeListeners."}, {"method_name": "applyPropertyChange", "method_sig": "public void applyPropertyChange (PropertyChangeEvent evt,\n                                JLayer<? extends V> l)", "description": "Notifies the LayerUI when any of its property are changed\n and enables updating every JLayer\n this LayerUI instance is set to."}, {"method_name": "getBaseline", "method_sig": "public int getBaseline (JComponent c,\n                       int width,\n                       int height)", "description": "If the JLayer's view component is not null,\n this calls the view's getBaseline() method.\n Otherwise, the default implementation is called."}, {"method_name": "getBaselineResizeBehavior", "method_sig": "public Component.BaselineResizeBehavior getBaselineResizeBehavior (JComponent c)", "description": "If the JLayer's view component is not null,\n this returns the result of the view's getBaselineResizeBehavior() method.\n Otherwise, the default implementation is called."}, {"method_name": "doLayout", "method_sig": "public void doLayout (JLayer<? extends V> l)", "description": "Causes the passed instance of JLayer to lay out its components."}, {"method_name": "getPreferredSize", "method_sig": "public Dimension getPreferredSize (JComponent c)", "description": "If the JLayer's view component is not null,\n this returns the result of  the view's getPreferredSize() method.\n Otherwise, the default implementation is used."}, {"method_name": "getMinimumSize", "method_sig": "public Dimension getMinimumSize (JComponent c)", "description": "If the JLayer's view component is not null,\n this returns the result of  the view's getMinimalSize() method.\n Otherwise, the default implementation is used."}, {"method_name": "getMaximumSize", "method_sig": "public Dimension getMaximumSize (JComponent c)", "description": "If the JLayer's view component is not null,\n this returns the result of  the view's getMaximumSize() method.\n Otherwise, the default implementation is used."}, {"method_name": "paintImmediately", "method_sig": "public void paintImmediately (int x,\n                             int y,\n                             int width,\n                             int height,\n                             JLayer<? extends V> l)", "description": "Paints the specified region in the JLayer this LayerUI is set to, immediately.\n \n This method is to be overridden when the dirty region needs to be changed.\n The default implementation delegates its functionality to JComponent.paintImmediately(int, int, int, int)."}, {"method_name": "imageUpdate", "method_sig": "public boolean imageUpdate (Image img,\n                           int infoflags,\n                           int x,\n                           int y,\n                           int w,\n                           int h,\n                           JLayer<? extends V> l)", "description": "Delegates its functionality to the default implementation of the JLayer.imageUpdate method\n which is inherited from JLayer's base classes.\n \n This method is to be overridden instead of JLayer.imageUpdate.\n \nNote: This method is usually called not on the Event Dispatching Thread."}]}