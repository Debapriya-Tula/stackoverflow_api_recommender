{"name": "Class LoginContext", "module": "java.base", "package": "javax.security.auth.login", "text": " The LoginContext class describes the basic methods used\n to authenticate Subjects and provides a way to develop an\n application independent of the underlying authentication technology.\n A Configuration specifies the authentication technology, or\n LoginModule, to be used with a particular application.\n Different LoginModules can be plugged in under an application\n without requiring any modifications to the application itself.\n\n  In addition to supporting pluggable authentication, this class\n also supports the notion of stacked authentication.\n Applications may be configured to use more than one\n LoginModule.  For example, one could\n configure both a Kerberos LoginModule and a smart card\n LoginModule under an application.\n\n  A typical caller instantiates a LoginContext with\n a name and a CallbackHandler.\n LoginContext uses the name as the index into a\n Configuration to determine which LoginModules should be used,\n and which ones must succeed in order for the overall authentication to\n succeed.  The CallbackHandler is passed to the underlying\n LoginModules so they may communicate and interact with users\n (prompting for a username and password via a graphical user interface,\n for example).\n\n  Once the caller has instantiated a LoginContext,\n it invokes the login method to authenticate\n a Subject.  The login method invokes\n the configured modules to perform their respective types of authentication\n (username/password, smart card pin verification, etc.).\n Note that the LoginModules will not attempt authentication retries nor\n introduce delays if the authentication fails.\n Such tasks belong to the LoginContext caller.\n\n  If the login method returns without\n throwing an exception, then the overall authentication succeeded.\n The caller can then retrieve\n the newly authenticated Subject by invoking the\n getSubject method.  Principals and Credentials associated\n with the Subject may be retrieved by invoking the Subject's\n respective getPrincipals, getPublicCredentials,\n and getPrivateCredentials methods.\n\n  To logout the Subject, the caller calls\n the logout method.  As with the login\n method, this logout method invokes the logout\n method for the configured modules.\n\n  A LoginContext should not be used to authenticate\n more than one Subject.  A separate LoginContext\n should be used to authenticate each different Subject.\n\n  The following documentation applies to all LoginContext constructors:\n \n Subject\n\n If the constructor has a Subject\n input parameter, the LoginContext uses the caller-specified\n Subject object.\n\n  If the caller specifies a null Subject\n and a null value is permitted,\n the LoginContext instantiates a new Subject.\n\n  If the constructor does not have a Subject\n input parameter, the LoginContext instantiates a new Subject.\n \n Configuration\n\n If the constructor has a Configuration\n input parameter and the caller specifies a non-null Configuration,\n the LoginContext uses the caller-specified Configuration.\n \n If the constructor does not have a Configuration\n input parameter, or if the caller specifies a null\n Configuration object, the constructor uses the following call to\n get the installed Configuration:\n \n      config = Configuration.getConfiguration();\n \n For both cases,\n the name argument given to the constructor is passed to the\n Configuration.getAppConfigurationEntry method.\n If the Configuration has no entries for the specified name,\n then the LoginContext calls\n getAppConfigurationEntry with the name, \"other\"\n (the default entry name).  If there is no entry for \"other\",\n then a LoginException is thrown.\n\n  When LoginContext uses the installed Configuration, the caller\n requires the createLoginContext.name and possibly\n createLoginContext.other AuthPermissions. Furthermore, the\n LoginContext will invoke configured modules from within an\n AccessController.doPrivileged call so that modules that\n perform security-sensitive tasks (such as connecting to remote hosts,\n and updating the Subject) will require the respective permissions, but\n the callers of the LoginContext will not require those permissions.\n\n  When LoginContext uses a caller-specified Configuration, the caller\n does not require any createLoginContext AuthPermission.  The LoginContext\n saves the AccessControlContext for the caller,\n and invokes the configured modules from within an\n AccessController.doPrivileged call constrained by that context.\n This means the caller context (stored when the LoginContext was created)\n must have sufficient permissions to perform any security-sensitive tasks\n that the modules may perform.\n \n CallbackHandler\n\n If the constructor has a CallbackHandler\n input parameter, the LoginContext uses the caller-specified\n CallbackHandler object.\n\n  If the constructor does not have a CallbackHandler\n input parameter, or if the caller specifies a null\n CallbackHandler object (and a null value is permitted),\n the LoginContext queries the\n auth.login.defaultCallbackHandler security property for the\n fully qualified class name of a default handler\n implementation. If the security property is not set,\n then the underlying modules will not have a\n CallbackHandler for use in communicating\n with users.  The caller thus assumes that the configured\n modules have alternative means for authenticating the user.\n\n\n  When the LoginContext uses the installed Configuration (instead of\n a caller-specified Configuration, see above),\n then this LoginContext must wrap any\n caller-specified or default CallbackHandler implementation\n in a new CallbackHandler implementation\n whose handle method implementation invokes the\n specified CallbackHandler's handle method in a\n java.security.AccessController.doPrivileged call\n constrained by the caller's current AccessControlContext.\n \n", "codes": ["public class LoginContext\nextends Object"], "fields": [], "methods": [{"method_name": "login", "method_sig": "public void login()\n           throws LoginException", "description": "Perform the authentication.\n\n  This method invokes the login method for each\n LoginModule configured for the name specified to the\n LoginContext constructor, as determined by the login\n Configuration.  Each LoginModule\n then performs its respective type of authentication\n (username/password, smart card pin verification, etc.).\n\n  This method completes a 2-phase authentication process by\n calling each configured LoginModule's commit method\n if the overall authentication succeeded (the relevant REQUIRED,\n REQUISITE, SUFFICIENT, and OPTIONAL LoginModules succeeded),\n or by calling each configured LoginModule's abort method\n if the overall authentication failed.  If authentication succeeded,\n each successful LoginModule's commit method associates\n the relevant Principals and Credentials with the Subject.\n If authentication failed, each LoginModule's abort method\n removes/destroys any previously stored state.\n\n  If the commit phase of the authentication process\n fails, then the overall authentication fails and this method\n invokes the abort method for each configured\n LoginModule.\n\n  If the abort phase\n fails for any reason, then this method propagates the\n original exception thrown either during the login phase\n or the commit phase.  In either case, the overall\n authentication fails.\n\n  In the case where multiple LoginModules fail,\n this method propagates the exception raised by the first\n LoginModule which failed.\n\n  Note that if this method enters the abort phase\n (either the login or commit phase failed),\n this method invokes all LoginModules configured for the\n application regardless of their respective Configuration\n flag parameters.  Essentially this means that Requisite\n and Sufficient semantics are ignored during the\n abort phase.  This guarantees that proper cleanup\n and state restoration can take place."}, {"method_name": "logout", "method_sig": "public void logout()\n            throws LoginException", "description": "Logout the Subject.\n\n  This method invokes the logout method for each\n LoginModule configured for this LoginContext.\n Each LoginModule performs its respective logout procedure\n which may include removing/destroying\n Principal and Credential information\n from the Subject and state cleanup.\n\n  Note that this method invokes all LoginModules configured for the\n application regardless of their respective\n Configuration flag parameters.  Essentially this means\n that Requisite and Sufficient semantics are\n ignored for this method.  This guarantees that proper cleanup\n and state restoration can take place."}, {"method_name": "getSubject", "method_sig": "public Subject getSubject()", "description": "Return the authenticated Subject."}]}