{"name": "Enum ChronoField", "module": "java.base", "package": "java.time.temporal", "text": "A standard set of fields.\n \n This set of fields provide field-based access to manipulate a date, time or date-time.\n The standard set of fields can be extended by implementing TemporalField.\n \n These fields are intended to be applicable in multiple calendar systems.\n For example, most non-ISO calendar systems define dates as a year, month and day,\n just with slightly different rules.\n The documentation of each field explains how it operates.", "codes": ["public enum ChronoField\nextends Enum<ChronoField>\nimplements TemporalField"], "fields": [], "methods": [{"method_name": "values", "method_sig": "public static ChronoField[] values()", "description": "Returns an array containing the constants of this enum type, in\nthe order they are declared. This method may be used to iterate\nover the constants as follows:\n\nfor (ChronoField c : ChronoField.values())\n\u00a0   System.out.println(c);\n"}, {"method_name": "valueOf", "method_sig": "public static ChronoField valueOf (String name)", "description": "Returns the enum constant of this type with the specified name.\nThe string must match exactly an identifier used to declare an\nenum constant in this type.  (Extraneous whitespace characters are \nnot permitted.)"}, {"method_name": "range", "method_sig": "public ValueRange range()", "description": "Gets the range of valid values for the field.\n \n All fields can be expressed as a long integer.\n This method returns an object that describes the valid range for that value.\n \n This method returns the range of the field in the ISO-8601 calendar system.\n This range may be incorrect for other calendar systems.\n Use Chronology.range(ChronoField) to access the correct range\n for a different calendar system.\n \n Note that the result only describes the minimum and maximum valid values\n and it is important not to read too much into them. For example, there\n could be values within the range that are invalid for the field."}, {"method_name": "isDateBased", "method_sig": "public boolean isDateBased()", "description": "Checks if this field represents a component of a date.\n \n Fields from day-of-week to era are date-based."}, {"method_name": "isTimeBased", "method_sig": "public boolean isTimeBased()", "description": "Checks if this field represents a component of a time.\n \n Fields from nano-of-second to am-pm-of-day are time-based."}, {"method_name": "checkValidValue", "method_sig": "public long checkValidValue (long value)", "description": "Checks that the specified value is valid for this field.\n \n This validates that the value is within the outer range of valid values\n returned by range().\n \n This method checks against the range of the field in the ISO-8601 calendar system.\n This range may be incorrect for other calendar systems.\n Use Chronology.range(ChronoField) to access the correct range\n for a different calendar system."}, {"method_name": "checkValidIntValue", "method_sig": "public int checkValidIntValue (long value)", "description": "Checks that the specified value is valid and fits in an int.\n \n This validates that the value is within the outer range of valid values\n returned by range().\n It also checks that all valid values are within the bounds of an int.\n \n This method checks against the range of the field in the ISO-8601 calendar system.\n This range may be incorrect for other calendar systems.\n Use Chronology.range(ChronoField) to access the correct range\n for a different calendar system."}]}