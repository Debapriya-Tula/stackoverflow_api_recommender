{"name": "Class ModuleDescriptor.Requires", "module": "java.base", "package": "java.lang.module", "text": " A dependence upon a module ", "codes": ["public static final class ModuleDescriptor.Requires\nextends Object\nimplements Comparable<ModuleDescriptor.Requires>"], "fields": [], "methods": [{"method_name": "modifiers", "method_sig": "public Set<ModuleDescriptor.Requires.Modifier> modifiers()", "description": "Returns the set of modifiers."}, {"method_name": "name", "method_sig": "public String name()", "description": "Return the module name."}, {"method_name": "compiledVersion", "method_sig": "public Optional<ModuleDescriptor.Version> compiledVersion()", "description": "Returns the version of the module if recorded at compile-time."}, {"method_name": "rawCompiledVersion", "method_sig": "public Optional<String> rawCompiledVersion()", "description": "Returns the string with the possibly-unparseable version of the module\n if recorded at compile-time."}, {"method_name": "compareTo", "method_sig": "public int compareTo (ModuleDescriptor.Requires that)", "description": "Compares this module dependence to another.\n\n  Two Requires objects are compared by comparing their\n module names lexicographically. Where the module names are equal\n then the sets of modifiers are compared in the same way that\n module modifiers are compared (see ModuleDescriptor.compareTo). Where the module names are equal and\n the set of modifiers are equal then the version of the modules\n recorded at compile-time are compared. When comparing the versions\n recorded at compile-time then a dependence that has a recorded\n version is considered to succeed a dependence that does not have a\n recorded version. If both recorded versions are unparseable then the raw version strings are compared\n lexicographically. "}, {"method_name": "equals", "method_sig": "public boolean equals (Object ob)", "description": "Tests this module dependence for equality with the given object.\n\n  If the given object is not a Requires then this method\n returns false. Two module dependence objects are equal if\n the module names are equal, set of modifiers are equal, and the\n compiled version of both modules is equal or not recorded for\n both modules. \n This method satisfies the general contract of the Object.equals method. "}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Computes a hash code for this module dependence.\n\n  The hash code is based upon the module name, modifiers, and the\n module version if recorded at compile time. It satisfies the general\n contract of the Object.hashCode method. "}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a string describing this module dependence."}]}