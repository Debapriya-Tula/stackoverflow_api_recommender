{"name": "Class LocalDate", "module": "java.base", "package": "java.time", "text": "A date without a time-zone in the ISO-8601 calendar system,\n such as 2007-12-03.\n \nLocalDate is an immutable date-time object that represents a date,\n often viewed as year-month-day. Other date fields, such as day-of-year,\n day-of-week and week-of-year, can also be accessed.\n For example, the value \"2nd October 2007\" can be stored in a LocalDate.\n \n This class does not store or represent a time or time-zone.\n Instead, it is a description of the date, as used for birthdays.\n It cannot represent an instant on the time-line without additional information\n such as an offset or time-zone.\n \n The ISO-8601 calendar system is the modern civil calendar system used today\n in most of the world. It is equivalent to the proleptic Gregorian calendar\n system, in which today's rules for leap years are applied for all time.\n For most applications written today, the ISO-8601 rules are entirely suitable.\n However, any application that makes use of historical dates, and requires them\n to be accurate will find the ISO-8601 approach unsuitable.\n\n \n This is a value-based\n class; use of identity-sensitive operations (including reference equality\n (==), identity hash code, or synchronization) on instances of\n LocalDate may have unpredictable results and should be avoided.\n The equals method should be used for comparisons.", "codes": ["public final class LocalDate\nextends Object\nimplements Temporal, TemporalAdjuster, ChronoLocalDate, Serializable"], "fields": [{"field_name": "MIN", "field_sig": "public static final\u00a0LocalDate MIN", "description": "The minimum supported LocalDate, '-999999999-01-01'.\n This could be used by an application as a \"far past\" date."}, {"field_name": "MAX", "field_sig": "public static final\u00a0LocalDate MAX", "description": "The maximum supported LocalDate, '+999999999-12-31'.\n This could be used by an application as a \"far future\" date."}, {"field_name": "EPOCH", "field_sig": "public static final\u00a0LocalDate EPOCH", "description": "The epoch year LocalDate, '1970-01-01'."}], "methods": [{"method_name": "now", "method_sig": "public static LocalDate now()", "description": "Obtains the current date from the system clock in the default time-zone.\n \n This will query the system clock in the default\n time-zone to obtain the current date.\n \n Using this method will prevent the ability to use an alternate clock for testing\n because the clock is hard-coded."}, {"method_name": "now", "method_sig": "public static LocalDate now (ZoneId zone)", "description": "Obtains the current date from the system clock in the specified time-zone.\n \n This will query the system clock to obtain the current date.\n Specifying the time-zone avoids dependence on the default time-zone.\n \n Using this method will prevent the ability to use an alternate clock for testing\n because the clock is hard-coded."}, {"method_name": "now", "method_sig": "public static LocalDate now (Clock clock)", "description": "Obtains the current date from the specified clock.\n \n This will query the specified clock to obtain the current date - today.\n Using this method allows the use of an alternate clock for testing.\n The alternate clock may be introduced using dependency injection."}, {"method_name": "of", "method_sig": "public static LocalDate of (int year,\n                           Month month,\n                           int dayOfMonth)", "description": "Obtains an instance of LocalDate from a year, month and day.\n \n This returns a LocalDate with the specified year, month and day-of-month.\n The day must be valid for the year and month, otherwise an exception will be thrown."}, {"method_name": "of", "method_sig": "public static LocalDate of (int year,\n                           int month,\n                           int dayOfMonth)", "description": "Obtains an instance of LocalDate from a year, month and day.\n \n This returns a LocalDate with the specified year, month and day-of-month.\n The day must be valid for the year and month, otherwise an exception will be thrown."}, {"method_name": "ofYearDay", "method_sig": "public static LocalDate ofYearDay (int year,\n                                  int dayOfYear)", "description": "Obtains an instance of LocalDate from a year and day-of-year.\n \n This returns a LocalDate with the specified year and day-of-year.\n The day-of-year must be valid for the year, otherwise an exception will be thrown."}, {"method_name": "ofInstant", "method_sig": "public static LocalDate ofInstant (Instant instant,\n                                  ZoneId zone)", "description": "Obtains an instance of LocalDate from an Instant and zone ID.\n \n This creates a local date based on the specified instant.\n First, the offset from UTC/Greenwich is obtained using the zone ID and instant,\n which is simple as there is only one valid offset for each instant.\n Then, the instant and offset are used to calculate the local date."}, {"method_name": "ofEpochDay", "method_sig": "public static LocalDate ofEpochDay (long epochDay)", "description": "Obtains an instance of LocalDate from the epoch day count.\n \n This returns a LocalDate with the specified epoch-day.\n The EPOCH_DAY is a simple incrementing count\n of days where day 0 is 1970-01-01. Negative numbers represent earlier days."}, {"method_name": "from", "method_sig": "public static LocalDate from (TemporalAccessor temporal)", "description": "Obtains an instance of LocalDate from a temporal object.\n \n This obtains a local date based on the specified temporal.\n A TemporalAccessor represents an arbitrary set of date and time information,\n which this factory converts to an instance of LocalDate.\n \n The conversion uses the TemporalQueries.localDate() query, which relies\n on extracting the EPOCH_DAY field.\n \n This method matches the signature of the functional interface TemporalQuery\n allowing it to be used as a query via method reference, LocalDate::from."}, {"method_name": "parse", "method_sig": "public static LocalDate parse (CharSequence text)", "description": "Obtains an instance of LocalDate from a text string such as 2007-12-03.\n \n The string must represent a valid date and is parsed using\n DateTimeFormatter.ISO_LOCAL_DATE."}, {"method_name": "parse", "method_sig": "public static LocalDate parse (CharSequence text,\n                              DateTimeFormatter formatter)", "description": "Obtains an instance of LocalDate from a text string using a specific formatter.\n \n The text is parsed using the formatter, returning a date."}, {"method_name": "isSupported", "method_sig": "public boolean isSupported (TemporalField field)", "description": "Checks if the specified field is supported.\n \n This checks if this date can be queried for the specified field.\n If false, then calling the range,\n get and with(TemporalField, long)\n methods will throw an exception.\n \n If the field is a ChronoField then the query is implemented here.\n The supported fields are:\n \nDAY_OF_WEEK\nALIGNED_DAY_OF_WEEK_IN_MONTH\nALIGNED_DAY_OF_WEEK_IN_YEAR\nDAY_OF_MONTH\nDAY_OF_YEAR\nEPOCH_DAY\nALIGNED_WEEK_OF_MONTH\nALIGNED_WEEK_OF_YEAR\nMONTH_OF_YEAR\nPROLEPTIC_MONTH\nYEAR_OF_ERA\nYEAR\nERA\n\n All other ChronoField instances will return false.\n \n If the field is not a ChronoField, then the result of this method\n is obtained by invoking TemporalField.isSupportedBy(TemporalAccessor)\n passing this as the argument.\n Whether the field is supported is determined by the field."}, {"method_name": "isSupported", "method_sig": "public boolean isSupported (TemporalUnit unit)", "description": "Checks if the specified unit is supported.\n \n This checks if the specified unit can be added to, or subtracted from, this date.\n If false, then calling the plus(long, TemporalUnit) and\n minus methods will throw an exception.\n \n If the unit is a ChronoUnit then the query is implemented here.\n The supported units are:\n \nDAYS\nWEEKS\nMONTHS\nYEARS\nDECADES\nCENTURIES\nMILLENNIA\nERAS\n\n All other ChronoUnit instances will return false.\n \n If the unit is not a ChronoUnit, then the result of this method\n is obtained by invoking TemporalUnit.isSupportedBy(Temporal)\n passing this as the argument.\n Whether the unit is supported is determined by the unit."}, {"method_name": "range", "method_sig": "public ValueRange range (TemporalField field)", "description": "Gets the range of valid values for the specified field.\n \n The range object expresses the minimum and maximum valid values for a field.\n This date is used to enhance the accuracy of the returned range.\n If it is not possible to return the range, because the field is not supported\n or for some other reason, an exception is thrown.\n \n If the field is a ChronoField then the query is implemented here.\n The supported fields will return\n appropriate range instances.\n All other ChronoField instances will throw an UnsupportedTemporalTypeException.\n \n If the field is not a ChronoField, then the result of this method\n is obtained by invoking TemporalField.rangeRefinedBy(TemporalAccessor)\n passing this as the argument.\n Whether the range can be obtained is determined by the field."}, {"method_name": "get", "method_sig": "public int get (TemporalField field)", "description": "Gets the value of the specified field from this date as an int.\n \n This queries this date for the value of the specified field.\n The returned value will always be within the valid range of values for the field.\n If it is not possible to return the value, because the field is not supported\n or for some other reason, an exception is thrown.\n \n If the field is a ChronoField then the query is implemented here.\n The supported fields will return valid\n values based on this date, except EPOCH_DAY and PROLEPTIC_MONTH\n which are too large to fit in an int and throw an UnsupportedTemporalTypeException.\n All other ChronoField instances will throw an UnsupportedTemporalTypeException.\n \n If the field is not a ChronoField, then the result of this method\n is obtained by invoking TemporalField.getFrom(TemporalAccessor)\n passing this as the argument. Whether the value can be obtained,\n and what the value represents, is determined by the field."}, {"method_name": "getLong", "method_sig": "public long getLong (TemporalField field)", "description": "Gets the value of the specified field from this date as a long.\n \n This queries this date for the value of the specified field.\n If it is not possible to return the value, because the field is not supported\n or for some other reason, an exception is thrown.\n \n If the field is a ChronoField then the query is implemented here.\n The supported fields will return valid\n values based on this date.\n All other ChronoField instances will throw an UnsupportedTemporalTypeException.\n \n If the field is not a ChronoField, then the result of this method\n is obtained by invoking TemporalField.getFrom(TemporalAccessor)\n passing this as the argument. Whether the value can be obtained,\n and what the value represents, is determined by the field."}, {"method_name": "getChronology", "method_sig": "public IsoChronology getChronology()", "description": "Gets the chronology of this date, which is the ISO calendar system.\n \n The Chronology represents the calendar system in use.\n The ISO-8601 calendar system is the modern civil calendar system used today\n in most of the world. It is equivalent to the proleptic Gregorian calendar\n system, in which today's rules for leap years are applied for all time."}, {"method_name": "getEra", "method_sig": "public IsoEra getEra()", "description": "Gets the era applicable at this date.\n \n The official ISO-8601 standard does not define eras, however IsoChronology does.\n It defines two eras, 'CE' from year one onwards and 'BCE' from year zero backwards.\n Since dates before the Julian-Gregorian cutover are not in line with history,\n the cutover between 'BCE' and 'CE' is also not aligned with the commonly used\n eras, often referred to using 'BC' and 'AD'.\n \n Users of this class should typically ignore this method as it exists primarily\n to fulfill the ChronoLocalDate contract where it is necessary to support\n the Japanese calendar system."}, {"method_name": "getYear", "method_sig": "public int getYear()", "description": "Gets the year field.\n \n This method returns the primitive int value for the year.\n \n The year returned by this method is proleptic as per get(YEAR).\n To obtain the year-of-era, use get(YEAR_OF_ERA)."}, {"method_name": "getMonthValue", "method_sig": "public int getMonthValue()", "description": "Gets the month-of-year field from 1 to 12.\n \n This method returns the month as an int from 1 to 12.\n Application code is frequently clearer if the enum Month\n is used by calling getMonth()."}, {"method_name": "getMonth", "method_sig": "public Month getMonth()", "description": "Gets the month-of-year field using the Month enum.\n \n This method returns the enum Month for the month.\n This avoids confusion as to what int values mean.\n If you need access to the primitive int value then the enum\n provides the int value."}, {"method_name": "getDayOfMonth", "method_sig": "public int getDayOfMonth()", "description": "Gets the day-of-month field.\n \n This method returns the primitive int value for the day-of-month."}, {"method_name": "getDayOfYear", "method_sig": "public int getDayOfYear()", "description": "Gets the day-of-year field.\n \n This method returns the primitive int value for the day-of-year."}, {"method_name": "getDayOfWeek", "method_sig": "public DayOfWeek getDayOfWeek()", "description": "Gets the day-of-week field, which is an enum DayOfWeek.\n \n This method returns the enum DayOfWeek for the day-of-week.\n This avoids confusion as to what int values mean.\n If you need access to the primitive int value then the enum\n provides the int value.\n \n Additional information can be obtained from the DayOfWeek.\n This includes textual names of the values."}, {"method_name": "isLeapYear", "method_sig": "public boolean isLeapYear()", "description": "Checks if the year is a leap year, according to the ISO proleptic\n calendar system rules.\n \n This method applies the current rules for leap years across the whole time-line.\n In general, a year is a leap year if it is divisible by four without\n remainder. However, years divisible by 100, are not leap years, with\n the exception of years divisible by 400 which are.\n \n For example, 1904 is a leap year it is divisible by 4.\n 1900 was not a leap year as it is divisible by 100, however 2000 was a\n leap year as it is divisible by 400.\n \n The calculation is proleptic - applying the same rules into the far future and far past.\n This is historically inaccurate, but is correct for the ISO-8601 standard."}, {"method_name": "lengthOfMonth", "method_sig": "public int lengthOfMonth()", "description": "Returns the length of the month represented by this date.\n \n This returns the length of the month in days.\n For example, a date in January would return 31."}, {"method_name": "lengthOfYear", "method_sig": "public int lengthOfYear()", "description": "Returns the length of the year represented by this date.\n \n This returns the length of the year in days, either 365 or 366."}, {"method_name": "with", "method_sig": "public LocalDate with (TemporalAdjuster adjuster)", "description": "Returns an adjusted copy of this date.\n \n This returns a LocalDate, based on this one, with the date adjusted.\n The adjustment takes place using the specified adjuster strategy object.\n Read the documentation of the adjuster to understand what adjustment will be made.\n \n A simple adjuster might simply set the one of the fields, such as the year field.\n A more complex adjuster might set the date to the last day of the month.\n \n A selection of common adjustments is provided in\n TemporalAdjusters.\n These include finding the \"last day of the month\" and \"next Wednesday\".\n Key date-time classes also implement the TemporalAdjuster interface,\n such as Month and MonthDay.\n The adjuster is responsible for handling special cases, such as the varying\n lengths of month and leap years.\n \n For example this code returns a date on the last day of July:\n \n  import static java.time.Month.*;\n  import static java.time.temporal.TemporalAdjusters.*;\n\n  result = localDate.with(JULY).with(lastDayOfMonth());\n \n\n The result of this method is obtained by invoking the\n TemporalAdjuster.adjustInto(Temporal) method on the\n specified adjuster passing this as the argument.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "with", "method_sig": "public LocalDate with (TemporalField field,\n                      long newValue)", "description": "Returns a copy of this date with the specified field set to a new value.\n \n This returns a LocalDate, based on this one, with the value\n for the specified field changed.\n This can be used to change any supported field, such as the year, month or day-of-month.\n If it is not possible to set the value, because the field is not supported or for\n some other reason, an exception is thrown.\n \n In some cases, changing the specified field can cause the resulting date to become invalid,\n such as changing the month from 31st January to February would make the day-of-month invalid.\n In cases like this, the field is responsible for resolving the date. Typically it will choose\n the previous valid date, which would be the last valid day of February in this example.\n \n If the field is a ChronoField then the adjustment is implemented here.\n The supported fields behave as follows:\n \nDAY_OF_WEEK -\n  Returns a LocalDate with the specified day-of-week.\n  The date is adjusted up to 6 days forward or backward within the boundary\n  of a Monday to Sunday week.\n ALIGNED_DAY_OF_WEEK_IN_MONTH -\n  Returns a LocalDate with the specified aligned-day-of-week.\n  The date is adjusted to the specified month-based aligned-day-of-week.\n  Aligned weeks are counted such that the first week of a given month starts\n  on the first day of that month.\n  This may cause the date to be moved up to 6 days into the following month.\n ALIGNED_DAY_OF_WEEK_IN_YEAR -\n  Returns a LocalDate with the specified aligned-day-of-week.\n  The date is adjusted to the specified year-based aligned-day-of-week.\n  Aligned weeks are counted such that the first week of a given year starts\n  on the first day of that year.\n  This may cause the date to be moved up to 6 days into the following year.\n DAY_OF_MONTH -\n  Returns a LocalDate with the specified day-of-month.\n  The month and year will be unchanged. If the day-of-month is invalid for the\n  year and month, then a DateTimeException is thrown.\n DAY_OF_YEAR -\n  Returns a LocalDate with the specified day-of-year.\n  The year will be unchanged. If the day-of-year is invalid for the\n  year, then a DateTimeException is thrown.\n EPOCH_DAY -\n  Returns a LocalDate with the specified epoch-day.\n  This completely replaces the date and is equivalent to ofEpochDay(long).\n ALIGNED_WEEK_OF_MONTH -\n  Returns a LocalDate with the specified aligned-week-of-month.\n  Aligned weeks are counted such that the first week of a given month starts\n  on the first day of that month.\n  This adjustment moves the date in whole week chunks to match the specified week.\n  The result will have the same day-of-week as this date.\n  This may cause the date to be moved into the following month.\n ALIGNED_WEEK_OF_YEAR -\n  Returns a LocalDate with the specified aligned-week-of-year.\n  Aligned weeks are counted such that the first week of a given year starts\n  on the first day of that year.\n  This adjustment moves the date in whole week chunks to match the specified week.\n  The result will have the same day-of-week as this date.\n  This may cause the date to be moved into the following year.\n MONTH_OF_YEAR -\n  Returns a LocalDate with the specified month-of-year.\n  The year will be unchanged. The day-of-month will also be unchanged,\n  unless it would be invalid for the new month and year. In that case, the\n  day-of-month is adjusted to the maximum valid value for the new month and year.\n PROLEPTIC_MONTH -\n  Returns a LocalDate with the specified proleptic-month.\n  The day-of-month will be unchanged, unless it would be invalid for the new month\n  and year. In that case, the day-of-month is adjusted to the maximum valid value\n  for the new month and year.\n YEAR_OF_ERA -\n  Returns a LocalDate with the specified year-of-era.\n  The era and month will be unchanged. The day-of-month will also be unchanged,\n  unless it would be invalid for the new month and year. In that case, the\n  day-of-month is adjusted to the maximum valid value for the new month and year.\n YEAR -\n  Returns a LocalDate with the specified year.\n  The month will be unchanged. The day-of-month will also be unchanged,\n  unless it would be invalid for the new month and year. In that case, the\n  day-of-month is adjusted to the maximum valid value for the new month and year.\n ERA -\n  Returns a LocalDate with the specified era.\n  The year-of-era and month will be unchanged. The day-of-month will also be unchanged,\n  unless it would be invalid for the new month and year. In that case, the\n  day-of-month is adjusted to the maximum valid value for the new month and year.\n \n\n In all cases, if the new value is outside the valid range of values for the field\n then a DateTimeException will be thrown.\n \n All other ChronoField instances will throw an UnsupportedTemporalTypeException.\n \n If the field is not a ChronoField, then the result of this method\n is obtained by invoking TemporalField.adjustInto(Temporal, long)\n passing this as the argument. In this case, the field determines\n whether and how to adjust the instant.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "withYear", "method_sig": "public LocalDate withYear (int year)", "description": "Returns a copy of this LocalDate with the year altered.\n \n If the day-of-month is invalid for the year, it will be changed to the last valid day of the month.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "withMonth", "method_sig": "public LocalDate withMonth (int month)", "description": "Returns a copy of this LocalDate with the month-of-year altered.\n \n If the day-of-month is invalid for the year, it will be changed to the last valid day of the month.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "withDayOfMonth", "method_sig": "public LocalDate withDayOfMonth (int dayOfMonth)", "description": "Returns a copy of this LocalDate with the day-of-month altered.\n \n If the resulting date is invalid, an exception is thrown.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "withDayOfYear", "method_sig": "public LocalDate withDayOfYear (int dayOfYear)", "description": "Returns a copy of this LocalDate with the day-of-year altered.\n \n If the resulting date is invalid, an exception is thrown.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "plus", "method_sig": "public LocalDate plus (TemporalAmount amountToAdd)", "description": "Returns a copy of this date with the specified amount added.\n \n This returns a LocalDate, based on this one, with the specified amount added.\n The amount is typically Period but may be any other type implementing\n the TemporalAmount interface.\n \n The calculation is delegated to the amount object by calling\n TemporalAmount.addTo(Temporal). The amount implementation is free\n to implement the addition in any way it wishes, however it typically\n calls back to plus(long, TemporalUnit). Consult the documentation\n of the amount implementation to determine if it can be successfully added.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "plus", "method_sig": "public LocalDate plus (long amountToAdd,\n                      TemporalUnit unit)", "description": "Returns a copy of this date with the specified amount added.\n \n This returns a LocalDate, based on this one, with the amount\n in terms of the unit added. If it is not possible to add the amount, because the\n unit is not supported or for some other reason, an exception is thrown.\n \n In some cases, adding the amount can cause the resulting date to become invalid.\n For example, adding one month to 31st January would result in 31st February.\n In cases like this, the unit is responsible for resolving the date.\n Typically it will choose the previous valid date, which would be the last valid\n day of February in this example.\n \n If the field is a ChronoUnit then the addition is implemented here.\n The supported fields behave as follows:\n \nDAYS -\n  Returns a LocalDate with the specified number of days added.\n  This is equivalent to plusDays(long).\n WEEKS -\n  Returns a LocalDate with the specified number of weeks added.\n  This is equivalent to plusWeeks(long) and uses a 7 day week.\n MONTHS -\n  Returns a LocalDate with the specified number of months added.\n  This is equivalent to plusMonths(long).\n  The day-of-month will be unchanged unless it would be invalid for the new\n  month and year. In that case, the day-of-month is adjusted to the maximum\n  valid value for the new month and year.\n YEARS -\n  Returns a LocalDate with the specified number of years added.\n  This is equivalent to plusYears(long).\n  The day-of-month will be unchanged unless it would be invalid for the new\n  month and year. In that case, the day-of-month is adjusted to the maximum\n  valid value for the new month and year.\n DECADES -\n  Returns a LocalDate with the specified number of decades added.\n  This is equivalent to calling plusYears(long) with the amount\n  multiplied by 10.\n  The day-of-month will be unchanged unless it would be invalid for the new\n  month and year. In that case, the day-of-month is adjusted to the maximum\n  valid value for the new month and year.\n CENTURIES -\n  Returns a LocalDate with the specified number of centuries added.\n  This is equivalent to calling plusYears(long) with the amount\n  multiplied by 100.\n  The day-of-month will be unchanged unless it would be invalid for the new\n  month and year. In that case, the day-of-month is adjusted to the maximum\n  valid value for the new month and year.\n MILLENNIA -\n  Returns a LocalDate with the specified number of millennia added.\n  This is equivalent to calling plusYears(long) with the amount\n  multiplied by 1,000.\n  The day-of-month will be unchanged unless it would be invalid for the new\n  month and year. In that case, the day-of-month is adjusted to the maximum\n  valid value for the new month and year.\n ERAS -\n  Returns a LocalDate with the specified number of eras added.\n  Only two eras are supported so the amount must be one, zero or minus one.\n  If the amount is non-zero then the year is changed such that the year-of-era\n  is unchanged.\n  The day-of-month will be unchanged unless it would be invalid for the new\n  month and year. In that case, the day-of-month is adjusted to the maximum\n  valid value for the new month and year.\n \n\n All other ChronoUnit instances will throw an UnsupportedTemporalTypeException.\n \n If the field is not a ChronoUnit, then the result of this method\n is obtained by invoking TemporalUnit.addTo(Temporal, long)\n passing this as the argument. In this case, the unit determines\n whether and how to perform the addition.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "plusYears", "method_sig": "public LocalDate plusYears (long yearsToAdd)", "description": "Returns a copy of this LocalDate with the specified number of years added.\n \n This method adds the specified amount to the years field in three steps:\n \nAdd the input years to the year field\nCheck if the resulting date would be invalid\nAdjust the day-of-month to the last valid day if necessary\n\n\n For example, 2008-02-29 (leap year) plus one year would result in the\n invalid date 2009-02-29 (standard year). Instead of returning an invalid\n result, the last valid day of the month, 2009-02-28, is selected instead.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "plusMonths", "method_sig": "public LocalDate plusMonths (long monthsToAdd)", "description": "Returns a copy of this LocalDate with the specified number of months added.\n \n This method adds the specified amount to the months field in three steps:\n \nAdd the input months to the month-of-year field\nCheck if the resulting date would be invalid\nAdjust the day-of-month to the last valid day if necessary\n\n\n For example, 2007-03-31 plus one month would result in the invalid date\n 2007-04-31. Instead of returning an invalid result, the last valid day\n of the month, 2007-04-30, is selected instead.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "plusWeeks", "method_sig": "public LocalDate plusWeeks (long weeksToAdd)", "description": "Returns a copy of this LocalDate with the specified number of weeks added.\n \n This method adds the specified amount in weeks to the days field incrementing\n the month and year fields as necessary to ensure the result remains valid.\n The result is only invalid if the maximum/minimum year is exceeded.\n \n For example, 2008-12-31 plus one week would result in 2009-01-07.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "plusDays", "method_sig": "public LocalDate plusDays (long daysToAdd)", "description": "Returns a copy of this LocalDate with the specified number of days added.\n \n This method adds the specified amount to the days field incrementing the\n month and year fields as necessary to ensure the result remains valid.\n The result is only invalid if the maximum/minimum year is exceeded.\n \n For example, 2008-12-31 plus one day would result in 2009-01-01.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "minus", "method_sig": "public LocalDate minus (TemporalAmount amountToSubtract)", "description": "Returns a copy of this date with the specified amount subtracted.\n \n This returns a LocalDate, based on this one, with the specified amount subtracted.\n The amount is typically Period but may be any other type implementing\n the TemporalAmount interface.\n \n The calculation is delegated to the amount object by calling\n TemporalAmount.subtractFrom(Temporal). The amount implementation is free\n to implement the subtraction in any way it wishes, however it typically\n calls back to minus(long, TemporalUnit). Consult the documentation\n of the amount implementation to determine if it can be successfully subtracted.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "minus", "method_sig": "public LocalDate minus (long amountToSubtract,\n                       TemporalUnit unit)", "description": "Returns a copy of this date with the specified amount subtracted.\n \n This returns a LocalDate, based on this one, with the amount\n in terms of the unit subtracted. If it is not possible to subtract the amount,\n because the unit is not supported or for some other reason, an exception is thrown.\n \n This method is equivalent to plus(long, TemporalUnit) with the amount negated.\n See that method for a full description of how addition, and thus subtraction, works.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "minusYears", "method_sig": "public LocalDate minusYears (long yearsToSubtract)", "description": "Returns a copy of this LocalDate with the specified number of years subtracted.\n \n This method subtracts the specified amount from the years field in three steps:\n \nSubtract the input years from the year field\nCheck if the resulting date would be invalid\nAdjust the day-of-month to the last valid day if necessary\n\n\n For example, 2008-02-29 (leap year) minus one year would result in the\n invalid date 2007-02-29 (standard year). Instead of returning an invalid\n result, the last valid day of the month, 2007-02-28, is selected instead.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "minusMonths", "method_sig": "public LocalDate minusMonths (long monthsToSubtract)", "description": "Returns a copy of this LocalDate with the specified number of months subtracted.\n \n This method subtracts the specified amount from the months field in three steps:\n \nSubtract the input months from the month-of-year field\nCheck if the resulting date would be invalid\nAdjust the day-of-month to the last valid day if necessary\n\n\n For example, 2007-03-31 minus one month would result in the invalid date\n 2007-02-31. Instead of returning an invalid result, the last valid day\n of the month, 2007-02-28, is selected instead.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "minusWeeks", "method_sig": "public LocalDate minusWeeks (long weeksToSubtract)", "description": "Returns a copy of this LocalDate with the specified number of weeks subtracted.\n \n This method subtracts the specified amount in weeks from the days field decrementing\n the month and year fields as necessary to ensure the result remains valid.\n The result is only invalid if the maximum/minimum year is exceeded.\n \n For example, 2009-01-07 minus one week would result in 2008-12-31.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "minusDays", "method_sig": "public LocalDate minusDays (long daysToSubtract)", "description": "Returns a copy of this LocalDate with the specified number of days subtracted.\n \n This method subtracts the specified amount from the days field decrementing the\n month and year fields as necessary to ensure the result remains valid.\n The result is only invalid if the maximum/minimum year is exceeded.\n \n For example, 2009-01-01 minus one day would result in 2008-12-31.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "query", "method_sig": "public <R> R query (TemporalQuery<R> query)", "description": "Queries this date using the specified query.\n \n This queries this date using the specified query strategy object.\n The TemporalQuery object defines the logic to be used to\n obtain the result. Read the documentation of the query to understand\n what the result of this method will be.\n \n The result of this method is obtained by invoking the\n TemporalQuery.queryFrom(TemporalAccessor) method on the\n specified query passing this as the argument."}, {"method_name": "adjustInto", "method_sig": "public Temporal adjustInto (Temporal temporal)", "description": "Adjusts the specified temporal object to have the same date as this object.\n \n This returns a temporal object of the same observable type as the input\n with the date changed to be the same as this.\n \n The adjustment is equivalent to using Temporal.with(TemporalField, long)\n passing ChronoField.EPOCH_DAY as the field.\n \n In most cases, it is clearer to reverse the calling pattern by using\n Temporal.with(TemporalAdjuster):\n \n   // these two lines are equivalent, but the second approach is recommended\n   temporal = thisLocalDate.adjustInto(temporal);\n   temporal = temporal.with(thisLocalDate);\n \n\n This instance is immutable and unaffected by this method call."}, {"method_name": "until", "method_sig": "public long until (Temporal endExclusive,\n                  TemporalUnit unit)", "description": "Calculates the amount of time until another date in terms of the specified unit.\n \n This calculates the amount of time between two LocalDate\n objects in terms of a single TemporalUnit.\n The start and end points are this and the specified date.\n The result will be negative if the end is before the start.\n The Temporal passed to this method is converted to a\n LocalDate using from(TemporalAccessor).\n For example, the amount in days between two dates can be calculated\n using startDate.until(endDate, DAYS).\n \n The calculation returns a whole number, representing the number of\n complete units between the two dates.\n For example, the amount in months between 2012-06-15 and 2012-08-14\n will only be one month as it is one day short of two months.\n \n There are two equivalent ways of using this method.\n The first is to invoke this method.\n The second is to use TemporalUnit.between(Temporal, Temporal):\n \n   // these two lines are equivalent\n   amount = start.until(end, MONTHS);\n   amount = MONTHS.between(start, end);\n \n The choice should be made based on which makes the code more readable.\n \n The calculation is implemented in this method for ChronoUnit.\n The units DAYS, WEEKS, MONTHS, YEARS,\n DECADES, CENTURIES, MILLENNIA and ERAS\n are supported. Other ChronoUnit values will throw an exception.\n \n If the unit is not a ChronoUnit, then the result of this method\n is obtained by invoking TemporalUnit.between(Temporal, Temporal)\n passing this as the first argument and the converted input temporal\n as the second argument.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "until", "method_sig": "public Period until (ChronoLocalDate endDateExclusive)", "description": "Calculates the period between this date and another date as a Period.\n \n This calculates the period between two dates in terms of years, months and days.\n The start and end points are this and the specified date.\n The result will be negative if the end is before the start.\n The negative sign will be the same in each of year, month and day.\n \n The calculation is performed using the ISO calendar system.\n If necessary, the input date will be converted to ISO.\n \n The start date is included, but the end date is not.\n The period is calculated by removing complete months, then calculating\n the remaining number of days, adjusting to ensure that both have the same sign.\n The number of months is then normalized into years and months based on a 12 month year.\n A month is considered to be complete if the end day-of-month is greater\n than or equal to the start day-of-month.\n For example, from 2010-01-15 to 2011-03-18 is \"1 year, 2 months and 3 days\".\n \n There are two equivalent ways of using this method.\n The first is to invoke this method.\n The second is to use Period.between(LocalDate, LocalDate):\n \n   // these two lines are equivalent\n   period = start.until(end);\n   period = Period.between(start, end);\n \n The choice should be made based on which makes the code more readable."}, {"method_name": "datesUntil", "method_sig": "public Stream<LocalDate> datesUntil (LocalDate endExclusive)", "description": "Returns a sequential ordered stream of dates. The returned stream starts from this date\n (inclusive) and goes to endExclusive (exclusive) by an incremental step of 1 day.\n \n This method is equivalent to datesUntil(endExclusive, Period.ofDays(1))."}, {"method_name": "datesUntil", "method_sig": "public Stream<LocalDate> datesUntil (LocalDate endExclusive,\n                                    Period step)", "description": "Returns a sequential ordered stream of dates by given incremental step. The returned stream\n starts from this date (inclusive) and goes to endExclusive (exclusive).\n \n The n-th date which appears in the stream is equal to this.plus(step.multipliedBy(n))\n (but the result of step multiplication never overflows). For example, if this date is\n 2015-01-31, the end date is 2015-05-01 and the step is 1 month, then the\n stream contains 2015-01-31, 2015-02-28, 2015-03-31, and\n 2015-04-30."}, {"method_name": "format", "method_sig": "public String format (DateTimeFormatter formatter)", "description": "Formats this date using the specified formatter.\n \n This date will be passed to the formatter to produce a string."}, {"method_name": "atTime", "method_sig": "public LocalDateTime atTime (LocalTime time)", "description": "Combines this date with a time to create a LocalDateTime.\n \n This returns a LocalDateTime formed from this date at the specified time.\n All possible combinations of date and time are valid."}, {"method_name": "atTime", "method_sig": "public LocalDateTime atTime (int hour,\n                            int minute)", "description": "Combines this date with a time to create a LocalDateTime.\n \n This returns a LocalDateTime formed from this date at the\n specified hour and minute.\n The seconds and nanosecond fields will be set to zero.\n The individual time fields must be within their valid range.\n All possible combinations of date and time are valid."}, {"method_name": "atTime", "method_sig": "public LocalDateTime atTime (int hour,\n                            int minute,\n                            int second)", "description": "Combines this date with a time to create a LocalDateTime.\n \n This returns a LocalDateTime formed from this date at the\n specified hour, minute and second.\n The nanosecond field will be set to zero.\n The individual time fields must be within their valid range.\n All possible combinations of date and time are valid."}, {"method_name": "atTime", "method_sig": "public LocalDateTime atTime (int hour,\n                            int minute,\n                            int second,\n                            int nanoOfSecond)", "description": "Combines this date with a time to create a LocalDateTime.\n \n This returns a LocalDateTime formed from this date at the\n specified hour, minute, second and nanosecond.\n The individual time fields must be within their valid range.\n All possible combinations of date and time are valid."}, {"method_name": "atTime", "method_sig": "public OffsetDateTime atTime (OffsetTime time)", "description": "Combines this date with an offset time to create an OffsetDateTime.\n \n This returns an OffsetDateTime formed from this date at the specified time.\n All possible combinations of date and time are valid."}, {"method_name": "atStartOfDay", "method_sig": "public LocalDateTime atStartOfDay()", "description": "Combines this date with the time of midnight to create a LocalDateTime\n at the start of this date.\n \n This returns a LocalDateTime formed from this date at the time of\n midnight, 00:00, at the start of this date."}, {"method_name": "atStartOfDay", "method_sig": "public ZonedDateTime atStartOfDay (ZoneId zone)", "description": "Returns a zoned date-time from this date at the earliest valid time according\n to the rules in the time-zone.\n \n Time-zone rules, such as daylight savings, mean that not every local date-time\n is valid for the specified zone, thus the local date-time may not be midnight.\n \n In most cases, there is only one valid offset for a local date-time.\n In the case of an overlap, there are two valid offsets, and the earlier one is used,\n corresponding to the first occurrence of midnight on the date.\n In the case of a gap, the zoned date-time will represent the instant just after the gap.\n \n If the zone ID is a ZoneOffset, then the result always has a time of midnight.\n \n To convert to a specific time in a given time-zone call atTime(LocalTime)\n followed by LocalDateTime.atZone(ZoneId)."}, {"method_name": "toEpochSecond", "method_sig": "public long toEpochSecond (LocalTime time,\n                          ZoneOffset offset)", "description": "Converts this LocalDate to the number of seconds since the epoch\n of 1970-01-01T00:00:00Z.\n \n This combines this local date with the specified time and\n offset to calculate the epoch-second value, which is the\n number of elapsed seconds from 1970-01-01T00:00:00Z.\n Instants on the time-line after the epoch are positive, earlier\n are negative."}, {"method_name": "compareTo", "method_sig": "public int compareTo (ChronoLocalDate other)", "description": "Compares this date to another date.\n \n The comparison is primarily based on the date, from earliest to latest.\n It is \"consistent with equals\", as defined by Comparable.\n \n If all the dates being compared are instances of LocalDate,\n then the comparison will be entirely based on the date.\n If some dates being compared are in different chronologies, then the\n chronology is also considered, see ChronoLocalDate.compareTo(java.time.chrono.ChronoLocalDate)."}, {"method_name": "isAfter", "method_sig": "public boolean isAfter (ChronoLocalDate other)", "description": "Checks if this date is after the specified date.\n \n This checks to see if this date represents a point on the\n local time-line after the other date.\n \n   LocalDate a = LocalDate.of(2012, 6, 30);\n   LocalDate b = LocalDate.of(2012, 7, 1);\n   a.isAfter(b) == false\n   a.isAfter(a) == false\n   b.isAfter(a) == true\n \n\n This method only considers the position of the two dates on the local time-line.\n It does not take into account the chronology, or calendar system.\n This is different from the comparison in compareTo(ChronoLocalDate),\n but is the same approach as ChronoLocalDate.timeLineOrder()."}, {"method_name": "isBefore", "method_sig": "public boolean isBefore (ChronoLocalDate other)", "description": "Checks if this date is before the specified date.\n \n This checks to see if this date represents a point on the\n local time-line before the other date.\n \n   LocalDate a = LocalDate.of(2012, 6, 30);\n   LocalDate b = LocalDate.of(2012, 7, 1);\n   a.isBefore(b) == true\n   a.isBefore(a) == false\n   b.isBefore(a) == false\n \n\n This method only considers the position of the two dates on the local time-line.\n It does not take into account the chronology, or calendar system.\n This is different from the comparison in compareTo(ChronoLocalDate),\n but is the same approach as ChronoLocalDate.timeLineOrder()."}, {"method_name": "isEqual", "method_sig": "public boolean isEqual (ChronoLocalDate other)", "description": "Checks if this date is equal to the specified date.\n \n This checks to see if this date represents the same point on the\n local time-line as the other date.\n \n   LocalDate a = LocalDate.of(2012, 6, 30);\n   LocalDate b = LocalDate.of(2012, 7, 1);\n   a.isEqual(b) == false\n   a.isEqual(a) == true\n   b.isEqual(a) == false\n \n\n This method only considers the position of the two dates on the local time-line.\n It does not take into account the chronology, or calendar system.\n This is different from the comparison in compareTo(ChronoLocalDate)\n but is the same approach as ChronoLocalDate.timeLineOrder()."}, {"method_name": "equals", "method_sig": "public boolean equals (Object obj)", "description": "Checks if this date is equal to another date.\n \n Compares this LocalDate with another ensuring that the date is the same.\n \n Only objects of type LocalDate are compared, other types return false.\n To compare the dates of two TemporalAccessor instances, including dates\n in two different chronologies, use ChronoField.EPOCH_DAY as a comparator."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "A hash code for this date."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Outputs this date as a String, such as 2007-12-03.\n \n The output will be in the ISO-8601 format uuuu-MM-dd."}]}