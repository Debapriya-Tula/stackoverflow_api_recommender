{"name": "Class Calendar.Builder", "module": "java.base", "package": "java.util", "text": "Calendar.Builder is used for creating a Calendar from\n various date-time parameters.\n\n There are two ways to set a Calendar to a date-time value. One\n is to set the instant parameter to a millisecond offset from the Epoch. The other is to set individual\n field parameters, such as YEAR, to their desired\n values. These two ways can't be mixed. Trying to set both the instant and\n individual fields will cause an IllegalStateException to be\n thrown. However, it is permitted to override previous values of the\n instant or field parameters.\n\n If no enough field parameters are given for determining date and/or\n time, calendar specific default values are used when building a\n Calendar. For example, if the YEAR value\n isn't given for the Gregorian calendar, 1970 will be used. If there are\n any conflicts among field parameters, the  resolution rules are applied.\n Therefore, the order of field setting matters.\n\n In addition to the date-time parameters,\n the locale,\n time zone,\n week definition, and\n leniency mode parameters can be set.\n\n Examples\nThe following are sample usages. Sample code assumes that the\n Calendar constants are statically imported.\n\n The following code produces a Calendar with date 2012-12-31\n (Gregorian) because Monday is the first day of a week with the  ISO 8601\n compatible week parameters.\n \n   Calendar cal = new Calendar.Builder().setCalendarType(\"iso8601\")\n                        .setWeekDate(2013, 1, MONDAY).build();\nThe following code produces a Japanese Calendar with date\n 1989-01-08 (Gregorian), assuming that the default ERA\n is Heisei that started on that day.\n \n   Calendar cal = new Calendar.Builder().setCalendarType(\"japanese\")\n                        .setFields(YEAR, 1, DAY_OF_YEAR, 1).build();", "codes": ["public static class Calendar.Builder\nextends Object"], "fields": [], "methods": [{"method_name": "setInstant", "method_sig": "public Calendar.Builder setInstant (long instant)", "description": "Sets the instant parameter to the given instant value that is\n a millisecond offset from the\n Epoch."}, {"method_name": "setInstant", "method_sig": "public Calendar.Builder setInstant (Date instant)", "description": "Sets the instant parameter to the instant value given by a\n Date. This method is equivalent to a call to\n setInstant(instant.getTime())."}, {"method_name": "set", "method_sig": "public Calendar.Builder set (int field,\n                            int value)", "description": "Sets the field parameter to the given value.\n field is an index to the Calendar.fields, such as\n DAY_OF_MONTH. Field value validation is\n not performed in this method. Any out of range values are either\n normalized in lenient mode or detected as an invalid value in\n non-lenient mode when building a Calendar."}, {"method_name": "setFields", "method_sig": "public Calendar.Builder setFields (int... fieldValuePairs)", "description": "Sets field parameters to their values given by\n fieldValuePairs that are pairs of a field and its value.\n For example,\n \n   setFields(Calendar.YEAR, 2013,\n             Calendar.MONTH, Calendar.DECEMBER,\n             Calendar.DAY_OF_MONTH, 23);\n is equivalent to the sequence of the following\n set calls:\n \n   set(Calendar.YEAR, 2013)\n   .set(Calendar.MONTH, Calendar.DECEMBER)\n   .set(Calendar.DAY_OF_MONTH, 23);"}, {"method_name": "setDate", "method_sig": "public Calendar.Builder setDate (int year,\n                                int month,\n                                int dayOfMonth)", "description": "Sets the date field parameters to the values given by year,\n month, and dayOfMonth. This method is equivalent to\n a call to:\n \n   setFields(Calendar.YEAR, year,\n             Calendar.MONTH, month,\n             Calendar.DAY_OF_MONTH, dayOfMonth);"}, {"method_name": "setTimeOfDay", "method_sig": "public Calendar.Builder setTimeOfDay (int hourOfDay,\n                                     int minute,\n                                     int second)", "description": "Sets the time of day field parameters to the values given by\n hourOfDay, minute, and second. This method is\n equivalent to a call to:\n \n   setTimeOfDay(hourOfDay, minute, second, 0);"}, {"method_name": "setTimeOfDay", "method_sig": "public Calendar.Builder setTimeOfDay (int hourOfDay,\n                                     int minute,\n                                     int second,\n                                     int millis)", "description": "Sets the time of day field parameters to the values given by\n hourOfDay, minute, second, and\n millis. This method is equivalent to a call to:\n \n   setFields(Calendar.HOUR_OF_DAY, hourOfDay,\n             Calendar.MINUTE, minute,\n             Calendar.SECOND, second,\n             Calendar.MILLISECOND, millis);"}, {"method_name": "setWeekDate", "method_sig": "public Calendar.Builder setWeekDate (int weekYear,\n                                    int weekOfYear,\n                                    int dayOfWeek)", "description": "Sets the week-based date parameters to the values with the given\n date specifiers - week year, week of year, and day of week.\n\n If the specified calendar doesn't support week dates, the\n build method will throw an IllegalArgumentException."}, {"method_name": "setTimeZone", "method_sig": "public Calendar.Builder setTimeZone (TimeZone zone)", "description": "Sets the time zone parameter to the given zone. If no time\n zone parameter is given to this Calendar.Builder, the\n default\n TimeZone will be used in the build\n method."}, {"method_name": "setLenient", "method_sig": "public Calendar.Builder setLenient (boolean lenient)", "description": "Sets the lenient mode parameter to the value given by lenient.\n If no lenient parameter is given to this Calendar.Builder,\n lenient mode will be used in the build method."}, {"method_name": "setCalendarType", "method_sig": "public Calendar.Builder setCalendarType (String type)", "description": "Sets the calendar type parameter to the given type. The\n calendar type given by this method has precedence over any explicit\n or implicit calendar type given by the\n locale.\n\n In addition to the available calendar types returned by the\n Calendar.getAvailableCalendarTypes\n method, \"gregorian\" and \"iso8601\" as aliases of\n \"gregory\" can be used with this method."}, {"method_name": "setLocale", "method_sig": "public Calendar.Builder setLocale (Locale locale)", "description": "Sets the locale parameter to the given locale. If no locale\n is given to this Calendar.Builder, the default Locale\n for Locale.Category.FORMAT will be used.\n\n If no calendar type is explicitly given by a call to the\n setCalendarType method,\n the Locale value is used to determine what type of\n Calendar to be built.\n\n If no week definition parameters are explicitly given by a call to\n the setWeekDefinition method, the\n Locale's default values are used."}, {"method_name": "setWeekDefinition", "method_sig": "public Calendar.Builder setWeekDefinition (int firstDayOfWeek,\n                                          int minimalDaysInFirstWeek)", "description": "Sets the week definition parameters to the values given by\n firstDayOfWeek and minimalDaysInFirstWeek that are\n used to determine the first\n week of a year. The parameters given by this method have\n precedence over the default values given by the\n locale."}, {"method_name": "build", "method_sig": "public Calendar build()", "description": "Returns a Calendar built from the parameters set by the\n setter methods. The calendar type given by the setCalendarType method or the locale is\n used to determine what Calendar to be created. If no explicit\n calendar type is given, the locale's default calendar is created.\n\n If the calendar type is \"iso8601\", the\n Gregorian change date\n of a GregorianCalendar is set to Date(Long.MIN_VALUE)\n to be the proleptic Gregorian calendar. Its week definition\n parameters are also set to be compatible\n with the ISO 8601 standard. Note that the\n getCalendarType method of\n a GregorianCalendar created with \"iso8601\" returns\n \"gregory\".\n\n The default values are used for locale and time zone if these\n parameters haven't been given explicitly.\n \n If the locale contains the time zone with \"tz\"\n Unicode extension,\n and time zone hasn't been given explicitly, time zone in the locale\n is used.\n\n Any out of range field values are either normalized in lenient\n mode or detected as an invalid value in non-lenient mode."}]}