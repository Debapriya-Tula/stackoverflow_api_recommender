{"name": "Class QuadCurve2D.Float", "module": "java.desktop", "package": "java.awt.geom", "text": "A quadratic parametric curve segment specified with\n float coordinates.", "codes": ["public static class QuadCurve2D.Float\nextends QuadCurve2D\nimplements Serializable"], "fields": [{"field_name": "x1", "field_sig": "public\u00a0float x1", "description": "The X coordinate of the start point of the quadratic curve\n segment."}, {"field_name": "y1", "field_sig": "public\u00a0float y1", "description": "The Y coordinate of the start point of the quadratic curve\n segment."}, {"field_name": "ctrlx", "field_sig": "public\u00a0float ctrlx", "description": "The X coordinate of the control point of the quadratic curve\n segment."}, {"field_name": "ctrly", "field_sig": "public\u00a0float ctrly", "description": "The Y coordinate of the control point of the quadratic curve\n segment."}, {"field_name": "x2", "field_sig": "public\u00a0float x2", "description": "The X coordinate of the end point of the quadratic curve\n segment."}, {"field_name": "y2", "field_sig": "public\u00a0float y2", "description": "The Y coordinate of the end point of the quadratic curve\n segment."}], "methods": [{"method_name": "getX1", "method_sig": "public double getX1()", "description": "Returns the X coordinate of the start point in\n double in precision."}, {"method_name": "getY1", "method_sig": "public double getY1()", "description": "Returns the Y coordinate of the start point in\n double precision."}, {"method_name": "getP1", "method_sig": "public Point2D getP1()", "description": "Returns the start point."}, {"method_name": "getCtrlX", "method_sig": "public double getCtrlX()", "description": "Returns the X coordinate of the control point in\n double precision."}, {"method_name": "getCtrlY", "method_sig": "public double getCtrlY()", "description": "Returns the Y coordinate of the control point in\n double precision."}, {"method_name": "getCtrlPt", "method_sig": "public Point2D getCtrlPt()", "description": "Returns the control point."}, {"method_name": "getX2", "method_sig": "public double getX2()", "description": "Returns the X coordinate of the end point in\n double precision."}, {"method_name": "getY2", "method_sig": "public double getY2()", "description": "Returns the Y coordinate of the end point in\n double precision."}, {"method_name": "getP2", "method_sig": "public Point2D getP2()", "description": "Returns the end point."}, {"method_name": "setCurve", "method_sig": "public void setCurve (double x1,\n                     double y1,\n                     double ctrlx,\n                     double ctrly,\n                     double x2,\n                     double y2)", "description": "Sets the location of the end points and control point of this curve\n to the specified double coordinates."}, {"method_name": "setCurve", "method_sig": "public void setCurve (float x1,\n                     float y1,\n                     float ctrlx,\n                     float ctrly,\n                     float x2,\n                     float y2)", "description": "Sets the location of the end points and control point of this curve\n to the specified float coordinates."}, {"method_name": "getBounds2D", "method_sig": "public Rectangle2D getBounds2D()", "description": "Returns a high precision and more accurate bounding box of\n the Shape than the getBounds method.\n Note that there is no guarantee that the returned\n Rectangle2D is the smallest bounding box that encloses\n the Shape, only that the Shape lies\n entirely within the indicated Rectangle2D.  The\n bounding box returned by this method is usually tighter than that\n returned by the getBounds method and never fails due\n to overflow problems since the return value can be an instance of\n the Rectangle2D that uses double precision values to\n store the dimensions.\n\n \n Note that the\n \n definition of insideness can lead to situations where points\n on the defining outline of the shape may not be considered\n contained in the returned bounds object, but only in cases\n where those points are also not considered contained in the original\n shape.\n \n\n If a point is inside the shape according to the\n contains(point) method, then it must\n be inside the returned Rectangle2D bounds object according\n to the contains(point) method of the\n bounds. Specifically:\n \n\nshape.contains(p) requires bounds.contains(p)\n\n\n If a point is not inside the shape, then it might\n still be contained in the bounds object:\n \n\nbounds.contains(p) does not imply shape.contains(p)\n"}]}