{"name": "Class MouseEvent", "module": "java.desktop", "package": "java.awt.event", "text": "An event which indicates that a mouse action occurred in a component.\n A mouse action is considered to occur in a particular component if and only\n if the mouse cursor is over the unobscured part of the component's bounds\n when the action happens.\n For lightweight components, such as Swing's components, mouse events\n are only dispatched to the component if the mouse event type has been\n enabled on the component. A mouse event type is enabled by adding the\n appropriate mouse-based EventListener to the component\n (MouseListener or MouseMotionListener), or by invoking\n Component.enableEvents(long) with the appropriate mask parameter\n (AWTEvent.MOUSE_EVENT_MASK or AWTEvent.MOUSE_MOTION_EVENT_MASK).\n If the mouse event type has not been enabled on the component, the\n corresponding mouse events are dispatched to the first ancestor that\n has enabled the mouse event type.\n\n For example, if a MouseListener has been added to a component, or\n enableEvents(AWTEvent.MOUSE_EVENT_MASK) has been invoked, then all\n the events defined by MouseListener are dispatched to the component.\n On the other hand, if a MouseMotionListener has not been added and\n enableEvents has not been invoked with\n AWTEvent.MOUSE_MOTION_EVENT_MASK, then mouse motion events are not\n dispatched to the component. Instead the mouse motion events are\n dispatched to the first ancestors that has enabled mouse motion\n events.\n \n This low-level event is generated by a component object for:\n \nMouse Events\n     \na mouse button is pressed\n     a mouse button is released\n     a mouse button is clicked (pressed and released)\n     the mouse cursor enters the unobscured part of component's geometry\n     the mouse cursor exits the unobscured part of component's geometry\n     \n Mouse Motion Events\n     \nthe mouse is moved\n     the mouse is dragged\n     \n\n\n A MouseEvent object is passed to every\n MouseListener\n or MouseAdapter object which is registered to receive\n the \"interesting\" mouse events using the component's\n addMouseListener method.\n (MouseAdapter objects implement the\n MouseListener interface.) Each such listener object\n gets a MouseEvent containing the mouse event.\n \n A MouseEvent object is also passed to every\n MouseMotionListener or\n MouseMotionAdapter object which is registered to receive\n mouse motion events using the component's\n addMouseMotionListener\n method. (MouseMotionAdapter objects implement the\n MouseMotionListener interface.) Each such listener object\n gets a MouseEvent containing the mouse motion event.\n \n When a mouse button is clicked, events are generated and sent to the\n registered MouseListeners.\n The state of modal keys can be retrieved using InputEvent.getModifiers()\n and InputEvent.getModifiersEx().\n The button mask returned by InputEvent.getModifiers() reflects\n only the button that changed state, not the current state of all buttons.\n (Note: Due to overlap in the values of ALT_MASK/BUTTON2_MASK and\n META_MASK/BUTTON3_MASK, this is not always true for mouse events involving\n modifier keys).\n To get the state of all buttons and modifier keys, use\n InputEvent.getModifiersEx().\n The button which has changed state is returned by getButton()\n\n For example, if the first mouse button is pressed, events are sent in the\n following order:\n \n    id              modifiers    button\n    MOUSE_PRESSED:  BUTTON1_MASK BUTTON1\n    MOUSE_RELEASED: BUTTON1_MASK BUTTON1\n    MOUSE_CLICKED:  BUTTON1_MASK BUTTON1\n \n When multiple mouse buttons are pressed, each press, release, and click\n results in a separate event.\n \n For example, if the user presses button 1 followed by\n button 2, and then releases them in the same order,\n the following sequence of events is generated:\n \n    id              modifiers    button\n    MOUSE_PRESSED:  BUTTON1_MASK BUTTON1\n    MOUSE_PRESSED:  BUTTON2_MASK BUTTON2\n    MOUSE_RELEASED: BUTTON1_MASK BUTTON1\n    MOUSE_CLICKED:  BUTTON1_MASK BUTTON1\n    MOUSE_RELEASED: BUTTON2_MASK BUTTON2\n    MOUSE_CLICKED:  BUTTON2_MASK BUTTON2\n \n If button 2 is released first, the\n MOUSE_RELEASED/MOUSE_CLICKED pair\n for BUTTON2_MASK arrives first,\n followed by the pair for BUTTON1_MASK.\n \n Some extra mouse buttons are added to extend the standard set of buttons\n represented by the following constants:BUTTON1, BUTTON2, and BUTTON3.\n Extra buttons have no assigned BUTTONx\n constants as well as their button masks have no assigned BUTTONx_DOWN_MASK\n constants. Nevertheless, ordinal numbers starting from 4 may be\n used as button numbers (button ids). Values obtained by the\n getMaskForButton(button) method may be used\n as button masks.\n \nMOUSE_DRAGGED events are delivered to the Component\n in which the mouse button was pressed until the mouse button is released\n (regardless of whether the mouse position is within the bounds of the\n Component).  Due to platform-dependent Drag&Drop implementations,\n MOUSE_DRAGGED events may not be delivered during a native\n Drag&Drop operation.\n\n In a multi-screen environment mouse drag events are delivered to the\n Component even if the mouse position is outside the bounds of the\n GraphicsConfiguration associated with that\n Component. However, the reported position for mouse drag events\n in this case may differ from the actual mouse position:\n \nIn a multi-screen environment without a virtual device:\n \n The reported coordinates for mouse drag events are clipped to fit within the\n bounds of the GraphicsConfiguration associated with\n the Component.\n In a multi-screen environment with a virtual device:\n \n The reported coordinates for mouse drag events are clipped to fit within the\n bounds of the virtual device associated with the Component.\n \n\n An unspecified behavior will be caused if the id parameter\n of any particular MouseEvent instance is not\n in the range from MOUSE_FIRST to MOUSE_LAST-1\n (MOUSE_WHEEL is not acceptable).", "codes": ["public class MouseEvent\nextends InputEvent"], "fields": [{"field_name": "MOUSE_FIRST", "field_sig": "public static final\u00a0int MOUSE_FIRST", "description": "The first number in the range of ids used for mouse events."}, {"field_name": "MOUSE_LAST", "field_sig": "public static final\u00a0int MOUSE_LAST", "description": "The last number in the range of ids used for mouse events."}, {"field_name": "MOUSE_CLICKED", "field_sig": "public static final\u00a0int MOUSE_CLICKED", "description": "The \"mouse clicked\" event. This MouseEvent\n occurs when a mouse button is pressed and released."}, {"field_name": "MOUSE_PRESSED", "field_sig": "public static final\u00a0int MOUSE_PRESSED", "description": "The \"mouse pressed\" event. This MouseEvent\n occurs when a mouse button is pushed down."}, {"field_name": "MOUSE_RELEASED", "field_sig": "public static final\u00a0int MOUSE_RELEASED", "description": "The \"mouse released\" event. This MouseEvent\n occurs when a mouse button is let up."}, {"field_name": "MOUSE_MOVED", "field_sig": "public static final\u00a0int MOUSE_MOVED", "description": "The \"mouse moved\" event. This MouseEvent\n occurs when the mouse position changes."}, {"field_name": "MOUSE_ENTERED", "field_sig": "public static final\u00a0int MOUSE_ENTERED", "description": "The \"mouse entered\" event. This MouseEvent\n occurs when the mouse cursor enters the unobscured part of component's\n geometry."}, {"field_name": "MOUSE_EXITED", "field_sig": "public static final\u00a0int MOUSE_EXITED", "description": "The \"mouse exited\" event. This MouseEvent\n occurs when the mouse cursor exits the unobscured part of component's\n geometry."}, {"field_name": "MOUSE_DRAGGED", "field_sig": "public static final\u00a0int MOUSE_DRAGGED", "description": "The \"mouse dragged\" event. This MouseEvent\n occurs when the mouse position changes while a mouse button is pressed."}, {"field_name": "MOUSE_WHEEL", "field_sig": "public static final\u00a0int MOUSE_WHEEL", "description": "The \"mouse wheel\" event.  This is the only MouseWheelEvent.\n It occurs when a mouse equipped with a wheel has its wheel rotated."}, {"field_name": "NOBUTTON", "field_sig": "public static final\u00a0int NOBUTTON", "description": "Indicates no mouse buttons; used by getButton()."}, {"field_name": "BUTTON1", "field_sig": "public static final\u00a0int BUTTON1", "description": "Indicates mouse button #1; used by getButton()."}, {"field_name": "BUTTON2", "field_sig": "public static final\u00a0int BUTTON2", "description": "Indicates mouse button #2; used by getButton()."}, {"field_name": "BUTTON3", "field_sig": "public static final\u00a0int BUTTON3", "description": "Indicates mouse button #3; used by getButton()."}], "methods": [{"method_name": "getLocationOnScreen", "method_sig": "public Point getLocationOnScreen()", "description": "Returns the absolute x, y position of the event.\n In a virtual device multi-screen environment in which the\n desktop area could span multiple physical screen devices,\n these coordinates are relative to the virtual coordinate system.\n Otherwise, these coordinates are relative to the coordinate system\n associated with the Component's GraphicsConfiguration."}, {"method_name": "getXOnScreen", "method_sig": "public int getXOnScreen()", "description": "Returns the absolute horizontal x position of the event.\n In a virtual device multi-screen environment in which the\n desktop area could span multiple physical screen devices,\n this coordinate is relative to the virtual coordinate system.\n Otherwise, this coordinate is relative to the coordinate system\n associated with the Component's GraphicsConfiguration."}, {"method_name": "getYOnScreen", "method_sig": "public int getYOnScreen()", "description": "Returns the absolute vertical y position of the event.\n In a virtual device multi-screen environment in which the\n desktop area could span multiple physical screen devices,\n this coordinate is relative to the virtual coordinate system.\n Otherwise, this coordinate is relative to the coordinate system\n associated with the Component's GraphicsConfiguration."}, {"method_name": "getX", "method_sig": "public int getX()", "description": "Returns the horizontal x position of the event relative to the\n source component."}, {"method_name": "getY", "method_sig": "public int getY()", "description": "Returns the vertical y position of the event relative to the\n source component."}, {"method_name": "getPoint", "method_sig": "public Point getPoint()", "description": "Returns the x,y position of the event relative to the source component."}, {"method_name": "translatePoint", "method_sig": "public void translatePoint (int x,\n                           int y)", "description": "Translates the event's coordinates to a new position\n by adding specified x (horizontal) and y\n (vertical) offsets."}, {"method_name": "getClickCount", "method_sig": "public int getClickCount()", "description": "Returns the number of mouse clicks associated with this event."}, {"method_name": "getButton", "method_sig": "public int getButton()", "description": "Returns which, if any, of the mouse buttons has changed state.\n The returned value is ranged\n from 0 to the MouseInfo.getNumberOfButtons()\n value.\n The returned value includes at least the following constants:\n \n NOBUTTON\n BUTTON1\n BUTTON2\n BUTTON3\n\n It is allowed to use those constants to compare with the returned button number in the application.\n For example,\n \n if (anEvent.getButton() == MouseEvent.BUTTON1) {\n \n In particular, for a mouse with one, two, or three buttons this method may return the following values:\n \n 0 (NOBUTTON)\n  1 (BUTTON1)\n  2 (BUTTON2)\n  3 (BUTTON3)\n \n Button numbers greater than BUTTON3 have no constant identifier.\n So if a mouse with five buttons is\n installed, this method may return the following values:\n \n 0 (NOBUTTON)\n  1 (BUTTON1)\n  2 (BUTTON2)\n  3 (BUTTON3)\n  4\n  5\n \n\n Note: If support for extended mouse buttons is disabled by Java\n then the AWT event subsystem does not produce mouse events for the extended mouse\n buttons. So it is not expected that this method returns anything except NOBUTTON, BUTTON1,\n BUTTON2, BUTTON3."}, {"method_name": "isPopupTrigger", "method_sig": "public boolean isPopupTrigger()", "description": "Returns whether or not this mouse event is the popup menu\n trigger event for the platform.\n Note: Popup menus are triggered differently\n on different systems. Therefore, isPopupTrigger\n should be checked in both mousePressed\n and mouseReleased\n for proper cross-platform functionality."}, {"method_name": "getMouseModifiersText", "method_sig": "public static String getMouseModifiersText (int modifiers)", "description": "Returns a String instance describing the modifier keys and\n mouse buttons that were down during the event, such as \"Shift\",\n or \"Ctrl+Shift\". These strings can be localized by changing\n the awt.properties file.\n \n Note that the InputEvent.ALT_MASK and\n InputEvent.BUTTON2_MASK have equal values,\n so the \"Alt\" string is returned for both modifiers.  Likewise,\n the InputEvent.META_MASK and\n InputEvent.BUTTON3_MASK have equal values,\n so the \"Meta\" string is returned for both modifiers.\n \n Note that passing negative parameter is incorrect,\n and will cause the returning an unspecified string.\n Zero parameter means that no modifiers were passed and will\n cause the returning an empty string."}, {"method_name": "paramString", "method_sig": "public String paramString()", "description": "Returns a parameter string identifying this event.\n This method is useful for event-logging and for debugging."}]}