{"name": "Class UUID", "module": "java.base", "package": "java.util", "text": "A class that represents an immutable universally unique identifier (UUID).\n A UUID represents a 128-bit value.\n\n  There exist different variants of these global identifiers.  The methods\n of this class are for manipulating the Leach-Salz variant, although the\n constructors allow the creation of any variant of UUID (described below).\n\n  The layout of a variant 2 (Leach-Salz) UUID is as follows:\n\n The most significant long consists of the following unsigned fields:\n \n 0xFFFFFFFF00000000 time_low\n 0x00000000FFFF0000 time_mid\n 0x000000000000F000 version\n 0x0000000000000FFF time_hi\n \n The least significant long consists of the following unsigned fields:\n \n 0xC000000000000000 variant\n 0x3FFF000000000000 clock_seq\n 0x0000FFFFFFFFFFFF node\n \n The variant field contains a value which identifies the layout of the\n UUID.  The bit layout described above is valid only for a \n UUID with a variant value of 2, which indicates the Leach-Salz variant.\n\n  The version field holds a value that describes the type of this \n UUID.  There are four different basic types of UUIDs: time-based, DCE\n security, name-based, and randomly generated UUIDs.  These types have a\n version value of 1, 2, 3 and 4, respectively.\n\n  For more information including algorithms used to create UUIDs,\n see  RFC\u00a04122: A\n Universally Unique IDentifier (UUID) URN Namespace, section 4.2\n \"Algorithms for Creating a Time-Based UUID\".", "codes": ["public final class UUID\nextends Object\nimplements Serializable, Comparable<UUID>"], "fields": [], "methods": [{"method_name": "randomUUID", "method_sig": "public static UUID randomUUID()", "description": "Static factory to retrieve a type 4 (pseudo randomly generated) UUID.\n\n The UUID is generated using a cryptographically strong pseudo\n random number generator."}, {"method_name": "nameUUIDFromBytes", "method_sig": "public static UUID nameUUIDFromBytes (byte[] name)", "description": "Static factory to retrieve a type 3 (name based) UUID based on\n the specified byte array."}, {"method_name": "fromString", "method_sig": "public static UUID fromString (String name)", "description": "Creates a UUID from the string standard representation as\n described in the toString() method."}, {"method_name": "getLeastSignificantBits", "method_sig": "public long getLeastSignificantBits()", "description": "Returns the least significant 64 bits of this UUID's 128 bit value."}, {"method_name": "getMostSignificantBits", "method_sig": "public long getMostSignificantBits()", "description": "Returns the most significant 64 bits of this UUID's 128 bit value."}, {"method_name": "version", "method_sig": "public int version()", "description": "The version number associated with this UUID.  The version\n number describes how this UUID was generated.\n\n The version number has the following meaning:\n \n1    Time-based UUID\n 2    DCE security UUID\n 3    Name-based UUID\n 4    Randomly generated UUID\n "}, {"method_name": "variant", "method_sig": "public int variant()", "description": "The variant number associated with this UUID.  The variant\n number describes the layout of the UUID.\n\n The variant number has the following meaning:\n \n0    Reserved for NCS backward compatibility\n 2    IETF\u00a0RFC\u00a04122\n (Leach-Salz), used by this class\n 6    Reserved, Microsoft Corporation backward compatibility\n 7    Reserved for future definition\n "}, {"method_name": "timestamp", "method_sig": "public long timestamp()", "description": "The timestamp value associated with this UUID.\n\n  The 60 bit timestamp value is constructed from the time_low,\n time_mid, and time_hi fields of this UUID.  The resulting\n timestamp is measured in 100-nanosecond units since midnight,\n October 15, 1582 UTC.\n\n  The timestamp value is only meaningful in a time-based UUID, which\n has version type 1.  If this UUID is not a time-based UUID then\n this method throws UnsupportedOperationException."}, {"method_name": "clockSequence", "method_sig": "public int clockSequence()", "description": "The clock sequence value associated with this UUID.\n\n  The 14 bit clock sequence value is constructed from the clock\n sequence field of this UUID.  The clock sequence field is used to\n guarantee temporal uniqueness in a time-based UUID.\n\n  The clockSequence value is only meaningful in a time-based\n UUID, which has version type 1.  If this UUID is not a time-based UUID\n then this method throws UnsupportedOperationException."}, {"method_name": "node", "method_sig": "public long node()", "description": "The node value associated with this UUID.\n\n  The 48 bit node value is constructed from the node field of this\n UUID.  This field is intended to hold the IEEE 802 address of the machine\n that generated this UUID to guarantee spatial uniqueness.\n\n  The node value is only meaningful in a time-based UUID, which has\n version type 1.  If this UUID is not a time-based UUID then this method\n throws UnsupportedOperationException."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a String object representing this UUID.\n\n  The UUID string representation is as described by this BNF:\n \n \n UUID                   = <time_low> \"-\" <time_mid> \"-\"\n                          <time_high_and_version> \"-\"\n                          <variant_and_sequence> \"-\"\n                          <node>\n time_low               = 4*<hexOctet>\n time_mid               = 2*<hexOctet>\n time_high_and_version  = 2*<hexOctet>\n variant_and_sequence   = 2*<hexOctet>\n node                   = 6*<hexOctet>\n hexOctet               = <hexDigit><hexDigit>\n hexDigit               =\n       \"0\" | \"1\" | \"2\" | \"3\" | \"4\" | \"5\" | \"6\" | \"7\" | \"8\" | \"9\"\n       | \"a\" | \"b\" | \"c\" | \"d\" | \"e\" | \"f\"\n       | \"A\" | \"B\" | \"C\" | \"D\" | \"E\" | \"F\"\n "}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Returns a hash code for this UUID."}, {"method_name": "equals", "method_sig": "public boolean equals (Object obj)", "description": "Compares this object to the specified object.  The result is \n true if and only if the argument is not null, is a UUID\n object, has the same variant, and contains the same value, bit for bit,\n as this UUID."}, {"method_name": "compareTo", "method_sig": "public int compareTo (UUID val)", "description": "Compares this UUID with the specified UUID.\n\n  The first of two UUIDs is greater than the second if the most\n significant field in which the UUIDs differ is greater for the first\n UUID."}]}