{"name": "Interface NodeFilter", "module": "java.xml", "package": "org.w3c.dom.traversal", "text": "Filters are objects that know how to \"filter out\" nodes. If a\n NodeIterator or TreeWalker is given a\n NodeFilter, it applies the filter before it returns the next\n node. If the filter says to accept the node, the traversal logic returns\n it; otherwise, traversal looks for the next node and pretends that the\n node that was rejected was not there.\n The DOM does not provide any filters. NodeFilter is just an\n interface that users can implement to provide their own filters.\n NodeFilters do not need to know how to traverse from node\n to node, nor do they need to know anything about the data structure that\n is being traversed. This makes it very easy to write filters, since the\n only thing they have to know how to do is evaluate a single node. One\n filter may be used with a number of different kinds of traversals,\n encouraging code reuse.\n See also the Document Object Model (DOM) Level 2 Traversal and Range Specification.", "codes": ["public interface NodeFilter"], "fields": [{"field_name": "FILTER_ACCEPT", "field_sig": "static final\u00a0short FILTER_ACCEPT", "description": "Accept the node. Navigation methods defined for\n NodeIterator or TreeWalker will return this\n node."}, {"field_name": "FILTER_REJECT", "field_sig": "static final\u00a0short FILTER_REJECT", "description": "Reject the node. Navigation methods defined for\n NodeIterator or TreeWalker will not return\n this node. For TreeWalker, the children of this node\n will also be rejected. NodeIterators treat this as a\n synonym for FILTER_SKIP."}, {"field_name": "FILTER_SKIP", "field_sig": "static final\u00a0short FILTER_SKIP", "description": "Skip this single node. Navigation methods defined for\n NodeIterator or TreeWalker will not return\n this node. For both NodeIterator and\n TreeWalker, the children of this node will still be\n considered."}, {"field_name": "SHOW_ALL", "field_sig": "static final\u00a0int SHOW_ALL", "description": "Show all Nodes."}, {"field_name": "SHOW_ELEMENT", "field_sig": "static final\u00a0int SHOW_ELEMENT", "description": "Show Element nodes."}, {"field_name": "SHOW_ATTRIBUTE", "field_sig": "static final\u00a0int SHOW_ATTRIBUTE", "description": "Show Attr nodes. This is meaningful only when creating an\n NodeIterator or TreeWalker with an\n attribute node as its root; in this case, it means that\n the attribute node will appear in the first position of the iteration\n or traversal. Since attributes are never children of other nodes,\n they do not appear when traversing over the document tree."}, {"field_name": "SHOW_TEXT", "field_sig": "static final\u00a0int SHOW_TEXT", "description": "Show Text nodes."}, {"field_name": "SHOW_CDATA_SECTION", "field_sig": "static final\u00a0int SHOW_CDATA_SECTION", "description": "Show CDATASection nodes."}, {"field_name": "SHOW_ENTITY_REFERENCE", "field_sig": "static final\u00a0int SHOW_ENTITY_REFERENCE", "description": "Show EntityReference nodes."}, {"field_name": "SHOW_ENTITY", "field_sig": "static final\u00a0int SHOW_ENTITY", "description": "Show Entity nodes. This is meaningful only when creating\n an NodeIterator or TreeWalker with an\n Entity node as its root; in this case, it\n means that the Entity node will appear in the first\n position of the traversal. Since entities are not part of the\n document tree, they do not appear when traversing over the document\n tree."}, {"field_name": "SHOW_PROCESSING_INSTRUCTION", "field_sig": "static final\u00a0int SHOW_PROCESSING_INSTRUCTION", "description": "Show ProcessingInstruction nodes."}, {"field_name": "SHOW_COMMENT", "field_sig": "static final\u00a0int SHOW_COMMENT", "description": "Show Comment nodes."}, {"field_name": "SHOW_DOCUMENT", "field_sig": "static final\u00a0int SHOW_DOCUMENT", "description": "Show Document nodes."}, {"field_name": "SHOW_DOCUMENT_TYPE", "field_sig": "static final\u00a0int SHOW_DOCUMENT_TYPE", "description": "Show DocumentType nodes."}, {"field_name": "SHOW_DOCUMENT_FRAGMENT", "field_sig": "static final\u00a0int SHOW_DOCUMENT_FRAGMENT", "description": "Show DocumentFragment nodes."}, {"field_name": "SHOW_NOTATION", "field_sig": "static final\u00a0int SHOW_NOTATION", "description": "Show Notation nodes. This is meaningful only when creating\n an NodeIterator or TreeWalker with a\n Notation node as its root; in this case, it\n means that the Notation node will appear in the first\n position of the traversal. Since notations are not part of the\n document tree, they do not appear when traversing over the document\n tree."}], "methods": [{"method_name": "acceptNode", "method_sig": "short acceptNode (Node n)", "description": "Test whether a specified node is visible in the logical view of a\n TreeWalker or NodeIterator. This function\n will be called by the implementation of TreeWalker and\n NodeIterator; it is not normally called directly from\n user code. (Though you could do so if you wanted to use the same\n filter to guide your own application logic.)"}]}