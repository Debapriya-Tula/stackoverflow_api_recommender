{"name": "Class SwingUtilities", "module": "java.desktop", "package": "javax.swing", "text": "A collection of utility methods for Swing.", "codes": ["public class SwingUtilities\nextends Object\nimplements SwingConstants"], "fields": [], "methods": [{"method_name": "isRectangleContainingRectangle", "method_sig": "public static final boolean isRectangleContainingRectangle (Rectangle a,\n                                                           Rectangle b)", "description": "Return true if @{code a} contains b"}, {"method_name": "getLocalBounds", "method_sig": "public static Rectangle getLocalBounds (Component aComponent)", "description": "Return the rectangle (0,0,bounds.width,bounds.height) for the component aComponent"}, {"method_name": "getWindowAncestor", "method_sig": "public static Window getWindowAncestor (Component c)", "description": "Returns the first Window  ancestor of c, or\n null if c is not contained inside a Window."}, {"method_name": "convertPoint", "method_sig": "public static Point convertPoint (Component source,\n                                 Point aPoint,\n                                 Component destination)", "description": "Convert a aPoint in source coordinate system to\n destination coordinate system.\n If source is null, aPoint is assumed to be in destination's\n root component coordinate system.\n If destination is null, aPoint will be converted to source's\n root component coordinate system.\n If both source and destination are null, return aPoint\n without any conversion."}, {"method_name": "convertPoint", "method_sig": "public static Point convertPoint (Component source,\n                                 int x,\n                                 int y,\n                                 Component destination)", "description": "Convert the point (x,y) in source coordinate system to\n destination coordinate system.\n If source is null, (x,y) is assumed to be in destination's\n root component coordinate system.\n If destination is null, (x,y) will be converted to source's\n root component coordinate system.\n If both source and destination are null, return (x,y)\n without any conversion."}, {"method_name": "convertRectangle", "method_sig": "public static Rectangle convertRectangle (Component source,\n                                         Rectangle aRectangle,\n                                         Component destination)", "description": "Convert the rectangle aRectangle in source coordinate system to\n destination coordinate system.\n If source is null, aRectangle is assumed to be in destination's\n root component coordinate system.\n If destination is null, aRectangle will be converted to source's\n root component coordinate system.\n If both source and destination are null, return aRectangle\n without any conversion."}, {"method_name": "getAncestorOfClass", "method_sig": "public static Container getAncestorOfClass (Class<?> c,\n                                           Component comp)", "description": "Convenience method for searching above comp in the\n component hierarchy and returns the first object of class c it\n finds. Can return null, if a class c cannot be found."}, {"method_name": "getAncestorNamed", "method_sig": "public static Container getAncestorNamed (String name,\n                                         Component comp)", "description": "Convenience method for searching above comp in the\n component hierarchy and returns the first object of name it\n finds. Can return null, if name cannot be found."}, {"method_name": "getDeepestComponentAt", "method_sig": "public static Component getDeepestComponentAt (Component parent,\n                                              int x,\n                                              int y)", "description": "Returns the deepest visible descendent Component of parent\n that contains the location x, y.\n If parent does not contain the specified location,\n then null is returned.  If parent is not a\n container, or none of parent's visible descendents\n contain the specified location, parent is returned."}, {"method_name": "convertMouseEvent", "method_sig": "public static MouseEvent convertMouseEvent (Component source,\n                                           MouseEvent sourceEvent,\n                                           Component destination)", "description": "Returns a MouseEvent similar to sourceEvent except that its x\n and y members have been converted to destination's coordinate\n system.  If source is null, sourceEvent x and y members\n are assumed to be into destination's root component coordinate system.\n If destination is null, the\n returned MouseEvent will be in source's coordinate system.\n sourceEvent will not be changed. A new event is returned.\n the source field of the returned event will be set\n to destination if destination is non-null\n use the translateMouseEvent() method to translate a mouse event from\n one component to another without changing the source."}, {"method_name": "convertPointToScreen", "method_sig": "public static void convertPointToScreen (Point p,\n                                        Component c)", "description": "Convert a point from a component's coordinate system to\n screen coordinates."}, {"method_name": "convertPointFromScreen", "method_sig": "public static void convertPointFromScreen (Point p,\n                                          Component c)", "description": "Convert a point from a screen coordinates to a component's\n coordinate system"}, {"method_name": "windowForComponent", "method_sig": "public static Window windowForComponent (Component c)", "description": "Returns the first Window  ancestor of c, or\n null if c is not contained inside a Window.\n \n Note: This method provides the same functionality as\n getWindowAncestor."}, {"method_name": "isDescendingFrom", "method_sig": "public static boolean isDescendingFrom (Component a,\n                                       Component b)", "description": "Return true if a component a descends from a component b"}, {"method_name": "computeIntersection", "method_sig": "public static Rectangle computeIntersection (int x,\n                                            int y,\n                                            int width,\n                                            int height,\n                                            Rectangle dest)", "description": "Convenience to calculate the intersection of two rectangles\n without allocating a new rectangle.\n If the two rectangles don't intersect,\n then the returned rectangle begins at (0,0)\n and has zero width and height."}, {"method_name": "computeUnion", "method_sig": "public static Rectangle computeUnion (int x,\n                                     int y,\n                                     int width,\n                                     int height,\n                                     Rectangle dest)", "description": "Convenience method that calculates the union of two rectangles\n without allocating a new rectangle."}, {"method_name": "computeDifference", "method_sig": "public static Rectangle[] computeDifference (Rectangle rectA,\n                                            Rectangle rectB)", "description": "Convenience returning an array of rect representing the regions within\n rectA that do not overlap with rectB. If the\n two Rects do not overlap, returns an empty array"}, {"method_name": "isLeftMouseButton", "method_sig": "public static boolean isLeftMouseButton (MouseEvent anEvent)", "description": "Returns true if the mouse event specifies the left mouse button."}, {"method_name": "isMiddleMouseButton", "method_sig": "public static boolean isMiddleMouseButton (MouseEvent anEvent)", "description": "Returns true if the mouse event specifies the middle mouse button."}, {"method_name": "isRightMouseButton", "method_sig": "public static boolean isRightMouseButton (MouseEvent anEvent)", "description": "Returns true if the mouse event specifies the right mouse button."}, {"method_name": "computeStringWidth", "method_sig": "public static int computeStringWidth (FontMetrics fm,\n                                     String str)", "description": "Compute the width of the string using a font with the specified\n \"metrics\" (sizes)."}, {"method_name": "layoutCompoundLabel", "method_sig": "public static String layoutCompoundLabel (JComponent c,\n                                         FontMetrics fm,\n                                         String text,\n                                         Icon icon,\n                                         int verticalAlignment,\n                                         int horizontalAlignment,\n                                         int verticalTextPosition,\n                                         int horizontalTextPosition,\n                                         Rectangle viewR,\n                                         Rectangle iconR,\n                                         Rectangle textR,\n                                         int textIconGap)", "description": "Compute and return the location of the icons origin, the\n location of origin of the text baseline, and a possibly clipped\n version of the compound labels string.  Locations are computed\n relative to the viewR rectangle.\n The JComponents orientation (LEADING/TRAILING) will also be taken\n into account and translated into LEFT/RIGHT values accordingly."}, {"method_name": "layoutCompoundLabel", "method_sig": "public static String layoutCompoundLabel (FontMetrics fm,\n                                         String text,\n                                         Icon icon,\n                                         int verticalAlignment,\n                                         int horizontalAlignment,\n                                         int verticalTextPosition,\n                                         int horizontalTextPosition,\n                                         Rectangle viewR,\n                                         Rectangle iconR,\n                                         Rectangle textR,\n                                         int textIconGap)", "description": "Compute and return the location of the icons origin, the\n location of origin of the text baseline, and a possibly clipped\n version of the compound labels string.  Locations are computed\n relative to the viewR rectangle.\n This layoutCompoundLabel() does not know how to handle LEADING/TRAILING\n values in horizontalTextPosition (they will default to RIGHT) and in\n horizontalAlignment (they will default to CENTER).\n Use the other version of layoutCompoundLabel() instead."}, {"method_name": "paintComponent", "method_sig": "public static void paintComponent (Graphics g,\n                                  Component c,\n                                  Container p,\n                                  int x,\n                                  int y,\n                                  int w,\n                                  int h)", "description": "Paints a component to the specified Graphics.\n This method is primarily useful to render\n Components that don't exist as part of the visible\n containment hierarchy, but are used for rendering.  For\n example, if you are doing your own rendering and want to render\n some text (or even HTML), you could make use of\n JLabel's text rendering support and have it paint\n directly by way of this method, without adding the label to the\n visible containment hierarchy.\n \n This method makes use of CellRendererPane to handle\n the actual painting, and is only recommended if you use one\n component for rendering.  If you make use of multiple components\n to handle the rendering, as JTable does, use\n CellRendererPane directly.  Otherwise, as described\n below, you could end up with a CellRendererPane\n per Component.\n \n If c's parent is not a CellRendererPane,\n a new CellRendererPane is created, c is\n added to it, and the CellRendererPane is added to\n p.  If c's parent is a\n CellRendererPane and the CellRendererPanes\n parent is not p, it is added to p.\n \n The component should either descend from JComponent\n or be another kind of lightweight component.\n A lightweight component is one whose \"lightweight\" property\n (returned by the Component\nisLightweight method)\n is true. If the Component is not lightweight, bad things map happen:\n crashes, exceptions, painting problems..."}, {"method_name": "paintComponent", "method_sig": "public static void paintComponent (Graphics g,\n                                  Component c,\n                                  Container p,\n                                  Rectangle r)", "description": "Paints a component to the specified Graphics.  This\n is a cover method for\n paintComponent(Graphics,Component,Container,int,int,int,int).\n Refer to it for more information."}, {"method_name": "updateComponentTreeUI", "method_sig": "public static void updateComponentTreeUI (Component c)", "description": "A simple minded look and feel change: ask each node in the tree\n to updateUI() -- that is, to initialize its UI property\n with the current look and feel."}, {"method_name": "invokeLater", "method_sig": "public static void invokeLater (Runnable doRun)", "description": "Causes doRun.run() to be executed asynchronously on the\n AWT event dispatching thread.  This will happen after all\n pending AWT events have been processed.  This method should\n be used when an application thread needs to update the GUI.\n In the following example the invokeLater call queues\n the Runnable object doHelloWorld\n on the event dispatching thread and\n then prints a message.\n \n Runnable doHelloWorld = new Runnable() {\n     public void run() {\n         System.out.println(\"Hello World on \" + Thread.currentThread());\n     }\n };\n\n SwingUtilities.invokeLater(doHelloWorld);\n System.out.println(\"This might well be displayed before the other message.\");\n \n If invokeLater is called from the event dispatching thread --\n for example, from a JButton's ActionListener -- the doRun.run() will\n still be deferred until all pending events have been processed.\n Note that if the doRun.run() throws an uncaught exception\n the event dispatching thread will unwind (not the current thread).\n \n Additional documentation and examples for this method can be\n found in\n Concurrency in Swing.\n \n As of 1.3 this method is just a cover for java.awt.EventQueue.invokeLater().\n \n Unlike the rest of Swing, this method can be invoked from any thread."}, {"method_name": "invokeAndWait", "method_sig": "public static void invokeAndWait (Runnable doRun)\n                          throws InterruptedException,\n                                 InvocationTargetException", "description": "Causes doRun.run() to be executed synchronously on the\n AWT event dispatching thread.  This call blocks until\n all pending AWT events have been processed and (then)\n doRun.run() returns. This method should\n be used when an application thread needs to update the GUI.\n It shouldn't be called from the event dispatching thread.\n Here's an example that creates a new application thread\n that uses invokeAndWait to print a string from the event\n dispatching thread and then, when that's finished, print\n a string from the application thread.\n \n final Runnable doHelloWorld = new Runnable() {\n     public void run() {\n         System.out.println(\"Hello World on \" + Thread.currentThread());\n     }\n };\n\n Thread appThread = new Thread() {\n     public void run() {\n         try {\n             SwingUtilities.invokeAndWait(doHelloWorld);\n         }\n         catch (Exception e) {\n             e.printStackTrace();\n         }\n         System.out.println(\"Finished on \" + Thread.currentThread());\n     }\n };\n appThread.start();\n \n Note that if the Runnable.run method throws an\n uncaught exception\n (on the event dispatching thread) it's caught and rethrown, as\n an InvocationTargetException, on the caller's thread.\n \n Additional documentation and examples for this method can be\n found in\n Concurrency in Swing.\n \n As of 1.3 this method is just a cover for\n java.awt.EventQueue.invokeAndWait()."}, {"method_name": "isEventDispatchThread", "method_sig": "public static boolean isEventDispatchThread()", "description": "Returns true if the current thread is an AWT event dispatching thread.\n \n As of 1.3 this method is just a cover for\n java.awt.EventQueue.isDispatchThread()."}, {"method_name": "getAccessibleIndexInParent", "method_sig": "public static int getAccessibleIndexInParent (Component c)", "description": "Get the index of this object in its accessible parent.\n\n Note: as of the Java 2 platform v1.3, it is recommended that developers call\n Component.AccessibleAWTComponent.getAccessibleIndexInParent() instead\n of using this method."}, {"method_name": "getAccessibleAt", "method_sig": "public static Accessible getAccessibleAt (Component c,\n                                         Point p)", "description": "Returns the Accessible child contained at the\n local coordinate Point, if one exists.\n Otherwise returns null."}, {"method_name": "getAccessibleStateSet", "method_sig": "public static AccessibleStateSet getAccessibleStateSet (Component c)", "description": "Get the state of this object. \n\n Note: as of the Java 2 platform v1.3, it is recommended that developers call\n Component.AccessibleAWTComponent.getAccessibleIndexInParent() instead\n of using this method."}, {"method_name": "getAccessibleChildrenCount", "method_sig": "public static int getAccessibleChildrenCount (Component c)", "description": "Returns the number of accessible children in the object.  If all\n of the children of this object implement Accessible, than this\n method should return the number of children of this object. \n\n Note: as of the Java 2 platform v1.3, it is recommended that developers call\n Component.AccessibleAWTComponent.getAccessibleIndexInParent() instead\n of using this method."}, {"method_name": "getAccessibleChild", "method_sig": "public static Accessible getAccessibleChild (Component c,\n                                            int i)", "description": "Return the nth Accessible child of the object. \n\n Note: as of the Java 2 platform v1.3, it is recommended that developers call\n Component.AccessibleAWTComponent.getAccessibleIndexInParent() instead\n of using this method."}, {"method_name": "findFocusOwner", "method_sig": "@Deprecated\npublic static Component findFocusOwner (Component c)", "description": "Return the child Component of the specified\n Component that is the focus owner, if any."}, {"method_name": "getRootPane", "method_sig": "public static JRootPane getRootPane (Component c)", "description": "If c is a JRootPane descendant return its JRootPane ancestor.\n If c is a RootPaneContainer then return its JRootPane."}, {"method_name": "getRoot", "method_sig": "public static Component getRoot (Component c)", "description": "Returns the root component for the current component tree."}, {"method_name": "processKeyBindings", "method_sig": "public static boolean processKeyBindings (KeyEvent event)", "description": "Process the key bindings for the Component associated with\n event. This method is only useful if\n event.getComponent() does not descend from\n JComponent, or your are not invoking\n super.processKeyEvent from within your\n JComponent subclass. JComponent\n automatically processes bindings from within its\n processKeyEvent method, hence you rarely need\n to directly invoke this method."}, {"method_name": "notifyAction", "method_sig": "public static boolean notifyAction (Action action,\n                                   KeyStroke ks,\n                                   KeyEvent event,\n                                   Object sender,\n                                   int modifiers)", "description": "Invokes actionPerformed on action if action\n is non-null and accepts the sender object.\n The command for the ActionEvent is determined by:\n \nIf the action was registered via\n       registerKeyboardAction, then the command string\n       passed in (null will be used if null was passed in).\n   Action value with name Action.ACTION_COMMAND_KEY, unless null.\n   String value of the KeyEvent, unless getKeyChar\n       returns KeyEvent.CHAR_UNDEFINED..\n \n This will return true if action is non-null and\n actionPerformed is invoked on it."}, {"method_name": "replaceUIInputMap", "method_sig": "public static void replaceUIInputMap (JComponent component,\n                                     int type,\n                                     InputMap uiInputMap)", "description": "Convenience method to change the UI InputMap for component\n to uiInputMap. If uiInputMap is null,\n this removes any previously installed UI InputMap."}, {"method_name": "replaceUIActionMap", "method_sig": "public static void replaceUIActionMap (JComponent component,\n                                      ActionMap uiActionMap)", "description": "Convenience method to change the UI ActionMap for component\n to uiActionMap. If uiActionMap is null,\n this removes any previously installed UI ActionMap."}, {"method_name": "getUIInputMap", "method_sig": "public static InputMap getUIInputMap (JComponent component,\n                                     int condition)", "description": "Returns the InputMap provided by the UI for condition\n condition in component component.\n This will return null if the UI has not installed an InputMap\n of the specified type."}, {"method_name": "getUIActionMap", "method_sig": "public static ActionMap getUIActionMap (JComponent component)", "description": "Returns the ActionMap provided by the UI\n in component component.\n This will return null if the UI has not installed an ActionMap."}, {"method_name": "calculateInnerArea", "method_sig": "public static Rectangle calculateInnerArea (JComponent c,\n                                           Rectangle r)", "description": "Stores the position and size of\n the inner painting area of the specified component\n in r and returns r.\n The position and size specify the bounds of the component,\n adjusted so as not to include the border area (the insets).\n This method is useful for classes\n that implement painting code."}, {"method_name": "getUnwrappedParent", "method_sig": "public static Container getUnwrappedParent (Component component)", "description": "Returns the first ancestor of the component\n which is not an instance of JLayer."}, {"method_name": "getUnwrappedView", "method_sig": "public static Component getUnwrappedView (JViewport viewport)", "description": "Returns the first JViewport's descendant\n which is not an instance of JLayer.\n If such a descendant can not be found, null is returned.\n\n If the viewport's view component is not a JLayer,\n this method is equivalent to JViewport.getView()\n otherwise JLayer.getView() will be recursively\n called on all descending JLayers."}]}