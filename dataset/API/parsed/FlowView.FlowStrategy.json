{"name": "Class FlowView.FlowStrategy", "module": "java.desktop", "package": "javax.swing.text", "text": "Strategy for maintaining the physical form\n of the flow.  The default implementation is\n completely stateless, and recalculates the\n entire flow if the layout is invalid on the\n given FlowView.  Alternative strategies can\n be implemented by subclassing, and might\n perform incremental repair to the layout\n or alternative breaking behavior.", "codes": ["public static class FlowView.FlowStrategy\nextends Object"], "fields": [], "methods": [{"method_name": "insertUpdate", "method_sig": "public void insertUpdate (FlowView fv,\n                         DocumentEvent e,\n                         Rectangle alloc)", "description": "Gives notification that something was inserted into the document\n in a location that the given flow view is responsible for.  The\n strategy should update the appropriate changed region (which\n depends upon the strategy used for repair)."}, {"method_name": "removeUpdate", "method_sig": "public void removeUpdate (FlowView fv,\n                         DocumentEvent e,\n                         Rectangle alloc)", "description": "Gives notification that something was removed from the document\n in a location that the given flow view is responsible for."}, {"method_name": "changedUpdate", "method_sig": "public void changedUpdate (FlowView fv,\n                          DocumentEvent e,\n                          Rectangle alloc)", "description": "Gives notification from the document that attributes were changed\n in a location that this view is responsible for."}, {"method_name": "getLogicalView", "method_sig": "protected View getLogicalView (FlowView fv)", "description": "This method gives flow strategies access to the logical\n view of the FlowView."}, {"method_name": "layout", "method_sig": "public void layout (FlowView fv)", "description": "Update the flow on the given FlowView.  By default, this causes\n all of the rows (child views) to be rebuilt to match the given\n constraints for each row.  This is called by a FlowView.layout\n to update the child views in the flow."}, {"method_name": "layoutRow", "method_sig": "protected int layoutRow (FlowView fv,\n                        int rowIndex,\n                        int pos)", "description": "Creates a row of views that will fit within the\n layout span of the row.  This is called by the layout method.\n This is implemented to fill the row by repeatedly calling\n the createView method until the available span has been\n exhausted, a forced break was encountered, or the createView\n method returned null.  If the remaining span was exhausted,\n the adjustRow method will be called to perform adjustments\n to the row to try and make it fit into the given span."}, {"method_name": "adjustRow", "method_sig": "protected void adjustRow (FlowView fv,\n                         int rowIndex,\n                         int desiredSpan,\n                         int x)", "description": "Adjusts the given row if possible to fit within the\n layout span.  By default this will try to find the\n highest break weight possible nearest the end of\n the row.  If a forced break is encountered, the\n break will be positioned there."}, {"method_name": "createView", "method_sig": "protected View createView (FlowView fv,\n                          int startOffset,\n                          int spanLeft,\n                          int rowIndex)", "description": "Creates a view that can be used to represent the current piece\n of the flow.  This can be either an entire view from the\n logical view, or a fragment of the logical view."}]}