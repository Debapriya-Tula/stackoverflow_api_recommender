{"name": "Class MLet", "module": "java.management", "package": "javax.management.loading", "text": "Allows you to instantiate and register one or several MBeans in the MBean server\n coming from a remote URL. M-let is a shortcut for management applet. The m-let service does this\n by loading an m-let text file, which specifies information on the MBeans to be obtained.\n The information on each MBean is specified in a single instance of a tag, called the MLET tag.\n The location of the m-let text file is specified by a URL.\n \n The MLET tag has the following syntax:\n \n <MLET\nCODE = class | OBJECT = serfile\nARCHIVE = \"archiveList\"\n[CODEBASE = codebaseURL]\n[NAME = mbeanname]\n[VERSION = version]\n >\n[arglist]\n </MLET>\n \n where:\n \nCODE = class\n\n This attribute specifies the full Java class name, including package name, of the MBean to be obtained.\n The compiled .class file of the MBean must be contained in one of the .jar files specified by the ARCHIVE\n attribute. Either CODE or OBJECT must be present.\n \nOBJECT = serfile\n\n This attribute specifies the .ser file that contains a serialized representation of the MBean to be obtained.\n This file must be contained in one of the .jar files specified by the ARCHIVE attribute. If the .jar file contains a directory hierarchy, specify the path of the file within this hierarchy. Otherwise  a match will not be found. Either CODE or OBJECT must be present.\n \nARCHIVE = \"archiveList\"\n\n This mandatory attribute specifies one or more .jar files\n containing MBeans or other resources used by\n the MBean to be obtained. One of the .jar files must contain the file specified by the CODE or OBJECT attribute.\n If archivelist contains more than one file:\n \nEach file must be separated from the one that follows it by a comma (,).\n archivelist must be enclosed in double quote marks.\n \n All .jar files in archivelist must be stored in the directory specified by the code base URL.\n \nCODEBASE = codebaseURL\n\n This optional attribute specifies the code base URL of the MBean to be obtained. It identifies the directory that contains\n the .jar files specified by the ARCHIVE attribute. Specify this attribute only if the .jar files are not in the same\n directory as the m-let text file. If this attribute is not specified, the base URL of the m-let text file is used.\n \nNAME = mbeanname\n\n This optional attribute specifies the object name to be assigned to the\n MBean instance when the m-let service registers it. If\n mbeanname starts with the colon character (:), the domain\n part of the object name is the default domain of the MBean server,\n as returned by MBeanServerConnection.getDefaultDomain().\n \nVERSION = version\n\n This optional attribute specifies the version number of the MBean and\n associated .jar files to be obtained. This version number can\n be used to specify that the .jar files are loaded from the\n server to update those stored locally in the cache the next time the m-let\n text file is loaded. version must be a series of non-negative\n decimal integers each separated by a period from the one that precedes it.\n \narglist\n\n This optional attribute specifies a list of one or more parameters for the\n MBean to be instantiated. This list describes the parameters to be passed the MBean's constructor.\n Use the following syntax to specify each item in\n arglist:\n \n<ARG TYPE=argumentType VALUE=value>\nwhere:\n \nargumentType is the type of the argument that will be passed as parameter to the MBean's constructor.\n\n\nThe arguments' type in the argument list should be a Java primitive type or a Java basic type\n (java.lang.Boolean, java.lang.Byte, java.lang.Short, java.lang.Long, java.lang.Integer, java.lang.Float, java.lang.Double, java.lang.String).\n \n\n\n When an m-let text file is loaded, an\n instance of each MBean specified in the file is created and registered.\n \n The m-let service extends the java.net.URLClassLoader and can be used to load remote classes\n and jar files in the VM of the agent.\n Note -  The MLet class loader uses the MBeanServerFactory.getClassLoaderRepository(javax.management.MBeanServer)\n to load classes that could not be found in the loaded jar files.", "codes": ["public class MLet\nextends URLClassLoader\nimplements MLetMBean, MBeanRegistration, Externalizable"], "fields": [], "methods": [{"method_name": "addURL", "method_sig": "public void addURL (URL url)", "description": "Appends the specified URL to the list of URLs to search for classes and\n resources."}, {"method_name": "addURL", "method_sig": "public void addURL (String url)\n            throws ServiceNotFoundException", "description": "Appends the specified URL to the list of URLs to search for classes and\n resources."}, {"method_name": "getURLs", "method_sig": "public URL[] getURLs()", "description": "Returns the search path of URLs for loading classes and resources.\n This includes the original list of URLs specified to the constructor,\n along with any URLs subsequently appended by the addURL() method."}, {"method_name": "getMBeansFromURL", "method_sig": "public Set<Object> getMBeansFromURL (URL url)\n                             throws ServiceNotFoundException", "description": "Loads a text file containing MLET tags that define the MBeans to\n be added to the MBean server. The location of the text file is specified by\n a URL. The MBeans specified in the MLET file will be instantiated and\n registered in the MBean server."}, {"method_name": "getMBeansFromURL", "method_sig": "public Set<Object> getMBeansFromURL (String url)\n                             throws ServiceNotFoundException", "description": "Loads a text file containing MLET tags that define the MBeans to\n be added to the MBean server. The location of the text file is specified by\n a URL. The MBeans specified in the MLET file will be instantiated and\n registered in the MBean server."}, {"method_name": "getLibraryDirectory", "method_sig": "public String getLibraryDirectory()", "description": "Gets the current directory used by the library loader for\n storing native libraries before they are loaded into memory."}, {"method_name": "setLibraryDirectory", "method_sig": "public void setLibraryDirectory (String libdir)", "description": "Sets the directory used by the library loader for storing\n native libraries before they are loaded into memory."}, {"method_name": "preRegister", "method_sig": "public ObjectName preRegister (MBeanServer server,\n                              ObjectName name)\n                       throws Exception", "description": "Allows the m-let to perform any operations it needs before\n being registered in the MBean server. If the ObjectName is\n null, the m-let provides a default name for its registration\n <defaultDomain>:type=MLet"}, {"method_name": "postRegister", "method_sig": "public void postRegister (Boolean registrationDone)", "description": "Allows the m-let to perform any operations needed after having been\n registered in the MBean server or after the registration has failed."}, {"method_name": "preDeregister", "method_sig": "public void preDeregister()\n                   throws Exception", "description": "Allows the m-let to perform any operations it needs before being unregistered\n by the MBean server."}, {"method_name": "postDeregister", "method_sig": "public void postDeregister()", "description": "Allows the m-let to perform any operations needed after having been\n unregistered in the MBean server."}, {"method_name": "writeExternal", "method_sig": "public void writeExternal (ObjectOutput out)\n                   throws IOException,\n                          UnsupportedOperationException", "description": "Save this MLet's contents to the given ObjectOutput.\n Not all implementations support this method.  Those that do not\n throw UnsupportedOperationException.  A subclass may\n override this method to support it or to change the format of\n the written data.\nThe format of the written data is not specified, but if\n an implementation supports writeExternal(java.io.ObjectOutput) it must\n also support readExternal(java.io.ObjectInput) in such a way that what is\n written by the former can be read by the latter."}, {"method_name": "readExternal", "method_sig": "public void readExternal (ObjectInput in)\n                  throws IOException,\n                         ClassNotFoundException,\n                         UnsupportedOperationException", "description": "Restore this MLet's contents from the given ObjectInput.\n Not all implementations support this method.  Those that do not\n throw UnsupportedOperationException.  A subclass may\n override this method to support it or to change the format of\n the read data.\nThe format of the read data is not specified, but if an\n implementation supports readExternal(java.io.ObjectInput) it must also\n support writeExternal(java.io.ObjectOutput) in such a way that what is\n written by the latter can be read by the former."}, {"method_name": "loadClass", "method_sig": "public Class<?> loadClass (String name,\n                          ClassLoaderRepository clr)\n                   throws ClassNotFoundException", "description": "Load a class, using the given ClassLoaderRepository if\n the class is not found in this MLet's URLs.  The given\n ClassLoaderRepository can be null, in which case a ClassNotFoundException occurs immediately if the class is not\n found in this MLet's URLs."}, {"method_name": "findClass", "method_sig": "protected Class<?> findClass (String name)\n                      throws ClassNotFoundException", "description": "This is the main method for class loaders that is being redefined."}, {"method_name": "findLibrary", "method_sig": "protected String findLibrary (String libname)", "description": "Returns the absolute path name of a native library. The VM\n invokes this method to locate the native libraries that belong\n to classes loaded with this class loader. Libraries are\n searched in the JAR files using first just the native library\n name and if not found the native library name together with\n the architecture-specific path name\n (OSName/OSArch/OSVersion/lib/nativelibname), i.e.\n \n the library stat on Solaris SPARC 5.7 will be searched in the JAR file as:\n \nlibstat.so\n SunOS/sparc/5.7/lib/libstat.so\n \n the library stat on Windows NT 4.0 will be searched in the JAR file as:\n \nstat.dll\n WindowsNT/x86/4.0/lib/stat.dll\n \nMore specifically, let nativelibname be the result of\n System.mapLibraryName(libname).  Then the following names are\n searched in the JAR files, in order:\nnativelibname\n<os.name>/<os.arch>/<os.version>/lib/nativelibname\n where <X> means System.getProperty(X) with any\n spaces in the result removed, and / stands for the\n file separator character (File.separator).\n \n If this method returns null, i.e. the libraries\n were not found in any of the JAR files loaded with this class\n loader, the VM searches the library along the path specified\n as the java.library.path property."}, {"method_name": "check", "method_sig": "protected URL check (String version,\n                    URL codebase,\n                    String jarfile,\n                    MLetContent mlet)\n             throws Exception", "description": "This method is to be overridden when extending this service to\n support caching and versioning.  It is called from getMBeansFromURL when the version,\n codebase, and jarfile have been extracted from the MLet file,\n and can be used to verify that it is all right to load the\n given MBean, or to replace the given URL with a different one.\nThe default implementation of this method returns\n codebase unchanged."}]}