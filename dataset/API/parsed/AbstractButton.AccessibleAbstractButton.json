{"name": "Class AbstractButton.AccessibleAbstractButton", "module": "java.desktop", "package": "javax.swing", "text": "This class implements accessibility support for the\n AbstractButton class.  It provides an implementation of the\n Java Accessibility API appropriate to button and menu item\n user-interface elements.\n \nWarning:\n Serialized objects of this class will not be compatible with\n future Swing releases. The current serialization support is\n appropriate for short term storage or RMI between applications running\n the same version of Swing.  As of 1.4, support for long term storage\n of all JavaBeans\u2122\n has been added to the java.beans package.\n Please see XMLEncoder.", "codes": ["protected abstract class AbstractButton.AccessibleAbstractButton\nextends JComponent.AccessibleJComponent\nimplements AccessibleAction, AccessibleValue, AccessibleText, AccessibleExtendedComponent"], "fields": [], "methods": [{"method_name": "getAccessibleName", "method_sig": "public String getAccessibleName()", "description": "Returns the accessible name of this object."}, {"method_name": "getAccessibleIcon", "method_sig": "public AccessibleIcon[] getAccessibleIcon()", "description": "Get the AccessibleIcons associated with this object if one\n or more exist.  Otherwise return null."}, {"method_name": "getAccessibleStateSet", "method_sig": "public AccessibleStateSet getAccessibleStateSet()", "description": "Get the state set of this object."}, {"method_name": "getAccessibleRelationSet", "method_sig": "public AccessibleRelationSet getAccessibleRelationSet()", "description": "Get the AccessibleRelationSet associated with this object if one\n exists.  Otherwise return null."}, {"method_name": "getAccessibleAction", "method_sig": "public AccessibleAction getAccessibleAction()", "description": "Get the AccessibleAction associated with this object.  In the\n implementation of the Java Accessibility API for this class,\n return this object, which is responsible for implementing the\n AccessibleAction interface on behalf of itself."}, {"method_name": "getAccessibleValue", "method_sig": "public AccessibleValue getAccessibleValue()", "description": "Get the AccessibleValue associated with this object.  In the\n implementation of the Java Accessibility API for this class,\n return this object, which is responsible for implementing the\n AccessibleValue interface on behalf of itself."}, {"method_name": "getAccessibleActionCount", "method_sig": "public int getAccessibleActionCount()", "description": "Returns the number of Actions available in this object.  The\n default behavior of a button is to have one action - toggle\n the button."}, {"method_name": "getAccessibleActionDescription", "method_sig": "public String getAccessibleActionDescription (int i)", "description": "Return a description of the specified action of the object."}, {"method_name": "doAccessibleAction", "method_sig": "public boolean doAccessibleAction (int i)", "description": "Perform the specified Action on the object"}, {"method_name": "getCurrentAccessibleValue", "method_sig": "public Number getCurrentAccessibleValue()", "description": "Get the value of this object as a Number."}, {"method_name": "setCurrentAccessibleValue", "method_sig": "public boolean setCurrentAccessibleValue (Number n)", "description": "Set the value of this object as a Number."}, {"method_name": "getMinimumAccessibleValue", "method_sig": "public Number getMinimumAccessibleValue()", "description": "Get the minimum value of this object as a Number."}, {"method_name": "getMaximumAccessibleValue", "method_sig": "public Number getMaximumAccessibleValue()", "description": "Get the maximum value of this object as a Number."}, {"method_name": "getIndexAtPoint", "method_sig": "public int getIndexAtPoint (Point p)", "description": "Given a point in local coordinates, return the zero-based index\n of the character under that Point.  If the point is invalid,\n this method returns -1.\n\n Note: the AbstractButton must have a valid size (e.g. have\n been added to a parent container whose ancestor container\n is a valid top-level window) for this method to be able\n to return a meaningful value."}, {"method_name": "getCharacterBounds", "method_sig": "public Rectangle getCharacterBounds (int i)", "description": "Determine the bounding box of the character at the given\n index into the string.  The bounds are returned in local\n coordinates.  If the index is invalid an empty rectangle is\n returned.\n\n Note: the AbstractButton must have a valid size (e.g. have\n been added to a parent container whose ancestor container\n is a valid top-level window) for this method to be able\n to return a meaningful value."}, {"method_name": "getCharCount", "method_sig": "public int getCharCount()", "description": "Return the number of characters (valid indicies)"}, {"method_name": "getCaretPosition", "method_sig": "public int getCaretPosition()", "description": "Return the zero-based offset of the caret.\n\n Note: That to the right of the caret will have the same index\n value as the offset (the caret is between two characters)."}, {"method_name": "getAtIndex", "method_sig": "public String getAtIndex (int part,\n                         int index)", "description": "Returns the String at a given index."}, {"method_name": "getAfterIndex", "method_sig": "public String getAfterIndex (int part,\n                            int index)", "description": "Returns the String after a given index."}, {"method_name": "getBeforeIndex", "method_sig": "public String getBeforeIndex (int part,\n                             int index)", "description": "Returns the String before a given index."}, {"method_name": "getCharacterAttribute", "method_sig": "public AttributeSet getCharacterAttribute (int i)", "description": "Return the AttributeSet for a given character at a given index"}, {"method_name": "getSelectionStart", "method_sig": "public int getSelectionStart()", "description": "Returns the start offset within the selected text.\n If there is no selection, but there is\n a caret, the start and end offsets will be the same."}, {"method_name": "getSelectionEnd", "method_sig": "public int getSelectionEnd()", "description": "Returns the end offset within the selected text.\n If there is no selection, but there is\n a caret, the start and end offsets will be the same."}, {"method_name": "getSelectedText", "method_sig": "public String getSelectedText()", "description": "Returns the portion of the text that is selected."}, {"method_name": "getToolTipText", "method_sig": "public String getToolTipText()", "description": "Returns the tool tip text"}, {"method_name": "getTitledBorderText", "method_sig": "public String getTitledBorderText()", "description": "Returns the titled border text"}, {"method_name": "getAccessibleKeyBinding", "method_sig": "public AccessibleKeyBinding getAccessibleKeyBinding()", "description": "Returns key bindings associated with this object"}]}