{"name": "Class Track", "module": "java.desktop", "package": "javax.sound.midi", "text": "A MIDI track is an independent stream of MIDI events (time-stamped MIDI data)\n that can be stored along with other tracks in a standard MIDI file. The MIDI\n specification allows only 16 channels of MIDI data, but tracks are a way to\n get around this limitation. A MIDI file can contain any number of tracks,\n each containing its own stream of up to 16 channels of MIDI data.\n \n A Track occupies a middle level in the hierarchy of data played by a\n Sequencer: sequencers play sequences, which contain tracks, which\n contain MIDI events. A sequencer may provide controls that mute or solo\n individual tracks.\n \n The timing information and resolution for a track is controlled by and stored\n in the sequence containing the track. A given Track is considered to\n belong to the particular Sequence that maintains its timing. For this\n reason, a new (empty) track is created by calling the\n Sequence.createTrack() method, rather than by directly invoking a\n Track constructor.\n \n The Track class provides methods to edit the track by adding or\n removing MidiEvent objects from it. These operations keep the event\n list in the correct time order. Methods are also included to obtain the\n track's size, in terms of either the number of events it contains or its\n duration in ticks.", "codes": ["public class Track\nextends Object"], "fields": [], "methods": [{"method_name": "add", "method_sig": "public boolean add (MidiEvent event)", "description": "Adds a new event to the track. However, if the event is already contained\n in the track, it is not added again. The list of events is kept in time\n order, meaning that this event inserted at the appropriate place in the\n list, not necessarily at the end."}, {"method_name": "remove", "method_sig": "public boolean remove (MidiEvent event)", "description": "Removes the specified event from the track."}, {"method_name": "get", "method_sig": "public MidiEvent get (int index)\n              throws ArrayIndexOutOfBoundsException", "description": "Obtains the event at the specified index."}, {"method_name": "size", "method_sig": "public int size()", "description": "Obtains the number of events in this track."}, {"method_name": "ticks", "method_sig": "public long ticks()", "description": "Obtains the length of the track, expressed in MIDI ticks. (The duration\n of a tick in seconds is determined by the timing resolution of the\n Sequence containing this track, and also by the tempo of the\n music as set by the sequencer.)"}]}