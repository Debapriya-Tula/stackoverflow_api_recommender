{"name": "Class EventListenerProxy<T extends EventListener>", "module": "java.base", "package": "java.util", "text": "An abstract wrapper class for an EventListener class\n which associates a set of additional parameters with the listener.\n Subclasses must provide the storage and accessor methods\n for the additional arguments or parameters.\n \n For example, a bean which supports named properties\n would have a two argument method signature for adding\n a PropertyChangeListener for a property:\n \n public void addPropertyChangeListener(String propertyName,\n                                       PropertyChangeListener listener)\n \n If the bean also implemented the zero argument get listener method:\n \n public PropertyChangeListener[] getPropertyChangeListeners()\n \n then the array may contain inner PropertyChangeListeners\n which are also PropertyChangeListenerProxy objects.\n \n If the calling method is interested in retrieving the named property\n then it would have to test the element to see if it is a proxy class.", "codes": ["public abstract class EventListenerProxy<T extends EventListener>\nextends Object\nimplements EventListener"], "fields": [], "methods": [{"method_name": "getListener", "method_sig": "public T getListener()", "description": "Returns the listener associated with the proxy."}]}