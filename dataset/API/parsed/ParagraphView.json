{"name": "Class ParagraphView", "module": "java.desktop", "package": "javax.swing.text", "text": "View of a simple line-wrapping paragraph that supports\n multiple fonts, colors, components, icons, etc.  It is\n basically a vertical box with a margin around it.  The\n contents of the box are a bunch of rows which are special\n horizontal boxes.  This view creates a collection of\n views that represent the child elements of the paragraph\n element.  Each of these views are placed into a row\n directly if they will fit, otherwise the breakView\n method is called to try and carve the view into pieces\n that fit.", "codes": ["public class ParagraphView\nextends FlowView\nimplements TabExpander"], "fields": [{"field_name": "firstLineIndent", "field_sig": "protected\u00a0int firstLineIndent", "description": "Indentation for the first line, from the left inset."}], "methods": [{"method_name": "setJustification", "method_sig": "protected void setJustification (int j)", "description": "Sets the type of justification."}, {"method_name": "setLineSpacing", "method_sig": "protected void setLineSpacing (float ls)", "description": "Sets the line spacing."}, {"method_name": "setFirstLineIndent", "method_sig": "protected void setFirstLineIndent (float fi)", "description": "Sets the indent on the first line."}, {"method_name": "setPropertiesFromAttributes", "method_sig": "protected void setPropertiesFromAttributes()", "description": "Set the cached properties from the attributes."}, {"method_name": "getLayoutViewCount", "method_sig": "protected int getLayoutViewCount()", "description": "Returns the number of views that this view is\n responsible for.\n The child views of the paragraph are rows which\n have been used to arrange pieces of the Views\n that represent the child elements.  This is the number\n of views that have been tiled in two dimensions,\n and should be equivalent to the number of child elements\n to the element this view is responsible for."}, {"method_name": "getLayoutView", "method_sig": "protected View getLayoutView (int index)", "description": "Returns the view at a given index.\n The child views of the paragraph are rows which\n have been used to arrange pieces of the Views\n that represent the child elements.  This methods returns\n the view responsible for the child element index\n (prior to breaking).  These are the Views that were\n produced from a factory (to represent the child\n elements) and used for layout."}, {"method_name": "getNextNorthSouthVisualPositionFrom", "method_sig": "protected int getNextNorthSouthVisualPositionFrom (int pos,\n                                                  Position.Bias b,\n                                                  Shape a,\n                                                  int direction,\n                                                  Position.Bias[] biasRet)\n                                           throws BadLocationException", "description": "Returns the next visual position for the cursor, in\n either the east or west direction.\n Overridden from CompositeView."}, {"method_name": "getClosestPositionTo", "method_sig": "protected int getClosestPositionTo (int pos,\n                                   Position.Bias b,\n                                   Shape a,\n                                   int direction,\n                                   Position.Bias[] biasRet,\n                                   int rowIndex,\n                                   int x)\n                            throws BadLocationException", "description": "Returns the closest model position to x.\n rowIndex gives the index of the view that corresponds\n that should be looked in."}, {"method_name": "flipEastAndWestAtEnds", "method_sig": "protected boolean flipEastAndWestAtEnds (int position,\n                                        Position.Bias bias)", "description": "Determines in which direction the next view lays.\n Consider the View at index n.\n Typically the Views are layed out\n from left to right, so that the View\n to the EAST will be at index n + 1, and the\n View to the WEST will be at index n - 1.\n In certain situations, such as with bidirectional text,\n it is possible that the View to EAST is not\n at index n + 1, but rather at index n - 1,\n or that the View to the WEST is not at\n index n - 1, but index n + 1.  In this case this method\n would return true, indicating the Views are\n layed out in descending order.\n \n This will return true if the text is layed out right\n to left at position, otherwise false."}, {"method_name": "getFlowSpan", "method_sig": "public int getFlowSpan (int index)", "description": "Fetches the constraining span to flow against for\n the given child index."}, {"method_name": "getFlowStart", "method_sig": "public int getFlowStart (int index)", "description": "Fetches the location along the flow axis that the\n flow span will start at."}, {"method_name": "createRow", "method_sig": "protected View createRow()", "description": "Create a View that should be used to hold a\n a row's worth of children in a flow."}, {"method_name": "nextTabStop", "method_sig": "public float nextTabStop (float x,\n                         int tabOffset)", "description": "Returns the next tab stop position given a reference position.\n This view implements the tab coordinate system, and calls\n getTabbedSpan on the logical children in the process\n of layout to determine the desired span of the children.  The\n logical children can delegate their tab expansion upward to\n the paragraph which knows how to expand tabs.\n LabelView is an example of a view that delegates\n its tab expansion needs upward to the paragraph.\n \n This is implemented to try and locate a TabSet\n in the paragraph element's attribute set.  If one can be\n found, its settings will be used, otherwise a default expansion\n will be provided.  The base location for tab expansion\n is the left inset from the paragraphs most recent allocation\n (which is what the layout of the children is based upon)."}, {"method_name": "getTabSet", "method_sig": "protected TabSet getTabSet()", "description": "Gets the Tabset to be used in calculating tabs."}, {"method_name": "getPartialSize", "method_sig": "protected float getPartialSize (int startOffset,\n                               int endOffset)", "description": "Returns the size used by the views between\n startOffset and endOffset.\n This uses getPartialView to calculate the\n size if the child view implements the\n TabableView interface. If a\n size is needed and a View does not implement\n the TabableView interface,\n the preferredSpan will be used."}, {"method_name": "findOffsetToCharactersInString", "method_sig": "protected int findOffsetToCharactersInString (char[] string,\n                                             int start)", "description": "Finds the next character in the document with a character in\n string, starting at offset start. If\n there are no characters found, -1 will be returned."}, {"method_name": "getTabBase", "method_sig": "protected float getTabBase()", "description": "Returns where the tabs are calculated from."}, {"method_name": "paint", "method_sig": "public void paint (Graphics g,\n                  Shape a)", "description": "Renders using the given rendering surface and area on that\n surface.  This is implemented to delegate to the superclass\n after stashing the base coordinate for tab calculations."}, {"method_name": "getAlignment", "method_sig": "public float getAlignment (int axis)", "description": "Determines the desired alignment for this view along an\n axis.  This is implemented to give the alignment to the\n center of the first row along the y axis, and the default\n along the x axis."}, {"method_name": "breakView", "method_sig": "public View breakView (int axis,\n                      float len,\n                      Shape a)", "description": "Breaks this view on the given axis at the given length.\n \nParagraphView instances are breakable\n along the Y_AXIS only, and only if\n len is after the first line."}, {"method_name": "getBreakWeight", "method_sig": "public int getBreakWeight (int axis,\n                          float len)", "description": "Gets the break weight for a given location.\n \nParagraphView instances are breakable\n along the Y_AXIS only, and only if\n len is after the first row.  If the length\n is less than one row, a value of BadBreakWeight\n is returned."}, {"method_name": "calculateMinorAxisRequirements", "method_sig": "protected SizeRequirements calculateMinorAxisRequirements (int axis,\n                                                          SizeRequirements r)", "description": "Calculate the needs for the paragraph along the minor axis.\n\n This uses size requirements of the superclass, modified to take into\n account the non-breakable areas at the adjacent views edges.  The minimal\n size requirements for such views should be no less than the sum of all\n adjacent fragments.\nIf the axis parameter is neither View.X_AXIS nor\n View.Y_AXIS, IllegalArgumentException is thrown.  If the\n r parameter is null, a new SizeRequirements\n object is created, otherwise the supplied SizeRequirements\n object is returned."}, {"method_name": "changedUpdate", "method_sig": "public void changedUpdate (DocumentEvent changes,\n                          Shape a,\n                          ViewFactory f)", "description": "Gives notification from the document that attributes were changed\n in a location that this view is responsible for."}]}