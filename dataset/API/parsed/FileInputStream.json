{"name": "Class FileInputStream", "module": "java.base", "package": "java.io", "text": "A FileInputStream obtains input bytes\n from a file in a file system. What files\n are  available depends on the host environment.\n\n FileInputStream is meant for reading streams of raw bytes\n such as image data. For reading streams of characters, consider using\n FileReader.", "codes": ["public class FileInputStream\nextends InputStream"], "fields": [], "methods": [{"method_name": "read", "method_sig": "public int read()\n         throws IOException", "description": "Reads a byte of data from this input stream. This method blocks\n if no input is yet available."}, {"method_name": "read", "method_sig": "public int read (byte[] b)\n         throws IOException", "description": "Reads up to b.length bytes of data from this input\n stream into an array of bytes. This method blocks until some input\n is available."}, {"method_name": "read", "method_sig": "public int read (byte[] b,\n                int off,\n                int len)\n         throws IOException", "description": "Reads up to len bytes of data from this input stream\n into an array of bytes. If len is not zero, the method\n blocks until some input is available; otherwise, no\n bytes are read and 0 is returned."}, {"method_name": "skip", "method_sig": "public long skip (long n)\n          throws IOException", "description": "Skips over and discards n bytes of data from the\n input stream.\n\n The skip method may, for a variety of\n reasons, end up skipping over some smaller number of bytes,\n possibly 0. If n is negative, the method\n will try to skip backwards. In case the backing file does not support\n backward skip at its current position, an IOException is\n thrown. The actual number of bytes skipped is returned. If it skips\n forwards, it returns a positive value. If it skips backwards, it\n returns a negative value.\n\n This method may skip more bytes than what are remaining in the\n backing file. This produces no exception and the number of bytes skipped\n may include some number of bytes that were beyond the EOF of the\n backing file. Attempting to read from the stream after skipping past\n the end will result in -1 indicating the end of the file."}, {"method_name": "available", "method_sig": "public int available()\n              throws IOException", "description": "Returns an estimate of the number of remaining bytes that can be read (or\n skipped over) from this input stream without blocking by the next\n invocation of a method for this input stream. Returns 0 when the file\n position is beyond EOF. The next invocation might be the same thread\n or another thread. A single read or skip of this many bytes will not\n block, but may read or skip fewer bytes.\n\n  In some cases, a non-blocking read (or skip) may appear to be\n blocked when it is merely slow, for example when reading large\n files over slow networks."}, {"method_name": "close", "method_sig": "public void close()\n           throws IOException", "description": "Closes this file input stream and releases any system resources\n associated with the stream.\n\n  If this stream has an associated channel then the channel is closed\n as well."}, {"method_name": "getFD", "method_sig": "public final FileDescriptor getFD()\n                           throws IOException", "description": "Returns the FileDescriptor\n object  that represents the connection to\n the actual file in the file system being\n used by this FileInputStream."}, {"method_name": "getChannel", "method_sig": "public FileChannel getChannel()", "description": "Returns the unique FileChannel\n object associated with this file input stream.\n\n  The initial position of the returned channel will be equal to the\n number of bytes read from the file so far.  Reading bytes from this\n stream will increment the channel's position.  Changing the channel's\n position, either explicitly or by reading, will change this stream's\n file position."}, {"method_name": "finalize", "method_sig": "@Deprecated(since=\"9\",\n            forRemoval=true)\nprotected void finalize()\n                 throws IOException", "description": "Ensures that the close() method of this file input stream is\n called when there are no more references to it.\n The finalize() method does not call close() directly."}]}