{"name": "Interface DosFileAttributeView", "module": "java.base", "package": "java.nio.file.attribute", "text": "A file attribute view that provides a view of the legacy \"DOS\" file attributes.\n These attributes are supported by file systems such as the File Allocation\n Table (FAT) format commonly used in consumer devices.\n\n  A DosFileAttributeView is a BasicFileAttributeView that\n additionally supports access to the set of DOS attribute flags that are used\n to indicate if the file is read-only, hidden, a system file, or archived.\n\n  Where dynamic access to file attributes is required, the attributes\n supported by this attribute view are as defined by \n BasicFileAttributeView, and in addition, the following attributes are\n supported:\n \n\nSupported attributes\n\n\n Name \n Type \n\n\n\n\n readonly \n Boolean \n\n\n hidden \n Boolean \n\n\n system \n Boolean \n\n\n archive \n Boolean \n\n\n\n\n The getAttribute method may\n be used to read any of these attributes, or any of the attributes defined by\n BasicFileAttributeView as if by invoking the readAttributes() method.\n\n  The setAttribute method may\n be used to update the file's last modified time, last access time or create\n time attributes as defined by BasicFileAttributeView. It may also be\n used to update the DOS attributes as if by invoking the setReadOnly, setHidden, setSystem, and\n setArchive methods respectively.", "codes": ["public interface DosFileAttributeView\nextends BasicFileAttributeView"], "fields": [], "methods": [{"method_name": "name", "method_sig": "String name()", "description": "Returns the name of the attribute view. Attribute views of this type\n have the name \"dos\"."}, {"method_name": "readAttributes", "method_sig": "DosFileAttributes readAttributes()\n                          throws IOException", "description": "Description copied from interface:\u00a0BasicFileAttributeView"}, {"method_name": "setReadOnly", "method_sig": "void setReadOnly (boolean value)\n          throws IOException", "description": "Updates the value of the read-only attribute.\n\n  It is implementation specific if the attribute can be updated as an\n atomic operation with respect to other file system operations. An\n implementation may, for example, require to read the existing value of\n the DOS attribute in order to update this attribute."}, {"method_name": "setHidden", "method_sig": "void setHidden (boolean value)\n        throws IOException", "description": "Updates the value of the hidden attribute.\n\n  It is implementation specific if the attribute can be updated as an\n atomic operation with respect to other file system operations. An\n implementation may, for example, require to read the existing value of\n the DOS attribute in order to update this attribute."}, {"method_name": "setSystem", "method_sig": "void setSystem (boolean value)\n        throws IOException", "description": "Updates the value of the system attribute.\n\n  It is implementation specific if the attribute can be updated as an\n atomic operation with respect to other file system operations. An\n implementation may, for example, require to read the existing value of\n the DOS attribute in order to update this attribute."}, {"method_name": "setArchive", "method_sig": "void setArchive (boolean value)\n         throws IOException", "description": "Updates the value of the archive attribute.\n\n  It is implementation specific if the attribute can be updated as an\n atomic operation with respect to other file system operations. An\n implementation may, for example, require to read the existing value of\n the DOS attribute in order to update this attribute."}]}