{"name": "Class GuardedInvocation", "module": "jdk.dynalink", "package": "jdk.dynalink.linker", "text": "Represents a conditionally valid method handle. Usually produced as a return\n value of\n GuardingDynamicLinker.getGuardedInvocation(LinkRequest, LinkerServices)\n and\n GuardingTypeConverterFactory.convertToType(Class, Class, Supplier).\n It is an immutable tuple of an invocation method handle, a guard method\n handle that defines the applicability of the invocation handle, zero or more\n switch points that can be used for external invalidation of the invocation\n handle, and an exception type that if thrown during an invocation of the\n method handle also invalidates it. The invocation handle is suitable for\n invocation if the guard handle returns true for its arguments, and as long\n as any of the switch points are not invalidated, and as long as it does not\n throw an exception of the designated type. The guard, the switch points, and\n the exception type are all optional (a guarded invocation having none of them\n is unconditionally valid).", "codes": ["public class GuardedInvocation\nextends Object"], "fields": [], "methods": [{"method_name": "getInvocation", "method_sig": "public MethodHandle getInvocation()", "description": "Returns the invocation method handle."}, {"method_name": "getGuard", "method_sig": "public MethodHandle getGuard()", "description": "Returns the guard method handle."}, {"method_name": "getSwitchPoints", "method_sig": "public SwitchPoint[] getSwitchPoints()", "description": "Returns the switch points that can be used to invalidate the linkage of\n this invocation handle."}, {"method_name": "getException", "method_sig": "public Class<? extends Throwable> getException()", "description": "Returns the exception type that if thrown by the invocation should\n invalidate the linkage of this guarded invocation."}, {"method_name": "hasBeenInvalidated", "method_sig": "public boolean hasBeenInvalidated()", "description": "Returns true if and only if this guarded invocation has at least one\n invalidated switch point."}, {"method_name": "replaceMethods", "method_sig": "public GuardedInvocation replaceMethods (MethodHandle newInvocation,\n                                        MethodHandle newGuard)", "description": "Creates a new guarded invocation with different methods, preserving the switch point."}, {"method_name": "addSwitchPoint", "method_sig": "public GuardedInvocation addSwitchPoint (SwitchPoint newSwitchPoint)", "description": "Create a new guarded invocation with an added switch point."}, {"method_name": "asType", "method_sig": "public GuardedInvocation asType (MethodType newType)", "description": "Changes the type of the invocation, as if\n MethodHandle.asType(MethodType) was applied to its invocation\n and its guard, if it has one (with return type changed to boolean, and\n parameter count potentially truncated for the guard). If the invocation\n already is of the required type, returns this object."}, {"method_name": "asType", "method_sig": "public GuardedInvocation asType (LinkerServices linkerServices,\n                                MethodType newType)", "description": "Changes the type of the invocation, as if\n LinkerServices.asType(MethodHandle, MethodType) was applied to\n its invocation and its guard, if it has one (with return type changed to\n boolean, and parameter count potentially truncated for the guard). If the\n invocation already is of the required type, returns this object."}, {"method_name": "asTypeSafeReturn", "method_sig": "public GuardedInvocation asTypeSafeReturn (LinkerServices linkerServices,\n                                          MethodType newType)", "description": "Changes the type of the invocation, as if\n LinkerServices.asTypeLosslessReturn(MethodHandle, MethodType) was\n applied to its invocation and\n LinkerServices.asType(MethodHandle, MethodType) applied to its\n guard, if it has one (with return type changed to boolean, and parameter\n count potentially truncated for the guard). If the invocation doesn't\n change its type, returns this object."}, {"method_name": "asType", "method_sig": "public GuardedInvocation asType (CallSiteDescriptor desc)", "description": "Changes the type of the invocation, as if\n MethodHandle.asType(MethodType) was applied to its invocation\n and its guard, if it has one (with return type changed to boolean for\n guard). If the invocation already is of the required type, returns this\n object."}, {"method_name": "filterArguments", "method_sig": "public GuardedInvocation filterArguments (int pos,\n                                         MethodHandle... filters)", "description": "Applies argument filters to both the invocation and the guard\n (if it exists and has at least pos + 1 parameters) with\n MethodHandles.filterArguments(MethodHandle, int, MethodHandle...)."}, {"method_name": "dropArguments", "method_sig": "public GuardedInvocation dropArguments (int pos,\n                                       List<Class<?>> valueTypes)", "description": "Makes an invocation that drops arguments in both the invocation and the\n guard (if it exists and has at least pos parameters) with\n MethodHandles.dropArguments(MethodHandle, int, List)."}, {"method_name": "dropArguments", "method_sig": "public GuardedInvocation dropArguments (int pos,\n                                       Class<?>... valueTypes)", "description": "Makes an invocation that drops arguments in both the invocation and the\n guard (if it exists and has at least pos parameters) with\n MethodHandles.dropArguments(MethodHandle, int, Class...)."}, {"method_name": "compose", "method_sig": "public MethodHandle compose (MethodHandle fallback)", "description": "Composes the invocation, guard, switch points, and the exception into a\n composite method handle that knows how to fall back when the guard fails\n or the invocation is invalidated."}, {"method_name": "compose", "method_sig": "public MethodHandle compose (MethodHandle guardFallback,\n                            MethodHandle switchpointFallback,\n                            MethodHandle catchFallback)", "description": "Composes the invocation, guard, switch points, and the exception into a\n composite method handle that knows how to fall back when the guard fails\n or the invocation is invalidated."}]}