{"name": "Class Taskbar", "module": "java.desktop", "package": "java.awt", "text": "The Taskbar class allows a Java application to interact with\n the system task area (taskbar, Dock, etc.).\n\n \n There are a variety of interactions depending on the current platform such as\n displaying progress of some task, appending user-specified menu to the application\n icon context menu, etc.", "codes": ["public class Taskbar\nextends Object"], "fields": [], "methods": [{"method_name": "isSupported", "method_sig": "public boolean isSupported (Taskbar.Feature feature)", "description": "Tests whether a Feature is supported on the current platform."}, {"method_name": "getTaskbar", "method_sig": "public static Taskbar getTaskbar()", "description": "Returns the Taskbar instance of the current\n taskbar context.  On some platforms the Taskbar API may not be\n supported; use the isTaskbarSupported() method to\n determine if the current taskbar is supported."}, {"method_name": "isTaskbarSupported", "method_sig": "public static boolean isTaskbarSupported()", "description": "Tests whether this class is supported on the current platform.\n If it's supported, use getTaskbar() to retrieve an\n instance."}, {"method_name": "requestUserAttention", "method_sig": "public void requestUserAttention (boolean enabled,\n                                 boolean critical)", "description": "Requests user attention to this application.\n\n Depending on the platform, this may be visually indicated by a bouncing\n or flashing icon in the task area. It may have no effect on an already active\n application.\n\n On some platforms (e.g. Mac OS) this effect may disappear upon app activation\n and cannot be dismissed by setting enabled to false.\n Other platforms may require an additional call\n requestUserAttention(boolean, boolean) to dismiss this request\n with enabled parameter set to false."}, {"method_name": "requestWindowUserAttention", "method_sig": "public void requestWindowUserAttention (Window w)", "description": "Requests user attention to the specified window.\n\n Has no effect if a window representation is not displayable in\n the task area. Whether it is displayable is dependent on all\n of window type, platform, and implementation."}, {"method_name": "setMenu", "method_sig": "public void setMenu (PopupMenu menu)", "description": "Attaches the contents of the provided PopupMenu to the application icon\n in the task area."}, {"method_name": "getMenu", "method_sig": "public PopupMenu getMenu()", "description": "Gets PopupMenu used to add items to this application's icon in system task area."}, {"method_name": "setIconImage", "method_sig": "public void setIconImage (Image image)", "description": "Changes this application's icon to the provided image."}, {"method_name": "getIconImage", "method_sig": "public Image getIconImage()", "description": "Obtains an image of this application's icon."}, {"method_name": "setIconBadge", "method_sig": "public void setIconBadge (String badge)", "description": "Affixes a small system-provided badge to this application's icon.\n Usually a number.\n\n Some platforms do not support string values and accept only integer\n values. In this case, pass an integer represented as a string as parameter.\n This can be tested by Feature.ICON_BADGE_TEXT and\n Feature.ICON_BADGE_NUMBER.\n\n Passing null as parameter hides the badge."}, {"method_name": "setWindowIconBadge", "method_sig": "public void setWindowIconBadge (Window w,\n                               Image badge)", "description": "Affixes a small badge to this application's icon in the task area\n for the specified window.\n It may be disabled by system settings.\n\n Has no effect if a window representation is not displayable in\n the task area. Whether it is displayable is dependent on all\n of window type, platform, and implementation."}, {"method_name": "setProgressValue", "method_sig": "public void setProgressValue (int value)", "description": "Affixes a small system-provided progress bar to this application's icon."}, {"method_name": "setWindowProgressValue", "method_sig": "public void setWindowProgressValue (Window w,\n                                   int value)", "description": "Displays a determinate progress bar in the task area for the specified\n window.\n\n Has no effect if a window representation is not displayable in\n the task area. Whether it is displayable is dependent on all\n of window type, platform, and implementation.\n\n \n The visual behavior is platform and Taskbar.State dependent.\n \n This call cancels the INDETERMINATE state\n of the window.\n \n Note that when multiple windows is grouped in the task area\n the behavior is platform specific."}, {"method_name": "setWindowProgressState", "method_sig": "public void setWindowProgressState (Window w,\n                                   Taskbar.State state)", "description": "Sets a progress state for a specified window.\n\n Has no effect if a window representation is not displayable in\n the task area. Whether it is displayable is dependent on all\n of window type, platform, and implementation.\n \n Each state displays a progress in a platform-dependent way.\n \n Note than switching from INDETERMINATE state\n to any of determinate states may reset value set by\n setWindowProgressValue"}]}