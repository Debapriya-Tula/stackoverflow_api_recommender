{"name": "Interface ListSelectionModel", "module": "java.desktop", "package": "javax.swing", "text": "This interface represents the current state of the\n selection for any of the components that display a\n list of values with stable indices.  The selection is\n modeled as a set of intervals, each interval represents\n a contiguous range of selected list elements.\n The methods for modifying the set of selected intervals\n all take a pair of indices, index0 and index1, that represent\n a closed interval, i.e. the interval includes both index0 and\n index1.", "codes": ["public interface ListSelectionModel"], "fields": [{"field_name": "SINGLE_SELECTION", "field_sig": "static final\u00a0int SINGLE_SELECTION", "description": "A value for the selectionMode property: select one list index\n at a time."}, {"field_name": "SINGLE_INTERVAL_SELECTION", "field_sig": "static final\u00a0int SINGLE_INTERVAL_SELECTION", "description": "A value for the selectionMode property: select one contiguous\n range of indices at a time."}, {"field_name": "MULTIPLE_INTERVAL_SELECTION", "field_sig": "static final\u00a0int MULTIPLE_INTERVAL_SELECTION", "description": "A value for the selectionMode property: select one or more\n contiguous ranges of indices at a time."}], "methods": [{"method_name": "setSelectionInterval", "method_sig": "void setSelectionInterval (int index0,\n                          int index1)", "description": "Changes the selection to be between index0 and index1\n inclusive. index0 doesn't have to be less than or equal to\n index1.\n \n In SINGLE_SELECTION selection mode, only the second index\n is used.\n \n If this represents a change to the current selection, then each\n ListSelectionListener is notified of the change."}, {"method_name": "addSelectionInterval", "method_sig": "void addSelectionInterval (int index0,\n                          int index1)", "description": "Changes the selection to be the set union of the current selection\n and the indices between index0 and index1 inclusive.\n index0 doesn't have to be less than or equal to index1.\n \n In SINGLE_SELECTION selection mode, this is equivalent\n to calling setSelectionInterval, and only the second index\n is used. In SINGLE_INTERVAL_SELECTION selection mode, this\n method behaves like setSelectionInterval, unless the given\n interval is immediately adjacent to or overlaps the existing selection,\n and can therefore be used to grow the selection.\n \n If this represents a change to the current selection, then each\n ListSelectionListener is notified of the change."}, {"method_name": "removeSelectionInterval", "method_sig": "void removeSelectionInterval (int index0,\n                             int index1)", "description": "Changes the selection to be the set difference of the current selection\n and the indices between index0 and index1 inclusive.\n index0 doesn't have to be less than or equal to index1.\n \n In SINGLE_INTERVAL_SELECTION selection mode, if the removal\n would produce two disjoint selections, the removal is extended through\n the greater end of the selection. For example, if the selection is\n 0-10 and you supply indices 5,6 (in any order) the\n resulting selection is 0-4.\n \n If this represents a change to the current selection, then each\n ListSelectionListener is notified of the change."}, {"method_name": "getMinSelectionIndex", "method_sig": "int getMinSelectionIndex()", "description": "Returns the first selected index or -1 if the selection is empty."}, {"method_name": "getMaxSelectionIndex", "method_sig": "int getMaxSelectionIndex()", "description": "Returns the last selected index or -1 if the selection is empty."}, {"method_name": "isSelectedIndex", "method_sig": "boolean isSelectedIndex (int index)", "description": "Returns true if the specified index is selected."}, {"method_name": "getAnchorSelectionIndex", "method_sig": "int getAnchorSelectionIndex()", "description": "Return the first index argument from the most recent call to\n setSelectionInterval(), addSelectionInterval() or removeSelectionInterval().\n The most recent index0 is considered the \"anchor\" and the most recent\n index1 is considered the \"lead\".  Some interfaces display these\n indices specially, e.g. Windows95 displays the lead index with a\n dotted yellow outline."}, {"method_name": "setAnchorSelectionIndex", "method_sig": "void setAnchorSelectionIndex (int index)", "description": "Set the anchor selection index."}, {"method_name": "getLeadSelectionIndex", "method_sig": "int getLeadSelectionIndex()", "description": "Return the second index argument from the most recent call to\n setSelectionInterval(), addSelectionInterval() or removeSelectionInterval()."}, {"method_name": "setLeadSelectionIndex", "method_sig": "void setLeadSelectionIndex (int index)", "description": "Set the lead selection index."}, {"method_name": "clearSelection", "method_sig": "void clearSelection()", "description": "Change the selection to the empty set.  If this represents\n a change to the current selection then notify each ListSelectionListener."}, {"method_name": "isSelectionEmpty", "method_sig": "boolean isSelectionEmpty()", "description": "Returns true if no indices are selected."}, {"method_name": "insertIndexInterval", "method_sig": "void insertIndexInterval (int index,\n                         int length,\n                         boolean before)", "description": "Insert length indices beginning before/after index. This is typically\n called to sync the selection model with a corresponding change\n in the data model."}, {"method_name": "removeIndexInterval", "method_sig": "void removeIndexInterval (int index0,\n                         int index1)", "description": "Remove the indices in the interval index0,index1 (inclusive) from\n the selection model.  This is typically called to sync the selection\n model width a corresponding change in the data model."}, {"method_name": "setValueIsAdjusting", "method_sig": "void setValueIsAdjusting (boolean valueIsAdjusting)", "description": "Sets the valueIsAdjusting property, which indicates whether\n or not upcoming selection changes should be considered part of a single\n change. The value of this property is used to initialize the\n valueIsAdjusting property of the ListSelectionEvents that\n are generated.\n \n For example, if the selection is being updated in response to a user\n drag, this property can be set to true when the drag is initiated\n and set to false when the drag is finished. During the drag,\n listeners receive events with a valueIsAdjusting property\n set to true. At the end of the drag, when the change is\n finalized, listeners receive an event with the value set to false.\n Listeners can use this pattern if they wish to update only when a change\n has been finalized.\n \n Setting this property to true begins a series of changes that\n is to be considered part of a single change. When the property is changed\n back to false, an event is sent out characterizing the entire\n selection change (if there was one), with the event's\n valueIsAdjusting property set to false."}, {"method_name": "getValueIsAdjusting", "method_sig": "boolean getValueIsAdjusting()", "description": "Returns true if the selection is undergoing a series of changes."}, {"method_name": "setSelectionMode", "method_sig": "void setSelectionMode (int selectionMode)", "description": "Sets the selection mode. The following list describes the accepted\n selection modes:\n \nListSelectionModel.SINGLE_SELECTION -\n   Only one list index can be selected at a time. In this mode,\n   setSelectionInterval and addSelectionInterval are\n   equivalent, both replacing the current selection with the index\n   represented by the second argument (the \"lead\").\n ListSelectionModel.SINGLE_INTERVAL_SELECTION -\n   Only one contiguous interval can be selected at a time.\n   In this mode, addSelectionInterval behaves like\n   setSelectionInterval (replacing the current selection),\n   unless the given interval is immediately adjacent to or overlaps\n   the existing selection, and can therefore be used to grow it.\n ListSelectionModel.MULTIPLE_INTERVAL_SELECTION -\n   In this mode, there's no restriction on what can be selected.\n "}, {"method_name": "getSelectionMode", "method_sig": "int getSelectionMode()", "description": "Returns the current selection mode."}, {"method_name": "addListSelectionListener", "method_sig": "void addListSelectionListener (ListSelectionListener x)", "description": "Add a listener to the list that's notified each time a change\n to the selection occurs."}, {"method_name": "removeListSelectionListener", "method_sig": "void removeListSelectionListener (ListSelectionListener x)", "description": "Remove a listener from the list that's notified each time a\n change to the selection occurs."}, {"method_name": "getSelectedIndices", "method_sig": "default int[] getSelectedIndices()", "description": "Returns an array of all of the selected indices in the selection model,\n in increasing order."}, {"method_name": "getSelectedItemsCount", "method_sig": "default int getSelectedItemsCount()", "description": "Returns the number of selected items."}]}