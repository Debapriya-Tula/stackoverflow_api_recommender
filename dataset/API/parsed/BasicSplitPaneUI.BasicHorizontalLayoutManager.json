{"name": "Class BasicSplitPaneUI.BasicHorizontalLayoutManager", "module": "java.desktop", "package": "javax.swing.plaf.basic", "text": "LayoutManager for JSplitPanes that have an orientation of\n HORIZONTAL_SPLIT.", "codes": ["public class BasicSplitPaneUI.BasicHorizontalLayoutManager\nextends Object\nimplements LayoutManager2"], "fields": [{"field_name": "sizes", "field_sig": "protected\u00a0int[] sizes", "description": "The size of components."}, {"field_name": "components", "field_sig": "protected\u00a0Component[] components", "description": "The components."}], "methods": [{"method_name": "layoutContainer", "method_sig": "public void layoutContainer (Container container)", "description": "Does the actual layout."}, {"method_name": "addLayoutComponent", "method_sig": "public void addLayoutComponent (String place,\n                               Component component)", "description": "Adds the component at place.  Place must be one of\n JSplitPane.LEFT, RIGHT, TOP, BOTTOM, or null (for the\n divider)."}, {"method_name": "minimumLayoutSize", "method_sig": "public Dimension minimumLayoutSize (Container container)", "description": "Returns the minimum size needed to contain the children.\n The width is the sum of all the children's min widths and\n the height is the largest of the children's minimum heights."}, {"method_name": "preferredLayoutSize", "method_sig": "public Dimension preferredLayoutSize (Container container)", "description": "Returns the preferred size needed to contain the children.\n The width is the sum of all the preferred widths of the children and\n the height is the largest preferred height of the children."}, {"method_name": "removeLayoutComponent", "method_sig": "public void removeLayoutComponent (Component component)", "description": "Removes the specified component from our knowledge."}, {"method_name": "addLayoutComponent", "method_sig": "public void addLayoutComponent (Component comp,\n                               Object constraints)", "description": "Adds the specified component to the layout, using the specified\n constraint object."}, {"method_name": "getLayoutAlignmentX", "method_sig": "public float getLayoutAlignmentX (Container target)", "description": "Returns the alignment along the x axis.  This specifies how\n the component would like to be aligned relative to other\n components.  The value should be a number between 0 and 1\n where 0 represents alignment along the origin, 1 is aligned\n the furthest away from the origin, 0.5 is centered, etc."}, {"method_name": "getLayoutAlignmentY", "method_sig": "public float getLayoutAlignmentY (Container target)", "description": "Returns the alignment along the y axis.  This specifies how\n the component would like to be aligned relative to other\n components.  The value should be a number between 0 and 1\n where 0 represents alignment along the origin, 1 is aligned\n the furthest away from the origin, 0.5 is centered, etc."}, {"method_name": "invalidateLayout", "method_sig": "public void invalidateLayout (Container c)", "description": "Does nothing. If the developer really wants to change the\n size of one of the views JSplitPane.resetToPreferredSizes should\n be messaged."}, {"method_name": "maximumLayoutSize", "method_sig": "public Dimension maximumLayoutSize (Container target)", "description": "Returns the maximum layout size, which is Integer.MAX_VALUE\n in both directions."}, {"method_name": "resetToPreferredSizes", "method_sig": "public void resetToPreferredSizes()", "description": "Marks the receiver so that the next time this instance is\n laid out it'll ask for the preferred sizes."}, {"method_name": "resetSizeAt", "method_sig": "protected void resetSizeAt (int index)", "description": "Resets the size of the Component at the passed in location."}, {"method_name": "setSizes", "method_sig": "protected void setSizes (int[] newSizes)", "description": "Sets the sizes to newSizes."}, {"method_name": "getSizes", "method_sig": "protected int[] getSizes()", "description": "Returns the sizes of the components."}, {"method_name": "getPreferredSizeOfComponent", "method_sig": "protected int getPreferredSizeOfComponent (Component c)", "description": "Returns the width of the passed in Components preferred size."}, {"method_name": "getSizeOfComponent", "method_sig": "protected int getSizeOfComponent (Component c)", "description": "Returns the width of the passed in component."}, {"method_name": "getAvailableSize", "method_sig": "protected int getAvailableSize (Dimension containerSize,\n                               Insets insets)", "description": "Returns the available width based on the container size and\n Insets."}, {"method_name": "getInitialLocation", "method_sig": "protected int getInitialLocation (Insets insets)", "description": "Returns the left inset, unless the Insets are null in which case\n 0 is returned."}, {"method_name": "setComponentToSize", "method_sig": "protected void setComponentToSize (Component c,\n                                  int size,\n                                  int location,\n                                  Insets insets,\n                                  Dimension containerSize)", "description": "Sets the width of the component c to be size, placing its\n x location at location, y to the insets.top and height\n to the containerSize.height less the top and bottom insets."}, {"method_name": "updateComponents", "method_sig": "protected void updateComponents()", "description": "Determines the components. This should be called whenever\n a new instance of this is installed into an existing\n SplitPane."}]}