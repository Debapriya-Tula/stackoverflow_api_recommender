{"name": "Class Phaser", "module": "java.base", "package": "java.util.concurrent", "text": "A reusable synchronization barrier, similar in functionality to\n CyclicBarrier and CountDownLatch but supporting\n more flexible usage.\n\n Registration. Unlike the case for other barriers, the\n number of parties registered to synchronize on a phaser\n may vary over time.  Tasks may be registered at any time (using\n methods register(), bulkRegister(int), or forms of\n constructors establishing initial numbers of parties), and\n optionally deregistered upon any arrival (using arriveAndDeregister()).  As is the case with most basic\n synchronization constructs, registration and deregistration affect\n only internal counts; they do not establish any further internal\n bookkeeping, so tasks cannot query whether they are registered.\n (However, you can introduce such bookkeeping by subclassing this\n class.)\n\n Synchronization. Like a CyclicBarrier, a \n Phaser may be repeatedly awaited.  Method arriveAndAwaitAdvance() has effect analogous to CyclicBarrier.await. Each\n generation of a phaser has an associated phase number. The phase\n number starts at zero, and advances when all parties arrive at the\n phaser, wrapping around to zero after reaching \n Integer.MAX_VALUE. The use of phase numbers enables independent\n control of actions upon arrival at a phaser and upon awaiting\n others, via two kinds of methods that may be invoked by any\n registered party:\n\n \nArrival. Methods arrive() and\n       arriveAndDeregister() record arrival.  These methods\n       do not block, but return an associated arrival phase\n       number; that is, the phase number of the phaser to which\n       the arrival applied. When the final party for a given phase\n       arrives, an optional action is performed and the phase\n       advances.  These actions are performed by the party\n       triggering a phase advance, and are arranged by overriding\n       method onAdvance(int, int), which also controls\n       termination. Overriding this method is similar to, but more\n       flexible than, providing a barrier action to a \n       CyclicBarrier.\n\n   Waiting. Method awaitAdvance(int) requires an\n       argument indicating an arrival phase number, and returns when\n       the phaser advances to (or is already at) a different phase.\n       Unlike similar constructions using CyclicBarrier,\n       method awaitAdvance continues to wait even if the\n       waiting thread is interrupted. Interruptible and timeout\n       versions are also available, but exceptions encountered while\n       tasks wait interruptibly or with timeout do not change the\n       state of the phaser. If necessary, you can perform any\n       associated recovery within handlers of those exceptions,\n       often after invoking forceTermination.  Phasers may\n       also be used by tasks executing in a ForkJoinPool.\n       Progress is ensured if the pool's parallelismLevel can\n       accommodate the maximum number of simultaneously blocked\n       parties.\n\n \nTermination. A phaser may enter a termination\n state, that may be checked using method isTerminated(). Upon\n termination, all synchronization methods immediately return without\n waiting for advance, as indicated by a negative return value.\n Similarly, attempts to register upon termination have no effect.\n Termination is triggered when an invocation of onAdvance\n returns true. The default implementation returns \n true if a deregistration has caused the number of registered\n parties to become zero.  As illustrated below, when phasers control\n actions with a fixed number of iterations, it is often convenient\n to override this method to cause termination when the current phase\n number reaches a threshold. Method forceTermination() is\n also available to abruptly release waiting threads and allow them\n to terminate.\n\n Tiering. Phasers may be tiered (i.e.,\n constructed in tree structures) to reduce contention. Phasers with\n large numbers of parties that would otherwise experience heavy\n synchronization contention costs may instead be set up so that\n groups of sub-phasers share a common parent.  This may greatly\n increase throughput even though it incurs greater per-operation\n overhead.\n\n In a tree of tiered phasers, registration and deregistration of\n child phasers with their parent are managed automatically.\n Whenever the number of registered parties of a child phaser becomes\n non-zero (as established in the Phaser(Phaser,int)\n constructor, register(), or bulkRegister(int)), the\n child phaser is registered with its parent.  Whenever the number of\n registered parties becomes zero as the result of an invocation of\n arriveAndDeregister(), the child phaser is deregistered\n from its parent.\n\n Monitoring. While synchronization methods may be invoked\n only by registered parties, the current state of a phaser may be\n monitored by any caller.  At any given moment there are getRegisteredParties() parties in total, of which getArrivedParties() have arrived at the current phase (getPhase()).  When the remaining (getUnarrivedParties())\n parties arrive, the phase advances.  The values returned by these\n methods may reflect transient states and so are not in general\n useful for synchronization control.  Method toString()\n returns snapshots of these state queries in a form convenient for\n informal monitoring.\n\n Sample usages:\nA Phaser may be used instead of a CountDownLatch\n to control a one-shot action serving a variable number of parties.\n The typical idiom is for the method setting this up to first\n register, then start all the actions, then deregister, as in:\n\n  \n void runTasks(List<Runnable> tasks) {\n   Phaser startingGate = new Phaser(1); // \"1\" to register self\n   // create and start threads\n   for (Runnable task : tasks) {\n     startingGate.register();\n     new Thread(() -> {\n       startingGate.arriveAndAwaitAdvance();\n       task.run();\n     }).start();\n   }\n\n   // deregister self to allow threads to proceed\n   startingGate.arriveAndDeregister();\n }\nOne way to cause a set of threads to repeatedly perform actions\n for a given number of iterations is to override onAdvance:\n\n  \n void startTasks(List<Runnable> tasks, int iterations) {\n   Phaser phaser = new Phaser() {\n     protected boolean onAdvance(int phase, int registeredParties) {\n       return phase >= iterations - 1 || registeredParties == 0;\n     }\n   };\n   phaser.register();\n   for (Runnable task : tasks) {\n     phaser.register();\n     new Thread(() -> {\n       do {\n         task.run();\n         phaser.arriveAndAwaitAdvance();\n       } while (!phaser.isTerminated());\n     }).start();\n   }\n   // allow threads to proceed; don't wait for them\n   phaser.arriveAndDeregister();\n }\n\n If the main task must later await termination, it\n may re-register and then execute a similar loop:\n  \n   // ...\n   phaser.register();\n   while (!phaser.isTerminated())\n     phaser.arriveAndAwaitAdvance();\nRelated constructions may be used to await particular phase numbers\n in contexts where you are sure that the phase will never wrap around\n Integer.MAX_VALUE. For example:\n\n  \n void awaitPhase(Phaser phaser, int phase) {\n   int p = phaser.register(); // assumes caller not already registered\n   while (p < phase) {\n     if (phaser.isTerminated())\n       // ... deal with unexpected termination\n     else\n       p = phaser.arriveAndAwaitAdvance();\n   }\n   phaser.arriveAndDeregister();\n }\nTo create a set of n tasks using a tree of phasers, you\n could use code of the following form, assuming a Task class with a\n constructor accepting a Phaser that it registers with upon\n construction. After invocation of build(new Task[n], 0, n,\n new Phaser()), these tasks could then be started, for example by\n submitting to a pool:\n\n  \n void build(Task[] tasks, int lo, int hi, Phaser ph) {\n   if (hi - lo > TASKS_PER_PHASER) {\n     for (int i = lo; i < hi; i += TASKS_PER_PHASER) {\n       int j = Math.min(i + TASKS_PER_PHASER, hi);\n       build(tasks, i, j, new Phaser(ph));\n     }\n   } else {\n     for (int i = lo; i < hi; ++i)\n       tasks[i] = new Task(ph);\n       // assumes new Task(ph) performs ph.register()\n   }\n }\n\n The best value of TASKS_PER_PHASER depends mainly on\n expected synchronization rates. A value as low as four may\n be appropriate for extremely small per-phase task bodies (thus\n high rates), or up to hundreds for extremely large ones.\n\n Implementation notes: This implementation restricts the\n maximum number of parties to 65535. Attempts to register additional\n parties result in IllegalStateException. However, you can and\n should create tiered phasers to accommodate arbitrarily large sets\n of participants.", "codes": ["public class Phaser\nextends Object"], "fields": [], "methods": [{"method_name": "register", "method_sig": "public int register()", "description": "Adds a new unarrived party to this phaser.  If an ongoing\n invocation of onAdvance(int, int) is in progress, this method\n may await its completion before returning.  If this phaser has\n a parent, and this phaser previously had no registered parties,\n this child phaser is also registered with its parent. If\n this phaser is terminated, the attempt to register has\n no effect, and a negative value is returned."}, {"method_name": "bulkRegister", "method_sig": "public int bulkRegister (int parties)", "description": "Adds the given number of new unarrived parties to this phaser.\n If an ongoing invocation of onAdvance(int, int) is in progress,\n this method may await its completion before returning.  If this\n phaser has a parent, and the given number of parties is greater\n than zero, and this phaser previously had no registered\n parties, this child phaser is also registered with its parent.\n If this phaser is terminated, the attempt to register has no\n effect, and a negative value is returned."}, {"method_name": "arrive", "method_sig": "public int arrive()", "description": "Arrives at this phaser, without waiting for others to arrive.\n\n It is a usage error for an unregistered party to invoke this\n method.  However, this error may result in an \n IllegalStateException only upon some subsequent operation on\n this phaser, if ever."}, {"method_name": "arriveAndDeregister", "method_sig": "public int arriveAndDeregister()", "description": "Arrives at this phaser and deregisters from it without waiting\n for others to arrive. Deregistration reduces the number of\n parties required to advance in future phases.  If this phaser\n has a parent, and deregistration causes this phaser to have\n zero parties, this phaser is also deregistered from its parent.\n\n It is a usage error for an unregistered party to invoke this\n method.  However, this error may result in an \n IllegalStateException only upon some subsequent operation on\n this phaser, if ever."}, {"method_name": "arriveAndAwaitAdvance", "method_sig": "public int arriveAndAwaitAdvance()", "description": "Arrives at this phaser and awaits others. Equivalent in effect\n to awaitAdvance(arrive()).  If you need to await with\n interruption or timeout, you can arrange this with an analogous\n construction using one of the other forms of the \n awaitAdvance method.  If instead you need to deregister upon\n arrival, use awaitAdvance(arriveAndDeregister()).\n\n It is a usage error for an unregistered party to invoke this\n method.  However, this error may result in an \n IllegalStateException only upon some subsequent operation on\n this phaser, if ever."}, {"method_name": "awaitAdvance", "method_sig": "public int awaitAdvance (int phase)", "description": "Awaits the phase of this phaser to advance from the given phase\n value, returning immediately if the current phase is not equal\n to the given phase value or this phaser is terminated."}, {"method_name": "awaitAdvanceInterruptibly", "method_sig": "public int awaitAdvanceInterruptibly (int phase)\n                              throws InterruptedException", "description": "Awaits the phase of this phaser to advance from the given phase\n value, throwing InterruptedException if interrupted\n while waiting, or returning immediately if the current phase is\n not equal to the given phase value or this phaser is\n terminated."}, {"method_name": "awaitAdvanceInterruptibly", "method_sig": "public int awaitAdvanceInterruptibly (int phase,\n                                     long timeout,\n                                     TimeUnit unit)\n                              throws InterruptedException,\n                                     TimeoutException", "description": "Awaits the phase of this phaser to advance from the given phase\n value or the given timeout to elapse, throwing \n InterruptedException if interrupted while waiting, or\n returning immediately if the current phase is not equal to the\n given phase value or this phaser is terminated."}, {"method_name": "forceTermination", "method_sig": "public void forceTermination()", "description": "Forces this phaser to enter termination state.  Counts of\n registered parties are unaffected.  If this phaser is a member\n of a tiered set of phasers, then all of the phasers in the set\n are terminated.  If this phaser is already terminated, this\n method has no effect.  This method may be useful for\n coordinating recovery after one or more tasks encounter\n unexpected exceptions."}, {"method_name": "getPhase", "method_sig": "public final int getPhase()", "description": "Returns the current phase number. The maximum phase number is\n Integer.MAX_VALUE, after which it restarts at\n zero. Upon termination, the phase number is negative,\n in which case the prevailing phase prior to termination\n may be obtained via getPhase() + Integer.MIN_VALUE."}, {"method_name": "getRegisteredParties", "method_sig": "public int getRegisteredParties()", "description": "Returns the number of parties registered at this phaser."}, {"method_name": "getArrivedParties", "method_sig": "public int getArrivedParties()", "description": "Returns the number of registered parties that have arrived at\n the current phase of this phaser. If this phaser has terminated,\n the returned value is meaningless and arbitrary."}, {"method_name": "getUnarrivedParties", "method_sig": "public int getUnarrivedParties()", "description": "Returns the number of registered parties that have not yet\n arrived at the current phase of this phaser. If this phaser has\n terminated, the returned value is meaningless and arbitrary."}, {"method_name": "getParent", "method_sig": "public Phaser getParent()", "description": "Returns the parent of this phaser, or null if none."}, {"method_name": "getRoot", "method_sig": "public Phaser getRoot()", "description": "Returns the root ancestor of this phaser, which is the same as\n this phaser if it has no parent."}, {"method_name": "isTerminated", "method_sig": "public boolean isTerminated()", "description": "Returns true if this phaser has been terminated."}, {"method_name": "onAdvance", "method_sig": "protected boolean onAdvance (int phase,\n                            int registeredParties)", "description": "Overridable method to perform an action upon impending phase\n advance, and to control termination. This method is invoked\n upon arrival of the party advancing this phaser (when all other\n waiting parties are dormant).  If this method returns \n true, this phaser will be set to a final termination state\n upon advance, and subsequent calls to isTerminated()\n will return true. Any (unchecked) Exception or Error thrown by\n an invocation of this method is propagated to the party\n attempting to advance this phaser, in which case no advance\n occurs.\n\n The arguments to this method provide the state of the phaser\n prevailing for the current transition.  The effects of invoking\n arrival, registration, and waiting methods on this phaser from\n within onAdvance are unspecified and should not be\n relied on.\n\n If this phaser is a member of a tiered set of phasers, then\n onAdvance is invoked only for its root phaser on each\n advance.\n\n To support the most common use cases, the default\n implementation of this method returns true when the\n number of registered parties has become zero as the result of a\n party invoking arriveAndDeregister.  You can disable\n this behavior, thus enabling continuation upon future\n registrations, by overriding this method to always return\n false:\n\n  \n Phaser phaser = new Phaser() {\n   protected boolean onAdvance(int phase, int parties) { return false; }\n }"}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a string identifying this phaser, as well as its\n state.  The state, in brackets, includes the String \n \"phase = \" followed by the phase number, \"parties = \"\n followed by the number of registered parties, and \n \"arrived = \" followed by the number of arrived parties."}]}