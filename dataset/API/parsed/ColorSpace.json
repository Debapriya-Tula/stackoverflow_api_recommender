{"name": "Class ColorSpace", "module": "java.desktop", "package": "java.awt.color", "text": "This abstract class is used to serve as a color space tag to identify the\n specific color space of a Color object or, via a ColorModel object,\n of an Image, a BufferedImage, or a GraphicsDevice.  It contains\n methods that transform colors in a specific color space to/from sRGB\n and to/from a well-defined CIEXYZ color space.\n \n For purposes of the methods in this class, colors are represented as\n arrays of color components represented as floats in a normalized range\n defined by each ColorSpace.  For many ColorSpaces (e.g. sRGB), this\n range is 0.0 to 1.0.  However, some ColorSpaces have components whose\n values have a different range.  Methods are provided to inquire per\n component minimum and maximum normalized values.\n \n Several variables are defined for purposes of referring to color\n space types (e.g. TYPE_RGB, TYPE_XYZ, etc.) and to refer to specific\n color spaces (e.g. CS_sRGB and CS_CIEXYZ).\n sRGB is a proposed standard RGB color space.  For more information,\n see \n http://www.w3.org/pub/WWW/Graphics/Color/sRGB.html\n .\n \n The purpose of the methods to transform to/from the well-defined\n CIEXYZ color space is to support conversions between any two color\n spaces at a reasonably high degree of accuracy.  It is expected that\n particular implementations of subclasses of ColorSpace (e.g.\n ICC_ColorSpace) will support high performance conversion based on\n underlying platform color management systems.\n \n The CS_CIEXYZ space used by the toCIEXYZ/fromCIEXYZ methods can be\n described as follows:\n\n\n\u00a0     CIEXYZ\n\u00a0     viewing illuminance: 200 lux\n\u00a0     viewing white point: CIE D50\n\u00a0     media white point: \"that of a perfectly reflecting diffuser\" -- D50\n\u00a0     media black point: 0 lux or 0 Reflectance\n\u00a0     flare: 1 percent\n\u00a0     surround: 20percent of the media white point\n\u00a0     media description: reflection print (i.e., RLAB, Hunt viewing media)\n\u00a0     note: For developers creating an ICC profile for this conversion\n\u00a0           space, the following is applicable.  Use a simple Von Kries\n\u00a0           white point adaptation folded into the 3X3 matrix parameters\n\u00a0           and fold the flare and surround effects into the three\n\u00a0           one-dimensional lookup tables (assuming one uses the minimal\n\u00a0           model for monitors).\n\n", "codes": ["public abstract class ColorSpace\nextends Object\nimplements Serializable"], "fields": [{"field_name": "TYPE_XYZ", "field_sig": "@Native\npublic static final\u00a0int TYPE_XYZ", "description": "Any of the family of XYZ color spaces."}, {"field_name": "TYPE_Lab", "field_sig": "@Native\npublic static final\u00a0int TYPE_Lab", "description": "Any of the family of Lab color spaces."}, {"field_name": "TYPE_Luv", "field_sig": "@Native\npublic static final\u00a0int TYPE_Luv", "description": "Any of the family of Luv color spaces."}, {"field_name": "TYPE_YCbCr", "field_sig": "@Native\npublic static final\u00a0int TYPE_YCbCr", "description": "Any of the family of YCbCr color spaces."}, {"field_name": "TYPE_Yxy", "field_sig": "@Native\npublic static final\u00a0int TYPE_Yxy", "description": "Any of the family of Yxy color spaces."}, {"field_name": "TYPE_RGB", "field_sig": "@Native\npublic static final\u00a0int TYPE_RGB", "description": "Any of the family of RGB color spaces."}, {"field_name": "TYPE_GRAY", "field_sig": "@Native\npublic static final\u00a0int TYPE_GRAY", "description": "Any of the family of GRAY color spaces."}, {"field_name": "TYPE_HSV", "field_sig": "@Native\npublic static final\u00a0int TYPE_HSV", "description": "Any of the family of HSV color spaces."}, {"field_name": "TYPE_HLS", "field_sig": "@Native\npublic static final\u00a0int TYPE_HLS", "description": "Any of the family of HLS color spaces."}, {"field_name": "TYPE_CMYK", "field_sig": "@Native\npublic static final\u00a0int TYPE_CMYK", "description": "Any of the family of CMYK color spaces."}, {"field_name": "TYPE_CMY", "field_sig": "@Native\npublic static final\u00a0int TYPE_CMY", "description": "Any of the family of CMY color spaces."}, {"field_name": "TYPE_2CLR", "field_sig": "@Native\npublic static final\u00a0int TYPE_2CLR", "description": "Generic 2 component color spaces."}, {"field_name": "TYPE_3CLR", "field_sig": "@Native\npublic static final\u00a0int TYPE_3CLR", "description": "Generic 3 component color spaces."}, {"field_name": "TYPE_4CLR", "field_sig": "@Native\npublic static final\u00a0int TYPE_4CLR", "description": "Generic 4 component color spaces."}, {"field_name": "TYPE_5CLR", "field_sig": "@Native\npublic static final\u00a0int TYPE_5CLR", "description": "Generic 5 component color spaces."}, {"field_name": "TYPE_6CLR", "field_sig": "@Native\npublic static final\u00a0int TYPE_6CLR", "description": "Generic 6 component color spaces."}, {"field_name": "TYPE_7CLR", "field_sig": "@Native\npublic static final\u00a0int TYPE_7CLR", "description": "Generic 7 component color spaces."}, {"field_name": "TYPE_8CLR", "field_sig": "@Native\npublic static final\u00a0int TYPE_8CLR", "description": "Generic 8 component color spaces."}, {"field_name": "TYPE_9CLR", "field_sig": "@Native\npublic static final\u00a0int TYPE_9CLR", "description": "Generic 9 component color spaces."}, {"field_name": "TYPE_ACLR", "field_sig": "@Native\npublic static final\u00a0int TYPE_ACLR", "description": "Generic 10 component color spaces."}, {"field_name": "TYPE_BCLR", "field_sig": "@Native\npublic static final\u00a0int TYPE_BCLR", "description": "Generic 11 component color spaces."}, {"field_name": "TYPE_CCLR", "field_sig": "@Native\npublic static final\u00a0int TYPE_CCLR", "description": "Generic 12 component color spaces."}, {"field_name": "TYPE_DCLR", "field_sig": "@Native\npublic static final\u00a0int TYPE_DCLR", "description": "Generic 13 component color spaces."}, {"field_name": "TYPE_ECLR", "field_sig": "@Native\npublic static final\u00a0int TYPE_ECLR", "description": "Generic 14 component color spaces."}, {"field_name": "TYPE_FCLR", "field_sig": "@Native\npublic static final\u00a0int TYPE_FCLR", "description": "Generic 15 component color spaces."}, {"field_name": "CS_sRGB", "field_sig": "@Native\npublic static final\u00a0int CS_sRGB", "description": "The sRGB color space defined at\n \n http://www.w3.org/pub/WWW/Graphics/Color/sRGB.html\n ."}, {"field_name": "CS_LINEAR_RGB", "field_sig": "@Native\npublic static final\u00a0int CS_LINEAR_RGB", "description": "A built-in linear RGB color space.  This space is based on the\n same RGB primaries as CS_sRGB, but has a linear tone reproduction curve."}, {"field_name": "CS_CIEXYZ", "field_sig": "@Native\npublic static final\u00a0int CS_CIEXYZ", "description": "The CIEXYZ conversion color space defined above."}, {"field_name": "CS_PYCC", "field_sig": "@Native\npublic static final\u00a0int CS_PYCC", "description": "The Photo YCC conversion color space."}, {"field_name": "CS_GRAY", "field_sig": "@Native\npublic static final\u00a0int CS_GRAY", "description": "The built-in linear gray scale color space."}], "methods": [{"method_name": "getInstance", "method_sig": "public static ColorSpace getInstance (int colorspace)", "description": "Returns a ColorSpace representing one of the specific\n predefined color spaces."}, {"method_name": "isCS_sRGB", "method_sig": "public boolean isCS_sRGB()", "description": "Returns true if the ColorSpace is CS_sRGB."}, {"method_name": "toRGB", "method_sig": "public abstract float[] toRGB (float[] colorvalue)", "description": "Transforms a color value assumed to be in this ColorSpace\n into a value in the default CS_sRGB color space.\n \n This method transforms color values using algorithms designed\n to produce the best perceptual match between input and output\n colors.  In order to do colorimetric conversion of color values,\n you should use the toCIEXYZ\n method of this color space to first convert from the input\n color space to the CS_CIEXYZ color space, and then use the\n fromCIEXYZ method of the CS_sRGB color space to\n convert from CS_CIEXYZ to the output color space.\n See toCIEXYZ and\n fromCIEXYZ for further information."}, {"method_name": "fromRGB", "method_sig": "public abstract float[] fromRGB (float[] rgbvalue)", "description": "Transforms a color value assumed to be in the default CS_sRGB\n color space into this ColorSpace.\n \n This method transforms color values using algorithms designed\n to produce the best perceptual match between input and output\n colors.  In order to do colorimetric conversion of color values,\n you should use the toCIEXYZ\n method of the CS_sRGB color space to first convert from the input\n color space to the CS_CIEXYZ color space, and then use the\n fromCIEXYZ method of this color space to\n convert from CS_CIEXYZ to the output color space.\n See toCIEXYZ and\n fromCIEXYZ for further information."}, {"method_name": "toCIEXYZ", "method_sig": "public abstract float[] toCIEXYZ (float[] colorvalue)", "description": "Transforms a color value assumed to be in this ColorSpace\n into the CS_CIEXYZ conversion color space.\n \n This method transforms color values using relative colorimetry,\n as defined by the International Color Consortium standard.  This\n means that the XYZ values returned by this method are represented\n relative to the D50 white point of the CS_CIEXYZ color space.\n This representation is useful in a two-step color conversion\n process in which colors are transformed from an input color\n space to CS_CIEXYZ and then to an output color space.  This\n representation is not the same as the XYZ values that would\n be measured from the given color value by a colorimeter.\n A further transformation is necessary to compute the XYZ values\n that would be measured using current CIE recommended practices.\n See the toCIEXYZ method of\n ICC_ColorSpace for further information."}, {"method_name": "fromCIEXYZ", "method_sig": "public abstract float[] fromCIEXYZ (float[] colorvalue)", "description": "Transforms a color value assumed to be in the CS_CIEXYZ conversion\n color space into this ColorSpace.\n \n This method transforms color values using relative colorimetry,\n as defined by the International Color Consortium standard.  This\n means that the XYZ argument values taken by this method are represented\n relative to the D50 white point of the CS_CIEXYZ color space.\n This representation is useful in a two-step color conversion\n process in which colors are transformed from an input color\n space to CS_CIEXYZ and then to an output color space.  The color\n values returned by this method are not those that would produce\n the XYZ value passed to the method when measured by a colorimeter.\n If you have XYZ values corresponding to measurements made using\n current CIE recommended practices, they must be converted to D50\n relative values before being passed to this method.\n See the fromCIEXYZ method of\n ICC_ColorSpace for further information."}, {"method_name": "getType", "method_sig": "public int getType()", "description": "Returns the color space type of this ColorSpace (for example\n TYPE_RGB, TYPE_XYZ, ...).  The type defines the\n number of components of the color space and the interpretation,\n e.g. TYPE_RGB identifies a color space with three components - red,\n green, and blue.  It does not define the particular color\n characteristics of the space, e.g. the chromaticities of the\n primaries."}, {"method_name": "getNumComponents", "method_sig": "public int getNumComponents()", "description": "Returns the number of components of this ColorSpace."}, {"method_name": "getName", "method_sig": "public String getName (int idx)", "description": "Returns the name of the component given the component index."}, {"method_name": "getMinValue", "method_sig": "public float getMinValue (int component)", "description": "Returns the minimum normalized color component value for the\n specified component.  The default implementation in this abstract\n class returns 0.0 for all components.  Subclasses should override\n this method if necessary."}, {"method_name": "getMaxValue", "method_sig": "public float getMaxValue (int component)", "description": "Returns the maximum normalized color component value for the\n specified component.  The default implementation in this abstract\n class returns 1.0 for all components.  Subclasses should override\n this method if necessary."}]}