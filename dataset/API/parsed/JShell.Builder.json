{"name": "Class JShell.Builder", "module": "jdk.jshell", "package": "jdk.jshell", "text": "Builder for JShell instances.\n Create custom instances of JShell by using the setter\n methods on this class.  After zero or more of these, use the\n build() method to create a JShell instance.\n These can all be chained. For example, setting the remote output and\n error streams:\n \n \n     JShell myShell =\n       JShell.builder()\n         .out(myOutStream)\n         .err(myErrStream)\n         .build();  \n If no special set-up is needed, just use\n JShell.builder().build() or the short-cut equivalent\n JShell.create().", "codes": ["public static class JShell.Builder\nextends Object"], "fields": [], "methods": [{"method_name": "in", "method_sig": "public JShell.Builder in (InputStream in)", "description": "Sets the input for the running evaluation (it's System.in). Note:\n applications that use System.in for snippet or other\n user input cannot use System.in as the input stream for\n the remote process.\n \n The read method of the InputStream may throw the InterruptedIOException\n to signal the user canceled the input. The currently running snippet will be automatically\n stopped.\n \n The default, if this is not set, is to provide an empty input stream\n -- new ByteArrayInputStream(new byte[0])."}, {"method_name": "out", "method_sig": "public JShell.Builder out (PrintStream out)", "description": "Sets the output for the running evaluation (it's System.out).\n The controlling process and\n the remote process can share System.out.\n \n The default, if this is not set, is System.out."}, {"method_name": "err", "method_sig": "public JShell.Builder err (PrintStream err)", "description": "Sets the error output for the running evaluation (it's\n System.err). The controlling process and the remote\n process can share System.err.\n \n The default, if this is not set, is System.err."}, {"method_name": "tempVariableNameGenerator", "method_sig": "public JShell.Builder tempVariableNameGenerator (Supplier<String> generator)", "description": "Sets a generator of temp variable names for\n VarSnippet of\n Snippet.SubKind.TEMP_VAR_EXPRESSION_SUBKIND.\n \n Do not use this method unless you have explicit need for it.\n \n The generator will be used for newly created VarSnippet\n instances. The name of a variable is queried with\n PersistentSnippet.name().\n \n The callback is sent during the processing of the snippet, the\n JShell state is not stable. No calls whatsoever on the\n JShell instance may be made from the callback.\n \n The generated name must be unique within active snippets.\n \n The default behavior (if this is not set or generator\n is null) is to generate the name as a sequential number with a\n prefixing dollar sign (\"$\")."}, {"method_name": "idGenerator", "method_sig": "public JShell.Builder idGenerator (BiFunction<Snippet, Integer, String> generator)", "description": "Sets the generator of identifying names for Snippets.\n \n Do not use this method unless you have explicit need for it.\n \n The generator will be used for newly created Snippet instances. The\n identifying name (id) is accessed with\n Snippet.id() and can be seen in the\n StackTraceElement.getFileName() for a\n EvalException and\n UnresolvedReferenceException.\n \n The inputs to the generator are the Snippet and an\n integer. The integer will be the same for two Snippets which would\n overwrite one-another, but otherwise is unique.\n \n The callback is sent during the processing of the snippet and the\n Snippet and the state as a whole are not stable. No calls to change\n system state (including Snippet state) should be made. Queries of\n Snippet may be made except to Snippet.id(). No\n calls on the JShell instance may be made from the\n callback, except to\n status(Snippet).\n \n The default behavior (if this is not set or generator\n is null) is to generate the id as the integer converted to a string."}, {"method_name": "remoteVMOptions", "method_sig": "public JShell.Builder remoteVMOptions (String... options)", "description": "Sets additional VM options for launching the VM."}, {"method_name": "compilerOptions", "method_sig": "public JShell.Builder compilerOptions (String... options)", "description": "Adds compiler options.  These additional options will be used on\n parsing, analysis, and code generation calls to the compiler.\n Options which interfere with results are not supported and have\n undefined effects on JShell's operation."}, {"method_name": "executionEngine", "method_sig": "public JShell.Builder executionEngine (String executionControlSpec)", "description": "Sets the custom engine for execution. Snippet execution will be\n provided by the ExecutionControl instance selected by the\n specified execution control spec.\n Use, at most, one of these overloaded executionEngine builder\n methods."}, {"method_name": "executionEngine", "method_sig": "public JShell.Builder executionEngine (ExecutionControlProvider executionControlProvider,\n                                      Map<String, String> executionControlParameters)", "description": "Sets the custom engine for execution. Snippet execution will be\n provided by the specified ExecutionControl instance.\n Use, at most, one of these overloaded executionEngine builder\n methods."}, {"method_name": "fileManager", "method_sig": "public JShell.Builder fileManager (Function<StandardJavaFileManager, StandardJavaFileManager> mapping)", "description": "Configure the FileManager to be used by compilation and\n source analysis.\n If not set or passed null, the compiler's standard file manager will\n be used (identity mapping).\n For use in special applications where the compiler's normal file\n handling needs to be overridden.  See the file manager APIs for more\n information.\n The file manager input enables forwarding file managers, if this\n is not needed, the incoming file manager can be ignored (constant\n function)."}, {"method_name": "build", "method_sig": "public JShell build()\n             throws IllegalStateException", "description": "Builds a JShell state engine. This is the entry-point to all JShell\n functionality. This creates a remote process for execution. It is\n thus important to close the returned instance."}]}