{"name": "Class CipherInputStream", "module": "java.base", "package": "javax.crypto", "text": "A CipherInputStream is composed of an InputStream and a Cipher so\n that read() methods return data that are read in from the\n underlying InputStream but have been additionally processed by the\n Cipher.  The Cipher must be fully initialized before being used by\n a CipherInputStream.\n\n  For example, if the Cipher is initialized for decryption, the\n CipherInputStream will attempt to read in data and decrypt them,\n before returning the decrypted data.\n\n  This class adheres strictly to the semantics, especially the\n failure semantics, of its ancestor classes\n java.io.FilterInputStream and java.io.InputStream.  This class has\n exactly those methods specified in its ancestor classes, and\n overrides them all.  Moreover, this class catches all exceptions\n that are not thrown by its ancestor classes.  In particular, the\n skip method skips, and the available\n method counts only data that have been processed by the encapsulated Cipher.\n This class may catch BadPaddingException and other exceptions thrown by\n failed integrity checks during decryption. These exceptions are not\n re-thrown, so the client may not be informed that integrity checks\n failed. Because of this behavior, this class may not be suitable\n for use with decryption in an authenticated mode of operation (e.g. GCM).\n Applications that require authenticated encryption can use the Cipher API\n directly as an alternative to using this class.\n\n  It is crucial for a programmer using this class not to use\n methods that are not defined or overriden in this class (such as a\n new method or constructor that is later added to one of the super\n classes), because the design and implementation of those methods\n are unlikely to have considered security impact with regard to\n CipherInputStream.", "codes": ["public class CipherInputStream\nextends FilterInputStream"], "fields": [], "methods": [{"method_name": "read", "method_sig": "public int read()\n         throws IOException", "description": "Reads the next byte of data from this input stream. The value\n byte is returned as an int in the range\n 0 to 255. If no byte is available\n because the end of the stream has been reached, the value\n -1 is returned. This method blocks until input data\n is available, the end of the stream is detected, or an exception\n is thrown."}, {"method_name": "read", "method_sig": "public int read (byte[] b)\n         throws IOException", "description": "Reads up to b.length bytes of data from this input\n stream into an array of bytes.\n \n The read method of InputStream calls\n the read method of three arguments with the arguments\n b, 0, and b.length."}, {"method_name": "read", "method_sig": "public int read (byte[] b,\n                int off,\n                int len)\n         throws IOException", "description": "Reads up to len bytes of data from this input stream\n into an array of bytes. This method blocks until some input is\n available. If the first argument is null, up to\n len bytes are read and discarded."}, {"method_name": "skip", "method_sig": "public long skip (long n)\n          throws IOException", "description": "Skips n bytes of input from the bytes that can be read\n from this input stream without blocking.\n\n Fewer bytes than requested might be skipped.\n The actual number of bytes skipped is equal to n or\n the result of a call to\n available,\n whichever is smaller.\n If n is less than zero, no bytes are skipped.\n\n The actual number of bytes skipped is returned."}, {"method_name": "available", "method_sig": "public int available()\n              throws IOException", "description": "Returns the number of bytes that can be read from this input\n stream without blocking. The available method of\n InputStream returns 0. This method\n should be overridden by subclasses."}, {"method_name": "close", "method_sig": "public void close()\n           throws IOException", "description": "Closes this input stream and releases any system resources\n associated with the stream.\n \n The close method of CipherInputStream\n calls the close method of its underlying input\n stream."}, {"method_name": "markSupported", "method_sig": "public boolean markSupported()", "description": "Tests if this input stream supports the mark\n and reset methods, which it does not."}]}