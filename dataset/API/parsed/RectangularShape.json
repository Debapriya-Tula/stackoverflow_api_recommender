{"name": "Class RectangularShape", "module": "java.desktop", "package": "java.awt.geom", "text": "RectangularShape is the base class for a number of\n Shape objects whose geometry is defined by a rectangular frame.\n This class does not directly specify any specific geometry by\n itself, but merely provides manipulation methods inherited by\n a whole category of Shape objects.\n The manipulation methods provided by this class can be used to\n query and modify the rectangular frame, which provides a reference\n for the subclasses to define their geometry.", "codes": ["public abstract class RectangularShape\nextends Object\nimplements Shape, Cloneable"], "fields": [], "methods": [{"method_name": "getX", "method_sig": "public abstract double getX()", "description": "Returns the X coordinate of the upper-left corner of\n the framing rectangle in double precision."}, {"method_name": "getY", "method_sig": "public abstract double getY()", "description": "Returns the Y coordinate of the upper-left corner of\n the framing rectangle in double precision."}, {"method_name": "getWidth", "method_sig": "public abstract double getWidth()", "description": "Returns the width of the framing rectangle in\n double precision."}, {"method_name": "getHeight", "method_sig": "public abstract double getHeight()", "description": "Returns the height of the framing rectangle\n in double precision."}, {"method_name": "getMinX", "method_sig": "public double getMinX()", "description": "Returns the smallest X coordinate of the framing\n rectangle of the Shape in double\n precision."}, {"method_name": "getMinY", "method_sig": "public double getMinY()", "description": "Returns the smallest Y coordinate of the framing\n rectangle of the Shape in double\n precision."}, {"method_name": "getMaxX", "method_sig": "public double getMaxX()", "description": "Returns the largest X coordinate of the framing\n rectangle of the Shape in double\n precision."}, {"method_name": "getMaxY", "method_sig": "public double getMaxY()", "description": "Returns the largest Y coordinate of the framing\n rectangle of the Shape in double\n precision."}, {"method_name": "getCenterX", "method_sig": "public double getCenterX()", "description": "Returns the X coordinate of the center of the framing\n rectangle of the Shape in double\n precision."}, {"method_name": "getCenterY", "method_sig": "public double getCenterY()", "description": "Returns the Y coordinate of the center of the framing\n rectangle of the Shape in double\n precision."}, {"method_name": "getFrame", "method_sig": "public Rectangle2D getFrame()", "description": "Returns the framing Rectangle2D\n that defines the overall shape of this object."}, {"method_name": "isEmpty", "method_sig": "public abstract boolean isEmpty()", "description": "Determines whether the RectangularShape is empty.\n When the RectangularShape is empty, it encloses no\n area."}, {"method_name": "setFrame", "method_sig": "public abstract void setFrame (double x,\n                              double y,\n                              double w,\n                              double h)", "description": "Sets the location and size of the framing rectangle of this\n Shape to the specified rectangular values."}, {"method_name": "setFrame", "method_sig": "public void setFrame (Point2D loc,\n                     Dimension2D size)", "description": "Sets the location and size of the framing rectangle of this\n Shape to the specified Point2D and\n Dimension2D, respectively.  The framing rectangle is used\n by the subclasses of RectangularShape to define\n their geometry."}, {"method_name": "setFrame", "method_sig": "public void setFrame (Rectangle2D r)", "description": "Sets the framing rectangle of this Shape to\n be the specified Rectangle2D.  The framing rectangle is\n used by the subclasses of RectangularShape to define\n their geometry."}, {"method_name": "setFrameFromDiagonal", "method_sig": "public void setFrameFromDiagonal (double x1,\n                                 double y1,\n                                 double x2,\n                                 double y2)", "description": "Sets the diagonal of the framing rectangle of this Shape\n based on the two specified coordinates.  The framing rectangle is\n used by the subclasses of RectangularShape to define\n their geometry."}, {"method_name": "setFrameFromDiagonal", "method_sig": "public void setFrameFromDiagonal (Point2D p1,\n                                 Point2D p2)", "description": "Sets the diagonal of the framing rectangle of this Shape\n based on two specified Point2D objects.  The framing\n rectangle is used by the subclasses of RectangularShape\n to define their geometry."}, {"method_name": "setFrameFromCenter", "method_sig": "public void setFrameFromCenter (double centerX,\n                               double centerY,\n                               double cornerX,\n                               double cornerY)", "description": "Sets the framing rectangle of this Shape\n based on the specified center point coordinates and corner point\n coordinates.  The framing rectangle is used by the subclasses of\n RectangularShape to define their geometry."}, {"method_name": "setFrameFromCenter", "method_sig": "public void setFrameFromCenter (Point2D center,\n                               Point2D corner)", "description": "Sets the framing rectangle of this Shape based on a\n specified center Point2D and corner\n Point2D.  The framing rectangle is used by the subclasses\n of RectangularShape to define their geometry."}, {"method_name": "contains", "method_sig": "public boolean contains (Point2D p)", "description": "Tests if a specified Point2D is inside the boundary\n of the Shape, as described by the\n \n definition of insideness."}, {"method_name": "intersects", "method_sig": "public boolean intersects (Rectangle2D r)", "description": "Tests if the interior of the Shape intersects the\n interior of a specified Rectangle2D.\n The Shape.intersects() method allows a Shape\n implementation to conservatively return true when:\n \n\n there is a high probability that the Rectangle2D and the\n Shape intersect, but\n \n the calculations to accurately determine this intersection\n are prohibitively expensive.\n \n This means that for some Shapes this method might\n return true even though the Rectangle2D does not\n intersect the Shape.\n The Area class performs\n more accurate computations of geometric intersection than most\n Shape objects and therefore can be used if a more precise\n answer is required."}, {"method_name": "contains", "method_sig": "public boolean contains (Rectangle2D r)", "description": "Tests if the interior of the Shape entirely contains the\n specified Rectangle2D.\n The Shape.contains() method allows a Shape\n implementation to conservatively return false when:\n \n\n the intersect method returns true and\n \n the calculations to determine whether or not the\n Shape entirely contains the Rectangle2D\n are prohibitively expensive.\n \n This means that for some Shapes this method might\n return false even though the Shape contains\n the Rectangle2D.\n The Area class performs\n more accurate geometric computations than most\n Shape objects and therefore can be used if a more precise\n answer is required."}, {"method_name": "getBounds", "method_sig": "public Rectangle getBounds()", "description": "Returns an integer Rectangle that completely encloses the\n Shape.  Note that there is no guarantee that the\n returned Rectangle is the smallest bounding box that\n encloses the Shape, only that the Shape\n lies entirely within the indicated  Rectangle.  The\n returned Rectangle might also fail to completely\n enclose the Shape if the Shape overflows\n the limited range of the integer data type.  The\n getBounds2D method generally returns a\n tighter bounding box due to its greater flexibility in\n representation.\n\n \n Note that the\n \n definition of insideness can lead to situations where points\n on the defining outline of the shape may not be considered\n contained in the returned bounds object, but only in cases\n where those points are also not considered contained in the original\n shape.\n \n\n If a point is inside the shape according to the\n contains(point) method, then\n it must be inside the returned Rectangle bounds object\n according to the contains(point)\n method of the bounds. Specifically:\n \n\nshape.contains(x,y) requires bounds.contains(x,y)\n\n\n If a point is not inside the shape, then it might\n still be contained in the bounds object:\n \n\nbounds.contains(x,y) does not imply shape.contains(x,y)\n"}, {"method_name": "getPathIterator", "method_sig": "public PathIterator getPathIterator (AffineTransform at,\n                                    double flatness)", "description": "Returns an iterator object that iterates along the\n Shape object's boundary and provides access to a\n flattened view of the outline of the Shape\n object's geometry.\n \n Only SEG_MOVETO, SEG_LINETO, and SEG_CLOSE point types will\n be returned by the iterator.\n \n The amount of subdivision of the curved segments is controlled\n by the flatness parameter, which specifies the\n maximum distance that any point on the unflattened transformed\n curve can deviate from the returned flattened path segments.\n An optional AffineTransform can\n be specified so that the coordinates returned in the iteration are\n transformed accordingly."}, {"method_name": "clone", "method_sig": "public Object clone()", "description": "Creates a new object of the same class and with the same\n contents as this object."}]}