{"name": "Class BreakIterator", "module": "java.base", "package": "java.text", "text": "The BreakIterator class implements methods for finding\n the location of boundaries in text. Instances of BreakIterator\n maintain a current position and scan over text\n returning the index of characters where boundaries occur.\n Internally, BreakIterator scans text using a\n CharacterIterator, and is thus able to scan text held\n by any object implementing that protocol. A StringCharacterIterator\n is used to scan String objects passed to setText.\n\n \n You use the factory methods provided by this class to create\n instances of various types of break iterators. In particular,\n use getWordInstance, getLineInstance,\n getSentenceInstance, and getCharacterInstance\n to create BreakIterators that perform\n word, line, sentence, and character boundary analysis respectively.\n A single BreakIterator can work only on one unit\n (word, line, sentence, and so on). You must use a different iterator\n for each unit boundary analysis you wish to perform.\n\n \n Line boundary analysis determines where a text string can be\n broken when line-wrapping. The mechanism correctly handles\n punctuation and hyphenated words. Actual line breaking needs\n to also consider the available line width and is handled by\n higher-level software.\n\n \n Sentence boundary analysis allows selection with correct interpretation\n of periods within numbers and abbreviations, and trailing punctuation\n marks such as quotation marks and parentheses.\n\n \n Word boundary analysis is used by search and replace functions, as\n well as within text editing applications that allow the user to\n select words with a double click. Word selection provides correct\n interpretation of punctuation marks within and following\n words. Characters that are not part of a word, such as symbols\n or punctuation marks, have word-breaks on both sides.\n\n \n Character boundary analysis allows users to interact with characters\n as they expect to, for example, when moving the cursor through a text\n string. Character boundary analysis provides correct navigation\n through character strings, regardless of how the character is stored.\n The boundaries returned may be those of supplementary characters,\n combining character sequences, or ligature clusters.\n For example, an accented character might be stored as a base character\n and a diacritical mark. What users consider to be a character can\n differ between languages.\n\n \n The BreakIterator instances returned by the factory methods\n of this class are intended for use with natural languages only, not for\n programming language text. It is however possible to define subclasses\n that tokenize a programming language.\n\n \nExamples:\n Creating and using text boundaries:\n \n\n public static void main(String args[]) {\n      if (args.length == 1) {\n          String stringToExamine = args[0];\n          //print each word in order\n          BreakIterator boundary = BreakIterator.getWordInstance();\n          boundary.setText(stringToExamine);\n          printEachForward(boundary, stringToExamine);\n          //print each sentence in reverse order\n          boundary = BreakIterator.getSentenceInstance(Locale.US);\n          boundary.setText(stringToExamine);\n          printEachBackward(boundary, stringToExamine);\n          printFirst(boundary, stringToExamine);\n          printLast(boundary, stringToExamine);\n      }\n }\n \n\n\n Print each element in order:\n \n\n public static void printEachForward(BreakIterator boundary, String source) {\n     int start = boundary.first();\n     for (int end = boundary.next();\n          end != BreakIterator.DONE;\n          start = end, end = boundary.next()) {\n          System.out.println(source.substring(start,end));\n     }\n }\n \n\n\n Print each element in reverse order:\n \n\n public static void printEachBackward(BreakIterator boundary, String source) {\n     int end = boundary.last();\n     for (int start = boundary.previous();\n          start != BreakIterator.DONE;\n          end = start, start = boundary.previous()) {\n         System.out.println(source.substring(start,end));\n     }\n }\n \n\n\n Print first element:\n \n\n public static void printFirst(BreakIterator boundary, String source) {\n     int start = boundary.first();\n     int end = boundary.next();\n     System.out.println(source.substring(start,end));\n }\n \n\n\n Print last element:\n \n\n public static void printLast(BreakIterator boundary, String source) {\n     int end = boundary.last();\n     int start = boundary.previous();\n     System.out.println(source.substring(start,end));\n }\n \n\n\n Print the element at a specified position:\n \n\n public static void printAt(BreakIterator boundary, int pos, String source) {\n     int end = boundary.following(pos);\n     int start = boundary.previous();\n     System.out.println(source.substring(start,end));\n }\n \n\n\n Find the next word:\n \n\n public static int nextWordStartAfter(int pos, String text) {\n     BreakIterator wb = BreakIterator.getWordInstance();\n     wb.setText(text);\n     int last = wb.following(pos);\n     int current = wb.next();\n     while (current != BreakIterator.DONE) {\n         for (int p = last; p < current; p++) {\n             if (Character.isLetter(text.codePointAt(p)))\n                 return last;\n         }\n         last = current;\n         current = wb.next();\n     }\n     return BreakIterator.DONE;\n }\n \n (The iterator returned by BreakIterator.getWordInstance() is unique in that\n the break positions it returns don't represent both the start and end of the\n thing being iterated over.  That is, a sentence-break iterator returns breaks\n that each represent the end of one sentence and the beginning of the next.\n With the word-break iterator, the characters between two boundaries might be a\n word, or they might be the punctuation or whitespace between two words.  The\n above code uses a simple heuristic to determine which boundary is the beginning\n of a word: If the characters between this boundary and the next boundary\n include at least one letter (this can be an alphabetical letter, a CJK ideograph,\n a Hangul syllable, a Kana character, etc.), then the text between this boundary\n and the next is a word; otherwise, it's the material between words.)\n ", "codes": ["public abstract class BreakIterator\nextends Object\nimplements Cloneable"], "fields": [{"field_name": "DONE", "field_sig": "public static final\u00a0int DONE", "description": "DONE is returned by previous(), next(), next(int), preceding(int)\n and following(int) when either the first or last text boundary has been\n reached."}], "methods": [{"method_name": "clone", "method_sig": "public Object clone()", "description": "Create a copy of this iterator"}, {"method_name": "first", "method_sig": "public abstract int first()", "description": "Returns the first boundary. The iterator's current position is set\n to the first text boundary."}, {"method_name": "last", "method_sig": "public abstract int last()", "description": "Returns the last boundary. The iterator's current position is set\n to the last text boundary."}, {"method_name": "next", "method_sig": "public abstract int next (int n)", "description": "Returns the nth boundary from the current boundary. If either\n the first or last text boundary has been reached, it returns\n BreakIterator.DONE and the current position is set to either\n the first or last text boundary depending on which one is reached. Otherwise,\n the iterator's current position is set to the new boundary.\n For example, if the iterator's current position is the mth text boundary\n and three more boundaries exist from the current boundary to the last text\n boundary, the next(2) call will return m + 2. The new text position is set\n to the (m + 2)th text boundary. A next(4) call would return\n BreakIterator.DONE and the last text boundary would become the\n new text position."}, {"method_name": "next", "method_sig": "public abstract int next()", "description": "Returns the boundary following the current boundary. If the current boundary\n is the last text boundary, it returns BreakIterator.DONE and\n the iterator's current position is unchanged. Otherwise, the iterator's\n current position is set to the boundary following the current boundary."}, {"method_name": "previous", "method_sig": "public abstract int previous()", "description": "Returns the boundary preceding the current boundary. If the current boundary\n is the first text boundary, it returns BreakIterator.DONE and\n the iterator's current position is unchanged. Otherwise, the iterator's\n current position is set to the boundary preceding the current boundary."}, {"method_name": "following", "method_sig": "public abstract int following (int offset)", "description": "Returns the first boundary following the specified character offset. If the\n specified offset equals to the last text boundary, it returns\n BreakIterator.DONE and the iterator's current position is unchanged.\n Otherwise, the iterator's current position is set to the returned boundary.\n The value returned is always greater than the offset or the value\n BreakIterator.DONE."}, {"method_name": "preceding", "method_sig": "public int preceding (int offset)", "description": "Returns the last boundary preceding the specified character offset. If the\n specified offset equals to the first text boundary, it returns\n BreakIterator.DONE and the iterator's current position is unchanged.\n Otherwise, the iterator's current position is set to the returned boundary.\n The value returned is always less than the offset or the value\n BreakIterator.DONE."}, {"method_name": "isBoundary", "method_sig": "public boolean isBoundary (int offset)", "description": "Returns true if the specified character offset is a text boundary."}, {"method_name": "current", "method_sig": "public abstract int current()", "description": "Returns character index of the text boundary that was most\n recently returned by next(), next(int), previous(), first(), last(),\n following(int) or preceding(int). If any of these methods returns\n BreakIterator.DONE because either first or last text boundary\n has been reached, it returns the first or last text boundary depending on\n which one is reached."}, {"method_name": "getText", "method_sig": "public abstract CharacterIterator getText()", "description": "Get the text being scanned"}, {"method_name": "setText", "method_sig": "public void setText (String newText)", "description": "Set a new text string to be scanned.  The current scan\n position is reset to first()."}, {"method_name": "setText", "method_sig": "public abstract void setText (CharacterIterator newText)", "description": "Set a new text for scanning.  The current scan\n position is reset to first()."}, {"method_name": "getWordInstance", "method_sig": "public static BreakIterator getWordInstance()", "description": "Returns a new BreakIterator instance\n for word breaks\n for the default locale."}, {"method_name": "getWordInstance", "method_sig": "public static BreakIterator getWordInstance (Locale locale)", "description": "Returns a new BreakIterator instance\n for word breaks\n for the given locale."}, {"method_name": "getLineInstance", "method_sig": "public static BreakIterator getLineInstance()", "description": "Returns a new BreakIterator instance\n for line breaks\n for the default locale."}, {"method_name": "getLineInstance", "method_sig": "public static BreakIterator getLineInstance (Locale locale)", "description": "Returns a new BreakIterator instance\n for line breaks\n for the given locale."}, {"method_name": "getCharacterInstance", "method_sig": "public static BreakIterator getCharacterInstance()", "description": "Returns a new BreakIterator instance\n for character breaks\n for the default locale."}, {"method_name": "getCharacterInstance", "method_sig": "public static BreakIterator getCharacterInstance (Locale locale)", "description": "Returns a new BreakIterator instance\n for character breaks\n for the given locale."}, {"method_name": "getSentenceInstance", "method_sig": "public static BreakIterator getSentenceInstance()", "description": "Returns a new BreakIterator instance\n for sentence breaks\n for the default locale."}, {"method_name": "getSentenceInstance", "method_sig": "public static BreakIterator getSentenceInstance (Locale locale)", "description": "Returns a new BreakIterator instance\n for sentence breaks\n for the given locale."}, {"method_name": "getAvailableLocales", "method_sig": "public static Locale[] getAvailableLocales()", "description": "Returns an array of all locales for which the\n get*Instance methods of this class can return\n localized instances.\n The returned array represents the union of locales supported by the Java\n runtime and by installed\n BreakIteratorProvider implementations.\n It must contain at least a Locale\n instance equal to Locale.US."}]}