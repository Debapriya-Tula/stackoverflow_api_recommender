{"name": "Class SNIHostName", "module": "java.base", "package": "javax.net.ssl", "text": "Instances of this class represent a server name of type\n host_name in a Server Name\n Indication (SNI) extension.\n \n As described in section 3, \"Server Name Indication\", of\n TLS Extensions (RFC 6066),\n \"HostName\" contains the fully qualified DNS hostname of the server, as\n understood by the client.  The encoded server name value of a hostname is\n represented as a byte string using ASCII encoding without a trailing dot.\n This allows the support of Internationalized Domain Names (IDN) through\n the use of A-labels (the ASCII-Compatible Encoding (ACE) form of a valid\n string of Internationalized Domain Names for Applications (IDNA)) defined\n in RFC 5890.\n \n Note that SNIHostName objects are immutable.", "codes": ["public final class SNIHostName\nextends SNIServerName"], "fields": [], "methods": [{"method_name": "getAsciiName", "method_sig": "public String getAsciiName()", "description": "Returns the StandardCharsets.US_ASCII-compliant hostname of\n this SNIHostName object.\n \n Note that, per\n RFC 6066, the\n returned hostname may be an internationalized domain name that\n contains A-labels. See\n RFC 5890\n for more information about the detailed A-label specification."}, {"method_name": "equals", "method_sig": "public boolean equals (Object other)", "description": "Compares this server name to the specified object.\n \n Per RFC 6066, DNS\n hostnames are case-insensitive.  Two server hostnames are equal if,\n and only if, they have the same name type, and the hostnames are\n equal in a case-independent comparison."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Returns a hash code value for this SNIHostName.\n \n The hash code value is generated using the case-insensitive hostname\n of this SNIHostName."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a string representation of the object, including the DNS\n hostname in this SNIHostName object.\n \n The exact details of the representation are unspecified and subject\n to change, but the following may be regarded as typical:\n \n     \"type=host_name (0), value=<hostname>\"\n \n The \"<hostname>\" is an ASCII representation of the hostname,\n which may contains A-labels.  For example, a returned value of an pseudo\n hostname may look like:\n \n     \"type=host_name (0), value=www.example.com\"\n \n or\n \n     \"type=host_name (0), value=xn--fsqu00a.xn--0zwm56d\"\n \n\n Please NOTE that the exact details of the representation are unspecified\n and subject to change."}, {"method_name": "createSNIMatcher", "method_sig": "public static SNIMatcher createSNIMatcher (String regex)", "description": "Creates an SNIMatcher object for SNIHostNames.\n \n This method can be used by a server to verify the acceptable\n SNIHostNames.  For example,\n \n     SNIMatcher matcher =\n         SNIHostName.createSNIMatcher(\"www\\\\.example\\\\.com\");\n \n will accept the hostname \"www.example.com\".\n \n     SNIMatcher matcher =\n         SNIHostName.createSNIMatcher(\"www\\\\.example\\\\.(com|org)\");\n \n will accept hostnames \"www.example.com\" and \"www.example.org\"."}]}