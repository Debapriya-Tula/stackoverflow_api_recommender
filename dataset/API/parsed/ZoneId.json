{"name": "Class ZoneId", "module": "java.base", "package": "java.time", "text": "A time-zone ID, such as Europe/Paris.\n \n A ZoneId is used to identify the rules used to convert between\n an Instant and a LocalDateTime.\n There are two distinct types of ID:\n \nFixed offsets - a fully resolved offset from UTC/Greenwich, that uses\n  the same offset for all local date-times\n Geographical regions - an area where a specific set of rules for finding\n  the offset from UTC/Greenwich apply\n \n Most fixed offsets are represented by ZoneOffset.\n Calling normalized() on any ZoneId will ensure that a\n fixed offset ID will be represented as a ZoneOffset.\n \n The actual rules, describing when and how the offset changes, are defined by ZoneRules.\n This class is simply an ID used to obtain the underlying rules.\n This approach is taken because rules are defined by governments and change\n frequently, whereas the ID is stable.\n \n The distinction has other effects. Serializing the ZoneId will only send\n the ID, whereas serializing the rules sends the entire data set.\n Similarly, a comparison of two IDs only examines the ID, whereas\n a comparison of two rules examines the entire data set.\n\n Time-zone IDs\n The ID is unique within the system.\n There are three types of ID.\n \n The simplest type of ID is that from ZoneOffset.\n This consists of 'Z' and IDs starting with '+' or '-'.\n \n The next type of ID are offset-style IDs with some form of prefix,\n such as 'GMT+2' or 'UTC+01:00'.\n The recognised prefixes are 'UTC', 'GMT' and 'UT'.\n The offset is the suffix and will be normalized during creation.\n These IDs can be normalized to a ZoneOffset using normalized().\n \n The third type of ID are region-based IDs. A region-based ID must be of\n two or more characters, and not start with 'UTC', 'GMT', 'UT' '+' or '-'.\n Region-based IDs are defined by configuration, see ZoneRulesProvider.\n The configuration focuses on providing the lookup from the ID to the\n underlying ZoneRules.\n \n Time-zone rules are defined by governments and change frequently.\n There are a number of organizations, known here as groups, that monitor\n time-zone changes and collate them.\n The default group is the IANA Time Zone Database (TZDB).\n Other organizations include IATA (the airline industry body) and Microsoft.\n \n Each group defines its own format for the region ID it provides.\n The TZDB group defines IDs such as 'Europe/London' or 'America/New_York'.\n TZDB IDs take precedence over other groups.\n \n It is strongly recommended that the group name is included in all IDs supplied by\n groups other than TZDB to avoid conflicts. For example, IATA airline time-zone\n region IDs are typically the same as the three letter airport code.\n However, the airport of Utrecht has the code 'UTC', which is obviously a conflict.\n The recommended format for region IDs from groups other than TZDB is 'group~region'.\n Thus if IATA data were defined, Utrecht airport would be 'IATA~UTC'.\n\n Serialization\n This class can be serialized and stores the string zone ID in the external form.\n The ZoneOffset subclass uses a dedicated format that only stores the\n offset from UTC/Greenwich.\n \n A ZoneId can be deserialized in a Java Runtime where the ID is unknown.\n For example, if a server-side Java Runtime has been updated with a new zone ID, but\n the client-side Java Runtime has not been updated. In this case, the ZoneId\n object will exist, and can be queried using getId, equals,\n hashCode, toString, getDisplayName and normalized.\n However, any call to getRules will fail with ZoneRulesException.\n This approach is designed to allow a ZonedDateTime to be loaded and\n queried, but not modified, on a Java Runtime with incomplete time-zone information.\n\n \n This is a value-based\n class; use of identity-sensitive operations (including reference equality\n (==), identity hash code, or synchronization) on instances of\n ZoneId may have unpredictable results and should be avoided.\n The equals method should be used for comparisons.", "codes": ["public abstract class ZoneId\nextends Object\nimplements Serializable"], "fields": [{"field_name": "SHORT_IDS", "field_sig": "public static final\u00a0Map<String,\u200bString> SHORT_IDS", "description": "A map of zone overrides to enable the short time-zone names to be used.\n \n Use of short zone IDs has been deprecated in java.util.TimeZone.\n This map allows the IDs to continue to be used via the\n of(String, Map) factory method.\n \n This map contains a mapping of the IDs that is in line with TZDB 2005r and\n later, where 'EST', 'MST' and 'HST' map to IDs which do not include daylight\n savings.\n \n This maps as follows:\n \nEST - -05:00\nHST - -10:00\nMST - -07:00\nACT - Australia/Darwin\nAET - Australia/Sydney\nAGT - America/Argentina/Buenos_Aires\nART - Africa/Cairo\nAST - America/Anchorage\nBET - America/Sao_Paulo\nBST - Asia/Dhaka\nCAT - Africa/Harare\nCNT - America/St_Johns\nCST - America/Chicago\nCTT - Asia/Shanghai\nEAT - Africa/Addis_Ababa\nECT - Europe/Paris\nIET - America/Indiana/Indianapolis\nIST - Asia/Kolkata\nJST - Asia/Tokyo\nMIT - Pacific/Apia\nNET - Asia/Yerevan\nNST - Pacific/Auckland\nPLT - Asia/Karachi\nPNT - America/Phoenix\nPRT - America/Puerto_Rico\nPST - America/Los_Angeles\nSST - Pacific/Guadalcanal\nVST - Asia/Ho_Chi_Minh\n\n The map is unmodifiable."}], "methods": [{"method_name": "systemDefault", "method_sig": "public static ZoneId systemDefault()", "description": "Gets the system default time-zone.\n \n This queries TimeZone.getDefault() to find the default time-zone\n and converts it to a ZoneId. If the system default time-zone is changed,\n then the result of this method will also change."}, {"method_name": "getAvailableZoneIds", "method_sig": "public static Set<String> getAvailableZoneIds()", "description": "Gets the set of available zone IDs.\n \n This set includes the string form of all available region-based IDs.\n Offset-based zone IDs are not included in the returned set.\n The ID can be passed to of(String) to create a ZoneId.\n \n The set of zone IDs can increase over time, although in a typical application\n the set of IDs is fixed. Each call to this method is thread-safe."}, {"method_name": "of", "method_sig": "public static ZoneId of (String zoneId,\n                        Map<String, String> aliasMap)", "description": "Obtains an instance of ZoneId using its ID using a map\n of aliases to supplement the standard zone IDs.\n \n Many users of time-zones use short abbreviations, such as PST for\n 'Pacific Standard Time' and PDT for 'Pacific Daylight Time'.\n These abbreviations are not unique, and so cannot be used as IDs.\n This method allows a map of string to time-zone to be setup and reused\n within an application."}, {"method_name": "of", "method_sig": "public static ZoneId of (String zoneId)", "description": "Obtains an instance of ZoneId from an ID ensuring that the\n ID is valid and available for use.\n \n This method parses the ID producing a ZoneId or ZoneOffset.\n A ZoneOffset is returned if the ID is 'Z', or starts with '+' or '-'.\n The result will always be a valid ID for which ZoneRules can be obtained.\n \n Parsing matches the zone ID step by step as follows.\n \nIf the zone ID equals 'Z', the result is ZoneOffset.UTC.\n If the zone ID consists of a single letter, the zone ID is invalid\n  and DateTimeException is thrown.\n If the zone ID starts with '+' or '-', the ID is parsed as a\n  ZoneOffset using ZoneOffset.of(String).\n If the zone ID equals 'GMT', 'UTC' or 'UT' then the result is a ZoneId\n  with the same ID and rules equivalent to ZoneOffset.UTC.\n If the zone ID starts with 'UTC+', 'UTC-', 'GMT+', 'GMT-', 'UT+' or 'UT-'\n  then the ID is a prefixed offset-based ID. The ID is split in two, with\n  a two or three letter prefix and a suffix starting with the sign.\n  The suffix is parsed as a ZoneOffset.\n  The result will be a ZoneId with the specified UTC/GMT/UT prefix\n  and the normalized offset ID as per ZoneOffset.getId().\n  The rules of the returned ZoneId will be equivalent to the\n  parsed ZoneOffset.\n All other IDs are parsed as region-based zone IDs. Region IDs must\n  match the regular expression [A-Za-z][A-Za-z0-9~/._+-]+\n  otherwise a DateTimeException is thrown. If the zone ID is not\n  in the configured set of IDs, ZoneRulesException is thrown.\n  The detailed format of the region ID depends on the group supplying the data.\n  The default set of data is supplied by the IANA Time Zone Database (TZDB).\n  This has region IDs of the form '{area}/{city}', such as 'Europe/Paris' or 'America/New_York'.\n  This is compatible with most IDs from TimeZone.\n "}, {"method_name": "ofOffset", "method_sig": "public static ZoneId ofOffset (String prefix,\n                              ZoneOffset offset)", "description": "Obtains an instance of ZoneId wrapping an offset.\n \n If the prefix is \"GMT\", \"UTC\", or \"UT\" a ZoneId\n with the prefix and the non-zero offset is returned.\n If the prefix is empty \"\" the ZoneOffset is returned."}, {"method_name": "from", "method_sig": "public static ZoneId from (TemporalAccessor temporal)", "description": "Obtains an instance of ZoneId from a temporal object.\n \n This obtains a zone based on the specified temporal.\n A TemporalAccessor represents an arbitrary set of date and time information,\n which this factory converts to an instance of ZoneId.\n \n A TemporalAccessor represents some form of date and time information.\n This factory converts the arbitrary temporal object to an instance of ZoneId.\n \n The conversion will try to obtain the zone in a way that favours region-based\n zones over offset-based zones using TemporalQueries.zone().\n \n This method matches the signature of the functional interface TemporalQuery\n allowing it to be used as a query via method reference, ZoneId::from."}, {"method_name": "getId", "method_sig": "public abstract String getId()", "description": "Gets the unique time-zone ID.\n \n This ID uniquely defines this object.\n The format of an offset based ID is defined by ZoneOffset.getId()."}, {"method_name": "getDisplayName", "method_sig": "public String getDisplayName (TextStyle style,\n                             Locale locale)", "description": "Gets the textual representation of the zone, such as 'British Time' or\n '+02:00'.\n \n This returns the textual name used to identify the time-zone ID,\n suitable for presentation to the user.\n The parameters control the style of the returned text and the locale.\n \n If no textual mapping is found then the full ID is returned."}, {"method_name": "getRules", "method_sig": "public abstract ZoneRules getRules()", "description": "Gets the time-zone rules for this ID allowing calculations to be performed.\n \n The rules provide the functionality associated with a time-zone,\n such as finding the offset for a given instant or local date-time.\n \n A time-zone can be invalid if it is deserialized in a Java Runtime which\n does not have the same rules loaded as the Java Runtime that stored it.\n In this case, calling this method will throw a ZoneRulesException.\n \n The rules are supplied by ZoneRulesProvider. An advanced provider may\n support dynamic updates to the rules without restarting the Java Runtime.\n If so, then the result of this method may change over time.\n Each individual call will be still remain thread-safe.\n \nZoneOffset will always return a set of rules where the offset never changes."}, {"method_name": "normalized", "method_sig": "public ZoneId normalized()", "description": "Normalizes the time-zone ID, returning a ZoneOffset where possible.\n \n The returns a normalized ZoneId that can be used in place of this ID.\n The result will have ZoneRules equivalent to those returned by this object,\n however the ID returned by getId() may be different.\n \n The normalization checks if the rules of this ZoneId have a fixed offset.\n If they do, then the ZoneOffset equal to that offset is returned.\n Otherwise this is returned."}, {"method_name": "equals", "method_sig": "public boolean equals (Object obj)", "description": "Checks if this time-zone ID is equal to another time-zone ID.\n \n The comparison is based on the ID."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "A hash code for this time-zone ID."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Outputs this zone as a String, using the ID."}]}