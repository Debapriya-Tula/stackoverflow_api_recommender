{"name": "Class AbstractRegionPainter", "module": "java.desktop", "package": "javax.swing.plaf.nimbus", "text": "Convenient base class for defining Painter instances for rendering a\n region or component in Nimbus.", "codes": ["public abstract class AbstractRegionPainter\nextends Object\nimplements Painter<JComponent>"], "fields": [], "methods": [{"method_name": "getExtendedCacheKeys", "method_sig": "protected Object[] getExtendedCacheKeys (JComponent c)", "description": "Get any extra attributes which the painter implementation would like\n to include in the image cache lookups. This is checked for every call\n of the paint(g, c, w, h) method."}, {"method_name": "getPaintContext", "method_sig": "protected abstract AbstractRegionPainter.PaintContext getPaintContext()", "description": "Gets the PaintContext for this painting operation. This method is called on every\n paint, and so should be fast and produce no garbage. The PaintContext contains\n information such as cache hints. It also contains data necessary for decoding\n points at runtime, such as the stretching insets, the canvas size at which the\n encoded points were defined, and whether the stretching insets are inverted.\n This method allows for subclasses to package the painting of different states\n with possibly different canvas sizes, etc, into one AbstractRegionPainter implementation."}, {"method_name": "configureGraphics", "method_sig": "protected void configureGraphics (Graphics2D g)", "description": "Configures the given Graphics2D. Often, rendering hints or compositing rules are\n applied to a Graphics2D object prior to painting, which should affect all of the\n subsequent painting operations. This method provides a convenient hook for configuring\n the Graphics object prior to rendering, regardless of whether the render operation is\n performed to an intermediate buffer or directly to the display."}, {"method_name": "doPaint", "method_sig": "protected abstract void doPaint (Graphics2D g,\n                                JComponent c,\n                                int width,\n                                int height,\n                                Object[] extendedCacheKeys)", "description": "Actually performs the painting operation. Subclasses must implement this method.\n The graphics object passed may represent the actual surface being rendered to,\n or it may be an intermediate buffer. It has also been pre-translated. Simply render\n the component as if it were located at 0, 0 and had a width of width\n and a height of height. For performance reasons, you may want to read\n the clip from the Graphics2D object and only render within that space."}, {"method_name": "decodeX", "method_sig": "protected final float decodeX (float x)", "description": "Decodes and returns a float value representing the actual pixel location for\n the given encoded X value."}, {"method_name": "decodeY", "method_sig": "protected final float decodeY (float y)", "description": "Decodes and returns a float value representing the actual pixel location for\n the given encoded y value."}, {"method_name": "decodeAnchorX", "method_sig": "protected final float decodeAnchorX (float x,\n                                    float dx)", "description": "Decodes and returns a float value representing the actual pixel location for\n the anchor point given the encoded X value of the control point, and the offset\n distance to the anchor from that control point."}, {"method_name": "decodeAnchorY", "method_sig": "protected final float decodeAnchorY (float y,\n                                    float dy)", "description": "Decodes and returns a float value representing the actual pixel location for\n the anchor point given the encoded Y value of the control point, and the offset\n distance to the anchor from that control point."}, {"method_name": "decodeColor", "method_sig": "protected final Color decodeColor (String key,\n                                  float hOffset,\n                                  float sOffset,\n                                  float bOffset,\n                                  int aOffset)", "description": "Decodes and returns a color, which is derived from a base color in UI\n defaults."}, {"method_name": "decodeColor", "method_sig": "protected final Color decodeColor (Color color1,\n                                  Color color2,\n                                  float midPoint)", "description": "Decodes and returns a color, which is derived from a offset between two\n other colors."}, {"method_name": "decodeGradient", "method_sig": "protected final LinearGradientPaint decodeGradient (float x1,\n                                                   float y1,\n                                                   float x2,\n                                                   float y2,\n                                                   float[] midpoints,\n                                                   Color[] colors)", "description": "Given parameters for creating a LinearGradientPaint, this method will\n create and return a linear gradient paint. One primary purpose for this\n method is to avoid creating a LinearGradientPaint where the start and\n end points are equal. In such a case, the end y point is slightly\n increased to avoid the overlap."}, {"method_name": "decodeRadialGradient", "method_sig": "protected final RadialGradientPaint decodeRadialGradient (float x,\n                                                         float y,\n                                                         float r,\n                                                         float[] midpoints,\n                                                         Color[] colors)", "description": "Given parameters for creating a RadialGradientPaint, this method will\n create and return a radial gradient paint. One primary purpose for this\n method is to avoid creating a RadialGradientPaint where the radius\n is non-positive. In such a case, the radius is just slightly\n increased to avoid 0."}, {"method_name": "getComponentColor", "method_sig": "protected final Color getComponentColor (JComponent c,\n                                        String property,\n                                        Color defaultColor,\n                                        float saturationOffset,\n                                        float brightnessOffset,\n                                        int alphaOffset)", "description": "Get a color property from the given JComponent. First checks for a\n getXXX() method and if that fails checks for a client\n property with key property. If that still fails to return\n a Color then defaultColor is returned."}]}