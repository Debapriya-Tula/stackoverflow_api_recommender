{"name": "Class HttpURLConnection", "module": "java.base", "package": "java.net", "text": "A URLConnection with support for HTTP-specific features. See\n  the spec  for\n details.\n \n\n Each HttpURLConnection instance is used to make a single request\n but the underlying network connection to the HTTP server may be\n transparently shared by other instances. Calling the close() methods\n on the InputStream or OutputStream of an HttpURLConnection\n after a request may free network resources associated with this\n instance but has no effect on any shared persistent connection.\n Calling the disconnect() method may close the underlying socket\n if a persistent connection is otherwise idle at that time.\n\n The HTTP protocol handler has a few settings that can be accessed through\n System Properties. This covers\n Proxy settings as well as\n  various other settings.\n \n\nSecurity permissions\n\n If a security manager is installed, and if a method is called which results in an\n attempt to open a connection, the caller must possess either:\n a \"connect\" SocketPermission to the host/port combination of the\n destination URL or\na URLPermission that permits this request.\n\n If automatic redirection is enabled, and this request is redirected to another\n destination, then the caller must also have permission to connect to the\n redirected host/URL.", "codes": ["public abstract class HttpURLConnection\nextends URLConnection"], "fields": [{"field_name": "method", "field_sig": "protected\u00a0String method", "description": "The HTTP method (GET,POST,PUT,etc.)."}, {"field_name": "chunkLength", "field_sig": "protected\u00a0int chunkLength", "description": "The chunk-length when using chunked encoding streaming mode for output.\n A value of -1 means chunked encoding is disabled for output."}, {"field_name": "fixedContentLength", "field_sig": "protected\u00a0int fixedContentLength", "description": "The fixed content-length when using fixed-length streaming mode.\n A value of -1 means fixed-length streaming mode is disabled\n for output.\n\n  NOTE: fixedContentLengthLong is recommended instead\n of this field, as it allows larger content lengths to be set."}, {"field_name": "fixedContentLengthLong", "field_sig": "protected\u00a0long fixedContentLengthLong", "description": "The fixed content-length when using fixed-length streaming mode.\n A value of -1 means fixed-length streaming mode is disabled\n for output."}, {"field_name": "responseCode", "field_sig": "protected\u00a0int responseCode", "description": "An int representing the three digit HTTP Status-Code.\n \n 1xx: Informational\n  2xx: Success\n  3xx: Redirection\n  4xx: Client Error\n  5xx: Server Error\n "}, {"field_name": "responseMessage", "field_sig": "protected\u00a0String responseMessage", "description": "The HTTP response message."}, {"field_name": "instanceFollowRedirects", "field_sig": "protected\u00a0boolean instanceFollowRedirects", "description": "If true, the protocol will automatically follow redirects.\n If false, the protocol will not automatically follow\n redirects.\n \n This field is set by the setInstanceFollowRedirects\n method. Its value is returned by the getInstanceFollowRedirects\n method.\n \n Its default value is based on the value of the static followRedirects\n at HttpURLConnection construction time."}, {"field_name": "HTTP_OK", "field_sig": "public static final\u00a0int HTTP_OK", "description": "HTTP Status-Code 200: OK."}, {"field_name": "HTTP_CREATED", "field_sig": "public static final\u00a0int HTTP_CREATED", "description": "HTTP Status-Code 201: Created."}, {"field_name": "HTTP_ACCEPTED", "field_sig": "public static final\u00a0int HTTP_ACCEPTED", "description": "HTTP Status-Code 202: Accepted."}, {"field_name": "HTTP_NOT_AUTHORITATIVE", "field_sig": "public static final\u00a0int HTTP_NOT_AUTHORITATIVE", "description": "HTTP Status-Code 203: Non-Authoritative Information."}, {"field_name": "HTTP_NO_CONTENT", "field_sig": "public static final\u00a0int HTTP_NO_CONTENT", "description": "HTTP Status-Code 204: No Content."}, {"field_name": "HTTP_RESET", "field_sig": "public static final\u00a0int HTTP_RESET", "description": "HTTP Status-Code 205: Reset Content."}, {"field_name": "HTTP_PARTIAL", "field_sig": "public static final\u00a0int HTTP_PARTIAL", "description": "HTTP Status-Code 206: Partial Content."}, {"field_name": "HTTP_MULT_CHOICE", "field_sig": "public static final\u00a0int HTTP_MULT_CHOICE", "description": "HTTP Status-Code 300: Multiple Choices."}, {"field_name": "HTTP_MOVED_PERM", "field_sig": "public static final\u00a0int HTTP_MOVED_PERM", "description": "HTTP Status-Code 301: Moved Permanently."}, {"field_name": "HTTP_MOVED_TEMP", "field_sig": "public static final\u00a0int HTTP_MOVED_TEMP", "description": "HTTP Status-Code 302: Temporary Redirect."}, {"field_name": "HTTP_SEE_OTHER", "field_sig": "public static final\u00a0int HTTP_SEE_OTHER", "description": "HTTP Status-Code 303: See Other."}, {"field_name": "HTTP_NOT_MODIFIED", "field_sig": "public static final\u00a0int HTTP_NOT_MODIFIED", "description": "HTTP Status-Code 304: Not Modified."}, {"field_name": "HTTP_USE_PROXY", "field_sig": "public static final\u00a0int HTTP_USE_PROXY", "description": "HTTP Status-Code 305: Use Proxy."}, {"field_name": "HTTP_BAD_REQUEST", "field_sig": "public static final\u00a0int HTTP_BAD_REQUEST", "description": "HTTP Status-Code 400: Bad Request."}, {"field_name": "HTTP_UNAUTHORIZED", "field_sig": "public static final\u00a0int HTTP_UNAUTHORIZED", "description": "HTTP Status-Code 401: Unauthorized."}, {"field_name": "HTTP_PAYMENT_REQUIRED", "field_sig": "public static final\u00a0int HTTP_PAYMENT_REQUIRED", "description": "HTTP Status-Code 402: Payment Required."}, {"field_name": "HTTP_FORBIDDEN", "field_sig": "public static final\u00a0int HTTP_FORBIDDEN", "description": "HTTP Status-Code 403: Forbidden."}, {"field_name": "HTTP_NOT_FOUND", "field_sig": "public static final\u00a0int HTTP_NOT_FOUND", "description": "HTTP Status-Code 404: Not Found."}, {"field_name": "HTTP_BAD_METHOD", "field_sig": "public static final\u00a0int HTTP_BAD_METHOD", "description": "HTTP Status-Code 405: Method Not Allowed."}, {"field_name": "HTTP_NOT_ACCEPTABLE", "field_sig": "public static final\u00a0int HTTP_NOT_ACCEPTABLE", "description": "HTTP Status-Code 406: Not Acceptable."}, {"field_name": "HTTP_PROXY_AUTH", "field_sig": "public static final\u00a0int HTTP_PROXY_AUTH", "description": "HTTP Status-Code 407: Proxy Authentication Required."}, {"field_name": "HTTP_CLIENT_TIMEOUT", "field_sig": "public static final\u00a0int HTTP_CLIENT_TIMEOUT", "description": "HTTP Status-Code 408: Request Time-Out."}, {"field_name": "HTTP_CONFLICT", "field_sig": "public static final\u00a0int HTTP_CONFLICT", "description": "HTTP Status-Code 409: Conflict."}, {"field_name": "HTTP_GONE", "field_sig": "public static final\u00a0int HTTP_GONE", "description": "HTTP Status-Code 410: Gone."}, {"field_name": "HTTP_LENGTH_REQUIRED", "field_sig": "public static final\u00a0int HTTP_LENGTH_REQUIRED", "description": "HTTP Status-Code 411: Length Required."}, {"field_name": "HTTP_PRECON_FAILED", "field_sig": "public static final\u00a0int HTTP_PRECON_FAILED", "description": "HTTP Status-Code 412: Precondition Failed."}, {"field_name": "HTTP_ENTITY_TOO_LARGE", "field_sig": "public static final\u00a0int HTTP_ENTITY_TOO_LARGE", "description": "HTTP Status-Code 413: Request Entity Too Large."}, {"field_name": "HTTP_REQ_TOO_LONG", "field_sig": "public static final\u00a0int HTTP_REQ_TOO_LONG", "description": "HTTP Status-Code 414: Request-URI Too Large."}, {"field_name": "HTTP_UNSUPPORTED_TYPE", "field_sig": "public static final\u00a0int HTTP_UNSUPPORTED_TYPE", "description": "HTTP Status-Code 415: Unsupported Media Type."}, {"field_name": "HTTP_SERVER_ERROR", "field_sig": "@Deprecated\npublic static final\u00a0int HTTP_SERVER_ERROR", "description": "HTTP Status-Code 500: Internal Server Error."}, {"field_name": "HTTP_INTERNAL_ERROR", "field_sig": "public static final\u00a0int HTTP_INTERNAL_ERROR", "description": "HTTP Status-Code 500: Internal Server Error."}, {"field_name": "HTTP_NOT_IMPLEMENTED", "field_sig": "public static final\u00a0int HTTP_NOT_IMPLEMENTED", "description": "HTTP Status-Code 501: Not Implemented."}, {"field_name": "HTTP_BAD_GATEWAY", "field_sig": "public static final\u00a0int HTTP_BAD_GATEWAY", "description": "HTTP Status-Code 502: Bad Gateway."}, {"field_name": "HTTP_UNAVAILABLE", "field_sig": "public static final\u00a0int HTTP_UNAVAILABLE", "description": "HTTP Status-Code 503: Service Unavailable."}, {"field_name": "HTTP_GATEWAY_TIMEOUT", "field_sig": "public static final\u00a0int HTTP_GATEWAY_TIMEOUT", "description": "HTTP Status-Code 504: Gateway Timeout."}, {"field_name": "HTTP_VERSION", "field_sig": "public static final\u00a0int HTTP_VERSION", "description": "HTTP Status-Code 505: HTTP Version Not Supported."}], "methods": [{"method_name": "setAuthenticator", "method_sig": "public void setAuthenticator (Authenticator auth)", "description": "Supplies an Authenticator to be used\n when authentication is requested through the HTTP protocol for\n this HttpURLConnection.\n If no authenticator is supplied, the\n default\n authenticator will be used."}, {"method_name": "getHeaderFieldKey", "method_sig": "public String getHeaderFieldKey (int n)", "description": "Returns the key for the nth header field.\n Some implementations may treat the 0th\n header field as special, i.e. as the status line returned by the HTTP\n server. In this case, getHeaderField(0) returns the status\n line, but getHeaderFieldKey(0) returns null."}, {"method_name": "setFixedLengthStreamingMode", "method_sig": "public void setFixedLengthStreamingMode (int contentLength)", "description": "This method is used to enable streaming of a HTTP request body\n without internal buffering, when the content length is known in\n advance.\n \n An exception will be thrown if the application\n attempts to write more data than the indicated\n content-length, or if the application closes the OutputStream\n before writing the indicated amount.\n \n When output streaming is enabled, authentication\n and redirection cannot be handled automatically.\n A HttpRetryException will be thrown when reading\n the response if authentication or redirection are required.\n This exception can be queried for the details of the error.\n \n This method must be called before the URLConnection is connected.\n \nNOTE: setFixedLengthStreamingMode(long) is recommended\n instead of this method as it allows larger content lengths to be set."}, {"method_name": "setFixedLengthStreamingMode", "method_sig": "public void setFixedLengthStreamingMode (long contentLength)", "description": "This method is used to enable streaming of a HTTP request body\n without internal buffering, when the content length is known in\n advance.\n\n  An exception will be thrown if the application attempts to write\n more data than the indicated content-length, or if the application\n closes the OutputStream before writing the indicated amount.\n\n  When output streaming is enabled, authentication and redirection\n cannot be handled automatically. A HttpRetryException will\n be thrown when reading the response if authentication or redirection\n are required. This exception can be queried for the details of the\n error.\n\n  This method must be called before the URLConnection is connected.\n\n  The content length set by invoking this method takes precedence\n over any value set by setFixedLengthStreamingMode(int)."}, {"method_name": "setChunkedStreamingMode", "method_sig": "public void setChunkedStreamingMode (int chunklen)", "description": "This method is used to enable streaming of a HTTP request body\n without internal buffering, when the content length is not\n known in advance. In this mode, chunked transfer encoding\n is used to send the request body. Note, not all HTTP servers\n support this mode.\n \n When output streaming is enabled, authentication\n and redirection cannot be handled automatically.\n A HttpRetryException will be thrown when reading\n the response if authentication or redirection are required.\n This exception can be queried for the details of the error.\n \n This method must be called before the URLConnection is connected."}, {"method_name": "getHeaderField", "method_sig": "public String getHeaderField (int n)", "description": "Returns the value for the nth header field.\n Some implementations may treat the 0th\n header field as special, i.e. as the status line returned by the HTTP\n server.\n \n This method can be used in conjunction with the\n getHeaderFieldKey method to iterate through all\n the headers in the message."}, {"method_name": "setFollowRedirects", "method_sig": "public static void setFollowRedirects (boolean set)", "description": "Sets whether HTTP redirects  (requests with response code 3xx) should\n be automatically followed by this class.  True by default.  Applets\n cannot change this variable.\n \n If there is a security manager, this method first calls\n the security manager's checkSetFactory method\n to ensure the operation is allowed.\n This could result in a SecurityException."}, {"method_name": "getFollowRedirects", "method_sig": "public static boolean getFollowRedirects()", "description": "Returns a boolean indicating\n whether or not HTTP redirects (3xx) should\n be automatically followed."}, {"method_name": "setInstanceFollowRedirects", "method_sig": "public void setInstanceFollowRedirects (boolean followRedirects)", "description": "Sets whether HTTP redirects (requests with response code 3xx) should\n be automatically followed by this HttpURLConnection\n instance.\n \n The default value comes from followRedirects, which defaults to\n true."}, {"method_name": "getInstanceFollowRedirects", "method_sig": "public boolean getInstanceFollowRedirects()", "description": "Returns the value of this HttpURLConnection's\n instanceFollowRedirects field."}, {"method_name": "setRequestMethod", "method_sig": "public void setRequestMethod (String method)\n                      throws ProtocolException", "description": "Set the method for the URL request, one of:\n \nGET\n  POST\n  HEAD\n  OPTIONS\n  PUT\n  DELETE\n  TRACE\n  are legal, subject to protocol restrictions.  The default\n method is GET."}, {"method_name": "getRequestMethod", "method_sig": "public String getRequestMethod()", "description": "Get the request method."}, {"method_name": "getResponseCode", "method_sig": "public int getResponseCode()\n                    throws IOException", "description": "Gets the status code from an HTTP response message.\n For example, in the case of the following status lines:\n \n HTTP/1.0 200 OK\n HTTP/1.0 401 Unauthorized\n \n It will return 200 and 401 respectively.\n Returns -1 if no code can be discerned\n from the response (i.e., the response is not valid HTTP)."}, {"method_name": "getResponseMessage", "method_sig": "public String getResponseMessage()\n                          throws IOException", "description": "Gets the HTTP response message, if any, returned along with the\n response code from a server.  From responses like:\n \n HTTP/1.0 200 OK\n HTTP/1.0 404 Not Found\n \n Extracts the Strings \"OK\" and \"Not Found\" respectively.\n Returns null if none could be discerned from the responses\n (the result was not valid HTTP)."}, {"method_name": "disconnect", "method_sig": "public abstract void disconnect()", "description": "Indicates that other requests to the server\n are unlikely in the near future. Calling disconnect()\n should not imply that this HttpURLConnection\n instance can be reused for other requests."}, {"method_name": "usingProxy", "method_sig": "public abstract boolean usingProxy()", "description": "Indicates if the connection is going through a proxy."}, {"method_name": "getPermission", "method_sig": "public Permission getPermission()\n                         throws IOException", "description": "Returns a SocketPermission object representing the\n permission necessary to connect to the destination host and port."}, {"method_name": "getErrorStream", "method_sig": "public InputStream getErrorStream()", "description": "Returns the error stream if the connection failed\n but the server sent useful data nonetheless. The\n typical example is when an HTTP server responds\n with a 404, which will cause a FileNotFoundException\n to be thrown in connect, but the server sent an HTML\n help page with suggestions as to what to do.\n\n This method will not cause a connection to be initiated.  If\n the connection was not connected, or if the server did not have\n an error while connecting or if the server had an error but\n no error data was sent, this method will return null. This is\n the default."}]}