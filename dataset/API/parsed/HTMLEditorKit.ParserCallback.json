{"name": "Class HTMLEditorKit.ParserCallback", "module": "java.desktop", "package": "javax.swing.text.html", "text": "The result of parsing drives these callback methods.\n The open and close actions should be balanced.  The\n flush method will be the last method\n called, to give the receiver a chance to flush any\n pending data into the document.\n Refer to DocumentParser, the default parser used, for further\n information on the contents of the AttributeSets, the positions, and\n other info.", "codes": ["public static class HTMLEditorKit.ParserCallback\nextends Object"], "fields": [{"field_name": "IMPLIED", "field_sig": "public static final\u00a0Object IMPLIED", "description": "This is passed as an attribute in the attributeset to indicate\n the element is implied eg, the string '<>foo<\\t>'\n contains an implied html element and an implied body element."}], "methods": [{"method_name": "flush", "method_sig": "public void flush()\n           throws BadLocationException", "description": "The last method called on the reader. It allows\n any pending changes to be flushed into the document.\n Since this is currently loading synchronously, the entire\n set of changes are pushed in at this point."}, {"method_name": "handleText", "method_sig": "public void handleText (char[] data,\n                       int pos)", "description": "Called by the parser to indicate a block of text was\n encountered."}, {"method_name": "handleComment", "method_sig": "public void handleComment (char[] data,\n                          int pos)", "description": "Called by the parser to indicate a block of comment was\n encountered."}, {"method_name": "handleStartTag", "method_sig": "public void handleStartTag (HTML.Tag t,\n                           MutableAttributeSet a,\n                           int pos)", "description": "Callback from the parser. Route to the appropriate\n handler for the tag."}, {"method_name": "handleEndTag", "method_sig": "public void handleEndTag (HTML.Tag t,\n                         int pos)", "description": "Callback from the parser. Route to the appropriate\n handler for the tag."}, {"method_name": "handleSimpleTag", "method_sig": "public void handleSimpleTag (HTML.Tag t,\n                            MutableAttributeSet a,\n                            int pos)", "description": "Callback from the parser. Route to the appropriate\n handler for the tag."}, {"method_name": "handleError", "method_sig": "public void handleError (String errorMsg,\n                        int pos)", "description": "Callback from the parser. Route to the appropriate\n handler for the error."}, {"method_name": "handleEndOfLineString", "method_sig": "public void handleEndOfLineString (String eol)", "description": "This is invoked after the stream has been parsed, but before\n flush. eol will be one of \\n, \\r\n or \\r\\n, which ever is encountered the most in parsing the\n stream."}]}