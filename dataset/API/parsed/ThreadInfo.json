{"name": "Class ThreadInfo", "module": "java.management", "package": "java.lang.management", "text": "Thread information. ThreadInfo contains the information\n about a thread including:\n General thread information\n\nThread ID.\nName of the thread.\nWhether a thread is a daemon thread\n\nExecution information\n\nThread state.\nThe object upon which the thread is blocked due to:\n       \nwaiting to enter a synchronization block/method, or\nwaiting to be notified in a Object.wait method,\n           or\nparking due to a LockSupport.park call.\n\n\nThe ID of the thread that owns the object\n       that the thread is blocked.\nStack trace of the thread.\nList of object monitors locked by the thread.\nList of \n       ownable synchronizers locked by the thread.\nThread priority\n\nSynchronization Statistics\n\nThe number of times that the thread has blocked for\n       synchronization or waited for notification.\nThe accumulated elapsed time that the thread has blocked\n       for synchronization or waited for notification\n       since thread contention monitoring\n       was enabled. Some Java virtual machine implementation\n       may not support this.  The\n       ThreadMXBean.isThreadContentionMonitoringSupported()\n       method can be used to determine if a Java virtual machine\n       supports this.\n\nThis thread information class is designed for use in monitoring of\n the system, not for synchronization control.\n\n MXBean Mapping\nThreadInfo is mapped to a CompositeData\n with attributes as specified in\n the from method.", "codes": ["public class ThreadInfo\nextends Object"], "fields": [], "methods": [{"method_name": "getThreadId", "method_sig": "public long getThreadId()", "description": "Returns the ID of the thread associated with this ThreadInfo."}, {"method_name": "getThreadName", "method_sig": "public String getThreadName()", "description": "Returns the name of the thread associated with this ThreadInfo."}, {"method_name": "getThreadState", "method_sig": "public Thread.State getThreadState()", "description": "Returns the state of the thread associated with this ThreadInfo."}, {"method_name": "getBlockedTime", "method_sig": "public long getBlockedTime()", "description": "Returns the approximate accumulated elapsed time (in milliseconds)\n that the thread associated with this ThreadInfo\n has blocked to enter or reenter a monitor\n since thread contention monitoring is enabled.\n I.e. the total accumulated time the thread has been in the\n BLOCKED state since thread\n contention monitoring was last enabled.\n This method returns -1 if thread contention monitoring\n is disabled.\n\n The Java virtual machine may measure the time with a high\n resolution timer.  This statistic is reset when\n the thread contention monitoring is reenabled."}, {"method_name": "getBlockedCount", "method_sig": "public long getBlockedCount()", "description": "Returns the total number of times that\n the thread associated with this ThreadInfo\n blocked to enter or reenter a monitor.\n I.e. the number of times a thread has been in the\n BLOCKED state."}, {"method_name": "getWaitedTime", "method_sig": "public long getWaitedTime()", "description": "Returns the approximate accumulated elapsed time (in milliseconds)\n that the thread associated with this ThreadInfo\n has waited for notification\n since thread contention monitoring is enabled.\n I.e. the total accumulated time the thread has been in the\n WAITING\n or TIMED_WAITING state\n since thread contention monitoring is enabled.\n This method returns -1 if thread contention monitoring\n is disabled.\n\n The Java virtual machine may measure the time with a high\n resolution timer.  This statistic is reset when\n the thread contention monitoring is reenabled."}, {"method_name": "getWaitedCount", "method_sig": "public long getWaitedCount()", "description": "Returns the total number of times that\n the thread associated with this ThreadInfo\n waited for notification.\n I.e. the number of times that a thread has been\n in the WAITING\n or TIMED_WAITING state."}, {"method_name": "getLockInfo", "method_sig": "public LockInfo getLockInfo()", "description": "Returns the LockInfo of an object for which\n the thread associated with this ThreadInfo\n is blocked waiting.\n A thread can be blocked waiting for one of the following:\n \nan object monitor to be acquired for entering or reentering\n     a synchronization block/method.\n     The thread is in the BLOCKED\n     state waiting to enter the synchronized statement\n     or method.\n     \nan object monitor to be notified by another thread.\n     The thread is in the WAITING\n     or TIMED_WAITING state\n     due to a call to the Object.wait method.\n     \na synchronization object responsible for the thread parking.\n     The thread is in the WAITING\n     or TIMED_WAITING state\n     due to a call to the\n     LockSupport.park method.  The synchronization object\n     is the object returned from\n     LockSupport.getBlocker method. Typically it is an\n      ownable synchronizer\n     or a Condition.\n\nThis method returns null if the thread is not in any of\n the above conditions."}, {"method_name": "getLockName", "method_sig": "public String getLockName()", "description": "Returns the string representation\n of an object for which the thread associated with this\n ThreadInfo is blocked waiting.\n This method is equivalent to calling:\n \n\n getLockInfo().toString()\n \nThis method will return null if this thread is not blocked\n waiting for any object or if the object is not owned by any thread."}, {"method_name": "getLockOwnerId", "method_sig": "public long getLockOwnerId()", "description": "Returns the ID of the thread which owns the object\n for which the thread associated with this ThreadInfo\n is blocked waiting.\n This method will return -1 if this thread is not blocked\n waiting for any object or if the object is not owned by any thread."}, {"method_name": "getLockOwnerName", "method_sig": "public String getLockOwnerName()", "description": "Returns the name of the thread which owns the object\n for which the thread associated with this ThreadInfo\n is blocked waiting.\n This method will return null if this thread is not blocked\n waiting for any object or if the object is not owned by any thread."}, {"method_name": "getStackTrace", "method_sig": "public StackTraceElement[] getStackTrace()", "description": "Returns the stack trace of the thread\n associated with this ThreadInfo.\n If no stack trace was requested for this thread info, this method\n will return a zero-length array.\n If the returned array is of non-zero length then the first element of\n the array represents the top of the stack, which is the most recent\n method invocation in the sequence.  The last element of the array\n represents the bottom of the stack, which is the least recent method\n invocation in the sequence.\n\n Some Java virtual machines may, under some circumstances, omit one\n or more stack frames from the stack trace.  In the extreme case,\n a virtual machine that has no stack trace information concerning\n the thread associated with this ThreadInfo\n is permitted to return a zero-length array from this method."}, {"method_name": "isSuspended", "method_sig": "public boolean isSuspended()", "description": "Tests if the thread associated with this ThreadInfo\n is suspended.  This method returns true if\n Thread.suspend() has been called."}, {"method_name": "isInNative", "method_sig": "public boolean isInNative()", "description": "Tests if the thread associated with this ThreadInfo\n is executing native code via the Java Native Interface (JNI).\n The JNI native code does not include\n the virtual machine support code or the compiled native\n code generated by the virtual machine."}, {"method_name": "isDaemon", "method_sig": "public boolean isDaemon()", "description": "Tests if the thread associated with this ThreadInfo is\n a daemon thread."}, {"method_name": "getPriority", "method_sig": "public int getPriority()", "description": "Returns the thread priority of the\n thread associated with this ThreadInfo."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a string representation of this thread info.\n The format of this string depends on the implementation.\n The returned string will typically include\n the thread name,\n the thread ID,\n its state,\n and a stack trace if any."}, {"method_name": "from", "method_sig": "public static ThreadInfo from (CompositeData cd)", "description": "Returns a ThreadInfo object represented by the\n given CompositeData.\n\n \n A CompositeData representing a ThreadInfo of\n version N must contain all of the attributes defined\n in version \u2264 N unless specified otherwise.\n The same rule applies the composite type of the given\n CompositeData and transitively to attributes whose\n type or\n component type is\n CompositeType.\n \n A CompositeData representing ThreadInfo of\n version N contains \"stackTrace\" attribute and\n \"lockedMonitors\" attribute representing\n an array of StackTraceElement and\n an array of MonitorInfo respectively\n and their types are of version N.\n The \"lockedStackFrame\" attribute in\n MonitorInfo's composite type\n must represent StackTraceElement of the same version N.\n Otherwise, this method will throw IllegalArgumentException.\n\n \nThe attributes and their types for ThreadInfo's composite data\n\n\nAttribute Name\nType\nSince\n\n\n\n\nthreadId\njava.lang.Long\n5\n\n\nthreadName\njava.lang.String\n5\n\n\nthreadState\njava.lang.String\n5\n\n\nsuspended\njava.lang.Boolean\n5\n\n\ninNative\njava.lang.Boolean\n5\n\n\nblockedCount\njava.lang.Long\n5\n\n\nblockedTime\njava.lang.Long\n5\n\n\nwaitedCount\njava.lang.Long\n5\n\n\nwaitedTime\njava.lang.Long\n5\n\n\nlockName\njava.lang.String\n5\n\n\nlockOwnerId\njava.lang.Long\n5\n\n\nlockOwnerName\njava.lang.String\n5\n\n\nstackTrace\njavax.management.openmbean.CompositeData[], each element\n       is a CompositeData representing StackTraceElement\n       as specified below.\n   \n5\n\n\nlockInfo\njavax.management.openmbean.CompositeData\n       - the mapped type for LockInfo as specified in the\n         LockInfo.from(javax.management.openmbean.CompositeData) method.\n       \n       If the given CompositeData does not contain this attribute,\n       the LockInfo object will be constructed from\n       the value of the lockName attribute.\n6\n\n\nlockedMonitors\njavax.management.openmbean.CompositeData[]\n       whose element type is the mapped type for\n       MonitorInfo as specified in the\n       MonitorInfo.from method.\n       \n       If the given CompositeData does not contain this attribute,\n       this attribute will be set to an empty array.\n6\n\n\nlockedSynchronizers\njavax.management.openmbean.CompositeData[]\n       whose element type is the mapped type for\n       LockInfo as specified in the LockInfo.from(javax.management.openmbean.CompositeData) method.\n       \n       If the given CompositeData does not contain this attribute,\n       this attribute will be set to an empty array.\n6\n\n\ndaemon\njava.lang.Boolean\n\n       If the given CompositeData does not contain this attribute,\n       this attribute will be set to false.\n9\n\n\npriority\njava.lang.Integer\n\n       If the given CompositeData does not contain this attribute,\n       This attribute will be set to Thread.NORM_PRIORITY.\n9\n\n\n\nA CompositeData representing\n StackTraceElement of version N must contain\n all of the attributes defined in version \u2264 N\n unless specified otherwise.\n\n \nThe attributes and their types for StackTraceElement's composite data\n\n\nAttribute Name\nType\nSince\n\n\n\n\nclassLoaderName\njava.lang.String\n9\n\n\nmoduleName\njava.lang.String\n9\n\n\nmoduleVersion\njava.lang.String\n9\n\n\nclassName\njava.lang.String\n5\n\n\nmethodName\njava.lang.String\n5\n\n\nfileName\njava.lang.String\n5\n\n\nlineNumber\njava.lang.Integer\n5\n\n\nnativeMethod\njava.lang.Boolean\n5\n\n\n"}, {"method_name": "getLockedMonitors", "method_sig": "public MonitorInfo[] getLockedMonitors()", "description": "Returns an array of MonitorInfo objects, each of which\n represents an object monitor currently locked by the thread\n associated with this ThreadInfo.\n If no locked monitor was requested for this thread info or\n no monitor is locked by the thread, this method\n will return a zero-length array."}, {"method_name": "getLockedSynchronizers", "method_sig": "public LockInfo[] getLockedSynchronizers()", "description": "Returns an array of LockInfo objects, each of which\n represents an ownable\n synchronizer currently locked by the thread associated with\n this ThreadInfo.  If no locked synchronizer was\n requested for this thread info or no synchronizer is locked by\n the thread, this method will return a zero-length array."}]}