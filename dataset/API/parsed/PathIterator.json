{"name": "Interface PathIterator", "module": "java.desktop", "package": "java.awt.geom", "text": "The PathIterator interface provides the mechanism\n for objects that implement the Shape\n interface to return the geometry of their boundary by allowing\n a caller to retrieve the path of that boundary a segment at a\n time.  This interface allows these objects to retrieve the path of\n their boundary a segment at a time by using 1st through 3rd order\n B\u00e9zier curves, which are lines and quadratic or cubic\n B\u00e9zier splines.\n \n Multiple subpaths can be expressed by using a \"MOVETO\" segment to\n create a discontinuity in the geometry to move from the end of\n one subpath to the beginning of the next.\n \n Each subpath can be closed manually by ending the last segment in\n the subpath on the same coordinate as the beginning \"MOVETO\" segment\n for that subpath or by using a \"CLOSE\" segment to append a line\n segment from the last point back to the first.\n Be aware that manually closing an outline as opposed to using a\n \"CLOSE\" segment to close the path might result in different line\n style decorations being used at the end points of the subpath.\n For example, the BasicStroke object\n uses a line \"JOIN\" decoration to connect the first and last points\n if a \"CLOSE\" segment is encountered, whereas simply ending the path\n on the same coordinate as the beginning coordinate results in line\n \"CAP\" decorations being used at the ends.", "codes": ["public interface PathIterator"], "fields": [{"field_name": "WIND_EVEN_ODD", "field_sig": "@Native\nstatic final\u00a0int WIND_EVEN_ODD", "description": "The winding rule constant for specifying an even-odd rule\n for determining the interior of a path.\n The even-odd rule specifies that a point lies inside the\n path if a ray drawn in any direction from that point to\n infinity is crossed by path segments an odd number of times."}, {"field_name": "WIND_NON_ZERO", "field_sig": "@Native\nstatic final\u00a0int WIND_NON_ZERO", "description": "The winding rule constant for specifying a non-zero rule\n for determining the interior of a path.\n The non-zero rule specifies that a point lies inside the\n path if a ray drawn in any direction from that point to\n infinity is crossed by path segments a different number\n of times in the counter-clockwise direction than the\n clockwise direction."}, {"field_name": "SEG_MOVETO", "field_sig": "@Native\nstatic final\u00a0int SEG_MOVETO", "description": "The segment type constant for a point that specifies the\n starting location for a new subpath."}, {"field_name": "SEG_LINETO", "field_sig": "@Native\nstatic final\u00a0int SEG_LINETO", "description": "The segment type constant for a point that specifies the\n end point of a line to be drawn from the most recently\n specified point."}, {"field_name": "SEG_QUADTO", "field_sig": "@Native\nstatic final\u00a0int SEG_QUADTO", "description": "The segment type constant for the pair of points that specify\n a quadratic parametric curve to be drawn from the most recently\n specified point.\n The curve is interpolated by solving the parametric control\n equation in the range (t=[0..1]) using\n the most recently specified (current) point (CP),\n the first control point (P1),\n and the final interpolated control point (P2).\n The parametric control equation for this curve is:\n \n          P(t) = B(2,0)*CP + B(2,1)*P1 + B(2,2)*P2\n          0 <= t <= 1\n\n        B(n,m) = mth coefficient of nth degree Bernstein polynomial\n               = C(n,m) * t^(m) * (1 - t)^(n-m)\n        C(n,m) = Combinations of n things, taken m at a time\n               = n! / (m! * (n-m)!)\n "}, {"field_name": "SEG_CUBICTO", "field_sig": "@Native\nstatic final\u00a0int SEG_CUBICTO", "description": "The segment type constant for the set of 3 points that specify\n a cubic parametric curve to be drawn from the most recently\n specified point.\n The curve is interpolated by solving the parametric control\n equation in the range (t=[0..1]) using\n the most recently specified (current) point (CP),\n the first control point (P1),\n the second control point (P2),\n and the final interpolated control point (P3).\n The parametric control equation for this curve is:\n \n          P(t) = B(3,0)*CP + B(3,1)*P1 + B(3,2)*P2 + B(3,3)*P3\n          0 <= t <= 1\n\n        B(n,m) = mth coefficient of nth degree Bernstein polynomial\n               = C(n,m) * t^(m) * (1 - t)^(n-m)\n        C(n,m) = Combinations of n things, taken m at a time\n               = n! / (m! * (n-m)!)\n \n This form of curve is commonly known as a B\u00e9zier curve."}, {"field_name": "SEG_CLOSE", "field_sig": "@Native\nstatic final\u00a0int SEG_CLOSE", "description": "The segment type constant that specifies that\n the preceding subpath should be closed by appending a line segment\n back to the point corresponding to the most recent SEG_MOVETO."}], "methods": [{"method_name": "getWindingRule", "method_sig": "int getWindingRule()", "description": "Returns the winding rule for determining the interior of the\n path."}, {"method_name": "isDone", "method_sig": "boolean isDone()", "description": "Tests if the iteration is complete."}, {"method_name": "next", "method_sig": "void next()", "description": "Moves the iterator to the next segment of the path forwards\n along the primary direction of traversal as long as there are\n more points in that direction."}, {"method_name": "currentSegment", "method_sig": "int currentSegment (float[] coords)", "description": "Returns the coordinates and type of the current path segment in\n the iteration.\n The return value is the path-segment type:\n SEG_MOVETO, SEG_LINETO, SEG_QUADTO, SEG_CUBICTO, or SEG_CLOSE.\n A float array of length 6 must be passed in and can be used to\n store the coordinates of the point(s).\n Each point is stored as a pair of float x,y coordinates.\n SEG_MOVETO and SEG_LINETO types returns one point,\n SEG_QUADTO returns two points,\n SEG_CUBICTO returns 3 points\n and SEG_CLOSE does not return any points."}, {"method_name": "currentSegment", "method_sig": "int currentSegment (double[] coords)", "description": "Returns the coordinates and type of the current path segment in\n the iteration.\n The return value is the path-segment type:\n SEG_MOVETO, SEG_LINETO, SEG_QUADTO, SEG_CUBICTO, or SEG_CLOSE.\n A double array of length 6 must be passed in and can be used to\n store the coordinates of the point(s).\n Each point is stored as a pair of double x,y coordinates.\n SEG_MOVETO and SEG_LINETO types returns one point,\n SEG_QUADTO returns two points,\n SEG_CUBICTO returns 3 points\n and SEG_CLOSE does not return any points."}]}