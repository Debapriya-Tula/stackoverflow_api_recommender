{"name": "Class Permission", "module": "java.base", "package": "java.security", "text": "Abstract class for representing access to a system resource.\n All permissions have a name (whose interpretation depends on the subclass),\n as well as abstract functions for defining the semantics of the\n particular Permission subclass.\n\n Most Permission objects also include an \"actions\" list that tells the actions\n that are permitted for the object.  For example,\n for a java.io.FilePermission object, the permission name is\n the pathname of a file (or directory), and the actions list\n (such as \"read, write\") specifies which actions are granted for the\n specified file (or for files in the specified directory).\n The actions list is optional for Permission objects, such as\n java.lang.RuntimePermission,\n that don't need such a list; you either have the named permission (such\n as \"system.exit\") or you don't.\n\n An important method that must be implemented by each subclass is\n the implies method to compare Permissions. Basically,\n \"permission p1 implies permission p2\" means that\n if one is granted permission p1, one is naturally granted permission p2.\n Thus, this is not an equality test, but rather more of a\n subset test.\n\n  Permission objects are similar to String objects in that they\n are immutable once they have been created. Subclasses should not\n provide methods that can change the state of a permission\n once it has been created.", "codes": ["public abstract class Permission\nextends Object\nimplements Guard, Serializable"], "fields": [], "methods": [{"method_name": "checkGuard", "method_sig": "public void checkGuard (Object object)\n                throws SecurityException", "description": "Implements the guard interface for a permission. The\n SecurityManager.checkPermission method is called,\n passing this permission object as the permission to check.\n Returns silently if access is granted. Otherwise, throws\n a SecurityException."}, {"method_name": "implies", "method_sig": "public abstract boolean implies (Permission permission)", "description": "Checks if the specified permission's actions are \"implied by\"\n this object's actions.\n \n This must be implemented by subclasses of Permission, as they are the\n only ones that can impose semantics on a Permission object.\n\n The implies method is used by the AccessController to determine\n whether or not a requested permission is implied by another permission that\n is known to be valid in the current execution context."}, {"method_name": "equals", "method_sig": "public abstract boolean equals (Object obj)", "description": "Checks two Permission objects for equality.\n \n Do not use the equals method for making access control\n decisions; use the implies method."}, {"method_name": "hashCode", "method_sig": "public abstract int hashCode()", "description": "Returns the hash code value for this Permission object.\n \n The required hashCode behavior for Permission Objects is\n the following:\n \nWhenever it is invoked on the same Permission object more than\n     once during an execution of a Java application, the\n     hashCode method\n     must consistently return the same integer. This integer need not\n     remain consistent from one execution of an application to another\n     execution of the same application.\n If two Permission objects are equal according to the\n     equals\n     method, then calling the hashCode method on each of the\n     two Permission objects must produce the same integer result.\n "}, {"method_name": "getName", "method_sig": "public final String getName()", "description": "Returns the name of this Permission.\n For example, in the case of a java.io.FilePermission,\n the name will be a pathname."}, {"method_name": "getActions", "method_sig": "public abstract String getActions()", "description": "Returns the actions as a String. This is abstract\n so subclasses can defer creating a String representation until\n one is needed. Subclasses should always return actions in what they\n consider to be their\n canonical form. For example, two FilePermission objects created via\n the following:\n\n \n   perm1 = new FilePermission(p1,\"read,write\");\n   perm2 = new FilePermission(p2,\"write,read\");\n \n\n both return\n \"read,write\" when the getActions method is invoked."}, {"method_name": "newPermissionCollection", "method_sig": "public PermissionCollection newPermissionCollection()", "description": "Returns an empty PermissionCollection for a given Permission object, or null if\n one is not defined. Subclasses of class Permission should\n override this if they need to store their permissions in a particular\n PermissionCollection object in order to provide the correct semantics\n when the PermissionCollection.implies method is called.\n If null is returned,\n then the caller of this method is free to store permissions of this\n type in any PermissionCollection they choose (one that uses a Hashtable,\n one that uses a Vector, etc)."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a string describing this Permission.  The convention is to\n specify the class name, the permission name, and the actions in\n the following format: '(\"ClassName\" \"name\" \"actions\")', or\n '(\"ClassName\" \"name\")' if actions list is null or empty."}]}