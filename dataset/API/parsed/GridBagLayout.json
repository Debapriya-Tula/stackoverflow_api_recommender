{"name": "Class GridBagLayout", "module": "java.desktop", "package": "java.awt", "text": "The GridBagLayout class is a flexible layout\n manager that aligns components vertically, horizontally or along their\n baseline without requiring that the components be of the same size.\n Each GridBagLayout object maintains a dynamic,\n rectangular grid of cells, with each component occupying\n one or more cells, called its display area.\n \n Each component managed by a GridBagLayout is associated with\n an instance of GridBagConstraints.  The constraints object\n specifies where a component's display area should be located on the grid\n and how the component should be positioned within its display area.  In\n addition to its constraints object, the GridBagLayout also\n considers each component's minimum and preferred sizes in order to\n determine a component's size.\n \n The overall orientation of the grid depends on the container's\n ComponentOrientation property.  For horizontal left-to-right\n orientations, grid coordinate (0,0) is in the upper left corner of the\n container with x increasing to the right and y increasing downward.  For\n horizontal right-to-left orientations, grid coordinate (0,0) is in the upper\n right corner of the container with x increasing to the left and y\n increasing downward.\n \n To use a grid bag layout effectively, you must customize one or more\n of the GridBagConstraints objects that are associated\n with its components. You customize a GridBagConstraints\n object by setting one or more of its instance variables:\n\n \nGridBagConstraints.gridx,\n GridBagConstraints.gridy\nSpecifies the cell containing the leading corner of the component's\n display area, where the cell at the origin of the grid has address\n gridx\u00a0=\u00a00,\n gridy\u00a0=\u00a00.  For horizontal left-to-right layout,\n a component's leading corner is its upper left.  For horizontal\n right-to-left layout, a component's leading corner is its upper right.\n Use GridBagConstraints.RELATIVE (the default value)\n to specify that the component be placed immediately following\n (along the x axis for gridx or the y axis for\n gridy) the component that was added to the container\n just before this component was added.\n GridBagConstraints.gridwidth,\n GridBagConstraints.gridheight\nSpecifies the number of cells in a row (for gridwidth)\n or column (for gridheight)\n in the component's display area.\n The default value is 1.\n Use GridBagConstraints.REMAINDER to specify\n that the component's display area will be from gridx\n to the last cell in the row (for gridwidth)\n or from gridy to the last cell in the column\n (for gridheight).\n\n Use GridBagConstraints.RELATIVE to specify\n that the component's display area will be from gridx\n to the next to the last cell in its row (for gridwidth\n or from gridy to the next to the last cell in its\n column (for gridheight).\n\n GridBagConstraints.fill\nUsed when the component's display area\n is larger than the component's requested size\n to determine whether (and how) to resize the component.\n Possible values are\n GridBagConstraints.NONE (the default),\n GridBagConstraints.HORIZONTAL\n (make the component wide enough to fill its display area\n horizontally, but don't change its height),\n GridBagConstraints.VERTICAL\n (make the component tall enough to fill its display area\n vertically, but don't change its width), and\n GridBagConstraints.BOTH\n (make the component fill its display area entirely).\n GridBagConstraints.ipadx,\n GridBagConstraints.ipady\nSpecifies the component's internal padding within the layout,\n how much to add to the minimum size of the component.\n The width of the component will be at least its minimum width\n plus ipadx pixels. Similarly, the height of\n the component will be at least the minimum height plus\n ipady pixels.\n GridBagConstraints.insets\nSpecifies the component's external padding, the minimum\n amount of space between the component and the edges of its display area.\n GridBagConstraints.anchor\nSpecifies where the component should be positioned in its display area.\n There are three kinds of possible values: absolute, orientation-relative,\n and baseline-relative\n Orientation relative values are interpreted relative to the container's\n ComponentOrientation property while absolute values\n are not.  Baseline relative values are calculated relative to the\n baseline.  Valid values are:\n\n \nAbsolute, relative and baseline values as described above\n\n\nAbsolute Values\nOrientation Relative Values\nBaseline Relative Values\n\n\n\n\n\n\nGridBagConstraints.NORTH\nGridBagConstraints.SOUTH\nGridBagConstraints.WEST\nGridBagConstraints.EAST\nGridBagConstraints.NORTHWEST\nGridBagConstraints.NORTHEAST\nGridBagConstraints.SOUTHWEST\nGridBagConstraints.SOUTHEAST\nGridBagConstraints.CENTER (the default)\n\n\n\n\nGridBagConstraints.PAGE_START\nGridBagConstraints.PAGE_END\nGridBagConstraints.LINE_START\nGridBagConstraints.LINE_END\nGridBagConstraints.FIRST_LINE_START\nGridBagConstraints.FIRST_LINE_END\nGridBagConstraints.LAST_LINE_START\nGridBagConstraints.LAST_LINE_END\n\n\n\n\nGridBagConstraints.BASELINE\nGridBagConstraints.BASELINE_LEADING\nGridBagConstraints.BASELINE_TRAILING\nGridBagConstraints.ABOVE_BASELINE\nGridBagConstraints.ABOVE_BASELINE_LEADING\nGridBagConstraints.ABOVE_BASELINE_TRAILING\nGridBagConstraints.BELOW_BASELINE\nGridBagConstraints.BELOW_BASELINE_LEADING\nGridBagConstraints.BELOW_BASELINE_TRAILING\n\n\n\n\n\nGridBagConstraints.weightx,\n GridBagConstraints.weighty\nUsed to determine how to distribute space, which is\n important for specifying resizing behavior.\n Unless you specify a weight for at least one component\n in a row (weightx) and column (weighty),\n all the components clump together in the center of their container.\n This is because when the weight is zero (the default),\n the GridBagLayout object puts any extra space\n between its grid of cells and the edges of the container.\n \n\n Each row may have a baseline; the baseline is determined by the\n components in that row that have a valid baseline and are aligned\n along the baseline (the component's anchor value is one of \n BASELINE, BASELINE_LEADING or BASELINE_TRAILING).\n If none of the components in the row has a valid baseline, the row\n does not have a baseline.\n \n If a component spans rows it is aligned either to the baseline of\n the start row (if the baseline-resize behavior is \n CONSTANT_ASCENT) or the end row (if the baseline-resize behavior\n is CONSTANT_DESCENT).  The row that the component is\n aligned to is called the prevailing row.\n \n The following figure shows a baseline layout and includes a\n component that spans rows:\n \nBaseline Layout\n\n\n\n\n\n This layout consists of three components:\n A panel that starts in row 0 and ends in row 1.  The panel\n   has a baseline-resize behavior of CONSTANT_DESCENT and has\n   an anchor of BASELINE.  As the baseline-resize behavior\n   is CONSTANT_DESCENT the prevailing row for the panel is\n   row 1.\n Two buttons, each with a baseline-resize behavior of\n   CENTER_OFFSET and an anchor of BASELINE.\n \n Because the second button and the panel share the same prevailing row,\n they are both aligned along their baseline.\n \n Components positioned using one of the baseline-relative values resize\n differently than when positioned using an absolute or orientation-relative\n value.  How components change is dictated by how the baseline of the\n prevailing row changes.  The baseline is anchored to the\n bottom of the display area if any components with the same prevailing row\n have a baseline-resize behavior of CONSTANT_DESCENT,\n otherwise the baseline is anchored to the top of the display area.\n The following rules dictate the resize behavior:\n \nResizable components positioned above the baseline can only\n grow as tall as the baseline.  For example, if the baseline is at 100\n and anchored at the top, a resizable component positioned above the\n baseline can never grow more than 100 units.\n Similarly, resizable components positioned below the baseline can\n only grow as high as the difference between the display height and the\n baseline.\n Resizable components positioned on the baseline with a\n baseline-resize behavior of OTHER are only resized if\n the baseline at the resized size fits within the display area.  If\n the baseline is such that it does not fit within the display area\n the component is not resized.\n Components positioned on the baseline that do not have a\n baseline-resize behavior of OTHER\n can only grow as tall as display height - baseline + baseline of component.\n \n If you position a component along the baseline, but the\n component does not have a valid baseline, it will be vertically centered\n in its space.  Similarly if you have positioned a component relative\n to the baseline and none of the components in the row have a valid\n baseline the component is vertically centered.\n \n The following figures show ten components (all buttons)\n managed by a grid bag layout.  Figure 2 shows the layout for a horizontal,\n left-to-right container and Figure 3 shows the layout for a horizontal,\n right-to-left container.\n\n \nFigures\n\n\n\n\n\n\n\n\nFigure 2: Horizontal, Left-to-Right\nFigure 3: Horizontal, Right-to-Left\n\n\n\n Each of the ten components has the fill field\n of its associated GridBagConstraints object\n set to GridBagConstraints.BOTH.\n In addition, the components have the following non-default constraints:\n\n \nButton1, Button2, Button3: weightx\u00a0=\u00a01.0\nButton4: weightx\u00a0=\u00a01.0,\n gridwidth\u00a0=\u00a0GridBagConstraints.REMAINDER\nButton5: gridwidth\u00a0=\u00a0GridBagConstraints.REMAINDER\nButton6: gridwidth\u00a0=\u00a0GridBagConstraints.RELATIVE\nButton7: gridwidth\u00a0=\u00a0GridBagConstraints.REMAINDER\nButton8: gridheight\u00a0=\u00a02,\n weighty\u00a0=\u00a01.0\nButton9, Button 10:\n gridwidth\u00a0=\u00a0GridBagConstraints.REMAINDER\n\n\n Here is the code that implements the example shown above:\n\n \n import java.awt.*;\n import java.util.*;\n import java.applet.Applet;\n\n public class GridBagEx1 extends Applet {\n\n     protected void makebutton(String name,\n                               GridBagLayout gridbag,\n                               GridBagConstraints c) {\n         Button button = new Button(name);\n         gridbag.setConstraints(button, c);\n         add(button);\n     }\n\n     public void init() {\n         GridBagLayout gridbag = new GridBagLayout();\n         GridBagConstraints c = new GridBagConstraints();\n\n         setFont(new Font(\"SansSerif\", Font.PLAIN, 14));\n         setLayout(gridbag);\n\n         c.fill = GridBagConstraints.BOTH;\n         c.weightx = 1.0;\n         makebutton(\"Button1\", gridbag, c);\n         makebutton(\"Button2\", gridbag, c);\n         makebutton(\"Button3\", gridbag, c);\n\n         c.gridwidth = GridBagConstraints.REMAINDER; //end row\n         makebutton(\"Button4\", gridbag, c);\n\n         c.weightx = 0.0;                //reset to the default\n         makebutton(\"Button5\", gridbag, c); //another row\n\n         c.gridwidth = GridBagConstraints.RELATIVE; //next-to-last in row\n         makebutton(\"Button6\", gridbag, c);\n\n         c.gridwidth = GridBagConstraints.REMAINDER; //end row\n         makebutton(\"Button7\", gridbag, c);\n\n         c.gridwidth = 1;                //reset to the default\n         c.gridheight = 2;\n         c.weighty = 1.0;\n         makebutton(\"Button8\", gridbag, c);\n\n         c.weighty = 0.0;                //reset to the default\n         c.gridwidth = GridBagConstraints.REMAINDER; //end row\n         c.gridheight = 1;               //reset to the default\n         makebutton(\"Button9\", gridbag, c);\n         makebutton(\"Button10\", gridbag, c);\n\n         setSize(300, 100);\n     }\n\n     public static void main(String args[]) {\n         Frame f = new Frame(\"GridBag Layout Example\");\n         GridBagEx1 ex1 = new GridBagEx1();\n\n         ex1.init();\n\n         f.add(\"Center\", ex1);\n         f.pack();\n         f.setSize(f.getPreferredSize());\n         f.show();\n     }\n }\n ", "codes": ["public class GridBagLayout\nextends Object\nimplements LayoutManager2, Serializable"], "fields": [{"field_name": "MAXGRIDSIZE", "field_sig": "protected static final\u00a0int MAXGRIDSIZE", "description": "This field is no longer used to reserve arrays and kept for backward\n compatibility. Previously, this was\n the maximum number of grid positions (both horizontal and\n vertical) that could be laid out by the grid bag layout.\n Current implementation doesn't impose any limits\n on the size of a grid."}, {"field_name": "MINSIZE", "field_sig": "protected static final\u00a0int MINSIZE", "description": "The smallest grid that can be laid out by the grid bag layout."}, {"field_name": "PREFERREDSIZE", "field_sig": "protected static final\u00a0int PREFERREDSIZE", "description": "The preferred grid size that can be laid out by the grid bag layout."}, {"field_name": "comptable", "field_sig": "protected\u00a0Hashtable<Component,\u200bGridBagConstraints> comptable", "description": "This hashtable maintains the association between\n a component and its gridbag constraints.\n The Keys in comptable are the components and the\n values are the instances of GridBagConstraints."}, {"field_name": "defaultConstraints", "field_sig": "protected\u00a0GridBagConstraints defaultConstraints", "description": "This field holds a gridbag constraints instance\n containing the default values, so if a component\n does not have gridbag constraints associated with\n it, then the component will be assigned a\n copy of the defaultConstraints."}, {"field_name": "layoutInfo", "field_sig": "protected\u00a0GridBagLayoutInfo layoutInfo", "description": "This field holds the layout information\n for the gridbag.  The information in this field\n is based on the most recent validation of the\n gridbag.\n If layoutInfo is null\n this indicates that there are no components in\n the gridbag or if there are components, they have\n not yet been validated."}, {"field_name": "columnWidths", "field_sig": "public\u00a0int[] columnWidths", "description": "This field holds the overrides to the column minimum\n width.  If this field is non-null the values are\n applied to the gridbag after all of the minimum columns\n widths have been calculated.\n If columnWidths has more elements than the number of\n columns, columns are added to the gridbag to match\n the number of elements in columnWidth."}, {"field_name": "rowHeights", "field_sig": "public\u00a0int[] rowHeights", "description": "This field holds the overrides to the row minimum\n heights.  If this field is non-null the values are\n applied to the gridbag after all of the minimum row\n heights have been calculated.\n If rowHeights has more elements than the number of\n rows, rows are added to the gridbag to match\n the number of elements in rowHeights."}, {"field_name": "columnWeights", "field_sig": "public\u00a0double[] columnWeights", "description": "This field holds the overrides to the column weights.\n If this field is non-null the values are\n applied to the gridbag after all of the columns\n weights have been calculated.\n If columnWeights[i] > weight for column i, then\n column i is assigned the weight in columnWeights[i].\n If columnWeights has more elements than the number\n of columns, the excess elements are ignored - they do\n not cause more columns to be created."}, {"field_name": "rowWeights", "field_sig": "public\u00a0double[] rowWeights", "description": "This field holds the overrides to the row weights.\n If this field is non-null the values are\n applied to the gridbag after all of the rows\n weights have been calculated.\n If rowWeights[i] >  weight for row i, then\n row i is assigned the weight in rowWeights[i].\n If rowWeights has more elements than the number\n of rows, the excess elements are ignored - they do\n not cause more rows to be created."}], "methods": [{"method_name": "setConstraints", "method_sig": "public void setConstraints (Component comp,\n                           GridBagConstraints constraints)", "description": "Sets the constraints for the specified component in this layout."}, {"method_name": "getConstraints", "method_sig": "public GridBagConstraints getConstraints (Component comp)", "description": "Gets the constraints for the specified component.  A copy of\n the actual GridBagConstraints object is returned."}, {"method_name": "lookupConstraints", "method_sig": "protected GridBagConstraints lookupConstraints (Component comp)", "description": "Retrieves the constraints for the specified component.\n The return value is not a copy, but is the actual\n GridBagConstraints object used by the layout mechanism.\n \n If comp is not in the GridBagLayout,\n a set of default GridBagConstraints are returned.\n A comp value of null is invalid\n and returns null."}, {"method_name": "getLayoutOrigin", "method_sig": "public Point getLayoutOrigin()", "description": "Determines the origin of the layout area, in the graphics coordinate\n space of the target container.  This value represents the pixel\n coordinates of the top-left corner of the layout area regardless of\n the ComponentOrientation value of the container.  This\n is distinct from the grid origin given by the cell coordinates (0,0).\n Most applications do not call this method directly."}, {"method_name": "getLayoutDimensions", "method_sig": "public int[][] getLayoutDimensions()", "description": "Determines column widths and row heights for the layout grid.\n \n Most applications do not call this method directly."}, {"method_name": "getLayoutWeights", "method_sig": "public double[][] getLayoutWeights()", "description": "Determines the weights of the layout grid's columns and rows.\n Weights are used to calculate how much a given column or row\n stretches beyond its preferred size, if the layout has extra\n room to fill.\n \n Most applications do not call this method directly."}, {"method_name": "location", "method_sig": "public Point location (int x,\n                      int y)", "description": "Determines which cell in the layout grid contains the point\n specified by (x,\u00a0y). Each cell is identified\n by its column index (ranging from 0 to the number of columns\n minus 1) and its row index (ranging from 0 to the number of\n rows minus 1).\n \n If the (x,\u00a0y) point lies\n outside the grid, the following rules are used.\n The column index is returned as zero if x lies to the\n left of the layout for a left-to-right container or to the right of\n the layout for a right-to-left container.  The column index is returned\n as the number of columns if x lies\n to the right of the layout in a left-to-right container or to the left\n in a right-to-left container.\n The row index is returned as zero if y lies above the\n layout, and as the number of rows if y lies\n below the layout.  The orientation of a container is determined by its\n ComponentOrientation property."}, {"method_name": "addLayoutComponent", "method_sig": "public void addLayoutComponent (String name,\n                               Component comp)", "description": "Has no effect, since this layout manager does not use a per-component string."}, {"method_name": "addLayoutComponent", "method_sig": "public void addLayoutComponent (Component comp,\n                               Object constraints)", "description": "Adds the specified component to the layout, using the specified\n constraints object.  Note that constraints\n are mutable and are, therefore, cloned when cached."}, {"method_name": "removeLayoutComponent", "method_sig": "public void removeLayoutComponent (Component comp)", "description": "Removes the specified component from this layout.\n \n Most applications do not call this method directly."}, {"method_name": "preferredLayoutSize", "method_sig": "public Dimension preferredLayoutSize (Container parent)", "description": "Determines the preferred size of the parent\n container using this grid bag layout.\n \n Most applications do not call this method directly."}, {"method_name": "minimumLayoutSize", "method_sig": "public Dimension minimumLayoutSize (Container parent)", "description": "Determines the minimum size of the parent container\n using this grid bag layout.\n \n Most applications do not call this method directly."}, {"method_name": "maximumLayoutSize", "method_sig": "public Dimension maximumLayoutSize (Container target)", "description": "Returns the maximum dimensions for this layout given the components\n in the specified target container."}, {"method_name": "getLayoutAlignmentX", "method_sig": "public float getLayoutAlignmentX (Container parent)", "description": "Returns the alignment along the x axis.  This specifies how\n the component would like to be aligned relative to other\n components.  The value should be a number between 0 and 1\n where 0 represents alignment along the origin, 1 is aligned\n the furthest away from the origin, 0.5 is centered, etc."}, {"method_name": "getLayoutAlignmentY", "method_sig": "public float getLayoutAlignmentY (Container parent)", "description": "Returns the alignment along the y axis.  This specifies how\n the component would like to be aligned relative to other\n components.  The value should be a number between 0 and 1\n where 0 represents alignment along the origin, 1 is aligned\n the furthest away from the origin, 0.5 is centered, etc."}, {"method_name": "invalidateLayout", "method_sig": "public void invalidateLayout (Container target)", "description": "Invalidates the layout, indicating that if the layout manager\n has cached information it should be discarded."}, {"method_name": "layoutContainer", "method_sig": "public void layoutContainer (Container parent)", "description": "Lays out the specified container using this grid bag layout.\n This method reshapes components in the specified container in\n order to satisfy the constraints of this GridBagLayout\n object.\n \n Most applications do not call this method directly."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a string representation of this grid bag layout's values."}, {"method_name": "getLayoutInfo", "method_sig": "protected GridBagLayoutInfo getLayoutInfo (Container parent,\n                                          int sizeflag)", "description": "Fills in an instance of GridBagLayoutInfo for the\n current set of managed children. This requires three passes through the\n set of children:\n\n \nFigure out the dimensions of the layout grid.\n Determine which cells the components occupy.\n Distribute the weights and min sizes among the rows/columns.\n \n\n This also caches the minsizes for all the children when they are\n first encountered (so subsequent loops don't need to ask again).\n \n This method should only be used internally by\n GridBagLayout."}, {"method_name": "GetLayoutInfo", "method_sig": "protected GridBagLayoutInfo GetLayoutInfo (Container parent,\n                                          int sizeflag)", "description": "This method is obsolete and supplied for backwards\n compatibility only; new code should call getLayoutInfo instead.\n\n Fills in an instance of GridBagLayoutInfo for the\n current set of managed children. This method is the same\n as getLayoutInfo; refer to getLayoutInfo\n description for details."}, {"method_name": "adjustForGravity", "method_sig": "protected void adjustForGravity (GridBagConstraints constraints,\n                                Rectangle r)", "description": "Adjusts the x, y, width, and height fields to the correct\n values depending on the constraint geometry and pads.\n This method should only be used internally by\n GridBagLayout."}, {"method_name": "AdjustForGravity", "method_sig": "protected void AdjustForGravity (GridBagConstraints constraints,\n                                Rectangle r)", "description": "Adjusts the x, y, width, and height fields to the correct\n values depending on the constraint geometry and pads.\n \n This method is obsolete and supplied for backwards\n compatibility only; new code should call adjustForGravity instead.\n This method is the same as adjustForGravity"}, {"method_name": "getMinSize", "method_sig": "protected Dimension getMinSize (Container parent,\n                               GridBagLayoutInfo info)", "description": "Figures out the minimum size of the\n master based on the information from getLayoutInfo.\n This method should only be used internally by\n GridBagLayout."}, {"method_name": "GetMinSize", "method_sig": "protected Dimension GetMinSize (Container parent,\n                               GridBagLayoutInfo info)", "description": "This method is obsolete and supplied for backwards\n compatibility only; new code should call getMinSize instead.\n This method is the same as getMinSize"}, {"method_name": "arrangeGrid", "method_sig": "protected void arrangeGrid (Container parent)", "description": "Lays out the grid.\n This method should only be used internally by\n GridBagLayout."}, {"method_name": "ArrangeGrid", "method_sig": "protected void ArrangeGrid (Container parent)", "description": "This method is obsolete and supplied for backwards\n compatibility only; new code should call arrangeGrid instead.\n This method is the same as arrangeGrid"}]}