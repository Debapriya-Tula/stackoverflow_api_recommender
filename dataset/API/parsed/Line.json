{"name": "Interface Line", "module": "java.desktop", "package": "javax.sound.sampled", "text": "The Line interface represents a mono or multi-channel audio feed. A\n line is an element of the digital audio \"pipeline,\" such as a mixer, an input\n or output port, or a data path into or out of a mixer.\n \n A line can have controls, such as gain, pan, and reverb. The controls\n themselves are instances of classes that extend the base Control\n class. The Line interface provides two accessor methods for obtaining\n the line's controls: getControls returns the entire set,\n and getControl returns a single control of specified\n type.\n \n Lines exist in various states at different times. When a line opens, it\n reserves system resources for itself, and when it closes, these resources are\n freed for other objects or applications. The isOpen() method lets\n you discover whether a line is open or closed. An open line need not be\n processing data, however. Such processing is typically initiated by\n subinterface methods such as\n SourceDataLine.write and\n TargetDataLine.read.\n \n You can register an object to receive notifications whenever the line's state\n changes. The object must implement the LineListener interface, which\n consists of the single method update. This method\n will be invoked when a line opens and closes (and, if it's a DataLine\n , when it starts and stops).\n \n An object can be registered to listen to multiple lines. The event it\n receives in its update method will specify which line created the\n event, what type of event it was (OPEN, CLOSE, START,\n or STOP), and how many sample frames the line had processed at the\n time the event occurred.\n \n Certain line operations, such as open and close, can generate security\n exceptions if invoked by unprivileged code when the line is a shared audio\n resource.", "codes": ["public interface Line\nextends AutoCloseable"], "fields": [], "methods": [{"method_name": "getLineInfo", "method_sig": "Line.Info getLineInfo()", "description": "Obtains the Line.Info object describing this line."}, {"method_name": "open", "method_sig": "void open()\n   throws LineUnavailableException", "description": "Opens the line, indicating that it should acquire any required system\n resources and become operational. If this operation succeeds, the line is\n marked as open, and an OPEN event is dispatched to the line's\n listeners.\n \n Note that some lines, once closed, cannot be reopened. Attempts to reopen\n such a line will always result in an LineUnavailableException.\n \n Some types of lines have configurable properties that may affect resource\n allocation. For example, a DataLine must be opened with a\n particular format and buffer size. Such lines should provide a mechanism\n for configuring these properties, such as an additional open\n method or methods which allow an application to specify the desired\n settings.\n \n This method takes no arguments, and opens the line with the current\n settings. For SourceDataLine and TargetDataLine objects,\n this means that the line is opened with default settings. For a\n Clip, however, the buffer size is determined when data is loaded.\n Since this method does not allow the application to specify any data to\n load, an IllegalArgumentException is thrown. Therefore, you\n should instead use one of the open methods provided in the\n Clip interface to load data into the Clip.\n \n For DataLine's, if the DataLine.Info object which was\n used to retrieve the line, specifies at least one fully qualified audio\n format, the last one will be used as the default format."}, {"method_name": "close", "method_sig": "void close()", "description": "Closes the line, indicating that any system resources in use by the line\n can be released. If this operation succeeds, the line is marked closed\n and a CLOSE event is dispatched to the line's listeners."}, {"method_name": "isOpen", "method_sig": "boolean isOpen()", "description": "Indicates whether the line is open, meaning that it has reserved system\n resources and is operational, although it might not currently be playing\n or capturing sound."}, {"method_name": "getControls", "method_sig": "Control[] getControls()", "description": "Obtains the set of controls associated with this line. Some controls may\n only be available when the line is open. If there are no controls, this\n method returns an array of length 0."}, {"method_name": "isControlSupported", "method_sig": "boolean isControlSupported (Control.Type control)", "description": "Indicates whether the line supports a control of the specified type. Some\n controls may only be available when the line is open."}, {"method_name": "getControl", "method_sig": "Control getControl (Control.Type control)", "description": "Obtains a control of the specified type, if there is any. Some controls\n may only be available when the line is open."}, {"method_name": "addLineListener", "method_sig": "void addLineListener (LineListener listener)", "description": "Adds a listener to this line. Whenever the line's status changes, the\n listener's update() method is called with a LineEvent\n object that describes the change."}, {"method_name": "removeLineListener", "method_sig": "void removeLineListener (LineListener listener)", "description": "Removes the specified listener from this line's list of listeners."}]}