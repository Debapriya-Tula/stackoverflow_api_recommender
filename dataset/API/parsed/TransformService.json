{"name": "Class TransformService", "module": "java.xml.crypto", "package": "javax.xml.crypto.dsig", "text": "A Service Provider Interface for transform and canonicalization algorithms.\n\n Each instance of TransformService supports a specific\n transform or canonicalization algorithm and XML mechanism type. To create a\n TransformService, call one of the static\n getInstance methods, passing in the algorithm URI and\n XML mechanism type desired, for example:\n\n \n TransformService ts = TransformService.getInstance(Transform.XPATH2, \"DOM\");\n \nTransformService implementations are registered and loaded\n using the Provider mechanism.  Each\n TransformService service provider implementation should include\n a MechanismType service attribute that identifies the XML\n mechanism type that it supports. If the attribute is not specified,\n \"DOM\" is assumed. For example, a service provider that supports the\n XPath Filter 2 Transform and DOM mechanism would be specified in the\n Provider subclass as:\n \n     put(\"TransformService.\" + Transform.XPATH2,\n         \"org.example.XPath2TransformService\");\n     put(\"TransformService.\" + Transform.XPATH2 + \" MechanismType\", \"DOM\");\n \nTransformService implementations that support the DOM\n mechanism type must abide by the DOM interoperability requirements defined\n in the\n DOM Mechanism Requirements section\n of the API overview. See the\n Service Providers section of\n the API overview for a list of standard mechanism types.\n \n Once a TransformService has been created, it can be used\n to process Transform or CanonicalizationMethod\n objects. If the Transform or CanonicalizationMethod\n exists in XML form (for example, when validating an existing\n XMLSignature), the init(XMLStructure, XMLCryptoContext)\n method must be first called to initialize the transform and provide document\n context (even if there are no parameters). Alternatively, if the\n Transform or CanonicalizationMethod is being\n created from scratch, the init(TransformParameterSpec) method\n is called to initialize the transform with parameters and the\n marshalParams method is called to marshal the\n parameters to XML and provide the transform with document context. Finally,\n the transform method is called to perform the\n transformation.\n \nConcurrent Access\nThe static methods of this class are guaranteed to be thread-safe.\n Multiple threads may concurrently invoke the static methods defined in this\n class with no ill effects.\n\n However, this is not true for the non-static methods defined by this\n class. Unless otherwise documented by a specific provider, threads that\n need to access a single TransformService instance\n concurrently should synchronize amongst themselves and provide the\n necessary locking. Multiple threads each manipulating a different\n TransformService instance need not synchronize.", "codes": ["public abstract class TransformService\nextends Object\nimplements Transform"], "fields": [], "methods": [{"method_name": "getInstance", "method_sig": "public static TransformService getInstance (String algorithm,\n                                           String mechanismType)\n                                    throws NoSuchAlgorithmException", "description": "Returns a TransformService that supports the specified\n algorithm URI (ex: Transform.XPATH2) and mechanism type\n (ex: DOM).\n\n This method uses the standard JCA provider lookup mechanism to\n locate and instantiate a TransformService implementation\n of the desired algorithm and MechanismType service\n attribute. It traverses the list of registered security\n Providers, starting with the most preferred\n Provider. A new TransformService object\n from the first Provider that supports the specified\n algorithm and mechanism type is returned.\n\n  Note that the list of registered providers may be retrieved via\n the Security.getProviders() method."}, {"method_name": "getInstance", "method_sig": "public static TransformService getInstance (String algorithm,\n                                           String mechanismType,\n                                           Provider provider)\n                                    throws NoSuchAlgorithmException", "description": "Returns a TransformService that supports the specified\n algorithm URI (ex: Transform.XPATH2) and mechanism type\n (ex: DOM) as supplied by the specified provider. Note that the specified\n Provider object does not have to be registered in the\n provider list."}, {"method_name": "getInstance", "method_sig": "public static TransformService getInstance (String algorithm,\n                                           String mechanismType,\n                                           String provider)\n                                    throws NoSuchAlgorithmException,\n                                           NoSuchProviderException", "description": "Returns a TransformService that supports the specified\n algorithm URI (ex: Transform.XPATH2) and mechanism type\n (ex: DOM) as supplied by the specified provider. The specified provider\n must be registered in the security provider list.\n\n Note that the list of registered providers may be retrieved via\n the Security.getProviders() method."}, {"method_name": "getMechanismType", "method_sig": "public final String getMechanismType()", "description": "Returns the mechanism type supported by this TransformService."}, {"method_name": "getAlgorithm", "method_sig": "public final String getAlgorithm()", "description": "Returns the URI of the algorithm supported by this\n TransformService."}, {"method_name": "getProvider", "method_sig": "public final Provider getProvider()", "description": "Returns the provider of this TransformService."}, {"method_name": "init", "method_sig": "public abstract void init (TransformParameterSpec params)\n                   throws InvalidAlgorithmParameterException", "description": "Initializes this TransformService with the specified\n parameters.\n\n If the parameters exist in XML form, the\n init(XMLStructure, XMLCryptoContext) method should be used to\n initialize the TransformService."}, {"method_name": "marshalParams", "method_sig": "public abstract void marshalParams (XMLStructure parent,\n                                   XMLCryptoContext context)\n                            throws MarshalException", "description": "Marshals the algorithm-specific parameters. If there are no parameters\n to be marshalled, this method returns without throwing an exception."}, {"method_name": "init", "method_sig": "public abstract void init (XMLStructure parent,\n                          XMLCryptoContext context)\n                   throws InvalidAlgorithmParameterException", "description": "Initializes this TransformService with the specified\n parameters and document context."}]}