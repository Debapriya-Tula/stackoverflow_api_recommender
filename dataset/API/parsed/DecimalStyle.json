{"name": "Class DecimalStyle", "module": "java.base", "package": "java.time.format", "text": "Localized decimal style used in date and time formatting.\n \n A significant part of dealing with dates and times is the localization.\n This class acts as a central point for accessing the information.", "codes": ["public final class DecimalStyle\nextends Object"], "fields": [{"field_name": "STANDARD", "field_sig": "public static final\u00a0DecimalStyle STANDARD", "description": "The standard set of non-localized decimal style symbols.\n \n This uses standard ASCII characters for zero, positive, negative and a dot for the decimal point."}], "methods": [{"method_name": "getAvailableLocales", "method_sig": "public static Set<Locale> getAvailableLocales()", "description": "Lists all the locales that are supported.\n \n The locale 'en_US' will always be present."}, {"method_name": "ofDefaultLocale", "method_sig": "public static DecimalStyle ofDefaultLocale()", "description": "Obtains the DecimalStyle for the default\n FORMAT locale.\n \n This method provides access to locale sensitive decimal style symbols.\n \n This is equivalent to calling\n of(Locale.getDefault(Locale.Category.FORMAT))."}, {"method_name": "of", "method_sig": "public static DecimalStyle of (Locale locale)", "description": "Obtains the DecimalStyle for the specified locale.\n \n This method provides access to locale sensitive decimal style symbols.\n If the locale contains \"nu\" (Numbering System) and/or \"rg\"\n (Region Override) \n Unicode extensions, returned instance will reflect the values specified with\n those extensions. If both \"nu\" and \"rg\" are specified, the value from\n the \"nu\" extension supersedes the implicit one from the \"rg\" extension."}, {"method_name": "getZeroDigit", "method_sig": "public char getZeroDigit()", "description": "Gets the character that represents zero.\n \n The character used to represent digits may vary by culture.\n This method specifies the zero character to use, which implies the characters for one to nine."}, {"method_name": "withZeroDigit", "method_sig": "public DecimalStyle withZeroDigit (char zeroDigit)", "description": "Returns a copy of the info with a new character that represents zero.\n \n The character used to represent digits may vary by culture.\n This method specifies the zero character to use, which implies the characters for one to nine."}, {"method_name": "getPositiveSign", "method_sig": "public char getPositiveSign()", "description": "Gets the character that represents the positive sign.\n \n The character used to represent a positive number may vary by culture.\n This method specifies the character to use."}, {"method_name": "withPositiveSign", "method_sig": "public DecimalStyle withPositiveSign (char positiveSign)", "description": "Returns a copy of the info with a new character that represents the positive sign.\n \n The character used to represent a positive number may vary by culture.\n This method specifies the character to use."}, {"method_name": "getNegativeSign", "method_sig": "public char getNegativeSign()", "description": "Gets the character that represents the negative sign.\n \n The character used to represent a negative number may vary by culture.\n This method specifies the character to use."}, {"method_name": "withNegativeSign", "method_sig": "public DecimalStyle withNegativeSign (char negativeSign)", "description": "Returns a copy of the info with a new character that represents the negative sign.\n \n The character used to represent a negative number may vary by culture.\n This method specifies the character to use."}, {"method_name": "getDecimalSeparator", "method_sig": "public char getDecimalSeparator()", "description": "Gets the character that represents the decimal point.\n \n The character used to represent a decimal point may vary by culture.\n This method specifies the character to use."}, {"method_name": "withDecimalSeparator", "method_sig": "public DecimalStyle withDecimalSeparator (char decimalSeparator)", "description": "Returns a copy of the info with a new character that represents the decimal point.\n \n The character used to represent a decimal point may vary by culture.\n This method specifies the character to use."}, {"method_name": "equals", "method_sig": "public boolean equals (Object obj)", "description": "Checks if this DecimalStyle is equal to another DecimalStyle."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "A hash code for this DecimalStyle."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a string describing this DecimalStyle."}]}