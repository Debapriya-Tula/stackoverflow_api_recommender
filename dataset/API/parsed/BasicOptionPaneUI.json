{"name": "Class BasicOptionPaneUI", "module": "java.desktop", "package": "javax.swing.plaf.basic", "text": "Provides the basic look and feel for a JOptionPane.\n BasicMessagePaneUI provides a means to place an icon,\n message and buttons into a Container.\n Generally, the layout will look like:\n \n        ------------------\n        | i | message    |\n        | c | message    |\n        | o | message    |\n        | n | message    |\n        ------------------\n        |     buttons    |\n        |________________|\n \n icon is an instance of Icon that is wrapped inside a\n JLabel.  The message is an opaque object and is tested\n for the following: if the message is a Component it is\n added to the Container, if it is an Icon\n it is wrapped inside a JLabel and added to the\n Container otherwise it is wrapped inside a JLabel.\n \n The above layout is used when the option pane's\n ComponentOrientation property is horizontal, left-to-right.\n The layout will be adjusted appropriately for other orientations.\n \n The Container, message, icon, and buttons are all\n determined from abstract methods.", "codes": ["public class BasicOptionPaneUI\nextends OptionPaneUI"], "fields": [{"field_name": "MinimumWidth", "field_sig": "public static final\u00a0int MinimumWidth", "description": "The mininum width of JOptionPane."}, {"field_name": "MinimumHeight", "field_sig": "public static final\u00a0int MinimumHeight", "description": "The mininum height of JOptionPane."}, {"field_name": "optionPane", "field_sig": "protected\u00a0JOptionPane optionPane", "description": "JOptionPane that the receiver is providing the\n look and feel for."}, {"field_name": "minimumSize", "field_sig": "protected\u00a0Dimension minimumSize", "description": "The size of JOptionPane."}, {"field_name": "inputComponent", "field_sig": "protected\u00a0JComponent inputComponent", "description": "JComponent provide for input if optionPane.getWantsInput() returns\n true."}, {"field_name": "initialFocusComponent", "field_sig": "protected\u00a0Component initialFocusComponent", "description": "Component to receive focus when messaged with selectInitialValue."}, {"field_name": "hasCustomComponents", "field_sig": "protected\u00a0boolean hasCustomComponents", "description": "This is set to true in validateComponent if a Component is contained\n in either the message or the buttons."}, {"field_name": "propertyChangeListener", "field_sig": "protected\u00a0PropertyChangeListener propertyChangeListener", "description": "The instance of PropertyChangeListener."}], "methods": [{"method_name": "createUI", "method_sig": "public static ComponentUI createUI (JComponent x)", "description": "Creates a new BasicOptionPaneUI instance."}, {"method_name": "installUI", "method_sig": "public void installUI (JComponent c)", "description": "Installs the receiver as the L&F for the passed in\n JOptionPane."}, {"method_name": "uninstallUI", "method_sig": "public void uninstallUI (JComponent c)", "description": "Removes the receiver from the L&F controller of the passed in split\n pane."}, {"method_name": "installDefaults", "method_sig": "protected void installDefaults()", "description": "Installs default properties."}, {"method_name": "uninstallDefaults", "method_sig": "protected void uninstallDefaults()", "description": "Uninstalls default properties."}, {"method_name": "installComponents", "method_sig": "protected void installComponents()", "description": "Registers components."}, {"method_name": "uninstallComponents", "method_sig": "protected void uninstallComponents()", "description": "Unregisters components."}, {"method_name": "createLayoutManager", "method_sig": "protected LayoutManager createLayoutManager()", "description": "Returns a layout manager."}, {"method_name": "installListeners", "method_sig": "protected void installListeners()", "description": "Registers listeners."}, {"method_name": "uninstallListeners", "method_sig": "protected void uninstallListeners()", "description": "Unregisters listeners."}, {"method_name": "createPropertyChangeListener", "method_sig": "protected PropertyChangeListener createPropertyChangeListener()", "description": "Returns an instance of PropertyChangeListener."}, {"method_name": "installKeyboardActions", "method_sig": "protected void installKeyboardActions()", "description": "Registers keyboard actions."}, {"method_name": "uninstallKeyboardActions", "method_sig": "protected void uninstallKeyboardActions()", "description": "Unregisters keyboard actions."}, {"method_name": "getMinimumOptionPaneSize", "method_sig": "public Dimension getMinimumOptionPaneSize()", "description": "Returns the minimum size the option pane should be. Primarily\n provided for subclassers wishing to offer a different minimum size."}, {"method_name": "getPreferredSize", "method_sig": "public Dimension getPreferredSize (JComponent c)", "description": "If c is the JOptionPane the receiver\n is contained in, the preferred\n size that is returned is the maximum of the preferred size of\n the LayoutManager for the JOptionPane, and\n getMinimumOptionPaneSize."}, {"method_name": "createMessageArea", "method_sig": "protected Container createMessageArea()", "description": "Messaged from installComponents to create a Container\n containing the body of the message. The icon is the created\n by calling addIcon."}, {"method_name": "addMessageComponents", "method_sig": "protected void addMessageComponents (Container container,\n                                    GridBagConstraints cons,\n                                    Object msg,\n                                    int maxll,\n                                    boolean internallyCreated)", "description": "Creates the appropriate object to represent msg and places it\n into container. If msg is an instance of\n Component, it is added directly; if it is an Icon, a\n JLabel is created to represent it; otherwise, a JLabel\n is created for the string. If msg is an Object[], this method\n will be recursively invoked for the children. internallyCreated\n is true if msg is an instance of Component and\n was created internally by this method (this is used to correctly set\n hasCustomComponents only if internallyCreated is\n false)."}, {"method_name": "getMessage", "method_sig": "protected Object getMessage()", "description": "Returns the message to display from the JOptionPane the receiver is\n providing the look and feel for."}, {"method_name": "addIcon", "method_sig": "protected void addIcon (Container top)", "description": "Creates and adds a JLabel representing the icon returned from\n getIcon to top. This is messaged from\n createMessageArea."}, {"method_name": "getIcon", "method_sig": "protected Icon getIcon()", "description": "Returns the icon from the JOptionPane the receiver is providing\n the look and feel for, or the default icon as returned from\n getDefaultIcon."}, {"method_name": "getIconForType", "method_sig": "protected Icon getIconForType (int messageType)", "description": "Returns the icon to use for the passed in type."}, {"method_name": "getMaxCharactersPerLineCount", "method_sig": "protected int getMaxCharactersPerLineCount()", "description": "Returns the maximum number of characters to place on a line."}, {"method_name": "burstStringInto", "method_sig": "protected void burstStringInto (Container c,\n                               String d,\n                               int maxll)", "description": "Recursively creates new JLabel instances to represent d.\n Each JLabel instance is added to c."}, {"method_name": "createSeparator", "method_sig": "protected Container createSeparator()", "description": "Returns a separator."}, {"method_name": "createButtonArea", "method_sig": "protected Container createButtonArea()", "description": "Creates and returns a Container containing the buttons.\n The buttons are created by calling getButtons."}, {"method_name": "addButtonComponents", "method_sig": "protected void addButtonComponents (Container container,\n                                   Object[] buttons,\n                                   int initialIndex)", "description": "Creates the appropriate object to represent each of the objects in\n buttons and adds it to container. This\n differs from addMessageComponents in that it will recurse on\n buttons and that if button is not a Component\n it will create an instance of JButton."}, {"method_name": "createButtonActionListener", "method_sig": "protected ActionListener createButtonActionListener (int buttonIndex)", "description": "Constructs a new instance of a ButtonActionListener."}, {"method_name": "getButtons", "method_sig": "protected Object[] getButtons()", "description": "Returns the buttons to display from the JOptionPane the receiver is\n providing the look and feel for. If the JOptionPane has options\n set, they will be provided, otherwise if the optionType is\n YES_NO_OPTION, yesNoOptions is returned, if the type is\n YES_NO_CANCEL_OPTION yesNoCancelOptions is returned, otherwise\n defaultButtons are returned."}, {"method_name": "getSizeButtonsToSameWidth", "method_sig": "protected boolean getSizeButtonsToSameWidth()", "description": "Returns true, basic L&F wants all the buttons to have the same\n width."}, {"method_name": "getInitialValueIndex", "method_sig": "protected int getInitialValueIndex()", "description": "Returns the initial index into the buttons to select. The index\n is calculated from the initial value from the JOptionPane and\n options of the JOptionPane or 0."}, {"method_name": "resetInputValue", "method_sig": "protected void resetInputValue()", "description": "Sets the input value in the option pane the receiver is providing\n the look and feel for based on the value in the inputComponent."}, {"method_name": "selectInitialValue", "method_sig": "public void selectInitialValue (JOptionPane op)", "description": "If inputComponent is non-null, the focus is requested on that,\n otherwise request focus on the default value"}, {"method_name": "containsCustomComponents", "method_sig": "public boolean containsCustomComponents (JOptionPane op)", "description": "Returns true if in the last call to validateComponent the message\n or buttons contained a subclass of Component."}]}