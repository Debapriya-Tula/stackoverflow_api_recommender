{"name": "Class DoubleSummaryStatistics", "module": "java.base", "package": "java.util", "text": "A state object for collecting statistics such as count, min, max, sum, and\n average.\n\n This class is designed to work with (though does not require)\n streams. For example, you can compute\n summary statistics on a stream of doubles with:\n  \n DoubleSummaryStatistics stats = doubleStream.collect(DoubleSummaryStatistics::new,\n                                                      DoubleSummaryStatistics::accept,\n                                                      DoubleSummaryStatistics::combine);\n \nDoubleSummaryStatistics can be used as a\n reduction\n target for a stream. For example:\n\n  \n DoubleSummaryStatistics stats = people.stream()\n     .collect(Collectors.summarizingDouble(Person::getWeight));\n\n\n This computes, in a single pass, the count of people, as well as the minimum,\n maximum, sum, and average of their weights.", "codes": ["public class DoubleSummaryStatistics\nextends Object\nimplements DoubleConsumer"], "fields": [], "methods": [{"method_name": "accept", "method_sig": "public void accept (double value)", "description": "Records another value into the summary information."}, {"method_name": "combine", "method_sig": "public void combine (DoubleSummaryStatistics other)", "description": "Combines the state of another DoubleSummaryStatistics into this\n one."}, {"method_name": "getCount", "method_sig": "public final long getCount()", "description": "Return the count of values recorded."}, {"method_name": "getSum", "method_sig": "public final double getSum()", "description": "Returns the sum of values recorded, or zero if no values have been\n recorded.\n\n  The value of a floating-point sum is a function both of the\n input values as well as the order of addition operations. The\n order of addition operations of this method is intentionally\n not defined to allow for implementation flexibility to improve\n the speed and accuracy of the computed result.\n\n In particular, this method may be implemented using compensated\n summation or other technique to reduce the error bound in the\n numerical sum compared to a simple summation of double\n values.\n\n Because of the unspecified order of operations and the\n possibility of using differing summation schemes, the output of\n this method may vary on the same input values.\n\n Various conditions can result in a non-finite sum being\n computed. This can occur even if the all the recorded values\n being summed are finite. If any recorded value is non-finite,\n the sum will be non-finite:\n\n \nIf any recorded value is a NaN, then the final sum will be\n NaN.\n\n If the recorded values contain one or more infinities, the\n sum will be infinite or NaN.\n\n \nIf the recorded values contain infinities of opposite sign,\n the sum will be NaN.\n\n If the recorded values contain infinities of one sign and\n an intermediate sum overflows to an infinity of the opposite\n sign, the sum may be NaN.\n\n \n\n\n It is possible for intermediate sums of finite values to\n overflow into opposite-signed infinities; if that occurs, the\n final sum will be NaN even if the recorded values are all\n finite.\n\n If all the recorded values are zero, the sign of zero is\n not guaranteed to be preserved in the final sum."}, {"method_name": "getMin", "method_sig": "public final double getMin()", "description": "Returns the minimum recorded value, Double.NaN if any recorded\n value was NaN or Double.POSITIVE_INFINITY if no values were\n recorded. Unlike the numerical comparison operators, this method\n considers negative zero to be strictly smaller than positive zero."}, {"method_name": "getMax", "method_sig": "public final double getMax()", "description": "Returns the maximum recorded value, Double.NaN if any recorded\n value was NaN or Double.NEGATIVE_INFINITY if no values were\n recorded. Unlike the numerical comparison operators, this method\n considers negative zero to be strictly smaller than positive zero."}, {"method_name": "getAverage", "method_sig": "public final double getAverage()", "description": "Returns the arithmetic mean of values recorded, or zero if no\n values have been recorded.\n\n  The computed average can vary numerically and have the\n special case behavior as computing the sum; see getSum()\n for details."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a non-empty string representation of this object suitable for\n debugging. The exact presentation format is unspecified and may vary\n between implementations and versions."}]}