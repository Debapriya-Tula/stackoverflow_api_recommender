{"name": "Class Character", "module": "java.base", "package": "java.lang", "text": "The Character class wraps a value of the primitive\n type char in an object. An object of class\n Character contains a single field whose type is\n char.\n \n In addition, this class provides a large number of static methods for\n determining a character's category (lowercase letter, digit, etc.)\n and for converting characters from uppercase to lowercase and vice\n versa.\n\n Unicode Conformance\n\n The fields and methods of class Character are defined in terms\n of character information from the Unicode Standard, specifically the\n UnicodeData file that is part of the Unicode Character Database.\n This file specifies properties including name and category for every\n assigned Unicode code point or character range. The file is available\n from the Unicode Consortium at\n http://www.unicode.org.\n \n The Java SE 11 Platform uses character information from version 10.0\n of the Unicode Standard, with an extension. The Java SE 11 Platform allows\n an implementation of class Character to use the Japanese Era\n code point, U+32FF, from the first version of the Unicode Standard\n after 10.0 that assigns the code point. Consequently, the behavior of\n fields and methods of class Character may vary across\n implementations of the Java SE 11 Platform when processing the\n aforementioned code point ( outside of version 10.0 ), except for\n the following methods that define Java identifiers:\n isJavaIdentifierStart(int), isJavaIdentifierStart(char),\n isJavaIdentifierPart(int), and isJavaIdentifierPart(char).\n Code points in Java identifiers must be drawn from version 10.0 of\n the Unicode Standard.\n\n Unicode Character Representations\nThe char data type (and therefore the value that a\n Character object encapsulates) are based on the\n original Unicode specification, which defined characters as\n fixed-width 16-bit entities. The Unicode Standard has since been\n changed to allow for characters whose representation requires more\n than 16 bits.  The range of legal code points is now\n U+0000 to U+10FFFF, known as Unicode scalar value.\n (Refer to the \n definition of the U+n notation in the Unicode\n Standard.)\n\n The set of characters from U+0000 to U+FFFF is\n sometimes referred to as the Basic Multilingual Plane (BMP).\n Characters whose code points are greater\n than U+FFFF are called supplementary characters.  The Java\n platform uses the UTF-16 representation in char arrays and\n in the String and StringBuffer classes. In\n this representation, supplementary characters are represented as a pair\n of char values, the first from the high-surrogates\n range, (\\uD800-\\uDBFF), the second from the\n low-surrogates range (\\uDC00-\\uDFFF).\n\n A char value, therefore, represents Basic\n Multilingual Plane (BMP) code points, including the surrogate\n code points, or code units of the UTF-16 encoding. An\n int value represents all Unicode code points,\n including supplementary code points. The lower (least significant)\n 21 bits of int are used to represent Unicode code\n points and the upper (most significant) 11 bits must be zero.\n Unless otherwise specified, the behavior with respect to\n supplementary characters and surrogate char values is\n as follows:\n\n \nThe methods that only accept a char value cannot support\n supplementary characters. They treat char values from the\n surrogate ranges as undefined characters. For example,\n Character.isLetter('\\uD840') returns false, even though\n this specific value if followed by any low-surrogate value in a string\n would represent a letter.\n\n The methods that accept an int value support all\n Unicode characters, including supplementary characters. For\n example, Character.isLetter(0x2F81A) returns\n true because the code point value represents a letter\n (a CJK ideograph).\n \nIn the Java SE API documentation, Unicode code point is\n used for character values in the range between U+0000 and U+10FFFF,\n and Unicode code unit is used for 16-bit\n char values that are code units of the UTF-16\n encoding. For more information on Unicode terminology, refer to the\n Unicode Glossary.", "codes": ["public final class Character\nextends Object\nimplements Serializable, Comparable<Character>"], "fields": [{"field_name": "MIN_RADIX", "field_sig": "public static final\u00a0int MIN_RADIX", "description": "The minimum radix available for conversion to and from strings.\n The constant value of this field is the smallest value permitted\n for the radix argument in radix-conversion methods such as the\n digit method, the forDigit method, and the\n toString method of class Integer."}, {"field_name": "MAX_RADIX", "field_sig": "public static final\u00a0int MAX_RADIX", "description": "The maximum radix available for conversion to and from strings.\n The constant value of this field is the largest value permitted\n for the radix argument in radix-conversion methods such as the\n digit method, the forDigit method, and the\n toString method of class Integer."}, {"field_name": "MIN_VALUE", "field_sig": "public static final\u00a0char MIN_VALUE", "description": "The constant value of this field is the smallest value of type\n char, '\\u0000'."}, {"field_name": "MAX_VALUE", "field_sig": "public static final\u00a0char MAX_VALUE", "description": "The constant value of this field is the largest value of type\n char, '\\uFFFF'."}, {"field_name": "TYPE", "field_sig": "public static final\u00a0Class<Character> TYPE", "description": "The Class instance representing the primitive type\n char."}, {"field_name": "UNASSIGNED", "field_sig": "public static final\u00a0byte UNASSIGNED", "description": "General category \"Cn\" in the Unicode specification."}, {"field_name": "UPPERCASE_LETTER", "field_sig": "public static final\u00a0byte UPPERCASE_LETTER", "description": "General category \"Lu\" in the Unicode specification."}, {"field_name": "LOWERCASE_LETTER", "field_sig": "public static final\u00a0byte LOWERCASE_LETTER", "description": "General category \"Ll\" in the Unicode specification."}, {"field_name": "TITLECASE_LETTER", "field_sig": "public static final\u00a0byte TITLECASE_LETTER", "description": "General category \"Lt\" in the Unicode specification."}, {"field_name": "MODIFIER_LETTER", "field_sig": "public static final\u00a0byte MODIFIER_LETTER", "description": "General category \"Lm\" in the Unicode specification."}, {"field_name": "OTHER_LETTER", "field_sig": "public static final\u00a0byte OTHER_LETTER", "description": "General category \"Lo\" in the Unicode specification."}, {"field_name": "NON_SPACING_MARK", "field_sig": "public static final\u00a0byte NON_SPACING_MARK", "description": "General category \"Mn\" in the Unicode specification."}, {"field_name": "ENCLOSING_MARK", "field_sig": "public static final\u00a0byte ENCLOSING_MARK", "description": "General category \"Me\" in the Unicode specification."}, {"field_name": "COMBINING_SPACING_MARK", "field_sig": "public static final\u00a0byte COMBINING_SPACING_MARK", "description": "General category \"Mc\" in the Unicode specification."}, {"field_name": "DECIMAL_DIGIT_NUMBER", "field_sig": "public static final\u00a0byte DECIMAL_DIGIT_NUMBER", "description": "General category \"Nd\" in the Unicode specification."}, {"field_name": "LETTER_NUMBER", "field_sig": "public static final\u00a0byte LETTER_NUMBER", "description": "General category \"Nl\" in the Unicode specification."}, {"field_name": "OTHER_NUMBER", "field_sig": "public static final\u00a0byte OTHER_NUMBER", "description": "General category \"No\" in the Unicode specification."}, {"field_name": "SPACE_SEPARATOR", "field_sig": "public static final\u00a0byte SPACE_SEPARATOR", "description": "General category \"Zs\" in the Unicode specification."}, {"field_name": "LINE_SEPARATOR", "field_sig": "public static final\u00a0byte LINE_SEPARATOR", "description": "General category \"Zl\" in the Unicode specification."}, {"field_name": "PARAGRAPH_SEPARATOR", "field_sig": "public static final\u00a0byte PARAGRAPH_SEPARATOR", "description": "General category \"Zp\" in the Unicode specification."}, {"field_name": "CONTROL", "field_sig": "public static final\u00a0byte CONTROL", "description": "General category \"Cc\" in the Unicode specification."}, {"field_name": "FORMAT", "field_sig": "public static final\u00a0byte FORMAT", "description": "General category \"Cf\" in the Unicode specification."}, {"field_name": "PRIVATE_USE", "field_sig": "public static final\u00a0byte PRIVATE_USE", "description": "General category \"Co\" in the Unicode specification."}, {"field_name": "SURROGATE", "field_sig": "public static final\u00a0byte SURROGATE", "description": "General category \"Cs\" in the Unicode specification."}, {"field_name": "DASH_PUNCTUATION", "field_sig": "public static final\u00a0byte DASH_PUNCTUATION", "description": "General category \"Pd\" in the Unicode specification."}, {"field_name": "START_PUNCTUATION", "field_sig": "public static final\u00a0byte START_PUNCTUATION", "description": "General category \"Ps\" in the Unicode specification."}, {"field_name": "END_PUNCTUATION", "field_sig": "public static final\u00a0byte END_PUNCTUATION", "description": "General category \"Pe\" in the Unicode specification."}, {"field_name": "CONNECTOR_PUNCTUATION", "field_sig": "public static final\u00a0byte CONNECTOR_PUNCTUATION", "description": "General category \"Pc\" in the Unicode specification."}, {"field_name": "OTHER_PUNCTUATION", "field_sig": "public static final\u00a0byte OTHER_PUNCTUATION", "description": "General category \"Po\" in the Unicode specification."}, {"field_name": "MATH_SYMBOL", "field_sig": "public static final\u00a0byte MATH_SYMBOL", "description": "General category \"Sm\" in the Unicode specification."}, {"field_name": "CURRENCY_SYMBOL", "field_sig": "public static final\u00a0byte CURRENCY_SYMBOL", "description": "General category \"Sc\" in the Unicode specification."}, {"field_name": "MODIFIER_SYMBOL", "field_sig": "public static final\u00a0byte MODIFIER_SYMBOL", "description": "General category \"Sk\" in the Unicode specification."}, {"field_name": "OTHER_SYMBOL", "field_sig": "public static final\u00a0byte OTHER_SYMBOL", "description": "General category \"So\" in the Unicode specification."}, {"field_name": "INITIAL_QUOTE_PUNCTUATION", "field_sig": "public static final\u00a0byte INITIAL_QUOTE_PUNCTUATION", "description": "General category \"Pi\" in the Unicode specification."}, {"field_name": "FINAL_QUOTE_PUNCTUATION", "field_sig": "public static final\u00a0byte FINAL_QUOTE_PUNCTUATION", "description": "General category \"Pf\" in the Unicode specification."}, {"field_name": "DIRECTIONALITY_UNDEFINED", "field_sig": "public static final\u00a0byte DIRECTIONALITY_UNDEFINED", "description": "Undefined bidirectional character type. Undefined char\n values have undefined directionality in the Unicode specification."}, {"field_name": "DIRECTIONALITY_LEFT_TO_RIGHT", "field_sig": "public static final\u00a0byte DIRECTIONALITY_LEFT_TO_RIGHT", "description": "Strong bidirectional character type \"L\" in the Unicode specification."}, {"field_name": "DIRECTIONALITY_RIGHT_TO_LEFT", "field_sig": "public static final\u00a0byte DIRECTIONALITY_RIGHT_TO_LEFT", "description": "Strong bidirectional character type \"R\" in the Unicode specification."}, {"field_name": "DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC", "field_sig": "public static final\u00a0byte DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC", "description": "Strong bidirectional character type \"AL\" in the Unicode specification."}, {"field_name": "DIRECTIONALITY_EUROPEAN_NUMBER", "field_sig": "public static final\u00a0byte DIRECTIONALITY_EUROPEAN_NUMBER", "description": "Weak bidirectional character type \"EN\" in the Unicode specification."}, {"field_name": "DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR", "field_sig": "public static final\u00a0byte DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR", "description": "Weak bidirectional character type \"ES\" in the Unicode specification."}, {"field_name": "DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR", "field_sig": "public static final\u00a0byte DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR", "description": "Weak bidirectional character type \"ET\" in the Unicode specification."}, {"field_name": "DIRECTIONALITY_ARABIC_NUMBER", "field_sig": "public static final\u00a0byte DIRECTIONALITY_ARABIC_NUMBER", "description": "Weak bidirectional character type \"AN\" in the Unicode specification."}, {"field_name": "DIRECTIONALITY_COMMON_NUMBER_SEPARATOR", "field_sig": "public static final\u00a0byte DIRECTIONALITY_COMMON_NUMBER_SEPARATOR", "description": "Weak bidirectional character type \"CS\" in the Unicode specification."}, {"field_name": "DIRECTIONALITY_NONSPACING_MARK", "field_sig": "public static final\u00a0byte DIRECTIONALITY_NONSPACING_MARK", "description": "Weak bidirectional character type \"NSM\" in the Unicode specification."}, {"field_name": "DIRECTIONALITY_BOUNDARY_NEUTRAL", "field_sig": "public static final\u00a0byte DIRECTIONALITY_BOUNDARY_NEUTRAL", "description": "Weak bidirectional character type \"BN\" in the Unicode specification."}, {"field_name": "DIRECTIONALITY_PARAGRAPH_SEPARATOR", "field_sig": "public static final\u00a0byte DIRECTIONALITY_PARAGRAPH_SEPARATOR", "description": "Neutral bidirectional character type \"B\" in the Unicode specification."}, {"field_name": "DIRECTIONALITY_SEGMENT_SEPARATOR", "field_sig": "public static final\u00a0byte DIRECTIONALITY_SEGMENT_SEPARATOR", "description": "Neutral bidirectional character type \"S\" in the Unicode specification."}, {"field_name": "DIRECTIONALITY_WHITESPACE", "field_sig": "public static final\u00a0byte DIRECTIONALITY_WHITESPACE", "description": "Neutral bidirectional character type \"WS\" in the Unicode specification."}, {"field_name": "DIRECTIONALITY_OTHER_NEUTRALS", "field_sig": "public static final\u00a0byte DIRECTIONALITY_OTHER_NEUTRALS", "description": "Neutral bidirectional character type \"ON\" in the Unicode specification."}, {"field_name": "DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING", "field_sig": "public static final\u00a0byte DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING", "description": "Strong bidirectional character type \"LRE\" in the Unicode specification."}, {"field_name": "DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE", "field_sig": "public static final\u00a0byte DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE", "description": "Strong bidirectional character type \"LRO\" in the Unicode specification."}, {"field_name": "DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING", "field_sig": "public static final\u00a0byte DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING", "description": "Strong bidirectional character type \"RLE\" in the Unicode specification."}, {"field_name": "DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE", "field_sig": "public static final\u00a0byte DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE", "description": "Strong bidirectional character type \"RLO\" in the Unicode specification."}, {"field_name": "DIRECTIONALITY_POP_DIRECTIONAL_FORMAT", "field_sig": "public static final\u00a0byte DIRECTIONALITY_POP_DIRECTIONAL_FORMAT", "description": "Weak bidirectional character type \"PDF\" in the Unicode specification."}, {"field_name": "DIRECTIONALITY_LEFT_TO_RIGHT_ISOLATE", "field_sig": "public static final\u00a0byte DIRECTIONALITY_LEFT_TO_RIGHT_ISOLATE", "description": "Weak bidirectional character type \"LRI\" in the Unicode specification."}, {"field_name": "DIRECTIONALITY_RIGHT_TO_LEFT_ISOLATE", "field_sig": "public static final\u00a0byte DIRECTIONALITY_RIGHT_TO_LEFT_ISOLATE", "description": "Weak bidirectional character type \"RLI\" in the Unicode specification."}, {"field_name": "DIRECTIONALITY_FIRST_STRONG_ISOLATE", "field_sig": "public static final\u00a0byte DIRECTIONALITY_FIRST_STRONG_ISOLATE", "description": "Weak bidirectional character type \"FSI\" in the Unicode specification."}, {"field_name": "DIRECTIONALITY_POP_DIRECTIONAL_ISOLATE", "field_sig": "public static final\u00a0byte DIRECTIONALITY_POP_DIRECTIONAL_ISOLATE", "description": "Weak bidirectional character type \"PDI\" in the Unicode specification."}, {"field_name": "MIN_HIGH_SURROGATE", "field_sig": "public static final\u00a0char MIN_HIGH_SURROGATE", "description": "The minimum value of a\n \n Unicode high-surrogate code unit\n in the UTF-16 encoding, constant '\\uD800'.\n A high-surrogate is also known as a leading-surrogate."}, {"field_name": "MAX_HIGH_SURROGATE", "field_sig": "public static final\u00a0char MAX_HIGH_SURROGATE", "description": "The maximum value of a\n \n Unicode high-surrogate code unit\n in the UTF-16 encoding, constant '\\uDBFF'.\n A high-surrogate is also known as a leading-surrogate."}, {"field_name": "MIN_LOW_SURROGATE", "field_sig": "public static final\u00a0char MIN_LOW_SURROGATE", "description": "The minimum value of a\n \n Unicode low-surrogate code unit\n in the UTF-16 encoding, constant '\\uDC00'.\n A low-surrogate is also known as a trailing-surrogate."}, {"field_name": "MAX_LOW_SURROGATE", "field_sig": "public static final\u00a0char MAX_LOW_SURROGATE", "description": "The maximum value of a\n \n Unicode low-surrogate code unit\n in the UTF-16 encoding, constant '\\uDFFF'.\n A low-surrogate is also known as a trailing-surrogate."}, {"field_name": "MIN_SURROGATE", "field_sig": "public static final\u00a0char MIN_SURROGATE", "description": "The minimum value of a Unicode surrogate code unit in the\n UTF-16 encoding, constant '\\uD800'."}, {"field_name": "MAX_SURROGATE", "field_sig": "public static final\u00a0char MAX_SURROGATE", "description": "The maximum value of a Unicode surrogate code unit in the\n UTF-16 encoding, constant '\\uDFFF'."}, {"field_name": "MIN_SUPPLEMENTARY_CODE_POINT", "field_sig": "public static final\u00a0int MIN_SUPPLEMENTARY_CODE_POINT", "description": "The minimum value of a\n \n Unicode supplementary code point, constant U+10000."}, {"field_name": "MIN_CODE_POINT", "field_sig": "public static final\u00a0int MIN_CODE_POINT", "description": "The minimum value of a\n \n Unicode code point, constant U+0000."}, {"field_name": "MAX_CODE_POINT", "field_sig": "public static final\u00a0int MAX_CODE_POINT", "description": "The maximum value of a\n \n Unicode code point, constant U+10FFFF."}, {"field_name": "SIZE", "field_sig": "public static final\u00a0int SIZE", "description": "The number of bits used to represent a char value in unsigned\n binary form, constant 16."}, {"field_name": "BYTES", "field_sig": "public static final\u00a0int BYTES", "description": "The number of bytes used to represent a char value in unsigned\n binary form."}], "methods": [{"method_name": "valueOf", "method_sig": "public static Character valueOf (char c)", "description": "Returns a Character instance representing the specified\n char value.\n If a new Character instance is not required, this method\n should generally be used in preference to the constructor\n Character(char), as this method is likely to yield\n significantly better space and time performance by caching\n frequently requested values.\n\n This method will always cache values in the range \n '\\u0000' to '\\u007F', inclusive, and may\n cache other values outside of this range."}, {"method_name": "charValue", "method_sig": "public char charValue()", "description": "Returns the value of this Character object."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Returns a hash code for this Character; equal to the result\n of invoking charValue()."}, {"method_name": "hashCode", "method_sig": "public static int hashCode (char value)", "description": "Returns a hash code for a char value; compatible with\n Character.hashCode()."}, {"method_name": "equals", "method_sig": "public boolean equals (Object obj)", "description": "Compares this object against the specified object.\n The result is true if and only if the argument is not\n null and is a Character object that\n represents the same char value as this object."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a String object representing this\n Character's value.  The result is a string of\n length 1 whose sole component is the primitive\n char value represented by this\n Character object."}, {"method_name": "toString", "method_sig": "public static String toString (char c)", "description": "Returns a String object representing the\n specified char.  The result is a string of length\n 1 consisting solely of the specified char."}, {"method_name": "toString", "method_sig": "public static String toString (int codePoint)", "description": "Returns a String object representing the\n specified character (Unicode code point).  The result is a string of\n length 1 or 2, consisting solely of the specified codePoint."}, {"method_name": "isValidCodePoint", "method_sig": "public static boolean isValidCodePoint (int codePoint)", "description": "Determines whether the specified code point is a valid\n \n Unicode code point value."}, {"method_name": "isBmpCodePoint", "method_sig": "public static boolean isBmpCodePoint (int codePoint)", "description": "Determines whether the specified character (Unicode code point)\n is in the Basic Multilingual Plane (BMP).\n Such code points can be represented using a single char."}, {"method_name": "isSupplementaryCodePoint", "method_sig": "public static boolean isSupplementaryCodePoint (int codePoint)", "description": "Determines whether the specified character (Unicode code point)\n is in the supplementary character range."}, {"method_name": "isHighSurrogate", "method_sig": "public static boolean isHighSurrogate (char ch)", "description": "Determines if the given char value is a\n \n Unicode high-surrogate code unit\n (also known as leading-surrogate code unit).\n\n Such values do not represent characters by themselves,\n but are used in the representation of\n supplementary characters\n in the UTF-16 encoding."}, {"method_name": "isLowSurrogate", "method_sig": "public static boolean isLowSurrogate (char ch)", "description": "Determines if the given char value is a\n \n Unicode low-surrogate code unit\n (also known as trailing-surrogate code unit).\n\n Such values do not represent characters by themselves,\n but are used in the representation of\n supplementary characters\n in the UTF-16 encoding."}, {"method_name": "isSurrogate", "method_sig": "public static boolean isSurrogate (char ch)", "description": "Determines if the given char value is a Unicode\n surrogate code unit.\n\n Such values do not represent characters by themselves,\n but are used in the representation of\n supplementary characters\n in the UTF-16 encoding.\n\n A char value is a surrogate code unit if and only if it is either\n a low-surrogate code unit or\n a high-surrogate code unit."}, {"method_name": "isSurrogatePair", "method_sig": "public static boolean isSurrogatePair (char high,\n                                      char low)", "description": "Determines whether the specified pair of char\n values is a valid\n \n Unicode surrogate pair.\n\n This method is equivalent to the expression:\n \n isHighSurrogate(high) && isLowSurrogate(low)\n "}, {"method_name": "charCount", "method_sig": "public static int charCount (int codePoint)", "description": "Determines the number of char values needed to\n represent the specified character (Unicode code point). If the\n specified character is equal to or greater than 0x10000, then\n the method returns 2. Otherwise, the method returns 1.\n\n This method doesn't validate the specified character to be a\n valid Unicode code point. The caller must validate the\n character value using isValidCodePoint\n if necessary."}, {"method_name": "toCodePoint", "method_sig": "public static int toCodePoint (char high,\n                              char low)", "description": "Converts the specified surrogate pair to its supplementary code\n point value. This method does not validate the specified\n surrogate pair. The caller must validate it using isSurrogatePair if necessary."}, {"method_name": "codePointAt", "method_sig": "public static int codePointAt (CharSequence seq,\n                              int index)", "description": "Returns the code point at the given index of the\n CharSequence. If the char value at\n the given index in the CharSequence is in the\n high-surrogate range, the following index is less than the\n length of the CharSequence, and the\n char value at the following index is in the\n low-surrogate range, then the supplementary code point\n corresponding to this surrogate pair is returned. Otherwise,\n the char value at the given index is returned."}, {"method_name": "codePointAt", "method_sig": "public static int codePointAt (char[] a,\n                              int index)", "description": "Returns the code point at the given index of the\n char array. If the char value at\n the given index in the char array is in the\n high-surrogate range, the following index is less than the\n length of the char array, and the\n char value at the following index is in the\n low-surrogate range, then the supplementary code point\n corresponding to this surrogate pair is returned. Otherwise,\n the char value at the given index is returned."}, {"method_name": "codePointAt", "method_sig": "public static int codePointAt (char[] a,\n                              int index,\n                              int limit)", "description": "Returns the code point at the given index of the\n char array, where only array elements with\n index less than limit can be used. If\n the char value at the given index in the\n char array is in the high-surrogate range, the\n following index is less than the limit, and the\n char value at the following index is in the\n low-surrogate range, then the supplementary code point\n corresponding to this surrogate pair is returned. Otherwise,\n the char value at the given index is returned."}, {"method_name": "codePointBefore", "method_sig": "public static int codePointBefore (CharSequence seq,\n                                  int index)", "description": "Returns the code point preceding the given index of the\n CharSequence. If the char value at\n (index - 1) in the CharSequence is in\n the low-surrogate range, (index - 2) is not\n negative, and the char value at (index - 2)\n in the CharSequence is in the\n high-surrogate range, then the supplementary code point\n corresponding to this surrogate pair is returned. Otherwise,\n the char value at (index - 1) is\n returned."}, {"method_name": "codePointBefore", "method_sig": "public static int codePointBefore (char[] a,\n                                  int index)", "description": "Returns the code point preceding the given index of the\n char array. If the char value at\n (index - 1) in the char array is in\n the low-surrogate range, (index - 2) is not\n negative, and the char value at (index - 2)\n in the char array is in the\n high-surrogate range, then the supplementary code point\n corresponding to this surrogate pair is returned. Otherwise,\n the char value at (index - 1) is\n returned."}, {"method_name": "codePointBefore", "method_sig": "public static int codePointBefore (char[] a,\n                                  int index,\n                                  int start)", "description": "Returns the code point preceding the given index of the\n char array, where only array elements with\n index greater than or equal to start\n can be used. If the char value at (index - 1)\n in the char array is in the\n low-surrogate range, (index - 2) is not less than\n start, and the char value at\n (index - 2) in the char array is in\n the high-surrogate range, then the supplementary code point\n corresponding to this surrogate pair is returned. Otherwise,\n the char value at (index - 1) is\n returned."}, {"method_name": "highSurrogate", "method_sig": "public static char highSurrogate (int codePoint)", "description": "Returns the leading surrogate (a\n \n high surrogate code unit) of the\n \n surrogate pair\n representing the specified supplementary character (Unicode\n code point) in the UTF-16 encoding.  If the specified character\n is not a\n supplementary character,\n an unspecified char is returned.\n\n If\n isSupplementaryCodePoint(x)\n is true, then\n isHighSurrogate(highSurrogate(x)) and\n toCodePoint(highSurrogate(x), lowSurrogate(x)) == x\n are also always true."}, {"method_name": "lowSurrogate", "method_sig": "public static char lowSurrogate (int codePoint)", "description": "Returns the trailing surrogate (a\n \n low surrogate code unit) of the\n \n surrogate pair\n representing the specified supplementary character (Unicode\n code point) in the UTF-16 encoding.  If the specified character\n is not a\n supplementary character,\n an unspecified char is returned.\n\n If\n isSupplementaryCodePoint(x)\n is true, then\n isLowSurrogate(lowSurrogate(x)) and\n toCodePoint(highSurrogate(x), lowSurrogate(x)) == x\n are also always true."}, {"method_name": "toChars", "method_sig": "public static int toChars (int codePoint,\n                          char[] dst,\n                          int dstIndex)", "description": "Converts the specified character (Unicode code point) to its\n UTF-16 representation. If the specified code point is a BMP\n (Basic Multilingual Plane or Plane 0) value, the same value is\n stored in dst[dstIndex], and 1 is returned. If the\n specified code point is a supplementary character, its\n surrogate values are stored in dst[dstIndex]\n (high-surrogate) and dst[dstIndex+1]\n (low-surrogate), and 2 is returned."}, {"method_name": "toChars", "method_sig": "public static char[] toChars (int codePoint)", "description": "Converts the specified character (Unicode code point) to its\n UTF-16 representation stored in a char array. If\n the specified code point is a BMP (Basic Multilingual Plane or\n Plane 0) value, the resulting char array has\n the same value as codePoint. If the specified code\n point is a supplementary code point, the resulting\n char array has the corresponding surrogate pair."}, {"method_name": "codePointCount", "method_sig": "public static int codePointCount (CharSequence seq,\n                                 int beginIndex,\n                                 int endIndex)", "description": "Returns the number of Unicode code points in the text range of\n the specified char sequence. The text range begins at the\n specified beginIndex and extends to the\n char at index endIndex - 1. Thus the\n length (in chars) of the text range is\n endIndex-beginIndex. Unpaired surrogates within\n the text range count as one code point each."}, {"method_name": "codePointCount", "method_sig": "public static int codePointCount (char[] a,\n                                 int offset,\n                                 int count)", "description": "Returns the number of Unicode code points in a subarray of the\n char array argument. The offset\n argument is the index of the first char of the\n subarray and the count argument specifies the\n length of the subarray in chars. Unpaired\n surrogates within the subarray count as one code point each."}, {"method_name": "offsetByCodePoints", "method_sig": "public static int offsetByCodePoints (CharSequence seq,\n                                     int index,\n                                     int codePointOffset)", "description": "Returns the index within the given char sequence that is offset\n from the given index by codePointOffset\n code points. Unpaired surrogates within the text range given by\n index and codePointOffset count as\n one code point each."}, {"method_name": "offsetByCodePoints", "method_sig": "public static int offsetByCodePoints (char[] a,\n                                     int start,\n                                     int count,\n                                     int index,\n                                     int codePointOffset)", "description": "Returns the index within the given char subarray\n that is offset from the given index by\n codePointOffset code points. The\n start and count arguments specify a\n subarray of the char array. Unpaired surrogates\n within the text range given by index and\n codePointOffset count as one code point each."}, {"method_name": "isLowerCase", "method_sig": "public static boolean isLowerCase (char ch)", "description": "Determines if the specified character is a lowercase character.\n \n A character is lowercase if its general category type, provided\n by Character.getType(ch), is\n LOWERCASE_LETTER, or it has contributory property\n Other_Lowercase as defined by the Unicode Standard.\n \n The following are examples of lowercase characters:\n \n a b c d e f g h i j k l m n o p q r s t u v w x y z\n '\\u00DF' '\\u00E0' '\\u00E1' '\\u00E2' '\\u00E3' '\\u00E4' '\\u00E5' '\\u00E6'\n '\\u00E7' '\\u00E8' '\\u00E9' '\\u00EA' '\\u00EB' '\\u00EC' '\\u00ED' '\\u00EE'\n '\\u00EF' '\\u00F0' '\\u00F1' '\\u00F2' '\\u00F3' '\\u00F4' '\\u00F5' '\\u00F6'\n '\\u00F8' '\\u00F9' '\\u00FA' '\\u00FB' '\\u00FC' '\\u00FD' '\\u00FE' '\\u00FF'\n \n Many other Unicode characters are lowercase too.\n\n Note: This method cannot handle  supplementary characters. To support\n all Unicode characters, including supplementary characters, use\n the isLowerCase(int) method."}, {"method_name": "isLowerCase", "method_sig": "public static boolean isLowerCase (int codePoint)", "description": "Determines if the specified character (Unicode code point) is a\n lowercase character.\n \n A character is lowercase if its general category type, provided\n by getType(codePoint), is\n LOWERCASE_LETTER, or it has contributory property\n Other_Lowercase as defined by the Unicode Standard.\n \n The following are examples of lowercase characters:\n \n a b c d e f g h i j k l m n o p q r s t u v w x y z\n '\\u00DF' '\\u00E0' '\\u00E1' '\\u00E2' '\\u00E3' '\\u00E4' '\\u00E5' '\\u00E6'\n '\\u00E7' '\\u00E8' '\\u00E9' '\\u00EA' '\\u00EB' '\\u00EC' '\\u00ED' '\\u00EE'\n '\\u00EF' '\\u00F0' '\\u00F1' '\\u00F2' '\\u00F3' '\\u00F4' '\\u00F5' '\\u00F6'\n '\\u00F8' '\\u00F9' '\\u00FA' '\\u00FB' '\\u00FC' '\\u00FD' '\\u00FE' '\\u00FF'\n \n Many other Unicode characters are lowercase too."}, {"method_name": "isUpperCase", "method_sig": "public static boolean isUpperCase (char ch)", "description": "Determines if the specified character is an uppercase character.\n \n A character is uppercase if its general category type, provided by\n Character.getType(ch), is UPPERCASE_LETTER.\n or it has contributory property Other_Uppercase as defined by the Unicode Standard.\n \n The following are examples of uppercase characters:\n \n A B C D E F G H I J K L M N O P Q R S T U V W X Y Z\n '\\u00C0' '\\u00C1' '\\u00C2' '\\u00C3' '\\u00C4' '\\u00C5' '\\u00C6' '\\u00C7'\n '\\u00C8' '\\u00C9' '\\u00CA' '\\u00CB' '\\u00CC' '\\u00CD' '\\u00CE' '\\u00CF'\n '\\u00D0' '\\u00D1' '\\u00D2' '\\u00D3' '\\u00D4' '\\u00D5' '\\u00D6' '\\u00D8'\n '\\u00D9' '\\u00DA' '\\u00DB' '\\u00DC' '\\u00DD' '\\u00DE'\n \n Many other Unicode characters are uppercase too.\n\n Note: This method cannot handle  supplementary characters. To support\n all Unicode characters, including supplementary characters, use\n the isUpperCase(int) method."}, {"method_name": "isUpperCase", "method_sig": "public static boolean isUpperCase (int codePoint)", "description": "Determines if the specified character (Unicode code point) is an uppercase character.\n \n A character is uppercase if its general category type, provided by\n getType(codePoint), is UPPERCASE_LETTER,\n or it has contributory property Other_Uppercase as defined by the Unicode Standard.\n \n The following are examples of uppercase characters:\n \n A B C D E F G H I J K L M N O P Q R S T U V W X Y Z\n '\\u00C0' '\\u00C1' '\\u00C2' '\\u00C3' '\\u00C4' '\\u00C5' '\\u00C6' '\\u00C7'\n '\\u00C8' '\\u00C9' '\\u00CA' '\\u00CB' '\\u00CC' '\\u00CD' '\\u00CE' '\\u00CF'\n '\\u00D0' '\\u00D1' '\\u00D2' '\\u00D3' '\\u00D4' '\\u00D5' '\\u00D6' '\\u00D8'\n '\\u00D9' '\\u00DA' '\\u00DB' '\\u00DC' '\\u00DD' '\\u00DE'\n \n Many other Unicode characters are uppercase too."}, {"method_name": "isTitleCase", "method_sig": "public static boolean isTitleCase (char ch)", "description": "Determines if the specified character is a titlecase character.\n \n A character is a titlecase character if its general\n category type, provided by Character.getType(ch),\n is TITLECASE_LETTER.\n \n Some characters look like pairs of Latin letters. For example, there\n is an uppercase letter that looks like \"LJ\" and has a corresponding\n lowercase letter that looks like \"lj\". A third form, which looks like \"Lj\",\n is the appropriate form to use when rendering a word in lowercase\n with initial capitals, as for a book title.\n \n These are some of the Unicode characters for which this method returns\n true:\n \nLATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON\nLATIN CAPITAL LETTER L WITH SMALL LETTER J\nLATIN CAPITAL LETTER N WITH SMALL LETTER J\nLATIN CAPITAL LETTER D WITH SMALL LETTER Z\n\n Many other Unicode characters are titlecase too.\n\n Note: This method cannot handle  supplementary characters. To support\n all Unicode characters, including supplementary characters, use\n the isTitleCase(int) method."}, {"method_name": "isTitleCase", "method_sig": "public static boolean isTitleCase (int codePoint)", "description": "Determines if the specified character (Unicode code point) is a titlecase character.\n \n A character is a titlecase character if its general\n category type, provided by getType(codePoint),\n is TITLECASE_LETTER.\n \n Some characters look like pairs of Latin letters. For example, there\n is an uppercase letter that looks like \"LJ\" and has a corresponding\n lowercase letter that looks like \"lj\". A third form, which looks like \"Lj\",\n is the appropriate form to use when rendering a word in lowercase\n with initial capitals, as for a book title.\n \n These are some of the Unicode characters for which this method returns\n true:\n \nLATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON\nLATIN CAPITAL LETTER L WITH SMALL LETTER J\nLATIN CAPITAL LETTER N WITH SMALL LETTER J\nLATIN CAPITAL LETTER D WITH SMALL LETTER Z\n\n Many other Unicode characters are titlecase too."}, {"method_name": "isDigit", "method_sig": "public static boolean isDigit (char ch)", "description": "Determines if the specified character is a digit.\n \n A character is a digit if its general category type, provided\n by Character.getType(ch), is\n DECIMAL_DIGIT_NUMBER.\n \n Some Unicode character ranges that contain digits:\n \n'\\u0030' through '\\u0039',\n     ISO-LATIN-1 digits ('0' through '9')\n '\\u0660' through '\\u0669',\n     Arabic-Indic digits\n '\\u06F0' through '\\u06F9',\n     Extended Arabic-Indic digits\n '\\u0966' through '\\u096F',\n     Devanagari digits\n '\\uFF10' through '\\uFF19',\n     Fullwidth digits\n \n\n Many other character ranges contain digits as well.\n\n Note: This method cannot handle  supplementary characters. To support\n all Unicode characters, including supplementary characters, use\n the isDigit(int) method."}, {"method_name": "isDigit", "method_sig": "public static boolean isDigit (int codePoint)", "description": "Determines if the specified character (Unicode code point) is a digit.\n \n A character is a digit if its general category type, provided\n by getType(codePoint), is\n DECIMAL_DIGIT_NUMBER.\n \n Some Unicode character ranges that contain digits:\n \n'\\u0030' through '\\u0039',\n     ISO-LATIN-1 digits ('0' through '9')\n '\\u0660' through '\\u0669',\n     Arabic-Indic digits\n '\\u06F0' through '\\u06F9',\n     Extended Arabic-Indic digits\n '\\u0966' through '\\u096F',\n     Devanagari digits\n '\\uFF10' through '\\uFF19',\n     Fullwidth digits\n \n\n Many other character ranges contain digits as well."}, {"method_name": "isDefined", "method_sig": "public static boolean isDefined (char ch)", "description": "Determines if a character is defined in Unicode.\n \n A character is defined if at least one of the following is true:\n \nIt has an entry in the UnicodeData file.\n It has a value in a range defined by the UnicodeData file.\n \nNote: This method cannot handle  supplementary characters. To support\n all Unicode characters, including supplementary characters, use\n the isDefined(int) method."}, {"method_name": "isDefined", "method_sig": "public static boolean isDefined (int codePoint)", "description": "Determines if a character (Unicode code point) is defined in Unicode.\n \n A character is defined if at least one of the following is true:\n \nIt has an entry in the UnicodeData file.\n It has a value in a range defined by the UnicodeData file.\n "}, {"method_name": "isLetter", "method_sig": "public static boolean isLetter (char ch)", "description": "Determines if the specified character is a letter.\n \n A character is considered to be a letter if its general\n category type, provided by Character.getType(ch),\n is any of the following:\n \n UPPERCASE_LETTER\n LOWERCASE_LETTER\n TITLECASE_LETTER\n MODIFIER_LETTER\n OTHER_LETTER\n\n\n Not all letters have case. Many characters are\n letters but are neither uppercase nor lowercase nor titlecase.\n\n Note: This method cannot handle  supplementary characters. To support\n all Unicode characters, including supplementary characters, use\n the isLetter(int) method."}, {"method_name": "isLetter", "method_sig": "public static boolean isLetter (int codePoint)", "description": "Determines if the specified character (Unicode code point) is a letter.\n \n A character is considered to be a letter if its general\n category type, provided by getType(codePoint),\n is any of the following:\n \n UPPERCASE_LETTER\n LOWERCASE_LETTER\n TITLECASE_LETTER\n MODIFIER_LETTER\n OTHER_LETTER\n\n\n Not all letters have case. Many characters are\n letters but are neither uppercase nor lowercase nor titlecase."}, {"method_name": "isLetterOrDigit", "method_sig": "public static boolean isLetterOrDigit (char ch)", "description": "Determines if the specified character is a letter or digit.\n \n A character is considered to be a letter or digit if either\n Character.isLetter(char ch) or\n Character.isDigit(char ch) returns\n true for the character.\n\n Note: This method cannot handle  supplementary characters. To support\n all Unicode characters, including supplementary characters, use\n the isLetterOrDigit(int) method."}, {"method_name": "isLetterOrDigit", "method_sig": "public static boolean isLetterOrDigit (int codePoint)", "description": "Determines if the specified character (Unicode code point) is a letter or digit.\n \n A character is considered to be a letter or digit if either\n isLetter(codePoint) or\n isDigit(codePoint) returns\n true for the character."}, {"method_name": "isJavaLetter", "method_sig": "@Deprecated(since=\"1.1\")\npublic static boolean isJavaLetter (char ch)", "description": "Determines if the specified character is permissible as the first\n character in a Java identifier.\n \n A character may start a Java identifier if and only if\n one of the following conditions is true:\n \n isLetter(ch) returns true\n getType(ch) returns LETTER_NUMBER\n ch is a currency symbol (such as '$')\n  ch is a connecting punctuation character (such as '_').\n \n\n These conditions are tested against the character information from version\n 10.0 of the Unicode Standard."}, {"method_name": "isJavaLetterOrDigit", "method_sig": "@Deprecated(since=\"1.1\")\npublic static boolean isJavaLetterOrDigit (char ch)", "description": "Determines if the specified character may be part of a Java\n identifier as other than the first character.\n \n A character may be part of a Java identifier if and only if one\n of the following conditions is true:\n \n  it is a letter\n   it is a currency symbol (such as '$')\n   it is a connecting punctuation character (such as '_')\n   it is a digit\n   it is a numeric letter (such as a Roman numeral character)\n   it is a combining mark\n   it is a non-spacing mark\n  isIdentifierIgnorable returns\n true for the character.\n \n\n These conditions are tested against the character information from version\n 10.0 of the Unicode Standard."}, {"method_name": "isAlphabetic", "method_sig": "public static boolean isAlphabetic (int codePoint)", "description": "Determines if the specified character (Unicode code point) is an alphabet.\n \n A character is considered to be alphabetic if its general category type,\n provided by getType(codePoint), is any of\n the following:\n \n UPPERCASE_LETTER\n LOWERCASE_LETTER\n TITLECASE_LETTER\n MODIFIER_LETTER\n OTHER_LETTER\n LETTER_NUMBER\n\n or it has contributory property Other_Alphabetic as defined by the\n Unicode Standard."}, {"method_name": "isIdeographic", "method_sig": "public static boolean isIdeographic (int codePoint)", "description": "Determines if the specified character (Unicode code point) is a CJKV\n (Chinese, Japanese, Korean and Vietnamese) ideograph, as defined by\n the Unicode Standard."}, {"method_name": "isJavaIdentifierStart", "method_sig": "public static boolean isJavaIdentifierStart (char ch)", "description": "Determines if the specified character is\n permissible as the first character in a Java identifier.\n \n A character may start a Java identifier if and only if\n one of the following conditions is true:\n \n isLetter(ch) returns true\n getType(ch) returns LETTER_NUMBER\n ch is a currency symbol (such as '$')\n  ch is a connecting punctuation character (such as '_').\n \n\n These conditions are tested against the character information from version\n 10.0 of the Unicode Standard.\n\n Note: This method cannot handle  supplementary characters. To support\n all Unicode characters, including supplementary characters, use\n the isJavaIdentifierStart(int) method."}, {"method_name": "isJavaIdentifierStart", "method_sig": "public static boolean isJavaIdentifierStart (int codePoint)", "description": "Determines if the character (Unicode code point) is\n permissible as the first character in a Java identifier.\n \n A character may start a Java identifier if and only if\n one of the following conditions is true:\n \n isLetter(codePoint)\n      returns true\n getType(codePoint)\n      returns LETTER_NUMBER\n the referenced character is a currency symbol (such as '$')\n  the referenced character is a connecting punctuation character\n      (such as '_').\n \n\n These conditions are tested against the character information from version\n 10.0 of the Unicode Standard."}, {"method_name": "isJavaIdentifierPart", "method_sig": "public static boolean isJavaIdentifierPart (char ch)", "description": "Determines if the specified character may be part of a Java\n identifier as other than the first character.\n \n A character may be part of a Java identifier if any of the following\n conditions are true:\n \n  it is a letter\n   it is a currency symbol (such as '$')\n   it is a connecting punctuation character (such as '_')\n   it is a digit\n   it is a numeric letter (such as a Roman numeral character)\n   it is a combining mark\n   it is a non-spacing mark\n  isIdentifierIgnorable returns\n true for the character\n \n\n These conditions are tested against the character information from version\n 10.0 of the Unicode Standard.\n\n Note: This method cannot handle  supplementary characters. To support\n all Unicode characters, including supplementary characters, use\n the isJavaIdentifierPart(int) method."}, {"method_name": "isJavaIdentifierPart", "method_sig": "public static boolean isJavaIdentifierPart (int codePoint)", "description": "Determines if the character (Unicode code point) may be part of a Java\n identifier as other than the first character.\n \n A character may be part of a Java identifier if any of the following\n conditions are true:\n \n  it is a letter\n   it is a currency symbol (such as '$')\n   it is a connecting punctuation character (such as '_')\n   it is a digit\n   it is a numeric letter (such as a Roman numeral character)\n   it is a combining mark\n   it is a non-spacing mark\n  isIdentifierIgnorable(codePoint) returns true for\n the code point\n \n\n These conditions are tested against the character information from version\n 10.0 of the Unicode Standard."}, {"method_name": "isUnicodeIdentifierStart", "method_sig": "public static boolean isUnicodeIdentifierStart (char ch)", "description": "Determines if the specified character is permissible as the\n first character in a Unicode identifier.\n \n A character may start a Unicode identifier if and only if\n one of the following conditions is true:\n \n isLetter(ch) returns true\n getType(ch) returns\n      LETTER_NUMBER.\n \nNote: This method cannot handle  supplementary characters. To support\n all Unicode characters, including supplementary characters, use\n the isUnicodeIdentifierStart(int) method."}, {"method_name": "isUnicodeIdentifierStart", "method_sig": "public static boolean isUnicodeIdentifierStart (int codePoint)", "description": "Determines if the specified character (Unicode code point) is permissible as the\n first character in a Unicode identifier.\n \n A character may start a Unicode identifier if and only if\n one of the following conditions is true:\n \n isLetter(codePoint)\n      returns true\n getType(codePoint)\n      returns LETTER_NUMBER.\n "}, {"method_name": "isUnicodeIdentifierPart", "method_sig": "public static boolean isUnicodeIdentifierPart (char ch)", "description": "Determines if the specified character may be part of a Unicode\n identifier as other than the first character.\n \n A character may be part of a Unicode identifier if and only if\n one of the following statements is true:\n \n  it is a letter\n   it is a connecting punctuation character (such as '_')\n   it is a digit\n   it is a numeric letter (such as a Roman numeral character)\n   it is a combining mark\n   it is a non-spacing mark\n  isIdentifierIgnorable returns\n true for this character.\n \nNote: This method cannot handle  supplementary characters. To support\n all Unicode characters, including supplementary characters, use\n the isUnicodeIdentifierPart(int) method."}, {"method_name": "isUnicodeIdentifierPart", "method_sig": "public static boolean isUnicodeIdentifierPart (int codePoint)", "description": "Determines if the specified character (Unicode code point) may be part of a Unicode\n identifier as other than the first character.\n \n A character may be part of a Unicode identifier if and only if\n one of the following statements is true:\n \n  it is a letter\n   it is a connecting punctuation character (such as '_')\n   it is a digit\n   it is a numeric letter (such as a Roman numeral character)\n   it is a combining mark\n   it is a non-spacing mark\n  isIdentifierIgnorable returns\n true for this character.\n "}, {"method_name": "isIdentifierIgnorable", "method_sig": "public static boolean isIdentifierIgnorable (char ch)", "description": "Determines if the specified character should be regarded as\n an ignorable character in a Java identifier or a Unicode identifier.\n \n The following Unicode characters are ignorable in a Java identifier\n or a Unicode identifier:\n \nISO control characters that are not whitespace\n \n'\\u0000' through '\\u0008'\n'\\u000E' through '\\u001B'\n'\\u007F' through '\\u009F'\n\nall characters that have the FORMAT general\n category value\n \nNote: This method cannot handle  supplementary characters. To support\n all Unicode characters, including supplementary characters, use\n the isIdentifierIgnorable(int) method."}, {"method_name": "isIdentifierIgnorable", "method_sig": "public static boolean isIdentifierIgnorable (int codePoint)", "description": "Determines if the specified character (Unicode code point) should be regarded as\n an ignorable character in a Java identifier or a Unicode identifier.\n \n The following Unicode characters are ignorable in a Java identifier\n or a Unicode identifier:\n \nISO control characters that are not whitespace\n \n'\\u0000' through '\\u0008'\n'\\u000E' through '\\u001B'\n'\\u007F' through '\\u009F'\n\nall characters that have the FORMAT general\n category value\n "}, {"method_name": "toLowerCase", "method_sig": "public static char toLowerCase (char ch)", "description": "Converts the character argument to lowercase using case\n mapping information from the UnicodeData file.\n \n Note that\n Character.isLowerCase(Character.toLowerCase(ch))\n does not always return true for some ranges of\n characters, particularly those that are symbols or ideographs.\n\n In general, String.toLowerCase() should be used to map\n characters to lowercase. String case mapping methods\n have several benefits over Character case mapping methods.\n String case mapping methods can perform locale-sensitive\n mappings, context-sensitive mappings, and 1:M character mappings, whereas\n the Character case mapping methods cannot.\n\n Note: This method cannot handle  supplementary characters. To support\n all Unicode characters, including supplementary characters, use\n the toLowerCase(int) method."}, {"method_name": "toLowerCase", "method_sig": "public static int toLowerCase (int codePoint)", "description": "Converts the character (Unicode code point) argument to\n lowercase using case mapping information from the UnicodeData\n file.\n\n  Note that\n Character.isLowerCase(Character.toLowerCase(codePoint))\n does not always return true for some ranges of\n characters, particularly those that are symbols or ideographs.\n\n In general, String.toLowerCase() should be used to map\n characters to lowercase. String case mapping methods\n have several benefits over Character case mapping methods.\n String case mapping methods can perform locale-sensitive\n mappings, context-sensitive mappings, and 1:M character mappings, whereas\n the Character case mapping methods cannot."}, {"method_name": "toUpperCase", "method_sig": "public static char toUpperCase (char ch)", "description": "Converts the character argument to uppercase using case mapping\n information from the UnicodeData file.\n \n Note that\n Character.isUpperCase(Character.toUpperCase(ch))\n does not always return true for some ranges of\n characters, particularly those that are symbols or ideographs.\n\n In general, String.toUpperCase() should be used to map\n characters to uppercase. String case mapping methods\n have several benefits over Character case mapping methods.\n String case mapping methods can perform locale-sensitive\n mappings, context-sensitive mappings, and 1:M character mappings, whereas\n the Character case mapping methods cannot.\n\n Note: This method cannot handle  supplementary characters. To support\n all Unicode characters, including supplementary characters, use\n the toUpperCase(int) method."}, {"method_name": "toUpperCase", "method_sig": "public static int toUpperCase (int codePoint)", "description": "Converts the character (Unicode code point) argument to\n uppercase using case mapping information from the UnicodeData\n file.\n\n Note that\n Character.isUpperCase(Character.toUpperCase(codePoint))\n does not always return true for some ranges of\n characters, particularly those that are symbols or ideographs.\n\n In general, String.toUpperCase() should be used to map\n characters to uppercase. String case mapping methods\n have several benefits over Character case mapping methods.\n String case mapping methods can perform locale-sensitive\n mappings, context-sensitive mappings, and 1:M character mappings, whereas\n the Character case mapping methods cannot."}, {"method_name": "toTitleCase", "method_sig": "public static char toTitleCase (char ch)", "description": "Converts the character argument to titlecase using case mapping\n information from the UnicodeData file. If a character has no\n explicit titlecase mapping and is not itself a titlecase char\n according to UnicodeData, then the uppercase mapping is\n returned as an equivalent titlecase mapping. If the\n char argument is already a titlecase\n char, the same char value will be\n returned.\n \n Note that\n Character.isTitleCase(Character.toTitleCase(ch))\n does not always return true for some ranges of\n characters.\n\n Note: This method cannot handle  supplementary characters. To support\n all Unicode characters, including supplementary characters, use\n the toTitleCase(int) method."}, {"method_name": "toTitleCase", "method_sig": "public static int toTitleCase (int codePoint)", "description": "Converts the character (Unicode code point) argument to titlecase using case mapping\n information from the UnicodeData file. If a character has no\n explicit titlecase mapping and is not itself a titlecase char\n according to UnicodeData, then the uppercase mapping is\n returned as an equivalent titlecase mapping. If the\n character argument is already a titlecase\n character, the same character value will be\n returned.\n\n Note that\n Character.isTitleCase(Character.toTitleCase(codePoint))\n does not always return true for some ranges of\n characters."}, {"method_name": "digit", "method_sig": "public static int digit (char ch,\n                        int radix)", "description": "Returns the numeric value of the character ch in the\n specified radix.\n \n If the radix is not in the range MIN_RADIX \u2264\n radix \u2264 MAX_RADIX or if the\n value of ch is not a valid digit in the specified\n radix, -1 is returned. A character is a valid digit\n if at least one of the following is true:\n \nThe method isDigit is true of the character\n     and the Unicode decimal digit value of the character (or its\n     single-character decomposition) is less than the specified radix.\n     In this case the decimal digit value is returned.\n The character is one of the uppercase Latin letters\n     'A' through 'Z' and its code is less than\n     radix + 'A' - 10.\n     In this case, ch - 'A' + 10\n     is returned.\n The character is one of the lowercase Latin letters\n     'a' through 'z' and its code is less than\n     radix + 'a' - 10.\n     In this case, ch - 'a' + 10\n     is returned.\n The character is one of the fullwidth uppercase Latin letters A\n     ('\\uFF21') through Z ('\\uFF3A')\n     and its code is less than\n     radix + '\\uFF21' - 10.\n     In this case, ch - '\\uFF21' + 10\n     is returned.\n The character is one of the fullwidth lowercase Latin letters a\n     ('\\uFF41') through z ('\\uFF5A')\n     and its code is less than\n     radix + '\\uFF41' - 10.\n     In this case, ch - '\\uFF41' + 10\n     is returned.\n \nNote: This method cannot handle  supplementary characters. To support\n all Unicode characters, including supplementary characters, use\n the digit(int, int) method."}, {"method_name": "digit", "method_sig": "public static int digit (int codePoint,\n                        int radix)", "description": "Returns the numeric value of the specified character (Unicode\n code point) in the specified radix.\n\n If the radix is not in the range MIN_RADIX \u2264\n radix \u2264 MAX_RADIX or if the\n character is not a valid digit in the specified\n radix, -1 is returned. A character is a valid digit\n if at least one of the following is true:\n \nThe method isDigit(codePoint) is true of the character\n     and the Unicode decimal digit value of the character (or its\n     single-character decomposition) is less than the specified radix.\n     In this case the decimal digit value is returned.\n The character is one of the uppercase Latin letters\n     'A' through 'Z' and its code is less than\n     radix + 'A' - 10.\n     In this case, codePoint - 'A' + 10\n     is returned.\n The character is one of the lowercase Latin letters\n     'a' through 'z' and its code is less than\n     radix + 'a' - 10.\n     In this case, codePoint - 'a' + 10\n     is returned.\n The character is one of the fullwidth uppercase Latin letters A\n     ('\\uFF21') through Z ('\\uFF3A')\n     and its code is less than\n     radix + '\\uFF21' - 10.\n     In this case,\n     codePoint - '\\uFF21' + 10\n     is returned.\n The character is one of the fullwidth lowercase Latin letters a\n     ('\\uFF41') through z ('\\uFF5A')\n     and its code is less than\n     radix + '\\uFF41'- 10.\n     In this case,\n     codePoint - '\\uFF41' + 10\n     is returned.\n "}, {"method_name": "getNumericValue", "method_sig": "public static int getNumericValue (char ch)", "description": "Returns the int value that the specified Unicode\n character represents. For example, the character\n '\\u216C' (the roman numeral fifty) will return\n an int with a value of 50.\n \n The letters A-Z in their uppercase ('\\u0041' through\n '\\u005A'), lowercase\n ('\\u0061' through '\\u007A'), and\n full width variant ('\\uFF21' through\n '\\uFF3A' and '\\uFF41' through\n '\\uFF5A') forms have numeric values from 10\n through 35. This is independent of the Unicode specification,\n which does not assign numeric values to these char\n values.\n \n If the character does not have a numeric value, then -1 is returned.\n If the character has a numeric value that cannot be represented as a\n nonnegative integer (for example, a fractional value), then -2\n is returned.\n\n Note: This method cannot handle  supplementary characters. To support\n all Unicode characters, including supplementary characters, use\n the getNumericValue(int) method."}, {"method_name": "getNumericValue", "method_sig": "public static int getNumericValue (int codePoint)", "description": "Returns the int value that the specified\n character (Unicode code point) represents. For example, the character\n '\\u216C' (the Roman numeral fifty) will return\n an int with a value of 50.\n \n The letters A-Z in their uppercase ('\\u0041' through\n '\\u005A'), lowercase\n ('\\u0061' through '\\u007A'), and\n full width variant ('\\uFF21' through\n '\\uFF3A' and '\\uFF41' through\n '\\uFF5A') forms have numeric values from 10\n through 35. This is independent of the Unicode specification,\n which does not assign numeric values to these char\n values.\n \n If the character does not have a numeric value, then -1 is returned.\n If the character has a numeric value that cannot be represented as a\n nonnegative integer (for example, a fractional value), then -2\n is returned."}, {"method_name": "isSpace", "method_sig": "@Deprecated(since=\"1.1\")\npublic static boolean isSpace (char ch)", "description": "Determines if the specified character is ISO-LATIN-1 white space.\n This method returns true for the following five\n characters only:\n \ntruechars\n\nCharacter\n     Code\n     Name\n \n\n'\\t' U+0009\nHORIZONTAL TABULATION\n'\\n' U+000A\nNEW LINE\n'\\f' U+000C\nFORM FEED\n'\\r' U+000D\nCARRIAGE RETURN\n' ' U+0020\nSPACE\n\n"}, {"method_name": "isSpaceChar", "method_sig": "public static boolean isSpaceChar (char ch)", "description": "Determines if the specified character is a Unicode space character.\n A character is considered to be a space character if and only if\n it is specified to be a space character by the Unicode Standard. This\n method returns true if the character's general category type is any of\n the following:\n \n SPACE_SEPARATOR\n LINE_SEPARATOR\n PARAGRAPH_SEPARATOR\n\nNote: This method cannot handle  supplementary characters. To support\n all Unicode characters, including supplementary characters, use\n the isSpaceChar(int) method."}, {"method_name": "isSpaceChar", "method_sig": "public static boolean isSpaceChar (int codePoint)", "description": "Determines if the specified character (Unicode code point) is a\n Unicode space character.  A character is considered to be a\n space character if and only if it is specified to be a space\n character by the Unicode Standard. This method returns true if\n the character's general category type is any of the following:\n\n \n SPACE_SEPARATOR\n LINE_SEPARATOR\n PARAGRAPH_SEPARATOR\n"}, {"method_name": "isWhitespace", "method_sig": "public static boolean isWhitespace (char ch)", "description": "Determines if the specified character is white space according to Java.\n A character is a Java whitespace character if and only if it satisfies\n one of the following criteria:\n \n It is a Unicode space character (SPACE_SEPARATOR,\n      LINE_SEPARATOR, or PARAGRAPH_SEPARATOR)\n      but is not also a non-breaking space ('\\u00A0',\n      '\\u2007', '\\u202F').\n  It is '\\t', U+0009 HORIZONTAL TABULATION.\n  It is '\\n', U+000A LINE FEED.\n  It is '\\u000B', U+000B VERTICAL TABULATION.\n  It is '\\f', U+000C FORM FEED.\n  It is '\\r', U+000D CARRIAGE RETURN.\n  It is '\\u001C', U+001C FILE SEPARATOR.\n  It is '\\u001D', U+001D GROUP SEPARATOR.\n  It is '\\u001E', U+001E RECORD SEPARATOR.\n  It is '\\u001F', U+001F UNIT SEPARATOR.\n \nNote: This method cannot handle  supplementary characters. To support\n all Unicode characters, including supplementary characters, use\n the isWhitespace(int) method."}, {"method_name": "isWhitespace", "method_sig": "public static boolean isWhitespace (int codePoint)", "description": "Determines if the specified character (Unicode code point) is\n white space according to Java.  A character is a Java\n whitespace character if and only if it satisfies one of the\n following criteria:\n \n It is a Unicode space character (SPACE_SEPARATOR,\n      LINE_SEPARATOR, or PARAGRAPH_SEPARATOR)\n      but is not also a non-breaking space ('\\u00A0',\n      '\\u2007', '\\u202F').\n  It is '\\t', U+0009 HORIZONTAL TABULATION.\n  It is '\\n', U+000A LINE FEED.\n  It is '\\u000B', U+000B VERTICAL TABULATION.\n  It is '\\f', U+000C FORM FEED.\n  It is '\\r', U+000D CARRIAGE RETURN.\n  It is '\\u001C', U+001C FILE SEPARATOR.\n  It is '\\u001D', U+001D GROUP SEPARATOR.\n  It is '\\u001E', U+001E RECORD SEPARATOR.\n  It is '\\u001F', U+001F UNIT SEPARATOR.\n "}, {"method_name": "isISOControl", "method_sig": "public static boolean isISOControl (char ch)", "description": "Determines if the specified character is an ISO control\n character.  A character is considered to be an ISO control\n character if its code is in the range '\\u0000'\n through '\\u001F' or in the range\n '\\u007F' through '\\u009F'.\n\n Note: This method cannot handle  supplementary characters. To support\n all Unicode characters, including supplementary characters, use\n the isISOControl(int) method."}, {"method_name": "isISOControl", "method_sig": "public static boolean isISOControl (int codePoint)", "description": "Determines if the referenced character (Unicode code point) is an ISO control\n character.  A character is considered to be an ISO control\n character if its code is in the range '\\u0000'\n through '\\u001F' or in the range\n '\\u007F' through '\\u009F'."}, {"method_name": "getType", "method_sig": "public static int getType (char ch)", "description": "Returns a value indicating a character's general category.\n\n Note: This method cannot handle  supplementary characters. To support\n all Unicode characters, including supplementary characters, use\n the getType(int) method."}, {"method_name": "getType", "method_sig": "public static int getType (int codePoint)", "description": "Returns a value indicating a character's general category."}, {"method_name": "forDigit", "method_sig": "public static char forDigit (int digit,\n                            int radix)", "description": "Determines the character representation for a specific digit in\n the specified radix. If the value of radix is not a\n valid radix, or the value of digit is not a valid\n digit in the specified radix, the null character\n ('\\u0000') is returned.\n \n The radix argument is valid if it is greater than or\n equal to MIN_RADIX and less than or equal to\n MAX_RADIX. The digit argument is valid if\n 0 <= digit < radix.\n \n If the digit is less than 10, then\n '0' + digit is returned. Otherwise, the value\n 'a' + digit - 10 is returned."}, {"method_name": "getDirectionality", "method_sig": "public static byte getDirectionality (char ch)", "description": "Returns the Unicode directionality property for the given\n character.  Character directionality is used to calculate the\n visual ordering of text. The directionality value of undefined\n char values is DIRECTIONALITY_UNDEFINED.\n\n Note: This method cannot handle  supplementary characters. To support\n all Unicode characters, including supplementary characters, use\n the getDirectionality(int) method."}, {"method_name": "getDirectionality", "method_sig": "public static byte getDirectionality (int codePoint)", "description": "Returns the Unicode directionality property for the given\n character (Unicode code point).  Character directionality is\n used to calculate the visual ordering of text. The\n directionality value of undefined character is DIRECTIONALITY_UNDEFINED."}, {"method_name": "isMirrored", "method_sig": "public static boolean isMirrored (char ch)", "description": "Determines whether the character is mirrored according to the\n Unicode specification.  Mirrored characters should have their\n glyphs horizontally mirrored when displayed in text that is\n right-to-left.  For example, '\\u0028' LEFT\n PARENTHESIS is semantically defined to be an opening\n parenthesis.  This will appear as a \"(\" in text that is\n left-to-right but as a \")\" in text that is right-to-left.\n\n Note: This method cannot handle  supplementary characters. To support\n all Unicode characters, including supplementary characters, use\n the isMirrored(int) method."}, {"method_name": "isMirrored", "method_sig": "public static boolean isMirrored (int codePoint)", "description": "Determines whether the specified character (Unicode code point)\n is mirrored according to the Unicode specification.  Mirrored\n characters should have their glyphs horizontally mirrored when\n displayed in text that is right-to-left.  For example,\n '\\u0028' LEFT PARENTHESIS is semantically\n defined to be an opening parenthesis.  This will appear\n as a \"(\" in text that is left-to-right but as a \")\" in text\n that is right-to-left."}, {"method_name": "compareTo", "method_sig": "public int compareTo (Character anotherCharacter)", "description": "Compares two Character objects numerically."}, {"method_name": "compare", "method_sig": "public static int compare (char x,\n                          char y)", "description": "Compares two char values numerically.\n The value returned is identical to what would be returned by:\n \n    Character.valueOf(x).compareTo(Character.valueOf(y))\n "}, {"method_name": "reverseBytes", "method_sig": "public static char reverseBytes (char ch)", "description": "Returns the value obtained by reversing the order of the bytes in the\n specified char value."}, {"method_name": "getName", "method_sig": "public static String getName (int codePoint)", "description": "Returns the Unicode name of the specified character\n codePoint, or null if the code point is\n unassigned.\n \n Note: if the specified character is not assigned a name by\n the UnicodeData file (part of the Unicode Character\n Database maintained by the Unicode Consortium), the returned\n name is the same as the result of expression.\n\n \n     Character.UnicodeBlock.of(codePoint).toString().replace('_', ' ')\n     + \" \"\n     + Integer.toHexString(codePoint).toUpperCase(Locale.ROOT);\n\n "}, {"method_name": "codePointOf", "method_sig": "public static int codePointOf (String name)", "description": "Returns the code point value of the Unicode character specified by\n the given Unicode character name.\n \n Note: if a character is not assigned a name by the UnicodeData\n file (part of the Unicode Character Database maintained by the Unicode\n Consortium), its name is defined as the result of expression\n\n \n     Character.UnicodeBlock.of(codePoint).toString().replace('_', ' ')\n     + \" \"\n     + Integer.toHexString(codePoint).toUpperCase(Locale.ROOT);\n\n \n\n The name matching is case insensitive, with any leading and\n trailing whitespace character removed."}]}