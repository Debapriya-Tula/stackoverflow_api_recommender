{"name": "Class ReentrantReadWriteLock.ReadLock", "module": "java.base", "package": "java.util.concurrent.locks", "text": "The lock returned by method ReadWriteLock.readLock().", "codes": ["public static class ReentrantReadWriteLock.ReadLock\nextends Object\nimplements Lock, Serializable"], "fields": [], "methods": [{"method_name": "lock", "method_sig": "public void lock()", "description": "Acquires the read lock.\n\n Acquires the read lock if the write lock is not held by\n another thread and returns immediately.\n\n If the write lock is held by another thread then\n the current thread becomes disabled for thread scheduling\n purposes and lies dormant until the read lock has been acquired."}, {"method_name": "lockInterruptibly", "method_sig": "public void lockInterruptibly()\n                       throws InterruptedException", "description": "Acquires the read lock unless the current thread is\n interrupted.\n\n Acquires the read lock if the write lock is not held\n by another thread and returns immediately.\n\n If the write lock is held by another thread then the\n current thread becomes disabled for thread scheduling\n purposes and lies dormant until one of two things happens:\n\n \nThe read lock is acquired by the current thread; or\n\n Some other thread interrupts\n the current thread.\n\n \nIf the current thread:\n\n \nhas its interrupted status set on entry to this method; or\n\n is interrupted while\n acquiring the read lock,\n\n \n\n then InterruptedException is thrown and the current\n thread's interrupted status is cleared.\n\n In this implementation, as this method is an explicit\n interruption point, preference is given to responding to\n the interrupt over normal or reentrant acquisition of the\n lock."}, {"method_name": "tryLock", "method_sig": "public boolean tryLock()", "description": "Acquires the read lock only if the write lock is not held by\n another thread at the time of invocation.\n\n Acquires the read lock if the write lock is not held by\n another thread and returns immediately with the value\n true. Even when this lock has been set to use a\n fair ordering policy, a call to tryLock()\nwill immediately acquire the read lock if it is\n available, whether or not other threads are currently\n waiting for the read lock.  This \"barging\" behavior\n can be useful in certain circumstances, even though it\n breaks fairness. If you want to honor the fairness setting\n for this lock, then use tryLock(0, TimeUnit.SECONDS) which is almost equivalent\n (it also detects interruption).\n\n If the write lock is held by another thread then\n this method will return immediately with the value\n false."}, {"method_name": "tryLock", "method_sig": "public boolean tryLock (long timeout,\n                       TimeUnit unit)\n                throws InterruptedException", "description": "Acquires the read lock if the write lock is not held by\n another thread within the given waiting time and the\n current thread has not been interrupted.\n\n Acquires the read lock if the write lock is not held by\n another thread and returns immediately with the value\n true. If this lock has been set to use a fair\n ordering policy then an available lock will not be\n acquired if any other threads are waiting for the\n lock. This is in contrast to the tryLock()\n method. If you want a timed tryLock that does\n permit barging on a fair lock then combine the timed and\n un-timed forms together:\n\n  \n if (lock.tryLock() ||\n     lock.tryLock(timeout, unit)) {\n   ...\n }\nIf the write lock is held by another thread then the\n current thread becomes disabled for thread scheduling\n purposes and lies dormant until one of three things happens:\n\n \nThe read lock is acquired by the current thread; or\n\n Some other thread interrupts\n the current thread; or\n\n The specified waiting time elapses.\n\n \nIf the read lock is acquired then the value true is\n returned.\n\n If the current thread:\n\n \nhas its interrupted status set on entry to this method; or\n\n is interrupted while\n acquiring the read lock,\n\n  then InterruptedException is thrown and the\n current thread's interrupted status is cleared.\n\n If the specified waiting time elapses then the value\n false is returned.  If the time is less than or\n equal to zero, the method will not wait at all.\n\n In this implementation, as this method is an explicit\n interruption point, preference is given to responding to\n the interrupt over normal or reentrant acquisition of the\n lock, and over reporting the elapse of the waiting time."}, {"method_name": "unlock", "method_sig": "public void unlock()", "description": "Attempts to release this lock.\n\n If the number of readers is now zero then the lock\n is made available for write lock attempts. If the current\n thread does not hold this lock then IllegalMonitorStateException is thrown."}, {"method_name": "newCondition", "method_sig": "public Condition newCondition()", "description": "Throws UnsupportedOperationException because\n ReadLocks do not support conditions."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a string identifying this lock, as well as its lock state.\n The state, in brackets, includes the String \"Read locks =\"\n followed by the number of held read locks."}]}