{"name": "Class MethodHandles", "module": "java.base", "package": "java.lang.invoke", "text": "This class consists exclusively of static methods that operate on or return\n method handles. They fall into several categories:\n \nLookup methods which help create method handles for methods and fields.\n Combinator methods, which combine or transform pre-existing method handles into new ones.\n Other factory methods to create method handles that emulate other common JVM operations or control flow patterns.\n ", "codes": ["public class MethodHandles\nextends Object"], "fields": [], "methods": [{"method_name": "lookup", "method_sig": "public static MethodHandles.Lookup lookup()", "description": "Returns a lookup object with\n full capabilities to emulate all supported bytecode behaviors of the caller.\n These capabilities include private access to the caller.\n Factory methods on the lookup object can create\n direct method handles\n for any member that the caller has access to via bytecodes,\n including protected and private fields and methods.\n This lookup object is a capability which may be delegated to trusted agents.\n Do not store it in place where untrusted code can access it.\n \n This method is caller sensitive, which means that it may return different\n values to different callers."}, {"method_name": "publicLookup", "method_sig": "public static MethodHandles.Lookup publicLookup()", "description": "Returns a lookup object which is trusted minimally.\n The lookup has the PUBLIC and UNCONDITIONAL modes.\n It can only be used to create method handles to public members of\n public classes in packages that are exported unconditionally.\n \n As a matter of pure convention, the lookup class\n of this lookup object will be Object."}, {"method_name": "privateLookupIn", "method_sig": "public static MethodHandles.Lookup privateLookupIn (Class<?> targetClass,\n                                                   MethodHandles.Lookup lookup)\n                                            throws IllegalAccessException", "description": "Returns a lookup object with full capabilities to emulate all\n supported bytecode behaviors, including \n private access, on a target class.\n This method checks that a caller, specified as a Lookup object, is allowed to\n do deep reflection on the target class. If m1 is the module containing\n the lookup class, and m2 is the module containing\n the target class, then this check ensures that\n \nm1 reads m2.\nm2 opens the package containing\n     the target class to at least m1.\nThe lookup has the MODULE lookup mode.\n\n\n If there is a security manager, its checkPermission method is called to\n check ReflectPermission(\"suppressAccessChecks\")."}, {"method_name": "reflectAs", "method_sig": "public static <T extends Member> T reflectAs (Class<T> expected,\n                                             MethodHandle target)", "description": "Performs an unchecked \"crack\" of a\n direct method handle.\n The result is as if the user had obtained a lookup object capable enough\n to crack the target method handle, called\n Lookup.revealDirect\n on the target to obtain its symbolic reference, and then called\n MethodHandleInfo.reflectAs\n to resolve the symbolic reference to a member.\n \n If there is a security manager, its checkPermission method\n is called with a ReflectPermission(\"suppressAccessChecks\") permission."}, {"method_name": "arrayConstructor", "method_sig": "public static MethodHandle arrayConstructor (Class<?> arrayClass)\n                                     throws IllegalArgumentException", "description": "Produces a method handle constructing arrays of a desired type,\n as if by the anewarray bytecode.\n The return type of the method handle will be the array type.\n The type of its sole argument will be int, which specifies the size of the array.\n\n  If the returned method handle is invoked with a negative\n array size, a NegativeArraySizeException will be thrown."}, {"method_name": "arrayLength", "method_sig": "public static MethodHandle arrayLength (Class<?> arrayClass)\n                                throws IllegalArgumentException", "description": "Produces a method handle returning the length of an array,\n as if by the arraylength bytecode.\n The type of the method handle will have int as return type,\n and its sole argument will be the array type.\n\n  If the returned method handle is invoked with a null\n array reference, a NullPointerException will be thrown."}, {"method_name": "arrayElementGetter", "method_sig": "public static MethodHandle arrayElementGetter (Class<?> arrayClass)\n                                       throws IllegalArgumentException", "description": "Produces a method handle giving read access to elements of an array,\n as if by the aaload bytecode.\n The type of the method handle will have a return type of the array's\n element type.  Its first argument will be the array type,\n and the second will be int.\n\n  When the returned method handle is invoked,\n the array reference and array index are checked.\n A NullPointerException will be thrown if the array reference\n is null and an ArrayIndexOutOfBoundsException will be\n thrown if the index is negative or if it is greater than or equal to\n the length of the array."}, {"method_name": "arrayElementSetter", "method_sig": "public static MethodHandle arrayElementSetter (Class<?> arrayClass)\n                                       throws IllegalArgumentException", "description": "Produces a method handle giving write access to elements of an array,\n as if by the astore bytecode.\n The type of the method handle will have a void return type.\n Its last argument will be the array's element type.\n The first and second arguments will be the array type and int.\n\n  When the returned method handle is invoked,\n the array reference and array index are checked.\n A NullPointerException will be thrown if the array reference\n is null and an ArrayIndexOutOfBoundsException will be\n thrown if the index is negative or if it is greater than or equal to\n the length of the array."}, {"method_name": "arrayElementVarHandle", "method_sig": "public static VarHandle arrayElementVarHandle (Class<?> arrayClass)\n                                       throws IllegalArgumentException", "description": "Produces a VarHandle giving access to elements of an array of type\n arrayClass.  The VarHandle's variable type is the component type\n of arrayClass and the list of coordinate types is\n (arrayClass, int), where the int coordinate type\n corresponds to an argument that is an index into an array.\n \n Certain access modes of the returned VarHandle are unsupported under\n the following conditions:\n \nif the component type is anything other than byte,\n     short, char, int, long,\n     float, or double then numeric atomic update access\n     modes are unsupported.\n if the field type is anything other than boolean,\n     byte, short, char, int or\n     long then bitwise atomic update access modes are\n     unsupported.\n \n\n If the component type is float or double then numeric\n and atomic update access modes compare values using their bitwise\n representation (see Float.floatToRawIntBits(float) and\n Double.doubleToRawLongBits(double), respectively).\n\n  When the returned VarHandle is invoked,\n the array reference and array index are checked.\n A NullPointerException will be thrown if the array reference\n is null and an ArrayIndexOutOfBoundsException will be\n thrown if the index is negative or if it is greater than or equal to\n the length of the array."}, {"method_name": "byteArrayViewVarHandle", "method_sig": "public static VarHandle byteArrayViewVarHandle (Class<?> viewArrayClass,\n                                               ByteOrder byteOrder)\n                                        throws IllegalArgumentException", "description": "Produces a VarHandle giving access to elements of a byte[] array\n viewed as if it were a different primitive array type, such as\n int[] or long[].\n The VarHandle's variable type is the component type of\n viewArrayClass and the list of coordinate types is\n (byte[], int), where the int coordinate type\n corresponds to an argument that is an index into a byte[] array.\n The returned VarHandle accesses bytes at an index in a byte[]\n array, composing bytes to or from a value of the component type of\n viewArrayClass according to the given endianness.\n \n The supported component types (variables types) are short,\n char, int, long, float and\n double.\n \n Access of bytes at a given index will result in an\n IndexOutOfBoundsException if the index is less than 0\n or greater than the byte[] array length minus the size (in bytes)\n of T.\n \n Access of bytes at an index may be aligned or misaligned for T,\n with respect to the underlying memory address, A say, associated\n with the array and index.\n If access is misaligned then access for anything other than the\n get and set access modes will result in an\n IllegalStateException.  In such cases atomic access is only\n guaranteed with respect to the largest power of two that divides the GCD\n of A and the size (in bytes) of T.\n If access is aligned then following access modes are supported and are\n guaranteed to support atomic access:\n \nread write access modes for all T, with the exception of\n     access modes get and set for long and\n     double on 32-bit platforms.\n atomic update access modes for int, long,\n     float or double.\n     (Future major platform releases of the JDK may support additional\n     types for certain currently unsupported access modes.)\n numeric atomic update access modes for int and long.\n     (Future major platform releases of the JDK may support additional\n     numeric types for certain currently unsupported access modes.)\n bitwise atomic update access modes for int and long.\n     (Future major platform releases of the JDK may support additional\n     numeric types for certain currently unsupported access modes.)\n \n\n Misaligned access, and therefore atomicity guarantees, may be determined\n for byte[] arrays without operating on a specific array.  Given\n an index, T and it's corresponding boxed type,\n T_BOX, misalignment may be determined as follows:\n \n int sizeOfT = T_BOX.BYTES;  // size in bytes of T\n int misalignedAtZeroIndex = ByteBuffer.wrap(new byte[0]).\n     alignmentOffset(0, sizeOfT);\n int misalignedAtIndex = (misalignedAtZeroIndex + index) % sizeOfT;\n boolean isMisaligned = misalignedAtIndex != 0;\n \n\n If the variable type is float or double then atomic\n update access modes compare values using their bitwise representation\n (see Float.floatToRawIntBits(float) and\n Double.doubleToRawLongBits(double), respectively)."}, {"method_name": "byteBufferViewVarHandle", "method_sig": "public static VarHandle byteBufferViewVarHandle (Class<?> viewArrayClass,\n                                                ByteOrder byteOrder)\n                                         throws IllegalArgumentException", "description": "Produces a VarHandle giving access to elements of a ByteBuffer\n viewed as if it were an array of elements of a different primitive\n component type to that of byte, such as int[] or\n long[].\n The VarHandle's variable type is the component type of\n viewArrayClass and the list of coordinate types is\n (ByteBuffer, int), where the int coordinate type\n corresponds to an argument that is an index into a byte[] array.\n The returned VarHandle accesses bytes at an index in a\n ByteBuffer, composing bytes to or from a value of the component\n type of viewArrayClass according to the given endianness.\n \n The supported component types (variables types) are short,\n char, int, long, float and\n double.\n \n Access will result in a ReadOnlyBufferException for anything\n other than the read access modes if the ByteBuffer is read-only.\n \n Access of bytes at a given index will result in an\n IndexOutOfBoundsException if the index is less than 0\n or greater than the ByteBuffer limit minus the size (in bytes) of\n T.\n \n Access of bytes at an index may be aligned or misaligned for T,\n with respect to the underlying memory address, A say, associated\n with the ByteBuffer and index.\n If access is misaligned then access for anything other than the\n get and set access modes will result in an\n IllegalStateException.  In such cases atomic access is only\n guaranteed with respect to the largest power of two that divides the GCD\n of A and the size (in bytes) of T.\n If access is aligned then following access modes are supported and are\n guaranteed to support atomic access:\n \nread write access modes for all T, with the exception of\n     access modes get and set for long and\n     double on 32-bit platforms.\n atomic update access modes for int, long,\n     float or double.\n     (Future major platform releases of the JDK may support additional\n     types for certain currently unsupported access modes.)\n numeric atomic update access modes for int and long.\n     (Future major platform releases of the JDK may support additional\n     numeric types for certain currently unsupported access modes.)\n bitwise atomic update access modes for int and long.\n     (Future major platform releases of the JDK may support additional\n     numeric types for certain currently unsupported access modes.)\n \n\n Misaligned access, and therefore atomicity guarantees, may be determined\n for a ByteBuffer, bb (direct or otherwise), an\n index, T and it's corresponding boxed type,\n T_BOX, as follows:\n \n int sizeOfT = T_BOX.BYTES;  // size in bytes of T\n ByteBuffer bb = ...\n int misalignedAtIndex = bb.alignmentOffset(index, sizeOfT);\n boolean isMisaligned = misalignedAtIndex != 0;\n \n\n If the variable type is float or double then atomic\n update access modes compare values using their bitwise representation\n (see Float.floatToRawIntBits(float) and\n Double.doubleToRawLongBits(double), respectively)."}, {"method_name": "spreadInvoker", "method_sig": "public static MethodHandle spreadInvoker (MethodType type,\n                                         int leadingArgCount)", "description": "Produces a method handle which will invoke any method handle of the\n given type, with a given number of trailing arguments replaced by\n a single trailing Object[] array.\n The resulting invoker will be a method handle with the following\n arguments:\n \na single MethodHandle target\n zero or more leading values (counted by leadingArgCount)\n an Object[] array containing trailing arguments\n \n\n The invoker will invoke its target like a call to invoke with\n the indicated type.\n That is, if the target is exactly of the given type, it will behave\n like invokeExact; otherwise it behave as if asType\n is used to convert the target to the required type.\n \n The type of the returned invoker will not be the given type, but rather\n will have all parameters except the first leadingArgCount\n replaced by a single array of type Object[], which will be\n the final parameter.\n \n Before invoking its target, the invoker will spread the final array, apply\n reference casts as necessary, and unbox and widen primitive arguments.\n If, when the invoker is called, the supplied array argument does\n not have the correct number of elements, the invoker will throw\n an IllegalArgumentException instead of invoking the target.\n \n This method is equivalent to the following code (though it may be more efficient):\n \nMethodHandle invoker = MethodHandles.invoker(type);\nint spreadArgCount = type.parameterCount() - leadingArgCount;\ninvoker = invoker.asSpreader(Object[].class, spreadArgCount);\nreturn invoker;\n \n This method throws no reflective or security exceptions."}, {"method_name": "exactInvoker", "method_sig": "public static MethodHandle exactInvoker (MethodType type)", "description": "Produces a special invoker method handle which can be used to\n invoke any method handle of the given type, as if by invokeExact.\n The resulting invoker will have a type which is\n exactly equal to the desired type, except that it will accept\n an additional leading argument of type MethodHandle.\n \n This method is equivalent to the following code (though it may be more efficient):\n publicLookup().findVirtual(MethodHandle.class, \"invokeExact\", type)\n\nDiscussion:\n Invoker method handles can be useful when working with variable method handles\n of unknown types.\n For example, to emulate an invokeExact call to a variable method\n handle M, extract its type T,\n look up the invoker method X for T,\n and call the invoker method, as X.invoke(T, A...).\n (It would not work to call X.invokeExact, since the type T\n is unknown.)\n If spreading, collecting, or other argument transformations are required,\n they can be applied once to the invoker X and reused on many M\n method handle values, as long as they are compatible with the type of X.\n \n(Note:  The invoker method is not available via the Core Reflection API.\n An attempt to call java.lang.reflect.Method.invoke\n on the declared invokeExact or invoke method will raise an\n UnsupportedOperationException.)\n\n This method throws no reflective or security exceptions."}, {"method_name": "invoker", "method_sig": "public static MethodHandle invoker (MethodType type)", "description": "Produces a special invoker method handle which can be used to\n invoke any method handle compatible with the given type, as if by invoke.\n The resulting invoker will have a type which is\n exactly equal to the desired type, except that it will accept\n an additional leading argument of type MethodHandle.\n \n Before invoking its target, if the target differs from the expected type,\n the invoker will apply reference casts as\n necessary and box, unbox, or widen primitive values, as if by asType.\n Similarly, the return value will be converted as necessary.\n If the target is a variable arity method handle,\n the required arity conversion will be made, again as if by asType.\n \n This method is equivalent to the following code (though it may be more efficient):\n publicLookup().findVirtual(MethodHandle.class, \"invoke\", type)\n\nDiscussion:\n A general method type is one which\n mentions only Object arguments and return values.\n An invoker for such a type is capable of calling any method handle\n of the same arity as the general type.\n \n(Note:  The invoker method is not available via the Core Reflection API.\n An attempt to call java.lang.reflect.Method.invoke\n on the declared invokeExact or invoke method will raise an\n UnsupportedOperationException.)\n\n This method throws no reflective or security exceptions."}, {"method_name": "varHandleExactInvoker", "method_sig": "public static MethodHandle varHandleExactInvoker (VarHandle.AccessMode accessMode,\n                                                 MethodType type)", "description": "Produces a special invoker method handle which can be used to\n invoke a signature-polymorphic access mode method on any VarHandle whose\n associated access mode type is compatible with the given type.\n The resulting invoker will have a type which is exactly equal to the\n desired given type, except that it will accept an additional leading\n argument of type VarHandle."}, {"method_name": "varHandleInvoker", "method_sig": "public static MethodHandle varHandleInvoker (VarHandle.AccessMode accessMode,\n                                            MethodType type)", "description": "Produces a special invoker method handle which can be used to\n invoke a signature-polymorphic access mode method on any VarHandle whose\n associated access mode type is compatible with the given type.\n The resulting invoker will have a type which is exactly equal to the\n desired given type, except that it will accept an additional leading\n argument of type VarHandle.\n \n Before invoking its target, if the access mode type differs from the\n desired given type, the invoker will apply reference casts as necessary\n and box, unbox, or widen primitive values, as if by\n asType.  Similarly, the return value will be\n converted as necessary.\n \n This method is equivalent to the following code (though it may be more\n efficient): publicLookup().findVirtual(VarHandle.class, accessMode.name(), type)"}, {"method_name": "explicitCastArguments", "method_sig": "public static MethodHandle explicitCastArguments (MethodHandle target,\n                                                 MethodType newType)", "description": "Produces a method handle which adapts the type of the\n given method handle to a new type by pairwise argument and return type conversion.\n The original type and new type must have the same number of arguments.\n The resulting method handle is guaranteed to report a type\n which is equal to the desired new type.\n \n If the original type and new type are equal, returns target.\n \n The same conversions are allowed as for MethodHandle.asType,\n and some additional conversions are also applied if those conversions fail.\n Given types T0, T1, one of the following conversions is applied\n if possible, before or instead of any conversions done by asType:\n \nIf T0 and T1 are references, and T1 is an interface type,\n     then the value of type T0 is passed as a T1 without a cast.\n     (This treatment of interfaces follows the usage of the bytecode verifier.)\n If T0 is boolean and T1 is another primitive,\n     the boolean is converted to a byte value, 1 for true, 0 for false.\n     (This treatment follows the usage of the bytecode verifier.)\n If T1 is boolean and T0 is another primitive,\n     T0 is converted to byte via Java casting conversion (JLS 5.5),\n     and the low order bit of the result is tested, as if by (x & 1) != 0.\n If T0 and T1 are primitives other than boolean,\n     then a Java casting conversion (JLS 5.5) is applied.\n     (Specifically, T0 will convert to T1 by\n     widening and/or narrowing.)\n If T0 is a reference and T1 a primitive, an unboxing\n     conversion will be applied at runtime, possibly followed\n     by a Java casting conversion (JLS 5.5) on the primitive value,\n     possibly followed by a conversion from byte to boolean by testing\n     the low-order bit.\n If T0 is a reference and T1 a primitive,\n     and if the reference is null at runtime, a zero value is introduced.\n "}, {"method_name": "permuteArguments", "method_sig": "public static MethodHandle permuteArguments (MethodHandle target,\n                                            MethodType newType,\n                                            int... reorder)", "description": "Produces a method handle which adapts the calling sequence of the\n given method handle to a new type, by reordering the arguments.\n The resulting method handle is guaranteed to report a type\n which is equal to the desired new type.\n \n The given array controls the reordering.\n Call #I the number of incoming parameters (the value\n newType.parameterCount(), and call #O the number\n of outgoing parameters (the value target.type().parameterCount()).\n Then the length of the reordering array must be #O,\n and each element must be a non-negative number less than #I.\n For every N less than #O, the N-th\n outgoing argument will be taken from the I-th incoming\n argument, where I is reorder[N].\n \n No argument or return value conversions are applied.\n The type of each incoming argument, as determined by newType,\n must be identical to the type of the corresponding outgoing parameter\n or parameters in the target method handle.\n The return type of newType must be identical to the return\n type of the original target.\n \n The reordering array need not specify an actual permutation.\n An incoming argument will be duplicated if its index appears\n more than once in the array, and an incoming argument will be dropped\n if its index does not appear in the array.\n As in the case of dropArguments,\n incoming arguments which are not mentioned in the reordering array\n may be of any type, as determined only by newType.\n \nimport static java.lang.invoke.MethodHandles.*;\nimport static java.lang.invoke.MethodType.*;\n...\nMethodType intfn1 = methodType(int.class, int.class);\nMethodType intfn2 = methodType(int.class, int.class, int.class);\nMethodHandle sub = ... (int x, int y) -> (x-y) ...;\nassert(sub.type().equals(intfn2));\nMethodHandle sub1 = permuteArguments(sub, intfn2, 0, 1);\nMethodHandle rsub = permuteArguments(sub, intfn2, 1, 0);\nassert((int)rsub.invokeExact(1, 100) == 99);\nMethodHandle add = ... (int x, int y) -> (x+y) ...;\nassert(add.type().equals(intfn2));\nMethodHandle twice = permuteArguments(add, intfn1, 0, 0);\nassert(twice.type().equals(intfn1));\nassert((int)twice.invokeExact(21) == 42);\n \n\nNote: The resulting adapter is never a variable-arity method handle, even if the original target method handle was."}, {"method_name": "constant", "method_sig": "public static MethodHandle constant (Class<?> type,\n                                    Object value)", "description": "Produces a method handle of the requested return type which returns the given\n constant value every time it is invoked.\n \n Before the method handle is returned, the passed-in value is converted to the requested type.\n If the requested type is primitive, widening primitive conversions are attempted,\n else reference conversions are attempted.\n The returned method handle is equivalent to identity(type).bindTo(value)."}, {"method_name": "identity", "method_sig": "public static MethodHandle identity (Class<?> type)", "description": "Produces a method handle which returns its sole argument when invoked."}, {"method_name": "zero", "method_sig": "public static MethodHandle zero (Class<?> type)", "description": "Produces a constant method handle of the requested return type which\n returns the default value for that type every time it is invoked.\n The resulting constant method handle will have no side effects.\n The returned method handle is equivalent to empty(methodType(type)).\n It is also equivalent to explicitCastArguments(constant(Object.class, null), methodType(type)),\n since explicitCastArguments converts null to default values."}, {"method_name": "empty", "method_sig": "public static MethodHandle empty (MethodType type)", "description": "Produces a method handle of the requested type which ignores any arguments, does nothing,\n and returns a suitable default depending on the return type.\n That is, it returns a zero primitive value, a null, or void.\n The returned method handle is equivalent to\n dropArguments(zero(type.returnType()), 0, type.parameterList())."}, {"method_name": "insertArguments", "method_sig": "public static MethodHandle insertArguments (MethodHandle target,\n                                           int pos,\n                                           Object... values)", "description": "Provides a target method handle with one or more bound arguments\n in advance of the method handle's invocation.\n The formal parameters to the target corresponding to the bound\n arguments are called bound parameters.\n Returns a new method handle which saves away the bound arguments.\n When it is invoked, it receives arguments for any non-bound parameters,\n binds the saved arguments to their corresponding parameters,\n and calls the original target.\n \n The type of the new method handle will drop the types for the bound\n parameters from the original target type, since the new method handle\n will no longer require those arguments to be supplied by its callers.\n \n Each given argument object must match the corresponding bound parameter type.\n If a bound parameter type is a primitive, the argument object\n must be a wrapper, and will be unboxed to produce the primitive value.\n \n The pos argument selects which parameters are to be bound.\n It may range between zero and N-L (inclusively),\n where N is the arity of the target method handle\n and L is the length of the values array.\n \nNote: The resulting adapter is never a variable-arity method handle, even if the original target method handle was."}, {"method_name": "dropArguments", "method_sig": "public static MethodHandle dropArguments (MethodHandle target,\n                                         int pos,\n                                         List<Class<?>> valueTypes)", "description": "Produces a method handle which will discard some dummy arguments\n before calling some other specified target method handle.\n The type of the new method handle will be the same as the target's type,\n except it will also include the dummy argument types,\n at some given position.\n \n The pos argument may range between zero and N,\n where N is the arity of the target.\n If pos is zero, the dummy arguments will precede\n the target's real arguments; if pos is N\n they will come after.\n \nExample:\n\nimport static java.lang.invoke.MethodHandles.*;\nimport static java.lang.invoke.MethodType.*;\n...\nMethodHandle cat = lookup().findVirtual(String.class,\n  \"concat\", methodType(String.class, String.class));\nassertEquals(\"xy\", (String) cat.invokeExact(\"x\", \"y\"));\nMethodType bigType = cat.type().insertParameterTypes(0, int.class, String.class);\nMethodHandle d0 = dropArguments(cat, 0, bigType.parameterList().subList(0,2));\nassertEquals(bigType, d0.type());\nassertEquals(\"yz\", (String) d0.invokeExact(123, \"x\", \"y\", \"z\"));\n \n\n This method is also equivalent to the following code:\n \n dropArguments(target, pos, valueTypes.toArray(new Class[0]))\n "}, {"method_name": "dropArguments", "method_sig": "public static MethodHandle dropArguments (MethodHandle target,\n                                         int pos,\n                                         Class<?>... valueTypes)", "description": "Produces a method handle which will discard some dummy arguments\n before calling some other specified target method handle.\n The type of the new method handle will be the same as the target's type,\n except it will also include the dummy argument types,\n at some given position.\n \n The pos argument may range between zero and N,\n where N is the arity of the target.\n If pos is zero, the dummy arguments will precede\n the target's real arguments; if pos is N\n they will come after."}, {"method_name": "dropArgumentsToMatch", "method_sig": "public static MethodHandle dropArgumentsToMatch (MethodHandle target,\n                                                int skip,\n                                                List<Class<?>> newTypes,\n                                                int pos)", "description": "Adapts a target method handle to match the given parameter type list. If necessary, adds dummy arguments. Some\n leading parameters can be skipped before matching begins. The remaining types in the target's parameter\n type list must be a sub-list of the newTypes type list at the starting position pos. The\n resulting handle will have the target handle's parameter type list, with any non-matching parameter types (before\n or after the matching sub-list) inserted in corresponding positions of the target's original parameters, as if by\n dropArguments(MethodHandle, int, Class[]).\n \n The resulting handle will have the same return type as the target handle.\n \n In more formal terms, assume these two type lists:\nThe target handle has the parameter type list S..., M..., with as many types in S as\n indicated by skip. The M types are those that are supposed to match part of the given type list,\n newTypes.\n The newTypes list contains types P..., M..., A..., with as many types in P as\n indicated by pos. The M types are precisely those that the M types in the target handle's\n parameter type list are supposed to match. The types in A are additional types found after the matching\n sub-list.\n \n Given these assumptions, the result of an invocation of dropArgumentsToMatch will have the parameter type\n list S..., P..., M..., A..., with the P and A types inserted as if by\n dropArguments(MethodHandle, int, Class[])."}, {"method_name": "filterArguments", "method_sig": "public static MethodHandle filterArguments (MethodHandle target,\n                                           int pos,\n                                           MethodHandle... filters)", "description": "Adapts a target method handle by pre-processing\n one or more of its arguments, each with its own unary filter function,\n and then calling the target with each pre-processed argument\n replaced by the result of its corresponding filter function.\n \n The pre-processing is performed by one or more method handles,\n specified in the elements of the filters array.\n The first element of the filter array corresponds to the pos\n argument of the target, and so on in sequence.\n The filter functions are invoked in left to right order.\n \n Null arguments in the array are treated as identity functions,\n and the corresponding arguments left unchanged.\n (If there are no non-null elements in the array, the original target is returned.)\n Each filter is applied to the corresponding argument of the adapter.\n \n If a filter F applies to the Nth argument of\n the target, then F must be a method handle which\n takes exactly one argument.  The type of F's sole argument\n replaces the corresponding argument type of the target\n in the resulting adapted method handle.\n The return type of F must be identical to the corresponding\n parameter type of the target.\n \n It is an error if there are elements of filters\n (null or not)\n which do not correspond to argument positions in the target.\n Example:\n\nimport static java.lang.invoke.MethodHandles.*;\nimport static java.lang.invoke.MethodType.*;\n...\nMethodHandle cat = lookup().findVirtual(String.class,\n  \"concat\", methodType(String.class, String.class));\nMethodHandle upcase = lookup().findVirtual(String.class,\n  \"toUpperCase\", methodType(String.class));\nassertEquals(\"xy\", (String) cat.invokeExact(\"x\", \"y\"));\nMethodHandle f0 = filterArguments(cat, 0, upcase);\nassertEquals(\"Xy\", (String) f0.invokeExact(\"x\", \"y\")); // Xy\nMethodHandle f1 = filterArguments(cat, 1, upcase);\nassertEquals(\"xY\", (String) f1.invokeExact(\"x\", \"y\")); // xY\nMethodHandle f2 = filterArguments(cat, 0, upcase, upcase);\nassertEquals(\"XY\", (String) f2.invokeExact(\"x\", \"y\")); // XY\n \nHere is pseudocode for the resulting adapter. In the code, T\n denotes the return type of both the target and resulting adapter.\n P/p and B/b represent the types and values\n of the parameters and arguments that precede and follow the filter position\n pos, respectively. A[i]/a[i] stand for the types and\n values of the filtered parameters and arguments; they also represent the\n return types of the filter[i] handles. The latter accept arguments\n v[i] of type V[i], which also appear in the signature of\n the resulting adapter.\n \n T target(P... p, A[i]... a[i], B... b);\n A[i] filter[i](V[i]);\n T adapter(P... p, V[i]... v[i], B... b) {\n   return target(p..., filter[i](v[i])..., b...);\n }\n \n\nNote: The resulting adapter is never a variable-arity method handle, even if the original target method handle was."}, {"method_name": "collectArguments", "method_sig": "public static MethodHandle collectArguments (MethodHandle target,\n                                            int pos,\n                                            MethodHandle filter)", "description": "Adapts a target method handle by pre-processing\n a sub-sequence of its arguments with a filter (another method handle).\n The pre-processed arguments are replaced by the result (if any) of the\n filter function.\n The target is then called on the modified (usually shortened) argument list.\n \n If the filter returns a value, the target must accept that value as\n its argument in position pos, preceded and/or followed by\n any arguments not passed to the filter.\n If the filter returns void, the target must accept all arguments\n not passed to the filter.\n No arguments are reordered, and a result returned from the filter\n replaces (in order) the whole subsequence of arguments originally\n passed to the adapter.\n \n The argument types (if any) of the filter\n replace zero or one argument types of the target, at position pos,\n in the resulting adapted method handle.\n The return type of the filter (if any) must be identical to the\n argument type of the target at position pos, and that target argument\n is supplied by the return value of the filter.\n \n In all cases, pos must be greater than or equal to zero, and\n pos must also be less than or equal to the target's arity.\n Example:\n\nimport static java.lang.invoke.MethodHandles.*;\nimport static java.lang.invoke.MethodType.*;\n...\nMethodHandle deepToString = publicLookup()\n  .findStatic(Arrays.class, \"deepToString\", methodType(String.class, Object[].class));\n\nMethodHandle ts1 = deepToString.asCollector(String[].class, 1);\nassertEquals(\"[strange]\", (String) ts1.invokeExact(\"strange\"));\n\nMethodHandle ts2 = deepToString.asCollector(String[].class, 2);\nassertEquals(\"[up, down]\", (String) ts2.invokeExact(\"up\", \"down\"));\n\nMethodHandle ts3 = deepToString.asCollector(String[].class, 3);\nMethodHandle ts3_ts2 = collectArguments(ts3, 1, ts2);\nassertEquals(\"[top, [up, down], strange]\",\n             (String) ts3_ts2.invokeExact(\"top\", \"up\", \"down\", \"strange\"));\n\nMethodHandle ts3_ts2_ts1 = collectArguments(ts3_ts2, 3, ts1);\nassertEquals(\"[top, [up, down], [strange]]\",\n             (String) ts3_ts2_ts1.invokeExact(\"top\", \"up\", \"down\", \"strange\"));\n\nMethodHandle ts3_ts2_ts3 = collectArguments(ts3_ts2, 1, ts3);\nassertEquals(\"[top, [[up, down, strange], charm], bottom]\",\n             (String) ts3_ts2_ts3.invokeExact(\"top\", \"up\", \"down\", \"strange\", \"charm\", \"bottom\"));\n \nHere is pseudocode for the resulting adapter. In the code, T\n represents the return type of the target and resulting adapter.\n V/v stand for the return type and value of the\n filter, which are also found in the signature and arguments of\n the target, respectively, unless V is void.\n A/a and C/c represent the parameter types\n and values preceding and following the collection position, pos,\n in the target's signature. They also turn up in the resulting\n adapter's signature and arguments, where they surround\n B/b, which represent the parameter types and arguments\n to the filter (if any).\n \n T target(A...,V,C...);\n V filter(B...);\n T adapter(A... a,B... b,C... c) {\n   V v = filter(b...);\n   return target(a...,v,c...);\n }\n // and if the filter has no arguments:\n T target2(A...,V,C...);\n V filter2();\n T adapter2(A... a,C... c) {\n   V v = filter2();\n   return target2(a...,v,c...);\n }\n // and if the filter has a void return:\n T target3(A...,C...);\n void filter3(B...);\n T adapter3(A... a,B... b,C... c) {\n   filter3(b...);\n   return target3(a...,c...);\n }\n \n\n A collection adapter collectArguments(mh, 0, coll) is equivalent to\n one which first \"folds\" the affected arguments, and then drops them, in separate\n steps as follows:\n \n mh = MethodHandles.dropArguments(mh, 1, coll.type().parameterList()); //step 2\n mh = MethodHandles.foldArguments(mh, coll); //step 1\n \n If the target method handle consumes no arguments besides than the result\n (if any) of the filter coll, then collectArguments(mh, 0, coll)\n is equivalent to filterReturnValue(coll, mh).\n If the filter method handle coll consumes one argument and produces\n a non-void result, then collectArguments(mh, N, coll)\n is equivalent to filterArguments(mh, N, coll).\n Other equivalences are possible but would require argument permutation.\n \nNote: The resulting adapter is never a variable-arity method handle, even if the original target method handle was."}, {"method_name": "filterReturnValue", "method_sig": "public static MethodHandle filterReturnValue (MethodHandle target,\n                                             MethodHandle filter)", "description": "Adapts a target method handle by post-processing\n its return value (if any) with a filter (another method handle).\n The result of the filter is returned from the adapter.\n \n If the target returns a value, the filter must accept that value as\n its only argument.\n If the target returns void, the filter must accept no arguments.\n \n The return type of the filter\n replaces the return type of the target\n in the resulting adapted method handle.\n The argument type of the filter (if any) must be identical to the\n return type of the target.\n Example:\n\nimport static java.lang.invoke.MethodHandles.*;\nimport static java.lang.invoke.MethodType.*;\n...\nMethodHandle cat = lookup().findVirtual(String.class,\n  \"concat\", methodType(String.class, String.class));\nMethodHandle length = lookup().findVirtual(String.class,\n  \"length\", methodType(int.class));\nSystem.out.println((String) cat.invokeExact(\"x\", \"y\")); // xy\nMethodHandle f0 = filterReturnValue(cat, length);\nSystem.out.println((int) f0.invokeExact(\"x\", \"y\")); // 2\n \nHere is pseudocode for the resulting adapter. In the code,\n T/t represent the result type and value of the\n target; V, the result type of the filter; and\n A/a, the types and values of the parameters and arguments\n of the target as well as the resulting adapter.\n \n T target(A...);\n V filter(T);\n V adapter(A... a) {\n   T t = target(a...);\n   return filter(t);\n }\n // and if the target has a void return:\n void target2(A...);\n V filter2();\n V adapter2(A... a) {\n   target2(a...);\n   return filter2();\n }\n // and if the filter has a void return:\n T target3(A...);\n void filter3(V);\n void adapter3(A... a) {\n   T t = target3(a...);\n   filter3(t);\n }\n \n\nNote: The resulting adapter is never a variable-arity method handle, even if the original target method handle was."}, {"method_name": "foldArguments", "method_sig": "public static MethodHandle foldArguments (MethodHandle target,\n                                         MethodHandle combiner)", "description": "Adapts a target method handle by pre-processing\n some of its arguments, and then calling the target with\n the result of the pre-processing, inserted into the original\n sequence of arguments.\n \n The pre-processing is performed by combiner, a second method handle.\n Of the arguments passed to the adapter, the first N arguments\n are copied to the combiner, which is then called.\n (Here, N is defined as the parameter count of the combiner.)\n After this, control passes to the target, with any result\n from the combiner inserted before the original N incoming\n arguments.\n \n If the combiner returns a value, the first parameter type of the target\n must be identical with the return type of the combiner, and the next\n N parameter types of the target must exactly match the parameters\n of the combiner.\n \n If the combiner has a void return, no result will be inserted,\n and the first N parameter types of the target\n must exactly match the parameters of the combiner.\n \n The resulting adapter is the same type as the target, except that the\n first parameter type is dropped,\n if it corresponds to the result of the combiner.\n \n (Note that dropArguments can be used to remove any arguments\n that either the combiner or the target does not wish to receive.\n If some of the incoming arguments are destined only for the combiner,\n consider using asCollector instead, since those\n arguments will not need to be live on the stack on entry to the\n target.)\n Example:\n\nimport static java.lang.invoke.MethodHandles.*;\nimport static java.lang.invoke.MethodType.*;\n...\nMethodHandle trace = publicLookup().findVirtual(java.io.PrintStream.class,\n  \"println\", methodType(void.class, String.class))\n    .bindTo(System.out);\nMethodHandle cat = lookup().findVirtual(String.class,\n  \"concat\", methodType(String.class, String.class));\nassertEquals(\"boojum\", (String) cat.invokeExact(\"boo\", \"jum\"));\nMethodHandle catTrace = foldArguments(cat, trace);\n// also prints \"boo\":\nassertEquals(\"boojum\", (String) catTrace.invokeExact(\"boo\", \"jum\"));\n \nHere is pseudocode for the resulting adapter. In the code, T\n represents the result type of the target and resulting adapter.\n V/v represent the type and value of the parameter and argument\n of target that precedes the folding position; V also is\n the result type of the combiner. A/a denote the\n types and values of the N parameters and arguments at the folding\n position. B/b represent the types and values of the\n target parameters and arguments that follow the folded parameters\n and arguments.\n \n // there are N arguments in A...\n T target(V, A[N]..., B...);\n V combiner(A...);\n T adapter(A... a, B... b) {\n   V v = combiner(a...);\n   return target(v, a..., b...);\n }\n // and if the combiner has a void return:\n T target2(A[N]..., B...);\n void combiner2(A...);\n T adapter2(A... a, B... b) {\n   combiner2(a...);\n   return target2(a..., b...);\n }\n \n\nNote: The resulting adapter is never a variable-arity method handle, even if the original target method handle was."}, {"method_name": "foldArguments", "method_sig": "public static MethodHandle foldArguments (MethodHandle target,\n                                         int pos,\n                                         MethodHandle combiner)", "description": "Adapts a target method handle by pre-processing some of its arguments, starting at a given position, and then\n calling the target with the result of the pre-processing, inserted into the original sequence of arguments just\n before the folded arguments.\n \n This method is closely related to foldArguments(MethodHandle, MethodHandle), but allows to control the\n position in the parameter list at which folding takes place. The argument controlling this, pos, is a\n zero-based index. The aforementioned method foldArguments(MethodHandle, MethodHandle) assumes position\n 0."}, {"method_name": "guardWithTest", "method_sig": "public static MethodHandle guardWithTest (MethodHandle test,\n                                         MethodHandle target,\n                                         MethodHandle fallback)", "description": "Makes a method handle which adapts a target method handle,\n by guarding it with a test, a boolean-valued method handle.\n If the guard fails, a fallback handle is called instead.\n All three method handles must have the same corresponding\n argument and return types, except that the return type\n of the test must be boolean, and the test is allowed\n to have fewer arguments than the other two method handles.\n \n Here is pseudocode for the resulting adapter. In the code, T\n represents the uniform result type of the three involved handles;\n A/a, the types and values of the target\n parameters and arguments that are consumed by the test; and\n B/b, those types and values of the target\n parameters and arguments that are not consumed by the test.\n \n boolean test(A...);\n T target(A...,B...);\n T fallback(A...,B...);\n T adapter(A... a,B... b) {\n   if (test(a...))\n     return target(a..., b...);\n   else\n     return fallback(a..., b...);\n }\n \n Note that the test arguments (a... in the pseudocode) cannot\n be modified by execution of the test, and so are passed unchanged\n from the caller to the target or fallback as appropriate."}, {"method_name": "catchException", "method_sig": "public static MethodHandle catchException (MethodHandle target,\n                                          Class<? extends Throwable> exType,\n                                          MethodHandle handler)", "description": "Makes a method handle which adapts a target method handle,\n by running it inside an exception handler.\n If the target returns normally, the adapter returns that value.\n If an exception matching the specified type is thrown, the fallback\n handle is called instead on the exception, plus the original arguments.\n \n The target and handler must have the same corresponding\n argument and return types, except that handler may omit trailing arguments\n (similarly to the predicate in guardWithTest).\n Also, the handler must have an extra leading parameter of exType or a supertype.\n \n Here is pseudocode for the resulting adapter. In the code, T\n represents the return type of the target and handler,\n and correspondingly that of the resulting adapter; A/a,\n the types and values of arguments to the resulting handle consumed by\n handler; and B/b, those of arguments to the\n resulting handle discarded by handler.\n \n T target(A..., B...);\n T handler(ExType, A...);\n T adapter(A... a, B... b) {\n   try {\n     return target(a..., b...);\n   } catch (ExType ex) {\n     return handler(ex, a...);\n   }\n }\n \n Note that the saved arguments (a... in the pseudocode) cannot\n be modified by execution of the target, and so are passed unchanged\n from the caller to the handler, if the handler is invoked.\n \n The target and handler must return the same type, even if the handler\n always throws.  (This might happen, for instance, because the handler\n is simulating a finally clause).\n To create such a throwing handler, compose the handler creation logic\n with throwException,\n in order to create a method handle of the correct return type."}, {"method_name": "throwException", "method_sig": "public static MethodHandle throwException (Class<?> returnType,\n                                          Class<? extends Throwable> exType)", "description": "Produces a method handle which will throw exceptions of the given exType.\n The method handle will accept a single argument of exType,\n and immediately throw it as an exception.\n The method type will nominally specify a return of returnType.\n The return type may be anything convenient:  It doesn't matter to the\n method handle's behavior, since it will never return normally."}, {"method_name": "loop", "method_sig": "public static MethodHandle loop (MethodHandle[]... clauses)", "description": "Constructs a method handle representing a loop with several loop variables that are updated and checked upon each\n iteration. Upon termination of the loop due to one of the predicates, a corresponding finalizer is run and\n delivers the loop's result, which is the return value of the resulting handle.\n \n Intuitively, every loop is formed by one or more \"clauses\", each specifying a local iteration variable and/or a loop\n exit. Each iteration of the loop executes each clause in order. A clause can optionally update its iteration\n variable; it can also optionally perform a test and conditional loop exit. In order to express this logic in\n terms of method handles, each clause will specify up to four independent actions:\ninit: Before the loop executes, the initialization of an iteration variable v of type V.\n step: When a clause executes, an update step for the iteration variable v.\n pred: When a clause executes, a predicate execution to test for loop exit.\n fini: If a clause causes a loop exit, a finalizer execution to compute the loop's return value.\n \n The full sequence of all iteration variable types, in clause order, will be notated as (V...).\n The values themselves will be (v...).  When we speak of \"parameter lists\", we will usually\n be referring to types, but in some contexts (describing execution) the lists will be of actual values.\n \n Some of these clause parts may be omitted according to certain rules, and useful default behavior is provided in\n this case. See below for a detailed description.\n \nParameters optional everywhere:\n Each clause function is allowed but not required to accept a parameter for each iteration variable v.\n As an exception, the init functions cannot take any v parameters,\n because those values are not yet computed when the init functions are executed.\n Any clause function may neglect to take any trailing subsequence of parameters it is entitled to take.\n In fact, any clause function may take no arguments at all.\n \nLoop parameters:\n A clause function may take all the iteration variable values it is entitled to, in which case\n it may also take more trailing parameters. Such extra values are called loop parameters,\n with their types and values notated as (A...) and (a...).\n These become the parameters of the resulting loop handle, to be supplied whenever the loop is executed.\n (Since init functions do not accept iteration variables v, any parameter to an\n init function is automatically a loop parameter a.)\n As with iteration variables, clause functions are allowed but not required to accept loop parameters.\n These loop parameters act as loop-invariant values visible across the whole loop.\n \nParameters visible everywhere:\n Each non-init clause function is permitted to observe the entire loop state, because it can be passed the full\n list (v... a...) of current iteration variable values and incoming loop parameters.\n The init functions can observe initial pre-loop state, in the form (a...).\n Most clause functions will not need all of this information, but they will be formally connected to it\n as if by dropArguments(java.lang.invoke.MethodHandle, int, java.util.List<java.lang.Class<?>>).\n \n More specifically, we shall use the notation (V*) to express an arbitrary prefix of a full\n sequence (V...) (and likewise for (v*), (A*), (a*)).\n In that notation, the general form of an init function parameter list\n is (A*), and the general form of a non-init function parameter list is (V*) or (V... A*).\n \nChecking clause structure:\n Given a set of clauses, there is a number of checks and adjustments performed to connect all the parts of the\n loop. They are spelled out in detail in the steps below. In these steps, every occurrence of the word \"must\"\n corresponds to a place where IllegalArgumentException will be thrown if the required constraint is not\n met by the inputs to the loop combinator.\n \nEffectively identical sequences:\n\n A parameter list A is defined to be effectively identical to another parameter list B\n if A and B are identical, or if A is shorter and is identical with a proper prefix of B.\n When speaking of an unordered set of parameter lists, we say they the set is \"effectively identical\"\n as a whole if the set contains a longest list, and all members of the set are effectively identical to\n that longest list.\n For example, any set of type sequences of the form (V*) is effectively identical,\n and the same is true if more sequences of the form (V... A*) are added.\n \nStep 0: Determine clause structure.\nThe clause array (of type MethodHandle[][]) must be non-null and contain at least one element.\n The clause array may not contain nulls or sub-arrays longer than four elements.\n Clauses shorter than four elements are treated as if they were padded by null elements to length\n four. Padding takes place by appending elements to the array.\n Clauses with all nulls are disregarded.\n Each clause is treated as a four-tuple of functions, called \"init\", \"step\", \"pred\", and \"fini\".\n \n\nStep 1A: Determine iteration variable types (V...).\nThe iteration variable type for each clause is determined using the clause's init and step return types.\n If both functions are omitted, there is no iteration variable for the corresponding clause (void is\n used as the type to indicate that). If one of them is omitted, the other's return type defines the clause's\n iteration variable type. If both are given, the common return type (they must be identical) defines the clause's\n iteration variable type.\n Form the list of return types (in clause order), omitting all occurrences of void.\n This list of types is called the \"iteration variable types\" ((V...)).\n \n\nStep 1B: Determine loop parameters (A...).\nExamine and collect init function parameter lists (which are of the form (A*)).\n Examine and collect the suffixes of the step, pred, and fini parameter lists, after removing the iteration variable types.\n (They must have the form (V... A*); collect the (A*) parts only.)\n Do not collect suffixes from step, pred, and fini parameter lists that do not begin with all the iteration variable types.\n (These types will checked in step 2, along with all the clause function types.)\n Omitted clause functions are ignored.  (Equivalently, they are deemed to have empty parameter lists.)\n All of the collected parameter lists must be effectively identical.\n The longest parameter list (which is necessarily unique) is called the \"external parameter list\" ((A...)).\n If there is no such parameter list, the external parameter list is taken to be the empty sequence.\n The combined list consisting of iteration variable types followed by the external parameter types is called\n the \"internal parameter list\".\n \n\nStep 1C: Determine loop return type.\nExamine fini function return types, disregarding omitted fini functions.\n If there are no fini functions, the loop return type is void.\n Otherwise, the common return type R of the fini functions (their return types must be identical) defines the loop return\n type.\n \n\nStep 1D: Check other types.\nThere must be at least one non-omitted pred function.\n Every non-omitted pred function must have a boolean return type.\n \n\nStep 2: Determine parameter lists.\nThe parameter list for the resulting loop handle will be the external parameter list (A...).\n The parameter list for init functions will be adjusted to the external parameter list.\n (Note that their parameter lists are already effectively identical to this list.)\n The parameter list for every non-omitted, non-init (step, pred, and fini) function must be\n effectively identical to the internal parameter list (V... A...).\n \n\nStep 3: Fill in omitted functions.\nIf an init function is omitted, use a default value for the clause's iteration variable\n type.\n If a step function is omitted, use an identity function of the clause's iteration\n variable type; insert dropped argument parameters before the identity function parameter for the non-void\n iteration variables of preceding clauses. (This will turn the loop variable into a local loop invariant.)\n If a pred function is omitted, use a constant true function. (This will keep the loop going, as far\n as this clause is concerned.  Note that in such cases the corresponding fini function is unreachable.)\n If a fini function is omitted, use a default value for the\n loop return type.\n \n\nStep 4: Fill in missing parameter types.\nAt this point, every init function parameter list is effectively identical to the external parameter list (A...),\n but some lists may be shorter. For every init function with a short parameter list, pad out the end of the list.\n At this point, every non-init function parameter list is effectively identical to the internal parameter\n list (V... A...), but some lists may be shorter. For every non-init function with a short parameter list,\n pad out the end of the list.\n Argument lists are padded out by dropping unused trailing arguments.\n \n\nFinal observations.\nAfter these steps, all clauses have been adjusted by supplying omitted functions and arguments.\n All init functions have a common parameter type list (A...), which the final loop handle will also have.\n All fini functions have a common return type R, which the final loop handle will also have.\n All non-init functions have a common parameter type list (V... A...), of\n (non-void) iteration variables V followed by loop parameters.\n Each pair of init and step functions agrees in their return type V.\n Each non-init function will be able to observe the current values (v...) of all iteration variables.\n Every function will be able to observe the incoming values (a...) of all loop parameters.\n \n\nExample. As a consequence of step 1A above, the loop combinator has the following property:\n \nGiven N clauses Cn = {null, Sn, Pn} with n = 1..N.\n Suppose predicate handles Pn are either null or have no parameters.\n (Only one Pn has to be non-null.)\n Suppose step handles Sn have signatures (B1..BX)Rn, for some constant X>=N.\n Suppose Q is the count of non-void types Rn, and (V1...VQ) is the sequence of those types.\n It must be that Vn == Bn for n = 1..min(X,Q).\n The parameter types Vn will be interpreted as loop-local state elements (V...).\n Any remaining types BQ+1..BX (if Q<X) will determine\n the resulting loop handle's parameter types (A...).\n \n In this example, the loop handle parameters (A...) were derived from the step functions,\n which is natural if most of the loop computation happens in the steps.  For some loops,\n the burden of computation might be heaviest in the pred functions, and so the pred functions\n might need to accept the loop parameter values.  For loops with complex exit logic, the fini\n functions might need to accept loop parameters, and likewise for loops with complex entry logic,\n where the init functions will need the extra parameters.  For such reasons, the rules for\n determining these parameters are as symmetric as possible, across all clause parts.\n In general, the loop parameters function as common invariant values across the whole\n loop, while the iteration variables function as common variant values, or (if there is\n no step function) as internal loop invariant temporaries.\n \nLoop execution.\nWhen the loop is called, the loop input values are saved in locals, to be passed to\n every clause function. These locals are loop invariant.\n Each init function is executed in clause order (passing the external arguments (a...))\n and the non-void values are saved (as the iteration variables (v...)) into locals.\n These locals will be loop varying (unless their steps behave as identity functions, as noted above).\n All function executions (except init functions) will be passed the internal parameter list, consisting of\n the non-void iteration values (v...) (in clause order) and then the loop inputs (a...)\n (in argument order).\n The step and pred functions are then executed, in clause order (step before pred), until a pred function\n returns false.\n The non-void result from a step function call is used to update the corresponding value in the\n sequence (v...) of loop variables.\n The updated value is immediately visible to all subsequent function calls.\n If a pred function returns false, the corresponding fini function is called, and the resulting value\n (of type R) is returned from the loop as a whole.\n If all the pred functions always return true, no fini function is ever invoked, and the loop cannot exit\n except by throwing an exception.\n \n\nUsage tips.\n\nAlthough each step function will receive the current values of all the loop variables,\n sometimes a step function only needs to observe the current value of its own variable.\n In that case, the step function may need to explicitly drop all preceding loop variables.\n This will require mentioning their types, in an expression like dropArguments(step, 0, V0.class, ...).\n Loop variables are not required to vary; they can be loop invariant.  A clause can create\n a loop invariant by a suitable init function with no step, pred, or fini function.  This may be\n useful to \"wire\" an incoming loop argument into the step or pred function of an adjacent loop variable.\n If some of the clause functions are virtual methods on an instance, the instance\n itself can be conveniently placed in an initial invariant loop \"variable\", using an initial clause\n like new MethodHandle[]{identity(ObjType.class)}.  In that case, the instance reference\n will be the first iteration variable value, and it will be easy to use virtual\n methods as clause parts, since all of them will take a leading instance reference matching that value.\n \n\n Here is pseudocode for the resulting loop handle. As above, V and v represent the types\n and values of loop variables; A and a represent arguments passed to the whole loop;\n and R is the common result type of all finalizers as well as of the resulting loop.\n \n V... init...(A...);\n boolean pred...(V..., A...);\n V... step...(V..., A...);\n R fini...(V..., A...);\n R loop(A... a) {\n   V... v... = init...(a...);\n   for (;;) {\n     for ((v, p, s, f) in (v..., pred..., step..., fini...)) {\n       v = s(v..., a...);\n       if (!p(v..., a...)) {\n         return f(v..., a...);\n       }\n     }\n   }\n }\n \n Note that the parameter type lists (V...) and (A...) have been expanded\n to their full length, even though individual clause functions may neglect to take them all.\n As noted above, missing parameters are filled in as if by dropArgumentsToMatch(MethodHandle, int, List, int)."}, {"method_name": "whileLoop", "method_sig": "public static MethodHandle whileLoop (MethodHandle init,\n                                     MethodHandle pred,\n                                     MethodHandle body)", "description": "Constructs a while loop from an initializer, a body, and a predicate.\n This is a convenience wrapper for the generic loop combinator.\n \n The pred handle describes the loop condition; and body, its body. The loop resulting from this\n method will, in each iteration, first evaluate the predicate and then execute its body (if the predicate\n evaluates to true).\n The loop will terminate once the predicate evaluates to false (the body will not be executed in this case).\n \n The init handle describes the initial value of an additional optional loop-local variable.\n In each iteration, this loop-local variable, if present, will be passed to the body\n and updated with the value returned from its invocation. The result of loop execution will be\n the final value of the additional loop-local variable (if present).\n \n The following rules hold for these argument handles:\nThe body handle must not be null; its type must be of the form\n (V A...)V, where V is non-void, or else (A...)void.\n (In the void case, we assign the type void to the name V,\n and we will write (V A...)V with the understanding that a void type V\n is quietly dropped from the parameter list, leaving (A...)V.)\n The parameter list (V A...) of the body is called the internal parameter list.\n It will constrain the parameter lists of the other loop parts.\n If the iteration variable type V is dropped from the internal parameter list, the resulting shorter\n list (A...) is called the external parameter list.\n The body return type V, if non-void, determines the type of an\n additional state variable of the loop.\n The body must both accept and return a value of this type V.\n If init is non-null, it must have return type V.\n Its parameter list (of some form (A*)) must be\n effectively identical\n to the external parameter list (A...).\n If init is null, the loop variable will be initialized to its\n default value.\n The pred handle must not be null.  It must have boolean as its return type.\n Its parameter list (either empty or of the form (V A*)) must be\n effectively identical to the internal parameter list.\n \n\n The resulting loop handle's result type and parameter signature are determined as follows:\nThe loop handle's result type is the result type V of the body.\n The loop handle's parameter types are the types (A...),\n from the external parameter list.\n \n\n Here is pseudocode for the resulting loop handle. In the code, V/v represent the type / value of\n the sole loop variable as well as the result type of the loop; and A/a, that of the argument\n passed to the loop.\n \n V init(A...);\n boolean pred(V, A...);\n V body(V, A...);\n V whileLoop(A... a...) {\n   V v = init(a...);\n   while (pred(v, a...)) {\n     v = body(v, a...);\n   }\n   return v;\n }\n "}, {"method_name": "doWhileLoop", "method_sig": "public static MethodHandle doWhileLoop (MethodHandle init,\n                                       MethodHandle body,\n                                       MethodHandle pred)", "description": "Constructs a do-while loop from an initializer, a body, and a predicate.\n This is a convenience wrapper for the generic loop combinator.\n \n The pred handle describes the loop condition; and body, its body. The loop resulting from this\n method will, in each iteration, first execute its body and then evaluate the predicate.\n The loop will terminate once the predicate evaluates to false after an execution of the body.\n \n The init handle describes the initial value of an additional optional loop-local variable.\n In each iteration, this loop-local variable, if present, will be passed to the body\n and updated with the value returned from its invocation. The result of loop execution will be\n the final value of the additional loop-local variable (if present).\n \n The following rules hold for these argument handles:\nThe body handle must not be null; its type must be of the form\n (V A...)V, where V is non-void, or else (A...)void.\n (In the void case, we assign the type void to the name V,\n and we will write (V A...)V with the understanding that a void type V\n is quietly dropped from the parameter list, leaving (A...)V.)\n The parameter list (V A...) of the body is called the internal parameter list.\n It will constrain the parameter lists of the other loop parts.\n If the iteration variable type V is dropped from the internal parameter list, the resulting shorter\n list (A...) is called the external parameter list.\n The body return type V, if non-void, determines the type of an\n additional state variable of the loop.\n The body must both accept and return a value of this type V.\n If init is non-null, it must have return type V.\n Its parameter list (of some form (A*)) must be\n effectively identical\n to the external parameter list (A...).\n If init is null, the loop variable will be initialized to its\n default value.\n The pred handle must not be null.  It must have boolean as its return type.\n Its parameter list (either empty or of the form (V A*)) must be\n effectively identical to the internal parameter list.\n \n\n The resulting loop handle's result type and parameter signature are determined as follows:\nThe loop handle's result type is the result type V of the body.\n The loop handle's parameter types are the types (A...),\n from the external parameter list.\n \n\n Here is pseudocode for the resulting loop handle. In the code, V/v represent the type / value of\n the sole loop variable as well as the result type of the loop; and A/a, that of the argument\n passed to the loop.\n \n V init(A...);\n boolean pred(V, A...);\n V body(V, A...);\n V doWhileLoop(A... a...) {\n   V v = init(a...);\n   do {\n     v = body(v, a...);\n   } while (pred(v, a...));\n   return v;\n }\n "}, {"method_name": "countedLoop", "method_sig": "public static MethodHandle countedLoop (MethodHandle iterations,\n                                       MethodHandle init,\n                                       MethodHandle body)", "description": "Constructs a loop that runs a given number of iterations.\n This is a convenience wrapper for the generic loop combinator.\n \n The number of iterations is determined by the iterations handle evaluation result.\n The loop counter i is an extra loop iteration variable of type int.\n It will be initialized to 0 and incremented by 1 in each iteration.\n \n If the body handle returns a non-void type V, a leading loop iteration variable\n of that type is also present.  This variable is initialized using the optional init handle,\n or to the default value of type V if that handle is null.\n \n In each iteration, the iteration variables are passed to an invocation of the body handle.\n A non-void value returned from the body (of type V) updates the leading\n iteration variable.\n The result of the loop handle execution will be the final V value of that variable\n (or void if there is no V variable).\n \n The following rules hold for the argument handles:\nThe iterations handle must not be null, and must return\n the type int, referred to here as I in parameter type lists.\n The body handle must not be null; its type must be of the form\n (V I A...)V, where V is non-void, or else (I A...)void.\n (In the void case, we assign the type void to the name V,\n and we will write (V I A...)V with the understanding that a void type V\n is quietly dropped from the parameter list, leaving (I A...)V.)\n The parameter list (V I A...) of the body contributes to a list\n of types called the internal parameter list.\n It will constrain the parameter lists of the other loop parts.\n As a special case, if the body contributes only V and I types,\n with no additional A types, then the internal parameter list is extended by\n the argument types A... of the iterations handle.\n If the iteration variable types (V I) are dropped from the internal parameter list, the resulting shorter\n list (A...) is called the external parameter list.\n The body return type V, if non-void, determines the type of an\n additional state variable of the loop.\n The body must both accept a leading parameter and return a value of this type V.\n If init is non-null, it must have return type V.\n Its parameter list (of some form (A*)) must be\n effectively identical\n to the external parameter list (A...).\n If init is null, the loop variable will be initialized to its\n default value.\n The parameter list of iterations (of some form (A*)) must be\n effectively identical to the external parameter list (A...).\n \n\n The resulting loop handle's result type and parameter signature are determined as follows:\nThe loop handle's result type is the result type V of the body.\n The loop handle's parameter types are the types (A...),\n from the external parameter list.\n \n\n Here is pseudocode for the resulting loop handle. In the code, V/v represent the type / value of\n the second loop variable as well as the result type of the loop; and A.../a... represent\n arguments passed to the loop.\n \n int iterations(A...);\n V init(A...);\n V body(V, int, A...);\n V countedLoop(A... a...) {\n   int end = iterations(a...);\n   V v = init(a...);\n   for (int i = 0; i < end; ++i) {\n     v = body(v, i, a...);\n   }\n   return v;\n }\n "}, {"method_name": "countedLoop", "method_sig": "public static MethodHandle countedLoop (MethodHandle start,\n                                       MethodHandle end,\n                                       MethodHandle init,\n                                       MethodHandle body)", "description": "Constructs a loop that counts over a range of numbers.\n This is a convenience wrapper for the generic loop combinator.\n \n The loop counter i is a loop iteration variable of type int.\n The start and end handles determine the start (inclusive) and end (exclusive)\n values of the loop counter.\n The loop counter will be initialized to the int value returned from the evaluation of the\n start handle and run to the value returned from end (exclusively) with a step width of 1.\n \n If the body handle returns a non-void type V, a leading loop iteration variable\n of that type is also present.  This variable is initialized using the optional init handle,\n or to the default value of type V if that handle is null.\n \n In each iteration, the iteration variables are passed to an invocation of the body handle.\n A non-void value returned from the body (of type V) updates the leading\n iteration variable.\n The result of the loop handle execution will be the final V value of that variable\n (or void if there is no V variable).\n \n The following rules hold for the argument handles:\nThe start and end handles must not be null, and must both return\n the common type int, referred to here as I in parameter type lists.\n The body handle must not be null; its type must be of the form\n (V I A...)V, where V is non-void, or else (I A...)void.\n (In the void case, we assign the type void to the name V,\n and we will write (V I A...)V with the understanding that a void type V\n is quietly dropped from the parameter list, leaving (I A...)V.)\n The parameter list (V I A...) of the body contributes to a list\n of types called the internal parameter list.\n It will constrain the parameter lists of the other loop parts.\n As a special case, if the body contributes only V and I types,\n with no additional A types, then the internal parameter list is extended by\n the argument types A... of the end handle.\n If the iteration variable types (V I) are dropped from the internal parameter list, the resulting shorter\n list (A...) is called the external parameter list.\n The body return type V, if non-void, determines the type of an\n additional state variable of the loop.\n The body must both accept a leading parameter and return a value of this type V.\n If init is non-null, it must have return type V.\n Its parameter list (of some form (A*)) must be\n effectively identical\n to the external parameter list (A...).\n If init is null, the loop variable will be initialized to its\n default value.\n The parameter list of start (of some form (A*)) must be\n effectively identical to the external parameter list (A...).\n Likewise, the parameter list of end must be effectively identical\n to the external parameter list.\n \n\n The resulting loop handle's result type and parameter signature are determined as follows:\nThe loop handle's result type is the result type V of the body.\n The loop handle's parameter types are the types (A...),\n from the external parameter list.\n \n\n Here is pseudocode for the resulting loop handle. In the code, V/v represent the type / value of\n the second loop variable as well as the result type of the loop; and A.../a... represent\n arguments passed to the loop.\n \n int start(A...);\n int end(A...);\n V init(A...);\n V body(V, int, A...);\n V countedLoop(A... a...) {\n   int e = end(a...);\n   int s = start(a...);\n   V v = init(a...);\n   for (int i = s; i < e; ++i) {\n     v = body(v, i, a...);\n   }\n   return v;\n }\n "}, {"method_name": "iteratedLoop", "method_sig": "public static MethodHandle iteratedLoop (MethodHandle iterator,\n                                        MethodHandle init,\n                                        MethodHandle body)", "description": "Constructs a loop that ranges over the values produced by an Iterator<T>.\n This is a convenience wrapper for the generic loop combinator.\n \n The iterator itself will be determined by the evaluation of the iterator handle.\n Each value it produces will be stored in a loop iteration variable of type T.\n \n If the body handle returns a non-void type V, a leading loop iteration variable\n of that type is also present.  This variable is initialized using the optional init handle,\n or to the default value of type V if that handle is null.\n \n In each iteration, the iteration variables are passed to an invocation of the body handle.\n A non-void value returned from the body (of type V) updates the leading\n iteration variable.\n The result of the loop handle execution will be the final V value of that variable\n (or void if there is no V variable).\n \n The following rules hold for the argument handles:\nThe body handle must not be null; its type must be of the form\n (V T A...)V, where V is non-void, or else (T A...)void.\n (In the void case, we assign the type void to the name V,\n and we will write (V T A...)V with the understanding that a void type V\n is quietly dropped from the parameter list, leaving (T A...)V.)\n The parameter list (V T A...) of the body contributes to a list\n of types called the internal parameter list.\n It will constrain the parameter lists of the other loop parts.\n As a special case, if the body contributes only V and T types,\n with no additional A types, then the internal parameter list is extended by\n the argument types A... of the iterator handle; if it is null the\n single type Iterable is added and constitutes the A... list.\n If the iteration variable types (V T) are dropped from the internal parameter list, the resulting shorter\n list (A...) is called the external parameter list.\n The body return type V, if non-void, determines the type of an\n additional state variable of the loop.\n The body must both accept a leading parameter and return a value of this type V.\n If init is non-null, it must have return type V.\n Its parameter list (of some form (A*)) must be\n effectively identical\n to the external parameter list (A...).\n If init is null, the loop variable will be initialized to its\n default value.\n If the iterator handle is non-null, it must have the return\n type java.util.Iterator or a subtype thereof.\n The iterator it produces when the loop is executed will be assumed\n to yield values which can be converted to type T.\n The parameter list of an iterator that is non-null (of some form (A*)) must be\n effectively identical to the external parameter list (A...).\n If iterator is null it defaults to a method handle which behaves\n like Iterable.iterator().  In that case, the internal parameter list\n (V T A...) must have at least one A type, and the default iterator\n handle parameter is adjusted to accept the leading A type, as if by\n the asType conversion method.\n The leading A type must be Iterable or a subtype thereof.\n This conversion step, done at loop construction time, must not throw a WrongMethodTypeException.\n \n\n The type T may be either a primitive or reference.\n Since type Iterator<T> is erased in the method handle representation to the raw type Iterator,\n the iteratedLoop combinator adjusts the leading argument type for body to Object\n as if by the asType conversion method.\n Therefore, if an iterator of the wrong type appears as the loop is executed, runtime exceptions may occur\n as the result of dynamic conversions performed by MethodHandle.asType(MethodType).\n \n The resulting loop handle's result type and parameter signature are determined as follows:\nThe loop handle's result type is the result type V of the body.\n The loop handle's parameter types are the types (A...),\n from the external parameter list.\n \n\n Here is pseudocode for the resulting loop handle. In the code, V/v represent the type / value of\n the loop variable as well as the result type of the loop; T/t, that of the elements of the\n structure the loop iterates over, and A.../a... represent arguments passed to the loop.\n \n Iterator<T> iterator(A...);  // defaults to Iterable::iterator\n V init(A...);\n V body(V,T,A...);\n V iteratedLoop(A... a...) {\n   Iterator<T> it = iterator(a...);\n   V v = init(a...);\n   while (it.hasNext()) {\n     T t = it.next();\n     v = body(v, t, a...);\n   }\n   return v;\n }\n "}, {"method_name": "tryFinally", "method_sig": "public static MethodHandle tryFinally (MethodHandle target,\n                                      MethodHandle cleanup)", "description": "Makes a method handle that adapts a target method handle by wrapping it in a try-finally block.\n Another method handle, cleanup, represents the functionality of the finally block. Any exception\n thrown during the execution of the target handle will be passed to the cleanup handle. The\n exception will be rethrown, unless cleanup handle throws an exception first.  The\n value returned from the cleanup handle's execution will be the result of the execution of the\n try-finally handle.\n \n The cleanup handle will be passed one or two additional leading arguments.\n The first is the exception thrown during the\n execution of the target handle, or null if no exception was thrown.\n The second is the result of the execution of the target handle, or, if it throws an exception,\n a null, zero, or false value of the required type is supplied as a placeholder.\n The second argument is not present if the target handle has a void return type.\n (Note that, except for argument type conversions, combinators represent void values in parameter lists\n by omitting the corresponding paradoxical arguments, not by inserting null or zero values.)\n \n The target and cleanup handles must have the same corresponding argument and return types, except\n that the cleanup handle may omit trailing arguments. Also, the cleanup handle must have one or\n two extra leading parameters:\na Throwable, which will carry the exception thrown by the target handle (if any); and\n a parameter of the same type as the return type of both target and cleanup, which will carry\n the result from the execution of the target handle.\n This parameter is not present if the target returns void.\n \n\n The pseudocode for the resulting adapter looks as follows. In the code, V represents the result type of\n the try/finally construct; A/a, the types and values of arguments to the resulting\n handle consumed by the cleanup; and B/b, those of arguments to the resulting handle discarded by\n the cleanup.\n \n V target(A..., B...);\n V cleanup(Throwable, V, A...);\n V adapter(A... a, B... b) {\n   V result = (zero value for V);\n   Throwable throwable = null;\n   try {\n     result = target(a..., b...);\n   } catch (Throwable t) {\n     throwable = t;\n     throw t;\n   } finally {\n     result = cleanup(throwable, result, a...);\n   }\n   return result;\n }\n \n\n Note that the saved arguments (a... in the pseudocode) cannot\n be modified by execution of the target, and so are passed unchanged\n from the caller to the cleanup, if it is invoked.\n \n The target and cleanup must return the same type, even if the cleanup\n always throws.\n To create such a throwing cleanup, compose the cleanup logic\n with throwException,\n in order to create a method handle of the correct return type.\n \n Note that tryFinally never converts exceptions into normal returns.\n In rare cases where exceptions must be converted in that way, first wrap\n the target with catchException(MethodHandle, Class, MethodHandle)\n to capture an outgoing exception, and then wrap with tryFinally.\n \n It is recommended that the first parameter type of cleanup be\n declared Throwable rather than a narrower subtype.  This ensures\n cleanup will always be invoked with whatever exception that\n target throws.  Declaring a narrower type may result in a\n ClassCastException being thrown by the try-finally\n handle if the type of the exception thrown by target is not\n assignable to the first parameter type of cleanup.  Note that\n various exception types of VirtualMachineError,\n LinkageError, and RuntimeException can in principle be\n thrown by almost any kind of Java code, and a finally clause that\n catches (say) only IOException would mask any of the others\n behind a ClassCastException."}]}