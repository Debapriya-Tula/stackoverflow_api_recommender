{"name": "Class LdapLoginModule", "module": "jdk.security.auth", "package": "com.sun.security.auth.module", "text": "This LoginModule performs LDAP-based authentication.\n A username and password is verified against the corresponding user\n credentials stored in an LDAP directory.\n This module requires the supplied CallbackHandler to support a\n NameCallback and a PasswordCallback.\n If authentication is successful then a new LdapPrincipal is created\n using the user's distinguished name and a new UserPrincipal is\n created using the user's username and both are associated\n with the current Subject.\n\n  This module operates in one of three modes: search-first,\n authentication-first or authentication-only.\n A mode is selected by specifying a particular set of options.\n\n  In search-first mode, the LDAP directory is searched to determine the\n user's distinguished name and then authentication is attempted.\n An (anonymous) search is performed using the supplied username in\n conjunction with a specified search filter.\n If successful then authentication is attempted using the user's\n distinguished name and the supplied password.\n To enable this mode, set the userFilter option and omit the\n authIdentity option.\n Use search-first mode when the user's distinguished name is not\n known in advance.\n\n  In authentication-first mode, authentication is attempted using the\n supplied username and password and then the LDAP directory is searched.\n If authentication is successful then a search is performed using the\n supplied username in conjunction with a specified search filter.\n To enable this mode, set the authIdentity and the\n userFilter options.\n Use authentication-first mode when accessing an LDAP directory\n that has been configured to disallow anonymous searches.\n\n  In authentication-only mode, authentication is attempted using the\n supplied username and password. The LDAP directory is not searched because\n the user's distinguished name is already known.\n To enable this mode, set the authIdentity option to a valid\n distinguished name and omit the userFilter option.\n Use authentication-only mode when the user's distinguished name is\n known in advance.\n\n  The following option is mandatory and must be specified in this\n module's login Configuration:\n \n userProvider=ldap_urls\n\n This option identifies the LDAP directory that stores user entries.\n      ldap_urls is a list of space-separated LDAP URLs\n      (RFC 2255)\n      that identifies the LDAP server to use and the position in\n      its directory tree where user entries are located.\n      When several LDAP URLs are specified then each is attempted,\n      in turn, until the first successful connection is established.\n      Spaces in the distinguished name component of the URL must be escaped\n      using the standard mechanism of percent character ('%')\n      followed by two hexadecimal digits (see URI).\n      Query components must also be omitted from the URL.\n\n      \n      Automatic discovery of the LDAP server via DNS\n      (RFC 2782)\n      is supported (once DNS has been configured to support such a service).\n      It is enabled by omitting the hostname and port number components from\n      the LDAP URL. \n\n This module also recognizes the following optional Configuration\n     options:\n \n userFilter=ldap_filter \n This option specifies the search filter to use to locate a user's\n      entry in the LDAP directory. It is used to determine a user's\n      distinguished name.\n      ldap_filter is an LDAP filter string\n      (RFC 2254).\n      If it contains the special token \"{USERNAME}\"\n      then that token will be replaced with the supplied username value\n      before the filter is used to search the directory. \n authIdentity=auth_id \n This option specifies the identity to use when authenticating a user\n      to the LDAP directory.\n      auth_id may be an LDAP distinguished name string\n      (RFC 2253) or some\n      other string name.\n      It must contain the special token \"{USERNAME}\"\n      which will be replaced with the supplied username value before the\n      name is used for authentication.\n      Note that if this option does not contain a distinguished name then\n      the userFilter option must also be specified. \n authzIdentity=authz_id \n This option specifies an authorization identity for the user.\n      authz_id is any string name.\n      If it comprises a single special token with curly braces then\n      that token is treated as a attribute name and will be replaced with a\n      single value of that attribute from the user's LDAP entry.\n      If the attribute cannot be found then the option is ignored.\n      When this option is supplied and the user has been successfully\n      authenticated then an additional UserPrincipal\n      is created using the authorization identity and it is associated with\n      the current Subject. \n useSSL \n if false, this module does not establish an SSL connection\n      to the LDAP server before attempting authentication. SSL is used to\n      protect the privacy of the user's password because it is transmitted\n      in the clear over LDAP.\n      By default, this module uses SSL. \n useFirstPass \n if true, this module retrieves the username and password\n      from the module's shared state, using \"javax.security.auth.login.name\"\n      and \"javax.security.auth.login.password\" as the respective keys. The\n      retrieved values are used for authentication. If authentication fails,\n      no attempt for a retry is made, and the failure is reported back to\n      the calling application.\n tryFirstPass \n if true, this module retrieves the username and password\n      from the module's shared state, using \"javax.security.auth.login.name\"\n       and \"javax.security.auth.login.password\" as the respective keys.  The\n      retrieved values are used for authentication. If authentication fails,\n      the module uses the CallbackHandler to retrieve a new username\n      and password, and another attempt to authenticate is made. If the\n      authentication fails, the failure is reported back to the calling\n      application.\n storePass \n if true, this module stores the username and password\n      obtained from the CallbackHandler in the module's shared state,\n      using\n      \"javax.security.auth.login.name\" and\n      \"javax.security.auth.login.password\" as the respective keys.  This is\n      not performed if existing values already exist for the username and\n      password in the shared state, or if authentication fails.\n clearPass \n if true, this module clears the username and password\n      stored in the module's shared state after both phases of authentication\n      (login and commit) have completed.\n debug \n if true, debug messages are displayed on the standard\n      output stream.\n\n\n Arbitrary\n \"JNDI properties\"\n may also be specified in the Configuration.\n They are added to the environment and passed to the LDAP provider.\n Note that the following four JNDI properties are set by this module directly\n and are ignored if also present in the configuration:\n \n java.naming.provider.url\n java.naming.security.principal\n java.naming.security.credentials\n java.naming.security.protocol\n\n\n Three sample Configurations are shown below.\n The first one activates search-first mode. It identifies the LDAP server\n and specifies that users' entries be located by their uid and\n objectClass attributes. It also specifies that an identity\n based on the user's employeeNumber attribute should be created.\n The second one activates authentication-first mode. It requests that the\n LDAP server be located dynamically, that authentication be performed using\n the supplied username directly but without the protection of SSL and that\n users' entries be located by one of three naming attributes and their\n objectClass attribute.\n The third one activates authentication-only mode. It identifies alternative\n LDAP servers, it specifies the distinguished name to use for\n authentication and a fixed identity to use for authorization. No directory\n search is performed.\n\n \n\n     ExampleApplication {\n         com.sun.security.auth.module.LdapLoginModule REQUIRED\n              userProvider=\"ldap://ldap-svr/ou=people,dc=example,dc=com\"\n              userFilter=\"(&(uid={USERNAME})(objectClass=inetOrgPerson))\"\n              authzIdentity=\"{EMPLOYEENUMBER}\"\n              debug=true;\n     };\n\n     ExampleApplication {\n         com.sun.security.auth.module.LdapLoginModule REQUIRED\n             userProvider=\"ldap:///cn=users,dc=example,dc=com\"\n             authIdentity=\"{USERNAME}\"\n             userFilter=\"(&(|(samAccountName={USERNAME})(userPrincipalName={USERNAME})(cn={USERNAME}))(objectClass=user))\"\n             useSSL=false\n             debug=true;\n     };\n\n     ExampleApplication {\n         com.sun.security.auth.module.LdapLoginModule REQUIRED\n             userProvider=\"ldap://ldap-svr1 ldap://ldap-svr2\"\n             authIdentity=\"cn={USERNAME},ou=people,dc=example,dc=com\"\n             authzIdentity=\"staff\"\n             debug=true;\n     };\n\n \n\nNote: \nWhen a SecurityManager is active then an application\n     that creates a LoginContext and uses a LoginModule\n     must be granted certain permissions.\n     \n     If the application creates a login context using an installed\nConfiguration then the application must be granted the\n     AuthPermission to create login contexts.\n     For example, the following security policy allows an application in\n     the user's current directory to instantiate any login context:\n     \n\n     grant codebase \"file:${user.dir}/\" {\n         permission javax.security.auth.AuthPermission \"createLoginContext.*\";\n     };\n     \n\n     Alternatively, if the application creates a login context using a\n     caller-specified Configuration then the application\n     must be granted the permissions required by the LoginModule.\n     This module requires the following two permissions:\n     \n The SocketPermission to connect to an LDAP server.\n      The AuthPermission to modify the set of Principals\n          associated with a Subject.\n     \n\n     For example, the following security policy grants an application in the\n     user's current directory all the permissions required by this module:\n     \n\n     grant codebase \"file:${user.dir}/\" {\n         permission java.net.SocketPermission \"*:389\", \"connect\";\n         permission java.net.SocketPermission \"*:636\", \"connect\";\n         permission javax.security.auth.AuthPermission \"modifyPrincipals\";\n     };\n     \n\n", "codes": ["public class LdapLoginModule\nextends Object\nimplements LoginModule"], "fields": [], "methods": [{"method_name": "initialize", "method_sig": "public void initialize (Subject subject,\n                       CallbackHandler callbackHandler,\n                       Map<String, ?> sharedState,\n                       Map<String, ?> options)", "description": "Initialize this LoginModule."}, {"method_name": "login", "method_sig": "public boolean login()\n              throws LoginException", "description": "Begin user authentication.\n\n  Acquire the user's credentials and verify them against the\n specified LDAP directory."}, {"method_name": "commit", "method_sig": "public boolean commit()\n               throws LoginException", "description": "Complete user authentication.\n\n  This method is called if the LoginContext's\n overall authentication succeeded\n (the relevant REQUIRED, REQUISITE, SUFFICIENT and OPTIONAL LoginModules\n succeeded).\n\n  If this LoginModule's own authentication attempt\n succeeded (checked by retrieving the private state saved by the\n login method), then this method associates an\n LdapPrincipal and one or more UserPrincipals\n with the Subject located in the\n LoginModule.  If this LoginModule's own\n authentication attempted failed, then this method removes\n any state that was originally saved."}, {"method_name": "abort", "method_sig": "public boolean abort()\n              throws LoginException", "description": "Abort user authentication.\n\n  This method is called if the overall authentication failed.\n (the relevant REQUIRED, REQUISITE, SUFFICIENT and OPTIONAL LoginModules\n did not succeed).\n\n  If this LoginModule's own authentication attempt\n succeeded (checked by retrieving the private state saved by the\n login and commit methods),\n then this method cleans up any state that was originally saved."}, {"method_name": "logout", "method_sig": "public boolean logout()\n               throws LoginException", "description": "Logout a user.\n\n  This method removes the Principals\n that were added by the commit method."}]}