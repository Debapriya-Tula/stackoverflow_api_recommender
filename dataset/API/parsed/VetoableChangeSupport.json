{"name": "Class VetoableChangeSupport", "module": "java.desktop", "package": "java.beans", "text": "This is a utility class that can be used by beans that support constrained\n properties.  It manages a list of listeners and dispatches\n PropertyChangeEvents to them.  You can use an instance of this class\n as a member field of your bean and delegate these types of work to it.\n The VetoableChangeListener can be registered for all properties\n or for a property specified by name.\n \n Here is an example of VetoableChangeSupport usage that follows\n the rules and recommendations laid out in the JavaBeans\u2122 specification:\n \n public class MyBean {\n     private final VetoableChangeSupport vcs = new VetoableChangeSupport(this);\n\n     public void addVetoableChangeListener(VetoableChangeListener listener) {\n         this.vcs.addVetoableChangeListener(listener);\n     }\n\n     public void removeVetoableChangeListener(VetoableChangeListener listener) {\n         this.vcs.removeVetoableChangeListener(listener);\n     }\n\n     private String value;\n\n     public String getValue() {\n         return this.value;\n     }\n\n     public void setValue(String newValue) throws PropertyVetoException {\n         String oldValue = this.value;\n         this.vcs.fireVetoableChange(\"value\", oldValue, newValue);\n         this.value = newValue;\n     }\n\n     [...]\n }\n \n\n A VetoableChangeSupport instance is thread-safe.\n \n This class is serializable.  When it is serialized it will save\n (and restore) any listeners that are themselves serializable.  Any\n non-serializable listeners will be skipped during serialization.", "codes": ["public class VetoableChangeSupport\nextends Object\nimplements Serializable"], "fields": [], "methods": [{"method_name": "addVetoableChangeListener", "method_sig": "public void addVetoableChangeListener (VetoableChangeListener listener)", "description": "Add a VetoableChangeListener to the listener list.\n The listener is registered for all properties.\n The same listener object may be added more than once, and will be called\n as many times as it is added.\n If listener is null, no exception is thrown and no action\n is taken."}, {"method_name": "removeVetoableChangeListener", "method_sig": "public void removeVetoableChangeListener (VetoableChangeListener listener)", "description": "Remove a VetoableChangeListener from the listener list.\n This removes a VetoableChangeListener that was registered\n for all properties.\n If listener was added more than once to the same event\n source, it will be notified one less time after being removed.\n If listener is null, or was never added, no exception is\n thrown and no action is taken."}, {"method_name": "getVetoableChangeListeners", "method_sig": "public VetoableChangeListener[] getVetoableChangeListeners()", "description": "Returns an array of all the listeners that were added to the\n VetoableChangeSupport object with addVetoableChangeListener().\n \n If some listeners have been added with a named property, then\n the returned array will be a mixture of VetoableChangeListeners\n and VetoableChangeListenerProxys. If the calling\n method is interested in distinguishing the listeners then it must\n test each element to see if it's a\n VetoableChangeListenerProxy, perform the cast, and examine\n the parameter.\n\n \n VetoableChangeListener[] listeners = bean.getVetoableChangeListeners();\n for (int i = 0; i < listeners.length; i++) {\n        if (listeners[i] instanceof VetoableChangeListenerProxy) {\n     VetoableChangeListenerProxy proxy =\n                    (VetoableChangeListenerProxy)listeners[i];\n     if (proxy.getPropertyName().equals(\"foo\")) {\n       // proxy is a VetoableChangeListener which was associated\n       // with the property named \"foo\"\n     }\n   }\n }\n "}, {"method_name": "addVetoableChangeListener", "method_sig": "public void addVetoableChangeListener (String propertyName,\n                                      VetoableChangeListener listener)", "description": "Add a VetoableChangeListener for a specific property.  The listener\n will be invoked only when a call on fireVetoableChange names that\n specific property.\n The same listener object may be added more than once.  For each\n property,  the listener will be invoked the number of times it was added\n for that property.\n If propertyName or listener is null, no\n exception is thrown and no action is taken."}, {"method_name": "removeVetoableChangeListener", "method_sig": "public void removeVetoableChangeListener (String propertyName,\n                                         VetoableChangeListener listener)", "description": "Remove a VetoableChangeListener for a specific property.\n If listener was added more than once to the same event\n source for the specified property, it will be notified one less time\n after being removed.\n If propertyName is null, no exception is thrown and no\n action is taken.\n If listener is null, or was never added for the specified\n property, no exception is thrown and no action is taken."}, {"method_name": "getVetoableChangeListeners", "method_sig": "public VetoableChangeListener[] getVetoableChangeListeners (String propertyName)", "description": "Returns an array of all the listeners which have been associated\n with the named property."}, {"method_name": "fireVetoableChange", "method_sig": "public void fireVetoableChange (String propertyName,\n                               Object oldValue,\n                               Object newValue)\n                        throws PropertyVetoException", "description": "Reports a constrained property update to listeners\n that have been registered to track updates of\n all properties or a property with the specified name.\n \n Any listener can throw a PropertyVetoException to veto the update.\n If one of the listeners vetoes the update, this method passes\n a new \"undo\" PropertyChangeEvent that reverts to the old value\n to all listeners that already confirmed this update\n and throws the PropertyVetoException again.\n \n No event is fired if old and new values are equal and non-null.\n \n This is merely a convenience wrapper around the more general\n fireVetoableChange(PropertyChangeEvent) method."}, {"method_name": "fireVetoableChange", "method_sig": "public void fireVetoableChange (String propertyName,\n                               int oldValue,\n                               int newValue)\n                        throws PropertyVetoException", "description": "Reports an integer constrained property update to listeners\n that have been registered to track updates of\n all properties or a property with the specified name.\n \n Any listener can throw a PropertyVetoException to veto the update.\n If one of the listeners vetoes the update, this method passes\n a new \"undo\" PropertyChangeEvent that reverts to the old value\n to all listeners that already confirmed this update\n and throws the PropertyVetoException again.\n \n No event is fired if old and new values are equal.\n \n This is merely a convenience wrapper around the more general\n fireVetoableChange(String, Object, Object) method."}, {"method_name": "fireVetoableChange", "method_sig": "public void fireVetoableChange (String propertyName,\n                               boolean oldValue,\n                               boolean newValue)\n                        throws PropertyVetoException", "description": "Reports a boolean constrained property update to listeners\n that have been registered to track updates of\n all properties or a property with the specified name.\n \n Any listener can throw a PropertyVetoException to veto the update.\n If one of the listeners vetoes the update, this method passes\n a new \"undo\" PropertyChangeEvent that reverts to the old value\n to all listeners that already confirmed this update\n and throws the PropertyVetoException again.\n \n No event is fired if old and new values are equal.\n \n This is merely a convenience wrapper around the more general\n fireVetoableChange(String, Object, Object) method."}, {"method_name": "fireVetoableChange", "method_sig": "public void fireVetoableChange (PropertyChangeEvent event)\n                        throws PropertyVetoException", "description": "Fires a property change event to listeners\n that have been registered to track updates of\n all properties or a property with the specified name.\n \n Any listener can throw a PropertyVetoException to veto the update.\n If one of the listeners vetoes the update, this method passes\n a new \"undo\" PropertyChangeEvent that reverts to the old value\n to all listeners that already confirmed this update\n and throws the PropertyVetoException again.\n \n No event is fired if the given event's old and new values are equal and non-null."}, {"method_name": "hasListeners", "method_sig": "public boolean hasListeners (String propertyName)", "description": "Check if there are any listeners for a specific property, including\n those registered on all properties.  If propertyName\n is null, only check for listeners registered on all properties."}]}