{"name": "Interface Map<K,\u200bV>", "module": "java.base", "package": "java.util", "text": "An object that maps keys to values.  A map cannot contain duplicate keys;\n each key can map to at most one value.\n\n This interface takes the place of the Dictionary class, which\n was a totally abstract class rather than an interface.\n\n The Map interface provides three collection views, which\n allow a map's contents to be viewed as a set of keys, collection of values,\n or set of key-value mappings.  The order of a map is defined as\n the order in which the iterators on the map's collection views return their\n elements.  Some map implementations, like the TreeMap class, make\n specific guarantees as to their order; others, like the HashMap\n class, do not.\n\n Note: great care must be exercised if mutable objects are used as map\n keys.  The behavior of a map is not specified if the value of an object is\n changed in a manner that affects equals comparisons while the\n object is a key in the map.  A special case of this prohibition is that it\n is not permissible for a map to contain itself as a key.  While it is\n permissible for a map to contain itself as a value, extreme caution is\n advised: the equals and hashCode methods are no longer\n well defined on such a map.\n\n All general-purpose map implementation classes should provide two\n \"standard\" constructors: a void (no arguments) constructor which creates an\n empty map, and a constructor with a single argument of type Map,\n which creates a new map with the same key-value mappings as its argument.\n In effect, the latter constructor allows the user to copy any map,\n producing an equivalent map of the desired class.  There is no way to\n enforce this recommendation (as interfaces cannot contain constructors) but\n all of the general-purpose map implementations in the JDK comply.\n\n The \"destructive\" methods contained in this interface, that is, the\n methods that modify the map on which they operate, are specified to throw\n UnsupportedOperationException if this map does not support the\n operation.  If this is the case, these methods may, but are not required\n to, throw an UnsupportedOperationException if the invocation would\n have no effect on the map.  For example, invoking the putAll(Map)\n method on an unmodifiable map may, but is not required to, throw the\n exception if the map whose mappings are to be \"superimposed\" is empty.\n\n Some map implementations have restrictions on the keys and values they\n may contain.  For example, some implementations prohibit null keys and\n values, and some have restrictions on the types of their keys.  Attempting\n to insert an ineligible key or value throws an unchecked exception,\n typically NullPointerException or ClassCastException.\n Attempting to query the presence of an ineligible key or value may throw an\n exception, or it may simply return false; some implementations will exhibit\n the former behavior and some will exhibit the latter.  More generally,\n attempting an operation on an ineligible key or value whose completion\n would not result in the insertion of an ineligible element into the map may\n throw an exception or it may succeed, at the option of the implementation.\n Such exceptions are marked as \"optional\" in the specification for this\n interface.\n\n Many methods in Collections Framework interfaces are defined\n in terms of the equals method.  For\n example, the specification for the containsKey(Object key) method says: \"returns true if and\n only if this map contains a mapping for a key k such that\n (key==null ? k==null : key.equals(k)).\" This specification should\n not be construed to imply that invoking Map.containsKey\n with a non-null argument key will cause key.equals(k) to\n be invoked for any key k.  Implementations are free to\n implement optimizations whereby the equals invocation is avoided,\n for example, by first comparing the hash codes of the two keys.  (The\n Object.hashCode() specification guarantees that two objects with\n unequal hash codes cannot be equal.)  More generally, implementations of\n the various Collections Framework interfaces are free to take advantage of\n the specified behavior of underlying Object methods wherever the\n implementor deems it appropriate.\n\n Some map operations which perform recursive traversal of the map may fail\n with an exception for self-referential instances where the map directly or\n indirectly contains itself. This includes the clone(),\n equals(), hashCode() and toString() methods.\n Implementations may optionally handle the self-referential scenario, however\n most current implementations do not do so.\n\n Unmodifiable Maps\nThe Map.of,\n Map.ofEntries, and\n Map.copyOf\n static factory methods provide a convenient way to create unmodifiable maps.\n The Map\n instances created by these methods have the following characteristics:\n\n \nThey are unmodifiable. Keys and values\n cannot be added, removed, or updated. Calling any mutator method on the Map\n will always cause UnsupportedOperationException to be thrown.\n However, if the contained keys or values are themselves mutable, this may cause the\n Map to behave inconsistently or its contents to appear to change.\n They disallow null keys and values. Attempts to create them with\n null keys or values result in NullPointerException.\n They are serializable if all keys and values are serializable.\n They reject duplicate keys at creation time. Duplicate keys\n passed to a static factory method result in IllegalArgumentException.\n The iteration order of mappings is unspecified and is subject to change.\n They are value-based.\n Callers should make no assumptions about the identity of the returned instances.\n Factories are free to create new instances or reuse existing ones. Therefore,\n identity-sensitive operations on these instances (reference equality (==),\n identity hash code, and synchronization) are unreliable and should be avoided.\n They are serialized as specified on the\n Serialized Form\n page.\n \nThis interface is a member of the\n \n Java Collections Framework.", "codes": ["public interface Map<K, V>"], "fields": [], "methods": [{"method_name": "size", "method_sig": "int size()", "description": "Returns the number of key-value mappings in this map.  If the\n map contains more than Integer.MAX_VALUE elements, returns\n Integer.MAX_VALUE."}, {"method_name": "isEmpty", "method_sig": "boolean isEmpty()", "description": "Returns true if this map contains no key-value mappings."}, {"method_name": "containsKey", "method_sig": "boolean containsKey (Object key)", "description": "Returns true if this map contains a mapping for the specified\n key.  More formally, returns true if and only if\n this map contains a mapping for a key k such that\n Objects.equals(key, k).  (There can be\n at most one such mapping.)"}, {"method_name": "containsValue", "method_sig": "boolean containsValue (Object value)", "description": "Returns true if this map maps one or more keys to the\n specified value.  More formally, returns true if and only if\n this map contains at least one mapping to a value v such that\n Objects.equals(value, v).  This operation\n will probably require time linear in the map size for most\n implementations of the Map interface."}, {"method_name": "get", "method_sig": "V get (Object key)", "description": "Returns the value to which the specified key is mapped,\n or null if this map contains no mapping for the key.\n\n More formally, if this map contains a mapping from a key\n k to a value v such that\n Objects.equals(key, k),\n then this method returns v; otherwise\n it returns null.  (There can be at most one such mapping.)\n\n If this map permits null values, then a return value of\n null does not necessarily indicate that the map\n contains no mapping for the key; it's also possible that the map\n explicitly maps the key to null.  The containsKey operation may be used to distinguish these two cases."}, {"method_name": "put", "method_sig": "V put (K key,\n      V value)", "description": "Associates the specified value with the specified key in this map\n (optional operation).  If the map previously contained a mapping for\n the key, the old value is replaced by the specified value.  (A map\n m is said to contain a mapping for a key k if and only\n if m.containsKey(k) would return\n true.)"}, {"method_name": "remove", "method_sig": "V remove (Object key)", "description": "Removes the mapping for a key from this map if it is present\n (optional operation).   More formally, if this map contains a mapping\n from key k to value v such that\n Objects.equals(key, k), that mapping\n is removed.  (The map can contain at most one such mapping.)\n\n Returns the value to which this map previously associated the key,\n or null if the map contained no mapping for the key.\n\n If this map permits null values, then a return value of\n null does not necessarily indicate that the map\n contained no mapping for the key; it's also possible that the map\n explicitly mapped the key to null.\n\n The map will not contain a mapping for the specified key once the\n call returns."}, {"method_name": "putAll", "method_sig": "void putAll (Map<? extends K, ? extends V> m)", "description": "Copies all of the mappings from the specified map to this map\n (optional operation).  The effect of this call is equivalent to that\n of calling put(k, v) on this map once\n for each mapping from key k to value v in the\n specified map.  The behavior of this operation is undefined if the\n specified map is modified while the operation is in progress."}, {"method_name": "clear", "method_sig": "void clear()", "description": "Removes all of the mappings from this map (optional operation).\n The map will be empty after this call returns."}, {"method_name": "keySet", "method_sig": "Set<K> keySet()", "description": "Returns a Set view of the keys contained in this map.\n The set is backed by the map, so changes to the map are\n reflected in the set, and vice-versa.  If the map is modified\n while an iteration over the set is in progress (except through\n the iterator's own remove operation), the results of\n the iteration are undefined.  The set supports element removal,\n which removes the corresponding mapping from the map, via the\n Iterator.remove, Set.remove,\n removeAll, retainAll, and clear\n operations.  It does not support the add or addAll\n operations."}, {"method_name": "values", "method_sig": "Collection<V> values()", "description": "Returns a Collection view of the values contained in this map.\n The collection is backed by the map, so changes to the map are\n reflected in the collection, and vice-versa.  If the map is\n modified while an iteration over the collection is in progress\n (except through the iterator's own remove operation),\n the results of the iteration are undefined.  The collection\n supports element removal, which removes the corresponding\n mapping from the map, via the Iterator.remove,\n Collection.remove, removeAll,\n retainAll and clear operations.  It does not\n support the add or addAll operations."}, {"method_name": "entrySet", "method_sig": "Set<Map.Entry<K, V>> entrySet()", "description": "Returns a Set view of the mappings contained in this map.\n The set is backed by the map, so changes to the map are\n reflected in the set, and vice-versa.  If the map is modified\n while an iteration over the set is in progress (except through\n the iterator's own remove operation, or through the\n setValue operation on a map entry returned by the\n iterator) the results of the iteration are undefined.  The set\n supports element removal, which removes the corresponding\n mapping from the map, via the Iterator.remove,\n Set.remove, removeAll, retainAll and\n clear operations.  It does not support the\n add or addAll operations."}, {"method_name": "equals", "method_sig": "boolean equals (Object o)", "description": "Compares the specified object with this map for equality.  Returns\n true if the given object is also a map and the two maps\n represent the same mappings.  More formally, two maps m1 and\n m2 represent the same mappings if\n m1.entrySet().equals(m2.entrySet()).  This ensures that the\n equals method works properly across different implementations\n of the Map interface."}, {"method_name": "hashCode", "method_sig": "int hashCode()", "description": "Returns the hash code value for this map.  The hash code of a map is\n defined to be the sum of the hash codes of each entry in the map's\n entrySet() view.  This ensures that m1.equals(m2)\n implies that m1.hashCode()==m2.hashCode() for any two maps\n m1 and m2, as required by the general contract of\n Object.hashCode()."}, {"method_name": "getOrDefault", "method_sig": "default V getOrDefault (Object key,\n                       V defaultValue)", "description": "Returns the value to which the specified key is mapped, or\n defaultValue if this map contains no mapping for the key."}, {"method_name": "forEach", "method_sig": "default void forEach (BiConsumer<? super K, ? super V> action)", "description": "Performs the given action for each entry in this map until all entries\n have been processed or the action throws an exception.   Unless\n otherwise specified by the implementing class, actions are performed in\n the order of entry set iteration (if an iteration order is specified.)\n Exceptions thrown by the action are relayed to the caller."}, {"method_name": "replaceAll", "method_sig": "default void replaceAll (BiFunction<? super K, ? super V, ? extends V> function)", "description": "Replaces each entry's value with the result of invoking the given\n function on that entry until all entries have been processed or the\n function throws an exception.  Exceptions thrown by the function are\n relayed to the caller."}, {"method_name": "putIfAbsent", "method_sig": "default V putIfAbsent (K key,\n                      V value)", "description": "If the specified key is not already associated with a value (or is mapped\n to null) associates it with the given value and returns\n null, else returns the current value."}, {"method_name": "remove", "method_sig": "default boolean remove (Object key,\n                       Object value)", "description": "Removes the entry for the specified key only if it is currently\n mapped to the specified value."}, {"method_name": "replace", "method_sig": "default boolean replace (K key,\n                        V oldValue,\n                        V newValue)", "description": "Replaces the entry for the specified key only if currently\n mapped to the specified value."}, {"method_name": "replace", "method_sig": "default V replace (K key,\n                  V value)", "description": "Replaces the entry for the specified key only if it is\n currently mapped to some value."}, {"method_name": "computeIfAbsent", "method_sig": "default V computeIfAbsent (K key,\n                          Function<? super K, ? extends V> mappingFunction)", "description": "If the specified key is not already associated with a value (or is mapped\n to null), attempts to compute its value using the given mapping\n function and enters it into this map unless null.\n\n If the mapping function returns null, no mapping is recorded.\n If the mapping function itself throws an (unchecked) exception, the\n exception is rethrown, and no mapping is recorded.  The most\n common usage is to construct a new object serving as an initial\n mapped value or memoized result, as in:\n\n  \n map.computeIfAbsent(key, k -> new Value(f(k)));\n \nOr to implement a multi-value map, Map<K,Collection<V>>,\n supporting multiple values per key:\n\n  \n map.computeIfAbsent(key, k -> new HashSet<V>()).add(v);\n \nThe mapping function should not modify this map during computation."}, {"method_name": "computeIfPresent", "method_sig": "default V computeIfPresent (K key,\n                           BiFunction<? super K, ? super V, ? extends V> remappingFunction)", "description": "If the value for the specified key is present and non-null, attempts to\n compute a new mapping given the key and its current mapped value.\n\n If the remapping function returns null, the mapping is removed.\n If the remapping function itself throws an (unchecked) exception, the\n exception is rethrown, and the current mapping is left unchanged.\n\n The remapping function should not modify this map during computation."}, {"method_name": "compute", "method_sig": "default V compute (K key,\n                  BiFunction<? super K, ? super V, ? extends V> remappingFunction)", "description": "Attempts to compute a mapping for the specified key and its current\n mapped value (or null if there is no current mapping). For\n example, to either create or append a String msg to a value\n mapping:\n\n  \n map.compute(key, (k, v) -> (v == null) ? msg : v.concat(msg))\n (Method merge() is often simpler to use for such purposes.)\n\n If the remapping function returns null, the mapping is removed\n (or remains absent if initially absent).  If the remapping function\n itself throws an (unchecked) exception, the exception is rethrown, and\n the current mapping is left unchanged.\n\n The remapping function should not modify this map during computation."}, {"method_name": "merge", "method_sig": "default V merge (K key,\n                V value,\n                BiFunction<? super V, ? super V, ? extends V> remappingFunction)", "description": "If the specified key is not already associated with a value or is\n associated with null, associates it with the given non-null value.\n Otherwise, replaces the associated value with the results of the given\n remapping function, or removes if the result is null. This\n method may be of use when combining multiple mapped values for a key.\n For example, to either create or append a String msg to a\n value mapping:\n\n  \n map.merge(key, msg, String::concat)\n \nIf the remapping function returns null, the mapping is removed.\n If the remapping function itself throws an (unchecked) exception, the\n exception is rethrown, and the current mapping is left unchanged.\n\n The remapping function should not modify this map during computation."}, {"method_name": "of", "method_sig": "static <K, V> Map<K, V> of()", "description": "Returns an unmodifiable map containing zero mappings.\n See Unmodifiable Maps for details."}, {"method_name": "of", "method_sig": "static <K, V> Map<K, V> of (K k1,\n                                     V v1)", "description": "Returns an unmodifiable map containing a single mapping.\n See Unmodifiable Maps for details."}, {"method_name": "of", "method_sig": "static <K, V> Map<K, V> of (K k1,\n                                     V v1,\n                                     K k2,\n                                     V v2)", "description": "Returns an unmodifiable map containing two mappings.\n See Unmodifiable Maps for details."}, {"method_name": "of", "method_sig": "static <K, V> Map<K, V> of (K k1,\n                                     V v1,\n                                     K k2,\n                                     V v2,\n                                     K k3,\n                                     V v3)", "description": "Returns an unmodifiable map containing three mappings.\n See Unmodifiable Maps for details."}, {"method_name": "of", "method_sig": "static <K, V> Map<K, V> of (K k1,\n                                     V v1,\n                                     K k2,\n                                     V v2,\n                                     K k3,\n                                     V v3,\n                                     K k4,\n                                     V v4)", "description": "Returns an unmodifiable map containing four mappings.\n See Unmodifiable Maps for details."}, {"method_name": "of", "method_sig": "static <K, V> Map<K, V> of (K k1,\n                                     V v1,\n                                     K k2,\n                                     V v2,\n                                     K k3,\n                                     V v3,\n                                     K k4,\n                                     V v4,\n                                     K k5,\n                                     V v5)", "description": "Returns an unmodifiable map containing five mappings.\n See Unmodifiable Maps for details."}, {"method_name": "of", "method_sig": "static <K, V> Map<K, V> of (K k1,\n                                     V v1,\n                                     K k2,\n                                     V v2,\n                                     K k3,\n                                     V v3,\n                                     K k4,\n                                     V v4,\n                                     K k5,\n                                     V v5,\n                                     K k6,\n                                     V v6)", "description": "Returns an unmodifiable map containing six mappings.\n See Unmodifiable Maps for details."}, {"method_name": "of", "method_sig": "static <K, V> Map<K, V> of (K k1,\n                                     V v1,\n                                     K k2,\n                                     V v2,\n                                     K k3,\n                                     V v3,\n                                     K k4,\n                                     V v4,\n                                     K k5,\n                                     V v5,\n                                     K k6,\n                                     V v6,\n                                     K k7,\n                                     V v7)", "description": "Returns an unmodifiable map containing seven mappings.\n See Unmodifiable Maps for details."}, {"method_name": "of", "method_sig": "static <K, V> Map<K, V> of (K k1,\n                                     V v1,\n                                     K k2,\n                                     V v2,\n                                     K k3,\n                                     V v3,\n                                     K k4,\n                                     V v4,\n                                     K k5,\n                                     V v5,\n                                     K k6,\n                                     V v6,\n                                     K k7,\n                                     V v7,\n                                     K k8,\n                                     V v8)", "description": "Returns an unmodifiable map containing eight mappings.\n See Unmodifiable Maps for details."}, {"method_name": "of", "method_sig": "static <K, V> Map<K, V> of (K k1,\n                                     V v1,\n                                     K k2,\n                                     V v2,\n                                     K k3,\n                                     V v3,\n                                     K k4,\n                                     V v4,\n                                     K k5,\n                                     V v5,\n                                     K k6,\n                                     V v6,\n                                     K k7,\n                                     V v7,\n                                     K k8,\n                                     V v8,\n                                     K k9,\n                                     V v9)", "description": "Returns an unmodifiable map containing nine mappings.\n See Unmodifiable Maps for details."}, {"method_name": "of", "method_sig": "static <K, V> Map<K, V> of (K k1,\n                                     V v1,\n                                     K k2,\n                                     V v2,\n                                     K k3,\n                                     V v3,\n                                     K k4,\n                                     V v4,\n                                     K k5,\n                                     V v5,\n                                     K k6,\n                                     V v6,\n                                     K k7,\n                                     V v7,\n                                     K k8,\n                                     V v8,\n                                     K k9,\n                                     V v9,\n                                     K k10,\n                                     V v10)", "description": "Returns an unmodifiable map containing ten mappings.\n See Unmodifiable Maps for details."}, {"method_name": "ofEntries", "method_sig": "@SafeVarargs\nstatic <K, V> Map<K, V> ofEntries (Map.Entry<? extends K, ? extends V>... entries)", "description": "Returns an unmodifiable map containing keys and values extracted from the given entries.\n The entries themselves are not stored in the map.\n See Unmodifiable Maps for details."}, {"method_name": "entry", "method_sig": "static <K, V> Map.Entry<K, V> entry (K k,\n                                              V v)", "description": "Returns an unmodifiable Map.Entry containing the given key and value.\n These entries are suitable for populating Map instances using the\n Map.ofEntries() method.\n The Entry instances created by this method have the following characteristics:\n\n \nThey disallow null keys and values. Attempts to create them using a null\n key or value result in NullPointerException.\n They are unmodifiable. Calls to Entry.setValue()\n on a returned Entry result in UnsupportedOperationException.\n They are not serializable.\n They are value-based.\n Callers should make no assumptions about the identity of the returned instances.\n This method is free to create new instances or reuse existing ones. Therefore,\n identity-sensitive operations on these instances (reference equality (==),\n identity hash code, and synchronization) are unreliable and should be avoided.\n "}, {"method_name": "copyOf", "method_sig": "static <K, V> Map<K, V> copyOf (Map<? extends K, ? extends V> map)", "description": "Returns an unmodifiable Map containing the entries\n of the given Map. The given Map must not be null, and it must not contain any\n null keys or values. If the given Map is subsequently modified, the returned\n Map will not reflect such modifications."}]}