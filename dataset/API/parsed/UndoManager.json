{"name": "Class UndoManager", "module": "java.desktop", "package": "javax.swing.undo", "text": "UndoManager manages a list of UndoableEdits,\n providing a way to undo or redo the appropriate edits.  There are\n two ways to add edits to an UndoManager.  Add the edit\n directly using the addEdit method, or add the\n UndoManager to a bean that supports\n UndoableEditListener.  The following examples creates\n an UndoManager and adds it as an\n UndoableEditListener to a JTextField:\n \n   UndoManager undoManager = new UndoManager();\n   JTextField tf = ...;\n   tf.getDocument().addUndoableEditListener(undoManager);\n \n\nUndoManager maintains an ordered list of edits and the\n index of the next edit in that list. The index of the next edit is\n either the size of the current list of edits, or if\n undo has been invoked it corresponds to the index\n of the last significant edit that was undone. When\n undo is invoked all edits from the index of the next\n edit to the last significant edit are undone, in reverse order.\n For example, consider an UndoManager consisting of the\n following edits: A b c D.  Edits with a\n upper-case letter in bold are significant, those in lower-case\n and italicized are insignificant.\n \n\n\nFigure 1\n\n\nFigure 1\n \n\n As shown in figure 1, if D was just added, the\n index of the next edit will be 4. Invoking undo\n results in invoking undo on D and setting the\n index of the next edit to 3 (edit c), as shown in the following\n figure.\n \n\n\nFigure 2\n\n\nFigure 2\n \n\n The last significant edit is A, so that invoking\n undo again invokes undo on c,\n b, and A, in that order, setting the index of the\n next edit to 0, as shown in the following figure.\n \n\n\nFigure 3\n\n\nFigure 3\n \n\n Invoking redo results in invoking redo on\n all edits between the index of the next edit and the next\n significant edit (or the end of the list).  Continuing with the previous\n example if redo were invoked, redo would in\n turn be invoked on A, b and c.  In addition\n the index of the next edit is set to 3 (as shown in figure 2).\n \n Adding an edit to an UndoManager results in\n removing all edits from the index of the next edit to the end of\n the list.  Continuing with the previous example, if a new edit,\n e, is added the edit D is removed from the list\n (after having die invoked on it).  If c is not\n incorporated by the next edit\n (c.addEdit(e) returns true), or replaced\n by it (e.replaceEdit(c) returns true),\n the new edit is added after c, as shown in the following\n figure.\n \n\n\nFigure 4\n\n\nFigure 4\n \n\n Once end has been invoked on an UndoManager\n the superclass behavior is used for all UndoableEdit\n methods.  Refer to CompoundEdit for more details on its\n behavior.\n \n Unlike the rest of Swing, this class is thread safe.\n \nWarning:\n Serialized objects of this class will not be compatible with\n future Swing releases. The current serialization support is\n appropriate for short term storage or RMI between applications running\n the same version of Swing.  As of 1.4, support for long term storage\n of all JavaBeans\u2122\n has been added to the java.beans package.\n Please see XMLEncoder.", "codes": ["public class UndoManager\nextends CompoundEdit\nimplements UndoableEditListener"], "fields": [], "methods": [{"method_name": "getLimit", "method_sig": "public int getLimit()", "description": "Returns the maximum number of edits this UndoManager\n holds. A value less than 0 indicates the number of edits is not\n limited."}, {"method_name": "discardAllEdits", "method_sig": "public void discardAllEdits()", "description": "Empties the undo manager sending each edit a die message\n in the process."}, {"method_name": "trimForLimit", "method_sig": "protected void trimForLimit()", "description": "Reduces the number of queued edits to a range of size limit,\n centered on the index of the next edit."}, {"method_name": "trimEdits", "method_sig": "protected void trimEdits (int from,\n                         int to)", "description": "Removes edits in the specified range.\n All edits in the given range (inclusive, and in reverse order)\n will have die invoked on them and are removed from\n the list of edits. This has no effect if\n from > to."}, {"method_name": "setLimit", "method_sig": "public void setLimit (int l)", "description": "Sets the maximum number of edits this UndoManager\n holds. A value less than 0 indicates the number of edits is not\n limited. If edits need to be discarded to shrink the limit,\n die will be invoked on them in the reverse\n order they were added.  The default is 100."}, {"method_name": "editToBeUndone", "method_sig": "protected UndoableEdit editToBeUndone()", "description": "Returns the next significant edit to be undone if undo\n is invoked. This returns null if there are no edits\n to be undone."}, {"method_name": "editToBeRedone", "method_sig": "protected UndoableEdit editToBeRedone()", "description": "Returns the next significant edit to be redone if redo\n is invoked. This returns null if there are no edits\n to be redone."}, {"method_name": "undoTo", "method_sig": "protected void undoTo (UndoableEdit edit)\n               throws CannotUndoException", "description": "Undoes all changes from the index of the next edit to\n edit, updating the index of the next edit appropriately."}, {"method_name": "redoTo", "method_sig": "protected void redoTo (UndoableEdit edit)\n               throws CannotRedoException", "description": "Redoes all changes from the index of the next edit to\n edit, updating the index of the next edit appropriately."}, {"method_name": "undoOrRedo", "method_sig": "public void undoOrRedo()\n                throws CannotRedoException,\n                       CannotUndoException", "description": "Convenience method that invokes one of undo or\n redo. If any edits have been undone (the index of\n the next edit is less than the length of the edits list) this\n invokes redo, otherwise it invokes undo."}, {"method_name": "canUndoOrRedo", "method_sig": "public boolean canUndoOrRedo()", "description": "Returns true if it is possible to invoke undo or\n redo."}, {"method_name": "undo", "method_sig": "public void undo()\n          throws CannotUndoException", "description": "Undoes the appropriate edits.  If end has been\n invoked this calls through to the superclass, otherwise\n this invokes undo on all edits between the\n index of the next edit and the last significant edit, updating\n the index of the next edit appropriately."}, {"method_name": "canUndo", "method_sig": "public boolean canUndo()", "description": "Returns true if edits may be undone.  If end has\n been invoked, this returns the value from super.  Otherwise\n this returns true if there are any edits to be undone\n (editToBeUndone returns non-null)."}, {"method_name": "redo", "method_sig": "public void redo()\n          throws CannotRedoException", "description": "Redoes the appropriate edits.  If end has been\n invoked this calls through to the superclass.  Otherwise\n this invokes redo on all edits between the\n index of the next edit and the next significant edit, updating\n the index of the next edit appropriately."}, {"method_name": "canRedo", "method_sig": "public boolean canRedo()", "description": "Returns true if edits may be redone.  If end has\n been invoked, this returns the value from super.  Otherwise,\n this returns true if there are any edits to be redone\n (editToBeRedone returns non-null)."}, {"method_name": "addEdit", "method_sig": "public boolean addEdit (UndoableEdit anEdit)", "description": "Adds an UndoableEdit to this\n UndoManager, if it's possible.  This removes all\n edits from the index of the next edit to the end of the edits\n list.  If end has been invoked the edit is not added\n and false is returned.  If end hasn't\n been invoked this returns true."}, {"method_name": "end", "method_sig": "public void end()", "description": "Turns this UndoManager into a normal\n CompoundEdit.  This removes all edits that have\n been undone."}, {"method_name": "getUndoOrRedoPresentationName", "method_sig": "public String getUndoOrRedoPresentationName()", "description": "Convenience method that returns either\n getUndoPresentationName or\n getRedoPresentationName.  If the index of the next\n edit equals the size of the edits list,\n getUndoPresentationName is returned, otherwise\n getRedoPresentationName is returned."}, {"method_name": "getUndoPresentationName", "method_sig": "public String getUndoPresentationName()", "description": "Returns a description of the undoable form of this edit.\n If end has been invoked this calls into super.\n Otherwise if there are edits to be undone, this returns\n the value from the next significant edit that will be undone.\n If there are no edits to be undone and end has not\n been invoked this returns the value from the UIManager\n property \"AbstractUndoableEdit.undoText\"."}, {"method_name": "getRedoPresentationName", "method_sig": "public String getRedoPresentationName()", "description": "Returns a description of the redoable form of this edit.\n If end has been invoked this calls into super.\n Otherwise if there are edits to be redone, this returns\n the value from the next significant edit that will be redone.\n If there are no edits to be redone and end has not\n been invoked this returns the value from the UIManager\n property \"AbstractUndoableEdit.redoText\"."}, {"method_name": "undoableEditHappened", "method_sig": "public void undoableEditHappened (UndoableEditEvent e)", "description": "An UndoableEditListener method. This invokes\n addEdit with e.getEdit()."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a string that displays and identifies this\n object's properties."}]}