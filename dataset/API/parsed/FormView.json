{"name": "Class FormView", "module": "java.desktop", "package": "javax.swing.text.html", "text": "Component decorator that implements the view interface\n for form elements, <input>, <textarea>,\n and <select>.  The model for the component is stored\n as an attribute of the element (using StyleConstants.ModelAttribute),\n and is used to build the component of the view.  The type\n of the model is assumed to of the type that would be set by\n HTMLDocument.HTMLReader.FormAction.  If there are\n multiple views mapped over the document, they will share the\n embedded component models.\n \n The following table shows what components get built\n by this view.\n\n \nShows what components get built by this view\n\n\nElement Type\n     Component built\n \n\n\ninput, type button\n     JButton\n   \ninput, type checkbox\n     JCheckBox\n   \ninput, type image\n     JButton\n   \ninput, type password\n     JPasswordField\n   \ninput, type radio\n     JRadioButton\n   \ninput, type reset\n     JButton\n   \ninput, type submit\n     JButton\n   \ninput, type text\n     JTextField\n   \nselect, size > 1 or multiple attribute defined\n     JList in a JScrollPane\n   \nselect, size unspecified or 1\n     JComboBox\n   \ntextarea\n     JTextArea in a JScrollPane\n   \ninput, type file\n     JTextField\n \n", "codes": ["public class FormView\nextends ComponentView\nimplements ActionListener"], "fields": [{"field_name": "SUBMIT", "field_sig": "@Deprecated\npublic static final\u00a0String SUBMIT", "description": "If a value attribute is not specified for a FORM input element\n of type \"submit\", then this default string is used."}, {"field_name": "RESET", "field_sig": "@Deprecated\npublic static final\u00a0String RESET", "description": "If a value attribute is not specified for a FORM input element\n of type \"reset\", then this default string is used."}], "methods": [{"method_name": "createComponent", "method_sig": "protected Component createComponent()", "description": "Create the component.  This is basically a\n big switch statement based upon the tag type\n and html attributes of the associated element."}, {"method_name": "getMaximumSpan", "method_sig": "public float getMaximumSpan (int axis)", "description": "Determines the maximum span for this view along an\n axis. For certain components, the maximum and preferred span are the\n same. For others this will return the value\n returned by Component.getMaximumSize along the\n axis of interest."}, {"method_name": "actionPerformed", "method_sig": "public void actionPerformed (ActionEvent evt)", "description": "Responsible for processing the ActionEvent.\n If the element associated with the FormView,\n has a type of \"submit\", \"reset\", \"text\" or \"password\"\n then the action is processed.  In the case of a \"submit\"\n the form is submitted.  In the case of a \"reset\"\n the form is reset to its original state.\n In the case of \"text\" or \"password\", if the\n element is the last one of type \"text\" or \"password\",\n the form is submitted.  Otherwise, focus is transferred\n to the next component in the form."}, {"method_name": "submitData", "method_sig": "protected void submitData (String data)", "description": "This method is responsible for submitting the form data.\n A thread is forked to undertake the submission."}, {"method_name": "imageSubmit", "method_sig": "protected void imageSubmit (String imageData)", "description": "This method is called to submit a form in response\n to a click on an image -- an <INPUT> form\n element of type \"image\"."}]}