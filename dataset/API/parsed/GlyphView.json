{"name": "Class GlyphView", "module": "java.desktop", "package": "javax.swing.text", "text": "A GlyphView is a styled chunk of text that represents a view\n mapped over an element in the text model. This view is generally\n responsible for displaying text glyphs using character level\n attributes in some way.\n An implementation of the GlyphPainter class is used to do the\n actual rendering and model/view translations.  This separates\n rendering from layout and management of the association with\n the model.\n \n The view supports breaking for the purpose of formatting.\n The fragments produced by breaking share the view that has\n primary responsibility for the element (i.e. they are nested\n classes and carry only a small amount of state of their own)\n so they can share its resources.\n \n Since this view\n represents text that may have tabs embedded in it, it implements the\n TabableView interface.  Tabs will only be\n expanded if this view is embedded in a container that does\n tab expansion.  ParagraphView is an example of a container\n that does tab expansion.", "codes": ["public class GlyphView\nextends View\nimplements TabableView, Cloneable"], "fields": [], "methods": [{"method_name": "clone", "method_sig": "protected final Object clone()", "description": "Creates a shallow copy.  This is used by the\n createFragment and breakView methods."}, {"method_name": "getGlyphPainter", "method_sig": "public GlyphView.GlyphPainter getGlyphPainter()", "description": "Fetch the currently installed glyph painter.\n If a painter has not yet been installed, and\n a default was not yet needed, null is returned."}, {"method_name": "setGlyphPainter", "method_sig": "public void setGlyphPainter (GlyphView.GlyphPainter p)", "description": "Sets the painter to use for rendering glyphs."}, {"method_name": "getText", "method_sig": "public Segment getText (int p0,\n                       int p1)", "description": "Fetch a reference to the text that occupies\n the given range.  This is normally used by\n the GlyphPainter to determine what characters\n it should render glyphs for."}, {"method_name": "getBackground", "method_sig": "public Color getBackground()", "description": "Fetch the background color to use to render the\n glyphs.  If there is no background color, null should\n be returned.  This is implemented to call\n StyledDocument.getBackground if the associated\n document is a styled document, otherwise it returns null."}, {"method_name": "getForeground", "method_sig": "public Color getForeground()", "description": "Fetch the foreground color to use to render the\n glyphs.  If there is no foreground color, null should\n be returned.  This is implemented to call\n StyledDocument.getBackground if the associated\n document is a StyledDocument.  If the associated document\n is not a StyledDocument, the associated components foreground\n color is used.  If there is no associated component, null\n is returned."}, {"method_name": "getFont", "method_sig": "public Font getFont()", "description": "Fetch the font that the glyphs should be based\n upon.  This is implemented to call\n StyledDocument.getFont if the associated\n document is a StyledDocument.  If the associated document\n is not a StyledDocument, the associated components font\n is used.  If there is no associated component, null\n is returned."}, {"method_name": "isUnderline", "method_sig": "public boolean isUnderline()", "description": "Determine if the glyphs should be underlined.  If true,\n an underline should be drawn through the baseline."}, {"method_name": "isStrikeThrough", "method_sig": "public boolean isStrikeThrough()", "description": "Determine if the glyphs should have a strikethrough\n line.  If true, a line should be drawn through the center\n of the glyphs."}, {"method_name": "isSubscript", "method_sig": "public boolean isSubscript()", "description": "Determine if the glyphs should be rendered as superscript."}, {"method_name": "isSuperscript", "method_sig": "public boolean isSuperscript()", "description": "Determine if the glyphs should be rendered as subscript."}, {"method_name": "getTabExpander", "method_sig": "public TabExpander getTabExpander()", "description": "Fetch the TabExpander to use if tabs are present in this view."}, {"method_name": "checkPainter", "method_sig": "protected void checkPainter()", "description": "Check to see that a glyph painter exists.  If a painter\n doesn't exist, a default glyph painter will be installed."}, {"method_name": "getTabbedSpan", "method_sig": "public float getTabbedSpan (float x,\n                           TabExpander e)", "description": "Determines the desired span when using the given\n tab expansion implementation."}, {"method_name": "getPartialSpan", "method_sig": "public float getPartialSpan (int p0,\n                            int p1)", "description": "Determines the span along the same axis as tab\n expansion for a portion of the view.  This is\n intended for use by the TabExpander for cases\n where the tab expansion involves aligning the\n portion of text that doesn't have whitespace\n relative to the tab stop.  There is therefore\n an assumption that the range given does not\n contain tabs.\n \n This method can be called while servicing the\n getTabbedSpan or getPreferredSize.  It has to\n arrange for its own text buffer to make the\n measurements."}, {"method_name": "getStartOffset", "method_sig": "public int getStartOffset()", "description": "Fetches the portion of the model that this view is responsible for."}, {"method_name": "getEndOffset", "method_sig": "public int getEndOffset()", "description": "Fetches the portion of the model that this view is responsible for."}, {"method_name": "paint", "method_sig": "public void paint (Graphics g,\n                  Shape a)", "description": "Renders a portion of a text style run."}, {"method_name": "getMinimumSpan", "method_sig": "public float getMinimumSpan (int axis)", "description": "Determines the minimum span for this view along an axis.\n\n This implementation returns the longest non-breakable area within\n the view as a minimum span for View.X_AXIS."}, {"method_name": "getPreferredSpan", "method_sig": "public float getPreferredSpan (int axis)", "description": "Determines the preferred span for this view along an\n axis."}, {"method_name": "getAlignment", "method_sig": "public float getAlignment (int axis)", "description": "Determines the desired alignment for this view along an\n axis.  For the label, the alignment is along the font\n baseline for the y axis, and the superclasses alignment\n along the x axis."}, {"method_name": "modelToView", "method_sig": "public Shape modelToView (int pos,\n                         Shape a,\n                         Position.Bias b)\n                  throws BadLocationException", "description": "Provides a mapping from the document model coordinate space\n to the coordinate space of the view mapped to it."}, {"method_name": "viewToModel", "method_sig": "public int viewToModel (float x,\n                       float y,\n                       Shape a,\n                       Position.Bias[] biasReturn)", "description": "Provides a mapping from the view coordinate space to the logical\n coordinate space of the model."}, {"method_name": "getBreakWeight", "method_sig": "public int getBreakWeight (int axis,\n                          float pos,\n                          float len)", "description": "Determines how attractive a break opportunity in\n this view is.  This can be used for determining which\n view is the most attractive to call breakView\n on in the process of formatting.  The\n higher the weight, the more attractive the break.  A\n value equal to or lower than View.BadBreakWeight\n should not be considered for a break.  A value greater\n than or equal to View.ForcedBreakWeight should\n be broken.\n \n This is implemented to forward to the superclass for\n the Y_AXIS.  Along the X_AXIS the following values\n may be returned.\n \nView.ExcellentBreakWeight\nif there is whitespace proceeding the desired break\n   location.\n View.BadBreakWeight\nif the desired break location results in a break\n   location of the starting offset.\n View.GoodBreakWeight\nif the other conditions don't occur.\n \n This will normally result in the behavior of breaking\n on a whitespace location if one can be found, otherwise\n breaking between characters."}, {"method_name": "breakView", "method_sig": "public View breakView (int axis,\n                      int p0,\n                      float pos,\n                      float len)", "description": "Breaks this view on the given axis at the given length.\n This is implemented to attempt to break on a whitespace\n location, and returns a fragment with the whitespace at\n the end.  If a whitespace location can't be found, the\n nearest character is used."}, {"method_name": "createFragment", "method_sig": "public View createFragment (int p0,\n                           int p1)", "description": "Creates a view that represents a portion of the element.\n This is potentially useful during formatting operations\n for taking measurements of fragments of the view.  If\n the view doesn't support fragmenting (the default), it\n should return itself.\n \n This view does support fragmenting.  It is implemented\n to return a nested class that shares state in this view\n representing only a portion of the view."}, {"method_name": "getNextVisualPositionFrom", "method_sig": "public int getNextVisualPositionFrom (int pos,\n                                     Position.Bias b,\n                                     Shape a,\n                                     int direction,\n                                     Position.Bias[] biasRet)\n                              throws BadLocationException", "description": "Provides a way to determine the next visually represented model\n location that one might place a caret.  Some views may not be\n visible, they might not be in the same order found in the model, or\n they just might not allow access to some of the locations in the\n model.\n This method enables specifying a position to convert\n within the range of >=0.  If the value is -1, a position\n will be calculated automatically.  If the value < -1,\n the BadLocationException will be thrown."}, {"method_name": "insertUpdate", "method_sig": "public void insertUpdate (DocumentEvent e,\n                         Shape a,\n                         ViewFactory f)", "description": "Gives notification that something was inserted into\n the document in a location that this view is responsible for.\n This is implemented to call preferenceChanged along the\n axis the glyphs are rendered."}, {"method_name": "removeUpdate", "method_sig": "public void removeUpdate (DocumentEvent e,\n                         Shape a,\n                         ViewFactory f)", "description": "Gives notification that something was removed from the document\n in a location that this view is responsible for.\n This is implemented to call preferenceChanged along the\n axis the glyphs are rendered."}, {"method_name": "changedUpdate", "method_sig": "public void changedUpdate (DocumentEvent e,\n                          Shape a,\n                          ViewFactory f)", "description": "Gives notification from the document that attributes were changed\n in a location that this view is responsible for.\n This is implemented to call preferenceChanged along both the\n horizontal and vertical axis."}]}