{"name": "Class Spliterators.AbstractLongSpliterator", "module": "java.base", "package": "java.util", "text": "An abstract Spliterator.OfLong that implements trySplit\n to permit limited parallelism.\n\n To implement a spliterator an extending class need only\n implement tryAdvance.  The extending class should override\n forEachRemaining\n if it can provide a more performant implementation.", "codes": ["public abstract static class Spliterators.AbstractLongSpliterator\nextends Object\nimplements Spliterator.OfLong"], "fields": [], "methods": [{"method_name": "trySplit", "method_sig": "public Spliterator.OfLong trySplit()", "description": "If this spliterator can be partitioned, returns a Spliterator\n covering elements, that will, upon return from this method, not\n be covered by this Spliterator.\n\n If this Spliterator is Spliterator.ORDERED, the returned Spliterator\n must cover a strict prefix of the elements.\n\n Unless this Spliterator covers an infinite number of elements,\n repeated calls to trySplit() must eventually return null.\n Upon non-null return:\n \nthe value reported for estimateSize() before splitting,\n must, after splitting, be greater than or equal to estimateSize()\n for this and the returned Spliterator; and\nif this Spliterator is SUBSIZED, then estimateSize()\n for this spliterator before splitting must be equal to the sum of\n estimateSize() for this and the returned Spliterator after\n splitting.\n\nThis method may return null for any reason,\n including emptiness, inability to split after traversal has\n commenced, data structure constraints, and efficiency\n considerations.\n\n This implementation permits limited parallelism."}, {"method_name": "estimateSize", "method_sig": "public long estimateSize()", "description": "Returns an estimate of the number of elements that would be\n encountered by a Spliterator.forEachRemaining(java.util.function.Consumer<? super T>) traversal, or returns Long.MAX_VALUE if infinite, unknown, or too expensive to compute.\n\n If this Spliterator is Spliterator.SIZED and has not yet been partially\n traversed or split, or this Spliterator is Spliterator.SUBSIZED and has\n not yet been partially traversed, this estimate must be an accurate\n count of elements that would be encountered by a complete traversal.\n Otherwise, this estimate may be arbitrarily inaccurate, but must decrease\n as specified across invocations of Spliterator.trySplit()."}, {"method_name": "characteristics", "method_sig": "public int characteristics()", "description": "Returns a set of characteristics of this Spliterator and its\n elements. The result is represented as ORed values from Spliterator.ORDERED, Spliterator.DISTINCT, Spliterator.SORTED, Spliterator.SIZED,\n Spliterator.NONNULL, Spliterator.IMMUTABLE, Spliterator.CONCURRENT,\n Spliterator.SUBSIZED.  Repeated calls to characteristics() on\n a given spliterator, prior to or in-between calls to trySplit,\n should always return the same result.\n\n If a Spliterator reports an inconsistent set of\n characteristics (either those returned from a single invocation\n or across multiple invocations), no guarantees can be made\n about any computation using this Spliterator."}]}