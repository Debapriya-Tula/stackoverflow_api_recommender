{"name": "Class AtomicBoolean", "module": "java.base", "package": "java.util.concurrent.atomic", "text": "A boolean value that may be updated atomically. See the\n VarHandle specification for descriptions of the properties\n of atomic accesses. An AtomicBoolean is used in\n applications such as atomically updated flags, and cannot be used\n as a replacement for a Boolean.", "codes": ["public class AtomicBoolean\nextends Object\nimplements Serializable"], "fields": [], "methods": [{"method_name": "get", "method_sig": "public final boolean get()", "description": "Returns the current value,\n with memory effects as specified by VarHandle.getVolatile(java.lang.Object...)."}, {"method_name": "compareAndSet", "method_sig": "public final boolean compareAndSet (boolean expectedValue,\n                                   boolean newValue)", "description": "Atomically sets the value to newValue\n if the current value == expectedValue,\n with memory effects as specified by VarHandle.compareAndSet(java.lang.Object...)."}, {"method_name": "weakCompareAndSet", "method_sig": "@Deprecated(since=\"9\")\npublic boolean weakCompareAndSet (boolean expectedValue,\n                                 boolean newValue)", "description": "Possibly atomically sets the value to newValue\n if the current value == expectedValue,\n with memory effects as specified by VarHandle.weakCompareAndSetPlain(java.lang.Object...)."}, {"method_name": "weakCompareAndSetPlain", "method_sig": "public boolean weakCompareAndSetPlain (boolean expectedValue,\n                                      boolean newValue)", "description": "Possibly atomically sets the value to newValue\n if the current value == expectedValue,\n with memory effects as specified by VarHandle.weakCompareAndSetPlain(java.lang.Object...)."}, {"method_name": "set", "method_sig": "public final void set (boolean newValue)", "description": "Sets the value to newValue,\n with memory effects as specified by VarHandle.setVolatile(java.lang.Object...)."}, {"method_name": "lazySet", "method_sig": "public final void lazySet (boolean newValue)", "description": "Sets the value to newValue,\n with memory effects as specified by VarHandle.setRelease(java.lang.Object...)."}, {"method_name": "getAndSet", "method_sig": "public final boolean getAndSet (boolean newValue)", "description": "Atomically sets the value to newValue and returns the old value,\n with memory effects as specified by VarHandle.getAndSet(java.lang.Object...)."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns the String representation of the current value."}, {"method_name": "getPlain", "method_sig": "public final boolean getPlain()", "description": "Returns the current value, with memory semantics of reading as\n if the variable was declared non-volatile."}, {"method_name": "setPlain", "method_sig": "public final void setPlain (boolean newValue)", "description": "Sets the value to newValue, with memory semantics\n of setting as if the variable was declared non-volatile\n and non-final."}, {"method_name": "getOpaque", "method_sig": "public final boolean getOpaque()", "description": "Returns the current value,\n with memory effects as specified by VarHandle.getOpaque(java.lang.Object...)."}, {"method_name": "setOpaque", "method_sig": "public final void setOpaque (boolean newValue)", "description": "Sets the value to newValue,\n with memory effects as specified by VarHandle.setOpaque(java.lang.Object...)."}, {"method_name": "getAcquire", "method_sig": "public final boolean getAcquire()", "description": "Returns the current value,\n with memory effects as specified by VarHandle.getAcquire(java.lang.Object...)."}, {"method_name": "setRelease", "method_sig": "public final void setRelease (boolean newValue)", "description": "Sets the value to newValue,\n with memory effects as specified by VarHandle.setRelease(java.lang.Object...)."}, {"method_name": "compareAndExchange", "method_sig": "public final boolean compareAndExchange (boolean expectedValue,\n                                        boolean newValue)", "description": "Atomically sets the value to newValue if the current value,\n referred to as the witness value, == expectedValue,\n with memory effects as specified by\n VarHandle.compareAndExchange(java.lang.Object...)."}, {"method_name": "compareAndExchangeAcquire", "method_sig": "public final boolean compareAndExchangeAcquire (boolean expectedValue,\n                                               boolean newValue)", "description": "Atomically sets the value to newValue if the current value,\n referred to as the witness value, == expectedValue,\n with memory effects as specified by\n VarHandle.compareAndExchangeAcquire(java.lang.Object...)."}, {"method_name": "compareAndExchangeRelease", "method_sig": "public final boolean compareAndExchangeRelease (boolean expectedValue,\n                                               boolean newValue)", "description": "Atomically sets the value to newValue if the current value,\n referred to as the witness value, == expectedValue,\n with memory effects as specified by\n VarHandle.compareAndExchangeRelease(java.lang.Object...)."}, {"method_name": "weakCompareAndSetVolatile", "method_sig": "public final boolean weakCompareAndSetVolatile (boolean expectedValue,\n                                               boolean newValue)", "description": "Possibly atomically sets the value to newValue if the current\n value == expectedValue,\n with memory effects as specified by\n VarHandle.weakCompareAndSet(java.lang.Object...)."}, {"method_name": "weakCompareAndSetAcquire", "method_sig": "public final boolean weakCompareAndSetAcquire (boolean expectedValue,\n                                              boolean newValue)", "description": "Possibly atomically sets the value to newValue if the current\n value == expectedValue,\n with memory effects as specified by\n VarHandle.weakCompareAndSetAcquire(java.lang.Object...)."}, {"method_name": "weakCompareAndSetRelease", "method_sig": "public final boolean weakCompareAndSetRelease (boolean expectedValue,\n                                              boolean newValue)", "description": "Possibly atomically sets the value to newValue if the current\n value == expectedValue,\n with memory effects as specified by\n VarHandle.weakCompareAndSetRelease(java.lang.Object...)."}]}