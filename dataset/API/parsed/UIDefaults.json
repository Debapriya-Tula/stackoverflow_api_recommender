{"name": "Class UIDefaults", "module": "java.desktop", "package": "javax.swing", "text": "A table of defaults for Swing components.  Applications can set/get\n default values via the UIManager.\n \nWarning:\n Serialized objects of this class will not be compatible with\n future Swing releases. The current serialization support is\n appropriate for short term storage or RMI between applications running\n the same version of Swing.  As of 1.4, support for long term storage\n of all JavaBeans\u2122\n has been added to the java.beans package.\n Please see XMLEncoder.", "codes": ["public class UIDefaults\nextends Hashtable<Object, Object>"], "fields": [], "methods": [{"method_name": "get", "method_sig": "public Object get (Object key)", "description": "Returns the value for key.  If the value is a\n UIDefaults.LazyValue then the real\n value is computed with LazyValue.createValue(),\n the table entry is replaced, and the real value is returned.\n If the value is an UIDefaults.ActiveValue\n the table entry is not replaced - the value is computed\n with ActiveValue.createValue() for each\n get() call.\n\n If the key is not found in the table then it is searched for in the list\n of resource bundles maintained by this object.  The resource bundles are\n searched most recently added first using the locale returned by\n getDefaultLocale.  LazyValues and\n ActiveValues are not supported in the resource bundles."}, {"method_name": "get", "method_sig": "public Object get (Object key,\n                  Locale l)", "description": "Returns the value for key associated with the given locale.\n If the value is a UIDefaults.LazyValue then the real\n value is computed with LazyValue.createValue(),\n the table entry is replaced, and the real value is returned.\n If the value is an UIDefaults.ActiveValue\n the table entry is not replaced - the value is computed\n with ActiveValue.createValue() for each\n get() call.\n\n If the key is not found in the table then it is searched for in the list\n of resource bundles maintained by this object.  The resource bundles are\n searched most recently added first using the given locale.\n LazyValues and ActiveValues are not supported\n in the resource bundles."}, {"method_name": "put", "method_sig": "public Object put (Object key,\n                  Object value)", "description": "Sets the value of key to value for all locales.\n If key is a string and the new value isn't\n equal to the old one, fire a PropertyChangeEvent.\n If value is null, the key is removed from the table."}, {"method_name": "putDefaults", "method_sig": "public void putDefaults (Object[] keyValueList)", "description": "Puts all of the key/value pairs in the database and\n unconditionally generates one PropertyChangeEvent.\n The events oldValue and newValue will be null and its\n propertyName will be \"UIDefaults\".  The key/value pairs are\n added for all locales."}, {"method_name": "getFont", "method_sig": "public Font getFont (Object key)", "description": "If the value of key is a Font return it,\n otherwise return null."}, {"method_name": "getFont", "method_sig": "public Font getFont (Object key,\n                    Locale l)", "description": "If the value of key for the given Locale\n is a Font return it, otherwise return null."}, {"method_name": "getColor", "method_sig": "public Color getColor (Object key)", "description": "If the value of key is a Color return it,\n otherwise return null."}, {"method_name": "getColor", "method_sig": "public Color getColor (Object key,\n                      Locale l)", "description": "If the value of key for the given Locale\n is a Color return it, otherwise return null."}, {"method_name": "getIcon", "method_sig": "public Icon getIcon (Object key)", "description": "If the value of key is an Icon return it,\n otherwise return null."}, {"method_name": "getIcon", "method_sig": "public Icon getIcon (Object key,\n                    Locale l)", "description": "If the value of key for the given Locale\n is an Icon return it, otherwise return null."}, {"method_name": "getBorder", "method_sig": "public Border getBorder (Object key)", "description": "If the value of key is a Border return it,\n otherwise return null."}, {"method_name": "getBorder", "method_sig": "public Border getBorder (Object key,\n                        Locale l)", "description": "If the value of key for the given Locale\n is a Border return it, otherwise return null."}, {"method_name": "getString", "method_sig": "public String getString (Object key)", "description": "If the value of key is a String return it,\n otherwise return null."}, {"method_name": "getString", "method_sig": "public String getString (Object key,\n                        Locale l)", "description": "If the value of key for the given Locale\n is a String return it, otherwise return null."}, {"method_name": "getInt", "method_sig": "public int getInt (Object key)", "description": "If the value of key is an Integer return its\n integer value, otherwise return 0."}, {"method_name": "getInt", "method_sig": "public int getInt (Object key,\n                  Locale l)", "description": "If the value of key for the given Locale\n is an Integer return its integer value, otherwise return 0."}, {"method_name": "getBoolean", "method_sig": "public boolean getBoolean (Object key)", "description": "If the value of key is boolean, return the\n boolean value, otherwise return false."}, {"method_name": "getBoolean", "method_sig": "public boolean getBoolean (Object key,\n                          Locale l)", "description": "If the value of key for the given Locale\n is boolean, return the boolean value, otherwise return false."}, {"method_name": "getInsets", "method_sig": "public Insets getInsets (Object key)", "description": "If the value of key is an Insets return it,\n otherwise return null."}, {"method_name": "getInsets", "method_sig": "public Insets getInsets (Object key,\n                        Locale l)", "description": "If the value of key for the given Locale\n is an Insets return it, otherwise return null."}, {"method_name": "getDimension", "method_sig": "public Dimension getDimension (Object key)", "description": "If the value of key is a Dimension return it,\n otherwise return null."}, {"method_name": "getDimension", "method_sig": "public Dimension getDimension (Object key,\n                              Locale l)", "description": "If the value of key for the given Locale\n is a Dimension return it, otherwise return null."}, {"method_name": "getUIClass", "method_sig": "public Class<? extends ComponentUI> getUIClass (String uiClassID,\n                                               ClassLoader uiClassLoader)", "description": "The value of get(uidClassID) must be the\n String name of a\n class that implements the corresponding ComponentUI\n class.  If the class hasn't been loaded before, this method looks\n up the class with uiClassLoader.loadClass() if a non\n null\n class loader is provided, classForName() otherwise.\n \n If a mapping for uiClassID exists or if the specified\n class can't be found, return null.\n \n This method is used by getUI, it's usually\n not necessary to call it directly."}, {"method_name": "getUIClass", "method_sig": "public Class<? extends ComponentUI> getUIClass (String uiClassID)", "description": "Returns the L&F class that renders this component."}, {"method_name": "getUIError", "method_sig": "protected void getUIError (String msg)", "description": "If getUI() fails for any reason,\n it calls this method before returning null.\n Subclasses may choose to do more or less here."}, {"method_name": "getUI", "method_sig": "public ComponentUI getUI (JComponent target)", "description": "Creates an ComponentUI implementation for the\n specified component.  In other words create the look\n and feel specific delegate object for target.\n This is done in two steps:\n \n Look up the name of the ComponentUI implementation\n class under the value returned by target.getUIClassID().\n  Use the implementation classes static createUI()\n method to construct a look and feel delegate.\n "}, {"method_name": "addPropertyChangeListener", "method_sig": "public void addPropertyChangeListener (PropertyChangeListener listener)", "description": "Adds a PropertyChangeListener to the listener list.\n The listener is registered for all properties.\n \n A PropertyChangeEvent will get fired whenever a default\n is changed."}, {"method_name": "removePropertyChangeListener", "method_sig": "public void removePropertyChangeListener (PropertyChangeListener listener)", "description": "Removes a PropertyChangeListener from the listener list.\n This removes a PropertyChangeListener that was registered\n for all properties."}, {"method_name": "getPropertyChangeListeners", "method_sig": "public PropertyChangeListener[] getPropertyChangeListeners()", "description": "Returns an array of all the PropertyChangeListeners added\n to this UIDefaults with addPropertyChangeListener()."}, {"method_name": "firePropertyChange", "method_sig": "protected void firePropertyChange (String propertyName,\n                                  Object oldValue,\n                                  Object newValue)", "description": "Support for reporting bound property changes.  If oldValue and\n newValue are not equal and the PropertyChangeEventx\n listener list isn't empty, then fire a\n PropertyChange event to each listener."}, {"method_name": "addResourceBundle", "method_sig": "public void addResourceBundle (String bundleName)", "description": "Adds a resource bundle to the list of resource bundles that are\n searched for localized values. Resource bundles are searched in\n the reverse order they were added, using the\n system class loader.\n In other words, the most recently added bundle is searched first."}, {"method_name": "removeResourceBundle", "method_sig": "public void removeResourceBundle (String bundleName)", "description": "Removes a resource bundle from the list of resource bundles that are\n searched for localized defaults."}, {"method_name": "setDefaultLocale", "method_sig": "public void setDefaultLocale (Locale l)", "description": "Sets the default locale.  The default locale is used in retrieving\n localized values via get methods that do not take a\n locale argument.  As of release 1.4, Swing UI objects should retrieve\n localized values using the locale of their component rather than the\n default locale.  The default locale exists to provide compatibility with\n pre 1.4 behaviour."}, {"method_name": "getDefaultLocale", "method_sig": "public Locale getDefaultLocale()", "description": "Returns the default locale.  The default locale is used in retrieving\n localized values via get methods that do not take a\n locale argument.  As of release 1.4, Swing UI objects should retrieve\n localized values using the locale of their component rather than the\n default locale.  The default locale exists to provide compatibility with\n pre 1.4 behaviour."}]}