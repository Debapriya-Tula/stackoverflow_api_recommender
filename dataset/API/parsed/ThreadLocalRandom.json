{"name": "Class ThreadLocalRandom", "module": "java.base", "package": "java.util.concurrent", "text": "A random number generator isolated to the current thread.  Like the\n global Random generator used by the Math class, a ThreadLocalRandom is initialized\n with an internally generated seed that may not otherwise be\n modified. When applicable, use of ThreadLocalRandom rather\n than shared Random objects in concurrent programs will\n typically encounter much less overhead and contention.  Use of\n ThreadLocalRandom is particularly appropriate when multiple\n tasks (for example, each a ForkJoinTask) use random numbers\n in parallel in thread pools.\n\n Usages of this class should typically be of the form:\n ThreadLocalRandom.current().nextX(...) (where\n X is Int, Long, etc).\n When all usages are of this form, it is never possible to\n accidentally share a ThreadLocalRandom across multiple threads.\n\n This class also provides additional commonly used bounded random\n generation methods.\n\n Instances of ThreadLocalRandom are not cryptographically\n secure.  Consider instead using SecureRandom\n in security-sensitive applications. Additionally,\n default-constructed instances do not use a cryptographically random\n seed unless the system property\njava.util.secureRandomSeed is set to true.", "codes": ["public class ThreadLocalRandom\nextends Random"], "fields": [], "methods": [{"method_name": "current", "method_sig": "public static ThreadLocalRandom current()", "description": "Returns the current thread's ThreadLocalRandom."}, {"method_name": "setSeed", "method_sig": "public void setSeed (long seed)", "description": "Throws UnsupportedOperationException.  Setting seeds in\n this generator is not supported."}, {"method_name": "next", "method_sig": "protected int next (int bits)", "description": "Generates a pseudorandom number with the indicated number of\n low-order bits.  Because this class has no subclasses, this\n method cannot be invoked or overridden."}, {"method_name": "nextInt", "method_sig": "public int nextInt()", "description": "Returns a pseudorandom int value."}, {"method_name": "nextInt", "method_sig": "public int nextInt (int bound)", "description": "Returns a pseudorandom int value between zero (inclusive)\n and the specified bound (exclusive)."}, {"method_name": "nextInt", "method_sig": "public int nextInt (int origin,\n                   int bound)", "description": "Returns a pseudorandom int value between the specified\n origin (inclusive) and the specified bound (exclusive)."}, {"method_name": "nextLong", "method_sig": "public long nextLong()", "description": "Returns a pseudorandom long value."}, {"method_name": "nextLong", "method_sig": "public long nextLong (long bound)", "description": "Returns a pseudorandom long value between zero (inclusive)\n and the specified bound (exclusive)."}, {"method_name": "nextLong", "method_sig": "public long nextLong (long origin,\n                     long bound)", "description": "Returns a pseudorandom long value between the specified\n origin (inclusive) and the specified bound (exclusive)."}, {"method_name": "nextDouble", "method_sig": "public double nextDouble()", "description": "Returns a pseudorandom double value between zero\n (inclusive) and one (exclusive)."}, {"method_name": "nextDouble", "method_sig": "public double nextDouble (double bound)", "description": "Returns a pseudorandom double value between 0.0\n (inclusive) and the specified bound (exclusive)."}, {"method_name": "nextDouble", "method_sig": "public double nextDouble (double origin,\n                         double bound)", "description": "Returns a pseudorandom double value between the specified\n origin (inclusive) and bound (exclusive)."}, {"method_name": "nextBoolean", "method_sig": "public boolean nextBoolean()", "description": "Returns a pseudorandom boolean value."}, {"method_name": "nextFloat", "method_sig": "public float nextFloat()", "description": "Returns a pseudorandom float value between zero\n (inclusive) and one (exclusive)."}, {"method_name": "ints", "method_sig": "public IntStream ints (long streamSize)", "description": "Returns a stream producing the given streamSize number of\n pseudorandom int values."}, {"method_name": "ints", "method_sig": "public IntStream ints()", "description": "Returns an effectively unlimited stream of pseudorandom int\n values."}, {"method_name": "ints", "method_sig": "public IntStream ints (long streamSize,\n                      int randomNumberOrigin,\n                      int randomNumberBound)", "description": "Returns a stream producing the given streamSize number\n of pseudorandom int values, each conforming to the given\n origin (inclusive) and bound (exclusive)."}, {"method_name": "ints", "method_sig": "public IntStream ints (int randomNumberOrigin,\n                      int randomNumberBound)", "description": "Returns an effectively unlimited stream of pseudorandom \n int values, each conforming to the given origin (inclusive) and bound\n (exclusive)."}, {"method_name": "longs", "method_sig": "public LongStream longs (long streamSize)", "description": "Returns a stream producing the given streamSize number of\n pseudorandom long values."}, {"method_name": "longs", "method_sig": "public LongStream longs()", "description": "Returns an effectively unlimited stream of pseudorandom long\n values."}, {"method_name": "longs", "method_sig": "public LongStream longs (long streamSize,\n                        long randomNumberOrigin,\n                        long randomNumberBound)", "description": "Returns a stream producing the given streamSize number of\n pseudorandom long, each conforming to the given origin\n (inclusive) and bound (exclusive)."}, {"method_name": "longs", "method_sig": "public LongStream longs (long randomNumberOrigin,\n                        long randomNumberBound)", "description": "Returns an effectively unlimited stream of pseudorandom \n long values, each conforming to the given origin (inclusive) and bound\n (exclusive)."}, {"method_name": "doubles", "method_sig": "public DoubleStream doubles (long streamSize)", "description": "Returns a stream producing the given streamSize number of\n pseudorandom double values, each between zero\n (inclusive) and one (exclusive)."}, {"method_name": "doubles", "method_sig": "public DoubleStream doubles()", "description": "Returns an effectively unlimited stream of pseudorandom \n double values, each between zero (inclusive) and one\n (exclusive)."}, {"method_name": "doubles", "method_sig": "public DoubleStream doubles (long streamSize,\n                            double randomNumberOrigin,\n                            double randomNumberBound)", "description": "Returns a stream producing the given streamSize number of\n pseudorandom double values, each conforming to the given origin\n (inclusive) and bound (exclusive)."}, {"method_name": "doubles", "method_sig": "public DoubleStream doubles (double randomNumberOrigin,\n                            double randomNumberBound)", "description": "Returns an effectively unlimited stream of pseudorandom \n double values, each conforming to the given origin (inclusive) and bound\n (exclusive)."}]}