{"name": "Interface ObjectFactoryBuilder", "module": "java.naming", "package": "javax.naming.spi", "text": "This interface represents a builder that creates object factories.\n\n The JNDI framework allows for object implementations to\n be loaded in dynamically via object factories.\n For example, when looking up a printer bound in the name space,\n if the print service binds printer names to References, the printer\n Reference could be used to create a printer object, so that\n the caller of lookup can directly operate on the printer object\n after the lookup.  An ObjectFactory is responsible for creating\n objects of a specific type.  JNDI uses a default policy for using\n and loading object factories.  You can override this default policy\n by calling NamingManager.setObjectFactoryBuilder() with an ObjectFactoryBuilder,\n which contains the program-defined way of creating/loading\n object factories.\n Any ObjectFactoryBuilder implementation must implement this\n interface that for creating object factories.", "codes": ["public interface ObjectFactoryBuilder"], "fields": [], "methods": [{"method_name": "createObjectFactory", "method_sig": "ObjectFactory createObjectFactory (Object obj,\n                                  Hashtable<?, ?> environment)\n                           throws NamingException", "description": "Creates a new object factory using the environment supplied.\n\n The environment parameter is owned by the caller.\n The implementation will not modify the object or keep a reference\n to it, although it may keep a reference to a clone or copy."}]}