{"name": "Class BasicProgressBarUI", "module": "java.desktop", "package": "javax.swing.plaf.basic", "text": "A Basic L&F implementation of ProgressBarUI.", "codes": ["public class BasicProgressBarUI\nextends ProgressBarUI"], "fields": [{"field_name": "progressBar", "field_sig": "protected\u00a0JProgressBar progressBar", "description": "The instance of JProgressBar."}, {"field_name": "changeListener", "field_sig": "protected\u00a0ChangeListener changeListener", "description": "The instance of ChangeListener."}, {"field_name": "boxRect", "field_sig": "protected\u00a0Rectangle boxRect", "description": "Used to hold the location and size of the bouncing box (returned\n by getBox) to be painted."}], "methods": [{"method_name": "createUI", "method_sig": "public static ComponentUI createUI (JComponent x)", "description": "Returns a new instance of BasicProgressBarUI."}, {"method_name": "installDefaults", "method_sig": "protected void installDefaults()", "description": "Installs default properties."}, {"method_name": "uninstallDefaults", "method_sig": "protected void uninstallDefaults()", "description": "Unintalls default properties."}, {"method_name": "installListeners", "method_sig": "protected void installListeners()", "description": "Registers listeners."}, {"method_name": "startAnimationTimer", "method_sig": "protected void startAnimationTimer()", "description": "Starts the animation thread, creating and initializing\n it if necessary. This method is invoked when an\n indeterminate progress bar should start animating.\n Reasons for this may include:\n \nThe progress bar is determinate and becomes displayable\n    The progress bar is displayable and becomes determinate\n    The progress bar is displayable and determinate and this\n        UI is installed\n \n If you implement your own animation thread,\n you must override this method."}, {"method_name": "stopAnimationTimer", "method_sig": "protected void stopAnimationTimer()", "description": "Stops the animation thread.\n This method is invoked when the indeterminate\n animation should be stopped. Reasons for this may include:\n \nThe progress bar changes to determinate\n    The progress bar is no longer part of a displayable hierarchy\n    This UI in uninstalled\n \n If you implement your own animation thread,\n you must override this method."}, {"method_name": "uninstallListeners", "method_sig": "protected void uninstallListeners()", "description": "Removes all listeners installed by this object."}, {"method_name": "getBaseline", "method_sig": "public int getBaseline (JComponent c,\n                       int width,\n                       int height)", "description": "Returns the baseline."}, {"method_name": "getBaselineResizeBehavior", "method_sig": "public Component.BaselineResizeBehavior getBaselineResizeBehavior (JComponent c)", "description": "Returns an enum indicating how the baseline of the component\n changes as the size changes."}, {"method_name": "getPreferredInnerHorizontal", "method_sig": "protected Dimension getPreferredInnerHorizontal()", "description": "Returns preferred size of the horizontal JProgressBar."}, {"method_name": "getPreferredInnerVertical", "method_sig": "protected Dimension getPreferredInnerVertical()", "description": "Returns preferred size of the vertical JProgressBar."}, {"method_name": "getSelectionForeground", "method_sig": "protected Color getSelectionForeground()", "description": "The \"selectionForeground\" is the color of the text when it is painted\n over a filled area of the progress bar."}, {"method_name": "getSelectionBackground", "method_sig": "protected Color getSelectionBackground()", "description": "The \"selectionBackground\" is the color of the text when it is painted\n over an unfilled area of the progress bar."}, {"method_name": "getCellLength", "method_sig": "protected int getCellLength()", "description": "Returns the width (if HORIZONTAL) or height (if VERTICAL)\n of each of the individual cells/units to be rendered in the\n progress bar. However, for text rendering simplification and\n aesthetic considerations, this function will return 1 when\n the progress string is being rendered."}, {"method_name": "setCellLength", "method_sig": "protected void setCellLength (int cellLen)", "description": "Sets the cell length."}, {"method_name": "getCellSpacing", "method_sig": "protected int getCellSpacing()", "description": "Returns the spacing between each of the cells/units in the\n progress bar. However, for text rendering simplification and\n aesthetic considerations, this function will return 0 when\n the progress string is being rendered."}, {"method_name": "setCellSpacing", "method_sig": "protected void setCellSpacing (int cellSpace)", "description": "Sets the cell spacing."}, {"method_name": "getAmountFull", "method_sig": "protected int getAmountFull (Insets b,\n                            int width,\n                            int height)", "description": "This determines the amount of the progress bar that should be filled\n based on the percent done gathered from the model. This is a common\n operation so it was abstracted out. It assumes that your progress bar\n is linear. That is, if you are making a circular progress indicator,\n you will want to override this method."}, {"method_name": "paint", "method_sig": "public void paint (Graphics g,\n                  JComponent c)", "description": "Delegates painting to one of two methods:\n paintDeterminate or paintIndeterminate."}, {"method_name": "getBox", "method_sig": "protected Rectangle getBox (Rectangle r)", "description": "Stores the position and size of\n the bouncing box that would be painted for the current animation index\n in r and returns r.\n Subclasses that add to the painting performed\n in this class's implementation of paintIndeterminate --\n to draw an outline around the bouncing box, for example --\n can use this method to get the location of the bouncing\n box that was just painted.\n By overriding this method,\n you have complete control over the size and position\n of the bouncing box,\n without having to reimplement paintIndeterminate."}, {"method_name": "getBoxLength", "method_sig": "protected int getBoxLength (int availableLength,\n                           int otherDimension)", "description": "Returns the length\n of the \"bouncing box\" to be painted.\n This method is invoked by the\n default implementation of paintIndeterminate\n to get the width (if the progress bar is horizontal)\n or height (if vertical) of the box.\n For example:\n \n\nboxRect.width = getBoxLength(componentInnards.width,\n                             componentInnards.height);\n \n"}, {"method_name": "paintIndeterminate", "method_sig": "protected void paintIndeterminate (Graphics g,\n                                  JComponent c)", "description": "All purpose paint method that should do the right thing for all\n linear bouncing-box progress bars.\n Override this if you are making another kind of\n progress bar."}, {"method_name": "paintDeterminate", "method_sig": "protected void paintDeterminate (Graphics g,\n                                JComponent c)", "description": "All purpose paint method that should do the right thing for almost\n all linear, determinate progress bars. By setting a few values in\n the defaults\n table, things should work just fine to paint your progress bar.\n Naturally, override this if you are making a circular or\n semi-circular progress bar."}, {"method_name": "paintString", "method_sig": "protected void paintString (Graphics g,\n                           int x,\n                           int y,\n                           int width,\n                           int height,\n                           int amountFull,\n                           Insets b)", "description": "Paints the progress string."}, {"method_name": "getStringPlacement", "method_sig": "protected Point getStringPlacement (Graphics g,\n                                   String progressString,\n                                   int x,\n                                   int y,\n                                   int width,\n                                   int height)", "description": "Designate the place where the progress string will be painted.\n This implementation places it at the center of the progress\n bar (in both x and y). Override this if you want to right,\n left, top, or bottom align the progress string or if you need\n to nudge it around for any reason."}, {"method_name": "getMinimumSize", "method_sig": "public Dimension getMinimumSize (JComponent c)", "description": "The Minimum size for this component is 10. The rationale here\n is that there should be at least one pixel per 10 percent."}, {"method_name": "getAnimationIndex", "method_sig": "protected int getAnimationIndex()", "description": "Gets the index of the current animation frame."}, {"method_name": "getFrameCount", "method_sig": "protected final int getFrameCount()", "description": "Returns the number of frames for the complete animation loop\n used by an indeterminate JProgessBar. The progress chunk will go\n from one end to the other and back during the entire loop. This\n visual behavior may be changed by subclasses in other Look and Feels."}, {"method_name": "setAnimationIndex", "method_sig": "protected void setAnimationIndex (int newValue)", "description": "Sets the index of the current animation frame\n to the specified value and requests that the\n progress bar be repainted.\n Subclasses that don't use the default painting code\n might need to override this method\n to change the way that the repaint method\n is invoked."}, {"method_name": "incrementAnimationIndex", "method_sig": "protected void incrementAnimationIndex()", "description": "Sets the index of the current animation frame,\n to the next valid value,\n which results in the progress bar being repainted.\n The next valid value is, by default,\n the current animation index plus one.\n If the new value would be too large,\n this method sets the index to 0.\n Subclasses might need to override this method\n to ensure that the index does not go over\n the number of frames needed for the particular\n progress bar instance.\n This method is invoked by the default animation thread\n every X milliseconds,\n where X is specified by the \"ProgressBar.repaintInterval\"\n UI default."}]}