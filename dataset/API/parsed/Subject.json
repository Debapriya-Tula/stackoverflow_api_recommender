{"name": "Class Subject", "module": "java.base", "package": "javax.security.auth", "text": " A Subject represents a grouping of related information\n for a single entity, such as a person.\n Such information includes the Subject's identities as well as\n its security-related attributes\n (passwords and cryptographic keys, for example).\n\n  Subjects may potentially have multiple identities.\n Each identity is represented as a Principal\n within the Subject.  Principals simply bind names to a\n Subject.  For example, a Subject that happens\n to be a person, Alice, might have two Principals:\n one which binds \"Alice Bar\", the name on her driver license,\n to the Subject, and another which binds,\n \"999-99-9999\", the number on her student identification card,\n to the Subject.  Both Principals refer to the same\n Subject even though each has a different name.\n\n  A Subject may also own security-related attributes,\n which are referred to as credentials.\n Sensitive credentials that require special protection, such as\n private cryptographic keys, are stored within a private credential\n Set.  Credentials intended to be shared, such as\n public key certificates or Kerberos server tickets are stored\n within a public credential Set.  Different permissions\n are required to access and modify the different credential Sets.\n\n  To retrieve all the Principals associated with a Subject,\n invoke the getPrincipals method.  To retrieve\n all the public or private credentials belonging to a Subject,\n invoke the getPublicCredentials method or\n getPrivateCredentials method, respectively.\n To modify the returned Set of Principals and credentials,\n use the methods defined in the Set class.\n For example:\n \n      Subject subject;\n      Principal principal;\n      Object credential;\n\n      // add a Principal and credential to the Subject\n      subject.getPrincipals().add(principal);\n      subject.getPublicCredentials().add(credential);\n \n This Subject class implements Serializable.\n While the Principals associated with the Subject are serialized,\n the credentials associated with the Subject are not.\n Note that the java.security.Principal class\n does not implement Serializable.  Therefore all concrete\n Principal implementations associated with Subjects\n must implement Serializable.", "codes": ["public final class Subject\nextends Object\nimplements Serializable"], "fields": [], "methods": [{"method_name": "setReadOnly", "method_sig": "public void setReadOnly()", "description": "Set this Subject to be read-only.\n\n  Modifications (additions and removals) to this Subject's\n Principal Set and\n credential Sets will be disallowed.\n The destroy operation on this Subject's credentials will\n still be permitted.\n\n  Subsequent attempts to modify the Subject's Principal\n and credential Sets will result in an\n IllegalStateException being thrown.\n Also, once a Subject is read-only,\n it can not be reset to being writable again."}, {"method_name": "isReadOnly", "method_sig": "public boolean isReadOnly()", "description": "Query whether this Subject is read-only."}, {"method_name": "getSubject", "method_sig": "public static Subject getSubject (AccessControlContext acc)", "description": "Get the Subject associated with the provided\n AccessControlContext.\n\n  The AccessControlContext may contain many\n Subjects (from nested doAs calls).\n In this situation, the most recent Subject associated\n with the AccessControlContext is returned."}, {"method_name": "doAs", "method_sig": "public static <T> T doAs (Subject subject,\n                         PrivilegedAction<T> action)", "description": "Perform work as a particular Subject.\n\n  This method first retrieves the current Thread's\n AccessControlContext via\n AccessController.getContext,\n and then instantiates a new AccessControlContext\n using the retrieved context along with a new\n SubjectDomainCombiner (constructed using\n the provided Subject).\n Finally, this method invokes AccessController.doPrivileged,\n passing it the provided PrivilegedAction,\n as well as the newly constructed AccessControlContext."}, {"method_name": "doAs", "method_sig": "public static <T> T doAs (Subject subject,\n                         PrivilegedExceptionAction<T> action)\n                  throws PrivilegedActionException", "description": "Perform work as a particular Subject.\n\n  This method first retrieves the current Thread's\n AccessControlContext via\n AccessController.getContext,\n and then instantiates a new AccessControlContext\n using the retrieved context along with a new\n SubjectDomainCombiner (constructed using\n the provided Subject).\n Finally, this method invokes AccessController.doPrivileged,\n passing it the provided PrivilegedExceptionAction,\n as well as the newly constructed AccessControlContext."}, {"method_name": "doAsPrivileged", "method_sig": "public static <T> T doAsPrivileged (Subject subject,\n                                   PrivilegedAction<T> action,\n                                   AccessControlContext acc)", "description": "Perform privileged work as a particular Subject.\n\n  This method behaves exactly as Subject.doAs,\n except that instead of retrieving the current Thread's\n AccessControlContext, it uses the provided\n AccessControlContext.  If the provided\n AccessControlContext is null,\n this method instantiates a new AccessControlContext\n with an empty collection of ProtectionDomains."}, {"method_name": "doAsPrivileged", "method_sig": "public static <T> T doAsPrivileged (Subject subject,\n                                   PrivilegedExceptionAction<T> action,\n                                   AccessControlContext acc)\n                            throws PrivilegedActionException", "description": "Perform privileged work as a particular Subject.\n\n  This method behaves exactly as Subject.doAs,\n except that instead of retrieving the current Thread's\n AccessControlContext, it uses the provided\n AccessControlContext.  If the provided\n AccessControlContext is null,\n this method instantiates a new AccessControlContext\n with an empty collection of ProtectionDomains."}, {"method_name": "getPrincipals", "method_sig": "public Set<Principal> getPrincipals()", "description": "Return the Set of Principals associated with this\n Subject.  Each Principal represents\n an identity for this Subject.\n\n  The returned Set is backed by this Subject's\n internal Principal Set.  Any modification\n to the returned Set affects the internal\n Principal Set as well.\n\n  If a security manager is installed, the caller must have a\n AuthPermission(\"modifyPrincipals\") permission to modify\n the returned set, or a SecurityException will be thrown."}, {"method_name": "getPrincipals", "method_sig": "public <T extends Principal> Set<T> getPrincipals (Class<T> c)", "description": "Return a Set of Principals associated with this\n Subject that are instances or subclasses of the specified\n Class.\n\n  The returned Set is not backed by this Subject's\n internal Principal Set.  A new\n Set is created and returned for each method invocation.\n Modifications to the returned Set\n will not affect the internal Principal Set."}, {"method_name": "getPublicCredentials", "method_sig": "public Set<Object> getPublicCredentials()", "description": "Return the Set of public credentials held by this\n Subject.\n\n  The returned Set is backed by this Subject's\n internal public Credential Set.  Any modification\n to the returned Set affects the internal public\n Credential Set as well.\n\n  If a security manager is installed, the caller must have a\n AuthPermission(\"modifyPublicCredentials\") permission to modify\n the returned set, or a SecurityException will be thrown."}, {"method_name": "getPrivateCredentials", "method_sig": "public Set<Object> getPrivateCredentials()", "description": "Return the Set of private credentials held by this\n Subject.\n\n  The returned Set is backed by this Subject's\n internal private Credential Set.  Any modification\n to the returned Set affects the internal private\n Credential Set as well.\n\n  If a security manager is installed, the caller must have a\n AuthPermission(\"modifyPrivateCredentials\") permission to modify\n the returned set, or a SecurityException will be thrown.\n\n  While iterating through the Set,\n a SecurityException is thrown if a security manager is installed\n and the caller does not have a PrivateCredentialPermission\n to access a particular Credential.  The Iterator\n is nevertheless advanced to the next element in the Set."}, {"method_name": "getPublicCredentials", "method_sig": "public <T> Set<T> getPublicCredentials (Class<T> c)", "description": "Return a Set of public credentials associated with this\n Subject that are instances or subclasses of the specified\n Class.\n\n  The returned Set is not backed by this Subject's\n internal public Credential Set.  A new\n Set is created and returned for each method invocation.\n Modifications to the returned Set\n will not affect the internal public Credential Set."}, {"method_name": "getPrivateCredentials", "method_sig": "public <T> Set<T> getPrivateCredentials (Class<T> c)", "description": "Return a Set of private credentials associated with this\n Subject that are instances or subclasses of the specified\n Class.\n\n  If a security manager is installed, the caller must have a\n PrivateCredentialPermission to access all of the requested\n Credentials, or a SecurityException will be thrown.\n\n  The returned Set is not backed by this Subject's\n internal private Credential Set.  A new\n Set is created and returned for each method invocation.\n Modifications to the returned Set\n will not affect the internal private Credential Set."}, {"method_name": "equals", "method_sig": "public boolean equals (Object o)", "description": "Compares the specified Object with this Subject\n for equality.  Returns true if the given object is also a Subject\n and the two Subject instances are equivalent.\n More formally, two Subject instances are\n equal if their Principal and Credential\n Sets are equal."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Return the String representation of this Subject."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Returns a hashcode for this Subject."}]}