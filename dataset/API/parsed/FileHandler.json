{"name": "Class FileHandler", "module": "java.logging", "package": "java.util.logging", "text": "Simple file logging Handler.\n \n The FileHandler can either write to a specified file,\n or it can write to a rotating set of files.\n \n For a rotating set of files, as each file reaches a given size\n limit, it is closed, rotated out, and a new file opened.\n Successively older files are named by adding \"0\", \"1\", \"2\",\n etc. into the base filename.\n \n By default buffering is enabled in the IO libraries but each log\n record is flushed out when it is complete.\n \n By default the XMLFormatter class is used for formatting.\n \nConfiguration:\n By default each FileHandler is initialized using the following\n LogManager configuration properties where <handler-name>\n refers to the fully-qualified class name of the handler.\n If properties are not defined\n (or have invalid values) then the specified default values are used.\n \n   <handler-name>.level\n        specifies the default level for the Handler\n        (defaults to Level.ALL). \n   <handler-name>.filter\n        specifies the name of a Filter class to use\n        (defaults to no Filter). \n   <handler-name>.formatter\n        specifies the name of a Formatter class to use\n        (defaults to java.util.logging.XMLFormatter) \n   <handler-name>.encoding\n        the name of the character set encoding to use (defaults to\n        the default platform encoding). \n   <handler-name>.limit\n        specifies an approximate maximum amount to write (in bytes)\n        to any one file.  If this is zero, then there is no limit.\n        (Defaults to no limit). \n   <handler-name>.count\n        specifies how many output files to cycle through (defaults to 1). \n   <handler-name>.pattern\n        specifies a pattern for generating the output file name.  See\n        below for details. (Defaults to \"%h/java%u.log\"). \n   <handler-name>.append\n        specifies whether the FileHandler should append onto\n        any existing files (defaults to false). \n   <handler-name>.maxLocks\n        specifies the maximum number of concurrent locks held by\n        FileHandler (defaults to 100). \n\n\n For example, the properties for FileHandler would be:\n \n   java.util.logging.FileHandler.level=INFO \n   java.util.logging.FileHandler.formatter=java.util.logging.SimpleFormatter \n\n\n For a custom handler, e.g. com.foo.MyHandler, the properties would be:\n \n   com.foo.MyHandler.level=INFO \n   com.foo.MyHandler.formatter=java.util.logging.SimpleFormatter \n\n\n A pattern consists of a string that includes the following special\n components that will be replaced at runtime:\n \n    \"/\"    the local pathname separator \n     \"%t\"   the system temporary directory \n     \"%h\"   the value of the \"user.home\" system property \n     \"%g\"   the generation number to distinguish rotated logs \n     \"%u\"   a unique number to resolve conflicts \n     \"%%\"   translates to a single percent sign \"%\" \n\n If no \"%g\" field has been specified and the file count is greater\n than one, then the generation number will be added to the end of\n the generated filename, after a dot.\n \n Thus for example a pattern of \"%t/java%g.log\" with a count of 2\n would typically cause log files to be written on Solaris to\n /var/tmp/java0.log and /var/tmp/java1.log whereas on Windows 95 they\n would be typically written to C:\\TEMP\\java0.log and C:\\TEMP\\java1.log\n \n Generation numbers follow the sequence 0, 1, 2, etc.\n \n Normally the \"%u\" unique field is set to 0.  However, if the FileHandler\n tries to open the filename and finds the file is currently in use by\n another process it will increment the unique number field and try\n again.  This will be repeated until FileHandler finds a file name that\n is  not currently in use. If there is a conflict and no \"%u\" field has\n been specified, it will be added at the end of the filename after a dot.\n (This will be after any automatically added generation number.)\n \n Thus if three processes were all trying to log to fred%u.%g.txt then\n they  might end up using fred0.0.txt, fred1.0.txt, fred2.0.txt as\n the first file in their rotating sequences.\n \n Note that the use of unique ids to avoid conflicts is only guaranteed\n to work reliably when using a local disk file system.", "codes": ["public class FileHandler\nextends StreamHandler"], "fields": [], "methods": [{"method_name": "publish", "method_sig": "public void publish (LogRecord record)", "description": "Format and publish a LogRecord."}, {"method_name": "close", "method_sig": "public void close()\n           throws SecurityException", "description": "Close all the files."}]}