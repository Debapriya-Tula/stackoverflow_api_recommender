{"name": "Class StyleContext", "module": "java.desktop", "package": "javax.swing.text", "text": "A pool of styles and their associated resources.  This class determines\n the lifetime of a group of resources by being a container that holds\n caches for various resources such as font and color that get reused\n by the various style definitions.  This can be shared by multiple\n documents if desired to maximize the sharing of related resources.\n \n This class also provides efficient support for small sets of attributes\n and compresses them by sharing across uses and taking advantage of\n their immutable nature.  Since many styles are replicated, the potential\n for sharing is significant, and copies can be extremely cheap.\n Larger sets reduce the possibility of sharing, and therefore revert\n automatically to a less space-efficient implementation.\n \nWarning:\n Serialized objects of this class will not be compatible with\n future Swing releases. The current serialization support is\n appropriate for short term storage or RMI between applications running\n the same version of Swing.  As of 1.4, support for long term storage\n of all JavaBeans\u2122\n has been added to the java.beans package.\n Please see XMLEncoder.", "codes": ["public class StyleContext\nextends Object\nimplements Serializable, AbstractDocument.AttributeContext"], "fields": [{"field_name": "DEFAULT_STYLE", "field_sig": "public static final\u00a0String DEFAULT_STYLE", "description": "The name given to the default logical style attached\n to paragraphs."}], "methods": [{"method_name": "getDefaultStyleContext", "method_sig": "public static final StyleContext getDefaultStyleContext()", "description": "Returns default AttributeContext shared by all documents that\n don't bother to define/supply their own context."}, {"method_name": "addStyle", "method_sig": "public Style addStyle (String nm,\n                      Style parent)", "description": "Adds a new style into the style hierarchy.  Style attributes\n resolve from bottom up so an attribute specified in a child\n will override an attribute specified in the parent."}, {"method_name": "removeStyle", "method_sig": "public void removeStyle (String nm)", "description": "Removes a named style previously added to the document."}, {"method_name": "getStyle", "method_sig": "public Style getStyle (String nm)", "description": "Fetches a named style previously added to the document"}, {"method_name": "getStyleNames", "method_sig": "public Enumeration<?> getStyleNames()", "description": "Fetches the names of the styles defined."}, {"method_name": "addChangeListener", "method_sig": "public void addChangeListener (ChangeListener l)", "description": "Adds a listener to track when styles are added\n or removed."}, {"method_name": "removeChangeListener", "method_sig": "public void removeChangeListener (ChangeListener l)", "description": "Removes a listener that was tracking styles being\n added or removed."}, {"method_name": "getChangeListeners", "method_sig": "public ChangeListener[] getChangeListeners()", "description": "Returns an array of all the ChangeListeners added\n to this StyleContext with addChangeListener()."}, {"method_name": "getFont", "method_sig": "public Font getFont (AttributeSet attr)", "description": "Gets the font from an attribute set.  This is\n implemented to try and fetch a cached font\n for the given AttributeSet, and if that fails\n the font features are resolved and the\n font is fetched from the low-level font cache."}, {"method_name": "getForeground", "method_sig": "public Color getForeground (AttributeSet attr)", "description": "Takes a set of attributes and turn it into a foreground color\n specification.  This might be used to specify things\n like brighter, more hue, etc.  By default it simply returns\n the value specified by the StyleConstants.Foreground attribute."}, {"method_name": "getBackground", "method_sig": "public Color getBackground (AttributeSet attr)", "description": "Takes a set of attributes and turn it into a background color\n specification.  This might be used to specify things\n like brighter, more hue, etc.  By default it simply returns\n the value specified by the StyleConstants.Background attribute."}, {"method_name": "getFont", "method_sig": "public Font getFont (String family,\n                    int style,\n                    int size)", "description": "Gets a new font.  This returns a Font from a cache\n if a cached font exists.  If not, a Font is added to\n the cache.  This is basically a low-level cache for\n 1.1 font features."}, {"method_name": "getFontMetrics", "method_sig": "public FontMetrics getFontMetrics (Font f)", "description": "Returns font metrics for a font."}, {"method_name": "addAttribute", "method_sig": "public AttributeSet addAttribute (AttributeSet old,\n                                 Object name,\n                                 Object value)", "description": "Adds an attribute to the given set, and returns\n the new representative set.\n \n This method is thread safe, although most Swing methods\n are not. Please see\n Concurrency\n in Swing for more information."}, {"method_name": "addAttributes", "method_sig": "public AttributeSet addAttributes (AttributeSet old,\n                                  AttributeSet attr)", "description": "Adds a set of attributes to the element.\n \n This method is thread safe, although most Swing methods\n are not. Please see\n Concurrency\n in Swing for more information."}, {"method_name": "removeAttribute", "method_sig": "public AttributeSet removeAttribute (AttributeSet old,\n                                    Object name)", "description": "Removes an attribute from the set.\n \n This method is thread safe, although most Swing methods\n are not. Please see\n Concurrency\n in Swing for more information."}, {"method_name": "removeAttributes", "method_sig": "public AttributeSet removeAttributes (AttributeSet old,\n                                     Enumeration<?> names)", "description": "Removes a set of attributes for the element.\n \n This method is thread safe, although most Swing methods\n are not. Please see\n Concurrency\n in Swing for more information."}, {"method_name": "removeAttributes", "method_sig": "public AttributeSet removeAttributes (AttributeSet old,\n                                     AttributeSet attrs)", "description": "Removes a set of attributes for the element.\n \n This method is thread safe, although most Swing methods\n are not. Please see\n Concurrency\n in Swing for more information."}, {"method_name": "getEmptySet", "method_sig": "public AttributeSet getEmptySet()", "description": "Fetches an empty AttributeSet."}, {"method_name": "reclaim", "method_sig": "public void reclaim (AttributeSet a)", "description": "Returns a set no longer needed by the MutableAttributeSet implementation.\n This is useful for operation under 1.1 where there are no weak\n references.  This would typically be called by the finalize method\n of the MutableAttributeSet implementation.\n \n This method is thread safe, although most Swing methods\n are not. Please see\n Concurrency\n in Swing for more information."}, {"method_name": "getCompressionThreshold", "method_sig": "protected int getCompressionThreshold()", "description": "Returns the maximum number of key/value pairs to try and\n compress into unique/immutable sets.  Any sets above this\n limit will use hashtables and be a MutableAttributeSet."}, {"method_name": "createSmallAttributeSet", "method_sig": "protected StyleContext.SmallAttributeSet createSmallAttributeSet (AttributeSet a)", "description": "Create a compact set of attributes that might be shared.\n This is a hook for subclasses that want to alter the\n behavior of SmallAttributeSet.  This can be reimplemented\n to return an AttributeSet that provides some sort of\n attribute conversion."}, {"method_name": "createLargeAttributeSet", "method_sig": "protected MutableAttributeSet createLargeAttributeSet (AttributeSet a)", "description": "Create a large set of attributes that should trade off\n space for time.  This set will not be shared.  This is\n a hook for subclasses that want to alter the behavior\n of the larger attribute storage format (which is\n SimpleAttributeSet by default).   This can be reimplemented\n to return a MutableAttributeSet that provides some sort of\n attribute conversion."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Converts a StyleContext to a String."}, {"method_name": "writeAttributes", "method_sig": "public void writeAttributes (ObjectOutputStream out,\n                            AttributeSet a)\n                     throws IOException", "description": "Context-specific handling of writing out attributes"}, {"method_name": "readAttributes", "method_sig": "public void readAttributes (ObjectInputStream in,\n                           MutableAttributeSet a)\n                    throws ClassNotFoundException,\n                           IOException", "description": "Context-specific handling of reading in attributes"}, {"method_name": "writeAttributeSet", "method_sig": "public static void writeAttributeSet (ObjectOutputStream out,\n                                     AttributeSet a)\n                              throws IOException", "description": "Writes a set of attributes to the given object stream\n for the purpose of serialization.  This will take\n special care to deal with static attribute keys that\n have been registered wit the\n registerStaticAttributeKey method.\n Any attribute key not registered as a static key\n will be serialized directly.  All values are expected\n to be serializable."}, {"method_name": "readAttributeSet", "method_sig": "public static void readAttributeSet (ObjectInputStream in,\n                                    MutableAttributeSet a)\n                             throws ClassNotFoundException,\n                                    IOException", "description": "Reads a set of attributes from the given object input\n stream that have been previously written out with\n writeAttributeSet.  This will try to restore\n keys that were static objects to the static objects in\n the current virtual machine considering only those keys\n that have been registered with the\n registerStaticAttributeKey method.\n The attributes retrieved from the stream will be placed\n into the given mutable set."}, {"method_name": "registerStaticAttributeKey", "method_sig": "public static void registerStaticAttributeKey (Object key)", "description": "Registers an object as a static object that is being\n used as a key in attribute sets.  This allows the key\n to be treated specially for serialization.\n \n For operation under a 1.1 virtual machine, this\n uses the value returned by toString\n concatenated to the classname.  The value returned\n by toString should not have the class reference\n in it (ie it should be reimplemented from the\n definition in Object) in order to be the same when\n recomputed later."}, {"method_name": "getStaticAttribute", "method_sig": "public static Object getStaticAttribute (Object key)", "description": "Returns the object previously registered with\n registerStaticAttributeKey."}, {"method_name": "getStaticAttributeKey", "method_sig": "public static Object getStaticAttributeKey (Object key)", "description": "Returns the String that key will be registered with."}]}