{"name": "Class AtomicLongFieldUpdater<T>", "module": "java.base", "package": "java.util.concurrent.atomic", "text": "A reflection-based utility that enables atomic updates to\n designated volatile long fields of designated classes.\n This class is designed for use in atomic data structures in which\n several fields of the same node are independently subject to atomic\n updates.\n\n Note that the guarantees of the compareAndSet\n method in this class are weaker than in other atomic classes.\n Because this class cannot ensure that all uses of the field\n are appropriate for purposes of atomic access, it can\n guarantee atomicity only with respect to other invocations of\n compareAndSet and set on the same updater.\n\n Object arguments for parameters of type T that are not\n instances of the class passed to newUpdater(java.lang.Class<U>, java.lang.String) will result in\n a ClassCastException being thrown.", "codes": ["public abstract class AtomicLongFieldUpdater<T>\nextends Object"], "fields": [], "methods": [{"method_name": "newUpdater", "method_sig": "public static <U> AtomicLongFieldUpdater<U> newUpdater (Class<U> tclass,\n                                                       String fieldName)", "description": "Creates and returns an updater for objects with the given field.\n The Class argument is needed to check that reflective types and\n generic types match."}, {"method_name": "compareAndSet", "method_sig": "public abstract boolean compareAndSet (T obj,\n                                      long expect,\n                                      long update)", "description": "Atomically sets the field of the given object managed by this updater\n to the given updated value if the current value == the\n expected value. This method is guaranteed to be atomic with respect to\n other calls to compareAndSet and set, but not\n necessarily with respect to other changes in the field."}, {"method_name": "weakCompareAndSet", "method_sig": "public abstract boolean weakCompareAndSet (T obj,\n                                          long expect,\n                                          long update)", "description": "Atomically sets the field of the given object managed by this updater\n to the given updated value if the current value == the\n expected value. This method is guaranteed to be atomic with respect to\n other calls to compareAndSet and set, but not\n necessarily with respect to other changes in the field.\n\n May fail\n spuriously and does not provide ordering guarantees, so is\n only rarely an appropriate alternative to compareAndSet."}, {"method_name": "set", "method_sig": "public abstract void set (T obj,\n                         long newValue)", "description": "Sets the field of the given object managed by this updater to the\n given updated value. This operation is guaranteed to act as a volatile\n store with respect to subsequent invocations of compareAndSet."}, {"method_name": "lazySet", "method_sig": "public abstract void lazySet (T obj,\n                             long newValue)", "description": "Eventually sets the field of the given object managed by this\n updater to the given updated value."}, {"method_name": "get", "method_sig": "public abstract long get (T obj)", "description": "Returns the current value held in the field of the given object\n managed by this updater."}, {"method_name": "getAndSet", "method_sig": "public long getAndSet (T obj,\n                      long newValue)", "description": "Atomically sets the field of the given object managed by this updater\n to the given value and returns the old value."}, {"method_name": "getAndIncrement", "method_sig": "public long getAndIncrement (T obj)", "description": "Atomically increments by one the current value of the field of the\n given object managed by this updater."}, {"method_name": "getAndDecrement", "method_sig": "public long getAndDecrement (T obj)", "description": "Atomically decrements by one the current value of the field of the\n given object managed by this updater."}, {"method_name": "getAndAdd", "method_sig": "public long getAndAdd (T obj,\n                      long delta)", "description": "Atomically adds the given value to the current value of the field of\n the given object managed by this updater."}, {"method_name": "incrementAndGet", "method_sig": "public long incrementAndGet (T obj)", "description": "Atomically increments by one the current value of the field of the\n given object managed by this updater."}, {"method_name": "decrementAndGet", "method_sig": "public long decrementAndGet (T obj)", "description": "Atomically decrements by one the current value of the field of the\n given object managed by this updater."}, {"method_name": "addAndGet", "method_sig": "public long addAndGet (T obj,\n                      long delta)", "description": "Atomically adds the given value to the current value of the field of\n the given object managed by this updater."}, {"method_name": "getAndUpdate", "method_sig": "public final long getAndUpdate (T obj,\n                               LongUnaryOperator updateFunction)", "description": "Atomically updates (with memory effects as specified by VarHandle.compareAndSet(java.lang.Object...)) the field of the given object managed\n by this updater with the results of applying the given\n function, returning the previous value. The function should be\n side-effect-free, since it may be re-applied when attempted\n updates fail due to contention among threads."}, {"method_name": "updateAndGet", "method_sig": "public final long updateAndGet (T obj,\n                               LongUnaryOperator updateFunction)", "description": "Atomically updates (with memory effects as specified by VarHandle.compareAndSet(java.lang.Object...)) the field of the given object managed\n by this updater with the results of applying the given\n function, returning the updated value. The function should be\n side-effect-free, since it may be re-applied when attempted\n updates fail due to contention among threads."}, {"method_name": "getAndAccumulate", "method_sig": "public final long getAndAccumulate (T obj,\n                                   long x,\n                                   LongBinaryOperator accumulatorFunction)", "description": "Atomically updates (with memory effects as specified by VarHandle.compareAndSet(java.lang.Object...)) the field of the given object managed\n by this updater with the results of applying the given function\n to the current and given values, returning the previous value.\n The function should be side-effect-free, since it may be\n re-applied when attempted updates fail due to contention among\n threads.  The function is applied with the current value as its\n first argument, and the given update as the second argument."}, {"method_name": "accumulateAndGet", "method_sig": "public final long accumulateAndGet (T obj,\n                                   long x,\n                                   LongBinaryOperator accumulatorFunction)", "description": "Atomically updates (with memory effects as specified by VarHandle.compareAndSet(java.lang.Object...)) the field of the given object managed\n by this updater with the results of applying the given function\n to the current and given values, returning the updated value.\n The function should be side-effect-free, since it may be\n re-applied when attempted updates fail due to contention among\n threads.  The function is applied with the current value as its\n first argument, and the given update as the second argument."}]}