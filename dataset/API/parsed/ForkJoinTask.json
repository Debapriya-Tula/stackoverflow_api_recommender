{"name": "Class ForkJoinTask<V>", "module": "java.base", "package": "java.util.concurrent", "text": "Abstract base class for tasks that run within a ForkJoinPool.\n A ForkJoinTask is a thread-like entity that is much\n lighter weight than a normal thread.  Huge numbers of tasks and\n subtasks may be hosted by a small number of actual threads in a\n ForkJoinPool, at the price of some usage limitations.\n\n A \"main\" ForkJoinTask begins execution when it is\n explicitly submitted to a ForkJoinPool, or, if not already\n engaged in a ForkJoin computation, commenced in the ForkJoinPool.commonPool() via fork(), invoke(), or\n related methods.  Once started, it will usually in turn start other\n subtasks.  As indicated by the name of this class, many programs\n using ForkJoinTask employ only methods fork() and\n join(), or derivatives such as invokeAll.  However, this class also\n provides a number of other methods that can come into play in\n advanced usages, as well as extension mechanics that allow support\n of new forms of fork/join processing.\n\n A ForkJoinTask is a lightweight form of Future.\n The efficiency of ForkJoinTasks stems from a set of\n restrictions (that are only partially statically enforceable)\n reflecting their main use as computational tasks calculating pure\n functions or operating on purely isolated objects.  The primary\n coordination mechanisms are fork(), that arranges\n asynchronous execution, and join(), that doesn't proceed\n until the task's result has been computed.  Computations should\n ideally avoid synchronized methods or blocks, and should\n minimize other blocking synchronization apart from joining other\n tasks or using synchronizers such as Phasers that are advertised to\n cooperate with fork/join scheduling. Subdividable tasks should also\n not perform blocking I/O, and should ideally access variables that\n are completely independent of those accessed by other running\n tasks. These guidelines are loosely enforced by not permitting\n checked exceptions such as IOExceptions to be\n thrown. However, computations may still encounter unchecked\n exceptions, that are rethrown to callers attempting to join\n them. These exceptions may additionally include RejectedExecutionException stemming from internal resource\n exhaustion, such as failure to allocate internal task\n queues. Rethrown exceptions behave in the same way as regular\n exceptions, but, when possible, contain stack traces (as displayed\n for example using ex.printStackTrace()) of both the thread\n that initiated the computation as well as the thread actually\n encountering the exception; minimally only the latter.\n\n It is possible to define and use ForkJoinTasks that may block,\n but doing so requires three further considerations: (1) Completion\n of few if any other tasks should be dependent on a task\n that blocks on external synchronization or I/O. Event-style async\n tasks that are never joined (for example, those subclassing CountedCompleter) often fall into this category.  (2) To minimize\n resource impact, tasks should be small; ideally performing only the\n (possibly) blocking action. (3) Unless the ForkJoinPool.ManagedBlocker API is used, or the number of possibly\n blocked tasks is known to be less than the pool's ForkJoinPool.getParallelism() level, the pool cannot guarantee that\n enough threads will be available to ensure progress or good\n performance.\n\n The primary method for awaiting completion and extracting\n results of a task is join(), but there are several variants:\n The Future.get() methods support interruptible and/or timed\n waits for completion and report results using Future\n conventions. Method invoke() is semantically\n equivalent to fork(); join() but always attempts to begin\n execution in the current thread. The \"quiet\" forms of\n these methods do not extract results or report exceptions. These\n may be useful when a set of tasks are being executed, and you need\n to delay processing of results or exceptions until all complete.\n Method invokeAll (available in multiple versions)\n performs the most common form of parallel invocation: forking a set\n of tasks and joining them all.\n\n In the most typical usages, a fork-join pair act like a call\n (fork) and return (join) from a parallel recursive function. As is\n the case with other forms of recursive calls, returns (joins)\n should be performed innermost-first. For example, a.fork();\n b.fork(); b.join(); a.join(); is likely to be substantially more\n efficient than joining a before b.\n\n The execution status of tasks may be queried at several levels\n of detail: Future.isDone() is true if a task completed in any way\n (including the case where a task was cancelled without executing);\n isCompletedNormally() is true if a task completed without\n cancellation or encountering an exception; Future.isCancelled() is\n true if the task was cancelled (in which case getException()\n returns a CancellationException); and\n isCompletedAbnormally() is true if a task was either\n cancelled or encountered an exception, in which case getException() will return either the encountered exception or\n CancellationException.\n\n The ForkJoinTask class is not usually directly subclassed.\n Instead, you subclass one of the abstract classes that support a\n particular style of fork/join processing, typically RecursiveAction for most computations that do not return results,\n RecursiveTask for those that do, and CountedCompleter for those in which completed actions trigger\n other actions.  Normally, a concrete ForkJoinTask subclass declares\n fields comprising its parameters, established in a constructor, and\n then defines a compute method that somehow uses the control\n methods supplied by this base class.\n\n Method join() and its variants are appropriate for use\n only when completion dependencies are acyclic; that is, the\n parallel computation can be described as a directed acyclic graph\n (DAG). Otherwise, executions may encounter a form of deadlock as\n tasks cyclically wait for each other.  However, this framework\n supports other methods and techniques (for example the use of\n Phaser, helpQuiesce(), and complete(V)) that\n may be of use in constructing custom subclasses for problems that\n are not statically structured as DAGs. To support such usages, a\n ForkJoinTask may be atomically tagged with a short\n value using setForkJoinTaskTag(short) or compareAndSetForkJoinTaskTag(short, short) and checked using getForkJoinTaskTag(). The ForkJoinTask implementation does not use\n these protected methods or tags for any purpose, but they\n may be of use in the construction of specialized subclasses.  For\n example, parallel graph traversals can use the supplied methods to\n avoid revisiting nodes/tasks that have already been processed.\n (Method names for tagging are bulky in part to encourage definition\n of methods that reflect their usage patterns.)\n\n Most base support methods are final, to prevent\n overriding of implementations that are intrinsically tied to the\n underlying lightweight task scheduling framework.  Developers\n creating new basic styles of fork/join processing should minimally\n implement protected methods exec(), setRawResult(V), and getRawResult(), while also introducing\n an abstract computational method that can be implemented in its\n subclasses, possibly relying on other protected methods\n provided by this class.\n\n ForkJoinTasks should perform relatively small amounts of\n computation. Large tasks should be split into smaller subtasks,\n usually via recursive decomposition. As a very rough rule of thumb,\n a task should perform more than 100 and less than 10000 basic\n computational steps, and should avoid indefinite looping. If tasks\n are too big, then parallelism cannot improve throughput. If too\n small, then memory and internal task maintenance overhead may\n overwhelm processing.\n\n This class provides adapt methods for Runnable\n and Callable, that may be of use when mixing execution of\n ForkJoinTasks with other kinds of tasks. When all tasks are\n of this form, consider using a pool constructed in asyncMode.\n\n ForkJoinTasks are Serializable, which enables them to be\n used in extensions such as remote execution frameworks. It is\n sensible to serialize tasks only before or after, but not during,\n execution. Serialization is not relied on during execution itself.", "codes": ["public abstract class ForkJoinTask<V>\nextends Object\nimplements Future<V>, Serializable"], "fields": [], "methods": [{"method_name": "fork", "method_sig": "public final ForkJoinTask<V> fork()", "description": "Arranges to asynchronously execute this task in the pool the\n current task is running in, if applicable, or using the ForkJoinPool.commonPool() if not inForkJoinPool().  While\n it is not necessarily enforced, it is a usage error to fork a\n task more than once unless it has completed and been\n reinitialized.  Subsequent modifications to the state of this\n task or any data it operates on are not necessarily\n consistently observable by any thread other than the one\n executing it unless preceded by a call to join() or\n related methods, or a call to Future.isDone() returning \n true."}, {"method_name": "join", "method_sig": "public final V join()", "description": "Returns the result of the computation when it\n is done.\n This method differs from get() in that abnormal\n completion results in RuntimeException or Error,\n not ExecutionException, and that interrupts of the\n calling thread do not cause the method to abruptly\n return by throwing InterruptedException."}, {"method_name": "invoke", "method_sig": "public final V invoke()", "description": "Commences performing this task, awaits its completion if\n necessary, and returns its result, or throws an (unchecked)\n RuntimeException or Error if the underlying\n computation did so."}, {"method_name": "invokeAll", "method_sig": "public static void invokeAll (ForkJoinTask<?> t1,\n                             ForkJoinTask<?> t2)", "description": "Forks the given tasks, returning when isDone holds for\n each task or an (unchecked) exception is encountered, in which\n case the exception is rethrown. If more than one task\n encounters an exception, then this method throws any one of\n these exceptions. If any task encounters an exception, the\n other may be cancelled. However, the execution status of\n individual tasks is not guaranteed upon exceptional return. The\n status of each task may be obtained using getException() and related methods to check if they have been\n cancelled, completed normally or exceptionally, or left\n unprocessed."}, {"method_name": "invokeAll", "method_sig": "public static void invokeAll (ForkJoinTask<?>... tasks)", "description": "Forks the given tasks, returning when isDone holds for\n each task or an (unchecked) exception is encountered, in which\n case the exception is rethrown. If more than one task\n encounters an exception, then this method throws any one of\n these exceptions. If any task encounters an exception, others\n may be cancelled. However, the execution status of individual\n tasks is not guaranteed upon exceptional return. The status of\n each task may be obtained using getException() and\n related methods to check if they have been cancelled, completed\n normally or exceptionally, or left unprocessed."}, {"method_name": "invokeAll", "method_sig": "public static <T extends ForkJoinTask<?>> Collection<T> invokeAll (Collection<T> tasks)", "description": "Forks all tasks in the specified collection, returning when\n isDone holds for each task or an (unchecked) exception\n is encountered, in which case the exception is rethrown. If\n more than one task encounters an exception, then this method\n throws any one of these exceptions. If any task encounters an\n exception, others may be cancelled. However, the execution\n status of individual tasks is not guaranteed upon exceptional\n return. The status of each task may be obtained using getException() and related methods to check if they have been\n cancelled, completed normally or exceptionally, or left\n unprocessed."}, {"method_name": "cancel", "method_sig": "public boolean cancel (boolean mayInterruptIfRunning)", "description": "Attempts to cancel execution of this task. This attempt will\n fail if the task has already completed or could not be\n cancelled for some other reason. If successful, and this task\n has not started when cancel is called, execution of\n this task is suppressed. After this method returns\n successfully, unless there is an intervening call to reinitialize(), subsequent calls to Future.isCancelled(),\n Future.isDone(), and cancel will return true\n and calls to join() and related methods will result in\n CancellationException.\n\n This method may be overridden in subclasses, but if so, must\n still ensure that these properties hold. In particular, the\n cancel method itself must not throw exceptions.\n\n This method is designed to be invoked by other\n tasks. To terminate the current task, you can just return or\n throw an unchecked exception from its computation method, or\n invoke completeExceptionally(Throwable)."}, {"method_name": "isCompletedAbnormally", "method_sig": "public final boolean isCompletedAbnormally()", "description": "Returns true if this task threw an exception or was cancelled."}, {"method_name": "isCompletedNormally", "method_sig": "public final boolean isCompletedNormally()", "description": "Returns true if this task completed without throwing an\n exception and was not cancelled."}, {"method_name": "getException", "method_sig": "public final Throwable getException()", "description": "Returns the exception thrown by the base computation, or a\n CancellationException if cancelled, or null if\n none or if the method has not yet completed."}, {"method_name": "completeExceptionally", "method_sig": "public void completeExceptionally (Throwable ex)", "description": "Completes this task abnormally, and if not already aborted or\n cancelled, causes it to throw the given exception upon\n join and related operations. This method may be used\n to induce exceptions in asynchronous tasks, or to force\n completion of tasks that would not otherwise complete.  Its use\n in other situations is discouraged.  This method is\n overridable, but overridden versions must invoke super\n implementation to maintain guarantees."}, {"method_name": "complete", "method_sig": "public void complete (V value)", "description": "Completes this task, and if not already aborted or cancelled,\n returning the given value as the result of subsequent\n invocations of join and related operations. This method\n may be used to provide results for asynchronous tasks, or to\n provide alternative handling for tasks that would not otherwise\n complete normally. Its use in other situations is\n discouraged. This method is overridable, but overridden\n versions must invoke super implementation to maintain\n guarantees."}, {"method_name": "quietlyComplete", "method_sig": "public final void quietlyComplete()", "description": "Completes this task normally without setting a value. The most\n recent value established by setRawResult(V) (or \n null by default) will be returned as the result of subsequent\n invocations of join and related operations."}, {"method_name": "get", "method_sig": "public final V get()\n            throws InterruptedException,\n                   ExecutionException", "description": "Waits if necessary for the computation to complete, and then\n retrieves its result."}, {"method_name": "get", "method_sig": "public final V get (long timeout,\n                   TimeUnit unit)\n            throws InterruptedException,\n                   ExecutionException,\n                   TimeoutException", "description": "Waits if necessary for at most the given time for the computation\n to complete, and then retrieves its result, if available."}, {"method_name": "quietlyJoin", "method_sig": "public final void quietlyJoin()", "description": "Joins this task, without returning its result or throwing its\n exception. This method may be useful when processing\n collections of tasks when some have been cancelled or otherwise\n known to have aborted."}, {"method_name": "quietlyInvoke", "method_sig": "public final void quietlyInvoke()", "description": "Commences performing this task and awaits its completion if\n necessary, without returning its result or throwing its\n exception."}, {"method_name": "helpQuiesce", "method_sig": "public static void helpQuiesce()", "description": "Possibly executes tasks until the pool hosting the current task\n is quiescent.  This\n method may be of use in designs in which many tasks are forked,\n but none are explicitly joined, instead executing them until\n all are processed."}, {"method_name": "reinitialize", "method_sig": "public void reinitialize()", "description": "Resets the internal bookkeeping state of this task, allowing a\n subsequent fork. This method allows repeated reuse of\n this task, but only if reuse occurs when this task has either\n never been forked, or has been forked, then completed and all\n outstanding joins of this task have also completed. Effects\n under any other usage conditions are not guaranteed.\n This method may be useful when executing\n pre-constructed trees of subtasks in loops.\n\n Upon completion of this method, isDone() reports\n false, and getException() reports \n null. However, the value returned by getRawResult is\n unaffected. To clear this value, you can invoke \n setRawResult(null)."}, {"method_name": "getPool", "method_sig": "public static ForkJoinPool getPool()", "description": "Returns the pool hosting the current thread, or null\n if the current thread is executing outside of any ForkJoinPool.\n\n This method returns null if and only if inForkJoinPool() returns false."}, {"method_name": "inForkJoinPool", "method_sig": "public static boolean inForkJoinPool()", "description": "Returns true if the current thread is a ForkJoinWorkerThread executing as a ForkJoinPool computation."}, {"method_name": "tryUnfork", "method_sig": "public boolean tryUnfork()", "description": "Tries to unschedule this task for execution. This method will\n typically (but is not guaranteed to) succeed if this task is\n the most recently forked task by the current thread, and has\n not commenced executing in another thread.  This method may be\n useful when arranging alternative local processing of tasks\n that could have been, but were not, stolen."}, {"method_name": "getQueuedTaskCount", "method_sig": "public static int getQueuedTaskCount()", "description": "Returns an estimate of the number of tasks that have been\n forked by the current worker thread but not yet executed. This\n value may be useful for heuristic decisions about whether to\n fork other tasks."}, {"method_name": "getSurplusQueuedTaskCount", "method_sig": "public static int getSurplusQueuedTaskCount()", "description": "Returns an estimate of how many more locally queued tasks are\n held by the current worker thread than there are other worker\n threads that might steal them, or zero if this thread is not\n operating in a ForkJoinPool. This value may be useful for\n heuristic decisions about whether to fork other tasks. In many\n usages of ForkJoinTasks, at steady state, each worker should\n aim to maintain a small constant surplus (for example, 3) of\n tasks, and to process computations locally if this threshold is\n exceeded."}, {"method_name": "getRawResult", "method_sig": "public abstract V getRawResult()", "description": "Returns the result that would be returned by join(), even\n if this task completed abnormally, or null if this task\n is not known to have been completed.  This method is designed\n to aid debugging, as well as to support extensions. Its use in\n any other context is discouraged."}, {"method_name": "setRawResult", "method_sig": "protected abstract void setRawResult (V value)", "description": "Forces the given value to be returned as a result.  This method\n is designed to support extensions, and should not in general be\n called otherwise."}, {"method_name": "exec", "method_sig": "protected abstract boolean exec()", "description": "Immediately performs the base action of this task and returns\n true if, upon return from this method, this task is guaranteed\n to have completed normally. This method may return false\n otherwise, to indicate that this task is not necessarily\n complete (or is not known to be complete), for example in\n asynchronous actions that require explicit invocations of\n completion methods. This method may also throw an (unchecked)\n exception to indicate abnormal exit. This method is designed to\n support extensions, and should not in general be called\n otherwise."}, {"method_name": "peekNextLocalTask", "method_sig": "protected static ForkJoinTask<?> peekNextLocalTask()", "description": "Returns, but does not unschedule or execute, a task queued by\n the current thread but not yet executed, if one is immediately\n available. There is no guarantee that this task will actually\n be polled or executed next. Conversely, this method may return\n null even if a task exists but cannot be accessed without\n contention with other threads.  This method is designed\n primarily to support extensions, and is unlikely to be useful\n otherwise."}, {"method_name": "pollNextLocalTask", "method_sig": "protected static ForkJoinTask<?> pollNextLocalTask()", "description": "Unschedules and returns, without executing, the next task\n queued by the current thread but not yet executed, if the\n current thread is operating in a ForkJoinPool.  This method is\n designed primarily to support extensions, and is unlikely to be\n useful otherwise."}, {"method_name": "pollTask", "method_sig": "protected static ForkJoinTask<?> pollTask()", "description": "If the current thread is operating in a ForkJoinPool,\n unschedules and returns, without executing, the next task\n queued by the current thread but not yet executed, if one is\n available, or if not available, a task that was forked by some\n other thread, if available. Availability may be transient, so a\n null result does not necessarily imply quiescence of\n the pool this task is operating in.  This method is designed\n primarily to support extensions, and is unlikely to be useful\n otherwise."}, {"method_name": "pollSubmission", "method_sig": "protected static ForkJoinTask<?> pollSubmission()", "description": "If the current thread is operating in a ForkJoinPool,\n unschedules and returns, without executing, a task externally\n submitted to the pool, if one is available. Availability may be\n transient, so a null result does not necessarily imply\n quiescence of the pool.  This method is designed primarily to\n support extensions, and is unlikely to be useful otherwise."}, {"method_name": "getForkJoinTaskTag", "method_sig": "public final short getForkJoinTaskTag()", "description": "Returns the tag for this task."}, {"method_name": "setForkJoinTaskTag", "method_sig": "public final short setForkJoinTaskTag (short newValue)", "description": "Atomically sets the tag value for this task and returns the old value."}, {"method_name": "compareAndSetForkJoinTaskTag", "method_sig": "public final boolean compareAndSetForkJoinTaskTag (short expect,\n                                                  short update)", "description": "Atomically conditionally sets the tag value for this task.\n Among other applications, tags can be used as visit markers\n in tasks operating on graphs, as in methods that check: \n if (task.compareAndSetForkJoinTaskTag((short)0, (short)1))\n before processing, otherwise exiting because the node has\n already been visited."}, {"method_name": "adapt", "method_sig": "public static ForkJoinTask<?> adapt (Runnable runnable)", "description": "Returns a new ForkJoinTask that performs the run\n method of the given Runnable as its action, and returns\n a null result upon join()."}, {"method_name": "adapt", "method_sig": "public static <T> ForkJoinTask<T> adapt (Runnable runnable,\n                                        T result)", "description": "Returns a new ForkJoinTask that performs the run\n method of the given Runnable as its action, and returns\n the given result upon join()."}, {"method_name": "adapt", "method_sig": "public static <T> ForkJoinTask<T> adapt (Callable<? extends T> callable)", "description": "Returns a new ForkJoinTask that performs the call\n method of the given Callable as its action, and returns\n its result upon join(), translating any checked exceptions\n encountered into RuntimeException."}]}