{"name": "Interface ScheduledExecutorService", "module": "java.base", "package": "java.util.concurrent", "text": "An ExecutorService that can schedule commands to run after a given\n delay, or to execute periodically.\n\n The schedule methods create tasks with various delays\n and return a task object that can be used to cancel or check\n execution. The scheduleAtFixedRate and\n scheduleWithFixedDelay methods create and execute tasks\n that run periodically until cancelled.\n\n Commands submitted using the Executor.execute(Runnable)\n and ExecutorService submit methods are scheduled\n with a requested delay of zero. Zero and negative delays (but not\n periods) are also allowed in schedule methods, and are\n treated as requests for immediate execution.\n\n All schedule methods accept relative delays and\n periods as arguments, not absolute times or dates. It is a simple\n matter to transform an absolute time represented as a Date to the required form. For example, to schedule at\n a certain future date, you can use: schedule(task,\n date.getTime() - System.currentTimeMillis(),\n TimeUnit.MILLISECONDS). Beware however that expiration of a\n relative delay need not coincide with the current Date at\n which the task is enabled due to network time synchronization\n protocols, clock drift, or other factors.\n\n The Executors class provides convenient factory methods for\n the ScheduledExecutorService implementations provided in this package.\n\n Usage Example\n\n Here is a class with a method that sets up a ScheduledExecutorService\n to beep every ten seconds for an hour:\n\n  \n import static java.util.concurrent.TimeUnit.*;\n class BeeperControl {\n   private final ScheduledExecutorService scheduler =\n     Executors.newScheduledThreadPool(1);\n\n   public void beepForAnHour() {\n     Runnable beeper = () -> System.out.println(\"beep\");\n     ScheduledFuture<?> beeperHandle =\n       scheduler.scheduleAtFixedRate(beeper, 10, 10, SECONDS);\n     Runnable canceller = () -> beeperHandle.cancel(false);\n     scheduler.schedule(canceller, 1, HOURS);\n   }\n }", "codes": ["public interface ScheduledExecutorService\nextends ExecutorService"], "fields": [], "methods": [{"method_name": "schedule", "method_sig": "ScheduledFuture<?> schedule (Runnable command,\n                            long delay,\n                            TimeUnit unit)", "description": "Submits a one-shot task that becomes enabled after the given delay."}, {"method_name": "schedule", "method_sig": "<V> ScheduledFuture<V> schedule (Callable<V> callable,\n                                long delay,\n                                TimeUnit unit)", "description": "Submits a value-returning one-shot task that becomes enabled\n after the given delay."}, {"method_name": "scheduleAtFixedRate", "method_sig": "ScheduledFuture<?> scheduleAtFixedRate (Runnable command,\n                                       long initialDelay,\n                                       long period,\n                                       TimeUnit unit)", "description": "Submits a periodic action that becomes enabled first after the\n given initial delay, and subsequently with the given period;\n that is, executions will commence after\n initialDelay, then initialDelay + period, then\n initialDelay + 2 * period, and so on.\n\n The sequence of task executions continues indefinitely until\n one of the following exceptional completions occur:\n \nThe task is explicitly cancelled\n via the returned future.\n The executor terminates, also resulting in task cancellation.\n An execution of the task throws an exception.  In this case\n calling get on the returned future will throw\n ExecutionException, holding the exception as its cause.\n \n Subsequent executions are suppressed.  Subsequent calls to\n isDone() on the returned future will\n return true.\n\n If any execution of this task takes longer than its period, then\n subsequent executions may start late, but will not concurrently\n execute."}, {"method_name": "scheduleWithFixedDelay", "method_sig": "ScheduledFuture<?> scheduleWithFixedDelay (Runnable command,\n                                          long initialDelay,\n                                          long delay,\n                                          TimeUnit unit)", "description": "Submits a periodic action that becomes enabled first after the\n given initial delay, and subsequently with the given delay\n between the termination of one execution and the commencement of\n the next.\n\n The sequence of task executions continues indefinitely until\n one of the following exceptional completions occur:\n \nThe task is explicitly cancelled\n via the returned future.\n The executor terminates, also resulting in task cancellation.\n An execution of the task throws an exception.  In this case\n calling get on the returned future will throw\n ExecutionException, holding the exception as its cause.\n \n Subsequent executions are suppressed.  Subsequent calls to\n isDone() on the returned future will\n return true."}]}