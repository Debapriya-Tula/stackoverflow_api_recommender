{"name": "Class KeyFactory", "module": "java.base", "package": "java.security", "text": "Key factories are used to convert keys (opaque\n cryptographic keys of type Key) into key specifications\n (transparent representations of the underlying key material), and vice\n versa.\n\n  Key factories are bi-directional. That is, they allow you to build an\n opaque key object from a given key specification (key material), or to\n retrieve the underlying key material of a key object in a suitable format.\n\n  Multiple compatible key specifications may exist for the same key.\n For example, a DSA public key may be specified using\n DSAPublicKeySpec or\n X509EncodedKeySpec. A key factory can be used to translate\n between compatible key specifications.\n\n  The following is an example of how to use a key factory in order to\n instantiate a DSA public key from its encoding.\n Assume Alice has received a digital signature from Bob.\n Bob also sent her his public key (in encoded format) to verify\n his signature. Alice then performs the following actions:\n\n \n X509EncodedKeySpec bobPubKeySpec = new X509EncodedKeySpec(bobEncodedPubKey);\n KeyFactory keyFactory = KeyFactory.getInstance(\"DSA\");\n PublicKey bobPubKey = keyFactory.generatePublic(bobPubKeySpec);\n Signature sig = Signature.getInstance(\"DSA\");\n sig.initVerify(bobPubKey);\n sig.update(data);\n sig.verify(signature);\n \n Every implementation of the Java platform is required to support the\n following standard KeyFactory algorithms:\n \nDiffieHellman\nDSA\nRSA\n\n These algorithms are described in the \n KeyFactory section of the\n Java Security Standard Algorithm Names Specification.\n Consult the release documentation for your implementation to see if any\n other algorithms are supported.", "codes": ["public class KeyFactory\nextends Object"], "fields": [], "methods": [{"method_name": "getInstance", "method_sig": "public static KeyFactory getInstance (String algorithm)\n                              throws NoSuchAlgorithmException", "description": "Returns a KeyFactory object that converts\n public/private keys of the specified algorithm.\n\n  This method traverses the list of registered security Providers,\n starting with the most preferred Provider.\n A new KeyFactory object encapsulating the\n KeyFactorySpi implementation from the first\n Provider that supports the specified algorithm is returned.\n\n  Note that the list of registered providers may be retrieved via\n the Security.getProviders() method."}, {"method_name": "getInstance", "method_sig": "public static KeyFactory getInstance (String algorithm,\n                                     String provider)\n                              throws NoSuchAlgorithmException,\n                                     NoSuchProviderException", "description": "Returns a KeyFactory object that converts\n public/private keys of the specified algorithm.\n\n  A new KeyFactory object encapsulating the\n KeyFactorySpi implementation from the specified provider\n is returned.  The specified provider must be registered\n in the security provider list.\n\n  Note that the list of registered providers may be retrieved via\n the Security.getProviders() method."}, {"method_name": "getInstance", "method_sig": "public static KeyFactory getInstance (String algorithm,\n                                     Provider provider)\n                              throws NoSuchAlgorithmException", "description": "Returns a KeyFactory object that converts\n public/private keys of the specified algorithm.\n\n  A new KeyFactory object encapsulating the\n KeyFactorySpi implementation from the specified Provider\n object is returned.  Note that the specified Provider object\n does not have to be registered in the provider list."}, {"method_name": "getProvider", "method_sig": "public final Provider getProvider()", "description": "Returns the provider of this key factory object."}, {"method_name": "getAlgorithm", "method_sig": "public final String getAlgorithm()", "description": "Gets the name of the algorithm\n associated with this KeyFactory."}, {"method_name": "generatePublic", "method_sig": "public final PublicKey generatePublic (KeySpec keySpec)\n                               throws InvalidKeySpecException", "description": "Generates a public key object from the provided key specification\n (key material)."}, {"method_name": "generatePrivate", "method_sig": "public final PrivateKey generatePrivate (KeySpec keySpec)\n                                 throws InvalidKeySpecException", "description": "Generates a private key object from the provided key specification\n (key material)."}, {"method_name": "getKeySpec", "method_sig": "public final <T extends KeySpec> T getKeySpec (Key key,\n                                              Class<T> keySpec)\n                                       throws InvalidKeySpecException", "description": "Returns a specification (key material) of the given key object.\n keySpec identifies the specification class in which\n the key material should be returned. It could, for example, be\n DSAPublicKeySpec.class, to indicate that the\n key material should be returned in an instance of the\n DSAPublicKeySpec class."}, {"method_name": "translateKey", "method_sig": "public final Key translateKey (Key key)\n                       throws InvalidKeyException", "description": "Translates a key object, whose provider may be unknown or potentially\n untrusted, into a corresponding key object of this key factory."}]}