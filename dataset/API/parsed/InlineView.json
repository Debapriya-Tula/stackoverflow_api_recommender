{"name": "Class InlineView", "module": "java.desktop", "package": "javax.swing.text.html", "text": "Displays the inline element styles\n based upon css attributes.", "codes": ["public class InlineView\nextends LabelView"], "fields": [], "methods": [{"method_name": "insertUpdate", "method_sig": "public void insertUpdate (DocumentEvent e,\n                         Shape a,\n                         ViewFactory f)", "description": "Gives notification that something was inserted into\n the document in a location that this view is responsible for.\n If either parameter is null, behavior of this method is\n implementation dependent."}, {"method_name": "removeUpdate", "method_sig": "public void removeUpdate (DocumentEvent e,\n                         Shape a,\n                         ViewFactory f)", "description": "Gives notification that something was removed from the document\n in a location that this view is responsible for.\n If either parameter is null, behavior of this method is\n implementation dependent."}, {"method_name": "changedUpdate", "method_sig": "public void changedUpdate (DocumentEvent e,\n                          Shape a,\n                          ViewFactory f)", "description": "Gives notification from the document that attributes were changed\n in a location that this view is responsible for."}, {"method_name": "getAttributes", "method_sig": "public AttributeSet getAttributes()", "description": "Fetches the attributes to use when rendering.  This is\n implemented to multiplex the attributes specified in the\n model with a StyleSheet."}, {"method_name": "getBreakWeight", "method_sig": "public int getBreakWeight (int axis,\n                          float pos,\n                          float len)", "description": "Determines how attractive a break opportunity in\n this view is.  This can be used for determining which\n view is the most attractive to call breakView\n on in the process of formatting.  A view that represents\n text that has whitespace in it might be more attractive\n than a view that has no whitespace, for example.  The\n higher the weight, the more attractive the break.  A\n value equal to or lower than BadBreakWeight\n should not be considered for a break.  A value greater\n than or equal to ForcedBreakWeight should\n be broken.\n \n This is implemented to provide the default behavior\n of returning BadBreakWeight unless the length\n is greater than the length of the view in which case the\n entire view represents the fragment.  Unless a view has\n been written to support breaking behavior, it is not\n attractive to try and break the view.  An example of\n a view that does support breaking is LabelView.\n An example of a view that uses break weight is\n ParagraphView."}, {"method_name": "breakView", "method_sig": "public View breakView (int axis,\n                      int offset,\n                      float pos,\n                      float len)", "description": "Tries to break this view on the given axis. Refer to\n View.breakView(int, int, float, float) for a complete\n description of this method.\n Behavior of this method is unspecified in case axis\n is neither View.X_AXIS nor View.Y_AXIS, and\n in case offset, pos, or len\n is null."}, {"method_name": "setPropertiesFromAttributes", "method_sig": "protected void setPropertiesFromAttributes()", "description": "Set the cached properties from the attributes."}, {"method_name": "getStyleSheet", "method_sig": "protected StyleSheet getStyleSheet()", "description": "Convenient method to get the StyleSheet."}]}