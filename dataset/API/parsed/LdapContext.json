{"name": "Interface LdapContext", "module": "java.naming", "package": "javax.naming.ldap", "text": "This interface represents a context in which you can perform\n operations with LDAPv3-style controls and perform LDAPv3-style\n extended operations.\n\n For applications that do not require such controls or extended\n operations, the more generic javax.naming.directory.DirContext\n should be used instead.\n\n Usage Details About Controls\n\n This interface provides support for LDAP v3 controls.\n At a high level, this support allows a user\n program to set request controls for LDAP operations that are executed\n in the course of the user program's invocation of\n Context/DirContext\n methods, and read response controls resulting from LDAP operations.\n At the implementation level, there are some details that developers of\n both the user program and service providers need to understand in order\n to correctly use request and response controls.\n\n Request Controls\n\n There are two types of request controls:\n \nRequest controls that affect how a connection is created\n Request controls that affect context methods\n \n\n The former is used whenever a connection needs to be established or\n re-established with an LDAP server. The latter is used when all other\n LDAP operations are sent to the LDAP server.  The reason why a\n distinction between these two types of request controls is necessary\n is because JNDI is a high-level API that does not deal directly with\n connections.  It is the job of service providers to do any necessary\n connection management. Consequently, a single\n connection may be shared by multiple context instances, and a service provider\n is free to use its own algorithms to conserve connection and network\n usage. Thus, when a method is invoked on the context instance, the service\n provider might need to do some connection management in addition to\n performing the corresponding LDAP operations. For connection management,\n it uses the connection request controls, while for the normal\n LDAP operations, it uses the context request controls.\nUnless explicitly qualified, the term \"request controls\" refers to\n context request controls.\n\n Context Request Controls\n There are two ways in which a context instance gets its request controls:\n \nldapContext.newInstance(reqCtls)\nldapContext.setRequestControls(reqCtls)\n\n where ldapContext is an instance of LdapContext.\n Specifying null or an empty array for reqCtls\n means no request controls.\n newInstance() creates a new instance of a context using\n reqCtls, while setRequestControls()\n updates an existing context instance's request controls to reqCtls.\n \n Unlike environment properties, request controls of a context instance\n are not inherited by context instances that are derived from\n it.  Derived context instances have null as their context\n request controls.  You must set the request controls of a derived context\n instance explicitly using setRequestControls().\n \n A context instance's request controls are retrieved using\n the method getRequestControls().\n\n Connection Request Controls\n There are three ways in which connection request controls are set:\n \n\n new InitialLdapContext(env, connCtls)\nrefException.getReferralContext(env, connCtls)\nldapContext.reconnect(connCtls);\n\n where refException is an instance of\n LdapReferralException, and ldapContext is an\n instance of LdapContext.\n Specifying null or an empty array for connCtls\n means no connection request controls.\n \n Like environment properties, connection request controls of a context\n are inherited by contexts that are derived from it.\n Typically, you initialize the connection request controls using the\n InitialLdapContext constructor or\n LdapReferralContext.getReferralContext(). These connection\n request controls are inherited by contexts that share the same\n connection--that is, contexts derived from the initial or referral\n contexts.\n \n Use reconnect() to change the connection request controls of\n a context.\n Invoking ldapContext.reconnect() affects only the\n connection used by ldapContext and any new contexts instances that are\n derived form ldapContext. Contexts that previously shared the\n connection with ldapContext remain unchanged. That is, a context's\n connection request controls must be explicitly changed and is not\n affected by changes to another context's connection request\n controls.\n \n A context instance's connection request controls are retrieved using\n the method getConnectControls().\n\n Service Provider Requirements\n\n A service provider supports connection and context request controls\n in the following ways.  Context request controls must be associated on\n a per context instance basis while connection request controls must be\n associated on a per connection instance basis.  The service provider\n must look for the connection request controls in the environment\n property \"java.naming.ldap.control.connect\" and pass this environment\n property on to context instances that it creates.\n\n Response Controls\n\n The method LdapContext.getResponseControls() is used to\n retrieve the response controls generated by LDAP operations executed\n as the result of invoking a Context/DirContext\n operation. The result is all of the responses controls generated\n by the underlying LDAP operations, including any implicit reconnection.\n To get only the reconnection response controls,\n use reconnect() followed by getResponseControls().\n\n Parameters\n\n A Control[] array\n passed as a parameter to any method is owned by the caller.\n The service provider will not modify the array or keep a reference to it,\n although it may keep references to the individual Control objects\n in the array.\n A Control[] array returned by any method is immutable, and may\n not subsequently be modified by either the caller or the service provider.", "codes": ["public interface LdapContext\nextends DirContext"], "fields": [{"field_name": "CONTROL_FACTORIES", "field_sig": "static final\u00a0String CONTROL_FACTORIES", "description": "Constant that holds the name of the environment property\n for specifying the list of control factories to use. The value\n of the property should be a colon-separated list of the fully\n qualified class names of factory classes that will create a control\n given another control. See\n ControlFactory.getControlInstance() for details.\n This property may be specified in the environment, a system property,\n or one or more resource files.\n\n The value of this constant is \"java.naming.factory.control\"."}], "methods": [{"method_name": "extendedOperation", "method_sig": "ExtendedResponse extendedOperation (ExtendedRequest request)\n                            throws NamingException", "description": "Performs an extended operation.\n\n This method is used to support LDAPv3 extended operations."}, {"method_name": "newInstance", "method_sig": "LdapContext newInstance (Control[] requestControls)\n                 throws NamingException", "description": "Creates a new instance of this context initialized using request controls.\n\n This method is a convenience method for creating a new instance\n of this context for the purposes of multithreaded access.\n For example, if multiple threads want to use different context\n request controls,\n each thread may use this method to get its own copy of this context\n and set/get context request controls without having to synchronize with other\n threads.\n\n The new context has the same environment properties and connection\n request controls as this context. See the class description for details.\n Implementations might also allow this context and the new context\n to share the same network connection or other resources if doing\n so does not impede the independence of either context."}, {"method_name": "reconnect", "method_sig": "void reconnect (Control[] connCtls)\n        throws NamingException", "description": "Reconnects to the LDAP server using the supplied controls and\n this context's environment.\n\n This method is a way to explicitly initiate an LDAP \"bind\" operation.\n For example, you can use this method to set request controls for\n the LDAP \"bind\" operation, or to explicitly connect to the server\n to get response controls returned by the LDAP \"bind\" operation.\n\n This method sets this context's connCtls\n to be its new connection request controls. This context's\n context request controls are not affected.\n After this method has been invoked, any subsequent\n implicit reconnections will be done using connCtls.\n connCtls are also used as\n connection request controls for new context instances derived from this\n context.\n These connection request controls are not\n affected by setRequestControls().\n\n Service provider implementors should read the \"Service Provider\" section\n in the class description for implementation details."}, {"method_name": "getConnectControls", "method_sig": "Control[] getConnectControls()\n                      throws NamingException", "description": "Retrieves the connection request controls in effect for this context.\n The controls are owned by the JNDI implementation and are\n immutable. Neither the array nor the controls may be modified by the\n caller."}, {"method_name": "setRequestControls", "method_sig": "void setRequestControls (Control[] requestControls)\n                 throws NamingException", "description": "Sets the request controls for methods subsequently\n invoked on this context.\n The request controls are owned by the JNDI implementation and are\n immutable. Neither the array nor the controls may be modified by the\n caller.\n \n This removes any previous request controls and adds\n requestControls\n for use by subsequent methods invoked on this context.\n This method does not affect this context's connection request controls.\n\n Note that requestControls will be in effect until the next\n invocation of setRequestControls(). You need to explicitly\n invoke setRequestControls() with null or an empty\n array to clear the controls if you don't want them to affect the\n context methods any more.\n To check what request controls are in effect for this context, use\n getRequestControls()."}, {"method_name": "getRequestControls", "method_sig": "Control[] getRequestControls()\n                      throws NamingException", "description": "Retrieves the request controls in effect for this context.\n The request controls are owned by the JNDI implementation and are\n immutable. Neither the array nor the controls may be modified by the\n caller."}, {"method_name": "getResponseControls", "method_sig": "Control[] getResponseControls()\n                       throws NamingException", "description": "Retrieves the response controls produced as a result of the last\n method invoked on this context.\n The response controls are owned by the JNDI implementation and are\n immutable. Neither the array nor the controls may be modified by the\n caller.\n\n These response controls might have been generated by a successful or\n failed operation.\n\n When a context method that may return response controls is invoked,\n response controls from the previous method invocation are cleared.\n getResponseControls() returns all of the response controls\n generated by LDAP operations used by the context method in the order\n received from the LDAP server.\n Invoking getResponseControls() does not\n clear the response controls. You can call it many times (and get\n back the same controls) until the next context method that may return\n controls is invoked."}]}