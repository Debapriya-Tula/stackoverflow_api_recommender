{"name": "Class TypeUtilities", "module": "jdk.dynalink", "package": "jdk.dynalink.linker.support", "text": "Various static utility methods for working with Java types.", "codes": ["public final class TypeUtilities\nextends Object"], "fields": [], "methods": [{"method_name": "isMethodInvocationConvertible", "method_sig": "public static boolean isMethodInvocationConvertible (Class<?> sourceType,\n                                                    Class<?> targetType)", "description": "Determines whether one type can be converted to another type using a method invocation conversion, as per JLS 5.3\n \"Method Invocation Conversion\". This is basically all conversions allowed by subtyping (see\n isSubtype(Class, Class)) as well as boxing conversion (JLS 5.1.7) optionally followed by widening\n reference conversion, and unboxing conversion (JLS 5.1.8) optionally followed by widening primitive conversion."}, {"method_name": "isConvertibleWithoutLoss", "method_sig": "public static boolean isConvertibleWithoutLoss (Class<?> sourceType,\n                                               Class<?> targetType)", "description": "Determines whether a type can be converted to another without losing any\n precision. As a special case, void is considered convertible only to void\n and Object (either as null or as a custom value set in\n DynamicLinkerFactory.setAutoConversionStrategy(MethodTypeConversionStrategy)).\n Somewhat unintuitively, we consider anything to be convertible to void\n even though converting to void causes the ultimate loss of data. On the\n other hand, conversion to void essentially means that the value is of no\n interest and should be discarded, thus there's no expectation of\n preserving any precision."}, {"method_name": "isSubtype", "method_sig": "public static boolean isSubtype (Class<?> subType,\n                                Class<?> superType)", "description": "Determines whether one type is a subtype of another type, as per JLS\n 4.10 \"Subtyping\". Note: this is not strict or proper subtype, therefore\n true is also returned for identical types; to be completely precise, it\n allows identity conversion (JLS 5.1.1), widening primitive conversion\n (JLS 5.1.2) and widening reference conversion (JLS 5.1.5)."}, {"method_name": "getPrimitiveTypeByName", "method_sig": "public static Class<?> getPrimitiveTypeByName (String name)", "description": "Given a name of a primitive type returns the class representing it. I.e.\n when invoked with \"int\", returns Integer.TYPE."}, {"method_name": "getPrimitiveType", "method_sig": "public static Class<?> getPrimitiveType (Class<?> wrapperType)", "description": "When passed a class representing a wrapper for a primitive type, returns\n the class representing the corresponding primitive type. I.e. calling it\n with Integer.class will return Integer.TYPE. If passed a\n class that is not a wrapper for primitive type, returns null."}, {"method_name": "getWrapperType", "method_sig": "public static Class<?> getWrapperType (Class<?> primitiveType)", "description": "When passed a class representing a primitive type, returns the class representing the corresponding\n wrapper type. I.e. calling it with int.class will return Integer.class. If passed a class\n that is not a primitive type, returns null."}, {"method_name": "isWrapperType", "method_sig": "public static boolean isWrapperType (Class<?> type)", "description": "Returns true if the passed type is a wrapper for a primitive type."}]}