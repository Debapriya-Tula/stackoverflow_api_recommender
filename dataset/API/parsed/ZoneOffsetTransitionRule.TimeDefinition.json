{"name": "Enum ZoneOffsetTransitionRule.TimeDefinition", "module": "java.base", "package": "java.time.zone", "text": "A definition of the way a local time can be converted to the actual\n transition date-time.\n \n Time zone rules are expressed in one of three ways:\n \nRelative to UTC\nRelative to the standard offset in force\nRelative to the wall offset (what you would see on a clock on the wall)\n", "codes": ["public static enum ZoneOffsetTransitionRule.TimeDefinition\nextends Enum<ZoneOffsetTransitionRule.TimeDefinition>"], "fields": [], "methods": [{"method_name": "values", "method_sig": "public static ZoneOffsetTransitionRule.TimeDefinition[] values()", "description": "Returns an array containing the constants of this enum type, in\nthe order they are declared. This method may be used to iterate\nover the constants as follows:\n\nfor (ZoneOffsetTransitionRule.TimeDefinition c : ZoneOffsetTransitionRule.TimeDefinition.values())\n\u00a0   System.out.println(c);\n"}, {"method_name": "valueOf", "method_sig": "public static ZoneOffsetTransitionRule.TimeDefinition valueOf (String name)", "description": "Returns the enum constant of this type with the specified name.\nThe string must match exactly an identifier used to declare an\nenum constant in this type.  (Extraneous whitespace characters are \nnot permitted.)"}, {"method_name": "createDateTime", "method_sig": "public LocalDateTime createDateTime (LocalDateTime dateTime,\n                                    ZoneOffset standardOffset,\n                                    ZoneOffset wallOffset)", "description": "Converts the specified local date-time to the local date-time actually\n seen on a wall clock.\n \n This method converts using the type of this enum.\n The output is defined relative to the 'before' offset of the transition.\n \n The UTC type uses the UTC offset.\n The STANDARD type uses the standard offset.\n The WALL type returns the input date-time.\n The result is intended for use with the wall-offset."}]}