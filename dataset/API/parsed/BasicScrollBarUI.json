{"name": "Class BasicScrollBarUI", "module": "java.desktop", "package": "javax.swing.plaf.basic", "text": "Implementation of ScrollBarUI for the Basic Look and Feel", "codes": ["public class BasicScrollBarUI\nextends ScrollBarUI\nimplements LayoutManager, SwingConstants"], "fields": [{"field_name": "minimumThumbSize", "field_sig": "protected\u00a0Dimension minimumThumbSize", "description": "Minimum thumb size"}, {"field_name": "maximumThumbSize", "field_sig": "protected\u00a0Dimension maximumThumbSize", "description": "Maximum thumb size"}, {"field_name": "thumbHighlightColor", "field_sig": "protected\u00a0Color thumbHighlightColor", "description": "Thumb highlight color"}, {"field_name": "thumbLightShadowColor", "field_sig": "protected\u00a0Color thumbLightShadowColor", "description": "Thumb light shadow color"}, {"field_name": "thumbDarkShadowColor", "field_sig": "protected\u00a0Color thumbDarkShadowColor", "description": "Thumb dark shadow color"}, {"field_name": "thumbColor", "field_sig": "protected\u00a0Color thumbColor", "description": "Thumb color"}, {"field_name": "trackColor", "field_sig": "protected\u00a0Color trackColor", "description": "Track color"}, {"field_name": "trackHighlightColor", "field_sig": "protected\u00a0Color trackHighlightColor", "description": "Track highlight color"}, {"field_name": "scrollbar", "field_sig": "protected\u00a0JScrollBar scrollbar", "description": "Scrollbar"}, {"field_name": "incrButton", "field_sig": "protected\u00a0JButton incrButton", "description": "Increment button"}, {"field_name": "decrButton", "field_sig": "protected\u00a0JButton decrButton", "description": "Decrement button"}, {"field_name": "isDragging", "field_sig": "protected\u00a0boolean isDragging", "description": "Dragging"}, {"field_name": "trackListener", "field_sig": "protected\u00a0BasicScrollBarUI.TrackListener trackListener", "description": "Track listener"}, {"field_name": "buttonListener", "field_sig": "protected\u00a0BasicScrollBarUI.ArrowButtonListener buttonListener", "description": "Button listener"}, {"field_name": "modelListener", "field_sig": "protected\u00a0BasicScrollBarUI.ModelListener modelListener", "description": "Model listener"}, {"field_name": "thumbRect", "field_sig": "protected\u00a0Rectangle thumbRect", "description": "Thumb rectangle"}, {"field_name": "trackRect", "field_sig": "protected\u00a0Rectangle trackRect", "description": "Track rectangle"}, {"field_name": "trackHighlight", "field_sig": "protected\u00a0int trackHighlight", "description": "Track highlight"}, {"field_name": "NO_HIGHLIGHT", "field_sig": "protected static final\u00a0int NO_HIGHLIGHT", "description": "No highlight"}, {"field_name": "DECREASE_HIGHLIGHT", "field_sig": "protected static final\u00a0int DECREASE_HIGHLIGHT", "description": "Decrease highlight"}, {"field_name": "INCREASE_HIGHLIGHT", "field_sig": "protected static final\u00a0int INCREASE_HIGHLIGHT", "description": "Increase highlight"}, {"field_name": "scrollListener", "field_sig": "protected\u00a0BasicScrollBarUI.ScrollListener scrollListener", "description": "Scroll listener"}, {"field_name": "propertyChangeListener", "field_sig": "protected\u00a0PropertyChangeListener propertyChangeListener", "description": "Property change listener"}, {"field_name": "scrollTimer", "field_sig": "protected\u00a0Timer scrollTimer", "description": "Scroll timer"}, {"field_name": "scrollBarWidth", "field_sig": "protected\u00a0int scrollBarWidth", "description": "Hint as to what width (when vertical) or height (when horizontal)\n should be."}, {"field_name": "incrGap", "field_sig": "protected\u00a0int incrGap", "description": "Distance between the increment button and the track. This may be a negative\n number. If negative, then an overlap between the button and track will occur,\n which is useful for shaped buttons."}, {"field_name": "decrGap", "field_sig": "protected\u00a0int decrGap", "description": "Distance between the decrement button and the track. This may be a negative\n number. If negative, then an overlap between the button and track will occur,\n which is useful for shaped buttons."}], "methods": [{"method_name": "createUI", "method_sig": "public static ComponentUI createUI (JComponent c)", "description": "Creates the UI."}, {"method_name": "configureScrollBarColors", "method_sig": "protected void configureScrollBarColors()", "description": "Configures the scroll bar colors."}, {"method_name": "installUI", "method_sig": "public void installUI (JComponent c)", "description": "Installs the UI."}, {"method_name": "uninstallUI", "method_sig": "public void uninstallUI (JComponent c)", "description": "Uninstalls the UI."}, {"method_name": "installDefaults", "method_sig": "protected void installDefaults()", "description": "Installs the defaults."}, {"method_name": "installComponents", "method_sig": "protected void installComponents()", "description": "Installs the components."}, {"method_name": "uninstallComponents", "method_sig": "protected void uninstallComponents()", "description": "Uninstalls the components."}, {"method_name": "installListeners", "method_sig": "protected void installListeners()", "description": "Installs the listeners."}, {"method_name": "installKeyboardActions", "method_sig": "protected void installKeyboardActions()", "description": "Installs the keyboard actions."}, {"method_name": "uninstallKeyboardActions", "method_sig": "protected void uninstallKeyboardActions()", "description": "Uninstalls the keyboard actions."}, {"method_name": "uninstallListeners", "method_sig": "protected void uninstallListeners()", "description": "Uninstall the listeners."}, {"method_name": "uninstallDefaults", "method_sig": "protected void uninstallDefaults()", "description": "Uninstalls the defaults."}, {"method_name": "createTrackListener", "method_sig": "protected BasicScrollBarUI.TrackListener createTrackListener()", "description": "Creates a track listener."}, {"method_name": "createArrowButtonListener", "method_sig": "protected BasicScrollBarUI.ArrowButtonListener createArrowButtonListener()", "description": "Creates an arrow button listener."}, {"method_name": "createModelListener", "method_sig": "protected BasicScrollBarUI.ModelListener createModelListener()", "description": "Creates a model listener."}, {"method_name": "createScrollListener", "method_sig": "protected BasicScrollBarUI.ScrollListener createScrollListener()", "description": "Creates a scroll listener."}, {"method_name": "createPropertyChangeListener", "method_sig": "protected PropertyChangeListener createPropertyChangeListener()", "description": "Creates a property change listener."}, {"method_name": "setThumbRollover", "method_sig": "protected void setThumbRollover (boolean active)", "description": "Sets whether or not the mouse is currently over the thumb."}, {"method_name": "isThumbRollover", "method_sig": "public boolean isThumbRollover()", "description": "Returns true if the mouse is currently over the thumb."}, {"method_name": "getPreferredSize", "method_sig": "public Dimension getPreferredSize (JComponent c)", "description": "A vertical scrollbar's preferred width is the maximum of\n preferred widths of the (non null)\n increment/decrement buttons,\n and the minimum width of the thumb. The preferred height is the\n sum of the preferred heights of the same parts.  The basis for\n the preferred size of a horizontal scrollbar is similar.\n \n The preferredSize is only computed once, subsequent\n calls to this method just return a cached size."}, {"method_name": "getMaximumSize", "method_sig": "public Dimension getMaximumSize (JComponent c)", "description": "Description copied from class:\u00a0ComponentUI"}, {"method_name": "createDecreaseButton", "method_sig": "protected JButton createDecreaseButton (int orientation)", "description": "Creates a decrease button."}, {"method_name": "createIncreaseButton", "method_sig": "protected JButton createIncreaseButton (int orientation)", "description": "Creates an increase button."}, {"method_name": "paintDecreaseHighlight", "method_sig": "protected void paintDecreaseHighlight (Graphics g)", "description": "Paints the decrease highlight."}, {"method_name": "paintIncreaseHighlight", "method_sig": "protected void paintIncreaseHighlight (Graphics g)", "description": "Paints the increase highlight."}, {"method_name": "paintTrack", "method_sig": "protected void paintTrack (Graphics g,\n                          JComponent c,\n                          Rectangle trackBounds)", "description": "Paints the track."}, {"method_name": "paintThumb", "method_sig": "protected void paintThumb (Graphics g,\n                          JComponent c,\n                          Rectangle thumbBounds)", "description": "Paints the thumb."}, {"method_name": "getMinimumThumbSize", "method_sig": "protected Dimension getMinimumThumbSize()", "description": "Returns the smallest acceptable size for the thumb.  If the scrollbar\n becomes so small that this size isn't available, the thumb will be\n hidden.\n \nWarning : the value returned by this method should not be\n be modified, it's a shared static constant."}, {"method_name": "getMaximumThumbSize", "method_sig": "protected Dimension getMaximumThumbSize()", "description": "Returns the largest acceptable size for the thumb.  To create a fixed\n size thumb one make this method and getMinimumThumbSize\n return the same value.\n \nWarning : the value returned by this method should not be\n be modified, it's a shared static constant."}, {"method_name": "layoutVScrollbar", "method_sig": "protected void layoutVScrollbar (JScrollBar sb)", "description": "Laysouts a  vertical scroll bar."}, {"method_name": "layoutHScrollbar", "method_sig": "protected void layoutHScrollbar (JScrollBar sb)", "description": "Laysouts a  vertical scroll bar."}, {"method_name": "setThumbBounds", "method_sig": "protected void setThumbBounds (int x,\n                              int y,\n                              int width,\n                              int height)", "description": "Set the bounds of the thumb and force a repaint that includes\n the old thumbBounds and the new one."}, {"method_name": "getThumbBounds", "method_sig": "protected Rectangle getThumbBounds()", "description": "Return the current size/location of the thumb.\n \nWarning : the value returned by this method should not be\n be modified, it's a reference to the actual rectangle, not a copy."}, {"method_name": "getTrackBounds", "method_sig": "protected Rectangle getTrackBounds()", "description": "Returns the current bounds of the track, i.e. the space in between\n the increment and decrement buttons, less the insets.  The value\n returned by this method is updated each time the scrollbar is\n laid out (validated).\n \nWarning : the value returned by this method should not be\n be modified, it's a reference to the actual rectangle, not a copy."}, {"method_name": "scrollByBlock", "method_sig": "protected void scrollByBlock (int direction)", "description": "Scrolls by block."}, {"method_name": "scrollByUnit", "method_sig": "protected void scrollByUnit (int direction)", "description": "Scrolls by unit."}, {"method_name": "getSupportsAbsolutePositioning", "method_sig": "public boolean getSupportsAbsolutePositioning()", "description": "Indicates whether the user can absolutely position the thumb with\n a mouse gesture (usually the middle mouse button)."}]}