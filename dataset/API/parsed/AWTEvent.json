{"name": "Class AWTEvent", "module": "java.desktop", "package": "java.awt", "text": "The root event class for all AWT events.\n This class and its subclasses supersede the original\n java.awt.Event class.\n Subclasses of this root AWTEvent class defined outside of the\n java.awt.event package should define event ID values greater than\n the value defined by RESERVED_ID_MAX.\n \n The event masks defined in this class are needed by Component subclasses\n which are using Component.enableEvents() to select for event types not\n selected by registered listeners. If a listener is registered on a\n component, the appropriate event mask is already set internally by the\n component.\n \n The masks are also used to specify to which types of events an\n AWTEventListener should listen. The masks are bitwise-ORed together\n and passed to Toolkit.addAWTEventListener.", "codes": ["public abstract class AWTEvent\nextends EventObject"], "fields": [{"field_name": "id", "field_sig": "protected\u00a0int id", "description": "The event's id."}, {"field_name": "consumed", "field_sig": "protected\u00a0boolean consumed", "description": "Controls whether or not the event is sent back down to the peer once the\n source has processed it - false means it's sent to the peer; true means\n it's not. Semantic events always have a 'true' value since they were\n generated by the peer in response to a low-level event."}, {"field_name": "COMPONENT_EVENT_MASK", "field_sig": "public static final\u00a0long COMPONENT_EVENT_MASK", "description": "The event mask for selecting component events."}, {"field_name": "CONTAINER_EVENT_MASK", "field_sig": "public static final\u00a0long CONTAINER_EVENT_MASK", "description": "The event mask for selecting container events."}, {"field_name": "FOCUS_EVENT_MASK", "field_sig": "public static final\u00a0long FOCUS_EVENT_MASK", "description": "The event mask for selecting focus events."}, {"field_name": "KEY_EVENT_MASK", "field_sig": "public static final\u00a0long KEY_EVENT_MASK", "description": "The event mask for selecting key events."}, {"field_name": "MOUSE_EVENT_MASK", "field_sig": "public static final\u00a0long MOUSE_EVENT_MASK", "description": "The event mask for selecting mouse events."}, {"field_name": "MOUSE_MOTION_EVENT_MASK", "field_sig": "public static final\u00a0long MOUSE_MOTION_EVENT_MASK", "description": "The event mask for selecting mouse motion events."}, {"field_name": "WINDOW_EVENT_MASK", "field_sig": "public static final\u00a0long WINDOW_EVENT_MASK", "description": "The event mask for selecting window events."}, {"field_name": "ACTION_EVENT_MASK", "field_sig": "public static final\u00a0long ACTION_EVENT_MASK", "description": "The event mask for selecting action events."}, {"field_name": "ADJUSTMENT_EVENT_MASK", "field_sig": "public static final\u00a0long ADJUSTMENT_EVENT_MASK", "description": "The event mask for selecting adjustment events."}, {"field_name": "ITEM_EVENT_MASK", "field_sig": "public static final\u00a0long ITEM_EVENT_MASK", "description": "The event mask for selecting item events."}, {"field_name": "TEXT_EVENT_MASK", "field_sig": "public static final\u00a0long TEXT_EVENT_MASK", "description": "The event mask for selecting text events."}, {"field_name": "INPUT_METHOD_EVENT_MASK", "field_sig": "public static final\u00a0long INPUT_METHOD_EVENT_MASK", "description": "The event mask for selecting input method events."}, {"field_name": "PAINT_EVENT_MASK", "field_sig": "public static final\u00a0long PAINT_EVENT_MASK", "description": "The event mask for selecting paint events."}, {"field_name": "INVOCATION_EVENT_MASK", "field_sig": "public static final\u00a0long INVOCATION_EVENT_MASK", "description": "The event mask for selecting invocation events."}, {"field_name": "HIERARCHY_EVENT_MASK", "field_sig": "public static final\u00a0long HIERARCHY_EVENT_MASK", "description": "The event mask for selecting hierarchy events."}, {"field_name": "HIERARCHY_BOUNDS_EVENT_MASK", "field_sig": "public static final\u00a0long HIERARCHY_BOUNDS_EVENT_MASK", "description": "The event mask for selecting hierarchy bounds events."}, {"field_name": "MOUSE_WHEEL_EVENT_MASK", "field_sig": "public static final\u00a0long MOUSE_WHEEL_EVENT_MASK", "description": "The event mask for selecting mouse wheel events."}, {"field_name": "WINDOW_STATE_EVENT_MASK", "field_sig": "public static final\u00a0long WINDOW_STATE_EVENT_MASK", "description": "The event mask for selecting window state events."}, {"field_name": "WINDOW_FOCUS_EVENT_MASK", "field_sig": "public static final\u00a0long WINDOW_FOCUS_EVENT_MASK", "description": "The event mask for selecting window focus events."}, {"field_name": "RESERVED_ID_MAX", "field_sig": "public static final\u00a0int RESERVED_ID_MAX", "description": "The maximum value for reserved AWT event IDs. Programs defining\n their own event IDs should use IDs greater than this value."}], "methods": [{"method_name": "setSource", "method_sig": "public void setSource (Object newSource)", "description": "Retargets an event to a new source. This method is typically used to\n retarget an event to a lightweight child Component of the original\n heavyweight source.\n \n This method is intended to be used only by event targeting subsystems,\n such as client-defined KeyboardFocusManagers. It is not for general\n client use."}, {"method_name": "getID", "method_sig": "public int getID()", "description": "Returns the event type."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a String representation of this object."}, {"method_name": "paramString", "method_sig": "public String paramString()", "description": "Returns a string representing the state of this Event.\n This method is intended to be used only for debugging purposes, and the\n content and format of the returned string may vary between\n implementations. The returned string may be empty but may not be\n null."}, {"method_name": "consume", "method_sig": "protected void consume()", "description": "Consumes this event, if this event can be consumed. Only low-level,\n system events can be consumed"}, {"method_name": "isConsumed", "method_sig": "protected boolean isConsumed()", "description": "Returns whether this event has been consumed."}]}