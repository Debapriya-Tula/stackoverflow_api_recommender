{"name": "Class RoundRectangle2D.Double", "module": "java.desktop", "package": "java.awt.geom", "text": "The Double class defines a rectangle with rounded\n corners all specified in double coordinates.", "codes": ["public static class RoundRectangle2D.Double\nextends RoundRectangle2D\nimplements Serializable"], "fields": [{"field_name": "x", "field_sig": "public\u00a0double x", "description": "The X coordinate of this RoundRectangle2D."}, {"field_name": "y", "field_sig": "public\u00a0double y", "description": "The Y coordinate of this RoundRectangle2D."}, {"field_name": "width", "field_sig": "public\u00a0double width", "description": "The width of this RoundRectangle2D."}, {"field_name": "height", "field_sig": "public\u00a0double height", "description": "The height of this RoundRectangle2D."}, {"field_name": "arcwidth", "field_sig": "public\u00a0double arcwidth", "description": "The width of the arc that rounds off the corners."}, {"field_name": "archeight", "field_sig": "public\u00a0double archeight", "description": "The height of the arc that rounds off the corners."}], "methods": [{"method_name": "getX", "method_sig": "public double getX()", "description": "Returns the X coordinate of the upper-left corner of\n the framing rectangle in double precision."}, {"method_name": "getY", "method_sig": "public double getY()", "description": "Returns the Y coordinate of the upper-left corner of\n the framing rectangle in double precision."}, {"method_name": "getWidth", "method_sig": "public double getWidth()", "description": "Returns the width of the framing rectangle in\n double precision."}, {"method_name": "getHeight", "method_sig": "public double getHeight()", "description": "Returns the height of the framing rectangle\n in double precision."}, {"method_name": "getArcWidth", "method_sig": "public double getArcWidth()", "description": "Gets the width of the arc that rounds off the corners."}, {"method_name": "getArcHeight", "method_sig": "public double getArcHeight()", "description": "Gets the height of the arc that rounds off the corners."}, {"method_name": "isEmpty", "method_sig": "public boolean isEmpty()", "description": "Determines whether the RectangularShape is empty.\n When the RectangularShape is empty, it encloses no\n area."}, {"method_name": "setRoundRect", "method_sig": "public void setRoundRect (double x,\n                         double y,\n                         double w,\n                         double h,\n                         double arcw,\n                         double arch)", "description": "Sets the location, size, and corner radii of this\n RoundRectangle2D to the specified\n double values."}, {"method_name": "setRoundRect", "method_sig": "public void setRoundRect (RoundRectangle2D rr)", "description": "Sets this RoundRectangle2D to be the same as the\n specified RoundRectangle2D."}, {"method_name": "getBounds2D", "method_sig": "public Rectangle2D getBounds2D()", "description": "Returns a high precision and more accurate bounding box of\n the Shape than the getBounds method.\n Note that there is no guarantee that the returned\n Rectangle2D is the smallest bounding box that encloses\n the Shape, only that the Shape lies\n entirely within the indicated Rectangle2D.  The\n bounding box returned by this method is usually tighter than that\n returned by the getBounds method and never fails due\n to overflow problems since the return value can be an instance of\n the Rectangle2D that uses double precision values to\n store the dimensions.\n\n \n Note that the\n \n definition of insideness can lead to situations where points\n on the defining outline of the shape may not be considered\n contained in the returned bounds object, but only in cases\n where those points are also not considered contained in the original\n shape.\n \n\n If a point is inside the shape according to the\n contains(point) method, then it must\n be inside the returned Rectangle2D bounds object according\n to the contains(point) method of the\n bounds. Specifically:\n \n\nshape.contains(p) requires bounds.contains(p)\n\n\n If a point is not inside the shape, then it might\n still be contained in the bounds object:\n \n\nbounds.contains(p) does not imply shape.contains(p)\n"}]}