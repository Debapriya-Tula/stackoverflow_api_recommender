{"name": "Class JScrollPane", "module": "java.desktop", "package": "javax.swing", "text": "Provides a scrollable view of a lightweight component.\n A JScrollPane manages a viewport, optional\n vertical and horizontal scroll bars, and optional row and\n column heading viewports.\n You can find task-oriented documentation of JScrollPane in\n  How to Use Scroll Panes,\n a section in The Java Tutorial.  Note that\n JScrollPane does not support heavyweight components.\n\n \nExample\n\n\n\n\n\n\n The JViewport provides a window,\n or \"viewport\" onto a data\n source -- for example, a text file. That data source is the\n \"scrollable client\" (aka data model) displayed by the\n JViewport view.\n A JScrollPane basically consists of JScrollBars,\n a JViewport, and the wiring between them,\n as shown in the diagram at right.\n \n In addition to the scroll bars and viewport,\n a JScrollPane can have a\n column header and a row header. Each of these is a\n JViewport object that\n you specify with setRowHeaderView,\n and setColumnHeaderView.\n The column header viewport automatically scrolls left and right, tracking\n the left-right scrolling of the main viewport.\n (It never scrolls vertically, however.)\n The row header acts in a similar fashion.\n \n Where two scroll bars meet, the row header meets the column header,\n or a scroll bar meets one of the headers, both components stop short\n of the corner, leaving a rectangular space which is, by default, empty.\n These spaces can potentially exist in any number of the four corners.\n In the previous diagram, the top right space is present and identified\n by the label \"corner component\".\n \n Any number of these empty spaces can be replaced by using the\n setCorner method to add a component to a particular corner.\n (Note: The same component cannot be added to multiple corners.)\n This is useful if there's\n some extra decoration or function you'd like to add to the scroll pane.\n The size of each corner component is entirely determined by the size of the\n headers and/or scroll bars that surround it.\n \n A corner component will only be visible if there is an empty space in that\n corner for it to exist in. For example, consider a component set into the\n top right corner of a scroll pane with a column header. If the scroll pane's\n vertical scrollbar is not present, perhaps because the view component hasn't\n grown large enough to require it, then the corner component will not be\n shown (since there is no empty space in that corner created by the meeting\n of the header and vertical scroll bar). Forcing the scroll bar to always be\n shown, using\n setVerticalScrollBarPolicy(VERTICAL_SCROLLBAR_ALWAYS),\n will ensure that the space for the corner component always exists.\n \n To add a border around the main viewport,\n you can use setViewportBorder.\n (Of course, you can also add a border around the whole scroll pane using\n setBorder.)\n \n A common operation to want to do is to set the background color that will\n be used if the main viewport view is smaller than the viewport, or is\n not opaque. This can be accomplished by setting the background color\n of the viewport, via scrollPane.getViewport().setBackground().\n The reason for setting the color of the viewport and not the scrollpane\n is that by default JViewport is opaque\n which, among other things, means it will completely fill\n in its background using its background color.  Therefore when\n JScrollPane draws its background the viewport will\n usually draw over it.\n \n By default JScrollPane uses ScrollPaneLayout\n to handle the layout of its child Components. ScrollPaneLayout\n determines the size to make the viewport view in one of two ways:\n \nIf the view implements Scrollable\n       a combination of getPreferredScrollableViewportSize,\n       getScrollableTracksViewportWidth and\n       getScrollableTracksViewportHeightis used, otherwise\n   getPreferredSize is used.\n \n\nWarning: Swing is not thread safe. For more\n information see Swing's Threading\n Policy.\n \nWarning:\n Serialized objects of this class will not be compatible with\n future Swing releases. The current serialization support is\n appropriate for short term storage or RMI between applications running\n the same version of Swing.  As of 1.4, support for long term storage\n of all JavaBeans\u2122\n has been added to the java.beans package.\n Please see XMLEncoder.", "codes": ["@JavaBean(defaultProperty=\"UI\",\n          description=\"A specialized container that manages a viewport, optional scrollbars and headers\")\npublic class JScrollPane\nextends JComponent\nimplements ScrollPaneConstants, Accessible"], "fields": [{"field_name": "verticalScrollBarPolicy", "field_sig": "protected\u00a0int verticalScrollBarPolicy", "description": "The display policy for the vertical scrollbar.\n The default is\n ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED."}, {"field_name": "horizontalScrollBarPolicy", "field_sig": "protected\u00a0int horizontalScrollBarPolicy", "description": "The display policy for the horizontal scrollbar.\n The default is\n ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED."}, {"field_name": "viewport", "field_sig": "protected\u00a0JViewport viewport", "description": "The scrollpane's viewport child.  Default is an empty\n JViewport."}, {"field_name": "verticalScrollBar", "field_sig": "protected\u00a0JScrollBar verticalScrollBar", "description": "The scrollpane's vertical scrollbar child.\n Default is a JScrollBar."}, {"field_name": "horizontalScrollBar", "field_sig": "protected\u00a0JScrollBar horizontalScrollBar", "description": "The scrollpane's horizontal scrollbar child.\n Default is a JScrollBar."}, {"field_name": "rowHeader", "field_sig": "protected\u00a0JViewport rowHeader", "description": "The row header child.  Default is null."}, {"field_name": "columnHeader", "field_sig": "protected\u00a0JViewport columnHeader", "description": "The column header child.  Default is null."}, {"field_name": "lowerLeft", "field_sig": "protected\u00a0Component lowerLeft", "description": "The component to display in the lower left corner.\n Default is null."}, {"field_name": "lowerRight", "field_sig": "protected\u00a0Component lowerRight", "description": "The component to display in the lower right corner.\n Default is null."}, {"field_name": "upperLeft", "field_sig": "protected\u00a0Component upperLeft", "description": "The component to display in the upper left corner.\n Default is null."}, {"field_name": "upperRight", "field_sig": "protected\u00a0Component upperRight", "description": "The component to display in the upper right corner.\n Default is null."}], "methods": [{"method_name": "getUI", "method_sig": "@BeanProperty(hidden=true,\n              visualUpdate=true,\n              description=\"The UI object that implements the Component\\'s LookAndFeel.\")\npublic ScrollPaneUI getUI()", "description": "Returns the look and feel (L&F) object that renders this component."}, {"method_name": "setUI", "method_sig": "public void setUI (ScrollPaneUI ui)", "description": "Sets the ScrollPaneUI object that provides the\n look and feel (L&F) for this component."}, {"method_name": "updateUI", "method_sig": "public void updateUI()", "description": "Replaces the current ScrollPaneUI object with a version\n from the current default look and feel.\n To be called when the default look and feel changes."}, {"method_name": "getUIClassID", "method_sig": "@BeanProperty(bound=false,\n              hidden=true)\npublic String getUIClassID()", "description": "Returns the suffix used to construct the name of the L&F class used to\n render this component."}, {"method_name": "setLayout", "method_sig": "public void setLayout (LayoutManager layout)", "description": "Sets the layout manager for this JScrollPane.\n This method overrides setLayout in\n java.awt.Container to ensure that only\n LayoutManagers which\n are subclasses of ScrollPaneLayout can be used in a\n JScrollPane. If layout is non-null, this\n will invoke syncWithScrollPane on it."}, {"method_name": "isValidateRoot", "method_sig": "@BeanProperty(hidden=true)\npublic boolean isValidateRoot()", "description": "Overridden to return true so that any calls to revalidate\n on any descendants of this JScrollPane will cause the\n entire tree beginning with this JScrollPane to be\n validated."}, {"method_name": "getVerticalScrollBarPolicy", "method_sig": "public int getVerticalScrollBarPolicy()", "description": "Returns the vertical scroll bar policy value."}, {"method_name": "setVerticalScrollBarPolicy", "method_sig": "@BeanProperty(preferred=true,\n              enumerationValues={\"ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED\",\"ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER\",\"ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS\"},\n              description=\"The scrollpane vertical scrollbar policy\")\npublic void setVerticalScrollBarPolicy (int policy)", "description": "Determines when the vertical scrollbar appears in the scrollpane.\n Legal values are:\n \nScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED\nScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER\nScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS\n"}, {"method_name": "getHorizontalScrollBarPolicy", "method_sig": "public int getHorizontalScrollBarPolicy()", "description": "Returns the horizontal scroll bar policy value."}, {"method_name": "setHorizontalScrollBarPolicy", "method_sig": "@BeanProperty(preferred=true,\n              enumerationValues={\"ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED\",\"ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER\",\"ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS\"},\n              description=\"The scrollpane scrollbar policy\")\npublic void setHorizontalScrollBarPolicy (int policy)", "description": "Determines when the horizontal scrollbar appears in the scrollpane.\n The options are:\nScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED\nScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER\nScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS\n"}, {"method_name": "getViewportBorder", "method_sig": "public Border getViewportBorder()", "description": "Returns the Border object that surrounds the viewport."}, {"method_name": "setViewportBorder", "method_sig": "@BeanProperty(preferred=true,\n              description=\"The border around the viewport.\")\npublic void setViewportBorder (Border viewportBorder)", "description": "Adds a border around the viewport.  Note that the border isn't\n set on the viewport directly, JViewport doesn't support\n the JComponent border property.\n Similarly setting the JScrollPanes\n viewport doesn't affect the viewportBorder property.\n \n The default value of this property is computed by the look\n and feel implementation."}, {"method_name": "getViewportBorderBounds", "method_sig": "@BeanProperty(bound=false)\npublic Rectangle getViewportBorderBounds()", "description": "Returns the bounds of the viewport's border."}, {"method_name": "createHorizontalScrollBar", "method_sig": "public JScrollBar createHorizontalScrollBar()", "description": "Returns a JScrollPane.ScrollBar by default.\n Subclasses may override this method to force ScrollPaneUI\n implementations to use a JScrollBar subclass.\n Used by ScrollPaneUI implementations to\n create the horizontal scrollbar."}, {"method_name": "getHorizontalScrollBar", "method_sig": "public JScrollBar getHorizontalScrollBar()", "description": "Returns the horizontal scroll bar that controls the viewport's\n horizontal view position."}, {"method_name": "setHorizontalScrollBar", "method_sig": "@BeanProperty(expert=true,\n              description=\"The horizontal scrollbar.\")\npublic void setHorizontalScrollBar (JScrollBar horizontalScrollBar)", "description": "Adds the scrollbar that controls the viewport's horizontal view\n position to the scrollpane.\n This is usually unnecessary, as JScrollPane creates\n horizontal and vertical scrollbars by default."}, {"method_name": "createVerticalScrollBar", "method_sig": "public JScrollBar createVerticalScrollBar()", "description": "Returns a JScrollPane.ScrollBar by default.  Subclasses\n may override this method to force ScrollPaneUI\n implementations to use a JScrollBar subclass.\n Used by ScrollPaneUI implementations to create the\n vertical scrollbar."}, {"method_name": "getVerticalScrollBar", "method_sig": "public JScrollBar getVerticalScrollBar()", "description": "Returns the vertical scroll bar that controls the viewports\n vertical view position."}, {"method_name": "setVerticalScrollBar", "method_sig": "@BeanProperty(expert=true,\n              description=\"The vertical scrollbar.\")\npublic void setVerticalScrollBar (JScrollBar verticalScrollBar)", "description": "Adds the scrollbar that controls the viewports vertical view position\n to the scrollpane.  This is usually unnecessary,\n as JScrollPane creates vertical and\n horizontal scrollbars by default."}, {"method_name": "createViewport", "method_sig": "protected JViewport createViewport()", "description": "Returns a new JViewport by default.\n Used to create the\n viewport (as needed) in setViewportView,\n setRowHeaderView, and setColumnHeaderView.\n Subclasses may override this method to return a subclass of\n JViewport."}, {"method_name": "getViewport", "method_sig": "public JViewport getViewport()", "description": "Returns the current JViewport."}, {"method_name": "setViewport", "method_sig": "@BeanProperty(expert=true,\n              visualUpdate=true,\n              description=\"The viewport child for this scrollpane\")\npublic void setViewport (JViewport viewport)", "description": "Removes the old viewport (if there is one); forces the\n viewPosition of the new viewport to be in the +x,+y quadrant;\n syncs up the row and column headers (if there are any) with the\n new viewport; and finally syncs the scrollbars and\n headers with the new viewport.\n \n Most applications will find it more convenient to use\n setViewportView\n to add a viewport and a view to the scrollpane."}, {"method_name": "setViewportView", "method_sig": "public void setViewportView (Component view)", "description": "Creates a viewport if necessary and then sets its view.  Applications\n that don't provide the view directly to the JScrollPane\n constructor\n should use this method to specify the scrollable child that's going\n to be displayed in the scrollpane. For example:\n \n JScrollPane scrollpane = new JScrollPane();\n scrollpane.setViewportView(myBigComponentToScroll);\n \n Applications should not add children directly to the scrollpane."}, {"method_name": "getRowHeader", "method_sig": "public JViewport getRowHeader()", "description": "Returns the row header."}, {"method_name": "setRowHeader", "method_sig": "@BeanProperty(expert=true,\n              description=\"The row header child for this scrollpane\")\npublic void setRowHeader (JViewport rowHeader)", "description": "Removes the old rowHeader, if it exists; if the new rowHeader\n isn't null, syncs the y coordinate of its\n viewPosition with\n the viewport (if there is one) and then adds it to the scroll pane.\n \n Most applications will find it more convenient to use\n setRowHeaderView\n to add a row header component and its viewport to the scroll pane."}, {"method_name": "setRowHeaderView", "method_sig": "public void setRowHeaderView (Component view)", "description": "Creates a row-header viewport if necessary, sets\n its view and then adds the row-header viewport\n to the scrollpane.  For example:\n \n JScrollPane scrollpane = new JScrollPane();\n scrollpane.setViewportView(myBigComponentToScroll);\n scrollpane.setRowHeaderView(myBigComponentsRowHeader);\n "}, {"method_name": "getColumnHeader", "method_sig": "public JViewport getColumnHeader()", "description": "Returns the column header."}, {"method_name": "setColumnHeader", "method_sig": "@BeanProperty(visualUpdate=true,\n              description=\"The column header child for this scrollpane\")\npublic void setColumnHeader (JViewport columnHeader)", "description": "Removes the old columnHeader, if it exists; if the new columnHeader\n isn't null, syncs the x coordinate of its viewPosition\n with the viewport (if there is one) and then adds it to the scroll pane.\n \n Most applications will find it more convenient to use\n setColumnHeaderView\n to add a column header component and its viewport to the scroll pane."}, {"method_name": "setColumnHeaderView", "method_sig": "public void setColumnHeaderView (Component view)", "description": "Creates a column-header viewport if necessary, sets\n its view, and then adds the column-header viewport\n to the scrollpane.  For example:\n \n JScrollPane scrollpane = new JScrollPane();\n scrollpane.setViewportView(myBigComponentToScroll);\n scrollpane.setColumnHeaderView(myBigComponentsColumnHeader);\n "}, {"method_name": "getCorner", "method_sig": "public Component getCorner (String key)", "description": "Returns the component at the specified corner. The\n key value specifying the corner is one of:\n \nScrollPaneConstants.LOWER_LEFT_CORNER\n ScrollPaneConstants.LOWER_RIGHT_CORNER\n ScrollPaneConstants.UPPER_LEFT_CORNER\n ScrollPaneConstants.UPPER_RIGHT_CORNER\n ScrollPaneConstants.LOWER_LEADING_CORNER\n ScrollPaneConstants.LOWER_TRAILING_CORNER\n ScrollPaneConstants.UPPER_LEADING_CORNER\n ScrollPaneConstants.UPPER_TRAILING_CORNER\n "}, {"method_name": "setCorner", "method_sig": "public void setCorner (String key,\n                      Component corner)", "description": "Adds a child that will appear in one of the scroll panes\n corners, if there's room.   For example with both scrollbars\n showing (on the right and bottom edges of the scrollpane)\n the lower left corner component will be shown in the space\n between ends of the two scrollbars. Legal values for\n the key are:\n \nScrollPaneConstants.LOWER_LEFT_CORNER\n ScrollPaneConstants.LOWER_RIGHT_CORNER\n ScrollPaneConstants.UPPER_LEFT_CORNER\n ScrollPaneConstants.UPPER_RIGHT_CORNER\n ScrollPaneConstants.LOWER_LEADING_CORNER\n ScrollPaneConstants.LOWER_TRAILING_CORNER\n ScrollPaneConstants.UPPER_LEADING_CORNER\n ScrollPaneConstants.UPPER_TRAILING_CORNER\n \n\n Although \"corner\" doesn't match any beans property\n signature, PropertyChange events are generated with the\n property name set to the corner key."}, {"method_name": "setComponentOrientation", "method_sig": "public void setComponentOrientation (ComponentOrientation co)", "description": "Sets the orientation for the vertical and horizontal\n scrollbars as determined by the\n ComponentOrientation argument."}, {"method_name": "isWheelScrollingEnabled", "method_sig": "@BeanProperty(description=\"Flag for enabling/disabling mouse wheel scrolling\")\npublic boolean isWheelScrollingEnabled()", "description": "Indicates whether or not scrolling will take place in response to the\n mouse wheel.  Wheel scrolling is enabled by default."}, {"method_name": "setWheelScrollingEnabled", "method_sig": "@BeanProperty(description=\"Flag for enabling/disabling mouse wheel scrolling\")\npublic void setWheelScrollingEnabled (boolean handleWheel)", "description": "Enables/disables scrolling in response to movement of the mouse wheel.\n Wheel scrolling is enabled by default."}, {"method_name": "paramString", "method_sig": "protected String paramString()", "description": "Returns a string representation of this JScrollPane.\n This method\n is intended to be used only for debugging purposes, and the\n content and format of the returned string may vary between\n implementations. The returned string may be empty but may not\n be null."}, {"method_name": "getAccessibleContext", "method_sig": "@BeanProperty(bound=false)\npublic AccessibleContext getAccessibleContext()", "description": "Gets the AccessibleContext associated with this JScrollPane.\n For scroll panes, the AccessibleContext takes the form of an\n AccessibleJScrollPane.\n A new AccessibleJScrollPane instance is created if necessary."}]}