{"name": "Class JInternalFrame", "module": "java.desktop", "package": "javax.swing", "text": "A lightweight object that provides many of the features of\n a native frame, including dragging, closing, becoming an icon,\n resizing, title display, and support for a menu bar.\n For task-oriented documentation and examples of using internal frames,\n see How to Use Internal Frames,\n a section in The Java Tutorial.\n\n \n\n Generally,\n you add JInternalFrames to a JDesktopPane. The UI\n delegates the look-and-feel-specific actions to the\n DesktopManager\n object maintained by the JDesktopPane.\n \n The JInternalFrame content pane\n is where you add child components.\n As a convenience, the add, remove, and setLayout\n methods of this class are overridden, so that they delegate calls\n to the corresponding methods of the ContentPane.\n For example, you can add a child component to an internal frame as follows:\n \n       internalFrame.add(child);\n \n And the child will be added to the contentPane.\n The content pane is actually managed by an instance of\n JRootPane,\n which also manages a layout pane, glass pane, and\n optional menu bar for the internal frame. Please see the\n JRootPane\n documentation for a complete description of these components.\n Refer to RootPaneContainer\n for details on adding, removing and setting the LayoutManager\n of a JInternalFrame.\n \nWarning: Swing is not thread safe. For more\n information see Swing's Threading\n Policy.\n \nWarning:\n Serialized objects of this class will not be compatible with\n future Swing releases. The current serialization support is\n appropriate for short term storage or RMI between applications running\n the same version of Swing.  As of 1.4, support for long term storage\n of all JavaBeans\u2122\n has been added to the java.beans package.\n Please see XMLEncoder.", "codes": ["@JavaBean(defaultProperty=\"JMenuBar\",\n          description=\"A frame container which is contained within another window.\")\npublic class JInternalFrame\nextends JComponent\nimplements Accessible, WindowConstants, RootPaneContainer"], "fields": [{"field_name": "rootPane", "field_sig": "protected\u00a0JRootPane rootPane", "description": "The JRootPane instance that manages the\n content pane\n and optional menu bar for this internal frame, as well as the\n glass pane."}, {"field_name": "rootPaneCheckingEnabled", "field_sig": "protected\u00a0boolean rootPaneCheckingEnabled", "description": "If true then calls to add and setLayout\n will be forwarded to the contentPane. This is initially\n false, but is set to true when the JInternalFrame is\n constructed."}, {"field_name": "closable", "field_sig": "protected\u00a0boolean closable", "description": "The frame can be closed."}, {"field_name": "isClosed", "field_sig": "protected\u00a0boolean isClosed", "description": "The frame has been closed."}, {"field_name": "maximizable", "field_sig": "protected\u00a0boolean maximizable", "description": "The frame can be expanded to the size of the desktop pane."}, {"field_name": "isMaximum", "field_sig": "protected\u00a0boolean isMaximum", "description": "The frame has been expanded to its maximum size."}, {"field_name": "iconable", "field_sig": "protected\u00a0boolean iconable", "description": "The frame can \"iconified\" (shrunk down and displayed as\n an icon-image)."}, {"field_name": "isIcon", "field_sig": "protected\u00a0boolean isIcon", "description": "The frame has been iconified."}, {"field_name": "resizable", "field_sig": "protected\u00a0boolean resizable", "description": "The frame's size can be changed."}, {"field_name": "isSelected", "field_sig": "protected\u00a0boolean isSelected", "description": "The frame is currently selected."}, {"field_name": "frameIcon", "field_sig": "protected\u00a0Icon frameIcon", "description": "The icon shown in the top-left corner of this internal frame."}, {"field_name": "title", "field_sig": "protected\u00a0String title", "description": "The title displayed in this internal frame's title bar."}, {"field_name": "desktopIcon", "field_sig": "protected\u00a0JInternalFrame.JDesktopIcon desktopIcon", "description": "The icon that is displayed when this internal frame is iconified."}, {"field_name": "CONTENT_PANE_PROPERTY", "field_sig": "public static final\u00a0String CONTENT_PANE_PROPERTY", "description": "Bound property name."}, {"field_name": "MENU_BAR_PROPERTY", "field_sig": "public static final\u00a0String MENU_BAR_PROPERTY", "description": "Bound property name."}, {"field_name": "TITLE_PROPERTY", "field_sig": "public static final\u00a0String TITLE_PROPERTY", "description": "Bound property name."}, {"field_name": "LAYERED_PANE_PROPERTY", "field_sig": "public static final\u00a0String LAYERED_PANE_PROPERTY", "description": "Bound property name."}, {"field_name": "ROOT_PANE_PROPERTY", "field_sig": "public static final\u00a0String ROOT_PANE_PROPERTY", "description": "Bound property name."}, {"field_name": "GLASS_PANE_PROPERTY", "field_sig": "public static final\u00a0String GLASS_PANE_PROPERTY", "description": "Bound property name."}, {"field_name": "FRAME_ICON_PROPERTY", "field_sig": "public static final\u00a0String FRAME_ICON_PROPERTY", "description": "Bound property name."}, {"field_name": "IS_SELECTED_PROPERTY", "field_sig": "public static final\u00a0String IS_SELECTED_PROPERTY", "description": "Constrained property name indicated that this frame has\n selected status."}, {"field_name": "IS_CLOSED_PROPERTY", "field_sig": "public static final\u00a0String IS_CLOSED_PROPERTY", "description": "Constrained property name indicating that the internal frame is closed."}, {"field_name": "IS_MAXIMUM_PROPERTY", "field_sig": "public static final\u00a0String IS_MAXIMUM_PROPERTY", "description": "Constrained property name indicating that the internal frame is maximized."}, {"field_name": "IS_ICON_PROPERTY", "field_sig": "public static final\u00a0String IS_ICON_PROPERTY", "description": "Constrained property name indicating that the internal frame is iconified."}], "methods": [{"method_name": "createRootPane", "method_sig": "protected JRootPane createRootPane()", "description": "Called by the constructor to set up the JRootPane."}, {"method_name": "getUI", "method_sig": "public InternalFrameUI getUI()", "description": "Returns the look-and-feel object that renders this component."}, {"method_name": "setUI", "method_sig": "@BeanProperty(hidden=true,\n              visualUpdate=true,\n              description=\"The UI object that implements the Component\\'s LookAndFeel.\")\npublic void setUI (InternalFrameUI ui)", "description": "Sets the UI delegate for this JInternalFrame."}, {"method_name": "updateUI", "method_sig": "public void updateUI()", "description": "Notification from the UIManager that the look and feel\n has changed.\n Replaces the current UI object with the latest version from the\n UIManager."}, {"method_name": "getUIClassID", "method_sig": "@BeanProperty(bound=false,\n              description=\"UIClassID\")\npublic String getUIClassID()", "description": "Returns the name of the look-and-feel\n class that renders this component."}, {"method_name": "isRootPaneCheckingEnabled", "method_sig": "protected boolean isRootPaneCheckingEnabled()", "description": "Returns whether calls to add and\n setLayout are forwarded to the contentPane."}, {"method_name": "setRootPaneCheckingEnabled", "method_sig": "@BeanProperty(hidden=true,\n              description=\"Whether the add and setLayout methods are forwarded\")\nprotected void setRootPaneCheckingEnabled (boolean enabled)", "description": "Sets whether calls to add and\n setLayout are forwarded to the contentPane."}, {"method_name": "addImpl", "method_sig": "protected void addImpl (Component comp,\n                       Object constraints,\n                       int index)", "description": "Adds the specified child Component.\n This method is overridden to conditionally forward calls to the\n contentPane.\n By default, children are added to the contentPane instead\n of the frame, refer to RootPaneContainer for\n details."}, {"method_name": "remove", "method_sig": "public void remove (Component comp)", "description": "Removes the specified component from the container. If\n comp is not a child of the JInternalFrame\n this will forward the call to the contentPane."}, {"method_name": "setLayout", "method_sig": "public void setLayout (LayoutManager manager)", "description": "Ensures that, by default, the layout of this component cannot be set.\n Overridden to conditionally forward the call to the\n contentPane.\n Refer to RootPaneContainer for\n more information."}, {"method_name": "getMenuBar", "method_sig": "@Deprecated\npublic JMenuBar getMenuBar()", "description": "Returns the current JMenuBar for this\n JInternalFrame, or null\n if no menu bar has been set."}, {"method_name": "getJMenuBar", "method_sig": "public JMenuBar getJMenuBar()", "description": "Returns the current JMenuBar for this\n JInternalFrame, or null\n if no menu bar has been set."}, {"method_name": "setMenuBar", "method_sig": "@Deprecated\npublic void setMenuBar (JMenuBar m)", "description": "Sets the menuBar property for this JInternalFrame."}, {"method_name": "setJMenuBar", "method_sig": "@BeanProperty(preferred=true,\n              description=\"The menu bar for accessing pulldown menus from this internal frame.\")\npublic void setJMenuBar (JMenuBar m)", "description": "Sets the menuBar property for this JInternalFrame."}, {"method_name": "getContentPane", "method_sig": "public Container getContentPane()", "description": "Returns the content pane for this internal frame."}, {"method_name": "setContentPane", "method_sig": "@BeanProperty(hidden=true,\n              description=\"The client area of the internal frame where child components are normally inserted.\")\npublic void setContentPane (Container c)", "description": "Sets this JInternalFrame's contentPane\n property."}, {"method_name": "getLayeredPane", "method_sig": "public JLayeredPane getLayeredPane()", "description": "Returns the layered pane for this internal frame."}, {"method_name": "setLayeredPane", "method_sig": "@BeanProperty(hidden=true,\n              description=\"The pane which holds the various desktop layers.\")\npublic void setLayeredPane (JLayeredPane layered)", "description": "Sets this JInternalFrame's\n layeredPane property."}, {"method_name": "getGlassPane", "method_sig": "public Component getGlassPane()", "description": "Returns the glass pane for this internal frame."}, {"method_name": "setGlassPane", "method_sig": "@BeanProperty(hidden=true,\n              description=\"A transparent pane used for menu rendering.\")\npublic void setGlassPane (Component glass)", "description": "Sets this JInternalFrame's\n glassPane property."}, {"method_name": "getRootPane", "method_sig": "@BeanProperty(hidden=true,\n              description=\"The root pane used by this internal frame.\")\npublic JRootPane getRootPane()", "description": "Returns the rootPane object for this internal frame."}, {"method_name": "setRootPane", "method_sig": "protected void setRootPane (JRootPane root)", "description": "Sets the rootPane property\n for this JInternalFrame.\n This method is called by the constructor."}, {"method_name": "setClosable", "method_sig": "@BeanProperty(preferred=true,\n              description=\"Indicates whether this internal frame can be closed.\")\npublic void setClosable (boolean b)", "description": "Sets whether this JInternalFrame can be closed by\n some user action."}, {"method_name": "isClosable", "method_sig": "public boolean isClosable()", "description": "Returns whether this JInternalFrame can be closed by\n some user action."}, {"method_name": "isClosed", "method_sig": "public boolean isClosed()", "description": "Returns whether this JInternalFrame is currently closed."}, {"method_name": "setClosed", "method_sig": "@BeanProperty(description=\"Indicates whether this internal frame has been closed.\")\npublic void setClosed (boolean b)\n               throws PropertyVetoException", "description": "Closes this internal frame if the argument is true.\n Do not invoke this method with a false argument;\n the result of invoking setClosed(false)\n is unspecified.\n\n \n\n If the internal frame is already closed,\n this method does nothing and returns immediately.\n Otherwise,\n this method begins by firing\n an INTERNAL_FRAME_CLOSING event.\n Then this method sets the closed property to true\n unless a listener vetoes the property change.\n This method finishes by making the internal frame\n invisible and unselected,\n and then firing an INTERNAL_FRAME_CLOSED event.\n\n \nNote:\n To reuse an internal frame that has been closed,\n you must add it to a container\n (even if you never removed it from its previous container).\n Typically, this container will be the JDesktopPane\n that previously contained the internal frame."}, {"method_name": "setResizable", "method_sig": "@BeanProperty(preferred=true,\n              description=\"Determines whether this internal frame can be resized by the user.\")\npublic void setResizable (boolean b)", "description": "Sets whether the JInternalFrame can be resized by some\n user action."}, {"method_name": "isResizable", "method_sig": "public boolean isResizable()", "description": "Returns whether the JInternalFrame can be resized\n by some user action."}, {"method_name": "setIconifiable", "method_sig": "@BeanProperty(preferred=true,\n              description=\"Determines whether this internal frame can be iconified.\")\npublic void setIconifiable (boolean b)", "description": "Sets the iconable property,\n which must be true\n for the user to be able to\n make the JInternalFrame an icon.\n Some look and feels might not implement iconification;\n they will ignore this property."}, {"method_name": "isIconifiable", "method_sig": "public boolean isIconifiable()", "description": "Gets the iconable property,\n which by default is false."}, {"method_name": "isIcon", "method_sig": "public boolean isIcon()", "description": "Returns whether the JInternalFrame is currently iconified."}, {"method_name": "setIcon", "method_sig": "@BeanProperty(description=\"The image displayed when this internal frame is minimized.\")\npublic void setIcon (boolean b)\n             throws PropertyVetoException", "description": "Iconifies or de-iconifies this internal frame,\n if the look and feel supports iconification.\n If the internal frame's state changes to iconified,\n this method fires an INTERNAL_FRAME_ICONIFIED event.\n If the state changes to de-iconified,\n an INTERNAL_FRAME_DEICONIFIED event is fired."}, {"method_name": "setMaximizable", "method_sig": "@BeanProperty(preferred=true,\n              description=\"Determines whether this internal frame can be maximized.\")\npublic void setMaximizable (boolean b)", "description": "Sets the maximizable property,\n which determines whether the JInternalFrame\n can be maximized by\n some user action.\n Some look and feels might not support maximizing internal frames;\n they will ignore this property."}, {"method_name": "isMaximizable", "method_sig": "public boolean isMaximizable()", "description": "Gets the value of the maximizable property."}, {"method_name": "isMaximum", "method_sig": "public boolean isMaximum()", "description": "Returns whether the JInternalFrame is currently maximized."}, {"method_name": "setMaximum", "method_sig": "@BeanProperty(description=\"Indicates whether this internal frame is maximized.\")\npublic void setMaximum (boolean b)\n                throws PropertyVetoException", "description": "Maximizes and restores this internal frame.  A maximized frame is resized to\n fully fit the JDesktopPane area associated with the\n JInternalFrame.\n A restored frame's size is set to the JInternalFrame's\n actual size."}, {"method_name": "getTitle", "method_sig": "public String getTitle()", "description": "Returns the title of the JInternalFrame."}, {"method_name": "setTitle", "method_sig": "@BeanProperty(preferred=true,\n              description=\"The text displayed in the title bar.\")\npublic void setTitle (String title)", "description": "Sets the JInternalFrame title. title\n may have a null value."}, {"method_name": "setSelected", "method_sig": "@BeanProperty(description=\"Indicates whether this internal frame is currently the active frame.\")\npublic void setSelected (boolean selected)\n                 throws PropertyVetoException", "description": "Selects or deselects the internal frame\n if it's showing.\n A JInternalFrame normally draws its title bar\n differently if it is\n the selected frame, which indicates to the user that this\n internal frame has the focus.\n When this method changes the state of the internal frame\n from deselected to selected, it fires an\n InternalFrameEvent.INTERNAL_FRAME_ACTIVATED event.\n If the change is from selected to deselected,\n an InternalFrameEvent.INTERNAL_FRAME_DEACTIVATED event\n is fired."}, {"method_name": "isSelected", "method_sig": "public boolean isSelected()", "description": "Returns whether the JInternalFrame is the\n currently \"selected\" or active frame."}, {"method_name": "setFrameIcon", "method_sig": "@BeanProperty(description=\"The icon shown in the top-left corner of this internal frame.\")\npublic void setFrameIcon (Icon icon)", "description": "Sets an image to be displayed in the titlebar of this internal frame (usually\n in the top-left corner).\n Some look and feels might not support displaying an icon in the titlebar.\n\n This image is not the desktopIcon object, which\n is the image displayed in the JDesktop when\n this internal frame is iconified.\n\n Passing null to this function is valid,\n but the look and feel can choose the appropriate behavior\n for that situation, such as displaying no icon\n or a default icon for the look and feel."}, {"method_name": "getFrameIcon", "method_sig": "public Icon getFrameIcon()", "description": "Returns the image displayed in the title bar of this internal frame (usually\n in the top-left corner)."}, {"method_name": "moveToFront", "method_sig": "public void moveToFront()", "description": "Convenience method that moves this component to position 0 if its\n parent is a JLayeredPane."}, {"method_name": "moveToBack", "method_sig": "public void moveToBack()", "description": "Convenience method that moves this component to position -1 if its\n parent is a JLayeredPane."}, {"method_name": "getLastCursor", "method_sig": "@BeanProperty(bound=false)\npublic Cursor getLastCursor()", "description": "Returns the last Cursor that was set by the\n setCursor method that is not a resizable\n Cursor."}, {"method_name": "setCursor", "method_sig": "public void setCursor (Cursor cursor)", "description": "Sets the cursor image to the specified cursor.  This cursor\n image is displayed when the contains method for\n this component returns true for the current cursor location, and\n this Component is visible, displayable, and enabled. Setting the\n cursor of a Container causes that cursor to be displayed\n within all of the container's subcomponents, except for those\n that have a non-null cursor.\n \n The method may have no visual effect if the Java platform\n implementation and/or the native system do not support\n changing the mouse cursor shape."}, {"method_name": "setLayer", "method_sig": "@BeanProperty(bound=false,\n              expert=true,\n              description=\"Specifies what desktop layer is used.\")\npublic void setLayer (Integer layer)", "description": "Convenience method for setting the layer attribute of this component."}, {"method_name": "setLayer", "method_sig": "@BeanProperty(bound=false,\n              expert=true,\n              description=\"Specifies what desktop layer is used.\")\npublic void setLayer (int layer)", "description": "Convenience method for setting the layer attribute of this component.\n The method setLayer(Integer) should be used for\n layer values predefined in JLayeredPane.\n When using setLayer(int), care must be taken not to\n accidentally clash with those values."}, {"method_name": "getLayer", "method_sig": "public int getLayer()", "description": "Convenience method for getting the layer attribute of this component."}, {"method_name": "getDesktopPane", "method_sig": "@BeanProperty(bound=false)\npublic JDesktopPane getDesktopPane()", "description": "Convenience method that searches the ancestor hierarchy for a\n JDesktop instance. If JInternalFrame\n finds none, the desktopIcon tree is searched."}, {"method_name": "setDesktopIcon", "method_sig": "@BeanProperty(description=\"The icon shown when this internal frame is minimized.\")\npublic void setDesktopIcon (JInternalFrame.JDesktopIcon d)", "description": "Sets the JDesktopIcon associated with this\n JInternalFrame."}, {"method_name": "getDesktopIcon", "method_sig": "public JInternalFrame.JDesktopIcon getDesktopIcon()", "description": "Returns the JDesktopIcon used when this\n JInternalFrame is iconified."}, {"method_name": "getNormalBounds", "method_sig": "public Rectangle getNormalBounds()", "description": "If the JInternalFrame is not in maximized state, returns\n getBounds(); otherwise, returns the bounds that the\n JInternalFrame would be restored to."}, {"method_name": "setNormalBounds", "method_sig": "public void setNormalBounds (Rectangle r)", "description": "Sets the normal bounds for this internal frame, the bounds that\n this internal frame would be restored to from its maximized state.\n This method is intended for use only by desktop managers."}, {"method_name": "getFocusOwner", "method_sig": "public Component getFocusOwner()", "description": "If this JInternalFrame is active,\n returns the child that has focus.\n Otherwise, returns null."}, {"method_name": "getMostRecentFocusOwner", "method_sig": "@BeanProperty(bound=false)\npublic Component getMostRecentFocusOwner()", "description": "Returns the child component of this JInternalFrame\n that will receive the\n focus when this JInternalFrame is selected.\n If this JInternalFrame is\n currently selected, this method returns the same component as\n the getFocusOwner method.\n If this JInternalFrame is not selected,\n then the child component that most recently requested focus will be\n returned. If no child component has ever requested focus, then this\n JInternalFrame's initial focusable component is returned.\n If no such\n child exists, then this JInternalFrame's default component\n to focus is returned."}, {"method_name": "restoreSubcomponentFocus", "method_sig": "public void restoreSubcomponentFocus()", "description": "Requests the internal frame to restore focus to the\n last subcomponent that had focus. This is used by the UI when\n the user selected this internal frame --\n for example, by clicking on the title bar."}, {"method_name": "reshape", "method_sig": "public void reshape (int x,\n                    int y,\n                    int width,\n                    int height)", "description": "Moves and resizes this component.  Unlike other components,\n this implementation also forces re-layout, so that frame\n decorations such as the title bar are always redisplayed."}, {"method_name": "addInternalFrameListener", "method_sig": "public void addInternalFrameListener (InternalFrameListener l)", "description": "Adds the specified listener to receive internal\n frame events from this internal frame."}, {"method_name": "removeInternalFrameListener", "method_sig": "public void removeInternalFrameListener (InternalFrameListener l)", "description": "Removes the specified internal frame listener so that it no longer\n receives internal frame events from this internal frame."}, {"method_name": "getInternalFrameListeners", "method_sig": "@BeanProperty(bound=false)\npublic InternalFrameListener[] getInternalFrameListeners()", "description": "Returns an array of all the InternalFrameListeners added\n to this JInternalFrame with\n addInternalFrameListener."}, {"method_name": "fireInternalFrameEvent", "method_sig": "protected void fireInternalFrameEvent (int id)", "description": "Fires an internal frame event."}, {"method_name": "doDefaultCloseAction", "method_sig": "public void doDefaultCloseAction()", "description": "Fires an\n INTERNAL_FRAME_CLOSING event\n and then performs the action specified by\n the internal frame's default close operation.\n This method is typically invoked by the\n look-and-feel-implemented action handler\n for the internal frame's close button."}, {"method_name": "setDefaultCloseOperation", "method_sig": "public void setDefaultCloseOperation (int operation)", "description": "Sets the operation that will happen by default when\n the user initiates a \"close\" on this internal frame.\n The possible choices are:\n \n\nDO_NOTHING_ON_CLOSE\n Do nothing.\n      This requires the program to handle the operation\n      in the internalFrameClosing method\n      of a registered InternalFrameListener object.\n HIDE_ON_CLOSE\n Automatically make the internal frame invisible.\n DISPOSE_ON_CLOSE\n Automatically dispose of the internal frame.\n \n\n The default value is DISPOSE_ON_CLOSE.\n Before performing the specified close operation,\n the internal frame fires\n an INTERNAL_FRAME_CLOSING event."}, {"method_name": "getDefaultCloseOperation", "method_sig": "public int getDefaultCloseOperation()", "description": "Returns the default operation that occurs when the user\n initiates a \"close\" on this internal frame."}, {"method_name": "pack", "method_sig": "public void pack()", "description": "Causes subcomponents of this JInternalFrame\n to be laid out at their preferred size.  Internal frames that are\n iconized or maximized are first restored and then packed.  If the\n internal frame is unable to be restored its state is not changed\n and will not be packed."}, {"method_name": "show", "method_sig": "public void show()", "description": "If the internal frame is not visible,\n brings the internal frame to the front,\n makes it visible,\n and attempts to select it.\n The first time the internal frame is made visible,\n this method also fires an INTERNAL_FRAME_OPENED event.\n This method does nothing if the internal frame is already visible.\n Invoking this method\n has the same result as invoking\n setVisible(true)."}, {"method_name": "dispose", "method_sig": "public void dispose()", "description": "Makes this internal frame\n invisible, unselected, and closed.\n If the frame is not already closed,\n this method fires an\n INTERNAL_FRAME_CLOSED event.\n The results of invoking this method are similar to\n setClosed(true),\n but dispose always succeeds in closing\n the internal frame and does not fire\n an INTERNAL_FRAME_CLOSING event."}, {"method_name": "toFront", "method_sig": "public void toFront()", "description": "Brings this internal frame to the front.\n Places this internal frame  at the top of the stacking order\n and makes the corresponding adjustment to other visible internal\n frames."}, {"method_name": "toBack", "method_sig": "public void toBack()", "description": "Sends this internal frame to the back.\n Places this internal frame at the bottom of the stacking order\n and makes the corresponding adjustment to other visible\n internal frames."}, {"method_name": "setFocusCycleRoot", "method_sig": "public final void setFocusCycleRoot (boolean focusCycleRoot)", "description": "Does nothing because JInternalFrames must always be roots of a focus\n traversal cycle."}, {"method_name": "isFocusCycleRoot", "method_sig": "public final boolean isFocusCycleRoot()", "description": "Always returns true because all JInternalFrames must be\n roots of a focus traversal cycle."}, {"method_name": "getFocusCycleRootAncestor", "method_sig": "@BeanProperty(bound=false)\npublic final Container getFocusCycleRootAncestor()", "description": "Always returns null because JInternalFrames\n must always be roots of a focus\n traversal cycle."}, {"method_name": "getWarningString", "method_sig": "@BeanProperty(bound=false)\npublic final String getWarningString()", "description": "Gets the warning string that is displayed with this internal frame.\n Since an internal frame is always secure (since it's fully\n contained within a window that might need a warning string)\n this method always returns null."}, {"method_name": "paramString", "method_sig": "protected String paramString()", "description": "Returns a string representation of this JInternalFrame.\n This method\n is intended to be used only for debugging purposes, and the\n content and format of the returned string may vary between\n implementations. The returned string may be empty but may not\n be null."}, {"method_name": "paintComponent", "method_sig": "protected void paintComponent (Graphics g)", "description": "Overridden to allow optimized painting when the\n internal frame is being dragged."}, {"method_name": "getAccessibleContext", "method_sig": "@BeanProperty(bound=false)\npublic AccessibleContext getAccessibleContext()", "description": "Gets the AccessibleContext associated with this\n JInternalFrame.\n For internal frames, the AccessibleContext\n takes the form of an\n AccessibleJInternalFrame object.\n A new AccessibleJInternalFrame instance is created if necessary."}]}