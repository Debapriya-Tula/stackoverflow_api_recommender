{"name": "Class CollationKey", "module": "java.base", "package": "java.text", "text": "A CollationKey represents a String under the\n rules of a specific Collator object. Comparing two\n CollationKeys returns the relative order of the\n Strings they represent. Using CollationKeys\n to compare Strings is generally faster than using\n Collator.compare. Thus, when the Strings\n must be compared multiple times, for example when sorting a list\n of Strings. It's more efficient to use CollationKeys.\n\n \n You can not create CollationKeys directly. Rather,\n generate them by calling Collator.getCollationKey.\n You can only compare CollationKeys generated from\n the same Collator object.\n\n \n Generating a CollationKey for a String\n involves examining the entire String\n and converting it to series of bits that can be compared bitwise. This\n allows fast comparisons once the keys are generated. The cost of generating\n keys is recouped in faster comparisons when Strings need\n to be compared many times. On the other hand, the result of a comparison\n is often determined by the first couple of characters of each String.\n Collator.compare examines only as many characters as it needs which\n allows it to be faster when doing single comparisons.\n \n The following example shows how CollationKeys might be used\n to sort a list of Strings.\n \n\n // Create an array of CollationKeys for the Strings to be sorted.\n Collator myCollator = Collator.getInstance();\n CollationKey[] keys = new CollationKey[3];\n keys[0] = myCollator.getCollationKey(\"Tom\");\n keys[1] = myCollator.getCollationKey(\"Dick\");\n keys[2] = myCollator.getCollationKey(\"Harry\");\n sort(keys);\n\n //...\n\n // Inside body of sort routine, compare keys this way\n if (keys[i].compareTo(keys[j]) > 0)\n    // swap keys[i] and keys[j]\n\n //...\n\n // Finally, when we've returned from sort.\n System.out.println(keys[0].getSourceString());\n System.out.println(keys[1].getSourceString());\n System.out.println(keys[2].getSourceString());\n \n", "codes": ["public abstract class CollationKey\nextends Object\nimplements Comparable<CollationKey>"], "fields": [], "methods": [{"method_name": "compareTo", "method_sig": "public abstract int compareTo (CollationKey target)", "description": "Compare this CollationKey to the target CollationKey. The collation rules of the\n Collator object which created these keys are applied. Note:\n CollationKeys created by different Collators can not be compared."}, {"method_name": "getSourceString", "method_sig": "public String getSourceString()", "description": "Returns the String that this CollationKey represents."}, {"method_name": "toByteArray", "method_sig": "public abstract byte[] toByteArray()", "description": "Converts the CollationKey to a sequence of bits. If two CollationKeys\n could be legitimately compared, then one could compare the byte arrays\n for each of those keys to obtain the same result.  Byte arrays are\n organized most significant byte first."}]}