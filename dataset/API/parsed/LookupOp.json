{"name": "Class LookupOp", "module": "java.desktop", "package": "java.awt.image", "text": "This class implements a lookup operation from the source\n to the destination.  The LookupTable object may contain a single array\n or multiple arrays, subject to the restrictions below.\n \n For Rasters, the lookup operates on bands.  The number of\n lookup arrays may be one, in which case the same array is\n applied to all bands, or it must equal the number of Source\n Raster bands.\n \n For BufferedImages, the lookup operates on color and alpha components.\n The number of lookup arrays may be one, in which case the\n same array is applied to all color (but not alpha) components.\n Otherwise, the number of lookup arrays may\n equal the number of Source color components, in which case no\n lookup of the alpha component (if present) is performed.\n If neither of these cases apply, the number of lookup arrays\n must equal the number of Source color components plus alpha components,\n in which case lookup is performed for all color and alpha components.\n This allows non-uniform rescaling of multi-band BufferedImages.\n \n BufferedImage sources with premultiplied alpha data are treated in the same\n manner as non-premultiplied images for purposes of the lookup.  That is,\n the lookup is done per band on the raw data of the BufferedImage source\n without regard to whether the data is premultiplied.  If a color conversion\n is required to the destination ColorModel, the premultiplied state of\n both source and destination will be taken into account for this step.\n \n Images with an IndexColorModel cannot be used.\n \n If a RenderingHints object is specified in the constructor, the\n color rendering hint and the dithering hint may be used when color\n conversion is required.\n \n This class allows the Source to be the same as the Destination.", "codes": ["public class LookupOp\nextends Object\nimplements BufferedImageOp, RasterOp"], "fields": [], "methods": [{"method_name": "getTable", "method_sig": "public final LookupTable getTable()", "description": "Returns the LookupTable."}, {"method_name": "filter", "method_sig": "public final BufferedImage filter (BufferedImage src,\n                                  BufferedImage dst)", "description": "Performs a lookup operation on a BufferedImage.\n If the color model in the source image is not the same as that\n in the destination image, the pixels will be converted\n in the destination.  If the destination image is null,\n a BufferedImage will be created with an appropriate\n ColorModel.  An IllegalArgumentException\n might be thrown if the number of arrays in the\n LookupTable does not meet the restrictions\n stated in the class comment above, or if the source image\n has an IndexColorModel."}, {"method_name": "filter", "method_sig": "public final WritableRaster filter (Raster src,\n                                   WritableRaster dst)", "description": "Performs a lookup operation on a Raster.\n If the destination Raster is null,\n a new Raster will be created.\n The IllegalArgumentException might be thrown\n if the source Raster and the destination\n Raster do not have the same\n number of bands or if the number of arrays in the\n LookupTable does not meet the\n restrictions stated in the class comment above."}, {"method_name": "getBounds2D", "method_sig": "public final Rectangle2D getBounds2D (BufferedImage src)", "description": "Returns the bounding box of the filtered destination image.  Since\n this is not a geometric operation, the bounding box does not\n change."}, {"method_name": "getBounds2D", "method_sig": "public final Rectangle2D getBounds2D (Raster src)", "description": "Returns the bounding box of the filtered destination Raster.  Since\n this is not a geometric operation, the bounding box does not\n change."}, {"method_name": "createCompatibleDestImage", "method_sig": "public BufferedImage createCompatibleDestImage (BufferedImage src,\n                                               ColorModel destCM)", "description": "Creates a zeroed destination image with the correct size and number of\n bands.  If destCM is null, an appropriate\n ColorModel will be used."}, {"method_name": "createCompatibleDestRaster", "method_sig": "public WritableRaster createCompatibleDestRaster (Raster src)", "description": "Creates a zeroed-destination Raster with the\n correct size and number of bands, given this source."}, {"method_name": "getPoint2D", "method_sig": "public final Point2D getPoint2D (Point2D srcPt,\n                                Point2D dstPt)", "description": "Returns the location of the destination point given a\n point in the source.  If dstPt is not\n null, it will be used to hold the return value.\n Since this is not a geometric operation, the srcPt\n will equal the dstPt."}, {"method_name": "getRenderingHints", "method_sig": "public final RenderingHints getRenderingHints()", "description": "Returns the rendering hints for this op."}]}