{"name": "Class Parameter", "module": "java.base", "package": "java.lang.reflect", "text": "Information about method parameters.\n\n A Parameter provides information about method parameters,\n including its name and modifiers.  It also provides an alternate\n means of obtaining attributes for the parameter.", "codes": ["public final class Parameter\nextends Object\nimplements AnnotatedElement"], "fields": [], "methods": [{"method_name": "equals", "method_sig": "public boolean equals (Object obj)", "description": "Compares based on the executable and the index."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Returns a hash code based on the executable's hash code and the\n index."}, {"method_name": "isNamePresent", "method_sig": "public boolean isNamePresent()", "description": "Returns true if the parameter has a name according to the class\n file; returns false otherwise. Whether a parameter has a name\n is determined by the MethodParameters attribute of\n the method which declares the parameter."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a string describing this parameter.  The format is the\n modifiers for the parameter, if any, in canonical order as\n recommended by The Java\u2122 Language\n Specification, followed by the fully- qualified type of\n the parameter (excluding the last [] if the parameter is\n variable arity), followed by \"...\" if the parameter is variable\n arity, followed by a space, followed by the name of the\n parameter."}, {"method_name": "getDeclaringExecutable", "method_sig": "public Executable getDeclaringExecutable()", "description": "Return the Executable which declares this parameter."}, {"method_name": "getModifiers", "method_sig": "public int getModifiers()", "description": "Get the modifier flags for this the parameter represented by\n this Parameter object."}, {"method_name": "getName", "method_sig": "public String getName()", "description": "Returns the name of the parameter.  If the parameter's name is\n present, then this method returns\n the name provided by the class file. Otherwise, this method\n synthesizes a name of the form argN, where N is the index of\n the parameter in the descriptor of the method which declares\n the parameter."}, {"method_name": "getParameterizedType", "method_sig": "public Type getParameterizedType()", "description": "Returns a Type object that identifies the parameterized\n type for the parameter represented by this Parameter\n object."}, {"method_name": "getType", "method_sig": "public Class<?> getType()", "description": "Returns a Class object that identifies the\n declared type for the parameter represented by this\n Parameter object."}, {"method_name": "getAnnotatedType", "method_sig": "public AnnotatedType getAnnotatedType()", "description": "Returns an AnnotatedType object that represents the use of a type to\n specify the type of the formal parameter represented by this Parameter."}, {"method_name": "isImplicit", "method_sig": "public boolean isImplicit()", "description": "Returns true if this parameter is implicitly declared\n in source code; returns false otherwise."}, {"method_name": "isSynthetic", "method_sig": "public boolean isSynthetic()", "description": "Returns true if this parameter is neither implicitly\n nor explicitly declared in source code; returns false\n otherwise."}, {"method_name": "isVarArgs", "method_sig": "public boolean isVarArgs()", "description": "Returns true if this parameter represents a variable\n argument list; returns false otherwise."}, {"method_name": "getAnnotation", "method_sig": "public <T extends Annotation> T getAnnotation (Class<T> annotationClass)", "description": "Returns this element's annotation for the specified type if\n such an annotation is present, else null."}, {"method_name": "getAnnotationsByType", "method_sig": "public <T extends Annotation> T[] getAnnotationsByType (Class<T> annotationClass)", "description": "Returns annotations that are associated with this element.\n\n If there are no annotations associated with this element, the return\n value is an array of length 0.\n\n The difference between this method and AnnotatedElement.getAnnotation(Class)\n is that this method detects if its argument is a repeatable\n annotation type (JLS 9.6), and if so, attempts to find one or\n more annotations of that type by \"looking through\" a container\n annotation.\n\n The caller of this method is free to modify the returned array; it will\n have no effect on the arrays returned to other callers."}, {"method_name": "getDeclaredAnnotation", "method_sig": "public <T extends Annotation> T getDeclaredAnnotation (Class<T> annotationClass)", "description": "Description copied from interface:\u00a0AnnotatedElement"}, {"method_name": "getDeclaredAnnotationsByType", "method_sig": "public <T extends Annotation> T[] getDeclaredAnnotationsByType (Class<T> annotationClass)", "description": "Description copied from interface:\u00a0AnnotatedElement"}]}