{"name": "Class DrbgParameters", "module": "java.base", "package": "java.security", "text": "This class specifies the parameters used by a DRBG (Deterministic\n Random Bit Generator).\n \n According to\n \n NIST Special Publication 800-90A Revision 1, Recommendation for Random\n Number Generation Using Deterministic Random Bit Generators (800-90Ar1),\n \n A DRBG is based on a DRBG mechanism as specified in this Recommendation\n and includes a source of randomness. A DRBG mechanism uses an algorithm\n (i.e., a DRBG algorithm) that produces a sequence of bits from an initial\n value that is determined by a seed that is determined from the output of\n the randomness source.\"\n \n\n The 800-90Ar1 specification allows for a variety of DRBG implementation\n choices, such as:\n \n an entropy source,\n  a DRBG mechanism (for example, Hash_DRBG),\n  a DRBG algorithm (for example, SHA-256 for Hash_DRBG and AES-256\n for CTR_DRBG. Please note that it is not the algorithm used in\n SecureRandom.getInstance(java.lang.String), which we will call a\n SecureRandom algorithm below),\n  optional features, including prediction resistance\n and reseeding supports,\n  highest security strength.\n \n\n These choices are set in each implementation and are not directly\n managed by the SecureRandom API.  Check your DRBG provider's\n documentation to find an appropriate implementation for the situation.\n \n On the other hand, the 800-90Ar1 specification does have some configurable\n options, such as:\n \n required security strength,\n  if prediction resistance is required,\n  personalization string and additional input.\n \n\n A DRBG instance can be instantiated with parameters from an\n DrbgParameters.Instantiation object and other information\n (for example, the nonce, which is not managed by this API). This maps\n to the Instantiate_function defined in NIST SP 800-90Ar1.\n \n A DRBG instance can be reseeded with parameters from a\n DrbgParameters.Reseed object. This maps to the\n Reseed_function defined in NIST SP 800-90Ar1. Calling\n SecureRandom.reseed() is equivalent to calling\n SecureRandom.reseed(SecureRandomParameters) with the effective\n instantiated prediction resistance flag (as returned by\n SecureRandom.getParameters()) with no additional input.\n \n A DRBG instance generates data with additional parameters from a\n DrbgParameters.NextBytes object. This maps to the\n Generate_function defined in NIST SP 800-90Ar1. Calling\n SecureRandom.nextBytes(byte[]) is equivalent to calling\n SecureRandom.nextBytes(byte[], SecureRandomParameters)\n with the effective instantiated strength and prediction resistance flag\n (as returned by SecureRandom.getParameters()) with no\n additional input.\n \n A DRBG should be implemented as a subclass of SecureRandomSpi.\n It is recommended that the implementation contain the 1-arg\n constructor\n that takes a DrbgParameters.Instantiation argument. If implemented\n this way, this implementation can be chosen by any\n SecureRandom.getInstance() method. If it is chosen by a\n SecureRandom.getInstance() with a SecureRandomParameters\n parameter, the parameter is passed into this constructor. If it is chosen\n by a SecureRandom.getInstance() without a\n SecureRandomParameters parameter, the constructor is called with\n a null argument and the implementation should choose its own\n parameters. Its SecureRandom.getParameters() must always return a\n non-null effective DrbgParameters.Instantiation object that reflects\n how the DRBG is actually instantiated. A caller can use this information\n to determine whether a SecureRandom object is a DRBG and what\n features it supports. Please note that the returned value does not\n necessarily equal to the DrbgParameters.Instantiation object passed\n into the SecureRandom.getInstance() call. For example,\n the requested capability can be DrbgParameters.Capability.NONE\n but the effective value can be DrbgParameters.Capability.RESEED_ONLY\n if the implementation supports reseeding. The implementation must implement\n the SecureRandomSpi.engineNextBytes(byte[], SecureRandomParameters)\n method which takes a DrbgParameters.NextBytes parameter. Unless\n the result of SecureRandom.getParameters() has its\n capability being\n NONE, it must implement\n SecureRandomSpi.engineReseed(SecureRandomParameters) which takes\n a DrbgParameters.Reseed parameter.\n \n On the other hand, if a DRBG implementation does not contain a constructor\n that has an DrbgParameters.Instantiation argument (not recommended),\n it can only be chosen by a SecureRandom.getInstance() without\n a SecureRandomParameters parameter, but will not be chosen if\n a getInstance method with a SecureRandomParameters parameter\n is called. If implemented this way, its SecureRandom.getParameters()\n must return null, and it does not need to implement either\n SecureRandomSpi.engineNextBytes(byte[], SecureRandomParameters)\n or SecureRandomSpi.engineReseed(SecureRandomParameters).\n \n A DRBG might reseed itself automatically if the seed period is bigger\n than the maximum seed life defined by the DRBG mechanism.\n \n A DRBG implementation should support serialization and deserialization\n by retaining the configuration and effective parameters, but the internal\n state must not be serialized and the deserialized object must be\n reinstantiated.\n \n Examples:\n \n SecureRandom drbg;\n byte[] buffer = new byte[32];\n\n // Any DRBG is OK\n drbg = SecureRandom.getInstance(\"DRBG\");\n drbg.nextBytes(buffer);\n\n SecureRandomParameters params = drbg.getParameters();\n if (params instanceof DrbgParameters.Instantiation) {\n     DrbgParameters.Instantiation ins = (DrbgParameters.Instantiation) params;\n     if (ins.getCapability().supportsReseeding()) {\n         drbg.reseed();\n     }\n }\n\n // The following call requests a weak DRBG instance. It is only\n // guaranteed to support 112 bits of security strength.\n drbg = SecureRandom.getInstance(\"DRBG\",\n         DrbgParameters.instantiation(112, NONE, null));\n\n // Both the next two calls will likely fail, because drbg could be\n // instantiated with a smaller strength with no prediction resistance\n // support.\n drbg.nextBytes(buffer,\n         DrbgParameters.nextBytes(256, false, \"more\".getBytes()));\n drbg.nextBytes(buffer,\n         DrbgParameters.nextBytes(112, true, \"more\".getBytes()));\n\n // The following call requests a strong DRBG instance, with a\n // personalization string. If it successfully returns an instance,\n // that instance is guaranteed to support 256 bits of security strength\n // with prediction resistance available.\n drbg = SecureRandom.getInstance(\"DRBG\", DrbgParameters.instantiation(\n         256, PR_AND_RESEED, \"hello\".getBytes()));\n\n // Prediction resistance is not requested in this single call,\n // but an additional input is used.\n drbg.nextBytes(buffer,\n         DrbgParameters.nextBytes(-1, false, \"more\".getBytes()));\n\n // Same for this call.\n drbg.reseed(DrbgParameters.reseed(false, \"extra\".getBytes()));\n", "codes": ["public class DrbgParameters\nextends Object"], "fields": [], "methods": [{"method_name": "instantiation", "method_sig": "public static DrbgParameters.Instantiation instantiation (int strength,\n                                                         DrbgParameters.Capability capability,\n                                                         byte[] personalizationString)", "description": "Generates a DrbgParameters.Instantiation object."}, {"method_name": "nextBytes", "method_sig": "public static DrbgParameters.NextBytes nextBytes (int strength,\n                                                 boolean predictionResistance,\n                                                 byte[] additionalInput)", "description": "Generates a DrbgParameters.NextBytes object."}, {"method_name": "reseed", "method_sig": "public static DrbgParameters.Reseed reseed (boolean predictionResistance,\n                                           byte[] additionalInput)", "description": "Generates a DrbgParameters.Reseed object."}]}