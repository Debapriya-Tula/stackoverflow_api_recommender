{"name": "Class AbstractList<E>", "module": "java.base", "package": "java.util", "text": "This class provides a skeletal implementation of the List\n interface to minimize the effort required to implement this interface\n backed by a \"random access\" data store (such as an array).  For sequential\n access data (such as a linked list), AbstractSequentialList should\n be used in preference to this class.\n\n To implement an unmodifiable list, the programmer needs only to extend\n this class and provide implementations for the get(int) and\n size() methods.\n\n To implement a modifiable list, the programmer must additionally\n override the set(int, E) method (which otherwise\n throws an UnsupportedOperationException).  If the list is\n variable-size the programmer must additionally override the\n add(int, E) and remove(int) methods.\n\n The programmer should generally provide a void (no argument) and collection\n constructor, as per the recommendation in the Collection interface\n specification.\n\n Unlike the other abstract collection implementations, the programmer does\n not have to provide an iterator implementation; the iterator and\n list iterator are implemented by this class, on top of the \"random access\"\n methods:\n get(int),\n set(int, E),\n add(int, E) and\n remove(int).\n\n The documentation for each non-abstract method in this class describes its\n implementation in detail.  Each of these methods may be overridden if the\n collection being implemented admits a more efficient implementation.\n\n This class is a member of the\n \n Java Collections Framework.", "codes": ["public abstract class AbstractList<E>\nextends AbstractCollection<E>\nimplements List<E>"], "fields": [{"field_name": "modCount", "field_sig": "protected transient\u00a0int modCount", "description": "The number of times this list has been structurally modified.\n Structural modifications are those that change the size of the\n list, or otherwise perturb it in such a fashion that iterations in\n progress may yield incorrect results.\n\n This field is used by the iterator and list iterator implementation\n returned by the iterator and listIterator methods.\n If the value of this field changes unexpectedly, the iterator (or list\n iterator) will throw a ConcurrentModificationException in\n response to the next, remove, previous,\n set or add operations.  This provides\n fail-fast behavior, rather than non-deterministic behavior in\n the face of concurrent modification during iteration.\n\n Use of this field by subclasses is optional. If a subclass\n wishes to provide fail-fast iterators (and list iterators), then it\n merely has to increment this field in its add(int, E) and\n remove(int) methods (and any other methods that it overrides\n that result in structural modifications to the list).  A single call to\n add(int, E) or remove(int) must add no more than\n one to this field, or the iterators (and list iterators) will throw\n bogus ConcurrentModificationExceptions.  If an implementation\n does not wish to provide fail-fast iterators, this field may be\n ignored."}], "methods": [{"method_name": "add", "method_sig": "public boolean add (E e)", "description": "Appends the specified element to the end of this list (optional\n operation).\n\n Lists that support this operation may place limitations on what\n elements may be added to this list.  In particular, some\n lists will refuse to add null elements, and others will impose\n restrictions on the type of elements that may be added.  List\n classes should clearly specify in their documentation any restrictions\n on what elements may be added."}, {"method_name": "get", "method_sig": "public abstract E get (int index)", "description": "Returns the element at the specified position in this list."}, {"method_name": "set", "method_sig": "public E set (int index,\n             E element)", "description": "Replaces the element at the specified position in this list with the\n specified element (optional operation)."}, {"method_name": "add", "method_sig": "public void add (int index,\n                E element)", "description": "Inserts the specified element at the specified position in this list\n (optional operation).  Shifts the element currently at that position\n (if any) and any subsequent elements to the right (adds one to their\n indices)."}, {"method_name": "remove", "method_sig": "public E remove (int index)", "description": "Removes the element at the specified position in this list (optional\n operation).  Shifts any subsequent elements to the left (subtracts one\n from their indices).  Returns the element that was removed from the\n list."}, {"method_name": "indexOf", "method_sig": "public int indexOf (Object o)", "description": "Returns the index of the first occurrence of the specified element\n in this list, or -1 if this list does not contain the element.\n More formally, returns the lowest index i such that\n Objects.equals(o, get(i)),\n or -1 if there is no such index."}, {"method_name": "lastIndexOf", "method_sig": "public int lastIndexOf (Object o)", "description": "Returns the index of the last occurrence of the specified element\n in this list, or -1 if this list does not contain the element.\n More formally, returns the highest index i such that\n Objects.equals(o, get(i)),\n or -1 if there is no such index."}, {"method_name": "clear", "method_sig": "public void clear()", "description": "Removes all of the elements from this list (optional operation).\n The list will be empty after this call returns."}, {"method_name": "addAll", "method_sig": "public boolean addAll (int index,\n                      Collection<? extends E> c)", "description": "Inserts all of the elements in the specified collection into this\n list at the specified position (optional operation).  Shifts the\n element currently at that position (if any) and any subsequent\n elements to the right (increases their indices).  The new elements\n will appear in this list in the order that they are returned by the\n specified collection's iterator.  The behavior of this operation is\n undefined if the specified collection is modified while the\n operation is in progress.  (Note that this will occur if the specified\n collection is this list, and it's nonempty.)"}, {"method_name": "iterator", "method_sig": "public Iterator<E> iterator()", "description": "Returns an iterator over the elements in this list in proper sequence."}, {"method_name": "listIterator", "method_sig": "public ListIterator<E> listIterator()", "description": "Returns a list iterator over the elements in this list (in proper\n sequence)."}, {"method_name": "listIterator", "method_sig": "public ListIterator<E> listIterator (int index)", "description": "Returns a list iterator over the elements in this list (in proper\n sequence), starting at the specified position in the list.\n The specified index indicates the first element that would be\n returned by an initial call to next.\n An initial call to previous would\n return the element with the specified index minus one."}, {"method_name": "subList", "method_sig": "public List<E> subList (int fromIndex,\n                       int toIndex)", "description": "Returns a view of the portion of this list between the specified\n fromIndex, inclusive, and toIndex, exclusive.  (If\n fromIndex and toIndex are equal, the returned list is\n empty.)  The returned list is backed by this list, so non-structural\n changes in the returned list are reflected in this list, and vice-versa.\n The returned list supports all of the optional list operations supported\n by this list.\n\n This method eliminates the need for explicit range operations (of\n the sort that commonly exist for arrays).  Any operation that expects\n a list can be used as a range operation by passing a subList view\n instead of a whole list.  For example, the following idiom\n removes a range of elements from a list:\n \n      list.subList(from, to).clear();\n \n Similar idioms may be constructed for indexOf and\n lastIndexOf, and all of the algorithms in the\n Collections class can be applied to a subList.\n\n The semantics of the list returned by this method become undefined if\n the backing list (i.e., this list) is structurally modified in\n any way other than via the returned list.  (Structural modifications are\n those that change the size of this list, or otherwise perturb it in such\n a fashion that iterations in progress may yield incorrect results.)"}, {"method_name": "equals", "method_sig": "public boolean equals (Object o)", "description": "Compares the specified object with this list for equality.  Returns\n true if and only if the specified object is also a list, both\n lists have the same size, and all corresponding pairs of elements in\n the two lists are equal.  (Two elements e1 and\n e2 are equal if (e1==null ? e2==null :\n e1.equals(e2)).)  In other words, two lists are defined to be\n equal if they contain the same elements in the same order."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Returns the hash code value for this list."}, {"method_name": "removeRange", "method_sig": "protected void removeRange (int fromIndex,\n                           int toIndex)", "description": "Removes from this list all of the elements whose index is between\n fromIndex, inclusive, and toIndex, exclusive.\n Shifts any succeeding elements to the left (reduces their index).\n This call shortens the list by (toIndex - fromIndex) elements.\n (If toIndex==fromIndex, this operation has no effect.)\n\n This method is called by the clear operation on this list\n and its subLists.  Overriding this method to take advantage of\n the internals of the list implementation can substantially\n improve the performance of the clear operation on this list\n and its subLists."}]}