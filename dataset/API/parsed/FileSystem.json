{"name": "Class FileSystem", "module": "java.base", "package": "java.nio.file", "text": "Provides an interface to a file system and is the factory for objects to\n access files and other objects in the file system.\n\n  The default file system, obtained by invoking the FileSystems.getDefault method, provides access to the file system that is\n accessible to the Java virtual machine. The FileSystems class defines\n methods to create file systems that provide access to other types of (custom)\n file systems.\n\n  A file system is the factory for several types of objects:\n\n \n The getPath method converts a system dependent\n     path string, returning a Path object that may be used\n     to locate and access a file. \n The getPathMatcher method is used\n     to create a PathMatcher that performs match operations on\n     paths. \n The getFileStores method returns an iterator\n     over the underlying file-stores. \n The getUserPrincipalLookupService\n     method returns the UserPrincipalLookupService to lookup users or\n     groups by name. \n The newWatchService method creates a\n     WatchService that may be used to watch objects for changes and\n     events. \n\n File systems vary greatly. In some cases the file system is a single\n hierarchy of files with one top-level root directory. In other cases it may\n have several distinct file hierarchies, each with its own top-level root\n directory. The getRootDirectories method may be\n used to iterate over the root directories in the file system. A file system\n is typically composed of one or more underlying file-stores\n that provide the storage for the files. Theses file stores can also vary in\n the features they support, and the file attributes or meta-data that\n they associate with files.\n\n  A file system is open upon creation and can be closed by invoking its\n close method. Once closed, any further attempt to access\n objects in the file system cause ClosedFileSystemException to be\n thrown. File systems created by the default provider\n cannot be closed.\n\n  A FileSystem can provide read-only or read-write access to the\n file system. Whether or not a file system provides read-only access is\n established when the FileSystem is created and can be tested by invoking\n its isReadOnly method. Attempts to write to file stores\n by means of an object associated with a read-only file system throws ReadOnlyFileSystemException.\n\n  File systems are safe for use by multiple concurrent threads. The close method may be invoked at any time to close a file system but\n whether a file system is asynchronously closeable is provider specific\n and therefore unspecified. In other words, if a thread is accessing an\n object in a file system, and another thread invokes the close method\n then it may require to block until the first operation is complete. Closing\n a file system causes all open channels, watch services, and other closeable objects associated with the file system to be closed.", "codes": ["public abstract class FileSystem\nextends Object\nimplements Closeable"], "fields": [], "methods": [{"method_name": "provider", "method_sig": "public abstract FileSystemProvider provider()", "description": "Returns the provider that created this file system."}, {"method_name": "close", "method_sig": "public abstract void close()\n                    throws IOException", "description": "Closes this file system.\n\n  After a file system is closed then all subsequent access to the file\n system, either by methods defined by this class or on objects associated\n with this file system, throw ClosedFileSystemException. If the\n file system is already closed then invoking this method has no effect.\n\n  Closing a file system will close all open channels, directory-streams,\n watch-service, and other closeable objects associated\n with this file system. The default file\n system cannot be closed."}, {"method_name": "isOpen", "method_sig": "public abstract boolean isOpen()", "description": "Tells whether or not this file system is open.\n\n  File systems created by the default provider are always open."}, {"method_name": "isReadOnly", "method_sig": "public abstract boolean isReadOnly()", "description": "Tells whether or not this file system allows only read-only access to\n its file stores."}, {"method_name": "getSeparator", "method_sig": "public abstract String getSeparator()", "description": "Returns the name separator, represented as a string.\n\n  The name separator is used to separate names in a path string. An\n implementation may support multiple name separators in which case this\n method returns an implementation specific default name separator.\n This separator is used when creating path strings by invoking the toString() method.\n\n  In the case of the default provider, this method returns the same\n separator as File.separator."}, {"method_name": "getRootDirectories", "method_sig": "public abstract Iterable<Path> getRootDirectories()", "description": "Returns an object to iterate over the paths of the root directories.\n\n  A file system provides access to a file store that may be composed\n of a number of distinct file hierarchies, each with its own top-level\n root directory. Unless denied by the security manager, each element in\n the returned iterator corresponds to the root directory of a distinct\n file hierarchy. The order of the elements is not defined. The file\n hierarchies may change during the lifetime of the Java virtual machine.\n For example, in some implementations, the insertion of removable media\n may result in the creation of a new file hierarchy with its own\n top-level directory.\n\n  When a security manager is installed, it is invoked to check access\n to the each root directory. If denied, the root directory is not returned\n by the iterator. In the case of the default provider, the SecurityManager.checkRead(String) method is invoked to check read access\n to each root directory. It is system dependent if the permission checks\n are done when the iterator is obtained or during iteration."}, {"method_name": "getFileStores", "method_sig": "public abstract Iterable<FileStore> getFileStores()", "description": "Returns an object to iterate over the underlying file stores.\n\n  The elements of the returned iterator are the FileStores for this file system. The order of the elements is\n not defined and the file stores may change during the lifetime of the\n Java virtual machine. When an I/O error occurs, perhaps because a file\n store is not accessible, then it is not returned by the iterator.\n\n  In the case of the default provider, and a security manager is\n installed, the security manager is invoked to check RuntimePermission(\"getFileStoreAttributes\"). If denied, then\n no file stores are returned by the iterator. In addition, the security\n manager's SecurityManager.checkRead(String) method is invoked to\n check read access to the file store's top-most directory. If\n denied, the file store is not returned by the iterator. It is system\n dependent if the permission checks are done when the iterator is obtained\n or during iteration.\n\n  Usage Example:\n Suppose we want to print the space usage for all file stores:\n \n     for (FileStore store: FileSystems.getDefault().getFileStores()) {\n         long total = store.getTotalSpace() / 1024;\n         long used = (store.getTotalSpace() - store.getUnallocatedSpace()) / 1024;\n         long avail = store.getUsableSpace() / 1024;\n         System.out.format(\"%-20s %12d %12d %12d%n\", store, total, used, avail);\n     }\n "}, {"method_name": "supportedFileAttributeViews", "method_sig": "public abstract Set<String> supportedFileAttributeViews()", "description": "Returns the set of the names of the file\n attribute views supported by this FileSystem.\n\n  The BasicFileAttributeView is required to be supported and\n therefore the set contains at least one element, \"basic\".\n\n  The supportsFileAttributeView(String) method may be used to test if an\n underlying FileStore supports the file attributes identified by a\n file attribute view."}, {"method_name": "getPath", "method_sig": "public abstract Path getPath (String first,\n                             String... more)", "description": "Converts a path string, or a sequence of strings that when joined form\n a path string, to a Path. If more does not specify any\n elements then the value of the first parameter is the path string\n to convert. If more specifies one or more elements then each\n non-empty string, including first, is considered to be a sequence\n of name elements (see Path) and is joined to form a path string.\n The details as to how the Strings are joined is provider specific but\n typically they will be joined using the name-separator as the separator. For example, if the name separator is\n \"/\" and getPath(\"/foo\",\"bar\",\"gus\") is invoked, then the\n path string \"/foo/bar/gus\" is converted to a Path.\n A Path representing an empty path is returned if first\n is the empty string and more does not contain any non-empty\n strings.\n\n  The parsing and conversion to a path object is inherently\n implementation dependent. In the simplest case, the path string is rejected,\n and InvalidPathException thrown, if the path string contains\n characters that cannot be converted to characters that are legal\n to the file store. For example, on UNIX systems, the NUL (\\u0000)\n character is not allowed to be present in a path. An implementation may\n choose to reject path strings that contain names that are longer than those\n allowed by any file store, and where an implementation supports a complex\n path syntax, it may choose to reject path strings that are badly\n formed.\n\n  In the case of the default provider, path strings are parsed based\n on the definition of paths at the platform or virtual file system level.\n For example, an operating system may not allow specific characters to be\n present in a file name, but a specific underlying file store may impose\n different or additional restrictions on the set of legal\n characters.\n\n  This method throws InvalidPathException when the path string\n cannot be converted to a path. Where possible, and where applicable,\n the exception is created with an index value indicating the first position in the path parameter\n that caused the path string to be rejected."}, {"method_name": "getPathMatcher", "method_sig": "public abstract PathMatcher getPathMatcher (String syntaxAndPattern)", "description": "Returns a PathMatcher that performs match operations on the\n String representation of Path objects by interpreting a\n given pattern.\n\n The syntaxAndPattern parameter identifies the syntax and the\n pattern and takes the form:\n \n syntax:pattern\n \n where ':' stands for itself.\n\n  A FileSystem implementation supports the \"glob\" and\n \"regex\" syntaxes, and may support others. The value of the syntax\n component is compared without regard to case.\n\n  When the syntax is \"glob\" then the String\n representation of the path is matched using a limited pattern language\n that resembles regular expressions but with a simpler syntax. For example:\n\n \nPattern Language\n\n\nExample\n   Description\n \n\n\n\n*.java\nMatches a path that represents a file name ending in .java\n\n\n*.*\nMatches file names containing a dot\n\n\n*.{java,class}\nMatches file names ending with .java or .class\n\n\nfoo.?\nMatches file names starting with foo. and a single\n   character extension\n\n\n/home/*/*\nMatches /home/gus/data on UNIX platforms\n\n\n/home/**\nMatches /home/gus and\n   /home/gus/data on UNIX platforms\n\n\nC:\\\\*\nMatches C:\\foo and C:\\bar on the Windows\n   platform (note that the backslash is escaped; as a string literal in the\n   Java Language the pattern would be \"C:\\\\\\\\*\") \n\n\n\n The following rules are used to interpret glob patterns:\n\n \n The * character matches zero or more characters of a name component without\n   crossing directory boundaries. \n The ** characters matches zero or more characters crossing directory boundaries. \n The ? character matches exactly one character of a\n   name component.\n The backslash character (\\) is used to escape characters\n   that would otherwise be interpreted as special characters. The expression\n   \\\\ matches a single backslash and \"\\{\" matches a left brace\n   for example.  \n The [ ] characters are a bracket expression that\n   match a single character of a name component out of a set of characters.\n   For example, [abc] matches \"a\", \"b\", or \"c\".\n   The hyphen (-) may be used to specify a range so [a-z]\n   specifies a range that matches from \"a\" to \"z\" (inclusive).\n   These forms can be mixed so [abce-g] matches \"a\", \"b\",\n   \"c\", \"e\", \"f\" or \"g\". If the character\n   after the [ is a ! then it is used for negation so \n   [!a-c] matches any character except \"a\", \"b\", or \n   \"c\".\n    Within a bracket expression the *, ? and \\\n   characters match themselves. The (-) character matches itself if\n   it is the first character within the brackets, or the first character\n   after the ! if negating.\n The { } characters are a group of subpatterns, where\n   the group matches if any subpattern in the group matches. The \",\"\n   character is used to separate the subpatterns. Groups cannot be nested.\n   \n Leading period/dot characters in file name are\n   treated as regular characters in match operations. For example,\n   the \"*\" glob pattern matches file name \".login\".\n   The Files.isHidden(java.nio.file.Path) method may be used to test whether a file\n   is considered hidden.\n   \n All other characters match themselves in an implementation\n   dependent manner. This includes characters representing any name-separators. \n The matching of root components is highly\n   implementation-dependent and is not specified. \n\n When the syntax is \"regex\" then the pattern component is a\n regular expression as defined by the Pattern\n class.\n\n   For both the glob and regex syntaxes, the matching details, such as\n whether the matching is case sensitive, are implementation-dependent\n and therefore not specified."}, {"method_name": "getUserPrincipalLookupService", "method_sig": "public abstract UserPrincipalLookupService getUserPrincipalLookupService()", "description": "Returns the UserPrincipalLookupService for this file system\n (optional operation). The resulting lookup service may be used to\n lookup user or group names.\n\n  Usage Example:\n Suppose we want to make \"joe\" the owner of a file:\n \n     UserPrincipalLookupService lookupService = FileSystems.getDefault().getUserPrincipalLookupService();\n     Files.setOwner(path, lookupService.lookupPrincipalByName(\"joe\"));\n "}, {"method_name": "newWatchService", "method_sig": "public abstract WatchService newWatchService()\n                                      throws IOException", "description": "Constructs a new WatchService (optional operation).\n\n  This method constructs a new watch service that may be used to watch\n registered objects for changes and events."}]}