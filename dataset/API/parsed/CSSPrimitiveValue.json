{"name": "Interface CSSPrimitiveValue", "module": "jdk.xml.dom", "package": "org.w3c.dom.css", "text": "The CSSPrimitiveValue interface represents a single CSS value\n . This interface may be used to determine the value of a specific style\n property currently set in a block or to set a specific style property\n explicitly within the block. An instance of this interface might be\n obtained from the getPropertyCSSValue method of the\n CSSStyleDeclaration interface. A\n CSSPrimitiveValue object only occurs in a context of a CSS\n property.\n  Conversions are allowed between absolute values (from millimeters to\n centimeters, from degrees to radians, and so on) but not between relative\n values. (For example, a pixel value cannot be converted to a centimeter\n value.) Percentage values can't be converted since they are relative to\n the parent value (or another property value). There is one exception for\n color percentage values: since a color percentage value is relative to\n the range 0-255, a color percentage value can be converted to a number;\n (see also the RGBColor interface).\n See also the Document Object Model (DOM) Level 2 Style Specification.", "codes": ["public interface CSSPrimitiveValue\nextends CSSValue"], "fields": [{"field_name": "CSS_UNKNOWN", "field_sig": "static final\u00a0short CSS_UNKNOWN", "description": "The value is not a recognized CSS2 value. The value can only be\n obtained by using the cssText attribute."}, {"field_name": "CSS_NUMBER", "field_sig": "static final\u00a0short CSS_NUMBER", "description": "The value is a simple number. The value can be obtained by using the\n getFloatValue method."}, {"field_name": "CSS_PERCENTAGE", "field_sig": "static final\u00a0short CSS_PERCENTAGE", "description": "The value is a percentage. The value can be obtained by using the\n getFloatValue method."}, {"field_name": "CSS_EMS", "field_sig": "static final\u00a0short CSS_EMS", "description": "The value is a length (ems). The value can be obtained by using the\n getFloatValue method."}, {"field_name": "CSS_EXS", "field_sig": "static final\u00a0short CSS_EXS", "description": "The value is a length (exs). The value can be obtained by using the\n getFloatValue method."}, {"field_name": "CSS_PX", "field_sig": "static final\u00a0short CSS_PX", "description": "The value is a length (px). The value can be obtained by using the\n getFloatValue method."}, {"field_name": "CSS_CM", "field_sig": "static final\u00a0short CSS_CM", "description": "The value is a length (cm). The value can be obtained by using the\n getFloatValue method."}, {"field_name": "CSS_MM", "field_sig": "static final\u00a0short CSS_MM", "description": "The value is a length (mm). The value can be obtained by using the\n getFloatValue method."}, {"field_name": "CSS_IN", "field_sig": "static final\u00a0short CSS_IN", "description": "The value is a length (in). The value can be obtained by using the\n getFloatValue method."}, {"field_name": "CSS_PT", "field_sig": "static final\u00a0short CSS_PT", "description": "The value is a length (pt). The value can be obtained by using the\n getFloatValue method."}, {"field_name": "CSS_PC", "field_sig": "static final\u00a0short CSS_PC", "description": "The value is a length (pc). The value can be obtained by using the\n getFloatValue method."}, {"field_name": "CSS_DEG", "field_sig": "static final\u00a0short CSS_DEG", "description": "The value is an angle (deg). The value can be obtained by using the\n getFloatValue method."}, {"field_name": "CSS_RAD", "field_sig": "static final\u00a0short CSS_RAD", "description": "The value is an angle (rad). The value can be obtained by using the\n getFloatValue method."}, {"field_name": "CSS_GRAD", "field_sig": "static final\u00a0short CSS_GRAD", "description": "The value is an angle (grad). The value can be obtained by using the\n getFloatValue method."}, {"field_name": "CSS_MS", "field_sig": "static final\u00a0short CSS_MS", "description": "The value is a time (ms). The value can be obtained by using the\n getFloatValue method."}, {"field_name": "CSS_S", "field_sig": "static final\u00a0short CSS_S", "description": "The value is a time (s). The value can be obtained by using the\n getFloatValue method."}, {"field_name": "CSS_HZ", "field_sig": "static final\u00a0short CSS_HZ", "description": "The value is a frequency (Hz). The value can be obtained by using the\n getFloatValue method."}, {"field_name": "CSS_KHZ", "field_sig": "static final\u00a0short CSS_KHZ", "description": "The value is a frequency (kHz). The value can be obtained by using the\n getFloatValue method."}, {"field_name": "CSS_DIMENSION", "field_sig": "static final\u00a0short CSS_DIMENSION", "description": "The value is a number with an unknown dimension. The value can be\n obtained by using the getFloatValue method."}, {"field_name": "CSS_STRING", "field_sig": "static final\u00a0short CSS_STRING", "description": "The value is a STRING. The value can be obtained by using the\n getStringValue method."}, {"field_name": "CSS_URI", "field_sig": "static final\u00a0short CSS_URI", "description": "The value is a URI. The value can be obtained by using the\n getStringValue method."}, {"field_name": "CSS_IDENT", "field_sig": "static final\u00a0short CSS_IDENT", "description": "The value is an identifier. The value can be obtained by using the\n getStringValue method."}, {"field_name": "CSS_ATTR", "field_sig": "static final\u00a0short CSS_ATTR", "description": "The value is a attribute function. The value can be obtained by using\n the getStringValue method."}, {"field_name": "CSS_COUNTER", "field_sig": "static final\u00a0short CSS_COUNTER", "description": "The value is a counter or counters function. The value can be obtained\n by using the getCounterValue method."}, {"field_name": "CSS_RECT", "field_sig": "static final\u00a0short CSS_RECT", "description": "The value is a rect function. The value can be obtained by using the\n getRectValue method."}, {"field_name": "CSS_RGBCOLOR", "field_sig": "static final\u00a0short CSS_RGBCOLOR", "description": "The value is a RGB color. The value can be obtained by using the\n getRGBColorValue method."}], "methods": [{"method_name": "getPrimitiveType", "method_sig": "short getPrimitiveType()", "description": "The type of the value as defined by the constants specified above."}, {"method_name": "setFloatValue", "method_sig": "void setFloatValue (short unitType,\n                   float floatValue)\n            throws DOMException", "description": "A method to set the float value with a specified unit. If the property\n attached with this value can not accept the specified unit or the\n float value, the value will be unchanged and a\n DOMException will be raised."}, {"method_name": "getFloatValue", "method_sig": "float getFloatValue (short unitType)\n             throws DOMException", "description": "This method is used to get a float value in a specified unit. If this\n CSS value doesn't contain a float value or can't be converted into\n the specified unit, a DOMException is raised."}, {"method_name": "setStringValue", "method_sig": "void setStringValue (short stringType,\n                    String stringValue)\n             throws DOMException", "description": "A method to set the string value with the specified unit. If the\n property attached to this value can't accept the specified unit or\n the string value, the value will be unchanged and a\n DOMException will be raised."}, {"method_name": "getStringValue", "method_sig": "String getStringValue()\n               throws DOMException", "description": "This method is used to get the string value. If the CSS value doesn't\n contain a string value, a DOMException is raised.  Some\n properties (like 'font-family' or 'voice-family') convert a\n whitespace separated list of idents to a string."}, {"method_name": "getCounterValue", "method_sig": "Counter getCounterValue()\n                 throws DOMException", "description": "This method is used to get the Counter value. If this CSS value\n doesn't contain a counter value, a DOMException is\n raised. Modification to the corresponding style property can be\n achieved using the Counter interface."}, {"method_name": "getRectValue", "method_sig": "Rect getRectValue()\n           throws DOMException", "description": "This method is used to get the Rect value. If this CSS value doesn't\n contain a rect value, a DOMException is raised.\n Modification to the corresponding style property can be achieved\n using the Rect interface."}, {"method_name": "getRGBColorValue", "method_sig": "RGBColor getRGBColorValue()\n                   throws DOMException", "description": "This method is used to get the RGB color. If this CSS value doesn't\n contain a RGB color value, a DOMException is raised.\n Modification to the corresponding style property can be achieved\n using the RGBColor interface."}]}