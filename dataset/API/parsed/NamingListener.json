{"name": "Interface NamingListener", "module": "java.naming", "package": "javax.naming.event", "text": "This interface is the root of listener interfaces that\n handle NamingEvents.\n It does not make sense for a listener to implement just this interface.\n A listener typically implements a subinterface of NamingListener,\n such as ObjectChangeListener or NamespaceChangeListener.\n\n This interface contains a single method, namingExceptionThrown(),\n that must be implemented so that the listener can be notified of\n exceptions that are thrown (by the service provider) while gathering\n information about the events that they're interested in.\n When this method is invoked, the listener has been automatically deregistered\n from the EventContext with which it has registered.\n\n For example, suppose a listener implements ObjectChangeListener and\n registers with an EventContext.\n Then, if the connection to the server is subsequently broken,\n the listener will receive a NamingExceptionEvent and may\n take some corrective action, such as notifying the user of the application.", "codes": ["public interface NamingListener\nextends EventListener"], "fields": [], "methods": [{"method_name": "namingExceptionThrown", "method_sig": "void namingExceptionThrown (NamingExceptionEvent evt)", "description": "Called when a naming exception is thrown while attempting\n to fire a NamingEvent."}]}