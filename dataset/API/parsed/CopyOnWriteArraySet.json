{"name": "Class CopyOnWriteArraySet<E>", "module": "java.base", "package": "java.util.concurrent", "text": "A Set that uses an internal CopyOnWriteArrayList\n for all of its operations.  Thus, it shares the same basic properties:\n \nIt is best suited for applications in which set sizes generally\n       stay small, read-only operations\n       vastly outnumber mutative operations, and you need\n       to prevent interference among threads during traversal.\n  It is thread-safe.\n  Mutative operations (add, set, remove, etc.)\n      are expensive since they usually entail copying the entire underlying\n      array.\n  Iterators do not support the mutative remove operation.\n  Traversal via iterators is fast and cannot encounter\n      interference from other threads. Iterators rely on\n      unchanging snapshots of the array at the time the iterators were\n      constructed.\n \nSample Usage. The following code sketch uses a\n copy-on-write set to maintain a set of Handler objects that\n perform some action upon state updates.\n\n  \n class Handler { void handle(); ... }\n\n class X {\n   private final CopyOnWriteArraySet<Handler> handlers\n     = new CopyOnWriteArraySet<>();\n   public void addHandler(Handler h) { handlers.add(h); }\n\n   private long internalState;\n   private synchronized void changeState() { internalState = ...; }\n\n   public void update() {\n     changeState();\n     for (Handler handler : handlers)\n       handler.handle();\n   }\n }\nThis class is a member of the\n \n Java Collections Framework.", "codes": ["public class CopyOnWriteArraySet<E>\nextends AbstractSet<E>\nimplements Serializable"], "fields": [], "methods": [{"method_name": "size", "method_sig": "public int size()", "description": "Returns the number of elements in this set."}, {"method_name": "isEmpty", "method_sig": "public boolean isEmpty()", "description": "Returns true if this set contains no elements."}, {"method_name": "contains", "method_sig": "public boolean contains (Object o)", "description": "Returns true if this set contains the specified element.\n More formally, returns true if and only if this set\n contains an element e such that Objects.equals(o, e)."}, {"method_name": "toArray", "method_sig": "public Object[] toArray()", "description": "Returns an array containing all of the elements in this set.\n If this set makes any guarantees as to what order its elements\n are returned by its iterator, this method must return the\n elements in the same order.\n\n The returned array will be \"safe\" in that no references to it\n are maintained by this set.  (In other words, this method must\n allocate a new array even if this set is backed by an array).\n The caller is thus free to modify the returned array.\n\n This method acts as bridge between array-based and collection-based\n APIs."}, {"method_name": "toArray", "method_sig": "public <T> T[] toArray (T[] a)", "description": "Returns an array containing all of the elements in this set; the\n runtime type of the returned array is that of the specified array.\n If the set fits in the specified array, it is returned therein.\n Otherwise, a new array is allocated with the runtime type of the\n specified array and the size of this set.\n\n If this set fits in the specified array with room to spare\n (i.e., the array has more elements than this set), the element in\n the array immediately following the end of the set is set to\n null.  (This is useful in determining the length of this\n set only if the caller knows that this set does not contain\n any null elements.)\n\n If this set makes any guarantees as to what order its elements\n are returned by its iterator, this method must return the elements\n in the same order.\n\n Like the toArray() method, this method acts as bridge between\n array-based and collection-based APIs.  Further, this method allows\n precise control over the runtime type of the output array, and may,\n under certain circumstances, be used to save allocation costs.\n\n Suppose x is a set known to contain only strings.\n The following code can be used to dump the set into a newly allocated\n array of String:\n\n  String[] y = x.toArray(new String[0]);\n\n Note that toArray(new Object[0]) is identical in function to\n toArray()."}, {"method_name": "clear", "method_sig": "public void clear()", "description": "Removes all of the elements from this set.\n The set will be empty after this call returns."}, {"method_name": "remove", "method_sig": "public boolean remove (Object o)", "description": "Removes the specified element from this set if it is present.\n More formally, removes an element e such that\n Objects.equals(o, e), if this set contains such an element.\n Returns true if this set contained the element (or\n equivalently, if this set changed as a result of the call).\n (This set will not contain the element once the call returns.)"}, {"method_name": "add", "method_sig": "public boolean add (E e)", "description": "Adds the specified element to this set if it is not already present.\n More formally, adds the specified element e to this set if\n the set contains no element e2 such that\n Objects.equals(e, e2).\n If this set already contains the element, the call leaves the set\n unchanged and returns false."}, {"method_name": "containsAll", "method_sig": "public boolean containsAll (Collection<?> c)", "description": "Returns true if this set contains all of the elements of the\n specified collection.  If the specified collection is also a set, this\n method returns true if it is a subset of this set."}, {"method_name": "addAll", "method_sig": "public boolean addAll (Collection<? extends E> c)", "description": "Adds all of the elements in the specified collection to this set if\n they're not already present.  If the specified collection is also a\n set, the addAll operation effectively modifies this set so\n that its value is the union of the two sets.  The behavior of\n this operation is undefined if the specified collection is modified\n while the operation is in progress."}, {"method_name": "removeAll", "method_sig": "public boolean removeAll (Collection<?> c)", "description": "Removes from this set all of its elements that are contained in the\n specified collection.  If the specified collection is also a set,\n this operation effectively modifies this set so that its value is the\n asymmetric set difference of the two sets."}, {"method_name": "retainAll", "method_sig": "public boolean retainAll (Collection<?> c)", "description": "Retains only the elements in this set that are contained in the\n specified collection.  In other words, removes from this set all of\n its elements that are not contained in the specified collection.  If\n the specified collection is also a set, this operation effectively\n modifies this set so that its value is the intersection of the\n two sets."}, {"method_name": "iterator", "method_sig": "public Iterator<E> iterator()", "description": "Returns an iterator over the elements contained in this set\n in the order in which these elements were added.\n\n The returned iterator provides a snapshot of the state of the set\n when the iterator was constructed. No synchronization is needed while\n traversing the iterator. The iterator does NOT support the\n remove method."}, {"method_name": "equals", "method_sig": "public boolean equals (Object o)", "description": "Compares the specified object with this set for equality.\n Returns true if the specified object is the same object\n as this object, or if it is also a Set and the elements\n returned by an iterator over the\n specified set are the same as the elements returned by an\n iterator over this set.  More formally, the two iterators are\n considered to return the same elements if they return the same\n number of elements and for every element e1 returned by\n the iterator over the specified set, there is an element\n e2 returned by the iterator over this set such that\n Objects.equals(e1, e2)."}, {"method_name": "removeIf", "method_sig": "public boolean removeIf (Predicate<? super E> filter)", "description": "Description copied from interface:\u00a0Collection"}, {"method_name": "forEach", "method_sig": "public void forEach (Consumer<? super E> action)", "description": "Description copied from interface:\u00a0Iterable"}, {"method_name": "spliterator", "method_sig": "public Spliterator<E> spliterator()", "description": "Returns a Spliterator over the elements in this set in the order\n in which these elements were added.\n\n The Spliterator reports Spliterator.IMMUTABLE,\n Spliterator.DISTINCT, Spliterator.SIZED, and\n Spliterator.SUBSIZED.\n\n The spliterator provides a snapshot of the state of the set\n when the spliterator was constructed. No synchronization is needed while\n operating on the spliterator."}]}