{"name": "Interface ButtonModel", "module": "java.desktop", "package": "javax.swing", "text": "State model for buttons.\n \n This model is used for regular buttons, as well as check boxes\n and radio buttons, which are special kinds of buttons. In practice,\n a button's UI takes the responsibility of calling methods on its\n model to manage the state, as detailed below:\n \n In simple terms, pressing and releasing the mouse over a regular\n button triggers the button and causes and ActionEvent\n to be fired. The same behavior can be produced via a keyboard key\n defined by the look and feel of the button (typically the SPACE BAR).\n Pressing and releasing this key while the button has\n focus will give the same results. For check boxes and radio buttons, the\n mouse or keyboard equivalent sequence just described causes the button\n to become selected.\n \n In details, the state model for buttons works as follows\n when used with the mouse:\n \n Pressing the mouse on top of a button makes the model both\n armed and pressed. As long as the mouse remains down,\n the model remains pressed, even if the mouse moves\n outside the button. On the contrary, the model is only\n armed while the mouse remains pressed within the bounds of\n the button (it can move in or out of the button, but the model\n is only armed during the portion of time spent within the button).\n A button is triggered, and an ActionEvent is fired,\n when the mouse is released while the model is armed\n - meaning when it is released over top of the button after the mouse\n has previously been pressed on that button (and not already released).\n Upon mouse release, the model becomes unarmed and unpressed.\n \n In details, the state model for buttons works as follows\n when used with the keyboard:\n \n Pressing the look and feel defined keyboard key while the button\n has focus makes the model both armed and pressed. As long as this key\n remains down, the model remains in this state. Releasing the key sets\n the model to unarmed and unpressed, triggers the button, and causes an\n ActionEvent to be fired.", "codes": ["public interface ButtonModel\nextends ItemSelectable"], "fields": [], "methods": [{"method_name": "isArmed", "method_sig": "boolean isArmed()", "description": "Indicates partial commitment towards triggering the\n button."}, {"method_name": "isSelected", "method_sig": "boolean isSelected()", "description": "Indicates if the button has been selected. Only needed for\n certain types of buttons - such as radio buttons and check boxes."}, {"method_name": "isEnabled", "method_sig": "boolean isEnabled()", "description": "Indicates if the button can be selected or triggered by\n an input device, such as a mouse pointer."}, {"method_name": "isPressed", "method_sig": "boolean isPressed()", "description": "Indicates if the button is pressed."}, {"method_name": "isRollover", "method_sig": "boolean isRollover()", "description": "Indicates that the mouse is over the button."}, {"method_name": "setArmed", "method_sig": "void setArmed (boolean b)", "description": "Marks the button as armed or unarmed."}, {"method_name": "setSelected", "method_sig": "void setSelected (boolean b)", "description": "Selects or deselects the button."}, {"method_name": "setEnabled", "method_sig": "void setEnabled (boolean b)", "description": "Enables or disables the button."}, {"method_name": "setPressed", "method_sig": "void setPressed (boolean b)", "description": "Sets the button to pressed or unpressed."}, {"method_name": "setRollover", "method_sig": "void setRollover (boolean b)", "description": "Sets or clears the button's rollover state"}, {"method_name": "setMnemonic", "method_sig": "void setMnemonic (int key)", "description": "Sets the keyboard mnemonic (shortcut key or\n accelerator key) for the button."}, {"method_name": "getMnemonic", "method_sig": "int getMnemonic()", "description": "Gets the keyboard mnemonic for the button."}, {"method_name": "setActionCommand", "method_sig": "void setActionCommand (String s)", "description": "Sets the action command string that gets sent as part of the\n ActionEvent when the button is triggered."}, {"method_name": "getActionCommand", "method_sig": "String getActionCommand()", "description": "Returns the action command string for the button."}, {"method_name": "setGroup", "method_sig": "void setGroup (ButtonGroup group)", "description": "Identifies the group the button belongs to --\n needed for radio buttons, which are mutually\n exclusive within their group."}, {"method_name": "getGroup", "method_sig": "default ButtonGroup getGroup()", "description": "Returns the group that the button belongs to.\n Normally used with radio buttons, which are mutually\n exclusive within their group."}, {"method_name": "addActionListener", "method_sig": "void addActionListener (ActionListener l)", "description": "Adds an ActionListener to the model."}, {"method_name": "removeActionListener", "method_sig": "void removeActionListener (ActionListener l)", "description": "Removes an ActionListener from the model."}, {"method_name": "addItemListener", "method_sig": "void addItemListener (ItemListener l)", "description": "Adds an ItemListener to the model."}, {"method_name": "removeItemListener", "method_sig": "void removeItemListener (ItemListener l)", "description": "Removes an ItemListener from the model."}, {"method_name": "addChangeListener", "method_sig": "void addChangeListener (ChangeListener l)", "description": "Adds a ChangeListener to the model."}, {"method_name": "removeChangeListener", "method_sig": "void removeChangeListener (ChangeListener l)", "description": "Removes a ChangeListener from the model."}]}