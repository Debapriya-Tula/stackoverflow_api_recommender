{"name": "Class ServiceLoader<S>", "module": "java.base", "package": "java.util", "text": "A facility to load implementations of a service.\n\n  A service is a well-known interface or class for which zero, one,\n or many service providers exist. A service provider (or just\n provider) is a class that implements or subclasses the well-known\n interface or class. A ServiceLoader is an object that locates and\n loads service providers deployed in the run time environment at a time of an\n application's choosing. Application code refers only to the service, not to\n service providers, and is assumed to be capable of differentiating between\n multiple service providers as well as handling the possibility that no service\n providers are located.\n\n  Obtaining a service loader \n An application obtains a service loader for a given service by invoking\n one of the static load methods of ServiceLoader. If the application\n is a module, then its module declaration must have a uses directive\n that specifies the service; this helps to locate providers and ensure they\n will execute reliably. In addition, if the service is not in the application\n module, then the module declaration must have a requires directive\n that specifies the module which exports the service.\n\n  A service loader can be used to locate and instantiate providers of the\n service by means of the iterator method. ServiceLoader\n also defines the stream method to obtain a stream of providers\n that can be inspected and filtered without instantiating them.\n\n  As an example, suppose the service is com.example.CodecFactory, an\n interface that defines methods for producing encoders and decoders:\n\n \n     package com.example;\n     public interface CodecFactory {\n         Encoder getEncoder(String encodingName);\n         Decoder getDecoder(String encodingName);\n     }\n \n The following code obtains a service loader for the CodecFactory\n service, then uses its iterator (created automatically by the enhanced-for\n loop) to yield instances of the service providers that are located:\n\n \n     ServiceLoader<CodecFactory> loader = ServiceLoader.load(CodecFactory.class);\n     for (CodecFactory factory : loader) {\n         Encoder enc = factory.getEncoder(\"PNG\");\n         if (enc != null)\n             ... use enc to encode a PNG file\n             break;\n         }\n \n If this code resides in a module, then in order to refer to the\n com.example.CodecFactory interface, the module declaration would\n require the module which exports the interface. The module declaration would\n also specify use of com.example.CodecFactory:\n \n     requires com.example.codec.core;\n     uses com.example.CodecFactory;\n \n Sometimes an application may wish to inspect a service provider before\n instantiating it, in order to determine if an instance of that service\n provider would be useful. For example, a service provider for \n CodecFactory that is capable of producing a \"PNG\" encoder may be annotated\n with @PNG. The following code uses service loader's stream\n method to yield instances of Provider<CodecFactory> in contrast to\n how the iterator yields instances of CodecFactory:\n \n     ServiceLoader<CodecFactory> loader = ServiceLoader.load(CodecFactory.class);\n     Set<CodecFactory> pngFactories = loader\n            .stream()                                              // Note a below\n            .filter(p -> p.type().isAnnotationPresent(PNG.class))  // Note b\n            .map(Provider::get)                                    // Note c\n            .collect(Collectors.toSet());\n \n\n A stream of Provider<CodecFactory> objects \n p.type() yields a Class<CodecFactory> \n get() yields an instance of CodecFactory \n\n Designing services \n A service is a single type, usually an interface or abstract class. A\n concrete class can be used, but this is not recommended. The type may have\n any accessibility. The methods of a service are highly domain-specific, so\n this API specification cannot give concrete advice about their form or\n function. However, there are two general guidelines:\n \n A service should declare as many methods as needed to allow service\n   providers to communicate their domain-specific properties and other\n   quality-of-implementation factors. An application which obtains a service\n   loader for the service may then invoke these methods on each instance of\n   a service provider, in order to choose the best provider for the\n   application. \n A service should express whether its service providers are intended\n   to be direct implementations of the service or to be an indirection\n   mechanism such as a \"proxy\" or a \"factory\". Service providers tend to be\n   indirection mechanisms when domain-specific objects are relatively\n   expensive to instantiate; in this case, the service should be designed\n   so that service providers are abstractions which create the \"real\"\n   implementation on demand. For example, the CodecFactory service\n   expresses through its name that its service providers are factories\n   for codecs, rather than codecs themselves, because it may be expensive\n   or complicated to produce certain codecs. \n\n Developing service providers \n A service provider is a single type, usually a concrete class. An\n interface or abstract class is permitted because it may declare a static\n provider method, discussed later. The type must be public and must not be\n an inner class.\n\n  A service provider and its supporting code may be developed in a module,\n which is then deployed on the application module path or in a modular\n image. Alternatively, a service provider and its supporting code may be\n packaged as a JAR file and deployed on the application class path. The\n advantage of developing a service provider in a module is that the provider\n can be fully encapsulated to hide all details of its implementation.\n\n  An application that obtains a service loader for a given service is\n indifferent to whether providers of the service are deployed in modules or\n packaged as JAR files. The application instantiates service providers via\n the service loader's iterator, or via Provider objects in\n the service loader's stream, without knowledge of the service providers'\n locations.\n\n  Deploying service providers as modules \n A service provider that is developed in a module must be specified in a\n provides directive in the module declaration. The provides directive\n specifies both the service and the service provider; this helps to locate the\n provider when another module, with a uses directive for the service,\n obtains a service loader for the service. It is strongly recommended that the\n module does not export the package containing the service provider. There is\n no support for a module specifying, in a provides directive, a service\n provider in another module.\n\n  A service provider that is developed in a module has no control over when\n it is instantiated, since that occurs at the behest of the application, but it\n does have control over how it is instantiated:\n\n \n If the service provider declares a provider method, then the service\n   loader invokes that method to obtain an instance of the service provider. A\n   provider method is a public static method named \"provider\" with no formal\n   parameters and a return type that is assignable to the service's interface\n   or class.\n    In this case, the service provider itself need not be assignable to the\n   service's interface or class. \n If the service provider does not declare a provider method, then the\n   service provider is instantiated directly, via its provider constructor. A\n   provider constructor is a public constructor with no formal parameters.\n    In this case, the service provider must be assignable to the service's\n   interface or class \n\n A service provider that is deployed as an\n automatic module on\n the application module path must have a provider constructor. There is no\n support for a provider method in this case.\n\n  As an example, suppose a module specifies the following directives:\n \n     provides com.example.CodecFactory with com.example.impl.StandardCodecs;\n     provides com.example.CodecFactory with com.example.impl.ExtendedCodecsFactory;\n \n where\n\n \n com.example.CodecFactory is the two-method service from\n   earlier. \n com.example.impl.StandardCodecs is a public class that implements\n   CodecFactory and has a public no-args constructor. \n com.example.impl.ExtendedCodecsFactory is a public class that\n   does not implement CodecFactory, but it declares a public static no-args\n   method named \"provider\" with a return type of CodecFactory. \n\n A service loader will instantiate StandardCodecs via its\n constructor, and will instantiate ExtendedCodecsFactory by invoking\n its provider method. The requirement that the provider constructor or\n provider method is public helps to document the intent that the class (that is,\n the service provider) will be instantiated by an entity (that is, a service\n loader) which is outside the class's package.\n\n  Deploying service providers on the class path \n\n A service provider that is packaged as a JAR file for the class path is\n identified by placing a provider-configuration file in the resource\n directory META-INF/services. The name of the provider-configuration\n file is the fully qualified binary name of the service. The provider-configuration\n file contains a list of fully qualified binary names of service providers, one\n per line.\n\n  For example, suppose the service provider\n com.example.impl.StandardCodecs is packaged in a JAR file for the\n class path. The JAR file will contain a provider-configuration file named:\n\n \n     META-INF/services/com.example.CodecFactory\n \n\n that contains the line:\n\n \n     com.example.impl.StandardCodecs # Standard codecs\n \nThe provider-configuration file must be encoded in UTF-8. \n Space and tab characters surrounding each service provider's name, as well as\n blank lines, are ignored. The comment character is '#'\n ('&#92;u0023' NUMBER SIGN);\n on each line all characters following the first comment character are ignored.\n If a service provider class name is listed more than once in a\n provider-configuration file then the duplicate is ignored. If a service\n provider class is named in more than one configuration file then the duplicate\n is ignored.\n\n  A service provider that is mentioned in a provider-configuration file may\n be located in the same JAR file as the provider-configuration file or in a\n different JAR file. The service provider must be visible from the class loader\n that is initially queried to locate the provider-configuration file; this is\n not necessarily the class loader which ultimately locates the\n provider-configuration file.\n\n  Timing of provider discovery \n Service providers are loaded and instantiated lazily, that is, on demand.\n A service loader maintains a cache of the providers that have been loaded so\n far. Each invocation of the iterator method returns an Iterator\n that first yields all of the elements cached from previous iteration, in\n instantiation order, and then lazily locates and instantiates any remaining\n providers, adding each one to the cache in turn. Similarly, each invocation\n of the stream method returns a Stream that first processes all\n providers loaded by previous stream operations, in load order, and then lazily\n locates any remaining providers. Caches are cleared via the reload method.\n\n  Errors \n When using the service loader's iterator, the hasNext and next methods will\n fail with ServiceConfigurationError if an error occurs locating,\n loading or instantiating a service provider. When processing the service\n loader's stream then ServiceConfigurationError may be thrown by any\n method that causes a service provider to be located or loaded.\n\n  When loading or instantiating a service provider in a module, \n ServiceConfigurationError can be thrown for the following reasons:\n\n \n The service provider cannot be loaded. \n The service provider does not declare a provider method, and either\n   it is not assignable to the service's interface/class or does not have a\n   provider constructor. \n The service provider declares a public static no-args method named\n   \"provider\" with a return type that is not assignable to the service's\n   interface or class. \n The service provider class file has more than one public static\n   no-args method named \"provider\". \n The service provider declares a provider method and it fails by\n   returning null or throwing an exception. \n The service provider does not declare a provider method, and its\n   provider constructor fails by throwing an exception. \n\n When reading a provider-configuration file, or loading or instantiating\n a provider class named in a provider-configuration file, then \n ServiceConfigurationError can be thrown for the following reasons:\n\n \n The format of the provider-configuration file violates the format specified above; \n An IOException occurs while reading the\n   provider-configuration file; \n A service provider cannot be loaded; \n A service provider is not assignable to the service's interface or\n   class, or does not define a provider constructor, or cannot be\n   instantiated. \n\n Security \n Service loaders always execute in the security context of the caller\n of the iterator or stream methods and may also be restricted by the security\n context of the caller that created the service loader.\n Trusted system code should typically invoke the methods in this class, and\n the methods of the iterators which they return, from within a privileged\n security context.\n\n  Concurrency \n Instances of this class are not safe for use by multiple concurrent\n threads.\n\n  Null handling \n Unless otherwise specified, passing a null argument to any\n method in this class will cause a NullPointerException to be thrown.", "codes": ["public final class ServiceLoader<S>\nextends Object\nimplements Iterable<S>"], "fields": [], "methods": [{"method_name": "iterator", "method_sig": "public Iterator<S> iterator()", "description": "Returns an iterator to lazily load and instantiate the available\n providers of this loader's service.\n\n  To achieve laziness the actual work of locating and instantiating\n providers is done by the iterator itself. Its hasNext and next methods can therefore throw a\n ServiceConfigurationError for any of the reasons specified in\n the Errors section above. To write robust code it\n is only necessary to catch ServiceConfigurationError when using\n the iterator. If an error is thrown then subsequent invocations of the\n iterator will make a best effort to locate and instantiate the next\n available provider, but in general such recovery cannot be guaranteed.\n\n  Caching: The iterator returned by this method first yields all of\n the elements of the provider cache, in the order that they were loaded.\n It then lazily loads and instantiates any remaining service providers,\n adding each one to the cache in turn. If this loader's provider caches are\n cleared by invoking the reload method then existing\n iterators for this service loader should be discarded.\n The  hasNext and next methods of the iterator throw ConcurrentModificationException\n if used after the provider cache has been cleared.\n\n  The iterator returned by this method does not support removal.\n Invoking its remove method will\n cause an UnsupportedOperationException to be thrown."}, {"method_name": "stream", "method_sig": "public Stream<ServiceLoader.Provider<S>> stream()", "description": "Returns a stream to lazily load available providers of this loader's\n service. The stream elements are of type Provider, the\n Provider's get method must be invoked to\n get or instantiate the provider.\n\n  To achieve laziness the actual work of locating providers is done\n when processing the stream. If a service provider cannot be loaded for any\n of the reasons specified in the Errors section\n above then ServiceConfigurationError is thrown by whatever method\n caused the service provider to be loaded. \n Caching: When processing the stream then providers that were previously\n loaded by stream operations are processed first, in load order. It then\n lazily loads any remaining service providers. If this loader's provider\n caches are cleared by invoking the reload method then\n existing streams for this service loader should be discarded. The returned\n stream's source spliterator is fail-fast and\n will throw ConcurrentModificationException if the provider cache\n has been cleared. \n The following examples demonstrate usage. The first example creates\n a stream of CodecFactory objects, the second example is the same\n except that it sorts the providers by provider class name (and so locate\n all providers).\n \n    Stream<CodecFactory> providers = ServiceLoader.load(CodecFactory.class)\n            .stream()\n            .map(Provider::get);\n\n    Stream<CodecFactory> providers = ServiceLoader.load(CodecFactory.class)\n            .stream()\n            .sorted(Comparator.comparing(p -> p.type().getName()))\n            .map(Provider::get);\n "}, {"method_name": "load", "method_sig": "public static <S> ServiceLoader<S> load (Class<S> service,\n                                        ClassLoader loader)", "description": "Creates a new service loader for the given service. The service loader\n uses the given class loader as the starting point to locate service\n providers for the service. The service loader's iterator and stream locate providers in both named\n and unnamed modules, as follows:\n\n \n  Step 1: Locate providers in named modules. \n Service providers are located in all named modules of the class\n   loader or to any class loader reachable via parent delegation. \n In addition, if the class loader is not the bootstrap or platform class loader, then service\n   providers may be located in the named modules of other class loaders.\n   Specifically, if the class loader, or any class loader reachable via\n   parent delegation, has a module in a module\n   layer, then service providers in all modules in the module layer are\n   located.  \n For example, suppose there is a module layer where each module is\n   in its own class loader (see defineModulesWithManyLoaders). If this ServiceLoader.load method\n   is invoked to locate providers using any of the class loaders created for\n   the module layer, then it will locate all of the providers in the module\n   layer, irrespective of their defining class loader. \n Ordering: The service loader will first locate any service providers\n   in modules defined to the class loader, then its parent class loader,\n   its parent parent, and so on to the bootstrap class loader. If a class\n   loader has modules in a module layer then all providers in that module\n   layer are located (irrespective of their class loader) before the\n   providers in the parent class loader are located. The ordering of\n   modules in same class loader, or the ordering of modules in a module\n   layer, is not defined. \n If a module declares more than one provider then the providers\n   are located in the order that its module descriptor lists the\n   providers. Providers added dynamically by instrumentation agents (see\n   redefineModule)\n   are always located after providers declared by the module.  \n  Step 2: Locate providers in unnamed modules. \n Service providers in unnamed modules are located if their class names\n   are listed in provider-configuration files located by the class loader's\n   getResources method. \n The ordering is based on the order that the class loader's \n   getResources method finds the service configuration files and within\n   that, the order that the class names are listed in the file. \n In a provider-configuration file, any mention of a service provider\n   that is deployed in a named module is ignored. This is to avoid\n   duplicates that would otherwise arise when a named module has both a\n   provides directive and a provider-configuration file that mention\n   the same service provider. \n The provider class must be visible to the class loader.  \n"}, {"method_name": "load", "method_sig": "public static <S> ServiceLoader<S> load (Class<S> service)", "description": "Creates a new service loader for the given service type, using the\n current thread's context class loader.\n\n  An invocation of this convenience method of the form\n \n     ServiceLoader.load(service)\n \n\n is equivalent to\n\n \n     ServiceLoader.load(service, Thread.currentThread().getContextClassLoader())\n "}, {"method_name": "loadInstalled", "method_sig": "public static <S> ServiceLoader<S> loadInstalled (Class<S> service)", "description": "Creates a new service loader for the given service type, using the\n platform class loader.\n\n  This convenience method is equivalent to: \n\n     ServiceLoader.load(service, ClassLoader.getPlatformClassLoader())\n \n This method is intended for use when only installed providers are\n desired.  The resulting service will only find and load providers that\n have been installed into the current Java virtual machine; providers on\n the application's module path or class path will be ignored."}, {"method_name": "load", "method_sig": "public static <S> ServiceLoader<S> load (ModuleLayer layer,\n                                        Class<S> service)", "description": "Creates a new service loader for the given service type to load service\n providers from modules in the given module layer and its ancestors. It\n does not locate providers in unnamed modules. The ordering that the service\n loader's iterator and stream locate\n providers and yield elements is as follows:\n\n \n Providers are located in a module layer before locating providers\n   in parent layers. Traversal of parent layers is depth-first with each\n   layer visited at most once. For example, suppose L0 is the boot layer, L1\n   and L2 are modules layers with L0 as their parent. Now suppose that L3 is\n   created with L1 and L2 as the parents (in that order). Using a service\n   loader to locate providers with L3 as the context will locate providers\n   in the following order: L3, L1, L0, L2. \n If a module declares more than one provider then the providers\n   are located in the order that its module descriptor\n   lists the providers. Providers added dynamically by instrumentation\n   agents are always located after providers declared by the module. \n The ordering of modules in a module layer is not defined. \n"}, {"method_name": "findFirst", "method_sig": "public Optional<S> findFirst()", "description": "Load the first available service provider of this loader's service. This\n convenience method is equivalent to invoking the iterator() method and obtaining the first element. It therefore\n returns the first element from the provider cache if possible, it\n otherwise attempts to load and instantiate the first provider.\n\n  The following example loads the first available service provider. If\n no service providers are located then it uses a default implementation.\n \n    CodecFactory factory = ServiceLoader.load(CodecFactory.class)\n                                        .findFirst()\n                                        .orElse(DEFAULT_CODECSET_FACTORY);\n "}, {"method_name": "reload", "method_sig": "public void reload()", "description": "Clear this loader's provider cache so that all providers will be\n reloaded.\n\n  After invoking this method, subsequent invocations of the iterator or stream methods will lazily\n locate providers (and instantiate in the case of iterator)\n from scratch, just as is done by a newly-created service loader.\n\n  This method is intended for use in situations in which new service\n providers can be installed into a running Java virtual machine."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a string describing this service."}]}