{"name": "Class OptionalDouble", "module": "java.base", "package": "java.util", "text": "A container object which may or may not contain a double value.\n If a value is present, isPresent() returns true. If no\n value is present, the object is considered empty and\n isPresent() returns false.\n\n Additional methods that depend on the presence or absence of a contained\n value are provided, such as orElse()\n (returns a default value if no value is present) and\n ifPresent() (performs\n an action if a value is present).\n\n This is a value-based\n class; use of identity-sensitive operations (including reference equality\n (==), identity hash code, or synchronization) on instances of\n OptionalDouble may have unpredictable results and should be avoided.", "codes": ["public final class OptionalDouble\nextends Object"], "fields": [], "methods": [{"method_name": "empty", "method_sig": "public static OptionalDouble empty()", "description": "Returns an empty OptionalDouble instance.  No value is present\n for this OptionalDouble."}, {"method_name": "of", "method_sig": "public static OptionalDouble of (double value)", "description": "Returns an OptionalDouble describing the given value."}, {"method_name": "getAsDouble", "method_sig": "public double getAsDouble()", "description": "If a value is present, returns the value, otherwise throws\n NoSuchElementException."}, {"method_name": "isPresent", "method_sig": "public boolean isPresent()", "description": "If a value is present, returns true, otherwise false."}, {"method_name": "isEmpty", "method_sig": "public boolean isEmpty()", "description": "If a value is not present, returns true, otherwise\n false."}, {"method_name": "ifPresent", "method_sig": "public void ifPresent (DoubleConsumer action)", "description": "If a value is present, performs the given action with the value,\n otherwise does nothing."}, {"method_name": "ifPresentOrElse", "method_sig": "public void ifPresentOrElse (DoubleConsumer action,\n                            Runnable emptyAction)", "description": "If a value is present, performs the given action with the value,\n otherwise performs the given empty-based action."}, {"method_name": "stream", "method_sig": "public DoubleStream stream()", "description": "If a value is present, returns a sequential DoubleStream\n containing only that value, otherwise returns an empty\n DoubleStream."}, {"method_name": "orElse", "method_sig": "public double orElse (double other)", "description": "If a value is present, returns the value, otherwise returns\n other."}, {"method_name": "orElseGet", "method_sig": "public double orElseGet (DoubleSupplier supplier)", "description": "If a value is present, returns the value, otherwise returns the result\n produced by the supplying function."}, {"method_name": "orElseThrow", "method_sig": "public double orElseThrow()", "description": "If a value is present, returns the value, otherwise throws\n NoSuchElementException."}, {"method_name": "orElseThrow", "method_sig": "public <X extends Throwable> double orElseThrow (Supplier<? extends X> exceptionSupplier)\n                                         throws X extends Throwable", "description": "If a value is present, returns the value, otherwise throws an exception\n produced by the exception supplying function."}, {"method_name": "equals", "method_sig": "public boolean equals (Object obj)", "description": "Indicates whether some other object is \"equal to\" this\n OptionalDouble. The other object is considered equal if:\n \nit is also an OptionalDouble and;\n both instances have no value present or;\n the present values are \"equal to\" each other via\n Double.compare() == 0.\n "}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Returns the hash code of the value, if present, otherwise 0\n (zero) if no value is present."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a non-empty string representation of this OptionalDouble\n suitable for debugging.  The exact presentation format is unspecified and\n may vary between implementations and versions."}]}