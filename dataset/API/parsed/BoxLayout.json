{"name": "Class BoxLayout", "module": "java.desktop", "package": "javax.swing", "text": "A layout manager that allows multiple components to be laid out either\n vertically or horizontally. The components will not wrap so, for\n example, a vertical arrangement of components will stay vertically\n arranged when the frame is resized.\n \nExample:\n\n\n\n\n\n\n\n Nesting multiple panels with different combinations of horizontal and\n vertical gives an effect similar to GridBagLayout, without the\n complexity. The diagram shows two panels arranged horizontally, each\n of which contains 3 components arranged vertically.\n\n  The BoxLayout manager is constructed with an axis parameter that\n specifies the type of layout that will be done. There are four choices:\n\n X_AXIS - Components are laid out horizontally\n from left to right.\nY_AXIS - Components are laid out vertically\n from top to bottom.\nLINE_AXIS - Components are laid out the way\n words are laid out in a line, based on the container's\n ComponentOrientation property. If the container's\n ComponentOrientation is horizontal then components are laid out\n horizontally, otherwise they are laid out vertically.  For horizontal\n orientations, if the container's ComponentOrientation is left to\n right then components are laid out left to right, otherwise they are laid\n out right to left. For vertical orientations components are always laid out\n from top to bottom.\nPAGE_AXIS - Components are laid out the way\n text lines are laid out on a page, based on the container's\n ComponentOrientation property. If the container's\n ComponentOrientation is horizontal then components are laid out\n vertically, otherwise they are laid out horizontally.  For horizontal\n orientations, if the container's ComponentOrientation is left to\n right then components are laid out left to right, otherwise they are laid\n out right to left.\u00a0 For vertical orientations components are always\n laid out from top to bottom.\n\n For all directions, components are arranged in the same order as they were\n added to the container.\n \n BoxLayout attempts to arrange components\n at their preferred widths (for horizontal layout)\n or heights (for vertical layout).\n For a horizontal layout,\n if not all the components are the same height,\n BoxLayout attempts to make all the components\n as high as the highest component.\n If that's not possible for a particular component,\n then BoxLayout aligns that component vertically,\n according to the component's Y alignment.\n By default, a component has a Y alignment of 0.5,\n which means that the vertical center of the component\n should have the same Y coordinate as\n the vertical centers of other components with 0.5 Y alignment.\n \n Similarly, for a vertical layout,\n BoxLayout attempts to make all components in the column\n as wide as the widest component.\n If that fails, it aligns them horizontally\n according to their X alignments.  For PAGE_AXIS layout,\n horizontal alignment is done based on the leading edge of the component.\n In other words, an X alignment value of 0.0 means the left edge of a\n component if the container's ComponentOrientation is left to\n right and it means the right edge of the component otherwise.\n \n Instead of using BoxLayout directly, many programs use the Box class.\n The Box class is a lightweight container that uses a BoxLayout.\n It also provides handy methods to help you use BoxLayout well.\n Adding components to multiple nested boxes is a powerful way to get\n the arrangement you want.\n \n For further information and examples see\n How to Use BoxLayout,\n a section in The Java Tutorial.\n\nWarning:\n Serialized objects of this class will not be compatible with\n future Swing releases. The current serialization support is\n appropriate for short term storage or RMI between applications running\n the same version of Swing.  As of 1.4, support for long term storage\n of all JavaBeans\u2122\n has been added to the java.beans package.\n Please see XMLEncoder.", "codes": ["public class BoxLayout\nextends Object\nimplements LayoutManager2, Serializable"], "fields": [{"field_name": "X_AXIS", "field_sig": "public static final\u00a0int X_AXIS", "description": "Specifies that components should be laid out left to right."}, {"field_name": "Y_AXIS", "field_sig": "public static final\u00a0int Y_AXIS", "description": "Specifies that components should be laid out top to bottom."}, {"field_name": "LINE_AXIS", "field_sig": "public static final\u00a0int LINE_AXIS", "description": "Specifies that components should be laid out in the direction of\n a line of text as determined by the target container's\n ComponentOrientation property."}, {"field_name": "PAGE_AXIS", "field_sig": "public static final\u00a0int PAGE_AXIS", "description": "Specifies that components should be laid out in the direction that\n lines flow across a page as determined by the target container's\n ComponentOrientation property."}], "methods": [{"method_name": "getTarget", "method_sig": "public final Container getTarget()", "description": "Returns the container that uses this layout manager."}, {"method_name": "getAxis", "method_sig": "public final int getAxis()", "description": "Returns the axis that was used to lay out components.\n Returns one of:\n BoxLayout.X_AXIS, BoxLayout.Y_AXIS,\n BoxLayout.LINE_AXIS or BoxLayout.PAGE_AXIS"}, {"method_name": "invalidateLayout", "method_sig": "public void invalidateLayout (Container target)", "description": "Indicates that a child has changed its layout related information,\n and thus any cached calculations should be flushed.\n \n This method is called by AWT when the invalidate method is called\n on the Container.  Since the invalidate method may be called\n asynchronously to the event thread, this method may be called\n asynchronously."}, {"method_name": "addLayoutComponent", "method_sig": "public void addLayoutComponent (String name,\n                               Component comp)", "description": "Not used by this class."}, {"method_name": "removeLayoutComponent", "method_sig": "public void removeLayoutComponent (Component comp)", "description": "Not used by this class."}, {"method_name": "addLayoutComponent", "method_sig": "public void addLayoutComponent (Component comp,\n                               Object constraints)", "description": "Not used by this class."}, {"method_name": "preferredLayoutSize", "method_sig": "public Dimension preferredLayoutSize (Container target)", "description": "Returns the preferred dimensions for this layout, given the components\n in the specified target container."}, {"method_name": "minimumLayoutSize", "method_sig": "public Dimension minimumLayoutSize (Container target)", "description": "Returns the minimum dimensions needed to lay out the components\n contained in the specified target container."}, {"method_name": "maximumLayoutSize", "method_sig": "public Dimension maximumLayoutSize (Container target)", "description": "Returns the maximum dimensions the target container can use\n to lay out the components it contains."}, {"method_name": "getLayoutAlignmentX", "method_sig": "public float getLayoutAlignmentX (Container target)", "description": "Returns the alignment along the X axis for the container.\n If the box is horizontal, the default\n alignment will be returned. Otherwise, the alignment needed\n to place the children along the X axis will be returned."}, {"method_name": "getLayoutAlignmentY", "method_sig": "public float getLayoutAlignmentY (Container target)", "description": "Returns the alignment along the Y axis for the container.\n If the box is vertical, the default\n alignment will be returned. Otherwise, the alignment needed\n to place the children along the Y axis will be returned."}, {"method_name": "layoutContainer", "method_sig": "public void layoutContainer (Container target)", "description": "Called by the AWT  when the specified container\n needs to be laid out."}]}