{"name": "Class KeyStoreSpi", "module": "java.base", "package": "java.security", "text": "This class defines the Service Provider Interface (SPI)\n for the KeyStore class.\n All the abstract methods in this class must be implemented by each\n cryptographic service provider who wishes to supply the implementation\n of a keystore for a particular keystore type.", "codes": ["public abstract class KeyStoreSpi\nextends Object"], "fields": [], "methods": [{"method_name": "engineGetKey", "method_sig": "public abstract Key engineGetKey (String alias,\n                                 char[] password)\n                          throws NoSuchAlgorithmException,\n                                 UnrecoverableKeyException", "description": "Returns the key associated with the given alias, using the given\n password to recover it.  The key must have been associated with\n the alias by a call to setKeyEntry,\n or by a call to setEntry with a\n PrivateKeyEntry or SecretKeyEntry."}, {"method_name": "engineGetCertificateChain", "method_sig": "public abstract Certificate[] engineGetCertificateChain (String alias)", "description": "Returns the certificate chain associated with the given alias.\n The certificate chain must have been associated with the alias\n by a call to setKeyEntry,\n or by a call to setEntry with a\n PrivateKeyEntry."}, {"method_name": "engineGetCertificate", "method_sig": "public abstract Certificate engineGetCertificate (String alias)", "description": "Returns the certificate associated with the given alias.\n\n  If the given alias name identifies an entry\n created by a call to setCertificateEntry,\n or created by a call to setEntry with a\n TrustedCertificateEntry,\n then the trusted certificate contained in that entry is returned.\n\n  If the given alias name identifies an entry\n created by a call to setKeyEntry,\n or created by a call to setEntry with a\n PrivateKeyEntry,\n then the first element of the certificate chain in that entry\n (if a chain exists) is returned."}, {"method_name": "engineGetCreationDate", "method_sig": "public abstract Date engineGetCreationDate (String alias)", "description": "Returns the creation date of the entry identified by the given alias."}, {"method_name": "engineSetKeyEntry", "method_sig": "public abstract void engineSetKeyEntry (String alias,\n                                       Key key,\n                                       char[] password,\n                                       Certificate[] chain)\n                                throws KeyStoreException", "description": "Assigns the given key to the given alias, protecting it with the given\n password.\n\n If the given key is of type java.security.PrivateKey,\n it must be accompanied by a certificate chain certifying the\n corresponding public key.\n\n If the given alias already exists, the keystore information\n associated with it is overridden by the given key (and possibly\n certificate chain)."}, {"method_name": "engineSetKeyEntry", "method_sig": "public abstract void engineSetKeyEntry (String alias,\n                                       byte[] key,\n                                       Certificate[] chain)\n                                throws KeyStoreException", "description": "Assigns the given key (that has already been protected) to the given\n alias.\n\n If the protected key is of type\n java.security.PrivateKey,\n it must be accompanied by a certificate chain certifying the\n corresponding public key.\n\n If the given alias already exists, the keystore information\n associated with it is overridden by the given key (and possibly\n certificate chain)."}, {"method_name": "engineSetCertificateEntry", "method_sig": "public abstract void engineSetCertificateEntry (String alias,\n                                               Certificate cert)\n                                        throws KeyStoreException", "description": "Assigns the given certificate to the given alias.\n\n  If the given alias identifies an existing entry\n created by a call to setCertificateEntry,\n or created by a call to setEntry with a\n TrustedCertificateEntry,\n the trusted certificate in the existing entry\n is overridden by the given certificate."}, {"method_name": "engineDeleteEntry", "method_sig": "public abstract void engineDeleteEntry (String alias)\n                                throws KeyStoreException", "description": "Deletes the entry identified by the given alias from this keystore."}, {"method_name": "engineAliases", "method_sig": "public abstract Enumeration<String> engineAliases()", "description": "Lists all the alias names of this keystore."}, {"method_name": "engineContainsAlias", "method_sig": "public abstract boolean engineContainsAlias (String alias)", "description": "Checks if the given alias exists in this keystore."}, {"method_name": "engineSize", "method_sig": "public abstract int engineSize()", "description": "Retrieves the number of entries in this keystore."}, {"method_name": "engineIsKeyEntry", "method_sig": "public abstract boolean engineIsKeyEntry (String alias)", "description": "Returns true if the entry identified by the given alias\n was created by a call to setKeyEntry,\n or created by a call to setEntry with a\n PrivateKeyEntry or a SecretKeyEntry."}, {"method_name": "engineIsCertificateEntry", "method_sig": "public abstract boolean engineIsCertificateEntry (String alias)", "description": "Returns true if the entry identified by the given alias\n was created by a call to setCertificateEntry,\n or created by a call to setEntry with a\n TrustedCertificateEntry."}, {"method_name": "engineGetCertificateAlias", "method_sig": "public abstract String engineGetCertificateAlias (Certificate cert)", "description": "Returns the (alias) name of the first keystore entry whose certificate\n matches the given certificate.\n\n This method attempts to match the given certificate with each\n keystore entry. If the entry being considered was\n created by a call to setCertificateEntry,\n or created by a call to setEntry with a\n TrustedCertificateEntry,\n then the given certificate is compared to that entry's certificate.\n\n  If the entry being considered was\n created by a call to setKeyEntry,\n or created by a call to setEntry with a\n PrivateKeyEntry,\n then the given certificate is compared to the first\n element of that entry's certificate chain."}, {"method_name": "engineStore", "method_sig": "public abstract void engineStore (OutputStream stream,\n                                 char[] password)\n                          throws IOException,\n                                 NoSuchAlgorithmException,\n                                 CertificateException", "description": "Stores this keystore to the given output stream, and protects its\n integrity with the given password."}, {"method_name": "engineStore", "method_sig": "public void engineStore (KeyStore.LoadStoreParameter param)\n                 throws IOException,\n                        NoSuchAlgorithmException,\n                        CertificateException", "description": "Stores this keystore using the given\n KeyStore.LoadStoreParmeter."}, {"method_name": "engineLoad", "method_sig": "public abstract void engineLoad (InputStream stream,\n                                char[] password)\n                         throws IOException,\n                                NoSuchAlgorithmException,\n                                CertificateException", "description": "Loads the keystore from the given input stream.\n\n A password may be given to unlock the keystore\n (e.g. the keystore resides on a hardware token device),\n or to check the integrity of the keystore data.\n If a password is not given for integrity checking,\n then integrity checking is not performed."}, {"method_name": "engineLoad", "method_sig": "public void engineLoad (KeyStore.LoadStoreParameter param)\n                throws IOException,\n                       NoSuchAlgorithmException,\n                       CertificateException", "description": "Loads the keystore using the given\n KeyStore.LoadStoreParameter.\n\n  Note that if this KeyStore has already been loaded, it is\n reinitialized and loaded again from the given parameter."}, {"method_name": "engineGetEntry", "method_sig": "public KeyStore.Entry engineGetEntry (String alias,\n                                     KeyStore.ProtectionParameter protParam)\n                              throws KeyStoreException,\n                                     NoSuchAlgorithmException,\n                                     UnrecoverableEntryException", "description": "Gets a KeyStore.Entry for the specified alias\n with the specified protection parameter."}, {"method_name": "engineSetEntry", "method_sig": "public void engineSetEntry (String alias,\n                           KeyStore.Entry entry,\n                           KeyStore.ProtectionParameter protParam)\n                    throws KeyStoreException", "description": "Saves a KeyStore.Entry under the specified alias.\n The specified protection parameter is used to protect the\n Entry.\n\n  If an entry already exists for the specified alias,\n it is overridden."}, {"method_name": "engineEntryInstanceOf", "method_sig": "public boolean engineEntryInstanceOf (String alias,\n                                     Class<? extends KeyStore.Entry> entryClass)", "description": "Determines if the keystore Entry for the specified\n alias is an instance or subclass of the specified\n entryClass."}, {"method_name": "engineProbe", "method_sig": "public boolean engineProbe (InputStream stream)\n                    throws IOException", "description": "Probes the specified input stream to determine whether it contains a\n keystore that is supported by this implementation, or not."}]}