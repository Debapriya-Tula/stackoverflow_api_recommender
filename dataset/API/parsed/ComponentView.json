{"name": "Class ComponentView", "module": "java.desktop", "package": "javax.swing.text", "text": "Component decorator that implements the view interface.  The\n entire element is used to represent the component.  This acts\n as a gateway from the display-only View implementations to\n interactive lightweight components (ie it allows components\n to be embedded into the View hierarchy).\n \n The component is placed relative to the text baseline\n according to the value returned by\n Component.getAlignmentY.  For Swing components\n this value can be conveniently set using the method\n JComponent.setAlignmentY.  For example, setting\n a value of 0.75 will cause 75 percent of the\n component to be above the baseline, and 25 percent of the\n component to be below the baseline.\n \n This class is implemented to do the extra work necessary to\n work properly in the presence of multiple threads (i.e. from\n asynchronous notification of model changes for example) by\n ensuring that all component access is done on the event thread.\n \n The component used is determined by the return value of the\n createComponent method.  The default implementation of this\n method is to return the component held as an attribute of\n the element (by calling StyleConstants.getComponent).  A\n limitation of this behavior is that the component cannot\n be used by more than one text component (i.e. with a shared\n model).  Subclasses can remove this constraint by implementing\n the createComponent to actually create a component based upon\n some kind of specification contained in the attributes.  The\n ObjectView class in the html package is an example of a\n ComponentView implementation that supports multiple component\n views of a shared model.", "codes": ["public class ComponentView\nextends View"], "fields": [], "methods": [{"method_name": "createComponent", "method_sig": "protected Component createComponent()", "description": "Create the component that is associated with\n this view.  This will be called when it has\n been determined that a new component is needed.\n This would result from a call to setParent or\n as a result of being notified that attributes\n have changed."}, {"method_name": "getComponent", "method_sig": "public final Component getComponent()", "description": "Fetch the component associated with the view."}, {"method_name": "paint", "method_sig": "public void paint (Graphics g,\n                  Shape a)", "description": "The real paint behavior occurs naturally from the association\n that the component has with its parent container (the same\n container hosting this view).  This is implemented to do nothing."}, {"method_name": "getPreferredSpan", "method_sig": "public float getPreferredSpan (int axis)", "description": "Determines the preferred span for this view along an\n axis.  This is implemented to return the value\n returned by Component.getPreferredSize along the\n axis of interest."}, {"method_name": "getMinimumSpan", "method_sig": "public float getMinimumSpan (int axis)", "description": "Determines the minimum span for this view along an\n axis.  This is implemented to return the value\n returned by Component.getMinimumSize along the\n axis of interest."}, {"method_name": "getMaximumSpan", "method_sig": "public float getMaximumSpan (int axis)", "description": "Determines the maximum span for this view along an\n axis.  This is implemented to return the value\n returned by Component.getMaximumSize along the\n axis of interest."}, {"method_name": "getAlignment", "method_sig": "public float getAlignment (int axis)", "description": "Determines the desired alignment for this view along an\n axis.  This is implemented to give the alignment of the\n embedded component."}, {"method_name": "setParent", "method_sig": "public void setParent (View p)", "description": "Sets the parent for a child view.\n The parent calls this on the child to tell it who its\n parent is, giving the view access to things like\n the hosting Container.  The superclass behavior is\n executed, followed by a call to createComponent if\n the parent view parameter is non-null and a component\n has not yet been created. The embedded components parent\n is then set to the value returned by getContainer.\n If the parent view parameter is null, this view is being\n cleaned up, thus the component is removed from its parent.\n \n The changing of the component hierarchy will\n touch the component lock, which is the one thing\n that is not safe from the View hierarchy.  Therefore,\n this functionality is executed immediately if on the\n event thread, or is queued on the event queue if\n called from another thread (notification of change\n from an asynchronous update)."}, {"method_name": "modelToView", "method_sig": "public Shape modelToView (int pos,\n                         Shape a,\n                         Position.Bias b)\n                  throws BadLocationException", "description": "Provides a mapping from the coordinate space of the model to\n that of the view."}, {"method_name": "viewToModel", "method_sig": "public int viewToModel (float x,\n                       float y,\n                       Shape a,\n                       Position.Bias[] bias)", "description": "Provides a mapping from the view coordinate space to the logical\n coordinate space of the model."}]}