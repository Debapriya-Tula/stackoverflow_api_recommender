{"name": "Class ChoiceFormat", "module": "java.base", "package": "java.text", "text": "A ChoiceFormat allows you to attach a format to a range of numbers.\n It is generally used in a MessageFormat for handling plurals.\n The choice is specified with an ascending list of doubles, where each item\n specifies a half-open interval up to the next item:\n \n\n X matches j if and only if limit[j] \u2264 X < limit[j+1]\n \n\n If there is no match, then either the first or last index is used, depending\n on whether the number (X) is too low or too high.  If the limit array is not\n in ascending order, the results of formatting will be incorrect.  ChoiceFormat\n also accepts \\u221E as equivalent to infinity(INF).\n\n \nNote:\nChoiceFormat differs from the other Format\n classes in that you create a ChoiceFormat object with a\n constructor (not with a getInstance style factory\n method). The factory methods aren't necessary because ChoiceFormat\n doesn't require any complex setup for a given locale. In fact,\n ChoiceFormat doesn't implement any locale specific behavior.\n\n \n When creating a ChoiceFormat, you must specify an array of formats\n and an array of limits. The length of these arrays must be the same.\n For example,\n \n\nlimits = {1,2,3,4,5,6,7}\nformats = {\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thur\",\"Fri\",\"Sat\"}\n \nlimits = {0, 1, ChoiceFormat.nextDouble(1)}\nformats = {\"no files\", \"one file\", \"many files\"}\n     (nextDouble can be used to get the next higher double, to\n     make the half-open interval.)\n \n\n Here is a simple example that shows formatting and parsing:\n \n\n double[] limits = {1,2,3,4,5,6,7};\n String[] dayOfWeekNames = {\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thur\",\"Fri\",\"Sat\"};\n ChoiceFormat form = new ChoiceFormat(limits, dayOfWeekNames);\n ParsePosition status = new ParsePosition(0);\n for (double i = 0.0; i <= 8.0; ++i) {\n     status.setIndex(0);\n     System.out.println(i + \" -> \" + form.format(i) + \" -> \"\n                              + form.parse(form.format(i),status));\n }\n \n\n Here is a more complex example, with a pattern format:\n \n\n double[] filelimits = {0,1,2};\n String[] filepart = {\"are no files\",\"is one file\",\"are {2} files\"};\n ChoiceFormat fileform = new ChoiceFormat(filelimits, filepart);\n Format[] testFormats = {fileform, null, NumberFormat.getInstance()};\n MessageFormat pattform = new MessageFormat(\"There {0} on {1}\");\n pattform.setFormats(testFormats);\n Object[] testArgs = {null, \"ADisk\", null};\n for (int i = 0; i < 4; ++i) {\n     testArgs[0] = new Integer(i);\n     testArgs[2] = testArgs[0];\n     System.out.println(pattform.format(testArgs));\n }\n \n\n\n Specifying a pattern for ChoiceFormat objects is fairly straightforward.\n For example:\n \n\n ChoiceFormat fmt = new ChoiceFormat(\n      \"-1#is negative| 0#is zero or fraction | 1#is one |1.0<is 1+ |2#is two |2<is more than 2.\");\n System.out.println(\"Formatter Pattern : \" + fmt.toPattern());\n\n System.out.println(\"Format with -INF : \" + fmt.format(Double.NEGATIVE_INFINITY));\n System.out.println(\"Format with -1.0 : \" + fmt.format(-1.0));\n System.out.println(\"Format with 0 : \" + fmt.format(0));\n System.out.println(\"Format with 0.9 : \" + fmt.format(0.9));\n System.out.println(\"Format with 1.0 : \" + fmt.format(1));\n System.out.println(\"Format with 1.5 : \" + fmt.format(1.5));\n System.out.println(\"Format with 2 : \" + fmt.format(2));\n System.out.println(\"Format with 2.1 : \" + fmt.format(2.1));\n System.out.println(\"Format with NaN : \" + fmt.format(Double.NaN));\n System.out.println(\"Format with +INF : \" + fmt.format(Double.POSITIVE_INFINITY));\n \n\n And the output result would be like the following:\n \n\n Format with -INF : is negative\n Format with -1.0 : is negative\n Format with 0 : is zero or fraction\n Format with 0.9 : is zero or fraction\n Format with 1.0 : is one\n Format with 1.5 : is 1+\n Format with 2 : is two\n Format with 2.1 : is more than 2.\n Format with NaN : is negative\n Format with +INF : is more than 2.\n \n\nSynchronization\n\n Choice formats are not synchronized.\n It is recommended to create separate format instances for each thread.\n If multiple threads access a format concurrently, it must be synchronized\n externally.", "codes": ["public class ChoiceFormat\nextends NumberFormat"], "fields": [], "methods": [{"method_name": "applyPattern", "method_sig": "public void applyPattern (String newPattern)", "description": "Sets the pattern."}, {"method_name": "toPattern", "method_sig": "public String toPattern()", "description": "Gets the pattern."}, {"method_name": "setChoices", "method_sig": "public void setChoices (double[] limits,\n                       String[] formats)", "description": "Set the choices to be used in formatting."}, {"method_name": "getLimits", "method_sig": "public double[] getLimits()", "description": "Get the limits passed in the constructor."}, {"method_name": "getFormats", "method_sig": "public Object[] getFormats()", "description": "Get the formats passed in the constructor."}, {"method_name": "format", "method_sig": "public StringBuffer format (long number,\n                           StringBuffer toAppendTo,\n                           FieldPosition status)", "description": "Specialization of format. This method really calls\n format(double, StringBuffer, FieldPosition)\n thus the range of longs that are supported is only equal to\n the range that can be stored by double. This will never be\n a practical limitation."}, {"method_name": "format", "method_sig": "public StringBuffer format (double number,\n                           StringBuffer toAppendTo,\n                           FieldPosition status)", "description": "Returns pattern with formatted double."}, {"method_name": "parse", "method_sig": "public Number parse (String text,\n                    ParsePosition status)", "description": "Parses a Number from the input text."}, {"method_name": "nextDouble", "method_sig": "public static final double nextDouble (double d)", "description": "Finds the least double greater than d.\n If NaN, returns same value.\n Used to make half-open intervals."}, {"method_name": "previousDouble", "method_sig": "public static final double previousDouble (double d)", "description": "Finds the greatest double less than d.\n If NaN, returns same value."}, {"method_name": "clone", "method_sig": "public Object clone()", "description": "Overrides Cloneable"}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Generates a hash code for the message format object."}, {"method_name": "equals", "method_sig": "public boolean equals (Object obj)", "description": "Equality comparison between two"}, {"method_name": "nextDouble", "method_sig": "public static double nextDouble (double d,\n                                boolean positive)", "description": "Finds the least double greater than d (if positive is\n true), or the greatest double less than d (if\n positive is false).\n If NaN, returns same value.\n\n Does not affect floating-point flags,\n provided these member functions do not:\n          Double.longBitsToDouble(long)\n          Double.doubleToLongBits(double)\n          Double.isNaN(double)"}]}