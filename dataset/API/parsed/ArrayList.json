{"name": "Class ArrayList<E>", "module": "java.base", "package": "java.util", "text": "Resizable-array implementation of the List interface.  Implements\n all optional list operations, and permits all elements, including\n null.  In addition to implementing the List interface,\n this class provides methods to manipulate the size of the array that is\n used internally to store the list.  (This class is roughly equivalent to\n Vector, except that it is unsynchronized.)\n\n The size, isEmpty, get, set,\n iterator, and listIterator operations run in constant\n time.  The add operation runs in amortized constant time,\n that is, adding n elements requires O(n) time.  All of the other operations\n run in linear time (roughly speaking).  The constant factor is low compared\n to that for the LinkedList implementation.\n\n Each ArrayList instance has a capacity.  The capacity is\n the size of the array used to store the elements in the list.  It is always\n at least as large as the list size.  As elements are added to an ArrayList,\n its capacity grows automatically.  The details of the growth policy are not\n specified beyond the fact that adding an element has constant amortized\n time cost.\n\n An application can increase the capacity of an ArrayList instance\n before adding a large number of elements using the ensureCapacity\n operation.  This may reduce the amount of incremental reallocation.\n\n Note that this implementation is not synchronized.\n If multiple threads access an ArrayList instance concurrently,\n and at least one of the threads modifies the list structurally, it\n must be synchronized externally.  (A structural modification is\n any operation that adds or deletes one or more elements, or explicitly\n resizes the backing array; merely setting the value of an element is not\n a structural modification.)  This is typically accomplished by\n synchronizing on some object that naturally encapsulates the list.\n\n If no such object exists, the list should be \"wrapped\" using the\n Collections.synchronizedList\n method.  This is best done at creation time, to prevent accidental\n unsynchronized access to the list:\n   List list = Collections.synchronizedList(new ArrayList(...));\n\n The iterators returned by this class's iterator and\n listIterator methods are fail-fast:\n if the list is structurally modified at any time after the iterator is\n created, in any way except through the iterator's own\n remove or\n add methods, the iterator will throw a\n ConcurrentModificationException.  Thus, in the face of\n concurrent modification, the iterator fails quickly and cleanly, rather\n than risking arbitrary, non-deterministic behavior at an undetermined\n time in the future.\n\n Note that the fail-fast behavior of an iterator cannot be guaranteed\n as it is, generally speaking, impossible to make any hard guarantees in the\n presence of unsynchronized concurrent modification.  Fail-fast iterators\n throw ConcurrentModificationException on a best-effort basis.\n Therefore, it would be wrong to write a program that depended on this\n exception for its correctness:  the fail-fast behavior of iterators\n should be used only to detect bugs.\nThis class is a member of the\n \n Java Collections Framework.", "codes": ["public class ArrayList<E>\nextends AbstractList<E>\nimplements List<E>, RandomAccess, Cloneable, Serializable"], "fields": [], "methods": [{"method_name": "trimToSize", "method_sig": "public void trimToSize()", "description": "Trims the capacity of this ArrayList instance to be the\n list's current size.  An application can use this operation to minimize\n the storage of an ArrayList instance."}, {"method_name": "ensureCapacity", "method_sig": "public void ensureCapacity (int minCapacity)", "description": "Increases the capacity of this ArrayList instance, if\n necessary, to ensure that it can hold at least the number of elements\n specified by the minimum capacity argument."}, {"method_name": "size", "method_sig": "public int size()", "description": "Returns the number of elements in this list."}, {"method_name": "isEmpty", "method_sig": "public boolean isEmpty()", "description": "Returns true if this list contains no elements."}, {"method_name": "contains", "method_sig": "public boolean contains (Object o)", "description": "Returns true if this list contains the specified element.\n More formally, returns true if and only if this list contains\n at least one element e such that\n Objects.equals(o, e)."}, {"method_name": "indexOf", "method_sig": "public int indexOf (Object o)", "description": "Returns the index of the first occurrence of the specified element\n in this list, or -1 if this list does not contain the element.\n More formally, returns the lowest index i such that\n Objects.equals(o, get(i)),\n or -1 if there is no such index."}, {"method_name": "lastIndexOf", "method_sig": "public int lastIndexOf (Object o)", "description": "Returns the index of the last occurrence of the specified element\n in this list, or -1 if this list does not contain the element.\n More formally, returns the highest index i such that\n Objects.equals(o, get(i)),\n or -1 if there is no such index."}, {"method_name": "clone", "method_sig": "public Object clone()", "description": "Returns a shallow copy of this ArrayList instance.  (The\n elements themselves are not copied.)"}, {"method_name": "toArray", "method_sig": "public Object[] toArray()", "description": "Returns an array containing all of the elements in this list\n in proper sequence (from first to last element).\n\n The returned array will be \"safe\" in that no references to it are\n maintained by this list.  (In other words, this method must allocate\n a new array).  The caller is thus free to modify the returned array.\n\n This method acts as bridge between array-based and collection-based\n APIs."}, {"method_name": "toArray", "method_sig": "public <T> T[] toArray (T[] a)", "description": "Returns an array containing all of the elements in this list in proper\n sequence (from first to last element); the runtime type of the returned\n array is that of the specified array.  If the list fits in the\n specified array, it is returned therein.  Otherwise, a new array is\n allocated with the runtime type of the specified array and the size of\n this list.\n\n If the list fits in the specified array with room to spare\n (i.e., the array has more elements than the list), the element in\n the array immediately following the end of the collection is set to\n null.  (This is useful in determining the length of the\n list only if the caller knows that the list does not contain\n any null elements.)"}, {"method_name": "get", "method_sig": "public E get (int index)", "description": "Returns the element at the specified position in this list."}, {"method_name": "set", "method_sig": "public E set (int index,\n             E element)", "description": "Replaces the element at the specified position in this list with\n the specified element."}, {"method_name": "add", "method_sig": "public boolean add (E e)", "description": "Appends the specified element to the end of this list."}, {"method_name": "add", "method_sig": "public void add (int index,\n                E element)", "description": "Inserts the specified element at the specified position in this\n list. Shifts the element currently at that position (if any) and\n any subsequent elements to the right (adds one to their indices)."}, {"method_name": "remove", "method_sig": "public E remove (int index)", "description": "Removes the element at the specified position in this list.\n Shifts any subsequent elements to the left (subtracts one from their\n indices)."}, {"method_name": "remove", "method_sig": "public boolean remove (Object o)", "description": "Removes the first occurrence of the specified element from this list,\n if it is present.  If the list does not contain the element, it is\n unchanged.  More formally, removes the element with the lowest index\n i such that\n Objects.equals(o, get(i))\n (if such an element exists).  Returns true if this list\n contained the specified element (or equivalently, if this list\n changed as a result of the call)."}, {"method_name": "clear", "method_sig": "public void clear()", "description": "Removes all of the elements from this list.  The list will\n be empty after this call returns."}, {"method_name": "addAll", "method_sig": "public boolean addAll (Collection<? extends E> c)", "description": "Appends all of the elements in the specified collection to the end of\n this list, in the order that they are returned by the\n specified collection's Iterator.  The behavior of this operation is\n undefined if the specified collection is modified while the operation\n is in progress.  (This implies that the behavior of this call is\n undefined if the specified collection is this list, and this\n list is nonempty.)"}, {"method_name": "addAll", "method_sig": "public boolean addAll (int index,\n                      Collection<? extends E> c)", "description": "Inserts all of the elements in the specified collection into this\n list, starting at the specified position.  Shifts the element\n currently at that position (if any) and any subsequent elements to\n the right (increases their indices).  The new elements will appear\n in the list in the order that they are returned by the\n specified collection's iterator."}, {"method_name": "removeRange", "method_sig": "protected void removeRange (int fromIndex,\n                           int toIndex)", "description": "Removes from this list all of the elements whose index is between\n fromIndex, inclusive, and toIndex, exclusive.\n Shifts any succeeding elements to the left (reduces their index).\n This call shortens the list by (toIndex - fromIndex) elements.\n (If toIndex==fromIndex, this operation has no effect.)"}, {"method_name": "removeAll", "method_sig": "public boolean removeAll (Collection<?> c)", "description": "Removes from this list all of its elements that are contained in the\n specified collection."}, {"method_name": "retainAll", "method_sig": "public boolean retainAll (Collection<?> c)", "description": "Retains only the elements in this list that are contained in the\n specified collection.  In other words, removes from this list all\n of its elements that are not contained in the specified collection."}, {"method_name": "listIterator", "method_sig": "public ListIterator<E> listIterator (int index)", "description": "Returns a list iterator over the elements in this list (in proper\n sequence), starting at the specified position in the list.\n The specified index indicates the first element that would be\n returned by an initial call to next.\n An initial call to previous would\n return the element with the specified index minus one.\n\n The returned list iterator is fail-fast."}, {"method_name": "listIterator", "method_sig": "public ListIterator<E> listIterator()", "description": "Returns a list iterator over the elements in this list (in proper\n sequence).\n\n The returned list iterator is fail-fast."}, {"method_name": "iterator", "method_sig": "public Iterator<E> iterator()", "description": "Returns an iterator over the elements in this list in proper sequence.\n\n The returned iterator is fail-fast."}, {"method_name": "subList", "method_sig": "public List<E> subList (int fromIndex,\n                       int toIndex)", "description": "Returns a view of the portion of this list between the specified\n fromIndex, inclusive, and toIndex, exclusive.  (If\n fromIndex and toIndex are equal, the returned list is\n empty.)  The returned list is backed by this list, so non-structural\n changes in the returned list are reflected in this list, and vice-versa.\n The returned list supports all of the optional list operations.\n\n This method eliminates the need for explicit range operations (of\n the sort that commonly exist for arrays).  Any operation that expects\n a list can be used as a range operation by passing a subList view\n instead of a whole list.  For example, the following idiom\n removes a range of elements from a list:\n \n      list.subList(from, to).clear();\n \n Similar idioms may be constructed for indexOf(Object) and\n lastIndexOf(Object), and all of the algorithms in the\n Collections class can be applied to a subList.\n\n The semantics of the list returned by this method become undefined if\n the backing list (i.e., this list) is structurally modified in\n any way other than via the returned list.  (Structural modifications are\n those that change the size of this list, or otherwise perturb it in such\n a fashion that iterations in progress may yield incorrect results.)"}, {"method_name": "forEach", "method_sig": "public void forEach (Consumer<? super E> action)", "description": "Description copied from interface:\u00a0Iterable"}, {"method_name": "spliterator", "method_sig": "public Spliterator<E> spliterator()", "description": "Creates a late-binding\n and fail-fast Spliterator over the elements in this\n list.\n\n The Spliterator reports Spliterator.SIZED,\n Spliterator.SUBSIZED, and Spliterator.ORDERED.\n Overriding implementations should document the reporting of additional\n characteristic values."}, {"method_name": "removeIf", "method_sig": "public boolean removeIf (Predicate<? super E> filter)", "description": "Description copied from interface:\u00a0Collection"}]}