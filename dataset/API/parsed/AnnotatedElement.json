{"name": "Interface AnnotatedElement", "module": "java.base", "package": "java.lang.reflect", "text": "Represents an annotated element of the program currently running in this\n VM.  This interface allows annotations to be read reflectively.  All\n annotations returned by methods in this interface are immutable and\n serializable. The arrays returned by methods of this interface may be modified\n by callers without affecting the arrays returned to other callers.\n\n The getAnnotationsByType(Class) and getDeclaredAnnotationsByType(Class) methods support multiple\n annotations of the same type on an element. If the argument to\n either method is a repeatable annotation type (JLS 9.6), then the\n method will \"look through\" a container annotation (JLS 9.7), if\n present, and return any annotations inside the container. Container\n annotations may be generated at compile-time to wrap multiple\n annotations of the argument type.\n\n The terms directly present, indirectly present,\n present, and associated are used throughout this\n interface to describe precisely which annotations are returned by\n methods:\n\n \n An annotation A is directly present on an\n element E if E has a \n RuntimeVisibleAnnotations or \n RuntimeVisibleParameterAnnotations or \n RuntimeVisibleTypeAnnotations attribute, and the attribute\n contains A.\n\n An annotation A is indirectly present on an\n element E if E has a RuntimeVisibleAnnotations or\n RuntimeVisibleParameterAnnotations or RuntimeVisibleTypeAnnotations\n attribute, and A 's type is repeatable, and the attribute contains\n exactly one annotation whose value element contains A and whose\n type is the containing annotation type of A 's type.\n\n An annotation A is present on an element E if either:\n\n \nA is directly present on E; or\n\n No annotation of A 's type is directly present on\n E, and E is a class, and A 's type is\n inheritable, and A is present on the superclass of E.\n\n \nAn annotation A is associated with an element E\n if either:\n\n \nA is directly or indirectly present on E; or\n\n No annotation of A 's type is directly or indirectly\n present on E, and E is a class, and A's type\n is inheritable, and A is associated with the superclass of\n E.\n\n \n\nThe table below summarizes which kind of annotation presence\n different methods in this interface examine.\n\n \nOverview of kind of presence detected by different AnnotatedElement methods\n\nMethod\nKind of Presence\nReturn Type\nSignature\nDirectly Present\nIndirectly Present\nPresent\nAssociated\n\n\nT\ngetAnnotation(Class<T>)\nX\n\nAnnotation[]\ngetAnnotations()\nX\n\nT[]\ngetAnnotationsByType(Class<T>)\nX\n\nT\ngetDeclaredAnnotation(Class<T>)\nX\n\nAnnotation[]\ngetDeclaredAnnotations()\nX\n\nT[]\ngetDeclaredAnnotationsByType(Class<T>)\nXX\n\n\n\nFor an invocation of get[Declared]AnnotationsByType( Class <\n T >), the order of annotations which are directly or indirectly\n present on an element E is computed as if indirectly present\n annotations on E are directly present on E in place\n of their container annotation, in the order in which they appear in\n the value element of the container annotation.\n\n There are several compatibility concerns to keep in mind if an\n annotation type T is originally not repeatable and\n later modified to be repeatable.\n\n The containing annotation type for T is TC.\n\n \nModifying T to be repeatable is source and binary\n compatible with existing uses of T and with existing uses\n of TC.\n\n That is, for source compatibility, source code with annotations of\n type T or of type TC will still compile. For binary\n compatibility, class files with annotations of type T or of\n type TC (or with other kinds of uses of type T or of\n type TC) will link against the modified version of T\n if they linked against the earlier version.\n\n (An annotation type TC may informally serve as an acting\n containing annotation type before T is modified to be\n formally repeatable. Alternatively, when T is made\n repeatable, TC can be introduced as a new type.)\n\n If an annotation type TC is present on an element, and\n T is modified to be repeatable with TC as its\n containing annotation type then:\n\n \nThe change to T is behaviorally compatible with respect\n to the get[Declared]Annotation(Class<T>) (called with an\n argument of T or TC) and \n get[Declared]Annotations() methods because the results of the\n methods will not change due to TC becoming the containing\n annotation type for T.\n\n The change to T changes the results of the \n get[Declared]AnnotationsByType(Class<T>) methods called with an\n argument of T, because those methods will now recognize an\n annotation of type TC as a container annotation for T\n and will \"look through\" it to expose annotations of type T.\n\n \nIf an annotation of type T is present on an\n element and T is made repeatable and more annotations of\n type T are added to the element:\n\n \n The addition of the annotations of type T is both\n source compatible and binary compatible.\n\n The addition of the annotations of type T changes the results\n of the get[Declared]Annotation(Class<T>) methods and \n get[Declared]Annotations() methods, because those methods will now\n only see a container annotation on the element and not see an\n annotation of type T.\n\n The addition of the annotations of type T changes the\n results of the get[Declared]AnnotationsByType(Class<T>)\n methods, because their results will expose the additional\n annotations of type T whereas previously they exposed only a\n single annotation of type T.\n\n \n\nIf an annotation returned by a method in this interface contains\n (directly or indirectly) a Class-valued member referring to\n a class that is not accessible in this VM, attempting to read the class\n by calling the relevant Class-returning method on the returned annotation\n will result in a TypeNotPresentException.\n\n Similarly, attempting to read an enum-valued member will result in\n a EnumConstantNotPresentException if the enum constant in the\n annotation is no longer present in the enum type.\n\n If an annotation type T is (meta-)annotated with an\n @Repeatable annotation whose value element indicates a type\n TC, but TC does not declare a value() method\n with a return type of T[], then an exception of type\n AnnotationFormatError is thrown.\n\n Finally, attempting to read a member whose definition has evolved\n incompatibly will result in a AnnotationTypeMismatchException or an\n IncompleteAnnotationException.", "codes": ["public interface AnnotatedElement"], "fields": [], "methods": [{"method_name": "isAnnotationPresent", "method_sig": "default boolean isAnnotationPresent (Class<? extends Annotation> annotationClass)", "description": "Returns true if an annotation for the specified type\n is present on this element, else false.  This method\n is designed primarily for convenient access to marker annotations.\n\n The truth value returned by this method is equivalent to:\n getAnnotation(annotationClass) != null\nThe body of the default method is specified to be the code\n above."}, {"method_name": "getAnnotation", "method_sig": "<T extends Annotation> T getAnnotation (Class<T> annotationClass)", "description": "Returns this element's annotation for the specified type if\n such an annotation is present, else null."}, {"method_name": "getAnnotations", "method_sig": "Annotation[] getAnnotations()", "description": "Returns annotations that are present on this element.\n\n If there are no annotations present on this element, the return\n value is an array of length 0.\n\n The caller of this method is free to modify the returned array; it will\n have no effect on the arrays returned to other callers."}, {"method_name": "getAnnotationsByType", "method_sig": "default <T extends Annotation> T[] getAnnotationsByType (Class<T> annotationClass)", "description": "Returns annotations that are associated with this element.\n\n If there are no annotations associated with this element, the return\n value is an array of length 0.\n\n The difference between this method and getAnnotation(Class)\n is that this method detects if its argument is a repeatable\n annotation type (JLS 9.6), and if so, attempts to find one or\n more annotations of that type by \"looking through\" a container\n annotation.\n\n The caller of this method is free to modify the returned array; it will\n have no effect on the arrays returned to other callers."}, {"method_name": "getDeclaredAnnotation", "method_sig": "default <T extends Annotation> T getDeclaredAnnotation (Class<T> annotationClass)", "description": "Returns this element's annotation for the specified type if\n such an annotation is directly present, else null.\n\n This method ignores inherited annotations. (Returns null if no\n annotations are directly present on this element.)"}, {"method_name": "getDeclaredAnnotationsByType", "method_sig": "default <T extends Annotation> T[] getDeclaredAnnotationsByType (Class<T> annotationClass)", "description": "Returns this element's annotation(s) for the specified type if\n such annotations are either directly present or\n indirectly present. This method ignores inherited\n annotations.\n\n If there are no specified annotations directly or indirectly\n present on this element, the return value is an array of length\n 0.\n\n The difference between this method and getDeclaredAnnotation(Class) is that this method detects if its\n argument is a repeatable annotation type (JLS 9.6), and if so,\n attempts to find one or more annotations of that type by \"looking\n through\" a container annotation if one is present.\n\n The caller of this method is free to modify the returned array; it will\n have no effect on the arrays returned to other callers."}, {"method_name": "getDeclaredAnnotations", "method_sig": "Annotation[] getDeclaredAnnotations()", "description": "Returns annotations that are directly present on this element.\n This method ignores inherited annotations.\n\n If there are no annotations directly present on this element,\n the return value is an array of length 0.\n\n The caller of this method is free to modify the returned array; it will\n have no effect on the arrays returned to other callers."}]}