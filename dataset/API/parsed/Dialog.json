{"name": "Class Dialog", "module": "java.desktop", "package": "java.awt", "text": "A Dialog is a top-level window with a title and a border\n that is typically used to take some form of input from the user.\n\n The size of the dialog includes any area designated for the\n border.  The dimensions of the border area can be obtained\n using the getInsets method, however, since\n these dimensions are platform-dependent, a valid insets\n value cannot be obtained until the dialog is made displayable\n by either calling pack or show.\n Since the border area is included in the overall size of the\n dialog, the border effectively obscures a portion of the dialog,\n constraining the area available for rendering and/or displaying\n subcomponents to the rectangle which has an upper-left corner\n location of (insets.left, insets.top), and has a size of\n width - (insets.left + insets.right) by\n height - (insets.top + insets.bottom).\n \n The default layout for a dialog is BorderLayout.\n \n A dialog may have its native decorations (i.e. Frame & Titlebar) turned off\n with setUndecorated.  This can only be done while the dialog\n is not displayable.\n \n A dialog may have another window as its owner when it's constructed.  When\n the owner window of a visible dialog is minimized, the dialog will\n automatically be hidden from the user. When the owner window is subsequently\n restored, the dialog is made visible to the user again.\n \n In a multi-screen environment, you can create a Dialog\n on a different screen device than its owner.  See Frame for\n more information.\n \n A dialog can be either modeless (the default) or modal.  A modal\n dialog is one which blocks input to some other top-level windows\n in the application, except for any windows created with the dialog\n as their owner. See AWT Modality\n specification for details.\n \n Dialogs are capable of generating the following\n WindowEvents:\n WindowOpened, WindowClosing,\n WindowClosed, WindowActivated,\n WindowDeactivated, WindowGainedFocus,\n WindowLostFocus.", "codes": ["public class Dialog\nextends Window"], "fields": [{"field_name": "DEFAULT_MODALITY_TYPE", "field_sig": "public static final\u00a0Dialog.ModalityType DEFAULT_MODALITY_TYPE", "description": "Default modality type for modal dialogs. The default modality type is\n APPLICATION_MODAL. Calling the oldstyle setModal(true)\n is equal to setModalityType(DEFAULT_MODALITY_TYPE)."}], "methods": [{"method_name": "addNotify", "method_sig": "public void addNotify()", "description": "Makes this Dialog displayable by connecting it to\n a native screen resource.  Making a dialog displayable will\n cause any of its children to be made displayable.\n This method is called internally by the toolkit and should\n not be called directly by programs."}, {"method_name": "isModal", "method_sig": "public boolean isModal()", "description": "Indicates whether the dialog is modal.\n \n This method is obsolete and is kept for backwards compatibility only.\n Use getModalityType() instead."}, {"method_name": "setModal", "method_sig": "public void setModal (boolean modal)", "description": "Specifies whether this dialog should be modal.\n \n This method is obsolete and is kept for backwards compatibility only.\n Use setModalityType() instead.\n \n Note: changing modality of the visible dialog may have no effect\n until it is hidden and then shown again."}, {"method_name": "getModalityType", "method_sig": "public Dialog.ModalityType getModalityType()", "description": "Returns the modality type of this dialog."}, {"method_name": "setModalityType", "method_sig": "public void setModalityType (Dialog.ModalityType type)", "description": "Sets the modality type for this dialog. See ModalityType for possible modality types.\n \n If the given modality type is not supported, MODELESS\n is used. You may want to call getModalityType() after calling\n this method to ensure that the modality type has been set.\n \n Note: changing modality of the visible dialog may have no effect\n until it is hidden and then shown again."}, {"method_name": "getTitle", "method_sig": "public String getTitle()", "description": "Gets the title of the dialog. The title is displayed in the\n dialog's border."}, {"method_name": "setTitle", "method_sig": "public void setTitle (String title)", "description": "Sets the title of the Dialog."}, {"method_name": "setVisible", "method_sig": "public void setVisible (boolean b)", "description": "Shows or hides this Dialog depending on the value of parameter\n b."}, {"method_name": "show", "method_sig": "@Deprecated\npublic void show()", "description": "Makes the Dialog visible. If the dialog and/or its owner\n are not yet displayable, both are made displayable.  The\n dialog will be validated prior to being made visible.\n If the dialog is already visible, this will bring the dialog\n to the front.\n \n If the dialog is modal and is not already visible, this call\n will not return until the dialog is hidden by calling hide or\n dispose. It is permissible to show modal dialogs from the event\n dispatching thread because the toolkit will ensure that another\n event pump runs while the one which invoked this method is blocked."}, {"method_name": "hide", "method_sig": "@Deprecated\npublic void hide()", "description": "Hides the Dialog and then causes show to return if it is currently\n blocked."}, {"method_name": "toBack", "method_sig": "public void toBack()", "description": "If this Window is visible, sends this Window to the back and may cause\n it to lose focus or activation if it is the focused or active Window.\n \n Places this Window at the bottom of the stacking order and shows it\n behind any other Windows in this VM. No action will take place is this\n Window is not visible. Some platforms do not allow Windows which are\n owned by other Windows to appear below their owners. Every attempt will\n be made to move this Window as low as possible in the stacking order;\n however, developers should not assume that this method will move this\n Window below all other windows in every situation.\n \n Because of variations in native windowing systems, no guarantees about\n changes to the focused and active Windows can be made. Developers must\n never assume that this Window is no longer the focused or active Window\n until this Window receives a WINDOW_LOST_FOCUS or WINDOW_DEACTIVATED\n event. On platforms where the top-most window is the focused window,\n this method will probably cause this Window to lose focus. In\n that case, the next highest, focusable Window in this VM will receive\n focus. On platforms where the stacking order does not typically affect\n the focused window, this method will probably leave the focused\n and active Windows unchanged.\n \n If this dialog is modal and blocks some windows, then all of them are\n also sent to the back to keep them below the blocking dialog."}, {"method_name": "isResizable", "method_sig": "public boolean isResizable()", "description": "Indicates whether this dialog is resizable by the user.\n By default, all dialogs are initially resizable."}, {"method_name": "setResizable", "method_sig": "public void setResizable (boolean resizable)", "description": "Sets whether this dialog is resizable by the user."}, {"method_name": "setUndecorated", "method_sig": "public void setUndecorated (boolean undecorated)", "description": "Disables or enables decorations for this dialog.\n \n This method can only be called while the dialog is not displayable. To\n make this dialog decorated, it must be opaque and have the default shape,\n otherwise the IllegalComponentStateException will be thrown.\n Refer to Window.setShape(java.awt.Shape), Window.setOpacity(float) and Window.setBackground(java.awt.Color) for details"}, {"method_name": "isUndecorated", "method_sig": "public boolean isUndecorated()", "description": "Indicates whether this dialog is undecorated.\n By default, all dialogs are initially decorated."}, {"method_name": "paramString", "method_sig": "protected String paramString()", "description": "Returns a string representing the state of this dialog. This\n method is intended to be used only for debugging purposes, and the\n content and format of the returned string may vary between\n implementations. The returned string may be empty but may not be\n null."}, {"method_name": "getAccessibleContext", "method_sig": "public AccessibleContext getAccessibleContext()", "description": "Gets the AccessibleContext associated with this Dialog.\n For dialogs, the AccessibleContext takes the form of an\n AccessibleAWTDialog.\n A new AccessibleAWTDialog instance is created if necessary."}]}