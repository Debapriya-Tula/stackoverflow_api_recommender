{"name": "Class DragGestureEvent", "module": "java.desktop", "package": "java.awt.dnd", "text": "A DragGestureEvent is passed\n to DragGestureListener's\n dragGestureRecognized() method\n when a particular DragGestureRecognizer detects that a\n platform dependent drag initiating gesture has occurred\n on the Component that it is tracking.\n\n The action field of any DragGestureEvent instance should take one of the following\n values:\n \n DnDConstants.ACTION_COPY\n DnDConstants.ACTION_MOVE\n DnDConstants.ACTION_LINK\n\n Assigning the value different from listed above will cause an unspecified behavior.", "codes": ["public class DragGestureEvent\nextends EventObject"], "fields": [], "methods": [{"method_name": "getSourceAsDragGestureRecognizer", "method_sig": "public DragGestureRecognizer getSourceAsDragGestureRecognizer()", "description": "Returns the source as a DragGestureRecognizer."}, {"method_name": "getComponent", "method_sig": "public Component getComponent()", "description": "Returns the Component associated\n with this DragGestureEvent."}, {"method_name": "getDragSource", "method_sig": "public DragSource getDragSource()", "description": "Returns the DragSource."}, {"method_name": "getDragOrigin", "method_sig": "public Point getDragOrigin()", "description": "Returns a Point in the coordinates\n of the Component over which the drag originated."}, {"method_name": "iterator", "method_sig": "public Iterator<InputEvent> iterator()", "description": "Returns an Iterator for the events\n comprising the gesture."}, {"method_name": "toArray", "method_sig": "public Object[] toArray()", "description": "Returns an Object array of the\n events comprising the drag gesture."}, {"method_name": "toArray", "method_sig": "public Object[] toArray (Object[] array)", "description": "Returns an array of the events comprising the drag gesture."}, {"method_name": "getDragAction", "method_sig": "public int getDragAction()", "description": "Returns an int representing the\n action selected by the user."}, {"method_name": "getTriggerEvent", "method_sig": "public InputEvent getTriggerEvent()", "description": "Returns the initial event that triggered the gesture."}, {"method_name": "startDrag", "method_sig": "public void startDrag (Cursor dragCursor,\n                      Transferable transferable)\n               throws InvalidDnDOperationException", "description": "Starts the drag operation given the Cursor for this drag\n operation and the Transferable representing the source data\n for this drag operation.\n \n If a null Cursor is specified no exception will\n be thrown and default drag cursors will be used instead.\n \n If a null Transferable is specified\n NullPointerException will be thrown."}, {"method_name": "startDrag", "method_sig": "public void startDrag (Cursor dragCursor,\n                      Transferable transferable,\n                      DragSourceListener dsl)\n               throws InvalidDnDOperationException", "description": "Starts the drag given the initial Cursor to display,\n the Transferable object,\n and the DragSourceListener to use."}, {"method_name": "startDrag", "method_sig": "public void startDrag (Cursor dragCursor,\n                      Image dragImage,\n                      Point imageOffset,\n                      Transferable transferable,\n                      DragSourceListener dsl)\n               throws InvalidDnDOperationException", "description": "Start the drag given the initial Cursor to display,\n a drag Image, the offset of\n the Image,\n the Transferable object, and\n the DragSourceListener to use."}]}