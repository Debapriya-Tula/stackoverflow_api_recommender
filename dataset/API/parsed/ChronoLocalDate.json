{"name": "Interface ChronoLocalDate", "module": "java.base", "package": "java.time.chrono", "text": "A date without time-of-day or time-zone in an arbitrary chronology, intended\n for advanced globalization use cases.\n \nMost applications should declare method signatures, fields and variables\n as LocalDate, not this interface.\n\n A ChronoLocalDate is the abstract representation of a date where the\n Chronology chronology, or calendar system, is pluggable.\n The date is defined in terms of fields expressed by TemporalField,\n where most common implementations are defined in ChronoField.\n The chronology defines how the calendar system operates and the meaning of\n the standard fields.\n\n When to use this interface\n The design of the API encourages the use of LocalDate rather than this\n interface, even in the case where the application needs to deal with multiple\n calendar systems.\n \n This concept can seem surprising at first, as the natural way to globalize an\n application might initially appear to be to abstract the calendar system.\n However, as explored below, abstracting the calendar system is usually the wrong\n approach, resulting in logic errors and hard to find bugs.\n As such, it should be considered an application-wide architectural decision to choose\n to use this interface as opposed to LocalDate.\n\n Architectural issues to consider\n These are some of the points that must be considered before using this interface\n throughout an application.\n \n 1) Applications using this interface, as opposed to using just LocalDate,\n face a significantly higher probability of bugs. This is because the calendar system\n in use is not known at development time. A key cause of bugs is where the developer\n applies assumptions from their day-to-day knowledge of the ISO calendar system\n to code that is intended to deal with any arbitrary calendar system.\n The section below outlines how those assumptions can cause problems\n The primary mechanism for reducing this increased risk of bugs is a strong code review process.\n This should also be considered a extra cost in maintenance for the lifetime of the code.\n \n 2) This interface does not enforce immutability of implementations.\n While the implementation notes indicate that all implementations must be immutable\n there is nothing in the code or type system to enforce this. Any method declared\n to accept a ChronoLocalDate could therefore be passed a poorly or\n maliciously written mutable implementation.\n \n 3) Applications using this interface  must consider the impact of eras.\n LocalDate shields users from the concept of eras, by ensuring that getYear()\n returns the proleptic year. That decision ensures that developers can think of\n LocalDate instances as consisting of three fields - year, month-of-year and day-of-month.\n By contrast, users of this interface must think of dates as consisting of four fields -\n era, year-of-era, month-of-year and day-of-month. The extra era field is frequently\n forgotten, yet it is of vital importance to dates in an arbitrary calendar system.\n For example, in the Japanese calendar system, the era represents the reign of an Emperor.\n Whenever one reign ends and another starts, the year-of-era is reset to one.\n \n 4) The only agreed international standard for passing a date between two systems\n is the ISO-8601 standard which requires the ISO calendar system. Using this interface\n throughout the application will inevitably lead to the requirement to pass the date\n across a network or component boundary, requiring an application specific protocol or format.\n \n 5) Long term persistence, such as a database, will almost always only accept dates in the\n ISO-8601 calendar system (or the related Julian-Gregorian). Passing around dates in other\n calendar systems increases the complications of interacting with persistence.\n \n 6) Most of the time, passing a ChronoLocalDate throughout an application\n is unnecessary, as discussed in the last section below.\n\n False assumptions causing bugs in multi-calendar system code\n As indicated above, there are many issues to consider when try to use and manipulate a\n date in an arbitrary calendar system. These are some of the key issues.\n \n Code that queries the day-of-month and assumes that the value will never be more than\n 31 is invalid. Some calendar systems have more than 31 days in some months.\n \n Code that adds 12 months to a date and assumes that a year has been added is invalid.\n Some calendar systems have a different number of months, such as 13 in the Coptic or Ethiopic.\n \n Code that adds one month to a date and assumes that the month-of-year value will increase\n by one or wrap to the next year is invalid. Some calendar systems have a variable number\n of months in a year, such as the Hebrew.\n \n Code that adds one month, then adds a second one month and assumes that the day-of-month\n will remain close to its original value is invalid. Some calendar systems have a large difference\n between the length of the longest month and the length of the shortest month.\n For example, the Coptic or Ethiopic have 12 months of 30 days and 1 month of 5 days.\n \n Code that adds seven days and assumes that a week has been added is invalid.\n Some calendar systems have weeks of other than seven days, such as the French Revolutionary.\n \n Code that assumes that because the year of date1 is greater than the year of date2\n then date1 is after date2 is invalid. This is invalid for all calendar systems\n when referring to the year-of-era, and especially untrue of the Japanese calendar system\n where the year-of-era restarts with the reign of every new Emperor.\n \n Code that treats month-of-year one and day-of-month one as the start of the year is invalid.\n Not all calendar systems start the year when the month value is one.\n \n In general, manipulating a date, and even querying a date, is wide open to bugs when the\n calendar system is unknown at development time. This is why it is essential that code using\n this interface is subjected to additional code reviews. It is also why an architectural\n decision to avoid this interface type is usually the correct one.\n\n Using LocalDate instead\n The primary alternative to using this interface throughout your application is as follows.\n \nDeclare all method signatures referring to dates in terms of LocalDate.\n Either store the chronology (calendar system) in the user profile or lookup\n  the chronology from the user locale\n Convert the ISO LocalDate to and from the user's preferred calendar system during\n  printing and parsing\n \n This approach treats the problem of globalized calendar systems as a localization issue\n and confines it to the UI layer. This approach is in keeping with other localization\n issues in the java platform.\n \n As discussed above, performing calculations on a date where the rules of the calendar system\n are pluggable requires skill and is not recommended.\n Fortunately, the need to perform calculations on a date in an arbitrary calendar system\n is extremely rare. For example, it is highly unlikely that the business rules of a library\n book rental scheme will allow rentals to be for one month, where meaning of the month\n is dependent on the user's preferred calendar system.\n \n A key use case for calculations on a date in an arbitrary calendar system is producing\n a month-by-month calendar for display and user interaction. Again, this is a UI issue,\n and use of this interface solely within a few methods of the UI layer may be justified.\n \n In any other part of the system, where a date must be manipulated in a calendar system\n other than ISO, the use case will generally specify the calendar system to use.\n For example, an application may need to calculate the next Islamic or Hebrew holiday\n which may require manipulating the date.\n This kind of use case can be handled as follows:\n \nstart from the ISO LocalDate being passed to the method\n convert the date to the alternate calendar system, which for this use case is known\n  rather than arbitrary\n perform the calculation\n convert back to LocalDate\n\n Developers writing low-level frameworks or libraries should also avoid this interface.\n Instead, one of the two general purpose access interfaces should be used.\n Use TemporalAccessor if read-only access is required, or use Temporal\n if read-write access is required.", "codes": ["public interface ChronoLocalDate\nextends Temporal, TemporalAdjuster, Comparable<ChronoLocalDate>"], "fields": [], "methods": [{"method_name": "timeLineOrder", "method_sig": "static Comparator<ChronoLocalDate> timeLineOrder()", "description": "Gets a comparator that compares ChronoLocalDate in\n time-line order ignoring the chronology.\n \n This comparator differs from the comparison in compareTo(java.time.chrono.ChronoLocalDate) in that it\n only compares the underlying date and not the chronology.\n This allows dates in different calendar systems to be compared based\n on the position of the date on the local time-line.\n The underlying comparison is equivalent to comparing the epoch-day."}, {"method_name": "from", "method_sig": "static ChronoLocalDate from (TemporalAccessor temporal)", "description": "Obtains an instance of ChronoLocalDate from a temporal object.\n \n This obtains a local date based on the specified temporal.\n A TemporalAccessor represents an arbitrary set of date and time information,\n which this factory converts to an instance of ChronoLocalDate.\n \n The conversion extracts and combines the chronology and the date\n from the temporal object. The behavior is equivalent to using\n Chronology.date(TemporalAccessor) with the extracted chronology.\n Implementations are permitted to perform optimizations such as accessing\n those fields that are equivalent to the relevant objects.\n \n This method matches the signature of the functional interface TemporalQuery\n allowing it to be used as a query via method reference, ChronoLocalDate::from."}, {"method_name": "getChronology", "method_sig": "Chronology getChronology()", "description": "Gets the chronology of this date.\n \n The Chronology represents the calendar system in use.\n The era and other fields in ChronoField are defined by the chronology."}, {"method_name": "getEra", "method_sig": "default Era getEra()", "description": "Gets the era, as defined by the chronology.\n \n The era is, conceptually, the largest division of the time-line.\n Most calendar systems have a single epoch dividing the time-line into two eras.\n However, some have multiple eras, such as one for the reign of each leader.\n The exact meaning is determined by the Chronology.\n \n All correctly implemented Era classes are singletons, thus it\n is valid code to write date.getEra() == SomeChrono.ERA_NAME).\n \n This default implementation uses Chronology.eraOf(int)."}, {"method_name": "isLeapYear", "method_sig": "default boolean isLeapYear()", "description": "Checks if the year is a leap year, as defined by the calendar system.\n \n A leap-year is a year of a longer length than normal.\n The exact meaning is determined by the chronology with the constraint that\n a leap-year must imply a year-length longer than a non leap-year.\n \n This default implementation uses Chronology.isLeapYear(long)."}, {"method_name": "lengthOfMonth", "method_sig": "int lengthOfMonth()", "description": "Returns the length of the month represented by this date, as defined by the calendar system.\n \n This returns the length of the month in days."}, {"method_name": "lengthOfYear", "method_sig": "default int lengthOfYear()", "description": "Returns the length of the year represented by this date, as defined by the calendar system.\n \n This returns the length of the year in days.\n \n The default implementation uses isLeapYear() and returns 365 or 366."}, {"method_name": "isSupported", "method_sig": "default boolean isSupported (TemporalField field)", "description": "Checks if the specified field is supported.\n \n This checks if the specified field can be queried on this date.\n If false, then calling the range,\n get and with(TemporalField, long)\n methods will throw an exception.\n \n The set of supported fields is defined by the chronology and normally includes\n all ChronoField date fields.\n \n If the field is not a ChronoField, then the result of this method\n is obtained by invoking TemporalField.isSupportedBy(TemporalAccessor)\n passing this as the argument.\n Whether the field is supported is determined by the field."}, {"method_name": "isSupported", "method_sig": "default boolean isSupported (TemporalUnit unit)", "description": "Checks if the specified unit is supported.\n \n This checks if the specified unit can be added to or subtracted from this date.\n If false, then calling the plus(long, TemporalUnit) and\n minus methods will throw an exception.\n \n The set of supported units is defined by the chronology and normally includes\n all ChronoUnit date units except FOREVER.\n \n If the unit is not a ChronoUnit, then the result of this method\n is obtained by invoking TemporalUnit.isSupportedBy(Temporal)\n passing this as the argument.\n Whether the unit is supported is determined by the unit."}, {"method_name": "with", "method_sig": "default ChronoLocalDate with (TemporalAdjuster adjuster)", "description": "Returns an adjusted object of the same type as this object with the adjustment made.\n \n This adjusts this date-time according to the rules of the specified adjuster.\n A simple adjuster might simply set the one of the fields, such as the year field.\n A more complex adjuster might set the date to the last day of the month.\n A selection of common adjustments is provided in\n TemporalAdjusters.\n These include finding the \"last day of the month\" and \"next Wednesday\".\n The adjuster is responsible for handling special cases, such as the varying\n lengths of month and leap years.\n \n Some example code indicating how and why this method is used:\n \n  date = date.with(Month.JULY);        // most key classes implement TemporalAdjuster\n  date = date.with(lastDayOfMonth());  // static import from Adjusters\n  date = date.with(next(WEDNESDAY));   // static import from Adjusters and DayOfWeek\n "}, {"method_name": "with", "method_sig": "default ChronoLocalDate with (TemporalField field,\n                             long newValue)", "description": "Returns an object of the same type as this object with the specified field altered.\n \n This returns a new object based on this one with the value for the specified field changed.\n For example, on a LocalDate, this could be used to set the year, month or day-of-month.\n The returned object will have the same observable type as this object.\n \n In some cases, changing a field is not fully defined. For example, if the target object is\n a date representing the 31st January, then changing the month to February would be unclear.\n In cases like this, the field is responsible for resolving the result. Typically it will choose\n the previous valid date, which would be the last valid day of February in this example."}, {"method_name": "plus", "method_sig": "default ChronoLocalDate plus (TemporalAmount amount)", "description": "Returns an object of the same type as this object with an amount added.\n \n This adjusts this temporal, adding according to the rules of the specified amount.\n The amount is typically a Period but may be any other type implementing\n the TemporalAmount interface, such as Duration.\n \n Some example code indicating how and why this method is used:\n \n  date = date.plus(period);                // add a Period instance\n  date = date.plus(duration);              // add a Duration instance\n  date = date.plus(workingDays(6));        // example user-written workingDays method\n \n\n Note that calling plus followed by minus is not guaranteed to\n return the same date-time."}, {"method_name": "plus", "method_sig": "default ChronoLocalDate plus (long amountToAdd,\n                             TemporalUnit unit)", "description": "Returns an object of the same type as this object with the specified period added.\n \n This method returns a new object based on this one with the specified period added.\n For example, on a LocalDate, this could be used to add a number of years, months or days.\n The returned object will have the same observable type as this object.\n \n In some cases, changing a field is not fully defined. For example, if the target object is\n a date representing the 31st January, then adding one month would be unclear.\n In cases like this, the field is responsible for resolving the result. Typically it will choose\n the previous valid date, which would be the last valid day of February in this example."}, {"method_name": "minus", "method_sig": "default ChronoLocalDate minus (TemporalAmount amount)", "description": "Returns an object of the same type as this object with an amount subtracted.\n \n This adjusts this temporal, subtracting according to the rules of the specified amount.\n The amount is typically a Period but may be any other type implementing\n the TemporalAmount interface, such as Duration.\n \n Some example code indicating how and why this method is used:\n \n  date = date.minus(period);               // subtract a Period instance\n  date = date.minus(duration);             // subtract a Duration instance\n  date = date.minus(workingDays(6));       // example user-written workingDays method\n \n\n Note that calling plus followed by minus is not guaranteed to\n return the same date-time."}, {"method_name": "minus", "method_sig": "default ChronoLocalDate minus (long amountToSubtract,\n                              TemporalUnit unit)", "description": "Returns an object of the same type as this object with the specified period subtracted.\n \n This method returns a new object based on this one with the specified period subtracted.\n For example, on a LocalDate, this could be used to subtract a number of years, months or days.\n The returned object will have the same observable type as this object.\n \n In some cases, changing a field is not fully defined. For example, if the target object is\n a date representing the 31st March, then subtracting one month would be unclear.\n In cases like this, the field is responsible for resolving the result. Typically it will choose\n the previous valid date, which would be the last valid day of February in this example."}, {"method_name": "query", "method_sig": "default <R> R query (TemporalQuery<R> query)", "description": "Queries this date using the specified query.\n \n This queries this date using the specified query strategy object.\n The TemporalQuery object defines the logic to be used to\n obtain the result. Read the documentation of the query to understand\n what the result of this method will be.\n \n The result of this method is obtained by invoking the\n TemporalQuery.queryFrom(TemporalAccessor) method on the\n specified query passing this as the argument."}, {"method_name": "adjustInto", "method_sig": "default Temporal adjustInto (Temporal temporal)", "description": "Adjusts the specified temporal object to have the same date as this object.\n \n This returns a temporal object of the same observable type as the input\n with the date changed to be the same as this.\n \n The adjustment is equivalent to using Temporal.with(TemporalField, long)\n passing ChronoField.EPOCH_DAY as the field.\n \n In most cases, it is clearer to reverse the calling pattern by using\n Temporal.with(TemporalAdjuster):\n \n   // these two lines are equivalent, but the second approach is recommended\n   temporal = thisLocalDate.adjustInto(temporal);\n   temporal = temporal.with(thisLocalDate);\n \n\n This instance is immutable and unaffected by this method call."}, {"method_name": "until", "method_sig": "long until (Temporal endExclusive,\n           TemporalUnit unit)", "description": "Calculates the amount of time until another date in terms of the specified unit.\n \n This calculates the amount of time between two ChronoLocalDate\n objects in terms of a single TemporalUnit.\n The start and end points are this and the specified date.\n The result will be negative if the end is before the start.\n The Temporal passed to this method is converted to a\n ChronoLocalDate using Chronology.date(TemporalAccessor).\n The calculation returns a whole number, representing the number of\n complete units between the two dates.\n For example, the amount in days between two dates can be calculated\n using startDate.until(endDate, DAYS).\n \n There are two equivalent ways of using this method.\n The first is to invoke this method.\n The second is to use TemporalUnit.between(Temporal, Temporal):\n \n   // these two lines are equivalent\n   amount = start.until(end, MONTHS);\n   amount = MONTHS.between(start, end);\n \n The choice should be made based on which makes the code more readable.\n \n The calculation is implemented in this method for ChronoUnit.\n The units DAYS, WEEKS, MONTHS, YEARS,\n DECADES, CENTURIES, MILLENNIA and ERAS\n should be supported by all implementations.\n Other ChronoUnit values will throw an exception.\n \n If the unit is not a ChronoUnit, then the result of this method\n is obtained by invoking TemporalUnit.between(Temporal, Temporal)\n passing this as the first argument and the converted input temporal as\n the second argument.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "until", "method_sig": "ChronoPeriod until (ChronoLocalDate endDateExclusive)", "description": "Calculates the period between this date and another date as a ChronoPeriod.\n \n This calculates the period between two dates. All supplied chronologies\n calculate the period using years, months and days, however the\n ChronoPeriod API allows the period to be represented using other units.\n \n The start and end points are this and the specified date.\n The result will be negative if the end is before the start.\n The negative sign will be the same in each of year, month and day.\n \n The calculation is performed using the chronology of this date.\n If necessary, the input date will be converted to match.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "format", "method_sig": "default String format (DateTimeFormatter formatter)", "description": "Formats this date using the specified formatter.\n \n This date will be passed to the formatter to produce a string.\n \n The default implementation must behave as follows:\n \n  return formatter.format(this);\n "}, {"method_name": "atTime", "method_sig": "default ChronoLocalDateTime<?> atTime (LocalTime localTime)", "description": "Combines this date with a time to create a ChronoLocalDateTime.\n \n This returns a ChronoLocalDateTime formed from this date at the specified time.\n All possible combinations of date and time are valid."}, {"method_name": "toEpochDay", "method_sig": "default long toEpochDay()", "description": "Converts this date to the Epoch Day.\n \n The Epoch Day count is a simple\n incrementing count of days where day 0 is 1970-01-01 (ISO).\n This definition is the same for all chronologies, enabling conversion.\n \n This default implementation queries the EPOCH_DAY field."}, {"method_name": "compareTo", "method_sig": "default int compareTo (ChronoLocalDate other)", "description": "Compares this date to another date, including the chronology.\n \n The comparison is based first on the underlying time-line date, then\n on the chronology.\n It is \"consistent with equals\", as defined by Comparable.\n \n For example, the following is the comparator order:\n \n2012-12-03 (ISO)\n2012-12-04 (ISO)\n2555-12-04 (ThaiBuddhist)\n2012-12-05 (ISO)\n\n Values #2 and #3 represent the same date on the time-line.\n When two values represent the same date, the chronology ID is compared to distinguish them.\n This step is needed to make the ordering \"consistent with equals\".\n \n If all the date objects being compared are in the same chronology, then the\n additional chronology stage is not required and only the local date is used.\n To compare the dates of two TemporalAccessor instances, including dates\n in two different chronologies, use ChronoField.EPOCH_DAY as a comparator.\n \n This default implementation performs the comparison defined above."}, {"method_name": "isAfter", "method_sig": "default boolean isAfter (ChronoLocalDate other)", "description": "Checks if this date is after the specified date ignoring the chronology.\n \n This method differs from the comparison in compareTo(java.time.chrono.ChronoLocalDate) in that it\n only compares the underlying date and not the chronology.\n This allows dates in different calendar systems to be compared based\n on the time-line position.\n This is equivalent to using date1.toEpochDay() > date2.toEpochDay().\n \n This default implementation performs the comparison based on the epoch-day."}, {"method_name": "isBefore", "method_sig": "default boolean isBefore (ChronoLocalDate other)", "description": "Checks if this date is before the specified date ignoring the chronology.\n \n This method differs from the comparison in compareTo(java.time.chrono.ChronoLocalDate) in that it\n only compares the underlying date and not the chronology.\n This allows dates in different calendar systems to be compared based\n on the time-line position.\n This is equivalent to using date1.toEpochDay() < date2.toEpochDay().\n \n This default implementation performs the comparison based on the epoch-day."}, {"method_name": "isEqual", "method_sig": "default boolean isEqual (ChronoLocalDate other)", "description": "Checks if this date is equal to the specified date ignoring the chronology.\n \n This method differs from the comparison in compareTo(java.time.chrono.ChronoLocalDate) in that it\n only compares the underlying date and not the chronology.\n This allows dates in different calendar systems to be compared based\n on the time-line position.\n This is equivalent to using date1.toEpochDay() == date2.toEpochDay().\n \n This default implementation performs the comparison based on the epoch-day."}, {"method_name": "equals", "method_sig": "boolean equals (Object obj)", "description": "Checks if this date is equal to another date, including the chronology.\n \n Compares this date with another ensuring that the date and chronology are the same.\n \n To compare the dates of two TemporalAccessor instances, including dates\n in two different chronologies, use ChronoField.EPOCH_DAY as a comparator."}, {"method_name": "hashCode", "method_sig": "int hashCode()", "description": "A hash code for this date."}, {"method_name": "toString", "method_sig": "String toString()", "description": "Outputs this date as a String.\n \n The output will include the full local date."}]}