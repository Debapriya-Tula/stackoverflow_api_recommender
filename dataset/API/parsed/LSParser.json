{"name": "Interface LSParser", "module": "java.xml", "package": "org.w3c.dom.ls", "text": "An interface to an object that is able to build, or augment, a DOM tree\n from various input sources.\n  LSParser provides an API for parsing XML and building the\n corresponding DOM document structure. A LSParser instance\n can be obtained by invoking the\n DOMImplementationLS.createLSParser() method.\n  As specified in\n [DOM Level 3 Core]\n , when a document is first made available via the LSParser:\n \n there will\n never be two adjacent nodes of type NODE_TEXT, and there will never be\n empty text nodes.\n \n it is expected that the value and\n nodeValue attributes of an Attr node initially\n return the XML 1.0\n normalized value. However, if the parameters\n \"validate-if-schema\" and\n \"datatype-normalization\"\n are set to true, depending on the attribute normalization\n used, the attribute values may differ from the ones obtained by the XML\n 1.0 attribute normalization. If the parameters\n \"datatype-normalization\"\n is set to false, the XML 1.0 attribute normalization is\n guaranteed to occur, and if the attributes list does not contain\n namespace declarations, the attributes attribute on\n Element node represents the property [attributes] defined in\n [XML Information Set].\n \n\n Asynchronous LSParser objects are expected to also\n implement the events::EventTarget interface so that event\n listeners can be registered on asynchronous LSParser\n objects.\n  Events supported by asynchronous LSParser objects are:\n \nload\n\n  The LSParser finishes to load the document. See also the\n definition of the LSLoadEvent interface. \nprogress\n The\n LSParser signals progress as data is parsed.  This\n specification does not attempt to define exactly when progress events\n should be dispatched. That is intentionally left as\n implementation-dependent. Here is one example of how an application might\n dispatch progress events: Once the parser starts receiving data, a\n progress event is dispatched to indicate that the parsing starts. From\n there on, a progress event is dispatched for every 4096 bytes of data\n that is received and processed. This is only one example, though, and\n implementations can choose to dispatch progress events at any time while\n parsing, or not dispatch them at all.  See also the definition of the\n LSProgressEvent interface. \n\nNote:  All events defined in this specification use the\n namespace URI \"http://www.w3.org/2002/DOMLS\".\n  While parsing an input source, errors are reported to the application\n through the error handler (LSParser.domConfig's\n \"error-handler\"\n parameter). This specification does in no way try to define all possible\n errors that can occur while parsing XML, or any other markup, but some\n common error cases are defined. The types (DOMError.type) of\n errors and warnings defined by this specification are:\n \n\n\"check-character-normalization-failure\" [error] \n Raised if the parameter\n \"check-character-normalization\"\n is set to true and a string is encountered that fails normalization\n checking. \n\"doctype-not-allowed\" [fatal]\n Raised if the\n configuration parameter \"disallow-doctype\" is set to true\n and a doctype is encountered. \n\"no-input-specified\" [fatal]\n\n Raised when loading a document and no input is specified in the\n LSInput object. \n\n\"pi-base-uri-not-preserved\" [warning]\n Raised if a processing\n instruction is encountered in a location where the base URI of the\n processing instruction can not be preserved.  One example of a case where\n this warning will be raised is if the configuration parameter\n \"entities\"\n is set to false and the following XML file is parsed:\n \n <!DOCTYPE root [ <!ENTITY e SYSTEM 'subdir/myentity.ent' ]>\n <root> &e; </root>\n  And subdir/myentity.ent\n contains:\n <one> <two/> </one> <?pi 3.14159?>\n <more/>\n\n\"unbound-prefix-in-entity\" [warning]\n An\n implementation dependent warning that may be raised if the configuration parameter\n \"namespaces\"\n is set to true and an unbound namespace prefix is\n encountered in an entity's replacement text. Raising this warning is not\n enforced since some existing parsers may not recognize unbound namespace\n prefixes in the replacement text of entities. \n\n\"unknown-character-denormalization\" [fatal]\n Raised if the\n configuration parameter \"ignore-unknown-character-denormalizations\" is\n set to false and a character is encountered for which the\n processor cannot determine the normalization properties. \n\n\"unsupported-encoding\" [fatal]\n Raised if an unsupported\n encoding is encountered. \n\"unsupported-media-type\" [fatal]\n\n Raised if the configuration parameter \"supported-media-types-only\" is set\n to true and an unsupported media type is encountered. \n\n In addition to raising the defined errors and warnings, implementations\n are expected to raise implementation specific errors and warnings for any\n other error and warning cases such as IO errors (file not found,\n permission denied,...), XML well-formedness errors, and so on.\n See also the\n Document Object Model (DOM) Level 3 Load and Save Specification.", "codes": ["public interface LSParser"], "fields": [{"field_name": "ACTION_APPEND_AS_CHILDREN", "field_sig": "static final\u00a0short ACTION_APPEND_AS_CHILDREN", "description": "Append the result of the parse operation as children of the context\n node. For this action to work, the context node must be an\n Element or a DocumentFragment."}, {"field_name": "ACTION_REPLACE_CHILDREN", "field_sig": "static final\u00a0short ACTION_REPLACE_CHILDREN", "description": "Replace all the children of the context node with the result of the\n parse operation. For this action to work, the context node must be an\n Element, a Document, or a\n DocumentFragment."}, {"field_name": "ACTION_INSERT_BEFORE", "field_sig": "static final\u00a0short ACTION_INSERT_BEFORE", "description": "Insert the result of the parse operation as the immediately preceding\n sibling of the context node. For this action to work the context\n node's parent must be an Element or a\n DocumentFragment."}, {"field_name": "ACTION_INSERT_AFTER", "field_sig": "static final\u00a0short ACTION_INSERT_AFTER", "description": "Insert the result of the parse operation as the immediately following\n sibling of the context node. For this action to work the context\n node's parent must be an Element or a\n DocumentFragment."}, {"field_name": "ACTION_REPLACE", "field_sig": "static final\u00a0short ACTION_REPLACE", "description": "Replace the context node with the result of the parse operation. For\n this action to work, the context node must have a parent, and the\n parent must be an Element or a\n DocumentFragment."}], "methods": [{"method_name": "getDomConfig", "method_sig": "DOMConfiguration getDomConfig()", "description": "The DOMConfiguration object used when parsing an input\n source. This DOMConfiguration is specific to the parse\n operation. No parameter values from this DOMConfiguration\n  object are passed automatically to the DOMConfiguration\n object on the Document that is created, or used, by the\n parse operation. The DOM application is responsible for passing any\n needed parameter values from this DOMConfiguration\n object to the DOMConfiguration object referenced by the\n Document object.\n  In addition to the parameters recognized in on the\n DOMConfiguration\n interface defined in\n [DOM Level 3 Core]\n , the DOMConfiguration objects for LSParser\n add or modify the following parameters:\n \n\n\"charset-overrides-xml-encoding\"\n\n\ntrue\n[optional] (default) If a higher level protocol such as HTTP\n [IETF RFC 2616] provides an\n indication of the character encoding of the input stream being\n processed, that will override any encoding specified in the XML\n declaration or the Text declaration (see also section 4.3.3,\n \"Character Encoding in Entities\", in [XML 1.0]).\n Explicitly setting an encoding in the LSInput overrides\n any encoding from the protocol. \nfalse\n[required] The parser ignores any character set encoding information from\n higher-level protocols. \n\n\"disallow-doctype\"\n\n\n\ntrue\n[optional] Throw a fatal \"doctype-not-allowed\" error\n if a doctype node is found while parsing the document. This is\n useful when dealing with things like SOAP envelopes where doctype\n nodes are not allowed. \nfalse\n[required] (default) Allow doctype nodes in the document. \n\n\n\"ignore-unknown-character-denormalizations\"\n\n\n\ntrue\n[required] (default) If, while verifying full normalization when\n [XML 1.1] is\n supported, a processor encounters characters for which it cannot\n determine the normalization properties, then the processor will\n ignore any possible denormalizations caused by these characters.\n This parameter is ignored for [XML 1.0].\n \n\nfalse\n[optional] Report an fatal \"unknown-character-denormalization\"\n error if a character is encountered for which the processor cannot\n determine the normalization properties. \n\n\"infoset\"\n See\n the definition of DOMConfiguration for a description of\n this parameter. Unlike in [DOM Level 3 Core]\n , this parameter will default to true for\n LSParser. \n\"namespaces\"\n\n\ntrue\n[required] (default) Perform the namespace processing as defined in\n [XML Namespaces]\n  and [XML Namespaces 1.1]\n . \nfalse\n[optional] Do not perform the namespace processing. \n\n\n\"resource-resolver\"\n[required] A reference to a LSResourceResolver object, or null. If\n the value of this parameter is not null when an external resource\n (such as an external XML entity or an XML schema location) is\n encountered, the implementation will request that the\n LSResourceResolver referenced in this parameter resolves\n the resource. \n\"supported-media-types-only\"\n\n\n\ntrue\n[optional] Check that the media type of the parsed resource is a supported media\n type. If an unsupported media type is encountered, a fatal error of\n type \"unsupported-media-type\" will be raised. The media types defined in\n [IETF RFC 3023] must always\n be accepted. \nfalse\n[required] (default) Accept any media type. \n\n\"validate\"\n See the definition of\n DOMConfiguration for a description of this parameter.\n Unlike in [DOM Level 3 Core]\n , the processing of the internal subset is always accomplished, even\n if this parameter is set to false. \n\n\"validate-if-schema\"\n See the definition of\n DOMConfiguration for a description of this parameter.\n Unlike in [DOM Level 3 Core]\n , the processing of the internal subset is always accomplished, even\n if this parameter is set to false. \n\n\"well-formed\"\n See the definition of\n DOMConfiguration for a description of this parameter.\n Unlike in [DOM Level 3 Core]\n , this parameter cannot be set to false. \n"}, {"method_name": "getFilter", "method_sig": "LSParserFilter getFilter()", "description": "When a filter is provided, the implementation will call out to the\n filter as it is constructing the DOM tree structure. The filter can\n choose to remove elements from the document being constructed, or to\n terminate the parsing early.\n  The filter is invoked after the operations requested by the\n DOMConfiguration parameters have been applied. For\n example, if \"validate\"\n is set to true, the validation is done before invoking the\n filter."}, {"method_name": "setFilter", "method_sig": "void setFilter (LSParserFilter filter)", "description": "When a filter is provided, the implementation will call out to the\n filter as it is constructing the DOM tree structure. The filter can\n choose to remove elements from the document being constructed, or to\n terminate the parsing early.\n  The filter is invoked after the operations requested by the\n DOMConfiguration parameters have been applied. For\n example, if \"validate\"\n is set to true, the validation is done before invoking the\n filter."}, {"method_name": "getAsync", "method_sig": "boolean getAsync()", "description": "true if the LSParser is asynchronous,\n false if it is synchronous."}, {"method_name": "getBusy", "method_sig": "boolean getBusy()", "description": "true if the LSParser is currently busy\n loading a document, otherwise false."}, {"method_name": "parse", "method_sig": "Document parse (LSInput input)\n        throws DOMException,\n               LSException", "description": "Parse an XML document from a resource identified by a\n LSInput."}, {"method_name": "parseURI", "method_sig": "Document parseURI (String uri)\n           throws DOMException,\n                  LSException", "description": "Parse an XML document from a location identified by a URI reference\n [IETF RFC 2396]. If the URI\n contains a fragment identifier (see section 4.1 in\n [IETF RFC 2396]), the\n behavior is not defined by this specification, future versions of\n this specification may define the behavior."}, {"method_name": "parseWithContext", "method_sig": "Node parseWithContext (LSInput input,\n                      Node contextArg,\n                      short action)\n               throws DOMException,\n                      LSException", "description": "Parse an XML fragment from a resource identified by a\n LSInput and insert the content into an existing document\n at the position specified with the context and\n action arguments. When parsing the input stream, the\n context node (or its parent, depending on where the result will be\n inserted) is used for resolving unbound namespace prefixes. The\n context node's ownerDocument node (or the node itself if\n the node of type DOCUMENT_NODE) is used to resolve\n default attributes and entity references.\n  As the new data is inserted into the document, at least one\n mutation event is fired per new immediate child or sibling of the\n context node.\n  If the context node is a Document node and the action\n is ACTION_REPLACE_CHILDREN, then the document that is\n passed as the context node will be changed such that its\n xmlEncoding, documentURI,\n xmlVersion, inputEncoding,\n xmlStandalone, and all other such attributes are set to\n what they would be set to if the input source was parsed using\n LSParser.parse().\n  This method is always synchronous, even if the\n LSParser is asynchronous (LSParser.async is\n true).\n  If an error occurs while parsing, the caller is notified through\n the ErrorHandler instance associated with the\n \"error-handler\"\n parameter of the DOMConfiguration.\n  When calling parseWithContext, the values of the\n following configuration parameters will be ignored and their default\n values will always be used instead:\n \"validate\",\n \"validate-if-schema\",\n and\n \"element-content-whitespace\".\n Other parameters will be treated normally, and the parser is expected\n to call the LSParserFilter just as if a whole document\n was parsed."}, {"method_name": "abort", "method_sig": "void abort()", "description": "Abort the loading of the document that is currently being loaded by\n the LSParser. If the LSParser is currently\n not busy, a call to this method does nothing."}]}