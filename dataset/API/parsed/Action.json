{"name": "Interface Action", "module": "java.desktop", "package": "javax.swing", "text": "The Action interface provides a useful extension to the\n ActionListener\n interface in cases where the same functionality may be accessed by\n several controls.\n \n In addition to the actionPerformed method defined by the\n ActionListener interface, this interface allows the\n application to define, in a single place:\n \nOne or more text strings that describe the function. These strings\n     can be used, for example, to display the flyover text for a button\n     or to set the text in a menu item.\n One or more icons that depict the function. These icons can be used\n     for the images in a menu control, or for composite entries in a more\n     sophisticated user interface.\n The enabled/disabled state of the functionality. Instead of having\n     to separately disable the menu item and the toolbar button, the\n     application can disable the function that implements this interface.\n     All components which are registered as listeners for the state change\n     then know to disable event generation for that item and to modify the\n     display accordingly.\n \n\n This interface can be added to an existing class or used to create an\n adapter (typically, by subclassing AbstractAction).\n The Action object\n can then be added to multiple Action-aware containers\n and connected to Action-capable\n components. The GUI controls can then be activated or\n deactivated all at once by invoking the Action object's\n setEnabled method.\n \n Note that Action implementations tend to be more expensive\n in terms of storage than a typical ActionListener,\n which does not offer the benefits of centralized control of\n functionality and broadcast of property changes.  For this reason,\n you should take care to only use Actions where their benefits\n are desired, and use simple ActionListeners elsewhere.\n \nSwing Components Supporting Action\n\n Many of Swing's components have an Action property.  When\n an Action is set on a component, the following things\n happen:\n \nThe Action is added as an ActionListener to\n     the component.\n The component configures some of its properties to match the\n      Action.\n The component installs a PropertyChangeListener on the\n     Action so that the component can change its properties\n     to reflect changes in the Action's properties.\n \n\n The following table describes the properties used by\n Swing components that support Actions.\n In the table, button refers to any\n AbstractButton subclass, which includes not only\n JButton but also classes such as\n JMenuItem. Unless otherwise stated, a\n null property value in an Action (or a\n Action that is null) results in the\n button's corresponding property being set to null.\n\n \nSupported Action properties\n\n\nComponent Property\n    Components\n    Action Key\n    Notes\n \n\n\nenabled\nAll\n    The isEnabled method\n    \u00a0\n  \ntoolTipText\nAll\n    SHORT_DESCRIPTION\n\u00a0\n  \nactionCommand\nAll\n    ACTION_COMMAND_KEY\n\u00a0\n  \nmnemonic\nAll buttons\n    MNEMONIC_KEY\nA null value or Action results in the button's\n    mnemonic property being set to '\\0'.\n  \ntext\nAll buttons\n    NAME\nIf you do not want the text of the button to mirror that of the\n    Action, set the property hideActionText to true.\n    If hideActionText is true, setting the Action\n    changes the text of the button to null and any changes to\n    NAME are ignored. hideActionText is useful for tool bar\n    buttons that typically only show an Icon.\n    JToolBar.add(Action) sets the property to true if the\n    Action has a non-null value for LARGE_ICON_KEY or\n    SMALL_ICON.\n  \ndisplayedMnemonicIndex\nAll buttons\n    DISPLAYED_MNEMONIC_INDEX_KEY\nIf the value of DISPLAYED_MNEMONIC_INDEX_KEY is beyond the\n    bounds of the text, it is ignored. When setAction is called, if\n    the value from the Action is null, the displayed mnemonic\n    index is not updated. In any subsequent changes to\n    DISPLAYED_MNEMONIC_INDEX_KEY, null is treated as -1.\n  \nicon\nAll buttons except of JCheckBox, JToggleButton and\n    JRadioButton.\n    either LARGE_ICON_KEY or SMALL_ICON\nThe JMenuItem subclasses only use SMALL_ICON. All\n    other buttons will use LARGE_ICON_KEY; if the value is\n    null they use SMALL_ICON.\n  \naccelerator\nAll JMenuItem subclasses, with the exception of JMenu.\n    ACCELERATOR_KEY\n\u00a0\n  \nselected\nJToggleButton, JCheckBox, JRadioButton,\n    JCheckBoxMenuItem and JRadioButtonMenuItem\nSELECTED_KEY\nComponents that honor this property only use the value if it is\n    non-null. For example, if you set an Action that has a\n    null value for SELECTED_KEY on a JToggleButton,\n    the JToggleButton will not update it's selected state in any way.\n    Similarly, any time the JToggleButton's selected state changes it\n    will only set the value back on the Action if the Action\n    has a non-null value for SELECTED_KEY.\n    \n    Components that honor this property keep their selected state in sync with\n    this property. When the same Action is used with multiple\n    components, all the components keep their selected state in sync with this\n    property. Mutually exclusive buttons, such as JToggleButtons in a\n    ButtonGroup, force only one of the buttons to be selected. As\n    such, do not use the same Action that defines a value for the\n    SELECTED_KEY property with multiple mutually exclusive buttons.\n \n\n\nJPopupMenu, JToolBar and JMenu\n all provide convenience methods for creating a component and setting the\n Action on the corresponding component.  Refer to each of\n these classes for more information.\n \nAction uses PropertyChangeListener to\n inform listeners the Action has changed.  The beans\n specification indicates that a null property name can\n be used to indicate multiple values have changed.  By default Swing\n components that take an Action do not handle such a\n change.  To indicate that Swing should treat null\n according to the beans specification set the system property\n swing.actions.reconfigureOnNull to the String\n value true.", "codes": ["public interface Action\nextends ActionListener"], "fields": [{"field_name": "DEFAULT", "field_sig": "static final\u00a0String DEFAULT", "description": "Not currently used."}, {"field_name": "NAME", "field_sig": "static final\u00a0String NAME", "description": "The key used for storing the String name\n for the action, used for a menu or button."}, {"field_name": "SHORT_DESCRIPTION", "field_sig": "static final\u00a0String SHORT_DESCRIPTION", "description": "The key used for storing a short String\n description for the action, used for tooltip text."}, {"field_name": "LONG_DESCRIPTION", "field_sig": "static final\u00a0String LONG_DESCRIPTION", "description": "The key used for storing a longer String\n description for the action, could be used for context-sensitive help."}, {"field_name": "SMALL_ICON", "field_sig": "static final\u00a0String SMALL_ICON", "description": "The key used for storing a small Icon, such\n as ImageIcon.  This is typically used with\n menus such as JMenuItem.\n \n If the same Action is used with menus and buttons you'll\n typically specify both a SMALL_ICON and a\n LARGE_ICON_KEY.  The menu will use the\n SMALL_ICON and the button will use the\n LARGE_ICON_KEY."}, {"field_name": "ACTION_COMMAND_KEY", "field_sig": "static final\u00a0String ACTION_COMMAND_KEY", "description": "The key used to determine the command String for the\n ActionEvent that will be created when an\n Action is going to be notified as the result of\n residing in a Keymap associated with a\n JComponent."}, {"field_name": "ACCELERATOR_KEY", "field_sig": "static final\u00a0String ACCELERATOR_KEY", "description": "The key used for storing a KeyStroke to be used as the\n accelerator for the action."}, {"field_name": "MNEMONIC_KEY", "field_sig": "static final\u00a0String MNEMONIC_KEY", "description": "The key used for storing an Integer that corresponds to\n one of the KeyEvent key codes.  The value is\n commonly used to specify a mnemonic.  For example:\n myAction.putValue(Action.MNEMONIC_KEY, KeyEvent.VK_A)\n sets the mnemonic of myAction to 'a', while\n myAction.putValue(Action.MNEMONIC_KEY, KeyEvent.getExtendedKeyCodeForChar('\u0444'))\n sets the mnemonic of myAction to Cyrillic letter \"Ef\"."}, {"field_name": "SELECTED_KEY", "field_sig": "static final\u00a0String SELECTED_KEY", "description": "The key used for storing a Boolean that corresponds\n to the selected state.  This is typically used only for components\n that have a meaningful selection state.  For example,\n JRadioButton and JCheckBox make use of\n this but instances of JMenu don't.\n \n This property differs from the others in that it is both read\n by the component and set by the component.  For example,\n if an Action is attached to a JCheckBox\n the selected state of the JCheckBox will be set from\n that of the Action.  If the user clicks on the\n JCheckBox the selected state of the JCheckBox\nand the Action will both be updated.\n \n Note: the value of this field is prefixed with 'Swing' to\n avoid possible collisions with existing Actions."}, {"field_name": "DISPLAYED_MNEMONIC_INDEX_KEY", "field_sig": "static final\u00a0String DISPLAYED_MNEMONIC_INDEX_KEY", "description": "The key used for storing an Integer that corresponds\n to the index in the text (identified by the NAME\n property) that the decoration for a mnemonic should be rendered at.  If\n the value of this property is greater than or equal to the length of\n the text, it will treated as -1.\n \n Note: the value of this field is prefixed with 'Swing' to\n avoid possible collisions with existing Actions."}, {"field_name": "LARGE_ICON_KEY", "field_sig": "static final\u00a0String LARGE_ICON_KEY", "description": "The key used for storing an Icon.  This is typically\n used by buttons, such as JButton and\n JToggleButton.\n \n If the same Action is used with menus and buttons you'll\n typically specify both a SMALL_ICON and a\n LARGE_ICON_KEY.  The menu will use the\n SMALL_ICON and the button the LARGE_ICON_KEY.\n \n Note: the value of this field is prefixed with 'Swing' to\n avoid possible collisions with existing Actions."}], "methods": [{"method_name": "getValue", "method_sig": "Object getValue (String key)", "description": "Gets one of this object's properties\n using the associated key."}, {"method_name": "putValue", "method_sig": "void putValue (String key,\n              Object value)", "description": "Sets one of this object's properties\n using the associated key. If the value has\n changed, a PropertyChangeEvent is sent\n to listeners."}, {"method_name": "setEnabled", "method_sig": "void setEnabled (boolean b)", "description": "Sets the enabled state of the Action.  When enabled,\n any component associated with this object is active and\n able to fire this object's actionPerformed method.\n If the value has changed, a PropertyChangeEvent is sent\n to listeners."}, {"method_name": "isEnabled", "method_sig": "boolean isEnabled()", "description": "Returns the enabled state of the Action. When enabled,\n any component associated with this object is active and\n able to fire this object's actionPerformed method."}, {"method_name": "accept", "method_sig": "default boolean accept (Object sender)", "description": "Determines whether the action should be performed with the specified\n sender object. The sender can be null.\n The method must return false if the action is disabled.\n "}, {"method_name": "addPropertyChangeListener", "method_sig": "void addPropertyChangeListener (PropertyChangeListener listener)", "description": "Adds a PropertyChange listener. Containers and attached\n components use these methods to register interest in this\n Action object. When its enabled state or other property\n changes, the registered listeners are informed of the change."}, {"method_name": "removePropertyChangeListener", "method_sig": "void removePropertyChangeListener (PropertyChangeListener listener)", "description": "Removes a PropertyChange listener."}]}