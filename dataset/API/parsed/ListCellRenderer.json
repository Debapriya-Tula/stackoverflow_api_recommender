{"name": "Interface ListCellRenderer<E>", "module": "java.desktop", "package": "javax.swing", "text": "Identifies components that can be used as \"rubber stamps\" to paint\n the cells in a JList.  For example, to use a JLabel as a\n ListCellRenderer, you would write something like this:\n \n \n class MyCellRenderer extends JLabel implements ListCellRenderer<Object> {\n     public MyCellRenderer() {\n         setOpaque(true);\n     }\n\n     public Component getListCellRendererComponent(JList<?> list,\n                                                   Object value,\n                                                   int index,\n                                                   boolean isSelected,\n                                                   boolean cellHasFocus) {\n\n         setText(value.toString());\n\n         Color background;\n         Color foreground;\n\n         // check if this cell represents the current DnD drop location\n         JList.DropLocation dropLocation = list.getDropLocation();\n         if (dropLocation != null\n                 && !dropLocation.isInsert()\n                 && dropLocation.getIndex() == index) {\n\n             background = Color.BLUE;\n             foreground = Color.WHITE;\n\n         // check if this cell is selected\n         } else if (isSelected) {\n             background = Color.RED;\n             foreground = Color.WHITE;\n\n         // unselected, and not the DnD drop location\n         } else {\n             background = Color.WHITE;\n             foreground = Color.BLACK;\n         };\n\n         setBackground(background);\n         setForeground(foreground);\n\n         return this;\n     }\n }\n \n ", "codes": ["public interface ListCellRenderer<E>"], "fields": [], "methods": [{"method_name": "getListCellRendererComponent", "method_sig": "Component getListCellRendererComponent (JList<? extends E> list,\n                                       E value,\n                                       int index,\n                                       boolean isSelected,\n                                       boolean cellHasFocus)", "description": "Return a component that has been configured to display the specified\n value. That component's paint method is then called to\n \"render\" the cell.  If it is necessary to compute the dimensions\n of a list because the list cells do not have a fixed size, this method\n is called to generate a component on which getPreferredSize\n can be invoked."}]}