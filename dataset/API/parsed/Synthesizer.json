{"name": "Interface Synthesizer", "module": "java.desktop", "package": "javax.sound.midi", "text": "A Synthesizer generates sound. This usually happens when one of the\n Synthesizer's MidiChannel objects receives a\n noteOn message, either directly or via\n the Synthesizer object. Many Synthesizers support\n Receivers, through which MIDI events can be delivered to the\n Synthesizer. In such cases, the Synthesizer typically\n responds by sending a corresponding message to the appropriate\n MidiChannel, or by processing the event itself if the event isn't one\n of the MIDI channel messages.\n \n The Synthesizer interface includes methods for loading and unloading\n instruments from soundbanks. An instrument is a specification for\n synthesizing a certain type of sound, whether that sound emulates a\n traditional instrument or is some kind of sound effect or other imaginary\n sound. A soundbank is a collection of instruments, organized by bank and\n program number (via the instrument's Patch object). Different\n Synthesizer classes might implement different sound-synthesis\n techniques, meaning that some instruments and not others might be compatible\n with a given synthesizer. Also, synthesizers may have a limited amount of\n memory for instruments, meaning that not every soundbank and instrument can\n be used by every synthesizer, even if the synthesis technique is compatible.\n To see whether the instruments from a certain soundbank can be played by a\n given synthesizer, invoke the\n isSoundbankSupported method of\n Synthesizer.\n \n \"Loading\" an instrument means that that instrument becomes available for\n synthesizing notes. The instrument is loaded into the bank and program\n location specified by its Patch object. Loading does not necessarily\n mean that subsequently played notes will immediately have the sound of this\n newly loaded instrument. For the instrument to play notes, one of the\n synthesizer's MidiChannel objects must receive (or have received) a\n program-change message that causes that particular instrument's bank and\n program number to be selected.", "codes": ["public interface Synthesizer\nextends MidiDevice"], "fields": [], "methods": [{"method_name": "getMaxPolyphony", "method_sig": "int getMaxPolyphony()", "description": "Obtains the maximum number of notes that this synthesizer can sound\n simultaneously."}, {"method_name": "getLatency", "method_sig": "long getLatency()", "description": "Obtains the processing latency incurred by this synthesizer, expressed in\n microseconds. This latency measures the worst-case delay between the time\n a MIDI message is delivered to the synthesizer and the time that the\n synthesizer actually produces the corresponding result.\n \n Although the latency is expressed in microseconds, a synthesizer's actual\n measured delay may vary over a wider range than this resolution suggests.\n For example, a synthesizer might have a worst-case delay of a few\n milliseconds or more."}, {"method_name": "getChannels", "method_sig": "MidiChannel[] getChannels()", "description": "Obtains the set of MIDI channels controlled by this synthesizer. Each\n non-null element in the returned array is a MidiChannel that\n receives the MIDI messages sent on that channel number.\n \n The MIDI 1.0 specification provides for 16 channels, so this method\n returns an array of at least 16 elements. However, if this synthesizer\n doesn't make use of all 16 channels, some of the elements of the array\n might be null, so you should check each element before using it."}, {"method_name": "getVoiceStatus", "method_sig": "VoiceStatus[] getVoiceStatus()", "description": "Obtains the current status of the voices produced by this synthesizer. If\n this class of Synthesizer does not provide voice information, the\n returned array will always be of length 0. Otherwise, its length is\n always equal to the total number of voices, as returned by\n getMaxPolyphony(). (See the VoiceStatus class description\n for an explanation of synthesizer voices.)"}, {"method_name": "isSoundbankSupported", "method_sig": "boolean isSoundbankSupported (Soundbank soundbank)", "description": "Informs the caller whether this synthesizer is capable of loading\n instruments from the specified soundbank. If the soundbank is\n unsupported, any attempts to load instruments from it will result in an\n IllegalArgumentException."}, {"method_name": "loadInstrument", "method_sig": "boolean loadInstrument (Instrument instrument)", "description": "Makes a particular instrument available for synthesis. This instrument is\n loaded into the patch location specified by its Patch object, so\n that if a program-change message is received (or has been received) that\n causes that patch to be selected, subsequent notes will be played using\n the sound of instrument. If the specified instrument is already\n loaded, this method does nothing and returns true.\n \n The instrument must be part of a soundbank that this Synthesizer\n supports. (To make sure, you can use the getSoundbank method of\n Instrument and the isSoundbankSupported method of\n Synthesizer.)"}, {"method_name": "unloadInstrument", "method_sig": "void unloadInstrument (Instrument instrument)", "description": "Unloads a particular instrument."}, {"method_name": "remapInstrument", "method_sig": "boolean remapInstrument (Instrument from,\n                        Instrument to)", "description": "Remaps an instrument. Instrument to takes the place of instrument\n from.\n \n For example, if from was located at bank number 2, program number\n 11, remapping causes that bank and program location to be occupied\n instead by to.\n \n If the function succeeds, instrument from is unloaded.\n \n To cancel the remapping reload instrument from by invoking one of\n loadInstrument(javax.sound.midi.Instrument), loadInstruments(javax.sound.midi.Soundbank, javax.sound.midi.Patch[]) or\n loadAllInstruments(javax.sound.midi.Soundbank)."}, {"method_name": "getDefaultSoundbank", "method_sig": "Soundbank getDefaultSoundbank()", "description": "Obtains the default soundbank for the synthesizer, if one exists. (Some\n synthesizers provide a default or built-in soundbank.) If a synthesizer\n doesn't have a default soundbank, instruments must be loaded explicitly\n from an external soundbank."}, {"method_name": "getAvailableInstruments", "method_sig": "Instrument[] getAvailableInstruments()", "description": "Obtains a list of instruments that come with the synthesizer. These\n instruments might be built into the synthesizer, or they might be part of\n a default soundbank provided with the synthesizer, etc.\n \n Note that you don't use this method to find out which instruments are\n currently loaded onto the synthesizer; for that purpose, you use\n getLoadedInstruments(). Nor does the method indicate all the\n instruments that can be loaded onto the synthesizer; it only indicates\n the subset that come with the synthesizer. To learn whether another\n instrument can be loaded, you can invoke isSoundbankSupported(),\n and if the instrument's Soundbank is supported, you can try\n loading the instrument."}, {"method_name": "getLoadedInstruments", "method_sig": "Instrument[] getLoadedInstruments()", "description": "Obtains a list of the instruments that are currently loaded onto this\n Synthesizer."}, {"method_name": "loadAllInstruments", "method_sig": "boolean loadAllInstruments (Soundbank soundbank)", "description": "Loads onto the Synthesizer all instruments contained in the\n specified Soundbank."}, {"method_name": "unloadAllInstruments", "method_sig": "void unloadAllInstruments (Soundbank soundbank)", "description": "Unloads all instruments contained in the specified Soundbank."}, {"method_name": "loadInstruments", "method_sig": "boolean loadInstruments (Soundbank soundbank,\n                        Patch[] patchList)", "description": "Loads the instruments referenced by the specified patches, from the\n specified Soundbank. Each of the Patch objects indicates\n a bank and program number; the Instrument that has the matching\n Patch is loaded into that bank and program location."}, {"method_name": "unloadInstruments", "method_sig": "void unloadInstruments (Soundbank soundbank,\n                       Patch[] patchList)", "description": "Unloads the instruments referenced by the specified patches, from the\n MIDI sound bank specified."}]}