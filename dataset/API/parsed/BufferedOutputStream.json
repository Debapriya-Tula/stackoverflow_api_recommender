{"name": "Class BufferedOutputStream", "module": "java.base", "package": "java.io", "text": "The class implements a buffered output stream. By setting up such\n an output stream, an application can write bytes to the underlying\n output stream without necessarily causing a call to the underlying\n system for each byte written.", "codes": ["public class BufferedOutputStream\nextends FilterOutputStream"], "fields": [{"field_name": "buf", "field_sig": "protected\u00a0byte[] buf", "description": "The internal buffer where data is stored."}, {"field_name": "count", "field_sig": "protected\u00a0int count", "description": "The number of valid bytes in the buffer. This value is always\n in the range 0 through buf.length; elements\n buf[0] through buf[count-1] contain valid\n byte data."}], "methods": [{"method_name": "write", "method_sig": "public void write (int b)\n           throws IOException", "description": "Writes the specified byte to this buffered output stream."}, {"method_name": "write", "method_sig": "public void write (byte[] b,\n                  int off,\n                  int len)\n           throws IOException", "description": "Writes len bytes from the specified byte array\n starting at offset off to this buffered output stream.\n\n  Ordinarily this method stores bytes from the given array into this\n stream's buffer, flushing the buffer to the underlying output stream as\n needed.  If the requested length is at least as large as this stream's\n buffer, however, then this method will flush the buffer and write the\n bytes directly to the underlying output stream.  Thus redundant\n BufferedOutputStreams will not copy data unnecessarily."}, {"method_name": "flush", "method_sig": "public void flush()\n           throws IOException", "description": "Flushes this buffered output stream. This forces any buffered\n output bytes to be written out to the underlying output stream."}]}