{"name": "Class JMenuItem", "module": "java.desktop", "package": "javax.swing", "text": "An implementation of an item in a menu. A menu item is essentially a button\n sitting in a list. When the user selects the \"button\", the action\n associated with the menu item is performed. A JMenuItem\n contained in a JPopupMenu performs exactly that function.\n \n Menu items can be configured, and to some degree controlled, by\n Actions.  Using an\n Action with a menu item has many benefits beyond directly\n configuring a menu item.  Refer to \n Swing Components Supporting Action for more\n details, and you can find more information in How\n to Use Actions, a section in The Java Tutorial.\n \n For further documentation and for examples, see\n How to Use Menus\n in The Java Tutorial.\n\nWarning: Swing is not thread safe. For more\n information see Swing's Threading\n Policy.\n \nWarning:\n Serialized objects of this class will not be compatible with\n future Swing releases. The current serialization support is\n appropriate for short term storage or RMI between applications running\n the same version of Swing.  As of 1.4, support for long term storage\n of all JavaBeans\u2122\n has been added to the java.beans package.\n Please see XMLEncoder.", "codes": ["@JavaBean(defaultProperty=\"UIClassID\",\n          description=\"An item which can be selected in a menu.\")\npublic class JMenuItem\nextends AbstractButton\nimplements Accessible, MenuElement"], "fields": [], "methods": [{"method_name": "init", "method_sig": "protected void init (String text,\n                    Icon icon)", "description": "Initializes the menu item with the specified text and icon."}, {"method_name": "setUI", "method_sig": "@BeanProperty(hidden=true,\n              visualUpdate=true,\n              description=\"The UI object that implements the LookAndFeel.\")\npublic void setUI (MenuItemUI ui)", "description": "Sets the look and feel object that renders this component."}, {"method_name": "updateUI", "method_sig": "public void updateUI()", "description": "Resets the UI property with a value from the current look and feel."}, {"method_name": "getUIClassID", "method_sig": "@BeanProperty(bound=false)\npublic String getUIClassID()", "description": "Returns the suffix used to construct the name of the L&F class used to\n render this component."}, {"method_name": "setArmed", "method_sig": "@BeanProperty(bound=false,\n              hidden=true,\n              description=\"Mouse release will fire an action event\")\npublic void setArmed (boolean b)", "description": "Identifies the menu item as \"armed\". If the mouse button is\n released while it is over this item, the menu's action event\n will fire. If the mouse button is released elsewhere, the\n event will not fire and the menu item will be disarmed."}, {"method_name": "isArmed", "method_sig": "public boolean isArmed()", "description": "Returns whether the menu item is \"armed\"."}, {"method_name": "setEnabled", "method_sig": "@BeanProperty(preferred=true,\n              description=\"The enabled state of the component.\")\npublic void setEnabled (boolean b)", "description": "Enables or disables the menu item."}, {"method_name": "setAccelerator", "method_sig": "@BeanProperty(preferred=true,\n              description=\"The keystroke combination which will invoke the JMenuItem\\'s actionlisteners without navigating the menu hierarchy\")\npublic void setAccelerator (KeyStroke keyStroke)", "description": "Sets the key combination which invokes the menu item's\n action listeners without navigating the menu hierarchy. It is the\n UI's responsibility to install the correct action.  Note that\n when the keyboard accelerator is typed, it will work whether or\n not the menu is currently displayed."}, {"method_name": "getAccelerator", "method_sig": "public KeyStroke getAccelerator()", "description": "Returns the KeyStroke which serves as an accelerator\n for the menu item."}, {"method_name": "configurePropertiesFromAction", "method_sig": "protected void configurePropertiesFromAction (Action a)", "description": "Sets the properties on this button to match those in the specified\n Action.  Refer to \n Swing Components Supporting Action for more\n details as to which properties this sets."}, {"method_name": "actionPropertyChanged", "method_sig": "protected void actionPropertyChanged (Action action,\n                                     String propertyName)", "description": "Updates the button's state in response to property changes in the\n associated action. This method is invoked from the\n PropertyChangeListener returned from\n createActionPropertyChangeListener. Subclasses do not normally\n need to invoke this. Subclasses that support additional Action\n properties should override this and\n configurePropertiesFromAction.\n \n Refer to the table at \n Swing Components Supporting Action for a list of\n the properties this method sets."}, {"method_name": "processMouseEvent", "method_sig": "public void processMouseEvent (MouseEvent e,\n                              MenuElement[] path,\n                              MenuSelectionManager manager)", "description": "Processes a mouse event forwarded from the\n MenuSelectionManager and changes the menu\n selection, if necessary, by using the\n MenuSelectionManager's API.\n \n Note: you do not have to forward the event to sub-components.\n This is done automatically by the MenuSelectionManager."}, {"method_name": "processKeyEvent", "method_sig": "public void processKeyEvent (KeyEvent e,\n                            MenuElement[] path,\n                            MenuSelectionManager manager)", "description": "Processes a key event forwarded from the\n MenuSelectionManager and changes the menu selection,\n if necessary, by using MenuSelectionManager's API.\n \n Note: you do not have to forward the event to sub-components.\n This is done automatically by the MenuSelectionManager."}, {"method_name": "processMenuDragMouseEvent", "method_sig": "public void processMenuDragMouseEvent (MenuDragMouseEvent e)", "description": "Handles mouse drag in a menu."}, {"method_name": "processMenuKeyEvent", "method_sig": "public void processMenuKeyEvent (MenuKeyEvent e)", "description": "Handles a keystroke in a menu."}, {"method_name": "fireMenuDragMouseEntered", "method_sig": "protected void fireMenuDragMouseEntered (MenuDragMouseEvent event)", "description": "Notifies all listeners that have registered interest for\n notification on this event type."}, {"method_name": "fireMenuDragMouseExited", "method_sig": "protected void fireMenuDragMouseExited (MenuDragMouseEvent event)", "description": "Notifies all listeners that have registered interest for\n notification on this event type."}, {"method_name": "fireMenuDragMouseDragged", "method_sig": "protected void fireMenuDragMouseDragged (MenuDragMouseEvent event)", "description": "Notifies all listeners that have registered interest for\n notification on this event type."}, {"method_name": "fireMenuDragMouseReleased", "method_sig": "protected void fireMenuDragMouseReleased (MenuDragMouseEvent event)", "description": "Notifies all listeners that have registered interest for\n notification on this event type."}, {"method_name": "fireMenuKeyPressed", "method_sig": "protected void fireMenuKeyPressed (MenuKeyEvent event)", "description": "Notifies all listeners that have registered interest for\n notification on this event type."}, {"method_name": "fireMenuKeyReleased", "method_sig": "protected void fireMenuKeyReleased (MenuKeyEvent event)", "description": "Notifies all listeners that have registered interest for\n notification on this event type."}, {"method_name": "fireMenuKeyTyped", "method_sig": "protected void fireMenuKeyTyped (MenuKeyEvent event)", "description": "Notifies all listeners that have registered interest for\n notification on this event type."}, {"method_name": "menuSelectionChanged", "method_sig": "public void menuSelectionChanged (boolean isIncluded)", "description": "Called by the MenuSelectionManager when the\n MenuElement is selected or unselected."}, {"method_name": "getSubElements", "method_sig": "@BeanProperty(bound=false)\npublic MenuElement[] getSubElements()", "description": "This method returns an array containing the sub-menu\n components for this menu component."}, {"method_name": "getComponent", "method_sig": "public Component getComponent()", "description": "Returns the java.awt.Component used to paint\n this object. The returned component will be used to convert\n events and detect if an event is inside a menu component."}, {"method_name": "addMenuDragMouseListener", "method_sig": "public void addMenuDragMouseListener (MenuDragMouseListener l)", "description": "Adds a MenuDragMouseListener to the menu item."}, {"method_name": "removeMenuDragMouseListener", "method_sig": "public void removeMenuDragMouseListener (MenuDragMouseListener l)", "description": "Removes a MenuDragMouseListener from the menu item."}, {"method_name": "getMenuDragMouseListeners", "method_sig": "@BeanProperty(bound=false)\npublic MenuDragMouseListener[] getMenuDragMouseListeners()", "description": "Returns an array of all the MenuDragMouseListeners added\n to this JMenuItem with addMenuDragMouseListener()."}, {"method_name": "addMenuKeyListener", "method_sig": "public void addMenuKeyListener (MenuKeyListener l)", "description": "Adds a MenuKeyListener to the menu item."}, {"method_name": "removeMenuKeyListener", "method_sig": "public void removeMenuKeyListener (MenuKeyListener l)", "description": "Removes a MenuKeyListener from the menu item."}, {"method_name": "getMenuKeyListeners", "method_sig": "@BeanProperty(bound=false)\npublic MenuKeyListener[] getMenuKeyListeners()", "description": "Returns an array of all the MenuKeyListeners added\n to this JMenuItem with addMenuKeyListener()."}, {"method_name": "paramString", "method_sig": "protected String paramString()", "description": "Returns a string representation of this JMenuItem.\n This method is intended to be used only for debugging purposes,\n and the content and format of the returned string may vary between\n implementations. The returned string may be empty but may not\n be null."}, {"method_name": "getAccessibleContext", "method_sig": "@BeanProperty(bound=false)\npublic AccessibleContext getAccessibleContext()", "description": "Returns the AccessibleContext associated with this\n JMenuItem. For JMenuItems,\n the AccessibleContext takes the form of an\n AccessibleJMenuItem.\n A new AccessibleJMenuItme instance is created if necessary."}]}