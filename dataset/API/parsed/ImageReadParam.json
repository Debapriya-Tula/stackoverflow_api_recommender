{"name": "Class ImageReadParam", "module": "java.desktop", "package": "javax.imageio", "text": "A class describing how a stream is to be decoded.  Instances of\n this class or its subclasses are used to supply prescriptive\n \"how-to\" information to instances of ImageReader.\n\n  An image encoded as part of a file or stream may be thought of\n extending out in multiple dimensions: the spatial dimensions of\n width and height, a number of bands, and a number of progressive\n decoding passes.  This class allows a contiguous (hyper)rectangular\n subarea of the image in all of these dimensions to be selected for\n decoding.  Additionally, the spatial dimensions may be subsampled\n discontinuously.  Finally, color and format conversions may be\n specified by controlling the ColorModel and\n SampleModel of the destination image, either by\n providing a BufferedImage or by using an\n ImageTypeSpecifier.\n\n  An ImageReadParam object is used to specify how an\n image, or a set of images, will be converted on input from\n a stream in the context of the Java Image I/O framework.  A plug-in for a\n specific image format will return instances of\n ImageReadParam from the\n getDefaultReadParam method of its\n ImageReader implementation.\n\n  The state maintained by an instance of\n ImageReadParam is independent of any particular image\n being decoded.  When actual decoding takes place, the values set in\n the read param are combined with the actual properties of the image\n being decoded from the stream and the destination\n BufferedImage that will receive the decoded pixel\n data.  For example, the source region set using\n setSourceRegion will first be intersected with the\n actual valid source area.  The result will be translated by the\n value returned by getDestinationOffset, and the\n resulting rectangle intersected with the actual valid destination\n area to yield the destination area that will be written.\n\n  The parameters specified by an ImageReadParam are\n applied to an image as follows.  First, if a rendering size has\n been set by setSourceRenderSize, the entire decoded\n image is rendered at the size given by\n getSourceRenderSize.  Otherwise, the image has its\n natural size given by ImageReader.getWidth and\n ImageReader.getHeight.\n\n  Next, the image is clipped against the source region\n specified by getSourceXOffset, getSourceYOffset,\n getSourceWidth, and getSourceHeight.\n\n  The resulting region is then subsampled according to the\n factors given in IIOParam.setSourceSubsampling.  The first pixel,\n the number of pixels per row, and the number of rows all depend\n on the subsampling settings.\n Call the minimum X and Y coordinates of the resulting rectangle\n (minX, minY), its width w\n and its height h.\n\n  This rectangle is offset by\n (getDestinationOffset().x,\n getDestinationOffset().y) and clipped against the\n destination bounds.  If no destination image has been set, the\n destination is defined to have a width of\n getDestinationOffset().x + w, and a\n height of getDestinationOffset().y + h so\n that all pixels of the source region may be written to the\n destination.\n\n  Pixels that land, after subsampling, within the destination\n image, and that are written in one of the progressive passes\n specified by getSourceMinProgressivePass and\n getSourceNumProgressivePasses are passed along to the\n next step.\n\n  Finally, the source samples of each pixel are mapped into\n destination bands according to the algorithm described in the\n comment for setDestinationBands.\n\n  Plug-in writers may extend the functionality of\n ImageReadParam by providing a subclass that implements\n additional, plug-in specific interfaces.  It is up to the plug-in\n to document what interfaces are available and how they are to be\n used.  Readers will silently ignore any extended features of an\n ImageReadParam subclass of which they are not aware.\n Also, they may ignore any optional features that they normally\n disable when creating their own ImageReadParam\n instances via getDefaultReadParam.\n\n  Note that unless a query method exists for a capability, it must\n be supported by all ImageReader implementations\n (e.g. source render size is optional, but subsampling must be\n supported).", "codes": ["public class ImageReadParam\nextends IIOParam"], "fields": [{"field_name": "canSetSourceRenderSize", "field_sig": "protected\u00a0boolean canSetSourceRenderSize", "description": "true if this ImageReadParam allows\n the source rendering dimensions to be set.  By default, the\n value is false.  Subclasses must set this value\n manually.\n\n  ImageReaders that do not support setting of\n the source render size should set this value to\n false."}, {"field_name": "sourceRenderSize", "field_sig": "protected\u00a0Dimension sourceRenderSize", "description": "The desired rendering width and height of the source, if\n canSetSourceRenderSize is true, or\n null.\n\n  ImageReaders that do not support setting of\n the source render size may ignore this value."}, {"field_name": "destination", "field_sig": "protected\u00a0BufferedImage destination", "description": "The current destination BufferedImage, or\n null if none has been set.  By default, the value\n is null."}, {"field_name": "destinationBands", "field_sig": "protected\u00a0int[] destinationBands", "description": "The set of destination bands to be used, as an array of\n ints.  By default, the value is null,\n indicating all destination bands should be written in order."}, {"field_name": "minProgressivePass", "field_sig": "protected\u00a0int minProgressivePass", "description": "The minimum index of a progressive pass to read from the\n source.  By default, the value is set to 0, which indicates\n that passes starting with the first available pass should be\n decoded.\n\n  Subclasses should ensure that this value is\n non-negative."}, {"field_name": "numProgressivePasses", "field_sig": "protected\u00a0int numProgressivePasses", "description": "The maximum number of progressive passes to read from the\n source.  By default, the value is set to\n Integer.MAX_VALUE, which indicates that passes up\n to and including the last available pass should be decoded.\n\n  Subclasses should ensure that this value is positive.\n Additionally, if the value is not\n Integer.MAX_VALUE, then\n minProgressivePass + numProgressivePasses - 1\n should not exceed\n Integer.MAX_VALUE."}], "methods": [{"method_name": "setDestination", "method_sig": "public void setDestination (BufferedImage destination)", "description": "Supplies a BufferedImage to be used as the\n destination for decoded pixel data.  The currently set image\n will be written to by the read,\n readAll, and readRaster methods, and\n a reference to it will be returned by those methods.\n\n  Pixel data from the aforementioned methods will be written\n starting at the offset specified by\n getDestinationOffset.\n\n  If destination is null, a\n newly-created BufferedImage will be returned by\n those methods.\n\n  At the time of reading, the image is checked to verify that\n its ColorModel and SampleModel\n correspond to one of the ImageTypeSpecifiers\n returned from the ImageReader's\n getImageTypes method.  If it does not, the reader\n will throw an IIOException."}, {"method_name": "getDestination", "method_sig": "public BufferedImage getDestination()", "description": "Returns the BufferedImage currently set by the\n setDestination method, or null\n if none is set."}, {"method_name": "setDestinationBands", "method_sig": "public void setDestinationBands (int[] destinationBands)", "description": "Sets the indices of the destination bands where data\n will be placed.  Duplicate indices are not allowed.\n\n  A null value indicates that all destination\n bands will be used.\n\n  Choosing a destination band subset will not affect the\n number of bands in the output image of a read if no destination\n image is specified; the created destination image will still\n have the same number of bands as if this method had never been\n called.  If a different number of bands in the destination\n image is desired, an image must be supplied using the\n ImageReadParam.setDestination method.\n\n  At the time of reading or writing, an\n IllegalArgumentException will be thrown by the\n reader or writer if a value larger than the largest destination\n band index has been specified, or if the number of source bands\n and destination bands to be used differ.  The\n ImageReader.checkReadParamBandSettings method may\n be used to automate this test."}, {"method_name": "getDestinationBands", "method_sig": "public int[] getDestinationBands()", "description": "Returns the set of band indices where data will be placed.\n If no value has been set, null is returned to\n indicate that all destination bands will be used."}, {"method_name": "canSetSourceRenderSize", "method_sig": "public boolean canSetSourceRenderSize()", "description": "Returns true if this reader allows the source\n image to be rendered at an arbitrary size as part of the\n decoding process, by means of the\n setSourceRenderSize method.  If this method\n returns false, calls to\n setSourceRenderSize will throw an\n UnsupportedOperationException."}, {"method_name": "setSourceRenderSize", "method_sig": "public void setSourceRenderSize (Dimension size)\n                         throws UnsupportedOperationException", "description": "If the image is able to be rendered at an arbitrary size, sets\n the source width and height to the supplied values.  Note that\n the values returned from the getWidth and\n getHeight methods on ImageReader are\n not affected by this method; they will continue to return the\n default size for the image.  Similarly, if the image is also\n tiled the tile width and height are given in terms of the default\n size.\n\n  Typically, the width and height should be chosen such that\n the ratio of width to height closely approximates the aspect\n ratio of the image, as returned from\n ImageReader.getAspectRatio.\n\n  If this plug-in does not allow the rendering size to be\n set, an UnsupportedOperationException will be\n thrown.\n\n  To remove the render size setting, pass in a value of\n null for size."}, {"method_name": "getSourceRenderSize", "method_sig": "public Dimension getSourceRenderSize()", "description": "Returns the width and height of the source image as it\n will be rendered during decoding, if they have been set via the\n setSourceRenderSize method.  A\n null value indicates that no setting has been made."}, {"method_name": "setSourceProgressivePasses", "method_sig": "public void setSourceProgressivePasses (int minPass,\n                                       int numPasses)", "description": "Sets the range of progressive passes that will be decoded.\n Passes outside of this range will be ignored.\n\n  A progressive pass is a re-encoding of the entire image,\n generally at progressively higher effective resolutions, but\n requiring greater transmission bandwidth.  The most common use\n of progressive encoding is found in the JPEG format, where\n successive passes include more detailed representations of the\n high-frequency image content.\n\n  The actual number of passes to be decoded is determined\n during decoding, based on the number of actual passes available\n in the stream.  Thus if minPass + numPasses - 1 is\n larger than the index of the last available passes, decoding\n will end with that pass.\n\n  A value of numPasses of\n Integer.MAX_VALUE indicates that all passes from\n minPass forward should be read.  Otherwise, the\n index of the last pass (i.e., minPass + numPasses - 1)\n must not exceed Integer.MAX_VALUE.\n\n  There is no unsetSourceProgressivePasses\n method; the same effect may be obtained by calling\n setSourceProgressivePasses(0, Integer.MAX_VALUE)."}, {"method_name": "getSourceMinProgressivePass", "method_sig": "public int getSourceMinProgressivePass()", "description": "Returns the index of the first progressive pass that will be\n decoded. If no value has been set, 0 will be returned (which is\n the correct value)."}, {"method_name": "getSourceMaxProgressivePass", "method_sig": "public int getSourceMaxProgressivePass()", "description": "If getSourceNumProgressivePasses is equal to\n Integer.MAX_VALUE, returns\n Integer.MAX_VALUE.  Otherwise, returns\n getSourceMinProgressivePass() +\n getSourceNumProgressivePasses() - 1."}, {"method_name": "getSourceNumProgressivePasses", "method_sig": "public int getSourceNumProgressivePasses()", "description": "Returns the number of the progressive passes that will be\n decoded. If no value has been set,\n Integer.MAX_VALUE will be returned (which is the\n correct value)."}]}