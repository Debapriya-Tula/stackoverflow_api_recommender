{"name": "Class DefaultFormatterFactory", "module": "java.desktop", "package": "javax.swing.text", "text": "An implementation of\n JFormattedTextField.AbstractFormatterFactory.\n DefaultFormatterFactory allows specifying a number of\n different JFormattedTextField.AbstractFormatters that are to\n be used.\n The most important one is the default one\n (setDefaultFormatter). The default formatter will be used\n if a more specific formatter could not be found. The following process\n is used to determine the appropriate formatter to use.\n \nIs the passed in value null? Use the null formatter.\n   Does the JFormattedTextField have focus? Use the edit\n       formatter.\n   Otherwise, use the display formatter.\n   If a non-null AbstractFormatter has not been found, use\n       the default formatter.\n \n\n The following code shows how to configure a\n JFormattedTextField with two\n JFormattedTextField.AbstractFormatters, one for display and\n one for editing.\n \n JFormattedTextField.AbstractFormatter editFormatter = ...;\n JFormattedTextField.AbstractFormatter displayFormatter = ...;\n DefaultFormatterFactory factory = new DefaultFormatterFactory(\n                 displayFormatter, displayFormatter, editFormatter);\n JFormattedTextField tf = new JFormattedTextField(factory);\n \n\nWarning:\n Serialized objects of this class will not be compatible with\n future Swing releases. The current serialization support is\n appropriate for short term storage or RMI between applications running\n the same version of Swing.  As of 1.4, support for long term storage\n of all JavaBeans\u2122\n has been added to the java.beans package.\n Please see XMLEncoder.", "codes": ["public class DefaultFormatterFactory\nextends JFormattedTextField.AbstractFormatterFactory\nimplements Serializable"], "fields": [], "methods": [{"method_name": "setDefaultFormatter", "method_sig": "public void setDefaultFormatter (JFormattedTextField.AbstractFormatter atf)", "description": "Sets the JFormattedTextField.AbstractFormatter to use as\n a last resort, eg in case a display, edit or null\n JFormattedTextField.AbstractFormatter has not been\n specified."}, {"method_name": "getDefaultFormatter", "method_sig": "public JFormattedTextField.AbstractFormatter getDefaultFormatter()", "description": "Returns the JFormattedTextField.AbstractFormatter to use\n as a last resort, eg in case a display, edit or null\n JFormattedTextField.AbstractFormatter\n has not been specified."}, {"method_name": "setDisplayFormatter", "method_sig": "public void setDisplayFormatter (JFormattedTextField.AbstractFormatter atf)", "description": "Sets the JFormattedTextField.AbstractFormatter to use if\n the JFormattedTextField is not being edited and either\n the value is not-null, or the value is null and a null formatter has\n has not been specified."}, {"method_name": "getDisplayFormatter", "method_sig": "public JFormattedTextField.AbstractFormatter getDisplayFormatter()", "description": "Returns the JFormattedTextField.AbstractFormatter to use\n if the JFormattedTextField is not being edited and either\n the value is not-null, or the value is null and a null formatter has\n has not been specified."}, {"method_name": "setEditFormatter", "method_sig": "public void setEditFormatter (JFormattedTextField.AbstractFormatter atf)", "description": "Sets the JFormattedTextField.AbstractFormatter to use if\n the JFormattedTextField is being edited and either\n the value is not-null, or the value is null and a null formatter has\n has not been specified."}, {"method_name": "getEditFormatter", "method_sig": "public JFormattedTextField.AbstractFormatter getEditFormatter()", "description": "Returns the JFormattedTextField.AbstractFormatter to use\n if the JFormattedTextField is being edited and either\n the value is not-null, or the value is null and a null formatter has\n has not been specified."}, {"method_name": "setNullFormatter", "method_sig": "public void setNullFormatter (JFormattedTextField.AbstractFormatter atf)", "description": "Sets the formatter to use if the value of the JFormattedTextField is\n null."}, {"method_name": "getNullFormatter", "method_sig": "public JFormattedTextField.AbstractFormatter getNullFormatter()", "description": "Returns the formatter to use if the value is null."}, {"method_name": "getFormatter", "method_sig": "public JFormattedTextField.AbstractFormatter getFormatter (JFormattedTextField source)", "description": "Returns either the default formatter, display formatter, editor\n formatter or null formatter based on the state of the\n JFormattedTextField."}]}