{"name": "Interface InvocationHandler", "module": "java.base", "package": "java.lang.reflect", "text": "InvocationHandler is the interface implemented by\n the invocation handler of a proxy instance.\n\n Each proxy instance has an associated invocation handler.\n When a method is invoked on a proxy instance, the method\n invocation is encoded and dispatched to the invoke\n method of its invocation handler.", "codes": ["public interface InvocationHandler"], "fields": [], "methods": [{"method_name": "invoke", "method_sig": "Object invoke (Object proxy,\n              Method method,\n              Object[] args)\n       throws Throwable", "description": "Processes a method invocation on a proxy instance and returns\n the result.  This method will be invoked on an invocation handler\n when a method is invoked on a proxy instance that it is\n associated with."}]}