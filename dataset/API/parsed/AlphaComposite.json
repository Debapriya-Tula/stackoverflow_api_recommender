{"name": "Class AlphaComposite", "module": "java.desktop", "package": "java.awt", "text": "The AlphaComposite class implements basic alpha\n compositing rules for combining source and destination colors\n to achieve blending and transparency effects with graphics and\n images.\n The specific rules implemented by this class are the basic set\n of 12 rules described in\n T. Porter and T. Duff, \"Compositing Digital Images\", SIGGRAPH 84,\n 253-259.\n The rest of this documentation assumes some familiarity with the\n definitions and concepts outlined in that paper.\n\n \n This class extends the standard equations defined by Porter and\n Duff to include one additional factor.\n An instance of the AlphaComposite class can contain\n an alpha value that is used to modify the opacity or coverage of\n every source pixel before it is used in the blending equations.\n\n \n It is important to note that the equations defined by the Porter\n and Duff paper are all defined to operate on color components\n that are premultiplied by their corresponding alpha components.\n Since the ColorModel and Raster classes\n allow the storage of pixel data in either premultiplied or\n non-premultiplied form, all input data must be normalized into\n premultiplied form before applying the equations and all results\n might need to be adjusted back to the form required by the destination\n before the pixel values are stored.\n\n \n Also note that this class defines only the equations\n for combining color and alpha values in a purely mathematical\n sense. The accurate application of its equations depends\n on the way the data is retrieved from its sources and stored\n in its destinations.\n See Implementation Caveats\n for further information.\n\n \n The following factors are used in the description of the blending\n equation in the Porter and Duff paper:\n\n \nFactors\n\n\nFactor\n     Definition\n \n\n\nAs\nthe alpha component of the source pixel\n   \nCs\na color component of the source pixel in premultiplied form\n   \nAd\nthe alpha component of the destination pixel\n   \nCd\na color component of the destination pixel in premultiplied form\n   \nFs\nthe fraction of the source pixel that contributes to the output\n   \nFd\nthe fraction of the destination pixel that contributes to the output\n   \nAr\nthe alpha component of the result\n   \nCr\na color component of the result in premultiplied form\n \n\n\n Using these factors, Porter and Duff define 12 ways of choosing\n the blending factors Fs and Fd to\n produce each of 12 desirable visual effects.\n The equations for determining Fs and Fd\n are given in the descriptions of the 12 static fields\n that specify visual effects.\n For example,\n the description for\n SRC_OVER\n specifies that Fs = 1 and Fd = (1-As).\n Once a set of equations for determining the blending factors is\n known they can then be applied to each pixel to produce a result\n using the following set of equations:\n\n \n      Fs = f(Ad)\n      Fd = f(As)\n      Ar = As*Fs + Ad*Fd\n      Cr = Cs*Fs + Cd*Fd\n\n The following factors will be used to discuss our extensions to\n the blending equation in the Porter and Duff paper:\n\n \nFactors\n\n\nFactor\n     Definition\n \n\n\nCsr\none of the raw color components of the source pixel\n   \nCdr\none of the raw color components of the destination pixel\n   \nAac\nthe \"extra\" alpha component from the AlphaComposite instance\n   \nAsr\nthe raw alpha component of the source pixel\n   \nAdr\nthe raw alpha component of the destination pixel\n   \nAdf\nthe final alpha component stored in the destination\n   \nCdf\nthe final raw color component stored in the destination\n \n\nPreparing Inputs\n\n The AlphaComposite class defines an additional alpha\n value that is applied to the source alpha.\n This value is applied as if an implicit SRC_IN rule were first\n applied to the source pixel against a pixel with the indicated\n alpha by multiplying both the raw source alpha and the raw\n source colors by the alpha in the AlphaComposite.\n This leads to the following equation for producing the alpha\n used in the Porter and Duff blending equation:\n\n \n      As = Asr * Aac \n\n All of the raw source color components need to be multiplied\n by the alpha in the AlphaComposite instance.\n Additionally, if the source was not in premultiplied form\n then the color components also need to be multiplied by the\n source alpha.\n Thus, the equation for producing the source color components\n for the Porter and Duff equation depends on whether the source\n pixels are premultiplied or not:\n\n \n      Cs = Csr * Asr * Aac     (if source is not premultiplied)\n      Cs = Csr * Aac           (if source is premultiplied) \n\n No adjustment needs to be made to the destination alpha:\n\n \n      Ad = Adr \n\n The destination color components need to be adjusted only if\n they are not in premultiplied form:\n\n \n      Cd = Cdr * Ad    (if destination is not premultiplied)\n      Cd = Cdr         (if destination is premultiplied) \nApplying the Blending Equation\n\n The adjusted As, Ad,\n Cs, and Cd are used in the standard\n Porter and Duff equations to calculate the blending factors\n Fs and Fd and then the resulting\n premultiplied components Ar and Cr.\n\n Preparing Results\n\n The results only need to be adjusted if they are to be stored\n back into a destination buffer that holds data that is not\n premultiplied, using the following equations:\n\n \n      Adf = Ar\n      Cdf = Cr                 (if dest is premultiplied)\n      Cdf = Cr / Ar            (if dest is not premultiplied) \n\n Note that since the division is undefined if the resulting alpha\n is zero, the division in that case is omitted to avoid the \"divide\n by zero\" and the color components are left as\n all zeros.\n\n Performance Considerations\n\n For performance reasons, it is preferable that\n Raster objects passed to the compose\n method of a CompositeContext object created by the\n AlphaComposite class have premultiplied data.\n If either the source Raster\n or the destination Raster\n is not premultiplied, however,\n appropriate conversions are performed before and after the compositing\n operation.\n\n Implementation Caveats\n\n\n Many sources, such as some of the opaque image types listed\n in the BufferedImage class, do not store alpha values\n for their pixels.  Such sources supply an alpha of 1.0 for\n all of their pixels.\n\n \n Many destinations also have no place to store the alpha values\n that result from the blending calculations performed by this class.\n Such destinations thus implicitly discard the resulting\n alpha values that this class produces.\n It is recommended that such destinations should treat their stored\n color values as non-premultiplied and divide the resulting color\n values by the resulting alpha value before storing the color\n values and discarding the alpha value.\n\n \n The accuracy of the results depends on the manner in which pixels\n are stored in the destination.\n An image format that provides at least 8 bits of storage per color\n and alpha component is at least adequate for use as a destination\n for a sequence of a few to a dozen compositing operations.\n An image format with fewer than 8 bits of storage per component\n is of limited use for just one or two compositing operations\n before the rounding errors dominate the results.\n An image format\n that does not separately store\n color components is not a\n good candidate for any type of translucent blending.\n For example, BufferedImage.TYPE_BYTE_INDEXED\n should not be used as a destination for a blending operation\n because every operation\n can introduce large errors, due to\n the need to choose a pixel from a limited palette to match the\n results of the blending equations.\n\n \n Nearly all formats store pixels as discrete integers rather than\n the floating point values used in the reference equations above.\n The implementation can either scale the integer pixel\n values into floating point values in the range 0.0 to 1.0 or\n use slightly modified versions of the equations\n that operate entirely in the integer domain and yet produce\n analogous results to the reference equations.\n\n \n Typically the integer values are related to the floating point\n values in such a way that the integer 0 is equated\n to the floating point value 0.0 and the integer\n 2^n-1 (where n is the number of bits\n in the representation) is equated to 1.0.\n For 8-bit representations, this means that 0x00\n represents 0.0 and 0xff represents\n 1.0.\n\n \n The internal implementation can approximate some of the equations\n and it can also eliminate some steps to avoid unnecessary operations.\n For example, consider a discrete integer image with non-premultiplied\n alpha values that uses 8 bits per component for storage.\n The stored values for a\n nearly transparent darkened red might be:\n\n \n    (A, R, G, B) = (0x01, 0xb0, 0x00, 0x00)\n\n If integer math were being used and this value were being\n composited in\n SRC\n mode with no extra alpha, then the math would\n indicate that the results were (in integer format):\n\n \n    (A, R, G, B) = (0x01, 0x01, 0x00, 0x00)\n\n Note that the intermediate values, which are always in premultiplied\n form, would only allow the integer red component to be either 0x00\n or 0x01.  When we try to store this result back into a destination\n that is not premultiplied, dividing out the alpha will give us\n very few choices for the non-premultiplied red value.\n In this case an implementation that performs the math in integer\n space without shortcuts is likely to end up with the final pixel\n values of:\n\n \n    (A, R, G, B) = (0x01, 0xff, 0x00, 0x00)\n\n (Note that 0x01 divided by 0x01 gives you 1.0, which is equivalent\n to the value 0xff in an 8-bit storage format.)\n\n \n Alternately, an implementation that uses floating point math\n might produce more accurate results and end up returning to the\n original pixel value with little, if any, round-off error.\n Or, an implementation using integer math might decide that since\n the equations boil down to a virtual NOP on the color values\n if performed in a floating point space, it can transfer the\n pixel untouched to the destination and avoid all the math entirely.\n\n \n These implementations all attempt to honor the\n same equations, but use different tradeoffs of integer and\n floating point math and reduced or full equations.\n To account for such differences, it is probably best to\n expect only that the premultiplied form of the results to\n match between implementations and image formats.  In this\n case both answers, expressed in premultiplied form would\n equate to:\n\n \n    (A, R, G, B) = (0x01, 0x01, 0x00, 0x00)\n\n and thus they would all match.\n\n \n Because of the technique of simplifying the equations for\n calculation efficiency, some implementations might perform\n differently when encountering result alpha values of 0.0\n on a non-premultiplied destination.\n Note that the simplification of removing the divide by alpha\n in the case of the SRC rule is technically not valid if the\n denominator (alpha) is 0.\n But, since the results should only be expected to be accurate\n when viewed in premultiplied form, a resulting alpha of 0\n essentially renders the resulting color components irrelevant\n and so exact behavior in this case should not be expected.\n ", "codes": ["public final class AlphaComposite\nextends Object\nimplements Composite"], "fields": [{"field_name": "CLEAR", "field_sig": "@Native\npublic static final\u00a0int CLEAR", "description": "Both the color and the alpha of the destination are cleared\n (Porter-Duff Clear rule).\n Neither the source nor the destination is used as input.\n\nFs = 0 and Fd = 0, thus:\n\n  Ar = 0\n  Cr = 0\n"}, {"field_name": "SRC", "field_sig": "@Native\npublic static final\u00a0int SRC", "description": "The source is copied to the destination\n (Porter-Duff Source rule).\n The destination is not used as input.\n\nFs = 1 and Fd = 0, thus:\n\n  Ar = As\n  Cr = Cs\n"}, {"field_name": "DST", "field_sig": "@Native\npublic static final\u00a0int DST", "description": "The destination is left untouched\n (Porter-Duff Destination rule).\n\nFs = 0 and Fd = 1, thus:\n\n  Ar = Ad\n  Cr = Cd\n"}, {"field_name": "SRC_OVER", "field_sig": "@Native\npublic static final\u00a0int SRC_OVER", "description": "The source is composited over the destination\n (Porter-Duff Source Over Destination rule).\n\nFs = 1 and Fd = (1-As), thus:\n\n  Ar = As + Ad*(1-As)\n  Cr = Cs + Cd*(1-As)\n"}, {"field_name": "DST_OVER", "field_sig": "@Native\npublic static final\u00a0int DST_OVER", "description": "The destination is composited over the source and\n the result replaces the destination\n (Porter-Duff Destination Over Source rule).\n\nFs = (1-Ad) and Fd = 1, thus:\n\n  Ar = As*(1-Ad) + Ad\n  Cr = Cs*(1-Ad) + Cd\n"}, {"field_name": "SRC_IN", "field_sig": "@Native\npublic static final\u00a0int SRC_IN", "description": "The part of the source lying inside of the destination replaces\n the destination\n (Porter-Duff Source In Destination rule).\n\nFs = Ad and Fd = 0, thus:\n\n  Ar = As*Ad\n  Cr = Cs*Ad\n"}, {"field_name": "DST_IN", "field_sig": "@Native\npublic static final\u00a0int DST_IN", "description": "The part of the destination lying inside of the source\n replaces the destination\n (Porter-Duff Destination In Source rule).\n\nFs = 0 and Fd = As, thus:\n\n  Ar = Ad*As\n  Cr = Cd*As\n"}, {"field_name": "SRC_OUT", "field_sig": "@Native\npublic static final\u00a0int SRC_OUT", "description": "The part of the source lying outside of the destination\n replaces the destination\n (Porter-Duff Source Held Out By Destination rule).\n\nFs = (1-Ad) and Fd = 0, thus:\n\n  Ar = As*(1-Ad)\n  Cr = Cs*(1-Ad)\n"}, {"field_name": "DST_OUT", "field_sig": "@Native\npublic static final\u00a0int DST_OUT", "description": "The part of the destination lying outside of the source\n replaces the destination\n (Porter-Duff Destination Held Out By Source rule).\n\nFs = 0 and Fd = (1-As), thus:\n\n  Ar = Ad*(1-As)\n  Cr = Cd*(1-As)\n"}, {"field_name": "SRC_ATOP", "field_sig": "@Native\npublic static final\u00a0int SRC_ATOP", "description": "The part of the source lying inside of the destination\n is composited onto the destination\n (Porter-Duff Source Atop Destination rule).\n\nFs = Ad and Fd = (1-As), thus:\n\n  Ar = As*Ad + Ad*(1-As) = Ad\n  Cr = Cs*Ad + Cd*(1-As)\n"}, {"field_name": "DST_ATOP", "field_sig": "@Native\npublic static final\u00a0int DST_ATOP", "description": "The part of the destination lying inside of the source\n is composited over the source and replaces the destination\n (Porter-Duff Destination Atop Source rule).\n\nFs = (1-Ad) and Fd = As, thus:\n\n  Ar = As*(1-Ad) + Ad*As = As\n  Cr = Cs*(1-Ad) + Cd*As\n"}, {"field_name": "XOR", "field_sig": "@Native\npublic static final\u00a0int XOR", "description": "The part of the source that lies outside of the destination\n is combined with the part of the destination that lies outside\n of the source\n (Porter-Duff Source Xor Destination rule).\n\nFs = (1-Ad) and Fd = (1-As), thus:\n\n  Ar = As*(1-Ad) + Ad*(1-As)\n  Cr = Cs*(1-Ad) + Cd*(1-As)\n"}, {"field_name": "Clear", "field_sig": "public static final\u00a0AlphaComposite Clear", "description": "AlphaComposite object that implements the opaque CLEAR rule\n with an alpha of 1.0f."}, {"field_name": "Src", "field_sig": "public static final\u00a0AlphaComposite Src", "description": "AlphaComposite object that implements the opaque SRC rule\n with an alpha of 1.0f."}, {"field_name": "Dst", "field_sig": "public static final\u00a0AlphaComposite Dst", "description": "AlphaComposite object that implements the opaque DST rule\n with an alpha of 1.0f."}, {"field_name": "SrcOver", "field_sig": "public static final\u00a0AlphaComposite SrcOver", "description": "AlphaComposite object that implements the opaque SRC_OVER rule\n with an alpha of 1.0f."}, {"field_name": "DstOver", "field_sig": "public static final\u00a0AlphaComposite DstOver", "description": "AlphaComposite object that implements the opaque DST_OVER rule\n with an alpha of 1.0f."}, {"field_name": "SrcIn", "field_sig": "public static final\u00a0AlphaComposite SrcIn", "description": "AlphaComposite object that implements the opaque SRC_IN rule\n with an alpha of 1.0f."}, {"field_name": "DstIn", "field_sig": "public static final\u00a0AlphaComposite DstIn", "description": "AlphaComposite object that implements the opaque DST_IN rule\n with an alpha of 1.0f."}, {"field_name": "SrcOut", "field_sig": "public static final\u00a0AlphaComposite SrcOut", "description": "AlphaComposite object that implements the opaque SRC_OUT rule\n with an alpha of 1.0f."}, {"field_name": "DstOut", "field_sig": "public static final\u00a0AlphaComposite DstOut", "description": "AlphaComposite object that implements the opaque DST_OUT rule\n with an alpha of 1.0f."}, {"field_name": "SrcAtop", "field_sig": "public static final\u00a0AlphaComposite SrcAtop", "description": "AlphaComposite object that implements the opaque SRC_ATOP rule\n with an alpha of 1.0f."}, {"field_name": "DstAtop", "field_sig": "public static final\u00a0AlphaComposite DstAtop", "description": "AlphaComposite object that implements the opaque DST_ATOP rule\n with an alpha of 1.0f."}, {"field_name": "Xor", "field_sig": "public static final\u00a0AlphaComposite Xor", "description": "AlphaComposite object that implements the opaque XOR rule\n with an alpha of 1.0f."}], "methods": [{"method_name": "getInstance", "method_sig": "public static AlphaComposite getInstance (int rule)", "description": "Creates an AlphaComposite object with the specified rule."}, {"method_name": "getInstance", "method_sig": "public static AlphaComposite getInstance (int rule,\n                                         float alpha)", "description": "Creates an AlphaComposite object with the specified rule and\n the constant alpha to multiply with the alpha of the source.\n The source is multiplied with the specified alpha before being composited\n with the destination."}, {"method_name": "createContext", "method_sig": "public CompositeContext createContext (ColorModel srcColorModel,\n                                      ColorModel dstColorModel,\n                                      RenderingHints hints)", "description": "Creates a context for the compositing operation.\n The context contains state that is used in performing\n the compositing operation."}, {"method_name": "getAlpha", "method_sig": "public float getAlpha()", "description": "Returns the alpha value of this AlphaComposite.  If this\n AlphaComposite does not have an alpha value, 1.0 is returned."}, {"method_name": "getRule", "method_sig": "public int getRule()", "description": "Returns the compositing rule of this AlphaComposite."}, {"method_name": "derive", "method_sig": "public AlphaComposite derive (int rule)", "description": "Returns a similar AlphaComposite object that uses\n the specified compositing rule.\n If this object already uses the specified compositing rule,\n this object is returned."}, {"method_name": "derive", "method_sig": "public AlphaComposite derive (float alpha)", "description": "Returns a similar AlphaComposite object that uses\n the specified alpha value.\n If this object already has the specified alpha value,\n this object is returned."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Returns the hashcode for this composite."}, {"method_name": "equals", "method_sig": "public boolean equals (Object obj)", "description": "Determines whether the specified object is equal to this\n AlphaComposite.\n \n The result is true if and only if\n the argument is not null and is an\n AlphaComposite object that has the same\n compositing rule and alpha value as this object."}]}