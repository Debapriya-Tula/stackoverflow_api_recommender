{"name": "Interface ModelMBeanInfo", "module": "java.management", "package": "javax.management.modelmbean", "text": "This interface is implemented by the ModelMBeanInfo for every ModelMBean. An implementation of this interface\n must be shipped with every JMX Agent.\n \n Java resources wishing to be manageable instantiate the ModelMBean using the MBeanServer's\n createMBean method.  The resource then sets the ModelMBeanInfo and Descriptors for the ModelMBean\n instance. The attributes, operations, and notifications exposed via the ModelMBeanInfo for the\n ModelMBean comprise the management interface and are accessible\n from MBeans, connectors/adaptors like other MBeans. Through the Descriptors, values and methods in\n the managed application can be defined and mapped to attributes and operations of the ModelMBean.\n This mapping can be defined during development in a file or dynamically and\n programmatically at runtime.\n \n Every ModelMBean which is instantiated in the MBeanServer becomes manageable:\n its attributes, operations, and notifications\n become remotely accessible through the connectors/adaptors connected to that MBeanServer.\n A Java object cannot be registered in the MBeanServer unless it is a JMX compliant MBean.\n By instantiating a ModelMBean, resources are guaranteed that the MBean is valid.\n\n MBeanException and RuntimeOperationsException must be thrown on every public method.  This allows\n  for wrapping exceptions from distributed communications (RMI, EJB, etc.)", "codes": ["public interface ModelMBeanInfo"], "fields": [], "methods": [{"method_name": "getDescriptors", "method_sig": "Descriptor[] getDescriptors (String inDescriptorType)\n                     throws MBeanException,\n                            RuntimeOperationsException", "description": "Returns a Descriptor array consisting of all\n Descriptors for the ModelMBeanInfo of type inDescriptorType."}, {"method_name": "setDescriptors", "method_sig": "void setDescriptors (Descriptor[] inDescriptors)\n             throws MBeanException,\n                    RuntimeOperationsException", "description": "Adds or replaces descriptors in the ModelMBeanInfo."}, {"method_name": "getDescriptor", "method_sig": "Descriptor getDescriptor (String inDescriptorName,\n                         String inDescriptorType)\n                  throws MBeanException,\n                         RuntimeOperationsException", "description": "Returns a Descriptor requested by name and descriptorType."}, {"method_name": "setDescriptor", "method_sig": "void setDescriptor (Descriptor inDescriptor,\n                   String inDescriptorType)\n            throws MBeanException,\n                   RuntimeOperationsException", "description": "Sets descriptors in the info array of type inDescriptorType\n for the ModelMBean.  The setDescriptor method of the\n corresponding ModelMBean*Info will be called to set the\n specified descriptor."}, {"method_name": "getMBeanDescriptor", "method_sig": "Descriptor getMBeanDescriptor()\n                       throws MBeanException,\n                              RuntimeOperationsException", "description": "Returns the ModelMBean's descriptor which contains MBean wide\n policies.  This descriptor contains metadata about the MBean and default\n policies for persistence and caching.\n\n The fields in the descriptor are defined, but not limited to, the\n following.  Note that when the Type in this table is Number, a String\n that is the decimal representation of a Long can also be used.\n\nModelMBean Fields\n\nNameTypeMeaning\n\n\nnameString\nMBean name.\ndescriptorTypeString\nMust be \"mbean\".\ndisplayNameString\nName of MBean to be used in displays.\npersistPolicyString\nOne of: OnUpdate|OnTimer|NoMoreOftenThan|OnUnregister|Always|Never.\n         See the section \"MBean Descriptor Fields\" in the JMX specification\n         document.\npersistLocationString\nThe fully qualified directory name where the MBean should be\n         persisted (if appropriate).\npersistFileString\nFile name into which the MBean should be persisted.\npersistPeriodNumber\nFrequency of persist cycle in seconds, for OnTime and\n         NoMoreOftenThan PersistPolicy\ncurrencyTimeLimitNumber\nHow long cached value is valid: <0 never, =0 always,\n         >0 seconds.\nlogString\nt: log all notifications, f: log no notifications.\nlogfileString\nFully qualified filename to log events to.\nvisibilityNumber\n1-4 where 1: always visible 4: rarely visible.\nexportString\nName to be used to export/expose this MBean so that it is\n         findable by other JMX Agents.\npresentationStringString\nXML formatted string to allow presentation of data to be\n         associated with the MBean.\n\n\n\n The default descriptor is: name=className,descriptorType=\"mbean\", displayName=className,\n  persistPolicy=\"never\",log=\"F\",visibility=\"1\"\n If the descriptor does not contain all these fields, they will be added with these default values.\n\n Note: because of inconsistencies in previous versions of\n this specification, it is recommended not to use negative or zero\n values for currencyTimeLimit.  To indicate that a\n cached value is never valid, omit the\n currencyTimeLimit field.  To indicate that it is\n always valid, use a very large number for this field."}, {"method_name": "setMBeanDescriptor", "method_sig": "void setMBeanDescriptor (Descriptor inDescriptor)\n                 throws MBeanException,\n                        RuntimeOperationsException", "description": "Sets the ModelMBean's descriptor.  This descriptor contains default, MBean wide\n metadata about the MBean and default policies for persistence and caching. This operation\n does a complete replacement of the descriptor, no merging is done. If the descriptor to\n set to is null then the default descriptor will be created.\n The default descriptor is: name=className,descriptorType=\"mbean\", displayName=className,\n  persistPolicy=\"never\",log=\"F\",visibility=\"1\"\n If the descriptor does not contain all these fields, they will be added with these default values.\n\n See getMBeanDescriptor method javadoc for description of valid field names."}, {"method_name": "getAttribute", "method_sig": "ModelMBeanAttributeInfo getAttribute (String inName)\n                              throws MBeanException,\n                                     RuntimeOperationsException", "description": "Returns a ModelMBeanAttributeInfo requested by name."}, {"method_name": "getOperation", "method_sig": "ModelMBeanOperationInfo getOperation (String inName)\n                              throws MBeanException,\n                                     RuntimeOperationsException", "description": "Returns a ModelMBeanOperationInfo requested by name."}, {"method_name": "getNotification", "method_sig": "ModelMBeanNotificationInfo getNotification (String inName)\n                                    throws MBeanException,\n                                           RuntimeOperationsException", "description": "Returns a ModelMBeanNotificationInfo requested by name."}, {"method_name": "clone", "method_sig": "Object clone()", "description": "Creates and returns a copy of this object."}, {"method_name": "getAttributes", "method_sig": "MBeanAttributeInfo[] getAttributes()", "description": "Returns the list of attributes exposed for management.\n Each attribute is described by an MBeanAttributeInfo object."}, {"method_name": "getClassName", "method_sig": "String getClassName()", "description": "Returns the name of the Java class of the MBean described by\n this MBeanInfo."}, {"method_name": "getConstructors", "method_sig": "MBeanConstructorInfo[] getConstructors()", "description": "Returns the list of the public constructors  of the MBean.\n Each constructor is described by an MBeanConstructorInfo object."}, {"method_name": "getDescription", "method_sig": "String getDescription()", "description": "Returns a human readable description of the MBean."}, {"method_name": "getNotifications", "method_sig": "MBeanNotificationInfo[] getNotifications()", "description": "Returns the list of the notifications emitted by the MBean.\n Each notification is described by an MBeanNotificationInfo object.\n \n In addition to any notification specified by the application,\n a ModelMBean may always send also two additional notifications:\n \n One with descriptor name \"GENERIC\" and displayName \"jmx.modelmbean.generic\"\n  Second is a standard attribute change notification\n      with descriptor name \"ATTRIBUTE_CHANGE\" and displayName \"jmx.attribute.change\"\n \n Thus any implementation of ModelMBeanInfo should always add those two notifications\n in addition to those specified by the application."}, {"method_name": "getOperations", "method_sig": "MBeanOperationInfo[] getOperations()", "description": "Returns the list of operations  of the MBean.\n Each operation is described by an MBeanOperationInfo object."}]}