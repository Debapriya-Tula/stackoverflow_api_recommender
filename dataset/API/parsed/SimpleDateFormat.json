{"name": "Class SimpleDateFormat", "module": "java.base", "package": "java.text", "text": "SimpleDateFormat is a concrete class for formatting and\n parsing dates in a locale-sensitive manner. It allows for formatting\n (date \u2192 text), parsing (text \u2192 date), and normalization.\n\n \nSimpleDateFormat allows you to start by choosing\n any user-defined patterns for date-time formatting. However, you\n are encouraged to create a date-time formatter with either\n getTimeInstance, getDateInstance, or\n getDateTimeInstance in DateFormat. Each\n of these class methods can return a date/time formatter initialized\n with a default format pattern. You may modify the format pattern\n using the applyPattern methods as desired.\n For more information on using these methods, see\n DateFormat.\n\n Date and Time Patterns\n\n Date and time formats are specified by date and time pattern\n strings.\n Within date and time pattern strings, unquoted letters from\n 'A' to 'Z' and from 'a' to\n 'z' are interpreted as pattern letters representing the\n components of a date or time string.\n Text can be quoted using single quotes (') to avoid\n interpretation.\n \"''\" represents a single quote.\n All other characters are not interpreted; they're simply copied into the\n output string during formatting or matched against the input string\n during parsing.\n \n The following pattern letters are defined (all other characters from\n 'A' to 'Z' and from 'a' to\n 'z' are reserved):\n \n\nChart shows pattern letters, date/time component, presentation, and examples.\n\n\nLetter\n         Date or Time Component\n         Presentation\n         Examples\n \n\n\nG\nEra designator\n         Text\nAD\n\ny\nYear\n         Year\n1996; 96\n\nY\nWeek year\n         Year\n2009; 09\n\nM\nMonth in year (context sensitive)\n         Month\nJuly; Jul; 07\n\nL\nMonth in year (standalone form)\n         Month\nJuly; Jul; 07\n\nw\nWeek in year\n         Number\n27\n\nW\nWeek in month\n         Number\n2\n\nD\nDay in year\n         Number\n189\n\nd\nDay in month\n         Number\n10\n\nF\nDay of week in month\n         Number\n2\n\nE\nDay name in week\n         Text\nTuesday; Tue\n\nu\nDay number of week (1 = Monday, ..., 7 = Sunday)\n         Number\n1\n\na\nAm/pm marker\n         Text\nPM\n\nH\nHour in day (0-23)\n         Number\n0\n\nk\nHour in day (1-24)\n         Number\n24\n\nK\nHour in am/pm (0-11)\n         Number\n0\n\nh\nHour in am/pm (1-12)\n         Number\n12\n\nm\nMinute in hour\n         Number\n30\n\ns\nSecond in minute\n         Number\n55\n\nS\nMillisecond\n         Number\n978\n\nz\nTime zone\n         General time zone\nPacific Standard Time; PST; GMT-08:00\n\nZ\nTime zone\n         RFC 822 time zone\n-0800\n\nX\nTime zone\n         ISO 8601 time zone\n-08; -0800;  -08:00\n\n\n\n Pattern letters are usually repeated, as their number determines the\n exact presentation:\n \nText:\n     For formatting, if the number of pattern letters is 4 or more,\n     the full form is used; otherwise a short or abbreviated form\n     is used if available.\n     For parsing, both forms are accepted, independent of the number\n     of pattern letters.\nNumber:\n     For formatting, the number of pattern letters is the minimum\n     number of digits, and shorter numbers are zero-padded to this amount.\n     For parsing, the number of pattern letters is ignored unless\n     it's needed to separate two adjacent fields.\nYear:\n     If the formatter's Calendar is the Gregorian\n     calendar, the following rules are applied.\n\nFor formatting, if the number of pattern letters is 2, the year\n         is truncated to 2 digits; otherwise it is interpreted as a\n         number.\n     For parsing, if the number of pattern letters is more than 2,\n         the year is interpreted literally, regardless of the number of\n         digits. So using the pattern \"MM/dd/yyyy\", \"01/11/12\" parses to\n         Jan 11, 12 A.D.\n     For parsing with the abbreviated year pattern (\"y\" or \"yy\"),\n         SimpleDateFormat must interpret the abbreviated year\n         relative to some century.  It does this by adjusting dates to be\n         within 80 years before and 20 years after the time the SimpleDateFormat\n         instance is created. For example, using a pattern of \"MM/dd/yy\" and a\n         SimpleDateFormat instance created on Jan 1, 1997,  the string\n         \"01/11/12\" would be interpreted as Jan 11, 2012 while the string \"05/04/64\"\n         would be interpreted as May 4, 1964.\n         During parsing, only strings consisting of exactly two digits, as defined by\n         Character.isDigit(char), will be parsed into the default century.\n         Any other numeric string, such as a one digit string, a three or more digit\n         string, or a two digit string that isn't all digits (for example, \"-1\"), is\n         interpreted literally.  So \"01/02/3\" or \"01/02/003\" are parsed, using the\n         same pattern, as Jan 2, 3 AD.  Likewise, \"01/02/-3\" is parsed as Jan 2, 4 BC.\n     \n     Otherwise, calendar system specific forms are applied.\n     For both formatting and parsing, if the number of pattern\n     letters is 4 or more, a calendar specific long form is used. Otherwise, a calendar\n     specific short or abbreviated form\n     is used.\n\n     If week year 'Y' is specified and the calendar doesn't support any  week\n     years, the calendar year ('y') is used instead. The\n     support of week years can be tested with a call to getCalendar().isWeekDateSupported().\nMonth:\n     If the number of pattern letters is 3 or more, the month is\n     interpreted as text; otherwise,\n     it is interpreted as a number.\n\nLetter M produces context-sensitive month names, such as the\n         embedded form of names. Letter M is context-sensitive in the\n         sense that when it is used in the standalone pattern, for example,\n         \"MMMM\", it gives the standalone form of a month name and when it is\n         used in the pattern containing other field(s), for example, \"d MMMM\",\n         it gives the format form of a month name. For example, January in the\n         Catalan language is \"de gener\" in the format form while it is \"gener\"\n         in the standalone form. In this case, \"MMMM\" will produce \"gener\" and\n         the month part of the \"d MMMM\" will produce \"de gener\". If a\n         DateFormatSymbols has been set explicitly with constructor\n         SimpleDateFormat(String,DateFormatSymbols) or method setDateFormatSymbols(DateFormatSymbols), the month names given by\n         the DateFormatSymbols are used.\nLetter L produces the standalone form of month names.\n\n\nGeneral time zone:\n     Time zones are interpreted as text if they have\n     names. For time zones representing a GMT offset value, the\n     following syntax is used:\n     \n     GMTOffsetTimeZone:\n             GMT Sign Hours : Minutes\n     Sign: one of\n             + -\n     Hours:\n             Digit\n             Digit Digit\n     Minutes:\n             Digit Digit\n     Digit: one of\n             0 1 2 3 4 5 6 7 8 9\nHours must be between 0 and 23, and Minutes must be between\n     00 and 59. The format is locale independent and digits must be taken\n     from the Basic Latin block of the Unicode standard.\n     For parsing, RFC 822 time zones are also\n     accepted.\nRFC 822 time zone:\n     For formatting, the RFC 822 4-digit time zone format is used:\n\n     \n     RFC822TimeZone:\n             Sign TwoDigitHours Minutes\n     TwoDigitHours:\n             Digit Digit\nTwoDigitHours must be between 00 and 23. Other definitions\n     are as for general time zones.\n\n     For parsing, general time zones are also\n     accepted.\n ISO 8601 Time zone:\n     The number of pattern letters designates the format for both formatting\n     and parsing as follows:\n     \n     ISO8601TimeZone:\n             OneLetterISO8601TimeZone\n             TwoLetterISO8601TimeZone\n             ThreeLetterISO8601TimeZone\n     OneLetterISO8601TimeZone:\n             Sign TwoDigitHours\n             Z\n     TwoLetterISO8601TimeZone:\n             Sign TwoDigitHours Minutes\n             Z\n     ThreeLetterISO8601TimeZone:\n             Sign TwoDigitHours : Minutes\n             Z\n     Other definitions are as for general time zones or\n     RFC 822 time zones.\n\n     For formatting, if the offset value from GMT is 0, \"Z\" is\n     produced. If the number of pattern letters is 1, any fraction of an hour\n     is ignored. For example, if the pattern is \"X\" and the time zone is\n     \"GMT+05:30\", \"+05\" is produced.\n\n     For parsing, \"Z\" is parsed as the UTC time zone designator.\n     General time zones are not accepted.\n\n     If the number of pattern letters is 4 or more, IllegalArgumentException is thrown when constructing a \n     SimpleDateFormat or applying a\n     pattern.\n \nSimpleDateFormat also supports localized date and time\n pattern strings. In these strings, the pattern letters described above\n may be replaced with other, locale dependent, pattern letters.\n SimpleDateFormat does not deal with the localization of text\n other than the pattern letters; that's up to the client of the class.\n\n Examples\n\n The following examples show how date and time patterns are interpreted in\n the U.S. locale. The given date and time are 2001-07-04 12:08:56 local time\n in the U.S. Pacific Time time zone.\n \n\nExamples of date and time patterns interpreted in the U.S. locale\n\n\nDate and Time Pattern\n         Result\n \n\n\n\"yyyy.MM.dd G 'at' HH:mm:ss z\"\n2001.07.04 AD at 12:08:56 PDT\n\n\"EEE, MMM d, ''yy\"\nWed, Jul 4, '01\n\n\"h:mm a\"\n12:08 PM\n\n\"hh 'o''clock' a, zzzz\"\n12 o'clock PM, Pacific Daylight Time\n\n\"K:mm a, z\"\n0:08 PM, PDT\n\n\"yyyyy.MMMMM.dd GGG hh:mm aaa\"\n02001.July.04 AD 12:08 PM\n\n\"EEE, d MMM yyyy HH:mm:ss Z\"\nWed, 4 Jul 2001 12:08:56 -0700\n\n\"yyMMddHHmmssZ\"\n010704120856-0700\n\n\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\"\n2001-07-04T12:08:56.235-0700\n\n\"yyyy-MM-dd'T'HH:mm:ss.SSSXXX\"\n2001-07-04T12:08:56.235-07:00\n\n\"YYYY-'W'ww-u\"\n2001-W27-3\n\n\n\nSynchronization\n\n Date formats are not synchronized.\n It is recommended to create separate format instances for each thread.\n If multiple threads access a format concurrently, it must be synchronized\n externally.", "codes": ["public class SimpleDateFormat\nextends DateFormat"], "fields": [], "methods": [{"method_name": "set2DigitYearStart", "method_sig": "public void set2DigitYearStart (Date startDate)", "description": "Sets the 100-year period 2-digit years will be interpreted as being in\n to begin on the date the user specifies."}, {"method_name": "get2DigitYearStart", "method_sig": "public Date get2DigitYearStart()", "description": "Returns the beginning date of the 100-year period 2-digit years are interpreted\n as being within."}, {"method_name": "format", "method_sig": "public StringBuffer format (Date date,\n                           StringBuffer toAppendTo,\n                           FieldPosition pos)", "description": "Formats the given Date into a date/time string and appends\n the result to the given StringBuffer."}, {"method_name": "formatToCharacterIterator", "method_sig": "public AttributedCharacterIterator formatToCharacterIterator (Object obj)", "description": "Formats an Object producing an AttributedCharacterIterator.\n You can use the returned AttributedCharacterIterator\n to build the resulting String, as well as to determine information\n about the resulting String.\n \n Each attribute key of the AttributedCharacterIterator will be of type\n DateFormat.Field, with the corresponding attribute value\n being the same as the attribute key."}, {"method_name": "parse", "method_sig": "public Date parse (String text,\n                  ParsePosition pos)", "description": "Parses text from a string to produce a Date.\n \n The method attempts to parse text starting at the index given by\n pos.\n If parsing succeeds, then the index of pos is updated\n to the index after the last character used (parsing does not necessarily\n use all characters up to the end of the string), and the parsed\n date is returned. The updated pos can be used to\n indicate the starting point for the next call to this method.\n If an error occurs, then the index of pos is not\n changed, the error index of pos is set to the index of\n the character where the error occurred, and null is returned.\n\n This parsing operation uses the calendar to produce a Date. All of the \n calendar's date-time fields are cleared before parsing, and the calendar's default\n values of the date-time fields are used for any missing\n date-time information. For example, the year value of the\n parsed Date is 1970 with GregorianCalendar if\n no year value is given from the parsing operation.  The \n TimeZone value may be overwritten, depending on the given\n pattern and the time zone value in text. Any \n TimeZone value that has previously been set by a call to\n setTimeZone may need\n to be restored for further operations."}, {"method_name": "toPattern", "method_sig": "public String toPattern()", "description": "Returns a pattern string describing this date format."}, {"method_name": "toLocalizedPattern", "method_sig": "public String toLocalizedPattern()", "description": "Returns a localized pattern string describing this date format."}, {"method_name": "applyPattern", "method_sig": "public void applyPattern (String pattern)", "description": "Applies the given pattern string to this date format."}, {"method_name": "applyLocalizedPattern", "method_sig": "public void applyLocalizedPattern (String pattern)", "description": "Applies the given localized pattern string to this date format."}, {"method_name": "getDateFormatSymbols", "method_sig": "public DateFormatSymbols getDateFormatSymbols()", "description": "Gets a copy of the date and time format symbols of this date format."}, {"method_name": "setDateFormatSymbols", "method_sig": "public void setDateFormatSymbols (DateFormatSymbols newFormatSymbols)", "description": "Sets the date and time format symbols of this date format."}, {"method_name": "clone", "method_sig": "public Object clone()", "description": "Creates a copy of this SimpleDateFormat. This also\n clones the format's date format symbols."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Returns the hash code value for this SimpleDateFormat object."}, {"method_name": "equals", "method_sig": "public boolean equals (Object obj)", "description": "Compares the given object with this SimpleDateFormat for\n equality."}]}