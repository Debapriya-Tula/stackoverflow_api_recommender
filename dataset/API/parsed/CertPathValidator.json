{"name": "Class CertPathValidator", "module": "java.base", "package": "java.security.cert", "text": "A class for validating certification paths (also known as certificate\n chains).\n \n This class uses a provider-based architecture.\n To create a CertPathValidator,\n call one of the static getInstance methods, passing in the\n algorithm name of the CertPathValidator desired and\n optionally the name of the provider desired.\n\n Once a CertPathValidator object has been created, it can\n be used to validate certification paths by calling the validate method and passing it the CertPath to be validated\n and an algorithm-specific set of parameters. If successful, the result is\n returned in an object that implements the\n CertPathValidatorResult interface.\n\n The getRevocationChecker() method allows an application to specify\n additional algorithm-specific parameters and options used by the\n CertPathValidator when checking the revocation status of\n certificates. Here is an example demonstrating how it is used with the PKIX\n algorithm:\n\n \n CertPathValidator cpv = CertPathValidator.getInstance(\"PKIX\");\n PKIXRevocationChecker rc = (PKIXRevocationChecker)cpv.getRevocationChecker();\n rc.setOptions(EnumSet.of(Option.SOFT_FAIL));\n params.addCertPathChecker(rc);\n CertPathValidatorResult cpvr = cpv.validate(path, params);\n \nEvery implementation of the Java platform is required to support the\n following standard CertPathValidator algorithm:\n \nPKIX\n\n This algorithm is described in the \n CertPathValidator section of the\n Java Security Standard Algorithm Names Specification.\n Consult the release documentation for your implementation to see if any\n other algorithms are supported.\n\n \nConcurrent Access\n\n The static methods of this class are guaranteed to be thread-safe.\n Multiple threads may concurrently invoke the static methods defined in\n this class with no ill effects.\n \n However, this is not true for the non-static methods defined by this class.\n Unless otherwise documented by a specific provider, threads that need to\n access a single CertPathValidator instance concurrently should\n synchronize amongst themselves and provide the necessary locking. Multiple\n threads each manipulating a different CertPathValidator\n instance need not synchronize.", "codes": ["public class CertPathValidator\nextends Object"], "fields": [], "methods": [{"method_name": "getInstance", "method_sig": "public static CertPathValidator getInstance (String algorithm)\n                                     throws NoSuchAlgorithmException", "description": "Returns a CertPathValidator object that implements the\n specified algorithm.\n\n  This method traverses the list of registered security Providers,\n starting with the most preferred Provider.\n A new CertPathValidator object encapsulating the\n CertPathValidatorSpi implementation from the first\n Provider that supports the specified algorithm is returned.\n\n  Note that the list of registered providers may be retrieved via\n the Security.getProviders() method."}, {"method_name": "getInstance", "method_sig": "public static CertPathValidator getInstance (String algorithm,\n                                            String provider)\n                                     throws NoSuchAlgorithmException,\n                                            NoSuchProviderException", "description": "Returns a CertPathValidator object that implements the\n specified algorithm.\n\n  A new CertPathValidator object encapsulating the\n CertPathValidatorSpi implementation from the specified provider\n is returned.  The specified provider must be registered\n in the security provider list.\n\n  Note that the list of registered providers may be retrieved via\n the Security.getProviders() method."}, {"method_name": "getInstance", "method_sig": "public static CertPathValidator getInstance (String algorithm,\n                                            Provider provider)\n                                     throws NoSuchAlgorithmException", "description": "Returns a CertPathValidator object that implements the\n specified algorithm.\n\n  A new CertPathValidator object encapsulating the\n CertPathValidatorSpi implementation from the specified Provider\n object is returned.  Note that the specified Provider object\n does not have to be registered in the provider list."}, {"method_name": "getProvider", "method_sig": "public final Provider getProvider()", "description": "Returns the Provider of this\n CertPathValidator."}, {"method_name": "getAlgorithm", "method_sig": "public final String getAlgorithm()", "description": "Returns the algorithm name of this CertPathValidator."}, {"method_name": "validate", "method_sig": "public final CertPathValidatorResult validate (CertPath certPath,\n                                              CertPathParameters params)\n                                       throws CertPathValidatorException,\n                                              InvalidAlgorithmParameterException", "description": "Validates the specified certification path using the specified\n algorithm parameter set.\n \n The CertPath specified must be of a type that is\n supported by the validation algorithm, otherwise an\n InvalidAlgorithmParameterException will be thrown. For\n example, a CertPathValidator that implements the PKIX\n algorithm validates CertPath objects of type X.509."}, {"method_name": "getDefaultType", "method_sig": "public static final String getDefaultType()", "description": "Returns the default CertPathValidator type as specified by\n the certpathvalidator.type security property, or the string\n \"PKIX\" if no such property exists.\n\n The default CertPathValidator type can be used by\n applications that do not want to use a hard-coded type when calling one\n of the getInstance methods, and want to provide a default\n type in case a user does not specify its own.\n\n The default CertPathValidator type can be changed by\n setting the value of the certpathvalidator.type security\n property to the desired type."}, {"method_name": "getRevocationChecker", "method_sig": "public final CertPathChecker getRevocationChecker()", "description": "Returns a CertPathChecker that the encapsulated\n CertPathValidatorSpi implementation uses to check the revocation\n status of certificates. A PKIX implementation returns objects of\n type PKIXRevocationChecker. Each invocation of this method\n returns a new instance of CertPathChecker.\n\n The primary purpose of this method is to allow callers to specify\n additional input parameters and options specific to revocation checking.\n See the class description for an example."}]}