{"name": "Class EnumSyntax", "module": "java.desktop", "package": "javax.print.attribute", "text": "Class EnumSyntax is an abstract base class providing the common\n implementation of all \"type safe enumeration\" objects. An enumeration class\n (which extends class EnumSyntax) provides a group of enumeration\n values (objects) that are singleton instances of the enumeration class; for\n example:\n\n \n     public class Bach extends EnumSyntax {\n         public static final Bach JOHANN_SEBASTIAN     = new Bach(0);\n         public static final Bach WILHELM_FRIEDEMANN   = new Bach(1);\n         public static final Bach CARL_PHILIP_EMMANUEL = new Bach(2);\n         public static final Bach JOHANN_CHRISTIAN     = new Bach(3);\n         public static final Bach P_D_Q                = new Bach(4);\n\n         private static final String[] stringTable = {\n             \"Johann Sebastian Bach\",\n              \"Wilhelm Friedemann Bach\",\n              \"Carl Philip Emmanuel Bach\",\n              \"Johann Christian Bach\",\n              \"P.D.Q. Bach\"\n         };\n\n         protected String[] getStringTable() {\n             return stringTable;\n         }\n\n         private static final Bach[] enumValueTable = {\n             JOHANN_SEBASTIAN,\n              WILHELM_FRIEDEMANN,\n              CARL_PHILIP_EMMANUEL,\n              JOHANN_CHRISTIAN,\n              P_D_Q\n         };\n\n         protected EnumSyntax[] getEnumValueTable() {\n             return enumValueTable;\n         }\n     }\n \n You can then write code that uses the == and != operators to\n test enumeration values; for example:\n \n     Bach theComposer;\n     . . .\n     if (theComposer == Bach.JOHANN_SEBASTIAN) {\n         System.out.println (\"The greatest composer of all time!\");\n     }\n \n The equals() method for an enumeration class just does a test for\n identical objects (==).\n \n You can convert an enumeration value to a string by calling\n toString(). The string is obtained from a table supplied\n by the enumeration class.\n \n Under the hood, an enumeration value is just an integer, a different integer\n for each enumeration value within an enumeration class. You can get an\n enumeration value's integer value by calling getValue().\n An enumeration value's integer value is established when it is constructed\n (see EnumSyntax(int)). Since the constructor is\n protected, the only possible enumeration values are the singleton objects\n declared in the enumeration class; additional enumeration values cannot be\n created at run time.\n \n You can define a subclass of an enumeration class that extends it with\n additional enumeration values. The subclass's enumeration values' integer\n values need not be distinct from the superclass's enumeration values' integer\n values; the ==, !=, equals(), and toString()\n methods will still work properly even if the subclass uses some of the same\n integer values as the superclass. However, the application in which the\n enumeration class and subclass are used may need to have distinct integer\n values in the superclass and subclass.", "codes": ["public abstract class EnumSyntax\nextends Object\nimplements Serializable, Cloneable"], "fields": [], "methods": [{"method_name": "getValue", "method_sig": "public int getValue()", "description": "Returns this enumeration value's integer value."}, {"method_name": "clone", "method_sig": "public Object clone()", "description": "Returns a clone of this enumeration value, which to preserve the\n semantics of enumeration values is the same object as this enumeration\n value."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Returns a hash code value for this enumeration value. The hash code is\n just this enumeration value's integer value."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a string value corresponding to this enumeration value."}, {"method_name": "readResolve", "method_sig": "protected Object readResolve()\n                      throws ObjectStreamException", "description": "During object input, convert this deserialized enumeration instance to\n the proper enumeration value defined in the enumeration attribute class."}, {"method_name": "getStringTable", "method_sig": "protected String[] getStringTable()", "description": "Returns the string table for this enumeration value's enumeration class.\n The enumeration class's integer values are assumed to lie in the range\n L..L+N-1, where L is the value returned by\n getOffset() and N is the length of the string\n table. The element in the string table at index i-L is the\n value returned by toString() for the enumeration\n value whose integer value is i. If an integer within the above\n range is not used by any enumeration value, leave the corresponding table\n element null.\n \n The default implementation returns null. If the enumeration class\n (a subclass of class EnumSyntax) does not override this method to\n return a non-null string table, and the subclass does not\n override the toString() method, the base class\n toString() method will return just a string\n representation of this enumeration value's integer value."}, {"method_name": "getEnumValueTable", "method_sig": "protected EnumSyntax[] getEnumValueTable()", "description": "Returns the enumeration value table for this enumeration value's\n enumeration class. The enumeration class's integer values are assumed to\n lie in the range L..L+N-1, where L is the\n value returned by getOffset() and N is the\n length of the enumeration value table. The element in the enumeration\n value table at index i-L is the enumeration value object\n whose integer value is i; the readResolve()\n method needs this to preserve singleton semantics during deserialization\n of an enumeration instance. If an integer within the above range is not\n used by any enumeration value, leave the corresponding table element\n null.\n \n The default implementation returns null. If the enumeration class\n (a subclass of class EnumSyntax) does not override this method to return\n a non-null enumeration value table, and the subclass does not\n override the readResolve() method, the base class\n readResolve() method will throw an exception\n whenever an enumeration instance is deserialized from an object input\n stream."}, {"method_name": "getOffset", "method_sig": "protected int getOffset()", "description": "Returns the lowest integer value used by this enumeration value's\n enumeration class.\n \n The default implementation returns 0. If the enumeration class (a\n subclass of class EnumSyntax) uses integer values starting at\n other than 0, override this method in the subclass."}]}