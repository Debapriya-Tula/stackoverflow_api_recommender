{"name": "Class Certificate", "module": "java.base", "package": "javax.security.cert", "text": "Abstract class for managing a variety of identity certificates.\n An identity certificate is a guarantee by a principal that\n a public key is that of another principal.  (A principal represents\n an entity such as an individual user, a group, or a corporation.)\n\n This class is an abstraction for certificates that have different\n formats but important common uses.  For example, different types of\n certificates, such as X.509 and PGP, share general certificate\n functionality (like encoding and verifying) and\n some types of information (like a public key).\n \n X.509, PGP, and SDSI certificates can all be implemented by\n subclassing the Certificate class, even though they contain different\n sets of information, and they store and retrieve the information in\n different ways.\n\n Note: The classes in the package javax.security.cert\n exist for compatibility with earlier versions of the\n Java Secure Sockets Extension (JSSE). New applications should instead\n use the standard Java SE certificate classes located in\n java.security.cert.", "codes": ["@Deprecated(since=\"9\")\npublic abstract class Certificate\nextends Object"], "fields": [], "methods": [{"method_name": "equals", "method_sig": "public boolean equals (Object other)", "description": "Compares this certificate for equality with the specified\n object. If the other object is an\n instanceof Certificate, then\n its encoded form is retrieved and compared with the\n encoded form of this certificate."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Returns a hashcode value for this certificate from its\n encoded form."}, {"method_name": "getEncoded", "method_sig": "public abstract byte[] getEncoded()\n                           throws CertificateEncodingException", "description": "Returns the encoded form of this certificate. It is\n assumed that each certificate type would have only a single\n form of encoding; for example, X.509 certificates would\n be encoded as ASN.1 DER."}, {"method_name": "verify", "method_sig": "public abstract void verify (PublicKey key)\n                     throws CertificateException,\n                            NoSuchAlgorithmException,\n                            InvalidKeyException,\n                            NoSuchProviderException,\n                            SignatureException", "description": "Verifies that this certificate was signed using the\n private key that corresponds to the specified public key."}, {"method_name": "verify", "method_sig": "public abstract void verify (PublicKey key,\n                            String sigProvider)\n                     throws CertificateException,\n                            NoSuchAlgorithmException,\n                            InvalidKeyException,\n                            NoSuchProviderException,\n                            SignatureException", "description": "Verifies that this certificate was signed using the\n private key that corresponds to the specified public key.\n This method uses the signature verification engine\n supplied by the specified provider."}, {"method_name": "toString", "method_sig": "public abstract String toString()", "description": "Returns a string representation of this certificate."}, {"method_name": "getPublicKey", "method_sig": "public abstract PublicKey getPublicKey()", "description": "Gets the public key from this certificate."}]}