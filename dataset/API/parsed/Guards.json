{"name": "Class Guards", "module": "jdk.dynalink", "package": "jdk.dynalink.linker.support", "text": "Utility methods for creating typical guards for\n MethodHandles.guardWithTest(MethodHandle, MethodHandle, MethodHandle)\n and for adjusting their method types.", "codes": ["public final class Guards\nextends Object"], "fields": [], "methods": [{"method_name": "isOfClass", "method_sig": "public static MethodHandle isOfClass (Class<?> clazz,\n                                     MethodType type)", "description": "Creates a guard method handle with arguments of a specified type, but with boolean return value. When invoked, it\n returns true if the first argument is of the specified class (exactly of it, not a subclass). The rest of the\n arguments will be ignored."}, {"method_name": "isInstance", "method_sig": "public static MethodHandle isInstance (Class<?> clazz,\n                                      MethodType type)", "description": "Creates a method handle with arguments of a specified type, but with boolean return value. When invoked, it\n returns true if the first argument is instance of the specified class or its subclass). The rest of the arguments\n will be ignored."}, {"method_name": "isInstance", "method_sig": "public static MethodHandle isInstance (Class<?> clazz,\n                                      int pos,\n                                      MethodType type)", "description": "Creates a method handle with arguments of a specified type, but with boolean return value. When invoked, it\n returns true if the n'th argument is instance of the specified class or its subclass). The rest of the arguments\n will be ignored."}, {"method_name": "isArray", "method_sig": "public static MethodHandle isArray (int pos,\n                                   MethodType type)", "description": "Creates a method handle that returns true if the argument in the specified position is a Java array."}, {"method_name": "asType", "method_sig": "public static MethodHandle asType (MethodHandle test,\n                                  MethodType type)", "description": "Takes a method handle intended to be used as a guard, and adapts it to\n the requested type, but returning a boolean. Applies\n MethodHandle.asType(MethodType) to convert types and uses\n MethodHandles.dropArguments(MethodHandle, int, Class...) to match\n the requested type arity."}, {"method_name": "asType", "method_sig": "public static MethodHandle asType (LinkerServices linkerServices,\n                                  MethodHandle test,\n                                  MethodType type)", "description": "Takes a method handle intended to be used as a guard, and adapts it to\n the requested type, but returning a boolean. Applies\n LinkerServices.asType(MethodHandle, MethodType) to convert types\n and uses\n MethodHandles.dropArguments(MethodHandle, int, Class...) to match\n the requested type arity."}, {"method_name": "getClassGuard", "method_sig": "public static MethodHandle getClassGuard (Class<?> clazz)", "description": "Creates a guard method that tests its only argument for being of an exact particular class."}, {"method_name": "getInstanceOfGuard", "method_sig": "public static MethodHandle getInstanceOfGuard (Class<?> clazz)", "description": "Creates a guard method that tests its only argument for being an instance of a particular class."}, {"method_name": "getIdentityGuard", "method_sig": "public static MethodHandle getIdentityGuard (Object obj)", "description": "Creates a guard method that tests its only argument for being referentially identical to another object"}, {"method_name": "isNull", "method_sig": "public static MethodHandle isNull()", "description": "Returns a guard that tests whether the first argument is null."}, {"method_name": "isNotNull", "method_sig": "public static MethodHandle isNotNull()", "description": "Returns a guard that tests whether the first argument is not null."}]}