{"name": "Interface PackageElement", "module": "java.compiler", "package": "javax.lang.model.element", "text": "Represents a package program element.  Provides access to information\n about the package and its members.", "codes": ["public interface PackageElement\nextends Element, QualifiedNameable"], "fields": [], "methods": [{"method_name": "getQualifiedName", "method_sig": "Name getQualifiedName()", "description": "Returns the fully qualified name of this package.\n This is also known as the package's canonical name.\n For an unnamed package, an empty name is returned."}, {"method_name": "getSimpleName", "method_sig": "Name getSimpleName()", "description": "Returns the simple name of this package.  For an unnamed package, an empty name is returned."}, {"method_name": "getEnclosedElements", "method_sig": "List<? extends Element> getEnclosedElements()", "description": "Returns the top-level\n classes and interfaces within this package.  Note that\n subpackages are not considered to be enclosed by a\n package."}, {"method_name": "isUnnamed", "method_sig": "boolean isUnnamed()", "description": "Returns true if this is an unnamed package and \n false otherwise."}, {"method_name": "getEnclosingElement", "method_sig": "Element getEnclosingElement()", "description": "Returns the enclosing module if such a module exists; otherwise\n returns null.\n\n One situation where a module does not exist for a package is if\n the environment does not include modules, such as an annotation\n processing environment configured for a source version without modules."}]}