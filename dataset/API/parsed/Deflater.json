{"name": "Class Deflater", "module": "java.base", "package": "java.util.zip", "text": "This class provides support for general purpose compression using the\n popular ZLIB compression library. The ZLIB compression library was\n initially developed as part of the PNG graphics standard and is not\n protected by patents. It is fully described in the specifications at\n the java.util.zip\n package description.\n \n This class deflates sequences of bytes into ZLIB compressed data format.\n The input byte sequence is provided in either byte array or byte buffer,\n via one of the setInput() methods. The output byte sequence is\n written to the output byte array or byte buffer passed to the\n deflate() methods.\n \n The following code fragment demonstrates a trivial compression\n and decompression of a string using Deflater and\n Inflater.\n\n \n try {\n     // Encode a String into bytes\n     String inputString = \"blahblahblah\";\n     byte[] input = inputString.getBytes(\"UTF-8\");\n\n     // Compress the bytes\n     byte[] output = new byte[100];\n     Deflater compresser = new Deflater();\n     compresser.setInput(input);\n     compresser.finish();\n     int compressedDataLength = compresser.deflate(output);\n     compresser.end();\n\n     // Decompress the bytes\n     Inflater decompresser = new Inflater();\n     decompresser.setInput(output, 0, compressedDataLength);\n     byte[] result = new byte[100];\n     int resultLength = decompresser.inflate(result);\n     decompresser.end();\n\n     // Decode the bytes into a String\n     String outputString = new String(result, 0, resultLength, \"UTF-8\");\n } catch (java.io.UnsupportedEncodingException ex) {\n     // handle\n } catch (java.util.zip.DataFormatException ex) {\n     // handle\n }\n ", "codes": ["public class Deflater\nextends Object"], "fields": [{"field_name": "DEFLATED", "field_sig": "public static final\u00a0int DEFLATED", "description": "Compression method for the deflate algorithm (the only one currently\n supported)."}, {"field_name": "NO_COMPRESSION", "field_sig": "public static final\u00a0int NO_COMPRESSION", "description": "Compression level for no compression."}, {"field_name": "BEST_SPEED", "field_sig": "public static final\u00a0int BEST_SPEED", "description": "Compression level for fastest compression."}, {"field_name": "BEST_COMPRESSION", "field_sig": "public static final\u00a0int BEST_COMPRESSION", "description": "Compression level for best compression."}, {"field_name": "DEFAULT_COMPRESSION", "field_sig": "public static final\u00a0int DEFAULT_COMPRESSION", "description": "Default compression level."}, {"field_name": "FILTERED", "field_sig": "public static final\u00a0int FILTERED", "description": "Compression strategy best used for data consisting mostly of small\n values with a somewhat random distribution. Forces more Huffman coding\n and less string matching."}, {"field_name": "HUFFMAN_ONLY", "field_sig": "public static final\u00a0int HUFFMAN_ONLY", "description": "Compression strategy for Huffman coding only."}, {"field_name": "DEFAULT_STRATEGY", "field_sig": "public static final\u00a0int DEFAULT_STRATEGY", "description": "Default compression strategy."}, {"field_name": "NO_FLUSH", "field_sig": "public static final\u00a0int NO_FLUSH", "description": "Compression flush mode used to achieve best compression result."}, {"field_name": "SYNC_FLUSH", "field_sig": "public static final\u00a0int SYNC_FLUSH", "description": "Compression flush mode used to flush out all pending output; may\n degrade compression for some compression algorithms."}, {"field_name": "FULL_FLUSH", "field_sig": "public static final\u00a0int FULL_FLUSH", "description": "Compression flush mode used to flush out all pending output and\n reset the deflater. Using this mode too often can seriously degrade\n compression."}], "methods": [{"method_name": "setInput", "method_sig": "public void setInput (byte[] input,\n                     int off,\n                     int len)", "description": "Sets input data for compression.\n \n One of the setInput() methods should be called whenever\n needsInput() returns true indicating that more input data\n is required.\n "}, {"method_name": "setInput", "method_sig": "public void setInput (byte[] input)", "description": "Sets input data for compression.\n \n One of the setInput() methods should be called whenever\n needsInput() returns true indicating that more input data\n is required.\n "}, {"method_name": "setInput", "method_sig": "public void setInput (ByteBuffer input)", "description": "Sets input data for compression.\n \n One of the setInput() methods should be called whenever\n needsInput() returns true indicating that more input data\n is required.\n \n The given buffer's position will be advanced as deflate\n operations are performed, up to the buffer's limit.\n The input buffer may be modified (refilled) between deflate\n operations; doing so is equivalent to creating a new buffer\n and setting it with this method.\n \n Modifying the input buffer's contents, position, or limit\n concurrently with an deflate operation will result in\n undefined behavior, which may include incorrect operation\n results or operation failure."}, {"method_name": "setDictionary", "method_sig": "public void setDictionary (byte[] dictionary,\n                          int off,\n                          int len)", "description": "Sets preset dictionary for compression. A preset dictionary is used\n when the history buffer can be predetermined. When the data is later\n uncompressed with Inflater.inflate(), Inflater.getAdler() can be called\n in order to get the Adler-32 value of the dictionary required for\n decompression."}, {"method_name": "setDictionary", "method_sig": "public void setDictionary (byte[] dictionary)", "description": "Sets preset dictionary for compression. A preset dictionary is used\n when the history buffer can be predetermined. When the data is later\n uncompressed with Inflater.inflate(), Inflater.getAdler() can be called\n in order to get the Adler-32 value of the dictionary required for\n decompression."}, {"method_name": "setDictionary", "method_sig": "public void setDictionary (ByteBuffer dictionary)", "description": "Sets preset dictionary for compression. A preset dictionary is used\n when the history buffer can be predetermined. When the data is later\n uncompressed with Inflater.inflate(), Inflater.getAdler() can be called\n in order to get the Adler-32 value of the dictionary required for\n decompression.\n \n The bytes in given byte buffer will be fully consumed by this method.  On\n return, its position will equal its limit."}, {"method_name": "setStrategy", "method_sig": "public void setStrategy (int strategy)", "description": "Sets the compression strategy to the specified value.\n\n  If the compression strategy is changed, the next invocation\n of deflate will compress the input available so far with\n the old strategy (and may be flushed); the new strategy will take\n effect only after that invocation."}, {"method_name": "setLevel", "method_sig": "public void setLevel (int level)", "description": "Sets the compression level to the specified value.\n\n  If the compression level is changed, the next invocation\n of deflate will compress the input available so far\n with the old level (and may be flushed); the new level will\n take effect only after that invocation."}, {"method_name": "needsInput", "method_sig": "public boolean needsInput()", "description": "Returns true if no data remains in the input buffer. This can\n be used to determine if one of the setInput() methods should be\n called in order to provide more input."}, {"method_name": "finish", "method_sig": "public void finish()", "description": "When called, indicates that compression should end with the current\n contents of the input buffer."}, {"method_name": "finished", "method_sig": "public boolean finished()", "description": "Returns true if the end of the compressed data output stream has\n been reached."}, {"method_name": "deflate", "method_sig": "public int deflate (byte[] output,\n                   int off,\n                   int len)", "description": "Compresses the input data and fills specified buffer with compressed\n data. Returns actual number of bytes of compressed data. A return value\n of 0 indicates that needsInput should be called\n in order to determine if more input data is required.\n\n This method uses NO_FLUSH as its compression flush mode.\n An invocation of this method of the form deflater.deflate(b, off, len)\n yields the same result as the invocation of\n deflater.deflate(b, off, len, Deflater.NO_FLUSH)."}, {"method_name": "deflate", "method_sig": "public int deflate (byte[] output)", "description": "Compresses the input data and fills specified buffer with compressed\n data. Returns actual number of bytes of compressed data. A return value\n of 0 indicates that needsInput should be called\n in order to determine if more input data is required.\n\n This method uses NO_FLUSH as its compression flush mode.\n An invocation of this method of the form deflater.deflate(b)\n yields the same result as the invocation of\n deflater.deflate(b, 0, b.length, Deflater.NO_FLUSH)."}, {"method_name": "deflate", "method_sig": "public int deflate (ByteBuffer output)", "description": "Compresses the input data and fills specified buffer with compressed\n data. Returns actual number of bytes of compressed data. A return value\n of 0 indicates that needsInput should be called\n in order to determine if more input data is required.\n\n This method uses NO_FLUSH as its compression flush mode.\n An invocation of this method of the form deflater.deflate(output)\n yields the same result as the invocation of\n deflater.deflate(output, Deflater.NO_FLUSH)."}, {"method_name": "deflate", "method_sig": "public int deflate (byte[] output,\n                   int off,\n                   int len,\n                   int flush)", "description": "Compresses the input data and fills the specified buffer with compressed\n data. Returns actual number of bytes of data compressed.\n\n Compression flush mode is one of the following three modes:\n\n \nNO_FLUSH: allows the deflater to decide how much data\n to accumulate, before producing output, in order to achieve the best\n compression (should be used in normal use scenario). A return value\n of 0 in this flush mode indicates that needsInput() should\n be called in order to determine if more input data is required.\n\n SYNC_FLUSH: all pending output in the deflater is flushed,\n to the specified output buffer, so that an inflater that works on\n compressed data can get all input data available so far (In particular\n the needsInput() returns true after this invocation\n if enough output space is provided). Flushing with SYNC_FLUSH\n may degrade compression for some compression algorithms and so it\n should be used only when necessary.\n\n FULL_FLUSH: all pending output is flushed out as with\n SYNC_FLUSH. The compression state is reset so that the inflater\n that works on the compressed output data can restart from this point\n if previous compressed data has been damaged or if random access is\n desired. Using FULL_FLUSH too often can seriously degrade\n compression.\n \nIn the case of FULL_FLUSH or SYNC_FLUSH, if\n the return value is len, the space available in output\n buffer b, this method should be invoked again with the same\n flush parameter and more output space. Make sure that\n len is greater than 6 to avoid flush marker (5 bytes) being\n repeatedly output to the output buffer every time this method is\n invoked.\n\n If the setInput(ByteBuffer) method was called to provide a buffer\n for input, the input buffer's position will be advanced by the number of bytes\n consumed by this operation."}, {"method_name": "deflate", "method_sig": "public int deflate (ByteBuffer output,\n                   int flush)", "description": "Compresses the input data and fills the specified buffer with compressed\n data. Returns actual number of bytes of data compressed.\n\n Compression flush mode is one of the following three modes:\n\n \nNO_FLUSH: allows the deflater to decide how much data\n to accumulate, before producing output, in order to achieve the best\n compression (should be used in normal use scenario). A return value\n of 0 in this flush mode indicates that needsInput() should\n be called in order to determine if more input data is required.\n\n SYNC_FLUSH: all pending output in the deflater is flushed,\n to the specified output buffer, so that an inflater that works on\n compressed data can get all input data available so far (In particular\n the needsInput() returns true after this invocation\n if enough output space is provided). Flushing with SYNC_FLUSH\n may degrade compression for some compression algorithms and so it\n should be used only when necessary.\n\n FULL_FLUSH: all pending output is flushed out as with\n SYNC_FLUSH. The compression state is reset so that the inflater\n that works on the compressed output data can restart from this point\n if previous compressed data has been damaged or if random access is\n desired. Using FULL_FLUSH too often can seriously degrade\n compression.\n \nIn the case of FULL_FLUSH or SYNC_FLUSH, if\n the return value is equal to the remaining space\n of the buffer, this method should be invoked again with the same\n flush parameter and more output space. Make sure that\n the buffer has at least 6 bytes of remaining space to avoid the\n flush marker (5 bytes) being repeatedly output to the output buffer\n every time this method is invoked.\n\n On success, the position of the given output byte buffer will be\n advanced by as many bytes as were produced by the operation, which is equal\n to the number returned by this method.\n\n If the setInput(ByteBuffer) method was called to provide a buffer\n for input, the input buffer's position will be advanced by the number of bytes\n consumed by this operation."}, {"method_name": "getAdler", "method_sig": "public int getAdler()", "description": "Returns the ADLER-32 value of the uncompressed data."}, {"method_name": "getTotalIn", "method_sig": "public int getTotalIn()", "description": "Returns the total number of uncompressed bytes input so far.\n\n Since the number of bytes may be greater than\n Integer.MAX_VALUE, the getBytesRead() method is now\n the preferred means of obtaining this information."}, {"method_name": "getBytesRead", "method_sig": "public long getBytesRead()", "description": "Returns the total number of uncompressed bytes input so far."}, {"method_name": "getTotalOut", "method_sig": "public int getTotalOut()", "description": "Returns the total number of compressed bytes output so far.\n\n Since the number of bytes may be greater than\n Integer.MAX_VALUE, the getBytesWritten() method is now\n the preferred means of obtaining this information."}, {"method_name": "getBytesWritten", "method_sig": "public long getBytesWritten()", "description": "Returns the total number of compressed bytes output so far."}, {"method_name": "reset", "method_sig": "public void reset()", "description": "Resets deflater so that a new set of input data can be processed.\n Keeps current compression level and strategy settings."}, {"method_name": "end", "method_sig": "public void end()", "description": "Closes the compressor and discards any unprocessed input.\n\n This method should be called when the compressor is no longer\n being used. Once this method is called, the behavior of the\n Deflater object is undefined."}, {"method_name": "finalize", "method_sig": "@Deprecated(since=\"9\",\n            forRemoval=true)\nprotected void finalize()", "description": "Closes the compressor when garbage is collected."}]}