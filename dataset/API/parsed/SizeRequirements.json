{"name": "Class SizeRequirements", "module": "java.desktop", "package": "javax.swing", "text": "For the convenience of layout managers,\n calculates information about the size and position of components.\n All size and position calculation methods are class methods\n that take arrays of SizeRequirements as arguments.\n The SizeRequirements class supports two types of layout:\n\n \n\n tiled\n  The components are placed end-to-end,\n      starting either at coordinate 0 (the leftmost or topmost position)\n      or at the coordinate representing the end of the allocated span\n      (the rightmost or bottommost position).\n\n  aligned\n  The components are aligned as specified\n      by each component's X or Y alignment value.\n \n\n\n\n Each SizeRequirements object contains information\n about either the width (and X alignment)\n or height (and Y alignment)\n of a single component or a group of components:\n\n \n\n minimum\n The smallest reasonable width/height of the component\n      or component group, in pixels.\n\n  preferred\n The natural width/height of the component\n      or component group, in pixels.\n\n  maximum\n The largest reasonable width/height of the component\n      or component group, in pixels.\n\n  alignment\n The X/Y alignment of the component\n      or component group.\n \n\n\nWarning:\n Serialized objects of this class will not be compatible with\n future Swing releases. The current serialization support is\n appropriate for short term storage or RMI between applications running\n the same version of Swing.  As of 1.4, support for long term storage\n of all JavaBeans\u2122\n has been added to the java.beans package.\n Please see XMLEncoder.", "codes": ["public class SizeRequirements\nextends Object\nimplements Serializable"], "fields": [{"field_name": "minimum", "field_sig": "public\u00a0int minimum", "description": "The minimum size required.\n For a component comp, this should be equal to either\n comp.getMinimumSize().width or\n comp.getMinimumSize().height."}, {"field_name": "preferred", "field_sig": "public\u00a0int preferred", "description": "The preferred (natural) size.\n For a component comp, this should be equal to either\n comp.getPreferredSize().width or\n comp.getPreferredSize().height."}, {"field_name": "maximum", "field_sig": "public\u00a0int maximum", "description": "The maximum size allowed.\n For a component comp, this should be equal to either\n comp.getMaximumSize().width or\n comp.getMaximumSize().height."}, {"field_name": "alignment", "field_sig": "public\u00a0float alignment", "description": "The alignment, specified as a value between 0.0 and 1.0,\n inclusive.\n To specify centering, the alignment should be 0.5."}], "methods": [{"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a string describing the minimum, preferred, and maximum\n size requirements, along with the alignment."}, {"method_name": "getTiledSizeRequirements", "method_sig": "public static SizeRequirements getTiledSizeRequirements (SizeRequirements[] children)", "description": "Determines the total space necessary to\n place a set of components end-to-end.  The needs\n of each component in the set are represented by an entry in the\n passed-in SizeRequirements array.\n The returned SizeRequirements object has an alignment of 0.5\n (centered).  The space requirement is never more than\n Integer.MAX_VALUE."}, {"method_name": "getAlignedSizeRequirements", "method_sig": "public static SizeRequirements getAlignedSizeRequirements (SizeRequirements[] children)", "description": "Determines the total space necessary to\n align a set of components.  The needs\n of each component in the set are represented by an entry in the\n passed-in SizeRequirements array.  The total space required will\n never be more than Integer.MAX_VALUE."}, {"method_name": "calculateTiledPositions", "method_sig": "public static void calculateTiledPositions (int allocated,\n                                           SizeRequirements total,\n                                           SizeRequirements[] children,\n                                           int[] offsets,\n                                           int[] spans)", "description": "Creates a set of offset/span pairs representing how to\n lay out a set of components end-to-end.\n This method requires that you specify\n the total amount of space to be allocated,\n the size requirements for each component to be placed\n (specified as an array of SizeRequirements), and\n the total size requirement of the set of components.\n You can get the total size requirement\n by invoking the getTiledSizeRequirements method.  The components\n will be tiled in the forward direction with offsets increasing from 0."}, {"method_name": "calculateTiledPositions", "method_sig": "public static void calculateTiledPositions (int allocated,\n                                           SizeRequirements total,\n                                           SizeRequirements[] children,\n                                           int[] offsets,\n                                           int[] spans,\n                                           boolean forward)", "description": "Creates a set of offset/span pairs representing how to\n lay out a set of components end-to-end.\n This method requires that you specify\n the total amount of space to be allocated,\n the size requirements for each component to be placed\n (specified as an array of SizeRequirements), and\n the total size requirement of the set of components.\n You can get the total size requirement\n by invoking the getTiledSizeRequirements method.\n\n This method also requires a flag indicating whether components\n should be tiled in the forward direction (offsets increasing\n from 0) or reverse direction (offsets decreasing from the end\n of the allocated space).  The forward direction represents\n components tiled from left to right or top to bottom.  The\n reverse direction represents components tiled from right to left\n or bottom to top."}, {"method_name": "calculateAlignedPositions", "method_sig": "public static void calculateAlignedPositions (int allocated,\n                                             SizeRequirements total,\n                                             SizeRequirements[] children,\n                                             int[] offsets,\n                                             int[] spans)", "description": "Creates a bunch of offset/span pairs specifying how to\n lay out a set of components with the specified alignments.\n The resulting span allocations will overlap, with each one\n fitting as well as possible into the given total allocation.\n This method requires that you specify\n the total amount of space to be allocated,\n the size requirements for each component to be placed\n (specified as an array of SizeRequirements), and\n the total size requirements of the set of components\n (only the alignment field of which is actually used).\n You can get the total size requirement by invoking\n getAlignedSizeRequirements.\n\n Normal alignment will be done with an alignment value of 0.0f\n representing the left/top edge of a component."}, {"method_name": "calculateAlignedPositions", "method_sig": "public static void calculateAlignedPositions (int allocated,\n                                             SizeRequirements total,\n                                             SizeRequirements[] children,\n                                             int[] offsets,\n                                             int[] spans,\n                                             boolean normal)", "description": "Creates a set of offset/span pairs specifying how to\n lay out a set of components with the specified alignments.\n The resulting span allocations will overlap, with each one\n fitting as well as possible into the given total allocation.\n This method requires that you specify\n the total amount of space to be allocated,\n the size requirements for each component to be placed\n (specified as an array of SizeRequirements), and\n the total size requirements of the set of components\n (only the alignment field of which is actually used)\n You can get the total size requirement by invoking\n getAlignedSizeRequirements.\n\n This method also requires a flag indicating whether normal or\n reverse alignment should be performed.  With normal alignment\n the value 0.0f represents the left/top edge of the component\n to be aligned.  With reverse alignment, 0.0f represents the\n right/bottom edge."}, {"method_name": "adjustSizes", "method_sig": "public static int[] adjustSizes (int delta,\n                                SizeRequirements[] children)", "description": "Adjust a specified array of sizes by a given amount."}]}