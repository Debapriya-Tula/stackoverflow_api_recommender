{"name": "Class HTMLEditorKit", "module": "java.desktop", "package": "javax.swing.text.html", "text": "The Swing JEditorPane text component supports different kinds\n of content via a plug-in mechanism called an EditorKit.  Because\n HTML is a very popular format of content, some support is provided\n by default.  The default support is provided by this class, which\n supports HTML version 3.2 (with some extensions), and is migrating\n toward version 4.0.\n The <applet> tag is not supported, but some support is provided\n for the <object> tag.\n \n There are several goals of the HTML EditorKit provided, that have\n an effect upon the way that HTML is modeled.  These\n have influenced its design in a substantial way.\n \n\n Support editing\n \n It might seem fairly obvious that a plug-in for JEditorPane\n should provide editing support, but that fact has several\n design considerations.  There are a substantial number of HTML\n documents that don't properly conform to an HTML specification.\n These must be normalized somewhat into a correct form if one\n is to edit them.  Additionally, users don't like to be presented\n with an excessive amount of structure editing, so using traditional\n text editing gestures is preferred over using the HTML structure\n exactly as defined in the HTML document.\n \n The modeling of HTML is provided by the class HTMLDocument.\n Its documentation describes the details of how the HTML is modeled.\n The editing support leverages heavily off of the text package.\n\n \n Extendable/Scalable\n \n To maximize the usefulness of this kit, a great deal of effort\n has gone into making it extendable.  These are some of the\n features.\n \n\n   The parser is replaceable.  The default parser is the Hot Java\n   parser which is DTD based.  A different DTD can be used, or an\n   entirely different parser can be used.  To change the parser,\n   reimplement the getParser method.  The default parser is\n   dynamically loaded when first asked for, so the class files\n   will never be loaded if an alternative parser is used.  The\n   default parser is in a separate package called parser below\n   this package.\n   \n   The parser drives the ParserCallback, which is provided by\n   HTMLDocument.  To change the callback, subclass HTMLDocument\n   and reimplement the createDefaultDocument method to return\n   document that produces a different reader.  The reader controls\n   how the document is structured.  Although the Document provides\n   HTML support by default, there is nothing preventing support of\n   non-HTML tags that result in alternative element structures.\n   \n   The default view of the models are provided as a hierarchy of\n   View implementations, so one can easily customize how a particular\n   element is displayed or add capabilities for new kinds of elements\n   by providing new View implementations.  The default set of views\n   are provided by the HTMLFactory class.  This can\n   be easily changed by subclassing or replacing the HTMLFactory\n   and reimplementing the getViewFactory method to return the alternative\n   factory.\n   \n   The View implementations work primarily off of CSS attributes,\n   which are kept in the views.  This makes it possible to have\n   multiple views mapped over the same model that appear substantially\n   different.  This can be especially useful for printing.  For\n   most HTML attributes, the HTML attributes are converted to CSS\n   attributes for display.  This helps make the View implementations\n   more general purpose\n \n\n Asynchronous Loading\n \n Larger documents involve a lot of parsing and take some time\n to load.  By default, this kit produces documents that will be\n loaded asynchronously if loaded using JEditorPane.setPage.\n This is controlled by a property on the document.  The method\n createDefaultDocument can\n be overriden to change this.  The batching of work is done\n by the HTMLDocument.HTMLReader class.  The actual\n work is done by the DefaultStyledDocument and\n AbstractDocument classes in the text package.\n\n \n Customization from current LAF\n \n HTML provides a well known set of features without exactly\n specifying the display characteristics.  Swing has a theme\n mechanism for its look-and-feel implementations.  It is desirable\n for the look-and-feel to feed display characteristics into the\n HTML views.  An user with poor vision for example would want\n high contrast and larger than typical fonts.\n \n The support for this is provided by the StyleSheet\n class.  The presentation of the HTML can be heavily influenced\n by the setting of the StyleSheet property on the EditorKit.\n\n \n Not lossy\n \n An EditorKit has the ability to be read and save documents.\n It is generally the most pleasing to users if there is no loss\n of data between the two operation.  The policy of the HTMLEditorKit\n will be to store things not recognized or not necessarily visible\n so they can be subsequently written out.  The model of the HTML document\n should therefore contain all information discovered while reading the\n document.  This is constrained in some ways by the need to support\n editing (i.e. incorrect documents sometimes must be normalized).\n The guiding principle is that information shouldn't be lost, but\n some might be synthesized to produce a more correct model or it might\n be rearranged.\n ", "codes": ["public class HTMLEditorKit\nextends StyledEditorKit\nimplements Accessible"], "fields": [{"field_name": "DEFAULT_CSS", "field_sig": "public static final\u00a0String DEFAULT_CSS", "description": "Default Cascading Style Sheet file that sets\n up the tag views."}, {"field_name": "BOLD_ACTION", "field_sig": "public static final\u00a0String BOLD_ACTION", "description": "The bold action identifier"}, {"field_name": "ITALIC_ACTION", "field_sig": "public static final\u00a0String ITALIC_ACTION", "description": "The italic action identifier"}, {"field_name": "PARA_INDENT_LEFT", "field_sig": "public static final\u00a0String PARA_INDENT_LEFT", "description": "The paragraph left indent action identifier"}, {"field_name": "PARA_INDENT_RIGHT", "field_sig": "public static final\u00a0String PARA_INDENT_RIGHT", "description": "The paragraph right indent action identifier"}, {"field_name": "FONT_CHANGE_BIGGER", "field_sig": "public static final\u00a0String FONT_CHANGE_BIGGER", "description": "The  font size increase to next value action identifier"}, {"field_name": "FONT_CHANGE_SMALLER", "field_sig": "public static final\u00a0String FONT_CHANGE_SMALLER", "description": "The font size decrease to next value action identifier"}, {"field_name": "COLOR_ACTION", "field_sig": "public static final\u00a0String COLOR_ACTION", "description": "The Color choice action identifier\n     The color is passed as an argument"}, {"field_name": "LOGICAL_STYLE_ACTION", "field_sig": "public static final\u00a0String LOGICAL_STYLE_ACTION", "description": "The logical style choice action identifier\n     The logical style is passed in as an argument"}, {"field_name": "IMG_ALIGN_TOP", "field_sig": "public static final\u00a0String IMG_ALIGN_TOP", "description": "Align images at the top."}, {"field_name": "IMG_ALIGN_MIDDLE", "field_sig": "public static final\u00a0String IMG_ALIGN_MIDDLE", "description": "Align images in the middle."}, {"field_name": "IMG_ALIGN_BOTTOM", "field_sig": "public static final\u00a0String IMG_ALIGN_BOTTOM", "description": "Align images at the bottom."}, {"field_name": "IMG_BORDER", "field_sig": "public static final\u00a0String IMG_BORDER", "description": "Align images at the border."}], "methods": [{"method_name": "getContentType", "method_sig": "public String getContentType()", "description": "Get the MIME type of the data that this\n kit represents support for.  This kit supports\n the type text/html."}, {"method_name": "getViewFactory", "method_sig": "public ViewFactory getViewFactory()", "description": "Fetch a factory that is suitable for producing\n views of any models that are produced by this\n kit."}, {"method_name": "createDefaultDocument", "method_sig": "public Document createDefaultDocument()", "description": "Create an uninitialized text storage model\n that is appropriate for this type of editor."}, {"method_name": "read", "method_sig": "public void read (Reader in,\n                 Document doc,\n                 int pos)\n          throws IOException,\n                 BadLocationException", "description": "Inserts content from the given stream. If doc is\n an instance of HTMLDocument, this will read\n HTML 3.2 text. Inserting HTML into a non-empty document must be inside\n the body Element, if you do not insert into the body an exception will\n be thrown. When inserting into a non-empty document all tags outside\n of the body (head, title) will be dropped."}, {"method_name": "insertHTML", "method_sig": "public void insertHTML (HTMLDocument doc,\n                       int offset,\n                       String html,\n                       int popDepth,\n                       int pushDepth,\n                       HTML.Tag insertTag)\n                throws BadLocationException,\n                       IOException", "description": "Inserts HTML into an existing document."}, {"method_name": "write", "method_sig": "public void write (Writer out,\n                  Document doc,\n                  int pos,\n                  int len)\n           throws IOException,\n                  BadLocationException", "description": "Write content from a document to the given stream\n in a format appropriate for this kind of content handler."}, {"method_name": "install", "method_sig": "public void install (JEditorPane c)", "description": "Called when the kit is being installed into the\n a JEditorPane."}, {"method_name": "deinstall", "method_sig": "public void deinstall (JEditorPane c)", "description": "Called when the kit is being removed from the\n JEditorPane.  This is used to unregister any\n listeners that were attached."}, {"method_name": "setStyleSheet", "method_sig": "public void setStyleSheet (StyleSheet s)", "description": "Set the set of styles to be used to render the various\n HTML elements.  These styles are specified in terms of\n CSS specifications.  Each document produced by the kit\n will have a copy of the sheet which it can add the\n document specific styles to.  By default, the StyleSheet\n specified is shared by all HTMLEditorKit instances.\n This should be reimplemented to provide a finer granularity\n if desired."}, {"method_name": "getStyleSheet", "method_sig": "public StyleSheet getStyleSheet()", "description": "Get the set of styles currently being used to render the\n HTML elements.  By default the resource specified by\n DEFAULT_CSS gets loaded, and is shared by all HTMLEditorKit\n instances."}, {"method_name": "getActions", "method_sig": "public Action[] getActions()", "description": "Fetches the command list for the editor.  This is\n the list of commands supported by the superclass\n augmented by the collection of commands defined\n locally for style operations."}, {"method_name": "createInputAttributes", "method_sig": "protected void createInputAttributes (Element element,\n                                     MutableAttributeSet set)", "description": "Copies the key/values in elements AttributeSet into\n set. This does not copy component, icon, or element\n names attributes. Subclasses may wish to refine what is and what\n isn't copied here. But be sure to first remove all the attributes that\n are in set.\n This is called anytime the caret moves over a different location."}, {"method_name": "getInputAttributes", "method_sig": "public MutableAttributeSet getInputAttributes()", "description": "Gets the input attributes used for the styled\n editing actions."}, {"method_name": "setDefaultCursor", "method_sig": "public void setDefaultCursor (Cursor cursor)", "description": "Sets the default cursor."}, {"method_name": "getDefaultCursor", "method_sig": "public Cursor getDefaultCursor()", "description": "Returns the default cursor."}, {"method_name": "setLinkCursor", "method_sig": "public void setLinkCursor (Cursor cursor)", "description": "Sets the cursor to use over links."}, {"method_name": "getLinkCursor", "method_sig": "public Cursor getLinkCursor()", "description": "Returns the cursor to use over hyper links."}, {"method_name": "isAutoFormSubmission", "method_sig": "public boolean isAutoFormSubmission()", "description": "Indicates whether an html form submission is processed automatically\n or only FormSubmitEvent is fired."}, {"method_name": "setAutoFormSubmission", "method_sig": "public void setAutoFormSubmission (boolean isAuto)", "description": "Specifies if an html form submission is processed\n automatically or only FormSubmitEvent is fired.\n By default it is set to true."}, {"method_name": "clone", "method_sig": "public Object clone()", "description": "Creates a copy of the editor kit."}, {"method_name": "getParser", "method_sig": "protected HTMLEditorKit.Parser getParser()", "description": "Fetch the parser to use for reading HTML streams.\n This can be reimplemented to provide a different\n parser.  The default implementation is loaded dynamically\n to avoid the overhead of loading the default parser if\n it's not used.  The default parser is the HotJava parser\n using an HTML 3.2 DTD."}, {"method_name": "getAccessibleContext", "method_sig": "public AccessibleContext getAccessibleContext()", "description": "returns the AccessibleContext associated with this editor kit"}]}