{"name": "Interface Predicate<T>", "module": "java.base", "package": "java.util.function", "text": "Represents a predicate (boolean-valued function) of one argument.\n\n This is a functional interface\n whose functional method is test(Object).", "codes": ["@FunctionalInterface\npublic interface Predicate<T>"], "fields": [], "methods": [{"method_name": "test", "method_sig": "boolean test (T t)", "description": "Evaluates this predicate on the given argument."}, {"method_name": "and", "method_sig": "default Predicate<T> and (Predicate<? super T> other)", "description": "Returns a composed predicate that represents a short-circuiting logical\n AND of this predicate and another.  When evaluating the composed\n predicate, if this predicate is false, then the other\n predicate is not evaluated.\n\n Any exceptions thrown during evaluation of either predicate are relayed\n to the caller; if evaluation of this predicate throws an exception, the\n other predicate will not be evaluated."}, {"method_name": "negate", "method_sig": "default Predicate<T> negate()", "description": "Returns a predicate that represents the logical negation of this\n predicate."}, {"method_name": "or", "method_sig": "default Predicate<T> or (Predicate<? super T> other)", "description": "Returns a composed predicate that represents a short-circuiting logical\n OR of this predicate and another.  When evaluating the composed\n predicate, if this predicate is true, then the other\n predicate is not evaluated.\n\n Any exceptions thrown during evaluation of either predicate are relayed\n to the caller; if evaluation of this predicate throws an exception, the\n other predicate will not be evaluated."}, {"method_name": "isEqual", "method_sig": "static <T> Predicate<T> isEqual (Object targetRef)", "description": "Returns a predicate that tests if two arguments are equal according\n to Objects.equals(Object, Object)."}, {"method_name": "not", "method_sig": "static <T> Predicate<T> not (Predicate<? super T> target)", "description": "Returns a predicate that is the negation of the supplied predicate.\n This is accomplished by returning result of the calling\n target.negate()."}]}