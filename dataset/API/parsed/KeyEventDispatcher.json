{"name": "Interface KeyEventDispatcher", "module": "java.desktop", "package": "java.awt", "text": "A KeyEventDispatcher cooperates with the current KeyboardFocusManager in the\n targeting and dispatching of all KeyEvents. KeyEventDispatchers registered\n with the current KeyboardFocusManager will receive KeyEvents before they are\n dispatched to their targets, allowing each KeyEventDispatcher to retarget\n the event, consume it, dispatch the event itself, or make other changes.\n \n Note that KeyboardFocusManager itself implements KeyEventDispatcher. By\n default, the current KeyboardFocusManager will be the sink for all KeyEvents\n not dispatched by the registered KeyEventDispatchers. The current\n KeyboardFocusManager cannot be completely deregistered as a\n KeyEventDispatcher. However, if a KeyEventDispatcher reports that it\n dispatched the KeyEvent, regardless of whether it actually did so, the\n KeyboardFocusManager will take no further action with regard to the\n KeyEvent. (While it is possible for client code to register the current\n KeyboardFocusManager as a KeyEventDispatcher one or more times, this is\n usually unnecessary and not recommended.)", "codes": ["@FunctionalInterface\npublic interface KeyEventDispatcher"], "fields": [], "methods": [{"method_name": "dispatchKeyEvent", "method_sig": "boolean dispatchKeyEvent (KeyEvent e)", "description": "This method is called by the current KeyboardFocusManager requesting\n that this KeyEventDispatcher dispatch the specified event on its behalf.\n This KeyEventDispatcher is free to retarget the event, consume it,\n dispatch it itself, or make other changes. This capability is typically\n used to deliver KeyEvents to Components other than the focus owner. This\n can be useful when navigating children of non-focusable Windows in an\n accessible environment, for example. Note that if a KeyEventDispatcher\n dispatches the KeyEvent itself, it must use redispatchEvent\n to prevent the current KeyboardFocusManager from recursively requesting\n that this KeyEventDispatcher dispatch the event again.\n \n If an implementation of this method returns false, then\n the KeyEvent is passed to the next KeyEventDispatcher in the chain,\n ending with the current KeyboardFocusManager. If an implementation\n returns true, the KeyEvent is assumed to have been\n dispatched (although this need not be the case), and the current\n KeyboardFocusManager will take no further action with regard to the\n KeyEvent. In such a case,\n KeyboardFocusManager.dispatchEvent should return\n true as well. If an implementation consumes the KeyEvent,\n but returns false, the consumed event will still be passed\n to the next KeyEventDispatcher in the chain. It is important for\n developers to check whether the KeyEvent has been consumed before\n dispatching it to a target. By default, the current KeyboardFocusManager\n will not dispatch a consumed KeyEvent."}]}