{"name": "Class JToolTip", "module": "java.desktop", "package": "javax.swing", "text": "Used to display a \"Tip\" for a Component. Typically components provide api\n to automate the process of using ToolTips.\n For example, any Swing component can use the JComponent\nsetToolTipText method to specify the text\n for a standard tooltip. A component that wants to create a custom\n ToolTip\n display can override JComponent's createToolTip\n method and use a subclass of this class.\n \n See How to Use Tool Tips\n in The Java Tutorial\n for further documentation.\n \nWarning: Swing is not thread safe. For more\n information see Swing's Threading\n Policy.\n \nWarning:\n Serialized objects of this class will not be compatible with\n future Swing releases. The current serialization support is\n appropriate for short term storage or RMI between applications running\n the same version of Swing.  As of 1.4, support for long term storage\n of all JavaBeans\u2122\n has been added to the java.beans package.\n Please see XMLEncoder.", "codes": ["public class JToolTip\nextends JComponent\nimplements Accessible"], "fields": [], "methods": [{"method_name": "getUI", "method_sig": "public ToolTipUI getUI()", "description": "Returns the L&F object that renders this component."}, {"method_name": "updateUI", "method_sig": "public void updateUI()", "description": "Resets the UI property to a value from the current look and feel."}, {"method_name": "getUIClassID", "method_sig": "public String getUIClassID()", "description": "Returns the name of the L&F class that renders this component."}, {"method_name": "setTipText", "method_sig": "@BeanProperty(preferred=true,\n              description=\"Sets the text of the tooltip\")\npublic void setTipText (String tipText)", "description": "Sets the text to show when the tool tip is displayed.\n The string tipText may be null."}, {"method_name": "getTipText", "method_sig": "public String getTipText()", "description": "Returns the text that is shown when the tool tip is displayed.\n The returned value may be null."}, {"method_name": "setComponent", "method_sig": "@BeanProperty(description=\"Sets the component that the tooltip describes.\")\npublic void setComponent (JComponent c)", "description": "Specifies the component that the tooltip describes.\n The component c may be null\n and will have no effect.\n \n This is a bound property."}, {"method_name": "getComponent", "method_sig": "public JComponent getComponent()", "description": "Returns the component the tooltip applies to.\n The returned value may be null."}, {"method_name": "paramString", "method_sig": "protected String paramString()", "description": "Returns a string representation of this JToolTip.\n This method\n is intended to be used only for debugging purposes, and the\n content and format of the returned string may vary between\n implementations. The returned string may be empty but may not\n be null."}, {"method_name": "getAccessibleContext", "method_sig": "public AccessibleContext getAccessibleContext()", "description": "Gets the AccessibleContext associated with this JToolTip.\n For tool tips, the AccessibleContext takes the form of an\n AccessibleJToolTip.\n A new AccessibleJToolTip instance is created if necessary."}]}