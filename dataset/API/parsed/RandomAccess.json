{"name": "Interface RandomAccess", "module": "java.base", "package": "java.util", "text": "Marker interface used by List implementations to indicate that\n they support fast (generally constant time) random access.  The primary\n purpose of this interface is to allow generic algorithms to alter their\n behavior to provide good performance when applied to either random or\n sequential access lists.\n\n The best algorithms for manipulating random access lists (such as\n ArrayList) can produce quadratic behavior when applied to\n sequential access lists (such as LinkedList).  Generic list\n algorithms are encouraged to check whether the given list is an\n instanceof this interface before applying an algorithm that would\n provide poor performance if it were applied to a sequential access list,\n and to alter their behavior if necessary to guarantee acceptable\n performance.\n\n It is recognized that the distinction between random and sequential\n access is often fuzzy.  For example, some List implementations\n provide asymptotically linear access times if they get huge, but constant\n access times in practice.  Such a List implementation\n should generally implement this interface.  As a rule of thumb, a\n List implementation should implement this interface if,\n for typical instances of the class, this loop:\n \n     for (int i=0, n=list.size(); i < n; i++)\n         list.get(i);\n \n runs faster than this loop:\n \n     for (Iterator i=list.iterator(); i.hasNext(); )\n         i.next();\n \nThis interface is a member of the\n \n Java Collections Framework.", "codes": ["public interface RandomAccess"], "fields": [], "methods": []}