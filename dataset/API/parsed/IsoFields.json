{"name": "Class IsoFields", "module": "java.base", "package": "java.time.temporal", "text": "Fields and units specific to the ISO-8601 calendar system,\n including quarter-of-year and week-based-year.\n \n This class defines fields and units that are specific to the ISO calendar system.\n\n Quarter of year\n The ISO-8601 standard is based on the standard civic 12 month year.\n This is commonly divided into four quarters, often abbreviated as Q1, Q2, Q3 and Q4.\n \n January, February and March are in Q1.\n April, May and June are in Q2.\n July, August and September are in Q3.\n October, November and December are in Q4.\n \n The complete date is expressed using three fields:\n \nDAY_OF_QUARTER - the day within the quarter, from 1 to 90, 91 or 92\n QUARTER_OF_YEAR - the quarter within the year, from 1 to 4\n YEAR - the standard ISO year\n \nWeek based years\n The ISO-8601 standard was originally intended as a data interchange format,\n defining a string format for dates and times. However, it also defines an\n alternate way of expressing the date, based on the concept of week-based-year.\n \n The date is expressed using three fields:\n \nDAY_OF_WEEK - the standard field defining the\n  day-of-week from Monday (1) to Sunday (7)\n WEEK_OF_WEEK_BASED_YEAR - the week within the week-based-year\n WEEK_BASED_YEAR - the week-based-year\n \n The week-based-year itself is defined relative to the standard ISO proleptic year.\n It differs from the standard year in that it always starts on a Monday.\n \n The first week of a week-based-year is the first Monday-based week of the standard\n ISO year that has at least 4 days in the new year.\n \nIf January 1st is Monday then week 1 starts on January 1st\n If January 1st is Tuesday then week 1 starts on December 31st of the previous standard year\n If January 1st is Wednesday then week 1 starts on December 30th of the previous standard year\n If January 1st is Thursday then week 1 starts on December 29th of the previous standard year\n If January 1st is Friday then week 1 starts on January 4th\n If January 1st is Saturday then week 1 starts on January 3rd\n If January 1st is Sunday then week 1 starts on January 2nd\n \n There are 52 weeks in most week-based years, however on occasion there are 53 weeks.\n \n For example:\n\n \nExamples of Week based Years\n\nDateDay-of-weekField values\n\n\n2008-12-28SundayWeek 52 of week-based-year 2008\n2008-12-29MondayWeek 1 of week-based-year 2009\n2008-12-31WednesdayWeek 1 of week-based-year 2009\n2009-01-01ThursdayWeek 1 of week-based-year 2009\n2009-01-04SundayWeek 1 of week-based-year 2009\n2009-01-05MondayWeek 2 of week-based-year 2009\n\n", "codes": ["public final class IsoFields\nextends Object"], "fields": [{"field_name": "DAY_OF_QUARTER", "field_sig": "public static final\u00a0TemporalField DAY_OF_QUARTER", "description": "The field that represents the day-of-quarter.\n \n This field allows the day-of-quarter value to be queried and set.\n The day-of-quarter has values from 1 to 90 in Q1 of a standard year, from 1 to 91\n in Q1 of a leap year, from 1 to 91 in Q2 and from 1 to 92 in Q3 and Q4.\n \n The day-of-quarter can only be calculated if the day-of-year, month-of-year and year\n are available.\n \n When setting this field, the value is allowed to be partially lenient, taking any\n value from 1 to 92. If the quarter has less than 92 days, then day 92, and\n potentially day 91, is in the following quarter.\n \n In the resolving phase of parsing, a date can be created from a year,\n quarter-of-year and day-of-quarter.\n \n In strict mode, all three fields are\n validated against their range of valid values. The day-of-quarter field\n is validated from 1 to 90, 91 or 92 depending on the year and quarter.\n \n In smart mode, all three fields are\n validated against their range of valid values. The day-of-quarter field is\n validated between 1 and 92, ignoring the actual range based on the year and quarter.\n If the day-of-quarter exceeds the actual range by one day, then the resulting date\n is one day later. If the day-of-quarter exceeds the actual range by two days,\n then the resulting date is two days later.\n \n In lenient mode, only the year is validated\n against the range of valid values. The resulting date is calculated equivalent to\n the following three stage approach. First, create a date on the first of January\n in the requested year. Then take the quarter-of-year, subtract one, and add the\n amount in quarters to the date. Finally, take the day-of-quarter, subtract one,\n and add the amount in days to the date.\n \n This unit is an immutable and thread-safe singleton."}, {"field_name": "QUARTER_OF_YEAR", "field_sig": "public static final\u00a0TemporalField QUARTER_OF_YEAR", "description": "The field that represents the quarter-of-year.\n \n This field allows the quarter-of-year value to be queried and set.\n The quarter-of-year has values from 1 to 4.\n \n The quarter-of-year can only be calculated if the month-of-year is available.\n \n In the resolving phase of parsing, a date can be created from a year,\n quarter-of-year and day-of-quarter.\n See DAY_OF_QUARTER for details.\n \n This unit is an immutable and thread-safe singleton."}, {"field_name": "WEEK_OF_WEEK_BASED_YEAR", "field_sig": "public static final\u00a0TemporalField WEEK_OF_WEEK_BASED_YEAR", "description": "The field that represents the week-of-week-based-year.\n \n This field allows the week of the week-based-year value to be queried and set.\n The week-of-week-based-year has values from 1 to 52, or 53 if the\n week-based-year has 53 weeks.\n \n In the resolving phase of parsing, a date can be created from a\n week-based-year, week-of-week-based-year and day-of-week.\n \n In strict mode, all three fields are\n validated against their range of valid values. The week-of-week-based-year\n field is validated from 1 to 52 or 53 depending on the week-based-year.\n \n In smart mode, all three fields are\n validated against their range of valid values. The week-of-week-based-year\n field is validated between 1 and 53, ignoring the week-based-year.\n If the week-of-week-based-year is 53, but the week-based-year only has\n 52 weeks, then the resulting date is in week 1 of the following week-based-year.\n \n In lenient mode, only the week-based-year\n is validated against the range of valid values. If the day-of-week is outside\n the range 1 to 7, then the resulting date is adjusted by a suitable number of\n weeks to reduce the day-of-week to the range 1 to 7. If the week-of-week-based-year\n value is outside the range 1 to 52, then any excess weeks are added or subtracted\n from the resulting date.\n \n This unit is an immutable and thread-safe singleton."}, {"field_name": "WEEK_BASED_YEAR", "field_sig": "public static final\u00a0TemporalField WEEK_BASED_YEAR", "description": "The field that represents the week-based-year.\n \n This field allows the week-based-year value to be queried and set.\n \n The field has a range that matches LocalDate.MAX and LocalDate.MIN.\n \n In the resolving phase of parsing, a date can be created from a\n week-based-year, week-of-week-based-year and day-of-week.\n See WEEK_OF_WEEK_BASED_YEAR for details.\n \n This unit is an immutable and thread-safe singleton."}, {"field_name": "WEEK_BASED_YEARS", "field_sig": "public static final\u00a0TemporalUnit WEEK_BASED_YEARS", "description": "The unit that represents week-based-years for the purpose of addition and subtraction.\n \n This allows a number of week-based-years to be added to, or subtracted from, a date.\n The unit is equal to either 52 or 53 weeks.\n The estimated duration of a week-based-year is the same as that of a standard ISO\n year at 365.2425 Days.\n \n The rules for addition add the number of week-based-years to the existing value\n for the week-based-year field. If the resulting week-based-year only has 52 weeks,\n then the date will be in week 1 of the following week-based-year.\n \n This unit is an immutable and thread-safe singleton."}, {"field_name": "QUARTER_YEARS", "field_sig": "public static final\u00a0TemporalUnit QUARTER_YEARS", "description": "Unit that represents the concept of a quarter-year.\n For the ISO calendar system, it is equal to 3 months.\n The estimated duration of a quarter-year is one quarter of 365.2425 Days.\n \n This unit is an immutable and thread-safe singleton."}], "methods": []}