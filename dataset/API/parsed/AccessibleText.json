{"name": "Interface AccessibleText", "module": "java.desktop", "package": "javax.accessibility", "text": "The AccessibleText interface should be implemented by all classes\n that present textual information on the display. This interface provides the\n standard mechanism for an assistive technology to access that text via its\n content, attributes, and spatial location. Applications can determine if an\n object supports the AccessibleText interface by first obtaining its\n AccessibleContext (see Accessible) and then calling the\n AccessibleContext.getAccessibleText() method of\n AccessibleContext. If the return value is not null, the\n object supports this interface.", "codes": ["public interface AccessibleText"], "fields": [{"field_name": "CHARACTER", "field_sig": "static final\u00a0int CHARACTER", "description": "Constant used to indicate that the part of the text that should be\n retrieved is a character."}, {"field_name": "WORD", "field_sig": "static final\u00a0int WORD", "description": "Constant used to indicate that the part of the text that should be\n retrieved is a word."}, {"field_name": "SENTENCE", "field_sig": "static final\u00a0int SENTENCE", "description": "Constant used to indicate that the part of the text that should be\n retrieved is a sentence.\n \n A sentence is a string of words which expresses an assertion, a question,\n a command, a wish, an exclamation, or the performance of an action. In\n English locales, the string usually begins with a capital letter and\n concludes with appropriate end punctuation; such as a period, question or\n exclamation mark. Other locales may use different capitalization and/or\n punctuation."}], "methods": [{"method_name": "getIndexAtPoint", "method_sig": "int getIndexAtPoint (Point p)", "description": "Given a point in local coordinates, return the zero-based index of the\n character under that point. If the point is invalid, this method returns\n -1."}, {"method_name": "getCharacterBounds", "method_sig": "Rectangle getCharacterBounds (int i)", "description": "Determines the bounding box of the character at the given index into the\n string. The bounds are returned in local coordinates. If the index is\n invalid an empty rectangle is returned."}, {"method_name": "getCharCount", "method_sig": "int getCharCount()", "description": "Returns the number of characters (valid indicies)."}, {"method_name": "getCaretPosition", "method_sig": "int getCaretPosition()", "description": "Returns the zero-based offset of the caret.\n \n Note: That to the right of the caret will have the same index value as\n the offset (the caret is between two characters)."}, {"method_name": "getAtIndex", "method_sig": "String getAtIndex (int part,\n                  int index)", "description": "Returns the String at a given index."}, {"method_name": "getAfterIndex", "method_sig": "String getAfterIndex (int part,\n                     int index)", "description": "Returns the String after a given index."}, {"method_name": "getBeforeIndex", "method_sig": "String getBeforeIndex (int part,\n                      int index)", "description": "Returns the String before a given index."}, {"method_name": "getCharacterAttribute", "method_sig": "AttributeSet getCharacterAttribute (int i)", "description": "Returns the AttributeSet for a given character at a given index."}, {"method_name": "getSelectionStart", "method_sig": "int getSelectionStart()", "description": "Returns the start offset within the selected text. If there is no\n selection, but there is a caret, the start and end offsets will be the\n same."}, {"method_name": "getSelectionEnd", "method_sig": "int getSelectionEnd()", "description": "Returns the end offset within the selected text. If there is no\n selection, but there is a caret, the start and end offsets will be the\n same."}, {"method_name": "getSelectedText", "method_sig": "String getSelectedText()", "description": "Returns the portion of the text that is selected."}]}