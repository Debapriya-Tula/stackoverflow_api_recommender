{"name": "Class SelectorProvider", "module": "java.base", "package": "java.nio.channels.spi", "text": "Service-provider class for selectors and selectable channels.\n\n  A selector provider is a concrete subclass of this class that has a\n zero-argument constructor and implements the abstract methods specified\n below.  A given invocation of the Java virtual machine maintains a single\n system-wide default provider instance, which is returned by the provider method.  The first invocation of that method will locate\n the default provider as specified below.\n\n  The system-wide default provider is used by the static open\n methods of the DatagramChannel, Pipe, Selector, ServerSocketChannel, and SocketChannel classes.  It is also\n used by the System.inheritedChannel()\n method. A program may make use of a provider other than the default provider\n by instantiating that provider and then directly invoking the open\n methods defined in this class.\n\n  All of the methods in this class are safe for use by multiple concurrent\n threads.  ", "codes": ["public abstract class SelectorProvider\nextends Object"], "fields": [], "methods": [{"method_name": "provider", "method_sig": "public static SelectorProvider provider()", "description": "Returns the system-wide default selector provider for this invocation of\n the Java virtual machine.\n\n  The first invocation of this method locates the default provider\n object as follows: \n\n If the system property\n   java.nio.channels.spi.SelectorProvider is defined then it is\n   taken to be the fully-qualified name of a concrete provider class.\n   The class is loaded and instantiated; if this process fails then an\n   unspecified error is thrown.  \n If a provider class has been installed in a jar file that is\n   visible to the system class loader, and that jar file contains a\n   provider-configuration file named\n   java.nio.channels.spi.SelectorProvider in the resource\n   directory META-INF/services, then the first class name\n   specified in that file is taken.  The class is loaded and\n   instantiated; if this process fails then an unspecified error is\n   thrown.  \n Finally, if no provider has been specified by any of the above\n   means then the system-default provider class is instantiated and the\n   result is returned.  \n\n Subsequent invocations of this method return the provider that was\n returned by the first invocation.  "}, {"method_name": "openDatagramChannel", "method_sig": "public abstract DatagramChannel openDatagramChannel()\n                                             throws IOException", "description": "Opens a datagram channel."}, {"method_name": "openDatagramChannel", "method_sig": "public abstract DatagramChannel openDatagramChannel (ProtocolFamily family)\n                                             throws IOException", "description": "Opens a datagram channel."}, {"method_name": "openPipe", "method_sig": "public abstract Pipe openPipe()\n                       throws IOException", "description": "Opens a pipe."}, {"method_name": "openSelector", "method_sig": "public abstract AbstractSelector openSelector()\n                                       throws IOException", "description": "Opens a selector."}, {"method_name": "openServerSocketChannel", "method_sig": "public abstract ServerSocketChannel openServerSocketChannel()\n                                                     throws IOException", "description": "Opens a server-socket channel."}, {"method_name": "openSocketChannel", "method_sig": "public abstract SocketChannel openSocketChannel()\n                                         throws IOException", "description": "Opens a socket channel."}, {"method_name": "inheritedChannel", "method_sig": "public Channel inheritedChannel()\n                         throws IOException", "description": "Returns the channel inherited from the entity that created this\n Java virtual machine.\n\n  On many operating systems a process, such as a Java virtual\n machine, can be started in a manner that allows the process to\n inherit a channel from the entity that created the process. The\n manner in which this is done is system dependent, as are the\n possible entities to which the channel may be connected. For example,\n on UNIX systems, the Internet services daemon (inetd) is used to\n start programs to service requests when a request arrives on an\n associated network port. In this example, the process that is started,\n inherits a channel representing a network socket.\n\n  In cases where the inherited channel represents a network socket\n then the Channel type returned\n by this method is determined as follows:\n\n \n If the inherited channel represents a stream-oriented connected\n  socket then a SocketChannel is\n  returned. The socket channel is, at least initially, in blocking\n  mode, bound to a socket address, and connected to a peer.\n  \n If the inherited channel represents a stream-oriented listening\n  socket then a ServerSocketChannel is returned. The server-socket channel is, at\n  least initially, in blocking mode, and bound to a socket address.\n  \n If the inherited channel is a datagram-oriented socket\n  then a DatagramChannel is\n  returned. The datagram channel is, at least initially, in blocking\n  mode, and bound to a socket address.\n  \n\n In addition to the network-oriented channels described, this method\n may return other kinds of channels in the future.\n\n  The first invocation of this method creates the channel that is\n returned. Subsequent invocations of this method return the same\n channel. "}]}