{"name": "Interface CharacterData", "module": "java.xml", "package": "org.w3c.dom", "text": "The CharacterData interface extends Node with a set of\n attributes and methods for accessing character data in the DOM. For\n clarity this set is defined here rather than on each object that uses\n these attributes and methods. No DOM objects correspond directly to\n CharacterData, though Text and others do\n inherit the interface from it. All offsets in this interface\n start from 0.\n As explained in the DOMString interface, text strings in\n the DOM are represented in UTF-16, i.e. as a sequence of 16-bit units. In\n the following, the term 16-bit units is used whenever necessary to\n indicate that indexing on CharacterData is done in 16-bit units.\n See also the Document Object Model (DOM) Level 3 Core Specification.", "codes": ["public interface CharacterData\nextends Node"], "fields": [], "methods": [{"method_name": "getData", "method_sig": "String getData()\n        throws DOMException", "description": "The character data of the node that implements this interface. The DOM\n implementation may not put arbitrary limits on the amount of data\n that may be stored in a CharacterData node. However,\n implementation limits may mean that the entirety of a node's data may\n not fit into a single DOMString. In such cases, the user\n may call substringData to retrieve the data in\n appropriately sized pieces."}, {"method_name": "setData", "method_sig": "void setData (String data)\n      throws DOMException", "description": "The character data of the node that implements this interface. The DOM\n implementation may not put arbitrary limits on the amount of data\n that may be stored in a CharacterData node. However,\n implementation limits may mean that the entirety of a node's data may\n not fit into a single DOMString. In such cases, the user\n may call substringData to retrieve the data in\n appropriately sized pieces."}, {"method_name": "getLength", "method_sig": "int getLength()", "description": "The number of 16-bit units that are available through data\n and the substringData method below. This may have the\n value zero, i.e., CharacterData nodes may be empty."}, {"method_name": "substringData", "method_sig": "String substringData (int offset,\n                     int count)\n              throws DOMException", "description": "Extracts a range of data from the node."}, {"method_name": "appendData", "method_sig": "void appendData (String arg)\n         throws DOMException", "description": "Append the string to the end of the character data of the node. Upon\n success, data provides access to the concatenation of\n data and the DOMString specified."}, {"method_name": "insertData", "method_sig": "void insertData (int offset,\n                String arg)\n         throws DOMException", "description": "Insert a string at the specified 16-bit unit offset."}, {"method_name": "deleteData", "method_sig": "void deleteData (int offset,\n                int count)\n         throws DOMException", "description": "Remove a range of 16-bit units from the node. Upon success,\n data and length reflect the change."}, {"method_name": "replaceData", "method_sig": "void replaceData (int offset,\n                 int count,\n                 String arg)\n          throws DOMException", "description": "Replace the characters starting at the specified 16-bit unit offset\n with the specified string."}]}