{"name": "Class ByteArrayOutputStream", "module": "java.base", "package": "java.io", "text": "This class implements an output stream in which the data is\n written into a byte array. The buffer automatically grows as data\n is written to it.\n The data can be retrieved using toByteArray() and\n toString().\n \n Closing a ByteArrayOutputStream has no effect. The methods in\n this class can be called after the stream has been closed without\n generating an IOException.", "codes": ["public class ByteArrayOutputStream\nextends OutputStream"], "fields": [{"field_name": "buf", "field_sig": "protected\u00a0byte[] buf", "description": "The buffer where data is stored."}, {"field_name": "count", "field_sig": "protected\u00a0int count", "description": "The number of valid bytes in the buffer."}], "methods": [{"method_name": "write", "method_sig": "public void write (int b)", "description": "Writes the specified byte to this ByteArrayOutputStream."}, {"method_name": "write", "method_sig": "public void write (byte[] b,\n                  int off,\n                  int len)", "description": "Writes len bytes from the specified byte array\n starting at offset off to this ByteArrayOutputStream."}, {"method_name": "writeBytes", "method_sig": "public void writeBytes (byte[] b)", "description": "Writes the complete contents of the specified byte array\n to this ByteArrayOutputStream."}, {"method_name": "writeTo", "method_sig": "public void writeTo (OutputStream out)\n             throws IOException", "description": "Writes the complete contents of this ByteArrayOutputStream to\n the specified output stream argument, as if by calling the output\n stream's write method using out.write(buf, 0, count)."}, {"method_name": "reset", "method_sig": "public void reset()", "description": "Resets the count field of this ByteArrayOutputStream\n to zero, so that all currently accumulated output in the\n output stream is discarded. The output stream can be used again,\n reusing the already allocated buffer space."}, {"method_name": "toByteArray", "method_sig": "public byte[] toByteArray()", "description": "Creates a newly allocated byte array. Its size is the current\n size of this output stream and the valid contents of the buffer\n have been copied into it."}, {"method_name": "size", "method_sig": "public int size()", "description": "Returns the current size of the buffer."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Converts the buffer's contents into a string decoding bytes using the\n platform's default character set. The length of the new String\n is a function of the character set, and hence may not be equal to the\n size of the buffer.\n\n  This method always replaces malformed-input and unmappable-character\n sequences with the default replacement string for the platform's\n default character set. The CharsetDecoder\n class should be used when more control over the decoding process is\n required."}, {"method_name": "toString", "method_sig": "public String toString (String charsetName)\n                throws UnsupportedEncodingException", "description": "Converts the buffer's contents into a string by decoding the bytes using\n the named charset.\n\n  This method is equivalent to #toString(charset) that takes a\n charset.\n\n  An invocation of this method of the form\n\n  \n      ByteArrayOutputStream b = ...\n      b.toString(\"UTF-8\")\n      \n \n\n behaves in exactly the same way as the expression\n\n  \n      ByteArrayOutputStream b = ...\n      b.toString(StandardCharsets.UTF_8)\n      \n "}, {"method_name": "toString", "method_sig": "public String toString (Charset charset)", "description": "Converts the buffer's contents into a string by decoding the bytes using\n the specified charset. The length of the new\n String is a function of the charset, and hence may not be equal\n to the length of the byte array.\n\n  This method always replaces malformed-input and unmappable-character\n sequences with the charset's default replacement string. The CharsetDecoder class should be used when more control\n over the decoding process is required."}, {"method_name": "toString", "method_sig": "@Deprecated\npublic String toString (int hibyte)", "description": "Creates a newly allocated string. Its size is the current size of\n the output stream and the valid contents of the buffer have been\n copied into it. Each character c in the resulting string is\n constructed from the corresponding element b in the byte\n array such that:\n \n     c == (char)(((hibyte & 0xff) << 8) | (b & 0xff))\n "}, {"method_name": "close", "method_sig": "public void close()\n           throws IOException", "description": "Closing a ByteArrayOutputStream has no effect. The methods in\n this class can be called after the stream has been closed without\n generating an IOException."}]}