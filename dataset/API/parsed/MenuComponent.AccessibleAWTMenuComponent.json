{"name": "Class MenuComponent.AccessibleAWTMenuComponent", "module": "java.desktop", "package": "java.awt", "text": "Inner class of MenuComponent used to provide\n default support for accessibility.  This class is not meant\n to be used directly by application developers, but is instead\n meant only to be subclassed by menu component developers.\n \n The class used to obtain the accessible role for this object.", "codes": ["protected abstract class MenuComponent.AccessibleAWTMenuComponent\nextends AccessibleContext\nimplements Serializable, AccessibleComponent, AccessibleSelection"], "fields": [], "methods": [{"method_name": "getAccessibleSelection", "method_sig": "public AccessibleSelection getAccessibleSelection()", "description": "Gets the AccessibleSelection associated with this\n object which allows its Accessible children to be selected."}, {"method_name": "getAccessibleName", "method_sig": "public String getAccessibleName()", "description": "Gets the accessible name of this object.  This should almost never\n return java.awt.MenuComponent.getName, as that\n generally isn't a localized name, and doesn't have meaning for the\n user.  If the object is fundamentally a text object (e.g. a menu item), the\n accessible name should be the text of the object (e.g. \"save\").\n If the object has a tooltip, the tooltip text may also be an\n appropriate String to return."}, {"method_name": "getAccessibleDescription", "method_sig": "public String getAccessibleDescription()", "description": "Gets the accessible description of this object.  This should be\n a concise, localized description of what this object is - what\n is its meaning to the user.  If the object has a tooltip, the\n tooltip text may be an appropriate string to return, assuming\n it contains a concise description of the object (instead of just\n the name of the object - e.g. a \"Save\" icon on a toolbar that\n had \"save\" as the tooltip text shouldn't return the tooltip\n text as the description, but something like \"Saves the current\n text document\" instead)."}, {"method_name": "getAccessibleRole", "method_sig": "public AccessibleRole getAccessibleRole()", "description": "Gets the role of this object."}, {"method_name": "getAccessibleStateSet", "method_sig": "public AccessibleStateSet getAccessibleStateSet()", "description": "Gets the state of this object."}, {"method_name": "getAccessibleParent", "method_sig": "public Accessible getAccessibleParent()", "description": "Gets the Accessible parent of this object.\n If the parent of this object implements Accessible,\n this method should simply return getParent."}, {"method_name": "getAccessibleIndexInParent", "method_sig": "public int getAccessibleIndexInParent()", "description": "Gets the index of this object in its accessible parent."}, {"method_name": "getAccessibleChildrenCount", "method_sig": "public int getAccessibleChildrenCount()", "description": "Returns the number of accessible children in the object.  If all\n of the children of this object implement Accessible,\n then this method should return the number of children of this object."}, {"method_name": "getAccessibleChild", "method_sig": "public Accessible getAccessibleChild (int i)", "description": "Returns the nth Accessible child of the object."}, {"method_name": "getLocale", "method_sig": "public Locale getLocale()", "description": "Returns the locale of this object."}, {"method_name": "getAccessibleComponent", "method_sig": "public AccessibleComponent getAccessibleComponent()", "description": "Gets the AccessibleComponent associated with\n this object if one exists.  Otherwise return null."}, {"method_name": "getBackground", "method_sig": "public Color getBackground()", "description": "Gets the background color of this object."}, {"method_name": "setBackground", "method_sig": "public void setBackground (Color c)", "description": "Sets the background color of this object.\n (For transparency, see isOpaque.)"}, {"method_name": "getForeground", "method_sig": "public Color getForeground()", "description": "Gets the foreground color of this object."}, {"method_name": "setForeground", "method_sig": "public void setForeground (Color c)", "description": "Sets the foreground color of this object."}, {"method_name": "getCursor", "method_sig": "public Cursor getCursor()", "description": "Gets the Cursor of this object."}, {"method_name": "setCursor", "method_sig": "public void setCursor (Cursor cursor)", "description": "Sets the Cursor of this object.\n \n The method may have no visual effect if the Java platform\n implementation and/or the native system do not support\n changing the mouse cursor shape."}, {"method_name": "getFont", "method_sig": "public Font getFont()", "description": "Gets the Font of this object."}, {"method_name": "setFont", "method_sig": "public void setFont (Font f)", "description": "Sets the Font of this object."}, {"method_name": "getFontMetrics", "method_sig": "public FontMetrics getFontMetrics (Font f)", "description": "Gets the FontMetrics of this object."}, {"method_name": "isEnabled", "method_sig": "public boolean isEnabled()", "description": "Determines if the object is enabled."}, {"method_name": "setEnabled", "method_sig": "public void setEnabled (boolean b)", "description": "Sets the enabled state of the object."}, {"method_name": "isVisible", "method_sig": "public boolean isVisible()", "description": "Determines if the object is visible.  Note: this means that the\n object intends to be visible; however, it may not in fact be\n showing on the screen because one of the objects that this object\n is contained by is not visible.  To determine if an object is\n showing on the screen, use isShowing."}, {"method_name": "setVisible", "method_sig": "public void setVisible (boolean b)", "description": "Sets the visible state of the object."}, {"method_name": "isShowing", "method_sig": "public boolean isShowing()", "description": "Determines if the object is showing.  This is determined by checking\n the visibility of the object and ancestors of the object.  Note:\n this will return true even if the object is obscured by another\n (for example, it happens to be underneath a menu that was pulled\n down)."}, {"method_name": "contains", "method_sig": "public boolean contains (Point p)", "description": "Checks whether the specified point is within this object's bounds,\n where the point's x and y coordinates are defined to be relative to\n the coordinate system of the object."}, {"method_name": "getLocationOnScreen", "method_sig": "public Point getLocationOnScreen()", "description": "Returns the location of the object on the screen."}, {"method_name": "getLocation", "method_sig": "public Point getLocation()", "description": "Gets the location of the object relative to the parent in the form\n of a point specifying the object's top-left corner in the screen's\n coordinate space."}, {"method_name": "setLocation", "method_sig": "public void setLocation (Point p)", "description": "Sets the location of the object relative to the parent."}, {"method_name": "getBounds", "method_sig": "public Rectangle getBounds()", "description": "Gets the bounds of this object in the form of a\n Rectangle object.\n The bounds specify this object's width, height, and location\n relative to its parent."}, {"method_name": "setBounds", "method_sig": "public void setBounds (Rectangle r)", "description": "Sets the bounds of this object in the form of a\n Rectangle object.\n The bounds specify this object's width, height, and location\n relative to its parent."}, {"method_name": "getSize", "method_sig": "public Dimension getSize()", "description": "Returns the size of this object in the form of a\n Dimension object. The height field of\n the Dimension object contains this object's\n height, and the width field of the Dimension\n object contains this object's width."}, {"method_name": "setSize", "method_sig": "public void setSize (Dimension d)", "description": "Resizes this object."}, {"method_name": "getAccessibleAt", "method_sig": "public Accessible getAccessibleAt (Point p)", "description": "Returns the Accessible child, if one exists,\n contained at the local coordinate Point.\n If there is no Accessible child, null\n is returned."}, {"method_name": "isFocusTraversable", "method_sig": "public boolean isFocusTraversable()", "description": "Returns whether this object can accept focus or not."}, {"method_name": "requestFocus", "method_sig": "public void requestFocus()", "description": "Requests focus for this object."}, {"method_name": "addFocusListener", "method_sig": "public void addFocusListener (FocusListener l)", "description": "Adds the specified focus listener to receive focus events from this\n component."}, {"method_name": "removeFocusListener", "method_sig": "public void removeFocusListener (FocusListener l)", "description": "Removes the specified focus listener so it no longer receives focus\n events from this component."}, {"method_name": "getAccessibleSelectionCount", "method_sig": "public int getAccessibleSelectionCount()", "description": "Returns the number of Accessible children currently selected.\n If no children are selected, the return value will be 0."}, {"method_name": "getAccessibleSelection", "method_sig": "public Accessible getAccessibleSelection (int i)", "description": "Returns an Accessible representing the specified\n selected child in the object.  If there isn't a selection, or there are\n fewer children selected than the integer passed in, the return\n value will be null.\n Note that the index represents the i-th selected child, which\n is different from the i-th child."}, {"method_name": "isAccessibleChildSelected", "method_sig": "public boolean isAccessibleChildSelected (int i)", "description": "Determines if the current child of this object is selected."}, {"method_name": "addAccessibleSelection", "method_sig": "public void addAccessibleSelection (int i)", "description": "Adds the specified Accessible child of the object\n to the object's selection.  If the object supports multiple selections,\n the specified child is added to any existing selection, otherwise\n it replaces any existing selection in the object.  If the\n specified child is already selected, this method has no effect."}, {"method_name": "removeAccessibleSelection", "method_sig": "public void removeAccessibleSelection (int i)", "description": "Removes the specified child of the object from the object's\n selection.  If the specified item isn't currently selected, this\n method has no effect."}, {"method_name": "clearAccessibleSelection", "method_sig": "public void clearAccessibleSelection()", "description": "Clears the selection in the object, so that no children in the\n object are selected."}, {"method_name": "selectAllAccessibleSelection", "method_sig": "public void selectAllAccessibleSelection()", "description": "Causes every child of the object to be selected\n if the object supports multiple selections."}]}