{"name": "Interface CDATASection", "module": "java.xml", "package": "org.w3c.dom", "text": "CDATA sections are used to escape blocks of text containing characters that\n would otherwise be regarded as markup. The only delimiter that is\n recognized in a CDATA section is the \"]]>\" string that ends the CDATA\n section. CDATA sections cannot be nested. Their primary purpose is for\n including material such as XML fragments, without needing to escape all\n the delimiters.\n The CharacterData.data attribute holds the text that is\n contained by the CDATA section. Note that this may contain characters that need to be escaped outside of CDATA sections and\n that, depending on the character encoding (\"charset\") chosen for\n serialization, it may be impossible to write out some characters as part\n of a CDATA section.\n The CDATASection interface inherits from the\n CharacterData interface through the Text\n interface. Adjacent CDATASection nodes are not merged by use\n of the normalize method of the Node interface.\n  No lexical check is done on the content of a CDATA section and it is\n therefore possible to have the character sequence \"]]>\"\n in the content, which is illegal in a CDATA section per section 2.7 of [XML 1.0]. The\n presence of this character sequence must generate a fatal error during\n serialization or the cdata section must be splitted before the\n serialization (see also the parameter \"split-cdata-sections\"\n in the DOMConfiguration interface).\n Note: Because no markup is recognized within a\n CDATASection, character numeric references cannot be used as\n an escape mechanism when serializing. Therefore, action needs to be taken\n when serializing a CDATASection with a character encoding\n where some of the contained characters cannot be represented. Failure to\n do so would not produce well-formed XML.\n Note: One potential solution in the serialization process is to\n end the CDATA section before the character, output the character using a\n character reference or entity reference, and open a new CDATA section for\n any further characters in the text node. Note, however, that some code\n conversion libraries at the time of writing do not return an error or\n exception when a character is missing from the encoding, making the task\n of ensuring that data is not corrupted on serialization more difficult.\n See also the Document Object Model (DOM) Level 3 Core Specification.", "codes": ["public interface CDATASection\nextends Text"], "fields": [], "methods": []}