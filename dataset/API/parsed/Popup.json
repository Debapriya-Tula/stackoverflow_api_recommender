{"name": "Class Popup", "module": "java.desktop", "package": "javax.swing", "text": "Popups are used to display a Component to the user, typically\n on top of all the other Components in a particular containment\n hierarchy. Popups have a very small life cycle. Once you\n have obtained a Popup, and hidden it (invoked the\n hide method), you should no longer\n invoke any methods on it. This allows the PopupFactory to cache\n Popups for later use.\n \n The general contract is that if you need to change the size of the\n Component, or location of the Popup, you should\n obtain a new Popup.\n \nPopup does not descend from Component, rather\n implementations of Popup are responsible for creating\n and maintaining their own Components to render the\n requested Component to the user.\n \n You typically do not explicitly create an instance of Popup,\n instead obtain one from a PopupFactory.", "codes": ["public class Popup\nextends Object"], "fields": [], "methods": [{"method_name": "show", "method_sig": "public void show()", "description": "Makes the Popup visible. If the Popup is\n currently visible, this has no effect."}, {"method_name": "hide", "method_sig": "public void hide()", "description": "Hides and disposes of the Popup. Once a Popup\n has been disposed you should no longer invoke methods on it. A\n disposed Popup may be reclaimed and later used\n based on the PopupFactory. As such, if you invoke methods\n on a disposed Popup, indeterminate\n behavior will result."}]}