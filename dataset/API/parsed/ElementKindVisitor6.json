{"name": "Class ElementKindVisitor6<R,\u200bP>", "module": "java.compiler", "package": "javax.lang.model.util", "text": "A visitor of program elements based on their kind with default behavior appropriate for the RELEASE_6 source version.  For elements Xyz that may have more than one\n kind, the visitXyz methods in this class delegate\n to the visitXyzAsKind method corresponding to the\n first argument's kind.  The visitXyzAsKind methods\n call defaultAction, passing their arguments\n to defaultAction's corresponding parameters.\n\n  Methods in this class may be overridden subject to their\n general contract.  Note that annotating methods in concrete\n subclasses with @Override will help\n ensure that methods are overridden as intended.\n\n  WARNING: The ElementVisitor interface\n implemented by this class may have methods added to it or the\n ElementKind enum used in this case may have\n constants added to it in the future to accommodate new, currently\n unknown, language structures added to future versions of the\n Java\u2122 programming language.  Therefore, methods whose names\n begin with \"visit\" may be added to this class in the\n future; to avoid incompatibilities, classes which extend this class\n should not declare any instance methods with names beginning with\n \"visit\".\n\n When such a new visit method is added, the default\n implementation in this class will be to call the visitUnknown method.  A new abstract element kind\n visitor class will also be introduced to correspond to the new\n language level; this visitor will have different default behavior\n for the visit method in question.  When the new visitor is\n introduced, all or portions of this visitor may be deprecated.", "codes": ["@SupportedSourceVersion(RELEASE_6)\npublic class ElementKindVisitor6<R, P>\nextends SimpleElementVisitor6<R, P>"], "fields": [], "methods": [{"method_name": "visitPackage", "method_sig": "public R visitPackage (PackageElement e,\n                      P p)", "description": "Visits a package element.\n\n The element argument has kind PACKAGE."}, {"method_name": "visitType", "method_sig": "public R visitType (TypeElement e,\n                   P p)", "description": "Visits a type element."}, {"method_name": "visitTypeAsAnnotationType", "method_sig": "public R visitTypeAsAnnotationType (TypeElement e,\n                                   P p)", "description": "Visits an ANNOTATION_TYPE type element."}, {"method_name": "visitTypeAsClass", "method_sig": "public R visitTypeAsClass (TypeElement e,\n                          P p)", "description": "Visits a CLASS type element."}, {"method_name": "visitTypeAsEnum", "method_sig": "public R visitTypeAsEnum (TypeElement e,\n                         P p)", "description": "Visits an ENUM type element."}, {"method_name": "visitTypeAsInterface", "method_sig": "public R visitTypeAsInterface (TypeElement e,\n                              P p)", "description": "Visits an INTERFACE type element."}, {"method_name": "visitVariable", "method_sig": "public R visitVariable (VariableElement e,\n                       P p)", "description": "Visits a variable element"}, {"method_name": "visitVariableAsEnumConstant", "method_sig": "public R visitVariableAsEnumConstant (VariableElement e,\n                                     P p)", "description": "Visits an ENUM_CONSTANT variable element."}, {"method_name": "visitVariableAsExceptionParameter", "method_sig": "public R visitVariableAsExceptionParameter (VariableElement e,\n                                           P p)", "description": "Visits an EXCEPTION_PARAMETER variable element."}, {"method_name": "visitVariableAsField", "method_sig": "public R visitVariableAsField (VariableElement e,\n                              P p)", "description": "Visits a FIELD variable element."}, {"method_name": "visitVariableAsLocalVariable", "method_sig": "public R visitVariableAsLocalVariable (VariableElement e,\n                                      P p)", "description": "Visits a LOCAL_VARIABLE variable element."}, {"method_name": "visitVariableAsParameter", "method_sig": "public R visitVariableAsParameter (VariableElement e,\n                                  P p)", "description": "Visits a PARAMETER variable element."}, {"method_name": "visitVariableAsResourceVariable", "method_sig": "public R visitVariableAsResourceVariable (VariableElement e,\n                                         P p)", "description": "Visits a RESOURCE_VARIABLE variable element."}, {"method_name": "visitExecutable", "method_sig": "public R visitExecutable (ExecutableElement e,\n                         P p)", "description": "Visits an executable element."}, {"method_name": "visitExecutableAsConstructor", "method_sig": "public R visitExecutableAsConstructor (ExecutableElement e,\n                                      P p)", "description": "Visits a CONSTRUCTOR executable element."}, {"method_name": "visitExecutableAsInstanceInit", "method_sig": "public R visitExecutableAsInstanceInit (ExecutableElement e,\n                                       P p)", "description": "Visits an INSTANCE_INIT executable element."}, {"method_name": "visitExecutableAsMethod", "method_sig": "public R visitExecutableAsMethod (ExecutableElement e,\n                                 P p)", "description": "Visits a METHOD executable element."}, {"method_name": "visitExecutableAsStaticInit", "method_sig": "public R visitExecutableAsStaticInit (ExecutableElement e,\n                                     P p)", "description": "Visits a STATIC_INIT executable element."}, {"method_name": "visitTypeParameter", "method_sig": "public R visitTypeParameter (TypeParameterElement e,\n                            P p)", "description": "Visits a type parameter element.\n\n The element argument has kind TYPE_PARAMETER."}]}