{"name": "Class TransferHandler.TransferSupport", "module": "java.desktop", "package": "javax.swing", "text": "This class encapsulates all relevant details of a clipboard\n or drag and drop transfer, and also allows for customizing\n aspects of the drag and drop experience.\n \n The main purpose of this class is to provide the information\n needed by a developer to determine the suitability of a\n transfer or to import the data contained within. But it also\n doubles as a controller for customizing properties during drag\n and drop, such as whether or not to show the drop location,\n and which drop action to use.\n \n Developers typically need not create instances of this\n class. Instead, they are something provided by the DnD\n implementation to certain methods in TransferHandler.", "codes": ["public static final class TransferHandler.TransferSupport\nextends Object"], "fields": [], "methods": [{"method_name": "isDrop", "method_sig": "public boolean isDrop()", "description": "Returns whether or not this TransferSupport\n represents a drop operation."}, {"method_name": "getComponent", "method_sig": "public Component getComponent()", "description": "Returns the target component of this transfer."}, {"method_name": "getDropLocation", "method_sig": "public TransferHandler.DropLocation getDropLocation()", "description": "Returns the current (non-null) drop location for the component,\n when this TransferSupport represents a drop.\n \n Note: For components with built-in drop support, this location\n will be a subclass of DropLocation of the same type\n returned by that component's getDropLocation method.\n \n This method is only for use with drag and drop transfers.\n Calling it when isDrop() is false results\n in an IllegalStateException."}, {"method_name": "setShowDropLocation", "method_sig": "public void setShowDropLocation (boolean showDropLocation)", "description": "Sets whether or not the drop location should be visually indicated\n for the transfer - which must represent a drop. This is applicable to\n those components that automatically\n show the drop location when appropriate during a drag and drop\n operation). By default, the drop location is shown only when the\n TransferHandler has said it can accept the import represented\n by this TransferSupport. With this method you can force the\n drop location to always be shown, or always not be shown.\n \n This method is only for use with drag and drop transfers.\n Calling it when isDrop() is false results\n in an IllegalStateException."}, {"method_name": "setDropAction", "method_sig": "public void setDropAction (int dropAction)", "description": "Sets the drop action for the transfer - which must represent a drop\n - to the given action,\n instead of the default user drop action. The action must be\n supported by the source's drop actions, and must be one\n of COPY, MOVE or LINK.\n \n This method is only for use with drag and drop transfers.\n Calling it when isDrop() is false results\n in an IllegalStateException."}, {"method_name": "getDropAction", "method_sig": "public int getDropAction()", "description": "Returns the action chosen for the drop, when this\n TransferSupport represents a drop.\n \n Unless explicitly chosen by way of setDropAction,\n this returns the user drop action provided by\n getUserDropAction.\n \n You may wish to query this in TransferHandler's\n importData method to customize processing based\n on the action.\n \n This method is only for use with drag and drop transfers.\n Calling it when isDrop() is false results\n in an IllegalStateException."}, {"method_name": "getUserDropAction", "method_sig": "public int getUserDropAction()", "description": "Returns the user drop action for the drop, when this\n TransferSupport represents a drop.\n \n The user drop action is chosen for a drop as described in the\n documentation for DropTargetDragEvent and\n DropTargetDropEvent. A different action\n may be chosen as the drop action by way of the setDropAction\n method.\n \n You may wish to query this in TransferHandler's\n canImport method when determining the suitability of a\n drop or when deciding on a drop action to explicitly choose.\n \n This method is only for use with drag and drop transfers.\n Calling it when isDrop() is false results\n in an IllegalStateException."}, {"method_name": "getSourceDropActions", "method_sig": "public int getSourceDropActions()", "description": "Returns the drag source's supported drop actions, when this\n TransferSupport represents a drop.\n \n The source actions represent the set of actions supported by the\n source of this transfer, and are represented as some bitwise-OR\n combination of COPY, MOVE and LINK.\n You may wish to query this in TransferHandler's\n canImport method when determining the suitability of a drop\n or when deciding on a drop action to explicitly choose. To determine\n if a particular action is supported by the source, bitwise-AND\n the action with the source drop actions, and then compare the result\n against the original action. For example:\n \n boolean copySupported = (COPY & getSourceDropActions()) == COPY;\n \n\n This method is only for use with drag and drop transfers.\n Calling it when isDrop() is false results\n in an IllegalStateException."}, {"method_name": "getDataFlavors", "method_sig": "public DataFlavor[] getDataFlavors()", "description": "Returns the data flavors for this transfer."}, {"method_name": "isDataFlavorSupported", "method_sig": "public boolean isDataFlavorSupported (DataFlavor df)", "description": "Returns whether or not the given data flavor is supported."}, {"method_name": "getTransferable", "method_sig": "public Transferable getTransferable()", "description": "Returns the Transferable associated with this transfer.\n \n Note: Unless it is necessary to fetch the Transferable\n directly, use one of the other methods on this class to inquire about\n the transfer. This may perform better than fetching the\n Transferable and asking it directly."}]}