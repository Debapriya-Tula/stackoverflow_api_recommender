{"name": "Class SystemTray", "module": "java.desktop", "package": "java.awt", "text": "The SystemTray class represents the system tray for a\n desktop.  On Microsoft Windows it is referred to as the \"Taskbar\n Status Area\", on Gnome it is referred to as the \"Notification\n Area\", on KDE it is referred to as the \"System Tray\".  The system\n tray is shared by all applications running on the desktop.\n\n  On some platforms the system tray may not be present or may not\n be supported, in this case getSystemTray()\n throws UnsupportedOperationException.  To detect whether the\n system tray is supported, use isSupported().\n\n The SystemTray may contain one or more TrayIcons, which are added to the tray using the add(java.awt.TrayIcon) method, and removed when no longer needed, using the\n remove(java.awt.TrayIcon).  TrayIcon consists of an\n image, a popup menu and a set of associated listeners.  Please see\n the TrayIcon class for details.\n\n Every Java application has a single SystemTray\n instance that allows the app to interface with the system tray of\n the desktop while the app is running.  The SystemTray\n instance can be obtained from the getSystemTray() method.\n An application may not create its own instance of\n SystemTray.\n\n The following code snippet demonstrates how to access\n and customize the system tray:\n \n \n     TrayIcon trayIcon = null;\n     if (SystemTray.isSupported()) {\n         // get the SystemTray instance\n         SystemTray tray = SystemTray.getSystemTray();\n         // load an image\n         Image image = Toolkit.getDefaultToolkit().getImage(...);\n         // create a action listener to listen for default action executed on the tray icon\n         ActionListener listener = new ActionListener() {\n             public void actionPerformed(ActionEvent e) {\n                 // execute default action of the application\n                 // ...\n             }\n         };\n         // create a popup menu\n         PopupMenu popup = new PopupMenu();\n         // create menu item for the default action\n         MenuItem defaultItem = new MenuItem(...);\n         defaultItem.addActionListener(listener);\n         popup.add(defaultItem);\n         /// ... add other items\n         // construct a TrayIcon\n         trayIcon = new TrayIcon(image, \"Tray Demo\", popup);\n         // set the TrayIcon properties\n         trayIcon.addActionListener(listener);\n         // ...\n         // add the tray image\n         try {\n             tray.add(trayIcon);\n         } catch (AWTException e) {\n             System.err.println(e);\n         }\n         // ...\n     } else {\n         // disable tray option in your application or\n         // perform other actions\n         ...\n     }\n     // ...\n     // some time later\n     // the application state has changed - update the image\n     if (trayIcon != null) {\n         trayIcon.setImage(updatedImage);\n     }\n     // ...\n \n ", "codes": ["public class SystemTray\nextends Object"], "fields": [], "methods": [{"method_name": "getSystemTray", "method_sig": "public static SystemTray getSystemTray()", "description": "Gets the SystemTray instance that represents the\n desktop's tray area.  This always returns the same instance per\n application.  On some platforms the system tray may not be\n supported.  You may use the isSupported() method to\n check if the system tray is supported.\n\n If a SecurityManager is installed, the AWTPermission\n accessSystemTray must be granted in order to get the\n SystemTray instance. Otherwise this method will throw a\n SecurityException."}, {"method_name": "isSupported", "method_sig": "public static boolean isSupported()", "description": "Returns whether the system tray is supported on the current\n platform.  In addition to displaying the tray icon, minimal\n system tray support includes either a popup menu (see TrayIcon.setPopupMenu(PopupMenu)) or an action event (see\n TrayIcon.addActionListener(ActionListener)).\n\n Developers should not assume that all of the system tray\n functionality is supported.  To guarantee that the tray icon's\n default action is always accessible, add the default action to\n both the action listener and the popup menu.  See the example for an example of how to do this.\n\n Note: When implementing SystemTray and\n TrayIcon it is strongly recommended that\n you assign different gestures to the popup menu and an action\n event.  Overloading a gesture for both purposes is confusing\n and may prevent the user from accessing one or the other."}, {"method_name": "add", "method_sig": "public void add (TrayIcon trayIcon)\n         throws AWTException", "description": "Adds a TrayIcon to the SystemTray.\n The tray icon becomes visible in the system tray once it is\n added.  The order in which icons are displayed in a tray is not\n specified - it is platform and implementation-dependent.\n\n  All icons added by the application are automatically\n removed from the SystemTray upon application exit\n and also when the desktop system tray becomes unavailable."}, {"method_name": "remove", "method_sig": "public void remove (TrayIcon trayIcon)", "description": "Removes the specified TrayIcon from the\n SystemTray.\n\n  All icons added by the application are automatically\n removed from the SystemTray upon application exit\n and also when the desktop system tray becomes unavailable.\n\n  If trayIcon is null or was not\n added to the system tray, no exception is thrown and no action\n is performed."}, {"method_name": "getTrayIcons", "method_sig": "public TrayIcon[] getTrayIcons()", "description": "Returns an array of all icons added to the tray by this\n application.  You can't access the icons added by another\n application.  Some browsers partition applets in different\n code bases into separate contexts, and establish walls between\n these contexts.  In such a scenario, only the tray icons added\n from this context will be returned.\n\n  The returned array is a copy of the actual array and may be\n modified in any way without affecting the system tray.  To\n remove a TrayIcon from the\n SystemTray, use the remove(TrayIcon) method."}, {"method_name": "getTrayIconSize", "method_sig": "public Dimension getTrayIconSize()", "description": "Returns the size, in pixels, of the space that a tray icon will\n occupy in the system tray.  Developers may use this methods to\n acquire the preferred size for the image property of a tray icon\n before it is created.  For convenience, there is a similar\n method TrayIcon.getSize() in the TrayIcon class."}, {"method_name": "addPropertyChangeListener", "method_sig": "public void addPropertyChangeListener (String propertyName,\n                                      PropertyChangeListener listener)", "description": "Adds a PropertyChangeListener to the list of listeners for the\n specific property. The following properties are currently supported:\n\n \nSystemTray properties\n\n\nProperty\n     Description\n \n\n\ntrayIcons\nThe SystemTray's array of TrayIcon objects. The\n     array is accessed via the getTrayIcons() method. This property\n     is changed when a tray icon is added to (or removed from) the system\n     tray. For example, this property is changed when the system tray\n     becomes unavailable on the desktop and the tray icons are\n     automatically removed.\n   \nsystemTray\nThis property contains SystemTray instance when the\n     system tray is available or null otherwise. This property is\n     changed when the system tray becomes available or unavailable on the\n     desktop. The property is accessed by the getSystemTray()\n     method.\n \n\n\n The listener listens to property changes only in this context.\n \n If listener is null, no exception is thrown\n and no action is performed."}, {"method_name": "removePropertyChangeListener", "method_sig": "public void removePropertyChangeListener (String propertyName,\n                                         PropertyChangeListener listener)", "description": "Removes a PropertyChangeListener from the listener list\n for a specific property.\n \n The PropertyChangeListener must be from this context.\n \n If propertyName or listener is null or invalid,\n no exception is thrown and no action is taken."}, {"method_name": "getPropertyChangeListeners", "method_sig": "public PropertyChangeListener[] getPropertyChangeListeners (String propertyName)", "description": "Returns an array of all the listeners that have been associated\n with the named property.\n \n Only the listeners in this context are returned."}]}