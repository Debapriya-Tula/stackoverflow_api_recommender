{"name": "Class ComponentSampleModel", "module": "java.desktop", "package": "java.awt.image", "text": "This class represents image data which is stored such that each sample\n  of a pixel occupies one data element of the DataBuffer.  It stores the\n  N samples which make up a pixel in N separate data array elements.\n  Different bands may be in different banks of the DataBuffer.\n  Accessor methods are provided so that image data can be manipulated\n  directly. This class can support different kinds of interleaving, e.g.\n  band interleaving, scanline interleaving, and pixel interleaving.\n  Pixel stride is the number of data array elements between two samples\n  for the same band on the same scanline. Scanline stride is the number\n  of data array elements between a given sample and the corresponding sample\n  in the same column of the next scanline.  Band offsets denote the number\n  of data array elements from the first data array element of the bank\n  of the DataBuffer holding each band to the first sample of the band.\n  The bands are numbered from 0 to N-1.  This class can represent image\n  data for which each sample is an unsigned integral number which can be\n  stored in 8, 16, or 32 bits (using DataBuffer.TYPE_BYTE,\n  DataBuffer.TYPE_USHORT, or DataBuffer.TYPE_INT,\n  respectively), data for which each sample is a signed integral number\n  which can be stored in 16 bits (using DataBuffer.TYPE_SHORT),\n  or data for which each sample is a signed float or double quantity\n  (using DataBuffer.TYPE_FLOAT or\n  DataBuffer.TYPE_DOUBLE, respectively).\n  All samples of a given ComponentSampleModel\n  are stored with the same precision.  All strides and offsets must be\n  non-negative.  This class supports\n  TYPE_BYTE,\n  TYPE_USHORT,\n  TYPE_SHORT,\n  TYPE_INT,\n  TYPE_FLOAT,\n  TYPE_DOUBLE,", "codes": ["public class ComponentSampleModel\nextends SampleModel"], "fields": [{"field_name": "bandOffsets", "field_sig": "protected\u00a0int[] bandOffsets", "description": "Offsets for all bands in data array elements."}, {"field_name": "bankIndices", "field_sig": "protected\u00a0int[] bankIndices", "description": "Index for each bank storing a band of image data."}, {"field_name": "numBands", "field_sig": "protected\u00a0int numBands", "description": "The number of bands in this\n ComponentSampleModel."}, {"field_name": "numBanks", "field_sig": "protected\u00a0int numBanks", "description": "The number of banks in this\n ComponentSampleModel."}, {"field_name": "scanlineStride", "field_sig": "protected\u00a0int scanlineStride", "description": "Line stride (in data array elements) of the region of image\n  data described by this ComponentSampleModel."}, {"field_name": "pixelStride", "field_sig": "protected\u00a0int pixelStride", "description": "Pixel stride (in data array elements) of the region of image\n  data described by this ComponentSampleModel."}], "methods": [{"method_name": "createCompatibleSampleModel", "method_sig": "public SampleModel createCompatibleSampleModel (int w,\n                                               int h)", "description": "Creates a new ComponentSampleModel with the specified\n width and height.  The new SampleModel will have the same\n number of bands, storage data type, interleaving scheme, and\n pixel stride as this SampleModel."}, {"method_name": "createSubsetSampleModel", "method_sig": "public SampleModel createSubsetSampleModel (int[] bands)", "description": "Creates a new ComponentSampleModel with a subset of the bands\n of this ComponentSampleModel.  The new ComponentSampleModel can be\n used with any DataBuffer that the existing ComponentSampleModel\n can be used with.  The new ComponentSampleModel/DataBuffer\n combination will represent an image with a subset of the bands\n of the original ComponentSampleModel/DataBuffer combination."}, {"method_name": "createDataBuffer", "method_sig": "public DataBuffer createDataBuffer()", "description": "Creates a DataBuffer that corresponds to this\n ComponentSampleModel.\n The DataBuffer object's data type, number of banks,\n and size are be consistent with this ComponentSampleModel."}, {"method_name": "getOffset", "method_sig": "public int getOffset (int x,\n                     int y)", "description": "Gets the offset for the first band of pixel (x,y).\n  A sample of the first band can be retrieved from a\n DataBuffer\ndata with a ComponentSampleModel\ncsm as\n \n        data.getElem(csm.getOffset(x, y));\n "}, {"method_name": "getOffset", "method_sig": "public int getOffset (int x,\n                     int y,\n                     int b)", "description": "Gets the offset for band b of pixel (x,y).\n  A sample of band b can be retrieved from a\n  DataBuffer data\n  with a ComponentSampleModel csm as\n \n       data.getElem(csm.getOffset(x, y, b));\n "}, {"method_name": "getSampleSize", "method_sig": "public final int[] getSampleSize()", "description": "Returns the number of bits per sample for all bands."}, {"method_name": "getSampleSize", "method_sig": "public final int getSampleSize (int band)", "description": "Returns the number of bits per sample for the specified band."}, {"method_name": "getBankIndices", "method_sig": "public final int[] getBankIndices()", "description": "Returns the bank indices for all bands."}, {"method_name": "getBandOffsets", "method_sig": "public final int[] getBandOffsets()", "description": "Returns the band offset for all bands."}, {"method_name": "getScanlineStride", "method_sig": "public final int getScanlineStride()", "description": "Returns the scanline stride of this ComponentSampleModel."}, {"method_name": "getPixelStride", "method_sig": "public final int getPixelStride()", "description": "Returns the pixel stride of this ComponentSampleModel."}, {"method_name": "getNumDataElements", "method_sig": "public final int getNumDataElements()", "description": "Returns the number of data elements needed to transfer a pixel\n with the\n getDataElements(int, int, Object, DataBuffer) and\n setDataElements(int, int, Object, DataBuffer)\n methods.\n For a ComponentSampleModel, this is identical to the\n number of bands."}, {"method_name": "getDataElements", "method_sig": "public Object getDataElements (int x,\n                              int y,\n                              Object obj,\n                              DataBuffer data)", "description": "Returns data for a single pixel in a primitive array of type\n TransferType.  For a ComponentSampleModel,\n this is the same as the data type, and samples are returned\n one per array element.  Generally, obj should\n be passed in as null, so that the Object\n is created automatically and is the right primitive data type.\n \n The following code illustrates transferring data for one pixel from\n DataBuffer db1, whose storage layout is\n described by ComponentSampleModel csm1,\n to DataBuffer db2, whose storage layout\n is described by ComponentSampleModel csm2.\n The transfer is usually more efficient than using\n getPixel and setPixel.\n \n       ComponentSampleModel csm1, csm2;\n       DataBufferInt db1, db2;\n       csm2.setDataElements(x, y,\n                            csm1.getDataElements(x, y, null, db1), db2);\n \n\n Using getDataElements and setDataElements\n to transfer between two DataBuffer/SampleModel\n pairs is legitimate if the SampleModel objects have\n the same number of bands, corresponding bands have the same number of\n bits per sample, and the TransferTypes are the same.\n \n If obj is not null, it should be a\n primitive array of type TransferType.\n Otherwise, a ClassCastException is thrown.  An\n ArrayIndexOutOfBoundsException might be thrown if the\n coordinates are not in bounds, or if obj is not\n null and is not large enough to hold\n the pixel data."}, {"method_name": "getPixel", "method_sig": "public int[] getPixel (int x,\n                      int y,\n                      int[] iArray,\n                      DataBuffer data)", "description": "Returns all samples for the specified pixel in an int array,\n one sample per array element.\n An ArrayIndexOutOfBoundsException might be thrown if\n the coordinates are not in bounds."}, {"method_name": "getPixels", "method_sig": "public int[] getPixels (int x,\n                       int y,\n                       int w,\n                       int h,\n                       int[] iArray,\n                       DataBuffer data)", "description": "Returns all samples for the specified rectangle of pixels in\n an int array, one sample per array element.\n An ArrayIndexOutOfBoundsException might be thrown if\n the coordinates are not in bounds."}, {"method_name": "getSample", "method_sig": "public int getSample (int x,\n                     int y,\n                     int b,\n                     DataBuffer data)", "description": "Returns as int the sample in a specified band for the pixel\n located at (x,y).\n An ArrayIndexOutOfBoundsException might be thrown if\n the coordinates are not in bounds."}, {"method_name": "getSampleFloat", "method_sig": "public float getSampleFloat (int x,\n                            int y,\n                            int b,\n                            DataBuffer data)", "description": "Returns the sample in a specified band\n for the pixel located at (x,y) as a float.\n An ArrayIndexOutOfBoundsException might be\n thrown if the coordinates are not in bounds."}, {"method_name": "getSampleDouble", "method_sig": "public double getSampleDouble (int x,\n                              int y,\n                              int b,\n                              DataBuffer data)", "description": "Returns the sample in a specified band\n for a pixel located at (x,y) as a double.\n An ArrayIndexOutOfBoundsException might be\n thrown if the coordinates are not in bounds."}, {"method_name": "getSamples", "method_sig": "public int[] getSamples (int x,\n                        int y,\n                        int w,\n                        int h,\n                        int b,\n                        int[] iArray,\n                        DataBuffer data)", "description": "Returns the samples in a specified band for the specified rectangle\n of pixels in an int array, one sample per data array element.\n An ArrayIndexOutOfBoundsException might be thrown if\n the coordinates are not in bounds."}, {"method_name": "setDataElements", "method_sig": "public void setDataElements (int x,\n                            int y,\n                            Object obj,\n                            DataBuffer data)", "description": "Sets the data for a single pixel in the specified\n DataBuffer from a primitive array of type\n TransferType.  For a ComponentSampleModel,\n this is the same as the data type, and samples are transferred\n one per array element.\n \n The following code illustrates transferring data for one pixel from\n DataBuffer db1, whose storage layout is\n described by ComponentSampleModel csm1,\n to DataBuffer db2, whose storage layout\n is described by ComponentSampleModel csm2.\n The transfer is usually more efficient than using\n getPixel and setPixel.\n \n       ComponentSampleModel csm1, csm2;\n       DataBufferInt db1, db2;\n       csm2.setDataElements(x, y, csm1.getDataElements(x, y, null, db1),\n                            db2);\n \n Using getDataElements and setDataElements\n to transfer between two DataBuffer/SampleModel pairs\n is legitimate if the SampleModel objects have\n the same number of bands, corresponding bands have the same number of\n bits per sample, and the TransferTypes are the same.\n \n A ClassCastException is thrown if obj is not\n a primitive array of type TransferType.\n An ArrayIndexOutOfBoundsException might be thrown if\n the coordinates are not in bounds, or if obj is not large\n enough to hold the pixel data."}, {"method_name": "setPixel", "method_sig": "public void setPixel (int x,\n                     int y,\n                     int[] iArray,\n                     DataBuffer data)", "description": "Sets a pixel in the DataBuffer using an int array of\n samples for input.  An ArrayIndexOutOfBoundsException\n might be thrown if the coordinates are\n not in bounds."}, {"method_name": "setPixels", "method_sig": "public void setPixels (int x,\n                      int y,\n                      int w,\n                      int h,\n                      int[] iArray,\n                      DataBuffer data)", "description": "Sets all samples for a rectangle of pixels from an int array containing\n one sample per array element.\n An ArrayIndexOutOfBoundsException might be thrown if the\n coordinates are not in bounds."}, {"method_name": "setSample", "method_sig": "public void setSample (int x,\n                      int y,\n                      int b,\n                      int s,\n                      DataBuffer data)", "description": "Sets a sample in the specified band for the pixel located at (x,y)\n in the DataBuffer using an int for input.\n An ArrayIndexOutOfBoundsException might be thrown if the\n coordinates are not in bounds."}, {"method_name": "setSample", "method_sig": "public void setSample (int x,\n                      int y,\n                      int b,\n                      float s,\n                      DataBuffer data)", "description": "Sets a sample in the specified band for the pixel located at (x,y)\n in the DataBuffer using a float for input.\n An ArrayIndexOutOfBoundsException might be thrown if\n the coordinates are not in bounds."}, {"method_name": "setSample", "method_sig": "public void setSample (int x,\n                      int y,\n                      int b,\n                      double s,\n                      DataBuffer data)", "description": "Sets a sample in the specified band for the pixel located at (x,y)\n in the DataBuffer using a double for input.\n An ArrayIndexOutOfBoundsException might be thrown if\n the coordinates are not in bounds."}, {"method_name": "setSamples", "method_sig": "public void setSamples (int x,\n                       int y,\n                       int w,\n                       int h,\n                       int b,\n                       int[] iArray,\n                       DataBuffer data)", "description": "Sets the samples in the specified band for the specified rectangle\n of pixels from an int array containing one sample per data array element.\n An ArrayIndexOutOfBoundsException might be thrown if the\n coordinates are not in bounds."}]}