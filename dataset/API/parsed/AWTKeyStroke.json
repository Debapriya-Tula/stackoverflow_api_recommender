{"name": "Class AWTKeyStroke", "module": "java.desktop", "package": "java.awt", "text": "An AWTKeyStroke represents a key action on the\n keyboard, or equivalent input device. AWTKeyStrokes\n can correspond to only a press or release of a\n particular key, just as KEY_PRESSED and\n KEY_RELEASED KeyEvents do;\n alternately, they can correspond to typing a specific Java character, just\n as KEY_TYPED KeyEvents do.\n In all cases, AWTKeyStrokes can specify modifiers\n (alt, shift, control, meta, altGraph, or a combination thereof) which must be present\n during the action for an exact match.\n \nAWTKeyStrokes are immutable, and are intended\n to be unique. Client code should never create an\n AWTKeyStroke on its own, but should instead use\n a variant of getAWTKeyStroke. Client use of these factory\n methods allows the AWTKeyStroke implementation\n to cache and share instances efficiently.", "codes": ["public class AWTKeyStroke\nextends Object\nimplements Serializable"], "fields": [], "methods": [{"method_name": "registerSubclass", "method_sig": "@Deprecated\nprotected static void registerSubclass (Class<?> subclass)", "description": "The method has no effect and is only left present to avoid introducing\n a binary incompatibility."}, {"method_name": "getAWTKeyStroke", "method_sig": "public static AWTKeyStroke getAWTKeyStroke (char keyChar)", "description": "Returns a shared instance of an AWTKeyStroke\n that represents a KEY_TYPED event for the\n specified character."}, {"method_name": "getAWTKeyStroke", "method_sig": "public static AWTKeyStroke getAWTKeyStroke (Character keyChar,\n                                           int modifiers)", "description": "Returns a shared instance of an AWTKeyStroke\n that represents a KEY_TYPED event for the\n specified Character object and a set of modifiers. Note\n that the first parameter is of type Character rather than\n char. This is to avoid inadvertent clashes with\n calls to getAWTKeyStroke(int keyCode, int modifiers).\n\n The modifiers consist of any combination of following:\njava.awt.event.InputEvent.SHIFT_DOWN_MASK\n java.awt.event.InputEvent.CTRL_DOWN_MASK\n java.awt.event.InputEvent.META_DOWN_MASK\n java.awt.event.InputEvent.ALT_DOWN_MASK\n java.awt.event.InputEvent.ALT_GRAPH_DOWN_MASK\n \n The old modifiers listed below also can be used, but they are\n mapped to _DOWN_ modifiers. \njava.awt.event.InputEvent.SHIFT_MASK\n java.awt.event.InputEvent.CTRL_MASK\n java.awt.event.InputEvent.META_MASK\n java.awt.event.InputEvent.ALT_MASK\n java.awt.event.InputEvent.ALT_GRAPH_MASK\n \n also can be used, but they are mapped to _DOWN_ modifiers.\n\n Since these numbers are all different powers of two, any combination of\n them is an integer in which each bit represents a different modifier\n key. Use 0 to specify no modifiers."}, {"method_name": "getAWTKeyStroke", "method_sig": "public static AWTKeyStroke getAWTKeyStroke (int keyCode,\n                                           int modifiers,\n                                           boolean onKeyRelease)", "description": "Returns a shared instance of an AWTKeyStroke,\n given a numeric key code and a set of modifiers, specifying\n whether the key is activated when it is pressed or released.\n \n The \"virtual key\" constants defined in\n java.awt.event.KeyEvent can be\n used to specify the key code. For example:\njava.awt.event.KeyEvent.VK_ENTER\njava.awt.event.KeyEvent.VK_TAB\njava.awt.event.KeyEvent.VK_SPACE\n\n Alternatively, the key code may be obtained by calling\n java.awt.event.KeyEvent.getExtendedKeyCodeForChar.\n\n The modifiers consist of any combination of:\njava.awt.event.InputEvent.SHIFT_DOWN_MASK\n java.awt.event.InputEvent.CTRL_DOWN_MASK\n java.awt.event.InputEvent.META_DOWN_MASK\n java.awt.event.InputEvent.ALT_DOWN_MASK\n java.awt.event.InputEvent.ALT_GRAPH_DOWN_MASK\n \n The old modifiers \njava.awt.event.InputEvent.SHIFT_MASK\n java.awt.event.InputEvent.CTRL_MASK\n java.awt.event.InputEvent.META_MASK\n java.awt.event.InputEvent.ALT_MASK\n java.awt.event.InputEvent.ALT_GRAPH_MASK\n \n also can be used, but they are mapped to _DOWN_ modifiers.\n\n Since these numbers are all different powers of two, any combination of\n them is an integer in which each bit represents a different modifier\n key. Use 0 to specify no modifiers."}, {"method_name": "getAWTKeyStroke", "method_sig": "public static AWTKeyStroke getAWTKeyStroke (int keyCode,\n                                           int modifiers)", "description": "Returns a shared instance of an AWTKeyStroke,\n given a numeric key code and a set of modifiers. The returned\n AWTKeyStroke will correspond to a key press.\n \n The \"virtual key\" constants defined in\n java.awt.event.KeyEvent can be\n used to specify the key code. For example:\njava.awt.event.KeyEvent.VK_ENTER\njava.awt.event.KeyEvent.VK_TAB\njava.awt.event.KeyEvent.VK_SPACE\n\n The modifiers consist of any combination of:\njava.awt.event.InputEvent.SHIFT_DOWN_MASK\n java.awt.event.InputEvent.CTRL_DOWN_MASK\n java.awt.event.InputEvent.META_DOWN_MASK\n java.awt.event.InputEvent.ALT_DOWN_MASK\n java.awt.event.InputEvent.ALT_GRAPH_DOWN_MASK\n \n The old modifiers \njava.awt.event.InputEvent.SHIFT_MASK\n java.awt.event.InputEvent.CTRL_MASK\n java.awt.event.InputEvent.META_MASK\n java.awt.event.InputEvent.ALT_MASK\n java.awt.event.InputEvent.ALT_GRAPH_MASK\n \n also can be used, but they are mapped to _DOWN_ modifiers.\n\n Since these numbers are all different powers of two, any combination of\n them is an integer in which each bit represents a different modifier\n key. Use 0 to specify no modifiers."}, {"method_name": "getAWTKeyStrokeForEvent", "method_sig": "public static AWTKeyStroke getAWTKeyStrokeForEvent (KeyEvent anEvent)", "description": "Returns an AWTKeyStroke which represents the\n stroke which generated a given KeyEvent.\n \n This method obtains the keyChar from a KeyTyped\n event, and the keyCode from a KeyPressed or\n KeyReleased event. The KeyEvent modifiers are\n obtained for all three types of KeyEvent."}, {"method_name": "getAWTKeyStroke", "method_sig": "public static AWTKeyStroke getAWTKeyStroke (String s)", "description": "Parses a string and returns an AWTKeyStroke.\n The string must have the following syntax:\n \n    <modifiers>* (<typedID> | <pressedReleasedID>)\n\n    modifiers := shift | control | ctrl | meta | alt | altGraph\n    typedID := typed <typedKey>\n    typedKey := string of length 1 giving Unicode character.\n    pressedReleasedID := (pressed | released) key\n    key := KeyEvent key code name, i.e. the name following \"VK_\".\n \n If typed, pressed or released is not specified, pressed is assumed. Here\n are some examples:\n \n     \"INSERT\" => getAWTKeyStroke(KeyEvent.VK_INSERT, 0);\n     \"control DELETE\" => getAWTKeyStroke(KeyEvent.VK_DELETE, InputEvent.CTRL_MASK);\n     \"alt shift X\" => getAWTKeyStroke(KeyEvent.VK_X, InputEvent.ALT_MASK | InputEvent.SHIFT_MASK);\n     \"alt shift released X\" => getAWTKeyStroke(KeyEvent.VK_X, InputEvent.ALT_MASK | InputEvent.SHIFT_MASK, true);\n     \"typed a\" => getAWTKeyStroke('a');\n "}, {"method_name": "getKeyChar", "method_sig": "public final char getKeyChar()", "description": "Returns the character for this AWTKeyStroke."}, {"method_name": "getKeyCode", "method_sig": "public final int getKeyCode()", "description": "Returns the numeric key code for this AWTKeyStroke."}, {"method_name": "getModifiers", "method_sig": "public final int getModifiers()", "description": "Returns the modifier keys for this AWTKeyStroke."}, {"method_name": "isOnKeyRelease", "method_sig": "public final boolean isOnKeyRelease()", "description": "Returns whether this AWTKeyStroke represents a key release."}, {"method_name": "getKeyEventType", "method_sig": "public final int getKeyEventType()", "description": "Returns the type of KeyEvent which corresponds to\n this AWTKeyStroke."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Returns a numeric value for this object that is likely to be unique,\n making it a good choice as the index value in a hash table."}, {"method_name": "equals", "method_sig": "public final boolean equals (Object anObject)", "description": "Returns true if this object is identical to the specified object."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a string that displays and identifies this object's properties.\n The String returned by this method can be passed\n as a parameter to getAWTKeyStroke(String) to produce\n a key stroke equal to this key stroke."}, {"method_name": "readResolve", "method_sig": "protected Object readResolve()\n                      throws ObjectStreamException", "description": "Returns a cached instance of AWTKeyStroke (or a subclass of\n AWTKeyStroke) which is equal to this instance."}]}