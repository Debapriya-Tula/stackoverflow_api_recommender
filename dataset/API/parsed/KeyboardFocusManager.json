{"name": "Class KeyboardFocusManager", "module": "java.desktop", "package": "java.awt", "text": "The KeyboardFocusManager is responsible for managing the active and focused\n Windows, and the current focus owner. The focus owner is defined as the\n Component in an application that will typically receive all KeyEvents\n generated by the user. The focused Window is the Window that is, or\n contains, the focus owner. Only a Frame or a Dialog can be the active\n Window. The native windowing system may denote the active Window or its\n children with special decorations, such as a highlighted title bar. The\n active Window is always either the focused Window, or the first Frame or\n Dialog that is an owner of the focused Window.\n \n The KeyboardFocusManager is both a centralized location for client code to\n query for the focus owner and initiate focus changes, and an event\n dispatcher for all FocusEvents, WindowEvents related to focus, and\n KeyEvents.\n \n Some browsers partition applets in different code bases into separate\n contexts, and establish walls between these contexts. In such a scenario,\n there will be one KeyboardFocusManager per context. Other browsers place all\n applets into the same context, implying that there will be only a single,\n global KeyboardFocusManager for all applets. This behavior is\n implementation-dependent. Consult your browser's documentation for more\n information. No matter how many contexts there may be, however, there can\n never be more than one focus owner, focused Window, or active Window, per\n ClassLoader.\n \n Please see\n \n How to Use the Focus Subsystem,\n a section in The Java Tutorial, and the\n Focus Specification\n for more information.", "codes": ["public abstract class KeyboardFocusManager\nextends Object\nimplements KeyEventDispatcher, KeyEventPostProcessor"], "fields": [{"field_name": "FORWARD_TRAVERSAL_KEYS", "field_sig": "public static final\u00a0int FORWARD_TRAVERSAL_KEYS", "description": "The identifier for the Forward focus traversal keys."}, {"field_name": "BACKWARD_TRAVERSAL_KEYS", "field_sig": "public static final\u00a0int BACKWARD_TRAVERSAL_KEYS", "description": "The identifier for the Backward focus traversal keys."}, {"field_name": "UP_CYCLE_TRAVERSAL_KEYS", "field_sig": "public static final\u00a0int UP_CYCLE_TRAVERSAL_KEYS", "description": "The identifier for the Up Cycle focus traversal keys."}, {"field_name": "DOWN_CYCLE_TRAVERSAL_KEYS", "field_sig": "public static final\u00a0int DOWN_CYCLE_TRAVERSAL_KEYS", "description": "The identifier for the Down Cycle focus traversal keys."}], "methods": [{"method_name": "getCurrentKeyboardFocusManager", "method_sig": "public static KeyboardFocusManager getCurrentKeyboardFocusManager()", "description": "Returns the current KeyboardFocusManager instance for the calling\n thread's context."}, {"method_name": "setCurrentKeyboardFocusManager", "method_sig": "public static void setCurrentKeyboardFocusManager (KeyboardFocusManager newManager)\n                                           throws SecurityException", "description": "Sets the current KeyboardFocusManager instance for the calling thread's\n context. If null is specified, then the current KeyboardFocusManager\n is replaced with a new instance of DefaultKeyboardFocusManager.\n \n If a SecurityManager is installed, the calling thread must be granted\n the AWTPermission \"replaceKeyboardFocusManager\" in order to replace the\n the current KeyboardFocusManager. If this permission is not granted,\n this method will throw a SecurityException, and the current\n KeyboardFocusManager will be unchanged."}, {"method_name": "getFocusOwner", "method_sig": "public Component getFocusOwner()", "description": "Returns the focus owner, if the focus owner is in the same context as\n the calling thread. The focus owner is defined as the Component in an\n application that will typically receive all KeyEvents generated by the\n user. KeyEvents which map to the focus owner's focus traversal keys will\n not be delivered if focus traversal keys are enabled for the focus\n owner. In addition, KeyEventDispatchers may retarget or consume\n KeyEvents before they reach the focus owner."}, {"method_name": "getGlobalFocusOwner", "method_sig": "protected Component getGlobalFocusOwner()\n                                 throws SecurityException", "description": "Returns the focus owner, even if the calling thread is in a different\n context than the focus owner. The focus owner is defined as the\n Component in an application that will typically receive all KeyEvents\n generated by the user. KeyEvents which map to the focus owner's focus\n traversal keys will not be delivered if focus traversal keys are enabled\n for the focus owner. In addition, KeyEventDispatchers may retarget or\n consume KeyEvents before they reach the focus owner.\n \n This method will throw a SecurityException if this KeyboardFocusManager\n is not the current KeyboardFocusManager for the calling thread's\n context."}, {"method_name": "setGlobalFocusOwner", "method_sig": "protected void setGlobalFocusOwner (Component focusOwner)\n                            throws SecurityException", "description": "Sets the focus owner. The operation will be cancelled if the Component\n is not focusable. The focus owner is defined as the Component in an\n application that will typically receive all KeyEvents generated by the\n user. KeyEvents which map to the focus owner's focus traversal keys will\n not be delivered if focus traversal keys are enabled for the focus\n owner. In addition, KeyEventDispatchers may retarget or consume\n KeyEvents before they reach the focus owner.\n \n This method does not actually set the focus to the specified Component.\n It merely stores the value to be subsequently returned by\n getFocusOwner(). Use Component.requestFocus()\n or Component.requestFocusInWindow() to change the focus\n owner, subject to platform limitations."}, {"method_name": "clearFocusOwner", "method_sig": "public void clearFocusOwner()", "description": "Clears the focus owner at both the Java and native levels if the\n focus owner exists and resides in the same context as the calling thread,\n otherwise the method returns silently.\n \n The focus owner component will receive a permanent FOCUS_LOST event.\n After this operation completes, the native windowing system will discard\n all user-generated KeyEvents until the user selects a new Component to\n receive focus, or a Component is given focus explicitly via a call to\n requestFocus(). This operation does not change the focused or\n active Windows."}, {"method_name": "clearGlobalFocusOwner", "method_sig": "public void clearGlobalFocusOwner()\n                           throws SecurityException", "description": "Clears the global focus owner at both the Java and native levels. If\n there exists a focus owner, that Component will receive a permanent\n FOCUS_LOST event. After this operation completes, the native windowing\n system will discard all user-generated KeyEvents until the user selects\n a new Component to receive focus, or a Component is given focus\n explicitly via a call to requestFocus(). This operation\n does not change the focused or active Windows.\n \n If a SecurityManager is installed, the calling thread must be granted\n the \"replaceKeyboardFocusManager\" AWTPermission. If this permission is\n not granted, this method will throw a SecurityException, and the current\n focus owner will not be cleared.\n \n This method is intended to be used only by KeyboardFocusManager set as\n current KeyboardFocusManager for the calling thread's context. It is not\n for general client use."}, {"method_name": "getPermanentFocusOwner", "method_sig": "public Component getPermanentFocusOwner()", "description": "Returns the permanent focus owner, if the permanent focus owner is in\n the same context as the calling thread. The permanent focus owner is\n defined as the last Component in an application to receive a permanent\n FOCUS_GAINED event. The focus owner and permanent focus owner are\n equivalent unless a temporary focus change is currently in effect. In\n such a situation, the permanent focus owner will again be the focus\n owner when the temporary focus change ends."}, {"method_name": "getGlobalPermanentFocusOwner", "method_sig": "protected Component getGlobalPermanentFocusOwner()\n                                          throws SecurityException", "description": "Returns the permanent focus owner, even if the calling thread is in a\n different context than the permanent focus owner. The permanent focus\n owner is defined as the last Component in an application to receive a\n permanent FOCUS_GAINED event. The focus owner and permanent focus owner\n are equivalent unless a temporary focus change is currently in effect.\n In such a situation, the permanent focus owner will again be the focus\n owner when the temporary focus change ends."}, {"method_name": "setGlobalPermanentFocusOwner", "method_sig": "protected void setGlobalPermanentFocusOwner (Component permanentFocusOwner)\n                                     throws SecurityException", "description": "Sets the permanent focus owner. The operation will be cancelled if the\n Component is not focusable. The permanent focus owner is defined as the\n last Component in an application to receive a permanent FOCUS_GAINED\n event. The focus owner and permanent focus owner are equivalent unless\n a temporary focus change is currently in effect. In such a situation,\n the permanent focus owner will again be the focus owner when the\n temporary focus change ends.\n \n This method does not actually set the focus to the specified Component.\n It merely stores the value to be subsequently returned by\n getPermanentFocusOwner(). Use\n Component.requestFocus() or\n Component.requestFocusInWindow() to change the focus owner,\n subject to platform limitations."}, {"method_name": "getFocusedWindow", "method_sig": "public Window getFocusedWindow()", "description": "Returns the focused Window, if the focused Window is in the same context\n as the calling thread. The focused Window is the Window that is or\n contains the focus owner."}, {"method_name": "getGlobalFocusedWindow", "method_sig": "protected Window getGlobalFocusedWindow()\n                                 throws SecurityException", "description": "Returns the focused Window, even if the calling thread is in a different\n context than the focused Window. The focused Window is the Window that\n is or contains the focus owner."}, {"method_name": "setGlobalFocusedWindow", "method_sig": "protected void setGlobalFocusedWindow (Window focusedWindow)\n                               throws SecurityException", "description": "Sets the focused Window. The focused Window is the Window that is or\n contains the focus owner. The operation will be cancelled if the\n specified Window to focus is not a focusable Window.\n \n This method does not actually change the focused Window as far as the\n native windowing system is concerned. It merely stores the value to be\n subsequently returned by getFocusedWindow(). Use\n Component.requestFocus() or\n Component.requestFocusInWindow() to change the focused\n Window, subject to platform limitations."}, {"method_name": "getActiveWindow", "method_sig": "public Window getActiveWindow()", "description": "Returns the active Window, if the active Window is in the same context\n as the calling thread. Only a Frame or a Dialog can be the active\n Window. The native windowing system may denote the active Window or its\n children with special decorations, such as a highlighted title bar.\n The active Window is always either the focused Window, or the first\n Frame or Dialog that is an owner of the focused Window."}, {"method_name": "getGlobalActiveWindow", "method_sig": "protected Window getGlobalActiveWindow()\n                                throws SecurityException", "description": "Returns the active Window, even if the calling thread is in a different\n context than the active Window. Only a Frame or a Dialog can be the\n active Window. The native windowing system may denote the active Window\n or its children with special decorations, such as a highlighted title\n bar. The active Window is always either the focused Window, or the first\n Frame or Dialog that is an owner of the focused Window."}, {"method_name": "setGlobalActiveWindow", "method_sig": "protected void setGlobalActiveWindow (Window activeWindow)\n                              throws SecurityException", "description": "Sets the active Window. Only a Frame or a Dialog can be the active\n Window. The native windowing system may denote the active Window or its\n children with special decorations, such as a highlighted title bar. The\n active Window is always either the focused Window, or the first Frame or\n Dialog that is an owner of the focused Window.\n \n This method does not actually change the active Window as far as the\n native windowing system is concerned. It merely stores the value to be\n subsequently returned by getActiveWindow(). Use\n Component.requestFocus() or\n Component.requestFocusInWindow() to change the active\n Window, subject to platform limitations."}, {"method_name": "getDefaultFocusTraversalPolicy", "method_sig": "public FocusTraversalPolicy getDefaultFocusTraversalPolicy()", "description": "Returns the default FocusTraversalPolicy. Top-level components\n use this value on their creation to initialize their own focus traversal\n policy by explicit call to Container.setFocusTraversalPolicy."}, {"method_name": "setDefaultFocusTraversalPolicy", "method_sig": "public void setDefaultFocusTraversalPolicy (FocusTraversalPolicy defaultPolicy)", "description": "Sets the default FocusTraversalPolicy. Top-level components\n use this value on their creation to initialize their own focus traversal\n policy by explicit call to Container.setFocusTraversalPolicy.\n Note: this call doesn't affect already created components as they have\n their policy initialized. Only new components will use this policy as\n their default policy."}, {"method_name": "setDefaultFocusTraversalKeys", "method_sig": "public void setDefaultFocusTraversalKeys (int id,\n                                         Set<? extends AWTKeyStroke> keystrokes)", "description": "Sets the default focus traversal keys for a given traversal operation.\n This traversal key Set will be in effect on all\n Windows that have no such Set of\n their own explicitly defined. This Set will also be\n inherited, recursively, by any child Component of\n those Windows that has\n no such Set of its own explicitly defined.\n \n The default values for the default focus traversal keys are\n implementation-dependent. Sun recommends that all implementations for a\n particular native platform use the same default values. The\n recommendations for Windows and Unix are listed below. These\n recommendations are used in the Sun AWT implementations.\n\n \nRecommended default values for focus traversal keys\n\n\nIdentifier\n     Meaning\n     Default\n \n\n\nKeyboardFocusManager.FORWARD_TRAVERSAL_KEYS\nNormal forward keyboard traversal\n     TAB on KEY_PRESSED, CTRL-TAB on\n     KEY_PRESSED\n\nKeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS\nNormal reverse keyboard traversal\n     SHIFT-TAB on KEY_PRESSED, CTRL-SHIFT-TAB\n     on KEY_PRESSED\n\nKeyboardFocusManager.UP_CYCLE_TRAVERSAL_KEYS\nGo up one focus traversal cycle\n     none\n   \nKeyboardFocusManager.DOWN_CYCLE_TRAVERSAL_KEYS\nGo down one focus traversal cycle\n     none\n \n\n\n To disable a traversal key, use an empty Set;\n Collections.EMPTY_SET is recommended.\n \n Using the AWTKeyStroke API, client code can\n specify on which of two\n specific KeyEvents, KEY_PRESSED or\n KEY_RELEASED, the focus traversal operation will\n occur. Regardless of which KeyEvent is specified,\n however, all KeyEvents related to the focus\n traversal key, including the associated KEY_TYPED\n event, will be consumed, and will not be dispatched\n to any Component. It is a runtime error to\n specify a KEY_TYPED event as\n mapping to a focus traversal operation, or to map the same event to\n multiple default focus traversal operations.\n \n This method may throw a ClassCastException if any Object\n in keystrokes is not an AWTKeyStroke."}, {"method_name": "getDefaultFocusTraversalKeys", "method_sig": "public Set<AWTKeyStroke> getDefaultFocusTraversalKeys (int id)", "description": "Returns a Set of default focus traversal keys for a given traversal\n operation. This traversal key Set will be in effect on all Windows that\n have no such Set of their own explicitly defined. This Set will also be\n inherited, recursively, by any child Component of those Windows that has\n no such Set of its own explicitly defined. (See\n setDefaultFocusTraversalKeys for a full description of each\n operation.)"}, {"method_name": "getCurrentFocusCycleRoot", "method_sig": "public Container getCurrentFocusCycleRoot()", "description": "Returns the current focus cycle root, if the current focus cycle root is\n in the same context as the calling thread. If the focus owner is itself\n a focus cycle root, then it may be ambiguous as to which Components\n represent the next and previous Components to focus during normal focus\n traversal. In that case, the current focus cycle root is used to\n differentiate among the possibilities.\n \n This method is intended to be used only by KeyboardFocusManagers and\n focus implementations. It is not for general client use."}, {"method_name": "getGlobalCurrentFocusCycleRoot", "method_sig": "protected Container getGlobalCurrentFocusCycleRoot()\n                                            throws SecurityException", "description": "Returns the current focus cycle root, even if the calling thread is in a\n different context than the current focus cycle root. If the focus owner\n is itself a focus cycle root, then it may be ambiguous as to which\n Components represent the next and previous Components to focus during\n normal focus traversal. In that case, the current focus cycle root is\n used to differentiate among the possibilities."}, {"method_name": "setGlobalCurrentFocusCycleRoot", "method_sig": "public void setGlobalCurrentFocusCycleRoot (Container newFocusCycleRoot)\n                                    throws SecurityException", "description": "Sets the current focus cycle root. If the focus owner is itself a focus\n cycle root, then it may be ambiguous as to which Components represent\n the next and previous Components to focus during normal focus traversal.\n In that case, the current focus cycle root is used to differentiate\n among the possibilities.\n \n If a SecurityManager is installed, the calling thread must be granted\n the \"replaceKeyboardFocusManager\" AWTPermission. If this permission is\n not granted, this method will throw a SecurityException, and the current\n focus cycle root will not be changed.\n \n This method is intended to be used only by KeyboardFocusManagers and\n focus implementations. It is not for general client use."}, {"method_name": "addPropertyChangeListener", "method_sig": "public void addPropertyChangeListener (PropertyChangeListener listener)", "description": "Adds a PropertyChangeListener to the listener list. The listener is\n registered for all bound properties of this class, including the\n following:\n \nwhether the KeyboardFocusManager is currently managing focus\n        for this application or applet's browser context\n        (\"managingFocus\")\nthe focus owner (\"focusOwner\")\nthe permanent focus owner (\"permanentFocusOwner\")\nthe focused Window (\"focusedWindow\")\nthe active Window (\"activeWindow\")\nthe default focus traversal policy\n        (\"defaultFocusTraversalPolicy\")\nthe Set of default FORWARD_TRAVERSAL_KEYS\n        (\"forwardDefaultFocusTraversalKeys\")\nthe Set of default BACKWARD_TRAVERSAL_KEYS\n        (\"backwardDefaultFocusTraversalKeys\")\nthe Set of default UP_CYCLE_TRAVERSAL_KEYS\n        (\"upCycleDefaultFocusTraversalKeys\")\nthe Set of default DOWN_CYCLE_TRAVERSAL_KEYS\n        (\"downCycleDefaultFocusTraversalKeys\")\nthe current focus cycle root (\"currentFocusCycleRoot\")\n\n If listener is null, no exception is thrown and no action is performed."}, {"method_name": "removePropertyChangeListener", "method_sig": "public void removePropertyChangeListener (PropertyChangeListener listener)", "description": "Removes a PropertyChangeListener from the listener list. This method\n should be used to remove the PropertyChangeListeners that were\n registered for all bound properties of this class.\n \n If listener is null, no exception is thrown and no action is performed."}, {"method_name": "getPropertyChangeListeners", "method_sig": "public PropertyChangeListener[] getPropertyChangeListeners()", "description": "Returns an array of all the property change listeners\n registered on this keyboard focus manager."}, {"method_name": "addPropertyChangeListener", "method_sig": "public void addPropertyChangeListener (String propertyName,\n                                      PropertyChangeListener listener)", "description": "Adds a PropertyChangeListener to the listener list for a specific\n property. The specified property may be user-defined, or one of the\n following:\n \nwhether the KeyboardFocusManager is currently managing focus\n        for this application or applet's browser context\n        (\"managingFocus\")\nthe focus owner (\"focusOwner\")\nthe permanent focus owner (\"permanentFocusOwner\")\nthe focused Window (\"focusedWindow\")\nthe active Window (\"activeWindow\")\nthe default focus traversal policy\n        (\"defaultFocusTraversalPolicy\")\nthe Set of default FORWARD_TRAVERSAL_KEYS\n        (\"forwardDefaultFocusTraversalKeys\")\nthe Set of default BACKWARD_TRAVERSAL_KEYS\n        (\"backwardDefaultFocusTraversalKeys\")\nthe Set of default UP_CYCLE_TRAVERSAL_KEYS\n        (\"upCycleDefaultFocusTraversalKeys\")\nthe Set of default DOWN_CYCLE_TRAVERSAL_KEYS\n        (\"downCycleDefaultFocusTraversalKeys\")\nthe current focus cycle root (\"currentFocusCycleRoot\")\n\n If listener is null, no exception is thrown and no action is performed."}, {"method_name": "removePropertyChangeListener", "method_sig": "public void removePropertyChangeListener (String propertyName,\n                                         PropertyChangeListener listener)", "description": "Removes a PropertyChangeListener from the listener list for a specific\n property. This method should be used to remove PropertyChangeListeners\n that were registered for a specific bound property.\n \n If listener is null, no exception is thrown and no action is performed."}, {"method_name": "getPropertyChangeListeners", "method_sig": "public PropertyChangeListener[] getPropertyChangeListeners (String propertyName)", "description": "Returns an array of all the PropertyChangeListeners\n associated with the named property."}, {"method_name": "firePropertyChange", "method_sig": "protected void firePropertyChange (String propertyName,\n                                  Object oldValue,\n                                  Object newValue)", "description": "Fires a PropertyChangeEvent in response to a change in a bound property.\n The event will be delivered to all registered PropertyChangeListeners.\n No event will be delivered if oldValue and newValue are the same."}, {"method_name": "addVetoableChangeListener", "method_sig": "public void addVetoableChangeListener (VetoableChangeListener listener)", "description": "Adds a VetoableChangeListener to the listener list. The listener is\n registered for all vetoable properties of this class, including the\n following:\n \nthe focus owner (\"focusOwner\")\nthe permanent focus owner (\"permanentFocusOwner\")\nthe focused Window (\"focusedWindow\")\nthe active Window (\"activeWindow\")\n\n If listener is null, no exception is thrown and no action is performed."}, {"method_name": "removeVetoableChangeListener", "method_sig": "public void removeVetoableChangeListener (VetoableChangeListener listener)", "description": "Removes a VetoableChangeListener from the listener list. This method\n should be used to remove the VetoableChangeListeners that were\n registered for all vetoable properties of this class.\n \n If listener is null, no exception is thrown and no action is performed."}, {"method_name": "getVetoableChangeListeners", "method_sig": "public VetoableChangeListener[] getVetoableChangeListeners()", "description": "Returns an array of all the vetoable change listeners\n registered on this keyboard focus manager."}, {"method_name": "addVetoableChangeListener", "method_sig": "public void addVetoableChangeListener (String propertyName,\n                                      VetoableChangeListener listener)", "description": "Adds a VetoableChangeListener to the listener list for a specific\n property. The specified property may be user-defined, or one of the\n following:\n \nthe focus owner (\"focusOwner\")\nthe permanent focus owner (\"permanentFocusOwner\")\nthe focused Window (\"focusedWindow\")\nthe active Window (\"activeWindow\")\n\n If listener is null, no exception is thrown and no action is performed."}, {"method_name": "removeVetoableChangeListener", "method_sig": "public void removeVetoableChangeListener (String propertyName,\n                                         VetoableChangeListener listener)", "description": "Removes a VetoableChangeListener from the listener list for a specific\n property. This method should be used to remove VetoableChangeListeners\n that were registered for a specific bound property.\n \n If listener is null, no exception is thrown and no action is performed."}, {"method_name": "getVetoableChangeListeners", "method_sig": "public VetoableChangeListener[] getVetoableChangeListeners (String propertyName)", "description": "Returns an array of all the VetoableChangeListeners\n associated with the named property."}, {"method_name": "fireVetoableChange", "method_sig": "protected void fireVetoableChange (String propertyName,\n                                  Object oldValue,\n                                  Object newValue)\n                           throws PropertyVetoException", "description": "Fires a PropertyChangeEvent in response to a change in a vetoable\n property. The event will be delivered to all registered\n VetoableChangeListeners. If a VetoableChangeListener throws a\n PropertyVetoException, a new event is fired reverting all\n VetoableChangeListeners to the old value and the exception is then\n rethrown. No event will be delivered if oldValue and newValue are the\n same."}, {"method_name": "addKeyEventDispatcher", "method_sig": "public void addKeyEventDispatcher (KeyEventDispatcher dispatcher)", "description": "Adds a KeyEventDispatcher to this KeyboardFocusManager's dispatcher\n chain. This KeyboardFocusManager will request that each\n KeyEventDispatcher dispatch KeyEvents generated by the user before\n finally dispatching the KeyEvent itself. KeyEventDispatchers will be\n notified in the order in which they were added. Notifications will halt\n as soon as one KeyEventDispatcher returns true from its\n dispatchKeyEvent method. There is no limit to the total\n number of KeyEventDispatchers which can be added, nor to the number of\n times which a particular KeyEventDispatcher instance can be added.\n \n If a null dispatcher is specified, no action is taken and no exception\n is thrown.\n \n In a multithreaded application, KeyEventDispatcher behaves\n the same as other AWT listeners.  See\n AWT Threading Issues for more details."}, {"method_name": "removeKeyEventDispatcher", "method_sig": "public void removeKeyEventDispatcher (KeyEventDispatcher dispatcher)", "description": "Removes a KeyEventDispatcher which was previously added to this\n KeyboardFocusManager's dispatcher chain. This KeyboardFocusManager\n cannot itself be removed, unless it was explicitly re-registered via a\n call to addKeyEventDispatcher.\n \n If a null dispatcher is specified, if the specified dispatcher is not\n in the dispatcher chain, or if this KeyboardFocusManager is specified\n without having been explicitly re-registered, no action is taken and no\n exception is thrown.\n \n In a multithreaded application, KeyEventDispatcher behaves\n the same as other AWT listeners.  See\n AWT Threading Issues for more details."}, {"method_name": "getKeyEventDispatchers", "method_sig": "protected List<KeyEventDispatcher> getKeyEventDispatchers()", "description": "Returns this KeyboardFocusManager's KeyEventDispatcher chain as a List.\n The List will not include this KeyboardFocusManager unless it was\n explicitly re-registered via a call to\n addKeyEventDispatcher. If no other KeyEventDispatchers are\n registered, implementations are free to return null or a List of length\n 0. Client code should not assume one behavior over another, nor should\n it assume that the behavior, once established, will not change."}, {"method_name": "addKeyEventPostProcessor", "method_sig": "public void addKeyEventPostProcessor (KeyEventPostProcessor processor)", "description": "Adds a KeyEventPostProcessor to this KeyboardFocusManager's post-\n processor chain. After a KeyEvent has been dispatched to and handled by\n its target, KeyboardFocusManager will request that each\n KeyEventPostProcessor perform any necessary post-processing as part\n of the KeyEvent's final resolution. KeyEventPostProcessors\n will be notified in the order in which they were added; the current\n KeyboardFocusManager will be notified last. Notifications will halt\n as soon as one KeyEventPostProcessor returns true from its\n postProcessKeyEvent method. There is no limit to the\n total number of KeyEventPostProcessors that can be added, nor to the\n number of times that a particular KeyEventPostProcessor instance can be\n added.\n \n If a null post-processor is specified, no action is taken and no\n exception is thrown.\n \n In a multithreaded application, KeyEventPostProcessor behaves\n the same as other AWT listeners.  See\n AWT Threading Issues for more details."}, {"method_name": "removeKeyEventPostProcessor", "method_sig": "public void removeKeyEventPostProcessor (KeyEventPostProcessor processor)", "description": "Removes a previously added KeyEventPostProcessor from this\n KeyboardFocusManager's post-processor chain. This KeyboardFocusManager\n cannot itself be entirely removed from the chain. Only additional\n references added via addKeyEventPostProcessor can be\n removed.\n \n If a null post-processor is specified, if the specified post-processor\n is not in the post-processor chain, or if this KeyboardFocusManager is\n specified without having been explicitly added, no action is taken and\n no exception is thrown.\n \n In a multithreaded application, KeyEventPostProcessor behaves\n the same as other AWT listeners.  See\n AWT Threading Issues for more details."}, {"method_name": "getKeyEventPostProcessors", "method_sig": "protected List<KeyEventPostProcessor> getKeyEventPostProcessors()", "description": "Returns this KeyboardFocusManager's KeyEventPostProcessor chain as a\n List. The List will not include this KeyboardFocusManager unless it was\n explicitly added via a call to addKeyEventPostProcessor. If\n no KeyEventPostProcessors are registered, implementations are free to\n return null or a List of length 0. Client code should not assume one\n behavior over another, nor should it assume that the behavior, once\n established, will not change."}, {"method_name": "dispatchEvent", "method_sig": "public abstract boolean dispatchEvent (AWTEvent e)", "description": "This method is called by the AWT event dispatcher requesting that the\n current KeyboardFocusManager dispatch the specified event on its behalf.\n It is expected that all KeyboardFocusManagers will dispatch all\n FocusEvents, all WindowEvents related to focus, and all KeyEvents.\n These events should be dispatched based on the KeyboardFocusManager's\n notion of the focus owner and the focused and active Windows, sometimes\n overriding the source of the specified AWTEvent. Dispatching must be\n done using redispatchEvent to prevent the AWT event\n dispatcher from recursively requesting that the KeyboardFocusManager\n dispatch the event again. If this method returns false,\n then the AWT event dispatcher will attempt to dispatch the event itself."}, {"method_name": "redispatchEvent", "method_sig": "public final void redispatchEvent (Component target,\n                                  AWTEvent e)", "description": "Redispatches an AWTEvent in such a way that the AWT event dispatcher\n will not recursively request that the KeyboardFocusManager, or any\n installed KeyEventDispatchers, dispatch the event again. Client\n implementations of dispatchEvent and client-defined\n KeyEventDispatchers must call redispatchEvent(target, e)\n instead of target.dispatchEvent(e) to dispatch an event.\n \n This method is intended to be used only by KeyboardFocusManagers and\n KeyEventDispatchers. It is not for general client use."}, {"method_name": "dispatchKeyEvent", "method_sig": "public abstract boolean dispatchKeyEvent (KeyEvent e)", "description": "Typically this method will be called by dispatchEvent if no\n other KeyEventDispatcher in the dispatcher chain dispatched the\n KeyEvent, or if no other KeyEventDispatchers are registered. If an\n implementation of this method returns false,\n dispatchEvent may try to dispatch the KeyEvent itself, or\n may simply return false. If true is returned,\n dispatchEvent should return true as well."}, {"method_name": "postProcessKeyEvent", "method_sig": "public abstract boolean postProcessKeyEvent (KeyEvent e)", "description": "This method will be called by dispatchKeyEvent.\n By default, this method will handle any unconsumed KeyEvents that\n map to an AWT MenuShortcut by consuming the event\n and activating the shortcut."}, {"method_name": "processKeyEvent", "method_sig": "public abstract void processKeyEvent (Component focusedComponent,\n                                     KeyEvent e)", "description": "This method initiates a focus traversal operation if and only if the\n KeyEvent represents a focus traversal key for the specified\n focusedComponent. It is expected that focusedComponent is the current\n focus owner, although this need not be the case. If it is not,\n focus traversal will nevertheless proceed as if focusedComponent\n were the current focus owner."}, {"method_name": "enqueueKeyEvents", "method_sig": "protected abstract void enqueueKeyEvents (long after,\n                                         Component untilFocused)", "description": "Called by the AWT to notify the KeyboardFocusManager that it should\n delay dispatching of KeyEvents until the specified Component becomes\n the focus owner. If client code requests a focus change, and the AWT\n determines that this request might be granted by the native windowing\n system, then the AWT will call this method. It is the responsibility of\n the KeyboardFocusManager to delay dispatching of KeyEvents with\n timestamps later than the specified time stamp until the specified\n Component receives a FOCUS_GAINED event, or the AWT cancels the delay\n request by invoking dequeueKeyEvents or\n discardKeyEvents."}, {"method_name": "dequeueKeyEvents", "method_sig": "protected abstract void dequeueKeyEvents (long after,\n                                         Component untilFocused)", "description": "Called by the AWT to notify the KeyboardFocusManager that it should\n cancel delayed dispatching of KeyEvents. All KeyEvents which were\n enqueued because of a call to enqueueKeyEvents with the\n same timestamp and Component should be released for normal dispatching\n to the current focus owner. If the given timestamp is less than zero,\n the outstanding enqueue request for the given Component with the \n oldest timestamp (if any) should be cancelled."}, {"method_name": "discardKeyEvents", "method_sig": "protected abstract void discardKeyEvents (Component comp)", "description": "Called by the AWT to notify the KeyboardFocusManager that it should\n cancel delayed dispatching of KeyEvents. All KeyEvents which were\n enqueued because of one or more calls to enqueueKeyEvents\n with the same Component should be discarded."}, {"method_name": "focusNextComponent", "method_sig": "public abstract void focusNextComponent (Component aComponent)", "description": "Focuses the Component after aComponent, typically based on a\n FocusTraversalPolicy."}, {"method_name": "focusPreviousComponent", "method_sig": "public abstract void focusPreviousComponent (Component aComponent)", "description": "Focuses the Component before aComponent, typically based on a\n FocusTraversalPolicy."}, {"method_name": "upFocusCycle", "method_sig": "public abstract void upFocusCycle (Component aComponent)", "description": "Moves the focus up one focus traversal cycle. Typically, the focus owner\n is set to aComponent's focus cycle root, and the current focus cycle\n root is set to the new focus owner's focus cycle root. If, however,\n aComponent's focus cycle root is a Window, then typically the focus\n owner is set to the Window's default Component to focus, and the current\n focus cycle root is unchanged."}, {"method_name": "downFocusCycle", "method_sig": "public abstract void downFocusCycle (Container aContainer)", "description": "Moves the focus down one focus traversal cycle. Typically, if\n aContainer is a focus cycle root, then the focus owner is set to\n aContainer's default Component to focus, and the current focus cycle\n root is set to aContainer. If aContainer is not a focus cycle root, then\n no focus traversal operation occurs."}, {"method_name": "focusNextComponent", "method_sig": "public final void focusNextComponent()", "description": "Focuses the Component after the current focus owner."}, {"method_name": "focusPreviousComponent", "method_sig": "public final void focusPreviousComponent()", "description": "Focuses the Component before the current focus owner."}, {"method_name": "upFocusCycle", "method_sig": "public final void upFocusCycle()", "description": "Moves the focus up one focus traversal cycle from the current focus\n owner. Typically, the new focus owner is set to the current focus\n owner's focus cycle root, and the current focus cycle root is set to the\n new focus owner's focus cycle root. If, however, the current focus\n owner's focus cycle root is a Window, then typically the focus owner is\n set to the focus cycle root's default Component to focus, and the\n current focus cycle root is unchanged."}, {"method_name": "downFocusCycle", "method_sig": "public final void downFocusCycle()", "description": "Moves the focus down one focus traversal cycle from the current focus\n owner, if and only if the current focus owner is a Container that is a\n focus cycle root. Typically, the focus owner is set to the current focus\n owner's default Component to focus, and the current focus cycle root is\n set to the current focus owner. If the current focus owner is not a\n Container that is a focus cycle root, then no focus traversal operation\n occurs."}]}