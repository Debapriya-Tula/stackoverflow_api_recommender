{"name": "Class DropTargetDropEvent", "module": "java.desktop", "package": "java.awt.dnd", "text": "The DropTargetDropEvent is delivered\n via the DropTargetListener drop() method.\n \n The DropTargetDropEvent reports the source drop actions\n and the user drop action that reflect the current state of the\n drag-and-drop operation.\n \nSource drop actions is a bitwise mask of DnDConstants\n that represents the set of drop actions supported by the drag source for\n this drag-and-drop operation.\n \nUser drop action depends on the drop actions supported by the drag\n source and the drop action selected by the user. The user can select a drop\n action by pressing modifier keys during the drag operation:\n \n   Ctrl + Shift -> ACTION_LINK\n   Ctrl         -> ACTION_COPY\n   Shift        -> ACTION_MOVE\n \n If the user selects a drop action, the user drop action is one of\n DnDConstants that represents the selected drop action if this\n drop action is supported by the drag source or\n DnDConstants.ACTION_NONE if this drop action is not supported\n by the drag source.\n \n If the user doesn't select a drop action, the set of\n DnDConstants that represents the set of drop actions supported\n by the drag source is searched for DnDConstants.ACTION_MOVE,\n then for DnDConstants.ACTION_COPY, then for\n DnDConstants.ACTION_LINK and the user drop action is the\n first constant found. If no constant is found the user drop action\n is DnDConstants.ACTION_NONE.", "codes": ["public class DropTargetDropEvent\nextends DropTargetEvent"], "fields": [], "methods": [{"method_name": "getLocation", "method_sig": "public Point getLocation()", "description": "This method returns a Point\n indicating the Cursor's current\n location in the Component's coordinates."}, {"method_name": "getCurrentDataFlavors", "method_sig": "public DataFlavor[] getCurrentDataFlavors()", "description": "This method returns the current DataFlavors."}, {"method_name": "getCurrentDataFlavorsAsList", "method_sig": "public List<DataFlavor> getCurrentDataFlavorsAsList()", "description": "This method returns the currently available\n DataFlavors as a java.util.List."}, {"method_name": "isDataFlavorSupported", "method_sig": "public boolean isDataFlavorSupported (DataFlavor df)", "description": "This method returns a boolean indicating if the\n specified DataFlavor is available\n from the source."}, {"method_name": "getSourceActions", "method_sig": "public int getSourceActions()", "description": "This method returns the source drop actions."}, {"method_name": "getDropAction", "method_sig": "public int getDropAction()", "description": "This method returns the user drop action."}, {"method_name": "getTransferable", "method_sig": "public Transferable getTransferable()", "description": "This method returns the Transferable object\n associated with the drop."}, {"method_name": "acceptDrop", "method_sig": "public void acceptDrop (int dropAction)", "description": "accept the drop, using the specified action."}, {"method_name": "rejectDrop", "method_sig": "public void rejectDrop()", "description": "reject the Drop."}, {"method_name": "dropComplete", "method_sig": "public void dropComplete (boolean success)", "description": "This method notifies the DragSource\n that the drop transfer(s) are completed."}, {"method_name": "isLocalTransfer", "method_sig": "public boolean isLocalTransfer()", "description": "This method returns an int indicating if\n the source is in the same JVM as the target."}]}