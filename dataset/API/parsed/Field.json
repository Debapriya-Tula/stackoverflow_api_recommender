{"name": "Class Field", "module": "java.base", "package": "java.lang.reflect", "text": "A Field provides information about, and dynamic access to, a\n single field of a class or an interface.  The reflected field may\n be a class (static) field or an instance field.\n\n A Field permits widening conversions to occur during a get or\n set access operation, but throws an IllegalArgumentException if a\n narrowing conversion would occur.", "codes": ["public final class Field\nextends AccessibleObject\nimplements Member"], "fields": [], "methods": [{"method_name": "setAccessible", "method_sig": "public void setAccessible (boolean flag)", "description": "Description copied from class:\u00a0AccessibleObject"}, {"method_name": "getDeclaringClass", "method_sig": "public Class<?> getDeclaringClass()", "description": "Returns the Class object representing the class or interface\n that declares the field represented by this Field object."}, {"method_name": "getName", "method_sig": "public String getName()", "description": "Returns the name of the field represented by this Field object."}, {"method_name": "getModifiers", "method_sig": "public int getModifiers()", "description": "Returns the Java language modifiers for the field represented\n by this Field object, as an integer. The Modifier class should\n be used to decode the modifiers."}, {"method_name": "isEnumConstant", "method_sig": "public boolean isEnumConstant()", "description": "Returns true if this field represents an element of\n an enumerated type; returns false otherwise."}, {"method_name": "isSynthetic", "method_sig": "public boolean isSynthetic()", "description": "Returns true if this field is a synthetic\n field; returns false otherwise."}, {"method_name": "getType", "method_sig": "public Class<?> getType()", "description": "Returns a Class object that identifies the\n declared type for the field represented by this\n Field object."}, {"method_name": "getGenericType", "method_sig": "public Type getGenericType()", "description": "Returns a Type object that represents the declared type for\n the field represented by this Field object.\n\n If the Type is a parameterized type, the\n Type object returned must accurately reflect the\n actual type parameters used in the source code.\n\n If the type of the underlying field is a type variable or a\n parameterized type, it is created. Otherwise, it is resolved."}, {"method_name": "equals", "method_sig": "public boolean equals (Object obj)", "description": "Compares this Field against the specified object.  Returns\n true if the objects are the same.  Two Field objects are the same if\n they were declared by the same class and have the same name\n and type."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Returns a hashcode for this Field.  This is computed as the\n exclusive-or of the hashcodes for the underlying field's\n declaring class name and its name."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a string describing this Field.  The format is\n the access modifiers for the field, if any, followed\n by the field type, followed by a space, followed by\n the fully-qualified name of the class declaring the field,\n followed by a period, followed by the name of the field.\n For example:\n \n    public static final int java.lang.Thread.MIN_PRIORITY\n    private int java.io.FileDescriptor.fd\n \nThe modifiers are placed in canonical order as specified by\n \"The Java Language Specification\".  This is public,\n protected or private first, and then other\n modifiers in the following order: static, final,\n transient, volatile."}, {"method_name": "toGenericString", "method_sig": "public String toGenericString()", "description": "Returns a string describing this Field, including\n its generic type.  The format is the access modifiers for the\n field, if any, followed by the generic field type, followed by\n a space, followed by the fully-qualified name of the class\n declaring the field, followed by a period, followed by the name\n of the field.\n\n The modifiers are placed in canonical order as specified by\n \"The Java Language Specification\".  This is public,\n protected or private first, and then other\n modifiers in the following order: static, final,\n transient, volatile."}, {"method_name": "get", "method_sig": "public Object get (Object obj)\n           throws IllegalArgumentException,\n                  IllegalAccessException", "description": "Returns the value of the field represented by this Field, on\n the specified object. The value is automatically wrapped in an\n object if it has a primitive type.\n\n The underlying field's value is obtained as follows:\n\n If the underlying field is a static field, the obj argument\n is ignored; it may be null.\n\n Otherwise, the underlying field is an instance field.  If the\n specified obj argument is null, the method throws a\n NullPointerException. If the specified object is not an\n instance of the class or interface declaring the underlying\n field, the method throws an IllegalArgumentException.\n\n If this Field object is enforcing Java language access control, and\n the underlying field is inaccessible, the method throws an\n IllegalAccessException.\n If the underlying field is static, the class that declared the\n field is initialized if it has not already been initialized.\n\n Otherwise, the value is retrieved from the underlying instance\n or static field.  If the field has a primitive type, the value\n is wrapped in an object before being returned, otherwise it is\n returned as is.\n\n If the field is hidden in the type of obj,\n the field's value is obtained according to the preceding rules."}, {"method_name": "getBoolean", "method_sig": "public boolean getBoolean (Object obj)\n                   throws IllegalArgumentException,\n                          IllegalAccessException", "description": "Gets the value of a static or instance boolean field."}, {"method_name": "getByte", "method_sig": "public byte getByte (Object obj)\n             throws IllegalArgumentException,\n                    IllegalAccessException", "description": "Gets the value of a static or instance byte field."}, {"method_name": "getChar", "method_sig": "public char getChar (Object obj)\n             throws IllegalArgumentException,\n                    IllegalAccessException", "description": "Gets the value of a static or instance field of type\n char or of another primitive type convertible to\n type char via a widening conversion."}, {"method_name": "getShort", "method_sig": "public short getShort (Object obj)\n               throws IllegalArgumentException,\n                      IllegalAccessException", "description": "Gets the value of a static or instance field of type\n short or of another primitive type convertible to\n type short via a widening conversion."}, {"method_name": "getInt", "method_sig": "public int getInt (Object obj)\n           throws IllegalArgumentException,\n                  IllegalAccessException", "description": "Gets the value of a static or instance field of type\n int or of another primitive type convertible to\n type int via a widening conversion."}, {"method_name": "getLong", "method_sig": "public long getLong (Object obj)\n             throws IllegalArgumentException,\n                    IllegalAccessException", "description": "Gets the value of a static or instance field of type\n long or of another primitive type convertible to\n type long via a widening conversion."}, {"method_name": "getFloat", "method_sig": "public float getFloat (Object obj)\n               throws IllegalArgumentException,\n                      IllegalAccessException", "description": "Gets the value of a static or instance field of type\n float or of another primitive type convertible to\n type float via a widening conversion."}, {"method_name": "getDouble", "method_sig": "public double getDouble (Object obj)\n                 throws IllegalArgumentException,\n                        IllegalAccessException", "description": "Gets the value of a static or instance field of type\n double or of another primitive type convertible to\n type double via a widening conversion."}, {"method_name": "set", "method_sig": "public void set (Object obj,\n                Object value)\n         throws IllegalArgumentException,\n                IllegalAccessException", "description": "Sets the field represented by this Field object on the\n specified object argument to the specified new value. The new\n value is automatically unwrapped if the underlying field has a\n primitive type.\n\n The operation proceeds as follows:\n\n If the underlying field is static, the obj argument is\n ignored; it may be null.\n\n Otherwise the underlying field is an instance field.  If the\n specified object argument is null, the method throws a\n NullPointerException.  If the specified object argument is not\n an instance of the class or interface declaring the underlying\n field, the method throws an IllegalArgumentException.\n\n If this Field object is enforcing Java language access control, and\n the underlying field is inaccessible, the method throws an\n IllegalAccessException.\n\n If the underlying field is final, the method throws an\n IllegalAccessException unless setAccessible(true)\n has succeeded for this Field object\n and the field is non-static. Setting a final field in this way\n is meaningful only during deserialization or reconstruction of\n instances of classes with blank final fields, before they are\n made available for access by other parts of a program. Use in\n any other context may have unpredictable effects, including cases\n in which other parts of a program continue to use the original\n value of this field.\n\n If the underlying field is of a primitive type, an unwrapping\n conversion is attempted to convert the new value to a value of\n a primitive type.  If this attempt fails, the method throws an\n IllegalArgumentException.\n\n If, after possible unwrapping, the new value cannot be\n converted to the type of the underlying field by an identity or\n widening conversion, the method throws an\n IllegalArgumentException.\n\n If the underlying field is static, the class that declared the\n field is initialized if it has not already been initialized.\n\n The field is set to the possibly unwrapped and widened new value.\n\n If the field is hidden in the type of obj,\n the field's value is set according to the preceding rules."}, {"method_name": "setBoolean", "method_sig": "public void setBoolean (Object obj,\n                       boolean z)\n                throws IllegalArgumentException,\n                       IllegalAccessException", "description": "Sets the value of a field as a boolean on the specified object.\n This method is equivalent to\n set(obj, zObj),\n where zObj is a Boolean object and\n zObj.booleanValue() == z."}, {"method_name": "setByte", "method_sig": "public void setByte (Object obj,\n                    byte b)\n             throws IllegalArgumentException,\n                    IllegalAccessException", "description": "Sets the value of a field as a byte on the specified object.\n This method is equivalent to\n set(obj, bObj),\n where bObj is a Byte object and\n bObj.byteValue() == b."}, {"method_name": "setChar", "method_sig": "public void setChar (Object obj,\n                    char c)\n             throws IllegalArgumentException,\n                    IllegalAccessException", "description": "Sets the value of a field as a char on the specified object.\n This method is equivalent to\n set(obj, cObj),\n where cObj is a Character object and\n cObj.charValue() == c."}, {"method_name": "setShort", "method_sig": "public void setShort (Object obj,\n                     short s)\n              throws IllegalArgumentException,\n                     IllegalAccessException", "description": "Sets the value of a field as a short on the specified object.\n This method is equivalent to\n set(obj, sObj),\n where sObj is a Short object and\n sObj.shortValue() == s."}, {"method_name": "setInt", "method_sig": "public void setInt (Object obj,\n                   int i)\n            throws IllegalArgumentException,\n                   IllegalAccessException", "description": "Sets the value of a field as an int on the specified object.\n This method is equivalent to\n set(obj, iObj),\n where iObj is an Integer object and\n iObj.intValue() == i."}, {"method_name": "setLong", "method_sig": "public void setLong (Object obj,\n                    long l)\n             throws IllegalArgumentException,\n                    IllegalAccessException", "description": "Sets the value of a field as a long on the specified object.\n This method is equivalent to\n set(obj, lObj),\n where lObj is a Long object and\n lObj.longValue() == l."}, {"method_name": "setFloat", "method_sig": "public void setFloat (Object obj,\n                     float f)\n              throws IllegalArgumentException,\n                     IllegalAccessException", "description": "Sets the value of a field as a float on the specified object.\n This method is equivalent to\n set(obj, fObj),\n where fObj is a Float object and\n fObj.floatValue() == f."}, {"method_name": "setDouble", "method_sig": "public void setDouble (Object obj,\n                      double d)\n               throws IllegalArgumentException,\n                      IllegalAccessException", "description": "Sets the value of a field as a double on the specified object.\n This method is equivalent to\n set(obj, dObj),\n where dObj is a Double object and\n dObj.doubleValue() == d."}, {"method_name": "getAnnotation", "method_sig": "public <T extends Annotation> T getAnnotation (Class<T> annotationClass)", "description": "Description copied from interface:\u00a0AnnotatedElement"}, {"method_name": "getAnnotationsByType", "method_sig": "public <T extends Annotation> T[] getAnnotationsByType (Class<T> annotationClass)", "description": "Returns annotations that are associated with this element.\n\n If there are no annotations associated with this element, the return\n value is an array of length 0.\n\n The difference between this method and AnnotatedElement.getAnnotation(Class)\n is that this method detects if its argument is a repeatable\n annotation type (JLS 9.6), and if so, attempts to find one or\n more annotations of that type by \"looking through\" a container\n annotation.\n\n The caller of this method is free to modify the returned array; it will\n have no effect on the arrays returned to other callers."}, {"method_name": "getAnnotatedType", "method_sig": "public AnnotatedType getAnnotatedType()", "description": "Returns an AnnotatedType object that represents the use of a type to specify\n the declared type of the field represented by this Field."}]}