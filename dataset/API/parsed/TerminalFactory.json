{"name": "Class TerminalFactory", "module": "java.smartcardio", "package": "javax.smartcardio", "text": "A factory for CardTerminal objects.\n\n It allows an application to\n \nobtain a TerminalFactory by calling\n one of the static factory methods in this class\n (getDefault() or getInstance()).\n use this TerminalFactory object to access the CardTerminals by\n calling the terminals() method.\n \nEach TerminalFactory has a type indicating how it\n was implemented. It must be specified when the implementation is obtained\n using a getInstance() method and can be retrieved\n via the getType() method.\n\n The following standard type names have been defined:\n \nPC/SC\nan implementation that calls into the PC/SC Smart Card stack\n of the host platform.\n Implementations do not require parameters and accept \"null\" as argument\n in the getInstance() calls.\n None\nan implementation that does not supply any CardTerminals. On platforms\n that do not support other implementations,\n getDefaultType() returns None and\n getDefault() returns an instance of a None\n TerminalFactory. Factories of this type cannot be obtained by calling the\n getInstance() methods.\n \n Additional standard types may be defined in the future.\n\n Note:\n Provider implementations that accept initialization parameters via the\n getInstance() methods are strongly\n encouraged to use a Properties object as the\n representation for String name-value pair based parameters whenever\n possible. This allows applications to more easily interoperate with\n multiple providers than if each provider used different provider\n specific class as parameters.\n\n TerminalFactory utilizes an extensible service provider framework.\n Service providers that wish to add a new implementation should see the\n TerminalFactorySpi class for more information.", "codes": ["public final class TerminalFactory\nextends Object"], "fields": [], "methods": [{"method_name": "getDefaultType", "method_sig": "public static String getDefaultType()", "description": "Get the default TerminalFactory type.\n\n It is determined as follows:\n\n when this class is initialized, the system property\n javax.smartcardio.TerminalFactory.DefaultType\n is examined. If it is set, a TerminalFactory of this type is\n instantiated by calling the getInstance(String,Object) method passing\n null as the value for params. If the call\n succeeds, the type becomes the default type and the factory becomes\n the default factory.\n\n If the system property is not set or the getInstance() call fails\n for any reason, the system defaults to an implementation specific\n default type and TerminalFactory."}, {"method_name": "getDefault", "method_sig": "public static TerminalFactory getDefault()", "description": "Returns the default TerminalFactory instance. See\n getDefaultType() for more information.\n\n A default TerminalFactory is always available. However, depending\n on the implementation, it may not offer any terminals."}, {"method_name": "getInstance", "method_sig": "public static TerminalFactory getInstance (String type,\n                                          Object params)\n                                   throws NoSuchAlgorithmException", "description": "Returns a TerminalFactory of the specified type that is initialized\n with the specified parameters.\n\n  This method traverses the list of registered security Providers,\n starting with the most preferred Provider.\n A new TerminalFactory object encapsulating the\n TerminalFactorySpi implementation from the first\n Provider that supports the specified type is returned.\n\n  Note that the list of registered providers may be retrieved via\n the Security.getProviders() method.\n\n The TerminalFactory is initialized with the\n specified parameters Object. The type of parameters\n needed may vary between different types of TerminalFactorys."}, {"method_name": "getInstance", "method_sig": "public static TerminalFactory getInstance (String type,\n                                          Object params,\n                                          String provider)\n                                   throws NoSuchAlgorithmException,\n                                          NoSuchProviderException", "description": "Returns a TerminalFactory of the specified type that is initialized\n with the specified parameters.\n\n  A new TerminalFactory object encapsulating the\n TerminalFactorySpi implementation from the specified provider\n is returned.  The specified provider must be registered\n in the security provider list.\n\n  Note that the list of registered providers may be retrieved via\n the Security.getProviders() method.\n\n The TerminalFactory is initialized with the\n specified parameters Object. The type of parameters\n needed may vary between different types of TerminalFactorys."}, {"method_name": "getInstance", "method_sig": "public static TerminalFactory getInstance (String type,\n                                          Object params,\n                                          Provider provider)\n                                   throws NoSuchAlgorithmException", "description": "Returns a TerminalFactory of the specified type that is initialized\n with the specified parameters.\n\n  A new TerminalFactory object encapsulating the\n TerminalFactorySpi implementation from the specified provider object\n is returned. Note that the specified provider object does not have to be\n registered in the provider list.\n\n The TerminalFactory is initialized with the\n specified parameters Object. The type of parameters\n needed may vary between different types of TerminalFactorys."}, {"method_name": "getProvider", "method_sig": "public Provider getProvider()", "description": "Returns the provider of this TerminalFactory."}, {"method_name": "getType", "method_sig": "public String getType()", "description": "Returns the type of this TerminalFactory. This is the value that was\n specified in the getInstance() method that returned this object."}, {"method_name": "terminals", "method_sig": "public CardTerminals terminals()", "description": "Returns a new CardTerminals object encapsulating the terminals\n supported by this factory.\n See the class comment of the CardTerminals class\n regarding how the returned objects can be shared and reused."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a string representation of this TerminalFactory."}]}