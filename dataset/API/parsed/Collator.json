{"name": "Class Collator", "module": "java.base", "package": "java.text", "text": "The Collator class performs locale-sensitive\n String comparison. You use this class to build\n searching and sorting routines for natural language text.\n\n \nCollator is an abstract base class. Subclasses\n implement specific collation strategies. One subclass,\n RuleBasedCollator, is currently provided with\n the Java Platform and is applicable to a wide set of languages. Other\n subclasses may be created to handle more specialized needs.\n\n \n Like other locale-sensitive classes, you can use the static\n factory method, getInstance, to obtain the appropriate\n Collator object for a given locale. You will only need\n to look at the subclasses of Collator if you need\n to understand the details of a particular collation strategy or\n if you need to modify that strategy.\n\n \n The following example shows how to compare two strings using\n the Collator for the default locale.\n \n\n // Compare two strings in the default locale\n Collator myCollator = Collator.getInstance();\n if( myCollator.compare(\"abc\", \"ABC\") < 0 )\n     System.out.println(\"abc is less than ABC\");\n else\n     System.out.println(\"abc is greater than or equal to ABC\");\n \n\n\n You can set a Collator's strength property\n to determine the level of difference considered significant in\n comparisons. Four strengths are provided: PRIMARY,\n SECONDARY, TERTIARY, and IDENTICAL.\n The exact assignment of strengths to language features is\n locale dependent.  For example, in Czech, \"e\" and \"f\" are considered\n primary differences, while \"e\" and \"\u011b\" are secondary differences,\n \"e\" and \"E\" are tertiary differences and \"e\" and \"e\" are identical.\n The following shows how both case and accents could be ignored for\n US English.\n \n\n //Get the Collator for US English and set its strength to PRIMARY\n Collator usCollator = Collator.getInstance(Locale.US);\n usCollator.setStrength(Collator.PRIMARY);\n if( usCollator.compare(\"abc\", \"ABC\") == 0 ) {\n     System.out.println(\"Strings are equivalent\");\n }\n \n\n\n For comparing Strings exactly once, the compare\n method provides the best performance. When sorting a list of\n Strings however, it is generally necessary to compare each\n String multiple times. In this case, CollationKeys\n provide better performance. The CollationKey class converts\n a String to a series of bits that can be compared bitwise\n against other CollationKeys. A CollationKey is\n created by a Collator object for a given String.\n \nNote: CollationKeys from different\n Collators can not be compared. See the class description\n for CollationKey\n for an example using CollationKeys.", "codes": ["public abstract class Collator\nextends Object\nimplements Comparator<Object>, Cloneable"], "fields": [{"field_name": "PRIMARY", "field_sig": "public static final\u00a0int PRIMARY", "description": "Collator strength value.  When set, only PRIMARY differences are\n considered significant during comparison. The assignment of strengths\n to language features is locale dependent. A common example is for\n different base letters (\"a\" vs \"b\") to be considered a PRIMARY difference."}, {"field_name": "SECONDARY", "field_sig": "public static final\u00a0int SECONDARY", "description": "Collator strength value.  When set, only SECONDARY and above differences are\n considered significant during comparison. The assignment of strengths\n to language features is locale dependent. A common example is for\n different accented forms of the same base letter (\"a\" vs \"\u00e4\") to be\n considered a SECONDARY difference."}, {"field_name": "TERTIARY", "field_sig": "public static final\u00a0int TERTIARY", "description": "Collator strength value.  When set, only TERTIARY and above differences are\n considered significant during comparison. The assignment of strengths\n to language features is locale dependent. A common example is for\n case differences (\"a\" vs \"A\") to be considered a TERTIARY difference."}, {"field_name": "IDENTICAL", "field_sig": "public static final\u00a0int IDENTICAL", "description": "Collator strength value.  When set, all differences are\n considered significant during comparison. The assignment of strengths\n to language features is locale dependent. A common example is for control\n characters (\"\\u0001\" vs \"\\u0002\") to be considered equal at the\n PRIMARY, SECONDARY, and TERTIARY levels but different at the IDENTICAL\n level.  Additionally, differences between pre-composed accents such as\n \"\\u00C0\" (A-grave) and combining accents such as \"A\\u0300\"\n (A, combining-grave) will be considered significant at the IDENTICAL\n level if decomposition is set to NO_DECOMPOSITION."}, {"field_name": "NO_DECOMPOSITION", "field_sig": "public static final\u00a0int NO_DECOMPOSITION", "description": "Decomposition mode value. With NO_DECOMPOSITION\n set, accented characters will not be decomposed for collation. This\n is the default setting and provides the fastest collation but\n will only produce correct results for languages that do not use accents."}, {"field_name": "CANONICAL_DECOMPOSITION", "field_sig": "public static final\u00a0int CANONICAL_DECOMPOSITION", "description": "Decomposition mode value. With CANONICAL_DECOMPOSITION\n set, characters that are canonical variants according to Unicode\n standard will be decomposed for collation. This should be used to get\n correct collation of accented characters.\n \n CANONICAL_DECOMPOSITION corresponds to Normalization Form D as\n described in\n Unicode\n Technical Report #15."}, {"field_name": "FULL_DECOMPOSITION", "field_sig": "public static final\u00a0int FULL_DECOMPOSITION", "description": "Decomposition mode value. With FULL_DECOMPOSITION\n set, both Unicode canonical variants and Unicode compatibility variants\n will be decomposed for collation.  This causes not only accented\n characters to be collated, but also characters that have special formats\n to be collated with their norminal form. For example, the half-width and\n full-width ASCII and Katakana characters are then collated together.\n FULL_DECOMPOSITION is the most complete and therefore the slowest\n decomposition mode.\n \n FULL_DECOMPOSITION corresponds to Normalization Form KD as\n described in\n Unicode\n Technical Report #15."}], "methods": [{"method_name": "getInstance", "method_sig": "public static Collator getInstance()", "description": "Gets the Collator for the current default locale.\n The default locale is determined by java.util.Locale.getDefault."}, {"method_name": "getInstance", "method_sig": "public static Collator getInstance (Locale desiredLocale)", "description": "Gets the Collator for the desired locale."}, {"method_name": "compare", "method_sig": "public abstract int compare (String source,\n                            String target)", "description": "Compares the source string to the target string according to the\n collation rules for this Collator.  Returns an integer less than,\n equal to or greater than zero depending on whether the source String is\n less than, equal to or greater than the target string.  See the Collator\n class description for an example of use.\n \n For a one time comparison, this method has the best performance. If a\n given String will be involved in multiple comparisons, CollationKey.compareTo\n has the best performance. See the Collator class description for an example\n using CollationKeys."}, {"method_name": "compare", "method_sig": "public int compare (Object o1,\n                   Object o2)", "description": "Compares its two arguments for order.  Returns a negative integer,\n zero, or a positive integer as the first argument is less than, equal\n to, or greater than the second.\n \n This implementation merely returns\n   compare((String)o1, (String)o2) ."}, {"method_name": "getCollationKey", "method_sig": "public abstract CollationKey getCollationKey (String source)", "description": "Transforms the String into a series of bits that can be compared bitwise\n to other CollationKeys. CollationKeys provide better performance than\n Collator.compare when Strings are involved in multiple comparisons.\n See the Collator class description for an example using CollationKeys."}, {"method_name": "equals", "method_sig": "public boolean equals (String source,\n                      String target)", "description": "Convenience method for comparing the equality of two strings based on\n this Collator's collation rules."}, {"method_name": "getStrength", "method_sig": "public int getStrength()", "description": "Returns this Collator's strength property.  The strength property determines\n the minimum level of difference considered significant during comparison.\n See the Collator class description for an example of use."}, {"method_name": "setStrength", "method_sig": "public void setStrength (int newStrength)", "description": "Sets this Collator's strength property.  The strength property determines\n the minimum level of difference considered significant during comparison.\n See the Collator class description for an example of use."}, {"method_name": "getDecomposition", "method_sig": "public int getDecomposition()", "description": "Get the decomposition mode of this Collator. Decomposition mode\n determines how Unicode composed characters are handled. Adjusting\n decomposition mode allows the user to select between faster and more\n complete collation behavior.\n The three values for decomposition mode are:\n \nNO_DECOMPOSITION,\n CANONICAL_DECOMPOSITION\n FULL_DECOMPOSITION.\n \n See the documentation for these three constants for a description\n of their meaning."}, {"method_name": "setDecomposition", "method_sig": "public void setDecomposition (int decompositionMode)", "description": "Set the decomposition mode of this Collator. See getDecomposition\n for a description of decomposition mode."}, {"method_name": "getAvailableLocales", "method_sig": "public static Locale[] getAvailableLocales()", "description": "Returns an array of all locales for which the\n getInstance methods of this class can return\n localized instances.\n The returned array represents the union of locales supported\n by the Java runtime and by installed\n CollatorProvider implementations.\n It must contain at least a Locale instance equal to\n Locale.US."}, {"method_name": "clone", "method_sig": "public Object clone()", "description": "Overrides Cloneable"}, {"method_name": "equals", "method_sig": "public boolean equals (Object that)", "description": "Compares the equality of two Collators."}, {"method_name": "hashCode", "method_sig": "public abstract int hashCode()", "description": "Generates the hash code for this Collator."}]}