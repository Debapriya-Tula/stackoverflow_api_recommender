{"name": "Class LineNumberReader", "module": "java.base", "package": "java.io", "text": "A buffered character-input stream that keeps track of line numbers.  This\n class defines methods setLineNumber(int) and getLineNumber() for setting and getting the current line number\n respectively.\n\n  By default, line numbering begins at 0. This number increments at every\n line terminator as the data is read, and can be changed\n with a call to setLineNumber(int).  Note however, that\n setLineNumber(int) does not actually change the current position in\n the stream; it only changes the value that will be returned by\n getLineNumber().\n\n  A line is considered to be terminated by any one of a\n line feed ('\\n'), a carriage return ('\\r'), or a carriage return followed\n immediately by a linefeed.", "codes": ["public class LineNumberReader\nextends BufferedReader"], "fields": [], "methods": [{"method_name": "setLineNumber", "method_sig": "public void setLineNumber (int lineNumber)", "description": "Set the current line number."}, {"method_name": "getLineNumber", "method_sig": "public int getLineNumber()", "description": "Get the current line number."}, {"method_name": "read", "method_sig": "public int read()\n         throws IOException", "description": "Read a single character.  Line terminators are\n compressed into single newline ('\\n') characters.  Whenever a line\n terminator is read the current line number is incremented."}, {"method_name": "read", "method_sig": "public int read (char[] cbuf,\n                int off,\n                int len)\n         throws IOException", "description": "Read characters into a portion of an array.  Whenever a line terminator is read the current line number is\n incremented."}, {"method_name": "readLine", "method_sig": "public String readLine()\n                throws IOException", "description": "Read a line of text.  Whenever a line terminator is\n read the current line number is incremented."}, {"method_name": "skip", "method_sig": "public long skip (long n)\n          throws IOException", "description": "Skip characters."}, {"method_name": "mark", "method_sig": "public void mark (int readAheadLimit)\n          throws IOException", "description": "Mark the present position in the stream.  Subsequent calls to reset()\n will attempt to reposition the stream to this point, and will also reset\n the line number appropriately."}, {"method_name": "reset", "method_sig": "public void reset()\n           throws IOException", "description": "Reset the stream to the most recent mark."}]}