{"name": "Interface Lock", "module": "java.base", "package": "java.util.concurrent.locks", "text": "Lock implementations provide more extensive locking\n operations than can be obtained using synchronized methods\n and statements.  They allow more flexible structuring, may have\n quite different properties, and may support multiple associated\n Condition objects.\n\n A lock is a tool for controlling access to a shared resource by\n multiple threads. Commonly, a lock provides exclusive access to a\n shared resource: only one thread at a time can acquire the lock and\n all access to the shared resource requires that the lock be\n acquired first. However, some locks may allow concurrent access to\n a shared resource, such as the read lock of a ReadWriteLock.\n\n The use of synchronized methods or statements provides\n access to the implicit monitor lock associated with every object, but\n forces all lock acquisition and release to occur in a block-structured way:\n when multiple locks are acquired they must be released in the opposite\n order, and all locks must be released in the same lexical scope in which\n they were acquired.\n\n While the scoping mechanism for synchronized methods\n and statements makes it much easier to program with monitor locks,\n and helps avoid many common programming errors involving locks,\n there are occasions where you need to work with locks in a more\n flexible way. For example, some algorithms for traversing\n concurrently accessed data structures require the use of\n \"hand-over-hand\" or \"chain locking\": you\n acquire the lock of node A, then node B, then release A and acquire\n C, then release B and acquire D and so on.  Implementations of the\n Lock interface enable the use of such techniques by\n allowing a lock to be acquired and released in different scopes,\n and allowing multiple locks to be acquired and released in any\n order.\n\n With this increased flexibility comes additional\n responsibility. The absence of block-structured locking removes the\n automatic release of locks that occurs with synchronized\n methods and statements. In most cases, the following idiom\n should be used:\n\n  \n Lock l = ...;\n l.lock();\n try {\n   // access the resource protected by this lock\n } finally {\n   l.unlock();\n }\n\n When locking and unlocking occur in different scopes, care must be\n taken to ensure that all code that is executed while the lock is\n held is protected by try-finally or try-catch to ensure that the\n lock is released when necessary.\n\n Lock implementations provide additional functionality\n over the use of synchronized methods and statements by\n providing a non-blocking attempt to acquire a lock (tryLock()), an attempt to acquire the lock that can be\n interrupted (lockInterruptibly(), and an attempt to acquire\n the lock that can timeout (tryLock(long, TimeUnit)).\n\n A Lock class can also provide behavior and semantics\n that is quite different from that of the implicit monitor lock,\n such as guaranteed ordering, non-reentrant usage, or deadlock\n detection. If an implementation provides such specialized semantics\n then the implementation must document those semantics.\n\n Note that Lock instances are just normal objects and can\n themselves be used as the target in a synchronized statement.\n Acquiring the\n monitor lock of a Lock instance has no specified relationship\n with invoking any of the lock() methods of that instance.\n It is recommended that to avoid confusion you never use Lock\n instances in this way, except within their own implementation.\n\n Except where noted, passing a null value for any\n parameter will result in a NullPointerException being\n thrown.\n\n Memory Synchronization\nAll Lock implementations must enforce the same\n memory synchronization semantics as provided by the built-in monitor\n lock, as described in\n \n Chapter 17 of\n The Java\u2122 Language Specification:\n \nA successful lock operation has the same memory\n synchronization effects as a successful Lock action.\n A successful unlock operation has the same\n memory synchronization effects as a successful Unlock action.\n \n\n Unsuccessful locking and unlocking operations, and reentrant\n locking/unlocking operations, do not require any memory\n synchronization effects.\n\n Implementation Considerations\nThe three forms of lock acquisition (interruptible,\n non-interruptible, and timed) may differ in their performance\n characteristics, ordering guarantees, or other implementation\n qualities.  Further, the ability to interrupt the ongoing\n acquisition of a lock may not be available in a given Lock\n class.  Consequently, an implementation is not required to define\n exactly the same guarantees or semantics for all three forms of\n lock acquisition, nor is it required to support interruption of an\n ongoing lock acquisition.  An implementation is required to clearly\n document the semantics and guarantees provided by each of the\n locking methods. It must also obey the interruption semantics as\n defined in this interface, to the extent that interruption of lock\n acquisition is supported: which is either totally, or only on\n method entry.\n\n As interruption generally implies cancellation, and checks for\n interruption are often infrequent, an implementation can favor responding\n to an interrupt over normal method return. This is true even if it can be\n shown that the interrupt occurred after another action may have unblocked\n the thread. An implementation should document this behavior.", "codes": ["public interface Lock"], "fields": [], "methods": [{"method_name": "lock", "method_sig": "void lock()", "description": "Acquires the lock.\n\n If the lock is not available then the current thread becomes\n disabled for thread scheduling purposes and lies dormant until the\n lock has been acquired.\n\n Implementation Considerations\nA Lock implementation may be able to detect erroneous use\n of the lock, such as an invocation that would cause deadlock, and\n may throw an (unchecked) exception in such circumstances.  The\n circumstances and the exception type must be documented by that\n Lock implementation."}, {"method_name": "lockInterruptibly", "method_sig": "void lockInterruptibly()\n                throws InterruptedException", "description": "Acquires the lock unless the current thread is\n interrupted.\n\n Acquires the lock if it is available and returns immediately.\n\n If the lock is not available then the current thread becomes\n disabled for thread scheduling purposes and lies dormant until\n one of two things happens:\n\n \nThe lock is acquired by the current thread; or\n Some other thread interrupts the\n current thread, and interruption of lock acquisition is supported.\n \nIf the current thread:\n \nhas its interrupted status set on entry to this method; or\n is interrupted while acquiring the\n lock, and interruption of lock acquisition is supported,\n \n then InterruptedException is thrown and the current thread's\n interrupted status is cleared.\n\n Implementation Considerations\nThe ability to interrupt a lock acquisition in some\n implementations may not be possible, and if possible may be an\n expensive operation.  The programmer should be aware that this\n may be the case. An implementation should document when this is\n the case.\n\n An implementation can favor responding to an interrupt over\n normal method return.\n\n A Lock implementation may be able to detect\n erroneous use of the lock, such as an invocation that would\n cause deadlock, and may throw an (unchecked) exception in such\n circumstances.  The circumstances and the exception type must\n be documented by that Lock implementation."}, {"method_name": "tryLock", "method_sig": "boolean tryLock()", "description": "Acquires the lock only if it is free at the time of invocation.\n\n Acquires the lock if it is available and returns immediately\n with the value true.\n If the lock is not available then this method will return\n immediately with the value false.\n\n A typical usage idiom for this method would be:\n  \n Lock lock = ...;\n if (lock.tryLock()) {\n   try {\n     // manipulate protected state\n   } finally {\n     lock.unlock();\n   }\n } else {\n   // perform alternative actions\n }\n\n This usage ensures that the lock is unlocked if it was acquired, and\n doesn't try to unlock if the lock was not acquired."}, {"method_name": "tryLock", "method_sig": "boolean tryLock (long time,\n                TimeUnit unit)\n         throws InterruptedException", "description": "Acquires the lock if it is free within the given waiting time and the\n current thread has not been interrupted.\n\n If the lock is available this method returns immediately\n with the value true.\n If the lock is not available then\n the current thread becomes disabled for thread scheduling\n purposes and lies dormant until one of three things happens:\n \nThe lock is acquired by the current thread; or\n Some other thread interrupts the\n current thread, and interruption of lock acquisition is supported; or\n The specified waiting time elapses\n \nIf the lock is acquired then the value true is returned.\n\n If the current thread:\n \nhas its interrupted status set on entry to this method; or\n is interrupted while acquiring\n the lock, and interruption of lock acquisition is supported,\n \n then InterruptedException is thrown and the current thread's\n interrupted status is cleared.\n\n If the specified waiting time elapses then the value false\n is returned.\n If the time is\n less than or equal to zero, the method will not wait at all.\n\n Implementation Considerations\nThe ability to interrupt a lock acquisition in some implementations\n may not be possible, and if possible may\n be an expensive operation.\n The programmer should be aware that this may be the case. An\n implementation should document when this is the case.\n\n An implementation can favor responding to an interrupt over normal\n method return, or reporting a timeout.\n\n A Lock implementation may be able to detect\n erroneous use of the lock, such as an invocation that would cause\n deadlock, and may throw an (unchecked) exception in such circumstances.\n The circumstances and the exception type must be documented by that\n Lock implementation."}, {"method_name": "unlock", "method_sig": "void unlock()", "description": "Releases the lock.\n\n Implementation Considerations\nA Lock implementation will usually impose\n restrictions on which thread can release a lock (typically only the\n holder of the lock can release it) and may throw\n an (unchecked) exception if the restriction is violated.\n Any restrictions and the exception\n type must be documented by that Lock implementation."}, {"method_name": "newCondition", "method_sig": "Condition newCondition()", "description": "Returns a new Condition instance that is bound to this\n Lock instance.\n\n Before waiting on the condition the lock must be held by the\n current thread.\n A call to Condition.await() will atomically release the lock\n before waiting and re-acquire the lock before the wait returns.\n\n Implementation Considerations\nThe exact operation of the Condition instance depends on\n the Lock implementation and must be documented by that\n implementation."}]}