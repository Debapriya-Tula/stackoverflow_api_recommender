{"name": "Interface WebRowSet", "module": "java.sql.rowset", "package": "javax.sql.rowset", "text": "The standard interface that all implementations of a WebRowSet\n must implement.\n\n 1.0 Overview\n The WebRowSetImpl provides the standard\n reference implementation, which may be extended if required.\n \n The standard WebRowSet XML Schema definition is available at the following\n URI:\n \n\nhttp://java.sun.com/xml/ns/jdbc/webrowset.xsd\n\n\n It describes the standard XML document format required when describing a\n RowSet object in XML and must be used be all standard implementations\n of the WebRowSet interface to ensure interoperability. In addition,\n the WebRowSet schema uses specific SQL/XML Schema annotations,\n thus ensuring greater cross\n platform interoperability. This is an effort currently under way at the ISO\n organization. The SQL/XML definition is available at the following URI:\n \n\nhttp://standards.iso.org/iso/9075/2002/12/sqlxml.xsd\n\n\n The schema definition describes the internal data of a RowSet object\n in three distinct areas:\n \nproperties - These properties describe the standard synchronization\n provider properties in addition to the more general RowSet properties.\n \nmetadata - This describes the metadata associated with the tabular structure governed by a\n WebRowSet object. The metadata described is closely aligned with the\n metadata accessible in the underlying java.sql.ResultSet interface.\n \ndata - This describes the original data (the state of data since the\n last population\n or last synchronization of the WebRowSet object) and the current\n data. By keeping track of the delta between the original data and the current data,\n a WebRowSet maintains the ability to synchronize changes\n in its data back to the originating data source.\n \n\n2.0 WebRowSet States\n The following sections demonstrates how a WebRowSet implementation\n should use the XML Schema to describe update, insert, and delete operations\n and to describe the state of a WebRowSet object in XML.\n\n 2.1 State 1 - Outputting a WebRowSet Object to XML\n In this example, a WebRowSet object is created and populated with a simple 2 column,\n 5 row table from a data source. Having the 5 rows in a WebRowSet object\n makes it possible to describe them in XML. The\n metadata describing the various standard JavaBeans properties as defined\n in the RowSet interface plus the standard properties defined in\n the CachedRowSet\u2122 interface\n provide key details that describe WebRowSet\n properties. Outputting the WebRowSet object to XML using the standard\n writeXml methods describes the internal properties as follows:\n \n \n <properties>\n       <command>select co1, col2 from test_table</command>\n      <concurrency>1</concurrency>\n      <datasource/>\n      <escape-processing>true</escape-processing>\n      <fetch-direction>0</fetch-direction>\n      <fetch-size>0</fetch-size>\n      <isolation-level>1</isolation-level>\n      <key-columns/>\n      <map/>\n      <max-field-size>0</max-field-size>\n      <max-rows>0</max-rows>\n      <query-timeout>0</query-timeout>\n      <read-only>false</read-only>\n      <rowset-type>TRANSACTION_READ_UNCOMMITTED</rowset-type>\n      <show-deleted>false</show-deleted>\n      <table-name/>\n      <url>jdbc:thin:oracle</url>\n      <sync-provider>\n              <sync-provider-name>.com.rowset.provider.RIOptimisticProvider</sync-provider-name>\n              <sync-provider-vendor>Oracle Corporation</sync-provider-vendor>\n              <sync-provider-version>1.0</sync-provider-name>\n              <sync-provider-grade>LOW</sync-provider-grade>\n              <data-source-lock>NONE</data-source-lock>\n      </sync-provider>\n </properties>\n  \n The meta-data describing the make up of the WebRowSet is described\n in XML as detailed below. Note both columns are described between the\n column-definition tags.\n \n \n <metadata>\n      <column-count>2</column-count>\n      <column-definition>\n              <column-index>1</column-index>\n              <auto-increment>false</auto-increment>\n              <case-sensitive>true</case-sensitive>\n              <currency>false</currency>\n              <nullable>1</nullable>\n              <signed>false</signed>\n              <searchable>true</searchable>\n              <column-display-size>10</column-display-size>\n              <column-label>COL1</column-label>\n              <column-name>COL1</column-name>\n              <schema-name/>\n              <column-precision>10</column-precision>\n              <column-scale>0</column-scale>\n              <table-name/>\n              <catalog-name/>\n              <column-type>1</column-type>\n              <column-type-name>CHAR</column-type-name>\n      </column-definition>\n      <column-definition>\n              <column-index>2</column-index>\n              <auto-increment>false</auto-increment>\n              <case-sensitive>false</case-sensitive>\n              <currency>false</currency>\n              <nullable>1</nullable>\n              <signed>true</signed>\n              <searchable>true</searchable>\n              <column-display-size>39</column-display-size>\n              <column-label>COL2</column-label>\n              <column-name>COL2</column-name>\n              <schema-name/>\n              <column-precision>38</column-precision>\n              <column-scale>0</column-scale>\n              <table-name/>\n              <catalog-name/>\n              <column-type>3</column-type>\n              <column-type-name>NUMBER</column-type-name>\n      </column-definition>\n </metadata>\n \n Having detailed how the properties and metadata are described, the following details\n how the contents of a WebRowSet object is described in XML. Note, that\n this describes a WebRowSet object that has not undergone any\n modifications since its instantiation.\n A currentRow tag is mapped to each row of the table structure that the\n WebRowSet object provides. A columnValue tag may contain\n either the stringData or binaryData tag, according to\n the SQL type that\n the XML value is mapping back to. The binaryData tag contains data in the\n Base64 encoding and is typically used for BLOB and CLOB type data.\n \n \n <data>\n      <currentRow>\n              <columnValue>\n                      firstrow\n              </columnValue>\n              <columnValue>\n                      1\n              </columnValue>\n      </currentRow>\n      <currentRow>\n              <columnValue>\n                      secondrow\n              </columnValue>\n              <columnValue>\n                      2\n              </columnValue>\n      </currentRow>\n      <currentRow>\n              <columnValue>\n                      thirdrow\n              </columnValue>\n              <columnValue>\n                      3\n              </columnValue>\n      </currentRow>\n      <currentRow>\n              <columnValue>\n                      fourthrow\n              </columnValue>\n              <columnValue>\n                      4\n              </columnValue>\n      </currentRow>\n </data>\n \n2.2 State 2 - Deleting a Row\n Deleting a row in a WebRowSet object involves simply moving to the row\n to be deleted and then calling the method deleteRow, as in any other\n RowSet object.  The following\n two lines of code, in which wrs is a WebRowSet object, delete\n the third row.\n \n     wrs.absolute(3);\n     wrs.deleteRow();\n \n The XML description shows the third row is marked as a deleteRow,\n  which eliminates the third row in the WebRowSet object.\n \n \n <data>\n      <currentRow>\n              <columnValue>\n                      firstrow\n              </columnValue>\n              <columnValue>\n                      1\n              </columnValue>\n      </currentRow>\n      <currentRow>\n              <columnValue>\n                      secondrow\n              </columnValue>\n              <columnValue>\n                      2\n              </columnValue>\n      </currentRow>\n      <deleteRow>\n              <columnValue>\n                      thirdrow\n              </columnValue>\n              <columnValue>\n                      3\n              </columnValue>\n      </deleteRow>\n      <currentRow>\n              <columnValue>\n                      fourthrow\n              </columnValue>\n              <columnValue>\n                      4\n              </columnValue>\n      </currentRow>\n </data>\n \n2.3 State 3 - Inserting a Row\n A WebRowSet object can insert a new row by moving to the insert row,\n calling the appropriate updater methods for each column in the row, and then\n calling the method insertRow.\n \n \n wrs.moveToInsertRow();\n wrs.updateString(1, \"fifththrow\");\n wrs.updateString(2, \"5\");\n wrs.insertRow();\n \n The following code fragment changes the second column value in the row just inserted.\n Note that this code applies when new rows are inserted right after the current row,\n which is why the method next moves the cursor to the correct row.\n Calling the method acceptChanges writes the change to the data source.\n\n \n wrs.moveToCurrentRow();\n wrs.next();\n wrs.updateString(2, \"V\");\n wrs.acceptChanges();\n \n Describing this in XML demonstrates where the Java code inserts a new row and then\n performs an update on the newly inserted row on an individual field.\n \n \n <data>\n      <currentRow>\n              <columnValue>\n                      firstrow\n              </columnValue>\n              <columnValue>\n                      1\n              </columnValue>\n      </currentRow>\n      <currentRow>\n              <columnValue>\n                      secondrow\n              </columnValue>\n              <columnValue>\n                      2\n              </columnValue>\n      </currentRow>\n      <currentRow>\n              <columnValue>\n                      newthirdrow\n              </columnValue>\n              <columnValue>\n                      III\n              </columnValue>\n      </currentRow>\n      <insertRow>\n              <columnValue>\n                      fifthrow\n              </columnValue>\n              <columnValue>\n                      5\n              </columnValue>\n              <updateValue>\n                      V\n              </updateValue>\n      </insertRow>\n      <currentRow>\n              <columnValue>\n                      fourthrow\n              </columnValue>\n              <columnValue>\n                      4\n              </columnValue>\n      </currentRow>\n </date>\n \n2.4 State 4 - Modifying a Row\n Modifying a row produces specific XML that records both the new value and the\n value that was replaced.  The value that was replaced becomes the original value,\n and the new value becomes the current value. The following\n code moves the cursor to a specific row, performs some modifications, and updates\n the row when complete.\n \n\n wrs.absolute(5);\n wrs.updateString(1, \"new4thRow\");\n wrs.updateString(2, \"IV\");\n wrs.updateRow();\n \n In XML, this is described by the modifyRow tag. Both the original and new\n values are contained within the tag for original row tracking purposes.\n \n \n <data>\n      <currentRow>\n              <columnValue>\n                      firstrow\n              </columnValue>\n              <columnValue>\n                      1\n              </columnValue>\n      </currentRow>\n      <currentRow>\n              <columnValue>\n                      secondrow\n              </columnValue>\n              <columnValue>\n                      2\n              </columnValue>\n      </currentRow>\n      <currentRow>\n              <columnValue>\n                      newthirdrow\n              </columnValue>\n              <columnValue>\n                      III\n              </columnValue>\n      </currentRow>\n      <currentRow>\n              <columnValue>\n                      fifthrow\n              </columnValue>\n              <columnValue>\n                      5\n              </columnValue>\n      </currentRow>\n      <modifyRow>\n              <columnValue>\n                      fourthrow\n              </columnValue>\n              <updateValue>\n                      new4thRow\n              </updateValue>\n              <columnValue>\n                      4\n              </columnValue>\n              <updateValue>\n                      IV\n              </updateValue>\n      </modifyRow>\n </data>\n ", "codes": ["public interface WebRowSet\nextends CachedRowSet"], "fields": [{"field_name": "PUBLIC_XML_SCHEMA", "field_sig": "static final\u00a0String PUBLIC_XML_SCHEMA", "description": "The public identifier for the XML Schema definition that defines the XML\n tags and their valid values for a WebRowSet implementation."}, {"field_name": "SCHEMA_SYSTEM_ID", "field_sig": "static final\u00a0String SCHEMA_SYSTEM_ID", "description": "The URL for the XML Schema definition file that defines the XML tags and\n their valid values for a WebRowSet implementation."}], "methods": [{"method_name": "readXml", "method_sig": "void readXml (Reader reader)\n      throws SQLException", "description": "Reads a WebRowSet object in its XML format from the given\n Reader object."}, {"method_name": "readXml", "method_sig": "void readXml (InputStream iStream)\n      throws SQLException,\n             IOException", "description": "Reads a stream based XML input to populate this WebRowSet\n object."}, {"method_name": "writeXml", "method_sig": "void writeXml (ResultSet rs,\n              Writer writer)\n       throws SQLException", "description": "Populates this WebRowSet object with\n the contents of the given ResultSet object and writes its\n data, properties, and metadata\n to the given Writer object in XML format.\n \n NOTE: The WebRowSet cursor may be moved to write out the\n contents to the XML data source. If implemented in this way, the cursor must\n be returned to its position just prior to the writeXml() call."}, {"method_name": "writeXml", "method_sig": "void writeXml (ResultSet rs,\n              OutputStream oStream)\n       throws SQLException,\n              IOException", "description": "Populates this WebRowSet object with\n the contents of the given ResultSet object and writes its\n data, properties, and metadata\n to the given OutputStream object in XML format.\n \n NOTE: The WebRowSet cursor may be moved to write out the\n contents to the XML data source. If implemented in this way, the cursor must\n be returned to its position just prior to the writeXml() call."}, {"method_name": "writeXml", "method_sig": "void writeXml (Writer writer)\n       throws SQLException", "description": "Writes the data, properties, and metadata for this WebRowSet object\n to the given Writer object in XML format."}, {"method_name": "writeXml", "method_sig": "void writeXml (OutputStream oStream)\n       throws SQLException,\n              IOException", "description": "Writes the data, properties, and metadata for this WebRowSet object\n to the given OutputStream object in XML format."}]}