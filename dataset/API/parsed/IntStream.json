{"name": "Interface IntStream", "module": "java.base", "package": "java.util.stream", "text": "A sequence of primitive int-valued elements supporting sequential and parallel\n aggregate operations.  This is the int primitive specialization of\n Stream.\n\n The following example illustrates an aggregate operation using\n Stream and IntStream, computing the sum of the weights of the\n red widgets:\n\n \n     int sum = widgets.stream()\n                      .filter(w -> w.getColor() == RED)\n                      .mapToInt(w -> w.getWeight())\n                      .sum();\n \n\n See the class documentation for Stream and the package documentation\n for java.util.stream for additional\n specification of streams, stream operations, stream pipelines, and\n parallelism.", "codes": ["public interface IntStream\nextends BaseStream<Integer, IntStream>"], "fields": [], "methods": [{"method_name": "filter", "method_sig": "IntStream filter (IntPredicate predicate)", "description": "Returns a stream consisting of the elements of this stream that match\n the given predicate.\n\n This is an intermediate\n operation."}, {"method_name": "map", "method_sig": "IntStream map (IntUnaryOperator mapper)", "description": "Returns a stream consisting of the results of applying the given\n function to the elements of this stream.\n\n This is an intermediate\n operation."}, {"method_name": "mapToObj", "method_sig": "<U> Stream<U> mapToObj (IntFunction<? extends U> mapper)", "description": "Returns an object-valued Stream consisting of the results of\n applying the given function to the elements of this stream.\n\n This is an \n     intermediate operation."}, {"method_name": "mapToLong", "method_sig": "LongStream mapToLong (IntToLongFunction mapper)", "description": "Returns a LongStream consisting of the results of applying the\n given function to the elements of this stream.\n\n This is an intermediate\n operation."}, {"method_name": "mapToDouble", "method_sig": "DoubleStream mapToDouble (IntToDoubleFunction mapper)", "description": "Returns a DoubleStream consisting of the results of applying the\n given function to the elements of this stream.\n\n This is an intermediate\n operation."}, {"method_name": "flatMap", "method_sig": "IntStream flatMap (IntFunction<? extends IntStream> mapper)", "description": "Returns a stream consisting of the results of replacing each element of\n this stream with the contents of a mapped stream produced by applying\n the provided mapping function to each element.  Each mapped stream is\n closed after its contents\n have been placed into this stream.  (If a mapped stream is null\n an empty stream is used, instead.)\n\n This is an intermediate\n operation."}, {"method_name": "distinct", "method_sig": "IntStream distinct()", "description": "Returns a stream consisting of the distinct elements of this stream.\n\n This is a stateful\n intermediate operation."}, {"method_name": "sorted", "method_sig": "IntStream sorted()", "description": "Returns a stream consisting of the elements of this stream in sorted\n order.\n\n This is a stateful\n intermediate operation."}, {"method_name": "peek", "method_sig": "IntStream peek (IntConsumer action)", "description": "Returns a stream consisting of the elements of this stream, additionally\n performing the provided action on each element as elements are consumed\n from the resulting stream.\n\n This is an intermediate\n operation.\n\n For parallel stream pipelines, the action may be called at\n whatever time and in whatever thread the element is made available by the\n upstream operation.  If the action modifies shared state,\n it is responsible for providing the required synchronization."}, {"method_name": "limit", "method_sig": "IntStream limit (long maxSize)", "description": "Returns a stream consisting of the elements of this stream, truncated\n to be no longer than maxSize in length.\n\n This is a short-circuiting\n stateful intermediate operation."}, {"method_name": "skip", "method_sig": "IntStream skip (long n)", "description": "Returns a stream consisting of the remaining elements of this stream\n after discarding the first n elements of the stream.\n If this stream contains fewer than n elements then an\n empty stream will be returned.\n\n This is a stateful\n intermediate operation."}, {"method_name": "takeWhile", "method_sig": "default IntStream takeWhile (IntPredicate predicate)", "description": "Returns, if this stream is ordered, a stream consisting of the longest\n prefix of elements taken from this stream that match the given predicate.\n Otherwise returns, if this stream is unordered, a stream consisting of a\n subset of elements taken from this stream that match the given predicate.\n\n If this stream is ordered then the longest prefix is a contiguous\n sequence of elements of this stream that match the given predicate.  The\n first element of the sequence is the first element of this stream, and\n the element immediately following the last element of the sequence does\n not match the given predicate.\n\n If this stream is unordered, and some (but not all) elements of this\n stream match the given predicate, then the behavior of this operation is\n nondeterministic; it is free to take any subset of matching elements\n (which includes the empty set).\n\n Independent of whether this stream is ordered or unordered if all\n elements of this stream match the given predicate then this operation\n takes all elements (the result is the same as the input), or if no\n elements of the stream match the given predicate then no elements are\n taken (the result is an empty stream).\n\n This is a short-circuiting\n stateful intermediate operation."}, {"method_name": "dropWhile", "method_sig": "default IntStream dropWhile (IntPredicate predicate)", "description": "Returns, if this stream is ordered, a stream consisting of the remaining\n elements of this stream after dropping the longest prefix of elements\n that match the given predicate.  Otherwise returns, if this stream is\n unordered, a stream consisting of the remaining elements of this stream\n after dropping a subset of elements that match the given predicate.\n\n If this stream is ordered then the longest prefix is a contiguous\n sequence of elements of this stream that match the given predicate.  The\n first element of the sequence is the first element of this stream, and\n the element immediately following the last element of the sequence does\n not match the given predicate.\n\n If this stream is unordered, and some (but not all) elements of this\n stream match the given predicate, then the behavior of this operation is\n nondeterministic; it is free to drop any subset of matching elements\n (which includes the empty set).\n\n Independent of whether this stream is ordered or unordered if all\n elements of this stream match the given predicate then this operation\n drops all elements (the result is an empty stream), or if no elements of\n the stream match the given predicate then no elements are dropped (the\n result is the same as the input).\n\n This is a stateful\n intermediate operation."}, {"method_name": "forEach", "method_sig": "void forEach (IntConsumer action)", "description": "Performs an action for each element of this stream.\n\n This is a terminal\n operation.\n\n For parallel stream pipelines, this operation does not\n guarantee to respect the encounter order of the stream, as doing so\n would sacrifice the benefit of parallelism.  For any given element, the\n action may be performed at whatever time and in whatever thread the\n library chooses.  If the action accesses shared state, it is\n responsible for providing the required synchronization."}, {"method_name": "forEachOrdered", "method_sig": "void forEachOrdered (IntConsumer action)", "description": "Performs an action for each element of this stream, guaranteeing that\n each element is processed in encounter order for streams that have a\n defined encounter order.\n\n This is a terminal\n operation."}, {"method_name": "toArray", "method_sig": "int[] toArray()", "description": "Returns an array containing the elements of this stream.\n\n This is a terminal\n operation."}, {"method_name": "reduce", "method_sig": "int reduce (int identity,\n           IntBinaryOperator op)", "description": "Performs a reduction on the\n elements of this stream, using the provided identity value and an\n associative\n accumulation function, and returns the reduced value.  This is equivalent\n to:\n \n     int result = identity;\n     for (int element : this stream)\n         result = accumulator.applyAsInt(result, element)\n     return result;\n \n\n but is not constrained to execute sequentially.\n\n The identity value must be an identity for the accumulator\n function. This means that for all x,\n accumulator.apply(identity, x) is equal to x.\n The accumulator function must be an\n associative function.\n\n This is a terminal\n operation."}, {"method_name": "reduce", "method_sig": "OptionalInt reduce (IntBinaryOperator op)", "description": "Performs a reduction on the\n elements of this stream, using an\n associative accumulation\n function, and returns an OptionalInt describing the reduced value,\n if any. This is equivalent to:\n \n     boolean foundAny = false;\n     int result = null;\n     for (int element : this stream) {\n         if (!foundAny) {\n             foundAny = true;\n             result = element;\n         }\n         else\n             result = accumulator.applyAsInt(result, element);\n     }\n     return foundAny ? OptionalInt.of(result) : OptionalInt.empty();\n \n\n but is not constrained to execute sequentially.\n\n The accumulator function must be an\n associative function.\n\n This is a terminal\n operation."}, {"method_name": "collect", "method_sig": "<R> R collect (Supplier<R> supplier,\n              ObjIntConsumer<R> accumulator,\n              BiConsumer<R, R> combiner)", "description": "Performs a mutable\n reduction operation on the elements of this stream.  A mutable\n reduction is one in which the reduced value is a mutable result container,\n such as an ArrayList, and elements are incorporated by updating\n the state of the result rather than by replacing the result.  This\n produces a result equivalent to:\n \n     R result = supplier.get();\n     for (int element : this stream)\n         accumulator.accept(result, element);\n     return result;\n \nLike reduce(int, IntBinaryOperator), collect operations\n can be parallelized without requiring additional synchronization.\n\n This is a terminal\n operation."}, {"method_name": "sum", "method_sig": "int sum()", "description": "Returns the sum of elements in this stream.  This is a special case\n of a reduction\n and is equivalent to:\n \n     return reduce(0, Integer::sum);\n \nThis is a terminal\n operation."}, {"method_name": "min", "method_sig": "OptionalInt min()", "description": "Returns an OptionalInt describing the minimum element of this\n stream, or an empty optional if this stream is empty.  This is a special\n case of a reduction\n and is equivalent to:\n \n     return reduce(Integer::min);\n \nThis is a terminal operation."}, {"method_name": "max", "method_sig": "OptionalInt max()", "description": "Returns an OptionalInt describing the maximum element of this\n stream, or an empty optional if this stream is empty.  This is a special\n case of a reduction\n and is equivalent to:\n \n     return reduce(Integer::max);\n \nThis is a terminal\n operation."}, {"method_name": "count", "method_sig": "long count()", "description": "Returns the count of elements in this stream.  This is a special case of\n a reduction and is\n equivalent to:\n \n     return mapToLong(e -> 1L).sum();\n \nThis is a terminal operation."}, {"method_name": "average", "method_sig": "OptionalDouble average()", "description": "Returns an OptionalDouble describing the arithmetic mean of elements of\n this stream, or an empty optional if this stream is empty.  This is a\n special case of a\n reduction.\n\n This is a terminal\n operation."}, {"method_name": "summaryStatistics", "method_sig": "IntSummaryStatistics summaryStatistics()", "description": "Returns an IntSummaryStatistics describing various\n summary data about the elements of this stream.  This is a special\n case of a reduction.\n\n This is a terminal\n operation."}, {"method_name": "anyMatch", "method_sig": "boolean anyMatch (IntPredicate predicate)", "description": "Returns whether any elements of this stream match the provided\n predicate.  May not evaluate the predicate on all elements if not\n necessary for determining the result.  If the stream is empty then\n false is returned and the predicate is not evaluated.\n\n This is a short-circuiting\n terminal operation."}, {"method_name": "allMatch", "method_sig": "boolean allMatch (IntPredicate predicate)", "description": "Returns whether all elements of this stream match the provided predicate.\n May not evaluate the predicate on all elements if not necessary for\n determining the result.  If the stream is empty then true is\n returned and the predicate is not evaluated.\n\n This is a short-circuiting\n terminal operation."}, {"method_name": "noneMatch", "method_sig": "boolean noneMatch (IntPredicate predicate)", "description": "Returns whether no elements of this stream match the provided predicate.\n May not evaluate the predicate on all elements if not necessary for\n determining the result.  If the stream is empty then true is\n returned and the predicate is not evaluated.\n\n This is a short-circuiting\n terminal operation."}, {"method_name": "findFirst", "method_sig": "OptionalInt findFirst()", "description": "Returns an OptionalInt describing the first element of this\n stream, or an empty OptionalInt if the stream is empty.  If the\n stream has no encounter order, then any element may be returned.\n\n This is a short-circuiting\n terminal operation."}, {"method_name": "findAny", "method_sig": "OptionalInt findAny()", "description": "Returns an OptionalInt describing some element of the stream, or\n an empty OptionalInt if the stream is empty.\n\n This is a short-circuiting\n terminal operation.\n\n The behavior of this operation is explicitly nondeterministic; it is\n free to select any element in the stream.  This is to allow for maximal\n performance in parallel operations; the cost is that multiple invocations\n on the same source may not return the same result.  (If a stable result\n is desired, use findFirst() instead.)"}, {"method_name": "asLongStream", "method_sig": "LongStream asLongStream()", "description": "Returns a LongStream consisting of the elements of this stream,\n converted to long.\n\n This is an intermediate\n operation."}, {"method_name": "asDoubleStream", "method_sig": "DoubleStream asDoubleStream()", "description": "Returns a DoubleStream consisting of the elements of this stream,\n converted to double.\n\n This is an intermediate\n operation."}, {"method_name": "boxed", "method_sig": "Stream<Integer> boxed()", "description": "Returns a Stream consisting of the elements of this stream,\n each boxed to an Integer.\n\n This is an intermediate\n operation."}, {"method_name": "builder", "method_sig": "static IntStream.Builder builder()", "description": "Returns a builder for an IntStream."}, {"method_name": "empty", "method_sig": "static IntStream empty()", "description": "Returns an empty sequential IntStream."}, {"method_name": "of", "method_sig": "static IntStream of (int t)", "description": "Returns a sequential IntStream containing a single element."}, {"method_name": "of", "method_sig": "static IntStream of (int... values)", "description": "Returns a sequential ordered stream whose elements are the specified values."}, {"method_name": "iterate", "method_sig": "static IntStream iterate (int seed,\n                         IntUnaryOperator f)", "description": "Returns an infinite sequential ordered IntStream produced by iterative\n application of a function f to an initial element seed,\n producing a Stream consisting of seed, f(seed),\n f(f(seed)), etc.\n\n The first element (position 0) in the IntStream will be\n the provided seed.  For n > 0, the element at position\n n, will be the result of applying the function f to the\n element at position n - 1.\n\n The action of applying f for one element\n happens-before\n the action of applying f for subsequent elements.  For any given\n element the action may be performed in whatever thread the library\n chooses."}, {"method_name": "iterate", "method_sig": "static IntStream iterate (int seed,\n                         IntPredicate hasNext,\n                         IntUnaryOperator next)", "description": "Returns a sequential ordered IntStream produced by iterative\n application of the given next function to an initial element,\n conditioned on satisfying the given hasNext predicate.  The\n stream terminates as soon as the hasNext predicate returns false.\n\n IntStream.iterate should produce the same sequence of elements as\n produced by the corresponding for-loop:\n \n     for (int index=seed; hasNext.test(index); index = next.applyAsInt(index)) {\n         ...\n     }\n \nThe resulting sequence may be empty if the hasNext predicate\n does not hold on the seed value.  Otherwise the first element will be the\n supplied seed value, the next element (if present) will be the\n result of applying the next function to the seed value,\n and so on iteratively until the hasNext predicate indicates that\n the stream should terminate.\n\n The action of applying the hasNext predicate to an element\n happens-before\n the action of applying the next function to that element.  The\n action of applying the next function for one element\n happens-before the action of applying the hasNext\n predicate for subsequent elements.  For any given element an action may\n be performed in whatever thread the library chooses."}, {"method_name": "generate", "method_sig": "static IntStream generate (IntSupplier s)", "description": "Returns an infinite sequential unordered stream where each element is\n generated by the provided IntSupplier.  This is suitable for\n generating constant streams, streams of random elements, etc."}, {"method_name": "range", "method_sig": "static IntStream range (int startInclusive,\n                       int endExclusive)", "description": "Returns a sequential ordered IntStream from startInclusive\n (inclusive) to endExclusive (exclusive) by an incremental step of\n 1."}, {"method_name": "rangeClosed", "method_sig": "static IntStream rangeClosed (int startInclusive,\n                             int endInclusive)", "description": "Returns a sequential ordered IntStream from startInclusive\n (inclusive) to endInclusive (inclusive) by an incremental step of\n 1."}, {"method_name": "concat", "method_sig": "static IntStream concat (IntStream a,\n                        IntStream b)", "description": "Creates a lazily concatenated stream whose elements are all the\n elements of the first stream followed by all the elements of the\n second stream.  The resulting stream is ordered if both\n of the input streams are ordered, and parallel if either of the input\n streams is parallel.  When the resulting stream is closed, the close\n handlers for both input streams are invoked.\n\n This method operates on the two input streams and binds each stream\n to its source.  As a result subsequent modifications to an input stream\n source may not be reflected in the concatenated stream result."}]}