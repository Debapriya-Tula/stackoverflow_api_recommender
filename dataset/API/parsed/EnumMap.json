{"name": "Class EnumMap<K extends Enum<K>,\u200bV>", "module": "java.base", "package": "java.util", "text": "A specialized Map implementation for use with enum type keys.  All\n of the keys in an enum map must come from a single enum type that is\n specified, explicitly or implicitly, when the map is created.  Enum maps\n are represented internally as arrays.  This representation is extremely\n compact and efficient.\n\n Enum maps are maintained in the natural order of their keys\n (the order in which the enum constants are declared).  This is reflected\n in the iterators returned by the collections views (keySet(),\n entrySet(), and values()).\n\n Iterators returned by the collection views are weakly consistent:\n they will never throw ConcurrentModificationException and they may\n or may not show the effects of any modifications to the map that occur while\n the iteration is in progress.\n\n Null keys are not permitted.  Attempts to insert a null key will\n throw NullPointerException.  Attempts to test for the\n presence of a null key or to remove one will, however, function properly.\n Null values are permitted.\n\n Like most collection implementations EnumMap is not\n synchronized. If multiple threads access an enum map concurrently, and at\n least one of the threads modifies the map, it should be synchronized\n externally.  This is typically accomplished by synchronizing on some\n object that naturally encapsulates the enum map.  If no such object exists,\n the map should be \"wrapped\" using the Collections.synchronizedMap(java.util.Map<K, V>)\n method.  This is best done at creation time, to prevent accidental\n unsynchronized access:\n\n \n     Map<EnumKey, V> m\n         = Collections.synchronizedMap(new EnumMap<EnumKey, V>(...));\n \nImplementation note: All basic operations execute in constant time.\n They are likely (though not guaranteed) to be faster than their\n HashMap counterparts.\n\n This class is a member of the\n \n Java Collections Framework.", "codes": ["public class EnumMap<K extends Enum<K>, V>\nextends AbstractMap<K, V>\nimplements Serializable, Cloneable"], "fields": [], "methods": [{"method_name": "size", "method_sig": "public int size()", "description": "Returns the number of key-value mappings in this map."}, {"method_name": "containsValue", "method_sig": "public boolean containsValue (Object value)", "description": "Returns true if this map maps one or more keys to the\n specified value."}, {"method_name": "containsKey", "method_sig": "public boolean containsKey (Object key)", "description": "Returns true if this map contains a mapping for the specified\n key."}, {"method_name": "get", "method_sig": "public V get (Object key)", "description": "Returns the value to which the specified key is mapped,\n or null if this map contains no mapping for the key.\n\n More formally, if this map contains a mapping from a key\n k to a value v such that (key == k),\n then this method returns v; otherwise it returns\n null.  (There can be at most one such mapping.)\n\n A return value of null does not necessarily\n indicate that the map contains no mapping for the key; it's also\n possible that the map explicitly maps the key to null.\n The containsKey operation may be used to\n distinguish these two cases."}, {"method_name": "put", "method_sig": "public V put (K key,\n             V value)", "description": "Associates the specified value with the specified key in this map.\n If the map previously contained a mapping for this key, the old\n value is replaced."}, {"method_name": "remove", "method_sig": "public V remove (Object key)", "description": "Removes the mapping for this key from this map if present."}, {"method_name": "putAll", "method_sig": "public void putAll (Map<? extends K, ? extends V> m)", "description": "Copies all of the mappings from the specified map to this map.\n These mappings will replace any mappings that this map had for\n any of the keys currently in the specified map."}, {"method_name": "clear", "method_sig": "public void clear()", "description": "Removes all mappings from this map."}, {"method_name": "keySet", "method_sig": "public Set<K> keySet()", "description": "Returns a Set view of the keys contained in this map.\n The returned set obeys the general contract outlined in\n Map.keySet().  The set's iterator will return the keys\n in their natural order (the order in which the enum constants\n are declared)."}, {"method_name": "values", "method_sig": "public Collection<V> values()", "description": "Returns a Collection view of the values contained in this map.\n The returned collection obeys the general contract outlined in\n Map.values().  The collection's iterator will return the\n values in the order their corresponding keys appear in map,\n which is their natural order (the order in which the enum constants\n are declared)."}, {"method_name": "entrySet", "method_sig": "public Set<Map.Entry<K, V>> entrySet()", "description": "Returns a Set view of the mappings contained in this map.\n The returned set obeys the general contract outlined in\n Map.keySet().  The set's iterator will return the\n mappings in the order their keys appear in map, which is their\n natural order (the order in which the enum constants are declared)."}, {"method_name": "equals", "method_sig": "public boolean equals (Object o)", "description": "Compares the specified object with this map for equality.  Returns\n true if the given object is also a map and the two maps\n represent the same mappings, as specified in the Map.equals(Object) contract."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Returns the hash code value for this map.  The hash code of a map is\n defined to be the sum of the hash codes of each entry in the map."}, {"method_name": "clone", "method_sig": "public EnumMap<K, V> clone()", "description": "Returns a shallow copy of this enum map. The values themselves\n are not cloned."}]}