{"name": "Class FloatBuffer", "module": "java.base", "package": "java.nio", "text": "A float buffer.\n\n  This class defines four categories of operations upon\n float buffers:\n\n \n Absolute and relative get and\n   put methods that read and write\n   single floats; \n Relative bulk get\n   methods that transfer contiguous sequences of floats from this buffer\n   into an array; and\n Relative bulk put\n   methods that transfer contiguous sequences of floats from a\n   float array or some other float\n   buffer into this buffer; and \n A method for compacting\n   a float buffer.  \n\n Float buffers can be created either by allocation, which allocates space for the buffer's\n\n\n\n\n\n\n\n\n content, by wrapping an existing\n float array  into a buffer, or by creating a\n view of an existing byte buffer.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Like a byte buffer, a float buffer is either direct or non-direct.  A\n float buffer created via the wrap methods of this class will\n be non-direct.  A float buffer created as a view of a byte buffer will\n be direct if, and only if, the byte buffer itself is direct.  Whether or not\n a float buffer is direct may be determined by invoking the isDirect method.  \n Methods in this class that do not otherwise have a value to return are\n specified to return the buffer upon which they are invoked.  This allows\n method invocations to be chained.", "codes": ["public abstract class FloatBuffer\nextends Buffer\nimplements Comparable<FloatBuffer>"], "fields": [], "methods": [{"method_name": "allocate", "method_sig": "public static FloatBuffer allocate (int capacity)", "description": "Allocates a new float buffer.\n\n  The new buffer's position will be zero, its limit will be its\n capacity, its mark will be undefined, each of its elements will be\n initialized to zero, and its byte order will be\n\n\n\n the native order of the underlying\n hardware.\n\n It will have a backing array, and its\n array offset will be zero."}, {"method_name": "wrap", "method_sig": "public static FloatBuffer wrap (float[] array,\n                               int offset,\n                               int length)", "description": "Wraps a float array into a buffer.\n\n  The new buffer will be backed by the given float array;\n that is, modifications to the buffer will cause the array to be modified\n and vice versa.  The new buffer's capacity will be\n array.length, its position will be offset, its limit\n will be offset + length, its mark will be undefined, and its\n byte order will be\n\n\n\n the native order of the underlying\n hardware.\n\n Its backing array will be the given array, and\n its array offset will be zero.  "}, {"method_name": "wrap", "method_sig": "public static FloatBuffer wrap (float[] array)", "description": "Wraps a float array into a buffer.\n\n  The new buffer will be backed by the given float array;\n that is, modifications to the buffer will cause the array to be modified\n and vice versa.  The new buffer's capacity and limit will be\n array.length, its position will be zero, its mark will be\n undefined, and its byte order will be\n\n\n\n the native order of the underlying\n hardware.\n\n Its backing array will be the given array, and its\n array offset will be zero.  "}, {"method_name": "slice", "method_sig": "public abstract FloatBuffer slice()", "description": "Creates a new float buffer whose content is a shared subsequence of\n this buffer's content.\n\n  The content of the new buffer will start at this buffer's current\n position.  Changes to this buffer's content will be visible in the new\n buffer, and vice versa; the two buffers' position, limit, and mark\n values will be independent.\n\n  The new buffer's position will be zero, its capacity and its limit\n will be the number of floats remaining in this buffer, its mark will be\n undefined, and its byte order will be\n\n\n\n identical to that of this buffer.\n\n The new buffer will be direct if, and only if, this buffer is direct, and\n it will be read-only if, and only if, this buffer is read-only.  "}, {"method_name": "duplicate", "method_sig": "public abstract FloatBuffer duplicate()", "description": "Creates a new float buffer that shares this buffer's content.\n\n  The content of the new buffer will be that of this buffer.  Changes\n to this buffer's content will be visible in the new buffer, and vice\n versa; the two buffers' position, limit, and mark values will be\n independent.\n\n  The new buffer's capacity, limit, position,\n\n\n\n\n mark values, and byte order will be identical to those of this buffer.\n\n The new buffer will be direct if, and only if, this buffer is direct, and\n it will be read-only if, and only if, this buffer is read-only.  "}, {"method_name": "asReadOnlyBuffer", "method_sig": "public abstract FloatBuffer asReadOnlyBuffer()", "description": "Creates a new, read-only float buffer that shares this buffer's\n content.\n\n  The content of the new buffer will be that of this buffer.  Changes\n to this buffer's content will be visible in the new buffer; the new\n buffer itself, however, will be read-only and will not allow the shared\n content to be modified.  The two buffers' position, limit, and mark\n values will be independent.\n\n  The new buffer's capacity, limit, position,\n\n\n\n\n mark values, and byte order will be identical to those of this buffer.\n\n\n  If this buffer is itself read-only then this method behaves in\n exactly the same way as the duplicate method.  "}, {"method_name": "get", "method_sig": "public abstract float get()", "description": "Relative get method.  Reads the float at this buffer's\n current position, and then increments the position."}, {"method_name": "put", "method_sig": "public abstract FloatBuffer put (float f)", "description": "Relative put method\u00a0\u00a0(optional operation).\n\n  Writes the given float into this buffer at the current\n position, and then increments the position. "}, {"method_name": "get", "method_sig": "public abstract float get (int index)", "description": "Absolute get method.  Reads the float at the given\n index."}, {"method_name": "put", "method_sig": "public abstract FloatBuffer put (int index,\n                                float f)", "description": "Absolute put method\u00a0\u00a0(optional operation).\n\n  Writes the given float into this buffer at the given\n index. "}, {"method_name": "get", "method_sig": "public FloatBuffer get (float[] dst,\n                       int offset,\n                       int length)", "description": "Relative bulk get method.\n\n  This method transfers floats from this buffer into the given\n destination array.  If there are fewer floats remaining in the\n buffer than are required to satisfy the request, that is, if\n length\u00a0>\u00a0remaining(), then no\n floats are transferred and a BufferUnderflowException is\n thrown.\n\n  Otherwise, this method copies length floats from this\n buffer into the given array, starting at the current position of this\n buffer and at the given offset in the array.  The position of this\n buffer is then incremented by length.\n\n  In other words, an invocation of this method of the form\n src.get(dst,\u00a0off,\u00a0len) has exactly the same effect as\n the loop\n\n \n     for (int i = off; i < off + len; i++)\n         dst[i] = src.get();\n \n\n except that it first checks that there are sufficient floats in\n this buffer and it is potentially much more efficient."}, {"method_name": "get", "method_sig": "public FloatBuffer get (float[] dst)", "description": "Relative bulk get method.\n\n  This method transfers floats from this buffer into the given\n destination array.  An invocation of this method of the form\n src.get(a) behaves in exactly the same way as the invocation\n\n \n     src.get(a, 0, a.length) "}, {"method_name": "put", "method_sig": "public FloatBuffer put (FloatBuffer src)", "description": "Relative bulk put method\u00a0\u00a0(optional operation).\n\n  This method transfers the floats remaining in the given source\n buffer into this buffer.  If there are more floats remaining in the\n source buffer than in this buffer, that is, if\n src.remaining()\u00a0>\u00a0remaining(),\n then no floats are transferred and a BufferOverflowException is thrown.\n\n  Otherwise, this method copies\n n\u00a0=\u00a0src.remaining() floats from the given\n buffer into this buffer, starting at each buffer's current position.\n The positions of both buffers are then incremented by n.\n\n  In other words, an invocation of this method of the form\n dst.put(src) has exactly the same effect as the loop\n\n \n     while (src.hasRemaining())\n         dst.put(src.get()); \n\n except that it first checks that there is sufficient space in this\n buffer and it is potentially much more efficient."}, {"method_name": "put", "method_sig": "public FloatBuffer put (float[] src,\n                       int offset,\n                       int length)", "description": "Relative bulk put method\u00a0\u00a0(optional operation).\n\n  This method transfers floats into this buffer from the given\n source array.  If there are more floats to be copied from the array\n than remain in this buffer, that is, if\n length\u00a0>\u00a0remaining(), then no\n floats are transferred and a BufferOverflowException is\n thrown.\n\n  Otherwise, this method copies length floats from the\n given array into this buffer, starting at the given offset in the array\n and at the current position of this buffer.  The position of this buffer\n is then incremented by length.\n\n  In other words, an invocation of this method of the form\n dst.put(src,\u00a0off,\u00a0len) has exactly the same effect as\n the loop\n\n \n     for (int i = off; i < off + len; i++)\n         dst.put(a[i]);\n \n\n except that it first checks that there is sufficient space in this\n buffer and it is potentially much more efficient."}, {"method_name": "put", "method_sig": "public final FloatBuffer put (float[] src)", "description": "Relative bulk put method\u00a0\u00a0(optional operation).\n\n  This method transfers the entire content of the given source\n float array into this buffer.  An invocation of this method of the\n form dst.put(a) behaves in exactly the same way as the\n invocation\n\n \n     dst.put(a, 0, a.length) "}, {"method_name": "hasArray", "method_sig": "public final boolean hasArray()", "description": "Tells whether or not this buffer is backed by an accessible float\n array.\n\n  If this method returns true then the array\n and arrayOffset methods may safely be invoked.\n "}, {"method_name": "array", "method_sig": "public final float[] array()", "description": "Returns the float array that backs this\n buffer\u00a0\u00a0(optional operation).\n\n  Modifications to this buffer's content will cause the returned\n array's content to be modified, and vice versa.\n\n  Invoke the hasArray method before invoking this\n method in order to ensure that this buffer has an accessible backing\n array.  "}, {"method_name": "arrayOffset", "method_sig": "public final int arrayOffset()", "description": "Returns the offset within this buffer's backing array of the first\n element of the buffer\u00a0\u00a0(optional operation).\n\n  If this buffer is backed by an array then buffer position p\n corresponds to array index p\u00a0+\u00a0arrayOffset().\n\n  Invoke the hasArray method before invoking this\n method in order to ensure that this buffer has an accessible backing\n array.  "}, {"method_name": "compact", "method_sig": "public abstract FloatBuffer compact()", "description": "Compacts this buffer\u00a0\u00a0(optional operation).\n\n  The floats between the buffer's current position and its limit,\n if any, are copied to the beginning of the buffer.  That is, the\n float at index p\u00a0=\u00a0position() is copied\n to index zero, the float at index p\u00a0+\u00a01 is copied\n to index one, and so forth until the float at index\n limit()\u00a0-\u00a01 is copied to index\n n\u00a0=\u00a0limit()\u00a0-\u00a01\u00a0-\u00a0p.\n The buffer's position is then set to n+1 and its limit is set to\n its capacity.  The mark, if defined, is discarded.\n\n  The buffer's position is set to the number of floats copied,\n rather than to zero, so that an invocation of this method can be\n followed immediately by an invocation of another relative put\n method. "}, {"method_name": "isDirect", "method_sig": "public abstract boolean isDirect()", "description": "Tells whether or not this float buffer is direct."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a string summarizing the state of this buffer."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Returns the current hash code of this buffer.\n\n  The hash code of a float buffer depends only upon its remaining\n elements; that is, upon the elements from position() up to, and\n including, the element at limit()\u00a0-\u00a01.\n\n  Because buffer hash codes are content-dependent, it is inadvisable\n to use buffers as keys in hash maps or similar data structures unless it\n is known that their contents will not change.  "}, {"method_name": "equals", "method_sig": "public boolean equals (Object ob)", "description": "Tells whether or not this buffer is equal to another object.\n\n  Two float buffers are equal if, and only if,\n\n \n They have the same element type,  \n They have the same number of remaining elements, and\n   \n The two sequences of remaining elements, considered\n   independently of their starting positions, are pointwise equal.\n\n   This method considers two float elements a and b\n   to be equal if\n   (a == b) || (Float.isNaN(a) && Float.isNaN(b)).\n   The values -0.0 and +0.0 are considered to be\n   equal, unlike Float.equals(Object).\n\n   \n\n A float buffer is not equal to any other type of object.  "}, {"method_name": "compareTo", "method_sig": "public int compareTo (FloatBuffer that)", "description": "Compares this buffer to another.\n\n  Two float buffers are compared by comparing their sequences of\n remaining elements lexicographically, without regard to the starting\n position of each sequence within its corresponding buffer.\n\n Pairs of float elements are compared as if by invoking\n Float.compare(float,float), except that\n -0.0 and 0.0 are considered to be equal.\n Float.NaN is considered by this method to be equal\n to itself and greater than all other float values\n (including Float.POSITIVE_INFINITY).\n\n\n\n\n\n  A float buffer is not comparable to any other type of object."}, {"method_name": "mismatch", "method_sig": "public int mismatch (FloatBuffer that)", "description": "Finds and returns the relative index of the first mismatch between this\n buffer and a given buffer.  The index is relative to the\n position of each buffer and will be in the range of\n 0 (inclusive) up to the smaller of the remaining\n elements in each buffer (exclusive).\n\n  If the two buffers share a common prefix then the returned index is\n the length of the common prefix and it follows that there is a mismatch\n between the two buffers at that index within the respective buffers.\n If one buffer is a proper prefix of the other then the returned index is\n the smaller of the remaining elements in each buffer, and it follows that\n the index is only valid for the buffer with the larger number of\n remaining elements.\n Otherwise, there is no mismatch."}, {"method_name": "order", "method_sig": "public abstract ByteOrder order()", "description": "Retrieves this buffer's byte order.\n\n  The byte order of a float buffer created by allocation or by\n wrapping an existing float array is the native order of the underlying\n hardware.  The byte order of a float buffer created as a view of a byte buffer is that of the\n byte buffer at the moment that the view is created.  "}]}