{"name": "Interface SQLOutput", "module": "java.sql", "package": "java.sql", "text": "The output stream for writing the attributes of a user-defined\n type back to the database.  This interface, used\n only for custom mapping, is used by the driver, and its\n methods are never directly invoked by a programmer.\n When an object of a class implementing the interface\n SQLData is passed as an argument to an SQL statement, the\n JDBC driver calls the method SQLData.getSQLType to\n determine the  kind of SQL\n datum being passed to the database.\n The driver then creates an instance of SQLOutput and\n passes it to the method SQLData.writeSQL.\n The method writeSQL in turn calls the\n appropriate SQLOutput writer methods\n writeBoolean, writeCharacterStream, and so on)\n to write data from the SQLData object to\n the SQLOutput output stream as the\n representation of an SQL user-defined type.", "codes": ["public interface SQLOutput"], "fields": [], "methods": [{"method_name": "writeString", "method_sig": "void writeString (String x)\n          throws SQLException", "description": "Writes the next attribute to the stream as a String\n in the Java programming language."}, {"method_name": "writeBoolean", "method_sig": "void writeBoolean (boolean x)\n           throws SQLException", "description": "Writes the next attribute to the stream as a Java boolean.\n Writes the next attribute to the stream as a String\n in the Java programming language."}, {"method_name": "writeByte", "method_sig": "void writeByte (byte x)\n        throws SQLException", "description": "Writes the next attribute to the stream as a Java byte.\n Writes the next attribute to the stream as a String\n in the Java programming language."}, {"method_name": "writeShort", "method_sig": "void writeShort (short x)\n         throws SQLException", "description": "Writes the next attribute to the stream as a Java short.\n Writes the next attribute to the stream as a String\n in the Java programming language."}, {"method_name": "writeInt", "method_sig": "void writeInt (int x)\n       throws SQLException", "description": "Writes the next attribute to the stream as a Java int.\n Writes the next attribute to the stream as a String\n in the Java programming language."}, {"method_name": "writeLong", "method_sig": "void writeLong (long x)\n        throws SQLException", "description": "Writes the next attribute to the stream as a Java long.\n Writes the next attribute to the stream as a String\n in the Java programming language."}, {"method_name": "writeFloat", "method_sig": "void writeFloat (float x)\n         throws SQLException", "description": "Writes the next attribute to the stream as a Java float.\n Writes the next attribute to the stream as a String\n in the Java programming language."}, {"method_name": "writeDouble", "method_sig": "void writeDouble (double x)\n          throws SQLException", "description": "Writes the next attribute to the stream as a Java double.\n Writes the next attribute to the stream as a String\n in the Java programming language."}, {"method_name": "writeBigDecimal", "method_sig": "void writeBigDecimal (BigDecimal x)\n              throws SQLException", "description": "Writes the next attribute to the stream as a java.math.BigDecimal object.\n Writes the next attribute to the stream as a String\n in the Java programming language."}, {"method_name": "writeBytes", "method_sig": "void writeBytes (byte[] x)\n         throws SQLException", "description": "Writes the next attribute to the stream as an array of bytes.\n Writes the next attribute to the stream as a String\n in the Java programming language."}, {"method_name": "writeDate", "method_sig": "void writeDate (Date x)\n        throws SQLException", "description": "Writes the next attribute to the stream as a java.sql.Date object.\n Writes the next attribute to the stream as a java.sql.Date object\n in the Java programming language."}, {"method_name": "writeTime", "method_sig": "void writeTime (Time x)\n        throws SQLException", "description": "Writes the next attribute to the stream as a java.sql.Time object.\n Writes the next attribute to the stream as a java.sql.Date object\n in the Java programming language."}, {"method_name": "writeTimestamp", "method_sig": "void writeTimestamp (Timestamp x)\n             throws SQLException", "description": "Writes the next attribute to the stream as a java.sql.Timestamp object.\n Writes the next attribute to the stream as a java.sql.Date object\n in the Java programming language."}, {"method_name": "writeCharacterStream", "method_sig": "void writeCharacterStream (Reader x)\n                   throws SQLException", "description": "Writes the next attribute to the stream as a stream of Unicode characters."}, {"method_name": "writeAsciiStream", "method_sig": "void writeAsciiStream (InputStream x)\n               throws SQLException", "description": "Writes the next attribute to the stream as a stream of ASCII characters."}, {"method_name": "writeBinaryStream", "method_sig": "void writeBinaryStream (InputStream x)\n                throws SQLException", "description": "Writes the next attribute to the stream as a stream of uninterpreted\n bytes."}, {"method_name": "writeObject", "method_sig": "void writeObject (SQLData x)\n          throws SQLException", "description": "Writes to the stream the data contained in the given\n SQLData object.\n When the SQLData object is null, this\n method writes an SQL NULL to the stream.\n Otherwise, it calls the SQLData.writeSQL\n method of the given object, which\n writes the object's attributes to the stream.\n The implementation of the method SQLData.writeSQL\n calls the appropriate SQLOutput writer method(s)\n for writing each of the object's attributes in order.\n The attributes must be read from an SQLInput\n input stream and written to an SQLOutput\n output stream in the same order in which they were\n listed in the SQL definition of the user-defined type."}, {"method_name": "writeRef", "method_sig": "void writeRef (Ref x)\n       throws SQLException", "description": "Writes an SQL REF value to the stream."}, {"method_name": "writeBlob", "method_sig": "void writeBlob (Blob x)\n        throws SQLException", "description": "Writes an SQL BLOB value to the stream."}, {"method_name": "writeClob", "method_sig": "void writeClob (Clob x)\n        throws SQLException", "description": "Writes an SQL CLOB value to the stream."}, {"method_name": "writeStruct", "method_sig": "void writeStruct (Struct x)\n          throws SQLException", "description": "Writes an SQL structured type value to the stream."}, {"method_name": "writeArray", "method_sig": "void writeArray (Array x)\n         throws SQLException", "description": "Writes an SQL ARRAY value to the stream."}, {"method_name": "writeURL", "method_sig": "void writeURL (URL x)\n       throws SQLException", "description": "Writes a SQL DATALINK value to the stream."}, {"method_name": "writeNString", "method_sig": "void writeNString (String x)\n           throws SQLException", "description": "Writes the next attribute to the stream as a String\n in the Java programming language. The driver converts this to a\n SQL NCHAR or\n NVARCHAR or LONGNVARCHAR value\n (depending on the argument's\n size relative to the driver's limits on NVARCHAR values)\n when it sends it to the stream."}, {"method_name": "writeNClob", "method_sig": "void writeNClob (NClob x)\n         throws SQLException", "description": "Writes an SQL NCLOB value to the stream."}, {"method_name": "writeRowId", "method_sig": "void writeRowId (RowId x)\n         throws SQLException", "description": "Writes an SQL ROWID value to the stream."}, {"method_name": "writeSQLXML", "method_sig": "void writeSQLXML (SQLXML x)\n          throws SQLException", "description": "Writes an SQL XML value to the stream."}, {"method_name": "writeObject", "method_sig": "default void writeObject (Object x,\n                         SQLType targetSqlType)\n                  throws SQLException", "description": "Writes to the stream the data contained in the given object. The\n object will be converted to the specified targetSqlType\n before being sent to the stream.\n\n When the object is null, this\n method writes an SQL NULL to the stream.\n \n If the object has a custom mapping (is of a class implementing the\n interface SQLData),\n the JDBC driver should call the method SQLData.writeSQL to\n write it to the SQL data stream.\n If, on the other hand, the object is of a class implementing\n Ref, Blob, Clob,  NClob,\n  Struct, java.net.URL,\n or Array, the driver should pass it to the database as a\n value of the corresponding SQL type.\n\n The default implementation will throw SQLFeatureNotSupportedException"}]}