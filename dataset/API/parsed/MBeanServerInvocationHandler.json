{"name": "Class MBeanServerInvocationHandler", "module": "java.management", "package": "javax.management", "text": "InvocationHandler that forwards methods in an MBean's\n management interface through the MBean server to the MBean.\nGiven an MBeanServerConnection, the ObjectName\n of an MBean within that MBean server, and a Java interface\n Intf that describes the management interface of the\n MBean using the patterns for a Standard MBean or an MXBean, this\n class can be used to construct a proxy for the MBean.  The proxy\n implements the interface Intf such that all of its\n methods are forwarded through the MBean server to the MBean.\nIf the InvocationHandler is for an MXBean, then the parameters of\n a method are converted from the type declared in the MXBean\n interface into the corresponding mapped type, and the return value\n is converted from the mapped type into the declared type.  For\n example, with the method\npublic List<String> reverse(List<String> list);\n\n and given that the mapped type for List<String> is \n String[], a call to proxy.reverse(someList) will convert\n someList from a List<String> to a String[],\n call the MBean operation reverse, then convert the returned\n String[] into a List<String>.\nThe method Object.toString(), Object.hashCode(), or\n Object.equals(Object), when invoked on a proxy using this\n invocation handler, is forwarded to the MBean server as a method on\n the proxied MBean only if it appears in one of the proxy's\n interfaces.  For a proxy created with JMX.newMBeanProxy or JMX.newMXBeanProxy, this means that the method must appear in the\n Standard MBean or MXBean interface.  Otherwise these methods have\n the following behavior:\n \ntoString() returns a string representation of the proxy\n hashCode() returns a hash code for the proxy such\n that two equal proxies have the same hash code\n equals(Object)\n returns true if and only if the Object argument is of the same\n proxy class as this proxy, with an MBeanServerInvocationHandler\n that has the same MBeanServerConnection and ObjectName; if one\n of the MBeanServerInvocationHandlers was constructed with\n a Class argument then the other must have been constructed\n with the same Class for equals to return true.\n ", "codes": ["public class MBeanServerInvocationHandler\nextends Object\nimplements InvocationHandler"], "fields": [], "methods": [{"method_name": "getMBeanServerConnection", "method_sig": "public MBeanServerConnection getMBeanServerConnection()", "description": "The MBean server connection through which the methods of\n a proxy using this handler are forwarded."}, {"method_name": "getObjectName", "method_sig": "public ObjectName getObjectName()", "description": "The name of the MBean within the MBean server to which methods\n are forwarded."}, {"method_name": "isMXBean", "method_sig": "public boolean isMXBean()", "description": "If true, the proxy is for an MXBean, and appropriate mappings\n are applied to method parameters and return values."}, {"method_name": "newProxyInstance", "method_sig": "public static <T> T newProxyInstance (MBeanServerConnection connection,\n                                     ObjectName objectName,\n                                     Class<T> interfaceClass,\n                                     boolean notificationBroadcaster)", "description": "Return a proxy that implements the given interface by\n forwarding its methods through the given MBean server to the\n named MBean.  As of 1.6, the methods JMX.newMBeanProxy(MBeanServerConnection, ObjectName, Class) and\n JMX.newMBeanProxy(MBeanServerConnection, ObjectName, Class,\n boolean) are preferred to this method.\nThis method is equivalent to Proxy.newProxyInstance(interfaceClass.getClassLoader(),\n interfaces, handler).  Here handler is the\n result of new\n MBeanServerInvocationHandler(connection, objectName), and\n interfaces is an array that has one element if\n notificationBroadcaster is false and two if it is\n true.  The first element of interfaces is\n interfaceClass and the second, if present, is\n NotificationEmitter.class."}]}