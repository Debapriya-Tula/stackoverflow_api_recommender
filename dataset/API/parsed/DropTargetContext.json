{"name": "Class DropTargetContext", "module": "java.desktop", "package": "java.awt.dnd", "text": "A DropTargetContext is created\n whenever the logical cursor associated\n with a Drag and Drop operation coincides with the visible geometry of\n a Component associated with a DropTarget.\n The DropTargetContext provides\n the mechanism for a potential receiver\n of a drop operation to both provide the end user with the appropriate\n drag under feedback, but also to effect the subsequent data transfer\n if appropriate.", "codes": ["public class DropTargetContext\nextends Object\nimplements Serializable"], "fields": [], "methods": [{"method_name": "getDropTarget", "method_sig": "public DropTarget getDropTarget()", "description": "This method returns the DropTarget associated with this\n DropTargetContext."}, {"method_name": "getComponent", "method_sig": "public Component getComponent()", "description": "This method returns the Component associated with\n this DropTargetContext."}, {"method_name": "setTargetActions", "method_sig": "protected void setTargetActions (int actions)", "description": "This method sets the current actions acceptable to\n this DropTarget."}, {"method_name": "getTargetActions", "method_sig": "protected int getTargetActions()", "description": "This method returns an int representing the\n current actions this DropTarget will accept."}, {"method_name": "dropComplete", "method_sig": "public void dropComplete (boolean success)\n                  throws InvalidDnDOperationException", "description": "This method signals that the drop is completed and\n if it was successful or not."}, {"method_name": "acceptDrag", "method_sig": "protected void acceptDrag (int dragOperation)", "description": "accept the Drag."}, {"method_name": "rejectDrag", "method_sig": "protected void rejectDrag()", "description": "reject the Drag."}, {"method_name": "acceptDrop", "method_sig": "protected void acceptDrop (int dropOperation)", "description": "called to signal that the drop is acceptable\n using the specified operation.\n must be called during DropTargetListener.drop method invocation."}, {"method_name": "rejectDrop", "method_sig": "protected void rejectDrop()", "description": "called to signal that the drop is unacceptable.\n must be called during DropTargetListener.drop method invocation."}, {"method_name": "getCurrentDataFlavors", "method_sig": "protected DataFlavor[] getCurrentDataFlavors()", "description": "get the available DataFlavors of the\n Transferable operand of this operation."}, {"method_name": "getCurrentDataFlavorsAsList", "method_sig": "protected List<DataFlavor> getCurrentDataFlavorsAsList()", "description": "This method returns a the currently available DataFlavors\n of the Transferable operand\n as a java.util.List."}, {"method_name": "isDataFlavorSupported", "method_sig": "protected boolean isDataFlavorSupported (DataFlavor df)", "description": "This method returns a boolean\n indicating if the given DataFlavor is\n supported by this DropTargetContext."}, {"method_name": "getTransferable", "method_sig": "protected Transferable getTransferable()\n                                throws InvalidDnDOperationException", "description": "get the Transferable (proxy) operand of this operation"}, {"method_name": "createTransferableProxy", "method_sig": "protected Transferable createTransferableProxy (Transferable t,\n                                               boolean local)", "description": "Creates a TransferableProxy to proxy for the specified\n Transferable."}]}