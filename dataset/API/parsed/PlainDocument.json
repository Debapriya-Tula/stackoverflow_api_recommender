{"name": "Class PlainDocument", "module": "java.desktop", "package": "javax.swing.text", "text": "A plain document that maintains no character attributes.  The\n default element structure for this document is a map of the lines in\n the text.  The Element returned by getDefaultRootElement is\n a map of the lines, and each child element represents a line.\n This model does not maintain any character level attributes,\n but each line can be tagged with an arbitrary set of attributes.\n Line to offset, and offset to line translations can be quickly\n performed using the default root element.  The structure information\n of the DocumentEvent's fired by edits will indicate the line\n structure changes.\n \n The default content storage management is performed by a\n gapped buffer implementation (GapContent).  It supports\n editing reasonably large documents with good efficiency when\n the edits are contiguous or clustered, as is typical.\n \nWarning:\n Serialized objects of this class will not be compatible with\n future Swing releases. The current serialization support is\n appropriate for short term storage or RMI between applications running\n the same version of Swing.  As of 1.4, support for long term storage\n of all JavaBeans\u2122\n has been added to the java.beans package.\n Please see XMLEncoder.", "codes": ["public class PlainDocument\nextends AbstractDocument"], "fields": [{"field_name": "tabSizeAttribute", "field_sig": "public static final\u00a0String tabSizeAttribute", "description": "Name of the attribute that specifies the tab\n size for tabs contained in the content.  The\n type for the value is Integer."}, {"field_name": "lineLimitAttribute", "field_sig": "public static final\u00a0String lineLimitAttribute", "description": "Name of the attribute that specifies the maximum\n length of a line, if there is a maximum length.\n The type for the value is Integer."}], "methods": [{"method_name": "insertString", "method_sig": "public void insertString (int offs,\n                         String str,\n                         AttributeSet a)\n                  throws BadLocationException", "description": "Inserts some content into the document.\n Inserting content causes a write lock to be held while the\n actual changes are taking place, followed by notification\n to the observers on the thread that grabbed the write lock.\n \n This method is thread safe, although most Swing methods\n are not. Please see\n Concurrency\n in Swing for more information."}, {"method_name": "getDefaultRootElement", "method_sig": "public Element getDefaultRootElement()", "description": "Gets the default root element for the document model."}, {"method_name": "createDefaultRoot", "method_sig": "protected AbstractDocument.AbstractElement createDefaultRoot()", "description": "Creates the root element to be used to represent the\n default document structure."}, {"method_name": "getParagraphElement", "method_sig": "public Element getParagraphElement (int pos)", "description": "Get the paragraph element containing the given position.  Since this\n document only models lines, it returns the line instead."}, {"method_name": "insertUpdate", "method_sig": "protected void insertUpdate (AbstractDocument.DefaultDocumentEvent chng,\n                            AttributeSet attr)", "description": "Updates document structure as a result of text insertion.  This\n will happen within a write lock.  Since this document simply\n maps out lines, we refresh the line map."}, {"method_name": "removeUpdate", "method_sig": "protected void removeUpdate (AbstractDocument.DefaultDocumentEvent chng)", "description": "Updates any document structure as a result of text removal.\n This will happen within a write lock. Since the structure\n represents a line map, this just checks to see if the\n removal spans lines.  If it does, the two lines outside\n of the removal area are joined together."}]}