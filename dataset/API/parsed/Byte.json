{"name": "Class Byte", "module": "java.base", "package": "java.lang", "text": "The Byte class wraps a value of primitive type byte\n in an object.  An object of type Byte contains a single\n field whose type is byte.\n\n In addition, this class provides several methods for converting\n a byte to a String and a String to a \n byte, as well as other constants and methods useful when dealing\n with a byte.", "codes": ["public final class Byte\nextends Number\nimplements Comparable<Byte>"], "fields": [{"field_name": "MIN_VALUE", "field_sig": "public static final\u00a0byte MIN_VALUE", "description": "A constant holding the minimum value a byte can\n have, -27."}, {"field_name": "MAX_VALUE", "field_sig": "public static final\u00a0byte MAX_VALUE", "description": "A constant holding the maximum value a byte can\n have, 27-1."}, {"field_name": "TYPE", "field_sig": "public static final\u00a0Class<Byte> TYPE", "description": "The Class instance representing the primitive type\n byte."}, {"field_name": "SIZE", "field_sig": "public static final\u00a0int SIZE", "description": "The number of bits used to represent a byte value in two's\n complement binary form."}, {"field_name": "BYTES", "field_sig": "public static final\u00a0int BYTES", "description": "The number of bytes used to represent a byte value in two's\n complement binary form."}], "methods": [{"method_name": "toString", "method_sig": "public static String toString (byte b)", "description": "Returns a new String object representing the\n specified byte. The radix is assumed to be 10."}, {"method_name": "valueOf", "method_sig": "public static Byte valueOf (byte b)", "description": "Returns a Byte instance representing the specified\n byte value.\n If a new Byte instance is not required, this method\n should generally be used in preference to the constructor\n Byte(byte), as this method is likely to yield\n significantly better space and time performance since\n all byte values are cached."}, {"method_name": "parseByte", "method_sig": "public static byte parseByte (String s,\n                             int radix)\n                      throws NumberFormatException", "description": "Parses the string argument as a signed byte in the\n radix specified by the second argument. The characters in the\n string must all be digits, of the specified radix (as\n determined by whether Character.digit(char,\n int) returns a nonnegative value) except that the first\n character may be an ASCII minus sign '-'\n ('\\u002D') to indicate a negative value or an\n ASCII plus sign '+' ('\\u002B') to\n indicate a positive value.  The resulting byte value is\n returned.\n\n An exception of type NumberFormatException is\n thrown if any of the following situations occurs:\n \n The first argument is null or is a string of\n length zero.\n\n  The radix is either smaller than Character.MIN_RADIX or larger than Character.MAX_RADIX.\n\n  Any character of the string is not a digit of the\n specified radix, except that the first character may be a minus\n sign '-' ('\\u002D') or plus sign\n '+' ('\\u002B') provided that the\n string is longer than length 1.\n\n  The value represented by the string is not a value of type\n byte.\n "}, {"method_name": "parseByte", "method_sig": "public static byte parseByte (String s)\n                      throws NumberFormatException", "description": "Parses the string argument as a signed decimal \n byte. The characters in the string must all be decimal digits,\n except that the first character may be an ASCII minus sign\n '-' ('\\u002D') to indicate a negative\n value or an ASCII plus sign '+'\n ('\\u002B') to indicate a positive value. The\n resulting byte value is returned, exactly as if the\n argument and the radix 10 were given as arguments to the parseByte(java.lang.String, int) method."}, {"method_name": "valueOf", "method_sig": "public static Byte valueOf (String s,\n                           int radix)\n                    throws NumberFormatException", "description": "Returns a Byte object holding the value\n extracted from the specified String when parsed\n with the radix given by the second argument. The first argument\n is interpreted as representing a signed byte in\n the radix specified by the second argument, exactly as if the\n argument were given to the parseByte(java.lang.String,\n int) method. The result is a Byte object that\n represents the byte value specified by the string.\n\n  In other words, this method returns a Byte object\n equal to the value of:\n\n \nnew Byte(Byte.parseByte(s, radix))\n"}, {"method_name": "valueOf", "method_sig": "public static Byte valueOf (String s)\n                    throws NumberFormatException", "description": "Returns a Byte object holding the value\n given by the specified String. The argument is\n interpreted as representing a signed decimal byte,\n exactly as if the argument were given to the parseByte(java.lang.String) method. The result is a\n Byte object that represents the byte\n value specified by the string.\n\n  In other words, this method returns a Byte object\n equal to the value of:\n\n \nnew Byte(Byte.parseByte(s))\n"}, {"method_name": "decode", "method_sig": "public static Byte decode (String nm)\n                   throws NumberFormatException", "description": "Decodes a String into a Byte.\n Accepts decimal, hexadecimal, and octal numbers given by\n the following grammar:\n\n \n\nDecodableString:\nSignopt DecimalNumeral\nSignopt 0x HexDigits\nSignopt 0X HexDigits\nSignopt # HexDigits\nSignopt 0 OctalDigits\nSign:\n-\n+\n\n\nDecimalNumeral, HexDigits, and OctalDigits\n are as defined in section 3.10.1 of\n The Java\u2122 Language Specification,\n except that underscores are not accepted between digits.\n\n The sequence of characters following an optional\n sign and/or radix specifier (\"0x\", \"0X\",\n \"#\", or leading zero) is parsed as by the \n Byte.parseByte method with the indicated radix (10, 16, or 8).\n This sequence of characters must represent a positive value or\n a NumberFormatException will be thrown.  The result is\n negated if first character of the specified String is\n the minus sign.  No whitespace characters are permitted in the\n String."}, {"method_name": "byteValue", "method_sig": "public byte byteValue()", "description": "Returns the value of this Byte as a\n byte."}, {"method_name": "shortValue", "method_sig": "public short shortValue()", "description": "Returns the value of this Byte as a short after\n a widening primitive conversion."}, {"method_name": "intValue", "method_sig": "public int intValue()", "description": "Returns the value of this Byte as an int after\n a widening primitive conversion."}, {"method_name": "longValue", "method_sig": "public long longValue()", "description": "Returns the value of this Byte as a long after\n a widening primitive conversion."}, {"method_name": "floatValue", "method_sig": "public float floatValue()", "description": "Returns the value of this Byte as a float after\n a widening primitive conversion."}, {"method_name": "doubleValue", "method_sig": "public double doubleValue()", "description": "Returns the value of this Byte as a double\n after a widening primitive conversion."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a String object representing this\n Byte's value.  The value is converted to signed\n decimal representation and returned as a string, exactly as if\n the byte value were given as an argument to the\n toString(byte) method."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Returns a hash code for this Byte; equal to the result\n of invoking intValue()."}, {"method_name": "hashCode", "method_sig": "public static int hashCode (byte value)", "description": "Returns a hash code for a byte value; compatible with\n Byte.hashCode()."}, {"method_name": "equals", "method_sig": "public boolean equals (Object obj)", "description": "Compares this object to the specified object.  The result is\n true if and only if the argument is not\n null and is a Byte object that\n contains the same byte value as this object."}, {"method_name": "compareTo", "method_sig": "public int compareTo (Byte anotherByte)", "description": "Compares two Byte objects numerically."}, {"method_name": "compare", "method_sig": "public static int compare (byte x,\n                          byte y)", "description": "Compares two byte values numerically.\n The value returned is identical to what would be returned by:\n \n    Byte.valueOf(x).compareTo(Byte.valueOf(y))\n "}, {"method_name": "compareUnsigned", "method_sig": "public static int compareUnsigned (byte x,\n                                  byte y)", "description": "Compares two byte values numerically treating the values\n as unsigned."}, {"method_name": "toUnsignedInt", "method_sig": "public static int toUnsignedInt (byte x)", "description": "Converts the argument to an int by an unsigned\n conversion.  In an unsigned conversion to an int, the\n high-order 24 bits of the int are zero and the\n low-order 8 bits are equal to the bits of the byte argument.\n\n Consequently, zero and positive byte values are mapped\n to a numerically equal int value and negative \n byte values are mapped to an int value equal to the\n input plus 28."}, {"method_name": "toUnsignedLong", "method_sig": "public static long toUnsignedLong (byte x)", "description": "Converts the argument to a long by an unsigned\n conversion.  In an unsigned conversion to a long, the\n high-order 56 bits of the long are zero and the\n low-order 8 bits are equal to the bits of the byte argument.\n\n Consequently, zero and positive byte values are mapped\n to a numerically equal long value and negative \n byte values are mapped to a long value equal to the\n input plus 28."}]}