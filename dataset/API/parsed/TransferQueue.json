{"name": "Interface TransferQueue<E>", "module": "java.base", "package": "java.util.concurrent", "text": "A BlockingQueue in which producers may wait for consumers\n to receive elements.  A TransferQueue may be useful for\n example in message passing applications in which producers\n sometimes (using method transfer(E)) await receipt of\n elements by consumers invoking take or poll, while\n at other times enqueue elements (via method put) without\n waiting for receipt.\n Non-blocking and\n time-out versions of\n tryTransfer are also available.\n A TransferQueue may also be queried, via hasWaitingConsumer(), whether there are any threads waiting for\n items, which is a converse analogy to a peek operation.\n\n Like other blocking queues, a TransferQueue may be\n capacity bounded.  If so, an attempted transfer operation may\n initially block waiting for available space, and/or subsequently\n block waiting for reception by a consumer.  Note that in a queue\n with zero capacity, such as SynchronousQueue, put\n and transfer are effectively synonymous.\n\n This interface is a member of the\n \n Java Collections Framework.", "codes": ["public interface TransferQueue<E>\nextends BlockingQueue<E>"], "fields": [], "methods": [{"method_name": "tryTransfer", "method_sig": "boolean tryTransfer (E e)", "description": "Transfers the element to a waiting consumer immediately, if possible.\n\n More precisely, transfers the specified element immediately\n if there exists a consumer already waiting to receive it (in\n BlockingQueue.take() or timed poll),\n otherwise returning false without enqueuing the element."}, {"method_name": "transfer", "method_sig": "void transfer (E e)\n       throws InterruptedException", "description": "Transfers the element to a consumer, waiting if necessary to do so.\n\n More precisely, transfers the specified element immediately\n if there exists a consumer already waiting to receive it (in\n BlockingQueue.take() or timed poll),\n else waits until the element is received by a consumer."}, {"method_name": "tryTransfer", "method_sig": "boolean tryTransfer (E e,\n                    long timeout,\n                    TimeUnit unit)\n             throws InterruptedException", "description": "Transfers the element to a consumer if it is possible to do so\n before the timeout elapses.\n\n More precisely, transfers the specified element immediately\n if there exists a consumer already waiting to receive it (in\n BlockingQueue.take() or timed poll),\n else waits until the element is received by a consumer,\n returning false if the specified wait time elapses\n before the element can be transferred."}, {"method_name": "hasWaitingConsumer", "method_sig": "boolean hasWaitingConsumer()", "description": "Returns true if there is at least one consumer waiting\n to receive an element via BlockingQueue.take() or\n timed poll.\n The return value represents a momentary state of affairs."}, {"method_name": "getWaitingConsumerCount", "method_sig": "int getWaitingConsumerCount()", "description": "Returns an estimate of the number of consumers waiting to\n receive elements via BlockingQueue.take() or timed\n poll.  The return value is an\n approximation of a momentary state of affairs, that may be\n inaccurate if consumers have completed or given up waiting.\n The value may be useful for monitoring and heuristics, but\n not for synchronization control.  Implementations of this\n method are likely to be noticeably slower than those for\n hasWaitingConsumer()."}]}