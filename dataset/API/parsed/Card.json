{"name": "Class Card", "module": "java.smartcardio", "package": "javax.smartcardio", "text": "A Smart Card with which a connection has been established. Card objects\n are obtained by calling CardTerminal.connect().", "codes": ["public abstract class Card\nextends Object"], "fields": [], "methods": [{"method_name": "getATR", "method_sig": "public abstract ATR getATR()", "description": "Returns the ATR of this card."}, {"method_name": "getProtocol", "method_sig": "public abstract String getProtocol()", "description": "Returns the protocol in use for this card."}, {"method_name": "getBasicChannel", "method_sig": "public abstract CardChannel getBasicChannel()", "description": "Returns the CardChannel for the basic logical channel. The basic\n logical channel has a channel number of 0."}, {"method_name": "openLogicalChannel", "method_sig": "public abstract CardChannel openLogicalChannel()\n                                        throws CardException", "description": "Opens a new logical channel to the card and returns it. The channel is\n opened by issuing a MANAGE CHANNEL command that should use\n the format [00 70 00 00 01]."}, {"method_name": "beginExclusive", "method_sig": "public abstract void beginExclusive()\n                             throws CardException", "description": "Requests exclusive access to this card.\n\n Once a thread has invoked beginExclusive, only this\n thread is allowed to communicate with this card until it calls\n endExclusive. Other threads attempting communication\n will receive a CardException.\n\n Applications have to ensure that exclusive access is correctly\n released. This can be achieved by executing\n the beginExclusive() and endExclusive calls\n in a try ... finally block."}, {"method_name": "endExclusive", "method_sig": "public abstract void endExclusive()\n                           throws CardException", "description": "Releases the exclusive access previously established using\n beginExclusive."}, {"method_name": "transmitControlCommand", "method_sig": "public abstract byte[] transmitControlCommand (int controlCode,\n                                              byte[] command)\n                                       throws CardException", "description": "Transmits a control command to the terminal device.\n\n This can be used to, for example, control terminal functions like\n a built-in PIN pad or biometrics."}, {"method_name": "disconnect", "method_sig": "public abstract void disconnect (boolean reset)\n                         throws CardException", "description": "Disconnects the connection with this card. After this method returns,\n calling methods on this object or in CardChannels associated with this\n object that require interaction with the card will raise an\n IllegalStateException."}]}