{"name": "Class GraphicsEnvironment", "module": "java.desktop", "package": "java.awt", "text": "The GraphicsEnvironment class describes the collection\n of GraphicsDevice objects and Font objects\n available to a Java(tm) application on a particular platform.\n The resources in this GraphicsEnvironment might be local\n or on a remote machine.  GraphicsDevice objects can be\n screens, printers or image buffers and are the destination of\n Graphics2D drawing methods.  Each GraphicsDevice\n has a number of GraphicsConfiguration objects associated with\n it.  These objects specify the different configurations in which the\n GraphicsDevice can be used.", "codes": ["public abstract class GraphicsEnvironment\nextends Object"], "fields": [], "methods": [{"method_name": "getLocalGraphicsEnvironment", "method_sig": "public static GraphicsEnvironment getLocalGraphicsEnvironment()", "description": "Returns the local GraphicsEnvironment."}, {"method_name": "isHeadless", "method_sig": "public static boolean isHeadless()", "description": "Tests whether or not a display, keyboard, and mouse can be\n supported in this environment.  If this method returns true,\n a HeadlessException is thrown from areas of the Toolkit\n and GraphicsEnvironment that are dependent on a display,\n keyboard, or mouse."}, {"method_name": "isHeadlessInstance", "method_sig": "public boolean isHeadlessInstance()", "description": "Returns whether or not a display, keyboard, and mouse can be\n supported in this graphics environment.  If this returns true,\n HeadlessException will be thrown from areas of the\n graphics environment that are dependent on a display, keyboard, or\n mouse."}, {"method_name": "getScreenDevices", "method_sig": "public abstract GraphicsDevice[] getScreenDevices()\n                                           throws HeadlessException", "description": "Returns an array of all of the screen GraphicsDevice\n objects."}, {"method_name": "getDefaultScreenDevice", "method_sig": "public abstract GraphicsDevice getDefaultScreenDevice()\n                                               throws HeadlessException", "description": "Returns the default screen GraphicsDevice."}, {"method_name": "createGraphics", "method_sig": "public abstract Graphics2D createGraphics (BufferedImage img)", "description": "Returns a Graphics2D object for rendering into the\n specified BufferedImage."}, {"method_name": "getAllFonts", "method_sig": "public abstract Font[] getAllFonts()", "description": "Returns an array containing a one-point size instance of all fonts\n available in this GraphicsEnvironment.  Typical usage\n would be to allow a user to select a particular font.  Then, the\n application can size the font and set various font attributes by\n calling the deriveFont method on the chosen instance.\n \n This method provides for the application the most precise control\n over which Font instance is used to render text.\n If a font in this GraphicsEnvironment has multiple\n programmable variations, only one\n instance of that Font is returned in the array, and\n other variations must be derived by the application.\n \n If a font in this environment has multiple programmable variations,\n such as Multiple-Master fonts, only one instance of that font is\n returned in the Font array.  The other variations\n must be derived by the application."}, {"method_name": "getAvailableFontFamilyNames", "method_sig": "public abstract String[] getAvailableFontFamilyNames()", "description": "Returns an array containing the names of all font families in this\n GraphicsEnvironment localized for the default locale,\n as returned by Locale.getDefault().\n \n Typical usage would be for presentation to a user for selection of\n a particular family name. An application can then specify this name\n when creating a font, in conjunction with a style, such as bold or\n italic, giving the font system flexibility in choosing its own best\n match among multiple fonts in the same font family."}, {"method_name": "getAvailableFontFamilyNames", "method_sig": "public abstract String[] getAvailableFontFamilyNames (Locale l)", "description": "Returns an array containing the names of all font families in this\n GraphicsEnvironment localized for the specified locale.\n \n Typical usage would be for presentation to a user for selection of\n a particular family name. An application can then specify this name\n when creating a font, in conjunction with a style, such as bold or\n italic, giving the font system flexibility in choosing its own best\n match among multiple fonts in the same font family."}, {"method_name": "registerFont", "method_sig": "public boolean registerFont (Font font)", "description": "Registers a created Font in this\n GraphicsEnvironment.\n A created font is one that was returned from calling\n Font.createFont(int, java.io.InputStream), or derived from a created font by\n calling Font.deriveFont(int, float).\n After calling this method for such a font, it is available to\n be used in constructing new Fonts by name or family name,\n and is enumerated by getAvailableFontFamilyNames() and\n getAllFonts() within the execution context of this\n application or applet. This means applets cannot register fonts in\n a way that they are visible to other applets.\n \n Reasons that this method might not register the font and therefore\n return false are:\n \nThe font is not a created Font.\n The font conflicts with a non-created Font already\n in this GraphicsEnvironment. For example if the name\n is that of a system font, or a logical font as described in the\n documentation of the Font class. It is implementation dependent\n whether a font may also conflict if it has the same family name\n as a system font.\n Notice that an application can supersede the registration\n of an earlier created font with a new one.\n "}, {"method_name": "preferLocaleFonts", "method_sig": "public void preferLocaleFonts()", "description": "Indicates a preference for locale-specific fonts in the mapping of\n logical fonts to physical fonts. Calling this method indicates that font\n rendering should primarily use fonts specific to the primary writing\n system (the one indicated by the default encoding and the initial\n default locale). For example, if the primary writing system is\n Japanese, then characters should be rendered using a Japanese font\n if possible, and other fonts should only be used for characters for\n which the Japanese font doesn't have glyphs.\n \n The actual change in font rendering behavior resulting from a call\n to this method is implementation dependent; it may have no effect at\n all, or the requested behavior may already match the default behavior.\n The behavior may differ between font rendering in lightweight\n and peered components.  Since calling this method requests a\n different font, clients should expect different metrics, and may need\n to recalculate window sizes and layout. Therefore this method should\n be called before user interface initialisation."}, {"method_name": "preferProportionalFonts", "method_sig": "public void preferProportionalFonts()", "description": "Indicates a preference for proportional over non-proportional (e.g.\n dual-spaced CJK fonts) fonts in the mapping of logical fonts to\n physical fonts. If the default mapping contains fonts for which\n proportional and non-proportional variants exist, then calling\n this method indicates the mapping should use a proportional variant.\n \n The actual change in font rendering behavior resulting from a call to\n this method is implementation dependent; it may have no effect at all.\n The behavior may differ between font rendering in lightweight and\n peered components. Since calling this method requests a\n different font, clients should expect different metrics, and may need\n to recalculate window sizes and layout. Therefore this method should\n be called before user interface initialisation."}, {"method_name": "getCenterPoint", "method_sig": "public Point getCenterPoint()\n                     throws HeadlessException", "description": "Returns the Point where Windows should be centered.\n It is recommended that centered Windows be checked to ensure they fit\n within the available display area using getMaximumWindowBounds()."}, {"method_name": "getMaximumWindowBounds", "method_sig": "public Rectangle getMaximumWindowBounds()\n                                 throws HeadlessException", "description": "Returns the maximum bounds for centered Windows.\n These bounds account for objects in the native windowing system such as\n task bars and menu bars.  The returned bounds will reside on a single\n display with one exception: on multi-screen systems where Windows should\n be centered across all displays, this method returns the bounds of the\n entire display area.\n \n To get the usable bounds of a single display, use\n GraphicsConfiguration.getBounds() and\n Toolkit.getScreenInsets()."}]}