{"name": "Class PriorityBlockingQueue<E>", "module": "java.base", "package": "java.util.concurrent", "text": "An unbounded blocking queue that uses\n the same ordering rules as class PriorityQueue and supplies\n blocking retrieval operations.  While this queue is logically\n unbounded, attempted additions may fail due to resource exhaustion\n (causing OutOfMemoryError). This class does not permit\n null elements.  A priority queue relying on natural ordering also does not permit insertion of\n non-comparable objects (doing so results in\n ClassCastException).\n\n This class and its iterator implement all of the optional\n methods of the Collection and Iterator interfaces.\n The Iterator provided in method iterator() and the\n Spliterator provided in method spliterator() are not\n guaranteed to traverse the elements of the PriorityBlockingQueue in\n any particular order. If you need ordered traversal, consider using\n Arrays.sort(pq.toArray()).  Also, method drainTo can\n be used to remove some or all elements in priority order and\n place them in another collection.\n\n Operations on this class make no guarantees about the ordering\n of elements with equal priority. If you need to enforce an\n ordering, you can define custom classes or comparators that use a\n secondary key to break ties in primary priority values.  For\n example, here is a class that applies first-in-first-out\n tie-breaking to comparable elements. To use it, you would insert a\n new FIFOEntry(anEntry) instead of a plain entry object.\n\n  \n class FIFOEntry<E extends Comparable<? super E>>\n     implements Comparable<FIFOEntry<E>> {\n   static final AtomicLong seq = new AtomicLong(0);\n   final long seqNum;\n   final E entry;\n   public FIFOEntry(E entry) {\n     seqNum = seq.getAndIncrement();\n     this.entry = entry;\n   }\n   public E getEntry() { return entry; }\n   public int compareTo(FIFOEntry<E> other) {\n     int res = entry.compareTo(other.entry);\n     if (res == 0 && other.entry != this.entry)\n       res = (seqNum < other.seqNum ? -1 : 1);\n     return res;\n   }\n }\nThis class is a member of the\n \n Java Collections Framework.", "codes": ["public class PriorityBlockingQueue<E>\nextends AbstractQueue<E>\nimplements BlockingQueue<E>, Serializable"], "fields": [], "methods": [{"method_name": "add", "method_sig": "public boolean add (E e)", "description": "Inserts the specified element into this priority queue."}, {"method_name": "offer", "method_sig": "public boolean offer (E e)", "description": "Inserts the specified element into this priority queue.\n As the queue is unbounded, this method will never return false."}, {"method_name": "put", "method_sig": "public void put (E e)", "description": "Inserts the specified element into this priority queue.\n As the queue is unbounded, this method will never block."}, {"method_name": "offer", "method_sig": "public boolean offer (E e,\n                     long timeout,\n                     TimeUnit unit)", "description": "Inserts the specified element into this priority queue.\n As the queue is unbounded, this method will never block or\n return false."}, {"method_name": "comparator", "method_sig": "public Comparator<? super E> comparator()", "description": "Returns the comparator used to order the elements in this queue,\n or null if this queue uses the natural ordering of its elements."}, {"method_name": "remainingCapacity", "method_sig": "public int remainingCapacity()", "description": "Always returns Integer.MAX_VALUE because\n a PriorityBlockingQueue is not capacity constrained."}, {"method_name": "remove", "method_sig": "public boolean remove (Object o)", "description": "Removes a single instance of the specified element from this queue,\n if it is present.  More formally, removes an element e such\n that o.equals(e), if this queue contains one or more such\n elements.  Returns true if and only if this queue contained\n the specified element (or equivalently, if this queue changed as a\n result of the call)."}, {"method_name": "contains", "method_sig": "public boolean contains (Object o)", "description": "Returns true if this queue contains the specified element.\n More formally, returns true if and only if this queue contains\n at least one element e such that o.equals(e)."}, {"method_name": "drainTo", "method_sig": "public int drainTo (Collection<? super E> c)", "description": "Description copied from interface:\u00a0BlockingQueue"}, {"method_name": "drainTo", "method_sig": "public int drainTo (Collection<? super E> c,\n                   int maxElements)", "description": "Description copied from interface:\u00a0BlockingQueue"}, {"method_name": "clear", "method_sig": "public void clear()", "description": "Atomically removes all of the elements from this queue.\n The queue will be empty after this call returns."}, {"method_name": "toArray", "method_sig": "public Object[] toArray()", "description": "Returns an array containing all of the elements in this queue.\n The returned array elements are in no particular order.\n\n The returned array will be \"safe\" in that no references to it are\n maintained by this queue.  (In other words, this method must allocate\n a new array).  The caller is thus free to modify the returned array.\n\n This method acts as bridge between array-based and collection-based\n APIs."}, {"method_name": "toArray", "method_sig": "public <T> T[] toArray (T[] a)", "description": "Returns an array containing all of the elements in this queue; the\n runtime type of the returned array is that of the specified array.\n The returned array elements are in no particular order.\n If the queue fits in the specified array, it is returned therein.\n Otherwise, a new array is allocated with the runtime type of the\n specified array and the size of this queue.\n\n If this queue fits in the specified array with room to spare\n (i.e., the array has more elements than this queue), the element in\n the array immediately following the end of the queue is set to\n null.\n\n Like the toArray() method, this method acts as bridge between\n array-based and collection-based APIs.  Further, this method allows\n precise control over the runtime type of the output array, and may,\n under certain circumstances, be used to save allocation costs.\n\n Suppose x is a queue known to contain only strings.\n The following code can be used to dump the queue into a newly\n allocated array of String:\n\n  String[] y = x.toArray(new String[0]);\n\n Note that toArray(new Object[0]) is identical in function to\n toArray()."}, {"method_name": "iterator", "method_sig": "public Iterator<E> iterator()", "description": "Returns an iterator over the elements in this queue. The\n iterator does not return the elements in any particular order.\n\n The returned iterator is\n weakly consistent."}, {"method_name": "spliterator", "method_sig": "public Spliterator<E> spliterator()", "description": "Returns a Spliterator over the elements in this queue.\n The spliterator does not traverse elements in any particular order\n (the ORDERED characteristic is not reported).\n\n The returned spliterator is\n weakly consistent.\n\n The Spliterator reports Spliterator.SIZED and\n Spliterator.NONNULL."}, {"method_name": "removeIf", "method_sig": "public boolean removeIf (Predicate<? super E> filter)", "description": "Description copied from interface:\u00a0Collection"}, {"method_name": "removeAll", "method_sig": "public boolean removeAll (Collection<?> c)", "description": "Description copied from class:\u00a0AbstractCollection"}, {"method_name": "retainAll", "method_sig": "public boolean retainAll (Collection<?> c)", "description": "Description copied from class:\u00a0AbstractCollection"}, {"method_name": "forEach", "method_sig": "public void forEach (Consumer<? super E> action)", "description": "Description copied from interface:\u00a0Iterable"}]}