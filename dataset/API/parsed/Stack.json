{"name": "Class Stack<E>", "module": "java.base", "package": "java.util", "text": "The Stack class represents a last-in-first-out\n (LIFO) stack of objects. It extends class Vector with five\n operations that allow a vector to be treated as a stack. The usual\n push and pop operations are provided, as well as a\n method to peek at the top item on the stack, a method to test\n for whether the stack is empty, and a method to search\n the stack for an item and discover how far it is from the top.\n \n When a stack is first created, it contains no items.\n\n A more complete and consistent set of LIFO stack operations is\n provided by the Deque interface and its implementations, which\n should be used in preference to this class.  For example:\n    \n   Deque<Integer> stack = new ArrayDeque<Integer>();", "codes": ["public class Stack<E>\nextends Vector<E>"], "fields": [], "methods": [{"method_name": "push", "method_sig": "public E push (E item)", "description": "Pushes an item onto the top of this stack. This has exactly\n the same effect as:\n \n addElement(item)"}, {"method_name": "pop", "method_sig": "public E pop()", "description": "Removes the object at the top of this stack and returns that\n object as the value of this function."}, {"method_name": "peek", "method_sig": "public E peek()", "description": "Looks at the object at the top of this stack without removing it\n from the stack."}, {"method_name": "empty", "method_sig": "public boolean empty()", "description": "Tests if this stack is empty."}, {"method_name": "search", "method_sig": "public int search (Object o)", "description": "Returns the 1-based position where an object is on this stack.\n If the object o occurs as an item in this stack, this\n method returns the distance from the top of the stack of the\n occurrence nearest the top of the stack; the topmost item on the\n stack is considered to be at distance 1. The equals\n method is used to compare o to the\n items in this stack."}]}