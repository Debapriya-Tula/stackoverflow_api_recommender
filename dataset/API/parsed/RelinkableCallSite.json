{"name": "Interface RelinkableCallSite", "module": "jdk.dynalink", "package": "jdk.dynalink", "text": "Interface for call sites managed by a DynamicLinker. Users of\n Dynalink must use subclasses of CallSite that also implement this\n interface as their call site implementations. There is a readily usable\n SimpleRelinkableCallSite subclass that implements monomorphic inline\n caching strategy as well as ChainedCallSite that implements a\n polymorphic inline caching strategy and retains a chain of previously linked\n method handles. A relinkable call site will be managed by a\n DynamicLinker object after being associated with it using its\n DynamicLinker.link(RelinkableCallSite) method.", "codes": ["public interface RelinkableCallSite"], "fields": [], "methods": [{"method_name": "initialize", "method_sig": "void initialize (MethodHandle relinkAndInvoke)", "description": "Invoked by dynamic linker to initialize the relinkable call site by\n setting a relink-and-invoke method handle. The call site implementation\n is supposed to set this method handle as its target using\n CallSite.setTarget(MethodHandle). Relink-and-invoke is the\n initial method handle set by\n DynamicLinker.link(RelinkableCallSite) that will cause the call\n site to be relinked to an appropriate target on its first invocation\n based on its arguments, and that linked target will then be invoked\n (hence the name). This linking protocol effectively delays linking until\n the call site is invoked with actual arguments and thus ensures that\n linkers can make nuanced linking decisions based on those arguments and\n not just on the static method type of the call site."}, {"method_name": "getDescriptor", "method_sig": "CallSiteDescriptor getDescriptor()", "description": "Returns the descriptor for this call site."}, {"method_name": "relink", "method_sig": "void relink (GuardedInvocation guardedInvocation,\n            MethodHandle relinkAndInvoke)", "description": "This method will be called by the dynamic linker every time the call site\n is relinked (but see\n resetAndRelink(GuardedInvocation, MethodHandle) for an\n exception). It will be passed a GuardedInvocation that the call\n site should incorporate into its target method handle. When this method\n is called, the call site is allowed to keep other non-invalidated\n invocations around for implementation of polymorphic inline caches and\n compose them with this invocation to form its final target."}, {"method_name": "resetAndRelink", "method_sig": "void resetAndRelink (GuardedInvocation guardedInvocation,\n                    MethodHandle relinkAndInvoke)", "description": "This method will be called by the dynamic linker every time the call site\n is relinked and the linker wishes the call site to throw away any\n prior linkage state (that is how it differs from\n relink(GuardedInvocation, MethodHandle)). It will be passed a\n GuardedInvocation that the call site should use to build its new\n target method handle. When this method is called, the call site is\n discouraged from keeping any previous state, and is supposed to only\n link the current invocation."}]}