{"name": "Class ObjectInputStream", "module": "java.base", "package": "java.io", "text": "An ObjectInputStream deserializes primitive data and objects previously\n written using an ObjectOutputStream.\n\n Warning: Deserialization of untrusted data is inherently dangerous\n and should be avoided. Untrusted data should be carefully validated according to the\n \"Serialization and Deserialization\" section of the\n Secure Coding Guidelines for Java SE.\n Serialization Filtering describes best\n practices for defensive use of serial filters.\n \nObjectOutputStream and ObjectInputStream can provide an application with\n persistent storage for graphs of objects when used with a FileOutputStream\n and FileInputStream respectively.  ObjectInputStream is used to recover\n those objects previously serialized. Other uses include passing objects\n between hosts using a socket stream or for marshaling and unmarshaling\n arguments and parameters in a remote communication system.\n\n ObjectInputStream ensures that the types of all objects in the graph\n created from the stream match the classes present in the Java Virtual\n Machine.  Classes are loaded as required using the standard mechanisms.\n\n Only objects that support the java.io.Serializable or\n java.io.Externalizable interface can be read from streams.\n\n The method readObject is used to read an object from the\n stream.  Java's safe casting should be used to get the desired type.  In\n Java, strings and arrays are objects and are treated as objects during\n serialization. When read they need to be cast to the expected type.\n\n Primitive data types can be read from the stream using the appropriate\n method on DataInput.\n\n The default deserialization mechanism for objects restores the contents\n of each field to the value and type it had when it was written.  Fields\n declared as transient or static are ignored by the deserialization process.\n References to other objects cause those objects to be read from the stream\n as necessary.  Graphs of objects are restored correctly using a reference\n sharing mechanism.  New objects are always allocated when deserializing,\n which prevents existing objects from being overwritten.\n\n Reading an object is analogous to running the constructors of a new\n object.  Memory is allocated for the object and initialized to zero (NULL).\n No-arg constructors are invoked for the non-serializable classes and then\n the fields of the serializable classes are restored from the stream starting\n with the serializable class closest to java.lang.object and finishing with\n the object's most specific class.\n\n For example to read from a stream as written by the example in\n ObjectOutputStream:\n \n\n      FileInputStream fis = new FileInputStream(\"t.tmp\");\n      ObjectInputStream ois = new ObjectInputStream(fis);\n\n      int i = ois.readInt();\n      String today = (String) ois.readObject();\n      Date date = (Date) ois.readObject();\n\n      ois.close();\n \nClasses control how they are serialized by implementing either the\n java.io.Serializable or java.io.Externalizable interfaces.\n\n Implementing the Serializable interface allows object serialization to\n save and restore the entire state of the object and it allows classes to\n evolve between the time the stream is written and the time it is read.  It\n automatically traverses references between objects, saving and restoring\n entire graphs.\n\n Serializable classes that require special handling during the\n serialization and deserialization process should implement the following\n methods:\n\n \n private void writeObject(java.io.ObjectOutputStream stream)\n     throws IOException;\n private void readObject(java.io.ObjectInputStream stream)\n     throws IOException, ClassNotFoundException;\n private void readObjectNoData()\n     throws ObjectStreamException;\n \nThe readObject method is responsible for reading and restoring the state\n of the object for its particular class using data written to the stream by\n the corresponding writeObject method.  The method does not need to concern\n itself with the state belonging to its superclasses or subclasses.  State is\n restored by reading data from the ObjectInputStream for the individual\n fields and making assignments to the appropriate fields of the object.\n Reading primitive data types is supported by DataInput.\n\n Any attempt to read object data which exceeds the boundaries of the\n custom data written by the corresponding writeObject method will cause an\n OptionalDataException to be thrown with an eof field value of true.\n Non-object reads which exceed the end of the allotted data will reflect the\n end of data in the same way that they would indicate the end of the stream:\n bytewise reads will return -1 as the byte read or number of bytes read, and\n primitive reads will throw EOFExceptions.  If there is no corresponding\n writeObject method, then the end of default serialized data marks the end of\n the allotted data.\n\n Primitive and object read calls issued from within a readExternal method\n behave in the same manner--if the stream is already positioned at the end of\n data written by the corresponding writeExternal method, object reads will\n throw OptionalDataExceptions with eof set to true, bytewise reads will\n return -1, and primitive reads will throw EOFExceptions.  Note that this\n behavior does not hold for streams written with the old\n ObjectStreamConstants.PROTOCOL_VERSION_1 protocol, in which the\n end of data written by writeExternal methods is not demarcated, and hence\n cannot be detected.\n\n The readObjectNoData method is responsible for initializing the state of\n the object for its particular class in the event that the serialization\n stream does not list the given class as a superclass of the object being\n deserialized.  This may occur in cases where the receiving party uses a\n different version of the deserialized instance's class than the sending\n party, and the receiver's version extends classes that are not extended by\n the sender's version.  This may also occur if the serialization stream has\n been tampered; hence, readObjectNoData is useful for initializing\n deserialized objects properly despite a \"hostile\" or incomplete source\n stream.\n\n Serialization does not read or assign values to the fields of any object\n that does not implement the java.io.Serializable interface.  Subclasses of\n Objects that are not serializable can be serializable. In this case the\n non-serializable class must have a no-arg constructor to allow its fields to\n be initialized.  In this case it is the responsibility of the subclass to\n save and restore the state of the non-serializable class. It is frequently\n the case that the fields of that class are accessible (public, package, or\n protected) or that there are get and set methods that can be used to restore\n the state.\n\n The contents of the stream can be filtered during deserialization.\n If a filter is set\n on an ObjectInputStream, the ObjectInputFilter can check that\n the classes, array lengths, number of references in the stream, depth, and\n number of bytes consumed from the input stream are allowed and\n if not, can terminate deserialization.\n A process-wide filter\n can be configured that is applied to each ObjectInputStream unless replaced\n using setObjectInputFilter.\n\n Any exception that occurs while deserializing an object will be caught by\n the ObjectInputStream and abort the reading process.\n\n Implementing the Externalizable interface allows the object to assume\n complete control over the contents and format of the object's serialized\n form.  The methods of the Externalizable interface, writeExternal and\n readExternal, are called to save and restore the objects state.  When\n implemented by a class they can write and read their own state using all of\n the methods of ObjectOutput and ObjectInput.  It is the responsibility of\n the objects to handle any versioning that occurs.\n\n Enum constants are deserialized differently than ordinary serializable or\n externalizable objects.  The serialized form of an enum constant consists\n solely of its name; field values of the constant are not transmitted.  To\n deserialize an enum constant, ObjectInputStream reads the constant name from\n the stream; the deserialized constant is then obtained by calling the static\n method Enum.valueOf(Class, String) with the enum constant's\n base type and the received constant name as arguments.  Like other\n serializable or externalizable objects, enum constants can function as the\n targets of back references appearing subsequently in the serialization\n stream.  The process by which enum constants are deserialized cannot be\n customized: any class-specific readObject, readObjectNoData, and readResolve\n methods defined by enum types are ignored during deserialization.\n Similarly, any serialPersistentFields or serialVersionUID field declarations\n are also ignored--all enum types have a fixed serialVersionUID of 0L.", "codes": ["public class ObjectInputStream\nextends InputStream\nimplements ObjectInput, ObjectStreamConstants"], "fields": [], "methods": [{"method_name": "readObject", "method_sig": "public final Object readObject()\n                        throws IOException,\n                               ClassNotFoundException", "description": "Read an object from the ObjectInputStream.  The class of the object, the\n signature of the class, and the values of the non-transient and\n non-static fields of the class and all of its supertypes are read.\n Default deserializing for a class can be overridden using the writeObject\n and readObject methods.  Objects referenced by this object are read\n transitively so that a complete equivalent graph of objects is\n reconstructed by readObject.\n\n The root object is completely restored when all of its fields and the\n objects it references are completely restored.  At this point the object\n validation callbacks are executed in order based on their registered\n priorities. The callbacks are registered by objects (in the readObject\n special methods) as they are individually restored.\n\n The serialization filter, when not null, is invoked for\n each object (regular or class) read to reconstruct the root object.\n See setObjectInputFilter for details.\n\n Exceptions are thrown for problems with the InputStream and for\n classes that should not be deserialized.  All exceptions are fatal to\n the InputStream and leave it in an indeterminate state; it is up to the\n caller to ignore or recover the stream state."}, {"method_name": "readObjectOverride", "method_sig": "protected Object readObjectOverride()\n                             throws IOException,\n                                    ClassNotFoundException", "description": "This method is called by trusted subclasses of ObjectOutputStream that\n constructed ObjectOutputStream using the protected no-arg constructor.\n The subclass is expected to provide an override method with the modifier\n \"final\"."}, {"method_name": "readUnshared", "method_sig": "public Object readUnshared()\n                    throws IOException,\n                           ClassNotFoundException", "description": "Reads an \"unshared\" object from the ObjectInputStream.  This method is\n identical to readObject, except that it prevents subsequent calls to\n readObject and readUnshared from returning additional references to the\n deserialized instance obtained via this call.  Specifically:\n \nIf readUnshared is called to deserialize a back-reference (the\n       stream representation of an object which has been written\n       previously to the stream), an ObjectStreamException will be\n       thrown.\n\n   If readUnshared returns successfully, then any subsequent attempts\n       to deserialize back-references to the stream handle deserialized\n       by readUnshared will cause an ObjectStreamException to be thrown.\n \n Deserializing an object via readUnshared invalidates the stream handle\n associated with the returned object.  Note that this in itself does not\n always guarantee that the reference returned by readUnshared is unique;\n the deserialized object may define a readResolve method which returns an\n object visible to other parties, or readUnshared may return a Class\n object or enum constant obtainable elsewhere in the stream or through\n external means. If the deserialized object defines a readResolve method\n and the invocation of that method returns an array, then readUnshared\n returns a shallow clone of that array; this guarantees that the returned\n array object is unique and cannot be obtained a second time from an\n invocation of readObject or readUnshared on the ObjectInputStream,\n even if the underlying data stream has been manipulated.\n\n The serialization filter, when not null, is invoked for\n each object (regular or class) read to reconstruct the root object.\n See setObjectInputFilter for details.\n\n ObjectInputStream subclasses which override this method can only be\n constructed in security contexts possessing the\n \"enableSubclassImplementation\" SerializablePermission; any attempt to\n instantiate such a subclass without this permission will cause a\n SecurityException to be thrown."}, {"method_name": "defaultReadObject", "method_sig": "public void defaultReadObject()\n                       throws IOException,\n                              ClassNotFoundException", "description": "Read the non-static and non-transient fields of the current class from\n this stream.  This may only be called from the readObject method of the\n class being deserialized. It will throw the NotActiveException if it is\n called otherwise."}, {"method_name": "readFields", "method_sig": "public ObjectInputStream.GetField readFields()\n                                      throws IOException,\n                                             ClassNotFoundException", "description": "Reads the persistent fields from the stream and makes them available by\n name."}, {"method_name": "registerValidation", "method_sig": "public void registerValidation (ObjectInputValidation obj,\n                               int prio)\n                        throws NotActiveException,\n                               InvalidObjectException", "description": "Register an object to be validated before the graph is returned.  While\n similar to resolveObject these validations are called after the entire\n graph has been reconstituted.  Typically, a readObject method will\n register the object with the stream so that when all of the objects are\n restored a final set of validations can be performed."}, {"method_name": "resolveClass", "method_sig": "protected Class<?> resolveClass (ObjectStreamClass desc)\n                         throws IOException,\n                                ClassNotFoundException", "description": "Load the local class equivalent of the specified stream class\n description.  Subclasses may implement this method to allow classes to\n be fetched from an alternate source.\n\n The corresponding method in ObjectOutputStream is\n annotateClass.  This method will be invoked only once for\n each unique class in the stream.  This method can be implemented by\n subclasses to use an alternate loading mechanism but must return a\n Class object. Once returned, if the class is not an array\n class, its serialVersionUID is compared to the serialVersionUID of the\n serialized class, and if there is a mismatch, the deserialization fails\n and an InvalidClassException is thrown.\n\n The default implementation of this method in\n ObjectInputStream returns the result of calling\n \n     Class.forName(desc.getName(), false, loader)\n \n where loader is the first class loader on the current\n thread's stack (starting from the currently executing method) that is\n neither the platform\n class loader nor its ancestor; otherwise, loader is the\n platform class loader. If this call results in a\n ClassNotFoundException and the name of the passed\n ObjectStreamClass instance is the Java language keyword\n for a primitive type or void, then the Class object\n representing that primitive type or void will be returned\n (e.g., an ObjectStreamClass with the name\n \"int\" will be resolved to Integer.TYPE).\n Otherwise, the ClassNotFoundException will be thrown to\n the caller of this method."}, {"method_name": "resolveProxyClass", "method_sig": "protected Class<?> resolveProxyClass (String[] interfaces)\n                              throws IOException,\n                                     ClassNotFoundException", "description": "Returns a proxy class that implements the interfaces named in a proxy\n class descriptor; subclasses may implement this method to read custom\n data from the stream along with the descriptors for dynamic proxy\n classes, allowing them to use an alternate loading mechanism for the\n interfaces and the proxy class.\n\n This method is called exactly once for each unique proxy class\n descriptor in the stream.\n\n The corresponding method in ObjectOutputStream is\n annotateProxyClass.  For a given subclass of\n ObjectInputStream that overrides this method, the\n annotateProxyClass method in the corresponding subclass of\n ObjectOutputStream must write any data or objects read by\n this method.\n\n The default implementation of this method in\n ObjectInputStream returns the result of calling\n Proxy.getProxyClass with the list of Class\n objects for the interfaces that are named in the interfaces\n parameter.  The Class object for each interface name\n i is the value returned by calling\n \n     Class.forName(i, false, loader)\n \n where loader is the first class loader on the current\n thread's stack (starting from the currently executing method) that is\n neither the platform\n class loader nor its ancestor; otherwise, loader is the\n platform class loader.\n Unless any of the resolved interfaces are non-public, this same value\n of loader is also the class loader passed to\n Proxy.getProxyClass; if non-public interfaces are present,\n their class loader is passed instead (if more than one non-public\n interface class loader is encountered, an\n IllegalAccessError is thrown).\n If Proxy.getProxyClass throws an\n IllegalArgumentException, resolveProxyClass\n will throw a ClassNotFoundException containing the\n IllegalArgumentException."}, {"method_name": "resolveObject", "method_sig": "protected Object resolveObject (Object obj)\n                        throws IOException", "description": "This method will allow trusted subclasses of ObjectInputStream to\n substitute one object for another during deserialization. Replacing\n objects is disabled until enableResolveObject is called. The\n enableResolveObject method checks that the stream requesting to resolve\n object can be trusted. Every reference to serializable objects is passed\n to resolveObject.  To insure that the private state of objects is not\n unintentionally exposed only trusted streams may use resolveObject.\n\n This method is called after an object has been read but before it is\n returned from readObject.  The default resolveObject method just returns\n the same object.\n\n When a subclass is replacing objects it must insure that the\n substituted object is compatible with every field where the reference\n will be stored.  Objects whose type is not a subclass of the type of the\n field or array element abort the serialization by raising an exception\n and the object is not be stored.\n\n This method is called only once when each object is first\n encountered.  All subsequent references to the object will be redirected\n to the new object."}, {"method_name": "enableResolveObject", "method_sig": "protected boolean enableResolveObject (boolean enable)\n                               throws SecurityException", "description": "Enables the stream to do replacement of objects read from the stream. When\n enabled, the resolveObject(java.lang.Object) method is called for every object being\n deserialized.\n\n If object replacement is currently not enabled, and\n enable is true, and there is a security manager installed,\n this method first calls the security manager's\n checkPermission method with the\n SerializablePermission(\"enableSubstitution\") permission to\n ensure that the caller is permitted to enable the stream to do replacement\n of objects read from the stream."}, {"method_name": "readStreamHeader", "method_sig": "protected void readStreamHeader()\n                         throws IOException,\n                                StreamCorruptedException", "description": "The readStreamHeader method is provided to allow subclasses to read and\n verify their own stream headers. It reads and verifies the magic number\n and version number."}, {"method_name": "readClassDescriptor", "method_sig": "protected ObjectStreamClass readClassDescriptor()\n                                         throws IOException,\n                                                ClassNotFoundException", "description": "Read a class descriptor from the serialization stream.  This method is\n called when the ObjectInputStream expects a class descriptor as the next\n item in the serialization stream.  Subclasses of ObjectInputStream may\n override this method to read in class descriptors that have been written\n in non-standard formats (by subclasses of ObjectOutputStream which have\n overridden the writeClassDescriptor method).  By default,\n this method reads class descriptors according to the format defined in\n the Object Serialization specification."}, {"method_name": "read", "method_sig": "public int read()\n         throws IOException", "description": "Reads a byte of data. This method will block if no input is available."}, {"method_name": "read", "method_sig": "public int read (byte[] buf,\n                int off,\n                int len)\n         throws IOException", "description": "Reads into an array of bytes.  This method will block until some input\n is available. Consider using java.io.DataInputStream.readFully to read\n exactly 'length' bytes."}, {"method_name": "available", "method_sig": "public int available()\n              throws IOException", "description": "Returns the number of bytes that can be read without blocking."}, {"method_name": "close", "method_sig": "public void close()\n           throws IOException", "description": "Closes the input stream. Must be called to release any resources\n associated with the stream."}, {"method_name": "readBoolean", "method_sig": "public boolean readBoolean()\n                    throws IOException", "description": "Reads in a boolean."}, {"method_name": "readByte", "method_sig": "public byte readByte()\n              throws IOException", "description": "Reads an 8 bit byte."}, {"method_name": "readUnsignedByte", "method_sig": "public int readUnsignedByte()\n                     throws IOException", "description": "Reads an unsigned 8 bit byte."}, {"method_name": "readChar", "method_sig": "public char readChar()\n              throws IOException", "description": "Reads a 16 bit char."}, {"method_name": "readShort", "method_sig": "public short readShort()\n                throws IOException", "description": "Reads a 16 bit short."}, {"method_name": "readUnsignedShort", "method_sig": "public int readUnsignedShort()\n                      throws IOException", "description": "Reads an unsigned 16 bit short."}, {"method_name": "readInt", "method_sig": "public int readInt()\n            throws IOException", "description": "Reads a 32 bit int."}, {"method_name": "readLong", "method_sig": "public long readLong()\n              throws IOException", "description": "Reads a 64 bit long."}, {"method_name": "readFloat", "method_sig": "public float readFloat()\n                throws IOException", "description": "Reads a 32 bit float."}, {"method_name": "readDouble", "method_sig": "public double readDouble()\n                  throws IOException", "description": "Reads a 64 bit double."}, {"method_name": "readFully", "method_sig": "public void readFully (byte[] buf)\n               throws IOException", "description": "Reads bytes, blocking until all bytes are read."}, {"method_name": "readFully", "method_sig": "public void readFully (byte[] buf,\n                      int off,\n                      int len)\n               throws IOException", "description": "Reads bytes, blocking until all bytes are read."}, {"method_name": "skipBytes", "method_sig": "public int skipBytes (int len)\n              throws IOException", "description": "Skips bytes."}, {"method_name": "readLine", "method_sig": "@Deprecated\npublic String readLine()\n                throws IOException", "description": "Reads in a line that has been terminated by a \\n, \\r, \\r\\n or EOF."}, {"method_name": "readUTF", "method_sig": "public String readUTF()\n               throws IOException", "description": "Reads a String in\n modified UTF-8\n format."}, {"method_name": "getObjectInputFilter", "method_sig": "public final ObjectInputFilter getObjectInputFilter()", "description": "Returns the serialization filter for this stream.\n The serialization filter is the most recent filter set in\n setObjectInputFilter or\n the initial process-wide filter from\n ObjectInputFilter.Config.getSerialFilter."}, {"method_name": "setObjectInputFilter", "method_sig": "public final void setObjectInputFilter (ObjectInputFilter filter)", "description": "Set the serialization filter for the stream.\n The filter's checkInput method is called\n for each class and reference in the stream.\n The filter can check any or all of the class, the array length, the number\n of references, the depth of the graph, and the size of the input stream.\n The depth is the number of nested readObject\n calls starting with the reading of the root of the graph being deserialized\n and the current object being deserialized.\n The number of references is the cumulative number of objects and references\n to objects already read from the stream including the current object being read.\n The filter is invoked only when reading objects from the stream and for\n not primitives.\n \n If the filter returns Status.REJECTED,\n null or throws a RuntimeException,\n the active readObject or readUnshared\n throws InvalidClassException, otherwise deserialization\n continues uninterrupted.\n \n The serialization filter is initialized to the value of\n ObjectInputFilter.Config.getSerialFilter\n when the  ObjectInputStream is constructed and can be set\n to a custom filter only once."}]}