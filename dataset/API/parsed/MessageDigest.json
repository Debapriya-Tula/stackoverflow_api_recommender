{"name": "Class MessageDigest", "module": "java.base", "package": "java.security", "text": "This MessageDigest class provides applications the functionality of a\n message digest algorithm, such as SHA-1 or SHA-256.\n Message digests are secure one-way hash functions that take arbitrary-sized\n data and output a fixed-length hash value.\n\n A MessageDigest object starts out initialized. The data is\n processed through it using the update\n methods. At any point reset can be called\n to reset the digest. Once all the data to be updated has been\n updated, one of the digest methods should\n be called to complete the hash computation.\n\n The digest method can be called once for a given number\n of updates. After digest has been called, the MessageDigest\n object is reset to its initialized state.\n\n Implementations are free to implement the Cloneable interface.\n Client applications can test cloneability by attempting cloning\n and catching the CloneNotSupportedException:\n\n \n MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n\n try {\n     md.update(toChapter1);\n     MessageDigest tc1 = md.clone();\n     byte[] toChapter1Digest = tc1.digest();\n     md.update(toChapter2);\n     ...etc.\n } catch (CloneNotSupportedException cnse) {\n     throw new DigestException(\"couldn't make digest of partial content\");\n }\n \nNote that if a given implementation is not cloneable, it is\n still possible to compute intermediate digests by instantiating\n several instances, if the number of digests is known in advance.\n\n Note that this class is abstract and extends from\n MessageDigestSpi for historical reasons.\n Application developers should only take notice of the methods defined in\n this MessageDigest class; all the methods in\n the superclass are intended for cryptographic service providers who wish to\n supply their own implementations of message digest algorithms.\n\n  Every implementation of the Java platform is required to support\n the following standard MessageDigest algorithms:\n \nMD5\nSHA-1\nSHA-256\n\n These algorithms are described in the \n MessageDigest section of the\n Java Security Standard Algorithm Names Specification.\n Consult the release documentation for your implementation to see if any\n other algorithms are supported.", "codes": ["public abstract class MessageDigest\nextends MessageDigestSpi"], "fields": [], "methods": [{"method_name": "getInstance", "method_sig": "public static MessageDigest getInstance (String algorithm)\n                                 throws NoSuchAlgorithmException", "description": "Returns a MessageDigest object that implements the specified digest\n algorithm.\n\n  This method traverses the list of registered security Providers,\n starting with the most preferred Provider.\n A new MessageDigest object encapsulating the\n MessageDigestSpi implementation from the first\n Provider that supports the specified algorithm is returned.\n\n  Note that the list of registered providers may be retrieved via\n the Security.getProviders() method."}, {"method_name": "getInstance", "method_sig": "public static MessageDigest getInstance (String algorithm,\n                                        String provider)\n                                 throws NoSuchAlgorithmException,\n                                        NoSuchProviderException", "description": "Returns a MessageDigest object that implements the specified digest\n algorithm.\n\n  A new MessageDigest object encapsulating the\n MessageDigestSpi implementation from the specified provider\n is returned.  The specified provider must be registered\n in the security provider list.\n\n  Note that the list of registered providers may be retrieved via\n the Security.getProviders() method."}, {"method_name": "getInstance", "method_sig": "public static MessageDigest getInstance (String algorithm,\n                                        Provider provider)\n                                 throws NoSuchAlgorithmException", "description": "Returns a MessageDigest object that implements the specified digest\n algorithm.\n\n  A new MessageDigest object encapsulating the\n MessageDigestSpi implementation from the specified Provider\n object is returned.  Note that the specified Provider object\n does not have to be registered in the provider list."}, {"method_name": "getProvider", "method_sig": "public final Provider getProvider()", "description": "Returns the provider of this message digest object."}, {"method_name": "update", "method_sig": "public void update (byte input)", "description": "Updates the digest using the specified byte."}, {"method_name": "update", "method_sig": "public void update (byte[] input,\n                   int offset,\n                   int len)", "description": "Updates the digest using the specified array of bytes, starting\n at the specified offset."}, {"method_name": "update", "method_sig": "public void update (byte[] input)", "description": "Updates the digest using the specified array of bytes."}, {"method_name": "update", "method_sig": "public final void update (ByteBuffer input)", "description": "Update the digest using the specified ByteBuffer. The digest is\n updated using the input.remaining() bytes starting\n at input.position().\n Upon return, the buffer's position will be equal to its limit;\n its limit will not have changed."}, {"method_name": "digest", "method_sig": "public byte[] digest()", "description": "Completes the hash computation by performing final operations\n such as padding. The digest is reset after this call is made."}, {"method_name": "digest", "method_sig": "public int digest (byte[] buf,\n                  int offset,\n                  int len)\n           throws DigestException", "description": "Completes the hash computation by performing final operations\n such as padding. The digest is reset after this call is made."}, {"method_name": "digest", "method_sig": "public byte[] digest (byte[] input)", "description": "Performs a final update on the digest using the specified array\n of bytes, then completes the digest computation. That is, this\n method first calls update(input),\n passing the input array to the update method,\n then calls digest()."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a string representation of this message digest object."}, {"method_name": "isEqual", "method_sig": "public static boolean isEqual (byte[] digesta,\n                              byte[] digestb)", "description": "Compares two digests for equality. Two digests are equal if they have\n the same length and all bytes at corresponding positions are equal."}, {"method_name": "reset", "method_sig": "public void reset()", "description": "Resets the digest for further use."}, {"method_name": "getAlgorithm", "method_sig": "public final String getAlgorithm()", "description": "Returns a string that identifies the algorithm, independent of\n implementation details. The name should be a standard\n Java Security name (such as \"SHA-256\").\n See the MessageDigest section in the \n Java Security Standard Algorithm Names Specification\n for information about standard algorithm names."}, {"method_name": "getDigestLength", "method_sig": "public final int getDigestLength()", "description": "Returns the length of the digest in bytes, or 0 if this operation is\n not supported by the provider and the implementation is not cloneable."}, {"method_name": "clone", "method_sig": "public Object clone()\n             throws CloneNotSupportedException", "description": "Returns a clone if the implementation is cloneable."}]}