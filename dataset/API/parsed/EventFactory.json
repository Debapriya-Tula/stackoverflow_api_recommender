{"name": "Class EventFactory", "module": "jdk.jfr", "package": "jdk.jfr", "text": "Class for defining an event at runtime.\n \n It's highly recommended that the event is defined at compile time, if the\n field layout is known, so the Java Virtual Machine (JVM) can optimize the\n code, possibly remove all instrumentation if Flight Recorder is inactive or\n if the enabled setting for this event is set to false.\n \n To define an event at compile time, see Event.\n \n The following example shows how to implement a dynamic Event class.\n\n \n \n List<ValueDescriptor> fields = new ArrayList<>();\n List<AnnotationElement> messageAnnotations = Collections.singletonList(new AnnotationElement(Label.class, \"Message\"));\n fields.add(new ValueDescriptor(String.class, \"message\", messageAnnotations));\n List<AnnotationElement> numberAnnotations = Collections.singletonList(new AnnotationElement(Label.class, \"Number\"));\n fields.add(new ValueDescriptor(int.class, \"number\", numberAnnotations));\n\n String[] category = { \"Example\", \"Getting Started\" };\n List<AnnotationElement> eventAnnotations = new ArrayList<>();\n eventAnnotations.add(new AnnotationElement(Name.class, \"com.example.HelloWorld\"));\n eventAnnotations.add(new AnnotationElement(Label.class, \"Hello World\"));\n eventAnnotations.add(new AnnotationElement(Description.class, \"Helps programmer getting started\"));\n eventAnnotations.add(new AnnotationElement(Category.class, category));\n\n EventFactory f = EventFactory.create(eventAnnotations, fields);\n\n Event event = f.newEvent();\n event.set(0, \"hello, world!\");\n event.set(1, 4711);\n event.commit();\n \n ", "codes": ["public final class EventFactory\nextends Object"], "fields": [], "methods": [{"method_name": "create", "method_sig": "public static EventFactory create (List<AnnotationElement> annotationElements,\n                                  List<ValueDescriptor> fields)", "description": "Creates an EventFactory object.\n \n The order of the value descriptors specifies the index to use when setting\n event values."}, {"method_name": "newEvent", "method_sig": "public Event newEvent()", "description": "Instantiates an event, so it can be populated with data and written to the\n Flight Recorder system.\n \n Use the Event.set(int, Object) method to set a value."}, {"method_name": "getEventType", "method_sig": "public EventType getEventType()", "description": "Returns the event type that is associated with this event factory."}, {"method_name": "register", "method_sig": "public void register()", "description": "Registers an unregistered event.\n \n By default, the event class associated with this event factory is registered\n when the event factory is created, unless the event has the\n Registered annotation.\n \n A registered event class can write data to Flight Recorder and event metadata\n can be obtained by invoking FlightRecorder.getEventTypes().\n \n If the event class associated with this event factory is already registered,\n the call to this method is ignored."}, {"method_name": "unregister", "method_sig": "public void unregister()", "description": "Unregisters the event that is associated with this event factory.\n \n A unregistered event class can't write data to Flight Recorder and event\n metadata can't be obtained by invoking\n FlightRecorder.getEventTypes().\n \n If the event class associated with this event factory is not already\n registered, the call to this method is ignored."}]}