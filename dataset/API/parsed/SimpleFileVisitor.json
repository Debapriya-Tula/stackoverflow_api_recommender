{"name": "Class SimpleFileVisitor<T>", "module": "java.base", "package": "java.nio.file", "text": "A simple visitor of files with default behavior to visit all files and to\n re-throw I/O errors.\n\n  Methods in this class may be overridden subject to their general contract.", "codes": ["public class SimpleFileVisitor<T>\nextends Object\nimplements FileVisitor<T>"], "fields": [], "methods": [{"method_name": "preVisitDirectory", "method_sig": "public FileVisitResult preVisitDirectory (T dir,\n                                         BasicFileAttributes attrs)\n                                  throws IOException", "description": "Invoked for a directory before entries in the directory are visited.\n\n  Unless overridden, this method returns CONTINUE."}, {"method_name": "visitFile", "method_sig": "public FileVisitResult visitFile (T file,\n                                 BasicFileAttributes attrs)\n                          throws IOException", "description": "Invoked for a file in a directory.\n\n  Unless overridden, this method returns CONTINUE."}, {"method_name": "visitFileFailed", "method_sig": "public FileVisitResult visitFileFailed (T file,\n                                       IOException exc)\n                                throws IOException", "description": "Invoked for a file that could not be visited.\n\n  Unless overridden, this method re-throws the I/O exception that prevented\n the file from being visited."}, {"method_name": "postVisitDirectory", "method_sig": "public FileVisitResult postVisitDirectory (T dir,\n                                          IOException exc)\n                                   throws IOException", "description": "Invoked for a directory after entries in the directory, and all of their\n descendants, have been visited.\n\n  Unless overridden, this method returns CONTINUE if the directory iteration completes without an I/O exception;\n otherwise this method re-throws the I/O exception that caused the iteration\n of the directory to terminate prematurely."}]}