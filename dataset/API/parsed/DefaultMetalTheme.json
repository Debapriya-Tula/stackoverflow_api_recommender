{"name": "Class DefaultMetalTheme", "module": "java.desktop", "package": "javax.swing.plaf.metal", "text": "A concrete implementation of MetalTheme providing\n the original look of the Java Look and Feel, code-named \"Steel\". Refer\n to MetalLookAndFeel.setCurrentTheme(javax.swing.plaf.metal.MetalTheme) for details on changing\n the default theme.\n \n All colors returned by DefaultMetalTheme are completely\n opaque.\n\n Font Style\nDefaultMetalTheme uses bold fonts for many controls.  To make all\n controls (with the exception of the internal frame title bars and\n client decorated frame title bars) use plain fonts you can do either of\n the following:\n \nSet the system property swing.boldMetal to\n     false.  For example,\n     java\u00a0-Dswing.boldMetal=false\u00a0MyApp.\n Set the defaults property swing.boldMetal to\n     Boolean.FALSE.  For example:\n     UIManager.put(\"swing.boldMetal\",\u00a0Boolean.FALSE);\n\n The defaults property swing.boldMetal, if set,\n takes precedence over the system property of the same name. After\n setting this defaults property you need to re-install\n MetalLookAndFeel, as well as update the UI\n of any previously created widgets. Otherwise the results are undefined.\n The following illustrates how to do this:\n \n   // turn off bold fonts\n   UIManager.put(\"swing.boldMetal\", Boolean.FALSE);\n\n   // re-install the Metal Look and Feel\n   UIManager.setLookAndFeel(new MetalLookAndFeel());\n\n   // Update the ComponentUIs for all Components. This\n   // needs to be invoked for all windows.\n   SwingUtilities.updateComponentTreeUI(rootComponent);\n \n\nWarning:\n Serialized objects of this class will not be compatible with\n future Swing releases. The current serialization support is\n appropriate for short term storage or RMI between applications running\n the same version of Swing.  As of 1.4, support for long term storage\n of all JavaBeans\u2122\n has been added to the java.beans package.\n Please see XMLEncoder.", "codes": ["public class DefaultMetalTheme\nextends MetalTheme"], "fields": [], "methods": [{"method_name": "getName", "method_sig": "public String getName()", "description": "Returns the name of this theme. This returns \"Steel\"."}, {"method_name": "getPrimary1", "method_sig": "protected ColorUIResource getPrimary1()", "description": "Returns the primary 1 color. This returns a color with rgb values\n of 102, 102, and 153, respectively."}, {"method_name": "getPrimary2", "method_sig": "protected ColorUIResource getPrimary2()", "description": "Returns the primary 2 color. This returns a color with rgb values\n of 153, 153, 204, respectively."}, {"method_name": "getPrimary3", "method_sig": "protected ColorUIResource getPrimary3()", "description": "Returns the primary 3 color. This returns a color with rgb values\n 204, 204, 255, respectively."}, {"method_name": "getSecondary1", "method_sig": "protected ColorUIResource getSecondary1()", "description": "Returns the secondary 1 color. This returns a color with rgb values\n 102, 102, and 102, respectively."}, {"method_name": "getSecondary2", "method_sig": "protected ColorUIResource getSecondary2()", "description": "Returns the secondary 2 color. This returns a color with rgb values\n 153, 153, and 153, respectively."}, {"method_name": "getSecondary3", "method_sig": "protected ColorUIResource getSecondary3()", "description": "Returns the secondary 3 color. This returns a color with rgb values\n 204, 204, and 204, respectively."}, {"method_name": "getControlTextFont", "method_sig": "public FontUIResource getControlTextFont()", "description": "Returns the control text font. This returns Dialog, 12pt. If\n plain fonts have been enabled as described in \n font style, the font style is plain. Otherwise the font style is\n bold."}, {"method_name": "getSystemTextFont", "method_sig": "public FontUIResource getSystemTextFont()", "description": "Returns the system text font. This returns Dialog, 12pt, plain."}, {"method_name": "getUserTextFont", "method_sig": "public FontUIResource getUserTextFont()", "description": "Returns the user text font. This returns Dialog, 12pt, plain."}, {"method_name": "getMenuTextFont", "method_sig": "public FontUIResource getMenuTextFont()", "description": "Returns the menu text font. This returns Dialog, 12pt. If\n plain fonts have been enabled as described in \n font style, the font style is plain. Otherwise the font style is\n bold."}, {"method_name": "getWindowTitleFont", "method_sig": "public FontUIResource getWindowTitleFont()", "description": "Returns the window title font. This returns Dialog, 12pt, bold."}, {"method_name": "getSubTextFont", "method_sig": "public FontUIResource getSubTextFont()", "description": "Returns the sub-text font. This returns Dialog, 10pt, plain."}]}