{"name": "Class Timestamp", "module": "java.sql", "package": "java.sql", "text": "A thin wrapper around java.util.Date that allows\n the JDBC API to identify this as an SQL TIMESTAMP value.\n It adds the ability\n to hold the SQL TIMESTAMP fractional seconds value, by allowing\n the specification of fractional seconds to a precision of nanoseconds.\n A Timestamp also provides formatting and\n parsing operations to support the JDBC escape syntax for timestamp values.\n\n The precision of a Timestamp object is calculated to be either:\n \n19 , which is the number of characters in yyyy-mm-dd hh:mm:ss\n   20 + s , which is the number\n of characters in the yyyy-mm-dd hh:mm:ss.[fff...] and s represents  the scale of the given Timestamp,\n its fractional seconds precision.\n\nNote: This type is a composite of a java.util.Date and a\n separate nanoseconds value. Only integral seconds are stored in the\n java.util.Date component. The fractional seconds - the nanos - are\n separate.  The Timestamp.equals(Object) method never returns\n true when passed an object\n that isn't an instance of java.sql.Timestamp,\n because the nanos component of a date is unknown.\n As a result, the Timestamp.equals(Object)\n method is not symmetric with respect to the\n java.util.Date.equals(Object)\n method.  Also, the hashCode method uses the underlying\n java.util.Date\n implementation and therefore does not include nanos in its computation.\n \n Due to the differences between the Timestamp class\n and the java.util.Date\n class mentioned above, it is recommended that code not view\n Timestamp values generically as an instance of\n java.util.Date.  The\n inheritance relationship between Timestamp\n and java.util.Date really\n denotes implementation inheritance, and not type inheritance.", "codes": ["public class Timestamp\nextends Date"], "fields": [], "methods": [{"method_name": "setTime", "method_sig": "public void setTime (long time)", "description": "Sets this Timestamp object to represent a point in time that is\n time milliseconds after January 1, 1970 00:00:00 GMT."}, {"method_name": "getTime", "method_sig": "public long getTime()", "description": "Returns the number of milliseconds since January 1, 1970, 00:00:00 GMT\n represented by this Timestamp object."}, {"method_name": "valueOf", "method_sig": "public static Timestamp valueOf (String s)", "description": "Converts a String object in JDBC timestamp escape format to a\n Timestamp value."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Formats a timestamp in JDBC timestamp escape format.\n         yyyy-mm-dd hh:mm:ss.fffffffff,\n where fffffffff indicates nanoseconds."}, {"method_name": "getNanos", "method_sig": "public int getNanos()", "description": "Gets this Timestamp object's nanos value."}, {"method_name": "setNanos", "method_sig": "public void setNanos (int n)", "description": "Sets this Timestamp object's nanos field\n to the given value."}, {"method_name": "equals", "method_sig": "public boolean equals (Timestamp ts)", "description": "Tests to see if this Timestamp object is\n equal to the given Timestamp object."}, {"method_name": "equals", "method_sig": "public boolean equals (Object ts)", "description": "Tests to see if this Timestamp object is\n equal to the given object.\n\n This version of the method equals has been added\n to fix the incorrect\n signature of Timestamp.equals(Timestamp) and to preserve backward\n compatibility with existing class files.\n\n Note: This method is not symmetric with respect to the\n equals(Object) method in the base class."}, {"method_name": "before", "method_sig": "public boolean before (Timestamp ts)", "description": "Indicates whether this Timestamp object is\n earlier than the given Timestamp object."}, {"method_name": "after", "method_sig": "public boolean after (Timestamp ts)", "description": "Indicates whether this Timestamp object is\n later than the given Timestamp object."}, {"method_name": "compareTo", "method_sig": "public int compareTo (Timestamp ts)", "description": "Compares this Timestamp object to the given\n Timestamp object."}, {"method_name": "compareTo", "method_sig": "public int compareTo (Date o)", "description": "Compares this Timestamp object to the given\n Date object."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Returns a hash code value for this object. The result is the\n exclusive OR of the two halves of the primitive long\n value returned by the Date.getTime()\n method. That is, the hash code is the value of the expression:\n \n (int)(this.getTime()^(this.getTime() >>> 32))\n \n\n The hashCode method uses the underlying java.util.Date\n implementation and therefore does not include nanos in its computation."}, {"method_name": "valueOf", "method_sig": "public static Timestamp valueOf (LocalDateTime dateTime)", "description": "Obtains an instance of Timestamp from a LocalDateTime\n object, with the same year, month, day of month, hours, minutes,\n seconds and nanos date-time value as the provided LocalDateTime.\n \n The provided LocalDateTime is interpreted as the local\n date-time in the local time zone."}, {"method_name": "toLocalDateTime", "method_sig": "public LocalDateTime toLocalDateTime()", "description": "Converts this Timestamp object to a LocalDateTime.\n \n The conversion creates a LocalDateTime that represents the\n same year, month, day of month, hours, minutes, seconds and nanos\n date-time value as this Timestamp in the local time zone."}, {"method_name": "from", "method_sig": "public static Timestamp from (Instant instant)", "description": "Obtains an instance of Timestamp from an Instant object.\n \nInstant can store points on the time-line further in the future\n and further in the past than Date. In this scenario, this method\n will throw an exception."}, {"method_name": "toInstant", "method_sig": "public Instant toInstant()", "description": "Converts this Timestamp object to an Instant.\n \n The conversion creates an Instant that represents the same\n point on the time-line as this Timestamp."}]}