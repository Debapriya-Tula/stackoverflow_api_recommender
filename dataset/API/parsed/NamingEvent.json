{"name": "Class NamingEvent", "module": "java.naming", "package": "javax.naming.event", "text": "This class represents an event fired by a naming/directory service.\n\n The NamingEvent's state consists of\n \nThe event source: the EventContext which fired this event.\n The event type.\n The new binding: information about the object after the change.\n The old binding: information about the object before the change.\n Change information: information about the change\n that triggered this event; usually service provider-specific or server-specific\n information.\n \n\n Note that the event source is always the same EventContext\ninstance  that the listener has registered with.\n Furthermore, the names of the bindings in\n the NamingEvent are always relative to that instance.\n For example, suppose a listener makes the following registration:\n\n     NamespaceChangeListener listener = ...;\n     src.addNamingListener(\"x\", SUBTREE_SCOPE, listener);\n\n When an object named \"x/y\" is subsequently deleted, the corresponding\n NamingEvent (evt) must contain:\n\n     evt.getEventContext() == src\n     evt.getOldBinding().getName().equals(\"x/y\")\n\n\n Care must be taken when multiple threads are accessing the same\n EventContext concurrently.\n See the\n package description\n for more information on threading issues.", "codes": ["public class NamingEvent\nextends EventObject"], "fields": [{"field_name": "OBJECT_ADDED", "field_sig": "public static final\u00a0int OBJECT_ADDED", "description": "Naming event type for indicating that a new object has been added.\n The value of this constant is 0."}, {"field_name": "OBJECT_REMOVED", "field_sig": "public static final\u00a0int OBJECT_REMOVED", "description": "Naming event type for indicating that an object has been removed.\n The value of this constant is 1."}, {"field_name": "OBJECT_RENAMED", "field_sig": "public static final\u00a0int OBJECT_RENAMED", "description": "Naming event type for indicating that an object has been renamed.\n Note that some services might fire multiple events for a single\n logical rename operation. For example, the rename operation might\n be implemented by adding a binding with the new name and removing\n the old binding.\n\n The old/new binding in NamingEvent may be null if the old\n name or new name is outside of the scope for which the listener\n has registered.\n\n When an interior node in the namespace tree has been renamed, the\n topmost node which is part of the listener's scope should used to generate\n a rename event. The extent to which this can be supported is\n provider-specific. For example, a service might generate rename\n notifications for all descendants of the changed interior node and the\n corresponding provider might not be able to prevent those\n notifications from being propagated to the listeners.\n\n The value of this constant is 2."}, {"field_name": "OBJECT_CHANGED", "field_sig": "public static final\u00a0int OBJECT_CHANGED", "description": "Naming event type for indicating that an object has been changed.\n The changes might include the object's attributes, or the object itself.\n Note that some services might fire multiple events for a single\n modification. For example, the modification might\n be implemented by first removing the old binding and adding\n a new binding containing the same name but a different object.\n\n The value of this constant is 3."}, {"field_name": "changeInfo", "field_sig": "protected\u00a0Object changeInfo", "description": "Contains information about the change that generated this event."}, {"field_name": "type", "field_sig": "protected\u00a0int type", "description": "Contains the type of this event."}, {"field_name": "oldBinding", "field_sig": "protected\u00a0Binding oldBinding", "description": "Contains information about the object before the change."}, {"field_name": "newBinding", "field_sig": "protected\u00a0Binding newBinding", "description": "Contains information about the object after the change."}], "methods": [{"method_name": "getType", "method_sig": "public int getType()", "description": "Returns the type of this event."}, {"method_name": "getEventContext", "method_sig": "public EventContext getEventContext()", "description": "Retrieves the event source that fired this event.\n This returns the same object as EventObject.getSource().\n\n If the result of this method is used to access the\n event source, for example, to look up the object or get its attributes,\n then it needs to be locked  because implementations of Context\n are not guaranteed to be thread-safe\n (and EventContext is a subinterface of Context).\n See the\n package description\n for more information on threading issues."}, {"method_name": "getOldBinding", "method_sig": "public Binding getOldBinding()", "description": "Retrieves the binding of the object before the change.\n\n The binding must be nonnull if the object existed before the change\n relative to the source context (getEventContext()).\n That is, it must be nonnull for OBJECT_REMOVED and\n OBJECT_CHANGED.\n For OBJECT_RENAMED, it is null if the object before the rename\n is outside of the scope for which the listener has registered interest;\n it is nonnull if the object is inside the scope before the rename.\n\n The name in the binding is to be resolved relative\n to the event source getEventContext().\n The object returned by Binding.getObject() may be null if\n such information is unavailable."}, {"method_name": "getNewBinding", "method_sig": "public Binding getNewBinding()", "description": "Retrieves the binding of the object after the change.\n\n The binding must be nonnull if the object existed after the change\n relative to the source context (getEventContext()).\n That is, it must be nonnull for OBJECT_ADDED and\n OBJECT_CHANGED. For OBJECT_RENAMED,\n it is null if the object after the rename is outside the scope for\n which the listener registered interest; it is nonnull if the object\n is inside the scope after the rename.\n\n The name in the binding is to be resolved relative\n to the event source getEventContext().\n The object returned by Binding.getObject() may be null if\n such information is unavailable."}, {"method_name": "getChangeInfo", "method_sig": "public Object getChangeInfo()", "description": "Retrieves the change information for this event.\n The value of the change information is service-specific. For example,\n it could be an ID that identifies the change in a change log on the server."}, {"method_name": "dispatch", "method_sig": "public void dispatch (NamingListener listener)", "description": "Invokes the appropriate listener method on this event.\n The default implementation of\n this method handles the following event types:\n OBJECT_ADDED, OBJECT_REMOVED,\n OBJECT_RENAMED, OBJECT_CHANGED.\n\n The listener method is executed in the same thread\n as this method.  See the\n package description\n for more information on threading issues."}]}