{"name": "Class DragSourceDragEvent", "module": "java.desktop", "package": "java.awt.dnd", "text": "The DragSourceDragEvent is\n delivered from the DragSourceContextPeer,\n via the DragSourceContext, to the DragSourceListener\n registered with that DragSourceContext and with its associated\n DragSource.\n \n The DragSourceDragEvent reports the target drop action\n and the user drop action that reflect the current state of\n the drag operation.\n \nTarget drop action is one of DnDConstants that represents\n the drop action selected by the current drop target if this drop action is\n supported by the drag source or DnDConstants.ACTION_NONE if this\n drop action is not supported by the drag source.\n \nUser drop action depends on the drop actions supported by the drag\n source and the drop action selected by the user. The user can select a drop\n action by pressing modifier keys during the drag operation:\n \n   Ctrl + Shift -> ACTION_LINK\n   Ctrl         -> ACTION_COPY\n   Shift        -> ACTION_MOVE\n \n If the user selects a drop action, the user drop action is one of\n DnDConstants that represents the selected drop action if this\n drop action is supported by the drag source or\n DnDConstants.ACTION_NONE if this drop action is not supported\n by the drag source.\n \n If the user doesn't select a drop action, the set of\n DnDConstants that represents the set of drop actions supported\n by the drag source is searched for DnDConstants.ACTION_MOVE,\n then for DnDConstants.ACTION_COPY, then for\n DnDConstants.ACTION_LINK and the user drop action is the\n first constant found. If no constant is found the user drop action\n is DnDConstants.ACTION_NONE.", "codes": ["public class DragSourceDragEvent\nextends DragSourceEvent"], "fields": [], "methods": [{"method_name": "getTargetActions", "method_sig": "public int getTargetActions()", "description": "This method returns the target drop action."}, {"method_name": "getGestureModifiers", "method_sig": "public int getGestureModifiers()", "description": "This method returns an int representing\n the current state of the input device modifiers\n associated with the user's gesture. Typically these\n would be mouse buttons or keyboard modifiers.\n \n If the modifiers passed to the constructor\n are invalid, this method returns them unchanged."}, {"method_name": "getGestureModifiersEx", "method_sig": "public int getGestureModifiersEx()", "description": "This method returns an int representing\n the current state of the input device extended modifiers\n associated with the user's gesture.\n See InputEvent.getModifiersEx()\n\n If the modifiers passed to the constructor\n are invalid, this method returns them unchanged."}, {"method_name": "getUserAction", "method_sig": "public int getUserAction()", "description": "This method returns the user drop action."}, {"method_name": "getDropAction", "method_sig": "public int getDropAction()", "description": "This method returns the logical intersection of\n the target drop action and the set of drop actions supported by\n the drag source."}]}