{"name": "Class LinkRef", "module": "java.naming", "package": "javax.naming", "text": "This class represents a Reference whose contents is a name, called the link name,\n that is bound to an atomic name in a context.\n\n The name is a URL, or a name to be resolved relative to the initial\n context, or if the first character of the name is \".\", the name\n is relative to the context in which the link is bound.\n\n Normal resolution of names in context operations always follow links.\n Resolution of the link name itself may cause resolution to pass through\n other  links. This gives rise to the possibility of a cycle of links whose\n resolution could not terminate normally. As a simple means to avoid such\n non-terminating resolutions, service providers may define limits on the\n number of links that may be involved in any single operation invoked\n by the caller.\n\n A LinkRef contains a single StringRefAddr, whose type is \"LinkAddress\",\n and whose contents is the link name. The class name field of the\n Reference is that of this (LinkRef) class.\n\n LinkRef is bound to a name using the normal Context.bind()/rebind(), and\n DirContext.bind()/rebind(). Context.lookupLink() is used to retrieve the link\n itself if the terminal atomic name is bound to a link.\n\n Many naming systems support a native notion of link that may be used\n within the naming system itself. JNDI does not specify whether\n there is any relationship between such native links and JNDI links.\n\n A LinkRef instance is not synchronized against concurrent access by multiple\n threads. Threads that need to access a LinkRef instance concurrently should\n synchronize amongst themselves and provide the necessary locking.", "codes": ["public class LinkRef\nextends Reference"], "fields": [], "methods": [{"method_name": "getLinkName", "method_sig": "public String getLinkName()\n                   throws NamingException", "description": "Retrieves the name of this link."}]}