{"name": "Class DragSourceAdapter", "module": "java.desktop", "package": "java.awt.dnd", "text": "An abstract adapter class for receiving drag source events. The methods in\n this class are empty. This class exists only as a convenience for creating\n listener objects.\n \n Extend this class to create a DragSourceEvent listener\n and override the methods for the events of interest. (If you implement the\n DragSourceListener interface, you have to define all of\n the methods in it. This abstract class defines null methods for them\n all, so you only have to define methods for events you care about.)\n \n Create a listener object using the extended class and then register it with\n a DragSource. When the drag enters, moves over, or exits\n a drop site, when the drop action changes, and when the drag ends, the\n relevant method in the listener object is invoked, and the\n DragSourceEvent is passed to it.\n \n The drop site is associated with the previous dragEnter()\n invocation if the latest invocation of dragEnter() on this\n adapter corresponds to that drop site and is not followed by a\n dragExit() invocation on this adapter.", "codes": ["public abstract class DragSourceAdapter\nextends Object\nimplements DragSourceListener, DragSourceMotionListener"], "fields": [], "methods": [{"method_name": "dragEnter", "method_sig": "public void dragEnter (DragSourceDragEvent dsde)", "description": "Called as the cursor's hotspot enters a platform-dependent drop site.\n This method is invoked when all the following conditions are true:\n \nThe cursor's hotspot enters the operable part of\n a platform-dependent drop site.\n The drop site is active.\n The drop site accepts the drag.\n "}, {"method_name": "dragOver", "method_sig": "public void dragOver (DragSourceDragEvent dsde)", "description": "Called as the cursor's hotspot moves over a platform-dependent drop site.\n This method is invoked when all the following conditions are true:\n \nThe cursor's hotspot has moved, but still intersects the\n operable part of the drop site associated with the previous\n dragEnter() invocation.\n The drop site is still active.\n The drop site accepts the drag.\n "}, {"method_name": "dragMouseMoved", "method_sig": "public void dragMouseMoved (DragSourceDragEvent dsde)", "description": "Called whenever the mouse is moved during a drag operation."}, {"method_name": "dropActionChanged", "method_sig": "public void dropActionChanged (DragSourceDragEvent dsde)", "description": "Called when the user has modified the drop gesture.\n This method is invoked when the state of the input\n device(s) that the user is interacting with changes.\n Such devices are typically the mouse buttons or keyboard\n modifiers that the user is interacting with."}, {"method_name": "dragExit", "method_sig": "public void dragExit (DragSourceEvent dse)", "description": "Called as the cursor's hotspot exits a platform-dependent drop site.\n This method is invoked when any of the following conditions are true:\n \nThe cursor's hotspot no longer intersects the operable part\n of the drop site associated with the previous dragEnter() invocation.\n \n OR\n \nThe drop site associated with the previous dragEnter() invocation\n is no longer active.\n \n OR\n \n The drop site associated with the previous dragEnter() invocation\n has rejected the drag.\n "}, {"method_name": "dragDropEnd", "method_sig": "public void dragDropEnd (DragSourceDropEvent dsde)", "description": "This method is invoked to signify that the Drag and Drop\n operation is complete. The getDropSuccess() method of\n the DragSourceDropEvent can be used to\n determine the termination state. The getDropAction() method\n returns the operation that the drop site selected\n to apply to the Drop operation. Once this method is complete, the\n current DragSourceContext and\n associated resources become invalid."}]}