{"name": "Class SecureRandom", "module": "java.base", "package": "java.security", "text": "This class provides a cryptographically strong random number\n generator (RNG).\n\n A cryptographically strong random number minimally complies with the\n statistical random number generator tests specified in\n \nFIPS 140-2, Security Requirements for Cryptographic Modules,\n section 4.9.1.\n Additionally, SecureRandom must produce non-deterministic output.\n Therefore any seed material passed to a SecureRandom object must be\n unpredictable, and all SecureRandom output sequences must be\n cryptographically strong, as described in\n \nRFC 4086: Randomness Requirements for Security.\n\n  Many SecureRandom implementations are in the form of a\n pseudo-random number generator (PRNG, also known as deterministic random\n bits generator or DRBG), which means they use a deterministic algorithm\n to produce a pseudo-random sequence from a random seed.\n Other implementations may produce true random numbers,\n and yet others may use a combination of both techniques.\n\n A caller obtains a SecureRandom instance via the\n no-argument constructor or one of the getInstance methods.\n For example:\n\n \n SecureRandom r1 = new SecureRandom();\n SecureRandom r2 = SecureRandom.getInstance(\"NativePRNG\");\n SecureRandom r3 = SecureRandom.getInstance(\"DRBG\",\n         DrbgParameters.instantiation(128, RESEED_ONLY, null));\n\n The third statement above returns a SecureRandom object of the\n specific algorithm supporting the specific instantiate parameters. The\n implementation's effective instantiated parameters must match this minimum\n request but is not necessarily the same. For example, even if the request\n does not require a certain feature, the actual instantiation can provide\n the feature. An implementation may lazily instantiate a SecureRandom\n until it's actually used, but the effective instantiate parameters must be\n determined right after it's created and getParameters() should\n always return the same result unchanged.\n\n  Typical callers of SecureRandom invoke the following methods\n to retrieve random bytes:\n\n \n SecureRandom random = new SecureRandom();\n byte[] bytes = new byte[20];\n random.nextBytes(bytes);\n\n Callers may also invoke the generateSeed(int) method\n to generate a given number of seed bytes (to seed other random number\n generators, for example):\n\n \n byte[] seed = random.generateSeed(20);\n\n A newly created PRNG SecureRandom object is not seeded (except\n if it is created by SecureRandom(byte[])). The first call to\n nextBytes will force it to seed itself from an implementation-\n specific entropy source. This self-seeding will not occur if setSeed\n was previously called.\n\n  A SecureRandom can be reseeded at any time by calling the\n reseed or setSeed method. The reseed method\n reads entropy input from its entropy source to reseed itself.\n The setSeed method requires the caller to provide the seed.\n\n  Please note that reseed may not be supported by all\n SecureRandom implementations.\n\n  Some SecureRandom implementations may accept a\n SecureRandomParameters parameter in its\n nextBytes(byte[], SecureRandomParameters) and\n reseed(SecureRandomParameters) methods to further\n control the behavior of the methods.\n\n  Note: Depending on the implementation, the generateSeed,\n reseed and nextBytes methods may block as entropy is being\n gathered, for example, if the entropy source is /dev/random on various\n Unix-like operating systems.\n\n  Thread safety \nSecureRandom objects are safe for use by multiple concurrent threads.", "codes": ["public class SecureRandom\nextends Random"], "fields": [], "methods": [{"method_name": "getInstance", "method_sig": "public static SecureRandom getInstance (String algorithm)\n                                throws NoSuchAlgorithmException", "description": "Returns a SecureRandom object that implements the specified\n Random Number Generator (RNG) algorithm.\n\n  This method traverses the list of registered security Providers,\n starting with the most preferred Provider.\n A new SecureRandom object encapsulating the\n SecureRandomSpi implementation from the first\n Provider that supports the specified algorithm is returned.\n\n  Note that the list of registered providers may be retrieved via\n the Security.getProviders() method."}, {"method_name": "getInstance", "method_sig": "public static SecureRandom getInstance (String algorithm,\n                                       String provider)\n                                throws NoSuchAlgorithmException,\n                                       NoSuchProviderException", "description": "Returns a SecureRandom object that implements the specified\n Random Number Generator (RNG) algorithm.\n\n  A new SecureRandom object encapsulating the\n SecureRandomSpi implementation from the specified provider\n is returned.  The specified provider must be registered\n in the security provider list.\n\n  Note that the list of registered providers may be retrieved via\n the Security.getProviders() method."}, {"method_name": "getInstance", "method_sig": "public static SecureRandom getInstance (String algorithm,\n                                       Provider provider)\n                                throws NoSuchAlgorithmException", "description": "Returns a SecureRandom object that implements the specified\n Random Number Generator (RNG) algorithm.\n\n  A new SecureRandom object encapsulating the\n SecureRandomSpi implementation from the specified Provider\n object is returned.  Note that the specified Provider object\n does not have to be registered in the provider list."}, {"method_name": "getInstance", "method_sig": "public static SecureRandom getInstance (String algorithm,\n                                       SecureRandomParameters params)\n                                throws NoSuchAlgorithmException", "description": "Returns a SecureRandom object that implements the specified\n Random Number Generator (RNG) algorithm and supports the specified\n SecureRandomParameters request.\n\n  This method traverses the list of registered security Providers,\n starting with the most preferred Provider.\n A new SecureRandom object encapsulating the\n SecureRandomSpi implementation from the first\n Provider that supports the specified algorithm and the specified\n SecureRandomParameters is returned.\n\n  Note that the list of registered providers may be retrieved via\n the Security.getProviders() method."}, {"method_name": "getInstance", "method_sig": "public static SecureRandom getInstance (String algorithm,\n                                       SecureRandomParameters params,\n                                       String provider)\n                                throws NoSuchAlgorithmException,\n                                       NoSuchProviderException", "description": "Returns a SecureRandom object that implements the specified\n Random Number Generator (RNG) algorithm and supports the specified\n SecureRandomParameters request.\n\n  A new SecureRandom object encapsulating the\n SecureRandomSpi implementation from the specified provider\n is returned.  The specified provider must be registered\n in the security provider list.\n\n  Note that the list of registered providers may be retrieved via\n the Security.getProviders() method."}, {"method_name": "getInstance", "method_sig": "public static SecureRandom getInstance (String algorithm,\n                                       SecureRandomParameters params,\n                                       Provider provider)\n                                throws NoSuchAlgorithmException", "description": "Returns a SecureRandom object that implements the specified\n Random Number Generator (RNG) algorithm and supports the specified\n SecureRandomParameters request.\n\n  A new SecureRandom object encapsulating the\n SecureRandomSpi implementation from the specified\n Provider object is returned.  Note that the specified\n Provider object does not have to be registered in the\n provider list."}, {"method_name": "getProvider", "method_sig": "public final Provider getProvider()", "description": "Returns the provider of this SecureRandom object."}, {"method_name": "getAlgorithm", "method_sig": "public String getAlgorithm()", "description": "Returns the name of the algorithm implemented by this\n SecureRandom object."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a Human-readable string representation of this\n SecureRandom."}, {"method_name": "getParameters", "method_sig": "public SecureRandomParameters getParameters()", "description": "Returns the effective SecureRandomParameters for this\n SecureRandom instance.\n \n The returned value can be different from the\n SecureRandomParameters object passed into a getInstance\n method, but it cannot change during the lifetime of this\n SecureRandom object.\n \n A caller can use the returned value to find out what features this\n SecureRandom supports."}, {"method_name": "setSeed", "method_sig": "public void setSeed (byte[] seed)", "description": "Reseeds this random object with the given seed. The seed supplements,\n rather than replaces, the existing seed. Thus, repeated calls are\n guaranteed never to reduce randomness.\n \n A PRNG SecureRandom will not seed itself automatically if\n setSeed is called before any nextBytes or reseed\n calls. The caller should make sure that the seed argument\n contains enough entropy for the security of this SecureRandom."}, {"method_name": "setSeed", "method_sig": "public void setSeed (long seed)", "description": "Reseeds this random object, using the eight bytes contained\n in the given long seed. The given seed supplements,\n rather than replaces, the existing seed. Thus, repeated calls\n are guaranteed never to reduce randomness.\n\n This method is defined for compatibility with\n java.util.Random."}, {"method_name": "nextBytes", "method_sig": "public void nextBytes (byte[] bytes)", "description": "Generates a user-specified number of random bytes."}, {"method_name": "nextBytes", "method_sig": "public void nextBytes (byte[] bytes,\n                      SecureRandomParameters params)", "description": "Generates a user-specified number of random bytes with\n additional parameters."}, {"method_name": "next", "method_sig": "protected final int next (int numBits)", "description": "Generates an integer containing the user-specified number of\n pseudo-random bits (right justified, with leading zeros).  This\n method overrides a java.util.Random method, and serves\n to provide a source of random bits to all of the methods inherited\n from that class (for example, nextInt,\n nextLong, and nextFloat)."}, {"method_name": "getSeed", "method_sig": "public static byte[] getSeed (int numBytes)", "description": "Returns the given number of seed bytes, computed using the seed\n generation algorithm that this class uses to seed itself.  This\n call may be used to seed other random number generators.\n\n This method is only included for backwards compatibility.\n The caller is encouraged to use one of the alternative\n getInstance methods to obtain a SecureRandom object, and\n then call the generateSeed method to obtain seed bytes\n from that object."}, {"method_name": "generateSeed", "method_sig": "public byte[] generateSeed (int numBytes)", "description": "Returns the given number of seed bytes, computed using the seed\n generation algorithm that this class uses to seed itself.  This\n call may be used to seed other random number generators."}, {"method_name": "getInstanceStrong", "method_sig": "public static SecureRandom getInstanceStrong()\n                                      throws NoSuchAlgorithmException", "description": "Returns a SecureRandom object that was selected by using\n the algorithms/providers specified in the \n securerandom.strongAlgorithms Security property.\n \n Some situations require strong random values, such as when\n creating high-value/long-lived secrets like RSA public/private\n keys.  To help guide applications in selecting a suitable strong\n SecureRandom implementation, Java distributions\n include a list of known strong SecureRandom\n implementations in the securerandom.strongAlgorithms\n Security property.\n \n Every implementation of the Java platform is required to\n support at least one strong SecureRandom implementation."}, {"method_name": "reseed", "method_sig": "public void reseed()", "description": "Reseeds this SecureRandom with entropy input read from its\n entropy source."}, {"method_name": "reseed", "method_sig": "public void reseed (SecureRandomParameters params)", "description": "Reseeds this SecureRandom with entropy input read from its\n entropy source with additional parameters.\n \n Note that entropy is obtained from an entropy source. While\n some data in params may contain entropy, its main usage is to\n provide diversity."}]}