{"name": "Class AlgorithmParameterGenerator", "module": "java.base", "package": "java.security", "text": "The AlgorithmParameterGenerator class is used to generate a\n set of\n parameters to be used with a certain algorithm. Parameter generators\n are constructed using the getInstance factory methods\n (static methods that return instances of a given class).\n\n The object that will generate the parameters can be initialized\n in two different ways: in an algorithm-independent manner, or in an\n algorithm-specific manner:\n\n \nThe algorithm-independent approach uses the fact that all parameter\n generators share the concept of a \"size\" and a\n source of randomness. The measure of size is universally shared\n by all algorithm parameters, though it is interpreted differently\n for different algorithms. For example, in the case of parameters for\n the DSA algorithm, \"size\" corresponds to the size\n of the prime modulus (in bits).\n When using this approach, algorithm-specific parameter generation\n values - if any - default to some standard values, unless they can be\n derived from the specified size.\n\n The other approach initializes a parameter generator object\n using algorithm-specific semantics, which are represented by a set of\n algorithm-specific parameter generation values. To generate\n Diffie-Hellman system parameters, for example, the parameter generation\n values usually\n consist of the size of the prime modulus and the size of the\n random exponent, both specified in number of bits.\n \nIn case the client does not explicitly initialize the\n AlgorithmParameterGenerator (via a call to an init method),\n each provider must supply (and document) a default initialization.\n See the Keysize Restriction sections of the\n JDK Providers\n document for information on the AlgorithmParameterGenerator defaults\n used by JDK providers.\n However, note that defaults may vary across different providers.\n Additionally, the default value for a provider may change in a future\n version. Therefore, it is recommended to explicitly initialize the\n AlgorithmParameterGenerator instead of relying on provider-specific defaults.\n\n  Every implementation of the Java platform is required to support the\n following standard AlgorithmParameterGenerator algorithms and\n keysizes in parentheses:\n \nDiffieHellman (1024, 2048)\nDSA (1024, 2048)\n\n These algorithms are described in the \n AlgorithmParameterGenerator section of the\n Java Security Standard Algorithm Names Specification.\n Consult the release documentation for your implementation to see if any\n other algorithms are supported.", "codes": ["public class AlgorithmParameterGenerator\nextends Object"], "fields": [], "methods": [{"method_name": "getAlgorithm", "method_sig": "public final String getAlgorithm()", "description": "Returns the standard name of the algorithm this parameter\n generator is associated with."}, {"method_name": "getInstance", "method_sig": "public static AlgorithmParameterGenerator getInstance (String algorithm)\n                                               throws NoSuchAlgorithmException", "description": "Returns an AlgorithmParameterGenerator object for generating\n a set of parameters to be used with the specified algorithm.\n\n  This method traverses the list of registered security Providers,\n starting with the most preferred Provider.\n A new AlgorithmParameterGenerator object encapsulating the\n AlgorithmParameterGeneratorSpi implementation from the first\n Provider that supports the specified algorithm is returned.\n\n  Note that the list of registered providers may be retrieved via\n the Security.getProviders() method."}, {"method_name": "getInstance", "method_sig": "public static AlgorithmParameterGenerator getInstance (String algorithm,\n                                                      String provider)\n                                               throws NoSuchAlgorithmException,\n                                                      NoSuchProviderException", "description": "Returns an AlgorithmParameterGenerator object for generating\n a set of parameters to be used with the specified algorithm.\n\n  A new AlgorithmParameterGenerator object encapsulating the\n AlgorithmParameterGeneratorSpi implementation from the specified provider\n is returned.  The specified provider must be registered\n in the security provider list.\n\n  Note that the list of registered providers may be retrieved via\n the Security.getProviders() method."}, {"method_name": "getInstance", "method_sig": "public static AlgorithmParameterGenerator getInstance (String algorithm,\n                                                      Provider provider)\n                                               throws NoSuchAlgorithmException", "description": "Returns an AlgorithmParameterGenerator object for generating\n a set of parameters to be used with the specified algorithm.\n\n  A new AlgorithmParameterGenerator object encapsulating the\n AlgorithmParameterGeneratorSpi implementation from the specified Provider\n object is returned.  Note that the specified Provider object\n does not have to be registered in the provider list."}, {"method_name": "getProvider", "method_sig": "public final Provider getProvider()", "description": "Returns the provider of this algorithm parameter generator object."}, {"method_name": "init", "method_sig": "public final void init (int size)", "description": "Initializes this parameter generator for a certain size.\n To create the parameters, the SecureRandom\n implementation of the highest-priority installed provider is used as\n the source of randomness.\n (If none of the installed providers supply an implementation of\n SecureRandom, a system-provided source of randomness is\n used.)"}, {"method_name": "init", "method_sig": "public final void init (int size,\n                       SecureRandom random)", "description": "Initializes this parameter generator for a certain size and source\n of randomness."}, {"method_name": "init", "method_sig": "public final void init (AlgorithmParameterSpec genParamSpec)\n                throws InvalidAlgorithmParameterException", "description": "Initializes this parameter generator with a set of algorithm-specific\n parameter generation values.\n To generate the parameters, the SecureRandom\n implementation of the highest-priority installed provider is used as\n the source of randomness.\n (If none of the installed providers supply an implementation of\n SecureRandom, a system-provided source of randomness is\n used.)"}, {"method_name": "init", "method_sig": "public final void init (AlgorithmParameterSpec genParamSpec,\n                       SecureRandom random)\n                throws InvalidAlgorithmParameterException", "description": "Initializes this parameter generator with a set of algorithm-specific\n parameter generation values."}, {"method_name": "generateParameters", "method_sig": "public final AlgorithmParameters generateParameters()", "description": "Generates the parameters."}]}