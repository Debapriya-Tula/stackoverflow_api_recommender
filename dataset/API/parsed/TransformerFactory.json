{"name": "Class TransformerFactory", "module": "java.xml", "package": "javax.xml.transform", "text": "A TransformerFactory instance can be used to create\n Transformer and\n Templates objects.\n\n The system property that determines which Factory implementation\n to create is named \"javax.xml.transform.TransformerFactory\".\n This property names a concrete subclass of the\n TransformerFactory abstract class. If the property is not\n defined, a platform default is be used.", "codes": ["public abstract class TransformerFactory\nextends Object"], "fields": [], "methods": [{"method_name": "newDefaultInstance", "method_sig": "public static TransformerFactory newDefaultInstance()", "description": "Creates a new instance of the TransformerFactory builtin\n system-default implementation."}, {"method_name": "newInstance", "method_sig": "public static TransformerFactory newInstance()\n                                      throws TransformerFactoryConfigurationError", "description": "Obtain a new instance of a TransformerFactory.\n This static method creates a new factory instance.\n \n This method uses the following ordered lookup procedure to determine\n the TransformerFactory implementation class to load:\n \n\n Use the javax.xml.transform.TransformerFactory system\n property.\n \n\n\n Use the configuration file \"jaxp.properties\". The file is in standard\n Properties format and typically located in the\n conf directory of the Java installation. It contains the fully qualified\n name of the implementation class with the key being the system property\n defined above.\n \n The jaxp.properties file is read only once by the JAXP implementation\n and its values are then cached for future use.  If the file does not exist\n when the first attempt is made to read from it, no further attempts are\n made to check for its existence.  It is not possible to change the value\n of any property in jaxp.properties after it has been read for the first time.\n \n\n\n Use the service-provider loading facility, defined by the\n   ServiceLoader class, to attempt to locate and load an\n   implementation of the service using the default loading mechanism:\n   the service-provider loading facility will use the current thread's context class loader\n   to attempt to load the service. If the context class\n   loader is null, the system class loader will be used.\n \n\n\n   Otherwise, the system-default\n   implementation is returned.\n \n\n\n Once an application has obtained a reference to a\n TransformerFactory it can use the factory to configure\n and obtain transformer instances."}, {"method_name": "newInstance", "method_sig": "public static TransformerFactory newInstance (String factoryClassName,\n                                             ClassLoader classLoader)\n                                      throws TransformerFactoryConfigurationError", "description": "Obtain a new instance of a TransformerFactory from factory class name.\n This function is useful when there are multiple providers in the classpath.\n It gives more control to the application as it can specify which provider\n should be loaded.\n\n Once an application has obtained a reference to a\n TransformerFactory it can use the factory to configure\n and obtain transformer instances.\n\n Tip for Trouble-shooting\nSetting the jaxp.debug system property will cause\n this method to print a lot of debug messages\n to System.err about what it is doing and where it is looking at.\n\n  If you have problems try:\n \n java -Djaxp.debug=1 YourProgram ....\n "}, {"method_name": "newTransformer", "method_sig": "public abstract Transformer newTransformer (Source source)\n                                    throws TransformerConfigurationException", "description": "Process the Source into a Transformer\nObject.  The Source is an XSLT document that\n conforms to \n XSL Transformations (XSLT) Version 1.0.  Care must\n be taken not to use this Transformer in multiple\n Threads running concurrently.\n Different TransformerFactories can be used concurrently by\n different Threads."}, {"method_name": "newTransformer", "method_sig": "public abstract Transformer newTransformer()\n                                    throws TransformerConfigurationException", "description": "Create a new Transformer that performs a copy\n of the Source to the Result.\n i.e. the \"identity transform\"."}, {"method_name": "newTemplates", "method_sig": "public abstract Templates newTemplates (Source source)\n                                throws TransformerConfigurationException", "description": "Process the Source into a Templates object, which is a\n a compiled representation of the source. This Templates object\n may then be used concurrently across multiple threads.  Creating\n a Templates object allows the TransformerFactory to do detailed\n performance optimization of transformation instructions, without\n penalizing runtime transformation."}, {"method_name": "getAssociatedStylesheet", "method_sig": "public abstract Source getAssociatedStylesheet (Source source,\n                                               String media,\n                                               String title,\n                                               String charset)\n                                        throws TransformerConfigurationException", "description": "Get the stylesheet specification(s) associated with the\n XML Source document via the\n \n xml-stylesheet processing instruction that match the given criteria.\n Note that it is possible to return several stylesheets, in which case\n they are applied as if they were a list of imports or cascades in a\n single stylesheet."}, {"method_name": "setURIResolver", "method_sig": "public abstract void setURIResolver (URIResolver resolver)", "description": "Set an object that is used by default during the transformation\n to resolve URIs used in document(), xsl:import, or xsl:include."}, {"method_name": "getURIResolver", "method_sig": "public abstract URIResolver getURIResolver()", "description": "Get the object that is used by default during the transformation\n to resolve URIs used in document(), xsl:import, or xsl:include."}, {"method_name": "setFeature", "method_sig": "public abstract void setFeature (String name,\n                                boolean value)\n                         throws TransformerConfigurationException", "description": "Set a feature for this TransformerFactory and Transformers\n or Templates created by this factory.\n\n \n Feature names are fully qualified URIs.\n Implementations may define their own features.\n An TransformerConfigurationException is thrown if this TransformerFactory or the\n Transformers or Templates it creates cannot support the feature.\n It is possible for an TransformerFactory to expose a feature value but be unable to change its state.\n\n All implementations are required to support the XMLConstants.FEATURE_SECURE_PROCESSING feature.\n When the feature is:\n \n\ntrue: the implementation will limit XML processing to conform to implementation limits\n     and behave in a secure fashion as defined by the implementation.\n     Examples include resolving user defined style sheets and functions.\n     If XML processing is limited for security reasons, it will be reported via a call to the registered\n     ErrorListener.fatalError(TransformerException exception).\n     See setErrorListener(ErrorListener listener).\n   \n\nfalse: the implementation will processing XML according to the XML specifications without\n     regard to possible implementation limits.\n   \n"}, {"method_name": "getFeature", "method_sig": "public abstract boolean getFeature (String name)", "description": "Look up the value of a feature.\n\n \n Feature names are fully qualified URIs.\n Implementations may define their own features.\n false is returned if this TransformerFactory or the\n Transformers or Templates it creates cannot support the feature.\n It is possible for an TransformerFactory to expose a feature value but be unable to change its state."}, {"method_name": "setAttribute", "method_sig": "public abstract void setAttribute (String name,\n                                  Object value)", "description": "Allows the user to set specific attributes on the underlying\n implementation.  An attribute in this context is defined to\n be an option that the implementation provides.\n An IllegalArgumentException is thrown if the underlying\n implementation doesn't recognize the attribute.\n \n All implementations that implement JAXP 1.5 or newer are required to\n support the XMLConstants.ACCESS_EXTERNAL_DTD  and\n XMLConstants.ACCESS_EXTERNAL_STYLESHEET properties.\n\n \n\n\n      Access to external DTDs in the source file is restricted to the protocols\n      specified by the XMLConstants.ACCESS_EXTERNAL_DTD property.\n      If access is denied during transformation due to the restriction of this property,\n      TransformerException will be thrown by\n      Transformer.transform(Source, Result).\n\n      \n      Access to external DTDs in the stylesheet is restricted to the protocols\n      specified by the XMLConstants.ACCESS_EXTERNAL_DTD property.\n      If access is denied during the creation of a new transformer due to the\n      restriction of this property,\n      TransformerConfigurationException will be thrown\n      by the newTransformer(Source) method.\n\n      \n      Access to external reference set by the stylesheet processing instruction,\n      Import and Include element is restricted to the protocols specified by the\n      XMLConstants.ACCESS_EXTERNAL_STYLESHEET property.\n      If access is denied during the creation of a new transformer due to the\n      restriction of this property,\n      TransformerConfigurationException will be thrown\n      by the newTransformer(Source) method.\n\n      \n      Access to external document through XSLT document function is restricted\n      to the protocols specified by the property. If access is denied during\n      the transformation due to the restriction of this property,\n      TransformerException will be thrown by the\n      Transformer.transform(Source, Result) method.\n\n   \n"}, {"method_name": "getAttribute", "method_sig": "public abstract Object getAttribute (String name)", "description": "Allows the user to retrieve specific attributes on the underlying\n implementation.\n An IllegalArgumentException is thrown if the underlying\n implementation doesn't recognize the attribute."}, {"method_name": "setErrorListener", "method_sig": "public abstract void setErrorListener (ErrorListener listener)", "description": "Set the error event listener for the TransformerFactory, which\n is used for the processing of transformation instructions,\n and not for the transformation itself.\n An IllegalArgumentException is thrown if the\n ErrorListener listener is null."}, {"method_name": "getErrorListener", "method_sig": "public abstract ErrorListener getErrorListener()", "description": "Get the error event handler for the TransformerFactory."}]}