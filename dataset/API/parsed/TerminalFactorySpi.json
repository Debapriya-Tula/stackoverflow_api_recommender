{"name": "Class TerminalFactorySpi", "module": "java.smartcardio", "package": "javax.smartcardio", "text": "The TerminalFactorySpi class defines the service provider interface.\n Applications do not access this class directly, instead see\n TerminalFactory.\n\n Service providers that want to write a new implementation should define\n a concrete subclass of TerminalFactorySpi with a constructor that takes\n an Object as parameter. That class needs to be registered\n in a Provider. The engine\n type is\n TerminalFactory.\n Service providers also need to implement subclasses of the abstract classes\n CardTerminals, CardTerminal, Card,\n and CardChannel.\n\n For example:\n file MyProvider.java:\n\n package com.somedomain.card;\n\n import java.security.Provider;\n\n public class MyProvider extends Provider {\n     public MyProvider() {\n         super(\"MyProvider\", 1.0d, \"Smart Card Example\");\n         put(\"TerminalFactory.MyType\", \"com.somedomain.card.MySpi\");\n     }\n }\n\nfile MySpi.java\n\n package com.somedomain.card;\n\n import javax.smartcardio.*;\n\n public class MySpi extends TerminalFactoySpi {\n      public MySpi(Object parameter) {\n          // initialize as appropriate\n      }\n      protected CardTerminals engineTerminals() {\n          // add implementation code here\n      }\n }\n ", "codes": ["public abstract class TerminalFactorySpi\nextends Object"], "fields": [], "methods": [{"method_name": "engineTerminals", "method_sig": "protected abstract CardTerminals engineTerminals()", "description": "Returns the CardTerminals created by this factory."}]}