{"name": "Class Raster", "module": "java.desktop", "package": "java.awt.image", "text": "A class representing a rectangular array of pixels.  A Raster\n encapsulates a DataBuffer that stores the sample values and a\n SampleModel that describes how to locate a given sample value in a\n DataBuffer.\n \n A Raster defines values for pixels occupying a particular\n rectangular area of the plane, not necessarily including (0, 0).\n The rectangle, known as the Raster's bounding rectangle and\n available by means of the getBounds method, is defined by minX,\n minY, width, and height values.  The minX and minY values define\n the coordinate of the upper left corner of the Raster.  References\n to pixels outside of the bounding rectangle may result in an\n exception being thrown, or may result in references to unintended\n elements of the Raster's associated DataBuffer.  It is the user's\n responsibility to avoid accessing such pixels.\n \n A SampleModel describes how samples of a Raster\n are stored in the primitive array elements of a DataBuffer.\n Samples may be stored one per data element, as in a\n PixelInterleavedSampleModel or BandedSampleModel, or packed several to\n an element, as in a SinglePixelPackedSampleModel or\n MultiPixelPackedSampleModel.  The SampleModel is also\n controls whether samples are sign extended, allowing unsigned\n data to be stored in signed Java data types such as byte, short, and\n int.\n \n Although a Raster may live anywhere in the plane, a SampleModel\n makes use of a simple coordinate system that starts at (0, 0).  A\n Raster therefore contains a translation factor that allows pixel\n locations to be mapped between the Raster's coordinate system and\n that of the SampleModel.  The translation from the SampleModel\n coordinate system to that of the Raster may be obtained by the\n getSampleModelTranslateX and getSampleModelTranslateY methods.\n \n A Raster may share a DataBuffer with another Raster either by\n explicit construction or by the use of the createChild and\n createTranslatedChild methods.  Rasters created by these methods\n can return a reference to the Raster they were created from by\n means of the getParent method.  For a Raster that was not\n constructed by means of a call to createTranslatedChild or\n createChild, getParent will return null.\n \n The createTranslatedChild method returns a new Raster that\n shares all of the data of the current Raster, but occupies a\n bounding rectangle of the same width and height but with a\n different starting point.  For example, if the parent Raster\n occupied the region (10, 10) to (100, 100), and the translated\n Raster was defined to start at (50, 50), then pixel (20, 20) of the\n parent and pixel (60, 60) of the child occupy the same location in\n the DataBuffer shared by the two Rasters.  In the first case, (-10,\n -10) should be added to a pixel coordinate to obtain the\n corresponding SampleModel coordinate, and in the second case (-50,\n -50) should be added.\n \n The translation between a parent and child Raster may be\n determined by subtracting the child's sampleModelTranslateX and\n sampleModelTranslateY values from those of the parent.\n \n The createChild method may be used to create a new Raster\n occupying only a subset of its parent's bounding rectangle\n (with the same or a translated coordinate system) or\n with a subset of the bands of its parent.\n \n All constructors are protected.  The correct way to create a\n Raster is to use one of the static create methods defined in this\n class.  These methods create instances of Raster that use the\n standard Interleaved, Banded, and Packed SampleModels and that may\n be processed more efficiently than a Raster created by combining\n an externally generated SampleModel and DataBuffer.", "codes": ["public class Raster\nextends Object"], "fields": [{"field_name": "sampleModel", "field_sig": "protected\u00a0SampleModel sampleModel", "description": "The SampleModel that describes how pixels from this Raster\n are stored in the DataBuffer."}, {"field_name": "dataBuffer", "field_sig": "protected\u00a0DataBuffer dataBuffer", "description": "The DataBuffer that stores the image data."}, {"field_name": "minX", "field_sig": "protected\u00a0int minX", "description": "The X coordinate of the upper-left pixel of this Raster."}, {"field_name": "minY", "field_sig": "protected\u00a0int minY", "description": "The Y coordinate of the upper-left pixel of this Raster."}, {"field_name": "width", "field_sig": "protected\u00a0int width", "description": "The width of this Raster."}, {"field_name": "height", "field_sig": "protected\u00a0int height", "description": "The height of this Raster."}, {"field_name": "sampleModelTranslateX", "field_sig": "protected\u00a0int sampleModelTranslateX", "description": "The X translation from the coordinate space of the\n Raster's SampleModel to that of the Raster."}, {"field_name": "sampleModelTranslateY", "field_sig": "protected\u00a0int sampleModelTranslateY", "description": "The Y translation from the coordinate space of the\n Raster's SampleModel to that of the Raster."}, {"field_name": "numBands", "field_sig": "protected\u00a0int numBands", "description": "The number of bands in the Raster."}, {"field_name": "numDataElements", "field_sig": "protected\u00a0int numDataElements", "description": "The number of DataBuffer data elements per pixel."}, {"field_name": "parent", "field_sig": "protected\u00a0Raster parent", "description": "The parent of this Raster, or null."}], "methods": [{"method_name": "createInterleavedRaster", "method_sig": "public static WritableRaster createInterleavedRaster (int dataType,\n                                                     int w,\n                                                     int h,\n                                                     int bands,\n                                                     Point location)", "description": "Creates a Raster based on a PixelInterleavedSampleModel with the\n specified data type, width, height, and number of bands.\n\n  The upper left corner of the Raster is given by the\n location argument.  If location is null, (0, 0) will be used.\n The dataType parameter should be one of the enumerated values\n defined in the DataBuffer class.\n\n  Note that interleaved DataBuffer.TYPE_INT\n Rasters are not supported.  To create a 1-band Raster of type\n DataBuffer.TYPE_INT, use\n Raster.createPackedRaster().\n  The only dataTypes supported currently are TYPE_BYTE\n and TYPE_USHORT."}, {"method_name": "createInterleavedRaster", "method_sig": "public static WritableRaster createInterleavedRaster (int dataType,\n                                                     int w,\n                                                     int h,\n                                                     int scanlineStride,\n                                                     int pixelStride,\n                                                     int[] bandOffsets,\n                                                     Point location)", "description": "Creates a Raster based on a PixelInterleavedSampleModel with the\n specified data type, width, height, scanline stride, pixel\n stride, and band offsets.  The number of bands is inferred from\n bandOffsets.length.\n\n  The upper left corner of the Raster is given by the\n location argument.  If location is null, (0, 0) will be used.\n The dataType parameter should be one of the enumerated values\n defined in the DataBuffer class.\n\n  Note that interleaved DataBuffer.TYPE_INT\n Rasters are not supported.  To create a 1-band Raster of type\n DataBuffer.TYPE_INT, use\n Raster.createPackedRaster().\n  The only dataTypes supported currently are TYPE_BYTE\n and TYPE_USHORT."}, {"method_name": "createBandedRaster", "method_sig": "public static WritableRaster createBandedRaster (int dataType,\n                                                int w,\n                                                int h,\n                                                int bands,\n                                                Point location)", "description": "Creates a Raster based on a BandedSampleModel with the\n specified data type, width, height, and number of bands.\n\n  The upper left corner of the Raster is given by the\n location argument.  If location is null, (0, 0) will be used.\n The dataType parameter should be one of the enumerated values\n defined in the DataBuffer class.\n\n  The only dataTypes supported currently are TYPE_BYTE, TYPE_USHORT,\n and TYPE_INT."}, {"method_name": "createBandedRaster", "method_sig": "public static WritableRaster createBandedRaster (int dataType,\n                                                int w,\n                                                int h,\n                                                int scanlineStride,\n                                                int[] bankIndices,\n                                                int[] bandOffsets,\n                                                Point location)", "description": "Creates a Raster based on a BandedSampleModel with the\n specified data type, width, height, scanline stride, bank\n indices and band offsets.  The number of bands is inferred from\n bankIndices.length and bandOffsets.length, which must be the\n same.\n\n  The upper left corner of the Raster is given by the\n location argument.  The dataType parameter should be one of the\n enumerated values defined in the DataBuffer class.\n\n  The only dataTypes supported currently are TYPE_BYTE, TYPE_USHORT,\n and TYPE_INT."}, {"method_name": "createPackedRaster", "method_sig": "public static WritableRaster createPackedRaster (int dataType,\n                                                int w,\n                                                int h,\n                                                int[] bandMasks,\n                                                Point location)", "description": "Creates a Raster based on a SinglePixelPackedSampleModel with\n the specified data type, width, height, and band masks.\n The number of bands is inferred from bandMasks.length.\n\n  The upper left corner of the Raster is given by the\n location argument.  If location is null, (0, 0) will be used.\n The dataType parameter should be one of the enumerated values\n defined in the DataBuffer class.\n\n  The only dataTypes supported currently are TYPE_BYTE, TYPE_USHORT,\n and TYPE_INT."}, {"method_name": "createPackedRaster", "method_sig": "public static WritableRaster createPackedRaster (int dataType,\n                                                int w,\n                                                int h,\n                                                int bands,\n                                                int bitsPerBand,\n                                                Point location)", "description": "Creates a Raster based on a packed SampleModel with the\n specified data type, width, height, number of bands, and bits\n per band.  If the number of bands is one, the SampleModel will\n be a MultiPixelPackedSampleModel.\n\n  If the number of bands is more than one, the SampleModel\n will be a SinglePixelPackedSampleModel, with each band having\n bitsPerBand bits.  In either case, the requirements on dataType\n and bitsPerBand imposed by the corresponding SampleModel must\n be met.\n\n  The upper left corner of the Raster is given by the\n location argument.  If location is null, (0, 0) will be used.\n The dataType parameter should be one of the enumerated values\n defined in the DataBuffer class.\n\n  The only dataTypes supported currently are TYPE_BYTE, TYPE_USHORT,\n and TYPE_INT."}, {"method_name": "createInterleavedRaster", "method_sig": "public static WritableRaster createInterleavedRaster (DataBuffer dataBuffer,\n                                                     int w,\n                                                     int h,\n                                                     int scanlineStride,\n                                                     int pixelStride,\n                                                     int[] bandOffsets,\n                                                     Point location)", "description": "Creates a Raster based on a PixelInterleavedSampleModel with the\n specified DataBuffer, width, height, scanline stride, pixel\n stride, and band offsets.  The number of bands is inferred from\n bandOffsets.length.  The upper left corner of the Raster\n is given by the location argument.  If location is null, (0, 0)\n will be used.\n  Note that interleaved DataBuffer.TYPE_INT\n Rasters are not supported.  To create a 1-band Raster of type\n DataBuffer.TYPE_INT, use\n Raster.createPackedRaster()."}, {"method_name": "createBandedRaster", "method_sig": "public static WritableRaster createBandedRaster (DataBuffer dataBuffer,\n                                                int w,\n                                                int h,\n                                                int scanlineStride,\n                                                int[] bankIndices,\n                                                int[] bandOffsets,\n                                                Point location)", "description": "Creates a Raster based on a BandedSampleModel with the\n specified DataBuffer, width, height, scanline stride, bank\n indices, and band offsets.  The number of bands is inferred\n from bankIndices.length and bandOffsets.length, which must be\n the same.  The upper left corner of the Raster is given by the\n location argument.  If location is null, (0, 0) will be used."}, {"method_name": "createPackedRaster", "method_sig": "public static WritableRaster createPackedRaster (DataBuffer dataBuffer,\n                                                int w,\n                                                int h,\n                                                int scanlineStride,\n                                                int[] bandMasks,\n                                                Point location)", "description": "Creates a Raster based on a SinglePixelPackedSampleModel with\n the specified DataBuffer, width, height, scanline stride, and\n band masks.  The number of bands is inferred from bandMasks.length.\n The upper left corner of the Raster is given by\n the location argument.  If location is null, (0, 0) will be used."}, {"method_name": "createPackedRaster", "method_sig": "public static WritableRaster createPackedRaster (DataBuffer dataBuffer,\n                                                int w,\n                                                int h,\n                                                int bitsPerPixel,\n                                                Point location)", "description": "Creates a Raster based on a MultiPixelPackedSampleModel with the\n specified DataBuffer, width, height, and bits per pixel.  The upper\n left corner of the Raster is given by the location argument.  If\n location is null, (0, 0) will be used."}, {"method_name": "createRaster", "method_sig": "public static Raster createRaster (SampleModel sm,\n                                  DataBuffer db,\n                                  Point location)", "description": "Creates a Raster with the specified SampleModel and DataBuffer.\n  The upper left corner of the Raster is given by the location argument.\n  If location is null, (0, 0) will be used."}, {"method_name": "createWritableRaster", "method_sig": "public static WritableRaster createWritableRaster (SampleModel sm,\n                                                  Point location)", "description": "Creates a WritableRaster with the specified SampleModel.\n  The upper left corner of the Raster is given by the location argument.\n  If location is null, (0, 0) will be used."}, {"method_name": "createWritableRaster", "method_sig": "public static WritableRaster createWritableRaster (SampleModel sm,\n                                                  DataBuffer db,\n                                                  Point location)", "description": "Creates a WritableRaster with the specified SampleModel and DataBuffer.\n  The upper left corner of the Raster is given by the location argument.\n  If location is null, (0, 0) will be used."}, {"method_name": "getParent", "method_sig": "public Raster getParent()", "description": "Returns the parent Raster (if any) of this Raster or null."}, {"method_name": "getSampleModelTranslateX", "method_sig": "public final int getSampleModelTranslateX()", "description": "Returns the X translation from the coordinate system of the\n SampleModel to that of the Raster.  To convert a pixel's X\n coordinate from the Raster coordinate system to the SampleModel\n coordinate system, this value must be subtracted."}, {"method_name": "getSampleModelTranslateY", "method_sig": "public final int getSampleModelTranslateY()", "description": "Returns the Y translation from the coordinate system of the\n SampleModel to that of the Raster.  To convert a pixel's Y\n coordinate from the Raster coordinate system to the SampleModel\n coordinate system, this value must be subtracted."}, {"method_name": "createCompatibleWritableRaster", "method_sig": "public WritableRaster createCompatibleWritableRaster()", "description": "Create a compatible WritableRaster the same size as this Raster with\n the same SampleModel and a new initialized DataBuffer."}, {"method_name": "createCompatibleWritableRaster", "method_sig": "public WritableRaster createCompatibleWritableRaster (int w,\n                                                     int h)", "description": "Create a compatible WritableRaster with the specified size, a new\n SampleModel, and a new initialized DataBuffer."}, {"method_name": "createCompatibleWritableRaster", "method_sig": "public WritableRaster createCompatibleWritableRaster (Rectangle rect)", "description": "Create a compatible WritableRaster with location (minX, minY)\n and size (width, height) specified by rect, a\n new SampleModel, and a new initialized DataBuffer."}, {"method_name": "createCompatibleWritableRaster", "method_sig": "public WritableRaster createCompatibleWritableRaster (int x,\n                                                     int y,\n                                                     int w,\n                                                     int h)", "description": "Create a compatible WritableRaster with the specified\n location (minX, minY) and size (width, height), a\n new SampleModel, and a new initialized DataBuffer."}, {"method_name": "createTranslatedChild", "method_sig": "public Raster createTranslatedChild (int childMinX,\n                                    int childMinY)", "description": "Create a Raster with the same size, SampleModel and DataBuffer\n as this one, but with a different location.  The new Raster\n will possess a reference to the current Raster, accessible\n through its getParent() method."}, {"method_name": "createChild", "method_sig": "public Raster createChild (int parentX,\n                          int parentY,\n                          int width,\n                          int height,\n                          int childMinX,\n                          int childMinY,\n                          int[] bandList)", "description": "Returns a new Raster which shares all or part of this Raster's\n DataBuffer.  The new Raster will possess a reference to the\n current Raster, accessible through its getParent() method.\n\n  The parentX, parentY, width and height parameters\n form a Rectangle in this Raster's coordinate space,\n indicating the area of pixels to be shared.  An error will\n be thrown if this Rectangle is not contained with the bounds\n of the current Raster.\n\n  The new Raster may additionally be translated to a\n different coordinate system for the plane than that used by the current\n Raster.  The childMinX and childMinY parameters give the new\n (x, y) coordinate of the upper-left pixel of the returned\n Raster; the coordinate (childMinX, childMinY) in the new Raster\n will map to the same pixel as the coordinate (parentX, parentY)\n in the current Raster.\n\n  The new Raster may be defined to contain only a subset of\n the bands of the current Raster, possibly reordered, by means\n of the bandList parameter.  If bandList is null, it is taken to\n include all of the bands of the current Raster in their current\n order.\n\n  To create a new Raster that contains a subregion of the current\n Raster, but shares its coordinate system and bands,\n this method should be called with childMinX equal to parentX,\n childMinY equal to parentY, and bandList equal to null."}, {"method_name": "getBounds", "method_sig": "public Rectangle getBounds()", "description": "Returns the bounding Rectangle of this Raster. This function returns\n the same information as getMinX/MinY/Width/Height."}, {"method_name": "getMinX", "method_sig": "public final int getMinX()", "description": "Returns the minimum valid X coordinate of the Raster."}, {"method_name": "getMinY", "method_sig": "public final int getMinY()", "description": "Returns the minimum valid Y coordinate of the Raster."}, {"method_name": "getWidth", "method_sig": "public final int getWidth()", "description": "Returns the width in pixels of the Raster."}, {"method_name": "getHeight", "method_sig": "public final int getHeight()", "description": "Returns the height in pixels of the Raster."}, {"method_name": "getNumBands", "method_sig": "public final int getNumBands()", "description": "Returns the number of bands (samples per pixel) in this Raster."}, {"method_name": "getNumDataElements", "method_sig": "public final int getNumDataElements()", "description": "Returns the number of data elements needed to transfer one pixel\n  via the getDataElements and setDataElements methods.  When pixels\n  are transferred via these methods, they may be transferred in a\n  packed or unpacked format, depending on the implementation of the\n  underlying SampleModel.  Using these methods, pixels are transferred\n  as an array of getNumDataElements() elements of a primitive type given\n  by getTransferType().  The TransferType may or may not be the same\n  as the storage data type of the DataBuffer."}, {"method_name": "getTransferType", "method_sig": "public final int getTransferType()", "description": "Returns the TransferType used to transfer pixels via the\n  getDataElements and setDataElements methods.  When pixels\n  are transferred via these methods, they may be transferred in a\n  packed or unpacked format, depending on the implementation of the\n  underlying SampleModel.  Using these methods, pixels are transferred\n  as an array of getNumDataElements() elements of a primitive type given\n  by getTransferType().  The TransferType may or may not be the same\n  as the storage data type of the DataBuffer.  The TransferType will\n  be one of the types defined in DataBuffer."}, {"method_name": "getDataBuffer", "method_sig": "public DataBuffer getDataBuffer()", "description": "Returns the DataBuffer associated with this Raster."}, {"method_name": "getSampleModel", "method_sig": "public SampleModel getSampleModel()", "description": "Returns the SampleModel that describes the layout of the image data."}, {"method_name": "getDataElements", "method_sig": "public Object getDataElements (int x,\n                              int y,\n                              Object outData)", "description": "Returns data for a single pixel in a primitive array of type\n TransferType.  For image data supported by the Java 2D(tm) API,\n this will be one of DataBuffer.TYPE_BYTE, DataBuffer.TYPE_USHORT,\n DataBuffer.TYPE_INT, DataBuffer.TYPE_SHORT, DataBuffer.TYPE_FLOAT,\n or DataBuffer.TYPE_DOUBLE.  Data may be returned in a packed format,\n thus increasing efficiency for data transfers.\n An ArrayIndexOutOfBoundsException may be thrown\n if the coordinates are not in bounds.  However, explicit bounds\n checking is not guaranteed.\n A ClassCastException will be thrown if the input object is non null\n and references anything other than an array of TransferType."}, {"method_name": "getDataElements", "method_sig": "public Object getDataElements (int x,\n                              int y,\n                              int w,\n                              int h,\n                              Object outData)", "description": "Returns the pixel data for the specified rectangle of pixels in a\n primitive array of type TransferType.\n For image data supported by the Java 2D API, this\n will be one of DataBuffer.TYPE_BYTE, DataBuffer.TYPE_USHORT,\n DataBuffer.TYPE_INT, DataBuffer.TYPE_SHORT, DataBuffer.TYPE_FLOAT,\n or DataBuffer.TYPE_DOUBLE.  Data may be returned in a packed format,\n thus increasing efficiency for data transfers.\n An ArrayIndexOutOfBoundsException may be thrown\n if the coordinates are not in bounds.  However, explicit bounds\n checking is not guaranteed.\n A ClassCastException will be thrown if the input object is non null\n and references anything other than an array of TransferType."}, {"method_name": "getPixel", "method_sig": "public int[] getPixel (int x,\n                      int y,\n                      int[] iArray)", "description": "Returns the samples in an array of int for the specified pixel.\n An ArrayIndexOutOfBoundsException may be thrown\n if the coordinates are not in bounds.  However, explicit bounds\n checking is not guaranteed."}, {"method_name": "getPixel", "method_sig": "public float[] getPixel (int x,\n                        int y,\n                        float[] fArray)", "description": "Returns the samples in an array of float for the\n specified pixel.\n An ArrayIndexOutOfBoundsException may be thrown\n if the coordinates are not in bounds.  However, explicit bounds\n checking is not guaranteed."}, {"method_name": "getPixel", "method_sig": "public double[] getPixel (int x,\n                         int y,\n                         double[] dArray)", "description": "Returns the samples in an array of double for the specified pixel.\n An ArrayIndexOutOfBoundsException may be thrown\n if the coordinates are not in bounds.  However, explicit bounds\n checking is not guaranteed."}, {"method_name": "getPixels", "method_sig": "public int[] getPixels (int x,\n                       int y,\n                       int w,\n                       int h,\n                       int[] iArray)", "description": "Returns an int array containing all samples for a rectangle of pixels,\n one sample per array element.\n An ArrayIndexOutOfBoundsException may be thrown\n if the coordinates are not in bounds.  However, explicit bounds\n checking is not guaranteed."}, {"method_name": "getPixels", "method_sig": "public float[] getPixels (int x,\n                         int y,\n                         int w,\n                         int h,\n                         float[] fArray)", "description": "Returns a float array containing all samples for a rectangle of pixels,\n one sample per array element.\n An ArrayIndexOutOfBoundsException may be thrown\n if the coordinates are not in bounds.  However, explicit bounds\n checking is not guaranteed."}, {"method_name": "getPixels", "method_sig": "public double[] getPixels (int x,\n                          int y,\n                          int w,\n                          int h,\n                          double[] dArray)", "description": "Returns a double array containing all samples for a rectangle of pixels,\n one sample per array element.\n An ArrayIndexOutOfBoundsException may be thrown\n if the coordinates are not in bounds.  However, explicit bounds\n checking is not guaranteed."}, {"method_name": "getSample", "method_sig": "public int getSample (int x,\n                     int y,\n                     int b)", "description": "Returns the sample in a specified band for the pixel located\n at (x,y) as an int.\n An ArrayIndexOutOfBoundsException may be thrown\n if the coordinates are not in bounds.  However, explicit bounds\n checking is not guaranteed."}, {"method_name": "getSampleFloat", "method_sig": "public float getSampleFloat (int x,\n                            int y,\n                            int b)", "description": "Returns the sample in a specified band\n for the pixel located at (x,y) as a float.\n An ArrayIndexOutOfBoundsException may be thrown\n if the coordinates are not in bounds.  However, explicit bounds\n checking is not guaranteed."}, {"method_name": "getSampleDouble", "method_sig": "public double getSampleDouble (int x,\n                              int y,\n                              int b)", "description": "Returns the sample in a specified band\n for a pixel located at (x,y) as a double.\n An ArrayIndexOutOfBoundsException may be thrown\n if the coordinates are not in bounds.  However, explicit bounds\n checking is not guaranteed."}, {"method_name": "getSamples", "method_sig": "public int[] getSamples (int x,\n                        int y,\n                        int w,\n                        int h,\n                        int b,\n                        int[] iArray)", "description": "Returns the samples for a specified band for the specified rectangle\n of pixels in an int array, one sample per array element.\n An ArrayIndexOutOfBoundsException may be thrown\n if the coordinates are not in bounds.  However, explicit bounds\n checking is not guaranteed."}, {"method_name": "getSamples", "method_sig": "public float[] getSamples (int x,\n                          int y,\n                          int w,\n                          int h,\n                          int b,\n                          float[] fArray)", "description": "Returns the samples for a specified band for the specified rectangle\n of pixels in a float array, one sample per array element.\n An ArrayIndexOutOfBoundsException may be thrown\n if the coordinates are not in bounds.  However, explicit bounds\n checking is not guaranteed."}, {"method_name": "getSamples", "method_sig": "public double[] getSamples (int x,\n                           int y,\n                           int w,\n                           int h,\n                           int b,\n                           double[] dArray)", "description": "Returns the samples for a specified band for a specified rectangle\n of pixels in a double array, one sample per array element.\n An ArrayIndexOutOfBoundsException may be thrown\n if the coordinates are not in bounds.  However, explicit bounds\n checking is not guaranteed."}]}