{"name": "Interface ImageTranscoder", "module": "java.desktop", "package": "javax.imageio", "text": "An interface providing metadata transcoding capability.\n\n  Any image may be transcoded (written to a different format\n than the one it was originally stored in) simply by performing\n a read operation followed by a write operation.  However, loss\n of data may occur in this process due to format differences.\n\n  In general, the best results will be achieved when\n format-specific metadata objects can be created to encapsulate as\n much information about the image and its associated metadata as\n possible, in terms that are understood by the specific\n ImageWriter used to perform the encoding.\n\n  An ImageTranscoder may be used to convert the\n IIOMetadata objects supplied by the\n ImageReader (representing per-stream and per-image\n metadata) into corresponding objects suitable for encoding by a\n particular ImageWriter.  In the case where the methods\n of this interface are being called directly on an\n ImageWriter, the output will be suitable for that\n writer.\n\n  The internal details of converting an IIOMetadata\n object into a writer-specific format will vary according to the\n context of the operation.  Typically, an ImageWriter\n will inspect the incoming object to see if it implements additional\n interfaces with which the writer is familiar.  This might be the\n case, for example, if the object was obtained by means of a read\n operation on a reader plug-in written by the same vendor as the\n writer.  In this case, the writer may access the incoming object by\n means of its plug-in specific interfaces.  In this case, the\n re-encoding may be close to lossless if the image file format is\n kept constant.  If the format is changing, the writer may still\n attempt to preserve as much information as possible.\n\n  If the incoming object does not implement any additional\n interfaces known to the writer, the writer has no choice but to\n access it via the standard IIOMetadata interfaces such\n as the tree view provided by IIOMetadata.getAsTree.\n In this case, there is likely to be significant loss of\n information.\n\n  An independent ImageTranscoder essentially takes\n on the same role as the writer plug-in in the above examples.  It\n must be familiar with the private interfaces used by both the\n reader and writer plug-ins, and manually instantiate an object that\n will be usable by the writer.  The resulting metadata objects may\n be used by the writer directly.\n\n  No independent implementations of ImageTranscoder\n are provided as part of the standard API.  Instead, the intention\n of this interface is to provide a way for implementations to be\n created and discovered by applications as the need arises.", "codes": ["public interface ImageTranscoder"], "fields": [], "methods": [{"method_name": "convertStreamMetadata", "method_sig": "IIOMetadata convertStreamMetadata (IIOMetadata inData,\n                                  ImageWriteParam param)", "description": "Returns an IIOMetadata object that may be used for\n encoding and optionally modified using its document interfaces\n or other interfaces specific to the writer plug-in that will be\n used for encoding.\n\n  An optional ImageWriteParam may be supplied\n for cases where it may affect the structure of the stream\n metadata.\n\n  If the supplied ImageWriteParam contains\n optional setting values not understood by this writer or\n transcoder, they will be ignored."}, {"method_name": "convertImageMetadata", "method_sig": "IIOMetadata convertImageMetadata (IIOMetadata inData,\n                                 ImageTypeSpecifier imageType,\n                                 ImageWriteParam param)", "description": "Returns an IIOMetadata object that may be used for\n encoding and optionally modified using its document interfaces\n or other interfaces specific to the writer plug-in that will be\n used for encoding.\n\n  An optional ImageWriteParam may be supplied\n for cases where it may affect the structure of the image\n metadata.\n\n  If the supplied ImageWriteParam contains\n optional setting values not understood by this writer or\n transcoder, they will be ignored."}]}