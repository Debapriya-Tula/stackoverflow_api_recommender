{"name": "Class VariableHeightLayoutCache", "module": "java.desktop", "package": "javax.swing.tree", "text": "NOTE: This will become more open in a future release.\n \nWarning:\n Serialized objects of this class will not be compatible with\n future Swing releases. The current serialization support is\n appropriate for short term storage or RMI between applications running\n the same version of Swing.  As of 1.4, support for long term storage\n of all JavaBeans\u2122\n has been added to the java.beans package.\n Please see XMLEncoder.", "codes": ["public class VariableHeightLayoutCache\nextends AbstractLayoutCache"], "fields": [], "methods": [{"method_name": "setModel", "method_sig": "@BeanProperty(description=\"The TreeModel that will provide the data.\")\npublic void setModel (TreeModel newModel)", "description": "Sets the TreeModel that will provide the data."}, {"method_name": "setRootVisible", "method_sig": "@BeanProperty(description=\"Whether or not the root node from the TreeModel is visible.\")\npublic void setRootVisible (boolean rootVisible)", "description": "Determines whether or not the root node from\n the TreeModel is visible."}, {"method_name": "setRowHeight", "method_sig": "@BeanProperty(description=\"The height of each cell.\")\npublic void setRowHeight (int rowHeight)", "description": "Sets the height of each cell.  If the specified value\n is less than or equal to zero the current cell renderer is\n queried for each row's height."}, {"method_name": "setNodeDimensions", "method_sig": "public void setNodeDimensions (AbstractLayoutCache.NodeDimensions nd)", "description": "Sets the renderer that is responsible for drawing nodes in the tree."}, {"method_name": "setExpandedState", "method_sig": "public void setExpandedState (TreePath path,\n                             boolean isExpanded)", "description": "Marks the path path expanded state to\n isExpanded."}, {"method_name": "getExpandedState", "method_sig": "public boolean getExpandedState (TreePath path)", "description": "Returns true if the path is expanded, and visible."}, {"method_name": "getBounds", "method_sig": "public Rectangle getBounds (TreePath path,\n                           Rectangle placeIn)", "description": "Returns the Rectangle enclosing the label portion\n into which the item identified by path will be drawn."}, {"method_name": "getPathForRow", "method_sig": "public TreePath getPathForRow (int row)", "description": "Returns the path for row.  If row\n is not visible, null is returned."}, {"method_name": "getRowForPath", "method_sig": "public int getRowForPath (TreePath path)", "description": "Returns the row where the last item identified in path is visible.\n Will return -1 if any of the elements in path are not\n currently visible."}, {"method_name": "getRowCount", "method_sig": "public int getRowCount()", "description": "Returns the number of visible rows."}, {"method_name": "invalidatePathBounds", "method_sig": "public void invalidatePathBounds (TreePath path)", "description": "Instructs the LayoutCache that the bounds for\n path are invalid, and need to be updated."}, {"method_name": "getPreferredHeight", "method_sig": "public int getPreferredHeight()", "description": "Returns the preferred height."}, {"method_name": "getPreferredWidth", "method_sig": "public int getPreferredWidth (Rectangle bounds)", "description": "Returns the preferred width and height for the region in\n visibleRegion."}, {"method_name": "getPathClosestTo", "method_sig": "public TreePath getPathClosestTo (int x,\n                                 int y)", "description": "Returns the path to the node that is closest to x,y.  If\n there is nothing currently visible this will return null,\n otherwise it will always return a valid path.\n If you need to test if the\n returned object is exactly at x, y you should get the bounds for\n the returned path and test x, y against that."}, {"method_name": "getVisiblePathsFrom", "method_sig": "public Enumeration<TreePath> getVisiblePathsFrom (TreePath path)", "description": "Returns an Enumerator that increments over the visible paths\n starting at the passed in location. The ordering of the enumeration\n is based on how the paths are displayed."}, {"method_name": "getVisibleChildCount", "method_sig": "public int getVisibleChildCount (TreePath path)", "description": "Returns the number of visible children for path."}, {"method_name": "invalidateSizes", "method_sig": "public void invalidateSizes()", "description": "Informs the TreeState that it needs to recalculate\n all the sizes it is referencing."}, {"method_name": "isExpanded", "method_sig": "public boolean isExpanded (TreePath path)", "description": "Returns true if the value identified by path is\n currently expanded."}, {"method_name": "treeNodesChanged", "method_sig": "public void treeNodesChanged (TreeModelEvent e)", "description": "Invoked after a node (or a set of siblings) has changed in some\n way. The node(s) have not changed locations in the tree or\n altered their children arrays, but other attributes have\n changed and may affect presentation. Example: the name of a\n file has changed, but it is in the same location in the file\n system.\n\n e.path returns the path the parent of the\n changed node(s).\n\n e.childIndices returns the index(es) of the\n changed node(s)."}, {"method_name": "treeNodesInserted", "method_sig": "public void treeNodesInserted (TreeModelEvent e)", "description": "Invoked after nodes have been inserted into the tree.\n\n e.path returns the parent of the new nodes.\n e.childIndices returns the indices of the new nodes in\n ascending order."}, {"method_name": "treeNodesRemoved", "method_sig": "public void treeNodesRemoved (TreeModelEvent e)", "description": "Invoked after nodes have been removed from the tree.  Note that\n if a subtree is removed from the tree, this method may only be\n invoked once for the root of the removed subtree, not once for\n each individual set of siblings removed.\n\n e.path returns the former parent of the deleted nodes.\n\n e.childIndices returns the indices the nodes had\n before they were deleted in ascending order."}, {"method_name": "treeStructureChanged", "method_sig": "public void treeStructureChanged (TreeModelEvent e)", "description": "Invoked after the tree has drastically changed structure from a\n given node down.  If the path returned by e.getPath\n is of length one and the first element does not identify the\n current root node the first element should become the new root\n of the tree.\n\n e.path holds the path to the node.\n e.childIndices returns null."}]}