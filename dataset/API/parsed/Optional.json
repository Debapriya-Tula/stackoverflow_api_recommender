{"name": "Class Optional<T>", "module": "java.base", "package": "java.util", "text": "A container object which may or may not contain a non-null value.\n If a value is present, isPresent() returns true. If no\n value is present, the object is considered empty and\n isPresent() returns false.\n\n Additional methods that depend on the presence or absence of a contained\n value are provided, such as orElse()\n (returns a default value if no value is present) and\n ifPresent() (performs an\n action if a value is present).\n\n This is a value-based\n class; use of identity-sensitive operations (including reference equality\n (==), identity hash code, or synchronization) on instances of\n Optional may have unpredictable results and should be avoided.", "codes": ["public final class Optional<T>\nextends Object"], "fields": [], "methods": [{"method_name": "empty", "method_sig": "public static <T> Optional<T> empty()", "description": "Returns an empty Optional instance.  No value is present for this\n Optional."}, {"method_name": "of", "method_sig": "public static <T> Optional<T> of (T value)", "description": "Returns an Optional describing the given non-null\n value."}, {"method_name": "ofNullable", "method_sig": "public static <T> Optional<T> ofNullable (T value)", "description": "Returns an Optional describing the given value, if\n non-null, otherwise returns an empty Optional."}, {"method_name": "get", "method_sig": "public T get()", "description": "If a value is present, returns the value, otherwise throws\n NoSuchElementException."}, {"method_name": "isPresent", "method_sig": "public boolean isPresent()", "description": "If a value is present, returns true, otherwise false."}, {"method_name": "isEmpty", "method_sig": "public boolean isEmpty()", "description": "If a value is  not present, returns true, otherwise\n false."}, {"method_name": "ifPresent", "method_sig": "public void ifPresent (Consumer<? super T> action)", "description": "If a value is present, performs the given action with the value,\n otherwise does nothing."}, {"method_name": "ifPresentOrElse", "method_sig": "public void ifPresentOrElse (Consumer<? super T> action,\n                            Runnable emptyAction)", "description": "If a value is present, performs the given action with the value,\n otherwise performs the given empty-based action."}, {"method_name": "filter", "method_sig": "public Optional<T> filter (Predicate<? super T> predicate)", "description": "If a value is present, and the value matches the given predicate,\n returns an Optional describing the value, otherwise returns an\n empty Optional."}, {"method_name": "map", "method_sig": "public <U> Optional<U> map (Function<? super T, ? extends U> mapper)", "description": "If a value is present, returns an Optional describing (as if by\n ofNullable(T)) the result of applying the given mapping function to\n the value, otherwise returns an empty Optional.\n\n If the mapping function returns a null result then this method\n returns an empty Optional."}, {"method_name": "flatMap", "method_sig": "public <U> Optional<U> flatMap (Function<? super T, ? extends Optional<? extends U>> mapper)", "description": "If a value is present, returns the result of applying the given\n Optional-bearing mapping function to the value, otherwise returns\n an empty Optional.\n\n This method is similar to map(Function), but the mapping\n function is one whose result is already an Optional, and if\n invoked, flatMap does not wrap it within an additional\n Optional."}, {"method_name": "or", "method_sig": "public Optional<T> or (Supplier<? extends Optional<? extends T>> supplier)", "description": "If a value is present, returns an Optional describing the value,\n otherwise returns an Optional produced by the supplying function."}, {"method_name": "stream", "method_sig": "public Stream<T> stream()", "description": "If a value is present, returns a sequential Stream containing\n only that value, otherwise returns an empty Stream."}, {"method_name": "orElse", "method_sig": "public T orElse (T other)", "description": "If a value is present, returns the value, otherwise returns\n other."}, {"method_name": "orElseGet", "method_sig": "public T orElseGet (Supplier<? extends T> supplier)", "description": "If a value is present, returns the value, otherwise returns the result\n produced by the supplying function."}, {"method_name": "orElseThrow", "method_sig": "public T orElseThrow()", "description": "If a value is present, returns the value, otherwise throws\n NoSuchElementException."}, {"method_name": "orElseThrow", "method_sig": "public <X extends Throwable> T orElseThrow (Supplier<? extends X> exceptionSupplier)\n                                    throws X extends Throwable", "description": "If a value is present, returns the value, otherwise throws an exception\n produced by the exception supplying function."}, {"method_name": "equals", "method_sig": "public boolean equals (Object obj)", "description": "Indicates whether some other object is \"equal to\" this Optional.\n The other object is considered equal if:\n \nit is also an Optional and;\n both instances have no value present or;\n the present values are \"equal to\" each other via equals().\n "}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Returns the hash code of the value, if present, otherwise 0\n (zero) if no value is present."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a non-empty string representation of this Optional\n suitable for debugging.  The exact presentation format is unspecified and\n may vary between implementations and versions."}]}