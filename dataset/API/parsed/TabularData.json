{"name": "Interface TabularData", "module": "java.management", "package": "javax.management.openmbean", "text": "The TabularData interface specifies the behavior of a specific type of complex open data objects\n which represent tabular data structures.", "codes": ["public interface TabularData"], "fields": [], "methods": [{"method_name": "getTabularType", "method_sig": "TabularType getTabularType()", "description": "Returns the tabular type describing this\n TabularData instance."}, {"method_name": "calculateIndex", "method_sig": "Object[] calculateIndex (CompositeData value)", "description": "Calculates the index that would be used in this TabularData instance to refer to the specified\n composite data value parameter if it were added to this instance.\n This method checks for the type validity of the specified value,\n but does not check if the calculated index is already used to refer to a value in this TabularData instance."}, {"method_name": "size", "method_sig": "int size()", "description": "Returns the number of CompositeData values (ie the\n number of rows) contained in this TabularData\n instance."}, {"method_name": "isEmpty", "method_sig": "boolean isEmpty()", "description": "Returns true if the number of CompositeData\n values (ie the number of rows) contained in this\n TabularData instance is zero."}, {"method_name": "containsKey", "method_sig": "boolean containsKey (Object[] key)", "description": "Returns true if and only if this TabularData instance contains a CompositeData value\n (ie a row) whose index is the specified key. If key is null or does not conform to\n this TabularData instance's TabularType definition, this method simply returns false."}, {"method_name": "containsValue", "method_sig": "boolean containsValue (CompositeData value)", "description": "Returns true if and only if this TabularData instance contains the specified\n CompositeData value. If value is null or does not conform to\n this TabularData instance's row type definition, this method simply returns false."}, {"method_name": "get", "method_sig": "CompositeData get (Object[] key)", "description": "Returns the CompositeData value whose index is\n key, or null if there is no value mapping\n to key, in this TabularData instance."}, {"method_name": "put", "method_sig": "void put (CompositeData value)", "description": "Adds value to this TabularData instance.\n The composite type of value must be the same as this\n instance's row type (ie the composite type returned by\n this.getTabularType().getRowType()), and there must not already be an existing\n value in this TabularData instance whose index is the\n same as the one calculated for the value to be\n added. The index for value is calculated according\n to this TabularData instance's TabularType\n definition (see TabularType.getIndexNames())."}, {"method_name": "remove", "method_sig": "CompositeData remove (Object[] key)", "description": "Removes the CompositeData value whose index is key from this TabularData instance,\n and returns the removed value, or returns null if there is no value whose index is key."}, {"method_name": "putAll", "method_sig": "void putAll (CompositeData[] values)", "description": "Add all the elements in values to this TabularData instance.\n If any  element in values does not satisfy the constraints defined in put,\n or if any two elements in values have the same index calculated according to this TabularData\n instance's TabularType definition, then an exception describing the failure is thrown\n and no element of values is added,  thus leaving this TabularData instance unchanged."}, {"method_name": "clear", "method_sig": "void clear()", "description": "Removes all CompositeData values (ie rows) from this TabularData instance."}, {"method_name": "keySet", "method_sig": "Set<?> keySet()", "description": "Returns a set view of the keys (ie the index values) of the\n CompositeData values (ie the rows) contained in this\n TabularData instance. The returned Set is a\n Set<List<?>> but is declared as a Set<?> for\n compatibility reasons. The returned set can be used to iterate\n over the keys."}, {"method_name": "values", "method_sig": "Collection<?> values()", "description": "Returns a collection view of the CompositeData values\n (ie the rows) contained in this TabularData instance.\n The returned Collection is a Collection<CompositeData>\n but is declared as a Collection<?> for compatibility reasons.\n The returned collection can be used to iterate over the values."}, {"method_name": "equals", "method_sig": "boolean equals (Object obj)", "description": "Compares the specified obj parameter with this TabularData instance for equality.\n \n Returns true if and only if all of the following statements are true:\n \nobj is non null,\nobj also implements the TabularData interface,\ntheir row types are equal\ntheir contents (ie index to value mappings) are equal\n\n This ensures that this equals method works properly for obj parameters which are\n different implementations of the TabularData interface.\n \u00a0"}, {"method_name": "hashCode", "method_sig": "int hashCode()", "description": "Returns the hash code value for this TabularData instance.\n \n The hash code of a TabularData instance is the sum of the hash codes\n of all elements of information used in equals comparisons\n (ie: its tabular type and its content, where the content is defined as all the index to value mappings).\n \n This ensures that t1.equals(t2) implies that t1.hashCode()==t2.hashCode()\n for any two TabularDataSupport instances t1 and t2,\n as required by the general contract of the method\n Object.hashCode()."}, {"method_name": "toString", "method_sig": "String toString()", "description": "Returns a string representation of this TabularData instance.\n \n The string representation consists of the name of the implementing class,\n and the tabular type of this instance."}]}