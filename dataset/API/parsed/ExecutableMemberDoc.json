{"name": "Interface ExecutableMemberDoc", "module": "jdk.javadoc", "package": "com.sun.javadoc", "text": "Represents a method or constructor of a java class.", "codes": ["@Deprecated(since=\"9\",\n            forRemoval=true)\npublic interface ExecutableMemberDoc\nextends MemberDoc"], "fields": [], "methods": [{"method_name": "thrownExceptions", "method_sig": "ClassDoc[] thrownExceptions()", "description": "Return exceptions this method or constructor throws.\n If the type of the exception is a type variable, return the\n ClassDoc of its erasure.\n\n  The thrownExceptions method cannot\n accommodate certain generic type constructs.  The\n thrownExceptionTypes method should be used\n instead."}, {"method_name": "thrownExceptionTypes", "method_sig": "Type[] thrownExceptionTypes()", "description": "Return exceptions this method or constructor throws."}, {"method_name": "isNative", "method_sig": "boolean isNative()", "description": "Return true if this method is native"}, {"method_name": "isSynchronized", "method_sig": "boolean isSynchronized()", "description": "Return true if this method is synchronized"}, {"method_name": "isVarArgs", "method_sig": "boolean isVarArgs()", "description": "Return true if this method was declared to take a variable number\n of arguments."}, {"method_name": "parameters", "method_sig": "Parameter[] parameters()", "description": "Get argument information."}, {"method_name": "receiverType", "method_sig": "Type receiverType()", "description": "Get the receiver type of this executable element."}, {"method_name": "throwsTags", "method_sig": "ThrowsTag[] throwsTags()", "description": "Return the throws tags in this method."}, {"method_name": "paramTags", "method_sig": "ParamTag[] paramTags()", "description": "Return the param tags in this method, excluding the type\n parameter tags."}, {"method_name": "typeParamTags", "method_sig": "ParamTag[] typeParamTags()", "description": "Return the type parameter tags in this method."}, {"method_name": "signature", "method_sig": "String signature()", "description": "Get the signature. It is the parameter list, type is qualified.\n      For instance, for a method mymethod(String x, int y),\n      it will return (java.lang.String,int)."}, {"method_name": "flatSignature", "method_sig": "String flatSignature()", "description": "get flat signature.  all types are not qualified.\n      return a String, which is the flat signiture of this member.\n      It is the parameter list, type is not qualified.\n      For instance, for a method mymethod(String x, int y),\n      it will return (String, int)."}, {"method_name": "typeParameters", "method_sig": "TypeVariable[] typeParameters()", "description": "Return the formal type parameters of this method or constructor.\n Return an empty array if this method or constructor is not generic."}]}