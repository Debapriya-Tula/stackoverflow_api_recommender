{"name": "Class KeyStore.Builder", "module": "java.base", "package": "java.security", "text": "A description of a to-be-instantiated KeyStore object.\n\n An instance of this class encapsulates the information needed to\n instantiate and initialize a KeyStore object. That process is\n triggered when the getKeyStore() method is called.\n\n This makes it possible to decouple configuration from KeyStore\n object creation and e.g. delay a password prompt until it is\n needed.", "codes": ["public abstract static class KeyStore.Builder\nextends Object"], "fields": [], "methods": [{"method_name": "getKeyStore", "method_sig": "public abstract KeyStore getKeyStore()\n                              throws KeyStoreException", "description": "Returns the KeyStore described by this object."}, {"method_name": "getProtectionParameter", "method_sig": "public abstract KeyStore.ProtectionParameter getProtectionParameter (String alias)\n                                                             throws KeyStoreException", "description": "Returns the ProtectionParameters that should be used to obtain\n the Entry with the given alias.\n The getKeyStore method must be invoked before this\n method may be called."}, {"method_name": "newInstance", "method_sig": "public static KeyStore.Builder newInstance (KeyStore keyStore,\n                                           KeyStore.ProtectionParameter protectionParameter)", "description": "Returns a new Builder that encapsulates the given KeyStore.\n The getKeyStore() method of the returned object\n will return keyStore, the getProtectionParameter() method will\n return protectionParameters.\n\n  This is useful if an existing KeyStore object needs to be\n used with Builder-based APIs."}, {"method_name": "newInstance", "method_sig": "public static KeyStore.Builder newInstance (String type,\n                                           Provider provider,\n                                           File file,\n                                           KeyStore.ProtectionParameter protection)", "description": "Returns a new Builder object.\n\n The first call to the getKeyStore() method on the returned\n builder will create a KeyStore of type type and call\n its load() method.\n The inputStream argument is constructed from\n file.\n If protection is a\n PasswordProtection, the password is obtained by\n calling the getPassword method.\n Otherwise, if protection is a\n CallbackHandlerProtection, the password is obtained\n by invoking the CallbackHandler.\n\n Subsequent calls to getKeyStore() return the same object\n as the initial call. If the initial call failed with a\n KeyStoreException, subsequent calls also throw a\n KeyStoreException.\n\n The KeyStore is instantiated from provider if\n non-null. Otherwise, all installed providers are searched.\n\n Calls to getProtectionParameter()\n will return a PasswordProtection\n object encapsulating the password that was used to invoke the\n load method.\n\n Note that the getKeyStore() method is executed\n within the AccessControlContext of the code invoking this\n method."}, {"method_name": "newInstance", "method_sig": "public static KeyStore.Builder newInstance (File file,\n                                           KeyStore.ProtectionParameter protection)", "description": "Returns a new Builder object.\n\n The first call to the getKeyStore() method on the returned\n builder will create a KeyStore using file to detect the\n keystore type and then call its load() method.\n It uses the same algorithm to determine the keystore type as\n described in KeyStore.getInstance(File, LoadStoreParameter).\n The inputStream argument is constructed from file.\n If protection is a PasswordProtection, the password\n is obtained by calling the getPassword method.\n Otherwise, if protection is a\n CallbackHandlerProtection,\n the password is obtained by invoking the CallbackHandler.\n\n Subsequent calls to getKeyStore() return the same object\n as the initial call. If the initial call failed with a\n KeyStoreException, subsequent calls also throw a KeyStoreException.\n\n Calls to getProtectionParameter()\n will return a PasswordProtection\n object encapsulating the password that was used to invoke the\n load method.\n\n Note that the getKeyStore() method is executed\n within the AccessControlContext of the code invoking this\n method."}, {"method_name": "newInstance", "method_sig": "public static KeyStore.Builder newInstance (String type,\n                                           Provider provider,\n                                           KeyStore.ProtectionParameter protection)", "description": "Returns a new Builder object.\n\n Each call to the getKeyStore() method on the returned\n builder will return a new KeyStore object of type type.\n Its load()\n method is invoked using a\n LoadStoreParameter that encapsulates\n protection.\n\n The KeyStore is instantiated from provider if\n non-null. Otherwise, all installed providers are searched.\n\n Calls to getProtectionParameter()\n will return protection.\n\n Note that the getKeyStore() method is executed\n within the AccessControlContext of the code invoking this\n method."}]}