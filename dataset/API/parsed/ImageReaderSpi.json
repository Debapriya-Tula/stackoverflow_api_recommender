{"name": "Class ImageReaderSpi", "module": "java.desktop", "package": "javax.imageio.spi", "text": "The service provider interface (SPI) for ImageReaders.\n For more information on service provider classes, see the class comment\n for the IIORegistry class.\n\n  Each ImageReaderSpi provides several types of information\n about the ImageReader class with which it is associated.\n\n  The name of the vendor who defined the SPI class and a\n brief description of the class are available via the\n getVendorName, getDescription,\n and getVersion methods.\n These methods may be internationalized to provide locale-specific\n output.  These methods are intended mainly to provide short,\n human-readable information that might be used to organize a pop-up\n menu or other list.\n\n  Lists of format names, file suffixes, and MIME types associated\n with the service may be obtained by means of the\n getFormatNames, getFileSuffixes, and\n getMIMETypes methods.  These methods may be used to\n identify candidate ImageReaders for decoding a\n particular file or stream based on manual format selection, file\n naming, or MIME associations (for example, when accessing a file\n over HTTP or as an email attachment).\n\n  A more reliable way to determine which ImageReaders\n are likely to be able to parse a particular data stream is provided\n by the canDecodeInput method.  This methods allows the\n service provider to inspect the actual stream contents.\n\n  Finally, an instance of the ImageReader class\n associated with this service provider may be obtained by calling\n the createReaderInstance method.  Any heavyweight\n initialization, such as the loading of native libraries or creation\n of large tables, should be deferred at least until the first\n invocation of this method.", "codes": ["public abstract class ImageReaderSpi\nextends ImageReaderWriterSpi"], "fields": [{"field_name": "STANDARD_INPUT_TYPE", "field_sig": "@Deprecated\npublic static final\u00a0Class<?>[] STANDARD_INPUT_TYPE", "description": "A single-element array, initially containing\n ImageInputStream.class, to be returned from\n getInputTypes."}, {"field_name": "inputTypes", "field_sig": "protected\u00a0Class<?>[] inputTypes", "description": "An array of Class objects to be returned from\n getInputTypes, initially null."}, {"field_name": "writerSpiNames", "field_sig": "protected\u00a0String[] writerSpiNames", "description": "An array of strings to be returned from\n getImageWriterSpiNames, initially\n null."}], "methods": [{"method_name": "getInputTypes", "method_sig": "public Class<?>[] getInputTypes()", "description": "Returns an array of Class objects indicating what\n types of objects may be used as arguments to the reader's\n setInput method.\n\n  For most readers, which only accept input from an\n ImageInputStream, a single-element array\n containing ImageInputStream.class should be\n returned."}, {"method_name": "canDecodeInput", "method_sig": "public abstract boolean canDecodeInput (Object source)\n                                throws IOException", "description": "Returns true if the supplied source object appears\n to be of the format supported by this reader.  Returning\n true from this method does not guarantee that\n reading will succeed, only that there appears to be a\n reasonable chance of success based on a brief inspection of the\n stream contents.  If the source is an\n ImageInputStream, implementations will commonly\n check the first several bytes of the stream for a \"magic\n number\" associated with the format.  Once actual reading has\n commenced, the reader may still indicate failure at any time\n prior to the completion of decoding.\n\n  It is important that the state of the object not be\n disturbed in order that other ImageReaderSpis can\n properly determine whether they are able to decode the object.\n In particular, if the source is an\n ImageInputStream, a\n mark/reset pair should be used to\n preserve the stream position.\n\n  Formats such as \"raw,\" which can potentially attempt\n to read nearly any stream, should return false\n in order to avoid being invoked in preference to a closer\n match.\n\n  If source is not an instance of one of the\n classes returned by getInputTypes, the method\n should simply return false."}, {"method_name": "createReaderInstance", "method_sig": "public ImageReader createReaderInstance()\n                                 throws IOException", "description": "Returns an instance of the ImageReader\n implementation associated with this service provider.\n The returned object will initially be in an initial state\n as if its reset method had been called.\n\n  The default implementation simply returns\n createReaderInstance(null)."}, {"method_name": "createReaderInstance", "method_sig": "public abstract ImageReader createReaderInstance (Object extension)\n                                          throws IOException", "description": "Returns an instance of the ImageReader\n implementation associated with this service provider.\n The returned object will initially be in an initial state\n as if its reset method had been called.\n\n  An Object may be supplied to the plug-in at\n construction time.  The nature of the object is entirely\n plug-in specific.\n\n  Typically, a plug-in will implement this method using code\n such as return new MyImageReader(this)."}, {"method_name": "isOwnReader", "method_sig": "public boolean isOwnReader (ImageReader reader)", "description": "Returns true if the ImageReader object\n passed in is an instance of the ImageReader\n associated with this service provider.\n\n  The default implementation compares the fully-qualified\n class name of the reader argument with the class\n name passed into the constructor.  This method may be overridden\n if more sophisticated checking is required."}, {"method_name": "getImageWriterSpiNames", "method_sig": "public String[] getImageWriterSpiNames()", "description": "Returns an array of Strings containing the fully\n qualified names of all the ImageWriterSpi classes\n that can understand the internal metadata representation used\n by the ImageReader associated with this service\n provider, or null if there are no such\n ImageWriters specified.  If a\n non-null value is returned, it must have non-zero\n length.\n\n  The first item in the array must be the name of the service\n provider for the \"preferred\" writer, as it will be used to\n instantiate the ImageWriter returned by\n ImageIO.getImageWriter(ImageReader).\n\n  This mechanism may be used to obtain\n ImageWriters that will understand the internal\n structure of non-pixel meta-data (see\n IIOTreeInfo) generated by an\n ImageReader.  By obtaining this data from the\n ImageReader and passing it on to one of the\n ImageWriters obtained with this method, a client\n program can read an image, modify it in some way, and write it\n back out while preserving all meta-data, without having to\n understand anything about the internal structure of the\n meta-data, or even about the image format."}]}