{"name": "Class SysexMessage", "module": "java.desktop", "package": "javax.sound.midi", "text": "A SysexMessage object represents a MIDI system exclusive message.\n \n When a system exclusive message is read from a MIDI file, it always has a\n defined length. Data from a system exclusive message from a MIDI file should\n be stored in the data array of a SysexMessage as follows: the system\n exclusive message status byte (0xF0 or 0xF7), all message data bytes, and\n finally the end-of-exclusive flag (0xF7). The length reported by the\n SysexMessage object is therefore the length of the system exclusive\n data plus two: one byte for the status byte and one for the end-of-exclusive\n flag.\n \n As dictated by the Standard MIDI Files specification, two status byte values\n are legal for a SysexMessage read from a MIDI file:\n \n0xF0: System Exclusive message (same as in MIDI wire protocol)\n   0xF7: Special System Exclusive message\n \n When Java Sound is used to handle system exclusive data that is being\n received using MIDI wire protocol, it should place the data in one or more\n SysexMessages. In this case, the length of the system exclusive data\n is not known in advance; the end of the system exclusive data is marked by an\n end-of-exclusive flag (0xF7) in the MIDI wire byte stream.\n \n0xF0: System Exclusive message (same as in MIDI wire protocol)\n   0xF7: End of Exclusive (EOX)\n \n The first SysexMessage object containing data for a particular system\n exclusive message should have the status value 0xF0. If this message contains\n all the system exclusive data for the message, it should end with the status\n byte 0xF7 (EOX). Otherwise, additional system exclusive data should be sent\n in one or more SysexMessages with a status value of 0xF7. The\n SysexMessage containing the last of the data for the system exclusive\n message should end with the value 0xF7 (EOX) to mark the end of the system\n exclusive message.\n \n If system exclusive data from SysexMessages objects is being\n transmitted using MIDI wire protocol, only the initial 0xF0 status byte, the\n system exclusive data itself, and the final 0xF7 (EOX) byte should be\n propagated; any 0xF7 status bytes used to indicate that a\n SysexMessage contains continuing system exclusive data should not be\n propagated via MIDI wire protocol.", "codes": ["public class SysexMessage\nextends MidiMessage"], "fields": [{"field_name": "SYSTEM_EXCLUSIVE", "field_sig": "public static final\u00a0int SYSTEM_EXCLUSIVE", "description": "Status byte for System Exclusive message (0xF0, or 240)."}, {"field_name": "SPECIAL_SYSTEM_EXCLUSIVE", "field_sig": "public static final\u00a0int SPECIAL_SYSTEM_EXCLUSIVE", "description": "Status byte for Special System Exclusive message (0xF7, or 247), which is\n used in MIDI files. It has the same value as END_OF_EXCLUSIVE, which is\n used in the real-time \"MIDI wire\" protocol."}], "methods": [{"method_name": "setMessage", "method_sig": "public void setMessage (byte[] data,\n                       int length)\n                throws InvalidMidiDataException", "description": "Sets the data for the system exclusive message. The first byte of the\n data array must be a valid system exclusive status byte (0xF0 or 0xF7)."}, {"method_name": "setMessage", "method_sig": "public void setMessage (int status,\n                       byte[] data,\n                       int length)\n                throws InvalidMidiDataException", "description": "Sets the data for the system exclusive message."}, {"method_name": "getData", "method_sig": "public byte[] getData()", "description": "Obtains a copy of the data for the system exclusive message. The returned\n array of bytes does not include the status byte."}, {"method_name": "clone", "method_sig": "public Object clone()", "description": "Creates a new object of the same class and with the same contents as this\n object."}]}