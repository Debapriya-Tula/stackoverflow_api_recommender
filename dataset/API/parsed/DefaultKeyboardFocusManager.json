{"name": "Class DefaultKeyboardFocusManager", "module": "java.desktop", "package": "java.awt", "text": "The default KeyboardFocusManager for AWT applications. Focus traversal is\n done in response to a Component's focus traversal keys, and using a\n Container's FocusTraversalPolicy.\n \n Please see\n \n How to Use the Focus Subsystem,\n a section in The Java Tutorial, and the\n Focus Specification\n for more information.", "codes": ["public class DefaultKeyboardFocusManager\nextends KeyboardFocusManager"], "fields": [], "methods": [{"method_name": "dispatchEvent", "method_sig": "public boolean dispatchEvent (AWTEvent e)", "description": "This method is called by the AWT event dispatcher requesting that the\n current KeyboardFocusManager dispatch the specified event on its behalf.\n DefaultKeyboardFocusManagers dispatch all FocusEvents, all WindowEvents\n related to focus, and all KeyEvents. These events are dispatched based\n on the KeyboardFocusManager's notion of the focus owner and the focused\n and active Windows, sometimes overriding the source of the specified\n AWTEvent. If this method returns false, then the AWT event\n dispatcher will attempt to dispatch the event itself."}, {"method_name": "dispatchKeyEvent", "method_sig": "public boolean dispatchKeyEvent (KeyEvent e)", "description": "Called by dispatchEvent if no other\n KeyEventDispatcher in the dispatcher chain dispatched the KeyEvent, or\n if no other KeyEventDispatchers are registered. If the event has not\n been consumed, its target is enabled, and the focus owner is not null,\n this method dispatches the event to its target. This method will also\n subsequently dispatch the event to all registered\n KeyEventPostProcessors. After all this operations are finished,\n the event is passed to peers for processing.\n \n In all cases, this method returns true, since\n DefaultKeyboardFocusManager is designed so that neither\n dispatchEvent, nor the AWT event dispatcher, should take\n further action on the event in any situation."}, {"method_name": "postProcessKeyEvent", "method_sig": "public boolean postProcessKeyEvent (KeyEvent e)", "description": "This method will be called by dispatchKeyEvent. It will\n handle any unconsumed KeyEvents that map to an AWT\n MenuShortcut by consuming the event and activating the\n shortcut."}, {"method_name": "processKeyEvent", "method_sig": "public void processKeyEvent (Component focusedComponent,\n                            KeyEvent e)", "description": "This method initiates a focus traversal operation if and only if the\n KeyEvent represents a focus traversal key for the specified\n focusedComponent. It is expected that focusedComponent is the current\n focus owner, although this need not be the case. If it is not,\n focus traversal will nevertheless proceed as if focusedComponent\n were the focus owner."}, {"method_name": "enqueueKeyEvents", "method_sig": "protected void enqueueKeyEvents (long after,\n                                Component untilFocused)", "description": "Delays dispatching of KeyEvents until the specified Component becomes\n the focus owner. KeyEvents with timestamps later than the specified\n timestamp will be enqueued until the specified Component receives a\n FOCUS_GAINED event, or the AWT cancels the delay request by invoking\n dequeueKeyEvents or discardKeyEvents."}, {"method_name": "dequeueKeyEvents", "method_sig": "protected void dequeueKeyEvents (long after,\n                                Component untilFocused)", "description": "Releases for normal dispatching to the current focus owner all\n KeyEvents which were enqueued because of a call to\n enqueueKeyEvents with the same timestamp and Component.\n If the given timestamp is less than zero, the outstanding enqueue\n request for the given Component with the oldest timestamp (if\n any) should be cancelled."}, {"method_name": "discardKeyEvents", "method_sig": "protected void discardKeyEvents (Component comp)", "description": "Discards all KeyEvents which were enqueued because of one or more calls\n to enqueueKeyEvents with the specified Component, or one of\n its descendants."}, {"method_name": "focusPreviousComponent", "method_sig": "public void focusPreviousComponent (Component aComponent)", "description": "Focuses the Component before aComponent, typically based on a\n FocusTraversalPolicy."}, {"method_name": "focusNextComponent", "method_sig": "public void focusNextComponent (Component aComponent)", "description": "Focuses the Component after aComponent, typically based on a\n FocusTraversalPolicy."}, {"method_name": "upFocusCycle", "method_sig": "public void upFocusCycle (Component aComponent)", "description": "Moves the focus up one focus traversal cycle. Typically, the focus owner\n is set to aComponent's focus cycle root, and the current focus cycle\n root is set to the new focus owner's focus cycle root. If, however,\n aComponent's focus cycle root is a Window, then the focus owner is set\n to the focus cycle root's default Component to focus, and the current\n focus cycle root is unchanged."}, {"method_name": "downFocusCycle", "method_sig": "public void downFocusCycle (Container aContainer)", "description": "Moves the focus down one focus traversal cycle. If aContainer is a focus\n cycle root, then the focus owner is set to aContainer's default\n Component to focus, and the current focus cycle root is set to\n aContainer. If aContainer is not a focus cycle root, then no focus\n traversal operation occurs."}]}