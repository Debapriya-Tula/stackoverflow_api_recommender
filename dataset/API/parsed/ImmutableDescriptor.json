{"name": "Class ImmutableDescriptor", "module": "java.management", "package": "javax.management", "text": "An immutable descriptor.", "codes": ["public class ImmutableDescriptor\nextends Object\nimplements Descriptor"], "fields": [{"field_name": "EMPTY_DESCRIPTOR", "field_sig": "public static final\u00a0ImmutableDescriptor EMPTY_DESCRIPTOR", "description": "An empty descriptor."}], "methods": [{"method_name": "union", "method_sig": "public static ImmutableDescriptor union (Descriptor... descriptors)", "description": "Return an ImmutableDescriptor whose contents are the union of\n the given descriptors.  Every field name that appears in any of\n the descriptors will appear in the result with the\n value that it has when the method is called.  Subsequent changes\n to any of the descriptors do not affect the ImmutableDescriptor\n returned here.\nIn the simplest case, there is only one descriptor and the\n returned ImmutableDescriptor is a copy of its fields at the\n time this method is called:\n\n Descriptor d = something();\n ImmutableDescriptor copy = ImmutableDescriptor.union(d);\n "}, {"method_name": "equals", "method_sig": "public boolean equals (Object o)", "description": "Compares this descriptor to the given object.  The objects are equal if\n the given object is also a Descriptor, and if the two Descriptors have\n the same field names (possibly differing in case) and the same\n associated values.  The respective values for a field in the two\n Descriptors are equal if the following conditions hold:\n\n \nIf one value is null then the other must be too.\nIf one value is a primitive array then the other must be a primitive\n array of the same type with the same elements.\nIf one value is an object array then the other must be too and\n Arrays.deepEquals(Object[],Object[]) must return true.\nOtherwise Object.equals(Object) must return true.\n"}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Returns the hash code value for this descriptor.  The hash\n code is computed as the sum of the hash codes for each field in\n the descriptor.  The hash code of a field with name n\n and value v is n.toLowerCase().hashCode() ^ h.\n Here h is the hash code of v, computed as\n follows:\n\nIf v is null then h is 0.\nIf v is a primitive array then h is computed using\n the appropriate overloading of java.util.Arrays.hashCode.\nIf v is an object array then h is computed using\n Arrays.deepHashCode(Object[]).\nOtherwise h is v.hashCode().\n"}, {"method_name": "isValid", "method_sig": "public boolean isValid()", "description": "Returns true if all of the fields have legal values given their\n names.  This method always returns true, but a subclass can\n override it to return false when appropriate."}, {"method_name": "clone", "method_sig": "public Descriptor clone()", "description": "Returns a descriptor which is equal to this descriptor.\n Changes to the returned descriptor will have no effect on this\n descriptor, and vice versa.\nThis method returns the object on which it is called.\n A subclass can override it\n to return another object provided the contract is respected."}, {"method_name": "setFields", "method_sig": "public final void setFields (String[] fieldNames,\n                            Object[] fieldValues)\n                     throws RuntimeOperationsException", "description": "This operation is unsupported since this class is immutable.  If\n this call would change a mutable descriptor with the same contents,\n then a RuntimeOperationsException wrapping an\n UnsupportedOperationException is thrown.  Otherwise,\n the behavior is the same as it would be for a mutable descriptor:\n either an exception is thrown because of illegal parameters, or\n there is no effect."}, {"method_name": "setField", "method_sig": "public final void setField (String fieldName,\n                           Object fieldValue)\n                    throws RuntimeOperationsException", "description": "This operation is unsupported since this class is immutable.  If\n this call would change a mutable descriptor with the same contents,\n then a RuntimeOperationsException wrapping an\n UnsupportedOperationException is thrown.  Otherwise,\n the behavior is the same as it would be for a mutable descriptor:\n either an exception is thrown because of illegal parameters, or\n there is no effect."}, {"method_name": "removeField", "method_sig": "public final void removeField (String fieldName)", "description": "Removes a field from the descriptor."}]}