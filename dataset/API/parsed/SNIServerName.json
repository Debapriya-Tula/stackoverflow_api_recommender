{"name": "Class SNIServerName", "module": "java.base", "package": "javax.net.ssl", "text": "Instances of this class represent a server name in a Server Name\n Indication (SNI) extension.\n \n The SNI extension is a feature that extends the SSL/TLS/DTLS protocols to\n indicate what server name the client is attempting to connect to during\n handshaking.  See section 3, \"Server Name Indication\", of TLS Extensions (RFC 6066).\n \nSNIServerName objects are immutable.  Subclasses should not provide\n methods that can change the state of an instance once it has been created.", "codes": ["public abstract class SNIServerName\nextends Object"], "fields": [], "methods": [{"method_name": "getType", "method_sig": "public final int getType()", "description": "Returns the name type of this server name."}, {"method_name": "getEncoded", "method_sig": "public final byte[] getEncoded()", "description": "Returns a copy of the encoded server name value of this server name."}, {"method_name": "equals", "method_sig": "public boolean equals (Object other)", "description": "Indicates whether some other object is \"equal to\" this server name."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Returns a hash code value for this server name.\n \n The hash code value is generated using the name type and encoded\n value of this server name."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a string representation of this server name, including the server\n name type and the encoded server name value in this\n SNIServerName object.\n \n The exact details of the representation are unspecified and subject\n to change, but the following may be regarded as typical:\n \n     \"type=<name type>, value=<name value>\"\n \n\n In this class, the format of \"<name type>\" is\n \"[LITERAL] (INTEGER)\", where the optional \"LITERAL\" is the literal\n name, and INTEGER is the integer value of the name type.  The format\n of \"<name value>\" is \"XX:...:XX\", where \"XX\" is the\n hexadecimal digit representation of a byte value. For example, a\n returned value of an pseudo server name may look like:\n \n     \"type=(31), value=77:77:77:2E:65:78:61:6D:70:6C:65:2E:63:6E\"\n \n or\n \n     \"type=host_name (0), value=77:77:77:2E:65:78:61:6D:70:6C:65:2E:63:6E\"\n \n\n Please NOTE that the exact details of the representation are unspecified\n and subject to change, and subclasses may override the method with\n their own formats."}]}