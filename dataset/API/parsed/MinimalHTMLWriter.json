{"name": "Class MinimalHTMLWriter", "module": "java.desktop", "package": "javax.swing.text.html", "text": "MinimalHTMLWriter is a fallback writer used by the\n HTMLEditorKit to write out HTML for a document that\n is a not produced by the EditorKit.\n\n The format for the document is:\n \n <html>\n   <head>\n     <style>\n        <!-- list of named styles\n         p.normal {\n            font-family: SansSerif;\n            margin-height: 0;\n            font-size: 14\n         }\n        -->\n      </style>\n   </head>\n   <body>\n    <p style=normal>\n        Bold, italic, and underline attributes\n        of the run are emitted as HTML tags.\n        The remaining attributes are emitted as\n        part of the style attribute of a <span> tag.\n        The syntax is similar to inline styles.\n    </p>\n   </body>\n </html>\n ", "codes": ["public class MinimalHTMLWriter\nextends AbstractWriter"], "fields": [], "methods": [{"method_name": "write", "method_sig": "public void write()\n           throws IOException,\n                  BadLocationException", "description": "Generates HTML output\n from a StyledDocument."}, {"method_name": "writeAttributes", "method_sig": "protected void writeAttributes (AttributeSet attr)\n                        throws IOException", "description": "Writes out all the attributes for the\n following types:\n  StyleConstants.ParagraphConstants,\n  StyleConstants.CharacterConstants,\n  StyleConstants.FontConstants,\n  StyleConstants.ColorConstants.\n The attribute name and value are separated by a colon.\n Each pair is separated by a semicolon."}, {"method_name": "text", "method_sig": "protected void text (Element elem)\n             throws IOException,\n                    BadLocationException", "description": "Writes out text."}, {"method_name": "writeStartTag", "method_sig": "protected void writeStartTag (String tag)\n                      throws IOException", "description": "Writes out a start tag appropriately\n indented.  Also increments the indent level."}, {"method_name": "writeEndTag", "method_sig": "protected void writeEndTag (String endTag)\n                    throws IOException", "description": "Writes out an end tag appropriately\n indented.  Also decrements the indent level."}, {"method_name": "writeHeader", "method_sig": "protected void writeHeader()\n                    throws IOException", "description": "Writes out the <head> and <style>\n tags, and then invokes writeStyles() to write\n out all the named styles as the content of the\n <style> tag.  The content is surrounded by\n valid HTML comment markers to ensure that the\n document is viewable in applications/browsers\n that do not support the tag."}, {"method_name": "writeStyles", "method_sig": "protected void writeStyles()\n                    throws IOException", "description": "Writes out all the named styles as the\n content of the <style> tag."}, {"method_name": "writeBody", "method_sig": "protected void writeBody()\n                  throws IOException,\n                         BadLocationException", "description": "Iterates over the elements in the document\n and processes elements based on whether they are\n branch elements or leaf elements.  This method specially handles\n leaf elements that are text."}, {"method_name": "writeEndParagraph", "method_sig": "protected void writeEndParagraph()\n                          throws IOException", "description": "Emits an end tag for a <p>\n tag.  Before writing out the tag, this method ensures\n that all other tags that have been opened are\n appropriately closed off."}, {"method_name": "writeStartParagraph", "method_sig": "protected void writeStartParagraph (Element elem)\n                            throws IOException", "description": "Emits the start tag for a paragraph. If\n the paragraph has a named style associated with it,\n then this method also generates a class attribute for the\n <p> tag and sets its value to be the name of the\n style."}, {"method_name": "writeLeaf", "method_sig": "protected void writeLeaf (Element elem)\n                  throws IOException", "description": "Responsible for writing out other non-text leaf\n elements."}, {"method_name": "writeImage", "method_sig": "protected void writeImage (Element elem)\n                   throws IOException", "description": "Responsible for handling Icon Elements;\n deliberately unimplemented.  How to implement this method is\n an issue of policy.  For example, if you're generating\n an <img> tag, how should you\n represent the src attribute (the location of the image)?\n In certain cases it could be a URL, in others it could\n be read from a stream."}, {"method_name": "writeComponent", "method_sig": "protected void writeComponent (Element elem)\n                       throws IOException", "description": "Responsible for handling Component Elements;\n deliberately unimplemented.\n How this method is implemented is a matter of policy."}, {"method_name": "isText", "method_sig": "protected boolean isText (Element elem)", "description": "Returns true if the element is a text element."}, {"method_name": "writeContent", "method_sig": "protected void writeContent (Element elem,\n                            boolean needsIndenting)\n                     throws IOException,\n                            BadLocationException", "description": "Writes out the attribute set\n in an HTML-compliant manner."}, {"method_name": "writeHTMLTags", "method_sig": "protected void writeHTMLTags (AttributeSet attr)\n                      throws IOException", "description": "Generates\n bold <b>, italic <i>, and <u> tags for the\n text based on its attribute settings."}, {"method_name": "writeNonHTMLAttributes", "method_sig": "protected void writeNonHTMLAttributes (AttributeSet attr)\n                               throws IOException", "description": "Writes out the remaining\n character-level attributes (attributes other than bold,\n italic, and underline) in an HTML-compliant way.  Given that\n attributes such as font family and font size have no direct\n mapping to HTML tags, a <span> tag is generated and its\n style attribute is set to contain the list of remaining\n attributes just like inline styles."}, {"method_name": "inFontTag", "method_sig": "protected boolean inFontTag()", "description": "Returns true if we are currently in a <font> tag."}, {"method_name": "endFontTag", "method_sig": "protected void endFontTag()\n                   throws IOException", "description": "This is no longer used, instead <span> will be written out.\n \n Writes out an end tag for the <font> tag."}, {"method_name": "startFontTag", "method_sig": "protected void startFontTag (String style)\n                     throws IOException", "description": "This is no longer used, instead <span> will be written out.\n \n Writes out a start tag for the <font> tag.\n Because font tags cannot be nested,\n this method closes out\n any enclosing font tag before writing out a\n new start tag."}]}