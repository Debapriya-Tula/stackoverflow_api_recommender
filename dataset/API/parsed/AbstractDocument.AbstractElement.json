{"name": "Class AbstractDocument.AbstractElement", "module": "java.desktop", "package": "javax.swing.text", "text": "Implements the abstract part of an element.  By default elements\n support attributes by having a field that represents the immutable\n part of the current attribute set for the element.  The element itself\n implements MutableAttributeSet which can be used to modify the set\n by fetching a new immutable set.  The immutable sets are provided\n by the AttributeContext associated with the document.\n \nWarning:\n Serialized objects of this class will not be compatible with\n future Swing releases. The current serialization support is\n appropriate for short term storage or RMI between applications running\n the same version of Swing.  As of 1.4, support for long term storage\n of all JavaBeans\u2122\n has been added to the java.beans package.\n Please see XMLEncoder.", "codes": ["public abstract class AbstractDocument.AbstractElement\nextends Object\nimplements Element, MutableAttributeSet, Serializable, TreeNode"], "fields": [], "methods": [{"method_name": "dump", "method_sig": "public void dump (PrintStream psOut,\n                 int indentAmount)", "description": "Dumps a debugging representation of the element hierarchy."}, {"method_name": "getAttributeCount", "method_sig": "public int getAttributeCount()", "description": "Gets the number of attributes that are defined."}, {"method_name": "isDefined", "method_sig": "public boolean isDefined (Object attrName)", "description": "Checks whether a given attribute is defined."}, {"method_name": "isEqual", "method_sig": "public boolean isEqual (AttributeSet attr)", "description": "Checks whether two attribute sets are equal."}, {"method_name": "copyAttributes", "method_sig": "public AttributeSet copyAttributes()", "description": "Copies a set of attributes."}, {"method_name": "getAttribute", "method_sig": "public Object getAttribute (Object attrName)", "description": "Gets the value of an attribute."}, {"method_name": "getAttributeNames", "method_sig": "public Enumeration<?> getAttributeNames()", "description": "Gets the names of all attributes."}, {"method_name": "containsAttribute", "method_sig": "public boolean containsAttribute (Object name,\n                                 Object value)", "description": "Checks whether a given attribute name/value is defined."}, {"method_name": "containsAttributes", "method_sig": "public boolean containsAttributes (AttributeSet attrs)", "description": "Checks whether the element contains all the attributes."}, {"method_name": "getResolveParent", "method_sig": "public AttributeSet getResolveParent()", "description": "Gets the resolving parent.\n If not overridden, the resolving parent defaults to\n the parent element."}, {"method_name": "addAttribute", "method_sig": "public void addAttribute (Object name,\n                         Object value)", "description": "Adds an attribute to the element."}, {"method_name": "addAttributes", "method_sig": "public void addAttributes (AttributeSet attr)", "description": "Adds a set of attributes to the element."}, {"method_name": "removeAttribute", "method_sig": "public void removeAttribute (Object name)", "description": "Removes an attribute from the set."}, {"method_name": "removeAttributes", "method_sig": "public void removeAttributes (Enumeration<?> names)", "description": "Removes a set of attributes for the element."}, {"method_name": "removeAttributes", "method_sig": "public void removeAttributes (AttributeSet attrs)", "description": "Removes a set of attributes for the element."}, {"method_name": "setResolveParent", "method_sig": "public void setResolveParent (AttributeSet parent)", "description": "Sets the resolving parent."}, {"method_name": "getDocument", "method_sig": "public Document getDocument()", "description": "Retrieves the underlying model."}, {"method_name": "getParentElement", "method_sig": "public Element getParentElement()", "description": "Gets the parent of the element."}, {"method_name": "getAttributes", "method_sig": "public AttributeSet getAttributes()", "description": "Gets the attributes for the element."}, {"method_name": "getName", "method_sig": "public String getName()", "description": "Gets the name of the element."}, {"method_name": "getStartOffset", "method_sig": "public abstract int getStartOffset()", "description": "Gets the starting offset in the model for the element."}, {"method_name": "getEndOffset", "method_sig": "public abstract int getEndOffset()", "description": "Gets the ending offset in the model for the element."}, {"method_name": "getElement", "method_sig": "public abstract Element getElement (int index)", "description": "Gets a child element."}, {"method_name": "getElementCount", "method_sig": "public abstract int getElementCount()", "description": "Gets the number of children for the element."}, {"method_name": "getElementIndex", "method_sig": "public abstract int getElementIndex (int offset)", "description": "Gets the child element index closest to the given model offset."}, {"method_name": "isLeaf", "method_sig": "public abstract boolean isLeaf()", "description": "Checks whether the element is a leaf."}, {"method_name": "getChildAt", "method_sig": "public TreeNode getChildAt (int childIndex)", "description": "Returns the child TreeNode at index\n childIndex."}, {"method_name": "getChildCount", "method_sig": "public int getChildCount()", "description": "Returns the number of children TreeNode's\n receiver contains."}, {"method_name": "getParent", "method_sig": "public TreeNode getParent()", "description": "Returns the parent TreeNode of the receiver."}, {"method_name": "getIndex", "method_sig": "public int getIndex (TreeNode node)", "description": "Returns the index of node in the receivers children.\n If the receiver does not contain node, -1 will be\n returned."}, {"method_name": "getAllowsChildren", "method_sig": "public abstract boolean getAllowsChildren()", "description": "Returns true if the receiver allows children."}, {"method_name": "children", "method_sig": "public abstract Enumeration<TreeNode> children()", "description": "Returns the children of the receiver as an\n Enumeration."}]}