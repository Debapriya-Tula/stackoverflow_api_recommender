{"name": "Class ThreadPoolExecutor", "module": "java.base", "package": "java.util.concurrent", "text": "An ExecutorService that executes each submitted task using\n one of possibly several pooled threads, normally configured\n using Executors factory methods.\n\n Thread pools address two different problems: they usually\n provide improved performance when executing large numbers of\n asynchronous tasks, due to reduced per-task invocation overhead,\n and they provide a means of bounding and managing the resources,\n including threads, consumed when executing a collection of tasks.\n Each ThreadPoolExecutor also maintains some basic\n statistics, such as the number of completed tasks.\n\n To be useful across a wide range of contexts, this class\n provides many adjustable parameters and extensibility\n hooks. However, programmers are urged to use the more convenient\n Executors factory methods Executors.newCachedThreadPool() (unbounded thread pool, with\n automatic thread reclamation), Executors.newFixedThreadPool(int)\n (fixed size thread pool) and Executors.newSingleThreadExecutor() (single background thread), that\n preconfigure settings for the most common usage\n scenarios. Otherwise, use the following guide when manually\n configuring and tuning this class:\n\n \nCore and maximum pool sizes\nA ThreadPoolExecutor will automatically adjust the\n pool size (see getPoolSize())\n according to the bounds set by\n corePoolSize (see getCorePoolSize()) and\n maximumPoolSize (see getMaximumPoolSize()).\n\n When a new task is submitted in method execute(Runnable),\n if fewer than corePoolSize threads are running, a new thread is\n created to handle the request, even if other worker threads are\n idle.  Else if fewer than maximumPoolSize threads are running, a\n new thread will be created to handle the request only if the queue\n is full.  By setting corePoolSize and maximumPoolSize the same, you\n create a fixed-size thread pool. By setting maximumPoolSize to an\n essentially unbounded value such as Integer.MAX_VALUE, you\n allow the pool to accommodate an arbitrary number of concurrent\n tasks. Most typically, core and maximum pool sizes are set only\n upon construction, but they may also be changed dynamically using\n setCorePoolSize(int) and setMaximumPoolSize(int). \nOn-demand construction\nBy default, even core threads are initially created and\n started only when new tasks arrive, but this can be overridden\n dynamically using method prestartCoreThread() or prestartAllCoreThreads().  You probably want to prestart threads if\n you construct the pool with a non-empty queue. \nCreating new threads\nNew threads are created using a ThreadFactory.  If not\n otherwise specified, a Executors.defaultThreadFactory() is\n used, that creates threads to all be in the same ThreadGroup and with the same NORM_PRIORITY priority and\n non-daemon status. By supplying a different ThreadFactory, you can\n alter the thread's name, thread group, priority, daemon status,\n etc. If a ThreadFactory fails to create a thread when asked\n by returning null from newThread, the executor will\n continue, but might not be able to execute any tasks. Threads\n should possess the \"modifyThread\" RuntimePermission. If\n worker threads or other threads using the pool do not possess this\n permission, service may be degraded: configuration changes may not\n take effect in a timely manner, and a shutdown pool may remain in a\n state in which termination is possible but not completed.\nKeep-alive times\nIf the pool currently has more than corePoolSize threads,\n excess threads will be terminated if they have been idle for more\n than the keepAliveTime (see getKeepAliveTime(TimeUnit)).\n This provides a means of reducing resource consumption when the\n pool is not being actively used. If the pool becomes more active\n later, new threads will be constructed. This parameter can also be\n changed dynamically using method setKeepAliveTime(long,\n TimeUnit).  Using a value of Long.MAX_VALUE TimeUnit.NANOSECONDS effectively disables idle threads from ever\n terminating prior to shut down. By default, the keep-alive policy\n applies only when there are more than corePoolSize threads, but\n method allowCoreThreadTimeOut(boolean) can be used to\n apply this time-out policy to core threads as well, so long as the\n keepAliveTime value is non-zero. \nQueuing\nAny BlockingQueue may be used to transfer and hold\n submitted tasks.  The use of this queue interacts with pool sizing:\n\n \nIf fewer than corePoolSize threads are running, the Executor\n always prefers adding a new thread\n rather than queuing.\n\n If corePoolSize or more threads are running, the Executor\n always prefers queuing a request rather than adding a new\n thread.\n\n If a request cannot be queued, a new thread is created unless\n this would exceed maximumPoolSize, in which case, the task will be\n rejected.\n\n \n\n There are three general strategies for queuing:\n \n Direct handoffs. A good default choice for a work\n queue is a SynchronousQueue that hands off tasks to threads\n without otherwise holding them. Here, an attempt to queue a task\n will fail if no threads are immediately available to run it, so a\n new thread will be constructed. This policy avoids lockups when\n handling sets of requests that might have internal dependencies.\n Direct handoffs generally require unbounded maximumPoolSizes to\n avoid rejection of new submitted tasks. This in turn admits the\n possibility of unbounded thread growth when commands continue to\n arrive on average faster than they can be processed.\n\n  Unbounded queues. Using an unbounded queue (for\n example a LinkedBlockingQueue without a predefined\n capacity) will cause new tasks to wait in the queue when all\n corePoolSize threads are busy. Thus, no more than corePoolSize\n threads will ever be created. (And the value of the maximumPoolSize\n therefore doesn't have any effect.)  This may be appropriate when\n each task is completely independent of others, so tasks cannot\n affect each others execution; for example, in a web page server.\n While this style of queuing can be useful in smoothing out\n transient bursts of requests, it admits the possibility of\n unbounded work queue growth when commands continue to arrive on\n average faster than they can be processed.\n\n Bounded queues. A bounded queue (for example, an\n ArrayBlockingQueue) helps prevent resource exhaustion when\n used with finite maximumPoolSizes, but can be more difficult to\n tune and control.  Queue sizes and maximum pool sizes may be traded\n off for each other: Using large queues and small pools minimizes\n CPU usage, OS resources, and context-switching overhead, but can\n lead to artificially low throughput.  If tasks frequently block (for\n example if they are I/O bound), a system may be able to schedule\n time for more threads than you otherwise allow. Use of small queues\n generally requires larger pool sizes, which keeps CPUs busier but\n may encounter unacceptable scheduling overhead, which also\n decreases throughput.\n\n \n\nRejected tasks\nNew tasks submitted in method execute(Runnable) will be\n rejected when the Executor has been shut down, and also when\n the Executor uses finite bounds for both maximum threads and work queue\n capacity, and is saturated.  In either case, the execute method\n invokes the RejectedExecutionHandler.rejectedExecution(Runnable, ThreadPoolExecutor)\n method of its RejectedExecutionHandler.  Four predefined handler\n policies are provided:\n\n \nIn the default ThreadPoolExecutor.AbortPolicy, the handler\n throws a runtime RejectedExecutionException upon rejection.\n\n In ThreadPoolExecutor.CallerRunsPolicy, the thread\n that invokes execute itself runs the task. This provides a\n simple feedback control mechanism that will slow down the rate that\n new tasks are submitted.\n\n In ThreadPoolExecutor.DiscardPolicy, a task that\n cannot be executed is simply dropped.\n\n In ThreadPoolExecutor.DiscardOldestPolicy, if the\n executor is not shut down, the task at the head of the work queue\n is dropped, and then execution is retried (which can fail again,\n causing this to be repeated.)\n\n \n\n It is possible to define and use other kinds of RejectedExecutionHandler classes. Doing so requires some care\n especially when policies are designed to work only under particular\n capacity or queuing policies. \nHook methods\nThis class provides protected overridable\n beforeExecute(Thread, Runnable) and\n afterExecute(Runnable, Throwable) methods that are called\n before and after execution of each task.  These can be used to\n manipulate the execution environment; for example, reinitializing\n ThreadLocals, gathering statistics, or adding log entries.\n Additionally, method terminated() can be overridden to perform\n any special processing that needs to be done once the Executor has\n fully terminated.\n\n If hook, callback, or BlockingQueue methods throw exceptions,\n internal worker threads may in turn fail, abruptly terminate, and\n possibly be replaced.\nQueue maintenance\nMethod getQueue() allows access to the work queue\n for purposes of monitoring and debugging.  Use of this method for\n any other purpose is strongly discouraged.  Two supplied methods,\n remove(Runnable) and purge() are available to\n assist in storage reclamation when large numbers of queued tasks\n become cancelled.\nReclamation\nA pool that is no longer referenced in a program AND\n has no remaining threads may be reclaimed (garbage collected)\n without being explicitly shutdown. You can configure a pool to\n allow all unused threads to eventually die by setting appropriate\n keep-alive times, using a lower bound of zero core threads and/or\n setting allowCoreThreadTimeOut(boolean).  \n\nExtension example. Most extensions of this class\n override one or more of the protected hook methods. For example,\n here is a subclass that adds a simple pause/resume feature:\n\n  \n class PausableThreadPoolExecutor extends ThreadPoolExecutor {\n   private boolean isPaused;\n   private ReentrantLock pauseLock = new ReentrantLock();\n   private Condition unpaused = pauseLock.newCondition();\n\n   public PausableThreadPoolExecutor(...) { super(...); }\n\n   protected void beforeExecute(Thread t, Runnable r) {\n     super.beforeExecute(t, r);\n     pauseLock.lock();\n     try {\n       while (isPaused) unpaused.await();\n     } catch (InterruptedException ie) {\n       t.interrupt();\n     } finally {\n       pauseLock.unlock();\n     }\n   }\n\n   public void pause() {\n     pauseLock.lock();\n     try {\n       isPaused = true;\n     } finally {\n       pauseLock.unlock();\n     }\n   }\n\n   public void resume() {\n     pauseLock.lock();\n     try {\n       isPaused = false;\n       unpaused.signalAll();\n     } finally {\n       pauseLock.unlock();\n     }\n   }\n }", "codes": ["public class ThreadPoolExecutor\nextends AbstractExecutorService"], "fields": [], "methods": [{"method_name": "execute", "method_sig": "public void execute (Runnable command)", "description": "Executes the given task sometime in the future.  The task\n may execute in a new thread or in an existing pooled thread.\n\n If the task cannot be submitted for execution, either because this\n executor has been shutdown or because its capacity has been reached,\n the task is handled by the current RejectedExecutionHandler."}, {"method_name": "shutdown", "method_sig": "public void shutdown()", "description": "Initiates an orderly shutdown in which previously submitted\n tasks are executed, but no new tasks will be accepted.\n Invocation has no additional effect if already shut down.\n\n This method does not wait for previously submitted tasks to\n complete execution.  Use awaitTermination\n to do that."}, {"method_name": "shutdownNow", "method_sig": "public List<Runnable> shutdownNow()", "description": "Attempts to stop all actively executing tasks, halts the\n processing of waiting tasks, and returns a list of the tasks\n that were awaiting execution. These tasks are drained (removed)\n from the task queue upon return from this method.\n\n This method does not wait for actively executing tasks to\n terminate.  Use awaitTermination to\n do that.\n\n There are no guarantees beyond best-effort attempts to stop\n processing actively executing tasks.  This implementation\n interrupts tasks via Thread.interrupt(); any task that\n fails to respond to interrupts may never terminate."}, {"method_name": "isTerminating", "method_sig": "public boolean isTerminating()", "description": "Returns true if this executor is in the process of terminating\n after shutdown() or shutdownNow() but has not\n completely terminated.  This method may be useful for\n debugging. A return of true reported a sufficient\n period after shutdown may indicate that submitted tasks have\n ignored or suppressed interruption, causing this executor not\n to properly terminate."}, {"method_name": "finalize", "method_sig": "@Deprecated(since=\"9\")\nprotected void finalize()", "description": "Description copied from class:\u00a0Object"}, {"method_name": "setThreadFactory", "method_sig": "public void setThreadFactory (ThreadFactory threadFactory)", "description": "Sets the thread factory used to create new threads."}, {"method_name": "getThreadFactory", "method_sig": "public ThreadFactory getThreadFactory()", "description": "Returns the thread factory used to create new threads."}, {"method_name": "setRejectedExecutionHandler", "method_sig": "public void setRejectedExecutionHandler (RejectedExecutionHandler handler)", "description": "Sets a new handler for unexecutable tasks."}, {"method_name": "getRejectedExecutionHandler", "method_sig": "public RejectedExecutionHandler getRejectedExecutionHandler()", "description": "Returns the current handler for unexecutable tasks."}, {"method_name": "setCorePoolSize", "method_sig": "public void setCorePoolSize (int corePoolSize)", "description": "Sets the core number of threads.  This overrides any value set\n in the constructor.  If the new value is smaller than the\n current value, excess existing threads will be terminated when\n they next become idle.  If larger, new threads will, if needed,\n be started to execute any queued tasks."}, {"method_name": "getCorePoolSize", "method_sig": "public int getCorePoolSize()", "description": "Returns the core number of threads."}, {"method_name": "prestartCoreThread", "method_sig": "public boolean prestartCoreThread()", "description": "Starts a core thread, causing it to idly wait for work. This\n overrides the default policy of starting core threads only when\n new tasks are executed. This method will return false\n if all core threads have already been started."}, {"method_name": "prestartAllCoreThreads", "method_sig": "public int prestartAllCoreThreads()", "description": "Starts all core threads, causing them to idly wait for work. This\n overrides the default policy of starting core threads only when\n new tasks are executed."}, {"method_name": "allowsCoreThreadTimeOut", "method_sig": "public boolean allowsCoreThreadTimeOut()", "description": "Returns true if this pool allows core threads to time out and\n terminate if no tasks arrive within the keepAlive time, being\n replaced if needed when new tasks arrive. When true, the same\n keep-alive policy applying to non-core threads applies also to\n core threads. When false (the default), core threads are never\n terminated due to lack of incoming tasks."}, {"method_name": "allowCoreThreadTimeOut", "method_sig": "public void allowCoreThreadTimeOut (boolean value)", "description": "Sets the policy governing whether core threads may time out and\n terminate if no tasks arrive within the keep-alive time, being\n replaced if needed when new tasks arrive. When false, core\n threads are never terminated due to lack of incoming\n tasks. When true, the same keep-alive policy applying to\n non-core threads applies also to core threads. To avoid\n continual thread replacement, the keep-alive time must be\n greater than zero when setting true. This method\n should in general be called before the pool is actively used."}, {"method_name": "setMaximumPoolSize", "method_sig": "public void setMaximumPoolSize (int maximumPoolSize)", "description": "Sets the maximum allowed number of threads. This overrides any\n value set in the constructor. If the new value is smaller than\n the current value, excess existing threads will be\n terminated when they next become idle."}, {"method_name": "getMaximumPoolSize", "method_sig": "public int getMaximumPoolSize()", "description": "Returns the maximum allowed number of threads."}, {"method_name": "setKeepAliveTime", "method_sig": "public void setKeepAliveTime (long time,\n                             TimeUnit unit)", "description": "Sets the thread keep-alive time, which is the amount of time\n that threads may remain idle before being terminated.\n Threads that wait this amount of time without processing a\n task will be terminated if there are more than the core\n number of threads currently in the pool, or if this pool\n allows core thread timeout.\n This overrides any value set in the constructor."}, {"method_name": "getKeepAliveTime", "method_sig": "public long getKeepAliveTime (TimeUnit unit)", "description": "Returns the thread keep-alive time, which is the amount of time\n that threads may remain idle before being terminated.\n Threads that wait this amount of time without processing a\n task will be terminated if there are more than the core\n number of threads currently in the pool, or if this pool\n allows core thread timeout."}, {"method_name": "getQueue", "method_sig": "public BlockingQueue<Runnable> getQueue()", "description": "Returns the task queue used by this executor. Access to the\n task queue is intended primarily for debugging and monitoring.\n This queue may be in active use.  Retrieving the task queue\n does not prevent queued tasks from executing."}, {"method_name": "remove", "method_sig": "public boolean remove (Runnable task)", "description": "Removes this task from the executor's internal queue if it is\n present, thus causing it not to be run if it has not already\n started.\n\n This method may be useful as one part of a cancellation\n scheme.  It may fail to remove tasks that have been converted\n into other forms before being placed on the internal queue.\n For example, a task entered using submit might be\n converted into a form that maintains Future status.\n However, in such cases, method purge() may be used to\n remove those Futures that have been cancelled."}, {"method_name": "purge", "method_sig": "public void purge()", "description": "Tries to remove from the work queue all Future\n tasks that have been cancelled. This method can be useful as a\n storage reclamation operation, that has no other impact on\n functionality. Cancelled tasks are never executed, but may\n accumulate in work queues until worker threads can actively\n remove them. Invoking this method instead tries to remove them now.\n However, this method may fail to remove tasks in\n the presence of interference by other threads."}, {"method_name": "getPoolSize", "method_sig": "public int getPoolSize()", "description": "Returns the current number of threads in the pool."}, {"method_name": "getActiveCount", "method_sig": "public int getActiveCount()", "description": "Returns the approximate number of threads that are actively\n executing tasks."}, {"method_name": "getLargestPoolSize", "method_sig": "public int getLargestPoolSize()", "description": "Returns the largest number of threads that have ever\n simultaneously been in the pool."}, {"method_name": "getTaskCount", "method_sig": "public long getTaskCount()", "description": "Returns the approximate total number of tasks that have ever been\n scheduled for execution. Because the states of tasks and\n threads may change dynamically during computation, the returned\n value is only an approximation."}, {"method_name": "getCompletedTaskCount", "method_sig": "public long getCompletedTaskCount()", "description": "Returns the approximate total number of tasks that have\n completed execution. Because the states of tasks and threads\n may change dynamically during computation, the returned value\n is only an approximation, but one that does not ever decrease\n across successive calls."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a string identifying this pool, as well as its state,\n including indications of run state and estimated worker and\n task counts."}, {"method_name": "beforeExecute", "method_sig": "protected void beforeExecute (Thread t,\n                             Runnable r)", "description": "Method invoked prior to executing the given Runnable in the\n given thread.  This method is invoked by thread t that\n will execute task r, and may be used to re-initialize\n ThreadLocals, or to perform logging.\n\n This implementation does nothing, but may be customized in\n subclasses. Note: To properly nest multiple overridings, subclasses\n should generally invoke super.beforeExecute at the end of\n this method."}, {"method_name": "afterExecute", "method_sig": "protected void afterExecute (Runnable r,\n                            Throwable t)", "description": "Method invoked upon completion of execution of the given Runnable.\n This method is invoked by the thread that executed the task. If\n non-null, the Throwable is the uncaught RuntimeException\n or Error that caused execution to terminate abruptly.\n\n This implementation does nothing, but may be customized in\n subclasses. Note: To properly nest multiple overridings, subclasses\n should generally invoke super.afterExecute at the\n beginning of this method.\n\n Note: When actions are enclosed in tasks (such as\n FutureTask) either explicitly or via methods such as\n submit, these task objects catch and maintain\n computational exceptions, and so they do not cause abrupt\n termination, and the internal exceptions are not\n passed to this method. If you would like to trap both kinds of\n failures in this method, you can further probe for such cases,\n as in this sample subclass that prints either the direct cause\n or the underlying exception if a task has been aborted:\n\n  \n class ExtendedExecutor extends ThreadPoolExecutor {\n   // ...\n   protected void afterExecute(Runnable r, Throwable t) {\n     super.afterExecute(r, t);\n     if (t == null\n         && r instanceof Future<?>\n         && ((Future<?>)r).isDone()) {\n       try {\n         Object result = ((Future<?>) r).get();\n       } catch (CancellationException ce) {\n         t = ce;\n       } catch (ExecutionException ee) {\n         t = ee.getCause();\n       } catch (InterruptedException ie) {\n         // ignore/reset\n         Thread.currentThread().interrupt();\n       }\n     }\n     if (t != null)\n       System.out.println(t);\n   }\n }"}, {"method_name": "terminated", "method_sig": "protected void terminated()", "description": "Method invoked when the Executor has terminated.  Default\n implementation does nothing. Note: To properly nest multiple\n overridings, subclasses should generally invoke\n super.terminated within this method."}]}