{"name": "Class JapaneseChronology", "module": "java.base", "package": "java.time.chrono", "text": "The Japanese Imperial calendar system.\n \n This chronology defines the rules of the Japanese Imperial calendar system.\n This calendar system is primarily used in Japan.\n The Japanese Imperial calendar system is the same as the ISO calendar system\n apart from the era-based year numbering.\n \n Japan introduced the Gregorian calendar starting with Meiji 6.\n Only Meiji and later eras are supported;\n dates before Meiji 6, January 1 are not supported.\n \n The supported ChronoField instances are:\n \nDAY_OF_WEEK\nDAY_OF_MONTH\nDAY_OF_YEAR\nEPOCH_DAY\nMONTH_OF_YEAR\nPROLEPTIC_MONTH\nYEAR_OF_ERA\nYEAR\nERA\n", "codes": ["public final class JapaneseChronology\nextends AbstractChronology\nimplements Serializable"], "fields": [{"field_name": "INSTANCE", "field_sig": "public static final\u00a0JapaneseChronology INSTANCE", "description": "Singleton instance for Japanese chronology."}], "methods": [{"method_name": "getId", "method_sig": "public String getId()", "description": "Gets the ID of the chronology - 'Japanese'.\n \n The ID uniquely identifies the Chronology.\n It can be used to lookup the Chronology using Chronology.of(String)."}, {"method_name": "getCalendarType", "method_sig": "public String getCalendarType()", "description": "Gets the calendar type of the underlying calendar system - 'japanese'.\n \n The calendar type is an identifier defined by the\n Unicode Locale Data Markup Language (LDML) specification.\n It can be used to lookup the Chronology using Chronology.of(String).\n It can also be used as part of a locale, accessible via\n Locale.getUnicodeLocaleType(String) with the key 'ca'."}, {"method_name": "date", "method_sig": "public JapaneseDate date (Era era,\n                         int yearOfEra,\n                         int month,\n                         int dayOfMonth)", "description": "Obtains a local date in Japanese calendar system from the\n era, year-of-era, month-of-year and day-of-month fields.\n \n The Japanese month and day-of-month are the same as those in the\n ISO calendar system. They are not reset when the era changes.\n For example:\n \n  6th Jan Showa 64 = ISO 1989-01-06\n  7th Jan Showa 64 = ISO 1989-01-07\n  8th Jan Heisei 1 = ISO 1989-01-08\n  9th Jan Heisei 1 = ISO 1989-01-09\n "}, {"method_name": "date", "method_sig": "public JapaneseDate date (int prolepticYear,\n                         int month,\n                         int dayOfMonth)", "description": "Obtains a local date in Japanese calendar system from the\n proleptic-year, month-of-year and day-of-month fields.\n \n The Japanese proleptic year, month and day-of-month are the same as those\n in the ISO calendar system. They are not reset when the era changes."}, {"method_name": "dateYearDay", "method_sig": "public JapaneseDate dateYearDay (Era era,\n                                int yearOfEra,\n                                int dayOfYear)", "description": "Obtains a local date in Japanese calendar system from the\n era, year-of-era and day-of-year fields.\n \n The day-of-year in this factory is expressed relative to the start of the year-of-era.\n This definition changes the normal meaning of day-of-year only in those years\n where the year-of-era is reset to one due to a change in the era.\n For example:\n \n  6th Jan Showa 64 = day-of-year 6\n  7th Jan Showa 64 = day-of-year 7\n  8th Jan Heisei 1 = day-of-year 1\n  9th Jan Heisei 1 = day-of-year 2\n "}, {"method_name": "dateYearDay", "method_sig": "public JapaneseDate dateYearDay (int prolepticYear,\n                                int dayOfYear)", "description": "Obtains a local date in Japanese calendar system from the\n proleptic-year and day-of-year fields.\n \n The day-of-year in this factory is expressed relative to the start of the proleptic year.\n The Japanese proleptic year and day-of-year are the same as those in the ISO calendar system.\n They are not reset when the era changes."}, {"method_name": "dateEpochDay", "method_sig": "public JapaneseDate dateEpochDay (long epochDay)", "description": "Obtains a local date in the Japanese calendar system from the epoch-day."}, {"method_name": "isLeapYear", "method_sig": "public boolean isLeapYear (long prolepticYear)", "description": "Checks if the specified year is a leap year.\n \n Japanese calendar leap years occur exactly in line with ISO leap years.\n This method does not validate the year passed in, and only has a\n well-defined result for years in the supported range."}, {"method_name": "eraOf", "method_sig": "public JapaneseEra eraOf (int eraValue)", "description": "Returns the calendar system era object from the given numeric value.\n\n See the description of each Era for the numeric values of:\n JapaneseEra.HEISEI, JapaneseEra.SHOWA,JapaneseEra.TAISHO,\n JapaneseEra.MEIJI), only Meiji and later eras are supported."}]}