{"name": "Interface XMLStreamReader", "module": "java.xml", "package": "javax.xml.stream", "text": "The XMLStreamReader interface allows forward, read-only access to XML.\n  It is designed to be the lowest level and most efficient way to\n  read XML data.\n\n \n The XMLStreamReader is designed to iterate over XML using\n next() and hasNext().  The data can be accessed using methods such as getEventType(),\n getNamespaceURI(), getLocalName() and getText();\n\n \n An XMLStreamReader instance is created with an initial event type START_DOCUMENT.\n At any moment in time, it has a current event that the methods of the interface\n access and may load the next event through the next() method.\n The current event type can be determined by getEventType(), and\n the next returned by the next() method.\n\n \n Parsing events are defined as the XML Declaration, a DTD,\n start tag, character data, white space, end tag, comment,\n or processing instruction.  An attribute or namespace event may be encountered\n at the root level of a document as the result of a query operation.\n\n \n For XML 1.0 compliance an XML processor must pass the\n identifiers of declared unparsed entities, notation declarations and their\n associated identifiers to the application.  This information is\n provided through the property API on this interface.\n The following two properties allow access to this information:\n javax.xml.stream.notations and javax.xml.stream.entities.\n When the current event is a DTD the following call will return a\n list of Notations\n List l = (List) getProperty(\"javax.xml.stream.notations\");\n The following call will return a list of entity declarations:\n List l = (List) getProperty(\"javax.xml.stream.entities\");\n These properties can only be accessed during a DTD event and\n are defined to return null if the information is not available.\n\n \n The following table describes which methods are valid in what state.\n If a method is called in an invalid state the method will throw a\n java.lang.IllegalStateException.\n\n \nValid methods for each state\n\n\nEvent Type\nValid Methods\n\n\n\n\n All States  \n getProperty(), hasNext(), require(), close(),\n            getNamespaceURI(), isStartElement(),\n            isEndElement(), isCharacters(), isWhiteSpace(),\n            getNamespaceContext(), getEventType(),getLocation(),\n            hasText(), hasName()\n       \n\n\n START_ELEMENT  \n next(), getName(), getLocalName(), hasName(), getPrefix(),\n            getAttributeXXX(), isAttributeSpecified(),\n            getNamespaceXXX(),\n            getElementText(), nextTag()\n       \n\n\n ATTRIBUTE  \n next(), nextTag()\n            getAttributeXXX(), isAttributeSpecified(),\n       \n\n\n NAMESPACE  \n next(), nextTag()\n            getNamespaceXXX()\n       \n\n\n END_ELEMENT  \n next(), getName(), getLocalName(), hasName(), getPrefix(),\n            getNamespaceXXX(), nextTag()\n      \n\n\n CHARACTERS  \n next(), getTextXXX(), nextTag() \n\n\n CDATA  \n next(), getTextXXX(), nextTag() \n\n\n COMMENT  \n next(), getTextXXX(), nextTag() \n\n\n SPACE  \n next(), getTextXXX(), nextTag() \n\n\n START_DOCUMENT  \n next(), getEncoding(), getVersion(), isStandalone(), standaloneSet(),\n            getCharacterEncodingScheme(), nextTag()\n\n\n END_DOCUMENT  \n close()\n\n\n PROCESSING_INSTRUCTION  \n next(), getPITarget(), getPIData(), nextTag() \n\n\n ENTITY_REFERENCE  \n next(), getLocalName(), getText(), nextTag() \n\n\n DTD  \n next(), getText(), nextTag() \n\n\n", "codes": ["public interface XMLStreamReader\nextends XMLStreamConstants"], "fields": [], "methods": [{"method_name": "getProperty", "method_sig": "Object getProperty (String name)\n            throws IllegalArgumentException", "description": "Get the value of a feature/property from the underlying implementation"}, {"method_name": "next", "method_sig": "int next()\n  throws XMLStreamException", "description": "Get next parsing event - a processor may return all contiguous\n character data in a single chunk, or it may split it into several chunks.\n If the property javax.xml.stream.isCoalescing is set to true\n element content must be coalesced and only one CHARACTERS event\n must be returned for contiguous element content or\n CDATA Sections.\n\n By default entity references must be\n expanded and reported transparently to the application.\n An exception will be thrown if an entity reference cannot be expanded.\n If element content is empty (i.e. content is \"\") then no CHARACTERS event will be reported.\n\n Given the following XML:\n<foo><!--description-->content text<![CDATA[<greeting>Hello>/greeting>]]>other content>/foo>\n The behavior of calling next() when being on foo will be:\n 1- the comment (COMMENT)\n 2- then the characters section (CHARACTERS)\n 3- then the CDATA section (another CHARACTERS)\n 4- then the next characters section (another CHARACTERS)\n 5- then the END_ELEMENT\nNOTE: empty element (such as <tag/>) will be reported\n  with  two separate events: START_ELEMENT, END_ELEMENT - This preserves\n   parsing equivalency of empty element to <tag></tag>.\n\n This method will throw an IllegalStateException if it is called after hasNext() returns false."}, {"method_name": "require", "method_sig": "void require (int type,\n             String namespaceURI,\n             String localName)\n      throws XMLStreamException", "description": "Test if the current event is of the given type and if the namespace and name match the current\n namespace and name of the current event.  If the namespaceURI is null it is not checked for equality,\n if the localName is null it is not checked for equality."}, {"method_name": "getElementText", "method_sig": "String getElementText()\n               throws XMLStreamException", "description": "Reads the content of a text-only element, an exception is thrown if this is\n not a text-only element.\n Regardless of value of javax.xml.stream.isCoalescing this method always returns coalesced content.\n  Precondition: the current event is START_ELEMENT.\n  Postcondition: the current event is the corresponding END_ELEMENT.\n\n The method does the following (implementations are free to optimized\n but must do equivalent processing):\n \n if(getEventType() != XMLStreamConstants.START_ELEMENT) {\n     throw new XMLStreamException(\n     \"parser must be on START_ELEMENT to read next text\", getLocation());\n }\n\n int eventType = next();\n StringBuffer content = new StringBuffer();\n while(eventType != XMLStreamConstants.END_ELEMENT) {\n     if(eventType == XMLStreamConstants.CHARACTERS\n        || eventType == XMLStreamConstants.CDATA\n        || eventType == XMLStreamConstants.SPACE\n        || eventType == XMLStreamConstants.ENTITY_REFERENCE) {\n           buf.append(getText());\n     } else if(eventType == XMLStreamConstants.PROCESSING_INSTRUCTION\n               || eventType == XMLStreamConstants.COMMENT) {\n         // skipping\n     } else if(eventType == XMLStreamConstants.END_DOCUMENT) {\n         throw new XMLStreamException(\n         \"unexpected end of document when reading element text content\", this);\n     } else if(eventType == XMLStreamConstants.START_ELEMENT) {\n         throw new XMLStreamException(\n         \"element text content may not contain START_ELEMENT\", getLocation());\n     } else {\n         throw new XMLStreamException(\n         \"Unexpected event type \"+eventType, getLocation());\n     }\n     eventType = next();\n }\n return buf.toString();\n "}, {"method_name": "nextTag", "method_sig": "int nextTag()\n     throws XMLStreamException", "description": "Skips any white space (isWhiteSpace() returns true), COMMENT,\n or PROCESSING_INSTRUCTION,\n until a START_ELEMENT or END_ELEMENT is reached.\n If other than white space characters, COMMENT, PROCESSING_INSTRUCTION, START_ELEMENT, END_ELEMENT\n are encountered, an exception is thrown. This method should\n be used when processing element-only content seperated by white space.\n\n  Precondition: none\n  Postcondition: the current event is START_ELEMENT or END_ELEMENT\n and cursor may have moved over any whitespace event.\n\n Essentially it does the following (implementations are free to optimized\n but must do equivalent processing):\n  \n int eventType = next();\n while((eventType == XMLStreamConstants.CHARACTERS && isWhiteSpace()) // skip whitespace\n || (eventType == XMLStreamConstants.CDATA && isWhiteSpace())\n // skip whitespace\n || eventType == XMLStreamConstants.SPACE\n || eventType == XMLStreamConstants.PROCESSING_INSTRUCTION\n || eventType == XMLStreamConstants.COMMENT\n ) {\n     eventType = next();\n }\n if (eventType != XMLStreamConstants.START_ELEMENT && eventType != XMLStreamConstants.END_ELEMENT) {\n     throw new String XMLStreamException(\"expected start or end tag\", getLocation());\n }\n return eventType; \n "}, {"method_name": "hasNext", "method_sig": "boolean hasNext()\n         throws XMLStreamException", "description": "Returns true if there are more parsing events and false\n if there are no more events.  This method will return\n false if the current state of the XMLStreamReader is\n END_DOCUMENT"}, {"method_name": "close", "method_sig": "void close()\n    throws XMLStreamException", "description": "Frees any resources associated with this Reader. This method does not close the\n underlying input source."}, {"method_name": "getNamespaceURI", "method_sig": "String getNamespaceURI (String prefix)", "description": "Return the uri for the given prefix.\n The uri returned depends on the current state of the processor.\n\n NOTE:The 'xml' prefix is bound as defined in\n Namespaces in XML\n specification to \"http://www.w3.org/XML/1998/namespace\".\n\n NOTE: The 'xmlns' prefix must be resolved to following namespace\n http://www.w3.org/2000/xmlns/"}, {"method_name": "isStartElement", "method_sig": "boolean isStartElement()", "description": "Returns true if the cursor points to a start tag (otherwise false)"}, {"method_name": "isEndElement", "method_sig": "boolean isEndElement()", "description": "Returns true if the cursor points to an end tag (otherwise false)"}, {"method_name": "isCharacters", "method_sig": "boolean isCharacters()", "description": "Returns true if the cursor points to a character data event"}, {"method_name": "isWhiteSpace", "method_sig": "boolean isWhiteSpace()", "description": "Returns true if the cursor points to a character data event\n that consists of all whitespace"}, {"method_name": "getAttributeValue", "method_sig": "String getAttributeValue (String namespaceURI,\n                         String localName)", "description": "Returns the normalized attribute value of the\n attribute with the namespace and localName\n If the namespaceURI is null the namespace\n is not checked for equality"}, {"method_name": "getAttributeCount", "method_sig": "int getAttributeCount()", "description": "Returns the count of attributes on this START_ELEMENT,\n this method is only valid on a START_ELEMENT or ATTRIBUTE.  This\n count excludes namespace definitions.  Attribute indices are\n zero-based."}, {"method_name": "getAttributeName", "method_sig": "QName getAttributeName (int index)", "description": "Returns the qname of the attribute at the provided index"}, {"method_name": "getAttributeNamespace", "method_sig": "String getAttributeNamespace (int index)", "description": "Returns the namespace of the attribute at the provided\n index"}, {"method_name": "getAttributeLocalName", "method_sig": "String getAttributeLocalName (int index)", "description": "Returns the localName of the attribute at the provided\n index"}, {"method_name": "getAttributePrefix", "method_sig": "String getAttributePrefix (int index)", "description": "Returns the prefix of this attribute at the\n provided index"}, {"method_name": "getAttributeType", "method_sig": "String getAttributeType (int index)", "description": "Returns the XML type of the attribute at the provided\n index"}, {"method_name": "getAttributeValue", "method_sig": "String getAttributeValue (int index)", "description": "Returns the value of the attribute at the\n index"}, {"method_name": "isAttributeSpecified", "method_sig": "boolean isAttributeSpecified (int index)", "description": "Returns a boolean which indicates if this\n attribute was created by default"}, {"method_name": "getNamespaceCount", "method_sig": "int getNamespaceCount()", "description": "Returns the count of namespaces declared on this START_ELEMENT or END_ELEMENT,\n this method is only valid on a START_ELEMENT, END_ELEMENT or NAMESPACE. On\n an END_ELEMENT the count is of the namespaces that are about to go\n out of scope.  This is the equivalent of the information reported\n by SAX callback for an end element event."}, {"method_name": "getNamespacePrefix", "method_sig": "String getNamespacePrefix (int index)", "description": "Returns the prefix for the namespace declared at the\n index.  Returns null if this is the default namespace\n declaration"}, {"method_name": "getNamespaceURI", "method_sig": "String getNamespaceURI (int index)", "description": "Returns the uri for the namespace declared at the\n index."}, {"method_name": "getNamespaceContext", "method_sig": "NamespaceContext getNamespaceContext()", "description": "Returns a read only namespace context for the current\n position.  The context is transient and only valid until\n a call to next() changes the state of the reader."}, {"method_name": "getEventType", "method_sig": "int getEventType()", "description": "Returns an integer code that indicates the type of the event the cursor is\n pointing to. The initial event type is XMLStreamConstants.START_DOCUMENT."}, {"method_name": "getText", "method_sig": "String getText()", "description": "Returns the current value of the parse event as a string,\n this returns the string value of a CHARACTERS event,\n returns the value of a COMMENT, the replacement value\n for an ENTITY_REFERENCE, the string value of a CDATA section,\n the string value for a SPACE event,\n or the String value of the internal subset of the DTD.\n If an ENTITY_REFERENCE has been resolved, any character data\n will be reported as CHARACTERS events."}, {"method_name": "getTextCharacters", "method_sig": "char[] getTextCharacters()", "description": "Returns an array which contains the characters from this event.\n This array should be treated as read-only and transient. I.e. the array will\n contain the text characters until the XMLStreamReader moves on to the next event.\n Attempts to hold onto the character array beyond that time or modify the\n contents of the array are breaches of the contract for this interface."}, {"method_name": "getTextCharacters", "method_sig": "int getTextCharacters (int sourceStart,\n                      char[] target,\n                      int targetStart,\n                      int length)\n               throws XMLStreamException", "description": "Gets the the text associated with a CHARACTERS, SPACE or CDATA event.\n Text starting a \"sourceStart\" is copied into \"target\" starting at \"targetStart\".\n Up to \"length\" characters are copied.  The number of characters actually copied is returned.\n\n The \"sourceStart\" argument must be greater or equal to 0 and less than or equal to\n the number of characters associated with the event.  Usually, one requests text starting at a \"sourceStart\" of 0.\n If the number of characters actually copied is less than the \"length\", then there is no more text.\n Otherwise, subsequent calls need to be made until all text has been retrieved. For example:\n\n \n int length = 1024;\n char[] myBuffer = new char[ length ];\n\n for ( int sourceStart = 0 ; ; sourceStart += length )\n {\n    int nCopied = stream.getTextCharacters( sourceStart, myBuffer, 0, length );\n\n   if (nCopied < length)\n       break;\n }\n  \n XMLStreamException may be thrown if there are any XML errors in the underlying source.\n The \"targetStart\" argument must be greater than or equal to 0 and less than the length of \"target\",\n Length must be greater than 0 and \"targetStart + length\" must be less than or equal to length of \"target\"."}, {"method_name": "getTextStart", "method_sig": "int getTextStart()", "description": "Returns the offset into the text character array where the first\n character (of this text event) is stored."}, {"method_name": "getTextLength", "method_sig": "int getTextLength()", "description": "Returns the length of the sequence of characters for this\n Text event within the text character array."}, {"method_name": "getEncoding", "method_sig": "String getEncoding()", "description": "Return input encoding if known or null if unknown."}, {"method_name": "hasText", "method_sig": "boolean hasText()", "description": "Return a boolean indicating whether the current event has text.\n The following events have text:\n CHARACTERS,DTD ,ENTITY_REFERENCE, COMMENT, SPACE"}, {"method_name": "getLocation", "method_sig": "Location getLocation()", "description": "Return the current location of the processor.\n If the Location is unknown the processor should return\n an implementation of Location that returns -1 for the\n location and null for the publicId and systemId.\n The location information is only valid until next() is\n called."}, {"method_name": "getName", "method_sig": "QName getName()", "description": "Returns a QName for the current START_ELEMENT or END_ELEMENT event"}, {"method_name": "getLocalName", "method_sig": "String getLocalName()", "description": "Returns the (local) name of the current event.\n For START_ELEMENT or END_ELEMENT returns the (local) name of the current element.\n For ENTITY_REFERENCE it returns entity name.\n The current event must be START_ELEMENT or END_ELEMENT,\n or ENTITY_REFERENCE"}, {"method_name": "hasName", "method_sig": "boolean hasName()", "description": "returns a boolean indicating whether the current event has a name\n (is a START_ELEMENT or END_ELEMENT)."}, {"method_name": "getNamespaceURI", "method_sig": "String getNamespaceURI()", "description": "If the current event is a START_ELEMENT or END_ELEMENT  this method\n returns the URI of the prefix or the default namespace.\n Returns null if the event does not have a prefix."}, {"method_name": "getPrefix", "method_sig": "String getPrefix()", "description": "Returns the prefix of the current event or null if the event does not have a prefix"}, {"method_name": "getVersion", "method_sig": "String getVersion()", "description": "Get the xml version declared on the xml declaration\n Returns null if none was declared"}, {"method_name": "isStandalone", "method_sig": "boolean isStandalone()", "description": "Get the standalone declaration from the xml declaration"}, {"method_name": "standaloneSet", "method_sig": "boolean standaloneSet()", "description": "Checks if standalone was set in the document"}, {"method_name": "getCharacterEncodingScheme", "method_sig": "String getCharacterEncodingScheme()", "description": "Returns the character encoding declared on the xml declaration\n Returns null if none was declared"}, {"method_name": "getPITarget", "method_sig": "String getPITarget()", "description": "Get the target of a processing instruction"}, {"method_name": "getPIData", "method_sig": "String getPIData()", "description": "Get the data section of a processing instruction"}]}