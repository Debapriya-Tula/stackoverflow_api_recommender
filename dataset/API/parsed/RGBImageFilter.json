{"name": "Class RGBImageFilter", "module": "java.desktop", "package": "java.awt.image", "text": "This class provides an easy way to create an ImageFilter which modifies\n the pixels of an image in the default RGB ColorModel.  It is meant to\n be used in conjunction with a FilteredImageSource object to produce\n filtered versions of existing images.  It is an abstract class that\n provides the calls needed to channel all of the pixel data through a\n single method which converts pixels one at a time in the default RGB\n ColorModel regardless of the ColorModel being used by the ImageProducer.\n The only method which needs to be defined to create a useable image\n filter is the filterRGB method.  Here is an example of a definition\n of a filter which swaps the red and blue components of an image:\n \n\n      class RedBlueSwapFilter extends RGBImageFilter {\n          public RedBlueSwapFilter() {\n              // The filter's operation does not depend on the\n              // pixel's location, so IndexColorModels can be\n              // filtered directly.\n              canFilterIndexColorModel = true;\n          }\n\n          public int filterRGB(int x, int y, int rgb) {\n              return ((rgb & 0xff00ff00)\n                      | ((rgb & 0xff0000) >> 16)\n                      | ((rgb & 0xff) << 16));\n          }\n      }\n\n ", "codes": ["public abstract class RGBImageFilter\nextends ImageFilter"], "fields": [{"field_name": "origmodel", "field_sig": "protected\u00a0ColorModel origmodel", "description": "The ColorModel to be replaced by\n newmodel when the user calls\n substituteColorModel."}, {"field_name": "newmodel", "field_sig": "protected\u00a0ColorModel newmodel", "description": "The ColorModel with which to\n replace origmodel when the user calls\n substituteColorModel."}, {"field_name": "canFilterIndexColorModel", "field_sig": "protected\u00a0boolean canFilterIndexColorModel", "description": "This boolean indicates whether or not it is acceptable to apply\n the color filtering of the filterRGB method to the color table\n entries of an IndexColorModel object in lieu of pixel by pixel\n filtering.  Subclasses should set this variable to true in their\n constructor if their filterRGB method does not depend on the\n coordinate of the pixel being filtered."}], "methods": [{"method_name": "setColorModel", "method_sig": "public void setColorModel (ColorModel model)", "description": "If the ColorModel is an IndexColorModel and the subclass has\n set the canFilterIndexColorModel flag to true, we substitute\n a filtered version of the color model here and wherever\n that original ColorModel object appears in the setPixels methods.\n If the ColorModel is not an IndexColorModel or is null, this method\n overrides the default ColorModel used by the ImageProducer and\n specifies the default RGB ColorModel instead.\n \n Note: This method is intended to be called by the\n ImageProducer of the Image whose pixels\n are being filtered. Developers using\n this class to filter pixels from an image should avoid calling\n this method directly since that operation could interfere\n with the filtering operation."}, {"method_name": "substituteColorModel", "method_sig": "public void substituteColorModel (ColorModel oldcm,\n                                 ColorModel newcm)", "description": "Registers two ColorModel objects for substitution.  If the oldcm\n is encountered during any of the setPixels methods, the newcm\n is substituted and the pixels passed through\n untouched (but with the new ColorModel object)."}, {"method_name": "filterIndexColorModel", "method_sig": "public IndexColorModel filterIndexColorModel (IndexColorModel icm)", "description": "Filters an IndexColorModel object by running each entry in its\n color tables through the filterRGB function that RGBImageFilter\n subclasses must provide.  Uses coordinates of -1 to indicate that\n a color table entry is being filtered rather than an actual\n pixel value."}, {"method_name": "filterRGBPixels", "method_sig": "public void filterRGBPixels (int x,\n                            int y,\n                            int w,\n                            int h,\n                            int[] pixels,\n                            int off,\n                            int scansize)", "description": "Filters a buffer of pixels in the default RGB ColorModel by passing\n them one by one through the filterRGB method."}, {"method_name": "setPixels", "method_sig": "public void setPixels (int x,\n                      int y,\n                      int w,\n                      int h,\n                      ColorModel model,\n                      byte[] pixels,\n                      int off,\n                      int scansize)", "description": "If the ColorModel object is the same one that has already\n been converted, then simply passes the pixels through with the\n converted ColorModel. Otherwise converts the buffer of byte\n pixels to the default RGB ColorModel and passes the converted\n buffer to the filterRGBPixels method to be converted one by one.\n \n Note: This method is intended to be called by the\n ImageProducer of the Image whose pixels\n are being filtered. Developers using\n this class to filter pixels from an image should avoid calling\n this method directly since that operation could interfere\n with the filtering operation."}, {"method_name": "setPixels", "method_sig": "public void setPixels (int x,\n                      int y,\n                      int w,\n                      int h,\n                      ColorModel model,\n                      int[] pixels,\n                      int off,\n                      int scansize)", "description": "If the ColorModel object is the same one that has already\n been converted, then simply passes the pixels through with the\n converted ColorModel, otherwise converts the buffer of integer\n pixels to the default RGB ColorModel and passes the converted\n buffer to the filterRGBPixels method to be converted one by one.\n Converts a buffer of integer pixels to the default RGB ColorModel\n and passes the converted buffer to the filterRGBPixels method.\n \n Note: This method is intended to be called by the\n ImageProducer of the Image whose pixels\n are being filtered. Developers using\n this class to filter pixels from an image should avoid calling\n this method directly since that operation could interfere\n with the filtering operation."}, {"method_name": "filterRGB", "method_sig": "public abstract int filterRGB (int x,\n                              int y,\n                              int rgb)", "description": "Subclasses must specify a method to convert a single input pixel\n in the default RGB ColorModel to a single output pixel."}]}