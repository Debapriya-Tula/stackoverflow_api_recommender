{"name": "Class SettingControl", "module": "jdk.jfr", "package": "jdk.jfr", "text": "Base class to extend to create setting controls.\n \n The following example shows a naive implementation of a setting control for\n regular expressions:\n\n \n \n final class RegExpControl extends SettingControl {\n   private Pattern pattern = Pattern.compile(\".*\");\n\n   @Override\n   public void setValue(String value) {\n     this.pattern = Pattern.compile(value);\n   }\n\n   @Override\n   public String combine(Set<String> values) {\n     return String.join(\"|\", values);\n   }\n\n   @Override\n   public String getValue() {\n     return pattern.toString();\n   }\n\n   public String matches(String s) {\n     return pattern.matcher(s).find();\n   }\n }\n \n \n\n The setValue(String), getValue() and\n combine(Set<String>) methods are invoked when a setting value\n changes, which typically happens when a recording is started or stopped. The\n combine(Set<String>) method is invoked to resolve what value to use\n when multiple recordings are running at the same time.\n \n The setting control must have a default constructor that can be invoked when\n the event is registered.\n \n To use a setting control with an event, add a method that returns a\n boolean value and takes the setting control as a parameter. Annotate\n the method with the @SettingDefinition annotation. By default, the\n method name is used as the setting name, but the name can be set explicitly\n by using the @Name annotation. If the method returns true,\n the event will be committed.\n \n It is recommended that the setValue(String) method updates an\n efficient data structure that can be quickly checked when the event is\n committed.\n \n The following example shows how to create an event that uses the\n regular expression filter defined above.\n\n \n \n abstract class HTTPRequest extends Event {\n   @Label(\"Request URI\")\n   protected String uri;\n\n   @Label(\"Servlet URI Filter\")\n   @SettingDefinition\n   protected boolean uriFilter(RegExpControl regExp) {\n     return regExp.matches(uri);\n   }\n }\n\n @Label(\"HTTP Get Request\")\n class HTTPGetRequest extends HTTPRequest {\n }\n\n @Label(\"HTTP Post Request\")\n class HTTPPostRequest extends HTTPRequest {\n }\n\n class ExampleServlet extends HTTPServlet {\n   protected void doGet(HttpServletRequest req, HttpServletResponse resp) {\n     HTTPGetRequest request = new HTTPGetRequest();\n     request.begin();\n     request.uri = req.getRequestURI();\n     ...\n     request.commit();\n   }\n\n   protected void doPost(HttpServletRequest req, HttpServletResponse resp) {\n     HTTPPostRequest request = new HTTPPostRequest();\n     request.begin();\n     request.uri = req.getRequestURI();\n     ...\n     request.commit();\n   }\n }\n \n \n\n The following example shows how an event can be filtered by assigning the\n \"uriFilter\" setting with the specified regular expressions.\n\n \n \n Recording r = new Recording();\n r.enable(\"HTTPGetRequest\").with(\"uriFilter\", \"https://www.example.com/list/.*\");\n r.enable(\"HTTPPostRequest\").with(\"uriFilter\", \"https://www.example.com/login/.*\");\n r.start();\n \n ", "codes": ["public abstract class SettingControl\nextends jdk.jfr.internal.Control"], "fields": [], "methods": [{"method_name": "combine", "method_sig": "public abstract String combine (Set<String> settingValues)", "description": "Combines the setting values for all running recordings into one value when\n multiple recordings are running at the same time,\n \n The semantics of how setting values are combined depends on the setting\n control that is implemented, but all recordings should get at least all the\n events they request.\n \n This method should have no side effects, because the caller might cache values.\n This method should never return null or throw an exception. If a\n value is not valid for this setting control, the value should be ignored.\n \n Examples:\n \n if the setting control represents a threshold and three recordings are\n running at the same time with the setting values \"10 ms\",\n \"8 s\", and  \"1 ms\", this method returns \"1 ms\"\n because it means that all recordings get at least all the requested data.\n \n If the setting control represents a set of names and two recordings are\n running at the same time with the setting values \"Smith, Jones\" and \"Jones,\n Williams\" the returned value is \"Smith, Jones, Williams\" because all names would be accepted.\n \n If the setting control represents a boolean condition and four recordings are\n running at the same time with the following values \"true\", \"false\", \"false\", and\n \"incorrect\", this method returns \"true\", because all\n recordings get at least all the requested data."}, {"method_name": "setValue", "method_sig": "public abstract void setValue (String settingValue)", "description": "Sets the value for this setting.\n \n If the setting value is not valid for this setting, this method\n does not throw an exception. Instead, the value is ignored."}, {"method_name": "getValue", "method_sig": "public abstract String getValue()", "description": "Returns the currently used value for this setting, not null.\n \n The value returned by this method is valid as an argument to both\n the setValue(String) method and combine(Set) method.\n \n This method is invoked when an event is registered to obtain the\n default value. It is therefore important that a valid value can be\n returned immediately after an instance of this class is created. It is\n not valid to return null."}]}