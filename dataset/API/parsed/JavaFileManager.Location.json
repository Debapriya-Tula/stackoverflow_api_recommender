{"name": "Interface JavaFileManager.Location", "module": "java.compiler", "package": "javax.tools", "text": "Interface for locations of file objects.  Used by file managers\n to determine where to place or search for file objects.\n\n Informally, a Location corresponds to a \"search path\", such as a class\n path or module path, as used by command-line tools that use the default file system.\n\n Some locations are typically used to identify a place in which\n a tool can find files to be read; others are typically used to identify\n a place where a tool can write files. If a location is used to identify\n a place for reading files, those files may be organized in a simple\n package/class hierarchy: such locations are described as\n package-oriented.\n Alternatively, the files may be organized in a module/package/class\n hierarchy: such locations are described as module-oriented.\n If a location is typically used to identify a place where a tool can write files,\n it is up to the tool that writes the files to specify how those files will be\n organized.\n\n You can access the classes in a package-oriented location using methods like\n JavaFileManager.getJavaFileForInput(javax.tools.JavaFileManager.Location, java.lang.String, javax.tools.JavaFileObject.Kind) or JavaFileManager.list(javax.tools.JavaFileManager.Location, java.lang.String, java.util.Set<javax.tools.JavaFileObject.Kind>, boolean).\n It is not possible to directly list the classes in a module-oriented\n location. Instead, you can get a package-oriented location for any specific module\n using methods like JavaFileManager.getLocationForModule(javax.tools.JavaFileManager.Location, java.lang.String) or\n JavaFileManager.listLocationsForModules(javax.tools.JavaFileManager.Location).", "codes": ["public static interface JavaFileManager.Location"], "fields": [], "methods": [{"method_name": "getName", "method_sig": "String getName()", "description": "Returns the name of this location."}, {"method_name": "isOutputLocation", "method_sig": "boolean isOutputLocation()", "description": "Determines if this is an output location.\n An output location is a location that is conventionally used for\n output."}, {"method_name": "isModuleOrientedLocation", "method_sig": "default boolean isModuleOrientedLocation()", "description": "Indicates if this location is module-oriented location, and therefore\n expected to contain classes in a module/package/class\n hierarchy, as compared to a package-oriented location, which\n is expected to contain classes in a package/class hierarchy.\n The result of this method is undefined if this is an output\n location."}]}