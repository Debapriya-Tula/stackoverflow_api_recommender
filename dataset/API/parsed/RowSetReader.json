{"name": "Interface RowSetReader", "module": "java.sql", "package": "javax.sql", "text": "The facility that a disconnected RowSet object calls on\n to populate itself with rows of data. A reader (an object implementing the\n RowSetReader interface) may be registered with\n a RowSet object that supports the reader/writer paradigm.\n When the RowSet object's execute method is\n called, it in turn calls the reader's readData method.", "codes": ["public interface RowSetReader"], "fields": [], "methods": [{"method_name": "readData", "method_sig": "void readData (RowSetInternal caller)\n       throws SQLException", "description": "Reads the new contents of the calling RowSet object.\n In order to call this method, a RowSet\n object must have implemented the RowSetInternal interface\n and registered this RowSetReader object as its reader.\n The readData  method is invoked internally\n by the RowSet.execute method for rowsets that support the\n reader/writer paradigm.\n\n The readData method adds rows to the caller.\n It can be implemented in a wide variety of ways and can even\n populate the caller with rows from a nonrelational data source.\n In general, a reader may invoke any of the rowset's methods,\n with one exception. Calling the method execute will\n cause an SQLException to be thrown\n because execute may not be called recursively.  Also,\n when a reader invokes RowSet methods, no listeners\n are notified; that is, no RowSetEvent objects are\n generated and no RowSetListener methods are invoked.\n This is true because listeners are already being notified by the method\n execute."}]}