{"name": "Interface MidiChannel", "module": "java.desktop", "package": "javax.sound.midi", "text": "A MidiChannel object represents a single MIDI channel. Generally,\n each MidiChannel method processes a like-named MIDI \"channel voice\"\n or \"channel mode\" message as defined by the MIDI specification. However,\n MidiChannel adds some \"get\" methods that retrieve the value most\n recently set by one of the standard MIDI channel messages. Similarly, methods\n for per-channel solo and mute have been added.\n \n A Synthesizer object has a collection of MidiChannels,\n usually one for each of the 16 channels prescribed by the MIDI 1.0\n specification. The Synthesizer generates sound when its\n MidiChannels receive noteOn messages.\n \n See the MIDI 1.0 Specification for more information about the prescribed\n behavior of the MIDI channel messages, which are not exhaustively documented\n here. The specification is titled\n MIDI Reference: The Complete MIDI 1.0 Detailed Specification, and is\n published by the MIDI Manufacturer's Association\n (http://www.midi.org).\n \n MIDI was originally a protocol for reporting the gestures of a keyboard\n musician. This genesis is visible in the MidiChannel API, which\n preserves such MIDI concepts as key number, key velocity, and key pressure.\n It should be understood that the MIDI data does not necessarily originate\n with a keyboard player (the source could be a different kind of musician, or\n software). Some devices might generate constant values for velocity and\n pressure, regardless of how the note was performed. Also, the MIDI\n specification often leaves it up to the synthesizer to use the data in the\n way the implementor sees fit. For example, velocity data need not always be\n mapped to volume and/or brightness.", "codes": ["public interface MidiChannel"], "fields": [], "methods": [{"method_name": "noteOn", "method_sig": "void noteOn (int noteNumber,\n            int velocity)", "description": "Starts the specified note sounding. The key-down velocity usually\n controls the note's volume and/or brightness. If velocity is\n zero, this method instead acts like noteOff(int), terminating\n the note."}, {"method_name": "noteOff", "method_sig": "void noteOff (int noteNumber,\n             int velocity)", "description": "Turns the specified note off. The key-up velocity, if not ignored, can be\n used to affect how quickly the note decays. In any case, the note might\n not die away instantaneously; its decay rate is determined by the\n internals of the Instrument. If the Hold Pedal (a controller; see\n controlChange) is down, the effect of\n this method is deferred until the pedal is released."}, {"method_name": "noteOff", "method_sig": "void noteOff (int noteNumber)", "description": "Turns the specified note off."}, {"method_name": "setPolyPressure", "method_sig": "void setPolyPressure (int noteNumber,\n                     int pressure)", "description": "Reacts to a change in the specified note's key pressure. Polyphonic key\n pressure allows a keyboard player to press multiple keys simultaneously,\n each with a different amount of pressure. The pressure, if not ignored,\n is typically used to vary such features as the volume, brightness, or\n vibrato of the note.\n \n It is possible that the underlying synthesizer does not support this MIDI\n message. In order to verify that setPolyPressure was successful,\n use getPolyPressure."}, {"method_name": "getPolyPressure", "method_sig": "int getPolyPressure (int noteNumber)", "description": "Obtains the pressure with which the specified key is being depressed.\n \n If the device does not support setting poly pressure, this method always\n returns 0. Calling setPolyPressure will have no effect then."}, {"method_name": "setChannelPressure", "method_sig": "void setChannelPressure (int pressure)", "description": "Reacts to a change in the keyboard pressure. Channel pressure indicates\n how hard the keyboard player is depressing the entire keyboard. This can\n be the maximum or average of the per-key pressure-sensor values, as set\n by setPolyPressure. More commonly, it is a measurement of a\n single sensor on a device that doesn't implement polyphonic key pressure.\n Pressure can be used to control various aspects of the sound, as\n described under setPolyPressure.\n \n It is possible that the underlying synthesizer does not support this MIDI\n message. In order to verify that setChannelPressure was\n successful, use getChannelPressure."}, {"method_name": "getChannelPressure", "method_sig": "int getChannelPressure()", "description": "Obtains the channel's keyboard pressure.\n \n If the device does not support setting channel pressure, this method\n always returns 0. Calling setChannelPressure will have no effect\n then."}, {"method_name": "controlChange", "method_sig": "void controlChange (int controller,\n                   int value)", "description": "Reacts to a change in the specified controller's value. A controller is\n some control other than a keyboard key, such as a switch, slider, pedal,\n wheel, or breath-pressure sensor. The MIDI 1.0 Specification provides\n standard numbers for typical controllers on MIDI devices, and describes\n the intended effect for some of the controllers. The way in which an\n Instrument reacts to a controller change may be specific to the\n Instrument.\n \n The MIDI 1.0 Specification defines both 7-bit controllers and 14-bit\n controllers. Continuous controllers, such as wheels and sliders,\n typically have 14 bits (two MIDI bytes), while discrete controllers, such\n as switches, typically have 7 bits (one MIDI byte). Refer to the\n specification to see the expected resolution for each type of control.\n \n Controllers 64 through 95 (0x40 - 0x5F) allow 7-bit precision. The value\n of a 7-bit controller is set completely by the value argument. An\n additional set of controllers provide 14-bit precision by using two\n controller numbers, one for the most significant 7 bits and another for\n the least significant 7 bits. Controller numbers 0 through 31\n (0x00 - 0x1F) control the most significant 7 bits of 14-bit controllers;\n controller numbers 32 through 63 (0x20 - 0x3F) control the least\n significant 7 bits of these controllers. For example, controller number 7\n (0x07) controls the upper 7 bits of the channel volume controller, and\n controller number 39 (0x27) controls the lower 7 bits. The value of a\n 14-bit controller is determined by the interaction of the two halves.\n When the most significant 7 bits of a controller are set (using\n controller numbers 0 through 31), the lower 7 bits are automatically set\n to 0. The corresponding controller number for the lower 7 bits may then\n be used to further modulate the controller value.\n \n It is possible that the underlying synthesizer does not support a\n specific controller message. In order to verify that a call to\n controlChange was successful, use getController."}, {"method_name": "getController", "method_sig": "int getController (int controller)", "description": "Obtains the current value of the specified controller. The return value\n is represented with 7 bits. For 14-bit controllers, the MSB and LSB\n controller value needs to be obtained separately. For example, the 14-bit\n value of the volume controller can be calculated by multiplying the value\n of controller 7 (0x07, channel volume MSB) with 128 and adding the value\n of controller 39 (0x27, channel volume LSB).\n \n If the device does not support setting a specific controller, this method\n returns 0 for that controller. Calling controlChange will have no\n effect then."}, {"method_name": "programChange", "method_sig": "void programChange (int program)", "description": "Changes a program (patch). This selects a specific instrument from the\n currently selected bank of instruments.\n \n The MIDI specification does not dictate whether notes that are already\n sounding should switch to the new instrument (timbre) or continue with\n their original timbre until terminated by a note-off.\n \n The program number is zero-based (expressed from 0 to 127). Note that\n MIDI hardware displays and literature about MIDI typically use the range\n 1 to 128 instead.\n \n It is possible that the underlying synthesizer does not support a\n specific program. In order to verify that a call to programChange\n was successful, use getProgram."}, {"method_name": "programChange", "method_sig": "void programChange (int bank,\n                   int program)", "description": "Changes the program using bank and program (patch) numbers.\n \n It is possible that the underlying synthesizer does not support a\n specific bank, or program. In order to verify that a call to\n programChange was successful, use getProgram and\n getController. Since banks are changed by way of control changes,\n you can verify the current bank with the following statement:\n \n   int bank = (getController(0) * 128) + getController(32);\n "}, {"method_name": "getProgram", "method_sig": "int getProgram()", "description": "Obtains the current program number for this channel."}, {"method_name": "setPitchBend", "method_sig": "void setPitchBend (int bend)", "description": "Changes the pitch offset for all notes on this channel. This affects all\n currently sounding notes as well as subsequent ones. (For pitch bend to\n cease, the value needs to be reset to the center position.)\n \n The MIDI specification stipulates that pitch bend be a 14-bit value,\n where zero is maximum downward bend, 16383 is maximum upward bend, and\n 8192 is the center (no pitch bend). The actual amount of pitch change is\n not specified; it can be changed by a pitch-bend sensitivity setting.\n However, the General MIDI specification says that the default range\n should be two semitones up and down from center.\n \n It is possible that the underlying synthesizer does not support this MIDI\n message. In order to verify that setPitchBend was successful, use\n getPitchBend."}, {"method_name": "getPitchBend", "method_sig": "int getPitchBend()", "description": "Obtains the upward or downward pitch offset for this channel. If the\n device does not support setting pitch bend, this method always returns\n 8192. Calling setPitchBend will have no effect then."}, {"method_name": "resetAllControllers", "method_sig": "void resetAllControllers()", "description": "Resets all the implemented controllers to their default values."}, {"method_name": "allNotesOff", "method_sig": "void allNotesOff()", "description": "Turns off all notes that are currently sounding on this channel. The\n notes might not die away instantaneously; their decay rate is determined\n by the internals of the Instrument. If the Hold Pedal controller\n (see controlChange) is down, the effect\n of this method is deferred until the pedal is released."}, {"method_name": "allSoundOff", "method_sig": "void allSoundOff()", "description": "Immediately turns off all sounding notes on this channel, ignoring the\n state of the Hold Pedal and the internal decay rate of the current\n Instrument."}, {"method_name": "localControl", "method_sig": "boolean localControl (boolean on)", "description": "Turns local control on or off. The default is for local control to be on.\n The \"on\" setting means that if a device is capable of both synthesizing\n sound and transmitting MIDI messages, it will synthesize sound in\n response to the note-on and note-off messages that it itself transmits.\n It will also respond to messages received from other transmitting\n devices. The \"off\" setting means that the synthesizer will ignore its own\n transmitted MIDI messages, but not those received from other devices.\n \n It is possible that the underlying synthesizer does not support local\n control. In order to verify that a call to localControl was\n successful, check the return value."}, {"method_name": "setMono", "method_sig": "void setMono (boolean on)", "description": "Turns mono mode on or off. In mono mode, the channel synthesizes only one\n note at a time. In poly mode (identical to mono mode off), the channel\n can synthesize multiple notes simultaneously. The default is mono off\n (poly mode on).\n \n \"Mono\" is short for the word \"monophonic,\" which in this context is\n opposed to the word \"polyphonic\" and refers to a single synthesizer voice\n per MIDI channel. It has nothing to do with how many audio channels there\n might be (as in \"monophonic\" versus \"stereophonic\" recordings).\n \n It is possible that the underlying synthesizer does not support mono\n mode. In order to verify that a call to setMono was successful,\n use getMono."}, {"method_name": "getMono", "method_sig": "boolean getMono()", "description": "Obtains the current mono/poly mode. Synthesizers that do not allow\n changing mono/poly mode will always return the same value, regardless of\n calls to setMono."}, {"method_name": "setOmni", "method_sig": "void setOmni (boolean on)", "description": "Turns omni mode on or off. In omni mode, the channel responds to messages\n sent on all channels. When omni is off, the channel responds only to\n messages sent on its channel number. The default is omni off.\n \n It is possible that the underlying synthesizer does not support omni\n mode. In order to verify that setOmni was successful, use\n getOmni."}, {"method_name": "getOmni", "method_sig": "boolean getOmni()", "description": "Obtains the current omni mode. Synthesizers that do not allow changing\n the omni mode will always return the same value, regardless of calls to\n setOmni."}, {"method_name": "setMute", "method_sig": "void setMute (boolean mute)", "description": "Sets the mute state for this channel. A value of true means the\n channel is to be muted, false means the channel can sound (if\n other channels are not soloed).\n \n Unlike allSoundOff(), this method applies to only a specific\n channel, not to all channels. Further, it silences not only currently\n sounding notes, but also subsequently received notes.\n \n It is possible that the underlying synthesizer does not support muting\n channels. In order to verify that a call to setMute was\n successful, use getMute."}, {"method_name": "getMute", "method_sig": "boolean getMute()", "description": "Obtains the current mute state for this channel. If the underlying\n synthesizer does not support muting this channel, this method always\n returns false."}, {"method_name": "setSolo", "method_sig": "void setSolo (boolean soloState)", "description": "Sets the solo state for this channel. If solo is true\n only this channel and other soloed channels will sound. If solo\n is false then only other soloed channels will sound, unless no\n channels are soloed, in which case all unmuted channels will sound.\n \n It is possible that the underlying synthesizer does not support solo\n channels. In order to verify that a call to setSolo was\n successful, use getSolo."}, {"method_name": "getSolo", "method_sig": "boolean getSolo()", "description": "Obtains the current solo state for this channel. If the underlying\n synthesizer does not support solo on this channel, this method always\n returns false."}]}