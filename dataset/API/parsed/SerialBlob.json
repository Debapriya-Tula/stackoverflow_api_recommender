{"name": "Class SerialBlob", "module": "java.sql.rowset", "package": "javax.sql.rowset.serial", "text": "A serialized mapping in the Java programming language of an SQL\n BLOB value.\n \n The SerialBlob class provides a constructor for creating\n an instance from a Blob object.  Note that the\n Blob\n object should have brought the SQL BLOB value's data over\n to the client before a SerialBlob object\n is constructed from it.  The data of an SQL BLOB value can\n be materialized on the client as an array of bytes (using the method\n Blob.getBytes) or as a stream of uninterpreted bytes\n (using the method Blob.getBinaryStream).\n \nSerialBlob methods make it possible to make a copy of a\n SerialBlob object as an array of bytes or as a stream.\n They also make it possible to locate a given pattern of bytes or a\n Blob object within a SerialBlob object\n and to update or truncate a Blob object.\n\n  Thread safety \n A SerialBlob is not safe for use by multiple concurrent threads.  If a\n SerialBlob is to be used by more than one thread then access to the SerialBlob\n should be controlled by appropriate synchronization.", "codes": ["public class SerialBlob\nextends Object\nimplements Blob, Serializable, Cloneable"], "fields": [], "methods": [{"method_name": "getBytes", "method_sig": "public byte[] getBytes (long pos,\n                       int length)\n                throws SerialException", "description": "Copies the specified number of bytes, starting at the given\n position, from this SerialBlob object to\n another array of bytes.\n \n Note that if the given number of bytes to be copied is larger than\n the length of this SerialBlob object's array of\n bytes, the given number will be shortened to the array's length."}, {"method_name": "length", "method_sig": "public long length()\n            throws SerialException", "description": "Retrieves the number of bytes in this SerialBlob\n object's array of bytes."}, {"method_name": "getBinaryStream", "method_sig": "public InputStream getBinaryStream()\n                            throws SerialException", "description": "Returns this SerialBlob object as an input stream.\n Unlike the related method, setBinaryStream,\n a stream is produced regardless of whether the SerialBlob\n was created with a Blob object or a byte array."}, {"method_name": "position", "method_sig": "public long position (byte[] pattern,\n                     long start)\n              throws SerialException,\n                     SQLException", "description": "Returns the position in this SerialBlob object where\n the given pattern of bytes begins, starting the search at the\n specified position."}, {"method_name": "position", "method_sig": "public long position (Blob pattern,\n                     long start)\n              throws SerialException,\n                     SQLException", "description": "Returns the position in this SerialBlob object where\n the given Blob object begins, starting the search at the\n specified position."}, {"method_name": "setBytes", "method_sig": "public int setBytes (long pos,\n                    byte[] bytes)\n             throws SerialException,\n                    SQLException", "description": "Writes the given array of bytes to the BLOB value that\n this Blob object represents, starting at position\n pos, and returns the number of bytes written."}, {"method_name": "setBytes", "method_sig": "public int setBytes (long pos,\n                    byte[] bytes,\n                    int offset,\n                    int length)\n             throws SerialException,\n                    SQLException", "description": "Writes all or part of the given byte array to the\n BLOB value that this Blob object represents\n and returns the number of bytes written.\n Writing starts at position pos in the BLOB\n value; len bytes from the given byte array are written."}, {"method_name": "setBinaryStream", "method_sig": "public OutputStream setBinaryStream (long pos)\n                             throws SerialException,\n                                    SQLException", "description": "Retrieves a stream that can be used to write to the BLOB\n value that this Blob object represents.  The stream begins\n at position pos. This method forwards the\n setBinaryStream() call to the underlying Blob in\n the event that this SerialBlob object is instantiated with a\n Blob. If this SerialBlob is instantiated with\n a byte array, a SerialException is thrown."}, {"method_name": "truncate", "method_sig": "public void truncate (long length)\n              throws SerialException", "description": "Truncates the BLOB value that this Blob\n object represents to be len bytes in length."}, {"method_name": "getBinaryStream", "method_sig": "public InputStream getBinaryStream (long pos,\n                                   long length)\n                            throws SQLException", "description": "Returns an\n InputStream object that contains a partial\n Blob value, starting with the byte specified by pos, which is\n length bytes in length."}, {"method_name": "free", "method_sig": "public void free()\n          throws SQLException", "description": "This method frees the SerialBlob object and releases the\n resources that it holds. The object is invalid once the free\n method is called.  If free is called multiple times, the\n subsequent calls to free are treated as a no-op. "}, {"method_name": "equals", "method_sig": "public boolean equals (Object obj)", "description": "Compares this SerialBlob to the specified object.  The result is \n true if and only if the argument is not null and is a \n SerialBlob object that represents the same sequence of bytes as this\n object."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Returns a hash code for this SerialBlob."}, {"method_name": "clone", "method_sig": "public Object clone()", "description": "Returns a clone of this SerialBlob. The copy will contain a\n reference to a clone of the internal byte array, not a reference\n to the original internal byte array of this SerialBlob object.\n The underlying Blob object will be set to null."}]}