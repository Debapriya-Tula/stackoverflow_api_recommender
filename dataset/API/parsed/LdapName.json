{"name": "Class LdapName", "module": "java.naming", "package": "javax.naming.ldap", "text": "This class represents a distinguished name as specified by\n RFC 2253.\n A distinguished name, or DN, is composed of an ordered list of\n components called relative distinguished names, or RDNs.\n Details of a DN's syntax are described in RFC 2253.\n\n This class resolves a few ambiguities found in RFC 2253\n as follows:\n \n RFC 2253 leaves the term \"whitespace\" undefined. The\n      ASCII space character 0x20 (\" \") is used in its place.\n  Whitespace is allowed on either side of ',', ';', '=', and '+'.\n      Such whitespace is accepted but not generated by this code,\n      and is ignored when comparing names.\n  AttributeValue strings containing '=' or non-leading '#'\n      characters (unescaped) are accepted.\n \n\n String names passed to LdapName or returned by it\n use the full Unicode character set. They may also contain\n characters encoded into UTF-8 with each octet represented by a\n three-character substring such as \"\\\\B4\".\n They may not, however, contain characters encoded into UTF-8 with\n each octet represented by a single character in the string:  the\n meaning would be ambiguous.\n\nLdapName will properly parse all valid names, but\n does not attempt to detect all possible violations when parsing\n invalid names.  It is \"generous\" in accepting invalid names.\n The \"validity\" of a name is determined ultimately when it\n is supplied to an LDAP server, which may accept or\n reject the name based on factors such as its schema information\n and interoperability considerations.\n\n When names are tested for equality, attribute types, both binary\n and string values, are case-insensitive.\n String values with different but equivalent usage of quoting,\n escaping, or UTF8-hex-encoding are considered equal.  The order of\n components in multi-valued RDNs (such as \"ou=Sales+cn=Bob\") is not\n significant.\n \n The components of a LDAP name, that is, RDNs, are numbered. The\n indexes of a LDAP name with n RDNs range from 0 to n-1.\n This range may be written as [0,n).\n The right most RDN is at index 0, and the left most RDN is at\n index n-1. For example, the distinguished name:\n \"CN=Steve Kille, O=Isode Limited, C=GB\" is numbered in the following\n sequence ranging from 0 to 2: {C=GB, O=Isode Limited, CN=Steve Kille}. An\n empty LDAP name is represented by an empty RDN list.\n\n Concurrent multithreaded read-only access of an instance of\n LdapName need not be synchronized.\n\n Unless otherwise noted, the behavior of passing a null argument\n to a constructor or method in this class will cause a\n NullPointerException to be thrown.", "codes": ["public class LdapName\nextends Object\nimplements Name"], "fields": [], "methods": [{"method_name": "size", "method_sig": "public int size()", "description": "Retrieves the number of components in this LDAP name."}, {"method_name": "isEmpty", "method_sig": "public boolean isEmpty()", "description": "Determines whether this LDAP name is empty.\n An empty name is one with zero components."}, {"method_name": "getAll", "method_sig": "public Enumeration<String> getAll()", "description": "Retrieves the components of this name as an enumeration\n of strings. The effect of updates to this name on this enumeration\n is undefined. If the name has zero components, an empty (non-null)\n enumeration is returned.\n The order of the components returned by the enumeration is same as\n the order in which the components are numbered as described in the\n class description."}, {"method_name": "get", "method_sig": "public String get (int posn)", "description": "Retrieves a component of this LDAP name as a string."}, {"method_name": "getRdn", "method_sig": "public Rdn getRdn (int posn)", "description": "Retrieves an RDN of this LDAP name as an Rdn."}, {"method_name": "getPrefix", "method_sig": "public Name getPrefix (int posn)", "description": "Creates a name whose components consist of a prefix of the\n components of this LDAP name.\n Subsequent changes to this name will not affect the name\n that is returned and vice versa."}, {"method_name": "getSuffix", "method_sig": "public Name getSuffix (int posn)", "description": "Creates a name whose components consist of a suffix of the\n components in this LDAP name.\n Subsequent changes to this name do not affect the name that is\n returned and vice versa."}, {"method_name": "startsWith", "method_sig": "public boolean startsWith (Name n)", "description": "Determines whether this LDAP name starts with a specified LDAP name\n prefix.\n A name n is a prefix if it is equal to\n getPrefix(n.size())--in other words this LDAP\n name starts with 'n'. If n is null or not a RFC2253 formatted name\n as described in the class description, false is returned."}, {"method_name": "startsWith", "method_sig": "public boolean startsWith (List<Rdn> rdns)", "description": "Determines whether the specified RDN sequence forms a prefix of this\n LDAP name.  Returns true if this LdapName is at least as long as rdns,\n and for every position p in the range [0, rdns.size()) the component\n getRdn(p) matches rdns.get(p). Returns false otherwise. If rdns is\n null, false is returned."}, {"method_name": "endsWith", "method_sig": "public boolean endsWith (Name n)", "description": "Determines whether this LDAP name ends with a specified\n LDAP name suffix.\n A name n is a suffix if it is equal to\n getSuffix(size()-n.size())--in other words this LDAP\n name ends with 'n'. If n is null or not a RFC2253 formatted name\n as described in the class description, false is returned."}, {"method_name": "endsWith", "method_sig": "public boolean endsWith (List<Rdn> rdns)", "description": "Determines whether the specified RDN sequence forms a suffix of this\n LDAP name.  Returns true if this LdapName is at least as long as rdns,\n and for every position p in the range [size() - rdns.size(), size())\n the component getRdn(p) matches rdns.get(p). Returns false otherwise.\n If rdns is null, false is returned."}, {"method_name": "addAll", "method_sig": "public Name addAll (Name suffix)\n            throws InvalidNameException", "description": "Adds the components of a name -- in order -- to the end of this name."}, {"method_name": "addAll", "method_sig": "public Name addAll (List<Rdn> suffixRdns)", "description": "Adds the RDNs of a name -- in order -- to the end of this name."}, {"method_name": "addAll", "method_sig": "public Name addAll (int posn,\n                   Name suffix)\n            throws InvalidNameException", "description": "Adds the components of a name -- in order -- at a specified position\n within this name. Components of this LDAP name at or after the\n index (if any) of the first new component are shifted up\n (away from index 0) to accommodate the new components."}, {"method_name": "addAll", "method_sig": "public Name addAll (int posn,\n                   List<Rdn> suffixRdns)", "description": "Adds the RDNs of a name -- in order -- at a specified position\n within this name. RDNs of this LDAP name at or after the\n index (if any) of the first new RDN are shifted up (away from index 0) to\n accommodate the new RDNs."}, {"method_name": "add", "method_sig": "public Name add (String comp)\n         throws InvalidNameException", "description": "Adds a single component to the end of this LDAP name."}, {"method_name": "add", "method_sig": "public Name add (Rdn comp)", "description": "Adds a single RDN to the end of this LDAP name."}, {"method_name": "add", "method_sig": "public Name add (int posn,\n                String comp)\n         throws InvalidNameException", "description": "Adds a single component at a specified position within this\n LDAP name.\n Components of this LDAP name at or after the index (if any) of the new\n component are shifted up by one (away from index 0) to accommodate\n the new component."}, {"method_name": "add", "method_sig": "public Name add (int posn,\n                Rdn comp)", "description": "Adds a single RDN at a specified position within this\n LDAP name.\n RDNs of this LDAP name at or after the index (if any) of the new\n RDN are shifted up by one (away from index 0) to accommodate\n the new RDN."}, {"method_name": "remove", "method_sig": "public Object remove (int posn)\n              throws InvalidNameException", "description": "Removes a component from this LDAP name.\n The component of this name at the specified position is removed.\n Components with indexes greater than this position (if any)\n are shifted down (toward index 0) by one."}, {"method_name": "getRdns", "method_sig": "public List<Rdn> getRdns()", "description": "Retrieves the list of relative distinguished names.\n The contents of the list are unmodifiable.\n The indexing of RDNs in the returned list follows the numbering of\n RDNs as described in the class description.\n If the name has zero components, an empty list is returned."}, {"method_name": "clone", "method_sig": "public Object clone()", "description": "Generates a new copy of this name.\n Subsequent changes to the components of this name will not\n affect the new copy, and vice versa."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a string representation of this LDAP name in a format\n defined by RFC 2253\n and described in the class description. If the name has zero\n components an empty string is returned."}, {"method_name": "equals", "method_sig": "public boolean equals (Object obj)", "description": "Determines whether two LDAP names are equal.\n If obj is null or not an LDAP name, false is returned.\n \n Two LDAP names are equal if each RDN in one is equal\n to the corresponding RDN in the other. This implies\n both have the same number of RDNs, and each RDN's\n equals() test against the corresponding RDN in the other\n name returns true. See Rdn.equals(Object obj)\n for a definition of RDN equality."}, {"method_name": "compareTo", "method_sig": "public int compareTo (Object obj)", "description": "Compares this LdapName with the specified Object for order.\n Returns a negative integer, zero, or a positive integer as this\n Name is less than, equal to, or greater than the given Object.\n \n If obj is null or not an instance of LdapName, ClassCastException\n is thrown.\n \n Ordering of LDAP names follows the lexicographical rules for\n string comparison, with the extension that this applies to all\n the RDNs in the LDAP name. All the RDNs are lined up in their\n specified order and compared lexicographically.\n See Rdn.compareTo(Object obj)\n for RDN comparison rules.\n \n If this LDAP name is lexicographically lesser than obj,\n a negative number is returned.\n If this LDAP name is lexicographically greater than obj,\n a positive number is returned."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Computes the hash code of this LDAP name.\n The hash code is the sum of the hash codes of individual RDNs\n of this  name."}]}