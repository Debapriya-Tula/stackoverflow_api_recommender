{"name": "Class Utilities", "module": "java.desktop", "package": "javax.swing.text", "text": "A collection of methods to deal with various text\n related activities.", "codes": ["public class Utilities\nextends Object"], "fields": [], "methods": [{"method_name": "drawTabbedText", "method_sig": "@Deprecated(since=\"9\")\npublic static final int drawTabbedText (Segment s,\n                                       int x,\n                                       int y,\n                                       Graphics g,\n                                       TabExpander e,\n                                       int startOffset)", "description": "Draws the given text, expanding any tabs that are contained\n using the given tab expansion technique.  This particular\n implementation renders in a 1.1 style coordinate system\n where ints are used and 72dpi is assumed."}, {"method_name": "drawTabbedText", "method_sig": "public static final float drawTabbedText (Segment s,\n                                         float x,\n                                         float y,\n                                         Graphics2D g,\n                                         TabExpander e,\n                                         int startOffset)", "description": "Draws the given text, expanding any tabs that are contained\n using the given tab expansion technique."}, {"method_name": "getTabbedTextWidth", "method_sig": "@Deprecated(since=\"9\")\npublic static final int getTabbedTextWidth (Segment s,\n                                           FontMetrics metrics,\n                                           int x,\n                                           TabExpander e,\n                                           int startOffset)", "description": "Determines the width of the given segment of text taking tabs\n into consideration.  This is implemented in a 1.1 style coordinate\n system where ints are used and 72dpi is assumed."}, {"method_name": "getTabbedTextWidth", "method_sig": "public static final float getTabbedTextWidth (Segment s,\n                                             FontMetrics metrics,\n                                             float x,\n                                             TabExpander e,\n                                             int startOffset)", "description": "Determines the width of the given segment of text taking tabs\n into consideration."}, {"method_name": "getTabbedTextOffset", "method_sig": "@Deprecated(since=\"9\")\npublic static final int getTabbedTextOffset (Segment s,\n                                            FontMetrics metrics,\n                                            int x0,\n                                            int x,\n                                            TabExpander e,\n                                            int startOffset)", "description": "Determines the relative offset into the given text that\n best represents the given span in the view coordinate\n system.  This is implemented in a 1.1 style coordinate\n system where ints are used and 72dpi is assumed."}, {"method_name": "getTabbedTextOffset", "method_sig": "@Deprecated(since=\"9\")\npublic static final int getTabbedTextOffset (Segment s,\n                                            FontMetrics metrics,\n                                            int x0,\n                                            int x,\n                                            TabExpander e,\n                                            int startOffset,\n                                            boolean round)", "description": "Determines the relative offset into the given text that\n best represents the given span in the view coordinate\n system."}, {"method_name": "getTabbedTextOffset", "method_sig": "public static final int getTabbedTextOffset (Segment s,\n                                            FontMetrics metrics,\n                                            float x0,\n                                            float x,\n                                            TabExpander e,\n                                            int startOffset,\n                                            boolean round)", "description": "Determines the relative offset into the given text that\n best represents the given span in the view coordinate\n system."}, {"method_name": "getBreakLocation", "method_sig": "@Deprecated(since=\"9\")\npublic static final int getBreakLocation (Segment s,\n                                         FontMetrics metrics,\n                                         int x0,\n                                         int x,\n                                         TabExpander e,\n                                         int startOffset)", "description": "Determine where to break the given text to fit\n within the given span. This tries to find a word boundary."}, {"method_name": "getBreakLocation", "method_sig": "public static final int getBreakLocation (Segment s,\n                                         FontMetrics metrics,\n                                         float x0,\n                                         float x,\n                                         TabExpander e,\n                                         int startOffset)", "description": "Determine where to break the given text to fit\n within the given span. This tries to find a word boundary."}, {"method_name": "getRowStart", "method_sig": "public static final int getRowStart (JTextComponent c,\n                                    int offs)\n                             throws BadLocationException", "description": "Determines the starting row model position of the row that contains\n the specified model position.  The component given must have a\n size to compute the result.  If the component doesn't have a size\n a value of -1 will be returned."}, {"method_name": "getRowEnd", "method_sig": "public static final int getRowEnd (JTextComponent c,\n                                  int offs)\n                           throws BadLocationException", "description": "Determines the ending row model position of the row that contains\n the specified model position.  The component given must have a\n size to compute the result.  If the component doesn't have a size\n a value of -1 will be returned."}, {"method_name": "getPositionAbove", "method_sig": "@Deprecated(since=\"9\")\npublic static final int getPositionAbove (JTextComponent c,\n                                         int offs,\n                                         int x)\n                                  throws BadLocationException", "description": "Determines the position in the model that is closest to the given\n view location in the row above.  The component given must have a\n size to compute the result.  If the component doesn't have a size\n a value of -1 will be returned."}, {"method_name": "getPositionAbove", "method_sig": "public static final int getPositionAbove (JTextComponent c,\n                                         int offs,\n                                         float x)\n                                  throws BadLocationException", "description": "Determines the position in the model that is closest to the given\n view location in the row above.  The component given must have a\n size to compute the result.  If the component doesn't have a size\n a value of -1 will be returned."}, {"method_name": "getPositionBelow", "method_sig": "@Deprecated(since=\"9\")\npublic static final int getPositionBelow (JTextComponent c,\n                                         int offs,\n                                         int x)\n                                  throws BadLocationException", "description": "Determines the position in the model that is closest to the given\n view location in the row below.  The component given must have a\n size to compute the result.  If the component doesn't have a size\n a value of -1 will be returned."}, {"method_name": "getPositionBelow", "method_sig": "public static final int getPositionBelow (JTextComponent c,\n                                         int offs,\n                                         float x)\n                                  throws BadLocationException", "description": "Determines the position in the model that is closest to the given\n view location in the row below.  The component given must have a\n size to compute the result.  If the component doesn't have a size\n a value of -1 will be returned."}, {"method_name": "getWordStart", "method_sig": "public static final int getWordStart (JTextComponent c,\n                                     int offs)\n                              throws BadLocationException", "description": "Determines the start of a word for the given model location.\n Uses BreakIterator.getWordInstance() to actually get the words."}, {"method_name": "getWordEnd", "method_sig": "public static final int getWordEnd (JTextComponent c,\n                                   int offs)\n                            throws BadLocationException", "description": "Determines the end of a word for the given location.\n Uses BreakIterator.getWordInstance() to actually get the words."}, {"method_name": "getNextWord", "method_sig": "public static final int getNextWord (JTextComponent c,\n                                    int offs)\n                             throws BadLocationException", "description": "Determines the start of the next word for the given location.\n Uses BreakIterator.getWordInstance() to actually get the words."}, {"method_name": "getPreviousWord", "method_sig": "public static final int getPreviousWord (JTextComponent c,\n                                        int offs)\n                                 throws BadLocationException", "description": "Determine the start of the prev word for the given location.\n Uses BreakIterator.getWordInstance() to actually get the words."}, {"method_name": "getParagraphElement", "method_sig": "public static final Element getParagraphElement (JTextComponent c,\n                                                int offs)", "description": "Determines the element to use for a paragraph/line."}]}