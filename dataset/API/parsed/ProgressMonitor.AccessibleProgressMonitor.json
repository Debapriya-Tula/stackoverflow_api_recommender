{"name": "Class ProgressMonitor.AccessibleProgressMonitor", "module": "java.desktop", "package": "javax.swing", "text": "AccessibleProgressMonitor implements accessibility\n support for the ProgressMonitor class.", "codes": ["protected class ProgressMonitor.AccessibleProgressMonitor\nextends AccessibleContext\nimplements AccessibleText, ChangeListener, PropertyChangeListener"], "fields": [], "methods": [{"method_name": "stateChanged", "method_sig": "public void stateChanged (ChangeEvent e)", "description": "Invoked when the target of the listener has changed its state."}, {"method_name": "propertyChange", "method_sig": "public void propertyChange (PropertyChangeEvent e)", "description": "This method gets called when a bound property is changed."}, {"method_name": "getAccessibleName", "method_sig": "public String getAccessibleName()", "description": "Gets the accessibleName property of this object.  The accessibleName\n property of an object is a localized String that designates the purpose\n of the object.  For example, the accessibleName property of a label\n or button might be the text of the label or button itself.  In the\n case of an object that doesn't display its name, the accessibleName\n should still be set.  For example, in the case of a text field used\n to enter the name of a city, the accessibleName for the en_US locale\n could be 'city.'"}, {"method_name": "getAccessibleDescription", "method_sig": "public String getAccessibleDescription()", "description": "Gets the accessibleDescription property of this object.  The\n accessibleDescription property of this object is a short localized\n phrase describing the purpose of the object.  For example, in the\n case of a 'Cancel' button, the accessibleDescription could be\n 'Ignore changes and close dialog box.'"}, {"method_name": "getAccessibleRole", "method_sig": "public AccessibleRole getAccessibleRole()", "description": "Gets the role of this object.  The role of the object is the generic\n purpose or use of the class of this object.  For example, the role\n of a push button is AccessibleRole.PUSH_BUTTON.  The roles in\n AccessibleRole are provided so component developers can pick from\n a set of predefined roles.  This enables assistive technologies to\n provide a consistent interface to various tweaked subclasses of\n components (e.g., use AccessibleRole.PUSH_BUTTON for all components\n that act like a push button) as well as distinguish between subclasses\n that behave differently (e.g., AccessibleRole.CHECK_BOX for check boxes\n and AccessibleRole.RADIO_BUTTON for radio buttons).\n Note that the AccessibleRole class is also extensible, so\n custom component developers can define their own AccessibleRole's\n if the set of predefined roles is inadequate."}, {"method_name": "getAccessibleStateSet", "method_sig": "public AccessibleStateSet getAccessibleStateSet()", "description": "Gets the state set of this object.  The AccessibleStateSet of an object\n is composed of a set of unique AccessibleStates.  A change in the\n AccessibleStateSet of an object will cause a PropertyChangeEvent to\n be fired for the ACCESSIBLE_STATE_PROPERTY property."}, {"method_name": "getAccessibleParent", "method_sig": "public Accessible getAccessibleParent()", "description": "Gets the Accessible parent of this object."}, {"method_name": "getAccessibleIndexInParent", "method_sig": "public int getAccessibleIndexInParent()", "description": "Gets the 0-based index of this object in its accessible parent."}, {"method_name": "getAccessibleChildrenCount", "method_sig": "public int getAccessibleChildrenCount()", "description": "Returns the number of accessible children of the object."}, {"method_name": "getAccessibleChild", "method_sig": "public Accessible getAccessibleChild (int i)", "description": "Returns the specified Accessible child of the object.  The Accessible\n children of an Accessible object are zero-based, so the first child\n of an Accessible child is at index 0, the second child is at index 1,\n and so on."}, {"method_name": "getLocale", "method_sig": "public Locale getLocale()\n                 throws IllegalComponentStateException", "description": "Gets the locale of the component. If the component does not have a\n locale, then the locale of its parent is returned."}, {"method_name": "getAccessibleComponent", "method_sig": "public AccessibleComponent getAccessibleComponent()", "description": "Gets the AccessibleComponent associated with this object that has a\n graphical representation."}, {"method_name": "getAccessibleValue", "method_sig": "public AccessibleValue getAccessibleValue()", "description": "Gets the AccessibleValue associated with this object that supports a\n Numerical value."}, {"method_name": "getAccessibleText", "method_sig": "public AccessibleText getAccessibleText()", "description": "Gets the AccessibleText associated with this object presenting\n text on the display."}, {"method_name": "getIndexAtPoint", "method_sig": "public int getIndexAtPoint (Point p)", "description": "Given a point in local coordinates, return the zero-based index\n of the character under that Point.  If the point is invalid,\n this method returns -1."}, {"method_name": "getCharacterBounds", "method_sig": "public Rectangle getCharacterBounds (int i)", "description": "Determines the bounding box of the character at the given\n index into the string.  The bounds are returned in local\n coordinates.  If the index is invalid an empty rectangle is returned."}, {"method_name": "getCharCount", "method_sig": "public int getCharCount()", "description": "Returns the number of characters (valid indicies)"}, {"method_name": "getCaretPosition", "method_sig": "public int getCaretPosition()", "description": "Returns the zero-based offset of the caret.\n\n Note: That to the right of the caret will have the same index\n value as the offset (the caret is between two characters)."}, {"method_name": "getAtIndex", "method_sig": "public String getAtIndex (int part,\n                         int index)", "description": "Returns the String at a given index."}, {"method_name": "getAfterIndex", "method_sig": "public String getAfterIndex (int part,\n                            int index)", "description": "Returns the String after a given index."}, {"method_name": "getBeforeIndex", "method_sig": "public String getBeforeIndex (int part,\n                             int index)", "description": "Returns the String before a given index."}, {"method_name": "getCharacterAttribute", "method_sig": "public AttributeSet getCharacterAttribute (int i)", "description": "Returns the AttributeSet for a given character at a given index"}, {"method_name": "getSelectionStart", "method_sig": "public int getSelectionStart()", "description": "Returns the start offset within the selected text.\n If there is no selection, but there is\n a caret, the start and end offsets will be the same."}, {"method_name": "getSelectionEnd", "method_sig": "public int getSelectionEnd()", "description": "Returns the end offset within the selected text.\n If there is no selection, but there is\n a caret, the start and end offsets will be the same."}, {"method_name": "getSelectedText", "method_sig": "public String getSelectedText()", "description": "Returns the portion of the text that is selected."}]}