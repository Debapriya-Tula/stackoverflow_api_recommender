{"name": "Class SpringLayout", "module": "java.desktop", "package": "javax.swing", "text": "A SpringLayout lays out the children of its associated container\n according to a set of constraints.\n See How to Use SpringLayout\n in The Java Tutorial for examples of using\n SpringLayout.\n\n \n Each constraint,\n represented by a Spring object,\n controls the vertical or horizontal distance\n between two component edges.\n The edges can belong to\n any child of the container,\n or to the container itself.\n For example,\n the allowable width of a component\n can be expressed using a constraint\n that controls the distance between the west (left) and east (right)\n edges of the component.\n The allowable y coordinates for a component\n can be expressed by constraining the distance between\n the north (top) edge of the component\n and the north edge of its container.\n\n \n Every child of a SpringLayout-controlled container,\n as well as the container itself,\n has exactly one set of constraints\n associated with it.\n These constraints are represented by\n a SpringLayout.Constraints object.\n By default,\n SpringLayout creates constraints\n that make their associated component\n have the minimum, preferred, and maximum sizes\n returned by the component's\n Component.getMinimumSize(),\n Component.getPreferredSize(), and\n Component.getMaximumSize()\n methods. The x and y positions are initially not\n constrained, so that until you constrain them the Component\n will be positioned at 0,0 relative to the Insets of the\n parent Container.\n\n \n You can change\n a component's constraints in several ways.\n You can\n use one of the\n putConstraint\n methods\n to establish a spring\n linking the edges of two components within the same container.\n Or you can get the appropriate SpringLayout.Constraints\n object using\n getConstraints\n and then modify one or more of its springs.\n Or you can get the spring for a particular edge of a component\n using getConstraint,\n and modify it.\n You can also associate\n your own SpringLayout.Constraints object\n with a component by specifying the constraints object\n when you add the component to its container\n (using\n Container.add(Component, Object)).\n\n \n The Spring object representing each constraint\n has a minimum, preferred, maximum, and current value.\n The current value of the spring\n is somewhere between the minimum and maximum values,\n according to the formula given in the\n Spring.sum(javax.swing.Spring, javax.swing.Spring) method description.\n When the minimum, preferred, and maximum values are the same,\n the current value is always equal to them;\n this inflexible spring is called a strut.\n You can create struts using the factory method\n Spring.constant(int).\n The Spring class also provides factory methods\n for creating other kinds of springs,\n including springs that depend on other springs.\n\n \n In a SpringLayout, the position of each edge is dependent on\n the position of just one other edge. If a constraint is subsequently added\n to create a new binding for an edge, the previous binding is discarded\n and the edge remains dependent on a single edge.\n Springs should only be attached\n between edges of the container and its immediate children; the behavior\n of the SpringLayout when presented with constraints linking\n the edges of components from different containers (either internal or\n external) is undefined.\n\n \n SpringLayout vs. Other Layout Managers\n \n\n\nNote:\n Unlike many layout managers,\n SpringLayout doesn't automatically set the location of\n the components it manages.\n If you hand-code a GUI that uses SpringLayout,\n remember to initialize component locations by constraining the west/east\n and north/south locations.\n \n Depending on the constraints you use,\n you may also need to set the size of the container explicitly.\n \n\n\n Despite the simplicity of SpringLayout,\n it can emulate the behavior of most other layout managers.\n For some features,\n such as the line breaking provided by FlowLayout,\n you'll need to\n create a special-purpose subclass of the Spring class.\n\n \nSpringLayout also provides a way to solve\n many of the difficult layout\n problems that cannot be solved by nesting combinations\n of Boxes. That said, SpringLayout honors the\n LayoutManager2 contract correctly and so can be nested with\n other layout managers -- a technique that can be preferable to\n creating the constraints implied by the other layout managers.\n \n The asymptotic complexity of the layout operation of a SpringLayout\n is linear in the number of constraints (and/or components).\n \nWarning:\n Serialized objects of this class will not be compatible with\n future Swing releases. The current serialization support is\n appropriate for short term storage or RMI between applications running\n the same version of Swing.  As of 1.4, support for long term storage\n of all JavaBeans\u2122\n has been added to the java.beans package.\n Please see XMLEncoder.", "codes": ["public class SpringLayout\nextends Object\nimplements LayoutManager2"], "fields": [{"field_name": "NORTH", "field_sig": "public static final\u00a0String NORTH", "description": "Specifies the top edge of a component's bounding rectangle."}, {"field_name": "SOUTH", "field_sig": "public static final\u00a0String SOUTH", "description": "Specifies the bottom edge of a component's bounding rectangle."}, {"field_name": "EAST", "field_sig": "public static final\u00a0String EAST", "description": "Specifies the right edge of a component's bounding rectangle."}, {"field_name": "WEST", "field_sig": "public static final\u00a0String WEST", "description": "Specifies the left edge of a component's bounding rectangle."}, {"field_name": "HORIZONTAL_CENTER", "field_sig": "public static final\u00a0String HORIZONTAL_CENTER", "description": "Specifies the horizontal center of a component's bounding rectangle."}, {"field_name": "VERTICAL_CENTER", "field_sig": "public static final\u00a0String VERTICAL_CENTER", "description": "Specifies the vertical center of a component's bounding rectangle."}, {"field_name": "BASELINE", "field_sig": "public static final\u00a0String BASELINE", "description": "Specifies the baseline of a component."}, {"field_name": "WIDTH", "field_sig": "public static final\u00a0String WIDTH", "description": "Specifies the width of a component's bounding rectangle."}, {"field_name": "HEIGHT", "field_sig": "public static final\u00a0String HEIGHT", "description": "Specifies the height of a component's bounding rectangle."}], "methods": [{"method_name": "addLayoutComponent", "method_sig": "public void addLayoutComponent (String name,\n                               Component c)", "description": "Has no effect,\n since this layout manager does not\n use a per-component string."}, {"method_name": "removeLayoutComponent", "method_sig": "public void removeLayoutComponent (Component c)", "description": "Removes the constraints associated with the specified component."}, {"method_name": "addLayoutComponent", "method_sig": "public void addLayoutComponent (Component component,\n                               Object constraints)", "description": "If constraints is an instance of\n SpringLayout.Constraints,\n associates the constraints with the specified component."}, {"method_name": "getLayoutAlignmentX", "method_sig": "public float getLayoutAlignmentX (Container p)", "description": "Returns 0.5f (centered)."}, {"method_name": "getLayoutAlignmentY", "method_sig": "public float getLayoutAlignmentY (Container p)", "description": "Returns 0.5f (centered)."}, {"method_name": "putConstraint", "method_sig": "public void putConstraint (String e1,\n                          Component c1,\n                          int pad,\n                          String e2,\n                          Component c2)", "description": "Links edge e1 of component c1 to\n edge e2 of component c2,\n with a fixed distance between the edges. This\n constraint will cause the assignment\n \n     value(e1, c1) = value(e2, c2) + pad\n to take place during all subsequent layout operations."}, {"method_name": "putConstraint", "method_sig": "public void putConstraint (String e1,\n                          Component c1,\n                          Spring s,\n                          String e2,\n                          Component c2)", "description": "Links edge e1 of component c1 to\n edge e2 of component c2. As edge\n (e2, c2) changes value, edge (e1, c1) will\n be calculated by taking the (spring) sum of (e2, c2)\n and s.\n Each edge must have one of the following values:\n SpringLayout.NORTH,\n SpringLayout.SOUTH,\n SpringLayout.EAST,\n SpringLayout.WEST,\n SpringLayout.VERTICAL_CENTER,\n SpringLayout.HORIZONTAL_CENTER or\n SpringLayout.BASELINE."}, {"method_name": "getConstraints", "method_sig": "public SpringLayout.Constraints getConstraints (Component c)", "description": "Returns the constraints for the specified component.\n Note that,\n unlike the GridBagLayout\ngetConstraints method,\n this method does not clone constraints.\n If no constraints\n have been associated with this component,\n this method\n returns a default constraints object positioned at\n 0,0 relative to the parent's Insets and its width/height\n constrained to the minimum, maximum, and preferred sizes of the\n component. The size characteristics\n are not frozen at the time this method is called;\n instead this method returns a constraints object\n whose characteristics track the characteristics\n of the component as they change."}, {"method_name": "getConstraint", "method_sig": "public Spring getConstraint (String edgeName,\n                            Component c)", "description": "Returns the spring controlling the distance between\n the specified edge of\n the component and the top or left edge of its parent. This\n method, instead of returning the current binding for the\n edge, returns a proxy that tracks the characteristics\n of the edge even if the edge is subsequently rebound.\n Proxies are intended to be used in builder environments\n where it is useful to allow the user to define the\n constraints for a layout in any order. Proxies do, however,\n provide the means to create cyclic dependencies amongst\n the constraints of a layout. Such cycles are detected\n internally by SpringLayout so that\n the layout operation always terminates."}]}