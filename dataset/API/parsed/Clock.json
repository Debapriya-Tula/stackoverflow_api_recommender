{"name": "Class Clock", "module": "java.base", "package": "java.time", "text": "A clock providing access to the current instant, date and time using a time-zone.\n \n Instances of this class are used to find the current instant, which can be\n interpreted using the stored time-zone to find the current date and time.\n As such, a clock can be used instead of System.currentTimeMillis()\n and TimeZone.getDefault().\n \n Use of a Clock is optional. All key date-time classes also have a\n now() factory method that uses the system clock in the default time zone.\n The primary purpose of this abstraction is to allow alternate clocks to be\n plugged in as and when required. Applications use an object to obtain the\n current time rather than a static method. This can simplify testing.\n \n Best practice for applications is to pass a Clock into any method\n that requires the current instant. A dependency injection framework is one\n way to achieve this:\n \n  public class MyBean {\n    private Clock clock;  // dependency inject\n    ...\n    public void process(LocalDate eventDate) {\n      if (eventDate.isBefore(LocalDate.now(clock)) {\n        ...\n      }\n    }\n  }\n \n This approach allows an alternate clock, such as fixed\n or offset to be used during testing.\n \n The system factory methods provide clocks based on the best available\n system clock This may use System.currentTimeMillis(), or a higher\n resolution clock if one is available.", "codes": ["public abstract class Clock\nextends Object"], "fields": [], "methods": [{"method_name": "systemUTC", "method_sig": "public static Clock systemUTC()", "description": "Obtains a clock that returns the current instant using the best available\n system clock, converting to date and time using the UTC time-zone.\n \n This clock, rather than systemDefaultZone(), should be used when\n you need the current instant without the date or time.\n \n This clock is based on the best available system clock.\n This may use System.currentTimeMillis(), or a higher resolution\n clock if one is available.\n \n Conversion from instant to date or time uses the UTC time-zone.\n \n The returned implementation is immutable, thread-safe and Serializable.\n It is equivalent to system(ZoneOffset.UTC)."}, {"method_name": "systemDefaultZone", "method_sig": "public static Clock systemDefaultZone()", "description": "Obtains a clock that returns the current instant using the best available\n system clock, converting to date and time using the default time-zone.\n \n This clock is based on the best available system clock.\n This may use System.currentTimeMillis(), or a higher resolution\n clock if one is available.\n \n Using this method hard codes a dependency to the default time-zone into your application.\n It is recommended to avoid this and use a specific time-zone whenever possible.\n The UTC clock should be used when you need the current instant\n without the date or time.\n \n The returned implementation is immutable, thread-safe and Serializable.\n It is equivalent to system(ZoneId.systemDefault())."}, {"method_name": "system", "method_sig": "public static Clock system (ZoneId zone)", "description": "Obtains a clock that returns the current instant using the best available\n system clock.\n \n This clock is based on the best available system clock.\n This may use System.currentTimeMillis(), or a higher resolution\n clock if one is available.\n \n Conversion from instant to date or time uses the specified time-zone.\n \n The returned implementation is immutable, thread-safe and Serializable."}, {"method_name": "tickMillis", "method_sig": "public static Clock tickMillis (ZoneId zone)", "description": "Obtains a clock that returns the current instant ticking in whole milliseconds\n using the best available system clock.\n \n This clock will always have the nano-of-second field truncated to milliseconds.\n This ensures that the visible time ticks in whole milliseconds.\n The underlying clock is the best available system clock, equivalent to\n using system(ZoneId).\n \n Implementations may use a caching strategy for performance reasons.\n As such, it is possible that the start of the millisecond observed via this\n clock will be later than that observed directly via the underlying clock.\n \n The returned implementation is immutable, thread-safe and Serializable.\n It is equivalent to tick(system(zone), Duration.ofMillis(1))."}, {"method_name": "tickSeconds", "method_sig": "public static Clock tickSeconds (ZoneId zone)", "description": "Obtains a clock that returns the current instant ticking in whole seconds\n using the best available system clock.\n \n This clock will always have the nano-of-second field set to zero.\n This ensures that the visible time ticks in whole seconds.\n The underlying clock is the best available system clock, equivalent to\n using system(ZoneId).\n \n Implementations may use a caching strategy for performance reasons.\n As such, it is possible that the start of the second observed via this\n clock will be later than that observed directly via the underlying clock.\n \n The returned implementation is immutable, thread-safe and Serializable.\n It is equivalent to tick(system(zone), Duration.ofSeconds(1))."}, {"method_name": "tickMinutes", "method_sig": "public static Clock tickMinutes (ZoneId zone)", "description": "Obtains a clock that returns the current instant ticking in whole minutes\n using the best available system clock.\n \n This clock will always have the nano-of-second and second-of-minute fields set to zero.\n This ensures that the visible time ticks in whole minutes.\n The underlying clock is the best available system clock, equivalent to\n using system(ZoneId).\n \n Implementations may use a caching strategy for performance reasons.\n As such, it is possible that the start of the minute observed via this\n clock will be later than that observed directly via the underlying clock.\n \n The returned implementation is immutable, thread-safe and Serializable.\n It is equivalent to tick(system(zone), Duration.ofMinutes(1))."}, {"method_name": "tick", "method_sig": "public static Clock tick (Clock baseClock,\n                         Duration tickDuration)", "description": "Obtains a clock that returns instants from the specified clock truncated\n to the nearest occurrence of the specified duration.\n \n This clock will only tick as per the specified duration. Thus, if the duration\n is half a second, the clock will return instants truncated to the half second.\n \n The tick duration must be positive. If it has a part smaller than a whole\n millisecond, then the whole duration must divide into one second without\n leaving a remainder. All normal tick durations will match these criteria,\n including any multiple of hours, minutes, seconds and milliseconds, and\n sensible nanosecond durations, such as 20ns, 250,000ns and 500,000ns.\n \n A duration of zero or one nanosecond would have no truncation effect.\n Passing one of these will return the underlying clock.\n \n Implementations may use a caching strategy for performance reasons.\n As such, it is possible that the start of the requested duration observed\n via this clock will be later than that observed directly via the underlying clock.\n \n The returned implementation is immutable, thread-safe and Serializable\n providing that the base clock is."}, {"method_name": "fixed", "method_sig": "public static Clock fixed (Instant fixedInstant,\n                          ZoneId zone)", "description": "Obtains a clock that always returns the same instant.\n \n This clock simply returns the specified instant.\n As such, it is not a clock in the conventional sense.\n The main use case for this is in testing, where the fixed clock ensures\n tests are not dependent on the current clock.\n \n The returned implementation is immutable, thread-safe and Serializable."}, {"method_name": "offset", "method_sig": "public static Clock offset (Clock baseClock,\n                           Duration offsetDuration)", "description": "Obtains a clock that returns instants from the specified clock with the\n specified duration added\n \n This clock wraps another clock, returning instants that are later by the\n specified duration. If the duration is negative, the instants will be\n earlier than the current date and time.\n The main use case for this is to simulate running in the future or in the past.\n \n A duration of zero would have no offsetting effect.\n Passing zero will return the underlying clock.\n \n The returned implementation is immutable, thread-safe and Serializable\n providing that the base clock is."}, {"method_name": "getZone", "method_sig": "public abstract ZoneId getZone()", "description": "Gets the time-zone being used to create dates and times.\n \n A clock will typically obtain the current instant and then convert that\n to a date or time using a time-zone. This method returns the time-zone used."}, {"method_name": "withZone", "method_sig": "public abstract Clock withZone (ZoneId zone)", "description": "Returns a copy of this clock with a different time-zone.\n \n A clock will typically obtain the current instant and then convert that\n to a date or time using a time-zone. This method returns a clock with\n similar properties but using a different time-zone."}, {"method_name": "millis", "method_sig": "public long millis()", "description": "Gets the current millisecond instant of the clock.\n \n This returns the millisecond-based instant, measured from 1970-01-01T00:00Z (UTC).\n This is equivalent to the definition of System.currentTimeMillis().\n \n Most applications should avoid this method and use Instant to represent\n an instant on the time-line rather than a raw millisecond value.\n This method is provided to allow the use of the clock in high performance use cases\n where the creation of an object would be unacceptable.\n \n The default implementation currently calls instant()."}, {"method_name": "instant", "method_sig": "public abstract Instant instant()", "description": "Gets the current instant of the clock.\n \n This returns an instant representing the current instant as defined by the clock."}, {"method_name": "equals", "method_sig": "public boolean equals (Object obj)", "description": "Checks if this clock is equal to another clock.\n \n Clocks should override this method to compare equals based on\n their state and to meet the contract of Object.equals(java.lang.Object).\n If not overridden, the behavior is defined by Object.equals(java.lang.Object)"}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "A hash code for this clock.\n \n Clocks should override this method based on\n their state and to meet the contract of Object.hashCode().\n If not overridden, the behavior is defined by Object.hashCode()"}]}