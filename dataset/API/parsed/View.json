{"name": "Class View", "module": "java.desktop", "package": "javax.swing.text", "text": "\n A very important part of the text package is the View class.\n As the name suggests it represents a view of the text model,\n or a piece of the text model.\n It is this class that is responsible for the look of the text component.\n The view is not intended to be some completely new thing that one must\n learn, but rather is much like a lightweight component.\n \nBy default, a view is very light.  It contains a reference to the parent\nview from which it can fetch many things without holding state, and it\ncontains a reference to a portion of the model (Element).\nA view does not\nhave to exactly represent an element in the model, that is simply a typical\nand therefore convenient mapping.  A view can alternatively maintain a couple\nof Position objects to maintain its location in the model (i.e. represent\na fragment of an element).  This is typically the result of formatting where\nviews have been broken down into pieces.  The convenience of a substantial\nrelationship to the element makes it easier to build factories to produce the\nviews, and makes it easier  to keep track of the view pieces as the model is\nchanged and the view must be changed to reflect the model.  Simple views\ntherefore represent an Element directly and complex views do not.\n\nA view has the following responsibilities:\n  \nParticipate in layout.\n\nThe view has a setSize method which is like\n    doLayout and setSize in Component combined.\n    The view has a preferenceChanged method which is\n    like invalidate in Component except that one can\n    invalidate just one axis\n    and the child requesting the change is identified.\n    A View expresses the size that it would like to be in terms of three\n    values, a minimum, a preferred, and a maximum span.  Layout in a view is\n    can be done independently upon each axis.  For a properly functioning View\n    implementation, the minimum span will be <= the preferred span which in turn\n    will be <= the maximum span.\n    \n\nThe minimum set of methods for layout are:\n    \ngetMinimumSpan\ngetPreferredSpan\ngetMaximumSpan\ngetAlignment\npreferenceChanged\nsetSize\n\nThe setSize method should be prepared to be called a number of times\n    (i.e. It may be called even if the size didn't change).\n    The setSize method\n    is generally called to make sure the View layout is complete prior to trying\n    to perform an operation on it that requires an up-to-date layout.  A view's\n    size should always be set to a value within the minimum and maximum\n    span specified by that view.  Additionally, the view must always call the\n    preferenceChanged method on the parent if it has changed the\n    values for the\n    layout it would like, and expects the parent to honor.  The parent View is\n    not required to recognize a change until the preferenceChanged\n    has been sent.\n    This allows parent View implementations to cache the child requirements if\n    desired.  The calling sequence looks something like the following:\n    \n\n\nThe exact calling sequence is up to the layout functionality of\n    the parent view (if the view has any children).  The view may collect\n    the preferences of the children prior to determining what it will give\n    each child, or it might iteratively update the children one at a time.\n    \nRender a portion of the model.\n\nThis is done in the paint method, which is pretty much like a component\n    paint method.  Views are expected to potentially populate a fairly large\n    tree.  A View has the following semantics for rendering:\n    \n\nThe view gets its allocation from the parent at paint time, so it\n    must be prepared to redo layout if the allocated area is different from\n    what it is prepared to deal with.\n    The coordinate system is the same as the hosting Component\n    (i.e. the Component returned by the\n    getContainer method).\n    This means a child view lives in the same coordinate system as the parent\n    view unless the parent has explicitly changed the coordinate system.\n    To schedule itself to be repainted a view can call repaint on the hosting\n    Component.\n    The default is to not clip the children.  It is more efficient\n    to allow a view to clip only if it really feels it needs clipping.\n    The Graphics object given is not initialized in any way.\n    A view should set any settings needed.\n    A View is inherently transparent.  While a view may render into its\n    entire allocation, typically a view does not.  Rendering is performed by\n    traversing down the tree of View implementations.\n    Each View is responsible\n    for rendering its children.  This behavior is depended upon for thread\n    safety.  While view implementations do not necessarily have to be implemented\n    with thread safety in mind, other view implementations that do make use of\n    concurrency can depend upon a tree traversal to guarantee thread safety.\n    The order of views relative to the model is up to the implementation.\n    Although child views will typically be arranged in the same order that they\n    occur in the model, they may be visually arranged in an entirely different\n    order.  View implementations may have Z-Order associated with them if the\n    children are overlapping.\n    \nThe methods for rendering are:\n    \npaint\n\nTranslate between the model and view coordinate systems.\n\nBecause the view objects are produced from a factory and therefore cannot\n    necessarily be counted upon to be in a particular pattern, one must be able\n    to perform translation to properly locate spatial representation of the model.\n    The methods for doing this are:\n    \nmodelToView\nviewToModel\ngetDocument\ngetElement\ngetStartOffset\ngetEndOffset\n\nThe layout must be valid prior to attempting to make the translation.\n    The translation is not valid, and must not be attempted while changes\n    are being broadcasted from the model via a DocumentEvent.\n    \nRespond to changes from the model.\n\nIf the overall view is represented by many pieces (which is the best situation\n    if one want to be able to change the view and write the least amount of new code),\n    it would be impractical to have a huge number of DocumentListeners.\n    If each\n    view listened to the model, only a few would actually be interested in the\n    changes broadcasted at any given time.   Since the model has no knowledge of\n    views, it has no way to filter the broadcast of change information.  The view\n    hierarchy itself is instead responsible for propagating the change information.\n    At any level in the view hierarchy, that view knows enough about its children to\n    best distribute the change information further.   Changes are therefore broadcasted\n    starting from the root of the view hierarchy.\n    The methods for doing this are:\n    \ninsertUpdate\nremoveUpdate\nchangedUpdate\n\n", "codes": ["public abstract class View\nextends Object\nimplements SwingConstants"], "fields": [{"field_name": "BadBreakWeight", "field_sig": "public static final\u00a0int BadBreakWeight", "description": "The weight to indicate a view is a bad break\n opportunity for the purpose of formatting.  This\n value indicates that no attempt should be made to\n break the view into fragments as the view has\n not been written to support fragmenting."}, {"field_name": "GoodBreakWeight", "field_sig": "public static final\u00a0int GoodBreakWeight", "description": "The weight to indicate a view supports breaking,\n but better opportunities probably exist."}, {"field_name": "ExcellentBreakWeight", "field_sig": "public static final\u00a0int ExcellentBreakWeight", "description": "The weight to indicate a view supports breaking,\n and this represents a very attractive place to\n break."}, {"field_name": "ForcedBreakWeight", "field_sig": "public static final\u00a0int ForcedBreakWeight", "description": "The weight to indicate a view supports breaking,\n and must be broken to be represented properly\n when placed in a view that formats its children\n by breaking them."}, {"field_name": "X_AXIS", "field_sig": "public static final\u00a0int X_AXIS", "description": "Axis for format/break operations."}, {"field_name": "Y_AXIS", "field_sig": "public static final\u00a0int Y_AXIS", "description": "Axis for format/break operations."}], "methods": [{"method_name": "getParent", "method_sig": "public View getParent()", "description": "Returns the parent of the view."}, {"method_name": "isVisible", "method_sig": "public boolean isVisible()", "description": "Returns a boolean that indicates whether\n  the view is visible or not.  By default\n  all views are visible."}, {"method_name": "getPreferredSpan", "method_sig": "public abstract float getPreferredSpan (int axis)", "description": "Determines the preferred span for this view along an\n axis."}, {"method_name": "getMinimumSpan", "method_sig": "public float getMinimumSpan (int axis)", "description": "Determines the minimum span for this view along an\n axis."}, {"method_name": "getMaximumSpan", "method_sig": "public float getMaximumSpan (int axis)", "description": "Determines the maximum span for this view along an\n axis."}, {"method_name": "preferenceChanged", "method_sig": "public void preferenceChanged (View child,\n                              boolean width,\n                              boolean height)", "description": "Child views can call this on the parent to indicate that\n the preference has changed and should be reconsidered\n for layout.  By default this just propagates upward to\n the next parent.  The root view will call\n revalidate on the associated text component."}, {"method_name": "getAlignment", "method_sig": "public float getAlignment (int axis)", "description": "Determines the desired alignment for this view along an\n axis.  The desired alignment is returned.  This should be\n a value >= 0.0 and <= 1.0, where 0 indicates alignment at\n the origin and 1.0 indicates alignment to the full span\n away from the origin.  An alignment of 0.5 would be the\n center of the view."}, {"method_name": "paint", "method_sig": "public abstract void paint (Graphics g,\n                           Shape allocation)", "description": "Renders using the given rendering surface and area on that\n surface.  The view may need to do layout and create child\n views to enable itself to render into the given allocation."}, {"method_name": "setParent", "method_sig": "public void setParent (View parent)", "description": "Establishes the parent view for this view.  This is\n guaranteed to be called before any other methods if the\n parent view is functioning properly.  This is also\n the last method called, since it is called to indicate\n the view has been removed from the hierarchy as\n well. When this method is called to set the parent to\n null, this method does the same for each of its children,\n propagating the notification that they have been\n disconnected from the view tree. If this is\n reimplemented, super.setParent() should\n be called."}, {"method_name": "getViewCount", "method_sig": "public int getViewCount()", "description": "Returns the number of views in this view.  Since\n the default is to not be a composite view this\n returns 0."}, {"method_name": "getView", "method_sig": "public View getView (int n)", "description": "Gets the nth child view.  Since there are no\n children by default, this returns null."}, {"method_name": "removeAll", "method_sig": "public void removeAll()", "description": "Removes all of the children.  This is a convenience\n call to replace."}, {"method_name": "remove", "method_sig": "public void remove (int i)", "description": "Removes one of the children at the given position.\n This is a convenience call to replace."}, {"method_name": "insert", "method_sig": "public void insert (int offs,\n                   View v)", "description": "Inserts a single child view.  This is a convenience\n call to replace."}, {"method_name": "append", "method_sig": "public void append (View v)", "description": "Appends a single child view.  This is a convenience\n call to replace."}, {"method_name": "replace", "method_sig": "public void replace (int offset,\n                    int length,\n                    View[] views)", "description": "Replaces child views.  If there are no views to remove\n this acts as an insert.  If there are no views to\n add this acts as a remove.  Views being removed will\n have the parent set to null, and the internal reference\n to them removed so that they can be garbage collected.\n This is implemented to do nothing, because by default\n a view has no children."}, {"method_name": "getViewIndex", "method_sig": "public int getViewIndex (int pos,\n                        Position.Bias b)", "description": "Returns the child view index representing the given position in\n the model.  By default a view has no children so this is implemented\n to return -1 to indicate there is no valid child index for any\n position."}, {"method_name": "getChildAllocation", "method_sig": "public Shape getChildAllocation (int index,\n                                Shape a)", "description": "Fetches the allocation for the given child view.\n This enables finding out where various views\n are located, without assuming how the views store\n their location.  This returns null since the\n default is to not have any child views."}, {"method_name": "getNextVisualPositionFrom", "method_sig": "public int getNextVisualPositionFrom (int pos,\n                                     Position.Bias b,\n                                     Shape a,\n                                     int direction,\n                                     Position.Bias[] biasRet)\n                              throws BadLocationException", "description": "Provides a way to determine the next visually represented model\n location at which one might place a caret.\n Some views may not be visible,\n they might not be in the same order found in the model, or they just\n might not allow access to some of the locations in the model.\n This method enables specifying a position to convert\n within the range of >=0.  If the value is -1, a position\n will be calculated automatically.  If the value < -1,\n the BadLocationException will be thrown."}, {"method_name": "modelToView", "method_sig": "public abstract Shape modelToView (int pos,\n                                  Shape a,\n                                  Position.Bias b)\n                           throws BadLocationException", "description": "Provides a mapping, for a given character,\n from the document model coordinate space\n to the view coordinate space."}, {"method_name": "modelToView", "method_sig": "public Shape modelToView (int p0,\n                         Position.Bias b0,\n                         int p1,\n                         Position.Bias b1,\n                         Shape a)\n                  throws BadLocationException", "description": "Provides a mapping, for a given region,\n from the document model coordinate space\n to the view coordinate space. The specified region is\n created as a union of the first and last character positions."}, {"method_name": "viewToModel", "method_sig": "public abstract int viewToModel (float x,\n                                float y,\n                                Shape a,\n                                Position.Bias[] biasReturn)", "description": "Provides a mapping from the view coordinate space to the logical\n coordinate space of the model.  The biasReturn\n argument will be filled in to indicate that the point given is\n closer to the next character in the model or the previous\n character in the model."}, {"method_name": "insertUpdate", "method_sig": "public void insertUpdate (DocumentEvent e,\n                         Shape a,\n                         ViewFactory f)", "description": "Gives notification that something was inserted into\n the document in a location that this view is responsible for.\n To reduce the burden to subclasses, this functionality is\n spread out into the following calls that subclasses can\n reimplement:\n \nupdateChildren is called\n if there were any changes to the element this view is\n responsible for.  If this view has child views that are\n represent the child elements, then this method should do\n whatever is necessary to make sure the child views correctly\n represent the model.\n forwardUpdate is called\n to forward the DocumentEvent to the appropriate child views.\n updateLayout is called to\n give the view a chance to either repair its layout, to reschedule\n layout, or do nothing.\n "}, {"method_name": "removeUpdate", "method_sig": "public void removeUpdate (DocumentEvent e,\n                         Shape a,\n                         ViewFactory f)", "description": "Gives notification that something was removed from the document\n in a location that this view is responsible for.\n To reduce the burden to subclasses, this functionality is\n spread out into the following calls that subclasses can\n reimplement:\n \nupdateChildren is called\n if there were any changes to the element this view is\n responsible for.  If this view has child views that are\n represent the child elements, then this method should do\n whatever is necessary to make sure the child views correctly\n represent the model.\n forwardUpdate is called\n to forward the DocumentEvent to the appropriate child views.\n updateLayout is called to\n give the view a chance to either repair its layout, to reschedule\n layout, or do nothing.\n "}, {"method_name": "changedUpdate", "method_sig": "public void changedUpdate (DocumentEvent e,\n                          Shape a,\n                          ViewFactory f)", "description": "Gives notification from the document that attributes were changed\n in a location that this view is responsible for.\n To reduce the burden to subclasses, this functionality is\n spread out into the following calls that subclasses can\n reimplement:\n \nupdateChildren is called\n if there were any changes to the element this view is\n responsible for.  If this view has child views that are\n represent the child elements, then this method should do\n whatever is necessary to make sure the child views correctly\n represent the model.\n forwardUpdate is called\n to forward the DocumentEvent to the appropriate child views.\n updateLayout is called to\n give the view a chance to either repair its layout, to reschedule\n layout, or do nothing.\n "}, {"method_name": "getDocument", "method_sig": "public Document getDocument()", "description": "Fetches the model associated with the view."}, {"method_name": "getStartOffset", "method_sig": "public int getStartOffset()", "description": "Fetches the portion of the model for which this view is\n responsible."}, {"method_name": "getEndOffset", "method_sig": "public int getEndOffset()", "description": "Fetches the portion of the model for which this view is\n responsible."}, {"method_name": "getElement", "method_sig": "public Element getElement()", "description": "Fetches the structural portion of the subject that this\n view is mapped to.  The view may not be responsible for the\n entire portion of the element."}, {"method_name": "getGraphics", "method_sig": "public Graphics getGraphics()", "description": "Fetch a Graphics for rendering.\n This can be used to determine\n font characteristics, and will be different for a print view\n than a component view."}, {"method_name": "getAttributes", "method_sig": "public AttributeSet getAttributes()", "description": "Fetches the attributes to use when rendering.  By default\n this simply returns the attributes of the associated element.\n This method should be used rather than using the element\n directly to obtain access to the attributes to allow\n view-specific attributes to be mixed in or to allow the\n view to have view-specific conversion of attributes by\n subclasses.\n Each view should document what attributes it recognizes\n for the purpose of rendering or layout, and should always\n access them through the AttributeSet returned\n by this method."}, {"method_name": "breakView", "method_sig": "public View breakView (int axis,\n                      int offset,\n                      float pos,\n                      float len)", "description": "Tries to break this view on the given axis.  This is\n called by views that try to do formatting of their\n children.  For example, a view of a paragraph will\n typically try to place its children into row and\n views representing chunks of text can sometimes be\n broken down into smaller pieces.\n \n This is implemented to return the view itself, which\n represents the default behavior on not being\n breakable.  If the view does support breaking, the\n starting offset of the view returned should be the\n given offset, and the end offset should be less than\n or equal to the end offset of the view being broken."}, {"method_name": "createFragment", "method_sig": "public View createFragment (int p0,\n                           int p1)", "description": "Creates a view that represents a portion of the element.\n This is potentially useful during formatting operations\n for taking measurements of fragments of the view.  If\n the view doesn't support fragmenting (the default), it\n should return itself."}, {"method_name": "getBreakWeight", "method_sig": "public int getBreakWeight (int axis,\n                          float pos,\n                          float len)", "description": "Determines how attractive a break opportunity in\n this view is.  This can be used for determining which\n view is the most attractive to call breakView\n on in the process of formatting.  A view that represents\n text that has whitespace in it might be more attractive\n than a view that has no whitespace, for example.  The\n higher the weight, the more attractive the break.  A\n value equal to or lower than BadBreakWeight\n should not be considered for a break.  A value greater\n than or equal to ForcedBreakWeight should\n be broken.\n \n This is implemented to provide the default behavior\n of returning BadBreakWeight unless the length\n is greater than the length of the view in which case the\n entire view represents the fragment.  Unless a view has\n been written to support breaking behavior, it is not\n attractive to try and break the view.  An example of\n a view that does support breaking is LabelView.\n An example of a view that uses break weight is\n ParagraphView."}, {"method_name": "getResizeWeight", "method_sig": "public int getResizeWeight (int axis)", "description": "Determines the resizability of the view along the\n given axis.  A value of 0 or less is not resizable."}, {"method_name": "setSize", "method_sig": "public void setSize (float width,\n                    float height)", "description": "Sets the size of the view.  This should cause\n layout of the view along the given axis, if it\n has any layout duties."}, {"method_name": "getContainer", "method_sig": "public Container getContainer()", "description": "Fetches the container hosting the view.  This is useful for\n things like scheduling a repaint, finding out the host\n components font, etc.  The default implementation\n of this is to forward the query to the parent view."}, {"method_name": "getViewFactory", "method_sig": "public ViewFactory getViewFactory()", "description": "Fetches the ViewFactory implementation that is feeding\n the view hierarchy.  Normally the views are given this\n as an argument to updates from the model when they\n are most likely to need the factory, but this\n method serves to provide it at other times."}, {"method_name": "getToolTipText", "method_sig": "public String getToolTipText (float x,\n                             float y,\n                             Shape allocation)", "description": "Returns the tooltip text at the specified location. The default\n implementation returns the value from the child View identified by\n the passed in location."}, {"method_name": "getViewIndex", "method_sig": "public int getViewIndex (float x,\n                        float y,\n                        Shape allocation)", "description": "Returns the child view index representing the given position in\n the view. This iterates over all the children returning the\n first with a bounds that contains x, y."}, {"method_name": "updateChildren", "method_sig": "protected boolean updateChildren (DocumentEvent.ElementChange ec,\n                                 DocumentEvent e,\n                                 ViewFactory f)", "description": "Updates the child views in response to receiving notification\n that the model changed, and there is change record for the\n element this view is responsible for.  This is implemented\n to assume the child views are directly responsible for the\n child elements of the element this view represents.  The\n ViewFactory is used to create child views for each element\n specified as added in the ElementChange, starting at the\n index specified in the given ElementChange.  The number of\n child views representing the removed elements specified are\n removed."}, {"method_name": "forwardUpdate", "method_sig": "protected void forwardUpdate (DocumentEvent.ElementChange ec,\n                             DocumentEvent e,\n                             Shape a,\n                             ViewFactory f)", "description": "Forwards the given DocumentEvent to the child views\n that need to be notified of the change to the model.\n If there were changes to the element this view is\n responsible for, that should be considered when\n forwarding (i.e. new child views should not get\n notified)."}, {"method_name": "forwardUpdateToView", "method_sig": "protected void forwardUpdateToView (View v,\n                                   DocumentEvent e,\n                                   Shape a,\n                                   ViewFactory f)", "description": "Forwards the DocumentEvent to the give child view.  This\n simply messages the view with a call to insertUpdate,\n removeUpdate, or changedUpdate depending\n upon the type of the event.  This is called by\n forwardUpdate to forward\n the event to children that need it."}, {"method_name": "updateLayout", "method_sig": "protected void updateLayout (DocumentEvent.ElementChange ec,\n                            DocumentEvent e,\n                            Shape a)", "description": "Updates the layout in response to receiving notification of\n change from the model.  This is implemented to call\n preferenceChanged to reschedule a new layout\n if the ElementChange record is not null."}, {"method_name": "modelToView", "method_sig": "@Deprecated\npublic Shape modelToView (int pos,\n                         Shape a)\n                  throws BadLocationException", "description": "Provides a mapping from the document model coordinate space\n to the coordinate space of the view mapped to it. This is\n implemented to default the bias to Position.Bias.Forward\n which was previously implied."}, {"method_name": "viewToModel", "method_sig": "@Deprecated\npublic int viewToModel (float x,\n                       float y,\n                       Shape a)", "description": "Provides a mapping from the view coordinate space to the logical\n coordinate space of the model."}]}