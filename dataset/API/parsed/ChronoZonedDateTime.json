{"name": "Interface ChronoZonedDateTime<D extends ChronoLocalDate>", "module": "java.base", "package": "java.time.chrono", "text": "A date-time with a time-zone in an arbitrary chronology,\n intended for advanced globalization use cases.\n \nMost applications should declare method signatures, fields and variables\n as ZonedDateTime, not this interface.\n\n A ChronoZonedDateTime is the abstract representation of an offset date-time\n where the Chronology chronology, or calendar system, is pluggable.\n The date-time is defined in terms of fields expressed by TemporalField,\n where most common implementations are defined in ChronoField.\n The chronology defines how the calendar system operates and the meaning of\n the standard fields.\n\n When to use this interface\n The design of the API encourages the use of ZonedDateTime rather than this\n interface, even in the case where the application needs to deal with multiple\n calendar systems. The rationale for this is explored in detail in ChronoLocalDate.\n \n Ensure that the discussion in ChronoLocalDate has been read and understood\n before using this interface.", "codes": ["public interface ChronoZonedDateTime<D extends ChronoLocalDate>\nextends Temporal, Comparable<ChronoZonedDateTime<?>>"], "fields": [], "methods": [{"method_name": "timeLineOrder", "method_sig": "static Comparator<ChronoZonedDateTime<?>> timeLineOrder()", "description": "Gets a comparator that compares ChronoZonedDateTime in\n time-line order ignoring the chronology.\n \n This comparator differs from the comparison in compareTo(java.time.chrono.ChronoZonedDateTime<?>) in that it\n only compares the underlying instant and not the chronology.\n This allows dates in different calendar systems to be compared based\n on the position of the date-time on the instant time-line.\n The underlying comparison is equivalent to comparing the epoch-second and nano-of-second."}, {"method_name": "from", "method_sig": "static ChronoZonedDateTime<?> from (TemporalAccessor temporal)", "description": "Obtains an instance of ChronoZonedDateTime from a temporal object.\n \n This creates a zoned date-time based on the specified temporal.\n A TemporalAccessor represents an arbitrary set of date and time information,\n which this factory converts to an instance of ChronoZonedDateTime.\n \n The conversion extracts and combines the chronology, date, time and zone\n from the temporal object. The behavior is equivalent to using\n Chronology.zonedDateTime(TemporalAccessor) with the extracted chronology.\n Implementations are permitted to perform optimizations such as accessing\n those fields that are equivalent to the relevant objects.\n \n This method matches the signature of the functional interface TemporalQuery\n allowing it to be used as a query via method reference, ChronoZonedDateTime::from."}, {"method_name": "toLocalDate", "method_sig": "default D toLocalDate()", "description": "Gets the local date part of this date-time.\n \n This returns a local date with the same year, month and day\n as this date-time."}, {"method_name": "toLocalTime", "method_sig": "default LocalTime toLocalTime()", "description": "Gets the local time part of this date-time.\n \n This returns a local time with the same hour, minute, second and\n nanosecond as this date-time."}, {"method_name": "toLocalDateTime", "method_sig": "ChronoLocalDateTime<D> toLocalDateTime()", "description": "Gets the local date-time part of this date-time.\n \n This returns a local date with the same year, month and day\n as this date-time."}, {"method_name": "getChronology", "method_sig": "default Chronology getChronology()", "description": "Gets the chronology of this date-time.\n \n The Chronology represents the calendar system in use.\n The era and other fields in ChronoField are defined by the chronology."}, {"method_name": "getOffset", "method_sig": "ZoneOffset getOffset()", "description": "Gets the zone offset, such as '+01:00'.\n \n This is the offset of the local date-time from UTC/Greenwich."}, {"method_name": "getZone", "method_sig": "ZoneId getZone()", "description": "Gets the zone ID, such as 'Europe/Paris'.\n \n This returns the stored time-zone id used to determine the time-zone rules."}, {"method_name": "withEarlierOffsetAtOverlap", "method_sig": "ChronoZonedDateTime<D> withEarlierOffsetAtOverlap()", "description": "Returns a copy of this date-time changing the zone offset to the\n earlier of the two valid offsets at a local time-line overlap.\n \n This method only has any effect when the local time-line overlaps, such as\n at an autumn daylight savings cutover. In this scenario, there are two\n valid offsets for the local date-time. Calling this method will return\n a zoned date-time with the earlier of the two selected.\n \n If this method is called when it is not an overlap, this\n is returned.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "withLaterOffsetAtOverlap", "method_sig": "ChronoZonedDateTime<D> withLaterOffsetAtOverlap()", "description": "Returns a copy of this date-time changing the zone offset to the\n later of the two valid offsets at a local time-line overlap.\n \n This method only has any effect when the local time-line overlaps, such as\n at an autumn daylight savings cutover. In this scenario, there are two\n valid offsets for the local date-time. Calling this method will return\n a zoned date-time with the later of the two selected.\n \n If this method is called when it is not an overlap, this\n is returned.\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "withZoneSameLocal", "method_sig": "ChronoZonedDateTime<D> withZoneSameLocal (ZoneId zone)", "description": "Returns a copy of this date-time with a different time-zone,\n retaining the local date-time if possible.\n \n This method changes the time-zone and retains the local date-time.\n The local date-time is only changed if it is invalid for the new zone.\n \n To change the zone and adjust the local date-time,\n use withZoneSameInstant(ZoneId).\n \n This instance is immutable and unaffected by this method call."}, {"method_name": "withZoneSameInstant", "method_sig": "ChronoZonedDateTime<D> withZoneSameInstant (ZoneId zone)", "description": "Returns a copy of this date-time with a different time-zone,\n retaining the instant.\n \n This method changes the time-zone and retains the instant.\n This normally results in a change to the local date-time.\n \n This method is based on retaining the same instant, thus gaps and overlaps\n in the local time-line have no effect on the result.\n \n To change the offset while keeping the local time,\n use withZoneSameLocal(ZoneId)."}, {"method_name": "isSupported", "method_sig": "boolean isSupported (TemporalField field)", "description": "Checks if the specified field is supported.\n \n This checks if the specified field can be queried on this date-time.\n If false, then calling the range,\n get and with(TemporalField, long)\n methods will throw an exception.\n \n The set of supported fields is defined by the chronology and normally includes\n all ChronoField fields.\n \n If the field is not a ChronoField, then the result of this method\n is obtained by invoking TemporalField.isSupportedBy(TemporalAccessor)\n passing this as the argument.\n Whether the field is supported is determined by the field."}, {"method_name": "isSupported", "method_sig": "default boolean isSupported (TemporalUnit unit)", "description": "Checks if the specified unit is supported.\n \n This checks if the specified unit can be added to or subtracted from this date-time.\n If false, then calling the plus(long, TemporalUnit) and\n minus methods will throw an exception.\n \n The set of supported units is defined by the chronology and normally includes\n all ChronoUnit units except FOREVER.\n \n If the unit is not a ChronoUnit, then the result of this method\n is obtained by invoking TemporalUnit.isSupportedBy(Temporal)\n passing this as the argument.\n Whether the unit is supported is determined by the unit."}, {"method_name": "with", "method_sig": "default ChronoZonedDateTime<D> with (TemporalAdjuster adjuster)", "description": "Returns an adjusted object of the same type as this object with the adjustment made.\n \n This adjusts this date-time according to the rules of the specified adjuster.\n A simple adjuster might simply set the one of the fields, such as the year field.\n A more complex adjuster might set the date to the last day of the month.\n A selection of common adjustments is provided in\n TemporalAdjusters.\n These include finding the \"last day of the month\" and \"next Wednesday\".\n The adjuster is responsible for handling special cases, such as the varying\n lengths of month and leap years.\n \n Some example code indicating how and why this method is used:\n \n  date = date.with(Month.JULY);        // most key classes implement TemporalAdjuster\n  date = date.with(lastDayOfMonth());  // static import from Adjusters\n  date = date.with(next(WEDNESDAY));   // static import from Adjusters and DayOfWeek\n "}, {"method_name": "with", "method_sig": "ChronoZonedDateTime<D> with (TemporalField field,\n                            long newValue)", "description": "Returns an object of the same type as this object with the specified field altered.\n \n This returns a new object based on this one with the value for the specified field changed.\n For example, on a LocalDate, this could be used to set the year, month or day-of-month.\n The returned object will have the same observable type as this object.\n \n In some cases, changing a field is not fully defined. For example, if the target object is\n a date representing the 31st January, then changing the month to February would be unclear.\n In cases like this, the field is responsible for resolving the result. Typically it will choose\n the previous valid date, which would be the last valid day of February in this example."}, {"method_name": "plus", "method_sig": "default ChronoZonedDateTime<D> plus (TemporalAmount amount)", "description": "Returns an object of the same type as this object with an amount added.\n \n This adjusts this temporal, adding according to the rules of the specified amount.\n The amount is typically a Period but may be any other type implementing\n the TemporalAmount interface, such as Duration.\n \n Some example code indicating how and why this method is used:\n \n  date = date.plus(period);                // add a Period instance\n  date = date.plus(duration);              // add a Duration instance\n  date = date.plus(workingDays(6));        // example user-written workingDays method\n \n\n Note that calling plus followed by minus is not guaranteed to\n return the same date-time."}, {"method_name": "plus", "method_sig": "ChronoZonedDateTime<D> plus (long amountToAdd,\n                            TemporalUnit unit)", "description": "Returns an object of the same type as this object with the specified period added.\n \n This method returns a new object based on this one with the specified period added.\n For example, on a LocalDate, this could be used to add a number of years, months or days.\n The returned object will have the same observable type as this object.\n \n In some cases, changing a field is not fully defined. For example, if the target object is\n a date representing the 31st January, then adding one month would be unclear.\n In cases like this, the field is responsible for resolving the result. Typically it will choose\n the previous valid date, which would be the last valid day of February in this example."}, {"method_name": "minus", "method_sig": "default ChronoZonedDateTime<D> minus (TemporalAmount amount)", "description": "Returns an object of the same type as this object with an amount subtracted.\n \n This adjusts this temporal, subtracting according to the rules of the specified amount.\n The amount is typically a Period but may be any other type implementing\n the TemporalAmount interface, such as Duration.\n \n Some example code indicating how and why this method is used:\n \n  date = date.minus(period);               // subtract a Period instance\n  date = date.minus(duration);             // subtract a Duration instance\n  date = date.minus(workingDays(6));       // example user-written workingDays method\n \n\n Note that calling plus followed by minus is not guaranteed to\n return the same date-time."}, {"method_name": "minus", "method_sig": "default ChronoZonedDateTime<D> minus (long amountToSubtract,\n                                     TemporalUnit unit)", "description": "Returns an object of the same type as this object with the specified period subtracted.\n \n This method returns a new object based on this one with the specified period subtracted.\n For example, on a LocalDate, this could be used to subtract a number of years, months or days.\n The returned object will have the same observable type as this object.\n \n In some cases, changing a field is not fully defined. For example, if the target object is\n a date representing the 31st March, then subtracting one month would be unclear.\n In cases like this, the field is responsible for resolving the result. Typically it will choose\n the previous valid date, which would be the last valid day of February in this example."}, {"method_name": "query", "method_sig": "default <R> R query (TemporalQuery<R> query)", "description": "Queries this date-time using the specified query.\n \n This queries this date-time using the specified query strategy object.\n The TemporalQuery object defines the logic to be used to\n obtain the result. Read the documentation of the query to understand\n what the result of this method will be.\n \n The result of this method is obtained by invoking the\n TemporalQuery.queryFrom(TemporalAccessor) method on the\n specified query passing this as the argument."}, {"method_name": "format", "method_sig": "default String format (DateTimeFormatter formatter)", "description": "Formats this date-time using the specified formatter.\n \n This date-time will be passed to the formatter to produce a string.\n \n The default implementation must behave as follows:\n \n  return formatter.format(this);\n "}, {"method_name": "toInstant", "method_sig": "default Instant toInstant()", "description": "Converts this date-time to an Instant.\n \n This returns an Instant representing the same point on the\n time-line as this date-time. The calculation combines the\n local date-time and\n offset."}, {"method_name": "toEpochSecond", "method_sig": "default long toEpochSecond()", "description": "Converts this date-time to the number of seconds from the epoch\n of 1970-01-01T00:00:00Z.\n \n This uses the local date-time and\n offset to calculate the epoch-second value,\n which is the number of elapsed seconds from 1970-01-01T00:00:00Z.\n Instants on the time-line after the epoch are positive, earlier are negative."}, {"method_name": "compareTo", "method_sig": "default int compareTo (ChronoZonedDateTime<?> other)", "description": "Compares this date-time to another date-time, including the chronology.\n \n The comparison is based first on the instant, then on the local date-time,\n then on the zone ID, then on the chronology.\n It is \"consistent with equals\", as defined by Comparable.\n \n If all the date-time objects being compared are in the same chronology, then the\n additional chronology stage is not required.\n \n This default implementation performs the comparison defined above."}, {"method_name": "isBefore", "method_sig": "default boolean isBefore (ChronoZonedDateTime<?> other)", "description": "Checks if the instant of this date-time is before that of the specified date-time.\n \n This method differs from the comparison in compareTo(java.time.chrono.ChronoZonedDateTime<?>) in that it\n only compares the instant of the date-time. This is equivalent to using\n dateTime1.toInstant().isBefore(dateTime2.toInstant());.\n \n This default implementation performs the comparison based on the epoch-second\n and nano-of-second."}, {"method_name": "isAfter", "method_sig": "default boolean isAfter (ChronoZonedDateTime<?> other)", "description": "Checks if the instant of this date-time is after that of the specified date-time.\n \n This method differs from the comparison in compareTo(java.time.chrono.ChronoZonedDateTime<?>) in that it\n only compares the instant of the date-time. This is equivalent to using\n dateTime1.toInstant().isAfter(dateTime2.toInstant());.\n \n This default implementation performs the comparison based on the epoch-second\n and nano-of-second."}, {"method_name": "isEqual", "method_sig": "default boolean isEqual (ChronoZonedDateTime<?> other)", "description": "Checks if the instant of this date-time is equal to that of the specified date-time.\n \n This method differs from the comparison in compareTo(java.time.chrono.ChronoZonedDateTime<?>) and equals(java.lang.Object)\n in that it only compares the instant of the date-time. This is equivalent to using\n dateTime1.toInstant().equals(dateTime2.toInstant());.\n \n This default implementation performs the comparison based on the epoch-second\n and nano-of-second."}, {"method_name": "equals", "method_sig": "boolean equals (Object obj)", "description": "Checks if this date-time is equal to another date-time.\n \n The comparison is based on the offset date-time and the zone.\n To compare for the same instant on the time-line, use compareTo(java.time.chrono.ChronoZonedDateTime<?>).\n Only objects of type ChronoZonedDateTime are compared, other types return false."}, {"method_name": "hashCode", "method_sig": "int hashCode()", "description": "A hash code for this date-time."}, {"method_name": "toString", "method_sig": "String toString()", "description": "Outputs this date-time as a String.\n \n The output will include the full zoned date-time."}]}