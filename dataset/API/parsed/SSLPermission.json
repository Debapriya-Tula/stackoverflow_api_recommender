{"name": "Class SSLPermission", "module": "java.base", "package": "javax.net.ssl", "text": "This class is for various network permissions.\n An SSLPermission contains a name (also referred to as a \"target name\") but\n no actions list; you either have the named permission\n or you don't.\n \n The target name is the name of the network permission (see below). The naming\n convention follows the  hierarchical property naming convention.\n Also, an asterisk\n may appear at the end of the name, following a \".\", or by itself, to\n signify a wildcard match. For example: \"foo.*\" and \"*\" signify a wildcard\n match, while \"*foo\" and \"a*b\" do not.\n \n The following table lists all the possible SSLPermission target names,\n and for each provides a description of what the permission allows\n and a discussion of the risks of granting code the permission.\n\n \npermission name, what it allows, and associated risks\n\n\nPermission Target Name\nWhat the Permission Allows\nRisks of Allowing this Permission\n\n\n\n\nsetHostnameVerifier\nThe ability to set a callback which can decide whether to\n allow a mismatch between the host being connected to by\n an HttpsURLConnection and the common name field in\n server certificate.\n  \nMalicious\n code can set a verifier that monitors host names visited by\n HttpsURLConnection requests or that allows server certificates\n with invalid common names.\n \n\n\ngetSSLSessionContext\nThe ability to get the SSLSessionContext of an SSLSession.\n \nMalicious code may monitor sessions which have been established\n with SSL peers or might invalidate sessions to slow down performance.\n \n\n\nsetDefaultSSLContext\nThe ability to set the default SSL context\n \nMalicious code can set a context that monitors the opening of\n connections or the plaintext data that is transmitted.\n \n\n\n", "codes": ["public final class SSLPermission\nextends BasicPermission"], "fields": [], "methods": []}