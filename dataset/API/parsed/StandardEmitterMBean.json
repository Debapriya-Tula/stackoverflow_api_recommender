{"name": "Class StandardEmitterMBean", "module": "java.management", "package": "javax.management", "text": "An MBean whose management interface is determined by reflection\n on a Java interface, and that emits notifications.\nThe following example shows how to use the public constructor\n StandardEmitterMBean(implementation, mbeanInterface, emitter) to\n create an MBean emitting notifications with any\n implementation class name Impl, with a management\n interface defined (as for current Standard MBeans) by any interface\n Intf, and with any implementation of the interface\n NotificationEmitter. The example uses the class\n NotificationBroadcasterSupport as an implementation\n of the interface NotificationEmitter.\n\n     MBeanServer mbs;\n     ...\n     final String[] types = new String[] {\"sun.disc.space\",\"sun.disc.alarm\"};\n     final MBeanNotificationInfo info = new MBeanNotificationInfo(\n                                          types,\n                                          Notification.class.getName(),\n                                          \"Notification about disc info.\");\n     final NotificationEmitter emitter =\n                    new NotificationBroadcasterSupport(info);\n\n     final Intf impl = new Impl(...);\n     final Object mbean = new StandardEmitterMBean(\n                                     impl, Intf.class, emitter);\n     mbs.registerMBean(mbean, objectName);\n     ", "codes": ["public class StandardEmitterMBean\nextends StandardMBean\nimplements NotificationEmitter"], "fields": [], "methods": [{"method_name": "sendNotification", "method_sig": "public void sendNotification (Notification n)", "description": "Sends a notification.\nIf the emitter parameter to the constructor was an\n instance of NotificationBroadcasterSupport then this\n method will call emitter.sendNotification."}]}