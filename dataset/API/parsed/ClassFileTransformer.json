{"name": "Interface ClassFileTransformer", "module": "java.instrument", "package": "java.lang.instrument", "text": "A transformer of class files. An agent registers an implementation of this\n interface using the addTransformer\n method so that the transformer's transform method is invoked when classes are loaded,\n redefined, or\n retransformed. The implementation\n should override one of the transform methods defined here.\n Transformers are invoked before the class is defined by the Java virtual\n machine.\n\n \n There are two kinds of transformers, determined by the canRetransform\n parameter of\n Instrumentation.addTransformer(ClassFileTransformer,boolean):\n  \nretransformation capable transformers that were added with\n        canRetransform as true\n    \nretransformation incapable transformers that were added with\n        canRetransform as false or where added with\n        Instrumentation.addTransformer(ClassFileTransformer)\n\n\n\n Once a transformer has been registered with\n addTransformer,\n the transformer will be called for every new class definition and every class redefinition.\n Retransformation capable transformers will also be called on every class retransformation.\n The request for a new class definition is made with\n ClassLoader.defineClass\n or its native equivalents.\n The request for a class redefinition is made with\n Instrumentation.redefineClasses\n or its native equivalents.\n The request for a class retransformation is made with\n Instrumentation.retransformClasses\n or its native equivalents.\n The transformer is called during the processing of the request, before the class file bytes\n have been verified or applied.\n When there are multiple transformers, transformations are composed by chaining the\n transform calls.\n That is, the byte array returned by one call to transform becomes the input\n (via the classfileBuffer parameter) to the next call.\n\n \n Transformations are applied in the following order:\n  \nRetransformation incapable transformers\n    \nRetransformation incapable native transformers\n    \nRetransformation capable transformers\n    \nRetransformation capable native transformers\n    \n\n\n For retransformations, the retransformation incapable transformers are not\n called, instead the result of the previous transformation is reused.\n In all other cases, this method is called.\n Within each of these groupings, transformers are called in the order registered.\n Native transformers are provided by the ClassFileLoadHook event\n in the Java Virtual Machine Tool Interface).\n\n \n The input (via the classfileBuffer parameter) to the first\n transformer is:\n  \nfor new class definition,\n        the bytes passed to ClassLoader.defineClass\n\nfor class redefinition,\n        definitions.getDefinitionClassFile() where\n        definitions is the parameter to\n        Instrumentation.redefineClasses\n\nfor class retransformation,\n         the bytes passed to the new class definition or, if redefined,\n         the last redefinition, with all transformations made by retransformation\n         incapable transformers reapplied automatically and unaltered;\n         for details see\n         Instrumentation.retransformClasses\n\n\n\n If the implementing method determines that no transformations are needed,\n it should return null.\n Otherwise, it should create a new byte[] array,\n copy the input classfileBuffer into it,\n along with all desired transformations, and return the new array.\n The input classfileBuffer must not be modified.\n\n \n In the retransform and redefine cases,\n the transformer must support the redefinition semantics:\n if a class that the transformer changed during initial definition is later\n retransformed or redefined, the\n transformer must insure that the second class output class file is a legal\n redefinition of the first output class file.\n\n \n If the transformer throws an exception (which it doesn't catch),\n subsequent transformers will still be called and the load, redefine\n or retransform will still be attempted.\n Thus, throwing an exception has the same effect as returning null.\n To prevent unexpected behavior when unchecked exceptions are generated\n in transformer code, a transformer can catch Throwable.\n If the transformer believes the classFileBuffer does not\n represent a validly formatted class file, it should throw\n an IllegalClassFormatException;\n while this has the same effect as returning null. it facilitates the\n logging or debugging of format corruptions.\n\n \n Note the term class file is used as defined in section 3.1 of\n The Java\u2122 Virtual Machine Specification, to mean a\n sequence of bytes in class file format, whether or not they reside in a\n file.", "codes": ["public interface ClassFileTransformer"], "fields": [], "methods": [{"method_name": "transform", "method_sig": "default byte[] transform (ClassLoader loader,\n                         String className,\n                         Class<?> classBeingRedefined,\n                         ProtectionDomain protectionDomain,\n                         byte[] classfileBuffer)\n                  throws IllegalClassFormatException", "description": "Transforms the given class file and returns a new replacement class file.\n This method is invoked when the Module bearing transform is not overridden."}, {"method_name": "transform", "method_sig": "default byte[] transform (Module module,\n                         ClassLoader loader,\n                         String className,\n                         Class<?> classBeingRedefined,\n                         ProtectionDomain protectionDomain,\n                         byte[] classfileBuffer)\n                  throws IllegalClassFormatException", "description": "Transforms the given class file and returns a new replacement class file."}]}