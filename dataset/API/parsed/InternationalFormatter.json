{"name": "Class InternationalFormatter", "module": "java.desktop", "package": "javax.swing.text", "text": "InternationalFormatter extends DefaultFormatter,\n using an instance of java.text.Format to handle the\n conversion to a String, and the conversion from a String.\n \n If getAllowsInvalid() is false, this will ask the\n Format to format the current text on every edit.\n \n You can specify a minimum and maximum value by way of the\n setMinimum and setMaximum methods. In order\n for this to work the values returned from stringToValue must be\n comparable to the min/max values by way of the Comparable\n interface.\n \n Be careful how you configure the Format and the\n InternationalFormatter, as it is possible to create a\n situation where certain values can not be input. Consider the date\n format 'M/d/yy', an InternationalFormatter that is always\n valid (setAllowsInvalid(false)), is in overwrite mode\n (setOverwriteMode(true)) and the date 7/1/99. In this\n case the user will not be able to enter a two digit month or day of\n month. To avoid this, the format should be 'MM/dd/yy'.\n \n If InternationalFormatter is configured to only allow valid\n values (setAllowsInvalid(false)), every valid edit will result\n in the text of the JFormattedTextField being completely reset\n from the Format.\n The cursor position will also be adjusted as literal characters are\n added/removed from the resulting String.\n \nInternationalFormatter's behavior of\n stringToValue is  slightly different than that of\n DefaultTextFormatter, it does the following:\n \nparseObject is invoked on the Format\n       specified by setFormat\nIf a Class has been set for the values (setValueClass),\n       supers implementation is invoked to convert the value returned\n       from parseObject to the appropriate class.\n   If a ParseException has not been thrown, and the value\n       is outside the min/max a ParseException is thrown.\n   The value is returned.\n \nInternationalFormatter implements stringToValue\n in this manner so that you can specify an alternate Class than\n Format may return.\n \nWarning:\n Serialized objects of this class will not be compatible with\n future Swing releases. The current serialization support is\n appropriate for short term storage or RMI between applications running\n the same version of Swing.  As of 1.4, support for long term storage\n of all JavaBeans\u2122\n has been added to the java.beans package.\n Please see XMLEncoder.", "codes": ["public class InternationalFormatter\nextends DefaultFormatter"], "fields": [], "methods": [{"method_name": "setFormat", "method_sig": "public void setFormat (Format format)", "description": "Sets the format that dictates the legal values that can be edited\n and displayed."}, {"method_name": "getFormat", "method_sig": "public Format getFormat()", "description": "Returns the format that dictates the legal values that can be edited\n and displayed."}, {"method_name": "setMinimum", "method_sig": "public void setMinimum (Comparable<?> minimum)", "description": "Sets the minimum permissible value. If the valueClass has\n not been specified, and minimum is non null, the\n valueClass will be set to that of the class of\n minimum."}, {"method_name": "getMinimum", "method_sig": "public Comparable<?> getMinimum()", "description": "Returns the minimum permissible value."}, {"method_name": "setMaximum", "method_sig": "public void setMaximum (Comparable<?> max)", "description": "Sets the maximum permissible value. If the valueClass has\n not been specified, and max is non null, the\n valueClass will be set to that of the class of\n max."}, {"method_name": "getMaximum", "method_sig": "public Comparable<?> getMaximum()", "description": "Returns the maximum permissible value."}, {"method_name": "install", "method_sig": "public void install (JFormattedTextField ftf)", "description": "Installs the DefaultFormatter onto a particular\n JFormattedTextField.\n This will invoke valueToString to convert the\n current value from the JFormattedTextField to\n a String. This will then install the Actions from\n getActions, the DocumentFilter\n returned from getDocumentFilter and the\n NavigationFilter returned from\n getNavigationFilter onto the\n JFormattedTextField.\n \n Subclasses will typically only need to override this if they\n wish to install additional listeners on the\n JFormattedTextField.\n \n If there is a ParseException in converting the\n current value to a String, this will set the text to an empty\n String, and mark the JFormattedTextField as being\n in an invalid state.\n \n While this is a public method, this is typically only useful\n for subclassers of JFormattedTextField.\n JFormattedTextField will invoke this method at\n the appropriate times when the value changes, or its internal\n state changes."}, {"method_name": "valueToString", "method_sig": "public String valueToString (Object value)\n                     throws ParseException", "description": "Returns a String representation of the Object value.\n This invokes format on the current Format."}, {"method_name": "stringToValue", "method_sig": "public Object stringToValue (String text)\n                     throws ParseException", "description": "Returns the Object representation of the\n String text."}, {"method_name": "getFields", "method_sig": "public Format.Field[] getFields (int offset)", "description": "Returns the Format.Field constants associated with\n the text at offset. If offset is not\n a valid location into the current text, this will return an\n empty array."}, {"method_name": "clone", "method_sig": "public Object clone()\n             throws CloneNotSupportedException", "description": "Creates a copy of the DefaultFormatter."}, {"method_name": "getActions", "method_sig": "protected Action[] getActions()", "description": "If getSupportsIncrement returns true, this returns\n two Actions suitable for incrementing/decrementing the value."}]}