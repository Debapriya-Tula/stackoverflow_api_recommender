{"name": "Interface NamedNodeMap", "module": "java.xml", "package": "org.w3c.dom", "text": "Objects implementing the NamedNodeMap interface are used to\n represent collections of nodes that can be accessed by name. Note that\n NamedNodeMap does not inherit from NodeList;\n NamedNodeMaps are not maintained in any particular order.\n Objects contained in an object implementing NamedNodeMap may\n also be accessed by an ordinal index, but this is simply to allow\n convenient enumeration of the contents of a NamedNodeMap,\n and does not imply that the DOM specifies an order to these Nodes.\n NamedNodeMap objects in the DOM are live.\n See also the Document Object Model (DOM) Level 3 Core Specification.", "codes": ["public interface NamedNodeMap"], "fields": [], "methods": [{"method_name": "getNamedItem", "method_sig": "Node getNamedItem (String name)", "description": "Retrieves a node specified by name."}, {"method_name": "setNamedItem", "method_sig": "Node setNamedItem (Node arg)\n           throws DOMException", "description": "Adds a node using its nodeName attribute. If a node with\n that name is already present in this map, it is replaced by the new\n one. Replacing a node by itself has no effect.\n As the nodeName attribute is used to derive the name\n which the node must be stored under, multiple nodes of certain types\n (those that have a \"special\" string value) cannot be stored as the\n names would clash. This is seen as preferable to allowing nodes to be\n aliased."}, {"method_name": "removeNamedItem", "method_sig": "Node removeNamedItem (String name)\n              throws DOMException", "description": "Removes a node specified by name. When this map contains the attributes\n attached to an element, if the removed attribute is known to have a\n default value, an attribute immediately appears containing the\n default value as well as the corresponding namespace URI, local name,\n and prefix when applicable."}, {"method_name": "item", "method_sig": "Node item (int index)", "description": "Returns the indexth item in the map. If index\n is greater than or equal to the number of nodes in this map, this\n returns null."}, {"method_name": "getLength", "method_sig": "int getLength()", "description": "The number of nodes in this map. The range of valid child node indices\n is 0 to length-1 inclusive."}, {"method_name": "getNamedItemNS", "method_sig": "Node getNamedItemNS (String namespaceURI,\n                    String localName)\n             throws DOMException", "description": "Retrieves a node specified by local name and namespace URI.\n Per [XML Namespaces]\n , applications must use the value null as the namespaceURI parameter\n for methods if they wish to have no namespace."}, {"method_name": "setNamedItemNS", "method_sig": "Node setNamedItemNS (Node arg)\n             throws DOMException", "description": "Adds a node using its namespaceURI and\n localName. If a node with that namespace URI and that\n local name is already present in this map, it is replaced by the new\n one. Replacing a node by itself has no effect.\n Per [XML Namespaces]\n , applications must use the value null as the namespaceURI parameter\n for methods if they wish to have no namespace."}, {"method_name": "removeNamedItemNS", "method_sig": "Node removeNamedItemNS (String namespaceURI,\n                       String localName)\n                throws DOMException", "description": "Removes a node specified by local name and namespace URI. A removed\n attribute may be known to have a default value when this map contains\n the attributes attached to an element, as returned by the attributes\n attribute of the Node interface. If so, an attribute\n immediately appears containing the default value as well as the\n corresponding namespace URI, local name, and prefix when applicable.\n Per [XML Namespaces]\n , applications must use the value null as the namespaceURI parameter\n for methods if they wish to have no namespace."}]}