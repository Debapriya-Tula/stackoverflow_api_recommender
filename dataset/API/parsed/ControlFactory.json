{"name": "Class ControlFactory", "module": "java.naming", "package": "javax.naming.ldap", "text": "This abstract class represents a factory for creating LDAPv3 controls.\n LDAPv3 controls are defined in\n RFC 2251.\n\n When a service provider receives a response control, it uses control\n factories to return the specific/appropriate control class implementation.", "codes": ["public abstract class ControlFactory\nextends Object"], "fields": [], "methods": [{"method_name": "getControlInstance", "method_sig": "public abstract Control getControlInstance (Control ctl)\n                                    throws NamingException", "description": "Creates a control using this control factory.\n\n The factory is used by the service provider to return controls\n that it reads from the LDAP protocol as specialized control classes.\n Without this mechanism, the provider would be returning\n controls that only contained data in BER encoded format.\n\n Typically, ctl is a \"basic\" control containing\n BER encoded data. The factory is used to create a specialized\n control implementation, usually by decoding the BER encoded data,\n that provides methods to access that data in a type-safe and friendly\n manner.\n \n For example, a factory might use the BER encoded data in\n basic control and return an instance of a VirtualListReplyControl.\n\n If this factory cannot create a control using the argument supplied,\n it should return null.\n A factory should only throw an exception if it is sure that\n it is the only intended factory and that no other control factories\n should be tried. This might happen, for example, if the BER data\n in the control does not match what is expected of a control with\n the given OID. Since this method throws NamingException,\n any other internally generated exception that should be propagated\n must be wrapped inside a NamingException."}, {"method_name": "getControlInstance", "method_sig": "public static Control getControlInstance (Control ctl,\n                                         Context ctx,\n                                         Hashtable<?, ?> env)\n                                  throws NamingException", "description": "Creates a control using known control factories.\n \n The following rule is used to create the control:\n\n Use the control factories specified in\n    the LdapContext.CONTROL_FACTORIES property of the\n    environment, and of the provider resource file associated with\n    ctx, in that order.\n    The value of this property is a colon-separated list of factory\n    class names that are tried in order, and the first one that succeeds\n    in creating the control is the one used.\n    If none of the factories can be loaded,\n    return ctl.\n    If an exception is encountered while creating the control, the\n    exception is passed up to the caller.\n\n\n Note that a control factory must be public and must have a public\n constructor that accepts no arguments.\n In cases where the factory is in a named module then it must be in a\n package which is exported by that module to the java.naming\n module."}]}