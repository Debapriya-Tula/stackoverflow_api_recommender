{"name": "Class BeanContextSupport", "module": "java.desktop", "package": "java.beans.beancontext", "text": "This helper class provides a utility implementation of the\n java.beans.beancontext.BeanContext interface.\n \n Since this class directly implements the BeanContext interface, the class\n can, and is intended to be used either by subclassing this implementation,\n or via ad-hoc delegation of an instance of this class from another.\n ", "codes": ["public class BeanContextSupport\nextends BeanContextChildSupport\nimplements BeanContext, Serializable, PropertyChangeListener, VetoableChangeListener"], "fields": [{"field_name": "children", "field_sig": "protected transient\u00a0HashMap<Object,\u200bBeanContextSupport.BCSChild> children", "description": "all accesses to the protected HashMap children field\n shall be synchronized on that object."}, {"field_name": "bcmListeners", "field_sig": "protected transient\u00a0ArrayList<BeanContextMembershipListener> bcmListeners", "description": "all accesses to the protected ArrayList bcmListeners field\n shall be synchronized on that object."}, {"field_name": "locale", "field_sig": "protected\u00a0Locale locale", "description": "The current locale of this BeanContext."}, {"field_name": "okToUseGui", "field_sig": "protected\u00a0boolean okToUseGui", "description": "A boolean indicating if this\n instance may now render a GUI."}, {"field_name": "designTime", "field_sig": "protected\u00a0boolean designTime", "description": "A boolean indicating whether or not\n this object is currently in design time mode."}], "methods": [{"method_name": "getBeanContextPeer", "method_sig": "public BeanContext getBeanContextPeer()", "description": "Gets the instance of BeanContext that\n this object is providing the implementation for."}, {"method_name": "instantiateChild", "method_sig": "public Object instantiateChild (String beanName)\n                        throws IOException,\n                               ClassNotFoundException", "description": "\n The instantiateChild method is a convenience hook\n in BeanContext to simplify\n the task of instantiating a Bean, nested,\n into a BeanContext.\n \n\n The semantics of the beanName parameter are defined by java.beans.Beans.instantiate.\n "}, {"method_name": "size", "method_sig": "public int size()", "description": "Gets the number of children currently nested in\n this BeanContext."}, {"method_name": "isEmpty", "method_sig": "public boolean isEmpty()", "description": "Reports whether or not this\n BeanContext is empty.\n A BeanContext is considered\n empty when it contains zero\n nested children."}, {"method_name": "contains", "method_sig": "public boolean contains (Object o)", "description": "Determines whether or not the specified object\n is currently a child of this BeanContext."}, {"method_name": "containsKey", "method_sig": "public boolean containsKey (Object o)", "description": "Determines whether or not the specified object\n is currently a child of this BeanContext."}, {"method_name": "iterator", "method_sig": "public Iterator<Object> iterator()", "description": "Gets all JavaBean or BeanContext instances\n currently nested in this BeanContext."}, {"method_name": "toArray", "method_sig": "public Object[] toArray()", "description": "Gets all JavaBean or BeanContext\n instances currently nested in this BeanContext."}, {"method_name": "toArray", "method_sig": "public Object[] toArray (Object[] arry)", "description": "Gets an array containing all children of\n this BeanContext that match\n the types contained in arry."}, {"method_name": "createBCSChild", "method_sig": "protected BeanContextSupport.BCSChild createBCSChild (Object targetChild,\n                                                     Object peer)", "description": "\n Subclasses can override this method to insert their own subclass\n of Child without having to override add() or the other Collection\n methods that add children to the set.\n "}, {"method_name": "add", "method_sig": "public boolean add (Object targetChild)", "description": "Adds/nests a child within this BeanContext.\n \n Invoked as a side effect of java.beans.Beans.instantiate().\n If the child object is not valid for adding then this method\n throws an IllegalStateException.\n "}, {"method_name": "remove", "method_sig": "public boolean remove (Object targetChild)", "description": "Removes a child from this BeanContext.  If the child object is not\n for adding then this method throws an IllegalStateException."}, {"method_name": "remove", "method_sig": "protected boolean remove (Object targetChild,\n                         boolean callChildSetBC)", "description": "internal remove used when removal caused by\n unexpected setBeanContext or\n by remove() invocation."}, {"method_name": "containsAll", "method_sig": "public boolean containsAll (Collection c)", "description": "Tests to see if all objects in the\n specified Collection are children of\n this BeanContext."}, {"method_name": "addAll", "method_sig": "public boolean addAll (Collection c)", "description": "add Collection to set of Children (Unsupported)\n implementations must synchronized on the hierarchy lock and \"children\" protected field"}, {"method_name": "removeAll", "method_sig": "public boolean removeAll (Collection c)", "description": "remove all specified children (Unsupported)\n implementations must synchronized on the hierarchy lock and \"children\" protected field"}, {"method_name": "retainAll", "method_sig": "public boolean retainAll (Collection c)", "description": "retain only specified children (Unsupported)\n implementations must synchronized on the hierarchy lock and \"children\" protected field"}, {"method_name": "clear", "method_sig": "public void clear()", "description": "clear the children (Unsupported)\n implementations must synchronized on the hierarchy lock and \"children\" protected field"}, {"method_name": "addBeanContextMembershipListener", "method_sig": "public void addBeanContextMembershipListener (BeanContextMembershipListener bcml)", "description": "Adds a BeanContextMembershipListener"}, {"method_name": "removeBeanContextMembershipListener", "method_sig": "public void removeBeanContextMembershipListener (BeanContextMembershipListener bcml)", "description": "Removes a BeanContextMembershipListener"}, {"method_name": "getResourceAsStream", "method_sig": "public InputStream getResourceAsStream (String name,\n                                       BeanContextChild bcc)", "description": "Description copied from interface:\u00a0BeanContext"}, {"method_name": "getResource", "method_sig": "public URL getResource (String name,\n                       BeanContextChild bcc)", "description": "Description copied from interface:\u00a0BeanContext"}, {"method_name": "setDesignTime", "method_sig": "public void setDesignTime (boolean dTime)", "description": "Sets the new design time value for this BeanContext."}, {"method_name": "isDesignTime", "method_sig": "public boolean isDesignTime()", "description": "Reports whether or not this object is in\n currently in design time mode."}, {"method_name": "setLocale", "method_sig": "public void setLocale (Locale newLocale)\n               throws PropertyVetoException", "description": "Sets the locale of this BeanContext."}, {"method_name": "getLocale", "method_sig": "public Locale getLocale()", "description": "Gets the locale for this BeanContext."}, {"method_name": "needsGui", "method_sig": "public boolean needsGui()", "description": "\n This method is typically called from the environment in order to determine\n if the implementor \"needs\" a GUI.\n \n\n The algorithm used herein tests the BeanContextPeer, and its current children\n to determine if they are either Containers, Components, or if they implement\n Visibility and return needsGui() == true.\n "}, {"method_name": "dontUseGui", "method_sig": "public void dontUseGui()", "description": "notify this instance that it may no longer render a GUI."}, {"method_name": "okToUseGui", "method_sig": "public void okToUseGui()", "description": "Notify this instance that it may now render a GUI"}, {"method_name": "avoidingGui", "method_sig": "public boolean avoidingGui()", "description": "Used to determine if the BeanContext\n child is avoiding using its GUI."}, {"method_name": "isSerializing", "method_sig": "public boolean isSerializing()", "description": "Is this BeanContext in the\n process of being serialized?"}, {"method_name": "bcsChildren", "method_sig": "protected Iterator<BeanContextSupport.BCSChild> bcsChildren()", "description": "Returns an iterator of all children\n of this BeanContext."}, {"method_name": "bcsPreSerializationHook", "method_sig": "protected void bcsPreSerializationHook (ObjectOutputStream oos)\n                                throws IOException", "description": "called by writeObject after defaultWriteObject() but prior to\n serialization of currently serializable children.\n\n This method may be overridden by subclasses to perform custom\n serialization of their state prior to this superclass serializing\n the children.\n\n This method should not however be used by subclasses to replace their\n own implementation (if any) of writeObject()."}, {"method_name": "bcsPreDeserializationHook", "method_sig": "protected void bcsPreDeserializationHook (ObjectInputStream ois)\n                                  throws IOException,\n                                         ClassNotFoundException", "description": "called by readObject after defaultReadObject() but prior to\n deserialization of any children.\n\n This method may be overridden by subclasses to perform custom\n deserialization of their state prior to this superclass deserializing\n the children.\n\n This method should not however be used by subclasses to replace their\n own implementation (if any) of readObject()."}, {"method_name": "childDeserializedHook", "method_sig": "protected void childDeserializedHook (Object child,\n                                     BeanContextSupport.BCSChild bcsc)", "description": "Called by readObject with the newly deserialized child and BCSChild."}, {"method_name": "serialize", "method_sig": "protected final void serialize (ObjectOutputStream oos,\n                               Collection<?> coll)\n                        throws IOException", "description": "Used by writeObject to serialize a Collection."}, {"method_name": "deserialize", "method_sig": "protected final void deserialize (ObjectInputStream ois,\n                                 Collection coll)\n                          throws IOException,\n                                 ClassNotFoundException", "description": "used by readObject to deserialize a collection."}, {"method_name": "writeChildren", "method_sig": "public final void writeChildren (ObjectOutputStream oos)\n                         throws IOException", "description": "Used to serialize all children of\n this BeanContext."}, {"method_name": "readChildren", "method_sig": "public final void readChildren (ObjectInputStream ois)\n                        throws IOException,\n                               ClassNotFoundException", "description": "When an instance of this class is used as a delegate for the\n implementation of the BeanContext protocols (and its subprotocols)\n there exists a 'chicken and egg' problem during deserialization"}, {"method_name": "vetoableChange", "method_sig": "public void vetoableChange (PropertyChangeEvent pce)\n                    throws PropertyVetoException", "description": "subclasses may envelope to monitor veto child property changes."}, {"method_name": "propertyChange", "method_sig": "public void propertyChange (PropertyChangeEvent pce)", "description": "subclasses may envelope to monitor child property changes."}, {"method_name": "validatePendingAdd", "method_sig": "protected boolean validatePendingAdd (Object targetChild)", "description": "\n Subclasses of this class may override, or envelope, this method to\n add validation behavior for the BeanContext to examine child objects\n immediately prior to their being added to the BeanContext.\n "}, {"method_name": "validatePendingRemove", "method_sig": "protected boolean validatePendingRemove (Object targetChild)", "description": "\n Subclasses of this class may override, or envelope, this method to\n add validation behavior for the BeanContext to examine child objects\n immediately prior to their being removed from the BeanContext.\n "}, {"method_name": "childJustAddedHook", "method_sig": "protected void childJustAddedHook (Object child,\n                                  BeanContextSupport.BCSChild bcsc)", "description": "subclasses may override this method to simply extend add() semantics\n after the child has been added and before the event notification has\n occurred. The method is called with the child synchronized."}, {"method_name": "childJustRemovedHook", "method_sig": "protected void childJustRemovedHook (Object child,\n                                    BeanContextSupport.BCSChild bcsc)", "description": "subclasses may override this method to simply extend remove() semantics\n after the child has been removed and before the event notification has\n occurred. The method is called with the child synchronized."}, {"method_name": "getChildVisibility", "method_sig": "protected static final Visibility getChildVisibility (Object child)", "description": "Gets the Component (if any) associated with the specified child."}, {"method_name": "getChildSerializable", "method_sig": "protected static final Serializable getChildSerializable (Object child)", "description": "Gets the Serializable (if any) associated with the specified Child"}, {"method_name": "getChildPropertyChangeListener", "method_sig": "protected static final PropertyChangeListener getChildPropertyChangeListener (Object child)", "description": "Gets the PropertyChangeListener\n (if any) of the specified child"}, {"method_name": "getChildVetoableChangeListener", "method_sig": "protected static final VetoableChangeListener getChildVetoableChangeListener (Object child)", "description": "Gets the VetoableChangeListener\n (if any) of the specified child"}, {"method_name": "getChildBeanContextMembershipListener", "method_sig": "protected static final BeanContextMembershipListener getChildBeanContextMembershipListener (Object child)", "description": "Gets the BeanContextMembershipListener\n (if any) of the specified child"}, {"method_name": "getChildBeanContextChild", "method_sig": "protected static final BeanContextChild getChildBeanContextChild (Object child)", "description": "Gets the BeanContextChild (if any) of the specified child"}, {"method_name": "fireChildrenAdded", "method_sig": "protected final void fireChildrenAdded (BeanContextMembershipEvent bcme)", "description": "Fire a BeanContextshipEvent on the BeanContextMembershipListener interface"}, {"method_name": "fireChildrenRemoved", "method_sig": "protected final void fireChildrenRemoved (BeanContextMembershipEvent bcme)", "description": "Fire a BeanContextshipEvent on the BeanContextMembershipListener interface"}, {"method_name": "initialize", "method_sig": "protected void initialize()", "description": "protected method called from constructor and readObject to initialize\n transient state of BeanContextSupport instance.\n\n This class uses this method to instantiate inner class listeners used\n to monitor PropertyChange and VetoableChange events on children.\n\n subclasses may envelope this method to add their own initialization\n behavior"}, {"method_name": "copyChildren", "method_sig": "protected final Object[] copyChildren()", "description": "Gets a copy of the this BeanContext's children."}, {"method_name": "classEquals", "method_sig": "protected static final boolean classEquals (Class<?> first,\n                                           Class<?> second)", "description": "Tests to see if two class objects,\n or their names are equal."}]}