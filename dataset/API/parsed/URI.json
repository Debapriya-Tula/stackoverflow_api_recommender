{"name": "Class URI", "module": "java.base", "package": "java.net", "text": "Represents a Uniform Resource Identifier (URI) reference.\n\n  Aside from some minor deviations noted below, an instance of this\n class represents a URI reference as defined by\n RFC\u00a02396: Uniform\n Resource Identifiers (URI): Generic Syntax, amended by RFC\u00a02732: Format for\n Literal IPv6 Addresses in URLs. The Literal IPv6 address format\n also supports scope_ids. The syntax and usage of scope_ids is described\n here.\n This class provides constructors for creating URI instances from\n their components or by parsing their string forms, methods for accessing the\n various components of an instance, and methods for normalizing, resolving,\n and relativizing URI instances.  Instances of this class are immutable.\n\n\n  URI syntax and components \n\n At the highest level a URI reference (hereinafter simply \"URI\") in string\n form has the syntax\n\n \n [scheme:]scheme-specific-part[#fragment]\n \n\n where square brackets [...] delineate optional components and the characters\n : and # stand for themselves.\n\n  An absolute URI specifies a scheme; a URI that is not absolute is\n said to be relative.  URIs are also classified according to whether\n they are opaque or hierarchical.\n\n  An opaque URI is an absolute URI whose scheme-specific part does\n not begin with a slash character ('/').  Opaque URIs are not\n subject to further parsing.  Some examples of opaque URIs are:\n\n \nmailto:java-net@java.sun.com\nnews:comp.lang.java\nurn:isbn:096139210x\n\n A hierarchical URI is either an absolute URI whose\n scheme-specific part begins with a slash character, or a relative URI, that\n is, a URI that does not specify a scheme.  Some examples of hierarchical\n URIs are:\n\n \nhttp://example.com/languages/java/\nsample/a/index.html#28\n../../demo/b/index.html\nfile:///~/calendar\n\n A hierarchical URI is subject to further parsing according to the syntax\n\n \n [scheme:][//authority][path][?query][#fragment]\n \n\n where the characters :, /,\n ?, and # stand for themselves.  The\n scheme-specific part of a hierarchical URI consists of the characters\n between the scheme and fragment components.\n\n  The authority component of a hierarchical URI is, if specified, either\n server-based or registry-based.  A server-based authority\n parses according to the familiar syntax\n\n \n [user-info@]host[:port]\n \n\n where the characters @ and : stand for\n themselves.  Nearly all URI schemes currently in use are server-based.  An\n authority component that does not parse in this way is considered to be\n registry-based.\n\n  The path component of a hierarchical URI is itself said to be absolute\n if it begins with a slash character ('/'); otherwise it is\n relative.  The path of a hierarchical URI that is either absolute or\n specifies an authority is always absolute.\n\n  All told, then, a URI instance has the following nine components:\n\n \nDescribes the components of a URI:scheme,scheme-specific-part,authority,user-info,host,port,path,query,fragment\n\nComponentType\n\n\nschemeString\nscheme-specific-partString\nauthorityString\nuser-infoString\nhostString\nportint\npathString\nqueryString\nfragmentString\n\n\n\n In a given instance any particular component is either undefined or\n defined with a distinct value.  Undefined string components are\n represented by null, while undefined integer components are\n represented by -1.  A string component may be defined to have the\n empty string as its value; this is not equivalent to that component being\n undefined.\n\n  Whether a particular component is or is not defined in an instance\n depends upon the type of the URI being represented.  An absolute URI has a\n scheme component.  An opaque URI has a scheme, a scheme-specific part, and\n possibly a fragment, but has no other components.  A hierarchical URI always\n has a path (though it may be empty) and a scheme-specific-part (which at\n least contains the path), and may have any of the other components.  If the\n authority component is present and is server-based then the host component\n will be defined and the user-information and port components may be defined.\n\n\n  Operations on URI instances \n\n The key operations supported by this class are those of\n normalization, resolution, and relativization.\n\n  Normalization is the process of removing unnecessary \".\"\n and \"..\" segments from the path component of a hierarchical URI.\n Each \".\" segment is simply removed.  A \"..\" segment is\n removed only if it is preceded by a non-\"..\" segment.\n Normalization has no effect upon opaque URIs.\n\n  Resolution is the process of resolving one URI against another,\n base URI.  The resulting URI is constructed from components of both\n URIs in the manner specified by RFC\u00a02396, taking components from the\n base URI for those not specified in the original.  For hierarchical URIs,\n the path of the original is resolved against the path of the base and then\n normalized.  The result, for example, of resolving\n\n \nsample/a/index.html#28\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n \u00a0\u00a0\u00a0\u00a0(1)\n \n\n against the base URI http://example.com/languages/java/ is the result\n URI\n\n \nhttp://example.com/languages/java/sample/a/index.html#28\n\n\n Resolving the relative URI\n\n \n../../demo/b/index.html\u00a0\u00a0\u00a0\u00a0(2)\n \n\n against this result yields, in turn,\n\n \nhttp://example.com/languages/java/demo/b/index.html\n\n\n Resolution of both absolute and relative URIs, and of both absolute and\n relative paths in the case of hierarchical URIs, is supported.  Resolving\n the URI file:///~calendar against any other URI simply yields the\n original URI, since it is absolute.  Resolving the relative URI (2) above\n against the relative base URI (1) yields the normalized, but still relative,\n URI\n\n \ndemo/b/index.html\n\n Relativization, finally, is the inverse of resolution: For any\n two normalized URIs u and\u00a0v,\n\n \nu.relativize(u.resolve(v)).equals(v)\u00a0\u00a0and\nu.resolve(u.relativize(v)).equals(v)\u00a0\u00a0.\n\n\n This operation is often useful when constructing a document containing URIs\n that must be made relative to the base URI of the document wherever\n possible.  For example, relativizing the URI\n\n \nhttp://example.com/languages/java/sample/a/index.html#28\n\n\n against the base URI\n\n \nhttp://example.com/languages/java/\n\n\n yields the relative URI sample/a/index.html#28.\n\n\n  Character categories \n\n RFC\u00a02396 specifies precisely which characters are permitted in the\n various components of a URI reference.  The following categories, most of\n which are taken from that specification, are used below to describe these\n constraints:\n\n \nDescribes categories alpha,digit,alphanum,unreserved,punct,reserved,escaped,and other\n\nCategoryDescription\n\n\nalpha\nThe US-ASCII alphabetic characters,\n        'A'\u00a0through\u00a0'Z'\n        and 'a'\u00a0through\u00a0'z'\ndigit\nThe US-ASCII decimal digit characters,\n       '0'\u00a0through\u00a0'9'\nalphanum\nAll alpha and digit characters\nunreserved\nAll alphanum characters together with those in the string\n        \"_-!.~'()*\"\npunct\nThe characters in the string \",;:$&+=\"\nreserved\nAll punct characters together with those in the string\n        \"?/[]@\"\nescaped\nEscaped octets, that is, triplets consisting of the percent\n           character ('%') followed by two hexadecimal digits\n           ('0'-'9', 'A'-'F', and\n           'a'-'f')\nother\nThe Unicode characters that are not in the US-ASCII character set,\n           are not control characters (according to the Character.isISOControl\n           method), and are not space characters (according to the Character.isSpaceChar\n           method)\u00a0\u00a0(Deviation from RFC 2396, which is\n           limited to US-ASCII)\n\n\n The set of all legal URI characters consists of\n the unreserved, reserved, escaped, and other\n characters.\n\n\n  Escaped octets, quotation, encoding, and decoding \n\n RFC 2396 allows escaped octets to appear in the user-info, path, query, and\n fragment components.  Escaping serves two purposes in URIs:\n\n \n To encode non-US-ASCII characters when a URI is required to\n   conform strictly to RFC\u00a02396 by not containing any other\n   characters.  \n To quote characters that are otherwise illegal in a\n   component.  The user-info, path, query, and fragment components differ\n   slightly in terms of which characters are considered legal and illegal.\n   \n\n\n These purposes are served in this class by three related operations:\n\n \n A character is encoded by replacing it\n   with the sequence of escaped octets that represent that character in the\n   UTF-8 character set.  The Euro currency symbol ('\\u20AC'),\n   for example, is encoded as \"%E2%82%AC\".  (Deviation from\n   RFC\u00a02396, which does not specify any particular character\n   set.) \n An illegal character is quoted simply by\n   encoding it.  The space character, for example, is quoted by replacing it\n   with \"%20\".  UTF-8 contains US-ASCII, hence for US-ASCII\n   characters this transformation has exactly the effect required by\n   RFC\u00a02396. \n\n   A sequence of escaped octets is decoded by\n   replacing it with the sequence of characters that it represents in the\n   UTF-8 character set.  UTF-8 contains US-ASCII, hence decoding has the\n   effect of de-quoting any quoted US-ASCII characters as well as that of\n   decoding any encoded non-US-ASCII characters.  If a decoding error occurs\n   when decoding the escaped octets then the erroneous octets are replaced by\n   '\\uFFFD', the Unicode replacement character.  \n\n\n These operations are exposed in the constructors and methods of this class\n as follows:\n\n \n The single-argument\n   constructor requires any illegal characters in its argument to be\n   quoted and preserves any escaped octets and other characters that\n   are present.  \n The multi-argument constructors quote illegal characters as\n   required by the components in which they appear.  The percent character\n   ('%') is always quoted by these constructors.  Any other\n   characters are preserved.  \n The getRawUserInfo, getRawPath, getRawQuery, getRawFragment, getRawAuthority, and getRawSchemeSpecificPart methods return the\n   values of their corresponding components in raw form, without interpreting\n   any escaped octets.  The strings returned by these methods may contain\n   both escaped octets and other characters, and will not contain any\n   illegal characters.  \n The getUserInfo, getPath, getQuery, getFragment, getAuthority, and getSchemeSpecificPart methods decode any escaped\n   octets in their corresponding components.  The strings returned by these\n   methods may contain both other characters and illegal characters,\n   and will not contain any escaped octets.  \n The toString method returns a URI string with\n   all necessary quotation but which may contain other characters.\n   \n The toASCIIString method returns a fully\n   quoted and encoded URI string that does not contain any other\n   characters.  \n\n Identities \n\n For any URI u, it is always the case that\n\n \nnew URI(u.toString()).equals(u)\u00a0.\n \n\n For any URI u that does not contain redundant syntax such as two\n slashes before an empty authority (as in file:///tmp/\u00a0) or a\n colon following a host name but no port (as in\n http://java.sun.com:\u00a0), and that does not encode characters\n except those that must be quoted, the following identities also hold:\n \n     new URI(u.getScheme(),\n             u.getSchemeSpecificPart(),\n             u.getFragment())\n     .equals(u)\n in all cases,\n \n     new URI(u.getScheme(),\n             u.getAuthority(),\n             u.getPath(), u.getQuery(),\n             u.getFragment())\n     .equals(u)\n if u is hierarchical, and\n \n     new URI(u.getScheme(),\n             u.getUserInfo(), u.getHost(), u.getPort(),\n             u.getPath(), u.getQuery(),\n             u.getFragment())\n     .equals(u)\n if u is hierarchical and has either no authority or a server-based\n authority.\n\n\n  URIs, URLs, and URNs \n\n A URI is a uniform resource identifier while a URL is a uniform\n resource locator.  Hence every URL is a URI, abstractly speaking, but\n not every URI is a URL.  This is because there is another subcategory of\n URIs, uniform resource names (URNs), which name resources but do not\n specify how to locate them.  The mailto, news, and\n isbn URIs shown above are examples of URNs.\n\n  The conceptual distinction between URIs and URLs is reflected in the\n differences between this class and the URL class.\n\n  An instance of this class represents a URI reference in the syntactic\n sense defined by RFC\u00a02396.  A URI may be either absolute or relative.\n A URI string is parsed according to the generic syntax without regard to the\n scheme, if any, that it specifies.  No lookup of the host, if any, is\n performed, and no scheme-dependent stream handler is constructed.  Equality,\n hashing, and comparison are defined strictly in terms of the character\n content of the instance.  In other words, a URI instance is little more than\n a structured string that supports the syntactic, scheme-independent\n operations of comparison, normalization, resolution, and relativization.\n\n  An instance of the URL class, by contrast, represents the\n syntactic components of a URL together with some of the information required\n to access the resource that it describes.  A URL must be absolute, that is,\n it must always specify a scheme.  A URL string is parsed according to its\n scheme.  A stream handler is always established for a URL, and in fact it is\n impossible to create a URL instance for a scheme for which no handler is\n available.  Equality and hashing depend upon both the scheme and the\n Internet address of the host, if any; comparison is not defined.  In other\n words, a URL is a structured string that supports the syntactic operation of\n resolution as well as the network I/O operations of looking up the host and\n opening a connection to the specified resource.", "codes": ["public final class URI\nextends Object\nimplements Comparable<URI>, Serializable"], "fields": [], "methods": [{"method_name": "create", "method_sig": "public static URI create (String str)", "description": "Creates a URI by parsing the given string.\n\n  This convenience factory method works as if by invoking the URI(String) constructor; any URISyntaxException thrown by the\n constructor is caught and wrapped in a new IllegalArgumentException object, which is then thrown.\n\n  This method is provided for use in situations where it is known that\n the given string is a legal URI, for example for URI constants declared\n within in a program, and so it would be considered a programming error\n for the string not to parse as such.  The constructors, which throw\n URISyntaxException directly, should be used situations where a\n URI is being constructed from user input or from some other source that\n may be prone to errors.  "}, {"method_name": "parseServerAuthority", "method_sig": "public URI parseServerAuthority()\n                         throws URISyntaxException", "description": "Attempts to parse this URI's authority component, if defined, into\n user-information, host, and port components.\n\n  If this URI's authority component has already been recognized as\n being server-based then it will already have been parsed into\n user-information, host, and port components.  In this case, or if this\n URI has no authority component, this method simply returns this URI.\n\n  Otherwise this method attempts once more to parse the authority\n component into user-information, host, and port components, and throws\n an exception describing why the authority component could not be parsed\n in that way.\n\n  This method is provided because the generic URI syntax specified in\n RFC\u00a02396\n cannot always distinguish a malformed server-based authority from a\n legitimate registry-based authority.  It must therefore treat some\n instances of the former as instances of the latter.  The authority\n component in the URI string \"//foo:bar\", for example, is not a\n legal server-based authority but it is legal as a registry-based\n authority.\n\n  In many common situations, for example when working URIs that are\n known to be either URNs or URLs, the hierarchical URIs being used will\n always be server-based.  They therefore must either be parsed as such or\n treated as an error.  In these cases a statement such as\n\n \nURI u = new URI(str).parseServerAuthority();\n\n can be used to ensure that u always refers to a URI that, if\n it has an authority component, has a server-based authority with proper\n user-information, host, and port components.  Invoking this method also\n ensures that if the authority could not be parsed in that way then an\n appropriate diagnostic message can be issued based upon the exception\n that is thrown. "}, {"method_name": "normalize", "method_sig": "public URI normalize()", "description": "Normalizes this URI's path.\n\n  If this URI is opaque, or if its path is already in normal form,\n then this URI is returned.  Otherwise a new URI is constructed that is\n identical to this URI except that its path is computed by normalizing\n this URI's path in a manner consistent with RFC\u00a02396,\n section\u00a05.2, step\u00a06, sub-steps\u00a0c through\u00a0f; that is:\n \n\n All \".\" segments are removed. \n If a \"..\" segment is preceded by a non-\"..\"\n   segment then both of these segments are removed.  This step is\n   repeated until it is no longer applicable. \n If the path is relative, and if its first segment contains a\n   colon character (':'), then a \".\" segment is\n   prepended.  This prevents a relative URI with a path such as\n   \"a:b/c/d\" from later being re-parsed as an opaque URI with a\n   scheme of \"a\" and a scheme-specific part of \"b/c/d\".\n   (Deviation from RFC\u00a02396) \n\n A normalized path will begin with one or more \"..\" segments\n if there were insufficient non-\"..\" segments preceding them to\n allow their removal.  A normalized path will begin with a \".\"\n segment if one was inserted by step 3 above.  Otherwise, a normalized\n path will not contain any \".\" or \"..\" segments. "}, {"method_name": "resolve", "method_sig": "public URI resolve (URI uri)", "description": "Resolves the given URI against this URI.\n\n  If the given URI is already absolute, or if this URI is opaque, then\n the given URI is returned.\n\n  If the given URI's fragment component is\n defined, its path component is empty, and its scheme, authority, and\n query components are undefined, then a URI with the given fragment but\n with all other components equal to those of this URI is returned.  This\n allows a URI representing a standalone fragment reference, such as\n \"#foo\", to be usefully resolved against a base URI.\n\n  Otherwise this method constructs a new hierarchical URI in a manner\n consistent with RFC\u00a02396,\n section\u00a05.2; that is: \n\n A new URI is constructed with this URI's scheme and the given\n   URI's query and fragment components. \n If the given URI has an authority component then the new URI's\n   authority and path are taken from the given URI. \n Otherwise the new URI's authority component is copied from\n   this URI, and its path is computed as follows: \n\n If the given URI's path is absolute then the new URI's path\n     is taken from the given URI. \n Otherwise the given URI's path is relative, and so the new\n     URI's path is computed by resolving the path of the given URI\n     against the path of this URI.  This is done by concatenating all but\n     the last segment of this URI's path, if any, with the given URI's\n     path and then normalizing the result as if by invoking the normalize method. \n\n\n The result of this method is absolute if, and only if, either this\n URI is absolute or the given URI is absolute.  "}, {"method_name": "resolve", "method_sig": "public URI resolve (String str)", "description": "Constructs a new URI by parsing the given string and then resolving it\n against this URI.\n\n  This convenience method works as if invoking it were equivalent to\n evaluating the expression resolve(URI.create(str)). "}, {"method_name": "relativize", "method_sig": "public URI relativize (URI uri)", "description": "Relativizes the given URI against this URI.\n\n  The relativization of the given URI against this URI is computed as\n follows: \n\n If either this URI or the given URI are opaque, or if the\n   scheme and authority components of the two URIs are not identical, or\n   if the path of this URI is not a prefix of the path of the given URI,\n   then the given URI is returned. \n Otherwise a new relative hierarchical URI is constructed with\n   query and fragment components taken from the given URI and with a path\n   component computed by removing this URI's path from the beginning of\n   the given URI's path. \n"}, {"method_name": "toURL", "method_sig": "public URL toURL()\n          throws MalformedURLException", "description": "Constructs a URL from this URI.\n\n  This convenience method works as if invoking it were equivalent to\n evaluating the expression new URL(this.toString()) after\n first checking that this URI is absolute. "}, {"method_name": "getScheme", "method_sig": "public String getScheme()", "description": "Returns the scheme component of this URI.\n\n  The scheme component of a URI, if defined, only contains characters\n in the alphanum category and in the string \"-.+\".  A\n scheme always starts with an alpha character. \n\n The scheme component of a URI cannot contain escaped octets, hence this\n method does not perform any decoding."}, {"method_name": "isAbsolute", "method_sig": "public boolean isAbsolute()", "description": "Tells whether or not this URI is absolute.\n\n  A URI is absolute if, and only if, it has a scheme component. "}, {"method_name": "isOpaque", "method_sig": "public boolean isOpaque()", "description": "Tells whether or not this URI is opaque.\n\n  A URI is opaque if, and only if, it is absolute and its\n scheme-specific part does not begin with a slash character ('/').\n An opaque URI has a scheme, a scheme-specific part, and possibly\n a fragment; all other components are undefined. "}, {"method_name": "getRawSchemeSpecificPart", "method_sig": "public String getRawSchemeSpecificPart()", "description": "Returns the raw scheme-specific part of this URI.  The scheme-specific\n part is never undefined, though it may be empty.\n\n  The scheme-specific part of a URI only contains legal URI\n characters. "}, {"method_name": "getSchemeSpecificPart", "method_sig": "public String getSchemeSpecificPart()", "description": "Returns the decoded scheme-specific part of this URI.\n\n  The string returned by this method is equal to that returned by the\n getRawSchemeSpecificPart method\n except that all sequences of escaped octets are decoded.  "}, {"method_name": "getRawAuthority", "method_sig": "public String getRawAuthority()", "description": "Returns the raw authority component of this URI.\n\n  The authority component of a URI, if defined, only contains the\n commercial-at character ('@') and characters in the\n unreserved, punct, escaped, and other\n categories.  If the authority is server-based then it is further\n constrained to have valid user-information, host, and port\n components. "}, {"method_name": "getAuthority", "method_sig": "public String getAuthority()", "description": "Returns the decoded authority component of this URI.\n\n  The string returned by this method is equal to that returned by the\n getRawAuthority method except that all\n sequences of escaped octets are decoded.  "}, {"method_name": "getRawUserInfo", "method_sig": "public String getRawUserInfo()", "description": "Returns the raw user-information component of this URI.\n\n  The user-information component of a URI, if defined, only contains\n characters in the unreserved, punct, escaped, and\n other categories. "}, {"method_name": "getUserInfo", "method_sig": "public String getUserInfo()", "description": "Returns the decoded user-information component of this URI.\n\n  The string returned by this method is equal to that returned by the\n getRawUserInfo method except that all\n sequences of escaped octets are decoded.  "}, {"method_name": "getHost", "method_sig": "public String getHost()", "description": "Returns the host component of this URI.\n\n  The host component of a URI, if defined, will have one of the\n following forms: \n\n A domain name consisting of one or more labels\n   separated by period characters ('.'), optionally followed by\n   a period character.  Each label consists of alphanum characters\n   as well as hyphen characters ('-'), though hyphens never\n   occur as the first or last characters in a label. The rightmost\n   label of a domain name consisting of two or more labels, begins\n   with an alpha character. \n A dotted-quad IPv4 address of the form\n   digit+.digit+.digit+.digit+,\n   where no digit sequence is longer than three characters and no\n   sequence has a value larger than 255. \n An IPv6 address enclosed in square brackets ('[' and\n   ']') and consisting of hexadecimal digits, colon characters\n   (':'), and possibly an embedded IPv4 address.  The full\n   syntax of IPv6 addresses is specified in RFC\u00a02373: IPv6\n   Addressing Architecture.  \n\n\n The host component of a URI cannot contain escaped octets, hence this\n method does not perform any decoding."}, {"method_name": "getPort", "method_sig": "public int getPort()", "description": "Returns the port number of this URI.\n\n  The port component of a URI, if defined, is a non-negative\n integer. "}, {"method_name": "getRawPath", "method_sig": "public String getRawPath()", "description": "Returns the raw path component of this URI.\n\n  The path component of a URI, if defined, only contains the slash\n character ('/'), the commercial-at character ('@'),\n and characters in the unreserved, punct, escaped,\n and other categories. "}, {"method_name": "getPath", "method_sig": "public String getPath()", "description": "Returns the decoded path component of this URI.\n\n  The string returned by this method is equal to that returned by the\n getRawPath method except that all sequences of\n escaped octets are decoded.  "}, {"method_name": "getRawQuery", "method_sig": "public String getRawQuery()", "description": "Returns the raw query component of this URI.\n\n  The query component of a URI, if defined, only contains legal URI\n characters. "}, {"method_name": "getQuery", "method_sig": "public String getQuery()", "description": "Returns the decoded query component of this URI.\n\n  The string returned by this method is equal to that returned by the\n getRawQuery method except that all sequences of\n escaped octets are decoded.  "}, {"method_name": "getRawFragment", "method_sig": "public String getRawFragment()", "description": "Returns the raw fragment component of this URI.\n\n  The fragment component of a URI, if defined, only contains legal URI\n characters. "}, {"method_name": "getFragment", "method_sig": "public String getFragment()", "description": "Returns the decoded fragment component of this URI.\n\n  The string returned by this method is equal to that returned by the\n getRawFragment method except that all\n sequences of escaped octets are decoded.  "}, {"method_name": "equals", "method_sig": "public boolean equals (Object ob)", "description": "Tests this URI for equality with another object.\n\n  If the given object is not a URI then this method immediately\n returns false.\n\n  For two URIs to be considered equal requires that either both are\n opaque or both are hierarchical.  Their schemes must either both be\n undefined or else be equal without regard to case. Their fragments\n must either both be undefined or else be equal.\n\n  For two opaque URIs to be considered equal, their scheme-specific\n parts must be equal.\n\n  For two hierarchical URIs to be considered equal, their paths must\n be equal and their queries must either both be undefined or else be\n equal.  Their authorities must either both be undefined, or both be\n registry-based, or both be server-based.  If their authorities are\n defined and are registry-based, then they must be equal.  If their\n authorities are defined and are server-based, then their hosts must be\n equal without regard to case, their port numbers must be equal, and\n their user-information components must be equal.\n\n  When testing the user-information, path, query, fragment, authority,\n or scheme-specific parts of two URIs for equality, the raw forms rather\n than the encoded forms of these components are compared and the\n hexadecimal digits of escaped octets are compared without regard to\n case.\n\n  This method satisfies the general contract of the Object.equals method. "}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Returns a hash-code value for this URI.  The hash code is based upon all\n of the URI's components, and satisfies the general contract of the\n Object.hashCode method."}, {"method_name": "compareTo", "method_sig": "public int compareTo (URI that)", "description": "Compares this URI to another object, which must be a URI.\n\n  When comparing corresponding components of two URIs, if one\n component is undefined but the other is defined then the first is\n considered to be less than the second.  Unless otherwise noted, string\n components are ordered according to their natural, case-sensitive\n ordering as defined by the String.compareTo method.  String components that are subject to\n encoding are compared by comparing their raw forms rather than their\n encoded forms.\n\n  The ordering of URIs is defined as follows: \n\n Two URIs with different schemes are ordered according the\n   ordering of their schemes, without regard to case. \n A hierarchical URI is considered to be less than an opaque URI\n   with an identical scheme. \n Two opaque URIs with identical schemes are ordered according\n   to the ordering of their scheme-specific parts. \n Two opaque URIs with identical schemes and scheme-specific\n   parts are ordered according to the ordering of their\n   fragments. \n Two hierarchical URIs with identical schemes are ordered\n   according to the ordering of their authority components: \n\n If both authority components are server-based then the URIs\n     are ordered according to their user-information components; if these\n     components are identical then the URIs are ordered according to the\n     ordering of their hosts, without regard to case; if the hosts are\n     identical then the URIs are ordered according to the ordering of\n     their ports. \n If one or both authority components are registry-based then\n     the URIs are ordered according to the ordering of their authority\n     components. \n\n Finally, two hierarchical URIs with identical schemes and\n   authority components are ordered according to the ordering of their\n   paths; if their paths are identical then they are ordered according to\n   the ordering of their queries; if the queries are identical then they\n   are ordered according to the order of their fragments. \n\n This method satisfies the general contract of the Comparable.compareTo\n method. "}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns the content of this URI as a string.\n\n  If this URI was created by invoking one of the constructors in this\n class then a string equivalent to the original input string, or to the\n string computed from the originally-given components, as appropriate, is\n returned.  Otherwise this URI was created by normalization, resolution,\n or relativization, and so a string is constructed from this URI's\n components according to the rules specified in RFC\u00a02396,\n section\u00a05.2, step\u00a07. "}, {"method_name": "toASCIIString", "method_sig": "public String toASCIIString()", "description": "Returns the content of this URI as a US-ASCII string.\n\n  If this URI does not contain any characters in the other\n category then an invocation of this method will return the same value as\n an invocation of the toString method.  Otherwise\n this method works as if by invoking that method and then encoding the result.  "}]}