{"name": "Class CompositeTypeBasedGuardingDynamicLinker", "module": "jdk.dynalink", "package": "jdk.dynalink.linker.support", "text": "A composite type-based guarding dynamic linker. When a receiver of a not yet\n seen class is encountered, all linkers are queried sequentially on their\n TypeBasedGuardingDynamicLinker.canLinkType(Class) method. The linkers\n returning true are then bound to the class, and next time a receiver of same\n type is encountered, the linking is delegated to those linkers only, speeding\n up dispatch.", "codes": ["public class CompositeTypeBasedGuardingDynamicLinker\nextends Object\nimplements TypeBasedGuardingDynamicLinker"], "fields": [], "methods": [{"method_name": "canLinkType", "method_sig": "public boolean canLinkType (Class<?> type)", "description": "Returns true if at least one of the composite linkers returns true from\n TypeBasedGuardingDynamicLinker.canLinkType(Class) for the type."}, {"method_name": "optimize", "method_sig": "public static List<GuardingDynamicLinker> optimize (Iterable<? extends GuardingDynamicLinker> linkers)", "description": "Optimizes a list of type-based linkers. If a group of adjacent linkers in\n the list all implement TypeBasedGuardingDynamicLinker, they will\n be replaced with a single instance of\n CompositeTypeBasedGuardingDynamicLinker that contains them."}]}