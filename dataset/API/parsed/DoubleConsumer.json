{"name": "Interface DoubleConsumer", "module": "java.base", "package": "java.util.function", "text": "Represents an operation that accepts a single double-valued argument and\n returns no result.  This is the primitive type specialization of\n Consumer for double.  Unlike most other functional interfaces,\n DoubleConsumer is expected to operate via side-effects.\n\n This is a functional interface\n whose functional method is accept(double).", "codes": ["@FunctionalInterface\npublic interface DoubleConsumer"], "fields": [], "methods": [{"method_name": "accept", "method_sig": "void accept (double value)", "description": "Performs this operation on the given argument."}, {"method_name": "andThen", "method_sig": "default DoubleConsumer andThen (DoubleConsumer after)", "description": "Returns a composed DoubleConsumer that performs, in sequence, this\n operation followed by the after operation. If performing either\n operation throws an exception, it is relayed to the caller of the\n composed operation.  If performing this operation throws an exception,\n the after operation will not be performed."}]}