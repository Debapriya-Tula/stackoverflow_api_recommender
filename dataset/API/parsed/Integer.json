{"name": "Class Integer", "module": "java.base", "package": "java.lang", "text": "The Integer class wraps a value of the primitive type\n int in an object. An object of type Integer\n contains a single field whose type is int.\n\n In addition, this class provides several methods for converting\n an int to a String and a String to an\n int, as well as other constants and methods useful when\n dealing with an int.\n\n Implementation note: The implementations of the \"bit twiddling\"\n methods (such as highestOneBit and\n numberOfTrailingZeros) are\n based on material from Henry S. Warren, Jr.'s Hacker's\n Delight, (Addison Wesley, 2002).", "codes": ["public final class Integer\nextends Number\nimplements Comparable<Integer>"], "fields": [{"field_name": "MIN_VALUE", "field_sig": "@Native\npublic static final\u00a0int MIN_VALUE", "description": "A constant holding the minimum value an int can\n have, -231."}, {"field_name": "MAX_VALUE", "field_sig": "@Native\npublic static final\u00a0int MAX_VALUE", "description": "A constant holding the maximum value an int can\n have, 231-1."}, {"field_name": "TYPE", "field_sig": "public static final\u00a0Class<Integer> TYPE", "description": "The Class instance representing the primitive type\n int."}, {"field_name": "SIZE", "field_sig": "@Native\npublic static final\u00a0int SIZE", "description": "The number of bits used to represent an int value in two's\n complement binary form."}, {"field_name": "BYTES", "field_sig": "public static final\u00a0int BYTES", "description": "The number of bytes used to represent an int value in two's\n complement binary form."}], "methods": [{"method_name": "toString", "method_sig": "public static String toString (int i,\n                              int radix)", "description": "Returns a string representation of the first argument in the\n radix specified by the second argument.\n\n If the radix is smaller than Character.MIN_RADIX\n or larger than Character.MAX_RADIX, then the radix\n 10 is used instead.\n\n If the first argument is negative, the first element of the\n result is the ASCII minus character '-'\n ('\\u002D'). If the first argument is not\n negative, no sign character appears in the result.\n\n The remaining characters of the result represent the magnitude\n of the first argument. If the magnitude is zero, it is\n represented by a single zero character '0'\n ('\\u0030'); otherwise, the first character of\n the representation of the magnitude will not be the zero\n character.  The following ASCII characters are used as digits:\n\n \n0123456789abcdefghijklmnopqrstuvwxyz\n\n\n These are '\\u0030' through\n '\\u0039' and '\\u0061' through\n '\\u007A'. If radix is\n N, then the first N of these characters\n are used as radix-N digits in the order shown. Thus,\n the digits for hexadecimal (radix 16) are\n 0123456789abcdef. If uppercase letters are\n desired, the String.toUpperCase() method may\n be called on the result:\n\n \nInteger.toString(n, 16).toUpperCase()\n"}, {"method_name": "toUnsignedString", "method_sig": "public static String toUnsignedString (int i,\n                                      int radix)", "description": "Returns a string representation of the first argument as an\n unsigned integer value in the radix specified by the second\n argument.\n\n If the radix is smaller than Character.MIN_RADIX\n or larger than Character.MAX_RADIX, then the radix\n 10 is used instead.\n\n Note that since the first argument is treated as an unsigned\n value, no leading sign character is printed.\n\n If the magnitude is zero, it is represented by a single zero\n character '0' ('\\u0030'); otherwise,\n the first character of the representation of the magnitude will\n not be the zero character.\n\n The behavior of radixes and the characters used as digits\n are the same as toString."}, {"method_name": "toHexString", "method_sig": "public static String toHexString (int i)", "description": "Returns a string representation of the integer argument as an\n unsigned integer in base\u00a016.\n\n The unsigned integer value is the argument plus 232\n if the argument is negative; otherwise, it is equal to the\n argument.  This value is converted to a string of ASCII digits\n in hexadecimal (base\u00a016) with no extra leading\n 0s.\n\n The value of the argument can be recovered from the returned\n string s by calling Integer.parseUnsignedInt(s, 16).\n\n If the unsigned magnitude is zero, it is represented by a\n single zero character '0' ('\\u0030');\n otherwise, the first character of the representation of the\n unsigned magnitude will not be the zero character. The\n following characters are used as hexadecimal digits:\n\n \n0123456789abcdef\n\n\n These are the characters '\\u0030' through\n '\\u0039' and '\\u0061' through\n '\\u0066'. If uppercase letters are\n desired, the String.toUpperCase() method may\n be called on the result:\n\n \nInteger.toHexString(n).toUpperCase()\n"}, {"method_name": "toOctalString", "method_sig": "public static String toOctalString (int i)", "description": "Returns a string representation of the integer argument as an\n unsigned integer in base\u00a08.\n\n The unsigned integer value is the argument plus 232\n if the argument is negative; otherwise, it is equal to the\n argument.  This value is converted to a string of ASCII digits\n in octal (base\u00a08) with no extra leading 0s.\n\n The value of the argument can be recovered from the returned\n string s by calling Integer.parseUnsignedInt(s, 8).\n\n If the unsigned magnitude is zero, it is represented by a\n single zero character '0' ('\\u0030');\n otherwise, the first character of the representation of the\n unsigned magnitude will not be the zero character. The\n following characters are used as octal digits:\n\n \n01234567\n\n\n These are the characters '\\u0030' through\n '\\u0037'."}, {"method_name": "toBinaryString", "method_sig": "public static String toBinaryString (int i)", "description": "Returns a string representation of the integer argument as an\n unsigned integer in base\u00a02.\n\n The unsigned integer value is the argument plus 232\n if the argument is negative; otherwise it is equal to the\n argument.  This value is converted to a string of ASCII digits\n in binary (base\u00a02) with no extra leading 0s.\n\n The value of the argument can be recovered from the returned\n string s by calling Integer.parseUnsignedInt(s, 2).\n\n If the unsigned magnitude is zero, it is represented by a\n single zero character '0' ('\\u0030');\n otherwise, the first character of the representation of the\n unsigned magnitude will not be the zero character. The\n characters '0' ('\\u0030') and \n '1' ('\\u0031') are used as binary digits."}, {"method_name": "toString", "method_sig": "public static String toString (int i)", "description": "Returns a String object representing the\n specified integer. The argument is converted to signed decimal\n representation and returned as a string, exactly as if the\n argument and radix 10 were given as arguments to the toString(int, int) method."}, {"method_name": "toUnsignedString", "method_sig": "public static String toUnsignedString (int i)", "description": "Returns a string representation of the argument as an unsigned\n decimal value.\n\n The argument is converted to unsigned decimal representation\n and returned as a string exactly as if the argument and radix\n 10 were given as arguments to the toUnsignedString(int,\n int) method."}, {"method_name": "parseInt", "method_sig": "public static int parseInt (String s,\n                           int radix)\n                    throws NumberFormatException", "description": "Parses the string argument as a signed integer in the radix\n specified by the second argument. The characters in the string\n must all be digits of the specified radix (as determined by\n whether Character.digit(char, int) returns a\n nonnegative value), except that the first character may be an\n ASCII minus sign '-' ('\\u002D') to\n indicate a negative value or an ASCII plus sign '+'\n ('\\u002B') to indicate a positive value. The\n resulting integer value is returned.\n\n An exception of type NumberFormatException is\n thrown if any of the following situations occurs:\n \nThe first argument is null or is a string of\n length zero.\n\n The radix is either smaller than\n Character.MIN_RADIX or\n larger than Character.MAX_RADIX.\n\n Any character of the string is not a digit of the specified\n radix, except that the first character may be a minus sign\n '-' ('\\u002D') or plus sign\n '+' ('\\u002B') provided that the\n string is longer than length 1.\n\n The value represented by the string is not a value of type\n int.\n \nExamples:\n \n parseInt(\"0\", 10) returns 0\n parseInt(\"473\", 10) returns 473\n parseInt(\"+42\", 10) returns 42\n parseInt(\"-0\", 10) returns 0\n parseInt(\"-FF\", 16) returns -255\n parseInt(\"1100110\", 2) returns 102\n parseInt(\"2147483647\", 10) returns 2147483647\n parseInt(\"-2147483648\", 10) returns -2147483648\n parseInt(\"2147483648\", 10) throws a NumberFormatException\n parseInt(\"99\", 8) throws a NumberFormatException\n parseInt(\"Kona\", 10) throws a NumberFormatException\n parseInt(\"Kona\", 27) returns 411787\n "}, {"method_name": "parseInt", "method_sig": "public static int parseInt (CharSequence s,\n                           int beginIndex,\n                           int endIndex,\n                           int radix)\n                    throws NumberFormatException", "description": "Parses the CharSequence argument as a signed int in the\n specified radix, beginning at the specified beginIndex\n and extending to endIndex - 1.\n\n The method does not take steps to guard against the\n CharSequence being mutated while parsing."}, {"method_name": "parseInt", "method_sig": "public static int parseInt (String s)\n                    throws NumberFormatException", "description": "Parses the string argument as a signed decimal integer. The\n characters in the string must all be decimal digits, except\n that the first character may be an ASCII minus sign '-'\n ('\\u002D') to indicate a negative value or an\n ASCII plus sign '+' ('\\u002B') to\n indicate a positive value. The resulting integer value is\n returned, exactly as if the argument and the radix 10 were\n given as arguments to the parseInt(java.lang.String,\n int) method."}, {"method_name": "parseUnsignedInt", "method_sig": "public static int parseUnsignedInt (String s,\n                                   int radix)\n                            throws NumberFormatException", "description": "Parses the string argument as an unsigned integer in the radix\n specified by the second argument.  An unsigned integer maps the\n values usually associated with negative numbers to positive\n numbers larger than MAX_VALUE.\n\n The characters in the string must all be digits of the\n specified radix (as determined by whether Character.digit(char, int) returns a nonnegative\n value), except that the first character may be an ASCII plus\n sign '+' ('\\u002B'). The resulting\n integer value is returned.\n\n An exception of type NumberFormatException is\n thrown if any of the following situations occurs:\n \nThe first argument is null or is a string of\n length zero.\n\n The radix is either smaller than\n Character.MIN_RADIX or\n larger than Character.MAX_RADIX.\n\n Any character of the string is not a digit of the specified\n radix, except that the first character may be a plus sign\n '+' ('\\u002B') provided that the\n string is longer than length 1.\n\n The value represented by the string is larger than the\n largest unsigned int, 232-1.\n\n "}, {"method_name": "parseUnsignedInt", "method_sig": "public static int parseUnsignedInt (CharSequence s,\n                                   int beginIndex,\n                                   int endIndex,\n                                   int radix)\n                            throws NumberFormatException", "description": "Parses the CharSequence argument as an unsigned int in\n the specified radix, beginning at the specified\n beginIndex and extending to endIndex - 1.\n\n The method does not take steps to guard against the\n CharSequence being mutated while parsing."}, {"method_name": "parseUnsignedInt", "method_sig": "public static int parseUnsignedInt (String s)\n                            throws NumberFormatException", "description": "Parses the string argument as an unsigned decimal integer. The\n characters in the string must all be decimal digits, except\n that the first character may be an ASCII plus sign \n '+' ('\\u002B'). The resulting integer value\n is returned, exactly as if the argument and the radix 10 were\n given as arguments to the parseUnsignedInt(java.lang.String, int) method."}, {"method_name": "valueOf", "method_sig": "public static Integer valueOf (String s,\n                              int radix)\n                       throws NumberFormatException", "description": "Returns an Integer object holding the value\n extracted from the specified String when parsed\n with the radix given by the second argument. The first argument\n is interpreted as representing a signed integer in the radix\n specified by the second argument, exactly as if the arguments\n were given to the parseInt(java.lang.String, int)\n method. The result is an Integer object that\n represents the integer value specified by the string.\n\n In other words, this method returns an Integer\n object equal to the value of:\n\n \nnew Integer(Integer.parseInt(s, radix))\n"}, {"method_name": "valueOf", "method_sig": "public static Integer valueOf (String s)\n                       throws NumberFormatException", "description": "Returns an Integer object holding the\n value of the specified String. The argument is\n interpreted as representing a signed decimal integer, exactly\n as if the argument were given to the parseInt(java.lang.String) method. The result is an\n Integer object that represents the integer value\n specified by the string.\n\n In other words, this method returns an Integer\n object equal to the value of:\n\n \nnew Integer(Integer.parseInt(s))\n"}, {"method_name": "valueOf", "method_sig": "public static Integer valueOf (int i)", "description": "Returns an Integer instance representing the specified\n int value.  If a new Integer instance is not\n required, this method should generally be used in preference to\n the constructor Integer(int), as this method is likely\n to yield significantly better space and time performance by\n caching frequently requested values.\n\n This method will always cache values in the range -128 to 127,\n inclusive, and may cache other values outside of this range."}, {"method_name": "byteValue", "method_sig": "public byte byteValue()", "description": "Returns the value of this Integer as a byte\n after a narrowing primitive conversion."}, {"method_name": "shortValue", "method_sig": "public short shortValue()", "description": "Returns the value of this Integer as a short\n after a narrowing primitive conversion."}, {"method_name": "intValue", "method_sig": "public int intValue()", "description": "Returns the value of this Integer as an\n int."}, {"method_name": "longValue", "method_sig": "public long longValue()", "description": "Returns the value of this Integer as a long\n after a widening primitive conversion."}, {"method_name": "floatValue", "method_sig": "public float floatValue()", "description": "Returns the value of this Integer as a float\n after a widening primitive conversion."}, {"method_name": "doubleValue", "method_sig": "public double doubleValue()", "description": "Returns the value of this Integer as a double\n after a widening primitive conversion."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a String object representing this\n Integer's value. The value is converted to signed\n decimal representation and returned as a string, exactly as if\n the integer value were given as an argument to the toString(int) method."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Returns a hash code for this Integer."}, {"method_name": "hashCode", "method_sig": "public static int hashCode (int value)", "description": "Returns a hash code for an int value; compatible with\n Integer.hashCode()."}, {"method_name": "equals", "method_sig": "public boolean equals (Object obj)", "description": "Compares this object to the specified object.  The result is\n true if and only if the argument is not\n null and is an Integer object that\n contains the same int value as this object."}, {"method_name": "getInteger", "method_sig": "public static Integer getInteger (String nm)", "description": "Determines the integer value of the system property with the\n specified name.\n\n The first argument is treated as the name of a system\n property.  System properties are accessible through the System.getProperty(java.lang.String) method. The\n string value of this property is then interpreted as an integer\n value using the grammar supported by decode and\n an Integer object representing this value is returned.\n\n If there is no property with the specified name, if the\n specified name is empty or null, or if the property\n does not have the correct numeric format, then null is\n returned.\n\n In other words, this method returns an Integer\n object equal to the value of:\n\n \ngetInteger(nm, null)\n"}, {"method_name": "getInteger", "method_sig": "public static Integer getInteger (String nm,\n                                 int val)", "description": "Determines the integer value of the system property with the\n specified name.\n\n The first argument is treated as the name of a system\n property.  System properties are accessible through the System.getProperty(java.lang.String) method. The\n string value of this property is then interpreted as an integer\n value using the grammar supported by decode and\n an Integer object representing this value is returned.\n\n The second argument is the default value. An Integer object\n that represents the value of the second argument is returned if there\n is no property of the specified name, if the property does not have\n the correct numeric format, or if the specified name is empty or\n null.\n\n In other words, this method returns an Integer object\n equal to the value of:\n\n \ngetInteger(nm, new Integer(val))\n\n\n but in practice it may be implemented in a manner such as:\n\n \n Integer result = getInteger(nm, null);\n return (result == null) ? new Integer(val) : result;\n \n\n to avoid the unnecessary allocation of an Integer\n object when the default value is not needed."}, {"method_name": "getInteger", "method_sig": "public static Integer getInteger (String nm,\n                                 Integer val)", "description": "Returns the integer value of the system property with the\n specified name.  The first argument is treated as the name of a\n system property.  System properties are accessible through the\n System.getProperty(java.lang.String) method.\n The string value of this property is then interpreted as an\n integer value, as per the decode method,\n and an Integer object representing this value is\n returned; in summary:\n\n If the property value begins with the two ASCII characters\n         0x or the ASCII character #, not\n      followed by a minus sign, then the rest of it is parsed as a\n      hexadecimal integer exactly as by the method\n      valueOf(java.lang.String, int) with radix 16.\n If the property value begins with the ASCII character\n     0 followed by another character, it is parsed as an\n     octal integer exactly as by the method\n     valueOf(java.lang.String, int) with radix 8.\n Otherwise, the property value is parsed as a decimal integer\n exactly as by the method valueOf(java.lang.String, int)\n with radix 10.\n \nThe second argument is the default value. The default value is\n returned if there is no property of the specified name, if the\n property does not have the correct numeric format, or if the\n specified name is empty or null."}, {"method_name": "decode", "method_sig": "public static Integer decode (String nm)\n                      throws NumberFormatException", "description": "Decodes a String into an Integer.\n Accepts decimal, hexadecimal, and octal numbers given\n by the following grammar:\n\n \n\nDecodableString:\nSignopt DecimalNumeral\nSignopt 0x HexDigits\nSignopt 0X HexDigits\nSignopt # HexDigits\nSignopt 0 OctalDigits\nSign:\n-\n+\n\n\nDecimalNumeral, HexDigits, and OctalDigits\n are as defined in section 3.10.1 of\n The Java\u2122 Language Specification,\n except that underscores are not accepted between digits.\n\n The sequence of characters following an optional\n sign and/or radix specifier (\"0x\", \"0X\",\n \"#\", or leading zero) is parsed as by the \n Integer.parseInt method with the indicated radix (10, 16, or\n 8).  This sequence of characters must represent a positive\n value or a NumberFormatException will be thrown.  The\n result is negated if first character of the specified \n String is the minus sign.  No whitespace characters are\n permitted in the String."}, {"method_name": "compareTo", "method_sig": "public int compareTo (Integer anotherInteger)", "description": "Compares two Integer objects numerically."}, {"method_name": "compare", "method_sig": "public static int compare (int x,\n                          int y)", "description": "Compares two int values numerically.\n The value returned is identical to what would be returned by:\n \n    Integer.valueOf(x).compareTo(Integer.valueOf(y))\n "}, {"method_name": "compareUnsigned", "method_sig": "public static int compareUnsigned (int x,\n                                  int y)", "description": "Compares two int values numerically treating the values\n as unsigned."}, {"method_name": "toUnsignedLong", "method_sig": "public static long toUnsignedLong (int x)", "description": "Converts the argument to a long by an unsigned\n conversion.  In an unsigned conversion to a long, the\n high-order 32 bits of the long are zero and the\n low-order 32 bits are equal to the bits of the integer\n argument.\n\n Consequently, zero and positive int values are mapped\n to a numerically equal long value and negative \n int values are mapped to a long value equal to the\n input plus 232."}, {"method_name": "divideUnsigned", "method_sig": "public static int divideUnsigned (int dividend,\n                                 int divisor)", "description": "Returns the unsigned quotient of dividing the first argument by\n the second where each argument and the result is interpreted as\n an unsigned value.\n\n Note that in two's complement arithmetic, the three other\n basic arithmetic operations of add, subtract, and multiply are\n bit-wise identical if the two operands are regarded as both\n being signed or both being unsigned.  Therefore separate \n addUnsigned, etc. methods are not provided."}, {"method_name": "remainderUnsigned", "method_sig": "public static int remainderUnsigned (int dividend,\n                                    int divisor)", "description": "Returns the unsigned remainder from dividing the first argument\n by the second where each argument and the result is interpreted\n as an unsigned value."}, {"method_name": "highestOneBit", "method_sig": "public static int highestOneBit (int i)", "description": "Returns an int value with at most a single one-bit, in the\n position of the highest-order (\"leftmost\") one-bit in the specified\n int value.  Returns zero if the specified value has no\n one-bits in its two's complement binary representation, that is, if it\n is equal to zero."}, {"method_name": "lowestOneBit", "method_sig": "public static int lowestOneBit (int i)", "description": "Returns an int value with at most a single one-bit, in the\n position of the lowest-order (\"rightmost\") one-bit in the specified\n int value.  Returns zero if the specified value has no\n one-bits in its two's complement binary representation, that is, if it\n is equal to zero."}, {"method_name": "numberOfLeadingZeros", "method_sig": "public static int numberOfLeadingZeros (int i)", "description": "Returns the number of zero bits preceding the highest-order\n (\"leftmost\") one-bit in the two's complement binary representation\n of the specified int value.  Returns 32 if the\n specified value has no one-bits in its two's complement representation,\n in other words if it is equal to zero.\n\n Note that this method is closely related to the logarithm base 2.\n For all positive int values x:\n \nfloor(log2(x)) = 31 - numberOfLeadingZeros(x)\nceil(log2(x)) = 32 - numberOfLeadingZeros(x - 1)\n"}, {"method_name": "numberOfTrailingZeros", "method_sig": "public static int numberOfTrailingZeros (int i)", "description": "Returns the number of zero bits following the lowest-order (\"rightmost\")\n one-bit in the two's complement binary representation of the specified\n int value.  Returns 32 if the specified value has no\n one-bits in its two's complement representation, in other words if it is\n equal to zero."}, {"method_name": "bitCount", "method_sig": "public static int bitCount (int i)", "description": "Returns the number of one-bits in the two's complement binary\n representation of the specified int value.  This function is\n sometimes referred to as the population count."}, {"method_name": "rotateLeft", "method_sig": "public static int rotateLeft (int i,\n                             int distance)", "description": "Returns the value obtained by rotating the two's complement binary\n representation of the specified int value left by the\n specified number of bits.  (Bits shifted out of the left hand, or\n high-order, side reenter on the right, or low-order.)\n\n Note that left rotation with a negative distance is equivalent to\n right rotation: rotateLeft(val, -distance) == rotateRight(val,\n distance).  Note also that rotation by any multiple of 32 is a\n no-op, so all but the last five bits of the rotation distance can be\n ignored, even if the distance is negative: rotateLeft(val,\n distance) == rotateLeft(val, distance & 0x1F)."}, {"method_name": "rotateRight", "method_sig": "public static int rotateRight (int i,\n                              int distance)", "description": "Returns the value obtained by rotating the two's complement binary\n representation of the specified int value right by the\n specified number of bits.  (Bits shifted out of the right hand, or\n low-order, side reenter on the left, or high-order.)\n\n Note that right rotation with a negative distance is equivalent to\n left rotation: rotateRight(val, -distance) == rotateLeft(val,\n distance).  Note also that rotation by any multiple of 32 is a\n no-op, so all but the last five bits of the rotation distance can be\n ignored, even if the distance is negative: rotateRight(val,\n distance) == rotateRight(val, distance & 0x1F)."}, {"method_name": "reverse", "method_sig": "public static int reverse (int i)", "description": "Returns the value obtained by reversing the order of the bits in the\n two's complement binary representation of the specified int\n value."}, {"method_name": "signum", "method_sig": "public static int signum (int i)", "description": "Returns the signum function of the specified int value.  (The\n return value is -1 if the specified value is negative; 0 if the\n specified value is zero; and 1 if the specified value is positive.)"}, {"method_name": "reverseBytes", "method_sig": "public static int reverseBytes (int i)", "description": "Returns the value obtained by reversing the order of the bytes in the\n two's complement representation of the specified int value."}, {"method_name": "sum", "method_sig": "public static int sum (int a,\n                      int b)", "description": "Adds two integers together as per the + operator."}, {"method_name": "max", "method_sig": "public static int max (int a,\n                      int b)", "description": "Returns the greater of two int values\n as if by calling Math.max."}, {"method_name": "min", "method_sig": "public static int min (int a,\n                      int b)", "description": "Returns the smaller of two int values\n as if by calling Math.min."}]}