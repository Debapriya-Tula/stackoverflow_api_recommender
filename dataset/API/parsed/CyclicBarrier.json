{"name": "Class CyclicBarrier", "module": "java.base", "package": "java.util.concurrent", "text": "A synchronization aid that allows a set of threads to all wait for\n each other to reach a common barrier point.  CyclicBarriers are\n useful in programs involving a fixed sized party of threads that\n must occasionally wait for each other. The barrier is called\n cyclic because it can be re-used after the waiting threads\n are released.\n\n A CyclicBarrier supports an optional Runnable command\n that is run once per barrier point, after the last thread in the party\n arrives, but before any threads are released.\n This barrier action is useful\n for updating shared-state before any of the parties continue.\n\n Sample usage: Here is an example of using a barrier in a\n parallel decomposition design:\n\n  \n class Solver {\n   final int N;\n   final float[][] data;\n   final CyclicBarrier barrier;\n\n   class Worker implements Runnable {\n     int myRow;\n     Worker(int row) { myRow = row; }\n     public void run() {\n       while (!done()) {\n         processRow(myRow);\n\n         try {\n           barrier.await();\n         } catch (InterruptedException ex) {\n           return;\n         } catch (BrokenBarrierException ex) {\n           return;\n         }\n       }\n     }\n   }\n\n   public Solver(float[][] matrix) {\n     data = matrix;\n     N = matrix.length;\n     Runnable barrierAction = () -> mergeRows(...);\n     barrier = new CyclicBarrier(N, barrierAction);\n\n     List<Thread> threads = new ArrayList<>(N);\n     for (int i = 0; i < N; i++) {\n       Thread thread = new Thread(new Worker(i));\n       threads.add(thread);\n       thread.start();\n     }\n\n     // wait until done\n     for (Thread thread : threads)\n       thread.join();\n   }\n }\n\n Here, each worker thread processes a row of the matrix then waits at the\n barrier until all rows have been processed. When all rows are processed\n the supplied Runnable barrier action is executed and merges the\n rows. If the merger\n determines that a solution has been found then done() will return\n true and each worker will terminate.\n\n If the barrier action does not rely on the parties being suspended when\n it is executed, then any of the threads in the party could execute that\n action when it is released. To facilitate this, each invocation of\n await() returns the arrival index of that thread at the barrier.\n You can then choose which thread should execute the barrier action, for\n example:\n  \n if (barrier.await() == 0) {\n   // log the completion of this iteration\n }\nThe CyclicBarrier uses an all-or-none breakage model\n for failed synchronization attempts: If a thread leaves a barrier\n point prematurely because of interruption, failure, or timeout, all\n other threads waiting at that barrier point will also leave\n abnormally via BrokenBarrierException (or\n InterruptedException if they too were interrupted at about\n the same time).\n\n Memory consistency effects: Actions in a thread prior to calling\n await()\nhappen-before\n actions that are part of the barrier action, which in turn\n happen-before actions following a successful return from the\n corresponding await() in other threads.", "codes": ["public class CyclicBarrier\nextends Object"], "fields": [], "methods": [{"method_name": "getParties", "method_sig": "public int getParties()", "description": "Returns the number of parties required to trip this barrier."}, {"method_name": "await", "method_sig": "public int await()\n          throws InterruptedException,\n                 BrokenBarrierException", "description": "Waits until all parties have invoked\n await on this barrier.\n\n If the current thread is not the last to arrive then it is\n disabled for thread scheduling purposes and lies dormant until\n one of the following things happens:\n \nThe last thread arrives; or\n Some other thread interrupts\n the current thread; or\n Some other thread interrupts\n one of the other waiting threads; or\n Some other thread times out while waiting for barrier; or\n Some other thread invokes reset() on this barrier.\n \nIf the current thread:\n \nhas its interrupted status set on entry to this method; or\n is interrupted while waiting\n \n then InterruptedException is thrown and the current thread's\n interrupted status is cleared.\n\n If the barrier is reset() while any thread is waiting,\n or if the barrier is broken when\n await is invoked, or while any thread is waiting, then\n BrokenBarrierException is thrown.\n\n If any thread is interrupted while waiting,\n then all other waiting threads will throw\n BrokenBarrierException and the barrier is placed in the broken\n state.\n\n If the current thread is the last thread to arrive, and a\n non-null barrier action was supplied in the constructor, then the\n current thread runs the action before allowing the other threads to\n continue.\n If an exception occurs during the barrier action then that exception\n will be propagated in the current thread and the barrier is placed in\n the broken state."}, {"method_name": "await", "method_sig": "public int await (long timeout,\n                 TimeUnit unit)\n          throws InterruptedException,\n                 BrokenBarrierException,\n                 TimeoutException", "description": "Waits until all parties have invoked\n await on this barrier, or the specified waiting time elapses.\n\n If the current thread is not the last to arrive then it is\n disabled for thread scheduling purposes and lies dormant until\n one of the following things happens:\n \nThe last thread arrives; or\n The specified timeout elapses; or\n Some other thread interrupts\n the current thread; or\n Some other thread interrupts\n one of the other waiting threads; or\n Some other thread times out while waiting for barrier; or\n Some other thread invokes reset() on this barrier.\n \nIf the current thread:\n \nhas its interrupted status set on entry to this method; or\n is interrupted while waiting\n \n then InterruptedException is thrown and the current thread's\n interrupted status is cleared.\n\n If the specified waiting time elapses then TimeoutException\n is thrown. If the time is less than or equal to zero, the\n method will not wait at all.\n\n If the barrier is reset() while any thread is waiting,\n or if the barrier is broken when\n await is invoked, or while any thread is waiting, then\n BrokenBarrierException is thrown.\n\n If any thread is interrupted while\n waiting, then all other waiting threads will throw BrokenBarrierException and the barrier is placed in the broken\n state.\n\n If the current thread is the last thread to arrive, and a\n non-null barrier action was supplied in the constructor, then the\n current thread runs the action before allowing the other threads to\n continue.\n If an exception occurs during the barrier action then that exception\n will be propagated in the current thread and the barrier is placed in\n the broken state."}, {"method_name": "isBroken", "method_sig": "public boolean isBroken()", "description": "Queries if this barrier is in a broken state."}, {"method_name": "reset", "method_sig": "public void reset()", "description": "Resets the barrier to its initial state.  If any parties are\n currently waiting at the barrier, they will return with a\n BrokenBarrierException. Note that resets after\n a breakage has occurred for other reasons can be complicated to\n carry out; threads need to re-synchronize in some other way,\n and choose one to perform the reset.  It may be preferable to\n instead create a new barrier for subsequent use."}, {"method_name": "getNumberWaiting", "method_sig": "public int getNumberWaiting()", "description": "Returns the number of parties currently waiting at the barrier.\n This method is primarily useful for debugging and assertions."}]}