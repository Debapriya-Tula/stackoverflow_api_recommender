{"name": "Class ColorConvertOp", "module": "java.desktop", "package": "java.awt.image", "text": "This class performs a pixel-by-pixel color conversion of the data in\n the source image.  The resulting color values are scaled to the precision\n of the destination image.  Color conversion can be specified\n via an array of ColorSpace objects or an array of ICC_Profile objects.\n \n If the source is a BufferedImage with premultiplied alpha, the\n color components are divided by the alpha component before color conversion.\n If the destination is a BufferedImage with premultiplied alpha, the\n color components are multiplied by the alpha component after conversion.\n Rasters are treated as having no alpha channel, i.e. all bands are\n color bands.\n \n If a RenderingHints object is specified in the constructor, the\n color rendering hint and the dithering hint may be used to control\n color conversion.\n \n Note that Source and Destination may be the same object.", "codes": ["public class ColorConvertOp\nextends Object\nimplements BufferedImageOp, RasterOp"], "fields": [], "methods": [{"method_name": "getICC_Profiles", "method_sig": "public final ICC_Profile[] getICC_Profiles()", "description": "Returns the array of ICC_Profiles used to construct this ColorConvertOp.\n Returns null if the ColorConvertOp was not constructed from such an\n array."}, {"method_name": "filter", "method_sig": "public final BufferedImage filter (BufferedImage src,\n                                  BufferedImage dest)", "description": "ColorConverts the source BufferedImage.\n If the destination image is null,\n a BufferedImage will be created with an appropriate ColorModel."}, {"method_name": "filter", "method_sig": "public final WritableRaster filter (Raster src,\n                                   WritableRaster dest)", "description": "ColorConverts the image data in the source Raster.\n If the destination Raster is null, a new Raster will be created.\n The number of bands in the source and destination Rasters must\n meet the requirements explained above.  The constructor used to\n create this ColorConvertOp must have provided enough information\n to define both source and destination color spaces.  See above.\n Otherwise, an exception is thrown."}, {"method_name": "getBounds2D", "method_sig": "public final Rectangle2D getBounds2D (BufferedImage src)", "description": "Returns the bounding box of the destination, given this source.\n Note that this will be the same as the bounding box of the\n source."}, {"method_name": "getBounds2D", "method_sig": "public final Rectangle2D getBounds2D (Raster src)", "description": "Returns the bounding box of the destination, given this source.\n Note that this will be the same as the bounding box of the\n source."}, {"method_name": "createCompatibleDestImage", "method_sig": "public BufferedImage createCompatibleDestImage (BufferedImage src,\n                                               ColorModel destCM)", "description": "Creates a zeroed destination image with the correct size and number of\n bands, given this source."}, {"method_name": "createCompatibleDestRaster", "method_sig": "public WritableRaster createCompatibleDestRaster (Raster src)", "description": "Creates a zeroed destination Raster with the correct size and number of\n bands, given this source."}, {"method_name": "getPoint2D", "method_sig": "public final Point2D getPoint2D (Point2D srcPt,\n                                Point2D dstPt)", "description": "Returns the location of the destination point given a\n point in the source.  If dstPt is non-null,\n it will be used to hold the return value.  Note that\n for this class, the destination point will be the same\n as the source point."}, {"method_name": "getRenderingHints", "method_sig": "public final RenderingHints getRenderingHints()", "description": "Returns the rendering hints used by this op."}]}