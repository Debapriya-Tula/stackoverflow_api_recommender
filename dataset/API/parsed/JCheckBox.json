{"name": "Class JCheckBox", "module": "java.desktop", "package": "javax.swing", "text": "An implementation of a check box -- an item that can be selected or\n deselected, and which displays its state to the user.\n By convention, any number of check boxes in a group can be selected.\n See How to Use Buttons, Check Boxes, and Radio Buttons\n in The Java Tutorial\n for examples and information on using check boxes.\n \n Buttons can be configured, and to some degree controlled, by\n Actions.  Using an\n Action with a button has many benefits beyond directly\n configuring a button.  Refer to \n Swing Components Supporting Action for more\n details, and you can find more information in How\n to Use Actions, a section in The Java Tutorial.\n \nWarning: Swing is not thread safe. For more\n information see Swing's Threading\n Policy.\n \nWarning:\n Serialized objects of this class will not be compatible with\n future Swing releases. The current serialization support is\n appropriate for short term storage or RMI between applications running\n the same version of Swing.  As of 1.4, support for long term storage\n of all JavaBeans\u2122\n has been added to the java.beans package.\n Please see XMLEncoder.", "codes": ["@JavaBean(description=\"A component which can be selected or deselected.\")\npublic class JCheckBox\nextends JToggleButton\nimplements Accessible"], "fields": [{"field_name": "BORDER_PAINTED_FLAT_CHANGED_PROPERTY", "field_sig": "public static final\u00a0String BORDER_PAINTED_FLAT_CHANGED_PROPERTY", "description": "Identifies a change to the flat property."}], "methods": [{"method_name": "setBorderPaintedFlat", "method_sig": "@BeanProperty(visualUpdate=true,\n              description=\"Whether the border is painted flat.\")\npublic void setBorderPaintedFlat (boolean b)", "description": "Sets the borderPaintedFlat property,\n which gives a hint to the look and feel as to the\n appearance of the check box border.\n This is usually set to true when a\n JCheckBox instance is used as a\n renderer in a component such as a JTable or\n JTree.  The default value for the\n borderPaintedFlat property is false.\n This method fires a property changed event.\n Some look and feels might not implement flat borders;\n they will ignore this property."}, {"method_name": "isBorderPaintedFlat", "method_sig": "public boolean isBorderPaintedFlat()", "description": "Gets the value of the borderPaintedFlat property."}, {"method_name": "updateUI", "method_sig": "public void updateUI()", "description": "Resets the UI property to a value from the current look and feel."}, {"method_name": "getUIClassID", "method_sig": "@BeanProperty(bound=false,\n              expert=true,\n              description=\"A string that specifies the name of the L&F class\")\npublic String getUIClassID()", "description": "Returns a string that specifies the name of the L&F class\n that renders this component."}, {"method_name": "paramString", "method_sig": "protected String paramString()", "description": "Returns a string representation of this JCheckBox. This method\n is intended to be used only for debugging purposes, and the\n content and format of the returned string may vary between\n implementations. The returned string may be empty but may not\n be null.\n specific new aspects of the JFC components."}, {"method_name": "getAccessibleContext", "method_sig": "@BeanProperty(bound=false,\n              expert=true,\n              description=\"The AccessibleContext associated with this CheckBox.\")\npublic AccessibleContext getAccessibleContext()", "description": "Gets the AccessibleContext associated with this JCheckBox.\n For JCheckBoxes, the AccessibleContext takes the form of an\n AccessibleJCheckBox.\n A new AccessibleJCheckBox instance is created if necessary."}]}