{"name": "Class ExecutorCompletionService<V>", "module": "java.base", "package": "java.util.concurrent", "text": "A CompletionService that uses a supplied Executor\n to execute tasks.  This class arranges that submitted tasks are,\n upon completion, placed on a queue accessible using take.\n The class is lightweight enough to be suitable for transient use\n when processing groups of tasks.\n\n \nUsage Examples.\n\n Suppose you have a set of solvers for a certain problem, each\n returning a value of some type Result, and would like to\n run them concurrently, processing the results of each of them that\n return a non-null value, in some method use(Result r). You\n could write this as:\n\n  \n void solve(Executor e,\n            Collection<Callable<Result>> solvers)\n     throws InterruptedException, ExecutionException {\n   CompletionService<Result> cs\n       = new ExecutorCompletionService<>(e);\n   solvers.forEach(cs::submit);\n   for (int i = solvers.size(); i > 0; i--) {\n     Result r = cs.take().get();\n     if (r != null)\n       use(r);\n   }\n }\n\n Suppose instead that you would like to use the first non-null result\n of the set of tasks, ignoring any that encounter exceptions,\n and cancelling all other tasks when the first one is ready:\n\n  \n void solve(Executor e,\n            Collection<Callable<Result>> solvers)\n     throws InterruptedException {\n   CompletionService<Result> cs\n       = new ExecutorCompletionService<>(e);\n   int n = solvers.size();\n   List<Future<Result>> futures = new ArrayList<>(n);\n   Result result = null;\n   try {\n     solvers.forEach(solver -> futures.add(cs.submit(solver)));\n     for (int i = n; i > 0; i--) {\n       try {\n         Result r = cs.take().get();\n         if (r != null) {\n           result = r;\n           break;\n         }\n       } catch (ExecutionException ignore) {}\n     }\n   } finally {\n     futures.forEach(future -> future.cancel(true));\n   }\n\n   if (result != null)\n     use(result);\n }", "codes": ["public class ExecutorCompletionService<V>\nextends Object\nimplements CompletionService<V>"], "fields": [], "methods": [{"method_name": "submit", "method_sig": "public Future<V> submit (Callable<V> task)", "description": "Description copied from interface:\u00a0CompletionService"}, {"method_name": "submit", "method_sig": "public Future<V> submit (Runnable task,\n                        V result)", "description": "Description copied from interface:\u00a0CompletionService"}]}