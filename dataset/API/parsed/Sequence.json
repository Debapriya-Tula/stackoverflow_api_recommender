{"name": "Class Sequence", "module": "java.desktop", "package": "javax.sound.midi", "text": "A Sequence is a data structure containing musical information (often\n an entire song or composition) that can be played back by a Sequencer\n object. Specifically, the Sequence contains timing information and\n one or more tracks. Each track consists of a series of MIDI\n events (such as note-ons, note-offs, program changes, and meta-events). The\n sequence's timing information specifies the type of unit that is used to\n time-stamp the events in the sequence.\n \n A Sequence can be created from a MIDI file by reading the file into\n an input stream and invoking one of the getSequence methods of\n MidiSystem. A sequence can also be built from scratch by adding new\n Tracks to an empty Sequence, and adding MidiEvent\n objects to these Tracks.", "codes": ["public class Sequence\nextends Object"], "fields": [{"field_name": "PPQ", "field_sig": "public static final\u00a0float PPQ", "description": "The tempo-based timing type, for which the resolution is expressed in\n pulses (ticks) per quarter note."}, {"field_name": "SMPTE_24", "field_sig": "public static final\u00a0float SMPTE_24", "description": "The SMPTE-based timing type with 24 frames per second (resolution is\n expressed in ticks per frame)."}, {"field_name": "SMPTE_25", "field_sig": "public static final\u00a0float SMPTE_25", "description": "The SMPTE-based timing type with 25 frames per second (resolution is\n expressed in ticks per frame)."}, {"field_name": "SMPTE_30DROP", "field_sig": "public static final\u00a0float SMPTE_30DROP", "description": "The SMPTE-based timing type with 29.97 frames per second (resolution is\n expressed in ticks per frame)."}, {"field_name": "SMPTE_30", "field_sig": "public static final\u00a0float SMPTE_30", "description": "The SMPTE-based timing type with 30 frames per second (resolution is\n expressed in ticks per frame)."}, {"field_name": "divisionType", "field_sig": "protected\u00a0float divisionType", "description": "The timing division type of the sequence."}, {"field_name": "resolution", "field_sig": "protected\u00a0int resolution", "description": "The timing resolution of the sequence."}, {"field_name": "tracks", "field_sig": "protected\u00a0Vector<Track> tracks", "description": "The MIDI tracks in this sequence."}], "methods": [{"method_name": "getDivisionType", "method_sig": "public float getDivisionType()", "description": "Obtains the timing division type for this sequence."}, {"method_name": "getResolution", "method_sig": "public int getResolution()", "description": "Obtains the timing resolution for this sequence. If the sequence's\n division type is PPQ, the resolution is specified in ticks per beat. For\n SMTPE timing, the resolution is specified in ticks per frame."}, {"method_name": "createTrack", "method_sig": "public Track createTrack()", "description": "Creates a new, initially empty track as part of this sequence. The track\n initially contains the meta-event End of Track. The newly created track\n is returned. All tracks in the sequence may be retrieved using\n getTracks(). Tracks may be removed from the sequence using\n deleteTrack(javax.sound.midi.Track)."}, {"method_name": "deleteTrack", "method_sig": "public boolean deleteTrack (Track track)", "description": "Removes the specified track from the sequence."}, {"method_name": "getTracks", "method_sig": "public Track[] getTracks()", "description": "Obtains an array containing all the tracks in this sequence. If the\n sequence contains no tracks, an array of length 0 is returned."}, {"method_name": "getMicrosecondLength", "method_sig": "public long getMicrosecondLength()", "description": "Obtains the duration of this sequence, expressed in microseconds."}, {"method_name": "getTickLength", "method_sig": "public long getTickLength()", "description": "Obtains the duration of this sequence, expressed in MIDI ticks."}, {"method_name": "getPatchList", "method_sig": "public Patch[] getPatchList()", "description": "Obtains a list of patches referenced in this sequence. This patch list\n may be used to load the required Instrument objects into a\n Synthesizer."}]}