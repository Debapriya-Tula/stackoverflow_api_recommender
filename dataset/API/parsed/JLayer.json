{"name": "Class JLayer<V extends Component>", "module": "java.desktop", "package": "javax.swing", "text": "JLayer is a universal decorator for Swing components\n which enables you to implement various advanced painting effects as well as\n receive notifications of all AWTEvents generated within its borders.\n \nJLayer delegates the handling of painting and input events to a\n LayerUI object, which performs the actual decoration.\n \n The custom painting implemented in the LayerUI and events notification\n work for the JLayer itself and all its subcomponents.\n This combination enables you to enrich existing components\n by adding new advanced functionality such as temporary locking of a hierarchy,\n data tips for compound components, enhanced mouse scrolling etc and so on.\n \nJLayer is a good solution if you only need to do custom painting\n over compound component or catch input events from its subcomponents.\n \n import javax.swing.*;\n import javax.swing.plaf.LayerUI;\n import java.awt.*;\n\n public class JLayerSample {\n\n     private static JLayer<JComponent> createLayer() {\n         // This custom layerUI will fill the layer with translucent green\n         // and print out all mouseMotion events generated within its borders\n         LayerUI<JComponent> layerUI = new LayerUI<JComponent>() {\n\n             public void paint(Graphics g, JComponent c) {\n                 // paint the layer as is\n                 super.paint(g, c);\n                 // fill it with the translucent green\n                 g.setColor(new Color(0, 128, 0, 128));\n                 g.fillRect(0, 0, c.getWidth(), c.getHeight());\n             }\n\n             public void installUI(JComponent c) {\n                 super.installUI(c);\n                 // enable mouse motion events for the layer's subcomponents\n                 ((JLayer) c).setLayerEventMask(AWTEvent.MOUSE_MOTION_EVENT_MASK);\n             }\n\n             public void uninstallUI(JComponent c) {\n                 super.uninstallUI(c);\n                 // reset the layer event mask\n                 ((JLayer) c).setLayerEventMask(0);\n             }\n\n             // overridden method which catches MouseMotion events\n             public void eventDispatched(AWTEvent e, JLayer<? extends JComponent> l) {\n                 System.out.println(\"AWTEvent detected: \" + e);\n             }\n         };\n         // create a component to be decorated with the layer\n         JPanel panel = new JPanel();\n         panel.add(new JButton(\"JButton\"));\n\n         // create the layer for the panel using our custom layerUI\n         return new JLayer<JComponent>(panel, layerUI);\n     }\n\n     private static void createAndShowGUI() {\n         final JFrame frame = new JFrame();\n         frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n\n         // work with the layer as with any other Swing component\n         frame.add(createLayer());\n\n         frame.setSize(200, 200);\n         frame.setLocationRelativeTo(null);\n         frame.setVisible(true);\n     }\n\n     public static void main(String[] args) throws Exception {\n         SwingUtilities.invokeAndWait(new Runnable() {\n             public void run() {\n                 createAndShowGUI();\n             }\n         });\n     }\n }\n \nNote: JLayer doesn't support the following methods:\n \nContainer.add(java.awt.Component)\nContainer.add(String, java.awt.Component)\nContainer.add(java.awt.Component, int)\nContainer.add(java.awt.Component, Object)\nContainer.add(java.awt.Component, Object, int)\n\n using any of them will cause UnsupportedOperationException to be thrown,\n to add a component to JLayer\n use setView(Component) or setGlassPane(JPanel).", "codes": ["public final class JLayer<V extends Component>\nextends JComponent\nimplements Scrollable, PropertyChangeListener, Accessible"], "fields": [], "methods": [{"method_name": "getView", "method_sig": "public V getView()", "description": "Returns the JLayer's view component or null.\n This is a bound property."}, {"method_name": "setView", "method_sig": "public void setView (V view)", "description": "Sets the JLayer's view component, which can be null.\n This is a bound property."}, {"method_name": "setUI", "method_sig": "public void setUI (LayerUI<? super V> ui)", "description": "Sets the LayerUI which will perform painting\n and receive input events for this JLayer."}, {"method_name": "getUI", "method_sig": "public LayerUI<? super V> getUI()", "description": "Returns the LayerUI for this JLayer."}, {"method_name": "getGlassPane", "method_sig": "public JPanel getGlassPane()", "description": "Returns the JLayer's glassPane component or null.\n This is a bound property."}, {"method_name": "setGlassPane", "method_sig": "public void setGlassPane (JPanel glassPane)", "description": "Sets the JLayer's glassPane component, which can be null.\n This is a bound property."}, {"method_name": "createGlassPane", "method_sig": "public JPanel createGlassPane()", "description": "Called by the constructor methods to create a default glassPane.\n By default this method creates a new JPanel with visibility set to true\n and opacity set to false."}, {"method_name": "setLayout", "method_sig": "public void setLayout (LayoutManager mgr)", "description": "Sets the layout manager for this container.  This method is\n overridden to prevent the layout manager from being set.\n Note:  If mgr is non-null, this\n method will throw an exception as layout managers are not supported on\n a JLayer."}, {"method_name": "setBorder", "method_sig": "public void setBorder (Border border)", "description": "Delegates its functionality to the getView().setBorder(Border) method,\n if the view component is an instance of javax.swing.JComponent,\n otherwise this method is a no-op."}, {"method_name": "getBorder", "method_sig": "public Border getBorder()", "description": "Delegates its functionality to the getView().getBorder() method,\n if the view component is an instance of javax.swing.JComponent,\n otherwise returns null."}, {"method_name": "addImpl", "method_sig": "protected void addImpl (Component comp,\n                       Object constraints,\n                       int index)", "description": "This method is not supported by JLayer\n and always throws UnsupportedOperationException"}, {"method_name": "isPaintingOrigin", "method_sig": "protected boolean isPaintingOrigin()", "description": "Always returns true to cause painting to originate from JLayer,\n or one of its ancestors."}, {"method_name": "paintImmediately", "method_sig": "public void paintImmediately (int x,\n                             int y,\n                             int w,\n                             int h)", "description": "Delegates its functionality to the\n LayerUI.paintImmediately(int, int, int, int, JLayer) method,\n if LayerUI is set."}, {"method_name": "imageUpdate", "method_sig": "public boolean imageUpdate (Image img,\n                           int infoflags,\n                           int x,\n                           int y,\n                           int w,\n                           int h)", "description": "Delegates its functionality to the\n LayerUI.imageUpdate(java.awt.Image, int, int, int, int, int, JLayer) method,\n if the LayerUI is set."}, {"method_name": "paint", "method_sig": "public void paint (Graphics g)", "description": "Delegates all painting to the LayerUI object."}, {"method_name": "paintComponent", "method_sig": "protected void paintComponent (Graphics g)", "description": "This method is empty, because all painting is done by\n paint(Graphics) and\n ComponentUI.update(Graphics, JComponent) methods"}, {"method_name": "isOptimizedDrawingEnabled", "method_sig": "public boolean isOptimizedDrawingEnabled()", "description": "The JLayer overrides the default implementation of\n this method (in JComponent) to return false.\n This ensures\n that the drawing machinery will call the JLayer's\n paint\n implementation rather than messaging the JLayer's\n children directly."}, {"method_name": "setLayerEventMask", "method_sig": "public void setLayerEventMask (long layerEventMask)", "description": "Enables the events from JLayer and all its descendants\n defined by the specified event mask parameter\n to be delivered to the\n LayerUI.eventDispatched(AWTEvent, JLayer) method.\n \n Events are delivered provided that LayerUI is set\n for this JLayer and the JLayer\n is displayable.\n \n The following example shows how to correctly use this method\n in the LayerUI implementations:\n \n    public void installUI(JComponent c) {\n       super.installUI(c);\n       JLayer l = (JLayer) c;\n       // this LayerUI will receive only key and focus events\n       l.setLayerEventMask(AWTEvent.KEY_EVENT_MASK | AWTEvent.FOCUS_EVENT_MASK);\n    }\n\n    public void uninstallUI(JComponent c) {\n       super.uninstallUI(c);\n       JLayer l = (JLayer) c;\n       // JLayer must be returned to its initial state\n       l.setLayerEventMask(0);\n    }\n \n\n By default JLayer receives no events and its event mask is 0."}, {"method_name": "getLayerEventMask", "method_sig": "public long getLayerEventMask()", "description": "Returns the bitmap of event mask to receive by this JLayer\n and its LayerUI.\n \n It means that LayerUI.eventDispatched(AWTEvent, JLayer) method\n will only receive events that match the event mask.\n \n By default JLayer receives no events."}, {"method_name": "updateUI", "method_sig": "public void updateUI()", "description": "Delegates its functionality to the LayerUI.updateUI(JLayer) method,\n if LayerUI is set."}, {"method_name": "getPreferredScrollableViewportSize", "method_sig": "public Dimension getPreferredScrollableViewportSize()", "description": "Returns the preferred size of the viewport for a view component.\n \n If the view component of this layer implements Scrollable, this method delegates its\n implementation to the view component."}, {"method_name": "getScrollableBlockIncrement", "method_sig": "public int getScrollableBlockIncrement (Rectangle visibleRect,\n                                       int orientation,\n                                       int direction)", "description": "Returns a scroll increment, which is required for components\n that display logical rows or columns in order to completely expose\n one block of rows or columns, depending on the value of orientation.\n \n If the view component of this layer implements Scrollable, this method delegates its\n implementation to the view component."}, {"method_name": "getScrollableTracksViewportHeight", "method_sig": "public boolean getScrollableTracksViewportHeight()", "description": "Returns false to indicate that the height of the viewport does not\n determine the height of the layer, unless the preferred height\n of the layer is smaller than the height of the viewport.\n \n If the view component of this layer implements Scrollable, this method delegates its\n implementation to the view component."}, {"method_name": "getScrollableTracksViewportWidth", "method_sig": "public boolean getScrollableTracksViewportWidth()", "description": "Returns false to indicate that the width of the viewport does not\n determine the width of the layer, unless the preferred width\n of the layer is smaller than the width of the viewport.\n \n If the view component of this layer implements Scrollable, this method delegates its\n implementation to the view component."}, {"method_name": "getScrollableUnitIncrement", "method_sig": "public int getScrollableUnitIncrement (Rectangle visibleRect,\n                                      int orientation,\n                                      int direction)", "description": "Returns a scroll increment, which is required for components\n that display logical rows or columns in order to completely expose\n one new row or column, depending on the value of orientation.\n Ideally, components should handle a partially exposed row or column\n by returning the distance required to completely expose the item.\n \n Scrolling containers, like JScrollPane, will use this method\n each time the user requests a unit scroll.\n \n If the view component of this layer implements Scrollable, this method delegates its\n implementation to the view component."}, {"method_name": "doLayout", "method_sig": "public void doLayout()", "description": "Delegates its functionality to the LayerUI.doLayout(JLayer) method,\n if LayerUI is set."}, {"method_name": "getAccessibleContext", "method_sig": "public AccessibleContext getAccessibleContext()", "description": "Gets the AccessibleContext associated with this JLayer."}]}