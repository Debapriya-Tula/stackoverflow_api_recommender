{"name": "Interface ObjectFactory", "module": "java.naming", "package": "javax.naming.spi", "text": "This interface represents a factory for creating an object.\n\n The JNDI framework allows for object implementations to\n be loaded in dynamically via object factories.\n For example, when looking up a printer bound in the name space,\n if the print service binds printer names to References, the printer\n Reference could be used to create a printer object, so that\n the caller of lookup can directly operate on the printer object\n after the lookup.\n An ObjectFactory is responsible\n for creating objects of a specific type.  In the above example,\n you may have a PrinterObjectFactory for creating Printer objects.\n\n An object factory must implement the ObjectFactory interface.\n In addition, the factory class must be public and must have a\n public constructor that accepts no parameters.\n Note that in cases where the factory is in a named module then it must be\n in a package which is exported by that module to the java.naming\n module.\n\n The getObjectInstance() method of an object factory may\n be invoked multiple times, possibly using different parameters.\n The implementation is thread-safe.\n\n The mention of URL in the documentation for this class refers to\n a URL string as defined by RFC 1738 and its related RFCs. It is\n any string that conforms to the syntax described therein, and\n may not always have corresponding support in the java.net.URL\n class or Web browsers.", "codes": ["public interface ObjectFactory"], "fields": [], "methods": [{"method_name": "getObjectInstance", "method_sig": "Object getObjectInstance (Object obj,\n                         Name name,\n                         Context nameCtx,\n                         Hashtable<?, ?> environment)\n                  throws Exception", "description": "Creates an object using the location or reference information\n specified.\n \n Special requirements of this object are supplied\n using environment.\n An example of such an environment property is user identity\n information.\n\nNamingManager.getObjectInstance()\n successively loads in object factories and invokes this method\n on them until one produces a non-null answer.  When an exception\n is thrown by an object factory, the exception is passed on to the caller\n of NamingManager.getObjectInstance()\n (and no search is made for other factories\n that may produce a non-null answer).\n An object factory should only throw an exception if it is sure that\n it is the only intended factory and that no other object factories\n should be tried.\n If this factory cannot create an object using the arguments supplied,\n it should return null.\n\n A URL context factory is a special ObjectFactory that\n creates contexts for resolving URLs or objects whose locations\n are specified by URLs.  The getObjectInstance() method\n of a URL context factory will obey the following rules.\n \nIf obj is null, create a context for resolving URLs of the\n scheme associated with this factory. The resulting context is not tied\n to a specific URL:  it is able to handle arbitrary URLs with this factory's\n scheme id.  For example, invoking getObjectInstance() with\n obj set to null on an LDAP URL context factory would return a\n context that can resolve LDAP URLs\n such as \"ldap://ldap.wiz.com/o=wiz,c=us\" and\n \"ldap://ldap.umich.edu/o=umich,c=us\".\n \n If obj is a URL string, create an object (typically a context)\n identified by the URL.  For example, suppose this is an LDAP URL context\n factory.  If obj is \"ldap://ldap.wiz.com/o=wiz,c=us\",\n getObjectInstance() would return the context named by the distinguished\n name \"o=wiz, c=us\" at the LDAP server ldap.wiz.com.  This context can\n then be used to resolve LDAP names (such as \"cn=George\")\n relative to that context.\n \n If obj is an array of URL strings, the assumption is that the\n URLs are equivalent in terms of the context to which they refer.\n Verification of whether the URLs are, or need to be, equivalent is up\n to the context factory. The order of the URLs in the array is\n not significant.\n The object returned by getObjectInstance() is like that of the single\n URL case.  It is the object named by the URLs.\n \n If obj is of any other type, the behavior of\n getObjectInstance() is determined by the context factory\n implementation.\n \n\n The name and environment parameters\n are owned by the caller.\n The implementation will not modify these objects or keep references\n to them, although it may keep references to clones or copies.\n\n \nName and Context Parameters. \u00a0\u00a0\u00a0\n \n\n The name and nameCtx parameters may\n optionally be used to specify the name of the object being created.\n name is the name of the object, relative to context\n nameCtx.\n If there are several possible contexts from which the object\n could be named -- as will often be the case -- it is up to\n the caller to select one.  A good rule of thumb is to select the\n \"deepest\" context available.\n If nameCtx is null, name is relative\n to the default initial context.  If no name is being specified, the\n name parameter should be null.\n If a factory uses nameCtx it should synchronize its use\n against concurrent access, since context implementations are not\n guaranteed to be thread-safe."}]}