{"name": "Interface Consumer<T>", "module": "java.base", "package": "java.util.function", "text": "Represents an operation that accepts a single input argument and returns no\n result. Unlike most other functional interfaces, Consumer is expected\n to operate via side-effects.\n\n This is a functional interface\n whose functional method is accept(Object).", "codes": ["@FunctionalInterface\npublic interface Consumer<T>"], "fields": [], "methods": [{"method_name": "accept", "method_sig": "void accept (T t)", "description": "Performs this operation on the given argument."}, {"method_name": "andThen", "method_sig": "default Consumer<T> andThen (Consumer<? super T> after)", "description": "Returns a composed Consumer that performs, in sequence, this\n operation followed by the after operation. If performing either\n operation throws an exception, it is relayed to the caller of the\n composed operation.  If performing this operation throws an exception,\n the after operation will not be performed."}]}