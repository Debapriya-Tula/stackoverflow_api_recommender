{"name": "Class PlainView", "module": "java.desktop", "package": "javax.swing.text", "text": "Implements View interface for a simple multi-line text view\n that has text in one font and color.  The view represents each\n child element as a line of text.", "codes": ["public class PlainView\nextends View\nimplements TabExpander"], "fields": [{"field_name": "metrics", "field_sig": "protected\u00a0FontMetrics metrics", "description": "Font metrics for the current font."}], "methods": [{"method_name": "getTabSize", "method_sig": "protected int getTabSize()", "description": "Returns the tab size set for the document, defaulting to 8."}, {"method_name": "drawLine", "method_sig": "@Deprecated(since=\"9\")\nprotected void drawLine (int lineIndex,\n                        Graphics g,\n                        int x,\n                        int y)", "description": "Renders a line of text, suppressing whitespace at the end\n and expanding any tabs.  This is implemented to make calls\n to the methods drawUnselectedText and\n drawSelectedText so that the way selected and\n unselected text are rendered can be customized."}, {"method_name": "drawLine", "method_sig": "protected void drawLine (int lineIndex,\n                        Graphics2D g,\n                        float x,\n                        float y)", "description": "Renders a line of text, suppressing whitespace at the end\n and expanding any tabs.  This is implemented to make calls\n to the methods drawUnselectedText and\n drawSelectedText so that the way selected and\n unselected text are rendered can be customized."}, {"method_name": "drawUnselectedText", "method_sig": "@Deprecated(since=\"9\")\nprotected int drawUnselectedText (Graphics g,\n                                 int x,\n                                 int y,\n                                 int p0,\n                                 int p1)\n                          throws BadLocationException", "description": "Renders the given range in the model as normal unselected\n text.  Uses the foreground or disabled color to render the text."}, {"method_name": "drawUnselectedText", "method_sig": "protected float drawUnselectedText (Graphics2D g,\n                                   float x,\n                                   float y,\n                                   int p0,\n                                   int p1)\n                            throws BadLocationException", "description": "Renders the given range in the model as normal unselected\n text.  Uses the foreground or disabled color to render the text."}, {"method_name": "drawSelectedText", "method_sig": "@Deprecated(since=\"9\")\nprotected int drawSelectedText (Graphics g,\n                               int x,\n                               int y,\n                               int p0,\n                               int p1)\n                        throws BadLocationException", "description": "Renders the given range in the model as selected text.  This\n is implemented to render the text in the color specified in\n the hosting component.  It assumes the highlighter will render\n the selected background."}, {"method_name": "drawSelectedText", "method_sig": "protected float drawSelectedText (Graphics2D g,\n                                 float x,\n                                 float y,\n                                 int p0,\n                                 int p1)\n                          throws BadLocationException", "description": "Renders the given range in the model as selected text.  This\n is implemented to render the text in the color specified in\n the hosting component.  It assumes the highlighter will render\n the selected background."}, {"method_name": "getLineBuffer", "method_sig": "protected final Segment getLineBuffer()", "description": "Gives access to a buffer that can be used to fetch\n text from the associated document."}, {"method_name": "updateMetrics", "method_sig": "protected void updateMetrics()", "description": "Checks to see if the font metrics and longest line\n are up-to-date."}, {"method_name": "getPreferredSpan", "method_sig": "public float getPreferredSpan (int axis)", "description": "Determines the preferred span for this view along an\n axis."}, {"method_name": "paint", "method_sig": "public void paint (Graphics g,\n                  Shape a)", "description": "Renders using the given rendering surface and area on that surface.\n The view may need to do layout and create child views to enable\n itself to render into the given allocation."}, {"method_name": "modelToView", "method_sig": "public Shape modelToView (int pos,\n                         Shape a,\n                         Position.Bias b)\n                  throws BadLocationException", "description": "Provides a mapping from the document model coordinate space\n to the coordinate space of the view mapped to it."}, {"method_name": "viewToModel", "method_sig": "public int viewToModel (float x,\n                       float y,\n                       Shape a,\n                       Position.Bias[] bias)", "description": "Provides a mapping from the view coordinate space to the logical\n coordinate space of the model."}, {"method_name": "insertUpdate", "method_sig": "public void insertUpdate (DocumentEvent changes,\n                         Shape a,\n                         ViewFactory f)", "description": "Gives notification that something was inserted into the document\n in a location that this view is responsible for."}, {"method_name": "removeUpdate", "method_sig": "public void removeUpdate (DocumentEvent changes,\n                         Shape a,\n                         ViewFactory f)", "description": "Gives notification that something was removed from the document\n in a location that this view is responsible for."}, {"method_name": "changedUpdate", "method_sig": "public void changedUpdate (DocumentEvent changes,\n                          Shape a,\n                          ViewFactory f)", "description": "Gives notification from the document that attributes were changed\n in a location that this view is responsible for."}, {"method_name": "setSize", "method_sig": "public void setSize (float width,\n                    float height)", "description": "Sets the size of the view.  This should cause\n layout of the view along the given axis, if it\n has any layout duties."}, {"method_name": "nextTabStop", "method_sig": "public float nextTabStop (float x,\n                         int tabOffset)", "description": "Returns the next tab stop position after a given reference position.\n This implementation does not support things like centering so it\n ignores the tabOffset argument."}, {"method_name": "updateDamage", "method_sig": "protected void updateDamage (DocumentEvent changes,\n                            Shape a,\n                            ViewFactory f)", "description": "Repaint the region of change covered by the given document\n event.  Damages the line that begins the range to cover\n the case when the insert/remove is only on one line.\n If lines are added or removed, damages the whole\n view.  The longest line is checked to see if it has\n changed."}, {"method_name": "damageLineRange", "method_sig": "protected void damageLineRange (int line0,\n                               int line1,\n                               Shape a,\n                               Component host)", "description": "Repaint the given line range."}, {"method_name": "lineToRect", "method_sig": "protected Rectangle lineToRect (Shape a,\n                               int line)", "description": "Determine the rectangle that represents the given line."}]}