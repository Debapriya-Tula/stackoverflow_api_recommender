{"name": "Class LocaleNameProvider", "module": "java.base", "package": "java.util.spi", "text": "An abstract class for service providers that\n provide localized names for the\n Locale class.", "codes": ["public abstract class LocaleNameProvider\nextends LocaleServiceProvider"], "fields": [], "methods": [{"method_name": "getDisplayLanguage", "method_sig": "public abstract String getDisplayLanguage (String languageCode,\n                                          Locale locale)", "description": "Returns a localized name for the given \n IETF BCP47 language code and the given locale that is appropriate for\n display to the user.\n For example, if languageCode is \"fr\" and locale\n is en_US, getDisplayLanguage() will return \"French\"; if languageCode\n is \"en\" and locale is fr_FR, getDisplayLanguage() will return \"anglais\".\n If the name returned cannot be localized according to locale,\n (say, the provider does not have a Japanese name for Croatian),\n this method returns null."}, {"method_name": "getDisplayScript", "method_sig": "public String getDisplayScript (String scriptCode,\n                               Locale locale)", "description": "Returns a localized name for the given \n IETF BCP47 script code and the given locale that is appropriate for\n display to the user.\n For example, if scriptCode is \"Latn\" and locale\n is en_US, getDisplayScript() will return \"Latin\"; if scriptCode\n is \"Cyrl\" and locale is fr_FR, getDisplayScript() will return \"cyrillique\".\n If the name returned cannot be localized according to locale,\n (say, the provider does not have a Japanese name for Cyrillic),\n this method returns null. The default implementation returns null."}, {"method_name": "getDisplayCountry", "method_sig": "public abstract String getDisplayCountry (String countryCode,\n                                         Locale locale)", "description": "Returns a localized name for the given \n IETF BCP47 region code (either ISO 3166 country code or UN M.49 area\n codes) and the given locale that is appropriate for display to the user.\n For example, if countryCode is \"FR\" and locale\n is en_US, getDisplayCountry() will return \"France\"; if countryCode\n is \"US\" and locale is fr_FR, getDisplayCountry() will return \"Etats-Unis\".\n If the name returned cannot be localized according to locale,\n (say, the provider does not have a Japanese name for Croatia),\n this method returns null."}, {"method_name": "getDisplayVariant", "method_sig": "public abstract String getDisplayVariant (String variant,\n                                         Locale locale)", "description": "Returns a localized name for the given variant code and the given locale that\n is appropriate for display to the user.\n If the name returned cannot be localized according to locale,\n this method returns null."}, {"method_name": "getDisplayUnicodeExtensionKey", "method_sig": "public String getDisplayUnicodeExtensionKey (String key,\n                                            Locale locale)", "description": "Returns a localized name for the given\n Unicode extension key,\n and the given locale that is appropriate for display to the user.\n If the name returned cannot be localized according to locale,\n this method returns null."}, {"method_name": "getDisplayUnicodeExtensionType", "method_sig": "public String getDisplayUnicodeExtensionType (String type,\n                                             String key,\n                                             Locale locale)", "description": "Returns a localized name for the given\n Unicode extension type,\n and the given locale that is appropriate for display to the user.\n If the name returned cannot be localized according to locale,\n this method returns null."}]}