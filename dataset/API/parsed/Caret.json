{"name": "Interface Caret", "module": "java.desktop", "package": "javax.swing.text", "text": "A place within a document view that represents where\n things can be inserted into the document model.  A caret\n has a position in the document referred to as a dot.\n The dot is where the caret is currently located in the\n model.  There is\n a second position maintained by the caret that represents\n the other end of a selection called mark.  If there is\n no selection the dot and mark will be equal.  If a selection\n exists, the two values will be different.\n \n The dot can be placed by either calling\n setDot or moveDot.  Setting\n the dot has the effect of removing any selection that may\n have previously existed.  The dot and mark will be equal.\n Moving the dot has the effect of creating a selection as\n the mark is left at whatever position it previously had.", "codes": ["public interface Caret"], "fields": [], "methods": [{"method_name": "install", "method_sig": "void install (JTextComponent c)", "description": "Called when the UI is being installed into the\n interface of a JTextComponent.  This can be used\n to gain access to the model that is being navigated\n by the implementation of this interface."}, {"method_name": "deinstall", "method_sig": "void deinstall (JTextComponent c)", "description": "Called when the UI is being removed from the\n interface of a JTextComponent.  This is used to\n unregister any listeners that were attached."}, {"method_name": "paint", "method_sig": "void paint (Graphics g)", "description": "Renders the caret. This method is called by UI classes."}, {"method_name": "addChangeListener", "method_sig": "void addChangeListener (ChangeListener l)", "description": "Adds a listener to track whenever the caret position\n has been changed."}, {"method_name": "removeChangeListener", "method_sig": "void removeChangeListener (ChangeListener l)", "description": "Removes a listener that was tracking caret position changes."}, {"method_name": "isVisible", "method_sig": "boolean isVisible()", "description": "Determines if the caret is currently visible."}, {"method_name": "setVisible", "method_sig": "void setVisible (boolean v)", "description": "Sets the visibility of the caret."}, {"method_name": "isSelectionVisible", "method_sig": "boolean isSelectionVisible()", "description": "Determines if the selection is currently visible."}, {"method_name": "setSelectionVisible", "method_sig": "void setSelectionVisible (boolean v)", "description": "Sets the visibility of the selection"}, {"method_name": "setMagicCaretPosition", "method_sig": "void setMagicCaretPosition (Point p)", "description": "Set the current caret visual location.  This can be used when\n moving between lines that have uneven end positions (such as\n when caret up or down actions occur).  If text flows\n left-to-right or right-to-left the x-coordinate will indicate\n the desired navigation location for vertical movement.  If\n the text flow is top-to-bottom, the y-coordinate will indicate\n the desired navigation location for horizontal movement."}, {"method_name": "getMagicCaretPosition", "method_sig": "Point getMagicCaretPosition()", "description": "Gets the current caret visual location."}, {"method_name": "setBlinkRate", "method_sig": "void setBlinkRate (int rate)", "description": "Sets the blink rate of the caret.  This determines if\n and how fast the caret blinks, commonly used as one\n way to attract attention to the caret."}, {"method_name": "getBlinkRate", "method_sig": "int getBlinkRate()", "description": "Gets the blink rate of the caret.  This determines if\n and how fast the caret blinks, commonly used as one\n way to attract attention to the caret."}, {"method_name": "getDot", "method_sig": "int getDot()", "description": "Fetches the current position of the caret."}, {"method_name": "getMark", "method_sig": "int getMark()", "description": "Fetches the current position of the mark.  If there\n is a selection, the mark will not be the same as\n the dot."}, {"method_name": "setDot", "method_sig": "void setDot (int dot)", "description": "Sets the caret position to some position.  This\n causes the mark to become the same as the dot,\n effectively setting the selection range to zero.\n \n If the parameter is negative or beyond the length of the document,\n the caret is placed at the beginning or at the end, respectively."}, {"method_name": "moveDot", "method_sig": "void moveDot (int dot)", "description": "Moves the caret position (dot) to some other position,\n leaving behind the mark.  This is useful for\n making selections."}]}