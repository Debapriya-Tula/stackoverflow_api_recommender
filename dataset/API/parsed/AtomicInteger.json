{"name": "Class AtomicInteger", "module": "java.base", "package": "java.util.concurrent.atomic", "text": "An int value that may be updated atomically.  See the\n VarHandle specification for descriptions of the properties\n of atomic accesses. An AtomicInteger is used in\n applications such as atomically incremented counters, and cannot be\n used as a replacement for an Integer. However,\n this class does extend Number to allow uniform access by\n tools and utilities that deal with numerically-based classes.", "codes": ["public class AtomicInteger\nextends Number\nimplements Serializable"], "fields": [], "methods": [{"method_name": "get", "method_sig": "public final int get()", "description": "Returns the current value,\n with memory effects as specified by VarHandle.getVolatile(java.lang.Object...)."}, {"method_name": "set", "method_sig": "public final void set (int newValue)", "description": "Sets the value to newValue,\n with memory effects as specified by VarHandle.setVolatile(java.lang.Object...)."}, {"method_name": "lazySet", "method_sig": "public final void lazySet (int newValue)", "description": "Sets the value to newValue,\n with memory effects as specified by VarHandle.setRelease(java.lang.Object...)."}, {"method_name": "getAndSet", "method_sig": "public final int getAndSet (int newValue)", "description": "Atomically sets the value to newValue and returns the old value,\n with memory effects as specified by VarHandle.getAndSet(java.lang.Object...)."}, {"method_name": "compareAndSet", "method_sig": "public final boolean compareAndSet (int expectedValue,\n                                   int newValue)", "description": "Atomically sets the value to newValue\n if the current value == expectedValue,\n with memory effects as specified by VarHandle.compareAndSet(java.lang.Object...)."}, {"method_name": "weakCompareAndSet", "method_sig": "@Deprecated(since=\"9\")\npublic final boolean weakCompareAndSet (int expectedValue,\n                                       int newValue)", "description": "Possibly atomically sets the value to newValue\n if the current value == expectedValue,\n with memory effects as specified by VarHandle.weakCompareAndSetPlain(java.lang.Object...)."}, {"method_name": "weakCompareAndSetPlain", "method_sig": "public final boolean weakCompareAndSetPlain (int expectedValue,\n                                            int newValue)", "description": "Possibly atomically sets the value to newValue\n if the current value == expectedValue,\n with memory effects as specified by VarHandle.weakCompareAndSetPlain(java.lang.Object...)."}, {"method_name": "getAndIncrement", "method_sig": "public final int getAndIncrement()", "description": "Atomically increments the current value,\n with memory effects as specified by VarHandle.getAndAdd(java.lang.Object...).\n\n Equivalent to getAndAdd(1)."}, {"method_name": "getAndDecrement", "method_sig": "public final int getAndDecrement()", "description": "Atomically decrements the current value,\n with memory effects as specified by VarHandle.getAndAdd(java.lang.Object...).\n\n Equivalent to getAndAdd(-1)."}, {"method_name": "getAndAdd", "method_sig": "public final int getAndAdd (int delta)", "description": "Atomically adds the given value to the current value,\n with memory effects as specified by VarHandle.getAndAdd(java.lang.Object...)."}, {"method_name": "incrementAndGet", "method_sig": "public final int incrementAndGet()", "description": "Atomically increments the current value,\n with memory effects as specified by VarHandle.getAndAdd(java.lang.Object...).\n\n Equivalent to addAndGet(1)."}, {"method_name": "decrementAndGet", "method_sig": "public final int decrementAndGet()", "description": "Atomically decrements the current value,\n with memory effects as specified by VarHandle.getAndAdd(java.lang.Object...).\n\n Equivalent to addAndGet(-1)."}, {"method_name": "addAndGet", "method_sig": "public final int addAndGet (int delta)", "description": "Atomically adds the given value to the current value,\n with memory effects as specified by VarHandle.getAndAdd(java.lang.Object...)."}, {"method_name": "getAndUpdate", "method_sig": "public final int getAndUpdate (IntUnaryOperator updateFunction)", "description": "Atomically updates (with memory effects as specified by VarHandle.compareAndSet(java.lang.Object...)) the current value with the results of\n applying the given function, returning the previous value. The\n function should be side-effect-free, since it may be re-applied\n when attempted updates fail due to contention among threads."}, {"method_name": "updateAndGet", "method_sig": "public final int updateAndGet (IntUnaryOperator updateFunction)", "description": "Atomically updates (with memory effects as specified by VarHandle.compareAndSet(java.lang.Object...)) the current value with the results of\n applying the given function, returning the updated value. The\n function should be side-effect-free, since it may be re-applied\n when attempted updates fail due to contention among threads."}, {"method_name": "getAndAccumulate", "method_sig": "public final int getAndAccumulate (int x,\n                                  IntBinaryOperator accumulatorFunction)", "description": "Atomically updates (with memory effects as specified by VarHandle.compareAndSet(java.lang.Object...)) the current value with the results of\n applying the given function to the current and given values,\n returning the previous value. The function should be\n side-effect-free, since it may be re-applied when attempted\n updates fail due to contention among threads.  The function is\n applied with the current value as its first argument, and the\n given update as the second argument."}, {"method_name": "accumulateAndGet", "method_sig": "public final int accumulateAndGet (int x,\n                                  IntBinaryOperator accumulatorFunction)", "description": "Atomically updates (with memory effects as specified by VarHandle.compareAndSet(java.lang.Object...)) the current value with the results of\n applying the given function to the current and given values,\n returning the updated value. The function should be\n side-effect-free, since it may be re-applied when attempted\n updates fail due to contention among threads.  The function is\n applied with the current value as its first argument, and the\n given update as the second argument."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns the String representation of the current value."}, {"method_name": "intValue", "method_sig": "public int intValue()", "description": "Returns the current value of this AtomicInteger as an\n int,\n with memory effects as specified by VarHandle.getVolatile(java.lang.Object...).\n\n Equivalent to get()."}, {"method_name": "longValue", "method_sig": "public long longValue()", "description": "Returns the current value of this AtomicInteger as a\n long after a widening primitive conversion,\n with memory effects as specified by VarHandle.getVolatile(java.lang.Object...)."}, {"method_name": "floatValue", "method_sig": "public float floatValue()", "description": "Returns the current value of this AtomicInteger as a\n float after a widening primitive conversion,\n with memory effects as specified by VarHandle.getVolatile(java.lang.Object...)."}, {"method_name": "doubleValue", "method_sig": "public double doubleValue()", "description": "Returns the current value of this AtomicInteger as a\n double after a widening primitive conversion,\n with memory effects as specified by VarHandle.getVolatile(java.lang.Object...)."}, {"method_name": "getPlain", "method_sig": "public final int getPlain()", "description": "Returns the current value, with memory semantics of reading as\n if the variable was declared non-volatile."}, {"method_name": "setPlain", "method_sig": "public final void setPlain (int newValue)", "description": "Sets the value to newValue, with memory semantics\n of setting as if the variable was declared non-volatile\n and non-final."}, {"method_name": "getOpaque", "method_sig": "public final int getOpaque()", "description": "Returns the current value,\n with memory effects as specified by VarHandle.getOpaque(java.lang.Object...)."}, {"method_name": "setOpaque", "method_sig": "public final void setOpaque (int newValue)", "description": "Sets the value to newValue,\n with memory effects as specified by VarHandle.setOpaque(java.lang.Object...)."}, {"method_name": "getAcquire", "method_sig": "public final int getAcquire()", "description": "Returns the current value,\n with memory effects as specified by VarHandle.getAcquire(java.lang.Object...)."}, {"method_name": "setRelease", "method_sig": "public final void setRelease (int newValue)", "description": "Sets the value to newValue,\n with memory effects as specified by VarHandle.setRelease(java.lang.Object...)."}, {"method_name": "compareAndExchange", "method_sig": "public final int compareAndExchange (int expectedValue,\n                                    int newValue)", "description": "Atomically sets the value to newValue if the current value,\n referred to as the witness value, == expectedValue,\n with memory effects as specified by\n VarHandle.compareAndExchange(java.lang.Object...)."}, {"method_name": "compareAndExchangeAcquire", "method_sig": "public final int compareAndExchangeAcquire (int expectedValue,\n                                           int newValue)", "description": "Atomically sets the value to newValue if the current value,\n referred to as the witness value, == expectedValue,\n with memory effects as specified by\n VarHandle.compareAndExchangeAcquire(java.lang.Object...)."}, {"method_name": "compareAndExchangeRelease", "method_sig": "public final int compareAndExchangeRelease (int expectedValue,\n                                           int newValue)", "description": "Atomically sets the value to newValue if the current value,\n referred to as the witness value, == expectedValue,\n with memory effects as specified by\n VarHandle.compareAndExchangeRelease(java.lang.Object...)."}, {"method_name": "weakCompareAndSetVolatile", "method_sig": "public final boolean weakCompareAndSetVolatile (int expectedValue,\n                                               int newValue)", "description": "Possibly atomically sets the value to newValue if\n the current value == expectedValue,\n with memory effects as specified by\n VarHandle.weakCompareAndSet(java.lang.Object...)."}, {"method_name": "weakCompareAndSetAcquire", "method_sig": "public final boolean weakCompareAndSetAcquire (int expectedValue,\n                                              int newValue)", "description": "Possibly atomically sets the value to newValue if\n the current value == expectedValue,\n with memory effects as specified by\n VarHandle.weakCompareAndSetAcquire(java.lang.Object...)."}, {"method_name": "weakCompareAndSetRelease", "method_sig": "public final boolean weakCompareAndSetRelease (int expectedValue,\n                                              int newValue)", "description": "Possibly atomically sets the value to newValue if\n the current value == expectedValue,\n with memory effects as specified by\n VarHandle.weakCompareAndSetRelease(java.lang.Object...)."}]}