{"name": "Interface TypeMirror", "module": "java.compiler", "package": "javax.lang.model.type", "text": "Represents a type in the Java programming language.\n Types include primitive types, declared types (class and interface types),\n array types, type variables, and the null type.\n Also represented are wildcard type arguments, the signature and\n return types of executables, and pseudo-types corresponding to\n packages, modules, and the keyword void.\n\n  Types should be compared using the utility methods in Types.  There is no guarantee that any particular type will always\n be represented by the same object.\n\n  To implement operations based on the class of an \n TypeMirror object, either use a visitor\n or use the result of the getKind() method.  Using \n instanceof is not necessarily a reliable idiom for\n determining the effective class of an object in this modeling\n hierarchy since an implementation may choose to have a single\n object implement multiple TypeMirror subinterfaces.", "codes": ["public interface TypeMirror\nextends AnnotatedConstruct"], "fields": [], "methods": [{"method_name": "getKind", "method_sig": "TypeKind getKind()", "description": "Returns the kind of this type."}, {"method_name": "equals", "method_sig": "boolean equals (Object obj)", "description": "Obeys the general contract of Object.equals.\n This method does not, however, indicate whether two types represent\n the same type.\n Semantic comparisons of type equality should instead use\n Types.isSameType(TypeMirror, TypeMirror).\n The results of t1.equals(t2) and\n Types.isSameType(t1, t2) may differ."}, {"method_name": "hashCode", "method_sig": "int hashCode()", "description": "Obeys the general contract of Object.hashCode."}, {"method_name": "toString", "method_sig": "String toString()", "description": "Returns an informative string representation of this type.  If\n possible, the string should be of a form suitable for\n representing this type in source code.  Any names embedded in\n the result are qualified if possible."}, {"method_name": "accept", "method_sig": "<R, P> R accept (TypeVisitor<R, P> v,\n                     P p)", "description": "Applies a visitor to this type."}]}