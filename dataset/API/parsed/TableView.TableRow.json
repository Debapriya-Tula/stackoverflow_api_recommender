{"name": "Class TableView.TableRow", "module": "java.desktop", "package": "javax.swing.text", "text": "View of a row in a row-centric table.", "codes": ["public class TableView.TableRow\nextends BoxView"], "fields": [], "methods": [{"method_name": "replace", "method_sig": "public void replace (int offset,\n                    int length,\n                    View[] views)", "description": "Change the child views.  This is implemented to\n provide the superclass behavior and invalidate the\n grid so that rows and columns will be recalculated."}, {"method_name": "layoutMajorAxis", "method_sig": "protected void layoutMajorAxis (int targetSpan,\n                               int axis,\n                               int[] offsets,\n                               int[] spans)", "description": "Perform layout for the major axis of the box (i.e. the\n axis that it represents).  The results of the layout should\n be placed in the given arrays which represent the allocations\n to the children along the major axis.\n \n This is re-implemented to give each child the span of the column\n width for the table, and to give cells that span multiple columns\n the multi-column span."}, {"method_name": "layoutMinorAxis", "method_sig": "protected void layoutMinorAxis (int targetSpan,\n                               int axis,\n                               int[] offsets,\n                               int[] spans)", "description": "Perform layout for the minor axis of the box (i.e. the\n axis orthogonal to the axis that it represents).  The results\n of the layout should be placed in the given arrays which represent\n the allocations to the children along the minor axis.  This\n is called by the superclass whenever the layout needs to be\n updated along the minor axis.\n \n This is implemented to delegate to the superclass, then adjust\n the span for any cell that spans multiple rows."}, {"method_name": "getResizeWeight", "method_sig": "public int getResizeWeight (int axis)", "description": "Determines the resizability of the view along the\n given axis.  A value of 0 or less is not resizable."}, {"method_name": "getViewAtPosition", "method_sig": "protected View getViewAtPosition (int pos,\n                                 Rectangle a)", "description": "Fetches the child view that represents the given position in\n the model.  This is implemented to walk through the children\n looking for a range that contains the given position.  In this\n view the children do not necessarily have a one to one mapping\n with the child elements."}]}