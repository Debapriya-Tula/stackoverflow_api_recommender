{"name": "Interface DiagnosticCommandMBean", "module": "jdk.management", "package": "com.sun.management", "text": "Management interface for the diagnostic commands for the HotSpot Virtual Machine.\n\n The DiagnosticCommandMBean is registered to the\n platform MBeanServer as are other platform MBeans.\n\n The ObjectName for uniquely identifying\n the diagnostic MBean within an MBeanServer is:\n \ncom.sun.management:type=DiagnosticCommand\n\nThis MBean is a DynamicMBean\n and also a NotificationEmitter.\n The DiagnosticCommandMBean is generated at runtime and is subject to\n modifications during the lifetime of the Java virtual machine.\n\n A diagnostic command is represented as an operation of\n the DiagnosticCommandMBean interface. Each diagnostic command has:\n \nthe diagnostic command name which is the name being referenced in\n     the HotSpot Virtual Machine\nthe MBean operation name which is the\n     name\n     generated for the diagnostic command operation invocation.\n     The MBean operation name is implementation dependent\n\n\n The recommended way to transform a diagnostic command name into a MBean\n operation name is as follows:\n \nAll characters from the first one to the first dot are set to be\n      lower-case characters\nEvery dot or underline character is removed and the following\n   character is set to be an upper-case character\nAll other characters are copied without modification\n\nThe diagnostic command name is always provided with the meta-data on the\n operation in a field named dcmd.name (see below).\n\n A diagnostic command may or may not support options or arguments.\n All the operations return String and either take\n no parameter for operations that do not support any option or argument,\n or take a String[] parameter for operations that support at least\n one option or argument.\n Each option or argument must be stored in a single String.\n Options or arguments split across several String instances are not supported.\n\n The distinction between options and arguments: options are identified by\n the option name while arguments are identified by their position in the\n command line. Options and arguments are processed in the order of the array\n passed to the invocation method.\n\n Like any operation of a dynamic MBean, each of these operations is\n described by MBeanOperationInfo\n instance. Here's the values returned by this object:\n \ngetName()\n      returns the operation name generated from the diagnostic command name\ngetDescription()\n      returns the diagnostic command description\n      (the same as the one return in the 'help' command)\ngetImpact()\n      returns ACTION_INFO\ngetReturnType()\n      returns java.lang.String\ngetDescriptor()\n      returns a Descriptor instance (see below)\n\nThe Descriptor\n is a collection of fields containing additional\n meta-data for a JMX element. A field is a name and an associated value.\n The additional meta-data provided for an operation associated with a\n diagnostic command are described in the table below:\n\n description\n\n\nNameTypeDescription\n\n\n\n\ndcmd.nameString\nThe original diagnostic command name (not the operation name)\n\n\ndcmd.descriptionString\nThe diagnostic command description\n\n\ndcmd.helpString\nThe full help message for this diagnostic command (same output as\n          the one produced by the 'help' command)\n\n\ndcmd.vmImpactString\nThe impact of the diagnostic command,\n      this value is the same as the one printed in the 'impact'\n      section of the help message of the diagnostic command, and it\n      is different from the getImpact() of the MBeanOperationInfo\n\n\ndcmd.enabledboolean\nTrue if the diagnostic command is enabled, false otherwise\n\n\ndcmd.permissionClassString\nSome diagnostic command might require a specific permission to be\n          executed, in addition to the MBeanPermission to invoke their\n          associated MBean operation. This field returns the fully qualified\n          name of the permission class or null if no permission is required\n   \n\n\ndcmd.permissionNameString\nThe fist argument of the permission required to execute this\n          diagnostic command or null if no permission is required\n\n\ndcmd.permissionActionString\nThe second argument of the permission required to execute this\n          diagnostic command or null if the permission constructor has only\n          one argument (like the ManagementPermission) or if no permission\n          is required\n\n\ndcmd.argumentsDescriptor\nA Descriptor instance containing the descriptions of options and\n          arguments supported by the diagnostic command (see below)\n\n\n\nThe description of parameters (options or arguments) of a diagnostic\n command is provided within a Descriptor instance. In this Descriptor,\n each field name is a parameter name, and each field value is itself\n a Descriptor instance. The fields provided in this second Descriptor\n instance are described in the table below:\n\n description\n\n\nNameTypeDescription\n\n\n\n\ndcmd.arg.nameString\nThe name of the parameter\n\n\ndcmd.arg.typeString\nThe type of the parameter. The returned String is the name of a type\n          recognized by the diagnostic command parser. These types are not\n          Java types and are implementation dependent.\n          \n\n\ndcmd.arg.descriptionString\nThe parameter description\n\n\ndcmd.arg.isMandatoryboolean\nTrue if the parameter is mandatory, false otherwise\n\n\ndcmd.arg.isOptionboolean\nTrue if the parameter is an option, false if it is an argument\n\n\ndcmd.arg.isMultipleboolean\nTrue if the parameter can be specified several times, false\n          otherwise\n\n\n\nWhen the set of diagnostic commands currently supported by the Java\n Virtual Machine is modified, the DiagnosticCommandMBean emits\n a Notification with a\n type of\n \n\"jmx.mbean.info.changed\" and a\n userData that\n is the new MBeanInfo.", "codes": ["public interface DiagnosticCommandMBean\nextends DynamicMBean"], "fields": [], "methods": []}