{"name": "Class LineMetrics", "module": "java.desktop", "package": "java.awt.font", "text": "The LineMetrics class allows access to the\n metrics needed to layout characters along a line\n and to layout of a set of lines.  A LineMetrics\n object encapsulates the measurement information associated\n with a run of text.\n \n Fonts can have different metrics for different ranges of\n characters.  The getLineMetrics methods of\n Font take some text as an argument\n and return a LineMetrics object describing the\n metrics of the initial number of characters in that text, as\n returned by getNumChars().", "codes": ["public abstract class LineMetrics\nextends Object"], "fields": [], "methods": [{"method_name": "getNumChars", "method_sig": "public abstract int getNumChars()", "description": "Returns the number of characters (char values) in the text whose\n metrics are encapsulated by this LineMetrics\n object."}, {"method_name": "getAscent", "method_sig": "public abstract float getAscent()", "description": "Returns the ascent of the text.  The ascent\n is the distance from the baseline\n to the ascender line.  The ascent usually represents the\n the height of the capital letters of the text.  Some characters\n can extend above the ascender line."}, {"method_name": "getDescent", "method_sig": "public abstract float getDescent()", "description": "Returns the descent of the text.  The descent\n is the distance from the baseline\n to the descender line.  The descent usually represents\n the distance to the bottom of lower case letters like\n 'p'.  Some characters can extend below the descender\n line."}, {"method_name": "getLeading", "method_sig": "public abstract float getLeading()", "description": "Returns the leading of the text. The\n leading is the recommended\n distance from the bottom of the descender line to the\n top of the next line."}, {"method_name": "getHeight", "method_sig": "public abstract float getHeight()", "description": "Returns the height of the text.  The\n height is equal to the sum of the ascent, the\n descent and the leading."}, {"method_name": "getBaselineIndex", "method_sig": "public abstract int getBaselineIndex()", "description": "Returns the baseline index of the text.\n The index is one of\n ROMAN_BASELINE,\n CENTER_BASELINE,\n HANGING_BASELINE."}, {"method_name": "getBaselineOffsets", "method_sig": "public abstract float[] getBaselineOffsets()", "description": "Returns the baseline offsets of the text,\n relative to the baseline of the text.  The\n offsets are indexed by baseline index.  For\n example, if the baseline index is\n CENTER_BASELINE then\n offsets[HANGING_BASELINE] is usually\n negative, offsets[CENTER_BASELINE]\n is zero, and offsets[ROMAN_BASELINE]\n is usually positive."}, {"method_name": "getStrikethroughOffset", "method_sig": "public abstract float getStrikethroughOffset()", "description": "Returns the position of the strike-through line\n relative to the baseline."}, {"method_name": "getStrikethroughThickness", "method_sig": "public abstract float getStrikethroughThickness()", "description": "Returns the thickness of the strike-through line."}, {"method_name": "getUnderlineOffset", "method_sig": "public abstract float getUnderlineOffset()", "description": "Returns the position of the underline relative to\n the baseline."}, {"method_name": "getUnderlineThickness", "method_sig": "public abstract float getUnderlineThickness()", "description": "Returns the thickness of the underline."}]}