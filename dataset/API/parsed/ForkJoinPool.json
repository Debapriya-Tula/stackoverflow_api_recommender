{"name": "Class ForkJoinPool", "module": "java.base", "package": "java.util.concurrent", "text": "An ExecutorService for running ForkJoinTasks.\n A ForkJoinPool provides the entry point for submissions\n from non-ForkJoinTask clients, as well as management and\n monitoring operations.\n\n A ForkJoinPool differs from other kinds of ExecutorService mainly by virtue of employing\n work-stealing: all threads in the pool attempt to find and\n execute tasks submitted to the pool and/or created by other active\n tasks (eventually blocking waiting for work if none exist). This\n enables efficient processing when most tasks spawn other subtasks\n (as do most ForkJoinTasks), as well as when many small\n tasks are submitted to the pool from external clients.  Especially\n when setting asyncMode to true in constructors, \n ForkJoinPools may also be appropriate for use with event-style\n tasks that are never joined. All worker threads are initialized\n with Thread.isDaemon() set true.\n\n A static commonPool() is available and appropriate for\n most applications. The common pool is used by any ForkJoinTask that\n is not explicitly submitted to a specified pool. Using the common\n pool normally reduces resource usage (its threads are slowly\n reclaimed during periods of non-use, and reinstated upon subsequent\n use).\n\n For applications that require separate or custom pools, a \n ForkJoinPool may be constructed with a given target parallelism\n level; by default, equal to the number of available processors.\n The pool attempts to maintain enough active (or available) threads\n by dynamically adding, suspending, or resuming internal worker\n threads, even if some tasks are stalled waiting to join others.\n However, no such adjustments are guaranteed in the face of blocked\n I/O or other unmanaged synchronization. The nested ForkJoinPool.ManagedBlocker interface enables extension of the kinds of\n synchronization accommodated. The default policies may be\n overridden using a constructor with parameters corresponding to\n those documented in class ThreadPoolExecutor.\n\n In addition to execution and lifecycle control methods, this\n class provides status check methods (for example\n getStealCount()) that are intended to aid in developing,\n tuning, and monitoring fork/join applications. Also, method\n toString() returns indications of pool state in a\n convenient form for informal monitoring.\n\n As is the case with other ExecutorServices, there are three\n main task execution methods summarized in the following table.\n These are designed to be used primarily by clients not already\n engaged in fork/join computations in the current pool.  The main\n forms of these methods accept instances of ForkJoinTask,\n but overloaded forms also allow mixed execution of plain \n Runnable- or Callable- based activities as well.  However,\n tasks that are already executing in a pool should normally instead\n use the within-computation forms listed in the table unless using\n async event-style tasks that are not usually joined, in which case\n there is little difference among choice of methods.\n\n \nSummary of task execution methods\n\n\n Call from non-fork/join clients\n Call from within fork/join computations\n\n\n Arrange async execution\n execute(ForkJoinTask)\n ForkJoinTask.fork()\n\n\n Await and obtain result\n invoke(ForkJoinTask)\n ForkJoinTask.invoke()\n\n\n Arrange exec and obtain Future\n submit(ForkJoinTask)\n ForkJoinTask.fork() (ForkJoinTasks are Futures)\n\n\nThe parameters used to construct the common pool may be controlled by\n setting the following system properties:\n \njava.util.concurrent.ForkJoinPool.common.parallelism\n - the parallelism level, a non-negative integer\n java.util.concurrent.ForkJoinPool.common.threadFactory\n - the class name of a ForkJoinPool.ForkJoinWorkerThreadFactory.\n The system class loader\n is used to load this class.\n java.util.concurrent.ForkJoinPool.common.exceptionHandler\n - the class name of a Thread.UncaughtExceptionHandler.\n The system class loader\n is used to load this class.\n java.util.concurrent.ForkJoinPool.common.maximumSpares\n - the maximum number of allowed extra threads to maintain target\n parallelism (default 256).\n \n If no thread factory is supplied via a system property, then the\n common pool uses a factory that uses the system class loader as the\n thread context class loader.\n In addition, if a SecurityManager is present, then\n the common pool uses a factory supplying threads that have no\n Permissions enabled.\n\n Upon any error in establishing these settings, default parameters\n are used. It is possible to disable or limit the use of threads in\n the common pool by setting the parallelism property to zero, and/or\n using a factory that may return null. However doing so may\n cause unjoined tasks to never be executed.\n\n Implementation notes: This implementation restricts the\n maximum number of running threads to 32767. Attempts to create\n pools with greater than the maximum number result in\n IllegalArgumentException.\n\n This implementation rejects submitted tasks (that is, by throwing\n RejectedExecutionException) only when the pool is shut down\n or internal resources have been exhausted.", "codes": ["public class ForkJoinPool\nextends AbstractExecutorService"], "fields": [{"field_name": "defaultForkJoinWorkerThreadFactory", "field_sig": "public static final\u00a0ForkJoinPool.ForkJoinWorkerThreadFactory defaultForkJoinWorkerThreadFactory", "description": "Creates a new ForkJoinWorkerThread. This factory is used unless\n overridden in ForkJoinPool constructors."}], "methods": [{"method_name": "commonPool", "method_sig": "public static ForkJoinPool commonPool()", "description": "Returns the common pool instance. This pool is statically\n constructed; its run state is unaffected by attempts to shutdown() or shutdownNow(). However this pool and any\n ongoing processing are automatically terminated upon program\n System.exit(int).  Any program that relies on asynchronous\n task processing to complete before program termination should\n invoke commonPool().awaitQuiescence,\n before exit."}, {"method_name": "invoke", "method_sig": "public <T> T invoke (ForkJoinTask<T> task)", "description": "Performs the given task, returning its result upon completion.\n If the computation encounters an unchecked Exception or Error,\n it is rethrown as the outcome of this invocation.  Rethrown\n exceptions behave in the same way as regular exceptions, but,\n when possible, contain stack traces (as displayed for example\n using ex.printStackTrace()) of both the current thread\n as well as the thread actually encountering the exception;\n minimally only the latter."}, {"method_name": "execute", "method_sig": "public void execute (ForkJoinTask<?> task)", "description": "Arranges for (asynchronous) execution of the given task."}, {"method_name": "execute", "method_sig": "public void execute (Runnable task)", "description": "Description copied from interface:\u00a0Executor"}, {"method_name": "submit", "method_sig": "public <T> ForkJoinTask<T> submit (ForkJoinTask<T> task)", "description": "Submits a ForkJoinTask for execution."}, {"method_name": "submit", "method_sig": "public <T> ForkJoinTask<T> submit (Callable<T> task)", "description": "Description copied from interface:\u00a0ExecutorService"}, {"method_name": "submit", "method_sig": "public <T> ForkJoinTask<T> submit (Runnable task,\n                                  T result)", "description": "Description copied from interface:\u00a0ExecutorService"}, {"method_name": "submit", "method_sig": "public ForkJoinTask<?> submit (Runnable task)", "description": "Description copied from interface:\u00a0ExecutorService"}, {"method_name": "invokeAll", "method_sig": "public <T> List<Future<T>> invokeAll (Collection<? extends Callable<T>> tasks)", "description": "Description copied from interface:\u00a0ExecutorService"}, {"method_name": "getFactory", "method_sig": "public ForkJoinPool.ForkJoinWorkerThreadFactory getFactory()", "description": "Returns the factory used for constructing new workers."}, {"method_name": "getUncaughtExceptionHandler", "method_sig": "public Thread.UncaughtExceptionHandler getUncaughtExceptionHandler()", "description": "Returns the handler for internal worker threads that terminate\n due to unrecoverable errors encountered while executing tasks."}, {"method_name": "getParallelism", "method_sig": "public int getParallelism()", "description": "Returns the targeted parallelism level of this pool."}, {"method_name": "getCommonPoolParallelism", "method_sig": "public static int getCommonPoolParallelism()", "description": "Returns the targeted parallelism level of the common pool."}, {"method_name": "getPoolSize", "method_sig": "public int getPoolSize()", "description": "Returns the number of worker threads that have started but not\n yet terminated.  The result returned by this method may differ\n from getParallelism() when threads are created to\n maintain parallelism when others are cooperatively blocked."}, {"method_name": "getAsyncMode", "method_sig": "public boolean getAsyncMode()", "description": "Returns true if this pool uses local first-in-first-out\n scheduling mode for forked tasks that are never joined."}, {"method_name": "getRunningThreadCount", "method_sig": "public int getRunningThreadCount()", "description": "Returns an estimate of the number of worker threads that are\n not blocked waiting to join tasks or for other managed\n synchronization. This method may overestimate the\n number of running threads."}, {"method_name": "getActiveThreadCount", "method_sig": "public int getActiveThreadCount()", "description": "Returns an estimate of the number of threads that are currently\n stealing or executing tasks. This method may overestimate the\n number of active threads."}, {"method_name": "isQuiescent", "method_sig": "public boolean isQuiescent()", "description": "Returns true if all worker threads are currently idle.\n An idle worker is one that cannot obtain a task to execute\n because none are available to steal from other threads, and\n there are no pending submissions to the pool. This method is\n conservative; it might not return true immediately upon\n idleness of all threads, but will eventually become true if\n threads remain inactive."}, {"method_name": "getStealCount", "method_sig": "public long getStealCount()", "description": "Returns an estimate of the total number of tasks stolen from\n one thread's work queue by another. The reported value\n underestimates the actual total number of steals when the pool\n is not quiescent. This value may be useful for monitoring and\n tuning fork/join programs: in general, steal counts should be\n high enough to keep threads busy, but low enough to avoid\n overhead and contention across threads."}, {"method_name": "getQueuedTaskCount", "method_sig": "public long getQueuedTaskCount()", "description": "Returns an estimate of the total number of tasks currently held\n in queues by worker threads (but not including tasks submitted\n to the pool that have not begun executing). This value is only\n an approximation, obtained by iterating across all threads in\n the pool. This method may be useful for tuning task\n granularities."}, {"method_name": "getQueuedSubmissionCount", "method_sig": "public int getQueuedSubmissionCount()", "description": "Returns an estimate of the number of tasks submitted to this\n pool that have not yet begun executing.  This method may take\n time proportional to the number of submissions."}, {"method_name": "hasQueuedSubmissions", "method_sig": "public boolean hasQueuedSubmissions()", "description": "Returns true if there are any tasks submitted to this\n pool that have not yet begun executing."}, {"method_name": "pollSubmission", "method_sig": "protected ForkJoinTask<?> pollSubmission()", "description": "Removes and returns the next unexecuted submission if one is\n available.  This method may be useful in extensions to this\n class that re-assign work in systems with multiple pools."}, {"method_name": "drainTasksTo", "method_sig": "protected int drainTasksTo (Collection<? super ForkJoinTask<?>> c)", "description": "Removes all available unexecuted submitted and forked tasks\n from scheduling queues and adds them to the given collection,\n without altering their execution status. These may include\n artificially generated or wrapped tasks. This method is\n designed to be invoked only when the pool is known to be\n quiescent. Invocations at other times may not remove all\n tasks. A failure encountered while attempting to add elements\n to collection c may result in elements being in\n neither, either or both collections when the associated\n exception is thrown.  The behavior of this operation is\n undefined if the specified collection is modified while the\n operation is in progress."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a string identifying this pool, as well as its state,\n including indications of run state, parallelism level, and\n worker and task counts."}, {"method_name": "shutdown", "method_sig": "public void shutdown()", "description": "Possibly initiates an orderly shutdown in which previously\n submitted tasks are executed, but no new tasks will be\n accepted. Invocation has no effect on execution state if this\n is the commonPool(), and no additional effect if\n already shut down.  Tasks that are in the process of being\n submitted concurrently during the course of this method may or\n may not be rejected."}, {"method_name": "shutdownNow", "method_sig": "public List<Runnable> shutdownNow()", "description": "Possibly attempts to cancel and/or stop all tasks, and reject\n all subsequently submitted tasks.  Invocation has no effect on\n execution state if this is the commonPool(), and no\n additional effect if already shut down. Otherwise, tasks that\n are in the process of being submitted or executed concurrently\n during the course of this method may or may not be\n rejected. This method cancels both existing and unexecuted\n tasks, in order to permit termination in the presence of task\n dependencies. So the method always returns an empty list\n (unlike the case for some other Executors)."}, {"method_name": "isTerminated", "method_sig": "public boolean isTerminated()", "description": "Returns true if all tasks have completed following shut down."}, {"method_name": "isTerminating", "method_sig": "public boolean isTerminating()", "description": "Returns true if the process of termination has\n commenced but not yet completed.  This method may be useful for\n debugging. A return of true reported a sufficient\n period after shutdown may indicate that submitted tasks have\n ignored or suppressed interruption, or are waiting for I/O,\n causing this executor not to properly terminate. (See the\n advisory notes for class ForkJoinTask stating that\n tasks should not normally entail blocking operations.  But if\n they do, they must abort them on interrupt.)"}, {"method_name": "isShutdown", "method_sig": "public boolean isShutdown()", "description": "Returns true if this pool has been shut down."}, {"method_name": "awaitTermination", "method_sig": "public boolean awaitTermination (long timeout,\n                                TimeUnit unit)\n                         throws InterruptedException", "description": "Blocks until all tasks have completed execution after a\n shutdown request, or the timeout occurs, or the current thread\n is interrupted, whichever happens first. Because the commonPool() never terminates until program shutdown, when\n applied to the common pool, this method is equivalent to awaitQuiescence(long, TimeUnit) but always returns false."}, {"method_name": "awaitQuiescence", "method_sig": "public boolean awaitQuiescence (long timeout,\n                               TimeUnit unit)", "description": "If called by a ForkJoinTask operating in this pool, equivalent\n in effect to ForkJoinTask.helpQuiesce(). Otherwise,\n waits and/or attempts to assist performing tasks until this\n pool isQuiescent() or the indicated timeout elapses."}, {"method_name": "managedBlock", "method_sig": "public static void managedBlock (ForkJoinPool.ManagedBlocker blocker)\n                         throws InterruptedException", "description": "Runs the given possibly blocking task.  When running in a ForkJoinPool, this\n method possibly arranges for a spare thread to be activated if\n necessary to ensure sufficient parallelism while the current\n thread is blocked in blocker.block().\n\n This method repeatedly calls blocker.isReleasable() and\n blocker.block() until either method returns true.\n Every call to blocker.block() is preceded by a call to\n blocker.isReleasable() that returned false.\n\n If not running in a ForkJoinPool, this method is\n behaviorally equivalent to\n  \n while (!blocker.isReleasable())\n   if (blocker.block())\n     break;\n\n If running in a ForkJoinPool, the pool may first be expanded to\n ensure sufficient parallelism available during the call to\n blocker.block()."}]}