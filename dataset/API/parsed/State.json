{"name": "Class State<T extends JComponent>", "module": "java.desktop", "package": "javax.swing.plaf.nimbus", "text": "Represents a built in, or custom, state in Nimbus.\nSynth provides several built in states, which are:\n \nEnabled\nMouse Over\nPressed\nDisabled\nFocused\nSelected\nDefault\n\nHowever, there are many more states that could be described in a LookAndFeel, and it\n would be nice to style components differently based on these different states.\n For example, a progress bar could be \"indeterminate\". It would be very convenient\n to allow this to be defined as a \"state\".\nThis class, State, is intended to be used for such situations.\n Simply implement the abstract #isInState method. It returns true if the given\n JComponent is \"in this state\", false otherwise. This method will be called\n many times in performance sensitive loops. It must execute\n very quickly.\nFor example, the following might be an implementation of a custom\n \"Indeterminate\" state for JProgressBars:\n\n     public final class IndeterminateState extends State<JProgressBar> {\n         public IndeterminateState() {\n             super(\"Indeterminate\");\n         }\n\n         @Override\n         protected boolean isInState(JProgressBar c) {\n             return c.isIndeterminate();\n         }\n     }\n ", "codes": ["public abstract class State<T extends JComponent>\nextends Object"], "fields": [], "methods": [{"method_name": "isInState", "method_sig": "protected abstract boolean isInState (T c)", "description": "Gets whether the specified JComponent is in the custom state represented\n by this class. This is an extremely performance sensitive loop.\n Please take proper precautions to ensure that it executes quickly.\nNimbus uses this method to help determine what state a JComponent is\n in. For example, a custom State could exist for JProgressBar such that\n it would return true when the progress bar is indeterminate.\n Such an implementation of this method would simply be:\n return c.isIndeterminate();"}]}