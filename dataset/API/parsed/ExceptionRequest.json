{"name": "Interface ExceptionRequest", "module": "jdk.jdi", "package": "com.sun.jdi.request", "text": "Request for notification when an exception occurs in the target VM.\n When an enabled ExceptionRequest is satisfied, an\n event set containing an\n ExceptionEvent will be placed\n on the EventQueue.\n The collection of existing ExceptionRequests is\n managed by the EventRequestManager", "codes": ["public interface ExceptionRequest\nextends EventRequest"], "fields": [], "methods": [{"method_name": "exception", "method_sig": "ReferenceType exception()", "description": "Returns exception type for which exception events are requested."}, {"method_name": "notifyCaught", "method_sig": "boolean notifyCaught()", "description": "Returns whether caught exceptions of the requested type\n will generate events when they are thrown.\n \n Note that at the time an exception is thrown, it is not always\n possible to determine whether it is truly caught. See\n ExceptionEvent.catchLocation() for\n details."}, {"method_name": "notifyUncaught", "method_sig": "boolean notifyUncaught()", "description": "Returns whether uncaught exceptions of the requested type\n will generate events when they are thrown.\n \n Note that at the time an exception is thrown, it is not always\n possible to determine whether it is truly uncaught. See\n ExceptionEvent.catchLocation() for\n details."}, {"method_name": "addThreadFilter", "method_sig": "void addThreadFilter (ThreadReference thread)", "description": "Restricts the events generated by this request to those in\n the given thread."}, {"method_name": "addClassFilter", "method_sig": "void addClassFilter (ReferenceType refType)", "description": "Restricts the events generated by this request to those whose\n location is in the given reference type or any of its subtypes.\n An event will be generated for any location in a reference type\n that can be safely cast to the given reference type."}, {"method_name": "addClassFilter", "method_sig": "void addClassFilter (String classPattern)", "description": "Restricts the events generated by this request to those\n whose location is in a class whose name matches a restricted\n regular expression. Regular expressions are limited\n to exact matches and patterns that begin with '*' or end with '*';\n for example, \"*.Foo\" or \"java.*\"."}, {"method_name": "addClassExclusionFilter", "method_sig": "void addClassExclusionFilter (String classPattern)", "description": "Restricts the events generated by this request to those\n whose location is in a class whose name does not match a\n restricted regular expression. Regular expressions are limited\n to exact matches and patterns that begin with '*' or end with '*';\n for example, \"*.Foo\" or \"java.*\"."}, {"method_name": "addInstanceFilter", "method_sig": "void addInstanceFilter (ObjectReference instance)", "description": "Restricts the events generated by this request to those in\n which the currently executing instance (\"this\") is the object\n specified.\n \n Not all targets support this operation.\n Use VirtualMachine.canUseInstanceFilters()\n to determine if the operation is supported."}]}