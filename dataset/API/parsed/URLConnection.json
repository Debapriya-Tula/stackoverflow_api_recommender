{"name": "Class URLConnection", "module": "java.base", "package": "java.net", "text": "The abstract class URLConnection is the superclass\n of all classes that represent a communications link between the\n application and a URL. Instances of this class can be used both to\n read from and to write to the resource referenced by the URL.\n\n \n In general, creating a connection to a URL is a multistep process:\n \nThe connection object is created by invoking the\n     openConnection method on a URL.\n The setup parameters and general request properties are manipulated.\n The actual connection to the remote object is made, using the\n    connect method.\n The remote object becomes available. The header fields and the contents\n     of the remote object can be accessed.\n \n\n The setup parameters are modified using the following methods:\n \nsetAllowUserInteraction\nsetDoInput\nsetDoOutput\nsetIfModifiedSince\nsetUseCaches\n\n\n and the general request properties are modified using the method:\n \nsetRequestProperty\n\n\n Default values for the AllowUserInteraction and\n UseCaches parameters can be set using the methods\n setDefaultAllowUserInteraction and\n setDefaultUseCaches.\n \n Each of the above set methods has a corresponding\n get method to retrieve the value of the parameter or\n general request property. The specific parameters and general\n request properties that are applicable are protocol specific.\n \n The following methods are used to access the header fields and\n the contents after the connection is made to the remote object:\n \ngetContent\ngetHeaderField\ngetInputStream\ngetOutputStream\n\n\n Certain header fields are accessed frequently. The methods:\n \ngetContentEncoding\ngetContentLength\ngetContentType\ngetDate\ngetExpiration\ngetLastModified\n\n\n provide convenient access to these fields. The\n getContentType method is used by the\n getContent method to determine the type of the remote\n object; subclasses may find it convenient to override the\n getContentType method.\n \n In the common case, all of the pre-connection parameters and\n general request properties can be ignored: the pre-connection\n parameters and request properties default to sensible values. For\n most clients of this interface, there are only two interesting\n methods: getInputStream and getContent,\n which are mirrored in the URL class by convenience methods.\n \n More information on the request properties and header fields of\n an http connection can be found at:\n \n http://www.ietf.org/rfc/rfc2616.txt\n \n\n Invoking the close() methods on the InputStream or OutputStream of an\n URLConnection after a request may free network resources associated with this\n instance, unless particular protocol specifications specify different behaviours\n for it.", "codes": ["public abstract class URLConnection\nextends Object"], "fields": [{"field_name": "url", "field_sig": "protected\u00a0URL url", "description": "The URL represents the remote object on the World Wide Web to\n which this connection is opened.\n \n The value of this field can be accessed by the\n getURL method.\n \n The default value of this variable is the value of the URL\n argument in the URLConnection constructor."}, {"field_name": "doInput", "field_sig": "protected\u00a0boolean doInput", "description": "This variable is set by the setDoInput method. Its\n value is returned by the getDoInput method.\n \n A URL connection can be used for input and/or output. Setting the\n doInput flag to true indicates that\n the application intends to read data from the URL connection.\n \n The default value of this field is true."}, {"field_name": "doOutput", "field_sig": "protected\u00a0boolean doOutput", "description": "This variable is set by the setDoOutput method. Its\n value is returned by the getDoOutput method.\n \n A URL connection can be used for input and/or output. Setting the\n doOutput flag to true indicates\n that the application intends to write data to the URL connection.\n \n The default value of this field is false."}, {"field_name": "allowUserInteraction", "field_sig": "protected\u00a0boolean allowUserInteraction", "description": "If true, this URL is being examined in\n a context in which it makes sense to allow user interactions such\n as popping up an authentication dialog. If false,\n then no user interaction is allowed.\n \n The value of this field can be set by the\n setAllowUserInteraction method.\n Its value is returned by the\n getAllowUserInteraction method.\n Its default value is the value of the argument in the last invocation\n of the setDefaultAllowUserInteraction method."}, {"field_name": "useCaches", "field_sig": "protected\u00a0boolean useCaches", "description": "If true, the protocol is allowed to use caching\n whenever it can. If false, the protocol must always\n try to get a fresh copy of the object.\n \n This field is set by the setUseCaches method. Its\n value is returned by the getUseCaches method.\n \n Its default value is the value given in the last invocation of the\n setDefaultUseCaches method.\n \n The default setting may be overridden per protocol with\n setDefaultUseCaches(String,boolean)."}, {"field_name": "ifModifiedSince", "field_sig": "protected\u00a0long ifModifiedSince", "description": "Some protocols support skipping the fetching of the object unless\n the object has been modified more recently than a certain time.\n \n A nonzero value gives a time as the number of milliseconds since\n January 1, 1970, GMT. The object is fetched only if it has been\n modified more recently than that time.\n \n This variable is set by the setIfModifiedSince\n method. Its value is returned by the\n getIfModifiedSince method.\n \n The default value of this field is 0, indicating\n that the fetching must always occur."}, {"field_name": "connected", "field_sig": "protected\u00a0boolean connected", "description": "If false, this connection object has not created a\n communications link to the specified URL. If true,\n the communications link has been established."}], "methods": [{"method_name": "getFileNameMap", "method_sig": "public static FileNameMap getFileNameMap()", "description": "Loads filename map (a mimetable) from a data file. It will\n first try to load the user-specific table, defined\n by \"content.types.user.table\" property. If that fails,\n it tries to load the default built-in table."}, {"method_name": "setFileNameMap", "method_sig": "public static void setFileNameMap (FileNameMap map)", "description": "Sets the FileNameMap.\n \n If there is a security manager, this method first calls\n the security manager's checkSetFactory method\n to ensure the operation is allowed.\n This could result in a SecurityException."}, {"method_name": "connect", "method_sig": "public abstract void connect()\n                      throws IOException", "description": "Opens a communications link to the resource referenced by this\n URL, if such a connection has not already been established.\n \n If the connect method is called when the connection\n has already been opened (indicated by the connected\n field having the value true), the call is ignored.\n \n URLConnection objects go through two phases: first they are\n created, then they are connected.  After being created, and\n before being connected, various options can be specified\n (e.g., doInput and UseCaches).  After connecting, it is an\n error to try to set them.  Operations that depend on being\n connected, like getContentLength, will implicitly perform the\n connection, if necessary."}, {"method_name": "setConnectTimeout", "method_sig": "public void setConnectTimeout (int timeout)", "description": "Sets a specified timeout value, in milliseconds, to be used\n when opening a communications link to the resource referenced\n by this URLConnection.  If the timeout expires before the\n connection can be established, a\n java.net.SocketTimeoutException is raised. A timeout of zero is\n interpreted as an infinite timeout.\n\n  Some non-standard implementation of this method may ignore\n the specified timeout. To see the connect timeout set, please\n call getConnectTimeout()."}, {"method_name": "getConnectTimeout", "method_sig": "public int getConnectTimeout()", "description": "Returns setting for connect timeout.\n \n 0 return implies that the option is disabled\n (i.e., timeout of infinity)."}, {"method_name": "setReadTimeout", "method_sig": "public void setReadTimeout (int timeout)", "description": "Sets the read timeout to a specified timeout, in\n milliseconds. A non-zero value specifies the timeout when\n reading from Input stream when a connection is established to a\n resource. If the timeout expires before there is data available\n for read, a java.net.SocketTimeoutException is raised. A\n timeout of zero is interpreted as an infinite timeout.\n\n Some non-standard implementation of this method ignores the\n specified timeout. To see the read timeout set, please call\n getReadTimeout()."}, {"method_name": "getReadTimeout", "method_sig": "public int getReadTimeout()", "description": "Returns setting for read timeout. 0 return implies that the\n option is disabled (i.e., timeout of infinity)."}, {"method_name": "getURL", "method_sig": "public URL getURL()", "description": "Returns the value of this URLConnection's URL\n field."}, {"method_name": "getContentLength", "method_sig": "public int getContentLength()", "description": "Returns the value of the content-length header field.\n \nNote: getContentLengthLong()\n should be preferred over this method, since it returns a long\n instead and is therefore more portable."}, {"method_name": "getContentLengthLong", "method_sig": "public long getContentLengthLong()", "description": "Returns the value of the content-length header field as a\n long."}, {"method_name": "getContentType", "method_sig": "public String getContentType()", "description": "Returns the value of the content-type header field."}, {"method_name": "getContentEncoding", "method_sig": "public String getContentEncoding()", "description": "Returns the value of the content-encoding header field."}, {"method_name": "getExpiration", "method_sig": "public long getExpiration()", "description": "Returns the value of the expires header field."}, {"method_name": "getDate", "method_sig": "public long getDate()", "description": "Returns the value of the date header field."}, {"method_name": "getLastModified", "method_sig": "public long getLastModified()", "description": "Returns the value of the last-modified header field.\n The result is the number of milliseconds since January 1, 1970 GMT."}, {"method_name": "getHeaderField", "method_sig": "public String getHeaderField (String name)", "description": "Returns the value of the named header field.\n \n If called on a connection that sets the same header multiple times\n with possibly different values, only the last value is returned."}, {"method_name": "getHeaderFields", "method_sig": "public Map<String, List<String>> getHeaderFields()", "description": "Returns an unmodifiable Map of the header fields.\n The Map keys are Strings that represent the\n response-header field names. Each Map value is an\n unmodifiable List of Strings that represents\n the corresponding field values."}, {"method_name": "getHeaderFieldInt", "method_sig": "public int getHeaderFieldInt (String name,\n                             int Default)", "description": "Returns the value of the named field parsed as a number.\n \n This form of getHeaderField exists because some\n connection types (e.g., http-ng) have pre-parsed\n headers. Classes for that connection type can override this method\n and short-circuit the parsing."}, {"method_name": "getHeaderFieldLong", "method_sig": "public long getHeaderFieldLong (String name,\n                               long Default)", "description": "Returns the value of the named field parsed as a number.\n \n This form of getHeaderField exists because some\n connection types (e.g., http-ng) have pre-parsed\n headers. Classes for that connection type can override this method\n and short-circuit the parsing."}, {"method_name": "getHeaderFieldDate", "method_sig": "public long getHeaderFieldDate (String name,\n                               long Default)", "description": "Returns the value of the named field parsed as date.\n The result is the number of milliseconds since January 1, 1970 GMT\n represented by the named field.\n \n This form of getHeaderField exists because some\n connection types (e.g., http-ng) have pre-parsed\n headers. Classes for that connection type can override this method\n and short-circuit the parsing."}, {"method_name": "getHeaderFieldKey", "method_sig": "public String getHeaderFieldKey (int n)", "description": "Returns the key for the nth header field.\n It returns null if there are fewer than n+1 fields."}, {"method_name": "getHeaderField", "method_sig": "public String getHeaderField (int n)", "description": "Returns the value for the nth header field.\n It returns null if there are fewer than\n n+1fields.\n \n This method can be used in conjunction with the\n getHeaderFieldKey method to iterate through all\n the headers in the message."}, {"method_name": "getContent", "method_sig": "public Object getContent()\n                  throws IOException", "description": "Retrieves the contents of this URL connection.\n \n This method first determines the content type of the object by\n calling the getContentType method. If this is\n the first time that the application has seen that specific content\n type, a content handler for that content type is created.\n  This is done as follows:\n \nIf the application has set up a content handler factory instance\n     using the setContentHandlerFactory method, the\n     createContentHandler method of that instance is called\n     with the content type as an argument; the result is a content\n     handler for that content type.\n If no ContentHandlerFactory has yet been set up,\n     or if the factory's createContentHandler method\n     returns null, then the ServiceLoader mechanism is used to locate ContentHandlerFactory\n     implementations using the system class\n     loader. The order that factories are located is implementation\n     specific, and an implementation is free to cache the located\n     factories. A ServiceConfigurationError, Error or RuntimeException\n     thrown from the createContentHandler, if encountered, will\n     be propagated to the calling thread. The \n     createContentHandler method of each factory, if instantiated, is\n     invoked, with the content type, until a factory returns non-null,\n     or all factories have been exhausted.\n Failing that, this method tries to load a content handler\n     class as defined by ContentHandler.\n     If the class does not exist, or is not a subclass of \n     ContentHandler, then an UnknownServiceException is thrown.\n "}, {"method_name": "getContent", "method_sig": "public Object getContent (Class<?>[] classes)\n                  throws IOException", "description": "Retrieves the contents of this URL connection."}, {"method_name": "getPermission", "method_sig": "public Permission getPermission()\n                         throws IOException", "description": "Returns a permission object representing the permission\n necessary to make the connection represented by this\n object. This method returns null if no permission is\n required to make the connection. By default, this method\n returns java.security.AllPermission. Subclasses\n should override this method and return the permission\n that best represents the permission required to make\n a connection to the URL. For example, a URLConnection\n representing a file: URL would return a\n java.io.FilePermission object.\n\n The permission returned may dependent upon the state of the\n connection. For example, the permission before connecting may be\n different from that after connecting. For example, an HTTP\n sever, say foo.com, may redirect the connection to a different\n host, say bar.com. Before connecting the permission returned by\n the connection will represent the permission needed to connect\n to foo.com, while the permission returned after connecting will\n be to bar.com.\n\n Permissions are generally used for two purposes: to protect\n caches of objects obtained through URLConnections, and to check\n the right of a recipient to learn about a particular URL. In\n the first case, the permission should be obtained\n after the object has been obtained. For example, in an\n HTTP connection, this will represent the permission to connect\n to the host from which the data was ultimately fetched. In the\n second case, the permission should be obtained and tested\n before connecting."}, {"method_name": "getInputStream", "method_sig": "public InputStream getInputStream()\n                           throws IOException", "description": "Returns an input stream that reads from this open connection.\n\n A SocketTimeoutException can be thrown when reading from the\n returned input stream if the read timeout expires before data\n is available for read."}, {"method_name": "getOutputStream", "method_sig": "public OutputStream getOutputStream()\n                             throws IOException", "description": "Returns an output stream that writes to this connection."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a String representation of this URL connection."}, {"method_name": "setDoInput", "method_sig": "public void setDoInput (boolean doinput)", "description": "Sets the value of the doInput field for this\n URLConnection to the specified value.\n \n A URL connection can be used for input and/or output.  Set the doInput\n flag to true if you intend to use the URL connection for input,\n false if not.  The default is true."}, {"method_name": "getDoInput", "method_sig": "public boolean getDoInput()", "description": "Returns the value of this URLConnection's\n doInput flag."}, {"method_name": "setDoOutput", "method_sig": "public void setDoOutput (boolean dooutput)", "description": "Sets the value of the doOutput field for this\n URLConnection to the specified value.\n \n A URL connection can be used for input and/or output.  Set the doOutput\n flag to true if you intend to use the URL connection for output,\n false if not.  The default is false."}, {"method_name": "getDoOutput", "method_sig": "public boolean getDoOutput()", "description": "Returns the value of this URLConnection's\n doOutput flag."}, {"method_name": "setAllowUserInteraction", "method_sig": "public void setAllowUserInteraction (boolean allowuserinteraction)", "description": "Set the value of the allowUserInteraction field of\n this URLConnection."}, {"method_name": "getAllowUserInteraction", "method_sig": "public boolean getAllowUserInteraction()", "description": "Returns the value of the allowUserInteraction field for\n this object."}, {"method_name": "setDefaultAllowUserInteraction", "method_sig": "public static void setDefaultAllowUserInteraction (boolean defaultallowuserinteraction)", "description": "Sets the default value of the\n allowUserInteraction field for all future\n URLConnection objects to the specified value."}, {"method_name": "getDefaultAllowUserInteraction", "method_sig": "public static boolean getDefaultAllowUserInteraction()", "description": "Returns the default value of the allowUserInteraction\n field.\n \n This default is \"sticky\", being a part of the static state of all\n URLConnections.  This flag applies to the next, and all following\n URLConnections that are created."}, {"method_name": "setUseCaches", "method_sig": "public void setUseCaches (boolean usecaches)", "description": "Sets the value of the useCaches field of this\n URLConnection to the specified value.\n \n Some protocols do caching of documents.  Occasionally, it is important\n to be able to \"tunnel through\" and ignore the caches (e.g., the\n \"reload\" button in a browser).  If the UseCaches flag on a connection\n is true, the connection is allowed to use whatever caches it can.\n  If false, caches are to be ignored.\n  The default value comes from defaultUseCaches, which defaults to\n true. A default value can also be set per-protocol using\n setDefaultUseCaches(String,boolean)."}, {"method_name": "getUseCaches", "method_sig": "public boolean getUseCaches()", "description": "Returns the value of this URLConnection's\n useCaches field."}, {"method_name": "setIfModifiedSince", "method_sig": "public void setIfModifiedSince (long ifmodifiedsince)", "description": "Sets the value of the ifModifiedSince field of\n this URLConnection to the specified value."}, {"method_name": "getIfModifiedSince", "method_sig": "public long getIfModifiedSince()", "description": "Returns the value of this object's ifModifiedSince field."}, {"method_name": "getDefaultUseCaches", "method_sig": "public boolean getDefaultUseCaches()", "description": "Returns the default value of a URLConnection's\n useCaches flag.\n \n This default is \"sticky\", being a part of the static state of all\n URLConnections.  This flag applies to the next, and all following\n URLConnections that are created. This default value can be over-ridden\n per protocol using setDefaultUseCaches(String,boolean)"}, {"method_name": "setDefaultUseCaches", "method_sig": "public void setDefaultUseCaches (boolean defaultusecaches)", "description": "Sets the default value of the useCaches field to the\n specified value. This default value can be over-ridden\n per protocol using setDefaultUseCaches(String,boolean)"}, {"method_name": "setDefaultUseCaches", "method_sig": "public static void setDefaultUseCaches (String protocol,\n                                       boolean defaultVal)", "description": "Sets the default value of the useCaches field for the named\n protocol to the given value. This value overrides any default setting\n set by setDefaultUseCaches(boolean) for the given protocol.\n Successive calls to this method change the setting and affect the\n default value for all future connections of that protocol. The protocol\n name is case insensitive."}, {"method_name": "getDefaultUseCaches", "method_sig": "public static boolean getDefaultUseCaches (String protocol)", "description": "Returns the default value of the useCaches flag for the given protocol. If\n setDefaultUseCaches(String,boolean) was called for the given protocol,\n then that value is returned. Otherwise, if setDefaultUseCaches(boolean)\n was called, then that value is returned. If neither method was called,\n the return value is true. The protocol name is case insensitive."}, {"method_name": "setRequestProperty", "method_sig": "public void setRequestProperty (String key,\n                               String value)", "description": "Sets the general request property. If a property with the key already\n exists, overwrite its value with the new value.\n\n  NOTE: HTTP requires all request properties which can\n legally have multiple instances with the same key\n to use a comma-separated list syntax which enables multiple\n properties to be appended into a single property."}, {"method_name": "addRequestProperty", "method_sig": "public void addRequestProperty (String key,\n                               String value)", "description": "Adds a general request property specified by a\n key-value pair.  This method will not overwrite\n existing values associated with the same key."}, {"method_name": "getRequestProperty", "method_sig": "public String getRequestProperty (String key)", "description": "Returns the value of the named general request property for this\n connection."}, {"method_name": "getRequestProperties", "method_sig": "public Map<String, List<String>> getRequestProperties()", "description": "Returns an unmodifiable Map of general request\n properties for this connection. The Map keys\n are Strings that represent the request-header\n field names. Each Map value is a unmodifiable List\n of Strings that represents the corresponding\n field values."}, {"method_name": "setDefaultRequestProperty", "method_sig": "@Deprecated\npublic static void setDefaultRequestProperty (String key,\n                                             String value)", "description": "Sets the default value of a general request property. When a\n URLConnection is created, it is initialized with\n these properties."}, {"method_name": "getDefaultRequestProperty", "method_sig": "@Deprecated\npublic static String getDefaultRequestProperty (String key)", "description": "Returns the value of the default request property. Default request\n properties are set for every connection."}, {"method_name": "setContentHandlerFactory", "method_sig": "public static void setContentHandlerFactory (ContentHandlerFactory fac)", "description": "Sets the ContentHandlerFactory of an\n application. It can be called at most once by an application.\n \n The ContentHandlerFactory instance is used to\n construct a content handler from a content type.\n \n If there is a security manager, this method first calls\n the security manager's checkSetFactory method\n to ensure the operation is allowed.\n This could result in a SecurityException."}, {"method_name": "guessContentTypeFromName", "method_sig": "public static String guessContentTypeFromName (String fname)", "description": "Tries to determine the content type of an object, based\n on the specified \"file\" component of a URL.\n This is a convenience method that can be used by\n subclasses that override the getContentType method."}, {"method_name": "guessContentTypeFromStream", "method_sig": "public static String guessContentTypeFromStream (InputStream is)\n                                         throws IOException", "description": "Tries to determine the type of an input stream based on the\n characters at the beginning of the input stream. This method can\n be used by subclasses that override the\n getContentType method.\n \n Ideally, this routine would not be needed. But many\n http servers return the incorrect content type; in\n addition, there are many nonstandard extensions. Direct inspection\n of the bytes to determine the content type is often more accurate\n than believing the content type claimed by the http server."}]}