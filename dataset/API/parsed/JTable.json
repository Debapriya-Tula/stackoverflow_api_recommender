{"name": "Class JTable", "module": "java.desktop", "package": "javax.swing", "text": "The JTable is used to display and edit regular two-dimensional tables\n of cells.\n See How to Use Tables\n in The Java Tutorial\n for task-oriented documentation and examples of using JTable.\n\n \n The JTable has many\n facilities that make it possible to customize its rendering and editing\n but provides defaults for these features so that simple tables can be\n set up easily.  For example, to set up a table with 10 rows and 10\n columns of numbers:\n\n \n      TableModel dataModel = new AbstractTableModel() {\n          public int getColumnCount() { return 10; }\n          public int getRowCount() { return 10;}\n          public Object getValueAt(int row, int col) { return Integer.valueOf(row*col); }\n      };\n      JTable table = new JTable(dataModel);\n      JScrollPane scrollpane = new JScrollPane(table);\n \n\nJTables are typically placed inside of a JScrollPane.  By\n default, a JTable will adjust its width such that\n a horizontal scrollbar is unnecessary.  To allow for a horizontal scrollbar,\n invoke setAutoResizeMode(int) with AUTO_RESIZE_OFF.\n Note that if you wish to use a JTable in a standalone\n view (outside of a JScrollPane) and want the header\n displayed, you can get it using getTableHeader() and\n display it separately.\n \n To enable sorting and filtering of rows, use a\n RowSorter.\n You can set up a row sorter in either of two ways:\n \nDirectly set the RowSorter. For example:\n        table.setRowSorter(new TableRowSorter(model)).\n   Set the autoCreateRowSorter\n       property to true, so that the JTable\n       creates a RowSorter for\n       you. For example: setAutoCreateRowSorter(true).\n \n\n When designing applications that use the JTable it is worth paying\n close attention to the data structures that will represent the table's data.\n The DefaultTableModel is a model implementation that\n uses a Vector of Vectors of Objects to\n store the cell values. As well as copying the data from an\n application into the DefaultTableModel,\n it is also possible to wrap the data in the methods of the\n TableModel interface so that the data can be passed to the\n JTable directly, as in the example above. This often results\n in more efficient applications because the model is free to choose the\n internal representation that best suits the data.\n A good rule of thumb for deciding whether to use the AbstractTableModel\n or the DefaultTableModel is to use the AbstractTableModel\n as the base class for creating subclasses and the DefaultTableModel\n when subclassing is not required.\n \n The \"TableExample\" directory in the demo area of the source distribution\n gives a number of complete examples of JTable usage,\n covering how the JTable can be used to provide an\n editable view of data taken from a database and how to modify\n the columns in the display to use specialized renderers and editors.\n \n The JTable uses integers exclusively to refer to both the rows and the columns\n of the model that it displays. The JTable simply takes a tabular range of cells\n and uses getValueAt(int, int) to retrieve the\n values from the model during painting.  It is important to remember that\n the column and row indexes returned by various JTable methods\n are in terms of the JTable (the view) and are not\n necessarily the same indexes used by the model.\n \n By default, columns may be rearranged in the JTable so that the\n view's columns appear in a different order to the columns in the model.\n This does not affect the implementation of the model at all: when the\n columns are reordered, the JTable maintains the new order of the columns\n internally and converts its column indices before querying the model.\n \n So, when writing a TableModel, it is not necessary to listen for column\n reordering events as the model will be queried in its own coordinate\n system regardless of what is happening in the view.\n In the examples area there is a demonstration of a sorting algorithm making\n use of exactly this technique to interpose yet another coordinate system\n where the order of the rows is changed, rather than the order of the columns.\n \n Similarly when using the sorting and filtering functionality\n provided by RowSorter the underlying\n TableModel does not need to know how to do sorting,\n rather RowSorter will handle it.  Coordinate\n conversions will be necessary when using the row based methods of\n JTable with the underlying TableModel.\n All of JTables row based methods are in terms of the\n RowSorter, which is not necessarily the same as that\n of the underlying TableModel.  For example, the\n selection is always in terms of JTable so that when\n using RowSorter you will need to convert using\n convertRowIndexToView or\n convertRowIndexToModel.  The following shows how to\n convert coordinates from JTable to that of the\n underlying model:\n \n   int[] selection = table.getSelectedRows();\n   for (int i = 0; i < selection.length; i++) {\n     selection[i] = table.convertRowIndexToModel(selection[i]);\n   }\n   // selection is now in terms of the underlying TableModel\n \n\n By default if sorting is enabled JTable will persist the\n selection and variable row heights in terms of the model on\n sorting.  For example if row 0, in terms of the underlying model,\n is currently selected, after the sort row 0, in terms of the\n underlying model will be selected.  Visually the selection may\n change, but in terms of the underlying model it will remain the\n same.  The one exception to that is if the model index is no longer\n visible or was removed.  For example, if row 0 in terms of model\n was filtered out the selection will be empty after the sort.\n \n J2SE 5 adds methods to JTable to provide convenient access to some\n common printing needs. Simple new print() methods allow for quick\n and easy addition of printing support to your application. In addition, a new\n getPrintable(javax.swing.JTable.PrintMode, java.text.MessageFormat, java.text.MessageFormat) method is available for more advanced printing needs.\n \n As for all JComponent classes, you can use\n InputMap and ActionMap to associate an\n Action object with a KeyStroke and execute the\n action under specified conditions.\n \nWarning: Swing is not thread safe. For more\n information see Swing's Threading\n Policy.\n \nWarning:\n Serialized objects of this class will not be compatible with\n future Swing releases. The current serialization support is\n appropriate for short term storage or RMI between applications running\n the same version of Swing.  As of 1.4, support for long term storage\n of all JavaBeans\u2122\n has been added to the java.beans package.\n Please see XMLEncoder.", "codes": ["@JavaBean(defaultProperty=\"UI\",\n          description=\"A component which displays data in a two dimensional grid.\")\npublic class JTable\nextends JComponent\nimplements TableModelListener, Scrollable, TableColumnModelListener, ListSelectionListener, CellEditorListener, Accessible, RowSorterListener"], "fields": [{"field_name": "AUTO_RESIZE_OFF", "field_sig": "public static final\u00a0int AUTO_RESIZE_OFF", "description": "Do not adjust column widths automatically; use a horizontal scrollbar instead."}, {"field_name": "AUTO_RESIZE_NEXT_COLUMN", "field_sig": "public static final\u00a0int AUTO_RESIZE_NEXT_COLUMN", "description": "When a column is adjusted in the UI, adjust the next column the opposite way."}, {"field_name": "AUTO_RESIZE_SUBSEQUENT_COLUMNS", "field_sig": "public static final\u00a0int AUTO_RESIZE_SUBSEQUENT_COLUMNS", "description": "During UI adjustment, change subsequent columns to preserve the total width;\n this is the default behavior."}, {"field_name": "AUTO_RESIZE_LAST_COLUMN", "field_sig": "public static final\u00a0int AUTO_RESIZE_LAST_COLUMN", "description": "During all resize operations, apply adjustments to the last column only."}, {"field_name": "AUTO_RESIZE_ALL_COLUMNS", "field_sig": "public static final\u00a0int AUTO_RESIZE_ALL_COLUMNS", "description": "During all resize operations, proportionately resize all columns."}, {"field_name": "dataModel", "field_sig": "protected\u00a0TableModel dataModel", "description": "The TableModel of the table."}, {"field_name": "columnModel", "field_sig": "protected\u00a0TableColumnModel columnModel", "description": "The TableColumnModel of the table."}, {"field_name": "selectionModel", "field_sig": "protected\u00a0ListSelectionModel selectionModel", "description": "The ListSelectionModel of the table, used to keep track of row selections."}, {"field_name": "tableHeader", "field_sig": "protected\u00a0JTableHeader tableHeader", "description": "The TableHeader working with the table."}, {"field_name": "rowHeight", "field_sig": "protected\u00a0int rowHeight", "description": "The height in pixels of each row in the table."}, {"field_name": "rowMargin", "field_sig": "protected\u00a0int rowMargin", "description": "The height in pixels of the margin between the cells in each row."}, {"field_name": "gridColor", "field_sig": "protected\u00a0Color gridColor", "description": "The color of the grid."}, {"field_name": "showHorizontalLines", "field_sig": "protected\u00a0boolean showHorizontalLines", "description": "The table draws horizontal lines between cells if showHorizontalLines is true."}, {"field_name": "showVerticalLines", "field_sig": "protected\u00a0boolean showVerticalLines", "description": "The table draws vertical lines between cells if showVerticalLines is true."}, {"field_name": "autoResizeMode", "field_sig": "protected\u00a0int autoResizeMode", "description": "Determines if the table automatically resizes the\n  width of the table's columns to take up the entire width of the\n  table, and how it does the resizing."}, {"field_name": "autoCreateColumnsFromModel", "field_sig": "protected\u00a0boolean autoCreateColumnsFromModel", "description": "The table will query the TableModel to build the default\n  set of columns if this is true."}, {"field_name": "preferredViewportSize", "field_sig": "protected\u00a0Dimension preferredViewportSize", "description": "Used by the Scrollable interface to determine the initial visible area."}, {"field_name": "rowSelectionAllowed", "field_sig": "protected\u00a0boolean rowSelectionAllowed", "description": "True if row selection is allowed in this table."}, {"field_name": "cellSelectionEnabled", "field_sig": "protected\u00a0boolean cellSelectionEnabled", "description": "Obsolete as of Java 2 platform v1.3.  Please use the\n rowSelectionAllowed property and the\n columnSelectionAllowed property of the\n columnModel instead. Or use the\n method getCellSelectionEnabled."}, {"field_name": "editorComp", "field_sig": "protected transient\u00a0Component editorComp", "description": "If editing, the Component that is handling the editing."}, {"field_name": "cellEditor", "field_sig": "protected transient\u00a0TableCellEditor cellEditor", "description": "The active cell editor object, that overwrites the screen real estate\n occupied by the current cell and allows the user to change its contents.\n null if the table isn't currently editing."}, {"field_name": "editingColumn", "field_sig": "protected transient\u00a0int editingColumn", "description": "Identifies the column of the cell being edited."}, {"field_name": "editingRow", "field_sig": "protected transient\u00a0int editingRow", "description": "Identifies the row of the cell being edited."}, {"field_name": "defaultRenderersByColumnClass", "field_sig": "protected transient\u00a0Hashtable<Object,\u200bObject> defaultRenderersByColumnClass", "description": "A table of objects that display the contents of a cell,\n indexed by class as declared in getColumnClass\n in the TableModel interface."}, {"field_name": "defaultEditorsByColumnClass", "field_sig": "protected transient\u00a0Hashtable<Object,\u200bObject> defaultEditorsByColumnClass", "description": "A table of objects that display and edit the contents of a cell,\n indexed by class as declared in getColumnClass\n in the TableModel interface."}, {"field_name": "selectionForeground", "field_sig": "protected\u00a0Color selectionForeground", "description": "The foreground color of selected cells."}, {"field_name": "selectionBackground", "field_sig": "protected\u00a0Color selectionBackground", "description": "The background color of selected cells."}], "methods": [{"method_name": "addNotify", "method_sig": "public void addNotify()", "description": "Calls the configureEnclosingScrollPane method."}, {"method_name": "configureEnclosingScrollPane", "method_sig": "protected void configureEnclosingScrollPane()", "description": "If this JTable is the viewportView of an enclosing JScrollPane\n (the usual situation), configure this ScrollPane by, amongst other things,\n installing the table's tableHeader as the columnHeaderView of the scroll pane.\n When a JTable is added to a JScrollPane in the usual way,\n using new JScrollPane(myTable), addNotify is\n called in the JTable (when the table is added to the viewport).\n JTable's addNotify method in turn calls this method,\n which is protected so that this default installation procedure can\n be overridden by a subclass."}, {"method_name": "removeNotify", "method_sig": "public void removeNotify()", "description": "Calls the unconfigureEnclosingScrollPane method."}, {"method_name": "unconfigureEnclosingScrollPane", "method_sig": "protected void unconfigureEnclosingScrollPane()", "description": "Reverses the effect of configureEnclosingScrollPane\n by replacing the columnHeaderView of the enclosing\n scroll pane with null. JTable's\n removeNotify method calls\n this method, which is protected so that this default uninstallation\n procedure can be overridden by a subclass."}, {"method_name": "createScrollPaneForTable", "method_sig": "@Deprecated\npublic static JScrollPane createScrollPaneForTable (JTable aTable)", "description": "Equivalent to new JScrollPane(aTable)."}, {"method_name": "setTableHeader", "method_sig": "@BeanProperty(description=\"The JTableHeader instance which renders the column headers.\")\npublic void setTableHeader (JTableHeader tableHeader)", "description": "Sets the tableHeader working with this JTable to newHeader.\n It is legal to have a null tableHeader."}, {"method_name": "getTableHeader", "method_sig": "public JTableHeader getTableHeader()", "description": "Returns the tableHeader used by this JTable."}, {"method_name": "setRowHeight", "method_sig": "@BeanProperty(description=\"The height of the specified row.\")\npublic void setRowHeight (int rowHeight)", "description": "Sets the height, in pixels, of all cells to rowHeight,\n revalidates, and repaints.\n The height of the cells will be equal to the row height minus\n the row margin."}, {"method_name": "getRowHeight", "method_sig": "public int getRowHeight()", "description": "Returns the height of a table row, in pixels."}, {"method_name": "setRowHeight", "method_sig": "@BeanProperty(description=\"The height in pixels of the cells in <code>row</code>\")\npublic void setRowHeight (int row,\n                         int rowHeight)", "description": "Sets the height for row to rowHeight,\n revalidates, and repaints. The height of the cells in this row\n will be equal to the row height minus the row margin."}, {"method_name": "getRowHeight", "method_sig": "public int getRowHeight (int row)", "description": "Returns the height, in pixels, of the cells in row."}, {"method_name": "setRowMargin", "method_sig": "@BeanProperty(description=\"The amount of space between cells.\")\npublic void setRowMargin (int rowMargin)", "description": "Sets the amount of empty space between cells in adjacent rows."}, {"method_name": "getRowMargin", "method_sig": "public int getRowMargin()", "description": "Gets the amount of empty space, in pixels, between cells. Equivalent to:\n getIntercellSpacing().height."}, {"method_name": "setIntercellSpacing", "method_sig": "@BeanProperty(bound=false,\n              description=\"The spacing between the cells, drawn in the background color of the JTable.\")\npublic void setIntercellSpacing (Dimension intercellSpacing)", "description": "Sets the rowMargin and the columnMargin --\n the height and width of the space between cells -- to\n intercellSpacing."}, {"method_name": "getIntercellSpacing", "method_sig": "public Dimension getIntercellSpacing()", "description": "Returns the horizontal and vertical space between cells.\n The default spacing is look and feel dependent."}, {"method_name": "setGridColor", "method_sig": "@BeanProperty(description=\"The grid color.\")\npublic void setGridColor (Color gridColor)", "description": "Sets the color used to draw grid lines to gridColor and redisplays.\n The default color is look and feel dependent."}, {"method_name": "getGridColor", "method_sig": "public Color getGridColor()", "description": "Returns the color used to draw grid lines.\n The default color is look and feel dependent."}, {"method_name": "setShowGrid", "method_sig": "@BeanProperty(description=\"The color used to draw the grid lines.\")\npublic void setShowGrid (boolean showGrid)", "description": "Sets whether the table draws grid lines around cells.\n  If showGrid is true it does; if it is false it doesn't.\n  There is no getShowGrid method as this state is held\n  in two variables -- showHorizontalLines and showVerticalLines --\n  each of which can be queried independently."}, {"method_name": "setShowHorizontalLines", "method_sig": "@BeanProperty(description=\"Whether horizontal lines should be drawn in between the cells.\")\npublic void setShowHorizontalLines (boolean showHorizontalLines)", "description": "Sets whether the table draws horizontal lines between cells.\n  If showHorizontalLines is true it does; if it is false it doesn't."}, {"method_name": "setShowVerticalLines", "method_sig": "@BeanProperty(description=\"Whether vertical lines should be drawn in between the cells.\")\npublic void setShowVerticalLines (boolean showVerticalLines)", "description": "Sets whether the table draws vertical lines between cells.\n  If showVerticalLines is true it does; if it is false it doesn't."}, {"method_name": "getShowHorizontalLines", "method_sig": "public boolean getShowHorizontalLines()", "description": "Returns true if the table draws horizontal lines between cells, false if it\n doesn't. The default value is look and feel dependent."}, {"method_name": "getShowVerticalLines", "method_sig": "public boolean getShowVerticalLines()", "description": "Returns true if the table draws vertical lines between cells, false if it\n doesn't. The default value is look and feel dependent."}, {"method_name": "setAutoResizeMode", "method_sig": "@BeanProperty(enumerationValues={\"JTable.AUTO_RESIZE_OFF\",\"JTable.AUTO_RESIZE_NEXT_COLUMN\",\"JTable.AUTO_RESIZE_SUBSEQUENT_COLUMNS\",\"JTable.AUTO_RESIZE_LAST_COLUMN\",\"JTable.AUTO_RESIZE_ALL_COLUMNS\"},\n              description=\"Whether the columns should adjust themselves automatically.\")\npublic void setAutoResizeMode (int mode)", "description": "Sets the table's auto resize mode when the table is resized.  For further\n information on how the different resize modes work, see\n doLayout()."}, {"method_name": "getAutoResizeMode", "method_sig": "public int getAutoResizeMode()", "description": "Returns the auto resize mode of the table.  The default mode\n is AUTO_RESIZE_SUBSEQUENT_COLUMNS."}, {"method_name": "setAutoCreateColumnsFromModel", "method_sig": "@BeanProperty(description=\"Automatically populates the columnModel when a new TableModel is submitted.\")\npublic void setAutoCreateColumnsFromModel (boolean autoCreateColumnsFromModel)", "description": "Sets this table's autoCreateColumnsFromModel flag.\n This method calls createDefaultColumnsFromModel if\n autoCreateColumnsFromModel changes from false to true."}, {"method_name": "getAutoCreateColumnsFromModel", "method_sig": "public boolean getAutoCreateColumnsFromModel()", "description": "Determines whether the table will create default columns from the model.\n If true, setModel will clear any existing columns and\n create new columns from the new model.  Also, if the event in\n the tableChanged notification specifies that the\n entire table changed, then the columns will be rebuilt.\n The default is true."}, {"method_name": "createDefaultColumnsFromModel", "method_sig": "public void createDefaultColumnsFromModel()", "description": "Creates default columns for the table from\n the data model using the getColumnCount method\n defined in the TableModel interface.\n \n Clears any existing columns before creating the\n new columns based on information from the model."}, {"method_name": "setDefaultRenderer", "method_sig": "public void setDefaultRenderer (Class<?> columnClass,\n                               TableCellRenderer renderer)", "description": "Sets a default cell renderer to be used if no renderer has been set in\n a TableColumn. If renderer is null,\n removes the default renderer for this column class."}, {"method_name": "getDefaultRenderer", "method_sig": "public TableCellRenderer getDefaultRenderer (Class<?> columnClass)", "description": "Returns the cell renderer to be used when no renderer has been set in\n a TableColumn. During the rendering of cells the renderer is fetched from\n a Hashtable of entries according to the class of the cells in the column. If\n there is no entry for this columnClass the method returns\n the entry for the most specific superclass. The JTable installs entries\n for Object, Number, and Boolean, all of which can be modified\n or replaced."}, {"method_name": "setDefaultEditor", "method_sig": "public void setDefaultEditor (Class<?> columnClass,\n                             TableCellEditor editor)", "description": "Sets a default cell editor to be used if no editor has been set in\n a TableColumn. If no editing is required in a table, or a\n particular column in a table, uses the isCellEditable\n method in the TableModel interface to ensure that this\n JTable will not start an editor in these columns.\n If editor is null, removes the default editor for this\n column class."}, {"method_name": "getDefaultEditor", "method_sig": "public TableCellEditor getDefaultEditor (Class<?> columnClass)", "description": "Returns the editor to be used when no editor has been set in\n a TableColumn. During the editing of cells the editor is fetched from\n a Hashtable of entries according to the class of the cells in the column. If\n there is no entry for this columnClass the method returns\n the entry for the most specific superclass. The JTable installs entries\n for Object, Number, and Boolean, all of which can be modified\n or replaced."}, {"method_name": "setDragEnabled", "method_sig": "@BeanProperty(bound=false,\n              description=\"determines whether automatic drag handling is enabled\")\npublic void setDragEnabled (boolean b)", "description": "Turns on or off automatic drag handling. In order to enable automatic\n drag handling, this property should be set to true, and the\n table's TransferHandler needs to be non-null.\n The default value of the dragEnabled property is false.\n \n The job of honoring this property, and recognizing a user drag gesture,\n lies with the look and feel implementation, and in particular, the table's\n TableUI. When automatic drag handling is enabled, most look and\n feels (including those that subclass BasicLookAndFeel) begin a\n drag and drop operation whenever the user presses the mouse button over\n an item (in single selection mode) or a selection (in other selection\n modes) and then moves the mouse a few pixels. Setting this property to\n true can therefore have a subtle effect on how selections behave.\n \n If a look and feel is used that ignores this property, you can still\n begin a drag and drop operation by calling exportAsDrag on the\n table's TransferHandler."}, {"method_name": "getDragEnabled", "method_sig": "public boolean getDragEnabled()", "description": "Returns whether or not automatic drag handling is enabled."}, {"method_name": "setDropMode", "method_sig": "public final void setDropMode (DropMode dropMode)", "description": "Sets the drop mode for this component. For backward compatibility,\n the default for this property is DropMode.USE_SELECTION.\n Usage of one of the other modes is recommended, however, for an\n improved user experience. DropMode.ON, for instance,\n offers similar behavior of showing items as selected, but does so without\n affecting the actual selection in the table.\n \nJTable supports the following drop modes:\n \nDropMode.USE_SELECTION\nDropMode.ON\nDropMode.INSERT\nDropMode.INSERT_ROWS\nDropMode.INSERT_COLS\nDropMode.ON_OR_INSERT\nDropMode.ON_OR_INSERT_ROWS\nDropMode.ON_OR_INSERT_COLS\n\n\n The drop mode is only meaningful if this component has a\n TransferHandler that accepts drops."}, {"method_name": "getDropMode", "method_sig": "public final DropMode getDropMode()", "description": "Returns the drop mode for this component."}, {"method_name": "getDropLocation", "method_sig": "@BeanProperty(bound=false)\npublic final JTable.DropLocation getDropLocation()", "description": "Returns the location that this component should visually indicate\n as the drop location during a DnD operation over the component,\n or null if no location is to currently be shown.\n \n This method is not meant for querying the drop location\n from a TransferHandler, as the drop location is only\n set after the TransferHandler's canImport\n has returned and has allowed for the location to be shown.\n \n When this property changes, a property change event with\n name \"dropLocation\" is fired by the component."}, {"method_name": "setAutoCreateRowSorter", "method_sig": "@BeanProperty(preferred=true,\n              description=\"Whether or not to turn on sorting by default.\")\npublic void setAutoCreateRowSorter (boolean autoCreateRowSorter)", "description": "Specifies whether a RowSorter should be created for the\n table whenever its model changes.\n \n When setAutoCreateRowSorter(true) is invoked, a \n TableRowSorter is immediately created and installed on the\n table.  While the autoCreateRowSorter property remains\n true, every time the model is changed, a new \n TableRowSorter is created and set as the table's row sorter.\n The default value for the autoCreateRowSorter\n property is false."}, {"method_name": "getAutoCreateRowSorter", "method_sig": "public boolean getAutoCreateRowSorter()", "description": "Returns true if whenever the model changes, a new\n RowSorter should be created and installed\n as the table's sorter; otherwise, returns false."}, {"method_name": "setUpdateSelectionOnSort", "method_sig": "@BeanProperty(expert=true,\n              description=\"Whether or not to update the selection on sorting\")\npublic void setUpdateSelectionOnSort (boolean update)", "description": "Specifies whether the selection should be updated after sorting.\n If true, on sorting the selection is reset such that\n the same rows, in terms of the model, remain selected.  The default\n is true."}, {"method_name": "getUpdateSelectionOnSort", "method_sig": "public boolean getUpdateSelectionOnSort()", "description": "Returns true if the selection should be updated after sorting."}, {"method_name": "setRowSorter", "method_sig": "@BeanProperty(description=\"The table\\'s RowSorter\")\npublic void setRowSorter (RowSorter<? extends TableModel> sorter)", "description": "Sets the RowSorter.  RowSorter is used\n to provide sorting and filtering to a JTable.\n \n This method clears the selection and resets any variable row heights.\n \n This method fires a PropertyChangeEvent when appropriate,\n with the property name \"rowSorter\".  For\n backward-compatibility, this method fires an additional event with the\n property name \"sorter\".\n \n If the underlying model of the RowSorter differs from\n that of this JTable undefined behavior will result."}, {"method_name": "getRowSorter", "method_sig": "public RowSorter<? extends TableModel> getRowSorter()", "description": "Returns the object responsible for sorting."}, {"method_name": "setSelectionMode", "method_sig": "@BeanProperty(enumerationValues={\"ListSelectionModel.SINGLE_SELECTION\",\"ListSelectionModel.SINGLE_INTERVAL_SELECTION\",\"ListSelectionModel.MULTIPLE_INTERVAL_SELECTION\"},\n              description=\"The selection mode used by the row and column selection models.\")\npublic void setSelectionMode (int selectionMode)", "description": "Sets the table's selection mode to allow only single selections, a single\n contiguous interval, or multiple intervals.\n \nNote:\nJTable provides all the methods for handling\n column and row selection.  When setting states,\n such as setSelectionMode, it not only\n updates the mode for the row selection model but also sets similar\n values in the selection model of the columnModel.\n If you want to have the row and column selection models operating\n in different modes, set them both directly.\n \n Both the row and column selection models for JTable\n default to using a DefaultListSelectionModel\n so that JTable works the same way as the\n JList. See the setSelectionMode method\n in JList for details about the modes."}, {"method_name": "setRowSelectionAllowed", "method_sig": "@BeanProperty(visualUpdate=true,\n              description=\"If true, an entire row is selected for each selected cell.\")\npublic void setRowSelectionAllowed (boolean rowSelectionAllowed)", "description": "Sets whether the rows in this model can be selected."}, {"method_name": "getRowSelectionAllowed", "method_sig": "public boolean getRowSelectionAllowed()", "description": "Returns true if rows can be selected."}, {"method_name": "setColumnSelectionAllowed", "method_sig": "@BeanProperty(visualUpdate=true,\n              description=\"If true, an entire column is selected for each selected cell.\")\npublic void setColumnSelectionAllowed (boolean columnSelectionAllowed)", "description": "Sets whether the columns in this model can be selected."}, {"method_name": "getColumnSelectionAllowed", "method_sig": "public boolean getColumnSelectionAllowed()", "description": "Returns true if columns can be selected."}, {"method_name": "setCellSelectionEnabled", "method_sig": "@BeanProperty(visualUpdate=true,\n              description=\"Select a rectangular region of cells rather than rows or columns.\")\npublic void setCellSelectionEnabled (boolean cellSelectionEnabled)", "description": "Sets whether this table allows both a column selection and a\n row selection to exist simultaneously. When set,\n the table treats the intersection of the row and column selection\n models as the selected cells. Override isCellSelected to\n change this default behavior. This method is equivalent to setting\n both the rowSelectionAllowed property and\n columnSelectionAllowed property of the\n columnModel to the supplied value."}, {"method_name": "getCellSelectionEnabled", "method_sig": "public boolean getCellSelectionEnabled()", "description": "Returns true if both row and column selection models are enabled.\n Equivalent to getRowSelectionAllowed() &&\n getColumnSelectionAllowed()."}, {"method_name": "selectAll", "method_sig": "public void selectAll()", "description": "Selects all rows, columns, and cells in the table."}, {"method_name": "clearSelection", "method_sig": "public void clearSelection()", "description": "Deselects all selected columns and rows."}, {"method_name": "setRowSelectionInterval", "method_sig": "public void setRowSelectionInterval (int index0,\n                                    int index1)", "description": "Selects the rows from index0 to index1,\n inclusive."}, {"method_name": "setColumnSelectionInterval", "method_sig": "public void setColumnSelectionInterval (int index0,\n                                       int index1)", "description": "Selects the columns from index0 to index1,\n inclusive."}, {"method_name": "addRowSelectionInterval", "method_sig": "public void addRowSelectionInterval (int index0,\n                                    int index1)", "description": "Adds the rows from index0 to index1, inclusive, to\n the current selection."}, {"method_name": "addColumnSelectionInterval", "method_sig": "public void addColumnSelectionInterval (int index0,\n                                       int index1)", "description": "Adds the columns from index0 to index1,\n inclusive, to the current selection."}, {"method_name": "removeRowSelectionInterval", "method_sig": "public void removeRowSelectionInterval (int index0,\n                                       int index1)", "description": "Deselects the rows from index0 to index1, inclusive."}, {"method_name": "removeColumnSelectionInterval", "method_sig": "public void removeColumnSelectionInterval (int index0,\n                                          int index1)", "description": "Deselects the columns from index0 to index1, inclusive."}, {"method_name": "getSelectedRow", "method_sig": "@BeanProperty(bound=false)\npublic int getSelectedRow()", "description": "Returns the index of the first selected row, -1 if no row is selected."}, {"method_name": "getSelectedColumn", "method_sig": "@BeanProperty(bound=false)\npublic int getSelectedColumn()", "description": "Returns the index of the first selected column,\n -1 if no column is selected."}, {"method_name": "getSelectedRows", "method_sig": "@BeanProperty(bound=false)\npublic int[] getSelectedRows()", "description": "Returns the indices of all selected rows."}, {"method_name": "getSelectedColumns", "method_sig": "@BeanProperty(bound=false)\npublic int[] getSelectedColumns()", "description": "Returns the indices of all selected columns."}, {"method_name": "getSelectedRowCount", "method_sig": "@BeanProperty(bound=false)\npublic int getSelectedRowCount()", "description": "Returns the number of selected rows."}, {"method_name": "getSelectedColumnCount", "method_sig": "@BeanProperty(bound=false)\npublic int getSelectedColumnCount()", "description": "Returns the number of selected columns."}, {"method_name": "isRowSelected", "method_sig": "public boolean isRowSelected (int row)", "description": "Returns true if the specified index is in the valid range of rows,\n and the row at that index is selected."}, {"method_name": "isColumnSelected", "method_sig": "public boolean isColumnSelected (int column)", "description": "Returns true if the specified index is in the valid range of columns,\n and the column at that index is selected."}, {"method_name": "isCellSelected", "method_sig": "public boolean isCellSelected (int row,\n                              int column)", "description": "Returns true if the specified indices are in the valid range of rows\n and columns and the cell at the specified position is selected."}, {"method_name": "changeSelection", "method_sig": "public void changeSelection (int rowIndex,\n                            int columnIndex,\n                            boolean toggle,\n                            boolean extend)", "description": "Updates the selection models of the table, depending on the state of the\n two flags: toggle and extend. Most changes\n to the selection that are the result of keyboard or mouse events received\n by the UI are channeled through this method so that the behavior may be\n overridden by a subclass. Some UIs may need more functionality than\n this method provides, such as when manipulating the lead for discontiguous\n selection, and may not call into this method for some selection changes.\n \n This implementation uses the following conventions:\n \n toggle: false, extend: false.\n      Clear the previous selection and ensure the new cell is selected.\n  toggle: false, extend: true.\n      Extend the previous selection from the anchor to the specified cell,\n      clearing all other selections.\n  toggle: true, extend: false.\n      If the specified cell is selected, deselect it. If it is not selected, select it.\n  toggle: true, extend: true.\n      Apply the selection state of the anchor to all cells between it and the\n      specified cell.\n "}, {"method_name": "getSelectionForeground", "method_sig": "public Color getSelectionForeground()", "description": "Returns the foreground color for selected cells."}, {"method_name": "setSelectionForeground", "method_sig": "@BeanProperty(description=\"A default foreground color for selected cells.\")\npublic void setSelectionForeground (Color selectionForeground)", "description": "Sets the foreground color for selected cells.  Cell renderers\n can use this color to render text and graphics for selected\n cells.\n \n The default value of this property is defined by the look\n and feel implementation.\n \n This is a JavaBeans bound property."}, {"method_name": "getSelectionBackground", "method_sig": "public Color getSelectionBackground()", "description": "Returns the background color for selected cells."}, {"method_name": "setSelectionBackground", "method_sig": "@BeanProperty(description=\"A default background color for selected cells.\")\npublic void setSelectionBackground (Color selectionBackground)", "description": "Sets the background color for selected cells.  Cell renderers\n can use this color to the fill selected cells.\n \n The default value of this property is defined by the look\n and feel implementation.\n \n This is a JavaBeans bound property."}, {"method_name": "getColumn", "method_sig": "public TableColumn getColumn (Object identifier)", "description": "Returns the TableColumn object for the column in the table\n whose identifier is equal to identifier, when compared using\n equals."}, {"method_name": "convertColumnIndexToModel", "method_sig": "public int convertColumnIndexToModel (int viewColumnIndex)", "description": "Maps the index of the column in the view at\n viewColumnIndex to the index of the column\n in the table model.  Returns the index of the corresponding\n column in the model.  If viewColumnIndex\n is less than zero, returns viewColumnIndex."}, {"method_name": "convertColumnIndexToView", "method_sig": "public int convertColumnIndexToView (int modelColumnIndex)", "description": "Maps the index of the column in the table model at\n modelColumnIndex to the index of the column\n in the view.  Returns the index of the\n corresponding column in the view; returns -1 if this column is not\n being displayed.  If modelColumnIndex is less than zero,\n returns modelColumnIndex."}, {"method_name": "convertRowIndexToView", "method_sig": "public int convertRowIndexToView (int modelRowIndex)", "description": "Maps the index of the row in terms of the\n TableModel to the view.  If the contents of the\n model are not sorted the model and view indices are the same."}, {"method_name": "convertRowIndexToModel", "method_sig": "public int convertRowIndexToModel (int viewRowIndex)", "description": "Maps the index of the row in terms of the view to the\n underlying TableModel.  If the contents of the\n model are not sorted the model and view indices are the same."}, {"method_name": "getRowCount", "method_sig": "@BeanProperty(bound=false)\npublic int getRowCount()", "description": "Returns the number of rows that can be shown in the\n JTable, given unlimited space.  If a\n RowSorter with a filter has been specified, the\n number of rows returned may differ from that of the underlying\n TableModel."}, {"method_name": "getColumnCount", "method_sig": "@BeanProperty(bound=false)\npublic int getColumnCount()", "description": "Returns the number of columns in the column model. Note that this may\n be different from the number of columns in the table model."}, {"method_name": "getColumnName", "method_sig": "public String getColumnName (int column)", "description": "Returns the name of the column appearing in the view at\n column position column."}, {"method_name": "getColumnClass", "method_sig": "public Class<?> getColumnClass (int column)", "description": "Returns the type of the column appearing in the view at\n column position column."}, {"method_name": "getValueAt", "method_sig": "public Object getValueAt (int row,\n                         int column)", "description": "Returns the cell value at row and column.\n \nNote: The column is specified in the table view's display\n              order, and not in the TableModel's column\n              order.  This is an important distinction because as the\n              user rearranges the columns in the table,\n              the column at a given index in the view will change.\n              Meanwhile the user's actions never affect the model's\n              column ordering."}, {"method_name": "setValueAt", "method_sig": "public void setValueAt (Object aValue,\n                       int row,\n                       int column)", "description": "Sets the value for the cell in the table model at row\n and column.\n \nNote: The column is specified in the table view's display\n              order, and not in the TableModel's column\n              order.  This is an important distinction because as the\n              user rearranges the columns in the table,\n              the column at a given index in the view will change.\n              Meanwhile the user's actions never affect the model's\n              column ordering.\n\n aValue is the new value."}, {"method_name": "isCellEditable", "method_sig": "public boolean isCellEditable (int row,\n                              int column)", "description": "Returns true if the cell at row and column\n is editable.  Otherwise, invoking setValueAt on the cell\n will have no effect.\n \nNote: The column is specified in the table view's display\n              order, and not in the TableModel's column\n              order.  This is an important distinction because as the\n              user rearranges the columns in the table,\n              the column at a given index in the view will change.\n              Meanwhile the user's actions never affect the model's\n              column ordering."}, {"method_name": "addColumn", "method_sig": "public void addColumn (TableColumn aColumn)", "description": "Appends aColumn to the end of the array of columns held by\n  this JTable's column model.\n  If the column name of aColumn is null,\n  sets the column name of aColumn to the name\n  returned by getModel().getColumnName().\n  \n  To add a column to this JTable to display the\n  modelColumn'th column of data in the model with a\n  given width, cellRenderer,\n  and cellEditor you can use:\n  \n\n      addColumn(new TableColumn(modelColumn, width, cellRenderer, cellEditor));\n\n  \n  [Any of the TableColumn constructors can be used\n  instead of this one.]\n  The model column number is stored inside the TableColumn\n  and is used during rendering and editing to locate the appropriates\n  data values in the model. The model column number does not change\n  when columns are reordered in the view."}, {"method_name": "removeColumn", "method_sig": "public void removeColumn (TableColumn aColumn)", "description": "Removes aColumn from this JTable's\n  array of columns.  Note: this method does not remove the column\n  of data from the model; it just removes the TableColumn\n  that was responsible for displaying it."}, {"method_name": "moveColumn", "method_sig": "public void moveColumn (int column,\n                       int targetColumn)", "description": "Moves the column column to the position currently\n occupied by the column targetColumn in the view.\n The old column at targetColumn is\n shifted left or right to make room."}, {"method_name": "columnAtPoint", "method_sig": "public int columnAtPoint (Point point)", "description": "Returns the index of the column that point lies in,\n or -1 if the result is not in the range\n [0, getColumnCount()-1]."}, {"method_name": "rowAtPoint", "method_sig": "public int rowAtPoint (Point point)", "description": "Returns the index of the row that point lies in,\n or -1 if the result is not in the range\n [0, getRowCount()-1]."}, {"method_name": "getCellRect", "method_sig": "public Rectangle getCellRect (int row,\n                             int column,\n                             boolean includeSpacing)", "description": "Returns a rectangle for the cell that lies at the intersection of\n row and column.\n If includeSpacing is true then the value returned\n has the full height and width of the row and column\n specified. If it is false, the returned rectangle is inset by the\n intercell spacing to return the true bounds of the rendering or\n editing component as it will be set during rendering.\n \n If the column index is valid but the row index is less\n than zero the method returns a rectangle with the\n y and height values set appropriately\n and the x and width values both set\n to zero. In general, when either the row or column indices indicate a\n cell outside the appropriate range, the method returns a rectangle\n depicting the closest edge of the closest cell that is within\n the table's range. When both row and column indices are out\n of range the returned rectangle covers the closest\n point of the closest cell.\n \n In all cases, calculations that use this method to calculate\n results along one axis will not fail because of anomalies in\n calculations along the other axis. When the cell is not valid\n the includeSpacing parameter is ignored."}, {"method_name": "doLayout", "method_sig": "public void doLayout()", "description": "Causes this table to lay out its rows and columns.  Overridden so\n that columns can be resized to accommodate a change in the size of\n a containing parent.\n Resizes one or more of the columns in the table\n so that the total width of all of this JTable's\n columns is equal to the width of the table.\n \n Before the layout begins the method gets the\n resizingColumn of the tableHeader.\n When the method is called as a result of the resizing of an enclosing window,\n the resizingColumn is null. This means that resizing\n has taken place \"outside\" the JTable and the change -\n or \"delta\" - should be distributed to all of the columns regardless\n of this JTable's automatic resize mode.\n \n If the resizingColumn is not null, it is one of\n the columns in the table that has changed size rather than\n the table itself. In this case the auto-resize modes govern\n the way the extra (or deficit) space is distributed\n amongst the available columns.\n \n The modes are:\n \n  AUTO_RESIZE_OFF: Don't automatically adjust the column's\n widths at all. Use a horizontal scrollbar to accommodate the\n columns when their sum exceeds the width of the\n Viewport.  If the JTable is not\n enclosed in a JScrollPane this may\n leave parts of the table invisible.\n   AUTO_RESIZE_NEXT_COLUMN: Use just the column after the\n resizing column. This results in the \"boundary\" or divider\n between adjacent cells being independently adjustable.\n   AUTO_RESIZE_SUBSEQUENT_COLUMNS: Use all columns after the\n one being adjusted to absorb the changes.  This is the\n default behavior.\n   AUTO_RESIZE_LAST_COLUMN: Automatically adjust the\n size of the last column only. If the bounds of the last column\n prevent the desired size from being allocated, set the\n width of the last column to the appropriate limit and make\n no further adjustments.\n   AUTO_RESIZE_ALL_COLUMNS: Spread the delta amongst all the columns\n in the JTable, including the one that is being\n adjusted.\n \n\nNote: When a JTable makes adjustments\n   to the widths of the columns it respects their minimum and\n   maximum values absolutely.  It is therefore possible that,\n   even after this method is called, the total width of the columns\n   is still not equal to the width of the table. When this happens\n   the JTable does not put itself\n   in AUTO_RESIZE_OFF mode to bring up a scroll bar, or break other\n   commitments of its current auto-resize mode -- instead it\n   allows its bounds to be set larger (or smaller) than the total of the\n   column minimum or maximum, meaning, either that there\n   will not be enough room to display all of the columns, or that the\n   columns will not fill the JTable's bounds.\n   These respectively, result in the clipping of some columns\n   or an area being painted in the JTable's\n   background color during painting.\n \n   The mechanism for distributing the delta amongst the available\n   columns is provided in a private method in the JTable\n   class:\n \n   adjustSizes(long targetSize, final Resizable3 r, boolean inverse)\n \n   an explanation of which is provided in the following section.\n   Resizable3 is a private\n   interface that allows any data structure containing a collection\n   of elements with a size, preferred size, maximum size and minimum size\n   to have its elements manipulated by the algorithm.\n\n  Distributing the delta \n Overview \n\n Call \"DELTA\" the difference between the target size and the\n sum of the preferred sizes of the elements in r. The individual\n sizes are calculated by taking the original preferred\n sizes and adding a share of the DELTA - that share being based on\n how far each preferred size is from its limiting bound (minimum or\n maximum).\n\n Definition\n\n Call the individual constraints min[i], max[i], and pref[i].\n \n Call their respective sums: MIN, MAX, and PREF.\n \n Each new size will be calculated using:\n\n \n          size[i] = pref[i] + delta[i]\n \n where each individual delta[i] is calculated according to:\n \n If (DELTA < 0) we are in shrink mode where:\n\n \n                        DELTA\n          delta[i] = ------------ * (pref[i] - min[i])\n                     (PREF - MIN)\n \n If (DELTA > 0) we are in expand mode where:\n\n \n                        DELTA\n          delta[i] = ------------ * (max[i] - pref[i])\n                      (MAX - PREF)\n \n\n The overall effect is that the total size moves that same percentage,\n k, towards the total minimum or maximum and that percentage guarantees\n accommodation of the required space, DELTA.\n\n Details\n\n Naive evaluation of the formulae presented here would be subject to\n the aggregated rounding errors caused by doing this operation in finite\n precision (using ints). To deal with this, the multiplying factor above,\n is constantly recalculated and this takes account of the rounding\n errors in the previous iterations. The result is an algorithm that\n produces a set of integers whose values exactly sum to the supplied\n targetSize, and does so by spreading the rounding\n errors evenly over the given elements.\n\n When the MAX and MIN bounds are hit\n\n When targetSize is outside the [MIN, MAX] range,\n the algorithm sets all sizes to their appropriate limiting value\n (maximum or minimum)."}, {"method_name": "sizeColumnsToFit", "method_sig": "@Deprecated\npublic void sizeColumnsToFit (boolean lastColumnOnly)", "description": "Sizes the table columns to fit the available space."}, {"method_name": "sizeColumnsToFit", "method_sig": "public void sizeColumnsToFit (int resizingColumn)", "description": "Obsolete as of Java 2 platform v1.4.  Please use the\n doLayout() method instead."}, {"method_name": "getToolTipText", "method_sig": "public String getToolTipText (MouseEvent event)", "description": "Overrides JComponent's getToolTipText\n method in order to allow the renderer's tips to be used\n if it has text set.\n \nNote: For JTable to properly display\n tooltips of its renderers\n JTable must be a registered component with the\n ToolTipManager.\n This is done automatically in initializeLocalVars,\n but if at a later point JTable is told\n setToolTipText(null) it will unregister the table\n component, and no tips from renderers will display anymore."}, {"method_name": "setSurrendersFocusOnKeystroke", "method_sig": "public void setSurrendersFocusOnKeystroke (boolean surrendersFocusOnKeystroke)", "description": "Sets whether editors in this JTable get the keyboard focus\n when an editor is activated as a result of the JTable\n forwarding keyboard events for a cell.\n By default, this property is false, and the JTable\n retains the focus unless the cell is clicked."}, {"method_name": "getSurrendersFocusOnKeystroke", "method_sig": "public boolean getSurrendersFocusOnKeystroke()", "description": "Returns true if the editor should get the focus\n when keystrokes cause the editor to be activated"}, {"method_name": "editCellAt", "method_sig": "public boolean editCellAt (int row,\n                          int column)", "description": "Programmatically starts editing the cell at row and\n column, if those indices are in the valid range, and\n the cell at those indices is editable.\n Note that this is a convenience method for\n editCellAt(int, int, null)."}, {"method_name": "editCellAt", "method_sig": "public boolean editCellAt (int row,\n                          int column,\n                          EventObject e)", "description": "Programmatically starts editing the cell at row and\n column, if those indices are in the valid range, and\n the cell at those indices is editable.\n To prevent the JTable from\n editing a particular table, column or cell value, return false from\n the isCellEditable method in the TableModel\n interface."}, {"method_name": "isEditing", "method_sig": "@BeanProperty(bound=false)\npublic boolean isEditing()", "description": "Returns true if a cell is being edited."}, {"method_name": "getEditorComponent", "method_sig": "@BeanProperty(bound=false)\npublic Component getEditorComponent()", "description": "Returns the component that is handling the editing session.\n If nothing is being edited, returns null."}, {"method_name": "getEditingColumn", "method_sig": "public int getEditingColumn()", "description": "Returns the index of the column that contains the cell currently\n being edited.  If nothing is being edited, returns -1."}, {"method_name": "getEditingRow", "method_sig": "public int getEditingRow()", "description": "Returns the index of the row that contains the cell currently\n being edited.  If nothing is being edited, returns -1."}, {"method_name": "getUI", "method_sig": "public TableUI getUI()", "description": "Returns the L&F object that renders this component."}, {"method_name": "setUI", "method_sig": "@BeanProperty(hidden=true,\n              visualUpdate=true,\n              description=\"The UI object that implements the Component\\'s LookAndFeel.\")\npublic void setUI (TableUI ui)", "description": "Sets the L&F object that renders this component and repaints."}, {"method_name": "updateUI", "method_sig": "public void updateUI()", "description": "Notification from the UIManager that the L&F has changed.\n Replaces the current UI object with the latest version from the\n UIManager."}, {"method_name": "getUIClassID", "method_sig": "@BeanProperty(bound=false)\npublic String getUIClassID()", "description": "Returns the suffix used to construct the name of the L&F class used to\n render this component."}, {"method_name": "setModel", "method_sig": "@BeanProperty(description=\"The model that is the source of the data for this view.\")\npublic void setModel (TableModel dataModel)", "description": "Sets the data model for this table to dataModel and registers\n with it for listener notifications from the new data model."}, {"method_name": "getModel", "method_sig": "public TableModel getModel()", "description": "Returns the TableModel that provides the data displayed by this\n JTable."}, {"method_name": "setColumnModel", "method_sig": "@BeanProperty(description=\"The object governing the way columns appear in the view.\")\npublic void setColumnModel (TableColumnModel columnModel)", "description": "Sets the column model for this table to columnModel and registers\n for listener notifications from the new column model. Also sets the\n column model of the JTableHeader to columnModel."}, {"method_name": "getColumnModel", "method_sig": "public TableColumnModel getColumnModel()", "description": "Returns the TableColumnModel that contains all column information\n of this table."}, {"method_name": "setSelectionModel", "method_sig": "@BeanProperty(description=\"The selection model for rows.\")\npublic void setSelectionModel (ListSelectionModel selectionModel)", "description": "Sets the row selection model for this table to selectionModel\n and registers for listener notifications from the new selection model."}, {"method_name": "getSelectionModel", "method_sig": "public ListSelectionModel getSelectionModel()", "description": "Returns the ListSelectionModel that is used to maintain row\n selection state."}, {"method_name": "sorterChanged", "method_sig": "public void sorterChanged (RowSorterEvent e)", "description": "RowSorterListener notification that the\n RowSorter has changed in some way."}, {"method_name": "tableChanged", "method_sig": "public void tableChanged (TableModelEvent e)", "description": "Invoked when this table's TableModel generates\n a TableModelEvent.\n The TableModelEvent should be constructed in the\n coordinate system of the model; the appropriate mapping to the\n view coordinate system is performed by this JTable\n when it receives the event.\n \n Application code will not use these methods explicitly, they\n are used internally by JTable.\n \n Note that as of 1.3, this method clears the selection, if any."}, {"method_name": "columnAdded", "method_sig": "public void columnAdded (TableColumnModelEvent e)", "description": "Invoked when a column is added to the table column model.\n \n Application code will not use these methods explicitly, they\n are used internally by JTable."}, {"method_name": "columnRemoved", "method_sig": "public void columnRemoved (TableColumnModelEvent e)", "description": "Invoked when a column is removed from the table column model.\n \n Application code will not use these methods explicitly, they\n are used internally by JTable."}, {"method_name": "columnMoved", "method_sig": "public void columnMoved (TableColumnModelEvent e)", "description": "Invoked when a column is repositioned. If a cell is being\n edited, then editing is stopped and the cell is redrawn.\n \n Application code will not use these methods explicitly, they\n are used internally by JTable."}, {"method_name": "columnMarginChanged", "method_sig": "public void columnMarginChanged (ChangeEvent e)", "description": "Invoked when a column is moved due to a margin change.\n If a cell is being edited, then editing is stopped and the cell\n is redrawn.\n \n Application code will not use these methods explicitly, they\n are used internally by JTable."}, {"method_name": "columnSelectionChanged", "method_sig": "public void columnSelectionChanged (ListSelectionEvent e)", "description": "Invoked when the selection model of the TableColumnModel\n is changed.\n \n Application code will not use these methods explicitly, they\n are used internally by JTable."}, {"method_name": "valueChanged", "method_sig": "public void valueChanged (ListSelectionEvent e)", "description": "Invoked when the row selection changes -- repaints to show the new\n selection.\n \n Application code will not use these methods explicitly, they\n are used internally by JTable."}, {"method_name": "editingStopped", "method_sig": "public void editingStopped (ChangeEvent e)", "description": "Invoked when editing is finished. The changes are saved and the\n editor is discarded.\n \n Application code will not use these methods explicitly, they\n are used internally by JTable."}, {"method_name": "editingCanceled", "method_sig": "public void editingCanceled (ChangeEvent e)", "description": "Invoked when editing is canceled. The editor object is discarded\n and the cell is rendered once again.\n \n Application code will not use these methods explicitly, they\n are used internally by JTable."}, {"method_name": "setPreferredScrollableViewportSize", "method_sig": "@BeanProperty(bound=false,\n              description=\"The preferred size of the viewport.\")\npublic void setPreferredScrollableViewportSize (Dimension size)", "description": "Sets the preferred size of the viewport for this table."}, {"method_name": "getPreferredScrollableViewportSize", "method_sig": "public Dimension getPreferredScrollableViewportSize()", "description": "Returns the preferred size of the viewport for this table."}, {"method_name": "getScrollableUnitIncrement", "method_sig": "public int getScrollableUnitIncrement (Rectangle visibleRect,\n                                      int orientation,\n                                      int direction)", "description": "Returns the scroll increment (in pixels) that completely exposes one new\n row or column (depending on the orientation).\n \n This method is called each time the user requests a unit scroll."}, {"method_name": "getScrollableBlockIncrement", "method_sig": "public int getScrollableBlockIncrement (Rectangle visibleRect,\n                                       int orientation,\n                                       int direction)", "description": "Returns visibleRect.height or\n visibleRect.width,\n depending on this table's orientation.  Note that as of Swing 1.1.1\n (Java 2 v 1.2.2) the value\n returned will ensure that the viewport is cleanly aligned on\n a row boundary."}, {"method_name": "getScrollableTracksViewportWidth", "method_sig": "@BeanProperty(bound=false)\npublic boolean getScrollableTracksViewportWidth()", "description": "Returns false if autoResizeMode is set to\n AUTO_RESIZE_OFF, which indicates that the\n width of the viewport does not determine the width\n of the table.  Otherwise returns true."}, {"method_name": "getScrollableTracksViewportHeight", "method_sig": "@BeanProperty(bound=false)\npublic boolean getScrollableTracksViewportHeight()", "description": "Returns false to indicate that the height of the viewport does\n not determine the height of the table, unless\n getFillsViewportHeight is true and the preferred height\n of the table is smaller than the viewport's height."}, {"method_name": "setFillsViewportHeight", "method_sig": "@BeanProperty(description=\"Whether or not this table is always made large enough to fill the height of an enclosing viewport\")\npublic void setFillsViewportHeight (boolean fillsViewportHeight)", "description": "Sets whether or not this table is always made large enough\n to fill the height of an enclosing viewport. If the preferred\n height of the table is smaller than the viewport, then the table\n will be stretched to fill the viewport. In other words, this\n ensures the table is never smaller than the viewport.\n The default for this property is false."}, {"method_name": "getFillsViewportHeight", "method_sig": "public boolean getFillsViewportHeight()", "description": "Returns whether or not this table is always made large enough\n to fill the height of an enclosing viewport."}, {"method_name": "createDefaultRenderers", "method_sig": "protected void createDefaultRenderers()", "description": "Creates default cell renderers for objects, numbers, doubles, dates,\n booleans, and icons."}, {"method_name": "createDefaultEditors", "method_sig": "protected void createDefaultEditors()", "description": "Creates default cell editors for objects, numbers, and boolean values."}, {"method_name": "initializeLocalVars", "method_sig": "protected void initializeLocalVars()", "description": "Initializes table properties to their default values."}, {"method_name": "createDefaultDataModel", "method_sig": "protected TableModel createDefaultDataModel()", "description": "Returns the default table model object, which is\n a DefaultTableModel.  A subclass can override this\n method to return a different table model object."}, {"method_name": "createDefaultColumnModel", "method_sig": "protected TableColumnModel createDefaultColumnModel()", "description": "Returns the default column model object, which is\n a DefaultTableColumnModel.  A subclass can override this\n method to return a different column model object."}, {"method_name": "createDefaultSelectionModel", "method_sig": "protected ListSelectionModel createDefaultSelectionModel()", "description": "Returns the default selection model object, which is\n a DefaultListSelectionModel.  A subclass can override this\n method to return a different selection model object."}, {"method_name": "createDefaultTableHeader", "method_sig": "protected JTableHeader createDefaultTableHeader()", "description": "Returns the default table header object, which is\n a JTableHeader.  A subclass can override this\n method to return a different table header object."}, {"method_name": "resizeAndRepaint", "method_sig": "protected void resizeAndRepaint()", "description": "Equivalent to revalidate followed by repaint."}, {"method_name": "getCellEditor", "method_sig": "public TableCellEditor getCellEditor()", "description": "Returns the active cell editor, which is null if the table\n is not currently editing."}, {"method_name": "setCellEditor", "method_sig": "@BeanProperty(description=\"The table\\'s active cell editor.\")\npublic void setCellEditor (TableCellEditor anEditor)", "description": "Sets the active cell editor."}, {"method_name": "setEditingColumn", "method_sig": "public void setEditingColumn (int aColumn)", "description": "Sets the editingColumn variable."}, {"method_name": "setEditingRow", "method_sig": "public void setEditingRow (int aRow)", "description": "Sets the editingRow variable."}, {"method_name": "getCellRenderer", "method_sig": "public TableCellRenderer getCellRenderer (int row,\n                                         int column)", "description": "Returns an appropriate renderer for the cell specified by this row and\n column. If the TableColumn for this column has a non-null\n renderer, returns that.  If not, finds the class of the data in\n this column (using getColumnClass)\n and returns the default renderer for this type of data.\n \nNote:\n Throughout the table package, the internal implementations always\n use this method to provide renderers so that this default behavior\n can be safely overridden by a subclass."}, {"method_name": "prepareRenderer", "method_sig": "public Component prepareRenderer (TableCellRenderer renderer,\n                                 int row,\n                                 int column)", "description": "Prepares the renderer by querying the data model for the\n value and selection state\n of the cell at row, column.\n Returns the component (may be a Component\n or a JComponent) under the event location.\n \n During a printing operation, this method will configure the\n renderer without indicating selection or focus, to prevent\n them from appearing in the printed output. To do other\n customizations based on whether or not the table is being\n printed, you can check the value of\n JComponent.isPaintingForPrint(), either here\n or within custom renderers.\n \nNote:\n Throughout the table package, the internal implementations always\n use this method to prepare renderers so that this default behavior\n can be safely overridden by a subclass."}, {"method_name": "getCellEditor", "method_sig": "public TableCellEditor getCellEditor (int row,\n                                     int column)", "description": "Returns an appropriate editor for the cell specified by\n row and column. If the\n TableColumn for this column has a non-null editor,\n returns that.  If not, finds the class of the data in this\n column (using getColumnClass)\n and returns the default editor for this type of data.\n \nNote:\n Throughout the table package, the internal implementations always\n use this method to provide editors so that this default behavior\n can be safely overridden by a subclass."}, {"method_name": "prepareEditor", "method_sig": "public Component prepareEditor (TableCellEditor editor,\n                               int row,\n                               int column)", "description": "Prepares the editor by querying the data model for the value and\n selection state of the cell at row, column.\n \nNote:\n Throughout the table package, the internal implementations always\n use this method to prepare editors so that this default behavior\n can be safely overridden by a subclass."}, {"method_name": "removeEditor", "method_sig": "public void removeEditor()", "description": "Discards the editor object and frees the real estate it used for\n cell rendering."}, {"method_name": "paramString", "method_sig": "protected String paramString()", "description": "Returns a string representation of this table. This method\n is intended to be used only for debugging purposes, and the\n content and format of the returned string may vary between\n implementations. The returned string may be empty but may not\n be null."}, {"method_name": "print", "method_sig": "public boolean print()\n              throws PrinterException", "description": "A convenience method that displays a printing dialog, and then prints\n this JTable in mode PrintMode.FIT_WIDTH,\n with no header or footer text. A modal progress dialog, with an abort\n option, will be shown for the duration of printing.\n \n Note: In headless mode, no dialogs are shown and printing\n occurs on the default printer."}, {"method_name": "print", "method_sig": "public boolean print (JTable.PrintMode printMode)\n              throws PrinterException", "description": "A convenience method that displays a printing dialog, and then prints\n this JTable in the given printing mode,\n with no header or footer text. A modal progress dialog, with an abort\n option, will be shown for the duration of printing.\n \n Note: In headless mode, no dialogs are shown and printing\n occurs on the default printer."}, {"method_name": "print", "method_sig": "public boolean print (JTable.PrintMode printMode,\n                     MessageFormat headerFormat,\n                     MessageFormat footerFormat)\n              throws PrinterException", "description": "A convenience method that displays a printing dialog, and then prints\n this JTable in the given printing mode,\n with the specified header and footer text. A modal progress dialog,\n with an abort option, will be shown for the duration of printing.\n \n Note: In headless mode, no dialogs are shown and printing\n occurs on the default printer."}, {"method_name": "print", "method_sig": "public boolean print (JTable.PrintMode printMode,\n                     MessageFormat headerFormat,\n                     MessageFormat footerFormat,\n                     boolean showPrintDialog,\n                     PrintRequestAttributeSet attr,\n                     boolean interactive)\n              throws PrinterException,\n                     HeadlessException", "description": "Prints this table, as specified by the fully featured\n print\n method, with the default printer specified as the print service."}, {"method_name": "print", "method_sig": "public boolean print (JTable.PrintMode printMode,\n                     MessageFormat headerFormat,\n                     MessageFormat footerFormat,\n                     boolean showPrintDialog,\n                     PrintRequestAttributeSet attr,\n                     boolean interactive,\n                     PrintService service)\n              throws PrinterException,\n                     HeadlessException", "description": "Prints this JTable. Takes steps that the majority of\n developers would take in order to print a JTable.\n In short, it prepares the table, calls getPrintable to\n fetch an appropriate Printable, and then sends it to the\n printer.\n \n A boolean parameter allows you to specify whether or not\n a printing dialog is displayed to the user. When it is, the user may\n use the dialog to change the destination printer or printing attributes,\n or even to cancel the print. Another two parameters allow for a\n PrintService and printing attributes to be specified.\n These parameters can be used either to provide initial values for the\n print dialog, or to specify values when the dialog is not shown.\n \n A second boolean parameter allows you to specify whether\n or not to perform printing in an interactive mode. If true,\n a modal progress dialog, with an abort option, is displayed for the\n duration of printing . This dialog also prevents any user action which\n may affect the table. However, it can not prevent the table from being\n modified by code (for example, another thread that posts updates using\n SwingUtilities.invokeLater). It is therefore the\n responsibility of the developer to ensure that no other code modifies\n the table in any way during printing (invalid modifications include\n changes in: size, renderers, or underlying data). Printing behavior is\n undefined when the table is changed during printing.\n \n If false is specified for this parameter, no dialog will\n be displayed and printing will begin immediately on the event-dispatch\n thread. This blocks any other events, including repaints, from being\n processed until printing is complete. Although this effectively prevents\n the table from being changed, it doesn't provide a good user experience.\n For this reason, specifying false is only recommended when\n printing from an application with no visible GUI.\n \n Note: Attempting to show the printing dialog or run interactively, while\n in headless mode, will result in a HeadlessException.\n \n Before fetching the printable, this method will gracefully terminate\n editing, if necessary, to prevent an editor from showing in the printed\n result. Additionally, JTable will prepare its renderers\n during printing such that selection and focus are not indicated.\n As far as customizing further how the table looks in the printout,\n developers can provide custom renderers or paint code that conditionalize\n on the value of JComponent.isPaintingForPrint().\n \n See getPrintable(javax.swing.JTable.PrintMode, java.text.MessageFormat, java.text.MessageFormat) for more description on how the table is\n printed."}, {"method_name": "getPrintable", "method_sig": "public Printable getPrintable (JTable.PrintMode printMode,\n                              MessageFormat headerFormat,\n                              MessageFormat footerFormat)", "description": "Return a Printable for use in printing this JTable.\n \n This method is meant for those wishing to customize the default\n Printable implementation used by JTable's\n print methods. Developers wanting simply to print the table\n should use one of those methods directly.\n \n The Printable can be requested in one of two printing modes.\n In both modes, it spreads table rows naturally in sequence across\n multiple pages, fitting as many rows as possible per page.\n PrintMode.NORMAL specifies that the table be\n printed at its current size. In this mode, there may be a need to spread\n columns across pages in a similar manner to that of the rows. When the\n need arises, columns are distributed in an order consistent with the\n table's ComponentOrientation.\n PrintMode.FIT_WIDTH specifies that the output be\n scaled smaller, if necessary, to fit the table's entire width\n (and thereby all columns) on each page. Width and height are scaled\n equally, maintaining the aspect ratio of the output.\n \n The Printable heads the portion of table on each page\n with the appropriate section from the table's JTableHeader,\n if it has one.\n \n Header and footer text can be added to the output by providing\n MessageFormat arguments. The printing code requests\n Strings from the formats, providing a single item which may be included\n in the formatted string: an Integer representing the current\n page number.\n \n You are encouraged to read the documentation for\n MessageFormat as some characters, such as single-quote,\n are special and need to be escaped.\n \n Here's an example of creating a MessageFormat that can be\n used to print \"Duke's Table: Page - \" and the current page number:\n\n \n     // notice the escaping of the single quote\n     // notice how the page number is included with \"{0}\"\n     MessageFormat format = new MessageFormat(\"Duke''s Table: Page - {0}\");\n \n\n The Printable constrains what it draws to the printable\n area of each page that it prints. Under certain circumstances, it may\n find it impossible to fit all of a page's content into that area. In\n these cases the output may be clipped, but the implementation\n makes an effort to do something reasonable. Here are a few situations\n where this is known to occur, and how they may be handled by this\n particular implementation:\n \nIn any mode, when the header or footer text is too wide to fit\n       completely in the printable area -- print as much of the text as\n       possible starting from the beginning, as determined by the table's\n       ComponentOrientation.\n   In any mode, when a row is too tall to fit in the\n       printable area -- print the upper-most portion of the row\n       and paint no lower border on the table.\n   In PrintMode.NORMAL when a column\n       is too wide to fit in the printable area -- print the center\n       portion of the column and leave the left and right borders\n       off the table.\n \n\n It is entirely valid for this Printable to be wrapped\n inside another in order to create complex reports and documents. You may\n even request that different pages be rendered into different sized\n printable areas. The implementation must be prepared to handle this\n (possibly by doing its layout calculations on the fly). However,\n providing different heights to each page will likely not work well\n with PrintMode.NORMAL when it has to spread columns\n across pages.\n \n As far as customizing how the table looks in the printed result,\n JTable itself will take care of hiding the selection\n and focus during printing. For additional customizations, your\n renderers or painting code can customize the look based on the value\n of JComponent.isPaintingForPrint()\n\n Also, before calling this method you may wish to first\n modify the state of the table, such as to cancel cell editing or\n have the user size the table appropriately. However, you must not\n modify the state of the table after this Printable\n has been fetched (invalid modifications include changes in size or\n underlying data). The behavior of the returned Printable\n is undefined once the table has been changed."}, {"method_name": "getAccessibleContext", "method_sig": "@BeanProperty(bound=false)\npublic AccessibleContext getAccessibleContext()", "description": "Gets the AccessibleContext associated with this JTable.\n For tables, the AccessibleContext takes the form of an\n AccessibleJTable.\n A new AccessibleJTable instance is created if necessary."}]}