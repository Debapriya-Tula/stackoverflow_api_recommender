{"name": "Class ZoneOffsetTransitionRule", "module": "java.base", "package": "java.time.zone", "text": "A rule expressing how to create a transition.\n \n This class allows rules for identifying future transitions to be expressed.\n A rule might be written in many forms:\n \nthe 16th March\n the Sunday on or after the 16th March\n the Sunday on or before the 16th March\n the last Sunday in February\n \n These different rule types can be expressed and queried.", "codes": ["public final class ZoneOffsetTransitionRule\nextends Object\nimplements Serializable"], "fields": [], "methods": [{"method_name": "of", "method_sig": "public static ZoneOffsetTransitionRule of (Month month,\n                                          int dayOfMonthIndicator,\n                                          DayOfWeek dayOfWeek,\n                                          LocalTime time,\n                                          boolean timeEndOfDay,\n                                          ZoneOffsetTransitionRule.TimeDefinition timeDefnition,\n                                          ZoneOffset standardOffset,\n                                          ZoneOffset offsetBefore,\n                                          ZoneOffset offsetAfter)", "description": "Obtains an instance defining the yearly rule to create transitions between two offsets.\n \n Applications should normally obtain an instance from ZoneRules.\n This factory is only intended for use when creating ZoneRules."}, {"method_name": "getMonth", "method_sig": "public Month getMonth()", "description": "Gets the month of the transition.\n \n If the rule defines an exact date then the month is the month of that date.\n \n If the rule defines a week where the transition might occur, then the month\n if the month of either the earliest or latest possible date of the cutover."}, {"method_name": "getDayOfMonthIndicator", "method_sig": "public int getDayOfMonthIndicator()", "description": "Gets the indicator of the day-of-month of the transition.\n \n If the rule defines an exact date then the day is the month of that date.\n \n If the rule defines a week where the transition might occur, then the day\n defines either the start of the end of the transition week.\n \n If the value is positive, then it represents a normal day-of-month, and is the\n earliest possible date that the transition can be.\n The date may refer to 29th February which should be treated as 1st March in non-leap years.\n \n If the value is negative, then it represents the number of days back from the\n end of the month where -1 is the last day of the month.\n In this case, the day identified is the latest possible date that the transition can be."}, {"method_name": "getDayOfWeek", "method_sig": "public DayOfWeek getDayOfWeek()", "description": "Gets the day-of-week of the transition.\n \n If the rule defines an exact date then this returns null.\n \n If the rule defines a week where the cutover might occur, then this method\n returns the day-of-week that the month-day will be adjusted to.\n If the day is positive then the adjustment is later.\n If the day is negative then the adjustment is earlier."}, {"method_name": "getLocalTime", "method_sig": "public LocalTime getLocalTime()", "description": "Gets the local time of day of the transition which must be checked with\n isMidnightEndOfDay().\n \n The time is converted into an instant using the time definition."}, {"method_name": "isMidnightEndOfDay", "method_sig": "public boolean isMidnightEndOfDay()", "description": "Is the transition local time midnight at the end of day.\n \n The transition may be represented as occurring at 24:00."}, {"method_name": "getTimeDefinition", "method_sig": "public ZoneOffsetTransitionRule.TimeDefinition getTimeDefinition()", "description": "Gets the time definition, specifying how to convert the time to an instant.\n \n The local time can be converted to an instant using the standard offset,\n the wall offset or UTC."}, {"method_name": "getStandardOffset", "method_sig": "public ZoneOffset getStandardOffset()", "description": "Gets the standard offset in force at the transition."}, {"method_name": "getOffsetBefore", "method_sig": "public ZoneOffset getOffsetBefore()", "description": "Gets the offset before the transition."}, {"method_name": "getOffsetAfter", "method_sig": "public ZoneOffset getOffsetAfter()", "description": "Gets the offset after the transition."}, {"method_name": "createTransition", "method_sig": "public ZoneOffsetTransition createTransition (int year)", "description": "Creates a transition instance for the specified year.\n \n Calculations are performed using the ISO-8601 chronology."}, {"method_name": "equals", "method_sig": "public boolean equals (Object otherRule)", "description": "Checks if this object equals another.\n \n The entire state of the object is compared."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Returns a suitable hash code."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a string describing this object."}]}