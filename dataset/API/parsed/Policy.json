{"name": "Class Policy", "module": "java.base", "package": "java.security", "text": "A Policy object is responsible for determining whether code executing\n in the Java runtime environment has permission to perform a\n security-sensitive operation.\n\n  There is only one Policy object installed in the runtime at any\n given time.  A Policy object can be installed by calling the\n setPolicy method.  The installed Policy object can be\n obtained by calling the getPolicy method.\n\n  If no Policy object has been installed in the runtime, a call to\n getPolicy installs an instance of the default Policy\n implementation (a default subclass implementation of this abstract class).\n The default Policy implementation can be changed by setting the value\n of the policy.provider security property to the fully qualified\n name of the desired Policy subclass implementation. The system class loader\n is used to load this class.\n\n  Application code can directly subclass Policy to provide a custom\n implementation.  In addition, an instance of a Policy object can be\n constructed by invoking one of the getInstance factory methods\n with a standard type.  The default policy type is \"JavaPolicy\".\n\n  Once a Policy instance has been installed (either by default, or by\n calling setPolicy), the Java runtime invokes its\n implies method when it needs to\n determine whether executing code (encapsulated in a ProtectionDomain)\n can perform SecurityManager-protected operations.  How a Policy object\n retrieves its policy data is up to the Policy implementation itself.\n The policy data may be stored, for example, in a flat ASCII file,\n in a serialized binary file of the Policy class, or in a database.\n\n  The refresh method causes the policy object to\n refresh/reload its data.  This operation is implementation-dependent.\n For example, if the policy object stores its data in configuration files,\n calling refresh will cause it to re-read the configuration\n policy files.  If a refresh operation is not supported, this method does\n nothing.  Note that refreshed policy may not have an effect on classes\n in a particular ProtectionDomain. This is dependent on the Policy\n provider's implementation of the implies\n method and its PermissionCollection caching strategy.", "codes": ["public abstract class Policy\nextends Object"], "fields": [{"field_name": "UNSUPPORTED_EMPTY_COLLECTION", "field_sig": "public static final\u00a0PermissionCollection UNSUPPORTED_EMPTY_COLLECTION", "description": "A read-only empty PermissionCollection instance."}], "methods": [{"method_name": "getPolicy", "method_sig": "public static Policy getPolicy()", "description": "Returns the installed Policy object. This value should not be cached,\n as it may be changed by a call to setPolicy.\n This method first calls\n SecurityManager.checkPermission with a\n SecurityPermission(\"getPolicy\") permission\n to ensure it's ok to get the Policy object."}, {"method_name": "setPolicy", "method_sig": "public static void setPolicy (Policy p)", "description": "Sets the system-wide Policy object. This method first calls\n SecurityManager.checkPermission with a\n SecurityPermission(\"setPolicy\")\n permission to ensure it's ok to set the Policy."}, {"method_name": "getInstance", "method_sig": "public static Policy getInstance (String type,\n                                 Policy.Parameters params)\n                          throws NoSuchAlgorithmException", "description": "Returns a Policy object of the specified type.\n\n  This method traverses the list of registered security providers,\n starting with the most preferred Provider.\n A new Policy object encapsulating the\n PolicySpi implementation from the first\n Provider that supports the specified type is returned.\n\n  Note that the list of registered providers may be retrieved via\n the Security.getProviders() method."}, {"method_name": "getInstance", "method_sig": "public static Policy getInstance (String type,\n                                 Policy.Parameters params,\n                                 String provider)\n                          throws NoSuchProviderException,\n                                 NoSuchAlgorithmException", "description": "Returns a Policy object of the specified type.\n\n  A new Policy object encapsulating the\n PolicySpi implementation from the specified provider\n is returned.   The specified provider must be registered\n in the provider list.\n\n  Note that the list of registered providers may be retrieved via\n the Security.getProviders() method."}, {"method_name": "getInstance", "method_sig": "public static Policy getInstance (String type,\n                                 Policy.Parameters params,\n                                 Provider provider)\n                          throws NoSuchAlgorithmException", "description": "Returns a Policy object of the specified type.\n\n  A new Policy object encapsulating the\n PolicySpi implementation from the specified Provider\n object is returned.  Note that the specified Provider object\n does not have to be registered in the provider list."}, {"method_name": "getProvider", "method_sig": "public Provider getProvider()", "description": "Return the Provider of this Policy.\n\n  This Policy instance will only have a Provider if it\n was obtained via a call to Policy.getInstance.\n Otherwise this method returns null."}, {"method_name": "getType", "method_sig": "public String getType()", "description": "Return the type of this Policy.\n\n  This Policy instance will only have a type if it\n was obtained via a call to Policy.getInstance.\n Otherwise this method returns null."}, {"method_name": "getParameters", "method_sig": "public Policy.Parameters getParameters()", "description": "Return Policy parameters.\n\n  This Policy instance will only have parameters if it\n was obtained via a call to Policy.getInstance.\n Otherwise this method returns null."}, {"method_name": "getPermissions", "method_sig": "public PermissionCollection getPermissions (CodeSource codesource)", "description": "Return a PermissionCollection object containing the set of\n permissions granted to the specified CodeSource.\n\n  Applications are discouraged from calling this method\n since this operation may not be supported by all policy implementations.\n Applications should solely rely on the implies method\n to perform policy checks.  If an application absolutely must call\n a getPermissions method, it should call\n getPermissions(ProtectionDomain).\n\n  The default implementation of this method returns\n Policy.UNSUPPORTED_EMPTY_COLLECTION.  This method can be\n overridden if the policy implementation can return a set of\n permissions granted to a CodeSource."}, {"method_name": "getPermissions", "method_sig": "public PermissionCollection getPermissions (ProtectionDomain domain)", "description": "Return a PermissionCollection object containing the set of\n permissions granted to the specified ProtectionDomain.\n\n  Applications are discouraged from calling this method\n since this operation may not be supported by all policy implementations.\n Applications should rely on the implies method\n to perform policy checks.\n\n  The default implementation of this method first retrieves\n the permissions returned via getPermissions(CodeSource)\n (the CodeSource is taken from the specified ProtectionDomain),\n as well as the permissions located inside the specified ProtectionDomain.\n All of these permissions are then combined and returned in a new\n PermissionCollection object.  If getPermissions(CodeSource)\n returns Policy.UNSUPPORTED_EMPTY_COLLECTION, then this method\n returns the permissions contained inside the specified ProtectionDomain\n in a new PermissionCollection object.\n\n  This method can be overridden if the policy implementation\n supports returning a set of permissions granted to a ProtectionDomain."}, {"method_name": "implies", "method_sig": "public boolean implies (ProtectionDomain domain,\n                       Permission permission)", "description": "Evaluates the global policy for the permissions granted to\n the ProtectionDomain and tests whether the permission is\n granted."}, {"method_name": "refresh", "method_sig": "public void refresh()", "description": "Refreshes/reloads the policy configuration. The behavior of this method\n depends on the implementation. For example, calling refresh\n on a file-based policy will cause the file to be re-read.\n\n  The default implementation of this method does nothing.\n This method should be overridden if a refresh operation is supported\n by the policy implementation."}]}