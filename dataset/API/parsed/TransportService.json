{"name": "Class TransportService", "module": "jdk.jdi", "package": "com.sun.jdi.connect.spi", "text": "A transport service for connections between a debugger and\n a target VM.\n\n  A transport service is a concrete subclass of this class\n that has a zero-argument constructor and implements the abstract\n methods specified below. It is the underlying service\n used by a Transport for connections between a debugger\n and a target VM.\n\n  A transport service is used to establish a connection\n between a debugger and a target VM, and to transport Java\n Debug Wire Protocol (JDWP) packets over an underlying\n communication protocol. In essence a transport service\n implementation binds JDWP (as specified in the\n \n JDWP specification) to an underlying communication\n protocol. A transport service implementation provides\n a reliable JDWP packet transportation service. JDWP\n packets are sent to and from the target VM without duplication\n or data loss. A transport service implementation may be\n based on an underlying communication protocol that is\n reliable or unreliable. If the underlying communication\n protocol is reliable then the transport service implementation\n may be relatively simple and may only need to transport JDWP\n packets as payloads of the underlying communication\n protocol. In the case of an unreliable communication\n protocol the transport service implementation may include\n additional protocol support in order to ensure that packets\n are not duplicated and that there is no data loss. The\n details of such protocols are specific to the implementation\n but may involve techniques such as the positive\n acknowledgment with retransmission technique used in\n protocols such as the Transmission Control Protocol (TCP)\n (see  RFC 793\n ).\n\n  A transport service can be used to initiate a connection\n to a target VM. This is done by invoking the attach(java.lang.String, long, long)\n method. Alternatively, a transport service can listen and\n accept connections initiated by a target VM. This is done\n by invoking the startListening(String) method to\n put the transport into listen mode. Then the accept(com.sun.jdi.connect.spi.TransportService.ListenKey, long, long)\n method is used to accept a connection initiated by a\n target VM.", "codes": ["public abstract class TransportService\nextends Object"], "fields": [], "methods": [{"method_name": "name", "method_sig": "public abstract String name()", "description": "Returns a name to identify the transport service."}, {"method_name": "description", "method_sig": "public abstract String description()", "description": "Returns a description of the transport service."}, {"method_name": "capabilities", "method_sig": "public abstract TransportService.Capabilities capabilities()", "description": "Returns the capabilities of the transport service."}, {"method_name": "attach", "method_sig": "public abstract Connection attach (String address,\n                                  long attachTimeout,\n                                  long handshakeTimeout)\n                           throws IOException", "description": "Attaches to the specified address.\n\n  Attaches to the specified address and returns a connection\n representing the bi-directional communication channel to the\n target VM.\n\n  Attaching to the target VM involves two steps:\n First, a connection is established to specified address. This\n is followed by a handshake to ensure that the connection is\n to a target VM. The handshake involves the exchange\n of a string JDWP-Handshake as specified in the \n Java Debug Wire Protocol specification."}, {"method_name": "startListening", "method_sig": "public abstract TransportService.ListenKey startListening (String address)\n                                                   throws IOException", "description": "Listens on the specified address for inbound connections.\n\n  This method starts the transport service listening on\n the specified address so that it can subsequently accept\n an inbound connection. It does not wait until an inbound\n connection is established."}, {"method_name": "startListening", "method_sig": "public abstract TransportService.ListenKey startListening()\n                                                   throws IOException", "description": "Listens on an address chosen by the transport service.\n\n  This convenience method works as if by invoking\n startListening(null)."}, {"method_name": "stopListening", "method_sig": "public abstract void stopListening (TransportService.ListenKey listenKey)\n                            throws IOException", "description": "Stop listening for inbound connections.\n\n  Invoking this method while another thread is blocked\n in accept, with the same listen key,\n waiting to accept a connection will cause that thread to\n throw an IOException. If the thread blocked in accept\n has already accepted a connection from a target VM and\n is in the process of handshaking with the target VM then\n invoking this method will not cause the thread to throw\n an exception."}, {"method_name": "accept", "method_sig": "public abstract Connection accept (TransportService.ListenKey listenKey,\n                                  long acceptTimeout,\n                                  long handshakeTimeout)\n                           throws IOException", "description": "Accept a connection from a target VM.\n\n  Waits (indefinitely or with timeout) to accept a connection\n from a target VM. Returns a connection representing the\n bi-directional communication channel to the target VM.\n\n  Accepting a connection from a target VM involves two\n steps. First, the transport service waits to accept\n the connection from the target VM. Once the connection is\n established a handshake is performed to ensure that the\n connection is indeed to a target VM. The handshake involves\n the exchange of a string JDWP-Handshake as specified\n in the \n Java Debug Wire Protocol specification."}]}