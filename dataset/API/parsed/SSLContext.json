{"name": "Class SSLContext", "module": "java.base", "package": "javax.net.ssl", "text": "Instances of this class represent a secure socket protocol\n implementation which acts as a factory for secure socket\n factories or SSLEngines. This class is initialized\n with an optional set of key and trust managers and source of\n secure random bytes.\n\n  Every implementation of the Java platform is required to support the\n following standard SSLContext protocols:\n \nTLSv1\nTLSv1.1\nTLSv1.2\n\n These protocols are described in the \n SSLContext section of the\n Java Security Standard Algorithm Names Specification.\n Consult the release documentation for your implementation to see if any\n other algorithms are supported.", "codes": ["public class SSLContext\nextends Object"], "fields": [], "methods": [{"method_name": "getDefault", "method_sig": "public static SSLContext getDefault()\n                             throws NoSuchAlgorithmException", "description": "Returns the default SSL context.\n\n If a default context was set using the SSLContext.setDefault() method, it is returned. Otherwise, the first\n call of this method triggers the call\n SSLContext.getInstance(\"Default\").\n If successful, that object is made the default SSL context and returned.\n\n The default context is immediately\n usable and does not require initialization."}, {"method_name": "setDefault", "method_sig": "public static void setDefault (SSLContext context)", "description": "Sets the default SSL context. It will be returned by subsequent calls\n to getDefault(). The default context must be immediately usable\n and not require initialization."}, {"method_name": "getInstance", "method_sig": "public static SSLContext getInstance (String protocol)\n                              throws NoSuchAlgorithmException", "description": "Returns a SSLContext object that implements the\n specified secure socket protocol.\n\n  This method traverses the list of registered security Providers,\n starting with the most preferred Provider.\n A new SSLContext object encapsulating the\n SSLContextSpi implementation from the first\n Provider that supports the specified protocol is returned.\n\n  Note that the list of registered providers may be retrieved via\n the Security.getProviders() method."}, {"method_name": "getInstance", "method_sig": "public static SSLContext getInstance (String protocol,\n                                     String provider)\n                              throws NoSuchAlgorithmException,\n                                     NoSuchProviderException", "description": "Returns a SSLContext object that implements the\n specified secure socket protocol.\n\n  A new SSLContext object encapsulating the\n SSLContextSpi implementation from the specified provider\n is returned.  The specified provider must be registered\n in the security provider list.\n\n  Note that the list of registered providers may be retrieved via\n the Security.getProviders() method."}, {"method_name": "getInstance", "method_sig": "public static SSLContext getInstance (String protocol,\n                                     Provider provider)\n                              throws NoSuchAlgorithmException", "description": "Returns a SSLContext object that implements the\n specified secure socket protocol.\n\n  A new SSLContext object encapsulating the\n SSLContextSpi implementation from the specified Provider\n object is returned.  Note that the specified Provider object\n does not have to be registered in the provider list."}, {"method_name": "getProtocol", "method_sig": "public final String getProtocol()", "description": "Returns the protocol name of this SSLContext object.\n\n This is the same name that was specified in one of the\n getInstance calls that created this\n SSLContext object."}, {"method_name": "getProvider", "method_sig": "public final Provider getProvider()", "description": "Returns the provider of this SSLContext object."}, {"method_name": "init", "method_sig": "public final void init (KeyManager[] km,\n                       TrustManager[] tm,\n                       SecureRandom random)\n                throws KeyManagementException", "description": "Initializes this context. Either of the first two parameters\n may be null in which case the installed security providers will\n be searched for the highest priority implementation of the\n appropriate factory. Likewise, the secure random parameter may\n be null in which case the default implementation will be used.\n \n Only the first instance of a particular key and/or trust manager\n implementation type in the array is used.  (For example, only\n the first javax.net.ssl.X509KeyManager in the array will be used.)"}, {"method_name": "getSocketFactory", "method_sig": "public final SSLSocketFactory getSocketFactory()", "description": "Returns a SocketFactory object for this\n context."}, {"method_name": "getServerSocketFactory", "method_sig": "public final SSLServerSocketFactory getServerSocketFactory()", "description": "Returns a ServerSocketFactory object for\n this context."}, {"method_name": "createSSLEngine", "method_sig": "public final SSLEngine createSSLEngine()", "description": "Creates a new SSLEngine using this context.\n \n Applications using this factory method are providing no hints\n for an internal session reuse strategy. If hints are desired,\n createSSLEngine(String, int) should be used\n instead.\n \n Some cipher suites (such as Kerberos) require remote hostname\n information, in which case this factory method should not be used."}, {"method_name": "createSSLEngine", "method_sig": "public final SSLEngine createSSLEngine (String peerHost,\n                                       int peerPort)", "description": "Creates a new SSLEngine using this context using\n advisory peer information.\n \n Applications using this factory method are providing hints\n for an internal session reuse strategy.\n \n Some cipher suites (such as Kerberos) require remote hostname\n information, in which case peerHost needs to be specified."}, {"method_name": "getServerSessionContext", "method_sig": "public final SSLSessionContext getServerSessionContext()", "description": "Returns the server session context, which represents the set of\n SSL sessions available for use during the handshake phase of\n server-side SSL sockets.\n \n This context may be unavailable in some environments, in which\n case this method returns null. For example, when the underlying\n SSL provider does not provide an implementation of SSLSessionContext\n interface, this method returns null. A non-null session context\n is returned otherwise."}, {"method_name": "getClientSessionContext", "method_sig": "public final SSLSessionContext getClientSessionContext()", "description": "Returns the client session context, which represents the set of\n SSL sessions available for use during the handshake phase of\n client-side SSL sockets.\n \n This context may be unavailable in some environments, in which\n case this method returns null. For example, when the underlying\n SSL provider does not provide an implementation of SSLSessionContext\n interface, this method returns null. A non-null session context\n is returned otherwise."}, {"method_name": "getDefaultSSLParameters", "method_sig": "public final SSLParameters getDefaultSSLParameters()", "description": "Returns a copy of the SSLParameters indicating the default\n settings for this SSL context.\n\n The parameters will always have the ciphersuites and protocols\n arrays set to non-null values."}, {"method_name": "getSupportedSSLParameters", "method_sig": "public final SSLParameters getSupportedSSLParameters()", "description": "Returns a copy of the SSLParameters indicating the supported\n settings for this SSL context.\n\n The parameters will always have the ciphersuites and protocols\n arrays set to non-null values."}]}