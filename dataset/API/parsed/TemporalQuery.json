{"name": "Interface TemporalQuery<R>", "module": "java.base", "package": "java.time.temporal", "text": "Strategy for querying a temporal object.\n \n Queries are a key tool for extracting information from temporal objects.\n They exist to externalize the process of querying, permitting different\n approaches, as per the strategy design pattern.\n Examples might be a query that checks if the date is the day before February 29th\n in a leap year, or calculates the number of days to your next birthday.\n \n The TemporalField interface provides another mechanism for querying\n temporal objects. That interface is limited to returning a long.\n By contrast, queries can return any type.\n \n There are two equivalent ways of using a TemporalQuery.\n The first is to invoke the method on this interface directly.\n The second is to use TemporalAccessor.query(TemporalQuery):\n \n   // these two lines are equivalent, but the second approach is recommended\n   temporal = thisQuery.queryFrom(temporal);\n   temporal = temporal.query(thisQuery);\n \n It is recommended to use the second approach, query(TemporalQuery),\n as it is a lot clearer to read in code.\n \n The most common implementations are method references, such as\n LocalDate::from and ZoneId::from.\n Additional common queries are provided as static methods in TemporalQueries.", "codes": ["@FunctionalInterface\npublic interface TemporalQuery<R>"], "fields": [], "methods": [{"method_name": "queryFrom", "method_sig": "R queryFrom (TemporalAccessor temporal)", "description": "Queries the specified temporal object.\n \n This queries the specified temporal object to return an object using the logic\n encapsulated in the implementing class.\n Examples might be a query that checks if the date is the day before February 29th\n in a leap year, or calculates the number of days to your next birthday.\n \n There are two equivalent ways of using this method.\n The first is to invoke this method directly.\n The second is to use TemporalAccessor.query(TemporalQuery):\n \n   // these two lines are equivalent, but the second approach is recommended\n   temporal = thisQuery.queryFrom(temporal);\n   temporal = temporal.query(thisQuery);\n \n It is recommended to use the second approach, query(TemporalQuery),\n as it is a lot clearer to read in code."}]}