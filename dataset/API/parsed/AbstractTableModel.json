{"name": "Class AbstractTableModel", "module": "java.desktop", "package": "javax.swing.table", "text": "This abstract class provides default implementations for most of\n  the methods in the TableModel interface. It takes care of\n  the management of listeners and provides some conveniences for generating\n  TableModelEvents and dispatching them to the listeners.\n  To create a concrete TableModel as a subclass of\n  AbstractTableModel you need only provide implementations\n  for the following three methods:\n\n  \n  public int getRowCount();\n  public int getColumnCount();\n  public Object getValueAt(int row, int column);\n  \n\nWarning:\n Serialized objects of this class will not be compatible with\n future Swing releases. The current serialization support is\n appropriate for short term storage or RMI between applications running\n the same version of Swing.  As of 1.4, support for long term storage\n of all JavaBeans\u2122\n has been added to the java.beans package.\n Please see XMLEncoder.", "codes": ["public abstract class AbstractTableModel\nextends Object\nimplements TableModel, Serializable"], "fields": [{"field_name": "listenerList", "field_sig": "protected\u00a0EventListenerList listenerList", "description": "List of listeners"}], "methods": [{"method_name": "getColumnName", "method_sig": "public String getColumnName (int column)", "description": "Returns a default name for the column using spreadsheet conventions:\n  A, B, C, ... Z, AA, AB, etc.  If column cannot be found,\n  returns an empty string."}, {"method_name": "findColumn", "method_sig": "public int findColumn (String columnName)", "description": "Returns a column given its name.\n Implementation is naive so this should be overridden if\n this method is to be called often. This method is not\n in the TableModel interface and is not used by the\n JTable."}, {"method_name": "getColumnClass", "method_sig": "public Class<?> getColumnClass (int columnIndex)", "description": "Returns Object.class regardless of columnIndex."}, {"method_name": "isCellEditable", "method_sig": "public boolean isCellEditable (int rowIndex,\n                              int columnIndex)", "description": "Returns false.  This is the default implementation for all cells."}, {"method_name": "setValueAt", "method_sig": "public void setValueAt (Object aValue,\n                       int rowIndex,\n                       int columnIndex)", "description": "This empty implementation is provided so users don't have to implement\n  this method if their data model is not editable."}, {"method_name": "addTableModelListener", "method_sig": "public void addTableModelListener (TableModelListener l)", "description": "Adds a listener to the list that's notified each time a change\n to the data model occurs."}, {"method_name": "removeTableModelListener", "method_sig": "public void removeTableModelListener (TableModelListener l)", "description": "Removes a listener from the list that's notified each time a\n change to the data model occurs."}, {"method_name": "getTableModelListeners", "method_sig": "public TableModelListener[] getTableModelListeners()", "description": "Returns an array of all the table model listeners\n registered on this model."}, {"method_name": "fireTableDataChanged", "method_sig": "public void fireTableDataChanged()", "description": "Notifies all listeners that all cell values in the table's\n rows may have changed. The number of rows may also have changed\n and the JTable should redraw the\n table from scratch. The structure of the table (as in the order of the\n columns) is assumed to be the same."}, {"method_name": "fireTableStructureChanged", "method_sig": "public void fireTableStructureChanged()", "description": "Notifies all listeners that the table's structure has changed.\n The number of columns in the table, and the names and types of\n the new columns may be different from the previous state.\n If the JTable receives this event and its\n autoCreateColumnsFromModel\n flag is set it discards any table columns that it had and reallocates\n default columns in the order they appear in the model. This is the\n same as calling setModel(TableModel) on the\n JTable."}, {"method_name": "fireTableRowsInserted", "method_sig": "public void fireTableRowsInserted (int firstRow,\n                                  int lastRow)", "description": "Notifies all listeners that rows in the range\n [firstRow, lastRow], inclusive, have been inserted."}, {"method_name": "fireTableRowsUpdated", "method_sig": "public void fireTableRowsUpdated (int firstRow,\n                                 int lastRow)", "description": "Notifies all listeners that rows in the range\n [firstRow, lastRow], inclusive, have been updated."}, {"method_name": "fireTableRowsDeleted", "method_sig": "public void fireTableRowsDeleted (int firstRow,\n                                 int lastRow)", "description": "Notifies all listeners that rows in the range\n [firstRow, lastRow], inclusive, have been deleted."}, {"method_name": "fireTableCellUpdated", "method_sig": "public void fireTableCellUpdated (int row,\n                                 int column)", "description": "Notifies all listeners that the value of the cell at\n [row, column] has been updated."}, {"method_name": "fireTableChanged", "method_sig": "public void fireTableChanged (TableModelEvent e)", "description": "Forwards the given notification event to all\n TableModelListeners that registered\n themselves as listeners for this table model."}, {"method_name": "getListeners", "method_sig": "public <T extends EventListener> T[] getListeners (Class<T> listenerType)", "description": "Returns an array of all the objects currently registered\n as FooListeners\n upon this AbstractTableModel.\n FooListeners are registered using the\n addFooListener method.\n\n \n\n You can specify the listenerType argument\n with a class literal,\n such as\n FooListener.class.\n For example, you can query a\n model m\n for its table model listeners with the following code:\n\n TableModelListener[] tmls = (TableModelListener[])(m.getListeners(TableModelListener.class));\n\n If no such listeners exist, this method returns an empty array."}]}