{"name": "Class ExtendedSSLSession", "module": "java.base", "package": "javax.net.ssl", "text": "Extends the SSLSession interface to support additional\n session attributes.", "codes": ["public abstract class ExtendedSSLSession\nextends Object\nimplements SSLSession"], "fields": [], "methods": [{"method_name": "getLocalSupportedSignatureAlgorithms", "method_sig": "public abstract String[] getLocalSupportedSignatureAlgorithms()", "description": "Obtains an array of supported signature algorithms that the local side\n is willing to use.\n \n Note: this method is used to indicate to the peer which signature\n algorithms may be used for digital signatures in TLS/DTLS 1.2. It is\n not meaningful for TLS/DTLS versions prior to 1.2.\n \n The signature algorithm name must be a standard Java Security\n name (such as \"SHA1withRSA\", \"SHA256withECDSA\", and so on).\n See the \n Java Security Standard Algorithm Names document\n for information about standard algorithm names.\n \n Note: the local supported signature algorithms should conform to\n the algorithm constraints specified by\n getAlgorithmConstraints()\n method in SSLParameters."}, {"method_name": "getPeerSupportedSignatureAlgorithms", "method_sig": "public abstract String[] getPeerSupportedSignatureAlgorithms()", "description": "Obtains an array of supported signature algorithms that the peer is\n able to use.\n \n Note: this method is used to indicate to the local side which signature\n algorithms may be used for digital signatures in TLS/DTLS 1.2. It is\n not meaningful for TLS/DTLS versions prior to 1.2.\n \n The signature algorithm name must be a standard Java Security\n name (such as \"SHA1withRSA\", \"SHA256withECDSA\", and so on).\n See the \n Java Security Standard Algorithm Names document\n for information about standard algorithm names."}, {"method_name": "getRequestedServerNames", "method_sig": "public List<SNIServerName> getRequestedServerNames()", "description": "Obtains a List containing all SNIServerNames\n of the requested Server Name Indication (SNI) extension.\n \n In server mode, unless the return List is empty,\n the server should use the requested server names to guide its\n selection of an appropriate authentication certificate, and/or\n other aspects of security policy.\n \n In client mode, unless the return List is empty,\n the client should use the requested server names to guide its\n endpoint identification of the peer's identity, and/or\n other aspects of security policy."}, {"method_name": "getStatusResponses", "method_sig": "public List<byte[]> getStatusResponses()", "description": "Returns a List containing DER-encoded OCSP responses\n (using the ASN.1 type OCSPResponse defined in RFC 6960) for\n the client to verify status of the server's certificate during\n handshaking.\n\n \n This method only applies to certificate-based server\n authentication.  An X509ExtendedTrustManager will use the\n returned value for server certificate validation."}]}