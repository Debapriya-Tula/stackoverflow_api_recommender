{"name": "Interface PrimitiveIterator<T,\u200bT_CONS>", "module": "java.base", "package": "java.util", "text": "A base type for primitive specializations of Iterator.  Specialized\n subtypes are provided for int, long, and\n double values.\n\n The specialized subtype default implementations of Iterator.next()\n and Iterator.forEachRemaining(java.util.function.Consumer) box\n primitive values to instances of their corresponding wrapper class.  Such\n boxing may offset any advantages gained when using the primitive\n specializations.  To avoid boxing, the corresponding primitive-based methods\n should be used.  For example, PrimitiveIterator.OfInt.nextInt() and\n PrimitiveIterator.OfInt.forEachRemaining(java.util.function.IntConsumer)\n should be used in preference to PrimitiveIterator.OfInt.next() and\n PrimitiveIterator.OfInt.forEachRemaining(java.util.function.Consumer).\n\n Iteration of primitive values using boxing-based methods\n next() and\n forEachRemaining(),\n does not affect the order in which the values, transformed to boxed values,\n are encountered.", "codes": ["public interface PrimitiveIterator<T, T_CONS>\nextends Iterator<T>"], "fields": [], "methods": [{"method_name": "forEachRemaining", "method_sig": "void forEachRemaining (T_CONS action)", "description": "Performs the given action for each remaining element, in the order\n elements occur when iterating, until all elements have been processed\n or the action throws an exception.  Errors or runtime exceptions\n thrown by the action are relayed to the caller."}]}