{"name": "Interface MissingMemberHandlerFactory", "module": "jdk.dynalink", "package": "jdk.dynalink.beans", "text": "A factory for creating method handles for linking missing member behavior\n in BeansLinker. BeansLinker links these method handles into guarded\n invocations for link requests specifying GET_* and SET_*\nStandardOperations when it is either certain or possible that the\n requested member (property, method, or element) is missing. They will be\n linked both for named and unnamed operations. The\n implementer must ensure that the parameter types of the returned method\n handle match the parameter types of the call site described in the link\n request. The return types can differ, though, to allow\n DynamicLinkerFactory.setPrelinkTransformer(jdk.dynalink.linker.GuardedInvocationTransformer)\n late return type transformations}. It is allowed to return null for a\n method handle if the default behavior is sufficient.\n Default missing member behavior\n When a BeansLinker is configured without a missing member handler\n factory, or the factory returns null for a particular handler\n creation invocation, the default behavior is used. The default behavior is to\n return null from\n GuardingDynamicLinker.getGuardedInvocation(LinkRequest, LinkerServices) when it\n can be determined at link time that the linked operation will never address\n an existing member. This lets the DynamicLinker attempt the next\n linker if there is one, or ultimately fail the link request with\n NoSuchDynamicMethodException. For other cases (typically all unnamed\n member operations as well as most named operations on collection elements)\n BeansLinker will produce a conditional linkage that will return\n null when invoked at runtime with a name that does not match any\n member for getters and silently ignore the passed values for setters.\n Implementing exception-throwing behavior\n Note that if the language-specific behavior for an operation on a missing\n member is to throw an exception then the factory should produce a method\n handle that throws the exception when invoked, and must not throw an\n exception itself, as the linkage for the missing member is often conditional.", "codes": ["@FunctionalInterface\npublic interface MissingMemberHandlerFactory"], "fields": [], "methods": [{"method_name": "createMissingMemberHandler", "method_sig": "MethodHandle createMissingMemberHandler (LinkRequest linkRequest,\n                                        LinkerServices linkerServices)\n                                 throws Exception", "description": "Returns a method handle suitable for implementing missing member behavior\n for a particular link request. See the class description for details."}]}