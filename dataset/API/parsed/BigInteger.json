{"name": "Class BigInteger", "module": "java.base", "package": "java.math", "text": "Immutable arbitrary-precision integers.  All operations behave as if\n BigIntegers were represented in two's-complement notation (like Java's\n primitive integer types).  BigInteger provides analogues to all of Java's\n primitive integer operators, and all relevant methods from java.lang.Math.\n Additionally, BigInteger provides operations for modular arithmetic, GCD\n calculation, primality testing, prime generation, bit manipulation,\n and a few other miscellaneous operations.\n\n Semantics of arithmetic operations exactly mimic those of Java's integer\n arithmetic operators, as defined in The Java\u2122 Language Specification.\n For example, division by zero throws an ArithmeticException, and\n division of a negative by a positive yields a negative (or zero) remainder.\n\n Semantics of shift operations extend those of Java's shift operators\n to allow for negative shift distances.  A right-shift with a negative\n shift distance results in a left shift, and vice-versa.  The unsigned\n right shift operator (>>>) is omitted since this operation\n only makes sense for a fixed sized word and not for a\n representation conceptually having an infinite number of leading\n virtual sign bits.\n\n Semantics of bitwise logical operations exactly mimic those of Java's\n bitwise integer operators.  The binary operators (and,\n or, xor) implicitly perform sign extension on the shorter\n of the two operands prior to performing the operation.\n\n Comparison operations perform signed integer comparisons, analogous to\n those performed by Java's relational and equality operators.\n\n Modular arithmetic operations are provided to compute residues, perform\n exponentiation, and compute multiplicative inverses.  These methods always\n return a non-negative result, between 0 and (modulus - 1),\n inclusive.\n\n Bit operations operate on a single bit of the two's-complement\n representation of their operand.  If necessary, the operand is sign-\n extended so that it contains the designated bit.  None of the single-bit\n operations can produce a BigInteger with a different sign from the\n BigInteger being operated on, as they affect only a single bit, and the\n arbitrarily large abstraction provided by this class ensures that conceptually\n there are infinitely many \"virtual sign bits\" preceding each BigInteger.\n\n For the sake of brevity and clarity, pseudo-code is used throughout the\n descriptions of BigInteger methods.  The pseudo-code expression\n (i + j) is shorthand for \"a BigInteger whose value is\n that of the BigInteger i plus that of the BigInteger j.\"\n The pseudo-code expression (i == j) is shorthand for\n \"true if and only if the BigInteger i represents the same\n value as the BigInteger j.\"  Other pseudo-code expressions are\n interpreted similarly.\n\n All methods and constructors in this class throw\n NullPointerException when passed\n a null object reference for any input parameter.\n\n BigInteger must support values in the range\n -2Integer.MAX_VALUE (exclusive) to\n +2Integer.MAX_VALUE (exclusive)\n and may support values outside of that range.\n\n An ArithmeticException is thrown when a BigInteger\n constructor or method would generate a value outside of the\n supported range.\n\n The range of probable prime values is limited and may be less than\n the full supported positive range of BigInteger.\n The range must be at least 1 to 2500000000.", "codes": ["public class BigInteger\nextends Number\nimplements Comparable<BigInteger>"], "fields": [{"field_name": "ZERO", "field_sig": "public static final\u00a0BigInteger ZERO", "description": "The BigInteger constant zero."}, {"field_name": "ONE", "field_sig": "public static final\u00a0BigInteger ONE", "description": "The BigInteger constant one."}, {"field_name": "TWO", "field_sig": "public static final\u00a0BigInteger TWO", "description": "The BigInteger constant two."}, {"field_name": "TEN", "field_sig": "public static final\u00a0BigInteger TEN", "description": "The BigInteger constant ten."}], "methods": [{"method_name": "probablePrime", "method_sig": "public static BigInteger probablePrime (int bitLength,\n                                       Random rnd)", "description": "Returns a positive BigInteger that is probably prime, with the\n specified bitLength. The probability that a BigInteger returned\n by this method is composite does not exceed 2-100."}, {"method_name": "nextProbablePrime", "method_sig": "public BigInteger nextProbablePrime()", "description": "Returns the first integer greater than this BigInteger that\n is probably prime.  The probability that the number returned by this\n method is composite does not exceed 2-100. This method will\n never skip over a prime when searching: if it returns p, there\n is no prime q such that this < q < p."}, {"method_name": "valueOf", "method_sig": "public static BigInteger valueOf (long val)", "description": "Returns a BigInteger whose value is equal to that of the\n specified long."}, {"method_name": "add", "method_sig": "public BigInteger add (BigInteger val)", "description": "Returns a BigInteger whose value is (this + val)."}, {"method_name": "subtract", "method_sig": "public BigInteger subtract (BigInteger val)", "description": "Returns a BigInteger whose value is (this - val)."}, {"method_name": "multiply", "method_sig": "public BigInteger multiply (BigInteger val)", "description": "Returns a BigInteger whose value is (this * val)."}, {"method_name": "divide", "method_sig": "public BigInteger divide (BigInteger val)", "description": "Returns a BigInteger whose value is (this / val)."}, {"method_name": "divideAndRemainder", "method_sig": "public BigInteger[] divideAndRemainder (BigInteger val)", "description": "Returns an array of two BigIntegers containing (this / val)\n followed by (this % val)."}, {"method_name": "remainder", "method_sig": "public BigInteger remainder (BigInteger val)", "description": "Returns a BigInteger whose value is (this % val)."}, {"method_name": "pow", "method_sig": "public BigInteger pow (int exponent)", "description": "Returns a BigInteger whose value is (thisexponent).\n Note that exponent is an integer rather than a BigInteger."}, {"method_name": "sqrt", "method_sig": "public BigInteger sqrt()", "description": "Returns the integer square root of this BigInteger.  The integer square\n root of the corresponding mathematical integer n is the largest\n mathematical integer s such that s*s <= n.  It is equal\n to the value of floor(sqrt(n)), where sqrt(n) denotes the\n real square root of n treated as a real.  Note that the integer\n square root will be less than the real square root if the latter is not\n representable as an integral value."}, {"method_name": "sqrtAndRemainder", "method_sig": "public BigInteger[] sqrtAndRemainder()", "description": "Returns an array of two BigIntegers containing the integer square root\n s of this and its remainder this - s*s,\n respectively."}, {"method_name": "gcd", "method_sig": "public BigInteger gcd (BigInteger val)", "description": "Returns a BigInteger whose value is the greatest common divisor of\n abs(this) and abs(val).  Returns 0 if\n this == 0 && val == 0."}, {"method_name": "abs", "method_sig": "public BigInteger abs()", "description": "Returns a BigInteger whose value is the absolute value of this\n BigInteger."}, {"method_name": "negate", "method_sig": "public BigInteger negate()", "description": "Returns a BigInteger whose value is (-this)."}, {"method_name": "signum", "method_sig": "public int signum()", "description": "Returns the signum function of this BigInteger."}, {"method_name": "mod", "method_sig": "public BigInteger mod (BigInteger m)", "description": "Returns a BigInteger whose value is (this mod m).  This method\n differs from remainder in that it always returns a\n non-negative BigInteger."}, {"method_name": "modPow", "method_sig": "public BigInteger modPow (BigInteger exponent,\n                         BigInteger m)", "description": "Returns a BigInteger whose value is\n (thisexponent mod m).  (Unlike pow, this\n method permits negative exponents.)"}, {"method_name": "modInverse", "method_sig": "public BigInteger modInverse (BigInteger m)", "description": "Returns a BigInteger whose value is (this-1 mod m)."}, {"method_name": "shiftLeft", "method_sig": "public BigInteger shiftLeft (int n)", "description": "Returns a BigInteger whose value is (this << n).\n The shift distance, n, may be negative, in which case\n this method performs a right shift.\n (Computes floor(this * 2n).)"}, {"method_name": "shiftRight", "method_sig": "public BigInteger shiftRight (int n)", "description": "Returns a BigInteger whose value is (this >> n).  Sign\n extension is performed.  The shift distance, n, may be\n negative, in which case this method performs a left shift.\n (Computes floor(this / 2n).)"}, {"method_name": "and", "method_sig": "public BigInteger and (BigInteger val)", "description": "Returns a BigInteger whose value is (this & val).  (This\n method returns a negative BigInteger if and only if this and val are\n both negative.)"}, {"method_name": "or", "method_sig": "public BigInteger or (BigInteger val)", "description": "Returns a BigInteger whose value is (this | val).  (This method\n returns a negative BigInteger if and only if either this or val is\n negative.)"}, {"method_name": "xor", "method_sig": "public BigInteger xor (BigInteger val)", "description": "Returns a BigInteger whose value is (this ^ val).  (This method\n returns a negative BigInteger if and only if exactly one of this and\n val are negative.)"}, {"method_name": "not", "method_sig": "public BigInteger not()", "description": "Returns a BigInteger whose value is (~this).  (This method\n returns a negative value if and only if this BigInteger is\n non-negative.)"}, {"method_name": "andNot", "method_sig": "public BigInteger andNot (BigInteger val)", "description": "Returns a BigInteger whose value is (this & ~val).  This\n method, which is equivalent to and(val.not()), is provided as\n a convenience for masking operations.  (This method returns a negative\n BigInteger if and only if this is negative and val is\n positive.)"}, {"method_name": "testBit", "method_sig": "public boolean testBit (int n)", "description": "Returns true if and only if the designated bit is set.\n (Computes ((this & (1<<n)) != 0).)"}, {"method_name": "setBit", "method_sig": "public BigInteger setBit (int n)", "description": "Returns a BigInteger whose value is equivalent to this BigInteger\n with the designated bit set.  (Computes (this | (1<<n)).)"}, {"method_name": "clearBit", "method_sig": "public BigInteger clearBit (int n)", "description": "Returns a BigInteger whose value is equivalent to this BigInteger\n with the designated bit cleared.\n (Computes (this & ~(1<<n)).)"}, {"method_name": "flipBit", "method_sig": "public BigInteger flipBit (int n)", "description": "Returns a BigInteger whose value is equivalent to this BigInteger\n with the designated bit flipped.\n (Computes (this ^ (1<<n)).)"}, {"method_name": "getLowestSetBit", "method_sig": "public int getLowestSetBit()", "description": "Returns the index of the rightmost (lowest-order) one bit in this\n BigInteger (the number of zero bits to the right of the rightmost\n one bit).  Returns -1 if this BigInteger contains no one bits.\n (Computes (this == 0? -1 : log2(this & -this)).)"}, {"method_name": "bitLength", "method_sig": "public int bitLength()", "description": "Returns the number of bits in the minimal two's-complement\n representation of this BigInteger, excluding a sign bit.\n For positive BigIntegers, this is equivalent to the number of bits in\n the ordinary binary representation.  For zero this method returns\n 0.  (Computes (ceil(log2(this < 0 ? -this : this+1))).)"}, {"method_name": "bitCount", "method_sig": "public int bitCount()", "description": "Returns the number of bits in the two's complement representation\n of this BigInteger that differ from its sign bit.  This method is\n useful when implementing bit-vector style sets atop BigIntegers."}, {"method_name": "isProbablePrime", "method_sig": "public boolean isProbablePrime (int certainty)", "description": "Returns true if this BigInteger is probably prime,\n false if it's definitely composite.  If\n certainty is \u2264 0, true is\n returned."}, {"method_name": "compareTo", "method_sig": "public int compareTo (BigInteger val)", "description": "Compares this BigInteger with the specified BigInteger.  This\n method is provided in preference to individual methods for each\n of the six boolean comparison operators (<, ==,\n >, >=, !=, <=).  The suggested\n idiom for performing these comparisons is: \n (x.compareTo(y) <op> 0), where\n <op> is one of the six comparison operators."}, {"method_name": "equals", "method_sig": "public boolean equals (Object x)", "description": "Compares this BigInteger with the specified Object for equality."}, {"method_name": "min", "method_sig": "public BigInteger min (BigInteger val)", "description": "Returns the minimum of this BigInteger and val."}, {"method_name": "max", "method_sig": "public BigInteger max (BigInteger val)", "description": "Returns the maximum of this BigInteger and val."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Returns the hash code for this BigInteger."}, {"method_name": "toString", "method_sig": "public String toString (int radix)", "description": "Returns the String representation of this BigInteger in the\n given radix.  If the radix is outside the range from Character.MIN_RADIX to Character.MAX_RADIX inclusive,\n it will default to 10 (as is the case for\n Integer.toString).  The digit-to-character mapping\n provided by Character.forDigit is used, and a minus\n sign is prepended if appropriate.  (This representation is\n compatible with the (String,\n int) constructor.)"}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns the decimal String representation of this BigInteger.\n The digit-to-character mapping provided by\n Character.forDigit is used, and a minus sign is\n prepended if appropriate.  (This representation is compatible\n with the (String) constructor, and\n allows for String concatenation with Java's + operator.)"}, {"method_name": "toByteArray", "method_sig": "public byte[] toByteArray()", "description": "Returns a byte array containing the two's-complement\n representation of this BigInteger.  The byte array will be in\n big-endian byte-order: the most significant byte is in\n the zeroth element.  The array will contain the minimum number\n of bytes required to represent this BigInteger, including at\n least one sign bit, which is (ceil((this.bitLength() +\n 1)/8)).  (This representation is compatible with the\n (byte[]) constructor.)"}, {"method_name": "intValue", "method_sig": "public int intValue()", "description": "Converts this BigInteger to an int.  This\n conversion is analogous to a\n narrowing primitive conversion from long to\n int as defined in\n The Java\u2122 Language Specification:\n if this BigInteger is too big to fit in an\n int, only the low-order 32 bits are returned.\n Note that this conversion can lose information about the\n overall magnitude of the BigInteger value as well as return a\n result with the opposite sign."}, {"method_name": "longValue", "method_sig": "public long longValue()", "description": "Converts this BigInteger to a long.  This\n conversion is analogous to a\n narrowing primitive conversion from long to\n int as defined in\n The Java\u2122 Language Specification:\n if this BigInteger is too big to fit in a\n long, only the low-order 64 bits are returned.\n Note that this conversion can lose information about the\n overall magnitude of the BigInteger value as well as return a\n result with the opposite sign."}, {"method_name": "floatValue", "method_sig": "public float floatValue()", "description": "Converts this BigInteger to a float.  This\n conversion is similar to the\n narrowing primitive conversion from double to\n float as defined in\n The Java\u2122 Language Specification:\n if this BigInteger has too great a magnitude\n to represent as a float, it will be converted to\n Float.NEGATIVE_INFINITY or Float.POSITIVE_INFINITY as appropriate.  Note that even when\n the return value is finite, this conversion can lose\n information about the precision of the BigInteger value."}, {"method_name": "doubleValue", "method_sig": "public double doubleValue()", "description": "Converts this BigInteger to a double.  This\n conversion is similar to the\n narrowing primitive conversion from double to\n float as defined in\n The Java\u2122 Language Specification:\n if this BigInteger has too great a magnitude\n to represent as a double, it will be converted to\n Double.NEGATIVE_INFINITY or Double.POSITIVE_INFINITY as appropriate.  Note that even when\n the return value is finite, this conversion can lose\n information about the precision of the BigInteger value."}, {"method_name": "longValueExact", "method_sig": "public long longValueExact()", "description": "Converts this BigInteger to a long, checking\n for lost information.  If the value of this BigInteger\n is out of the range of the long type, then an\n ArithmeticException is thrown."}, {"method_name": "intValueExact", "method_sig": "public int intValueExact()", "description": "Converts this BigInteger to an int, checking\n for lost information.  If the value of this BigInteger\n is out of the range of the int type, then an\n ArithmeticException is thrown."}, {"method_name": "shortValueExact", "method_sig": "public short shortValueExact()", "description": "Converts this BigInteger to a short, checking\n for lost information.  If the value of this BigInteger\n is out of the range of the short type, then an\n ArithmeticException is thrown."}, {"method_name": "byteValueExact", "method_sig": "public byte byteValueExact()", "description": "Converts this BigInteger to a byte, checking\n for lost information.  If the value of this BigInteger\n is out of the range of the byte type, then an\n ArithmeticException is thrown."}]}