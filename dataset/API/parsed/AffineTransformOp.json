{"name": "Class AffineTransformOp", "module": "java.desktop", "package": "java.awt.image", "text": "This class uses an affine transform to perform a linear mapping from\n 2D coordinates in the source image or Raster to 2D coordinates\n in the destination image or Raster.\n The type of interpolation that is used is specified through a constructor,\n either by a RenderingHints object or by one of the integer\n interpolation types defined in this class.\n \n If a RenderingHints object is specified in the constructor, the\n interpolation hint and the rendering quality hint are used to set\n the interpolation type for this operation.  The color rendering hint\n and the dithering hint can be used when color conversion is required.\n \n Note that the following constraints have to be met:\n \nThe source and destination must be different.\n For Raster objects, the number of bands in the source must\n be equal to the number of bands in the destination.\n ", "codes": ["public class AffineTransformOp\nextends Object\nimplements BufferedImageOp, RasterOp"], "fields": [{"field_name": "TYPE_NEAREST_NEIGHBOR", "field_sig": "@Native\npublic static final\u00a0int TYPE_NEAREST_NEIGHBOR", "description": "Nearest-neighbor interpolation type."}, {"field_name": "TYPE_BILINEAR", "field_sig": "@Native\npublic static final\u00a0int TYPE_BILINEAR", "description": "Bilinear interpolation type."}, {"field_name": "TYPE_BICUBIC", "field_sig": "@Native\npublic static final\u00a0int TYPE_BICUBIC", "description": "Bicubic interpolation type."}], "methods": [{"method_name": "getInterpolationType", "method_sig": "public final int getInterpolationType()", "description": "Returns the interpolation type used by this op."}, {"method_name": "filter", "method_sig": "public final BufferedImage filter (BufferedImage src,\n                                  BufferedImage dst)", "description": "Transforms the source BufferedImage and stores the results\n in the destination BufferedImage.\n If the color models for the two images do not match, a color\n conversion into the destination color model is performed.\n If the destination image is null,\n a BufferedImage is created with the source\n ColorModel.\n \n The coordinates of the rectangle returned by\n getBounds2D(BufferedImage)\n are not necessarily the same as the coordinates of the\n BufferedImage returned by this method.  If the\n upper-left corner coordinates of the rectangle are\n negative then this part of the rectangle is not drawn.  If the\n upper-left corner coordinates of the  rectangle are positive\n then the filtered image is drawn at that position in the\n destination BufferedImage.\n \n An IllegalArgumentException is thrown if the source is\n the same as the destination."}, {"method_name": "filter", "method_sig": "public final WritableRaster filter (Raster src,\n                                   WritableRaster dst)", "description": "Transforms the source Raster and stores the results in\n the destination Raster.  This operation performs the\n transform band by band.\n \n If the destination Raster is null, a new\n Raster is created.\n An IllegalArgumentException may be thrown if the source is\n the same as the destination or if the number of bands in\n the source is not equal to the number of bands in the\n destination.\n \n The coordinates of the rectangle returned by\n getBounds2D(Raster)\n are not necessarily the same as the coordinates of the\n WritableRaster returned by this method.  If the\n upper-left corner coordinates of rectangle are negative then\n this part of the rectangle is not drawn.  If the coordinates\n of the rectangle are positive then the filtered image is drawn at\n that position in the destination Raster."}, {"method_name": "getBounds2D", "method_sig": "public final Rectangle2D getBounds2D (BufferedImage src)", "description": "Returns the bounding box of the transformed destination.  The\n rectangle returned is the actual bounding box of the\n transformed points.  The coordinates of the upper-left corner\n of the returned rectangle might not be (0,\u00a00)."}, {"method_name": "getBounds2D", "method_sig": "public final Rectangle2D getBounds2D (Raster src)", "description": "Returns the bounding box of the transformed destination.  The\n rectangle returned will be the actual bounding box of the\n transformed points.  The coordinates of the upper-left corner\n of the returned rectangle might not be (0,\u00a00)."}, {"method_name": "createCompatibleDestImage", "method_sig": "public BufferedImage createCompatibleDestImage (BufferedImage src,\n                                               ColorModel destCM)", "description": "Creates a zeroed destination image with the correct size and number of\n bands.  A RasterFormatException may be thrown if the\n transformed width or height is equal to 0.\n \n If destCM is null,\n an appropriate ColorModel is used; this\n ColorModel may have\n an alpha channel even if the source ColorModel is opaque."}, {"method_name": "createCompatibleDestRaster", "method_sig": "public WritableRaster createCompatibleDestRaster (Raster src)", "description": "Creates a zeroed destination Raster with the correct size\n and number of bands.  A RasterFormatException may be thrown\n if the transformed width or height is equal to 0."}, {"method_name": "getPoint2D", "method_sig": "public final Point2D getPoint2D (Point2D srcPt,\n                                Point2D dstPt)", "description": "Returns the location of the corresponding destination point given a\n point in the source.  If dstPt is specified, it\n is used to hold the return value."}, {"method_name": "getTransform", "method_sig": "public final AffineTransform getTransform()", "description": "Returns the affine transform used by this transform operation."}, {"method_name": "getRenderingHints", "method_sig": "public final RenderingHints getRenderingHints()", "description": "Returns the rendering hints used by this transform operation."}]}