{"name": "Class SynthSpinnerUI", "module": "java.desktop", "package": "javax.swing.plaf.synth", "text": "Provides the Synth L&F UI delegate for\n JSpinner.", "codes": ["public class SynthSpinnerUI\nextends BasicSpinnerUI\nimplements PropertyChangeListener, SynthUI"], "fields": [], "methods": [{"method_name": "createUI", "method_sig": "public static ComponentUI createUI (JComponent c)", "description": "Returns a new instance of SynthSpinnerUI."}, {"method_name": "installDefaults", "method_sig": "protected void installDefaults()", "description": "Initializes the JSpinner border,\n foreground, and background, properties\n based on the corresponding \"Spinner.*\" properties from defaults table.\n The JSpinners layout is set to the value returned by\n createLayout.  This method is called by installUI."}, {"method_name": "uninstallDefaults", "method_sig": "protected void uninstallDefaults()", "description": "Sets the JSpinner's layout manager to null.  This\n method is called by uninstallUI."}, {"method_name": "createEditor", "method_sig": "protected JComponent createEditor()", "description": "This method is called by installUI to get the editor component\n of the JSpinner.  By default it just returns\n JSpinner.getEditor().  Subclasses can override\n createEditor to return a component that contains\n the spinner's editor or null, if they're going to handle adding\n the editor to the JSpinner in an\n installUI override.\n \n Typically this method would be overridden to wrap the editor\n with a container with a custom border, since one can't assume\n that the editors border can be set directly.\n \n The replaceEditor method is called when the spinners\n editor is changed with JSpinner.setEditor.  If you've\n overriden this method, then you'll probably want to override\n replaceEditor as well."}, {"method_name": "replaceEditor", "method_sig": "protected void replaceEditor (JComponent oldEditor,\n                             JComponent newEditor)", "description": "Called by the PropertyChangeListener when the\n JSpinner editor property changes.  It's the responsibility\n of this method to remove the old editor and add the new one.  By\n default this operation is just:\n \n spinner.remove(oldEditor);\n spinner.add(newEditor, \"Editor\");\n \n The implementation of replaceEditor should be coordinated\n with the createEditor method."}, {"method_name": "update", "method_sig": "public void update (Graphics g,\n                   JComponent c)", "description": "Notifies this UI delegate to repaint the specified component.\n This method paints the component background, then calls\n the paint(SynthContext,Graphics) method.\n\n In general, this method does not need to be overridden by subclasses.\n All Look and Feel rendering code should reside in the paint method."}, {"method_name": "paint", "method_sig": "public void paint (Graphics g,\n                  JComponent c)", "description": "Paints the specified component according to the Look and Feel.\n This method is not used by Synth Look and Feel.\n Painting is handled by the paint(SynthContext,Graphics) method."}, {"method_name": "paint", "method_sig": "protected void paint (SynthContext context,\n                     Graphics g)", "description": "Paints the specified component. This implementation does nothing."}]}