{"name": "Class TextComponent", "module": "java.desktop", "package": "java.awt", "text": "The TextComponent class is the superclass of\n any component that allows the editing of some text.\n \n A text component embodies a string of text.  The\n TextComponent class defines a set of methods\n that determine whether or not this text is editable. If the\n component is editable, it defines another set of methods\n that supports a text insertion caret.\n \n In addition, the class defines methods that are used\n to maintain a current selection from the text.\n The text selection, a substring of the component's text,\n is the target of editing operations. It is also referred\n to as the selected text.", "codes": ["public class TextComponent\nextends Component\nimplements Accessible"], "fields": [{"field_name": "textListener", "field_sig": "protected transient\u00a0TextListener textListener", "description": "A list of listeners that will receive events from this object."}], "methods": [{"method_name": "enableInputMethods", "method_sig": "public void enableInputMethods (boolean enable)", "description": "Enables or disables input method support for this text component. If input\n method support is enabled and the text component also processes key events,\n incoming events are offered to the current input method and will only be\n processed by the component or dispatched to its listeners if the input method\n does not consume them. Whether and how input method support for this text\n component is enabled or disabled by default is implementation dependent."}, {"method_name": "addNotify", "method_sig": "public void addNotify()", "description": "Makes this Component displayable by connecting it to a\n native screen resource.\n This method is called internally by the toolkit and should\n not be called directly by programs."}, {"method_name": "removeNotify", "method_sig": "public void removeNotify()", "description": "Removes the TextComponent's peer.\n The peer allows us to modify the appearance of the\n TextComponent without changing its\n functionality."}, {"method_name": "setText", "method_sig": "public void setText (String t)", "description": "Sets the text that is presented by this\n text component to be the specified text."}, {"method_name": "getText", "method_sig": "public String getText()", "description": "Returns the text that is presented by this text component.\n By default, this is an empty string."}, {"method_name": "getSelectedText", "method_sig": "public String getSelectedText()", "description": "Returns the selected text from the text that is\n presented by this text component."}, {"method_name": "isEditable", "method_sig": "public boolean isEditable()", "description": "Indicates whether or not this text component is editable."}, {"method_name": "setEditable", "method_sig": "public void setEditable (boolean b)", "description": "Sets the flag that determines whether or not this\n text component is editable.\n \n If the flag is set to true, this text component\n becomes user editable. If the flag is set to false,\n the user cannot change the text of this text component.\n By default, non-editable text components have a background color\n of SystemColor.control.  This default can be overridden by\n calling setBackground."}, {"method_name": "getBackground", "method_sig": "public Color getBackground()", "description": "Gets the background color of this text component.\n\n By default, non-editable text components have a background color\n of SystemColor.control.  This default can be overridden by\n calling setBackground."}, {"method_name": "setBackground", "method_sig": "public void setBackground (Color c)", "description": "Sets the background color of this text component."}, {"method_name": "getSelectionStart", "method_sig": "public int getSelectionStart()", "description": "Gets the start position of the selected text in\n this text component."}, {"method_name": "setSelectionStart", "method_sig": "public void setSelectionStart (int selectionStart)", "description": "Sets the selection start for this text component to\n the specified position. The new start point is constrained\n to be at or before the current selection end. It also\n cannot be set to less than zero, the beginning of the\n component's text.\n If the caller supplies a value for selectionStart\n that is out of bounds, the method enforces these constraints\n silently, and without failure."}, {"method_name": "getSelectionEnd", "method_sig": "public int getSelectionEnd()", "description": "Gets the end position of the selected text in\n this text component."}, {"method_name": "setSelectionEnd", "method_sig": "public void setSelectionEnd (int selectionEnd)", "description": "Sets the selection end for this text component to\n the specified position. The new end point is constrained\n to be at or after the current selection start. It also\n cannot be set beyond the end of the component's text.\n If the caller supplies a value for selectionEnd\n that is out of bounds, the method enforces these constraints\n silently, and without failure."}, {"method_name": "select", "method_sig": "public void select (int selectionStart,\n                   int selectionEnd)", "description": "Selects the text between the specified start and end positions.\n \n This method sets the start and end positions of the\n selected text, enforcing the restriction that the start position\n must be greater than or equal to zero.  The end position must be\n greater than or equal to the start position, and less than or\n equal to the length of the text component's text.  The\n character positions are indexed starting with zero.\n The length of the selection is\n endPosition - startPosition, so the\n character at endPosition is not selected.\n If the start and end positions of the selected text are equal,\n all text is deselected.\n \n If the caller supplies values that are inconsistent or out of\n bounds, the method enforces these constraints silently, and\n without failure. Specifically, if the start position or end\n position is greater than the length of the text, it is reset to\n equal the text length. If the start position is less than zero,\n it is reset to zero, and if the end position is less than the\n start position, it is reset to the start position."}, {"method_name": "selectAll", "method_sig": "public void selectAll()", "description": "Selects all the text in this text component."}, {"method_name": "setCaretPosition", "method_sig": "public void setCaretPosition (int position)", "description": "Sets the position of the text insertion caret.\n The caret position is constrained to be between 0\n and the last character of the text, inclusive.\n If the passed-in value is greater than this range,\n the value is set to the last character (or 0 if\n the TextComponent contains no text)\n and no error is returned.  If the passed-in value is\n less than 0, an IllegalArgumentException\n is thrown."}, {"method_name": "getCaretPosition", "method_sig": "public int getCaretPosition()", "description": "Returns the position of the text insertion caret.\n The caret position is constrained to be between 0\n and the last character of the text, inclusive.\n If the text or caret have not been set, the default\n caret position is 0."}, {"method_name": "addTextListener", "method_sig": "public void addTextListener (TextListener l)", "description": "Adds the specified text event listener to receive text events\n from this text component.\n If l is null, no exception is\n thrown and no action is performed.\n Refer to AWT Threading Issues for details on AWT's threading model."}, {"method_name": "removeTextListener", "method_sig": "public void removeTextListener (TextListener l)", "description": "Removes the specified text event listener so that it no longer\n receives text events from this text component\n If l is null, no exception is\n thrown and no action is performed.\n Refer to AWT Threading Issues for details on AWT's threading model."}, {"method_name": "getTextListeners", "method_sig": "public TextListener[] getTextListeners()", "description": "Returns an array of all the text listeners\n registered on this text component."}, {"method_name": "getListeners", "method_sig": "public <T extends EventListener> T[] getListeners (Class<T> listenerType)", "description": "Returns an array of all the objects currently registered\n as FooListeners\n upon this TextComponent.\n FooListeners are registered using the\n addFooListener method.\n\n \n You can specify the listenerType argument\n with a class literal, such as\n FooListener.class.\n For example, you can query a\n TextComponent t\n for its text listeners with the following code:\n\n TextListener[] tls = (TextListener[])(t.getListeners(TextListener.class));\n\n If no such listeners exist, this method returns an empty array."}, {"method_name": "processEvent", "method_sig": "protected void processEvent (AWTEvent e)", "description": "Processes events on this text component. If the event is a\n TextEvent, it invokes the processTextEvent\n method else it invokes its superclass's processEvent.\n Note that if the event parameter is null\n the behavior is unspecified and may result in an\n exception."}, {"method_name": "processTextEvent", "method_sig": "protected void processTextEvent (TextEvent e)", "description": "Processes text events occurring on this text component by\n dispatching them to any registered TextListener objects.\n \n NOTE: This method will not be called unless text events\n are enabled for this component. This happens when one of the\n following occurs:\n \nA TextListener object is registered\n via addTextListener\nText events are enabled via enableEvents\n\nNote that if the event parameter is null\n the behavior is unspecified and may result in an\n exception."}, {"method_name": "paramString", "method_sig": "protected String paramString()", "description": "Returns a string representing the state of this\n TextComponent. This\n method is intended to be used only for debugging purposes, and the\n content and format of the returned string may vary between\n implementations. The returned string may be empty but may not be\n null."}, {"method_name": "getAccessibleContext", "method_sig": "public AccessibleContext getAccessibleContext()", "description": "Gets the AccessibleContext associated with this TextComponent.\n For text components, the AccessibleContext takes the form of an\n AccessibleAWTTextComponent.\n A new AccessibleAWTTextComponent instance is created if necessary."}]}