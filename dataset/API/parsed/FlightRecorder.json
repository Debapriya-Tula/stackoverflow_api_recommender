{"name": "Class FlightRecorder", "module": "jdk.jfr", "package": "jdk.jfr", "text": "Class for accessing, controlling, and managing Flight Recorder.\n \n This class provides the methods necessary for creating, starting, stopping,\n and destroying recordings.", "codes": ["public final class FlightRecorder\nextends Object"], "fields": [], "methods": [{"method_name": "getRecordings", "method_sig": "public List<Recording> getRecordings()", "description": "Returns an immutable list of the available recordings.\n \n A recording becomes available when it is created. It becomes unavailable when it\n is in the CLOSED state, typically after a call to\n Recording.close()."}, {"method_name": "takeSnapshot", "method_sig": "public Recording takeSnapshot()", "description": "Creates a snapshot of all available recorded data.\n \n A snapshot is a synthesized recording in a STOPPPED state. If no data is\n available, a recording with size 0 is returned.\n \n A snapshot provides stable access to data for later operations (for example,\n operations to change the interval or to reduce the data size).\n \n The following example shows how to create a snapshot and write a subset of the data to a file.\n\n \n \n try (Recording snapshot = FlightRecorder.getFlightRecorder().takeSnapshot()) {\n   if (snapshot.getSize() > 0) {\n     snapshot.setMaxSize(100_000_000);\n     snapshot.setMaxAge(Duration.ofMinutes(5));\n     snapshot.dump(Paths.get(\"snapshot.jfr\"));\n   }\n }\n \n \n\n The caller must close the recording when access to the data is no longer\n needed."}, {"method_name": "register", "method_sig": "public static void register (Class<? extends Event> eventClass)", "description": "Registers an event class.\n \n If the event class is already registered, then the invocation of this method is\n ignored."}, {"method_name": "unregister", "method_sig": "public static void unregister (Class<? extends Event> eventClass)", "description": "Unregisters an event class.\n \n If the event class is not registered, then the invocation of this method is\n ignored."}, {"method_name": "getFlightRecorder", "method_sig": "public static FlightRecorder getFlightRecorder()\n                                        throws IllegalStateException,\n                                               SecurityException", "description": "Returns the Flight Recorder for the platform."}, {"method_name": "addPeriodicEvent", "method_sig": "public static void addPeriodicEvent (Class<? extends Event> eventClass,\n                                    Runnable hook)\n                             throws SecurityException", "description": "Adds a hook for a periodic event.\n \n The implementation of the hook should return as soon as possible, to\n avoid blocking other Flight Recorder operations. The hook should emit\n one or more events of the specified type. When a hook is added, the\n interval at which the call is invoked is configurable using the\n \"period\" setting."}, {"method_name": "removePeriodicEvent", "method_sig": "public static boolean removePeriodicEvent (Runnable hook)\n                                   throws SecurityException", "description": "Removes a hook for a periodic event."}, {"method_name": "getEventTypes", "method_sig": "public List<EventType> getEventTypes()", "description": "Returns an immutable list that contains all currently registered events.\n \n By default, events are registered when they are first used, typically\n when an event object is allocated. To ensure an event is visible early,\n registration can be triggered by invoking the\n register(Class) method."}, {"method_name": "addListener", "method_sig": "public static void addListener (FlightRecorderListener changeListener)", "description": "Adds a recorder listener and captures the AccessControlContext to\n use when invoking the listener.\n \n If Flight Recorder is already initialized when the listener is added, then the method\n FlightRecorderListener.recorderInitialized(FlightRecorder) method is\n invoked before returning from this method."}, {"method_name": "removeListener", "method_sig": "public static boolean removeListener (FlightRecorderListener changeListener)", "description": "Removes a recorder listener.\n \n If the same listener is added multiple times, only one instance is\n removed."}, {"method_name": "isAvailable", "method_sig": "public static boolean isAvailable()", "description": "Returns true if the Java Virtual Machine (JVM) has Flight Recorder capabilities.\n \n This method can quickly check whether Flight Recorder can be\n initialized, without actually doing the initialization work. The value may\n change during runtime and it is not safe to cache it."}, {"method_name": "isInitialized", "method_sig": "public static boolean isInitialized()", "description": "Returns true if Flight Recorder is initialized."}]}