{"name": "Class Runtime.Version", "module": "java.base", "package": "java.lang", "text": "A representation of a version string for an implementation of the\n Java\u00a0SE Platform.  A version string consists of a version number\n optionally followed by pre-release and build information.\n\n Version numbers\n A version number, $VNUM, is a non-empty sequence of\n elements separated by period characters (U+002E).  An element is either\n zero, or an unsigned integer numeral without leading zeros.  The final\n element in a version number must not be zero.  When an element is\n incremented, all subsequent elements are removed.  The format is: \n\n [1-9][0-9]*((\\.0)*\\.[1-9][0-9]*)*\n \n The sequence may be of arbitrary length but the first four elements\n are assigned specific meanings, as follows:\n\n $FEATURE.$INTERIM.$UPDATE.$PATCH\n \n\n $FEATURE \u2014 The\n feature-release counter, incremented for every feature release\n regardless of release content.  Features may be added in a feature\n release; they may also be removed, if advance notice was given at least\n one feature release ahead of time.  Incompatible changes may be made\n when justified. \n $INTERIM \u2014 The\n interim-release counter, incremented for non-feature releases that\n contain compatible bug fixes and enhancements but no incompatible\n changes, no feature removals, and no changes to standard APIs.\n \n $UPDATE \u2014 The update-release\n counter, incremented for compatible update releases that fix security\n issues, regressions, and bugs in newer features. \n $PATCH \u2014 The emergency\n patch-release counter, incremented only when it's necessary to produce\n an emergency release to fix a critical issue. \n\n The fifth and later elements of a version number are free for use by\n platform implementors, to identify implementor-specific patch\n releases. \n A version number never has trailing zero elements.  If an element\n and all those that follow it logically have the value zero then all of\n them are omitted. \n The sequence of numerals in a version number is compared to another\n such sequence in numerical, pointwise fashion; e.g., \n 10.0.4 is less than 10.1.2.  If one sequence is shorter than\n another then the missing elements of the shorter sequence are considered\n to be less than the corresponding elements of the longer sequence;\n e.g., 10.0.2 is less than 10.0.2.1. \nVersion strings\n A version string, $VSTR, is a version number \n $VNUM, as described above, optionally followed by pre-release and build\n information, in one of the following formats: \n\n     $VNUM(-$PRE)?\\+$BUILD(-$OPT)?\n     $VNUM-$PRE(-$OPT)?\n     $VNUM(+-$OPT)?\n \n where: \n\n $PRE, matching ([a-zA-Z0-9]+)\n \u2014 A pre-release identifier.  Typically ea, for a\n potentially unstable early-access release under active development, or\n internal, for an internal developer build. \n $BUILD, matching \n (0|[1-9][0-9]*) \u2014 The build number, incremented for each promoted\n build.  $BUILD is reset to 1 when any portion of \n $VNUM is incremented. \n $OPT, matching ([-a-zA-Z0-9.]+)\n \u2014 Additional build information, if desired.  In the case of an\n internal build this will often contain the date and time of the\n build. \n\n A version string 10-ea matches $VNUM = \"10\" and\n $PRE = \"ea\".  The version string 10+-ea matches\n $VNUM = \"10\" and $OPT = \"ea\". \n When comparing two version strings, the value of $OPT, if\n present, may or may not be significant depending on the chosen\n comparison method.  The comparison methods compareTo() and compareToIgnoreOptional() should be used consistently with the\n corresponding methods equals() and equalsIgnoreOptional().  \n A short version string, $SVSTR, often useful in\n less formal contexts, is a version number optionally followed by a\n pre-release identifier:\n\n     $VNUM(-$PRE)?\n \nThis is a value-based\n class; use of identity-sensitive operations (including reference equality\n (==), identity hash code, or synchronization) on instances of\n Version may have unpredictable results and should be avoided.\n ", "codes": ["public static final class Runtime.Version\nextends Object\nimplements Comparable<Runtime.Version>"], "fields": [], "methods": [{"method_name": "parse", "method_sig": "public static Runtime.Version parse (String s)", "description": "Parses the given string as a valid\n version string containing a\n version number followed by pre-release and\n build information."}, {"method_name": "feature", "method_sig": "public int feature()", "description": "Returns the value of the feature element of\n the version number."}, {"method_name": "interim", "method_sig": "public int interim()", "description": "Returns the value of the interim element of\n the version number, or zero if it is absent."}, {"method_name": "update", "method_sig": "public int update()", "description": "Returns the value of the update element of the\n version number, or zero if it is absent."}, {"method_name": "patch", "method_sig": "public int patch()", "description": "Returns the value of the patch element of the\n version number, or zero if it is absent."}, {"method_name": "major", "method_sig": "@Deprecated(since=\"10\")\npublic int major()", "description": "Returns the value of the major element of the version number."}, {"method_name": "minor", "method_sig": "@Deprecated(since=\"10\")\npublic int minor()", "description": "Returns the value of the minor element of the version number, or\n zero if it is absent."}, {"method_name": "security", "method_sig": "@Deprecated(since=\"10\")\npublic int security()", "description": "Returns the value of the security element of the version number, or\n zero if it is absent."}, {"method_name": "version", "method_sig": "public List<Integer> version()", "description": "Returns an unmodifiable List of the integers\n represented in the version number.\n The List always contains at least one element corresponding to\n the feature version number."}, {"method_name": "pre", "method_sig": "public Optional<String> pre()", "description": "Returns the optional pre-release information."}, {"method_name": "build", "method_sig": "public Optional<Integer> build()", "description": "Returns the build number."}, {"method_name": "optional", "method_sig": "public Optional<String> optional()", "description": "Returns optional additional identifying build\n information."}, {"method_name": "compareTo", "method_sig": "public int compareTo (Runtime.Version obj)", "description": "Compares this version to another.\n\n  Each of the components in the version is\n compared in the following order of precedence: version numbers,\n pre-release identifiers, build numbers, optional build information.\n \n Comparison begins by examining the sequence of version numbers.\n If one sequence is shorter than another, then the missing elements\n of the shorter sequence are considered to be less than the\n corresponding elements of the longer sequence. \n A version with a pre-release identifier is always considered to\n be less than a version without one.  Pre-release identifiers are\n compared numerically when they consist only of digits, and\n lexicographically otherwise.  Numeric identifiers are considered to\n be less than non-numeric identifiers.  \n A version without a build number is always less than one with a\n build number; otherwise build numbers are compared numerically. \n The optional build information is compared lexicographically.\n During this comparison, a version with optional build information is\n considered to be greater than a version without one. "}, {"method_name": "compareToIgnoreOptional", "method_sig": "public int compareToIgnoreOptional (Runtime.Version obj)", "description": "Compares this version to another disregarding optional build\n information.\n\n  Two versions are compared by examining the version string as\n described in compareTo(Version) with the exception that the\n optional build information is always ignored. \n This method provides ordering which is consistent with\n equalsIgnoreOptional(). "}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a string representation of this version."}, {"method_name": "equals", "method_sig": "public boolean equals (Object obj)", "description": "Determines whether this Version is equal to another object.\n\n  Two Versions are equal if and only if they represent the\n same version string."}, {"method_name": "equalsIgnoreOptional", "method_sig": "public boolean equalsIgnoreOptional (Object obj)", "description": "Determines whether this Version is equal to another\n disregarding optional build information.\n\n  Two Versions are equal if and only if they represent the\n same version string disregarding the optional build information."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Returns the hash code of this version."}]}