{"name": "Class JFileChooser", "module": "java.desktop", "package": "javax.swing", "text": "JFileChooser provides a simple mechanism for the user to\n choose a file.\n For information about using JFileChooser, see\n How to Use File Choosers,\n a section in The Java Tutorial.\n\n \n\n The following code pops up a file chooser for the user's home directory that\n sees only .jpg and .gif images:\n \n    JFileChooser chooser = new JFileChooser();\n    FileNameExtensionFilter filter = new FileNameExtensionFilter(\n        \"JPG & GIF Images\", \"jpg\", \"gif\");\n    chooser.setFileFilter(filter);\n    int returnVal = chooser.showOpenDialog(parent);\n    if(returnVal == JFileChooser.APPROVE_OPTION) {\n       System.out.println(\"You chose to open this file: \" +\n            chooser.getSelectedFile().getName());\n    }\n \n\nWarning: Swing is not thread safe. For more\n information see Swing's Threading\n Policy.", "codes": ["@JavaBean(defaultProperty=\"UI\",\n          description=\"A component which allows for the interactive selection of a file.\")\npublic class JFileChooser\nextends JComponent\nimplements Accessible"], "fields": [{"field_name": "OPEN_DIALOG", "field_sig": "public static final\u00a0int OPEN_DIALOG", "description": "Type value indicating that the JFileChooser supports an\n \"Open\" file operation."}, {"field_name": "SAVE_DIALOG", "field_sig": "public static final\u00a0int SAVE_DIALOG", "description": "Type value indicating that the JFileChooser supports a\n \"Save\" file operation."}, {"field_name": "CUSTOM_DIALOG", "field_sig": "public static final\u00a0int CUSTOM_DIALOG", "description": "Type value indicating that the JFileChooser supports a\n developer-specified file operation."}, {"field_name": "CANCEL_OPTION", "field_sig": "public static final\u00a0int CANCEL_OPTION", "description": "Return value if cancel is chosen."}, {"field_name": "APPROVE_OPTION", "field_sig": "public static final\u00a0int APPROVE_OPTION", "description": "Return value if approve (yes, ok) is chosen."}, {"field_name": "ERROR_OPTION", "field_sig": "public static final\u00a0int ERROR_OPTION", "description": "Return value if an error occurred."}, {"field_name": "FILES_ONLY", "field_sig": "public static final\u00a0int FILES_ONLY", "description": "Instruction to display only files."}, {"field_name": "DIRECTORIES_ONLY", "field_sig": "public static final\u00a0int DIRECTORIES_ONLY", "description": "Instruction to display only directories."}, {"field_name": "FILES_AND_DIRECTORIES", "field_sig": "public static final\u00a0int FILES_AND_DIRECTORIES", "description": "Instruction to display both files and directories."}, {"field_name": "CANCEL_SELECTION", "field_sig": "public static final\u00a0String CANCEL_SELECTION", "description": "Instruction to cancel the current selection."}, {"field_name": "APPROVE_SELECTION", "field_sig": "public static final\u00a0String APPROVE_SELECTION", "description": "Instruction to approve the current selection\n (same as pressing yes or ok)."}, {"field_name": "APPROVE_BUTTON_TEXT_CHANGED_PROPERTY", "field_sig": "public static final\u00a0String APPROVE_BUTTON_TEXT_CHANGED_PROPERTY", "description": "Identifies change in the text on the approve (yes, ok) button."}, {"field_name": "APPROVE_BUTTON_TOOL_TIP_TEXT_CHANGED_PROPERTY", "field_sig": "public static final\u00a0String APPROVE_BUTTON_TOOL_TIP_TEXT_CHANGED_PROPERTY", "description": "Identifies change in the tooltip text for the approve (yes, ok)\n button."}, {"field_name": "APPROVE_BUTTON_MNEMONIC_CHANGED_PROPERTY", "field_sig": "public static final\u00a0String APPROVE_BUTTON_MNEMONIC_CHANGED_PROPERTY", "description": "Identifies change in the mnemonic for the approve (yes, ok) button."}, {"field_name": "CONTROL_BUTTONS_ARE_SHOWN_CHANGED_PROPERTY", "field_sig": "public static final\u00a0String CONTROL_BUTTONS_ARE_SHOWN_CHANGED_PROPERTY", "description": "Instruction to display the control buttons."}, {"field_name": "DIRECTORY_CHANGED_PROPERTY", "field_sig": "public static final\u00a0String DIRECTORY_CHANGED_PROPERTY", "description": "Identifies user's directory change."}, {"field_name": "SELECTED_FILE_CHANGED_PROPERTY", "field_sig": "public static final\u00a0String SELECTED_FILE_CHANGED_PROPERTY", "description": "Identifies change in user's single-file selection."}, {"field_name": "SELECTED_FILES_CHANGED_PROPERTY", "field_sig": "public static final\u00a0String SELECTED_FILES_CHANGED_PROPERTY", "description": "Identifies change in user's multiple-file selection."}, {"field_name": "MULTI_SELECTION_ENABLED_CHANGED_PROPERTY", "field_sig": "public static final\u00a0String MULTI_SELECTION_ENABLED_CHANGED_PROPERTY", "description": "Enables multiple-file selections."}, {"field_name": "FILE_SYSTEM_VIEW_CHANGED_PROPERTY", "field_sig": "public static final\u00a0String FILE_SYSTEM_VIEW_CHANGED_PROPERTY", "description": "Says that a different object is being used to find available drives\n on the system."}, {"field_name": "FILE_VIEW_CHANGED_PROPERTY", "field_sig": "public static final\u00a0String FILE_VIEW_CHANGED_PROPERTY", "description": "Says that a different object is being used to retrieve file\n information."}, {"field_name": "FILE_HIDING_CHANGED_PROPERTY", "field_sig": "public static final\u00a0String FILE_HIDING_CHANGED_PROPERTY", "description": "Identifies a change in the display-hidden-files property."}, {"field_name": "FILE_FILTER_CHANGED_PROPERTY", "field_sig": "public static final\u00a0String FILE_FILTER_CHANGED_PROPERTY", "description": "User changed the kind of files to display."}, {"field_name": "FILE_SELECTION_MODE_CHANGED_PROPERTY", "field_sig": "public static final\u00a0String FILE_SELECTION_MODE_CHANGED_PROPERTY", "description": "Identifies a change in the kind of selection (single,\n multiple, etc.)."}, {"field_name": "ACCESSORY_CHANGED_PROPERTY", "field_sig": "public static final\u00a0String ACCESSORY_CHANGED_PROPERTY", "description": "Says that a different accessory component is in use\n (for example, to preview files)."}, {"field_name": "ACCEPT_ALL_FILE_FILTER_USED_CHANGED_PROPERTY", "field_sig": "public static final\u00a0String ACCEPT_ALL_FILE_FILTER_USED_CHANGED_PROPERTY", "description": "Identifies whether a the AcceptAllFileFilter is used or not."}, {"field_name": "DIALOG_TITLE_CHANGED_PROPERTY", "field_sig": "public static final\u00a0String DIALOG_TITLE_CHANGED_PROPERTY", "description": "Identifies a change in the dialog title."}, {"field_name": "DIALOG_TYPE_CHANGED_PROPERTY", "field_sig": "public static final\u00a0String DIALOG_TYPE_CHANGED_PROPERTY", "description": "Identifies a change in the type of files displayed (files only,\n directories only, or both files and directories)."}, {"field_name": "CHOOSABLE_FILE_FILTER_CHANGED_PROPERTY", "field_sig": "public static final\u00a0String CHOOSABLE_FILE_FILTER_CHANGED_PROPERTY", "description": "Identifies a change in the list of predefined file filters\n the user can choose from."}, {"field_name": "accessibleContext", "field_sig": "protected\u00a0AccessibleContext accessibleContext", "description": "AccessibleContext associated with this JFileChooser"}], "methods": [{"method_name": "setup", "method_sig": "protected void setup (FileSystemView view)", "description": "Performs common constructor initialization and setup."}, {"method_name": "setDragEnabled", "method_sig": "@BeanProperty(bound=false,\n              description=\"determines whether automatic drag handling is enabled\")\npublic void setDragEnabled (boolean b)", "description": "Sets the dragEnabled property,\n which must be true to enable\n automatic drag handling (the first part of drag and drop)\n on this component.\n The transferHandler property needs to be set\n to a non-null value for the drag to do\n anything.  The default value of the dragEnabled\n property\n is false.\n\n \n\n When automatic drag handling is enabled,\n most look and feels begin a drag-and-drop operation\n whenever the user presses the mouse button over an item\n and then moves the mouse a few pixels.\n Setting this property to true\n can therefore have a subtle effect on\n how selections behave.\n\n \n\n Some look and feels might not support automatic drag and drop;\n they will ignore this property.  You can work around such\n look and feels by modifying the component\n to directly call the exportAsDrag method of a\n TransferHandler."}, {"method_name": "getDragEnabled", "method_sig": "public boolean getDragEnabled()", "description": "Gets the value of the dragEnabled property."}, {"method_name": "getSelectedFile", "method_sig": "public File getSelectedFile()", "description": "Returns the selected file. This can be set either by the\n programmer via setSelectedFile or by a user action, such as\n either typing the filename into the UI or selecting the\n file from a list in the UI."}, {"method_name": "setSelectedFile", "method_sig": "@BeanProperty(preferred=true)\npublic void setSelectedFile (File file)", "description": "Sets the selected file. If the file's parent directory is\n not the current directory, changes the current directory\n to be the file's parent directory."}, {"method_name": "getSelectedFiles", "method_sig": "public File[] getSelectedFiles()", "description": "Returns a list of selected files if the file chooser is\n set to allow multiple selection."}, {"method_name": "setSelectedFiles", "method_sig": "@BeanProperty(description=\"The list of selected files if the chooser is in multiple selection mode.\")\npublic void setSelectedFiles (File[] selectedFiles)", "description": "Sets the list of selected files if the file chooser is\n set to allow multiple selection."}, {"method_name": "getCurrentDirectory", "method_sig": "public File getCurrentDirectory()", "description": "Returns the current directory."}, {"method_name": "setCurrentDirectory", "method_sig": "@BeanProperty(preferred=true,\n              description=\"The directory that the JFileChooser is showing files of.\")\npublic void setCurrentDirectory (File dir)", "description": "Sets the current directory. Passing in null sets the\n file chooser to point to the user's default directory.\n This default depends on the operating system. It is\n typically the \"My Documents\" folder on Windows, and the user's\n home directory on Unix.\n\n If the file passed in as currentDirectory is not a\n directory, the parent of the file will be used as the currentDirectory.\n If the parent is not traversable, then it will walk up the parent tree\n until it finds a traversable directory, or hits the root of the\n file system."}, {"method_name": "changeToParentDirectory", "method_sig": "public void changeToParentDirectory()", "description": "Changes the directory to be set to the parent of the\n current directory."}, {"method_name": "rescanCurrentDirectory", "method_sig": "public void rescanCurrentDirectory()", "description": "Tells the UI to rescan its files list from the current directory."}, {"method_name": "ensureFileIsVisible", "method_sig": "public void ensureFileIsVisible (File f)", "description": "Makes sure that the specified file is viewable, and\n not hidden."}, {"method_name": "showOpenDialog", "method_sig": "public int showOpenDialog (Component parent)\n                   throws HeadlessException", "description": "Pops up an \"Open File\" file chooser dialog. Note that the\n text that appears in the approve button is determined by\n the L&F."}, {"method_name": "showSaveDialog", "method_sig": "public int showSaveDialog (Component parent)\n                   throws HeadlessException", "description": "Pops up a \"Save File\" file chooser dialog. Note that the\n text that appears in the approve button is determined by\n the L&F."}, {"method_name": "showDialog", "method_sig": "public int showDialog (Component parent,\n                      String approveButtonText)\n               throws HeadlessException", "description": "Pops a custom file chooser dialog with a custom approve button.\n For example, the following code\n pops up a file chooser with a \"Run Application\" button\n (instead of the normal \"Save\" or \"Open\" button):\n \n filechooser.showDialog(parentFrame, \"Run Application\");\n \n\n Alternatively, the following code does the same thing:\n \n    JFileChooser chooser = new JFileChooser(null);\n    chooser.setApproveButtonText(\"Run Application\");\n    chooser.showDialog(parentFrame, null);\n \n\n\n\n\n The parent argument determines two things:\n the frame on which the open dialog depends and\n the component whose position the look and feel\n should consider when placing the dialog.  If the parent\n is a Frame object (such as a JFrame)\n then the dialog depends on the frame and\n the look and feel positions the dialog\n relative to the frame (for example, centered over the frame).\n If the parent is a component, then the dialog\n depends on the frame containing the component,\n and is positioned relative to the component\n (for example, centered over the component).\n If the parent is null, then the dialog depends on\n no visible window, and it's placed in a\n look-and-feel-dependent position\n such as the center of the screen."}, {"method_name": "createDialog", "method_sig": "protected JDialog createDialog (Component parent)\n                        throws HeadlessException", "description": "Creates and returns a new JDialog wrapping\n this centered on the parent\n in the parent's frame.\n This method can be overriden to further manipulate the dialog,\n to disable resizing, set the location, etc. Example:\n \n     class MyFileChooser extends JFileChooser {\n         protected JDialog createDialog(Component parent) throws HeadlessException {\n             JDialog dialog = super.createDialog(parent);\n             dialog.setLocation(300, 200);\n             dialog.setResizable(false);\n             return dialog;\n         }\n     }\n "}, {"method_name": "getControlButtonsAreShown", "method_sig": "public boolean getControlButtonsAreShown()", "description": "Returns the value of the controlButtonsAreShown\n property."}, {"method_name": "setControlButtonsAreShown", "method_sig": "@BeanProperty(preferred=true,\n              description=\"Sets whether the approve & cancel buttons are shown.\")\npublic void setControlButtonsAreShown (boolean b)", "description": "Sets the property\n that indicates whether the approve and cancel\n buttons are shown in the file chooser.  This property\n is true by default.  Look and feels\n that always show these buttons will ignore the value\n of this property.\n This method fires a property-changed event,\n using the string value of\n CONTROL_BUTTONS_ARE_SHOWN_CHANGED_PROPERTY\n as the name of the property."}, {"method_name": "getDialogType", "method_sig": "public int getDialogType()", "description": "Returns the type of this dialog.  The default is\n JFileChooser.OPEN_DIALOG."}, {"method_name": "setDialogType", "method_sig": "@BeanProperty(preferred=true,\n              enumerationValues={\"JFileChooser.OPEN_DIALOG\",\"JFileChooser.SAVE_DIALOG\",\"JFileChooser.CUSTOM_DIALOG\"},\n              description=\"The type (open, save, custom) of the JFileChooser.\")\npublic void setDialogType (int dialogType)", "description": "Sets the type of this dialog. Use OPEN_DIALOG when you\n want to bring up a file chooser that the user can use to open a file.\n Likewise, use SAVE_DIALOG for letting the user choose\n a file for saving.\n Use CUSTOM_DIALOG when you want to use the file\n chooser in a context other than \"Open\" or \"Save\".\n For instance, you might want to bring up a file chooser that allows\n the user to choose a file to execute. Note that you normally would not\n need to set the JFileChooser to use\n CUSTOM_DIALOG\n since a call to setApproveButtonText does this for you.\n The default dialog type is JFileChooser.OPEN_DIALOG."}, {"method_name": "setDialogTitle", "method_sig": "@BeanProperty(preferred=true,\n              description=\"The title of the JFileChooser dialog window.\")\npublic void setDialogTitle (String dialogTitle)", "description": "Sets the string that goes in the JFileChooser window's\n title bar."}, {"method_name": "getDialogTitle", "method_sig": "public String getDialogTitle()", "description": "Gets the string that goes in the JFileChooser's titlebar."}, {"method_name": "setApproveButtonToolTipText", "method_sig": "@BeanProperty(preferred=true,\n              description=\"The tooltip text for the ApproveButton.\")\npublic void setApproveButtonToolTipText (String toolTipText)", "description": "Sets the tooltip text used in the ApproveButton.\n If null, the UI object will determine the button's text."}, {"method_name": "getApproveButtonToolTipText", "method_sig": "public String getApproveButtonToolTipText()", "description": "Returns the tooltip text used in the ApproveButton.\n If null, the UI object will determine the button's text."}, {"method_name": "getApproveButtonMnemonic", "method_sig": "public int getApproveButtonMnemonic()", "description": "Returns the approve button's mnemonic."}, {"method_name": "setApproveButtonMnemonic", "method_sig": "@BeanProperty(preferred=true,\n              description=\"The mnemonic key accelerator for the ApproveButton.\")\npublic void setApproveButtonMnemonic (int mnemonic)", "description": "Sets the approve button's mnemonic using a numeric keycode."}, {"method_name": "setApproveButtonMnemonic", "method_sig": "public void setApproveButtonMnemonic (char mnemonic)", "description": "Sets the approve button's mnemonic using a character."}, {"method_name": "setApproveButtonText", "method_sig": "@BeanProperty(preferred=true,\n              description=\"The text that goes in the ApproveButton.\")\npublic void setApproveButtonText (String approveButtonText)", "description": "Sets the text used in the ApproveButton in the\n FileChooserUI."}, {"method_name": "getApproveButtonText", "method_sig": "public String getApproveButtonText()", "description": "Returns the text used in the ApproveButton in the\n FileChooserUI.\n If null, the UI object will determine the button's text.\n\n Typically, this would be \"Open\" or \"Save\"."}, {"method_name": "getChoosableFileFilters", "method_sig": "@BeanProperty(bound=false)\npublic FileFilter[] getChoosableFileFilters()", "description": "Gets the list of user choosable file filters."}, {"method_name": "addChoosableFileFilter", "method_sig": "@BeanProperty(preferred=true,\n              description=\"Adds a filter to the list of user choosable file filters.\")\npublic void addChoosableFileFilter (FileFilter filter)", "description": "Adds a filter to the list of user choosable file filters.\n For information on setting the file selection mode, see\n setFileSelectionMode."}, {"method_name": "removeChoosableFileFilter", "method_sig": "public boolean removeChoosableFileFilter (FileFilter f)", "description": "Removes a filter from the list of user choosable file filters. Returns\n true if the file filter was removed."}, {"method_name": "resetChoosableFileFilters", "method_sig": "public void resetChoosableFileFilters()", "description": "Resets the choosable file filter list to its starting state. Normally,\n this removes all added file filters while leaving the\n AcceptAll file filter."}, {"method_name": "getAcceptAllFileFilter", "method_sig": "@BeanProperty(bound=false)\npublic FileFilter getAcceptAllFileFilter()", "description": "Returns the AcceptAll file filter.\n For example, on Microsoft Windows this would be All Files (*.*)."}, {"method_name": "isAcceptAllFileFilterUsed", "method_sig": "public boolean isAcceptAllFileFilterUsed()", "description": "Returns whether the AcceptAll FileFilter is used."}, {"method_name": "setAcceptAllFileFilterUsed", "method_sig": "@BeanProperty(preferred=true,\n              description=\"Sets whether the AcceptAll FileFilter is used as an available choice in the choosable filter list.\")\npublic void setAcceptAllFileFilterUsed (boolean b)", "description": "Determines whether the AcceptAll FileFilter is used\n as an available choice in the choosable filter list.\n If false, the AcceptAll file filter is removed from\n the list of available file filters.\n If true, the AcceptAll file filter will become the\n actively used file filter."}, {"method_name": "getAccessory", "method_sig": "public JComponent getAccessory()", "description": "Returns the accessory component."}, {"method_name": "setAccessory", "method_sig": "@BeanProperty(preferred=true,\n              description=\"Sets the accessory component on the JFileChooser.\")\npublic void setAccessory (JComponent newAccessory)", "description": "Sets the accessory component. An accessory is often used to show a\n preview image of the selected file; however, it can be used for anything\n that the programmer wishes, such as extra custom file chooser controls.\n\n \n Note: if there was a previous accessory, you should unregister\n any listeners that the accessory might have registered with the\n file chooser."}, {"method_name": "setFileSelectionMode", "method_sig": "@BeanProperty(preferred=true,\n              enumerationValues={\"JFileChooser.FILES_ONLY\",\"JFileChooser.DIRECTORIES_ONLY\",\"JFileChooser.FILES_AND_DIRECTORIES\"},\n              description=\"Sets the types of files that the JFileChooser can choose.\")\npublic void setFileSelectionMode (int mode)", "description": "Sets the JFileChooser to allow the user to just\n select files, just select\n directories, or select both files and directories.  The default is\n JFilesChooser.FILES_ONLY."}, {"method_name": "getFileSelectionMode", "method_sig": "public int getFileSelectionMode()", "description": "Returns the current file-selection mode.  The default is\n JFilesChooser.FILES_ONLY."}, {"method_name": "isFileSelectionEnabled", "method_sig": "@BeanProperty(bound=false)\npublic boolean isFileSelectionEnabled()", "description": "Convenience call that determines if files are selectable based on the\n current file selection mode."}, {"method_name": "isDirectorySelectionEnabled", "method_sig": "@BeanProperty(bound=false)\npublic boolean isDirectorySelectionEnabled()", "description": "Convenience call that determines if directories are selectable based\n on the current file selection mode."}, {"method_name": "setMultiSelectionEnabled", "method_sig": "@BeanProperty(description=\"Sets multiple file selection mode.\")\npublic void setMultiSelectionEnabled (boolean b)", "description": "Sets the file chooser to allow multiple file selections."}, {"method_name": "isMultiSelectionEnabled", "method_sig": "public boolean isMultiSelectionEnabled()", "description": "Returns true if multiple files can be selected."}, {"method_name": "isFileHidingEnabled", "method_sig": "public boolean isFileHidingEnabled()", "description": "Returns true if hidden files are not shown in the file chooser;\n otherwise, returns false."}, {"method_name": "setFileHidingEnabled", "method_sig": "@BeanProperty(preferred=true,\n              description=\"Sets file hiding on or off.\")\npublic void setFileHidingEnabled (boolean b)", "description": "Sets file hiding on or off. If true, hidden files are not shown\n in the file chooser. The job of determining which files are\n shown is done by the FileView."}, {"method_name": "setFileFilter", "method_sig": "@BeanProperty(preferred=true,\n              description=\"Sets the File Filter used to filter out files of type.\")\npublic void setFileFilter (FileFilter filter)", "description": "Sets the current file filter. The file filter is used by the\n file chooser to filter out files from the user's view."}, {"method_name": "getFileFilter", "method_sig": "public FileFilter getFileFilter()", "description": "Returns the currently selected file filter."}, {"method_name": "setFileView", "method_sig": "@BeanProperty(preferred=true,\n              description=\"Sets the File View used to get file type information.\")\npublic void setFileView (FileView fileView)", "description": "Sets the file view to be used to retrieve UI information, such as\n the icon that represents a file or the type description of a file."}, {"method_name": "getFileView", "method_sig": "public FileView getFileView()", "description": "Returns the current file view."}, {"method_name": "getName", "method_sig": "public String getName (File f)", "description": "Returns the filename."}, {"method_name": "getDescription", "method_sig": "public String getDescription (File f)", "description": "Returns the file description."}, {"method_name": "getTypeDescription", "method_sig": "public String getTypeDescription (File f)", "description": "Returns the file type."}, {"method_name": "getIcon", "method_sig": "public Icon getIcon (File f)", "description": "Returns the icon for this file or type of file, depending\n on the system."}, {"method_name": "isTraversable", "method_sig": "public boolean isTraversable (File f)", "description": "Returns true if the file (directory) can be visited.\n Returns false if the directory cannot be traversed."}, {"method_name": "accept", "method_sig": "public boolean accept (File f)", "description": "Returns true if the file should be displayed."}, {"method_name": "setFileSystemView", "method_sig": "@BeanProperty(expert=true,\n              description=\"Sets the FileSytemView used to get filesystem information.\")\npublic void setFileSystemView (FileSystemView fsv)", "description": "Sets the file system view that the JFileChooser uses for\n accessing and creating file system resources, such as finding\n the floppy drive and getting a list of root drives."}, {"method_name": "getFileSystemView", "method_sig": "public FileSystemView getFileSystemView()", "description": "Returns the file system view."}, {"method_name": "approveSelection", "method_sig": "public void approveSelection()", "description": "Called by the UI when the user hits the Approve button\n (labeled \"Open\" or \"Save\", by default). This can also be\n called by the programmer.\n This method causes an action event to fire\n with the command string equal to\n APPROVE_SELECTION."}, {"method_name": "cancelSelection", "method_sig": "public void cancelSelection()", "description": "Called by the UI when the user chooses the Cancel button.\n This can also be called by the programmer.\n This method causes an action event to fire\n with the command string equal to\n CANCEL_SELECTION."}, {"method_name": "addActionListener", "method_sig": "public void addActionListener (ActionListener l)", "description": "Adds an ActionListener to the file chooser."}, {"method_name": "removeActionListener", "method_sig": "public void removeActionListener (ActionListener l)", "description": "Removes an ActionListener from the file chooser."}, {"method_name": "getActionListeners", "method_sig": "@BeanProperty(bound=false)\npublic ActionListener[] getActionListeners()", "description": "Returns an array of all the action listeners\n registered on this file chooser."}, {"method_name": "fireActionPerformed", "method_sig": "protected void fireActionPerformed (String command)", "description": "Notifies all listeners that have registered interest for\n notification on this event type. The event instance\n is lazily created using the command parameter."}, {"method_name": "updateUI", "method_sig": "public void updateUI()", "description": "Resets the UI property to a value from the current look and feel."}, {"method_name": "getUIClassID", "method_sig": "@BeanProperty(bound=false,\n              expert=true,\n              description=\"A string that specifies the name of the L&F class.\")\npublic String getUIClassID()", "description": "Returns a string that specifies the name of the L&F class\n that renders this component."}, {"method_name": "getUI", "method_sig": "@BeanProperty(bound=false)\npublic FileChooserUI getUI()", "description": "Gets the UI object which implements the L&F for this component."}, {"method_name": "paramString", "method_sig": "protected String paramString()", "description": "Returns a string representation of this JFileChooser.\n This method\n is intended to be used only for debugging purposes, and the\n content and format of the returned string may vary between\n implementations. The returned string may be empty but may not\n be null."}, {"method_name": "getAccessibleContext", "method_sig": "@BeanProperty(bound=false)\npublic AccessibleContext getAccessibleContext()", "description": "Gets the AccessibleContext associated with this JFileChooser.\n For file choosers, the AccessibleContext takes the form of an\n AccessibleJFileChooser.\n A new AccessibleJFileChooser instance is created if necessary."}]}