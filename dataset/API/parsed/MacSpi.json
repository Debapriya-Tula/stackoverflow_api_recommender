{"name": "Class MacSpi", "module": "java.base", "package": "javax.crypto", "text": "This class defines the Service Provider Interface (SPI)\n for the Mac class.\n All the abstract methods in this class must be implemented by each\n cryptographic service provider who wishes to supply the implementation\n of a particular MAC algorithm.\n\n  Implementations are free to implement the Cloneable interface.", "codes": ["public abstract class MacSpi\nextends Object"], "fields": [], "methods": [{"method_name": "engineGetMacLength", "method_sig": "protected abstract int engineGetMacLength()", "description": "Returns the length of the MAC in bytes."}, {"method_name": "engineInit", "method_sig": "protected abstract void engineInit (Key key,\n                                   AlgorithmParameterSpec params)\n                            throws InvalidKeyException,\n                                   InvalidAlgorithmParameterException", "description": "Initializes the MAC with the given (secret) key and algorithm\n parameters."}, {"method_name": "engineUpdate", "method_sig": "protected abstract void engineUpdate (byte input)", "description": "Processes the given byte."}, {"method_name": "engineUpdate", "method_sig": "protected abstract void engineUpdate (byte[] input,\n                                     int offset,\n                                     int len)", "description": "Processes the first len bytes in input,\n starting at offset inclusive."}, {"method_name": "engineUpdate", "method_sig": "protected void engineUpdate (ByteBuffer input)", "description": "Processes input.remaining() bytes in the ByteBuffer\n input, starting at input.position().\n Upon return, the buffer's position will be equal to its limit;\n its limit will not have changed.\n\n Subclasses should consider overriding this method if they can\n process ByteBuffers more efficiently than byte arrays."}, {"method_name": "engineDoFinal", "method_sig": "protected abstract byte[] engineDoFinal()", "description": "Completes the MAC computation and resets the MAC for further use,\n maintaining the secret key that the MAC was initialized with."}, {"method_name": "engineReset", "method_sig": "protected abstract void engineReset()", "description": "Resets the MAC for further use, maintaining the secret key that the\n MAC was initialized with."}, {"method_name": "clone", "method_sig": "public Object clone()\n             throws CloneNotSupportedException", "description": "Returns a clone if the implementation is cloneable."}]}