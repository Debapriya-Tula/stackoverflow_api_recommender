{"name": "Class SimpleFormatter", "module": "java.logging", "package": "java.util.logging", "text": "Print a brief summary of the LogRecord in a human readable\n format.  The summary will typically be 1 or 2 lines.\n\n \n\nConfiguration:\n The SimpleFormatter is initialized with the\n format string\n specified in the java.util.logging.SimpleFormatter.format\n property to format the log messages.\n This property can be defined\n in the logging properties\n configuration file\n or as a system property.  If this property is set in both\n the logging properties and system properties,\n the format string specified in the system property will be used.\n If this property is not defined or the given format string\n is illegal,\n the default format is implementation-specific.", "codes": ["public class SimpleFormatter\nextends Formatter"], "fields": [], "methods": [{"method_name": "format", "method_sig": "public String format (LogRecord record)", "description": "Format the given LogRecord.\n \n The formatting can be customized by specifying the\n format string\n in the \njava.util.logging.SimpleFormatter.format property.\n The given LogRecord will be formatted as if by calling:\n \n    String.format(format, date, source, logger, level, message, thrown);\n \n where the arguments are:\n\nformat - the java.util.Formatter format string specified in the\n     java.util.logging.SimpleFormatter.format property\n     or the default format.\ndate - a ZonedDateTime object representing\n     event time of the log record\n      in the ZoneId.systemDefault() system time zone.\nsource - a string representing the caller, if available;\n     otherwise, the logger's name.\nlogger - the logger's name.\nlevel - the log level.\nmessage - the formatted log message\n     returned from the Formatter.formatMessage(LogRecord)\n     method.  It uses java.text\n     formatting and does not use the java.util.Formatter\n     format argument.\nthrown - a string representing\n     the throwable\n     associated with the log record and its backtrace\n     beginning with a newline character, if any;\n     otherwise, an empty string.\n\nSome example formats:\n\n java.util.logging.SimpleFormatter.format=\"%4$s: %5$s [%1$tc]%n\"\nThis prints 1 line with the log level (4$),\n     the log message (5$) and the timestamp (1$) in\n     a square bracket.\n     \n     WARNING: warning message [Tue Mar 22 13:11:31 PDT 2011]\n     \n java.util.logging.SimpleFormatter.format=\"%1$tc %2$s%n%4$s: %5$s%6$s%n\"\nThis prints 2 lines where the first line includes\n     the timestamp (1$) and the source (2$);\n     the second line includes the log level (4$) and\n     the log message (5$) followed with the throwable\n     and its backtrace (6$), if any:\n     \n     Tue Mar 22 13:11:31 PDT 2011 MyClass fatal\n     SEVERE: several message with an exception\n     java.lang.IllegalArgumentException: invalid argument\n             at MyClass.mash(MyClass.java:9)\n             at MyClass.crunch(MyClass.java:6)\n             at MyClass.main(MyClass.java:3)\n     \n java.util.logging.SimpleFormatter.format=\"%1$tb %1$td, %1$tY %1$tl:%1$tM:%1$tS %1$Tp %2$s%n%4$s: %5$s%n\"\nThis prints 2 lines similar to the example above\n         with a different date/time formatting and does not print\n         the throwable and its backtrace:\n     \n     Mar 22, 2011 1:11:31 PM MyClass fatal\n     SEVERE: several message with an exception\n     \n java.util.logging.SimpleFormatter.format=\"%1$tb %1$td, %1$tY %1$tl:%1$tM:%1$tS.%1$tN %1$Tp %2$s%n%4$s: %5$s%6$s%n\"\nSince JDK 9, java.util.logging uses java.time to create more precise time\n         stamps.\n         The format above can be used to add a .%1$tN to the\n         date/time formatting so that nanoseconds will also be printed:\n     \n     Feb 06, 2015 5:33:10.279216000 PM example.Main main\n     INFO: This is a test\n     \n\nThis method can also be overridden in a subclass.\n It is recommended to use the Formatter.formatMessage(java.util.logging.LogRecord)\n convenience method to localize and format the message field."}]}