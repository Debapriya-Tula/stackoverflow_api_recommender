{"name": "Interface Element", "module": "java.desktop", "package": "javax.swing.text", "text": "Interface to describe a structural piece of a document.  It\n is intended to capture the spirit of an SGML element.", "codes": ["public interface Element"], "fields": [], "methods": [{"method_name": "getDocument", "method_sig": "Document getDocument()", "description": "Fetches the document associated with this element."}, {"method_name": "getParentElement", "method_sig": "Element getParentElement()", "description": "Fetches the parent element.  If the element is a root level\n element returns null."}, {"method_name": "getName", "method_sig": "String getName()", "description": "Fetches the name of the element.  If the element is used to\n represent some type of structure, this would be the type\n name."}, {"method_name": "getAttributes", "method_sig": "AttributeSet getAttributes()", "description": "Fetches the collection of attributes this element contains."}, {"method_name": "getStartOffset", "method_sig": "int getStartOffset()", "description": "Fetches the offset from the beginning of the document\n that this element begins at.  If this element has\n children, this will be the offset of the first child.\n As a document position, there is an implied forward bias."}, {"method_name": "getEndOffset", "method_sig": "int getEndOffset()", "description": "Fetches the offset from the beginning of the document\n that this element ends at.  If this element has\n children, this will be the end offset of the last child.\n As a document position, there is an implied backward bias.\n \n All the default Document implementations\n descend from AbstractDocument.\n AbstractDocument models an implied break at the end of\n the document. As a result of this, it is possible for this to\n return a value greater than the length of the document."}, {"method_name": "getElementIndex", "method_sig": "int getElementIndex (int offset)", "description": "Gets the child element index closest to the given offset.\n The offset is specified relative to the beginning of the\n document.  Returns -1 if the\n Element is a leaf, otherwise returns\n the index of the Element that best represents\n the given location.  Returns 0 if the location\n is less than the start offset. Returns\n getElementCount() - 1 if the location is\n greater than or equal to the end offset."}, {"method_name": "getElementCount", "method_sig": "int getElementCount()", "description": "Gets the number of child elements contained by this element.\n If this element is a leaf, a count of zero is returned."}, {"method_name": "getElement", "method_sig": "Element getElement (int index)", "description": "Fetches the child element at the given index."}, {"method_name": "isLeaf", "method_sig": "boolean isLeaf()", "description": "Is this element a leaf element? An element that\n may have children, even if it currently\n has no children, would return false."}]}