{"name": "Class BasicAttribute", "module": "java.naming", "package": "javax.naming.directory", "text": "This class provides a basic implementation of the Attribute interface.\n\n This implementation does not support the schema methods\n getAttributeDefinition() and getAttributeSyntaxDefinition().\n They simply throw OperationNotSupportedException.\n Subclasses of BasicAttribute should override these methods if they\n support them.\n\n The BasicAttribute class by default uses Object.equals() to\n determine equality of attribute values when testing for equality or\n when searching for values, except when the value is an array.\n For an array, each element of the array is checked using Object.equals().\n Subclasses of BasicAttribute can make use of schema information\n when doing similar equality checks by overriding methods\n in which such use of schema is meaningful.\n Similarly, the BasicAttribute class by default returns the values passed to its\n constructor and/or manipulated using the add/remove methods.\n Subclasses of BasicAttribute can override get() and getAll()\n to get the values dynamically from the directory (or implement\n the Attribute interface directly instead of subclassing BasicAttribute).\n\n Note that updates to BasicAttribute (such as adding or removing a value)\n does not affect the corresponding representation of the attribute\n in the directory.  Updates to the directory can only be effected\n using operations in the DirContext interface.\n\n A BasicAttribute instance is not synchronized against concurrent\n multithreaded access. Multiple threads trying to access and modify a\n BasicAttribute should lock the object.", "codes": ["public class BasicAttribute\nextends Object\nimplements Attribute"], "fields": [{"field_name": "attrID", "field_sig": "protected\u00a0String attrID", "description": "Holds the attribute's id. It is initialized by the public constructor and\n cannot be null unless methods in BasicAttribute that use attrID\n have been overridden."}, {"field_name": "values", "field_sig": "protected transient\u00a0Vector<Object> values", "description": "Holds the attribute's values. Initialized by public constructors.\n Cannot be null unless methods in BasicAttribute that use\n values have been overridden."}, {"field_name": "ordered", "field_sig": "protected\u00a0boolean ordered", "description": "A flag for recording whether this attribute's values are ordered."}], "methods": [{"method_name": "equals", "method_sig": "public boolean equals (Object obj)", "description": "Determines whether obj is equal to this attribute.\n Two attributes are equal if their attribute-ids, syntaxes\n and values are equal.\n If the attribute values are unordered, the order that the values were added\n are irrelevant. If the attribute values are ordered, then the\n order the values must match.\n If obj is null or not an Attribute, false is returned.\n\n By default Object.equals() is used when comparing the attribute\n id and its values except when a value is an array. For an array,\n each element of the array is checked using Object.equals().\n A subclass may override this to make\n use of schema syntax information and matching rules,\n which define what it means for two attributes to be equal.\n How and whether a subclass makes\n use of the schema information is determined by the subclass.\n If a subclass overrides equals(), it should also override\n hashCode()\n such that two attributes that are equal have the same hash code."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Calculates the hash code of this attribute.\n\n The hash code is computed by adding the hash code of\n the attribute's id and that of all of its values except for\n values that are arrays.\n For an array, the hash code of each element of the array is summed.\n If a subclass overrides hashCode(), it should override\n equals()\n as well so that two attributes that are equal have the same hash code."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Generates the string representation of this attribute.\n The string consists of the attribute's id and its values.\n This string is meant for debugging and not meant to be\n interpreted programmatically."}, {"method_name": "getAll", "method_sig": "public NamingEnumeration<?> getAll()\n                            throws NamingException", "description": "Retrieves an enumeration of this attribute's values.\n\n By default, the values returned are those passed to the\n constructor and/or manipulated using the add/replace/remove methods.\n A subclass may override this to retrieve the values dynamically\n from the directory."}, {"method_name": "get", "method_sig": "public Object get()\n           throws NamingException", "description": "Retrieves one of this attribute's values.\n\n By default, the value returned is one of those passed to the\n constructor and/or manipulated using the add/replace/remove methods.\n A subclass may override this to retrieve the value dynamically\n from the directory."}, {"method_name": "contains", "method_sig": "public boolean contains (Object attrVal)", "description": "Determines whether a value is in this attribute.\n\n By default,\n Object.equals() is used when comparing attrVal\n with this attribute's values except when attrVal is an array.\n For an array, each element of the array is checked using\n Object.equals().\n A subclass may use schema information to determine equality."}, {"method_name": "add", "method_sig": "public boolean add (Object attrVal)", "description": "Adds a new value to this attribute.\n\n By default, Object.equals() is used when comparing attrVal\n with this attribute's values except when attrVal is an array.\n For an array, each element of the array is checked using\n Object.equals().\n A subclass may use schema information to determine equality."}, {"method_name": "remove", "method_sig": "public boolean remove (Object attrval)", "description": "Removes a specified value from this attribute.\n\n By default, Object.equals() is used when comparing attrVal\n with this attribute's values except when attrVal is an array.\n For an array, each element of the array is checked using\n Object.equals().\n A subclass may use schema information to determine equality."}, {"method_name": "getAttributeSyntaxDefinition", "method_sig": "public DirContext getAttributeSyntaxDefinition()\n                                        throws NamingException", "description": "Retrieves the syntax definition associated with this attribute.\n\n This method by default throws OperationNotSupportedException. A subclass\n should override this method if it supports schema."}, {"method_name": "getAttributeDefinition", "method_sig": "public DirContext getAttributeDefinition()\n                                  throws NamingException", "description": "Retrieves this attribute's schema definition.\n\n This method by default throws OperationNotSupportedException. A subclass\n should override this method if it supports schema."}]}