{"name": "Interface WebSocket", "module": "java.net.http", "package": "java.net.http", "text": "A WebSocket Client.\n\n  WebSocket instances are created through WebSocket.Builder.\n\n  WebSocket has an input and an output side. These sides are independent\n from each other. A side can either be open or closed. Once closed, the side\n remains closed. WebSocket messages are sent through a WebSocket and\n received through a WebSocket.Listener associated with it. Messages\n can be sent until the WebSocket's output is closed, and received until the\n WebSocket's input is closed.\n\n  A send method is any of the sendText, sendBinary,\n sendPing, sendPong and sendClose methods of\n WebSocket. A send method initiates a send operation and returns a\n CompletableFuture which completes once the operation has completed.\n If the CompletableFuture completes normally the operation is\n considered succeeded. If the CompletableFuture completes\n exceptionally, the operation is considered failed. An operation that has been\n initiated but not yet completed is considered pending.\n\n  A receive method is any of the onText, onBinary,\n onPing, onPong and onClose methods of\n Listener. WebSocket initiates a receive operation by invoking a\n receive method on the listener. The listener then must return a\n CompletionStage which completes once the operation has completed.\n\n  To control receiving of messages, a WebSocket maintains an\n internal counter. This counter's value is a number of\n times the WebSocket has yet to invoke a receive method. While this counter is\n zero the WebSocket does not invoke receive methods. The counter is\n incremented by n when request(n) is called. The counter is\n decremented by one when the WebSocket invokes a receive method.\n onOpen and onError are not receive methods. WebSocket invokes\n onOpen prior to any other methods on the listener. WebSocket invokes\n onOpen at most once. WebSocket may invoke onError at any\n given time. If the WebSocket invokes onError or onClose, then\n no further listener's methods will be invoked, no matter the value of the\n counter. For a newly built WebSocket the counter is zero.\n\n  Unless otherwise stated, null arguments will cause methods\n of WebSocket to throw NullPointerException, similarly,\n WebSocket will not pass null arguments to methods of\n Listener. The state of a WebSocket is not changed by the invocations\n that throw or return a CompletableFuture that completes with one of\n the NullPointerException, IllegalArgumentException,\n IllegalStateException exceptions.\n\n  WebSocket handles received Ping and Close messages automatically\n (as per the WebSocket Protocol) by replying with Pong and Close messages. If\n the listener receives Ping or Close messages, no mandatory actions from the\n listener are required.", "codes": ["public interface WebSocket"], "fields": [{"field_name": "NORMAL_CLOSURE", "field_sig": "static final\u00a0int NORMAL_CLOSURE", "description": "The WebSocket Close message status code (1000),\n indicating normal closure, meaning that the purpose for which the\n connection was established has been fulfilled."}], "methods": [{"method_name": "sendText", "method_sig": "CompletableFuture<WebSocket> sendText (CharSequence data,\n                                      boolean last)", "description": "Sends textual data with characters from the given character sequence.\n\n  The character sequence must not be modified until the\n CompletableFuture returned from this method has completed.\n\n  A CompletableFuture returned from this method can\n complete exceptionally with:\n \n IllegalStateException -\n          if there is a pending text or binary send operation\n          or if the previous binary data does not complete the message\n  IOException -\n          if an I/O error occurs, or if the output is closed\n "}, {"method_name": "sendBinary", "method_sig": "CompletableFuture<WebSocket> sendBinary (ByteBuffer data,\n                                        boolean last)", "description": "Sends binary data with bytes from the given buffer.\n\n  The data is located in bytes from the buffer's position to its limit.\n Upon normal completion of a CompletableFuture returned from this\n method the buffer will have no remaining bytes. The buffer must not be\n accessed until after that.\n\n  The CompletableFuture returned from this method can\n complete exceptionally with:\n \n IllegalStateException -\n          if there is a pending text or binary send operation\n          or if the previous textual data does not complete the message\n  IOException -\n          if an I/O error occurs, or if the output is closed\n "}, {"method_name": "sendPing", "method_sig": "CompletableFuture<WebSocket> sendPing (ByteBuffer message)", "description": "Sends a Ping message with bytes from the given buffer.\n\n  The message consists of not more than 125 bytes from the\n buffer's position to its limit. Upon normal completion of a\n CompletableFuture returned from this method the buffer will\n have no remaining bytes. The buffer must not be accessed until after that.\n\n  The CompletableFuture returned from this method can\n complete exceptionally with:\n \n IllegalStateException -\n          if there is a pending ping or pong send operation\n  IllegalArgumentException -\n          if the message is too long\n  IOException -\n          if an I/O error occurs, or if the output is closed\n "}, {"method_name": "sendPong", "method_sig": "CompletableFuture<WebSocket> sendPong (ByteBuffer message)", "description": "Sends a Pong message with bytes from the given buffer.\n\n  The message consists of not more than 125 bytes from the\n buffer's position to its limit. Upon normal completion of a\n CompletableFuture returned from this method the buffer will have\n no remaining bytes. The buffer must not be accessed until after that.\n\n  Given that the WebSocket implementation will automatically send a\n reciprocal pong when a ping is received, it is rarely required to send a\n pong message explicitly.\n\n  The CompletableFuture returned from this method can\n complete exceptionally with:\n \n IllegalStateException -\n          if there is a pending ping or pong send operation\n  IllegalArgumentException -\n          if the message is too long\n  IOException -\n          if an I/O error occurs, or if the output is closed\n "}, {"method_name": "sendClose", "method_sig": "CompletableFuture<WebSocket> sendClose (int statusCode,\n                                       String reason)", "description": "Initiates an orderly closure of this WebSocket's output by\n sending a Close message with the given status code and the reason.\n\n  The statusCode is an integer from the range\n 1000 <= code <= 4999. Status codes 1002, 1003,\n 1006, 1007, 1009, 1010, 1012,\n 1013 and 1015 are illegal. Behaviour in respect to other\n status codes is implementation-specific. A legal reason is a\n string that has a UTF-8 representation not longer than 123 bytes.\n\n  A CompletableFuture returned from this method can\n complete exceptionally with:\n \n IllegalArgumentException -\n           if statusCode is illegal, or\n           if reason is illegal\n  IOException -\n           if an I/O error occurs, or if the output is closed\n \n Unless the CompletableFuture returned from this method\n completes with IllegalArgumentException, or the method throws\n NullPointerException, the output will be closed.\n\n  If not already closed, the input remains open until a Close message\n received, or\n abort is invoked, or an\n error occurs."}, {"method_name": "request", "method_sig": "void request (long n)", "description": "Increments the counter of invocations of receive methods.\n\n  This WebSocket will invoke onText, onBinary,\n onPing, onPong or onClose methods on the\n associated listener (i.e. receive methods) up to n more times."}, {"method_name": "getSubprotocol", "method_sig": "String getSubprotocol()", "description": "Returns the subprotocol used by this WebSocket."}, {"method_name": "isOutputClosed", "method_sig": "boolean isOutputClosed()", "description": "Tells whether this WebSocket's output is closed.\n\n  If this method returns true, subsequent invocations will also\n return true."}, {"method_name": "isInputClosed", "method_sig": "boolean isInputClosed()", "description": "Tells whether this WebSocket's input is closed.\n\n  If this method returns true, subsequent invocations will also\n return true."}, {"method_name": "abort", "method_sig": "void abort()", "description": "Closes this WebSocket's input and output abruptly.\n\n  When this method returns both the input and the output will have been\n closed. Any pending send operations will fail with IOException.\n Subsequent invocations of abort will have no effect."}]}