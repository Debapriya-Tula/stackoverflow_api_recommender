{"name": "Interface ResultSet", "module": "java.sql", "package": "java.sql", "text": "A table of data representing a database result set, which\n is usually generated by executing a statement that queries the database.\n\n A ResultSet object  maintains a cursor pointing\n to its current row of data.  Initially the cursor is positioned\n before the first row. The next method moves the\n cursor to the next row, and because it returns false\n when there are no more rows in the ResultSet object,\n it can be used in a while loop to iterate through\n the result set.\n \n A default ResultSet object is not updatable and\n has a cursor that moves forward only.  Thus, you can\n iterate through it only once and only from the first row to the\n last row. It is possible to\n produce ResultSet objects that are scrollable and/or\n updatable.  The following code fragment, in which con\n is a valid Connection object, illustrates how to make\n a result set that is scrollable and insensitive to updates by others, and\n that is updatable. See ResultSet fields for other\n options.\n \n\n       Statement stmt = con.createStatement(\n                                      ResultSet.TYPE_SCROLL_INSENSITIVE,\n                                      ResultSet.CONCUR_UPDATABLE);\n       ResultSet rs = stmt.executeQuery(\"SELECT a, b FROM TABLE2\");\n       // rs will be scrollable, will not show changes made by others,\n       // and will be updatable\n\n \n The ResultSet interface provides\n getter methods (getBoolean, getLong, and so on)\n for retrieving column values from the current row.\n Values can be retrieved using either the index number of the\n column or the name of the column.  In general, using the\n column index will be more efficient.  Columns are numbered from 1.\n For maximum portability, result set columns within each row should be\n read in left-to-right order, and each column should be read only once.\n\n For the getter methods, a JDBC driver attempts\n to convert the underlying data to the Java type specified in the\n getter method and returns a suitable Java value.  The JDBC specification\n has a table showing the allowable mappings from SQL types to Java types\n that can be used by the ResultSet getter methods.\n\n Column names used as input to getter methods are case\n insensitive.  When a getter method is called  with\n a column name and several columns have the same name,\n the value of the first matching column will be returned.\n The column name option is\n designed to be used when column names are used in the SQL\n query that generated the result set.\n For columns that are NOT explicitly named in the query, it\n is best to use column numbers. If column names are used, the\n programmer should take care to guarantee that they uniquely refer to\n the intended columns, which can be assured with the SQL AS clause.\n \n A set of updater methods were added to this interface\n in the JDBC 2.0 API (Java\u2122 2 SDK,\n Standard Edition, version 1.2). The comments regarding parameters\n to the getter methods also apply to parameters to the\n updater methods.\n\n The updater methods may be used in two ways:\n \nto update a column value in the current row.  In a scrollable\n     ResultSet object, the cursor can be moved backwards\n     and forwards, to an absolute position, or to a position\n     relative to the current row.\n     The following code fragment updates the NAME column\n     in the fifth row of the ResultSet object\n     rs and then uses the method updateRow\n     to update the data source table from which rs was derived.\n \n\n       rs.absolute(5); // moves the cursor to the fifth row of rs\n       rs.updateString(\"NAME\", \"AINSWORTH\"); // updates the\n          // NAME column of row 5 to be AINSWORTH\n       rs.updateRow(); // updates the row in the data source\n\n \nto insert column values into the insert row.  An updatable\n     ResultSet object has a special row associated with\n     it that serves as a staging area for building a row to be inserted.\n     The following code fragment moves the cursor to the insert row, builds\n     a three-column row, and inserts it into rs and into\n     the data source table using the method insertRow.\n \n\n       rs.moveToInsertRow(); // moves cursor to the insert row\n       rs.updateString(1, \"AINSWORTH\"); // updates the\n          // first column of the insert row to be AINSWORTH\n       rs.updateInt(2,35); // updates the second column to be 35\n       rs.updateBoolean(3, true); // updates the third column to true\n       rs.insertRow();\n       rs.moveToCurrentRow();\n\n \n\nA ResultSet object is automatically closed when the\n Statement object that\n generated it is closed, re-executed, or used\n to retrieve the next result from a sequence of multiple results.\n\n The number, types and properties of a ResultSet\n object's columns are provided by the ResultSetMetaData\n object returned by the ResultSet.getMetaData method.", "codes": ["public interface ResultSet\nextends Wrapper, AutoCloseable"], "fields": [{"field_name": "FETCH_FORWARD", "field_sig": "static final\u00a0int FETCH_FORWARD", "description": "The constant indicating that the rows in a result set will be\n processed in a forward direction; first-to-last.\n This constant is used by the method setFetchDirection\n as a hint to the driver, which the driver may ignore."}, {"field_name": "FETCH_REVERSE", "field_sig": "static final\u00a0int FETCH_REVERSE", "description": "The constant indicating that the rows in a result set will be\n processed in a reverse direction; last-to-first.\n This constant is used by the method setFetchDirection\n as a hint to the driver, which the driver may ignore."}, {"field_name": "FETCH_UNKNOWN", "field_sig": "static final\u00a0int FETCH_UNKNOWN", "description": "The constant indicating that the order in which rows in a\n result set will be processed is unknown.\n This constant is used by the method setFetchDirection\n as a hint to the driver, which the driver may ignore."}, {"field_name": "TYPE_FORWARD_ONLY", "field_sig": "static final\u00a0int TYPE_FORWARD_ONLY", "description": "The constant indicating the type for a ResultSet object\n whose cursor may move only forward."}, {"field_name": "TYPE_SCROLL_INSENSITIVE", "field_sig": "static final\u00a0int TYPE_SCROLL_INSENSITIVE", "description": "The constant indicating the type for a ResultSet object\n that is scrollable but generally not sensitive to changes to the data\n that underlies the ResultSet."}, {"field_name": "TYPE_SCROLL_SENSITIVE", "field_sig": "static final\u00a0int TYPE_SCROLL_SENSITIVE", "description": "The constant indicating the type for a ResultSet object\n that is scrollable and generally sensitive to changes to the data\n that underlies the ResultSet."}, {"field_name": "CONCUR_READ_ONLY", "field_sig": "static final\u00a0int CONCUR_READ_ONLY", "description": "The constant indicating the concurrency mode for a\n ResultSet object that may NOT be updated."}, {"field_name": "CONCUR_UPDATABLE", "field_sig": "static final\u00a0int CONCUR_UPDATABLE", "description": "The constant indicating the concurrency mode for a\n ResultSet object that may be updated."}, {"field_name": "HOLD_CURSORS_OVER_COMMIT", "field_sig": "static final\u00a0int HOLD_CURSORS_OVER_COMMIT", "description": "The constant indicating that open ResultSet objects with this\n holdability will remain open when the current transaction is committed."}, {"field_name": "CLOSE_CURSORS_AT_COMMIT", "field_sig": "static final\u00a0int CLOSE_CURSORS_AT_COMMIT", "description": "The constant indicating that open ResultSet objects with this\n holdability will be closed when the current transaction is committed."}], "methods": [{"method_name": "next", "method_sig": "boolean next()\n      throws SQLException", "description": "Moves the cursor forward one row from its current position.\n A ResultSet cursor is initially positioned\n before the first row; the first call to the method\n next makes the first row the current row; the\n second call makes the second row the current row, and so on.\n \n When a call to the next method returns false,\n the cursor is positioned after the last row. Any\n invocation of a ResultSet method which requires a\n current row will result in a SQLException being thrown.\n  If the result set type is TYPE_FORWARD_ONLY, it is vendor specified\n whether their JDBC driver implementation will return false or\n  throw an SQLException on a\n subsequent call to next.\n\n If an input stream is open for the current row, a call\n to the method next will\n implicitly close it. A ResultSet object's\n warning chain is cleared when a new row is read."}, {"method_name": "close", "method_sig": "void close()\n    throws SQLException", "description": "Releases this ResultSet object's database and\n JDBC resources immediately instead of waiting for\n this to happen when it is automatically closed.\n\n The closing of a ResultSet object does not close the Blob,\n Clob or NClob objects created by the ResultSet. Blob,\n Clob or NClob objects remain valid for at least the duration of the\n transaction in which they are created, unless their free method is invoked.\n\n When a ResultSet is closed, any ResultSetMetaData\n instances that were created by calling the  getMetaData\n method remain accessible.\n\n Note: A ResultSet object\n is automatically closed by the\n Statement object that generated it when\n that Statement object is closed,\n re-executed, or is used to retrieve the next result from a\n sequence of multiple results.\n\n Calling the method close on a ResultSet\n object that is already closed is a no-op."}, {"method_name": "wasNull", "method_sig": "boolean wasNull()\n         throws SQLException", "description": "Reports whether\n the last column read had a value of SQL NULL.\n Note that you must first call one of the getter methods\n on a column to try to read its value and then call\n the method wasNull to see if the value read was\n SQL NULL."}, {"method_name": "getString", "method_sig": "String getString (int columnIndex)\n          throws SQLException", "description": "Retrieves the value of the designated column in the current row\n of this ResultSet object as\n a String in the Java programming language."}, {"method_name": "getBoolean", "method_sig": "boolean getBoolean (int columnIndex)\n            throws SQLException", "description": "Retrieves the value of the designated column in the current row\n of this ResultSet object as\n a boolean in the Java programming language.\n\n If the designated column has a datatype of CHAR or VARCHAR\n and contains a \"0\" or has a datatype of BIT, TINYINT, SMALLINT, INTEGER or BIGINT\n and contains  a 0, a value of false is returned.  If the designated column has a datatype\n of CHAR or VARCHAR\n and contains a \"1\" or has a datatype of BIT, TINYINT, SMALLINT, INTEGER or BIGINT\n and contains  a 1, a value of true is returned."}, {"method_name": "getByte", "method_sig": "byte getByte (int columnIndex)\n      throws SQLException", "description": "Retrieves the value of the designated column in the current row\n of this ResultSet object as\n a byte in the Java programming language."}, {"method_name": "getShort", "method_sig": "short getShort (int columnIndex)\n        throws SQLException", "description": "Retrieves the value of the designated column in the current row\n of this ResultSet object as\n a short in the Java programming language."}, {"method_name": "getInt", "method_sig": "int getInt (int columnIndex)\n    throws SQLException", "description": "Retrieves the value of the designated column in the current row\n of this ResultSet object as\n an int in the Java programming language."}, {"method_name": "getLong", "method_sig": "long getLong (int columnIndex)\n      throws SQLException", "description": "Retrieves the value of the designated column in the current row\n of this ResultSet object as\n a long in the Java programming language."}, {"method_name": "getFloat", "method_sig": "float getFloat (int columnIndex)\n        throws SQLException", "description": "Retrieves the value of the designated column in the current row\n of this ResultSet object as\n a float in the Java programming language."}, {"method_name": "getDouble", "method_sig": "double getDouble (int columnIndex)\n          throws SQLException", "description": "Retrieves the value of the designated column in the current row\n of this ResultSet object as\n a double in the Java programming language."}, {"method_name": "getBigDecimal", "method_sig": "@Deprecated(since=\"1.2\")\nBigDecimal getBigDecimal (int columnIndex,\n                         int scale)\n                  throws SQLException", "description": "Retrieves the value of the designated column in the current row\n of this ResultSet object as\n a java.sql.BigDecimal in the Java programming language."}, {"method_name": "getBytes", "method_sig": "byte[] getBytes (int columnIndex)\n         throws SQLException", "description": "Retrieves the value of the designated column in the current row\n of this ResultSet object as\n a byte array in the Java programming language.\n The bytes represent the raw values returned by the driver."}, {"method_name": "getDate", "method_sig": "Date getDate (int columnIndex)\n      throws SQLException", "description": "Retrieves the value of the designated column in the current row\n of this ResultSet object as\n a java.sql.Date object in the Java programming language."}, {"method_name": "getTime", "method_sig": "Time getTime (int columnIndex)\n      throws SQLException", "description": "Retrieves the value of the designated column in the current row\n of this ResultSet object as\n a java.sql.Time object in the Java programming language."}, {"method_name": "getTimestamp", "method_sig": "Timestamp getTimestamp (int columnIndex)\n                throws SQLException", "description": "Retrieves the value of the designated column in the current row\n of this ResultSet object as\n a java.sql.Timestamp object in the Java programming language."}, {"method_name": "getAsciiStream", "method_sig": "InputStream getAsciiStream (int columnIndex)\n                    throws SQLException", "description": "Retrieves the value of the designated column in the current row\n of this ResultSet object as\n a stream of ASCII characters. The value can then be read in chunks from the\n stream. This method is particularly\n suitable for retrieving large LONGVARCHAR values.\n The JDBC driver will\n do any necessary conversion from the database format into ASCII.\n\n Note: All the data in the returned stream must be\n read prior to getting the value of any other column. The next\n call to a getter method implicitly closes the stream.  Also, a\n stream may return 0 when the method\n InputStream.available\n is called whether there is data available or not."}, {"method_name": "getUnicodeStream", "method_sig": "@Deprecated(since=\"1.2\")\nInputStream getUnicodeStream (int columnIndex)\n                      throws SQLException", "description": "Retrieves the value of the designated column in the current row\n of this ResultSet object as\n as a stream of two-byte 3 characters. The first byte is\n the high byte; the second byte is the low byte.\n\n The value can then be read in chunks from the\n stream. This method is particularly\n suitable for retrieving large LONGVARCHARvalues.  The\n JDBC driver will do any necessary conversion from the database\n format into Unicode.\n\n Note: All the data in the returned stream must be\n read prior to getting the value of any other column. The next\n call to a getter method implicitly closes the stream.\n Also, a stream may return 0 when the method\n InputStream.available\n is called, whether there is data available or not."}, {"method_name": "getBinaryStream", "method_sig": "InputStream getBinaryStream (int columnIndex)\n                     throws SQLException", "description": "Retrieves the value of the designated column in the current row\n of this ResultSet object as a  stream of\n uninterpreted bytes. The value can then be read in chunks from the\n stream. This method is particularly\n suitable for retrieving large LONGVARBINARY values.\n\n Note: All the data in the returned stream must be\n read prior to getting the value of any other column. The next\n call to a getter method implicitly closes the stream.  Also, a\n stream may return 0 when the method\n InputStream.available\n is called whether there is data available or not."}, {"method_name": "getString", "method_sig": "String getString (String columnLabel)\n          throws SQLException", "description": "Retrieves the value of the designated column in the current row\n of this ResultSet object as\n a String in the Java programming language."}, {"method_name": "getBoolean", "method_sig": "boolean getBoolean (String columnLabel)\n            throws SQLException", "description": "Retrieves the value of the designated column in the current row\n of this ResultSet object as\n a boolean in the Java programming language.\n\n If the designated column has a datatype of CHAR or VARCHAR\n and contains a \"0\" or has a datatype of BIT, TINYINT, SMALLINT, INTEGER or BIGINT\n and contains  a 0, a value of false is returned.  If the designated column has a datatype\n of CHAR or VARCHAR\n and contains a \"1\" or has a datatype of BIT, TINYINT, SMALLINT, INTEGER or BIGINT\n and contains  a 1, a value of true is returned."}, {"method_name": "getByte", "method_sig": "byte getByte (String columnLabel)\n      throws SQLException", "description": "Retrieves the value of the designated column in the current row\n of this ResultSet object as\n a byte in the Java programming language."}, {"method_name": "getShort", "method_sig": "short getShort (String columnLabel)\n        throws SQLException", "description": "Retrieves the value of the designated column in the current row\n of this ResultSet object as\n a short in the Java programming language."}, {"method_name": "getInt", "method_sig": "int getInt (String columnLabel)\n    throws SQLException", "description": "Retrieves the value of the designated column in the current row\n of this ResultSet object as\n an int in the Java programming language."}, {"method_name": "getLong", "method_sig": "long getLong (String columnLabel)\n      throws SQLException", "description": "Retrieves the value of the designated column in the current row\n of this ResultSet object as\n a long in the Java programming language."}, {"method_name": "getFloat", "method_sig": "float getFloat (String columnLabel)\n        throws SQLException", "description": "Retrieves the value of the designated column in the current row\n of this ResultSet object as\n a float in the Java programming language."}, {"method_name": "getDouble", "method_sig": "double getDouble (String columnLabel)\n          throws SQLException", "description": "Retrieves the value of the designated column in the current row\n of this ResultSet object as\n a double in the Java programming language."}, {"method_name": "getBigDecimal", "method_sig": "@Deprecated(since=\"1.2\")\nBigDecimal getBigDecimal (String columnLabel,\n                         int scale)\n                  throws SQLException", "description": "Retrieves the value of the designated column in the current row\n of this ResultSet object as\n a java.math.BigDecimal in the Java programming language."}, {"method_name": "getBytes", "method_sig": "byte[] getBytes (String columnLabel)\n         throws SQLException", "description": "Retrieves the value of the designated column in the current row\n of this ResultSet object as\n a byte array in the Java programming language.\n The bytes represent the raw values returned by the driver."}, {"method_name": "getDate", "method_sig": "Date getDate (String columnLabel)\n      throws SQLException", "description": "Retrieves the value of the designated column in the current row\n of this ResultSet object as\n a java.sql.Date object in the Java programming language."}, {"method_name": "getTime", "method_sig": "Time getTime (String columnLabel)\n      throws SQLException", "description": "Retrieves the value of the designated column in the current row\n of this ResultSet object as\n a java.sql.Time object in the Java programming language."}, {"method_name": "getTimestamp", "method_sig": "Timestamp getTimestamp (String columnLabel)\n                throws SQLException", "description": "Retrieves the value of the designated column in the current row\n of this ResultSet object as\n a java.sql.Timestamp object in the Java programming language."}, {"method_name": "getAsciiStream", "method_sig": "InputStream getAsciiStream (String columnLabel)\n                    throws SQLException", "description": "Retrieves the value of the designated column in the current row\n of this ResultSet object as a stream of\n ASCII characters. The value can then be read in chunks from the\n stream. This method is particularly\n suitable for retrieving large LONGVARCHAR values.\n The JDBC driver will\n do any necessary conversion from the database format into ASCII.\n\n Note: All the data in the returned stream must be\n read prior to getting the value of any other column. The next\n call to a getter method implicitly closes the stream. Also, a\n stream may return 0 when the method available\n is called whether there is data available or not."}, {"method_name": "getUnicodeStream", "method_sig": "@Deprecated(since=\"1.2\")\nInputStream getUnicodeStream (String columnLabel)\n                      throws SQLException", "description": "Retrieves the value of the designated column in the current row\n of this ResultSet object as a stream of two-byte\n Unicode characters. The first byte is the high byte; the second\n byte is the low byte.\n\n The value can then be read in chunks from the\n stream. This method is particularly\n suitable for retrieving large LONGVARCHAR values.\n The JDBC technology-enabled driver will\n do any necessary conversion from the database format into Unicode.\n\n Note: All the data in the returned stream must be\n read prior to getting the value of any other column. The next\n call to a getter method implicitly closes the stream.\n Also, a stream may return 0 when the method\n InputStream.available is called, whether there\n is data available or not."}, {"method_name": "getBinaryStream", "method_sig": "InputStream getBinaryStream (String columnLabel)\n                     throws SQLException", "description": "Retrieves the value of the designated column in the current row\n of this ResultSet object as a stream of uninterpreted\n bytes.\n The value can then be read in chunks from the\n stream. This method is particularly\n suitable for retrieving large LONGVARBINARY\n values.\n\n Note: All the data in the returned stream must be\n read prior to getting the value of any other column. The next\n call to a getter method implicitly closes the stream. Also, a\n stream may return 0 when the method available\n is called whether there is data available or not."}, {"method_name": "getWarnings", "method_sig": "SQLWarning getWarnings()\n                throws SQLException", "description": "Retrieves the first warning reported by calls on this\n ResultSet object.\n Subsequent warnings on this ResultSet object\n will be chained to the SQLWarning object that\n this method returns.\n\n The warning chain is automatically cleared each time a new\n row is read.  This method may not be called on a ResultSet\n object that has been closed; doing so will cause an\n SQLException to be thrown.\n \nNote: This warning chain only covers warnings caused\n by ResultSet methods.  Any warning caused by\n Statement methods\n (such as reading OUT parameters) will be chained on the\n Statement object."}, {"method_name": "clearWarnings", "method_sig": "void clearWarnings()\n            throws SQLException", "description": "Clears all warnings reported on this ResultSet object.\n After this method is called, the method getWarnings\n returns null until a new warning is\n reported for this ResultSet object."}, {"method_name": "getCursorName", "method_sig": "String getCursorName()\n              throws SQLException", "description": "Retrieves the name of the SQL cursor used by this ResultSet\n object.\n\n In SQL, a result table is retrieved through a cursor that is\n named. The current row of a result set can be updated or deleted\n using a positioned update/delete statement that references the\n cursor name. To insure that the cursor has the proper isolation\n level to support update, the cursor's SELECT statement\n should be of the form SELECT FOR UPDATE. If\n FOR UPDATE is omitted, the positioned updates may fail.\n\n The JDBC API supports this SQL feature by providing the name of the\n SQL cursor used by a ResultSet object.\n The current row of a ResultSet object\n is also the current row of this SQL cursor."}, {"method_name": "getMetaData", "method_sig": "ResultSetMetaData getMetaData()\n                       throws SQLException", "description": "Retrieves the  number, types and properties of\n this ResultSet object's columns."}, {"method_name": "getObject", "method_sig": "Object getObject (int columnIndex)\n          throws SQLException", "description": "Gets the value of the designated column in the current row\n of this ResultSet object as\n an Object in the Java programming language.\n\n This method will return the value of the given column as a\n Java object.  The type of the Java object will be the default\n Java object type corresponding to the column's SQL type,\n following the mapping for built-in types specified in the JDBC\n specification. If the value is an SQL NULL,\n the driver returns a Java null.\n\n This method may also be used to read database-specific\n abstract data types.\n\n In the JDBC 2.0 API, the behavior of method\n getObject is extended to materialize\n data of SQL user-defined types.\n \n If Connection.getTypeMap does not throw a\n SQLFeatureNotSupportedException,\n then when a column contains a structured or distinct value,\n the behavior of this method is as\n if it were a call to: getObject(columnIndex,\n this.getStatement().getConnection().getTypeMap()).\n\n If Connection.getTypeMap does throw a\n SQLFeatureNotSupportedException,\n then structured values are not supported, and distinct values\n are mapped to the default Java class as determined by the\n underlying SQL type of the DISTINCT type."}, {"method_name": "getObject", "method_sig": "Object getObject (String columnLabel)\n          throws SQLException", "description": "Gets the value of the designated column in the current row\n of this ResultSet object as\n an Object in the Java programming language.\n\n This method will return the value of the given column as a\n Java object.  The type of the Java object will be the default\n Java object type corresponding to the column's SQL type,\n following the mapping for built-in types specified in the JDBC\n specification. If the value is an SQL NULL,\n the driver returns a Java null.\n \n This method may also be used to read database-specific\n abstract data types.\n \n In the JDBC 2.0 API, the behavior of the method\n getObject is extended to materialize\n data of SQL user-defined types.  When a column contains\n a structured or distinct value, the behavior of this method is as\n if it were a call to: getObject(columnIndex,\n this.getStatement().getConnection().getTypeMap())."}, {"method_name": "findColumn", "method_sig": "int findColumn (String columnLabel)\n        throws SQLException", "description": "Maps the given ResultSet column label to its\n ResultSet column index."}, {"method_name": "getCharacterStream", "method_sig": "Reader getCharacterStream (int columnIndex)\n                   throws SQLException", "description": "Retrieves the value of the designated column in the current row\n of this ResultSet object as a\n java.io.Reader object."}, {"method_name": "getCharacterStream", "method_sig": "Reader getCharacterStream (String columnLabel)\n                   throws SQLException", "description": "Retrieves the value of the designated column in the current row\n of this ResultSet object as a\n java.io.Reader object."}, {"method_name": "getBigDecimal", "method_sig": "BigDecimal getBigDecimal (int columnIndex)\n                  throws SQLException", "description": "Retrieves the value of the designated column in the current row\n of this ResultSet object as a\n java.math.BigDecimal with full precision."}, {"method_name": "getBigDecimal", "method_sig": "BigDecimal getBigDecimal (String columnLabel)\n                  throws SQLException", "description": "Retrieves the value of the designated column in the current row\n of this ResultSet object as a\n java.math.BigDecimal with full precision."}, {"method_name": "isBeforeFirst", "method_sig": "boolean isBeforeFirst()\n               throws SQLException", "description": "Retrieves whether the cursor is before the first row in\n this ResultSet object.\n \nNote:Support for the isBeforeFirst method\n is optional for ResultSets with a result\n set type of TYPE_FORWARD_ONLY"}, {"method_name": "isAfterLast", "method_sig": "boolean isAfterLast()\n             throws SQLException", "description": "Retrieves whether the cursor is after the last row in\n this ResultSet object.\n \nNote:Support for the isAfterLast method\n is optional for ResultSets with a result\n set type of TYPE_FORWARD_ONLY"}, {"method_name": "isFirst", "method_sig": "boolean isFirst()\n         throws SQLException", "description": "Retrieves whether the cursor is on the first row of\n this ResultSet object.\n \nNote:Support for the isFirst method\n is optional for ResultSets with a result\n set type of TYPE_FORWARD_ONLY"}, {"method_name": "isLast", "method_sig": "boolean isLast()\n        throws SQLException", "description": "Retrieves whether the cursor is on the last row of\n this ResultSet object.\n  Note: Calling the method isLast may be expensive\n because the JDBC driver\n might need to fetch ahead one row in order to determine\n whether the current row is the last row in the result set.\n \nNote: Support for the isLast method\n is optional for ResultSets with a result\n set type of TYPE_FORWARD_ONLY"}, {"method_name": "beforeFirst", "method_sig": "void beforeFirst()\n          throws SQLException", "description": "Moves the cursor to the front of\n this ResultSet object, just before the\n first row. This method has no effect if the result set contains no rows."}, {"method_name": "afterLast", "method_sig": "void afterLast()\n        throws SQLException", "description": "Moves the cursor to the end of\n this ResultSet object, just after the\n last row. This method has no effect if the result set contains no rows."}, {"method_name": "first", "method_sig": "boolean first()\n       throws SQLException", "description": "Moves the cursor to the first row in\n this ResultSet object."}, {"method_name": "last", "method_sig": "boolean last()\n      throws SQLException", "description": "Moves the cursor to the last row in\n this ResultSet object."}, {"method_name": "getRow", "method_sig": "int getRow()\n    throws SQLException", "description": "Retrieves the current row number.  The first row is number 1, the\n second number 2, and so on.\n \nNote:Support for the getRow method\n is optional for ResultSets with a result\n set type of TYPE_FORWARD_ONLY"}, {"method_name": "absolute", "method_sig": "boolean absolute (int row)\n          throws SQLException", "description": "Moves the cursor to the given row number in\n this ResultSet object.\n\n If the row number is positive, the cursor moves to\n the given row number with respect to the\n beginning of the result set.  The first row is row 1, the second\n is row 2, and so on.\n\n If the given row number is negative, the cursor moves to\n an absolute row position with respect to\n the end of the result set.  For example, calling the method\n absolute(-1) positions the\n cursor on the last row; calling the method absolute(-2)\n moves the cursor to the next-to-last row, and so on.\n\n If the row number specified is zero, the cursor is moved to\n before the first row.\n\n An attempt to position the cursor beyond the first/last row in\n the result set leaves the cursor before the first row or after\n the last row.\n\n Note: Calling absolute(1) is the same\n as calling first(). Calling absolute(-1)\n is the same as calling last()."}, {"method_name": "relative", "method_sig": "boolean relative (int rows)\n          throws SQLException", "description": "Moves the cursor a relative number of rows, either positive or negative.\n Attempting to move beyond the first/last row in the\n result set positions the cursor before/after the\n the first/last row. Calling relative(0) is valid, but does\n not change the cursor position.\n\n Note: Calling the method relative(1)\n is identical to calling the method next() and\n calling the method relative(-1) is identical\n to calling the method previous()."}, {"method_name": "previous", "method_sig": "boolean previous()\n          throws SQLException", "description": "Moves the cursor to the previous row in this\n ResultSet object.\n\n When a call to the previous method returns false,\n the cursor is positioned before the first row.  Any invocation of a\n ResultSet method which requires a current row will result in a\n SQLException being thrown.\n\n If an input stream is open for the current row, a call to the method\n previous will implicitly close it.  A ResultSet\n  object's warning change is cleared when a new row is read."}, {"method_name": "setFetchDirection", "method_sig": "void setFetchDirection (int direction)\n                throws SQLException", "description": "Gives a hint as to the direction in which the rows in this\n ResultSet object will be processed.\n The initial value is determined by the\n Statement object\n that produced this ResultSet object.\n The fetch direction may be changed at any time."}, {"method_name": "getFetchDirection", "method_sig": "int getFetchDirection()\n               throws SQLException", "description": "Retrieves the fetch direction for this\n ResultSet object."}, {"method_name": "setFetchSize", "method_sig": "void setFetchSize (int rows)\n           throws SQLException", "description": "Gives the JDBC driver a hint as to the number of rows that should\n be fetched from the database when more rows are needed for this\n ResultSet object.\n If the fetch size specified is zero, the JDBC driver\n ignores the value and is free to make its own best guess as to what\n the fetch size should be.  The default value is set by the\n Statement object\n that created the result set.  The fetch size may be changed at any time."}, {"method_name": "getFetchSize", "method_sig": "int getFetchSize()\n          throws SQLException", "description": "Retrieves the fetch size for this\n ResultSet object."}, {"method_name": "getType", "method_sig": "int getType()\n     throws SQLException", "description": "Retrieves the type of this ResultSet object.\n The type is determined by the Statement object\n that created the result set."}, {"method_name": "getConcurrency", "method_sig": "int getConcurrency()\n            throws SQLException", "description": "Retrieves the concurrency mode of this ResultSet object.\n The concurrency used is determined by the\n Statement object that created the result set."}, {"method_name": "rowUpdated", "method_sig": "boolean rowUpdated()\n            throws SQLException", "description": "Retrieves whether the current row has been updated.  The value returned\n depends on whether or not the result set can detect updates.\n \nNote: Support for the rowUpdated method is optional with a result set\n concurrency of CONCUR_READ_ONLY"}, {"method_name": "rowInserted", "method_sig": "boolean rowInserted()\n             throws SQLException", "description": "Retrieves whether the current row has had an insertion.\n The value returned depends on whether or not this\n ResultSet object can detect visible inserts.\n \nNote: Support for the rowInserted method is optional with a result set\n concurrency of CONCUR_READ_ONLY"}, {"method_name": "rowDeleted", "method_sig": "boolean rowDeleted()\n            throws SQLException", "description": "Retrieves whether a row has been deleted.  A deleted row may leave\n a visible \"hole\" in a result set.  This method can be used to\n detect holes in a result set.  The value returned depends on whether\n or not this ResultSet object can detect deletions.\n \nNote: Support for the rowDeleted method is optional with a result set\n concurrency of CONCUR_READ_ONLY"}, {"method_name": "updateNull", "method_sig": "void updateNull (int columnIndex)\n         throws SQLException", "description": "Updates the designated column with a null value.\n\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not\n update the underlying database; instead the updateRow\n or insertRow methods are called to update the database."}, {"method_name": "updateBoolean", "method_sig": "void updateBoolean (int columnIndex,\n                   boolean x)\n            throws SQLException", "description": "Updates the designated column with a boolean value.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not\n update the underlying database; instead the updateRow or\n insertRow methods are called to update the database."}, {"method_name": "updateByte", "method_sig": "void updateByte (int columnIndex,\n                byte x)\n         throws SQLException", "description": "Updates the designated column with a byte value.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not\n update the underlying database; instead the updateRow or\n insertRow methods are called to update the database."}, {"method_name": "updateShort", "method_sig": "void updateShort (int columnIndex,\n                 short x)\n          throws SQLException", "description": "Updates the designated column with a short value.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not\n update the underlying database; instead the updateRow or\n insertRow methods are called to update the database."}, {"method_name": "updateInt", "method_sig": "void updateInt (int columnIndex,\n               int x)\n        throws SQLException", "description": "Updates the designated column with an int value.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not\n update the underlying database; instead the updateRow or\n insertRow methods are called to update the database."}, {"method_name": "updateLong", "method_sig": "void updateLong (int columnIndex,\n                long x)\n         throws SQLException", "description": "Updates the designated column with a long value.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not\n update the underlying database; instead the updateRow or\n insertRow methods are called to update the database."}, {"method_name": "updateFloat", "method_sig": "void updateFloat (int columnIndex,\n                 float x)\n          throws SQLException", "description": "Updates the designated column with a float value.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not\n update the underlying database; instead the updateRow or\n insertRow methods are called to update the database."}, {"method_name": "updateDouble", "method_sig": "void updateDouble (int columnIndex,\n                  double x)\n           throws SQLException", "description": "Updates the designated column with a double value.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not\n update the underlying database; instead the updateRow or\n insertRow methods are called to update the database."}, {"method_name": "updateBigDecimal", "method_sig": "void updateBigDecimal (int columnIndex,\n                      BigDecimal x)\n               throws SQLException", "description": "Updates the designated column with a java.math.BigDecimal\n value.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not\n update the underlying database; instead the updateRow or\n insertRow methods are called to update the database."}, {"method_name": "updateString", "method_sig": "void updateString (int columnIndex,\n                  String x)\n           throws SQLException", "description": "Updates the designated column with a String value.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not\n update the underlying database; instead the updateRow or\n insertRow methods are called to update the database."}, {"method_name": "updateBytes", "method_sig": "void updateBytes (int columnIndex,\n                 byte[] x)\n          throws SQLException", "description": "Updates the designated column with a byte array value.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not\n update the underlying database; instead the updateRow or\n insertRow methods are called to update the database."}, {"method_name": "updateDate", "method_sig": "void updateDate (int columnIndex,\n                Date x)\n         throws SQLException", "description": "Updates the designated column with a java.sql.Date value.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not\n update the underlying database; instead the updateRow or\n insertRow methods are called to update the database."}, {"method_name": "updateTime", "method_sig": "void updateTime (int columnIndex,\n                Time x)\n         throws SQLException", "description": "Updates the designated column with a java.sql.Time value.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not\n update the underlying database; instead the updateRow or\n insertRow methods are called to update the database."}, {"method_name": "updateTimestamp", "method_sig": "void updateTimestamp (int columnIndex,\n                     Timestamp x)\n              throws SQLException", "description": "Updates the designated column with a java.sql.Timestamp\n value.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not\n update the underlying database; instead the updateRow or\n insertRow methods are called to update the database."}, {"method_name": "updateAsciiStream", "method_sig": "void updateAsciiStream (int columnIndex,\n                       InputStream x,\n                       int length)\n                throws SQLException", "description": "Updates the designated column with an ascii stream value, which will have\n the specified number of bytes.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not\n update the underlying database; instead the updateRow or\n insertRow methods are called to update the database."}, {"method_name": "updateBinaryStream", "method_sig": "void updateBinaryStream (int columnIndex,\n                        InputStream x,\n                        int length)\n                 throws SQLException", "description": "Updates the designated column with a binary stream value, which will have\n the specified number of bytes.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not\n update the underlying database; instead the updateRow or\n insertRow methods are called to update the database."}, {"method_name": "updateCharacterStream", "method_sig": "void updateCharacterStream (int columnIndex,\n                           Reader x,\n                           int length)\n                    throws SQLException", "description": "Updates the designated column with a character stream value, which will have\n the specified number of bytes.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not\n update the underlying database; instead the updateRow or\n insertRow methods are called to update the database."}, {"method_name": "updateObject", "method_sig": "void updateObject (int columnIndex,\n                  Object x,\n                  int scaleOrLength)\n           throws SQLException", "description": "Updates the designated column with an Object value.\n\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not\n update the underlying database; instead the updateRow or\n insertRow methods are called to update the database.\n\n If the second argument is an InputStream then the stream must contain\n the number of bytes specified by scaleOrLength.  If the second argument is a\n Reader then the reader must contain the number of characters specified\n by scaleOrLength. If these conditions are not true the driver will generate a\n SQLException when the statement is executed."}, {"method_name": "updateObject", "method_sig": "void updateObject (int columnIndex,\n                  Object x)\n           throws SQLException", "description": "Updates the designated column with an Object value.\n\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not\n update the underlying database; instead the updateRow or\n insertRow methods are called to update the database."}, {"method_name": "updateNull", "method_sig": "void updateNull (String columnLabel)\n         throws SQLException", "description": "Updates the designated column with a null value.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not\n update the underlying database; instead the updateRow or\n insertRow methods are called to update the database."}, {"method_name": "updateBoolean", "method_sig": "void updateBoolean (String columnLabel,\n                   boolean x)\n            throws SQLException", "description": "Updates the designated column with a boolean value.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not\n update the underlying database; instead the updateRow or\n insertRow methods are called to update the database."}, {"method_name": "updateByte", "method_sig": "void updateByte (String columnLabel,\n                byte x)\n         throws SQLException", "description": "Updates the designated column with a byte value.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not\n update the underlying database; instead the updateRow or\n insertRow methods are called to update the database."}, {"method_name": "updateShort", "method_sig": "void updateShort (String columnLabel,\n                 short x)\n          throws SQLException", "description": "Updates the designated column with a short value.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not\n update the underlying database; instead the updateRow or\n insertRow methods are called to update the database."}, {"method_name": "updateInt", "method_sig": "void updateInt (String columnLabel,\n               int x)\n        throws SQLException", "description": "Updates the designated column with an int value.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not\n update the underlying database; instead the updateRow or\n insertRow methods are called to update the database."}, {"method_name": "updateLong", "method_sig": "void updateLong (String columnLabel,\n                long x)\n         throws SQLException", "description": "Updates the designated column with a long value.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not\n update the underlying database; instead the updateRow or\n insertRow methods are called to update the database."}, {"method_name": "updateFloat", "method_sig": "void updateFloat (String columnLabel,\n                 float x)\n          throws SQLException", "description": "Updates the designated column with a float  value.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not\n update the underlying database; instead the updateRow or\n insertRow methods are called to update the database."}, {"method_name": "updateDouble", "method_sig": "void updateDouble (String columnLabel,\n                  double x)\n           throws SQLException", "description": "Updates the designated column with a double value.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not\n update the underlying database; instead the updateRow or\n insertRow methods are called to update the database."}, {"method_name": "updateBigDecimal", "method_sig": "void updateBigDecimal (String columnLabel,\n                      BigDecimal x)\n               throws SQLException", "description": "Updates the designated column with a java.sql.BigDecimal\n value.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not\n update the underlying database; instead the updateRow or\n insertRow methods are called to update the database."}, {"method_name": "updateString", "method_sig": "void updateString (String columnLabel,\n                  String x)\n           throws SQLException", "description": "Updates the designated column with a String value.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not\n update the underlying database; instead the updateRow or\n insertRow methods are called to update the database."}, {"method_name": "updateBytes", "method_sig": "void updateBytes (String columnLabel,\n                 byte[] x)\n          throws SQLException", "description": "Updates the designated column with a byte array value.\n\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not\n update the underlying database; instead the updateRow\n or insertRow methods are called to update the database."}, {"method_name": "updateDate", "method_sig": "void updateDate (String columnLabel,\n                Date x)\n         throws SQLException", "description": "Updates the designated column with a java.sql.Date value.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not\n update the underlying database; instead the updateRow or\n insertRow methods are called to update the database."}, {"method_name": "updateTime", "method_sig": "void updateTime (String columnLabel,\n                Time x)\n         throws SQLException", "description": "Updates the designated column with a java.sql.Time value.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not\n update the underlying database; instead the updateRow or\n insertRow methods are called to update the database."}, {"method_name": "updateTimestamp", "method_sig": "void updateTimestamp (String columnLabel,\n                     Timestamp x)\n              throws SQLException", "description": "Updates the designated column with a java.sql.Timestamp\n value.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not\n update the underlying database; instead the updateRow or\n insertRow methods are called to update the database."}, {"method_name": "updateAsciiStream", "method_sig": "void updateAsciiStream (String columnLabel,\n                       InputStream x,\n                       int length)\n                throws SQLException", "description": "Updates the designated column with an ascii stream value, which will have\n the specified number of bytes.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not\n update the underlying database; instead the updateRow or\n insertRow methods are called to update the database."}, {"method_name": "updateBinaryStream", "method_sig": "void updateBinaryStream (String columnLabel,\n                        InputStream x,\n                        int length)\n                 throws SQLException", "description": "Updates the designated column with a binary stream value, which will have\n the specified number of bytes.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not\n update the underlying database; instead the updateRow or\n insertRow methods are called to update the database."}, {"method_name": "updateCharacterStream", "method_sig": "void updateCharacterStream (String columnLabel,\n                           Reader reader,\n                           int length)\n                    throws SQLException", "description": "Updates the designated column with a character stream value, which will have\n the specified number of bytes.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not\n update the underlying database; instead the updateRow or\n insertRow methods are called to update the database."}, {"method_name": "updateObject", "method_sig": "void updateObject (String columnLabel,\n                  Object x,\n                  int scaleOrLength)\n           throws SQLException", "description": "Updates the designated column with an Object value.\n\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not\n update the underlying database; instead the updateRow or\n insertRow methods are called to update the database.\n\n If the second argument is an InputStream then the stream must contain\n the number of bytes specified by scaleOrLength.  If the second argument is a\n Reader then the reader must contain the number of characters specified\n by scaleOrLength. If these conditions are not true the driver will generate a\n SQLException when the statement is executed."}, {"method_name": "updateObject", "method_sig": "void updateObject (String columnLabel,\n                  Object x)\n           throws SQLException", "description": "Updates the designated column with an Object value.\n\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not\n update the underlying database; instead the updateRow or\n insertRow methods are called to update the database."}, {"method_name": "insertRow", "method_sig": "void insertRow()\n        throws SQLException", "description": "Inserts the contents of the insert row into this\n ResultSet object and into the database.\n The cursor must be on the insert row when this method is called."}, {"method_name": "updateRow", "method_sig": "void updateRow()\n        throws SQLException", "description": "Updates the underlying database with the new contents of the\n current row of this ResultSet object.\n This method cannot be called when the cursor is on the insert row."}, {"method_name": "deleteRow", "method_sig": "void deleteRow()\n        throws SQLException", "description": "Deletes the current row from this ResultSet object\n and from the underlying database.  This method cannot be called when\n the cursor is on the insert row."}, {"method_name": "refreshRow", "method_sig": "void refreshRow()\n         throws SQLException", "description": "Refreshes the current row with its most recent value in\n the database.  This method cannot be called when\n the cursor is on the insert row.\n\n The refreshRow method provides a way for an\n application to\n explicitly tell the JDBC driver to refetch a row(s) from the\n database.  An application may want to call refreshRow when\n caching or prefetching is being done by the JDBC driver to\n fetch the latest value of a row from the database.  The JDBC driver\n may actually refresh multiple rows at once if the fetch size is\n greater than one.\n\n  All values are refetched subject to the transaction isolation\n level and cursor sensitivity.  If refreshRow is called after\n calling an updater method, but before calling\n the method updateRow, then the\n updates made to the row are lost.  Calling the method\n refreshRow frequently will likely slow performance."}, {"method_name": "cancelRowUpdates", "method_sig": "void cancelRowUpdates()\n               throws SQLException", "description": "Cancels the updates made to the current row in this\n ResultSet object.\n This method may be called after calling an\n updater method(s) and before calling\n the method updateRow to roll back\n the updates made to a row.  If no updates have been made or\n updateRow has already been called, this method has no\n effect."}, {"method_name": "moveToInsertRow", "method_sig": "void moveToInsertRow()\n              throws SQLException", "description": "Moves the cursor to the insert row.  The current cursor position is\n remembered while the cursor is positioned on the insert row.\n\n The insert row is a special row associated with an updatable\n result set.  It is essentially a buffer where a new row may\n be constructed by calling the updater methods prior to\n inserting the row into the result set.\n\n Only the updater, getter,\n and insertRow methods may be\n called when the cursor is on the insert row.  All of the columns in\n a result set must be given a value each time this method is\n called before calling insertRow.\n An updater method must be called before a\n getter method can be called on a column value."}, {"method_name": "moveToCurrentRow", "method_sig": "void moveToCurrentRow()\n               throws SQLException", "description": "Moves the cursor to the remembered cursor position, usually the\n current row.  This method has no effect if the cursor is not on\n the insert row."}, {"method_name": "getStatement", "method_sig": "Statement getStatement()\n                throws SQLException", "description": "Retrieves the Statement object that produced this\n ResultSet object.\n If the result set was generated some other way, such as by a\n DatabaseMetaData method, this method  may return\n null."}, {"method_name": "getObject", "method_sig": "Object getObject (int columnIndex,\n                 Map<String, Class<?>> map)\n          throws SQLException", "description": "Retrieves the value of the designated column in the current row\n of this ResultSet object as an Object\n in the Java programming language.\n If the value is an SQL NULL,\n the driver returns a Java null.\n This method uses the given Map object\n for the custom mapping of the\n SQL structured or distinct type that is being retrieved."}, {"method_name": "getRef", "method_sig": "Ref getRef (int columnIndex)\n    throws SQLException", "description": "Retrieves the value of the designated column in the current row\n of this ResultSet object as a Ref object\n in the Java programming language."}, {"method_name": "getBlob", "method_sig": "Blob getBlob (int columnIndex)\n      throws SQLException", "description": "Retrieves the value of the designated column in the current row\n of this ResultSet object as a Blob object\n in the Java programming language."}, {"method_name": "getClob", "method_sig": "Clob getClob (int columnIndex)\n      throws SQLException", "description": "Retrieves the value of the designated column in the current row\n of this ResultSet object as a Clob object\n in the Java programming language."}, {"method_name": "getArray", "method_sig": "Array getArray (int columnIndex)\n        throws SQLException", "description": "Retrieves the value of the designated column in the current row\n of this ResultSet object as an Array object\n in the Java programming language."}, {"method_name": "getObject", "method_sig": "Object getObject (String columnLabel,\n                 Map<String, Class<?>> map)\n          throws SQLException", "description": "Retrieves the value of the designated column in the current row\n of this ResultSet object as an Object\n in the Java programming language.\n If the value is an SQL NULL,\n the driver returns a Java null.\n This method uses the specified Map object for\n custom mapping if appropriate."}, {"method_name": "getRef", "method_sig": "Ref getRef (String columnLabel)\n    throws SQLException", "description": "Retrieves the value of the designated column in the current row\n of this ResultSet object as a Ref object\n in the Java programming language."}, {"method_name": "getBlob", "method_sig": "Blob getBlob (String columnLabel)\n      throws SQLException", "description": "Retrieves the value of the designated column in the current row\n of this ResultSet object as a Blob object\n in the Java programming language."}, {"method_name": "getClob", "method_sig": "Clob getClob (String columnLabel)\n      throws SQLException", "description": "Retrieves the value of the designated column in the current row\n of this ResultSet object as a Clob object\n in the Java programming language."}, {"method_name": "getArray", "method_sig": "Array getArray (String columnLabel)\n        throws SQLException", "description": "Retrieves the value of the designated column in the current row\n of this ResultSet object as an Array object\n in the Java programming language."}, {"method_name": "getDate", "method_sig": "Date getDate (int columnIndex,\n             Calendar cal)\n      throws SQLException", "description": "Retrieves the value of the designated column in the current row\n of this ResultSet object as a java.sql.Date object\n in the Java programming language.\n This method uses the given calendar to construct an appropriate millisecond\n value for the date if the underlying database does not store\n timezone information."}, {"method_name": "getDate", "method_sig": "Date getDate (String columnLabel,\n             Calendar cal)\n      throws SQLException", "description": "Retrieves the value of the designated column in the current row\n of this ResultSet object as a java.sql.Date object\n in the Java programming language.\n This method uses the given calendar to construct an appropriate millisecond\n value for the date if the underlying database does not store\n timezone information."}, {"method_name": "getTime", "method_sig": "Time getTime (int columnIndex,\n             Calendar cal)\n      throws SQLException", "description": "Retrieves the value of the designated column in the current row\n of this ResultSet object as a java.sql.Time object\n in the Java programming language.\n This method uses the given calendar to construct an appropriate millisecond\n value for the time if the underlying database does not store\n timezone information."}, {"method_name": "getTime", "method_sig": "Time getTime (String columnLabel,\n             Calendar cal)\n      throws SQLException", "description": "Retrieves the value of the designated column in the current row\n of this ResultSet object as a java.sql.Time object\n in the Java programming language.\n This method uses the given calendar to construct an appropriate millisecond\n value for the time if the underlying database does not store\n timezone information."}, {"method_name": "getTimestamp", "method_sig": "Timestamp getTimestamp (int columnIndex,\n                       Calendar cal)\n                throws SQLException", "description": "Retrieves the value of the designated column in the current row\n of this ResultSet object as a java.sql.Timestamp object\n in the Java programming language.\n This method uses the given calendar to construct an appropriate millisecond\n value for the timestamp if the underlying database does not store\n timezone information."}, {"method_name": "getTimestamp", "method_sig": "Timestamp getTimestamp (String columnLabel,\n                       Calendar cal)\n                throws SQLException", "description": "Retrieves the value of the designated column in the current row\n of this ResultSet object as a java.sql.Timestamp object\n in the Java programming language.\n This method uses the given calendar to construct an appropriate millisecond\n value for the timestamp if the underlying database does not store\n timezone information."}, {"method_name": "getURL", "method_sig": "URL getURL (int columnIndex)\n    throws SQLException", "description": "Retrieves the value of the designated column in the current row\n of this ResultSet object as a java.net.URL\n object in the Java programming language."}, {"method_name": "getURL", "method_sig": "URL getURL (String columnLabel)\n    throws SQLException", "description": "Retrieves the value of the designated column in the current row\n of this ResultSet object as a java.net.URL\n object in the Java programming language."}, {"method_name": "updateRef", "method_sig": "void updateRef (int columnIndex,\n               Ref x)\n        throws SQLException", "description": "Updates the designated column with a java.sql.Ref value.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not\n update the underlying database; instead the updateRow or\n insertRow methods are called to update the database."}, {"method_name": "updateRef", "method_sig": "void updateRef (String columnLabel,\n               Ref x)\n        throws SQLException", "description": "Updates the designated column with a java.sql.Ref value.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not\n update the underlying database; instead the updateRow or\n insertRow methods are called to update the database."}, {"method_name": "updateBlob", "method_sig": "void updateBlob (int columnIndex,\n                Blob x)\n         throws SQLException", "description": "Updates the designated column with a java.sql.Blob value.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not\n update the underlying database; instead the updateRow or\n insertRow methods are called to update the database."}, {"method_name": "updateBlob", "method_sig": "void updateBlob (String columnLabel,\n                Blob x)\n         throws SQLException", "description": "Updates the designated column with a java.sql.Blob value.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not\n update the underlying database; instead the updateRow or\n insertRow methods are called to update the database."}, {"method_name": "updateClob", "method_sig": "void updateClob (int columnIndex,\n                Clob x)\n         throws SQLException", "description": "Updates the designated column with a java.sql.Clob value.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not\n update the underlying database; instead the updateRow or\n insertRow methods are called to update the database."}, {"method_name": "updateClob", "method_sig": "void updateClob (String columnLabel,\n                Clob x)\n         throws SQLException", "description": "Updates the designated column with a java.sql.Clob value.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not\n update the underlying database; instead the updateRow or\n insertRow methods are called to update the database."}, {"method_name": "updateArray", "method_sig": "void updateArray (int columnIndex,\n                 Array x)\n          throws SQLException", "description": "Updates the designated column with a java.sql.Array value.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not\n update the underlying database; instead the updateRow or\n insertRow methods are called to update the database."}, {"method_name": "updateArray", "method_sig": "void updateArray (String columnLabel,\n                 Array x)\n          throws SQLException", "description": "Updates the designated column with a java.sql.Array value.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not\n update the underlying database; instead the updateRow or\n insertRow methods are called to update the database."}, {"method_name": "getRowId", "method_sig": "RowId getRowId (int columnIndex)\n        throws SQLException", "description": "Retrieves the value of the designated column in the current row of this\n ResultSet object as a java.sql.RowId object in the Java\n programming language."}, {"method_name": "getRowId", "method_sig": "RowId getRowId (String columnLabel)\n        throws SQLException", "description": "Retrieves the value of the designated column in the current row of this\n ResultSet object as a java.sql.RowId object in the Java\n programming language."}, {"method_name": "updateRowId", "method_sig": "void updateRowId (int columnIndex,\n                 RowId x)\n          throws SQLException", "description": "Updates the designated column with a RowId value. The updater\n methods are used to update column values in the current row or the insert\n row. The updater methods do not update the underlying database; instead\n the updateRow or insertRow methods are called\n to update the database."}, {"method_name": "updateRowId", "method_sig": "void updateRowId (String columnLabel,\n                 RowId x)\n          throws SQLException", "description": "Updates the designated column with a RowId value. The updater\n methods are used to update column values in the current row or the insert\n row. The updater methods do not update the underlying database; instead\n the updateRow or insertRow methods are called\n to update the database."}, {"method_name": "getHoldability", "method_sig": "int getHoldability()\n            throws SQLException", "description": "Retrieves the holdability of this ResultSet object"}, {"method_name": "isClosed", "method_sig": "boolean isClosed()\n          throws SQLException", "description": "Retrieves whether this ResultSet object has been closed. A ResultSet is closed if the\n method close has been called on it, or if it is automatically closed."}, {"method_name": "updateNString", "method_sig": "void updateNString (int columnIndex,\n                   String nString)\n            throws SQLException", "description": "Updates the designated column with a String value.\n It is intended for use when updating NCHAR,NVARCHAR\n and LONGNVARCHAR columns.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not\n update the underlying database; instead the updateRow or\n insertRow methods are called to update the database."}, {"method_name": "updateNString", "method_sig": "void updateNString (String columnLabel,\n                   String nString)\n            throws SQLException", "description": "Updates the designated column with a String value.\n It is intended for use when updating NCHAR,NVARCHAR\n and LONGNVARCHAR columns.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not\n update the underlying database; instead the updateRow or\n insertRow methods are called to update the database."}, {"method_name": "updateNClob", "method_sig": "void updateNClob (int columnIndex,\n                 NClob nClob)\n          throws SQLException", "description": "Updates the designated column with a java.sql.NClob value.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not\n update the underlying database; instead the updateRow or\n insertRow methods are called to update the database."}, {"method_name": "updateNClob", "method_sig": "void updateNClob (String columnLabel,\n                 NClob nClob)\n          throws SQLException", "description": "Updates the designated column with a java.sql.NClob value.\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not\n update the underlying database; instead the updateRow or\n insertRow methods are called to update the database."}, {"method_name": "getNClob", "method_sig": "NClob getNClob (int columnIndex)\n        throws SQLException", "description": "Retrieves the value of the designated column in the current row\n of this ResultSet object as a NClob object\n in the Java programming language."}, {"method_name": "getNClob", "method_sig": "NClob getNClob (String columnLabel)\n        throws SQLException", "description": "Retrieves the value of the designated column in the current row\n of this ResultSet object as a NClob object\n in the Java programming language."}, {"method_name": "getSQLXML", "method_sig": "SQLXML getSQLXML (int columnIndex)\n          throws SQLException", "description": "Retrieves the value of the designated column in  the current row of\n  this ResultSet as a\n java.sql.SQLXML object in the Java programming language."}, {"method_name": "getSQLXML", "method_sig": "SQLXML getSQLXML (String columnLabel)\n          throws SQLException", "description": "Retrieves the value of the designated column in  the current row of\n  this ResultSet as a\n java.sql.SQLXML object in the Java programming language."}, {"method_name": "updateSQLXML", "method_sig": "void updateSQLXML (int columnIndex,\n                  SQLXML xmlObject)\n           throws SQLException", "description": "Updates the designated column with a java.sql.SQLXML value.\n The updater\n methods are used to update column values in the current row or the insert\n row. The updater methods do not update the underlying database; instead\n the updateRow or insertRow methods are called\n to update the database."}, {"method_name": "updateSQLXML", "method_sig": "void updateSQLXML (String columnLabel,\n                  SQLXML xmlObject)\n           throws SQLException", "description": "Updates the designated column with a java.sql.SQLXML value.\n The updater\n methods are used to update column values in the current row or the insert\n row. The updater methods do not update the underlying database; instead\n the updateRow or insertRow methods are called\n to update the database."}, {"method_name": "getNString", "method_sig": "String getNString (int columnIndex)\n           throws SQLException", "description": "Retrieves the value of the designated column in the current row\n of this ResultSet object as\n a String in the Java programming language.\n It is intended for use when\n accessing  NCHAR,NVARCHAR\n and LONGNVARCHAR columns."}, {"method_name": "getNString", "method_sig": "String getNString (String columnLabel)\n           throws SQLException", "description": "Retrieves the value of the designated column in the current row\n of this ResultSet object as\n a String in the Java programming language.\n It is intended for use when\n accessing  NCHAR,NVARCHAR\n and LONGNVARCHAR columns."}, {"method_name": "getNCharacterStream", "method_sig": "Reader getNCharacterStream (int columnIndex)\n                    throws SQLException", "description": "Retrieves the value of the designated column in the current row\n of this ResultSet object as a\n java.io.Reader object.\n It is intended for use when\n accessing  NCHAR,NVARCHAR\n and LONGNVARCHAR columns."}, {"method_name": "getNCharacterStream", "method_sig": "Reader getNCharacterStream (String columnLabel)\n                    throws SQLException", "description": "Retrieves the value of the designated column in the current row\n of this ResultSet object as a\n java.io.Reader object.\n It is intended for use when\n accessing  NCHAR,NVARCHAR\n and LONGNVARCHAR columns."}, {"method_name": "updateNCharacterStream", "method_sig": "void updateNCharacterStream (int columnIndex,\n                            Reader x,\n                            long length)\n                     throws SQLException", "description": "Updates the designated column with a character stream value, which will have\n the specified number of bytes.   The\n driver does the necessary conversion from Java character format to\n the national character set in the database.\n It is intended for use when\n updating  NCHAR,NVARCHAR\n and LONGNVARCHAR columns.\n \n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not\n update the underlying database; instead the updateRow or\n insertRow methods are called to update the database."}, {"method_name": "updateNCharacterStream", "method_sig": "void updateNCharacterStream (String columnLabel,\n                            Reader reader,\n                            long length)\n                     throws SQLException", "description": "Updates the designated column with a character stream value, which will have\n the specified number of bytes.  The\n driver does the necessary conversion from Java character format to\n the national character set in the database.\n It is intended for use when\n updating  NCHAR,NVARCHAR\n and LONGNVARCHAR columns.\n \n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not\n update the underlying database; instead the updateRow or\n insertRow methods are called to update the database."}, {"method_name": "updateAsciiStream", "method_sig": "void updateAsciiStream (int columnIndex,\n                       InputStream x,\n                       long length)\n                throws SQLException", "description": "Updates the designated column with an ascii stream value, which will have\n the specified number of bytes.\n \n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not\n update the underlying database; instead the updateRow or\n insertRow methods are called to update the database."}, {"method_name": "updateBinaryStream", "method_sig": "void updateBinaryStream (int columnIndex,\n                        InputStream x,\n                        long length)\n                 throws SQLException", "description": "Updates the designated column with a binary stream value, which will have\n the specified number of bytes.\n \n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not\n update the underlying database; instead the updateRow or\n insertRow methods are called to update the database."}, {"method_name": "updateCharacterStream", "method_sig": "void updateCharacterStream (int columnIndex,\n                           Reader x,\n                           long length)\n                    throws SQLException", "description": "Updates the designated column with a character stream value, which will have\n the specified number of bytes.\n \n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not\n update the underlying database; instead the updateRow or\n insertRow methods are called to update the database."}, {"method_name": "updateAsciiStream", "method_sig": "void updateAsciiStream (String columnLabel,\n                       InputStream x,\n                       long length)\n                throws SQLException", "description": "Updates the designated column with an ascii stream value, which will have\n the specified number of bytes.\n \n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not\n update the underlying database; instead the updateRow or\n insertRow methods are called to update the database."}, {"method_name": "updateBinaryStream", "method_sig": "void updateBinaryStream (String columnLabel,\n                        InputStream x,\n                        long length)\n                 throws SQLException", "description": "Updates the designated column with a binary stream value, which will have\n the specified number of bytes.\n \n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not\n update the underlying database; instead the updateRow or\n insertRow methods are called to update the database."}, {"method_name": "updateCharacterStream", "method_sig": "void updateCharacterStream (String columnLabel,\n                           Reader reader,\n                           long length)\n                    throws SQLException", "description": "Updates the designated column with a character stream value, which will have\n the specified number of bytes.\n \n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not\n update the underlying database; instead the updateRow or\n insertRow methods are called to update the database."}, {"method_name": "updateBlob", "method_sig": "void updateBlob (int columnIndex,\n                InputStream inputStream,\n                long length)\n         throws SQLException", "description": "Updates the designated column using the given input stream, which\n will have the specified number of bytes.\n\n \n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not\n update the underlying database; instead the updateRow or\n insertRow methods are called to update the database."}, {"method_name": "updateBlob", "method_sig": "void updateBlob (String columnLabel,\n                InputStream inputStream,\n                long length)\n         throws SQLException", "description": "Updates the designated column using the given input stream, which\n will have the specified number of bytes.\n\n \n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not\n update the underlying database; instead the updateRow or\n insertRow methods are called to update the database."}, {"method_name": "updateClob", "method_sig": "void updateClob (int columnIndex,\n                Reader reader,\n                long length)\n         throws SQLException", "description": "Updates the designated column using the given Reader\n object, which is the given number of characters long.\n When a very large UNICODE value is input to a LONGVARCHAR\n parameter, it may be more practical to send it via a\n java.io.Reader object. The JDBC driver will\n do any necessary conversion from UNICODE to the database char format.\n\n \n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not\n update the underlying database; instead the updateRow or\n insertRow methods are called to update the database."}, {"method_name": "updateClob", "method_sig": "void updateClob (String columnLabel,\n                Reader reader,\n                long length)\n         throws SQLException", "description": "Updates the designated column using the given Reader\n object, which is the given number of characters long.\n When a very large UNICODE value is input to a LONGVARCHAR\n parameter, it may be more practical to send it via a\n java.io.Reader object.  The JDBC driver will\n do any necessary conversion from UNICODE to the database char format.\n\n \n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not\n update the underlying database; instead the updateRow or\n insertRow methods are called to update the database."}, {"method_name": "updateNClob", "method_sig": "void updateNClob (int columnIndex,\n                 Reader reader,\n                 long length)\n          throws SQLException", "description": "Updates the designated column using the given Reader\n object, which is the given number of characters long.\n When a very large UNICODE value is input to a LONGVARCHAR\n parameter, it may be more practical to send it via a\n java.io.Reader object. The JDBC driver will\n do any necessary conversion from UNICODE to the database char format.\n\n \n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not\n update the underlying database; instead the updateRow or\n insertRow methods are called to update the database."}, {"method_name": "updateNClob", "method_sig": "void updateNClob (String columnLabel,\n                 Reader reader,\n                 long length)\n          throws SQLException", "description": "Updates the designated column using the given Reader\n object, which is the given number of characters long.\n When a very large UNICODE value is input to a LONGVARCHAR\n parameter, it may be more practical to send it via a\n java.io.Reader object. The JDBC driver will\n do any necessary conversion from UNICODE to the database char format.\n\n \n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not\n update the underlying database; instead the updateRow or\n insertRow methods are called to update the database."}, {"method_name": "updateNCharacterStream", "method_sig": "void updateNCharacterStream (int columnIndex,\n                            Reader x)\n                     throws SQLException", "description": "Updates the designated column with a character stream value.\n The data will be read from the stream\n as needed until end-of-stream is reached.  The\n driver does the necessary conversion from Java character format to\n the national character set in the database.\n It is intended for use when\n updating  NCHAR,NVARCHAR\n and LONGNVARCHAR columns.\n \n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not\n update the underlying database; instead the updateRow or\n insertRow methods are called to update the database.\n\n Note: Consult your JDBC driver documentation to determine if\n it might be more efficient to use a version of\n updateNCharacterStream which takes a length parameter."}, {"method_name": "updateNCharacterStream", "method_sig": "void updateNCharacterStream (String columnLabel,\n                            Reader reader)\n                     throws SQLException", "description": "Updates the designated column with a character stream value.\n The data will be read from the stream\n as needed until end-of-stream is reached.  The\n driver does the necessary conversion from Java character format to\n the national character set in the database.\n It is intended for use when\n updating  NCHAR,NVARCHAR\n and LONGNVARCHAR columns.\n \n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not\n update the underlying database; instead the updateRow or\n insertRow methods are called to update the database.\n\n Note: Consult your JDBC driver documentation to determine if\n it might be more efficient to use a version of\n updateNCharacterStream which takes a length parameter."}, {"method_name": "updateAsciiStream", "method_sig": "void updateAsciiStream (int columnIndex,\n                       InputStream x)\n                throws SQLException", "description": "Updates the designated column with an ascii stream value.\n The data will be read from the stream\n as needed until end-of-stream is reached.\n \n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not\n update the underlying database; instead the updateRow or\n insertRow methods are called to update the database.\n\n Note: Consult your JDBC driver documentation to determine if\n it might be more efficient to use a version of\n updateAsciiStream which takes a length parameter."}, {"method_name": "updateBinaryStream", "method_sig": "void updateBinaryStream (int columnIndex,\n                        InputStream x)\n                 throws SQLException", "description": "Updates the designated column with a binary stream value.\n The data will be read from the stream\n as needed until end-of-stream is reached.\n \n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not\n update the underlying database; instead the updateRow or\n insertRow methods are called to update the database.\n\n Note: Consult your JDBC driver documentation to determine if\n it might be more efficient to use a version of\n updateBinaryStream which takes a length parameter."}, {"method_name": "updateCharacterStream", "method_sig": "void updateCharacterStream (int columnIndex,\n                           Reader x)\n                    throws SQLException", "description": "Updates the designated column with a character stream value.\n The data will be read from the stream\n as needed until end-of-stream is reached.\n \n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not\n update the underlying database; instead the updateRow or\n insertRow methods are called to update the database.\n\n Note: Consult your JDBC driver documentation to determine if\n it might be more efficient to use a version of\n updateCharacterStream which takes a length parameter."}, {"method_name": "updateAsciiStream", "method_sig": "void updateAsciiStream (String columnLabel,\n                       InputStream x)\n                throws SQLException", "description": "Updates the designated column with an ascii stream value.\n The data will be read from the stream\n as needed until end-of-stream is reached.\n \n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not\n update the underlying database; instead the updateRow or\n insertRow methods are called to update the database.\n\n Note: Consult your JDBC driver documentation to determine if\n it might be more efficient to use a version of\n updateAsciiStream which takes a length parameter."}, {"method_name": "updateBinaryStream", "method_sig": "void updateBinaryStream (String columnLabel,\n                        InputStream x)\n                 throws SQLException", "description": "Updates the designated column with a binary stream value.\n The data will be read from the stream\n as needed until end-of-stream is reached.\n \n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not\n update the underlying database; instead the updateRow or\n insertRow methods are called to update the database.\n\n Note: Consult your JDBC driver documentation to determine if\n it might be more efficient to use a version of\n updateBinaryStream which takes a length parameter."}, {"method_name": "updateCharacterStream", "method_sig": "void updateCharacterStream (String columnLabel,\n                           Reader reader)\n                    throws SQLException", "description": "Updates the designated column with a character stream value.\n The data will be read from the stream\n as needed until end-of-stream is reached.\n \n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not\n update the underlying database; instead the updateRow or\n insertRow methods are called to update the database.\n\n Note: Consult your JDBC driver documentation to determine if\n it might be more efficient to use a version of\n updateCharacterStream which takes a length parameter."}, {"method_name": "updateBlob", "method_sig": "void updateBlob (int columnIndex,\n                InputStream inputStream)\n         throws SQLException", "description": "Updates the designated column using the given input stream. The data will be read from the stream\n as needed until end-of-stream is reached.\n \n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not\n update the underlying database; instead the updateRow or\n insertRow methods are called to update the database.\n\n Note: Consult your JDBC driver documentation to determine if\n it might be more efficient to use a version of\n updateBlob which takes a length parameter."}, {"method_name": "updateBlob", "method_sig": "void updateBlob (String columnLabel,\n                InputStream inputStream)\n         throws SQLException", "description": "Updates the designated column using the given input stream. The data will be read from the stream\n as needed until end-of-stream is reached.\n \n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not\n update the underlying database; instead the updateRow or\n insertRow methods are called to update the database.\n\n   Note: Consult your JDBC driver documentation to determine if\n it might be more efficient to use a version of\n updateBlob which takes a length parameter."}, {"method_name": "updateClob", "method_sig": "void updateClob (int columnIndex,\n                Reader reader)\n         throws SQLException", "description": "Updates the designated column using the given Reader\n object.\n  The data will be read from the stream\n as needed until end-of-stream is reached.  The JDBC driver will\n do any necessary conversion from UNICODE to the database char format.\n\n \n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not\n update the underlying database; instead the updateRow or\n insertRow methods are called to update the database.\n\n   Note: Consult your JDBC driver documentation to determine if\n it might be more efficient to use a version of\n updateClob which takes a length parameter."}, {"method_name": "updateClob", "method_sig": "void updateClob (String columnLabel,\n                Reader reader)\n         throws SQLException", "description": "Updates the designated column using the given Reader\n object.\n  The data will be read from the stream\n as needed until end-of-stream is reached.  The JDBC driver will\n do any necessary conversion from UNICODE to the database char format.\n\n \n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not\n update the underlying database; instead the updateRow or\n insertRow methods are called to update the database.\n\n Note: Consult your JDBC driver documentation to determine if\n it might be more efficient to use a version of\n updateClob which takes a length parameter."}, {"method_name": "updateNClob", "method_sig": "void updateNClob (int columnIndex,\n                 Reader reader)\n          throws SQLException", "description": "Updates the designated column using the given Reader\n\n The data will be read from the stream\n as needed until end-of-stream is reached.  The JDBC driver will\n do any necessary conversion from UNICODE to the database char format.\n\n \n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not\n update the underlying database; instead the updateRow or\n insertRow methods are called to update the database.\n\n Note: Consult your JDBC driver documentation to determine if\n it might be more efficient to use a version of\n updateNClob which takes a length parameter."}, {"method_name": "updateNClob", "method_sig": "void updateNClob (String columnLabel,\n                 Reader reader)\n          throws SQLException", "description": "Updates the designated column using the given Reader\n object.\n The data will be read from the stream\n as needed until end-of-stream is reached.  The JDBC driver will\n do any necessary conversion from UNICODE to the database char format.\n\n \n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not\n update the underlying database; instead the updateRow or\n insertRow methods are called to update the database.\n\n Note: Consult your JDBC driver documentation to determine if\n it might be more efficient to use a version of\n updateNClob which takes a length parameter."}, {"method_name": "getObject", "method_sig": "<T> T getObject (int columnIndex,\n                Class<T> type)\n         throws SQLException", "description": "Retrieves the value of the designated column in the current row\n of this ResultSet object and will convert from the\n SQL type of the column to the requested Java data type, if the\n conversion is supported. If the conversion is not\n supported  or null is specified for the type, a\n SQLException is thrown.\n\n At a minimum, an implementation must support the conversions defined in\n Appendix B, Table B-3 and conversion of appropriate user defined SQL\n types to a Java type which implements SQLData, or Struct.\n Additional conversions may be supported and are vendor defined."}, {"method_name": "getObject", "method_sig": "<T> T getObject (String columnLabel,\n                Class<T> type)\n         throws SQLException", "description": "Retrieves the value of the designated column in the current row\n of this ResultSet object and will convert from the\n SQL type of the column to the requested Java data type, if the\n conversion is supported. If the conversion is not\n supported  or null is specified for the type, a\n SQLException is thrown.\n\n At a minimum, an implementation must support the conversions defined in\n Appendix B, Table B-3 and conversion of appropriate user defined SQL\n types to a Java type which implements SQLData, or Struct.\n Additional conversions may be supported and are vendor defined."}, {"method_name": "updateObject", "method_sig": "default void updateObject (int columnIndex,\n                          Object x,\n                          SQLType targetSqlType,\n                          int scaleOrLength)\n                   throws SQLException", "description": "Updates the designated column with an Object value.\n\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not\n update the underlying database; instead the updateRow or\n insertRow methods are called to update the database.\n\n If the second argument is an InputStream then the stream must contain\n the number of bytes specified by scaleOrLength.  If the second argument is a\n Reader then the reader must contain the number of characters specified\n by scaleOrLength. If these conditions are not true the driver will generate a\n SQLException when the statement is executed.\n\n The default implementation will throw SQLFeatureNotSupportedException"}, {"method_name": "updateObject", "method_sig": "default void updateObject (String columnLabel,\n                          Object x,\n                          SQLType targetSqlType,\n                          int scaleOrLength)\n                   throws SQLException", "description": "Updates the designated column with an Object value.\n\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not\n update the underlying database; instead the updateRow or\n insertRow methods are called to update the database.\n\n If the second argument is an InputStream then the stream must\n contain number of bytes specified by scaleOrLength.  If the second\n argument is a Reader then the reader must contain the number\n of characters specified by scaleOrLength. If these conditions are not\n true the driver will generate a\n SQLException when the statement is executed.\n\n The default implementation will throw SQLFeatureNotSupportedException"}, {"method_name": "updateObject", "method_sig": "default void updateObject (int columnIndex,\n                          Object x,\n                          SQLType targetSqlType)\n                   throws SQLException", "description": "Updates the designated column with an Object value.\n\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not\n update the underlying database; instead the updateRow or\n insertRow methods are called to update the database.\n\n The default implementation will throw SQLFeatureNotSupportedException"}, {"method_name": "updateObject", "method_sig": "default void updateObject (String columnLabel,\n                          Object x,\n                          SQLType targetSqlType)\n                   throws SQLException", "description": "Updates the designated column with an Object value.\n\n The updater methods are used to update column values in the\n current row or the insert row.  The updater methods do not\n update the underlying database; instead the updateRow or\n insertRow methods are called to update the database.\n\n The default implementation will throw SQLFeatureNotSupportedException"}]}