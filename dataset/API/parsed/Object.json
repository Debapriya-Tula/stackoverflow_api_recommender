{"name": "Class Object", "module": "java.base", "package": "java.lang", "text": "Class Object is the root of the class hierarchy.\n Every class has Object as a superclass. All objects,\n including arrays, implement the methods of this class.", "codes": ["public class Object"], "fields": [], "methods": [{"method_name": "getClass", "method_sig": "public final Class<?> getClass()", "description": "Returns the runtime class of this Object. The returned\n Class object is the object that is locked by \n static synchronized methods of the represented class.\n\n The actual result type is Class<? extends |X|>\n where |X| is the erasure of the static type of the\n expression on which getClass is called. For\n example, no cast is required in this code fragment:\n\nNumber n = 0;                             \nClass<? extends Number> c = n.getClass(); \n"}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Returns a hash code value for the object. This method is\n supported for the benefit of hash tables such as those provided by\n HashMap.\n \n The general contract of hashCode is:\n \nWhenever it is invoked on the same object more than once during\n     an execution of a Java application, the hashCode method\n     must consistently return the same integer, provided no information\n     used in equals comparisons on the object is modified.\n     This integer need not remain consistent from one execution of an\n     application to another execution of the same application.\n If two objects are equal according to the equals(Object)\n     method, then calling the hashCode method on each of\n     the two objects must produce the same integer result.\n It is not required that if two objects are unequal\n     according to the equals(java.lang.Object)\n     method, then calling the hashCode method on each of the\n     two objects must produce distinct integer results.  However, the\n     programmer should be aware that producing distinct integer results\n     for unequal objects may improve the performance of hash tables.\n \n\n As much as is reasonably practical, the hashCode method defined\n by class Object does return distinct integers for\n distinct objects. (The hashCode may or may not be implemented\n as some function of an object's memory address at some point\n in time.)"}, {"method_name": "equals", "method_sig": "public boolean equals (Object obj)", "description": "Indicates whether some other object is \"equal to\" this one.\n \n The equals method implements an equivalence relation\n on non-null object references:\n \nIt is reflexive: for any non-null reference value\n     x, x.equals(x) should return\n     true.\n It is symmetric: for any non-null reference values\n     x and y, x.equals(y)\n     should return true if and only if\n     y.equals(x) returns true.\n It is transitive: for any non-null reference values\n     x, y, and z, if\n     x.equals(y) returns true and\n     y.equals(z) returns true, then\n     x.equals(z) should return true.\n It is consistent: for any non-null reference values\n     x and y, multiple invocations of\n     x.equals(y) consistently return true\n     or consistently return false, provided no\n     information used in equals comparisons on the\n     objects is modified.\n For any non-null reference value x,\n     x.equals(null) should return false.\n \n\n The equals method for class Object implements\n the most discriminating possible equivalence relation on objects;\n that is, for any non-null reference values x and\n y, this method returns true if and only\n if x and y refer to the same object\n (x == y has the value true).\n \n Note that it is generally necessary to override the hashCode\n method whenever this method is overridden, so as to maintain the\n general contract for the hashCode method, which states\n that equal objects must have equal hash codes."}, {"method_name": "clone", "method_sig": "protected Object clone()\n                throws CloneNotSupportedException", "description": "Creates and returns a copy of this object.  The precise meaning\n of \"copy\" may depend on the class of the object. The general\n intent is that, for any object x, the expression:\n \n\n x.clone() != x\n will be true, and that the expression:\n \n\n x.clone().getClass() == x.getClass()\n will be true, but these are not absolute requirements.\n While it is typically the case that:\n \n\n x.clone().equals(x)\n will be true, this is not an absolute requirement.\n \n By convention, the returned object should be obtained by calling\n super.clone.  If a class and all of its superclasses (except\n Object) obey this convention, it will be the case that\n x.clone().getClass() == x.getClass().\n \n By convention, the object returned by this method should be independent\n of this object (which is being cloned).  To achieve this independence,\n it may be necessary to modify one or more fields of the object returned\n by super.clone before returning it.  Typically, this means\n copying any mutable objects that comprise the internal \"deep structure\"\n of the object being cloned and replacing the references to these\n objects with references to the copies.  If a class contains only\n primitive fields or references to immutable objects, then it is usually\n the case that no fields in the object returned by super.clone\n need to be modified.\n \n The method clone for class Object performs a\n specific cloning operation. First, if the class of this object does\n not implement the interface Cloneable, then a\n CloneNotSupportedException is thrown. Note that all arrays\n are considered to implement the interface Cloneable and that\n the return type of the clone method of an array type T[]\n is T[] where T is any reference or primitive type.\n Otherwise, this method creates a new instance of the class of this\n object and initializes all its fields with exactly the contents of\n the corresponding fields of this object, as if by assignment; the\n contents of the fields are not themselves cloned. Thus, this method\n performs a \"shallow copy\" of this object, not a \"deep copy\" operation.\n \n The class Object does not itself implement the interface\n Cloneable, so calling the clone method on an object\n whose class is Object will result in throwing an\n exception at run time."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a string representation of the object. In general, the\n toString method returns a string that\n \"textually represents\" this object. The result should\n be a concise but informative representation that is easy for a\n person to read.\n It is recommended that all subclasses override this method.\n \n The toString method for class Object\n returns a string consisting of the name of the class of which the\n object is an instance, the at-sign character `@', and\n the unsigned hexadecimal representation of the hash code of the\n object. In other words, this method returns a string equal to the\n value of:\n \n\n getClass().getName() + '@' + Integer.toHexString(hashCode())\n "}, {"method_name": "notify", "method_sig": "public final void notify()", "description": "Wakes up a single thread that is waiting on this object's\n monitor. If any threads are waiting on this object, one of them\n is chosen to be awakened. The choice is arbitrary and occurs at\n the discretion of the implementation. A thread waits on an object's\n monitor by calling one of the wait methods.\n \n The awakened thread will not be able to proceed until the current\n thread relinquishes the lock on this object. The awakened thread will\n compete in the usual manner with any other threads that might be\n actively competing to synchronize on this object; for example, the\n awakened thread enjoys no reliable privilege or disadvantage in being\n the next thread to lock this object.\n \n This method should only be called by a thread that is the owner\n of this object's monitor. A thread becomes the owner of the\n object's monitor in one of three ways:\n \nBy executing a synchronized instance method of that object.\n By executing the body of a synchronized statement\n     that synchronizes on the object.\n For objects of type Class, by executing a\n     synchronized static method of that class.\n \n\n Only one thread at a time can own an object's monitor."}, {"method_name": "notifyAll", "method_sig": "public final void notifyAll()", "description": "Wakes up all threads that are waiting on this object's monitor. A\n thread waits on an object's monitor by calling one of the\n wait methods.\n \n The awakened threads will not be able to proceed until the current\n thread relinquishes the lock on this object. The awakened threads\n will compete in the usual manner with any other threads that might\n be actively competing to synchronize on this object; for example,\n the awakened threads enjoy no reliable privilege or disadvantage in\n being the next thread to lock this object.\n \n This method should only be called by a thread that is the owner\n of this object's monitor. See the notify method for a\n description of the ways in which a thread can become the owner of\n a monitor."}, {"method_name": "wait", "method_sig": "public final void wait()\n                throws InterruptedException", "description": "Causes the current thread to wait until it is awakened, typically\n by being notified or interrupted.\n \n In all respects, this method behaves as if wait(0L, 0)\n had been called. See the specification of the wait(long, int) method\n for details."}, {"method_name": "wait", "method_sig": "public final void wait (long timeoutMillis)\n                throws InterruptedException", "description": "Causes the current thread to wait until it is awakened, typically\n by being notified or interrupted, or until a\n certain amount of real time has elapsed.\n \n In all respects, this method behaves as if wait(timeoutMillis, 0)\n had been called. See the specification of the wait(long, int) method\n for details."}, {"method_name": "wait", "method_sig": "public final void wait (long timeoutMillis,\n                       int nanos)\n                throws InterruptedException", "description": "Causes the current thread to wait until it is awakened, typically\n by being notified or interrupted, or until a\n certain amount of real time has elapsed.\n \n The current thread must own this object's monitor lock. See the\n notify method for a description of the ways in which\n a thread can become the owner of a monitor lock.\n \n This method causes the current thread (referred to here as T) to\n place itself in the wait set for this object and then to relinquish any\n and all synchronization claims on this object. Note that only the locks\n on this object are relinquished; any other objects on which the current\n thread may be synchronized remain locked while the thread waits.\n \n Thread T then becomes disabled for thread scheduling purposes\n and lies dormant until one of the following occurs:\n \nSome other thread invokes the notify method for this\n object and thread T happens to be arbitrarily chosen as\n the thread to be awakened.\n Some other thread invokes the notifyAll method for this\n object.\n Some other thread interrupts\n thread T.\n The specified amount of real time has elapsed, more or less.\n The amount of real time, in nanoseconds, is given by the expression\n 1000000 * timeoutMillis + nanos. If timeoutMillis and nanos\n are both zero, then real time is not taken into consideration and the\n thread waits until awakened by one of the other causes.\n Thread T is awakened spuriously. (See below.)\n \n\n The thread T is then removed from the wait set for this\n object and re-enabled for thread scheduling. It competes in the\n usual manner with other threads for the right to synchronize on the\n object; once it has regained control of the object, all its\n synchronization claims on the object are restored to the status quo\n ante - that is, to the situation as of the time that the wait\n method was invoked. Thread T then returns from the\n invocation of the wait method. Thus, on return from the\n wait method, the synchronization state of the object and of\n thread T is exactly as it was when the wait method\n was invoked.\n \n A thread can wake up without being notified, interrupted, or timing out, a\n so-called spurious wakeup.  While this will rarely occur in practice,\n applications must guard against it by testing for the condition that should\n have caused the thread to be awakened, and continuing to wait if the condition\n is not satisfied. See the example below.\n \n For more information on this topic, see section 14.2,\n \"Condition Queues,\" in Brian Goetz and others' Java Concurrency\n in Practice (Addison-Wesley, 2006) or Item 69 in Joshua\n Bloch's Effective Java, Second Edition (Addison-Wesley,\n 2008).\n \n If the current thread is interrupted\n by any thread before or while it is waiting, then an InterruptedException\n is thrown.  The interrupted status of the current thread is cleared when\n this exception is thrown. This exception is not thrown until the lock status of\n this object has been restored as described above."}, {"method_name": "finalize", "method_sig": "@Deprecated(since=\"9\")\nprotected void finalize()\n                 throws Throwable", "description": "Called by the garbage collector on an object when garbage collection\n determines that there are no more references to the object.\n A subclass overrides the finalize method to dispose of\n system resources or to perform other cleanup.\n \n The general contract of finalize is that it is invoked\n if and when the Java\u2122 virtual\n machine has determined that there is no longer any\n means by which this object can be accessed by any thread that has\n not yet died, except as a result of an action taken by the\n finalization of some other object or class which is ready to be\n finalized. The finalize method may take any action, including\n making this object available again to other threads; the usual purpose\n of finalize, however, is to perform cleanup actions before\n the object is irrevocably discarded. For example, the finalize method\n for an object that represents an input/output connection might perform\n explicit I/O transactions to break the connection before the object is\n permanently discarded.\n \n The finalize method of class Object performs no\n special action; it simply returns normally. Subclasses of\n Object may override this definition.\n \n The Java programming language does not guarantee which thread will\n invoke the finalize method for any given object. It is\n guaranteed, however, that the thread that invokes finalize will not\n be holding any user-visible synchronization locks when finalize is\n invoked. If an uncaught exception is thrown by the finalize method,\n the exception is ignored and finalization of that object terminates.\n \n After the finalize method has been invoked for an object, no\n further action is taken until the Java virtual machine has again\n determined that there is no longer any means by which this object can\n be accessed by any thread that has not yet died, including possible\n actions by other objects or classes which are ready to be finalized,\n at which point the object may be discarded.\n \n The finalize method is never invoked more than once by a Java\n virtual machine for any given object.\n \n Any exception thrown by the finalize method causes\n the finalization of this object to be halted, but is otherwise\n ignored."}]}