{"name": "Class SSLSocket", "module": "java.base", "package": "javax.net.ssl", "text": "This class extends Socket and provides secure\n sockets using protocols such as the \"Secure\n Sockets Layer\" (SSL) or IETF \"Transport Layer Security\" (TLS) protocols.\n \n Such sockets are normal stream sockets, but they\n add a layer of security protections over the underlying network transport\n protocol, such as TCP.  Those protections include: \n Integrity Protection.  SSL protects against\n      modification of messages by an active wiretapper.\n\n       Authentication.  In most modes, SSL provides\n      peer authentication.  Servers are usually authenticated,\n      and clients may be authenticated as requested by servers.\n\n       Confidentiality (Privacy Protection).  In most\n      modes, SSL encrypts data being sent between client and server.\n      This protects the confidentiality of data, so that passive\n      wiretappers won't see sensitive data such as financial\n      information or personal information of many kinds.\n\n      \nThese kinds of protection are specified by a \"cipher suite\", which\n is a combination of cryptographic algorithms used by a given SSL connection.\n During the negotiation process, the two endpoints must agree on\n a ciphersuite that is available in both environments.\n If there is no such suite in common, no SSL connection can\n be established, and no data can be exchanged.\n\n  The cipher suite used is established by a negotiation process\n called \"handshaking\".  The goal of this\n process is to create or rejoin a \"session\", which may protect many\n connections over time.  After handshaking has completed, you can access\n session attributes by using the getSession method.\n The initial handshake on this connection can be initiated in\n one of three ways: \n calling startHandshake which explicitly\n              begins handshakes, or\n       any attempt to read or write application data on\n              this socket causes an implicit handshake, or\n       a call to getSession tries to set up a session\n              if there is no currently valid session, and\n              an implicit handshake is done.\n \nIf handshaking fails for any reason, the SSLSocket\n is closed, and no further communications can be done.\n\n There are two groups of cipher suites which you will need to know\n about when managing cipher suites: \n Supported cipher suites:  all the suites which are\n      supported by the SSL implementation.  This list is reported\n      using getSupportedCipherSuites.\n\n       Enabled cipher suites, which may be fewer\n      than the full set of supported suites.  This group is\n      set using the setEnabledCipherSuites method, and\n      queried using the getEnabledCipherSuites method.\n      Initially, a default set of cipher suites will be enabled on\n      a new socket that represents the minimum suggested configuration.\n\n      \n Implementation defaults require that only cipher\n suites which authenticate servers and provide confidentiality\n be enabled by default.\n Only if both sides explicitly agree to unauthenticated and/or\n non-private (unencrypted) communications will such a ciphersuite be\n selected.\n\n When an SSLSocket is first created, no handshaking\n is done so that applications may first set their communication\n preferences:  what cipher suites to use, whether the socket should be\n in client or server mode, etc.\n However, security is always provided by the time that application data\n is sent over the connection.\n\n  You may register to receive event notification of handshake\n completion.  This involves\n the use of two additional classes.  HandshakeCompletedEvent\n objects are passed to HandshakeCompletedListener instances,\n which are registered by users of this API.\n\n An SSLSocket is created by SSLSocketFactory,\n or by accepting a connection from a\n SSLServerSocket.\n\n A SSL socket must choose to operate in the client or server mode.\n This will determine who begins the handshaking process, as well\n as which messages should be sent by each party.  Each\n connection must have one client and one server, or handshaking\n will not progress properly.  Once the initial handshaking has started, a\n socket can not switch between client and server modes, even when\n performing renegotiations.", "codes": ["public abstract class SSLSocket\nextends Socket"], "fields": [], "methods": [{"method_name": "getSupportedCipherSuites", "method_sig": "public abstract String[] getSupportedCipherSuites()", "description": "Returns the names of the cipher suites which could be enabled for use\n on this connection.  Normally, only a subset of these will actually\n be enabled by default, since this list may include cipher suites which\n do not meet quality of service requirements for those defaults.  Such\n cipher suites might be useful in specialized applications.\n \n The returned array includes cipher suites from the list of standard\n cipher suite names in the \n JSSE Cipher Suite Names section of the Java Cryptography\n Architecture Standard Algorithm Name Documentation, and may also\n include other cipher suites that the provider supports."}, {"method_name": "getEnabledCipherSuites", "method_sig": "public abstract String[] getEnabledCipherSuites()", "description": "Returns the names of the SSL cipher suites which are currently\n enabled for use on this connection.  When an SSLSocket is first\n created, all enabled cipher suites support a minimum quality of\n service.  Thus, in some environments this value might be empty.\n \n Note that even if a suite is enabled, it may never be used. This\n can occur if the peer does not support it, or its use is restricted,\n or the requisite certificates (and private keys) for the suite are\n not available, or an anonymous suite is enabled but authentication\n is required.\n \n The returned array includes cipher suites from the list of standard\n cipher suite names in the \n JSSE Cipher Suite Names section of the Java Cryptography\n Architecture Standard Algorithm Name Documentation, and may also\n include other cipher suites that the provider supports."}, {"method_name": "setEnabledCipherSuites", "method_sig": "public abstract void setEnabledCipherSuites (String[] suites)", "description": "Sets the cipher suites enabled for use on this connection.\n \n Each cipher suite in the suites parameter must have\n been listed by getSupportedCipherSuites(), or the method will\n fail.  Following a successful call to this method, only suites\n listed in the suites parameter are enabled for use.\n \n Note that the standard list of cipher suite names may be found in the\n \n JSSE Cipher Suite Names section of the Java Cryptography\n Architecture Standard Algorithm Name Documentation.  Providers\n may support cipher suite names not found in this list or might not\n use the recommended name for a certain cipher suite.\n \n See getEnabledCipherSuites() for more information\n on why a specific ciphersuite may never be used on a connection."}, {"method_name": "getSupportedProtocols", "method_sig": "public abstract String[] getSupportedProtocols()", "description": "Returns the names of the protocols which could be enabled for use\n on an SSL connection."}, {"method_name": "getEnabledProtocols", "method_sig": "public abstract String[] getEnabledProtocols()", "description": "Returns the names of the protocol versions which are currently\n enabled for use on this connection.\n \n Note that even if a protocol is enabled, it may never be used.\n This can occur if the peer does not support the protocol, or its\n use is restricted, or there are no enabled cipher suites supported\n by the protocol."}, {"method_name": "setEnabledProtocols", "method_sig": "public abstract void setEnabledProtocols (String[] protocols)", "description": "Sets the protocol versions enabled for use on this connection.\n \n The protocols must have been listed by\n getSupportedProtocols() as being supported.\n Following a successful call to this method, only protocols listed\n in the protocols parameter are enabled for use."}, {"method_name": "getSession", "method_sig": "public abstract SSLSession getSession()", "description": "Returns the SSL Session in use by this connection.  These can\n be long lived, and frequently correspond to an entire login session\n for some user.  The session specifies a particular cipher suite\n which is being actively used by all connections in that session,\n as well as the identities of the session's client and server.\n \n This method will initiate the initial handshake if\n necessary and then block until the handshake has been\n established.\n \n If an error occurs during the initial handshake, this method\n returns an invalid session object which reports an invalid\n cipher suite of \"SSL_NULL_WITH_NULL_NULL\"."}, {"method_name": "getHandshakeSession", "method_sig": "public SSLSession getHandshakeSession()", "description": "Returns the SSLSession being constructed during a SSL/TLS\n handshake.\n \n TLS protocols may negotiate parameters that are needed when using\n an instance of this class, but before the SSLSession has\n been completely initialized and made available via getSession.\n For example, the list of valid signature algorithms may restrict\n the type of certificates that can used during TrustManager\n decisions, or the maximum TLS fragment packet sizes can be\n resized to better support the network environment.\n \n This method provides early access to the SSLSession being\n constructed.  Depending on how far the handshake has progressed,\n some data may not yet be available for use.  For example, if a\n remote server will be sending a Certificate chain, but that chain\n has yet not been processed, the getPeerCertificates\n method of SSLSession will throw a\n SSLPeerUnverifiedException.  Once that chain has been processed,\n getPeerCertificates will return the proper value.\n \n Unlike getSession(), this method does not initiate the\n initial handshake and does not block until handshaking is\n complete."}, {"method_name": "addHandshakeCompletedListener", "method_sig": "public abstract void addHandshakeCompletedListener (HandshakeCompletedListener listener)", "description": "Registers an event listener to receive notifications that an\n SSL handshake has completed on this connection."}, {"method_name": "removeHandshakeCompletedListener", "method_sig": "public abstract void removeHandshakeCompletedListener (HandshakeCompletedListener listener)", "description": "Removes a previously registered handshake completion listener."}, {"method_name": "startHandshake", "method_sig": "public abstract void startHandshake()\n                             throws IOException", "description": "Starts an SSL handshake on this connection.  Common reasons include\n a need to use new encryption keys, to change cipher suites, or to\n initiate a new session.  To force complete reauthentication, the\n current session could be invalidated before starting this handshake.\n\n  If data has already been sent on the connection, it continues\n to flow during this handshake.  When the handshake completes, this\n will be signaled with an event.\n\n This method is synchronous for the initial handshake on a connection\n and returns when the negotiated handshake is complete. Some\n protocols may not support multiple handshakes on an existing socket\n and may throw an IOException."}, {"method_name": "setUseClientMode", "method_sig": "public abstract void setUseClientMode (boolean mode)", "description": "Configures the socket to use client (or server) mode when\n handshaking.\n \n This method must be called before any handshaking occurs.\n Once handshaking has begun, the mode can not be reset for the\n life of this socket.\n \n Servers normally authenticate themselves, and clients\n are not required to do so."}, {"method_name": "getUseClientMode", "method_sig": "public abstract boolean getUseClientMode()", "description": "Returns true if the socket is set to use client mode when\n handshaking."}, {"method_name": "setNeedClientAuth", "method_sig": "public abstract void setNeedClientAuth (boolean need)", "description": "Configures the socket to require client authentication.  This\n option is only useful for sockets in the server mode.\n \n A socket's client authentication setting is one of the following:\n \n client authentication required\n  client authentication requested\n  no client authentication desired\n \n\n Unlike setWantClientAuth(boolean), if this option is set and\n the client chooses not to provide authentication information\n about itself, the negotiations will stop and the connection\n will be dropped.\n \n Calling this method overrides any previous setting made by\n this method or setWantClientAuth(boolean)."}, {"method_name": "getNeedClientAuth", "method_sig": "public abstract boolean getNeedClientAuth()", "description": "Returns true if the socket will require client authentication.\n This option is only useful to sockets in the server mode."}, {"method_name": "setWantClientAuth", "method_sig": "public abstract void setWantClientAuth (boolean want)", "description": "Configures the socket to request client authentication.\n This option is only useful for sockets in the server mode.\n \n A socket's client authentication setting is one of the following:\n \n client authentication required\n  client authentication requested\n  no client authentication desired\n \n\n Unlike setNeedClientAuth(boolean), if this option is set and\n the client chooses not to provide authentication information\n about itself, the negotiations will continue.\n \n Calling this method overrides any previous setting made by\n this method or setNeedClientAuth(boolean)."}, {"method_name": "getWantClientAuth", "method_sig": "public abstract boolean getWantClientAuth()", "description": "Returns true if the socket will request client authentication.\n This option is only useful for sockets in the server mode."}, {"method_name": "setEnableSessionCreation", "method_sig": "public abstract void setEnableSessionCreation (boolean flag)", "description": "Controls whether new SSL sessions may be established by this socket.\n If session creations are not allowed, and there are no\n existing sessions to resume, there will be no successful\n handshaking."}, {"method_name": "getEnableSessionCreation", "method_sig": "public abstract boolean getEnableSessionCreation()", "description": "Returns true if new SSL sessions may be established by this socket."}, {"method_name": "getSSLParameters", "method_sig": "public SSLParameters getSSLParameters()", "description": "Returns the SSLParameters in effect for this SSLSocket.\n The ciphersuites and protocols of the returned SSLParameters\n are always non-null."}, {"method_name": "setSSLParameters", "method_sig": "public void setSSLParameters (SSLParameters params)", "description": "Applies SSLParameters to this socket.\n\n This means:\n \nIf params.getCipherSuites() is non-null,\n   setEnabledCipherSuites() is called with that value.\nIf params.getProtocols() is non-null,\n   setEnabledProtocols() is called with that value.\nIf params.getNeedClientAuth() or\n   params.getWantClientAuth() return true,\n   setNeedClientAuth(true) and\n   setWantClientAuth(true) are called, respectively;\n   otherwise setWantClientAuth(false) is called.\nIf params.getServerNames() is non-null, the socket will\n   configure its server names with that value.\nIf params.getSNIMatchers() is non-null, the socket will\n   configure its SNI matchers with that value.\n"}, {"method_name": "getApplicationProtocol", "method_sig": "public String getApplicationProtocol()", "description": "Returns the most recent application protocol value negotiated for this\n connection.\n \n If supported by the underlying SSL/TLS/DTLS implementation,\n application name negotiation mechanisms such as  RFC 7301 , the\n Application-Layer Protocol Negotiation (ALPN), can negotiate\n application-level values between peers."}, {"method_name": "getHandshakeApplicationProtocol", "method_sig": "public String getHandshakeApplicationProtocol()", "description": "Returns the application protocol value negotiated on a SSL/TLS\n handshake currently in progress.\n \n Like getHandshakeSession(),\n a connection may be in the middle of a handshake. The\n application protocol may or may not yet be available."}, {"method_name": "setHandshakeApplicationProtocolSelector", "method_sig": "public void setHandshakeApplicationProtocolSelector (BiFunction<SSLSocket, List<String>, String> selector)", "description": "Registers a callback function that selects an application protocol\n value for a SSL/TLS/DTLS handshake.\n The function overrides any values supplied using\n SSLParameters.setApplicationProtocols and it supports the following\n type parameters:\n \n\n SSLSocket\n The function's first argument allows the current SSLSocket\n      to be inspected, including the handshake session and configuration\n      settings.\n  List<String>\n The function's second argument lists the application protocol names\n      advertised by the TLS peer.\n  String\n The function's result is an application protocol name, or null to\n      indicate that none of the advertised names are acceptable.\n      If the return value is an empty String then application\n      protocol indications will not be used.\n      If the return value is null (no value chosen) or is a value that\n      was not advertised by the peer, the underlying protocol will\n      determine what action to take. (For example, ALPN will send a\n      \"no_application_protocol\" alert and terminate the connection.)\n \n\n\n For example, the following call registers a callback function that\n examines the TLS handshake parameters and selects an application protocol\n name:\n \n     serverSocket.setHandshakeApplicationProtocolSelector(\n         (serverSocket, clientProtocols) -> {\n             SSLSession session = serverSocket.getHandshakeSession();\n             return chooseApplicationProtocol(\n                 serverSocket,\n                 clientProtocols,\n                 session.getProtocol(),\n                 session.getCipherSuite());\n         });\n "}, {"method_name": "getHandshakeApplicationProtocolSelector", "method_sig": "public BiFunction<SSLSocket, List<String>, String> getHandshakeApplicationProtocolSelector()", "description": "Retrieves the callback function that selects an application protocol\n value during a SSL/TLS/DTLS handshake.\n See setHandshakeApplicationProtocolSelector\n for the function's type parameters."}]}