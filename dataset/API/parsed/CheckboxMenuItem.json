{"name": "Class CheckboxMenuItem", "module": "java.desktop", "package": "java.awt", "text": "This class represents a check box that can be included in a menu.\n Selecting the check box in the menu changes its state from\n \"on\" to \"off\" or from \"off\" to \"on.\"\n \n The following picture depicts a menu which contains an instance\n of CheckBoxMenuItem:\n \n\n\n The item labeled Check shows a check box menu item\n in its \"off\" state.\n \n When a check box menu item is selected, AWT sends an item event to\n the item. Since the event is an instance of ItemEvent,\n the processEvent method examines the event and passes\n it along to processItemEvent. The latter method redirects\n the event to any ItemListener objects that have\n registered an interest in item events generated by this menu item.", "codes": ["public class CheckboxMenuItem\nextends MenuItem\nimplements ItemSelectable, Accessible"], "fields": [], "methods": [{"method_name": "addNotify", "method_sig": "public void addNotify()", "description": "Creates the peer of the checkbox item.  This peer allows us to\n change the look of the checkbox item without changing its\n functionality.\n Most applications do not call this method directly."}, {"method_name": "getState", "method_sig": "public boolean getState()", "description": "Determines whether the state of this check box menu item\n is \"on\" or \"off.\""}, {"method_name": "setState", "method_sig": "public void setState (boolean b)", "description": "Sets this check box menu item to the specified state.\n The boolean value true indicates \"on\" while\n false indicates \"off.\"\n\n Note that this method should be primarily used to\n initialize the state of the check box menu item.\n Programmatically setting the state of the check box\n menu item will not trigger\n an ItemEvent.  The only way to trigger an\n ItemEvent is by user interaction."}, {"method_name": "getSelectedObjects", "method_sig": "public Object[] getSelectedObjects()", "description": "Returns the an array (length 1) containing the checkbox menu item\n label or null if the checkbox is not selected."}, {"method_name": "addItemListener", "method_sig": "public void addItemListener (ItemListener l)", "description": "Adds the specified item listener to receive item events from\n this check box menu item.  Item events are sent in response to user\n actions, but not in response to calls to setState().\n If l is null, no exception is thrown and no action is performed.\n Refer to AWT Threading Issues for details on AWT's threading model."}, {"method_name": "removeItemListener", "method_sig": "public void removeItemListener (ItemListener l)", "description": "Removes the specified item listener so that it no longer receives\n item events from this check box menu item.\n If l is null, no exception is thrown and no action is performed.\n Refer to AWT Threading Issues for details on AWT's threading model."}, {"method_name": "getItemListeners", "method_sig": "public ItemListener[] getItemListeners()", "description": "Returns an array of all the item listeners\n registered on this checkbox menuitem."}, {"method_name": "getListeners", "method_sig": "public <T extends EventListener> T[] getListeners (Class<T> listenerType)", "description": "Returns an array of all the objects currently registered\n as FooListeners\n upon this CheckboxMenuItem.\n FooListeners are registered using the\n addFooListener method.\n\n \n You can specify the listenerType argument\n with a class literal, such as\n FooListener.class.\n For example, you can query a\n CheckboxMenuItem c\n for its item listeners with the following code:\n\n ItemListener[] ils = (ItemListener[])(c.getListeners(ItemListener.class));\n\n If no such listeners exist, this method returns an empty array."}, {"method_name": "processEvent", "method_sig": "protected void processEvent (AWTEvent e)", "description": "Processes events on this check box menu item.\n If the event is an instance of ItemEvent,\n this method invokes the processItemEvent method.\n If the event is not an item event,\n it invokes processEvent on the superclass.\n \n Check box menu items currently support only item events.\n Note that if the event parameter is null\n the behavior is unspecified and may result in an\n exception."}, {"method_name": "processItemEvent", "method_sig": "protected void processItemEvent (ItemEvent e)", "description": "Processes item events occurring on this check box menu item by\n dispatching them to any registered ItemListener objects.\n \n This method is not called unless item events are\n enabled for this menu item. Item events are enabled\n when one of the following occurs:\n \nAn ItemListener object is registered\n via addItemListener.\n Item events are enabled via enableEvents.\n \nNote that if the event parameter is null\n the behavior is unspecified and may result in an\n exception."}, {"method_name": "paramString", "method_sig": "public String paramString()", "description": "Returns a string representing the state of this\n CheckBoxMenuItem. This\n method is intended to be used only for debugging purposes, and the\n content and format of the returned string may vary between\n implementations. The returned string may be empty but may not be\n null."}, {"method_name": "getAccessibleContext", "method_sig": "public AccessibleContext getAccessibleContext()", "description": "Gets the AccessibleContext associated with this CheckboxMenuItem.\n For checkbox menu items, the AccessibleContext takes the\n form of an AccessibleAWTCheckboxMenuItem.\n A new AccessibleAWTCheckboxMenuItem is created if necessary."}]}