{"name": "Class GlyphVector", "module": "java.desktop", "package": "java.awt.font", "text": "A GlyphVector object is a collection of glyphs\n containing geometric information for the placement of each glyph\n in a transformed coordinate space which corresponds to the\n device on which the GlyphVector is ultimately\n displayed.\n \n The GlyphVector does not attempt any interpretation of\n the sequence of glyphs it contains.  Relationships between adjacent\n glyphs in sequence are solely used to determine the placement of\n the glyphs in the visual coordinate space.\n \n Instances of GlyphVector are created by a Font.\n \n In a text processing application that can cache intermediate\n representations of text, creation and subsequent caching of a\n GlyphVector for use during rendering is the fastest\n method to present the visual representation of characters to a user.\n \n A GlyphVector is associated with exactly one\n Font, and can provide data useful only in relation to\n this Font.  In addition, metrics obtained from a\n GlyphVector are not generally geometrically scalable\n since the pixelization and spacing are dependent on grid-fitting\n algorithms within a Font.  To facilitate accurate\n measurement of a GlyphVector and its component\n glyphs, you must specify a scaling transform, anti-alias mode, and\n fractional metrics mode when creating the GlyphVector.\n These characteristics can be derived from the destination device.\n \n For each glyph in the GlyphVector, you can obtain:\n \nthe position of the glyph\n the transform associated with the glyph\n the metrics of the glyph in the context of the\n   GlyphVector.  The metrics of the glyph may be\n   different under different transforms, application specified\n   rendering hints, and the specific instance of the glyph within\n   the GlyphVector.\n \n\n Altering the data used to create the GlyphVector does not\n alter the state of the GlyphVector.\n \n Methods are provided to adjust the positions of the glyphs\n within the GlyphVector.  These methods are most\n appropriate for applications that are performing justification\n operations for the presentation of the glyphs.\n \n Methods are provided to transform individual glyphs within the\n GlyphVector.  These methods are primarily useful for\n special effects.\n \n Methods are provided to return both the visual, logical, and pixel bounds\n of the entire GlyphVector or of individual glyphs within\n the GlyphVector.\n \n Methods are provided to return a Shape for the\n GlyphVector, and for individual glyphs within the\n GlyphVector.", "codes": ["public abstract class GlyphVector\nextends Object\nimplements Cloneable"], "fields": [{"field_name": "FLAG_HAS_TRANSFORMS", "field_sig": "public static final\u00a0int FLAG_HAS_TRANSFORMS", "description": "A flag used with getLayoutFlags that indicates that this GlyphVector has\n per-glyph transforms."}, {"field_name": "FLAG_HAS_POSITION_ADJUSTMENTS", "field_sig": "public static final\u00a0int FLAG_HAS_POSITION_ADJUSTMENTS", "description": "A flag used with getLayoutFlags that indicates that this GlyphVector has\n position adjustments.  When this is true, the glyph positions don't match the\n accumulated default advances of the glyphs (for example, if kerning has been done)."}, {"field_name": "FLAG_RUN_RTL", "field_sig": "public static final\u00a0int FLAG_RUN_RTL", "description": "A flag used with getLayoutFlags that indicates that this GlyphVector has\n a right-to-left run direction.  This refers to the glyph-to-char mapping and does\n not imply that the visual locations of the glyphs are necessarily in this order,\n although generally they will be."}, {"field_name": "FLAG_COMPLEX_GLYPHS", "field_sig": "public static final\u00a0int FLAG_COMPLEX_GLYPHS", "description": "A flag used with getLayoutFlags that indicates that this GlyphVector has\n a complex glyph-to-char mapping (one that does not map glyphs to chars one-to-one in\n strictly ascending or descending order matching the run direction)."}, {"field_name": "FLAG_MASK", "field_sig": "public static final\u00a0int FLAG_MASK", "description": "A mask for supported flags from getLayoutFlags.  Only bits covered by the mask\n should be tested."}], "methods": [{"method_name": "getFont", "method_sig": "public abstract Font getFont()", "description": "Returns the Font associated with this\n GlyphVector."}, {"method_name": "getFontRenderContext", "method_sig": "public abstract FontRenderContext getFontRenderContext()", "description": "Returns the FontRenderContext associated with this\n GlyphVector."}, {"method_name": "performDefaultLayout", "method_sig": "public abstract void performDefaultLayout()", "description": "Assigns default positions to each glyph in this\n GlyphVector. This can destroy information\n generated during initial layout of this GlyphVector."}, {"method_name": "getNumGlyphs", "method_sig": "public abstract int getNumGlyphs()", "description": "Returns the number of glyphs in this GlyphVector."}, {"method_name": "getGlyphCode", "method_sig": "public abstract int getGlyphCode (int glyphIndex)", "description": "Returns the glyphcode of the specified glyph.\n This return value is meaningless to anything other\n than the Font object that created this\n GlyphVector."}, {"method_name": "getGlyphCodes", "method_sig": "public abstract int[] getGlyphCodes (int beginGlyphIndex,\n                                    int numEntries,\n                                    int[] codeReturn)", "description": "Returns an array of glyphcodes for the specified glyphs.\n The contents of this return value are meaningless to anything other\n than the Font used to create this\n GlyphVector.  This method is used\n for convenience and performance when processing glyphcodes.\n If no array is passed in, a new array is created."}, {"method_name": "getGlyphCharIndex", "method_sig": "public int getGlyphCharIndex (int glyphIndex)", "description": "Returns the character index of the specified glyph.\n The character index is the index of the first logical\n character represented by the glyph.  The default\n implementation assumes a one-to-one, left-to-right mapping\n of glyphs to characters."}, {"method_name": "getGlyphCharIndices", "method_sig": "public int[] getGlyphCharIndices (int beginGlyphIndex,\n                                 int numEntries,\n                                 int[] codeReturn)", "description": "Returns the character indices of the specified glyphs.\n The character index is the index of the first logical\n character represented by the glyph.  Indices are returned\n in glyph order.  The default implementation invokes\n getGlyphCharIndex for each glyph, and subclassers will probably\n want to override this implementation for performance reasons.\n Use this method for convenience and performance\n in processing of glyphcodes. If no array is passed in,\n a new array is created."}, {"method_name": "getLogicalBounds", "method_sig": "public abstract Rectangle2D getLogicalBounds()", "description": "Returns the logical bounds of this GlyphVector.\n This method is used when positioning this GlyphVector\n in relation to visually adjacent GlyphVector objects."}, {"method_name": "getVisualBounds", "method_sig": "public abstract Rectangle2D getVisualBounds()", "description": "Returns the visual bounds of this GlyphVector\n The visual bounds is the bounding box of the outline of this\n GlyphVector.  Because of rasterization and\n alignment of pixels, it is possible that this box does not\n enclose all pixels affected by rendering this GlyphVector."}, {"method_name": "getPixelBounds", "method_sig": "public Rectangle getPixelBounds (FontRenderContext renderFRC,\n                                float x,\n                                float y)", "description": "Returns the pixel bounds of this GlyphVector when\n rendered in a graphics with the given\n FontRenderContext at the given location.  The\n renderFRC need not be the same as the\n FontRenderContext of this\n GlyphVector, and can be null.  If it is null, the\n FontRenderContext of this GlyphVector\n is used.  The default implementation returns the visual bounds,\n offset to x, y and rounded out to the next integer value (i.e. returns an\n integer rectangle which encloses the visual bounds) and\n ignores the FRC.  Subclassers should override this method."}, {"method_name": "getOutline", "method_sig": "public abstract Shape getOutline()", "description": "Returns a Shape whose interior corresponds to the\n visual representation of this GlyphVector."}, {"method_name": "getOutline", "method_sig": "public abstract Shape getOutline (float x,\n                                 float y)", "description": "Returns a Shape whose interior corresponds to the\n visual representation of this GlyphVector when\n rendered at x,\u00a0y."}, {"method_name": "getGlyphOutline", "method_sig": "public abstract Shape getGlyphOutline (int glyphIndex)", "description": "Returns a Shape whose interior corresponds to the\n visual representation of the specified glyph\n within this GlyphVector.\n The outline returned by this method is positioned around the\n origin of each individual glyph."}, {"method_name": "getGlyphOutline", "method_sig": "public Shape getGlyphOutline (int glyphIndex,\n                             float x,\n                             float y)", "description": "Returns a Shape whose interior corresponds to the\n visual representation of the specified glyph\n within this GlyphVector, offset to x,\u00a0y.\n The outline returned by this method is positioned around the\n origin of each individual glyph."}, {"method_name": "getGlyphPosition", "method_sig": "public abstract Point2D getGlyphPosition (int glyphIndex)", "description": "Returns the position of the specified glyph relative to the\n origin of this GlyphVector.\n If glyphIndex equals the number of glyphs in\n this GlyphVector, this method returns the position after\n the last glyph. This position is used to define the advance of\n the entire GlyphVector."}, {"method_name": "setGlyphPosition", "method_sig": "public abstract void setGlyphPosition (int glyphIndex,\n                                      Point2D newPos)", "description": "Sets the position of the specified glyph within this\n GlyphVector.\n If glyphIndex equals the number of glyphs in\n this GlyphVector, this method sets the position after\n the last glyph. This position is used to define the advance of\n the entire GlyphVector."}, {"method_name": "getGlyphTransform", "method_sig": "public abstract AffineTransform getGlyphTransform (int glyphIndex)", "description": "Returns the transform of the specified glyph within this\n GlyphVector.  The transform is relative to the\n glyph position.  If no special transform has been applied,\n null can be returned.  A null return indicates\n an identity transform."}, {"method_name": "setGlyphTransform", "method_sig": "public abstract void setGlyphTransform (int glyphIndex,\n                                       AffineTransform newTX)", "description": "Sets the transform of the specified glyph within this\n GlyphVector.  The transform is relative to the glyph\n position.  A null argument for newTX\n indicates that no special transform is applied for the specified\n glyph.\n This method can be used to rotate, mirror, translate and scale the\n glyph.  Adding a transform can result in significant performance changes."}, {"method_name": "getLayoutFlags", "method_sig": "public int getLayoutFlags()", "description": "Returns flags describing the global state of the GlyphVector.\n Flags not described below are reserved.  The default\n implementation returns 0 (meaning false) for the position adjustments,\n transforms, rtl, and complex flags.\n Subclassers should override this method, and make sure\n it correctly describes the GlyphVector and corresponds\n to the results of related calls."}, {"method_name": "getGlyphPositions", "method_sig": "public abstract float[] getGlyphPositions (int beginGlyphIndex,\n                                          int numEntries,\n                                          float[] positionReturn)", "description": "Returns an array of glyph positions for the specified glyphs.\n This method is used for convenience and performance when\n processing glyph positions.\n If no array is passed in, a new array is created.\n Even numbered array entries beginning with position zero are the X\n coordinates of the glyph numbered beginGlyphIndex + position/2.\n Odd numbered array entries beginning with position one are the Y\n coordinates of the glyph numbered beginGlyphIndex + (position-1)/2.\n If beginGlyphIndex equals the number of glyphs in\n this GlyphVector, this method gets the position after\n the last glyph and this position is used to define the advance of\n the entire GlyphVector."}, {"method_name": "getGlyphLogicalBounds", "method_sig": "public abstract Shape getGlyphLogicalBounds (int glyphIndex)", "description": "Returns the logical bounds of the specified glyph within this\n GlyphVector.\n These logical bounds have a total of four edges, with two edges\n parallel to the baseline under the glyph's transform and the other two\n edges are shared with adjacent glyphs if they are present.  This\n method is useful for hit-testing of the specified glyph,\n positioning of a caret at the leading or trailing edge of a glyph,\n and for drawing a highlight region around the specified glyph."}, {"method_name": "getGlyphVisualBounds", "method_sig": "public abstract Shape getGlyphVisualBounds (int glyphIndex)", "description": "Returns the visual bounds of the specified glyph within the\n GlyphVector.\n The bounds returned by this method is positioned around the\n origin of each individual glyph."}, {"method_name": "getGlyphPixelBounds", "method_sig": "public Rectangle getGlyphPixelBounds (int index,\n                                     FontRenderContext renderFRC,\n                                     float x,\n                                     float y)", "description": "Returns the pixel bounds of the glyph at index when this\n GlyphVector is rendered in a Graphics with the\n given FontRenderContext at the given location. The\n renderFRC need not be the same as the\n FontRenderContext of this\n GlyphVector, and can be null.  If it is null, the\n FontRenderContext of this GlyphVector\n is used.  The default implementation returns the visual bounds of the glyph,\n offset to x, y and rounded out to the next integer value, and\n ignores the FRC.  Subclassers should override this method."}, {"method_name": "getGlyphMetrics", "method_sig": "public abstract GlyphMetrics getGlyphMetrics (int glyphIndex)", "description": "Returns the metrics of the glyph at the specified index into\n this GlyphVector."}, {"method_name": "getGlyphJustificationInfo", "method_sig": "public abstract GlyphJustificationInfo getGlyphJustificationInfo (int glyphIndex)", "description": "Returns the justification information for the glyph at\n the specified index into this GlyphVector."}, {"method_name": "equals", "method_sig": "public abstract boolean equals (GlyphVector set)", "description": "Tests if the specified GlyphVector exactly\n equals this GlyphVector."}]}