{"name": "Class StreamHandler", "module": "java.logging", "package": "java.util.logging", "text": "Stream based logging Handler.\n \n This is primarily intended as a base class or support class to\n be used in implementing other logging Handlers.\n \nLogRecords are published to a given java.io.OutputStream.\n \nConfiguration:\n By default each StreamHandler is initialized using the following\n LogManager configuration properties where <handler-name>\n refers to the fully-qualified class name of the handler.\n If properties are not defined\n (or have invalid values) then the specified default values are used.\n \n   <handler-name>.level\n        specifies the default level for the Handler\n        (defaults to Level.INFO). \n   <handler-name>.filter\n        specifies the name of a Filter class to use\n         (defaults to no Filter). \n   <handler-name>.formatter\n        specifies the name of a Formatter class to use\n        (defaults to java.util.logging.SimpleFormatter). \n   <handler-name>.encoding\n        the name of the character set encoding to use (defaults to\n        the default platform encoding). \n\n\n For example, the properties for StreamHandler would be:\n \n   java.util.logging.StreamHandler.level=INFO \n   java.util.logging.StreamHandler.formatter=java.util.logging.SimpleFormatter \n\n\n For a custom handler, e.g. com.foo.MyHandler, the properties would be:\n \n   com.foo.MyHandler.level=INFO \n   com.foo.MyHandler.formatter=java.util.logging.SimpleFormatter \n", "codes": ["public class StreamHandler\nextends Handler"], "fields": [], "methods": [{"method_name": "setOutputStream", "method_sig": "protected void setOutputStream (OutputStream out)\n                        throws SecurityException", "description": "Change the output stream.\n \n If there is a current output stream then the Formatter's\n tail string is written and the stream is flushed and closed.\n Then the output stream is replaced with the new output stream."}, {"method_name": "setEncoding", "method_sig": "public void setEncoding (String encoding)\n                 throws SecurityException,\n                        UnsupportedEncodingException", "description": "Set (or change) the character encoding used by this Handler.\n \n The encoding should be set before any LogRecords are written\n to the Handler."}, {"method_name": "publish", "method_sig": "public void publish (LogRecord record)", "description": "Format and publish a LogRecord.\n \n The StreamHandler first checks if there is an OutputStream\n and if the given LogRecord has at least the required log level.\n If not it silently returns.  If so, it calls any associated\n Filter to check if the record should be published.  If so,\n it calls its Formatter to format the record and then writes\n the result to the current output stream.\n \n If this is the first LogRecord to be written to a given\n OutputStream, the Formatter's \"head\" string is\n written to the stream before the LogRecord is written."}, {"method_name": "isLoggable", "method_sig": "public boolean isLoggable (LogRecord record)", "description": "Check if this Handler would actually log a given LogRecord.\n \n This method checks if the LogRecord has an appropriate level and\n whether it satisfies any Filter.  It will also return false if\n no output stream has been assigned yet or the LogRecord is null."}, {"method_name": "flush", "method_sig": "public void flush()", "description": "Flush any buffered messages."}, {"method_name": "close", "method_sig": "public void close()\n           throws SecurityException", "description": "Close the current output stream.\n \n The Formatter's \"tail\" string is written to the stream before it\n is closed.  In addition, if the Formatter's \"head\" string has not\n yet been written to the stream, it will be written before the\n \"tail\" string."}]}