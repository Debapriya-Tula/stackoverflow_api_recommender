{"name": "Class Path2D.Float", "module": "java.desktop", "package": "java.awt.geom", "text": "The Float class defines a geometric path with\n coordinates stored in single precision floating point.", "codes": ["public static class Path2D.Float\nextends Path2D\nimplements Serializable"], "fields": [], "methods": [{"method_name": "moveTo", "method_sig": "public final void moveTo (double x,\n                         double y)", "description": "Adds a point to the path by moving to the specified\n coordinates specified in double precision."}, {"method_name": "moveTo", "method_sig": "public final void moveTo (float x,\n                         float y)", "description": "Adds a point to the path by moving to the specified\n coordinates specified in float precision.\n \n This method provides a single precision variant of\n the double precision moveTo() method on the\n base Path2D class."}, {"method_name": "lineTo", "method_sig": "public final void lineTo (double x,\n                         double y)", "description": "Adds a point to the path by drawing a straight line from the\n current coordinates to the new specified coordinates\n specified in double precision."}, {"method_name": "lineTo", "method_sig": "public final void lineTo (float x,\n                         float y)", "description": "Adds a point to the path by drawing a straight line from the\n current coordinates to the new specified coordinates\n specified in float precision.\n \n This method provides a single precision variant of\n the double precision lineTo() method on the\n base Path2D class."}, {"method_name": "quadTo", "method_sig": "public final void quadTo (double x1,\n                         double y1,\n                         double x2,\n                         double y2)", "description": "Adds a curved segment, defined by two new points, to the path by\n drawing a Quadratic curve that intersects both the current\n coordinates and the specified coordinates (x2,y2),\n using the specified point (x1,y1) as a quadratic\n parametric control point.\n All coordinates are specified in double precision."}, {"method_name": "quadTo", "method_sig": "public final void quadTo (float x1,\n                         float y1,\n                         float x2,\n                         float y2)", "description": "Adds a curved segment, defined by two new points, to the path by\n drawing a Quadratic curve that intersects both the current\n coordinates and the specified coordinates (x2,y2),\n using the specified point (x1,y1) as a quadratic\n parametric control point.\n All coordinates are specified in float precision.\n \n This method provides a single precision variant of\n the double precision quadTo() method on the\n base Path2D class."}, {"method_name": "curveTo", "method_sig": "public final void curveTo (double x1,\n                          double y1,\n                          double x2,\n                          double y2,\n                          double x3,\n                          double y3)", "description": "Adds a curved segment, defined by three new points, to the path by\n drawing a B\u00e9zier curve that intersects both the current\n coordinates and the specified coordinates (x3,y3),\n using the specified points (x1,y1) and (x2,y2) as\n B\u00e9zier control points.\n All coordinates are specified in double precision."}, {"method_name": "curveTo", "method_sig": "public final void curveTo (float x1,\n                          float y1,\n                          float x2,\n                          float y2,\n                          float x3,\n                          float y3)", "description": "Adds a curved segment, defined by three new points, to the path by\n drawing a B\u00e9zier curve that intersects both the current\n coordinates and the specified coordinates (x3,y3),\n using the specified points (x1,y1) and (x2,y2) as\n B\u00e9zier control points.\n All coordinates are specified in float precision.\n \n This method provides a single precision variant of\n the double precision curveTo() method on the\n base Path2D class."}, {"method_name": "append", "method_sig": "public final void append (PathIterator pi,\n                         boolean connect)", "description": "Appends the geometry of the specified\n PathIterator object\n to the path, possibly connecting the new geometry to the existing\n path segments with a line segment.\n If the connect parameter is true and the\n path is not empty then any initial moveTo in the\n geometry of the appended Shape is turned into a\n lineTo segment.\n If the destination coordinates of such a connecting lineTo\n segment match the ending coordinates of a currently open\n subpath then the segment is omitted as superfluous.\n The winding rule of the specified Shape is ignored\n and the appended geometry is governed by the winding\n rule specified for this path."}, {"method_name": "transform", "method_sig": "public final void transform (AffineTransform at)", "description": "Transforms the geometry of this path using the specified\n AffineTransform.\n The geometry is transformed in place, which permanently changes the\n boundary defined by this object."}, {"method_name": "getBounds2D", "method_sig": "public final Rectangle2D getBounds2D()", "description": "Returns a high precision and more accurate bounding box of\n the Shape than the getBounds method.\n Note that there is no guarantee that the returned\n Rectangle2D is the smallest bounding box that encloses\n the Shape, only that the Shape lies\n entirely within the indicated Rectangle2D.  The\n bounding box returned by this method is usually tighter than that\n returned by the getBounds method and never fails due\n to overflow problems since the return value can be an instance of\n the Rectangle2D that uses double precision values to\n store the dimensions.\n\n \n Note that the\n \n definition of insideness can lead to situations where points\n on the defining outline of the shape may not be considered\n contained in the returned bounds object, but only in cases\n where those points are also not considered contained in the original\n shape.\n \n\n If a point is inside the shape according to the\n contains(point) method, then it must\n be inside the returned Rectangle2D bounds object according\n to the contains(point) method of the\n bounds. Specifically:\n \n\nshape.contains(p) requires bounds.contains(p)\n\n\n If a point is not inside the shape, then it might\n still be contained in the bounds object:\n \n\nbounds.contains(p) does not imply shape.contains(p)\n"}, {"method_name": "getPathIterator", "method_sig": "public final PathIterator getPathIterator (AffineTransform at)", "description": "Returns an iterator object that iterates along the\n Shape boundary and provides access to the geometry of the\n Shape outline.  If an optional AffineTransform\n is specified, the coordinates returned in the iteration are\n transformed accordingly.\n \n Each call to this method returns a fresh PathIterator\n object that traverses the geometry of the Shape object\n independently from any other PathIterator objects in use\n at the same time.\n \n It is recommended, but not guaranteed, that objects\n implementing the Shape interface isolate iterations\n that are in process from any changes that might occur to the original\n object's geometry during such iterations.\n \n The iterator for this class is not multi-threaded safe,\n which means that the Path2D class does not\n guarantee that modifications to the geometry of this\n Path2D object do not affect any iterations of\n that geometry that are already in process."}, {"method_name": "clone", "method_sig": "public final Object clone()", "description": "Creates a new object of the same class as this object."}]}