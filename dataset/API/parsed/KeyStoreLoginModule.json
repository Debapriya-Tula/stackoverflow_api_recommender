{"name": "Class KeyStoreLoginModule", "module": "jdk.security.auth", "package": "com.sun.security.auth.module", "text": "Provides a JAAS login module that prompts for a key store alias and\n populates the subject with the alias's principal and credentials. Stores\n an X500Principal for the subject distinguished name of the\n first certificate in the alias's credentials in the subject's principals,\n the alias's certificate path in the subject's public credentials, and a\n X500PrivateCredential whose certificate is the first\n certificate in the alias's certificate path and whose private key is the\n alias's private key in the subject's private credentials. \n\n Recognizes the following options in the configuration file:\n \n keyStoreURL \n A URL that specifies the location of the key store.  Defaults to\n      a URL pointing to the .keystore file in the directory specified by the\n      user.home system property.  The input stream from this\n      URL is passed to the KeyStore.load method.\n      \"NONE\" may be specified if a null stream must be\n      passed to the KeyStore.load method.\n      \"NONE\" should be specified if the KeyStore resides\n      on a hardware token device, for example.\n keyStoreType \n The key store type.  If not specified, defaults to the result of\n      calling KeyStore.getDefaultType().\n      If the type is \"PKCS11\", then keyStoreURL must be \"NONE\"\n      and privateKeyPasswordURL must not be specified.\n keyStoreProvider \n The key store provider.  If not specified, uses the standard search\n      order to find the provider. \n keyStoreAlias \n The alias in the key store to login as.  Required when no callback\n      handler is provided.  No default value. \n keyStorePasswordURL \n A URL that specifies the location of the key store password.  Required\n      when no callback handler is provided and\n      protected is false.\n      No default value. \n privateKeyPasswordURL \n A URL that specifies the location of the specific private key password\n      needed to access the private key for this alias.\n      The keystore password\n      is used if this value is needed and not specified. \n protected \n This value should be set to \"true\" if the KeyStore\n      has a separate, protected authentication path\n      (for example, a dedicated PIN-pad attached to a smart card).\n      Defaults to \"false\". If \"true\" keyStorePasswordURL and\n      privateKeyPasswordURL must not be specified.\n", "codes": ["public class KeyStoreLoginModule\nextends Object\nimplements LoginModule"], "fields": [], "methods": [{"method_name": "initialize", "method_sig": "public void initialize (Subject subject,\n                       CallbackHandler callbackHandler,\n                       Map<String, ?> sharedState,\n                       Map<String, ?> options)", "description": "Initialize this LoginModule."}, {"method_name": "login", "method_sig": "public boolean login()\n              throws LoginException", "description": "Authenticate the user.\n\n  Get the Keystore alias and relevant passwords.\n Retrieve the alias's principal and credentials from the Keystore."}, {"method_name": "commit", "method_sig": "public boolean commit()\n               throws LoginException", "description": "Abstract method to commit the authentication process (phase 2).\n\n  This method is called if the LoginContext's\n overall authentication succeeded\n (the relevant REQUIRED, REQUISITE, SUFFICIENT and OPTIONAL LoginModules\n succeeded).\n\n  If this LoginModule's own authentication attempt\n succeeded (checked by retrieving the private state saved by the\n login method), then this method associates a\n X500Principal for the subject distinguished name of the\n first certificate in the alias's credentials in the subject's\n principals,the alias's certificate path in the subject's public\n credentials, and a X500PrivateCredential whose certificate\n is the first  certificate in the alias's certificate path and whose\n private key is the alias's private key in the subject's private\n credentials.  If this LoginModule's own\n authentication attempted failed, then this method removes\n any state that was originally saved."}, {"method_name": "abort", "method_sig": "public boolean abort()\n              throws LoginException", "description": "This method is called if the LoginContext's\n overall authentication failed.\n (the relevant REQUIRED, REQUISITE, SUFFICIENT and OPTIONAL LoginModules\n did not succeed).\n\n  If this LoginModule's own authentication attempt\n succeeded (checked by retrieving the private state saved by the\n login and commit methods),\n then this method cleans up any state that was originally saved.\n\n  If the loaded KeyStore's provider extends\n java.security.AuthProvider,\n then the provider's logout method is invoked."}, {"method_name": "logout", "method_sig": "public boolean logout()\n               throws LoginException", "description": "Logout a user.\n\n  This method removes the Principals, public credentials and the\n private credentials that were added by the commit method.\n\n  If the loaded KeyStore's provider extends\n java.security.AuthProvider,\n then the provider's logout method is invoked."}]}