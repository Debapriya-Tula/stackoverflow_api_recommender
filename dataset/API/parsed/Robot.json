{"name": "Class Robot", "module": "java.desktop", "package": "java.awt", "text": "This class is used to generate native system input events\n for the purposes of test automation, self-running demos, and\n other applications where control of the mouse and keyboard\n is needed. The primary purpose of Robot is to facilitate\n automated testing of Java platform implementations.\n \n Using the class to generate input events differs from posting\n events to the AWT event queue or AWT components in that the\n events are generated in the platform's native input\n queue. For example, Robot.mouseMove will actually move\n the mouse cursor instead of just generating mouse move events.\n \n Note that some platforms require special privileges or extensions\n to access low-level input control. If the current platform configuration\n does not allow input control, an AWTException will be thrown\n when trying to construct Robot objects. For example, X-Window systems\n will throw the exception if the XTEST 2.2 standard extension is not supported\n (or not enabled) by the X server.\n \n Applications that use Robot for purposes other than self-testing should\n handle these error conditions gracefully.", "codes": ["public class Robot\nextends Object"], "fields": [], "methods": [{"method_name": "mouseMove", "method_sig": "public void mouseMove (int x,\n                      int y)", "description": "Moves mouse pointer to given screen coordinates."}, {"method_name": "mousePress", "method_sig": "public void mousePress (int buttons)", "description": "Presses one or more mouse buttons.  The mouse buttons should\n be released using the mouseRelease(int) method."}, {"method_name": "mouseRelease", "method_sig": "public void mouseRelease (int buttons)", "description": "Releases one or more mouse buttons."}, {"method_name": "mouseWheel", "method_sig": "public void mouseWheel (int wheelAmt)", "description": "Rotates the scroll wheel on wheel-equipped mice."}, {"method_name": "keyPress", "method_sig": "public void keyPress (int keycode)", "description": "Presses a given key.  The key should be released using the\n keyRelease method.\n \n Key codes that have more than one physical key associated with them\n (e.g. KeyEvent.VK_SHIFT could mean either the\n left or right shift key) will map to the left key."}, {"method_name": "keyRelease", "method_sig": "public void keyRelease (int keycode)", "description": "Releases a given key.\n \n Key codes that have more than one physical key associated with them\n (e.g. KeyEvent.VK_SHIFT could mean either the\n left or right shift key) will map to the left key."}, {"method_name": "getPixelColor", "method_sig": "public Color getPixelColor (int x,\n                           int y)", "description": "Returns the color of a pixel at the given screen coordinates."}, {"method_name": "createScreenCapture", "method_sig": "public BufferedImage createScreenCapture (Rectangle screenRect)", "description": "Creates an image containing pixels read from the screen.  This image does\n not include the mouse cursor."}, {"method_name": "createMultiResolutionScreenCapture", "method_sig": "public MultiResolutionImage createMultiResolutionScreenCapture (Rectangle screenRect)", "description": "Creates an image containing pixels read from the screen.\n This image does not include the mouse cursor.\n This method can be used in case there is a scaling transform\n from user space to screen (device) space.\n Typically this means that the display is a high resolution screen,\n although strictly it means any case in which there is such a transform.\n Returns a MultiResolutionImage.\n \n For a non-scaled display, the MultiResolutionImage\n will have one image variant:\n \n Base Image with user specified size.\n \n\n For a high resolution display where there is a scaling transform,\n the MultiResolutionImage will have two image variants:\n \n Base Image with user specified size. This is scaled from the screen.\n  Native device resolution image with device size pixels.\n \n\n Example:\n \n      Image nativeResImage;\n      MultiResolutionImage mrImage = robot.createMultiResolutionScreenCapture(frame.getBounds());\n      List<Image> resolutionVariants = mrImage.getResolutionVariants();\n      if (resolutionVariants.size() > 1) {\n          nativeResImage = resolutionVariants.get(1);\n      } else {\n          nativeResImage = resolutionVariants.get(0);\n      }\n "}, {"method_name": "isAutoWaitForIdle", "method_sig": "public boolean isAutoWaitForIdle()", "description": "Returns whether this Robot automatically invokes waitForIdle\n after generating an event."}, {"method_name": "setAutoWaitForIdle", "method_sig": "public void setAutoWaitForIdle (boolean isOn)", "description": "Sets whether this Robot automatically invokes waitForIdle\n after generating an event."}, {"method_name": "getAutoDelay", "method_sig": "public int getAutoDelay()", "description": "Returns the number of milliseconds this Robot sleeps after generating an event."}, {"method_name": "setAutoDelay", "method_sig": "public void setAutoDelay (int ms)", "description": "Sets the number of milliseconds this Robot sleeps after generating an event."}, {"method_name": "delay", "method_sig": "public void delay (int ms)", "description": "Sleeps for the specified time.\n To catch any InterruptedExceptions that occur,\n Thread.sleep() may be used instead."}, {"method_name": "waitForIdle", "method_sig": "public void waitForIdle()", "description": "Waits until all events currently on the event queue have been processed."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a string representation of this Robot."}]}