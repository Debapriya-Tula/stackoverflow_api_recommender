{"name": "Class MethodHandles.Lookup", "module": "java.base", "package": "java.lang.invoke", "text": "A lookup object is a factory for creating method handles,\n when the creation requires access checking.\n Method handles do not perform\n access checks when they are called, but rather when they are created.\n Therefore, method handle access\n restrictions must be enforced when a method handle is created.\n The caller class against which those restrictions are enforced\n is known as the lookup class.\n \n A lookup class which needs to create method handles will call\n MethodHandles.lookup to create a factory for itself.\n When the Lookup factory object is created, the identity of the lookup class is\n determined, and securely stored in the Lookup object.\n The lookup class (or its delegates) may then use factory methods\n on the Lookup object to create method handles for access-checked members.\n This includes all methods, constructors, and fields which are allowed to the lookup class,\n even private ones.\n\n Lookup Factory Methods\n The factory methods on a Lookup object correspond to all major\n use cases for methods, constructors, and fields.\n Each method handle created by a factory method is the functional\n equivalent of a particular bytecode behavior.\n (Bytecode behaviors are described in section 5.4.3.5 of the Java Virtual Machine Specification.)\n Here is a summary of the correspondence between these factory methods and\n the behavior of the resulting method handles:\n \nlookup method behaviors\n\n\nlookup expression\nmember\nbytecode behavior\n\n\n\n\nlookup.findGetter(C.class,\"f\",FT.class)\nFT f;(T) this.f;\n\n\nlookup.findStaticGetter(C.class,\"f\",FT.class)\nstaticFT f;(T) C.f;\n\n\nlookup.findSetter(C.class,\"f\",FT.class)\nFT f;this.f = x;\n\n\nlookup.findStaticSetter(C.class,\"f\",FT.class)\nstaticFT f;C.f = arg;\n\n\nlookup.findVirtual(C.class,\"m\",MT)\nT m(A*);(T) this.m(arg*);\n\n\nlookup.findStatic(C.class,\"m\",MT)\nstaticT m(A*);(T) C.m(arg*);\n\n\nlookup.findSpecial(C.class,\"m\",MT,this.class)\nT m(A*);(T) super.m(arg*);\n\n\nlookup.findConstructor(C.class,MT)\nC(A*);new C(arg*);\n\n\nlookup.unreflectGetter(aField)\n(static)?FT f;(FT) aField.get(thisOrNull);\n\n\nlookup.unreflectSetter(aField)\n(static)?FT f;aField.set(thisOrNull, arg);\n\n\nlookup.unreflect(aMethod)\n(static)?T m(A*);(T) aMethod.invoke(thisOrNull, arg*);\n\n\nlookup.unreflectConstructor(aConstructor)\nC(A*);(C) aConstructor.newInstance(arg*);\n\n\nlookup.unreflect(aMethod)\n(static)?T m(A*);(T) aMethod.invoke(thisOrNull, arg*);\n\n\nlookup.findClass(\"C\")\nclass C { ... }C.class;\n\n\n\n\n Here, the type C is the class or interface being searched for a member,\n documented as a parameter named refc in the lookup methods.\n The method type MT is composed from the return type T\n and the sequence of argument types A*.\n The constructor also has a sequence of argument types A* and\n is deemed to return the newly-created object of type C.\n Both MT and the field type FT are documented as a parameter named type.\n The formal parameter this stands for the self-reference of type C;\n if it is present, it is always the leading argument to the method handle invocation.\n (In the case of some protected members, this may be\n restricted in type to the lookup class; see below.)\n The name arg stands for all the other method handle arguments.\n In the code examples for the Core Reflection API, the name thisOrNull\n stands for a null reference if the accessed method or field is static,\n and this otherwise.\n The names aMethod, aField, and aConstructor stand\n for reflective objects corresponding to the given members.\n \n The bytecode behavior for a findClass operation is a load of a constant class,\n as if by ldc CONSTANT_Class.\n The behavior is represented, not as a method handle, but directly as a Class constant.\n \n In cases where the given member is of variable arity (i.e., a method or constructor)\n the returned method handle will also be of variable arity.\n In all other cases, the returned method handle will be of fixed arity.\n \nDiscussion:\n The equivalence between looked-up method handles and underlying\n class members and bytecode behaviors\n can break down in a few ways:\n \nIf C is not symbolically accessible from the lookup class's loader,\n the lookup can still succeed, even when there is no equivalent\n Java expression or bytecoded constant.\n Likewise, if T or MT\n is not symbolically accessible from the lookup class's loader,\n the lookup can still succeed.\n For example, lookups for MethodHandle.invokeExact and\n MethodHandle.invoke will always succeed, regardless of requested type.\n If there is a security manager installed, it can forbid the lookup\n on various grounds (see below).\n By contrast, the ldc instruction on a CONSTANT_MethodHandle\n constant is not subject to security manager checks.\n If the looked-up method has a\n very large arity,\n the method handle creation may fail, due to the method handle\n type having too many parameters.\n \nAccess checking\n Access checks are applied in the factory methods of Lookup,\n when a method handle is created.\n This is a key difference from the Core Reflection API, since\n java.lang.reflect.Method.invoke\n performs access checking against every caller, on every call.\n \n All access checks start from a Lookup object, which\n compares its recorded lookup class against all requests to\n create method handles.\n A single Lookup object can be used to create any number\n of access-checked method handles, all checked against a single\n lookup class.\n \n A Lookup object can be shared with other trusted code,\n such as a metaobject protocol.\n A shared Lookup object delegates the capability\n to create method handles on private members of the lookup class.\n Even if privileged code uses the Lookup object,\n the access checking is confined to the privileges of the\n original lookup class.\n \n A lookup can fail, because\n the containing class is not accessible to the lookup class, or\n because the desired class member is missing, or because the\n desired class member is not accessible to the lookup class, or\n because the lookup object is not trusted enough to access the member.\n In any of these cases, a ReflectiveOperationException will be\n thrown from the attempted lookup.  The exact class will be one of\n the following:\n \nNoSuchMethodException \u2014 if a method is requested but does not exist\n NoSuchFieldException \u2014 if a field is requested but does not exist\n IllegalAccessException \u2014 if the member exists but an access check fails\n \n\n In general, the conditions under which a method handle may be\n looked up for a method M are no more restrictive than the conditions\n under which the lookup class could have compiled, verified, and resolved a call to M.\n Where the JVM would raise exceptions like NoSuchMethodError,\n a method handle lookup will generally raise a corresponding\n checked exception, such as NoSuchMethodException.\n And the effect of invoking the method handle resulting from the lookup\n is exactly equivalent\n to executing the compiled, verified, and resolved call to M.\n The same point is true of fields and constructors.\n \nDiscussion:\n Access checks only apply to named and reflected methods,\n constructors, and fields.\n Other method handle creation methods, such as\n MethodHandle.asType,\n do not require any access checks, and are used\n independently of any Lookup object.\n \n If the desired member is protected, the usual JVM rules apply,\n including the requirement that the lookup class must be either be in the\n same package as the desired member, or must inherit that member.\n (See the Java Virtual Machine Specification, sections 4.9.2, 5.4.3.5, and 6.4.)\n In addition, if the desired member is a non-static field or method\n in a different package, the resulting method handle may only be applied\n to objects of the lookup class or one of its subclasses.\n This requirement is enforced by narrowing the type of the leading\n this parameter from C\n (which will necessarily be a superclass of the lookup class)\n to the lookup class itself.\n \n The JVM imposes a similar requirement on invokespecial instruction,\n that the receiver argument must match both the resolved method and\n the current class.  Again, this requirement is enforced by narrowing the\n type of the leading parameter to the resulting method handle.\n (See the Java Virtual Machine Specification, section 4.10.1.9.)\n \n The JVM represents constructors and static initializer blocks as internal methods\n with special names (\"<init>\" and \"<clinit>\").\n The internal syntax of invocation instructions allows them to refer to such internal\n methods as if they were normal methods, but the JVM bytecode verifier rejects them.\n A lookup of such an internal method will produce a NoSuchMethodException.\n \n If the relationship between nested types is expressed directly through the\n NestHost and NestMembers attributes\n (see the Java Virtual Machine Specification, sections 4.7.28 and 4.7.29),\n then the associated Lookup object provides direct access to\n the lookup class and all of its nestmates\n (see Class.getNestHost).\n Otherwise, access between nested classes is obtained by the Java compiler creating\n a wrapper method to access a private method of another class in the same nest.\n For example, a nested class C.D\n can access private members within other related classes such as\n C, C.D.E, or C.B,\n but the Java compiler may need to generate wrapper methods in\n those related classes.  In such cases, a Lookup object on\n C.E would be unable to access those private members.\n A workaround for this limitation is the Lookup.in method,\n which can transform a lookup on C.E into one on any of those other\n classes, without special elevation of privilege.\n \n The accesses permitted to a given lookup object may be limited,\n according to its set of lookupModes,\n to a subset of members normally accessible to the lookup class.\n For example, the publicLookup\n method produces a lookup object which is only allowed to access\n public members in public classes of exported packages.\n The caller sensitive method lookup\n produces a lookup object with full capabilities relative to\n its caller class, to emulate all supported bytecode behaviors.\n Also, the Lookup.in method may produce a lookup object\n with fewer access modes than the original lookup object.\n\n \n\nDiscussion of private access:\n We say that a lookup has private access\n if its lookup modes\n include the possibility of accessing private members\n (which includes the private members of nestmates).\n As documented in the relevant methods elsewhere,\n only lookups with private access possess the following capabilities:\n \naccess private fields, methods, and constructors of the lookup class and its nestmates\n create method handles which invoke caller sensitive methods,\n     such as Class.forName\ncreate method handles which emulate invokespecial instructions\n avoid package access checks\n     for classes accessible to the lookup class\n create delegated lookup objects which have private access to other classes\n     within the same package member\n \n\n Each of these permissions is a consequence of the fact that a lookup object\n with private access can be securely traced back to an originating class,\n whose bytecode behaviors and Java language access permissions\n can be reliably determined and emulated by method handles.\n\n Security manager interactions\n Although bytecode instructions can only refer to classes in\n a related class loader, this API can search for methods in any\n class, as long as a reference to its Class object is\n available.  Such cross-loader references are also possible with the\n Core Reflection API, and are impossible to bytecode instructions\n such as invokestatic or getfield.\n There is a security manager API\n to allow applications to check such cross-loader references.\n These checks apply to both the MethodHandles.Lookup API\n and the Core Reflection API\n (as found on Class).\n \n If a security manager is present, member and class lookups are subject to\n additional checks.\n From one to three calls are made to the security manager.\n Any of these calls can refuse access by throwing a\n SecurityException.\n Define smgr as the security manager,\n lookc as the lookup class of the current lookup object,\n refc as the containing class in which the member\n is being sought, and defc as the class in which the\n member is actually defined.\n (If a class or other type is being accessed,\n the refc and defc values are the class itself.)\n The value lookc is defined as not present\n if the current lookup object does not have\n private access.\n The calls are made according to the following rules:\n \nStep 1:\n     If lookc is not present, or if its class loader is not\n     the same as or an ancestor of the class loader of refc,\n     then smgr.checkPackageAccess(refcPkg) is called,\n     where refcPkg is the package of refc.\n Step 2a:\n     If the retrieved member is not public and\n     lookc is not present, then\n     smgr.checkPermission\n     with RuntimePermission(\"accessDeclaredMembers\") is called.\n Step 2b:\n     If the retrieved class has a null class loader,\n     and lookc is not present, then\n     smgr.checkPermission\n     with RuntimePermission(\"getClassLoader\") is called.\n Step 3:\n     If the retrieved member is not public,\n     and if lookc is not present,\n     and if defc and refc are different,\n     then smgr.checkPackageAccess(defcPkg) is called,\n     where defcPkg is the package of defc.\n \n Security checks are performed after other access checks have passed.\n Therefore, the above rules presuppose a member or class that is public,\n or else that is being accessed from a lookup class that has\n rights to access the member or class.\n\n Caller sensitive methods\n A small number of Java methods have a special property called caller sensitivity.\n A caller-sensitive method can behave differently depending on the\n identity of its immediate caller.\n \n If a method handle for a caller-sensitive method is requested,\n the general rules for bytecode behaviors apply,\n but they take account of the lookup class in a special way.\n The resulting method handle behaves as if it were called\n from an instruction contained in the lookup class,\n so that the caller-sensitive method detects the lookup class.\n (By contrast, the invoker of the method handle is disregarded.)\n Thus, in the case of caller-sensitive methods,\n different lookup classes may give rise to\n differently behaving method handles.\n \n In cases where the lookup object is\n publicLookup(),\n or some other lookup object without\n private access,\n the lookup class is disregarded.\n In such cases, no caller-sensitive method handle can be created,\n access is forbidden, and the lookup fails with an\n IllegalAccessException.\n \nDiscussion:\n For example, the caller-sensitive method\n Class.forName(x)\n can return varying classes or throw varying exceptions,\n depending on the class loader of the class that calls it.\n A public lookup of Class.forName will fail, because\n there is no reasonable way to determine its bytecode behavior.\n \n If an application caches method handles for broad sharing,\n it should use publicLookup() to create them.\n If there is a lookup of Class.forName, it will fail,\n and the application must take appropriate action in that case.\n It may be that a later lookup, perhaps during the invocation of a\n bootstrap method, can incorporate the specific identity\n of the caller, making the method accessible.\n \n The function MethodHandles.lookup is caller sensitive\n so that there can be a secure foundation for lookups.\n Nearly all other methods in the JSR 292 API rely on lookup\n objects to check access requests.", "codes": ["public static final class MethodHandles.Lookup\nextends Object"], "fields": [{"field_name": "PUBLIC", "field_sig": "public static final\u00a0int PUBLIC", "description": "A single-bit mask representing public access,\n  which may contribute to the result of lookupModes.\n  The value, 0x01, happens to be the same as the value of the\n  public modifier bit."}, {"field_name": "PRIVATE", "field_sig": "public static final\u00a0int PRIVATE", "description": "A single-bit mask representing private access,\n  which may contribute to the result of lookupModes.\n  The value, 0x02, happens to be the same as the value of the\n  private modifier bit."}, {"field_name": "PROTECTED", "field_sig": "public static final\u00a0int PROTECTED", "description": "A single-bit mask representing protected access,\n  which may contribute to the result of lookupModes.\n  The value, 0x04, happens to be the same as the value of the\n  protected modifier bit."}, {"field_name": "PACKAGE", "field_sig": "public static final\u00a0int PACKAGE", "description": "A single-bit mask representing package access (default access),\n  which may contribute to the result of lookupModes.\n  The value is 0x08, which does not correspond meaningfully to\n  any particular modifier bit."}, {"field_name": "MODULE", "field_sig": "public static final\u00a0int MODULE", "description": "A single-bit mask representing module access (default access),\n  which may contribute to the result of lookupModes.\n  The value is 0x10, which does not correspond meaningfully to\n  any particular modifier bit.\n  In conjunction with the PUBLIC modifier bit, a Lookup\n  with this lookup mode can access all public types in the module of the\n  lookup class and public types in packages exported by other modules\n  to the module of the lookup class."}, {"field_name": "UNCONDITIONAL", "field_sig": "public static final\u00a0int UNCONDITIONAL", "description": "A single-bit mask representing unconditional access\n  which may contribute to the result of lookupModes.\n  The value is 0x20, which does not correspond meaningfully to\n  any particular modifier bit.\n  A Lookup with this lookup mode assumes readability.\n  In conjunction with the PUBLIC modifier bit, a Lookup\n  with this lookup mode can access all public members of public types\n  of all modules where the type is in a package that is exported unconditionally."}], "methods": [{"method_name": "lookupClass", "method_sig": "public Class<?> lookupClass()", "description": "Tells which class is performing the lookup.  It is this class against\n  which checks are performed for visibility and access permissions.\n  \n  The class implies a maximum level of access permission,\n  but the permissions may be additionally limited by the bitmask\n  lookupModes, which controls whether non-public members\n  can be accessed."}, {"method_name": "lookupModes", "method_sig": "public int lookupModes()", "description": "Tells which access-protection classes of members this lookup object can produce.\n  The result is a bit-mask of the bits\n  PUBLIC (0x01),\n  PRIVATE (0x02),\n  PROTECTED (0x04),\n  PACKAGE (0x08),\n  MODULE (0x10),\n  and UNCONDITIONAL (0x20).\n  \n  A freshly-created lookup object\n  on the caller's class has\n  all possible bits set, except UNCONDITIONAL.\n  A lookup object on a new lookup class\n  created from a previous lookup object\n  may have some mode bits set to zero.\n  Mode bits can also be\n  directly cleared.\n  Once cleared, mode bits cannot be restored from the downgraded lookup object.\n  The purpose of this is to restrict access via the new lookup object,\n  so that it can access only names which can be reached by the original\n  lookup object, and also by the new lookup class."}, {"method_name": "in", "method_sig": "public MethodHandles.Lookup in (Class<?> requestedLookupClass)", "description": "Creates a lookup on the specified new lookup class.\n The resulting object will report the specified\n class as its own lookupClass.\n \n However, the resulting Lookup object is guaranteed\n to have no more access capabilities than the original.\n In particular, access capabilities can be lost as follows:\nIf the old lookup class is in a named module, and\n the new lookup class is in a different module M, then no members, not\n even public members in M's exported packages, will be accessible.\n The exception to this is when this lookup is publicLookup, in which case PUBLIC access is not lost.\n If the old lookup class is in an unnamed module, and the new lookup class\n is a different module then MODULE access is lost.\n If the new lookup class differs from the old one then UNCONDITIONAL is lost.\n If the new lookup class is in a different package\n than the old one, protected and default (package) members will not be accessible.\n If the new lookup class is not within the same package member\n as the old one, private members will not be accessible, and protected members\n will not be accessible by virtue of inheritance.\n (Protected members may continue to be accessible because of package sharing.)\n If the new lookup class is not accessible to the old lookup class,\n then no members, not even public members, will be accessible.\n (In all other cases, public members will continue to be accessible.)\n \n\n The resulting lookup's capabilities for loading classes\n (used during findClass(java.lang.String) invocations)\n are determined by the lookup class' loader,\n which may change due to this operation."}, {"method_name": "dropLookupMode", "method_sig": "public MethodHandles.Lookup dropLookupMode (int modeToDrop)", "description": "Creates a lookup on the same lookup class which this lookup object\n finds members, but with a lookup mode that has lost the given lookup mode.\n The lookup mode to drop is one of PUBLIC, MODULE, PACKAGE, PROTECTED or PRIVATE.\n PROTECTED and UNCONDITIONAL are always\n dropped and so the resulting lookup mode will never have these access capabilities.\n When dropping PACKAGE then the resulting lookup will not have PACKAGE\n or PRIVATE access. When dropping MODULE then the resulting lookup will\n not have MODULE, PACKAGE, or PRIVATE access. If PUBLIC\n is dropped then the resulting lookup has no access."}, {"method_name": "defineClass", "method_sig": "public Class<?> defineClass (byte[] bytes)\n                     throws IllegalAccessException", "description": "Defines a class to the same class loader and in the same runtime package and\n protection domain as this lookup's\n lookup class.\n\n  The lookup modes for this lookup must include\n PACKAGE access as default (package) members will be\n accessible to the class. The PACKAGE lookup mode serves to authenticate\n that the lookup object was created by a caller in the runtime package (or derived\n from a lookup originally created by suitably privileged code to a target class in\n the runtime package). \n The bytes parameter is the class bytes of a valid class file (as defined\n by the The Java Virtual Machine Specification) with a class name in the\n same package as the lookup class. \n This method does not run the class initializer. The class initializer may\n run at a later time, as detailed in section 12.4 of the The Java Language\n Specification. \n If there is a security manager, its checkPermission method is first called\n to check RuntimePermission(\"defineClass\"). "}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Displays the name of the class from which lookups are to be made.\n (The name is the one reported by Class.getName.)\n If there are restrictions on the access permitted to this lookup,\n this is indicated by adding a suffix to the class name, consisting\n of a slash and a keyword.  The keyword represents the strongest\n allowed access, and is chosen as follows:\n \nIf no access is allowed, the suffix is \"/noaccess\".\n If only public access to types in exported packages is allowed, the suffix is \"/public\".\n If only public access and unconditional access are allowed, the suffix is \"/publicLookup\".\n If only public and module access are allowed, the suffix is \"/module\".\n If only public, module and package access are allowed, the suffix is \"/package\".\n If only public, module, package, and private access are allowed, the suffix is \"/private\".\n \n If none of the above cases apply, it is the case that full\n access (public, module, package, private, and protected) is allowed.\n In this case, no suffix is added.\n This is true only of an object obtained originally from\n MethodHandles.lookup.\n Objects created by Lookup.in\n always have restricted access, and will display a suffix.\n \n (It may seem strange that protected access should be\n stronger than private access.  Viewed independently from\n package access, protected access is the first to be lost,\n because it requires a direct subclass relationship between\n caller and callee.)"}, {"method_name": "findStatic", "method_sig": "public MethodHandle findStatic (Class<?> refc,\n                               String name,\n                               MethodType type)\n                        throws NoSuchMethodException,\n                               IllegalAccessException", "description": "Produces a method handle for a static method.\n The type of the method handle will be that of the method.\n (Since static methods do not take receivers, there is no\n additional receiver argument inserted into the method handle type,\n as there would be with findVirtual or findSpecial.)\n The method and all its argument types must be accessible to the lookup object.\n \n The returned method handle will have\n variable arity if and only if\n the method's variable arity modifier bit (0x0080) is set.\n \n If the returned method handle is invoked, the method's class will\n be initialized, if it has not already been initialized.\n Example:\n\nimport static java.lang.invoke.MethodHandles.*;\nimport static java.lang.invoke.MethodType.*;\n...\nMethodHandle MH_asList = publicLookup().findStatic(Arrays.class,\n  \"asList\", methodType(List.class, Object[].class));\nassertEquals(\"[x, y]\", MH_asList.invoke(\"x\", \"y\").toString());\n "}, {"method_name": "findVirtual", "method_sig": "public MethodHandle findVirtual (Class<?> refc,\n                                String name,\n                                MethodType type)\n                         throws NoSuchMethodException,\n                                IllegalAccessException", "description": "Produces a method handle for a virtual method.\n The type of the method handle will be that of the method,\n with the receiver type (usually refc) prepended.\n The method and all its argument types must be accessible to the lookup object.\n \n When called, the handle will treat the first argument as a receiver\n and, for non-private methods, dispatch on the receiver's type to determine which method\n implementation to enter.\n For private methods the named method in refc will be invoked on the receiver.\n (The dispatching action is identical with that performed by an\n invokevirtual or invokeinterface instruction.)\n \n The first argument will be of type refc if the lookup\n class has full privileges to access the member.  Otherwise\n the member must be protected and the first argument\n will be restricted in type to the lookup class.\n \n The returned method handle will have\n variable arity if and only if\n the method's variable arity modifier bit (0x0080) is set.\n \n Because of the general equivalence between invokevirtual\n instructions and method handles produced by findVirtual,\n if the class is MethodHandle and the name string is\n invokeExact or invoke, the resulting\n method handle is equivalent to one produced by\n MethodHandles.exactInvoker or\n MethodHandles.invoker\n with the same type argument.\n \n If the class is VarHandle and the name string corresponds to\n the name of a signature-polymorphic access mode method, the resulting\n method handle is equivalent to one produced by\n MethodHandles.varHandleInvoker(java.lang.invoke.VarHandle.AccessMode, java.lang.invoke.MethodType) with\n the access mode corresponding to the name string and with the same\n type arguments.\n \nExample:\n\nimport static java.lang.invoke.MethodHandles.*;\nimport static java.lang.invoke.MethodType.*;\n...\nMethodHandle MH_concat = publicLookup().findVirtual(String.class,\n  \"concat\", methodType(String.class, String.class));\nMethodHandle MH_hashCode = publicLookup().findVirtual(Object.class,\n  \"hashCode\", methodType(int.class));\nMethodHandle MH_hashCode_String = publicLookup().findVirtual(String.class,\n  \"hashCode\", methodType(int.class));\nassertEquals(\"xy\", (String) MH_concat.invokeExact(\"x\", \"y\"));\nassertEquals(\"xy\".hashCode(), (int) MH_hashCode.invokeExact((Object)\"xy\"));\nassertEquals(\"xy\".hashCode(), (int) MH_hashCode_String.invokeExact(\"xy\"));\n// interface method:\nMethodHandle MH_subSequence = publicLookup().findVirtual(CharSequence.class,\n  \"subSequence\", methodType(CharSequence.class, int.class, int.class));\nassertEquals(\"def\", MH_subSequence.invoke(\"abcdefghi\", 3, 6).toString());\n// constructor \"internal method\" must be accessed differently:\nMethodType MT_newString = methodType(void.class); //()V for new String()\ntry { assertEquals(\"impossible\", lookup()\n        .findVirtual(String.class, \"<init>\", MT_newString));\n } catch (NoSuchMethodException ex) { } // OK\nMethodHandle MH_newString = publicLookup()\n  .findConstructor(String.class, MT_newString);\nassertEquals(\"\", (String) MH_newString.invokeExact());\n "}, {"method_name": "findConstructor", "method_sig": "public MethodHandle findConstructor (Class<?> refc,\n                                    MethodType type)\n                             throws NoSuchMethodException,\n                                    IllegalAccessException", "description": "Produces a method handle which creates an object and initializes it, using\n the constructor of the specified type.\n The parameter types of the method handle will be those of the constructor,\n while the return type will be a reference to the constructor's class.\n The constructor and all its argument types must be accessible to the lookup object.\n \n The requested type must have a return type of void.\n (This is consistent with the JVM's treatment of constructor type descriptors.)\n \n The returned method handle will have\n variable arity if and only if\n the constructor's variable arity modifier bit (0x0080) is set.\n \n If the returned method handle is invoked, the constructor's class will\n be initialized, if it has not already been initialized.\n Example:\n\nimport static java.lang.invoke.MethodHandles.*;\nimport static java.lang.invoke.MethodType.*;\n...\nMethodHandle MH_newArrayList = publicLookup().findConstructor(\n  ArrayList.class, methodType(void.class, Collection.class));\nCollection orig = Arrays.asList(\"x\", \"y\");\nCollection copy = (ArrayList) MH_newArrayList.invokeExact(orig);\nassert(orig != copy);\nassertEquals(orig, copy);\n// a variable-arity constructor:\nMethodHandle MH_newProcessBuilder = publicLookup().findConstructor(\n  ProcessBuilder.class, methodType(void.class, String[].class));\nProcessBuilder pb = (ProcessBuilder)\n  MH_newProcessBuilder.invoke(\"x\", \"y\", \"z\");\nassertEquals(\"[x, y, z]\", pb.command().toString());\n "}, {"method_name": "findClass", "method_sig": "public Class<?> findClass (String targetName)\n                   throws ClassNotFoundException,\n                          IllegalAccessException", "description": "Looks up a class by name from the lookup context defined by this Lookup object. The static\n initializer of the class is not run.\n \n The lookup context here is determined by the lookup class, its class\n loader, and the lookup modes. In particular, the method first attempts to\n load the requested class, and then determines whether the class is accessible to this lookup object."}, {"method_name": "accessClass", "method_sig": "public Class<?> accessClass (Class<?> targetClass)\n                     throws IllegalAccessException", "description": "Determines if a class can be accessed from the lookup context defined by this Lookup object. The\n static initializer of the class is not run.\n \n The lookup context here is determined by the lookup class and the\n lookup modes."}, {"method_name": "findSpecial", "method_sig": "public MethodHandle findSpecial (Class<?> refc,\n                                String name,\n                                MethodType type,\n                                Class<?> specialCaller)\n                         throws NoSuchMethodException,\n                                IllegalAccessException", "description": "Produces an early-bound method handle for a virtual method.\n It will bypass checks for overriding methods on the receiver,\n as if called from an invokespecial\n instruction from within the explicitly specified specialCaller.\n The type of the method handle will be that of the method,\n with a suitably restricted receiver type prepended.\n (The receiver type will be specialCaller or a subtype.)\n The method and all its argument types must be accessible\n to the lookup object.\n \n Before method resolution,\n if the explicitly specified caller class is not identical with the\n lookup class, or if this lookup object does not have\n private access\n privileges, the access fails.\n \n The returned method handle will have\n variable arity if and only if\n the method's variable arity modifier bit (0x0080) is set.\n \n(Note:  JVM internal methods named \"<init>\" are not visible to this API,\n even though the invokespecial instruction can refer to them\n in special circumstances.  Use findConstructor\n to access instance initialization methods in a safe manner.)\nExample:\n\nimport static java.lang.invoke.MethodHandles.*;\nimport static java.lang.invoke.MethodType.*;\n...\nstatic class Listie extends ArrayList {\n  public String toString() { return \"[wee Listie]\"; }\n  static Lookup lookup() { return MethodHandles.lookup(); }\n}\n...\n// no access to constructor via invokeSpecial:\nMethodHandle MH_newListie = Listie.lookup()\n  .findConstructor(Listie.class, methodType(void.class));\nListie l = (Listie) MH_newListie.invokeExact();\ntry { assertEquals(\"impossible\", Listie.lookup().findSpecial(\n        Listie.class, \"<init>\", methodType(void.class), Listie.class));\n } catch (NoSuchMethodException ex) { } // OK\n// access to super and self methods via invokeSpecial:\nMethodHandle MH_super = Listie.lookup().findSpecial(\n  ArrayList.class, \"toString\" , methodType(String.class), Listie.class);\nMethodHandle MH_this = Listie.lookup().findSpecial(\n  Listie.class, \"toString\" , methodType(String.class), Listie.class);\nMethodHandle MH_duper = Listie.lookup().findSpecial(\n  Object.class, \"toString\" , methodType(String.class), Listie.class);\nassertEquals(\"[]\", (String) MH_super.invokeExact(l));\nassertEquals(\"\"+l, (String) MH_this.invokeExact(l));\nassertEquals(\"[]\", (String) MH_duper.invokeExact(l)); // ArrayList method\ntry { assertEquals(\"inaccessible\", Listie.lookup().findSpecial(\n        String.class, \"toString\", methodType(String.class), Listie.class));\n } catch (IllegalAccessException ex) { } // OK\nListie subl = new Listie() { public String toString() { return \"[subclass]\"; } };\nassertEquals(\"\"+l, (String) MH_this.invokeExact(subl)); // Listie method\n "}, {"method_name": "findGetter", "method_sig": "public MethodHandle findGetter (Class<?> refc,\n                               String name,\n                               Class<?> type)\n                        throws NoSuchFieldException,\n                               IllegalAccessException", "description": "Produces a method handle giving read access to a non-static field.\n The type of the method handle will have a return type of the field's\n value type.\n The method handle's single argument will be the instance containing\n the field.\n Access checking is performed immediately on behalf of the lookup class."}, {"method_name": "findSetter", "method_sig": "public MethodHandle findSetter (Class<?> refc,\n                               String name,\n                               Class<?> type)\n                        throws NoSuchFieldException,\n                               IllegalAccessException", "description": "Produces a method handle giving write access to a non-static field.\n The type of the method handle will have a void return type.\n The method handle will take two arguments, the instance containing\n the field, and the value to be stored.\n The second argument will be of the field's value type.\n Access checking is performed immediately on behalf of the lookup class."}, {"method_name": "findVarHandle", "method_sig": "public VarHandle findVarHandle (Class<?> recv,\n                               String name,\n                               Class<?> type)\n                        throws NoSuchFieldException,\n                               IllegalAccessException", "description": "Produces a VarHandle giving access to a non-static field name\n of type type declared in a class of type recv.\n The VarHandle's variable type is type and it has one\n coordinate type, recv.\n \n Access checking is performed immediately on behalf of the lookup\n class.\n \n Certain access modes of the returned VarHandle are unsupported under\n the following conditions:\n \nif the field is declared final, then the write, atomic\n     update, numeric atomic update, and bitwise atomic update access\n     modes are unsupported.\n if the field type is anything other than byte,\n     short, char, int, long,\n     float, or double then numeric atomic update\n     access modes are unsupported.\n if the field type is anything other than boolean,\n     byte, short, char, int or\n     long then bitwise atomic update access modes are\n     unsupported.\n \n\n If the field is declared volatile then the returned VarHandle\n will override access to the field (effectively ignore the\n volatile declaration) in accordance to its specified\n access modes.\n \n If the field type is float or double then numeric\n and atomic update access modes compare values using their bitwise\n representation (see Float.floatToRawIntBits(float) and\n Double.doubleToRawLongBits(double), respectively)."}, {"method_name": "findStaticGetter", "method_sig": "public MethodHandle findStaticGetter (Class<?> refc,\n                                     String name,\n                                     Class<?> type)\n                              throws NoSuchFieldException,\n                                     IllegalAccessException", "description": "Produces a method handle giving read access to a static field.\n The type of the method handle will have a return type of the field's\n value type.\n The method handle will take no arguments.\n Access checking is performed immediately on behalf of the lookup class.\n \n If the returned method handle is invoked, the field's class will\n be initialized, if it has not already been initialized."}, {"method_name": "findStaticSetter", "method_sig": "public MethodHandle findStaticSetter (Class<?> refc,\n                                     String name,\n                                     Class<?> type)\n                              throws NoSuchFieldException,\n                                     IllegalAccessException", "description": "Produces a method handle giving write access to a static field.\n The type of the method handle will have a void return type.\n The method handle will take a single\n argument, of the field's value type, the value to be stored.\n Access checking is performed immediately on behalf of the lookup class.\n \n If the returned method handle is invoked, the field's class will\n be initialized, if it has not already been initialized."}, {"method_name": "findStaticVarHandle", "method_sig": "public VarHandle findStaticVarHandle (Class<?> decl,\n                                     String name,\n                                     Class<?> type)\n                              throws NoSuchFieldException,\n                                     IllegalAccessException", "description": "Produces a VarHandle giving access to a static field name of\n type type declared in a class of type decl.\n The VarHandle's variable type is type and it has no\n coordinate types.\n \n Access checking is performed immediately on behalf of the lookup\n class.\n \n If the returned VarHandle is operated on, the declaring class will be\n initialized, if it has not already been initialized.\n \n Certain access modes of the returned VarHandle are unsupported under\n the following conditions:\n \nif the field is declared final, then the write, atomic\n     update, numeric atomic update, and bitwise atomic update access\n     modes are unsupported.\n if the field type is anything other than byte,\n     short, char, int, long,\n     float, or double, then numeric atomic update\n     access modes are unsupported.\n if the field type is anything other than boolean,\n     byte, short, char, int or\n     long then bitwise atomic update access modes are\n     unsupported.\n \n\n If the field is declared volatile then the returned VarHandle\n will override access to the field (effectively ignore the\n volatile declaration) in accordance to its specified\n access modes.\n \n If the field type is float or double then numeric\n and atomic update access modes compare values using their bitwise\n representation (see Float.floatToRawIntBits(float) and\n Double.doubleToRawLongBits(double), respectively)."}, {"method_name": "bind", "method_sig": "public MethodHandle bind (Object receiver,\n                         String name,\n                         MethodType type)\n                  throws NoSuchMethodException,\n                         IllegalAccessException", "description": "Produces an early-bound method handle for a non-static method.\n The receiver must have a supertype defc in which a method\n of the given name and type is accessible to the lookup class.\n The method and all its argument types must be accessible to the lookup object.\n The type of the method handle will be that of the method,\n without any insertion of an additional receiver parameter.\n The given receiver will be bound into the method handle,\n so that every call to the method handle will invoke the\n requested method on the given receiver.\n \n The returned method handle will have\n variable arity if and only if\n the method's variable arity modifier bit (0x0080) is set\n and the trailing array argument is not the only argument.\n (If the trailing array argument is the only argument,\n the given receiver value will be bound to it.)\n \n This is almost equivalent to the following code, with some differences noted below:\n \nimport static java.lang.invoke.MethodHandles.*;\nimport static java.lang.invoke.MethodType.*;\n...\nMethodHandle mh0 = lookup().findVirtual(defc, name, type);\nMethodHandle mh1 = mh0.bindTo(receiver);\nmh1 = mh1.withVarargs(mh0.isVarargsCollector());\nreturn mh1;\n \n where defc is either receiver.getClass() or a super\n type of that class, in which the requested method is accessible\n to the lookup class.\n (Unlike bind, bindTo does not preserve variable arity.\n Also, bindTo may throw a ClassCastException in instances where bind would\n throw an IllegalAccessException, as in the case where the member is protected and\n the receiver is restricted by findVirtual to the lookup class.)"}, {"method_name": "unreflect", "method_sig": "public MethodHandle unreflect (Method m)\n                       throws IllegalAccessException", "description": "Makes a direct method handle\n to m, if the lookup class has permission.\n If m is non-static, the receiver argument is treated as an initial argument.\n If m is virtual, overriding is respected on every call.\n Unlike the Core Reflection API, exceptions are not wrapped.\n The type of the method handle will be that of the method,\n with the receiver type prepended (but only if it is non-static).\n If the method's accessible flag is not set,\n access checking is performed immediately on behalf of the lookup class.\n If m is not public, do not share the resulting handle with untrusted parties.\n \n The returned method handle will have\n variable arity if and only if\n the method's variable arity modifier bit (0x0080) is set.\n \n If m is static, and\n if the returned method handle is invoked, the method's class will\n be initialized, if it has not already been initialized."}, {"method_name": "unreflectSpecial", "method_sig": "public MethodHandle unreflectSpecial (Method m,\n                                     Class<?> specialCaller)\n                              throws IllegalAccessException", "description": "Produces a method handle for a reflected method.\n It will bypass checks for overriding methods on the receiver,\n as if called from an invokespecial\n instruction from within the explicitly specified specialCaller.\n The type of the method handle will be that of the method,\n with a suitably restricted receiver type prepended.\n (The receiver type will be specialCaller or a subtype.)\n If the method's accessible flag is not set,\n access checking is performed immediately on behalf of the lookup class,\n as if invokespecial instruction were being linked.\n \n Before method resolution,\n if the explicitly specified caller class is not identical with the\n lookup class, or if this lookup object does not have\n private access\n privileges, the access fails.\n \n The returned method handle will have\n variable arity if and only if\n the method's variable arity modifier bit (0x0080) is set."}, {"method_name": "unreflectConstructor", "method_sig": "public MethodHandle unreflectConstructor (Constructor<?> c)\n                                  throws IllegalAccessException", "description": "Produces a method handle for a reflected constructor.\n The type of the method handle will be that of the constructor,\n with the return type changed to the declaring class.\n The method handle will perform a newInstance operation,\n creating a new instance of the constructor's class on the\n arguments passed to the method handle.\n \n If the constructor's accessible flag is not set,\n access checking is performed immediately on behalf of the lookup class.\n \n The returned method handle will have\n variable arity if and only if\n the constructor's variable arity modifier bit (0x0080) is set.\n \n If the returned method handle is invoked, the constructor's class will\n be initialized, if it has not already been initialized."}, {"method_name": "unreflectGetter", "method_sig": "public MethodHandle unreflectGetter (Field f)\n                             throws IllegalAccessException", "description": "Produces a method handle giving read access to a reflected field.\n The type of the method handle will have a return type of the field's\n value type.\n If the field is static, the method handle will take no arguments.\n Otherwise, its single argument will be the instance containing\n the field.\n If the field's accessible flag is not set,\n access checking is performed immediately on behalf of the lookup class.\n \n If the field is static, and\n if the returned method handle is invoked, the field's class will\n be initialized, if it has not already been initialized."}, {"method_name": "unreflectSetter", "method_sig": "public MethodHandle unreflectSetter (Field f)\n                             throws IllegalAccessException", "description": "Produces a method handle giving write access to a reflected field.\n The type of the method handle will have a void return type.\n If the field is static, the method handle will take a single\n argument, of the field's value type, the value to be stored.\n Otherwise, the two arguments will be the instance containing\n the field, and the value to be stored.\n If the field's accessible flag is not set,\n access checking is performed immediately on behalf of the lookup class.\n \n If the field is static, and\n if the returned method handle is invoked, the field's class will\n be initialized, if it has not already been initialized."}, {"method_name": "unreflectVarHandle", "method_sig": "public VarHandle unreflectVarHandle (Field f)\n                             throws IllegalAccessException", "description": "Produces a VarHandle giving access to a reflected field f\n of type T declared in a class of type R.\n The VarHandle's variable type is T.\n If the field is non-static the VarHandle has one coordinate type,\n R.  Otherwise, the field is static, and the VarHandle has no\n coordinate types.\n \n Access checking is performed immediately on behalf of the lookup\n class, regardless of the value of the field's accessible\n flag.\n \n If the field is static, and if the returned VarHandle is operated\n on, the field's declaring class will be initialized, if it has not\n already been initialized.\n \n Certain access modes of the returned VarHandle are unsupported under\n the following conditions:\n \nif the field is declared final, then the write, atomic\n     update, numeric atomic update, and bitwise atomic update access\n     modes are unsupported.\n if the field type is anything other than byte,\n     short, char, int, long,\n     float, or double then numeric atomic update\n     access modes are unsupported.\n if the field type is anything other than boolean,\n     byte, short, char, int or\n     long then bitwise atomic update access modes are\n     unsupported.\n \n\n If the field is declared volatile then the returned VarHandle\n will override access to the field (effectively ignore the\n volatile declaration) in accordance to its specified\n access modes.\n \n If the field type is float or double then numeric\n and atomic update access modes compare values using their bitwise\n representation (see Float.floatToRawIntBits(float) and\n Double.doubleToRawLongBits(double), respectively)."}, {"method_name": "revealDirect", "method_sig": "public MethodHandleInfo revealDirect (MethodHandle target)", "description": "Cracks a direct method handle\n created by this lookup object or a similar one.\n Security and access checks are performed to ensure that this lookup object\n is capable of reproducing the target method handle.\n This means that the cracking may fail if target is a direct method handle\n but was created by an unrelated lookup object.\n This can happen if the method handle is caller sensitive\n and was created by a lookup object for a different class."}, {"method_name": "hasPrivateAccess", "method_sig": "public boolean hasPrivateAccess()", "description": "Returns true if this lookup has PRIVATE access."}]}