{"name": "Interface Attribute", "module": "java.naming", "package": "javax.naming.directory", "text": "This interface represents an attribute associated with a named object.\n\n In a directory, named objects can have associated with them\n attributes.  The Attribute interface represents an attribute associated\n with a named object.  An attribute contains 0 or more, possibly null, values.\n The attribute values can be ordered or unordered (see isOrdered()).\n If the values are unordered, no duplicates are allowed.\n If the values are ordered, duplicates are allowed.\n\n The content and representation of an attribute and its values is defined by\n the attribute's schema. The schema contains information\n about the attribute's syntax and other properties about the attribute.\n See getAttributeDefinition() and\n getAttributeSyntaxDefinition()\n for details regarding how to get schema information about an attribute\n if the underlying directory service supports schemas.\n\n Equality of two attributes is determined by the implementation class.\n A simple implementation can use Object.equals() to determine equality\n of attribute values, while a more sophisticated implementation might\n make use of schema information to determine equality.\n Similarly, one implementation might provide a static storage\n structure which simply returns the values passed to its\n constructor, while another implementation might define get() and\n getAll().\n to get the values dynamically from the directory.\n\n Note that updates to Attribute (such as adding or removing a\n value) do not affect the corresponding representation of the attribute\n in the directory.  Updates to the directory can only be effected\n using operations in the DirContext interface.", "codes": ["public interface Attribute\nextends Cloneable, Serializable"], "fields": [{"field_name": "serialVersionUID", "field_sig": "static final\u00a0long serialVersionUID", "description": "Use serialVersionUID from JNDI 1.1.1 for interoperability."}], "methods": [{"method_name": "getAll", "method_sig": "NamingEnumeration<?> getAll()\n                     throws NamingException", "description": "Retrieves an enumeration of the attribute's values.\n The behaviour of this enumeration is unspecified\n if the attribute's values are added, changed,\n or removed while the enumeration is in progress.\n If the attribute values are ordered, the enumeration's items\n will be ordered."}, {"method_name": "get", "method_sig": "Object get()\n    throws NamingException", "description": "Retrieves one of this attribute's values.\n If the attribute has more than one value and is unordered, any one of\n the values is returned.\n If the attribute has more than one value and is ordered, the\n first value is returned."}, {"method_name": "size", "method_sig": "int size()", "description": "Retrieves the number of values in this attribute."}, {"method_name": "getID", "method_sig": "String getID()", "description": "Retrieves the id of this attribute."}, {"method_name": "contains", "method_sig": "boolean contains (Object attrVal)", "description": "Determines whether a value is in the attribute.\n Equality is determined by the implementation, which may use\n Object.equals() or schema information to determine equality."}, {"method_name": "add", "method_sig": "boolean add (Object attrVal)", "description": "Adds a new value to the attribute.\n If the attribute values are unordered and\n attrVal is already in the attribute, this method does nothing.\n If the attribute values are ordered, attrVal is added to the end of\n the list of attribute values.\n\n Equality is determined by the implementation, which may use\n Object.equals() or schema information to determine equality."}, {"method_name": "remove", "method_sig": "boolean remove (Object attrval)", "description": "Removes a specified value from the attribute.\n If attrval is not in the attribute, this method does nothing.\n If the attribute values are ordered, the first occurrence of\n attrVal is removed and attribute values at indices greater\n than the removed\n value are shifted up towards the head of the list (and their indices\n decremented by one).\n\n Equality is determined by the implementation, which may use\n Object.equals() or schema information to determine equality."}, {"method_name": "clear", "method_sig": "void clear()", "description": "Removes all values from this attribute."}, {"method_name": "getAttributeSyntaxDefinition", "method_sig": "DirContext getAttributeSyntaxDefinition()\n                                 throws NamingException", "description": "Retrieves the syntax definition associated with the attribute.\n An attribute's syntax definition specifies the format\n of the attribute's value(s). Note that this is different from\n the attribute value's representation as a Java object. Syntax\n definition refers to the directory's notion of syntax.\n\n For example, even though a value might be\n a Java String object, its directory syntax might be \"Printable String\"\n or \"Telephone Number\". Or a value might be a byte array, and its\n directory syntax is \"JPEG\" or \"Certificate\".\n For example, if this attribute's syntax is \"JPEG\",\n this method would return the syntax definition for \"JPEG\".\n \n The information that you can retrieve from a syntax definition\n is directory-dependent.\n\n If an implementation does not support schemas, it should throw\n OperationNotSupportedException. If an implementation does support\n schemas, it should define this method to return the appropriate\n information."}, {"method_name": "getAttributeDefinition", "method_sig": "DirContext getAttributeDefinition()\n                           throws NamingException", "description": "Retrieves the attribute's schema definition.\n An attribute's schema definition contains information\n such as whether the attribute is multivalued or single-valued,\n the matching rules to use when comparing the attribute's values.\n\n The information that you can retrieve from an attribute definition\n is directory-dependent.\n\n\n If an implementation does not support schemas, it should throw\n OperationNotSupportedException. If an implementation does support\n schemas, it should define this method to return the appropriate\n information."}, {"method_name": "clone", "method_sig": "Object clone()", "description": "Makes a copy of the attribute.\n The copy contains the same attribute values as the original attribute:\n the attribute values are not themselves cloned.\n Changes to the copy will not affect the original and vice versa."}, {"method_name": "isOrdered", "method_sig": "boolean isOrdered()", "description": "Determines whether this attribute's values are ordered.\n If an attribute's values are ordered, duplicate values are allowed.\n If an attribute's values are unordered, they are presented\n in any order and there are no duplicate values."}, {"method_name": "get", "method_sig": "Object get (int ix)\n    throws NamingException", "description": "Retrieves the attribute value from the ordered list of attribute values.\n This method returns the value at the ix index of the list of\n attribute values.\n If the attribute values are unordered,\n this method returns the value that happens to be at that index."}, {"method_name": "remove", "method_sig": "Object remove (int ix)", "description": "Removes an attribute value from the ordered list of attribute values.\n This method removes the value at the ix index of the list of\n attribute values.\n If the attribute values are unordered,\n this method removes the value that happens to be at that index.\n Values located at indices greater than ix are shifted up towards\n the front of the list (and their indices decremented by one)."}, {"method_name": "add", "method_sig": "void add (int ix,\n         Object attrVal)", "description": "Adds an attribute value to the ordered list of attribute values.\n This method adds attrVal to the list of attribute values at\n index ix.\n Values located at indices at or greater than ix are\n shifted down towards the end of the list (and their indices incremented\n by one).\n If the attribute values are unordered and already have attrVal,\n IllegalStateException is thrown."}, {"method_name": "set", "method_sig": "Object set (int ix,\n           Object attrVal)", "description": "Sets an attribute value in the ordered list of attribute values.\n This method sets the value at the ix index of the list of\n attribute values to be attrVal. The old value is removed.\n If the attribute values are unordered,\n this method sets the value that happens to be at that index\n to attrVal, unless attrVal is already one of the values.\n In that case, IllegalStateException is thrown."}]}