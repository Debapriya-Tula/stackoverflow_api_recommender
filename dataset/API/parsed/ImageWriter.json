{"name": "Class ImageWriter", "module": "java.desktop", "package": "javax.imageio", "text": "An abstract superclass for encoding and writing images.  This class\n must be subclassed by classes that write out images in the context\n of the Java Image I/O framework.\n\n  ImageWriter objects are normally instantiated by\n the service provider class for the specific format.  Service\n provider classes are registered with the IIORegistry,\n which uses them for format recognition and presentation of\n available format readers and writers.", "codes": ["public abstract class ImageWriter\nextends Object\nimplements ImageTranscoder"], "fields": [{"field_name": "originatingProvider", "field_sig": "protected\u00a0ImageWriterSpi originatingProvider", "description": "The ImageWriterSpi that instantiated this object,\n or null if its identity is not known or none\n exists.  By default it is initialized to null."}, {"field_name": "output", "field_sig": "protected\u00a0Object output", "description": "The ImageOutputStream or other Object\n set by setOutput and retrieved by\n getOutput.  By default it is initialized to\n null."}, {"field_name": "availableLocales", "field_sig": "protected\u00a0Locale[] availableLocales", "description": "An array of Locales that may be used to localize\n warning messages and compression setting values, or\n null if localization is not supported.  By default\n it is initialized to null."}, {"field_name": "locale", "field_sig": "protected\u00a0Locale locale", "description": "The current Locale to be used for localization, or\n null if none has been set.  By default it is\n initialized to null."}, {"field_name": "warningListeners", "field_sig": "protected\u00a0List<IIOWriteWarningListener> warningListeners", "description": "A List of currently registered\n IIOWriteWarningListeners, initialized by default to\n null, which is synonymous with an empty\n List."}, {"field_name": "warningLocales", "field_sig": "protected\u00a0List<Locale> warningLocales", "description": "A List of Locales, one for each\n element of warningListeners, initialized by default\n null, which is synonymous with an empty\n List."}, {"field_name": "progressListeners", "field_sig": "protected\u00a0List<IIOWriteProgressListener> progressListeners", "description": "A List of currently registered\n IIOWriteProgressListeners, initialized by default\n null, which is synonymous with an empty\n List."}], "methods": [{"method_name": "getOriginatingProvider", "method_sig": "public ImageWriterSpi getOriginatingProvider()", "description": "Returns the ImageWriterSpi object that created\n this ImageWriter, or null if this\n object was not created through the IIORegistry.\n\n  The default implementation returns the value of the\n originatingProvider instance variable."}, {"method_name": "setOutput", "method_sig": "public void setOutput (Object output)", "description": "Sets the destination to the given\n ImageOutputStream or other Object.\n The destination is assumed to be ready to accept data, and will\n not be closed at the end of each write. This allows distributed\n imaging applications to transmit a series of images over a\n single network connection.  If output is\n null, any currently set output will be removed.\n\n  If output is an\n ImageOutputStream, calls to the\n write, writeToSequence, and\n prepareWriteEmpty/endWriteEmpty\n methods will preserve the existing contents of the stream.\n Other write methods, such as writeInsert,\n replaceStreamMetadata,\n replaceImageMetadata, replacePixels,\n prepareInsertEmpty/endInsertEmpty,\n and endWriteSequence, require the full contents\n of the stream to be readable and writable, and may alter any\n portion of the stream.\n\n  Use of a general Object other than an\n ImageOutputStream is intended for writers that\n interact directly with an output device or imaging protocol.\n The set of legal classes is advertised by the writer's service\n provider's getOutputTypes method; most writers\n will return a single-element array containing only\n ImageOutputStream.class to indicate that they\n accept only an ImageOutputStream.\n\n  The default implementation sets the output\n instance variable to the value of output after\n checking output against the set of classes\n advertised by the originating provider, if there is one."}, {"method_name": "getOutput", "method_sig": "public Object getOutput()", "description": "Returns the ImageOutputStream or other\n Object set by the most recent call to the\n setOutput method.  If no destination has been\n set, null is returned.\n\n  The default implementation returns the value of the\n output instance variable."}, {"method_name": "getAvailableLocales", "method_sig": "public Locale[] getAvailableLocales()", "description": "Returns an array of Locales that may be used to\n localize warning listeners and compression settings.  A return\n value of null indicates that localization is not\n supported.\n\n  The default implementation returns a clone of the\n availableLocales instance variable if it is\n non-null, or else returns null."}, {"method_name": "setLocale", "method_sig": "public void setLocale (Locale locale)", "description": "Sets the current Locale of this\n ImageWriter to the given value.  A value of\n null removes any previous setting, and indicates\n that the writer should localize as it sees fit.\n\n  The default implementation checks locale\n against the values returned by\n getAvailableLocales, and sets the\n locale instance variable if it is found.  If\n locale is null, the instance variable\n is set to null without any checking."}, {"method_name": "getLocale", "method_sig": "public Locale getLocale()", "description": "Returns the currently set Locale, or\n null if none has been set.\n\n  The default implementation returns the value of the\n locale instance variable."}, {"method_name": "getDefaultWriteParam", "method_sig": "public ImageWriteParam getDefaultWriteParam()", "description": "Returns a new ImageWriteParam object of the\n appropriate type for this file format containing default\n values, that is, those values that would be used\n if no ImageWriteParam object were specified.  This\n is useful as a starting point for tweaking just a few parameters\n and otherwise leaving the default settings alone.\n\n  The default implementation constructs and returns a new\n ImageWriteParam object that does not allow tiling,\n progressive encoding, or compression, and that will be\n localized for the current Locale (i.e.,\n what you would get by calling\n new ImageWriteParam(getLocale()).\n\n  Individual plug-ins may return an instance of\n ImageWriteParam with additional optional features\n enabled, or they may return an instance of a plug-in specific\n subclass of ImageWriteParam."}, {"method_name": "getDefaultStreamMetadata", "method_sig": "public abstract IIOMetadata getDefaultStreamMetadata (ImageWriteParam param)", "description": "Returns an IIOMetadata object containing default\n values for encoding a stream of images.  The contents of the\n object may be manipulated using either the XML tree structure\n returned by the IIOMetadata.getAsTree method, an\n IIOMetadataController object, or via plug-in\n specific interfaces, and the resulting data supplied to one of\n the write methods that take a stream metadata\n parameter.\n\n  An optional ImageWriteParam may be supplied\n for cases where it may affect the structure of the stream\n metadata.\n\n  If the supplied ImageWriteParam contains\n optional setting values not supported by this writer (e.g.\n progressive encoding or any format-specific settings), they\n will be ignored.\n\n  Writers that do not make use of stream metadata\n (e.g., writers for single-image formats) should return\n null."}, {"method_name": "getDefaultImageMetadata", "method_sig": "public abstract IIOMetadata getDefaultImageMetadata (ImageTypeSpecifier imageType,\n                                                    ImageWriteParam param)", "description": "Returns an IIOMetadata object containing default\n values for encoding an image of the given type.  The contents\n of the object may be manipulated using either the XML tree\n structure returned by the IIOMetadata.getAsTree\n method, an IIOMetadataController object, or via\n plug-in specific interfaces, and the resulting data supplied to\n one of the write methods that take a stream\n metadata parameter.\n\n  An optional ImageWriteParam may be supplied\n for cases where it may affect the structure of the image\n metadata.\n\n  If the supplied ImageWriteParam contains\n optional setting values not supported by this writer (e.g.\n progressive encoding or any format-specific settings), they\n will be ignored."}, {"method_name": "getNumThumbnailsSupported", "method_sig": "public int getNumThumbnailsSupported (ImageTypeSpecifier imageType,\n                                     ImageWriteParam param,\n                                     IIOMetadata streamMetadata,\n                                     IIOMetadata imageMetadata)", "description": "Returns the number of thumbnails supported by the format being\n written, given the image type and any additional write\n parameters and metadata objects that will be used during\n encoding.  A return value of -1 indicates that\n insufficient information is available.\n\n  An ImageWriteParam may optionally be supplied\n for cases where it may affect thumbnail handling.\n\n  If the supplied ImageWriteParam contains\n optional setting values not supported by this writer (e.g.\n progressive encoding or any format-specific settings), they\n will be ignored.\n\n  The default implementation returns 0."}, {"method_name": "getPreferredThumbnailSizes", "method_sig": "public Dimension[] getPreferredThumbnailSizes (ImageTypeSpecifier imageType,\n                                              ImageWriteParam param,\n                                              IIOMetadata streamMetadata,\n                                              IIOMetadata imageMetadata)", "description": "Returns an array of Dimensions indicating the\n legal size ranges for thumbnail images as they will be encoded\n in the output file or stream.  This information is merely\n advisory; the writer will resize any supplied thumbnails as\n necessary.\n\n  The information is returned as a set of pairs; the first\n element of a pair contains an (inclusive) minimum width and\n height, and the second element contains an (inclusive) maximum\n width and height.  Together, each pair defines a valid range of\n sizes.  To specify a fixed size, the same width and height will\n appear for both elements.  A return value of null\n indicates that the size is arbitrary or unknown.\n\n  An ImageWriteParam may optionally be supplied\n for cases where it may affect thumbnail handling.\n\n  If the supplied ImageWriteParam contains\n optional setting values not supported by this writer (e.g.\n progressive encoding or any format-specific settings), they\n will be ignored.\n\n  The default implementation returns null."}, {"method_name": "canWriteRasters", "method_sig": "public boolean canWriteRasters()", "description": "Returns true if the methods that take an\n IIOImage parameter are capable of dealing with a\n Raster (as opposed to RenderedImage)\n source image.  If this method returns false, then\n those methods will throw an\n UnsupportedOperationException if supplied with an\n IIOImage containing a Raster.\n\n  The default implementation returns false."}, {"method_name": "write", "method_sig": "public abstract void write (IIOMetadata streamMetadata,\n                           IIOImage image,\n                           ImageWriteParam param)\n                    throws IOException", "description": "Appends a complete image stream containing a single image and\n associated stream and image metadata and thumbnails to the\n output.  Any necessary header information is included.  If the\n output is an ImageOutputStream, its existing\n contents prior to the current seek position are not affected,\n and need not be readable or writable.\n\n  The output must have been set beforehand using the\n setOutput method.\n\n  Stream metadata may optionally be supplied; if it is\n null, default stream metadata will be used.\n\n  If canWriteRasters returns true,\n the IIOImage may contain a Raster\n source.  Otherwise, it must contain a\n RenderedImage source.\n\n  The supplied thumbnails will be resized if needed, and any\n thumbnails in excess of the supported number will be ignored.\n If the format requires additional thumbnails that are not\n provided, the writer should generate them internally.\n\n   An ImageWriteParam may\n optionally be supplied to control the writing process.  If\n param is null, a default write param\n will be used.\n\n  If the supplied ImageWriteParam contains\n optional setting values not supported by this writer (e.g.\n progressive encoding or any format-specific settings), they\n will be ignored."}, {"method_name": "write", "method_sig": "public void write (IIOImage image)\n           throws IOException", "description": "Appends a complete image stream containing a single image with\n default metadata and thumbnails to the output.  This method is\n a shorthand for write(null, image, null)."}, {"method_name": "write", "method_sig": "public void write (RenderedImage image)\n           throws IOException", "description": "Appends a complete image stream consisting of a single image\n with default metadata and thumbnails to the output.  This\n method is a shorthand for\n write(null, new IIOImage(image, null, null), null)."}, {"method_name": "canWriteSequence", "method_sig": "public boolean canWriteSequence()", "description": "Returns true if the writer is able to append an\n image to an image stream that already contains header\n information and possibly prior images.\n\n  If canWriteSequence returns false,\n writeToSequence and endWriteSequence\n will throw an UnsupportedOperationException.\n\n  The default implementation returns false."}, {"method_name": "prepareWriteSequence", "method_sig": "public void prepareWriteSequence (IIOMetadata streamMetadata)\n                          throws IOException", "description": "Prepares a stream to accept a series of subsequent\n writeToSequence calls, using the provided stream\n metadata object.  The metadata will be written to the stream if\n it should precede the image data.  If the argument is null,\n default stream metadata is used.\n\n  If the output is an ImageOutputStream, the existing\n contents of the output prior to the current seek position are\n flushed, and need not be readable or writable.  If the format\n requires that endWriteSequence be able to rewind to\n patch up the header information, such as for a sequence of images\n in a single TIFF file, then the metadata written by this method\n must remain in a writable portion of the stream.  Other formats\n may flush the stream after this method and after each image.\n\n  If canWriteSequence returns false,\n this method will throw an\n UnsupportedOperationException.\n\n  The output must have been set beforehand using either\n the setOutput method.\n\n  The default implementation throws an\n IllegalStateException if the output is\n null, and otherwise throws an\n UnsupportedOperationException."}, {"method_name": "writeToSequence", "method_sig": "public void writeToSequence (IIOImage image,\n                            ImageWriteParam param)\n                     throws IOException", "description": "Appends a single image and possibly associated metadata and\n thumbnails, to the output.  If the output is an\n ImageOutputStream, the existing contents of the\n output prior to the current seek position may be flushed, and\n need not be readable or writable, unless the plug-in needs to\n be able to patch up the header information when\n endWriteSequence is called (e.g. TIFF).\n\n  If canWriteSequence returns false,\n this method will throw an\n UnsupportedOperationException.\n\n  The output must have been set beforehand using\n the setOutput method.\n\n  prepareWriteSequence must have been called\n beforehand, or an IllegalStateException is thrown.\n\n  If canWriteRasters returns true,\n the IIOImage may contain a Raster\n source.  Otherwise, it must contain a\n RenderedImage source.\n\n  The supplied thumbnails will be resized if needed, and any\n thumbnails in excess of the supported number will be ignored.\n If the format requires additional thumbnails that are not\n provided, the writer will generate them internally.\n\n  An ImageWriteParam may optionally be supplied\n to control the writing process.  If param is\n null, a default write param will be used.\n\n  If the supplied ImageWriteParam contains\n optional setting values not supported by this writer (e.g.\n progressive encoding or any format-specific settings), they\n will be ignored.\n\n  The default implementation throws an\n IllegalStateException if the output is\n null, and otherwise throws an\n UnsupportedOperationException."}, {"method_name": "endWriteSequence", "method_sig": "public void endWriteSequence()\n                      throws IOException", "description": "Completes the writing of a sequence of images begun with\n prepareWriteSequence.  Any stream metadata that\n should come at the end of the sequence of images is written out,\n and any header information at the beginning of the sequence is\n patched up if necessary.  If the output is an\n ImageOutputStream, data through the stream metadata\n at the end of the sequence are flushed and need not be readable\n or writable.\n\n  If canWriteSequence returns false,\n this method will throw an\n UnsupportedOperationException.\n\n  The default implementation throws an\n IllegalStateException if the output is\n null, and otherwise throws an\n UnsupportedOperationException."}, {"method_name": "canReplaceStreamMetadata", "method_sig": "public boolean canReplaceStreamMetadata()\n                                 throws IOException", "description": "Returns true if it is possible to replace the\n stream metadata already present in the output.\n\n  The default implementation throws an\n IllegalStateException if the output is\n null, and otherwise returns false."}, {"method_name": "replaceStreamMetadata", "method_sig": "public void replaceStreamMetadata (IIOMetadata streamMetadata)\n                           throws IOException", "description": "Replaces the stream metadata in the output with new\n information.  If the output is an\n ImageOutputStream, the prior contents of the\n stream are examined and possibly edited to make room for the\n new data.  All of the prior contents of the output must be\n available for reading and writing.\n\n  If canReplaceStreamMetadata returns\n false, an\n UnsupportedOperationException will be thrown.\n\n  The default implementation throws an\n IllegalStateException if the output is\n null, and otherwise throws an\n UnsupportedOperationException."}, {"method_name": "canReplaceImageMetadata", "method_sig": "public boolean canReplaceImageMetadata (int imageIndex)\n                                throws IOException", "description": "Returns true if it is possible to replace the\n image metadata associated with an existing image with index\n imageIndex.  If this method returns\n false, a call to\n replaceImageMetadata(imageIndex) will throw an\n UnsupportedOperationException.\n\n  A writer that does not support any image metadata\n replacement may return false without performing\n bounds checking on the index.\n\n  The default implementation throws an\n IllegalStateException if the output is\n null, and otherwise returns false\n without checking the value of imageIndex."}, {"method_name": "replaceImageMetadata", "method_sig": "public void replaceImageMetadata (int imageIndex,\n                                 IIOMetadata imageMetadata)\n                          throws IOException", "description": "Replaces the image metadata associated with an existing image.\n\n  If canReplaceImageMetadata(imageIndex) returns\n false, an\n UnsupportedOperationException will be thrown.\n\n  The default implementation throws an\n IllegalStateException if the output is\n null, and otherwise throws an\n UnsupportedOperationException."}, {"method_name": "canInsertImage", "method_sig": "public boolean canInsertImage (int imageIndex)\n                       throws IOException", "description": "Returns true if the writer supports the insertion\n of a new image at the given index.  Existing images with\n indices greater than or equal to the insertion index will have\n their indices increased by 1.  A value for\n imageIndex of -1 may be used to\n signify an index one larger than the current largest index.\n\n  A writer that does not support any image insertion may\n return false without performing bounds checking on\n the index.\n\n  The default implementation throws an\n IllegalStateException if the output is\n null, and otherwise returns false\n without checking the value of imageIndex."}, {"method_name": "writeInsert", "method_sig": "public void writeInsert (int imageIndex,\n                        IIOImage image,\n                        ImageWriteParam param)\n                 throws IOException", "description": "Inserts a new image into an existing image stream.  Existing\n images with an index greater than imageIndex are\n preserved, and their indices are each increased by 1.  A value\n for imageIndex of -1 may be used to signify an\n index one larger than the previous largest index; that is, it\n will cause the image to be logically appended to the end of the\n sequence.  If the output is an ImageOutputStream,\n the entirety of the stream must be both readable and writeable.\n\n  If canInsertImage(imageIndex) returns\n false, an\n UnsupportedOperationException will be thrown.\n\n  An ImageWriteParam may optionally be supplied\n to control the writing process.  If param is\n null, a default write param will be used.\n\n  If the supplied ImageWriteParam contains\n optional setting values not supported by this writer (e.g.\n progressive encoding or any format-specific settings), they\n will be ignored.\n\n  The default implementation throws an\n IllegalStateException if the output is\n null, and otherwise throws an\n UnsupportedOperationException."}, {"method_name": "canRemoveImage", "method_sig": "public boolean canRemoveImage (int imageIndex)\n                       throws IOException", "description": "Returns true if the writer supports the removal\n of an existing image at the given index.  Existing images with\n indices greater than the insertion index will have\n their indices decreased by 1.\n\n  A writer that does not support any image removal may\n return false without performing bounds checking on\n the index.\n\n  The default implementation throws an\n IllegalStateException if the output is\n null, and otherwise returns false\n without checking the value of imageIndex."}, {"method_name": "removeImage", "method_sig": "public void removeImage (int imageIndex)\n                 throws IOException", "description": "Removes an image from the stream.\n\n  If canRemoveImage(imageIndex) returns false,\n an UnsupportedOperationException will be thrown.\n\n  The removal may or may not cause a reduction in the actual\n file size.\n\n  The default implementation throws an\n IllegalStateException if the output is\n null, and otherwise throws an\n UnsupportedOperationException."}, {"method_name": "canWriteEmpty", "method_sig": "public boolean canWriteEmpty()\n                      throws IOException", "description": "Returns true if the writer supports the writing of\n a complete image stream consisting of a single image with\n undefined pixel values and associated metadata and thumbnails\n to the output.  The pixel values may be defined by future\n calls to the replacePixels methods.  If the output\n is an ImageOutputStream, its existing contents\n prior to the current seek position are not affected, and need\n not be readable or writable.\n\n  The default implementation throws an\n IllegalStateException if the output is\n null, and otherwise returns false."}, {"method_name": "prepareWriteEmpty", "method_sig": "public void prepareWriteEmpty (IIOMetadata streamMetadata,\n                              ImageTypeSpecifier imageType,\n                              int width,\n                              int height,\n                              IIOMetadata imageMetadata,\n                              List<? extends BufferedImage> thumbnails,\n                              ImageWriteParam param)\n                       throws IOException", "description": "Begins the writing of a complete image stream, consisting of a\n single image with undefined pixel values and associated\n metadata and thumbnails, to the output.  The pixel values will\n be defined by future calls to the replacePixels\n methods.  If the output is an ImageOutputStream,\n its existing contents prior to the current seek position are\n not affected, and need not be readable or writable.\n\n  The writing is not complete until a call to\n endWriteEmpty occurs.  Calls to\n prepareReplacePixels, replacePixels,\n and endReplacePixels may occur between calls to\n prepareWriteEmpty and endWriteEmpty.\n However, calls to prepareWriteEmpty cannot be\n nested, and calls to prepareWriteEmpty and\n prepareInsertEmpty may not be interspersed.\n\n  If canWriteEmpty returns false,\n an UnsupportedOperationException will be thrown.\n\n  An ImageWriteParam may optionally be supplied\n to control the writing process.  If param is\n null, a default write param will be used.\n\n  If the supplied ImageWriteParam contains\n optional setting values not supported by this writer (e.g.\n progressive encoding or any format-specific settings), they\n will be ignored.\n\n  The default implementation throws an\n IllegalStateException if the output is\n null, and otherwise throws an\n UnsupportedOperationException."}, {"method_name": "endWriteEmpty", "method_sig": "public void endWriteEmpty()\n                   throws IOException", "description": "Completes the writing of a new image that was begun with a\n prior call to prepareWriteEmpty.\n\n  If canWriteEmpty() returns false,\n an UnsupportedOperationException will be thrown.\n\n  The default implementation throws an\n IllegalStateException if the output is\n null, and otherwise throws an\n UnsupportedOperationException."}, {"method_name": "canInsertEmpty", "method_sig": "public boolean canInsertEmpty (int imageIndex)\n                       throws IOException", "description": "Returns true if the writer supports the insertion\n of a new, empty image at the given index.  The pixel values of\n the image are undefined, and may be specified in pieces using\n the replacePixels methods.  Existing images with\n indices greater than or equal to the insertion index will have\n their indices increased by 1.  A value for\n imageIndex of -1 may be used to\n signify an index one larger than the current largest index.\n\n  A writer that does not support insertion of empty images\n may return false without performing bounds\n checking on the index.\n\n  The default implementation throws an\n IllegalStateException if the output is\n null, and otherwise returns false\n without checking the value of imageIndex."}, {"method_name": "prepareInsertEmpty", "method_sig": "public void prepareInsertEmpty (int imageIndex,\n                               ImageTypeSpecifier imageType,\n                               int width,\n                               int height,\n                               IIOMetadata imageMetadata,\n                               List<? extends BufferedImage> thumbnails,\n                               ImageWriteParam param)\n                        throws IOException", "description": "Begins the insertion of a new image with undefined pixel values\n into an existing image stream.  Existing images with an index\n greater than imageIndex are preserved, and their\n indices are each increased by 1.  A value for\n imageIndex of -1 may be used to signify an index\n one larger than the previous largest index; that is, it will\n cause the image to be logically appended to the end of the\n sequence.  If the output is an ImageOutputStream,\n the entirety of the stream must be both readable and writeable.\n\n  The image contents may be\n supplied later using the replacePixels method.\n The insertion is not complete until a call to\n endInsertEmpty occurs.  Calls to\n prepareReplacePixels, replacePixels,\n and endReplacePixels may occur between calls to\n prepareInsertEmpty and\n endInsertEmpty.  However, calls to\n prepareInsertEmpty cannot be nested, and calls to\n prepareWriteEmpty and\n prepareInsertEmpty may not be interspersed.\n\n  If canInsertEmpty(imageIndex) returns\n false, an\n UnsupportedOperationException will be thrown.\n\n  An ImageWriteParam may optionally be supplied\n to control the writing process.  If param is\n null, a default write param will be used.\n\n  If the supplied ImageWriteParam contains\n optional setting values not supported by this writer (e.g.\n progressive encoding or any format-specific settings), they\n will be ignored.\n\n  The default implementation throws an\n IllegalStateException if the output is\n null, and otherwise throws an\n UnsupportedOperationException."}, {"method_name": "endInsertEmpty", "method_sig": "public void endInsertEmpty()\n                    throws IOException", "description": "Completes the insertion of a new image that was begun with a\n prior call to prepareInsertEmpty.\n\n  The default implementation throws an\n IllegalStateException if the output is\n null, and otherwise throws an\n UnsupportedOperationException."}, {"method_name": "canReplacePixels", "method_sig": "public boolean canReplacePixels (int imageIndex)\n                         throws IOException", "description": "Returns true if the writer allows pixels of the\n given image to be replaced using the replacePixels\n methods.\n\n  A writer that does not support any pixel replacement may\n return false without performing bounds checking on\n the index.\n\n  The default implementation throws an\n IllegalStateException if the output is\n null, and otherwise returns false\n without checking the value of imageIndex."}, {"method_name": "prepareReplacePixels", "method_sig": "public void prepareReplacePixels (int imageIndex,\n                                 Rectangle region)\n                          throws IOException", "description": "Prepares the writer to handle a series of calls to the\n replacePixels methods.  The affected pixel area\n will be clipped against the supplied\n\n  If canReplacePixels returns\n false, and\n UnsupportedOperationException will be thrown.\n\n  The default implementation throws an\n IllegalStateException if the output is\n null, and otherwise throws an\n UnsupportedOperationException."}, {"method_name": "replacePixels", "method_sig": "public void replacePixels (RenderedImage image,\n                          ImageWriteParam param)\n                   throws IOException", "description": "Replaces a portion of an image already present in the output\n with a portion of the given image.  The image data must match,\n or be convertible to, the image layout of the existing image.\n\n  The destination region is specified in the\n param argument, and will be clipped to the image\n boundaries and the region supplied to\n prepareReplacePixels.  At least one pixel of the\n source must not be clipped, or an exception is thrown.\n\n  An ImageWriteParam may optionally be supplied\n to control the writing process.  If param is\n null, a default write param will be used.\n\n  If the supplied ImageWriteParam contains\n optional setting values not supported by this writer (e.g.\n progressive encoding or any format-specific settings), they\n will be ignored.\n\n  This method may only be called after a call to\n prepareReplacePixels, or else an\n IllegalStateException will be thrown.\n\n  The default implementation throws an\n IllegalStateException if the output is\n null, and otherwise throws an\n UnsupportedOperationException."}, {"method_name": "replacePixels", "method_sig": "public void replacePixels (Raster raster,\n                          ImageWriteParam param)\n                   throws IOException", "description": "Replaces a portion of an image already present in the output\n with a portion of the given Raster.  The image\n data must match, or be convertible to, the image layout of the\n existing image.\n\n  An ImageWriteParam may optionally be supplied\n to control the writing process.  If param is\n null, a default write param will be used.\n\n  The destination region is specified in the\n param argument, and will be clipped to the image\n boundaries and the region supplied to\n prepareReplacePixels.  At least one pixel of the\n source must not be clipped, or an exception is thrown.\n\n  If the supplied ImageWriteParam contains\n optional setting values not supported by this writer (e.g.\n progressive encoding or any format-specific settings), they\n will be ignored.\n\n  This method may only be called after a call to\n prepareReplacePixels, or else an\n IllegalStateException will be thrown.\n\n  The default implementation throws an\n IllegalStateException if the output is\n null, and otherwise throws an\n UnsupportedOperationException."}, {"method_name": "endReplacePixels", "method_sig": "public void endReplacePixels()\n                      throws IOException", "description": "Terminates a sequence of calls to replacePixels.\n\n  If canReplacePixels returns\n false, and\n UnsupportedOperationException will be thrown.\n\n  The default implementation throws an\n IllegalStateException if the output is\n null, and otherwise throws an\n UnsupportedOperationException."}, {"method_name": "abort", "method_sig": "public void abort()", "description": "Requests that any current write operation be aborted.  The\n contents of the output following the abort will be undefined.\n\n  Writers should call clearAbortRequest at the\n beginning of each write operation, and poll the value of\n abortRequested regularly during the write."}, {"method_name": "abortRequested", "method_sig": "protected boolean abortRequested()", "description": "Returns true if a request to abort the current\n write operation has been made since the writer was instantiated or\n clearAbortRequest was called."}, {"method_name": "clearAbortRequest", "method_sig": "protected void clearAbortRequest()", "description": "Clears any previous abort request.  After this method has been\n called, abortRequested will return\n false."}, {"method_name": "addIIOWriteWarningListener", "method_sig": "public void addIIOWriteWarningListener (IIOWriteWarningListener listener)", "description": "Adds an IIOWriteWarningListener to the list of\n registered warning listeners.  If listener is\n null, no exception will be thrown and no action\n will be taken.  Messages sent to the given listener will be\n localized, if possible, to match the current\n Locale.  If no Locale has been set,\n warning messages may be localized as the writer sees fit."}, {"method_name": "removeIIOWriteWarningListener", "method_sig": "public void removeIIOWriteWarningListener (IIOWriteWarningListener listener)", "description": "Removes an IIOWriteWarningListener from the list\n of registered warning listeners.  If the listener was not\n previously registered, or if listener is\n null, no exception will be thrown and no action\n will be taken."}, {"method_name": "removeAllIIOWriteWarningListeners", "method_sig": "public void removeAllIIOWriteWarningListeners()", "description": "Removes all currently registered\n IIOWriteWarningListener objects.\n\n  The default implementation sets the\n warningListeners and warningLocales\n instance variables to null."}, {"method_name": "addIIOWriteProgressListener", "method_sig": "public void addIIOWriteProgressListener (IIOWriteProgressListener listener)", "description": "Adds an IIOWriteProgressListener to the list of\n registered progress listeners.  If listener is\n null, no exception will be thrown and no action\n will be taken."}, {"method_name": "removeIIOWriteProgressListener", "method_sig": "public void removeIIOWriteProgressListener (IIOWriteProgressListener listener)", "description": "Removes an IIOWriteProgressListener from the list\n of registered progress listeners.  If the listener was not\n previously registered, or if listener is\n null, no exception will be thrown and no action\n will be taken."}, {"method_name": "removeAllIIOWriteProgressListeners", "method_sig": "public void removeAllIIOWriteProgressListeners()", "description": "Removes all currently registered\n IIOWriteProgressListener objects.\n\n  The default implementation sets the\n progressListeners instance variable to\n null."}, {"method_name": "processImageStarted", "method_sig": "protected void processImageStarted (int imageIndex)", "description": "Broadcasts the start of an image write to all registered\n IIOWriteProgressListeners by calling their\n imageStarted method.  Subclasses may use this\n method as a convenience."}, {"method_name": "processImageProgress", "method_sig": "protected void processImageProgress (float percentageDone)", "description": "Broadcasts the current percentage of image completion to all\n registered IIOWriteProgressListeners by calling\n their imageProgress method.  Subclasses may use\n this method as a convenience."}, {"method_name": "processImageComplete", "method_sig": "protected void processImageComplete()", "description": "Broadcasts the completion of an image write to all registered\n IIOWriteProgressListeners by calling their\n imageComplete method.  Subclasses may use this\n method as a convenience."}, {"method_name": "processThumbnailStarted", "method_sig": "protected void processThumbnailStarted (int imageIndex,\n                                       int thumbnailIndex)", "description": "Broadcasts the start of a thumbnail write to all registered\n IIOWriteProgressListeners by calling their\n thumbnailStarted method.  Subclasses may use this\n method as a convenience."}, {"method_name": "processThumbnailProgress", "method_sig": "protected void processThumbnailProgress (float percentageDone)", "description": "Broadcasts the current percentage of thumbnail completion to\n all registered IIOWriteProgressListeners by calling\n their thumbnailProgress method.  Subclasses may\n use this method as a convenience."}, {"method_name": "processThumbnailComplete", "method_sig": "protected void processThumbnailComplete()", "description": "Broadcasts the completion of a thumbnail write to all registered\n IIOWriteProgressListeners by calling their\n thumbnailComplete method.  Subclasses may use this\n method as a convenience."}, {"method_name": "processWriteAborted", "method_sig": "protected void processWriteAborted()", "description": "Broadcasts that the write has been aborted to all registered\n IIOWriteProgressListeners by calling their\n writeAborted method.  Subclasses may use this\n method as a convenience."}, {"method_name": "processWarningOccurred", "method_sig": "protected void processWarningOccurred (int imageIndex,\n                                      String warning)", "description": "Broadcasts a warning message to all registered\n IIOWriteWarningListeners by calling their\n warningOccurred method.  Subclasses may use this\n method as a convenience."}, {"method_name": "processWarningOccurred", "method_sig": "protected void processWarningOccurred (int imageIndex,\n                                      String baseName,\n                                      String keyword)", "description": "Broadcasts a localized warning message to all registered\n IIOWriteWarningListeners by calling their\n warningOccurred method with a string taken\n from a ResourceBundle.  Subclasses may use this\n method as a convenience."}, {"method_name": "reset", "method_sig": "public void reset()", "description": "Restores the ImageWriter to its initial state.\n\n  The default implementation calls\n setOutput(null), setLocale(null),\n removeAllIIOWriteWarningListeners(),\n removeAllIIOWriteProgressListeners(), and\n clearAbortRequest."}, {"method_name": "dispose", "method_sig": "public void dispose()", "description": "Allows any resources held by this object to be released.  The\n result of calling any other method (other than\n finalize) subsequent to a call to this method\n is undefined.\n\n It is important for applications to call this method when they\n know they will no longer be using this ImageWriter.\n Otherwise, the writer may continue to hold on to resources\n indefinitely.\n\n The default implementation of this method in the superclass does\n nothing.  Subclass implementations should ensure that all resources,\n especially native resources, are released."}]}