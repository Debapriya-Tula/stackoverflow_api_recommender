{"name": "Interface Scope", "module": "jdk.compiler", "package": "com.sun.source.tree", "text": "Interface for determining locally available program elements, such as\n local variables and imports.\n Upon creation, a Scope is associated with a given program position;\n for example, a tree node. This position may be used to\n infer an enclosing method and/or class.\n\n A Scope does not itself contain the details of the elements corresponding\n to the parameters, methods and fields of the methods and classes containing\n its position. However, these elements can be determined from the enclosing\n elements.\n\n Scopes may be contained in an enclosing scope. The outermost scope contains\n those elements available via \"star import\" declarations; the scope within that\n contains the top level elements of the compilation unit, including any named\n imports.", "codes": ["public interface Scope"], "fields": [], "methods": [{"method_name": "getEnclosingScope", "method_sig": "Scope getEnclosingScope()", "description": "Returns the enclosing scope."}, {"method_name": "getEnclosingClass", "method_sig": "TypeElement getEnclosingClass()", "description": "Returns the innermost type element containing the position of this scope."}, {"method_name": "getEnclosingMethod", "method_sig": "ExecutableElement getEnclosingMethod()", "description": "Returns the innermost executable element containing the position of this scope."}, {"method_name": "getLocalElements", "method_sig": "Iterable<? extends Element> getLocalElements()", "description": "Returns the elements directly contained in this scope."}]}