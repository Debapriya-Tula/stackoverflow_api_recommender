{"name": "Class IsoChronology", "module": "java.base", "package": "java.time.chrono", "text": "The ISO calendar system.\n \n This chronology defines the rules of the ISO calendar system.\n This calendar system is based on the ISO-8601 standard, which is the\n de facto world calendar.\n \n The fields are defined as follows:\n \nera - There are two eras, 'Current Era' (CE) and 'Before Current Era' (BCE).\n year-of-era - The year-of-era is the same as the proleptic-year for the current CE era.\n  For the BCE era before the ISO epoch the year increases from 1 upwards as time goes backwards.\n proleptic-year - The proleptic year is the same as the year-of-era for the\n  current era. For the previous era, years have zero, then negative values.\n month-of-year - There are 12 months in an ISO year, numbered from 1 to 12.\n day-of-month - There are between 28 and 31 days in each of the ISO month, numbered from 1 to 31.\n  Months 4, 6, 9 and 11 have 30 days, Months 1, 3, 5, 7, 8, 10 and 12 have 31 days.\n  Month 2 has 28 days, or 29 in a leap year.\n day-of-year - There are 365 days in a standard ISO year and 366 in a leap year.\n  The days are numbered from 1 to 365 or 1 to 366.\n leap-year - Leap years occur every 4 years, except where the year is divisble by 100 and not divisble by 400.\n ", "codes": ["public final class IsoChronology\nextends AbstractChronology\nimplements Serializable"], "fields": [{"field_name": "INSTANCE", "field_sig": "public static final\u00a0IsoChronology INSTANCE", "description": "Singleton instance of the ISO chronology."}], "methods": [{"method_name": "getId", "method_sig": "public String getId()", "description": "Gets the ID of the chronology - 'ISO'.\n \n The ID uniquely identifies the Chronology.\n It can be used to lookup the Chronology using Chronology.of(String)."}, {"method_name": "getCalendarType", "method_sig": "public String getCalendarType()", "description": "Gets the calendar type of the underlying calendar system - 'iso8601'.\n \n The calendar type is an identifier defined by the\n Unicode Locale Data Markup Language (LDML) specification.\n It can be used to lookup the Chronology using Chronology.of(String).\n It can also be used as part of a locale, accessible via\n Locale.getUnicodeLocaleType(String) with the key 'ca'."}, {"method_name": "date", "method_sig": "public LocalDate date (Era era,\n                      int yearOfEra,\n                      int month,\n                      int dayOfMonth)", "description": "Obtains an ISO local date from the era, year-of-era, month-of-year\n and day-of-month fields."}, {"method_name": "date", "method_sig": "public LocalDate date (int prolepticYear,\n                      int month,\n                      int dayOfMonth)", "description": "Obtains an ISO local date from the proleptic-year, month-of-year\n and day-of-month fields.\n \n This is equivalent to LocalDate.of(int, int, int)."}, {"method_name": "dateYearDay", "method_sig": "public LocalDate dateYearDay (Era era,\n                             int yearOfEra,\n                             int dayOfYear)", "description": "Obtains an ISO local date from the era, year-of-era and day-of-year fields."}, {"method_name": "dateYearDay", "method_sig": "public LocalDate dateYearDay (int prolepticYear,\n                             int dayOfYear)", "description": "Obtains an ISO local date from the proleptic-year and day-of-year fields.\n \n This is equivalent to LocalDate.ofYearDay(int, int)."}, {"method_name": "dateEpochDay", "method_sig": "public LocalDate dateEpochDay (long epochDay)", "description": "Obtains an ISO local date from the epoch-day.\n \n This is equivalent to LocalDate.ofEpochDay(long)."}, {"method_name": "date", "method_sig": "public LocalDate date (TemporalAccessor temporal)", "description": "Obtains an ISO local date from another date-time object.\n \n This is equivalent to LocalDate.from(TemporalAccessor)."}, {"method_name": "epochSecond", "method_sig": "public long epochSecond (int prolepticYear,\n                        int month,\n                        int dayOfMonth,\n                        int hour,\n                        int minute,\n                        int second,\n                        ZoneOffset zoneOffset)", "description": "Gets the number of seconds from the epoch of 1970-01-01T00:00:00Z.\n \n The number of seconds is calculated using the year,\n month, day-of-month, hour, minute, second, and zoneOffset."}, {"method_name": "localDateTime", "method_sig": "public LocalDateTime localDateTime (TemporalAccessor temporal)", "description": "Obtains an ISO local date-time from another date-time object.\n \n This is equivalent to LocalDateTime.from(TemporalAccessor)."}, {"method_name": "zonedDateTime", "method_sig": "public ZonedDateTime zonedDateTime (TemporalAccessor temporal)", "description": "Obtains an ISO zoned date-time from another date-time object.\n \n This is equivalent to ZonedDateTime.from(TemporalAccessor)."}, {"method_name": "zonedDateTime", "method_sig": "public ZonedDateTime zonedDateTime (Instant instant,\n                                   ZoneId zone)", "description": "Obtains an ISO zoned date-time in this chronology from an Instant.\n \n This is equivalent to ZonedDateTime.ofInstant(Instant, ZoneId)."}, {"method_name": "dateNow", "method_sig": "public LocalDate dateNow()", "description": "Obtains the current ISO local date from the system clock in the default time-zone.\n \n This will query the system clock in the default\n time-zone to obtain the current date.\n \n Using this method will prevent the ability to use an alternate clock for testing\n because the clock is hard-coded."}, {"method_name": "dateNow", "method_sig": "public LocalDate dateNow (ZoneId zone)", "description": "Obtains the current ISO local date from the system clock in the specified time-zone.\n \n This will query the system clock to obtain the current date.\n Specifying the time-zone avoids dependence on the default time-zone.\n \n Using this method will prevent the ability to use an alternate clock for testing\n because the clock is hard-coded."}, {"method_name": "dateNow", "method_sig": "public LocalDate dateNow (Clock clock)", "description": "Obtains the current ISO local date from the specified clock.\n \n This will query the specified clock to obtain the current date - today.\n Using this method allows the use of an alternate clock for testing.\n The alternate clock may be introduced using dependency injection."}, {"method_name": "isLeapYear", "method_sig": "public boolean isLeapYear (long prolepticYear)", "description": "Checks if the year is a leap year, according to the ISO proleptic\n calendar system rules.\n \n This method applies the current rules for leap years across the whole time-line.\n In general, a year is a leap year if it is divisible by four without\n remainder. However, years divisible by 100, are not leap years, with\n the exception of years divisible by 400 which are.\n \n For example, 1904 is a leap year it is divisible by 4.\n 1900 was not a leap year as it is divisible by 100, however 2000 was a\n leap year as it is divisible by 400.\n \n The calculation is proleptic - applying the same rules into the far future and far past.\n This is historically inaccurate, but is correct for the ISO-8601 standard."}, {"method_name": "resolveDate", "method_sig": "public LocalDate resolveDate (Map<TemporalField, Long> fieldValues,\n                             ResolverStyle resolverStyle)", "description": "Resolves parsed ChronoField values into a date during parsing.\n \n Most TemporalField implementations are resolved using the\n resolve method on the field. By contrast, the ChronoField class\n defines fields that only have meaning relative to the chronology.\n As such, ChronoField date fields are resolved here in the\n context of a specific chronology.\n \nChronoField instances on the ISO calendar system are resolved\n as follows.\n \nEPOCH_DAY - If present, this is converted to a LocalDate\n  and all other date fields are then cross-checked against the date.\n PROLEPTIC_MONTH - If present, then it is split into the\n  YEAR and MONTH_OF_YEAR. If the mode is strict or smart\n  then the field is validated.\n YEAR_OF_ERA and ERA - If both are present, then they\n  are combined to form a YEAR. In lenient mode, the YEAR_OF_ERA\n  range is not validated, in smart and strict mode it is. The ERA is\n  validated for range in all three modes. If only the YEAR_OF_ERA is\n  present, and the mode is smart or lenient, then the current era (CE/AD)\n  is assumed. In strict mode, no era is assumed and the YEAR_OF_ERA is\n  left untouched. If only the ERA is present, then it is left untouched.\n YEAR, MONTH_OF_YEAR and DAY_OF_MONTH -\n  If all three are present, then they are combined to form a LocalDate.\n  In all three modes, the YEAR is validated. If the mode is smart or strict,\n  then the month and day are validated, with the day validated from 1 to 31.\n  If the mode is lenient, then the date is combined in a manner equivalent to\n  creating a date on the first of January in the requested year, then adding\n  the difference in months, then the difference in days.\n  If the mode is smart, and the day-of-month is greater than the maximum for\n  the year-month, then the day-of-month is adjusted to the last day-of-month.\n  If the mode is strict, then the three fields must form a valid date.\n YEAR and DAY_OF_YEAR -\n  If both are present, then they are combined to form a LocalDate.\n  In all three modes, the YEAR is validated.\n  If the mode is lenient, then the date is combined in a manner equivalent to\n  creating a date on the first of January in the requested year, then adding\n  the difference in days.\n  If the mode is smart or strict, then the two fields must form a valid date.\n YEAR, MONTH_OF_YEAR, ALIGNED_WEEK_OF_MONTH and\n  ALIGNED_DAY_OF_WEEK_IN_MONTH -\n  If all four are present, then they are combined to form a LocalDate.\n  In all three modes, the YEAR is validated.\n  If the mode is lenient, then the date is combined in a manner equivalent to\n  creating a date on the first of January in the requested year, then adding\n  the difference in months, then the difference in weeks, then in days.\n  If the mode is smart or strict, then the all four fields are validated to\n  their outer ranges. The date is then combined in a manner equivalent to\n  creating a date on the first day of the requested year and month, then adding\n  the amount in weeks and days to reach their values. If the mode is strict,\n  the date is additionally validated to check that the day and week adjustment\n  did not change the month.\n YEAR, MONTH_OF_YEAR, ALIGNED_WEEK_OF_MONTH and\n  DAY_OF_WEEK - If all four are present, then they are combined to\n  form a LocalDate. The approach is the same as described above for\n  years, months and weeks in ALIGNED_DAY_OF_WEEK_IN_MONTH.\n  The day-of-week is adjusted as the next or same matching day-of-week once\n  the years, months and weeks have been handled.\n YEAR, ALIGNED_WEEK_OF_YEAR and ALIGNED_DAY_OF_WEEK_IN_YEAR -\n  If all three are present, then they are combined to form a LocalDate.\n  In all three modes, the YEAR is validated.\n  If the mode is lenient, then the date is combined in a manner equivalent to\n  creating a date on the first of January in the requested year, then adding\n  the difference in weeks, then in days.\n  If the mode is smart or strict, then the all three fields are validated to\n  their outer ranges. The date is then combined in a manner equivalent to\n  creating a date on the first day of the requested year, then adding\n  the amount in weeks and days to reach their values. If the mode is strict,\n  the date is additionally validated to check that the day and week adjustment\n  did not change the year.\n YEAR, ALIGNED_WEEK_OF_YEAR and DAY_OF_WEEK -\n  If all three are present, then they are combined to form a LocalDate.\n  The approach is the same as described above for years and weeks in\n  ALIGNED_DAY_OF_WEEK_IN_YEAR. The day-of-week is adjusted as the\n  next or same matching day-of-week once the years and weeks have been handled.\n "}, {"method_name": "period", "method_sig": "public Period period (int years,\n                     int months,\n                     int days)", "description": "Obtains a period for this chronology based on years, months and days.\n \n This returns a period tied to the ISO chronology using the specified\n years, months and days. See Period for further details."}]}