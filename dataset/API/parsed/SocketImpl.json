{"name": "Class SocketImpl", "module": "java.base", "package": "java.net", "text": "The abstract class SocketImpl is a common superclass\n of all classes that actually implement sockets. It is used to\n create both client and server sockets.\n \n A \"plain\" socket implements these methods exactly as\n described, without attempting to go through a firewall or proxy.", "codes": ["public abstract class SocketImpl\nextends Object\nimplements SocketOptions"], "fields": [{"field_name": "fd", "field_sig": "protected\u00a0FileDescriptor fd", "description": "The file descriptor object for this socket."}, {"field_name": "address", "field_sig": "protected\u00a0InetAddress address", "description": "The IP address of the remote end of this socket."}, {"field_name": "port", "field_sig": "protected\u00a0int port", "description": "The port number on the remote host to which this socket is connected."}, {"field_name": "localport", "field_sig": "protected\u00a0int localport", "description": "The local port number to which this socket is connected."}], "methods": [{"method_name": "create", "method_sig": "protected abstract void create (boolean stream)\n                        throws IOException", "description": "Creates either a stream or a datagram socket."}, {"method_name": "connect", "method_sig": "protected abstract void connect (String host,\n                                int port)\n                         throws IOException", "description": "Connects this socket to the specified port on the named host."}, {"method_name": "connect", "method_sig": "protected abstract void connect (InetAddress address,\n                                int port)\n                         throws IOException", "description": "Connects this socket to the specified port number on the specified host."}, {"method_name": "connect", "method_sig": "protected abstract void connect (SocketAddress address,\n                                int timeout)\n                         throws IOException", "description": "Connects this socket to the specified port number on the specified host.\n A timeout of zero is interpreted as an infinite timeout. The connection\n will then block until established or an error occurs."}, {"method_name": "bind", "method_sig": "protected abstract void bind (InetAddress host,\n                             int port)\n                      throws IOException", "description": "Binds this socket to the specified local IP address and port number."}, {"method_name": "listen", "method_sig": "protected abstract void listen (int backlog)\n                        throws IOException", "description": "Sets the maximum queue length for incoming connection indications\n (a request to connect) to the count argument. If a\n connection indication arrives when the queue is full, the\n connection is refused."}, {"method_name": "accept", "method_sig": "protected abstract void accept (SocketImpl s)\n                        throws IOException", "description": "Accepts a connection."}, {"method_name": "getInputStream", "method_sig": "protected abstract InputStream getInputStream()\n                                       throws IOException", "description": "Returns an input stream for this socket."}, {"method_name": "getOutputStream", "method_sig": "protected abstract OutputStream getOutputStream()\n                                         throws IOException", "description": "Returns an output stream for this socket."}, {"method_name": "available", "method_sig": "protected abstract int available()\n                          throws IOException", "description": "Returns the number of bytes that can be read from this socket\n without blocking."}, {"method_name": "close", "method_sig": "protected abstract void close()\n                       throws IOException", "description": "Closes this socket."}, {"method_name": "shutdownInput", "method_sig": "protected void shutdownInput()\n                      throws IOException", "description": "Places the input stream for this socket at \"end of stream\".\n Any data sent to this socket is acknowledged and then\n silently discarded.\n\n If you read from a socket input stream after invoking this method on the\n socket, the stream's available method will return 0, and its\n read methods will return -1 (end of stream)."}, {"method_name": "shutdownOutput", "method_sig": "protected void shutdownOutput()\n                       throws IOException", "description": "Disables the output stream for this socket.\n For a TCP socket, any previously written data will be sent\n followed by TCP's normal connection termination sequence.\n\n If you write to a socket output stream after invoking\n shutdownOutput() on the socket, the stream will throw\n an IOException."}, {"method_name": "getFileDescriptor", "method_sig": "protected FileDescriptor getFileDescriptor()", "description": "Returns the value of this socket's fd field."}, {"method_name": "getInetAddress", "method_sig": "protected InetAddress getInetAddress()", "description": "Returns the value of this socket's address field."}, {"method_name": "getPort", "method_sig": "protected int getPort()", "description": "Returns the value of this socket's port field."}, {"method_name": "supportsUrgentData", "method_sig": "protected boolean supportsUrgentData()", "description": "Returns whether or not this SocketImpl supports sending\n urgent data. By default, false is returned\n unless the method is overridden in a sub-class"}, {"method_name": "sendUrgentData", "method_sig": "protected abstract void sendUrgentData (int data)\n                                throws IOException", "description": "Send one byte of urgent data on the socket.\n The byte to be sent is the low eight bits of the parameter"}, {"method_name": "getLocalPort", "method_sig": "protected int getLocalPort()", "description": "Returns the value of this socket's localport field."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns the address and port of this socket as a String."}, {"method_name": "setPerformancePreferences", "method_sig": "protected void setPerformancePreferences (int connectionTime,\n                                         int latency,\n                                         int bandwidth)", "description": "Sets performance preferences for this socket.\n\n  Sockets use the TCP/IP protocol by default.  Some implementations\n may offer alternative protocols which have different performance\n characteristics than TCP/IP.  This method allows the application to\n express its own preferences as to how these tradeoffs should be made\n when the implementation chooses from the available protocols.\n\n  Performance preferences are described by three integers\n whose values indicate the relative importance of short connection time,\n low latency, and high bandwidth.  The absolute values of the integers\n are irrelevant; in order to choose a protocol the values are simply\n compared, with larger values indicating stronger preferences. Negative\n values represent a lower priority than positive values. If the\n application prefers short connection time over both low latency and high\n bandwidth, for example, then it could invoke this method with the values\n (1, 0, 0).  If the application prefers high bandwidth above low\n latency, and low latency above short connection time, then it could\n invoke this method with the values (0, 1, 2).\n\n By default, this method does nothing, unless it is overridden in\n a sub-class."}, {"method_name": "setOption", "method_sig": "protected <T> void setOption (SocketOption<T> name,\n                             T value)\n                      throws IOException", "description": "Called to set a socket option."}, {"method_name": "getOption", "method_sig": "protected <T> T getOption (SocketOption<T> name)\n                   throws IOException", "description": "Called to get a socket option."}, {"method_name": "supportedOptions", "method_sig": "protected Set<SocketOption<?>> supportedOptions()", "description": "Returns a set of SocketOptions supported by this impl\n and by this impl's socket (Socket or ServerSocket)"}]}