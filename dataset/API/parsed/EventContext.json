{"name": "Interface EventContext", "module": "java.naming", "package": "javax.naming.event", "text": "Contains methods for registering/deregistering listeners to be notified of\n events fired when objects named in a context changes.\n\nTarget\n The name parameter in the addNamingListener() methods is referred\n to as the target. The target, along with the scope, identify\n the object(s) that the listener is interested in.\n It is possible to register interest in a target that does not exist, but\n there might be limitations in the extent to which this can be\n supported by the service provider and underlying protocol/service.\n\n If a service only supports registration for existing\n targets, an attempt to register for a nonexistent target\n results in a NameNotFoundException being thrown as early as possible,\n preferably at the time addNamingListener() is called, or if that is\n not possible, the listener will receive the exception through the\n NamingExceptionEvent.\n\n Also, for service providers that only support registration for existing\n targets, when the target that a listener has registered for is\n subsequently removed from the namespace, the listener is notified\n via a NamingExceptionEvent (containing a\nNameNotFoundException).\n\n An application can use the method targetMustExist() to check\n whether an EventContext supports registration\n of nonexistent targets.\n\nEvent Source\n The EventContext instance on which you invoke the\n registration methods is the event source of the events that are\n (potentially) generated.\n The source is not necessarily the object named by the target.\n Only when the target is the empty name is the object named by the target\n the source.\n In other words, the target,\n along with the scope parameter, are used to identify\n the object(s) that the listener is interested in, but the event source\n is the EventContext instance with which the listener\n has registered.\n\n For example, suppose a listener makes the following registration:\n\n      NamespaceChangeListener listener = ...;\n      src.addNamingListener(\"x\", SUBTREE_SCOPE, listener);\n\n When an object named \"x/y\" is subsequently deleted, the corresponding\n NamingEvent (evt)  must contain:\n\n      evt.getEventContext() == src\n      evt.getOldBinding().getName().equals(\"x/y\")\n\n\n Furthermore, listener registration/deregistration is with\n the EventContext\ninstance, and not with the corresponding object in the namespace.\n If the program intends at some point to remove a listener, then it needs to\n keep a reference to the EventContext instance on\n which it invoked addNamingListener() (just as\n it needs to keep a reference to the listener in order to remove it\n later). It cannot expect to do a lookup() and get another instance of\n an EventContext on which to perform the deregistration.\nLifetime of Registration\n A registered listener becomes deregistered when:\n\nIt is removed using removeNamingListener().\nAn exception is thrown while collecting information about the events.\n  That is, when the listener receives a NamingExceptionEvent.\nContext.close() is invoked on the EventContext\n instance with which it has registered.\n \n Until that point, an EventContext instance that has outstanding\n listeners will continue to exist and be maintained by the service provider.\n\nListener Implementations\n The registration/deregistration methods accept an instance of\n NamingListener. There are subinterfaces of NamingListener\n for different of event types of NamingEvent.\n For example, the ObjectChangeListener\n interface is for the NamingEvent.OBJECT_CHANGED event type.\n To register interest in multiple event types, the listener implementation\n should implement multiple NamingListener subinterfaces and use a\n single invocation of addNamingListener().\n In addition to reducing the number of method calls and possibly the code size\n of the listeners, this allows some service providers to optimize the\n registration.\n\nThreading Issues\n\n Like Context instances in general, instances of\n EventContext are not guaranteed to be thread-safe.\n Care must be taken when multiple threads are accessing the same\n EventContext concurrently.\n See the\n package description\n for more information on threading issues.", "codes": ["public interface EventContext\nextends Context"], "fields": [{"field_name": "OBJECT_SCOPE", "field_sig": "static final\u00a0int OBJECT_SCOPE", "description": "Constant for expressing interest in events concerning the object named\n by the target.\n\n The value of this constant is 0."}, {"field_name": "ONELEVEL_SCOPE", "field_sig": "static final\u00a0int ONELEVEL_SCOPE", "description": "Constant for expressing interest in events concerning objects\n in the context named by the target,\n excluding the context named by the target.\n\n The value of this constant is 1."}, {"field_name": "SUBTREE_SCOPE", "field_sig": "static final\u00a0int SUBTREE_SCOPE", "description": "Constant for expressing interest in events concerning objects\n in the subtree of the object named by the target, including the object\n named by the target.\n\n The value of this constant is 2."}], "methods": [{"method_name": "addNamingListener", "method_sig": "void addNamingListener (Name target,\n                       int scope,\n                       NamingListener l)\n                throws NamingException", "description": "Adds a listener for receiving naming events fired\n when the object(s) identified by a target and scope changes.\n\n The event source of those events is this context. See the\n class description for a discussion on event source and target.\n See the descriptions of the constants OBJECT_SCOPE,\n ONELEVEL_SCOPE, and SUBTREE_SCOPE to see how\n scope affects the registration.\n\ntarget needs to name a context only when scope is\n ONELEVEL_SCOPE.\n target may name a non-context if scope is either\n OBJECT_SCOPE or SUBTREE_SCOPE.  Using\n SUBTREE_SCOPE for a non-context might be useful,\n for example, if the caller does not know in advance whether target\n is a context and just wants to register interest in the (possibly\n degenerate subtree) rooted at target.\n\n When the listener is notified of an event, the listener may\n in invoked in a thread other than the one in which\n addNamingListener() is executed.\n Care must be taken when multiple threads are accessing the same\n EventContext concurrently.\n See the\n package description\n for more information on threading issues."}, {"method_name": "addNamingListener", "method_sig": "void addNamingListener (String target,\n                       int scope,\n                       NamingListener l)\n                throws NamingException", "description": "Adds a listener for receiving naming events fired\n when the object named by the string target name and scope changes.\n\n See the overload that accepts a Name for details."}, {"method_name": "removeNamingListener", "method_sig": "void removeNamingListener (NamingListener l)\n                   throws NamingException", "description": "Removes a listener from receiving naming events fired\n by this EventContext.\n The listener may have registered more than once with this\n EventContext, perhaps with different target/scope arguments.\n After this method is invoked, the listener will no longer\n receive events with this EventContext instance\n as the event source (except for those events already in the process of\n being dispatched).\n If the listener was not, or is no longer, registered with\n this EventContext instance, this method does not do anything."}, {"method_name": "targetMustExist", "method_sig": "boolean targetMustExist()\n                 throws NamingException", "description": "Determines whether a listener can register interest in a target\n that does not exist."}]}