{"name": "Class JTree.DynamicUtilTreeNode", "module": "java.desktop", "package": "javax.swing", "text": "DynamicUtilTreeNode can wrap\n vectors/hashtables/arrays/strings and\n create the appropriate children tree nodes as necessary. It is\n dynamic in that it will only create the children as necessary.\n \nWarning:\n Serialized objects of this class will not be compatible with\n future Swing releases. The current serialization support is\n appropriate for short term storage or RMI between applications running\n the same version of Swing.  As of 1.4, support for long term storage\n of all JavaBeans\u2122\n has been added to the java.beans package.\n Please see XMLEncoder.", "codes": ["public static class JTree.DynamicUtilTreeNode\nextends DefaultMutableTreeNode"], "fields": [{"field_name": "hasChildren", "field_sig": "protected\u00a0boolean hasChildren", "description": "Does the this JTree have children?\n This property is currently not implemented."}, {"field_name": "childValue", "field_sig": "protected\u00a0Object childValue", "description": "Value to create children with."}, {"field_name": "loadedChildren", "field_sig": "protected\u00a0boolean loadedChildren", "description": "Have the children been loaded yet?"}], "methods": [{"method_name": "createChildren", "method_sig": "public static void createChildren (DefaultMutableTreeNode parent,\n                                  Object children)", "description": "Adds to parent all the children in children.\n If children is an array or vector all of its\n elements are added is children, otherwise if children\n is a hashtable all the key/value pairs are added in the order\n Enumeration returns them."}, {"method_name": "isLeaf", "method_sig": "public boolean isLeaf()", "description": "Returns true if this node allows children. Whether the node\n allows children depends on how it was created."}, {"method_name": "getChildCount", "method_sig": "public int getChildCount()", "description": "Returns the number of child nodes."}, {"method_name": "loadChildren", "method_sig": "protected void loadChildren()", "description": "Loads the children based on childValue.\n If childValue is a Vector\n or array each element is added as a child,\n if childValue is a Hashtable\n each key/value pair is added in the order that\n Enumeration returns the keys."}, {"method_name": "getChildAt", "method_sig": "public TreeNode getChildAt (int index)", "description": "Subclassed to load the children, if necessary."}, {"method_name": "children", "method_sig": "public Enumeration<TreeNode> children()", "description": "Subclassed to load the children, if necessary."}]}