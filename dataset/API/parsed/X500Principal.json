{"name": "Class X500Principal", "module": "java.base", "package": "javax.security.auth.x500", "text": " This class represents an X.500 Principal.\n X500Principals are represented by distinguished names such as\n \"CN=Duke, OU=JavaSoft, O=Sun Microsystems, C=US\".\n\n  This class can be instantiated by using a string representation\n of the distinguished name, or by using the ASN.1 DER encoded byte\n representation of the distinguished name.  The current specification\n for the string representation of a distinguished name is defined in\n RFC 2253: Lightweight\n Directory Access Protocol (v3): UTF-8 String Representation of\n Distinguished Names. This class, however, accepts string formats from\n both RFC 2253 and RFC 1779:\n A String Representation of Distinguished Names, and also recognizes\n attribute type keywords whose OIDs (Object Identifiers) are defined in\n RFC 5280: Internet X.509\n Public Key Infrastructure Certificate and CRL Profile.\n\n  The string representation for this X500Principal\n can be obtained by calling the getName methods.\n\n  Note that the getSubjectX500Principal and\n getIssuerX500Principal methods of\n X509Certificate return X500Principals representing the\n issuer and subject fields of the certificate.", "codes": ["public final class X500Principal\nextends Object\nimplements Principal, Serializable"], "fields": [{"field_name": "RFC1779", "field_sig": "public static final\u00a0String RFC1779", "description": "RFC 1779 String format of Distinguished Names."}, {"field_name": "RFC2253", "field_sig": "public static final\u00a0String RFC2253", "description": "RFC 2253 String format of Distinguished Names."}, {"field_name": "CANONICAL", "field_sig": "public static final\u00a0String CANONICAL", "description": "Canonical String format of Distinguished Names."}], "methods": [{"method_name": "getName", "method_sig": "public String getName()", "description": "Returns a string representation of the X.500 distinguished name using\n the format defined in RFC 2253.\n\n This method is equivalent to calling\n getName(X500Principal.RFC2253)."}, {"method_name": "getName", "method_sig": "public String getName (String format)", "description": "Returns a string representation of the X.500 distinguished name\n using the specified format. Valid values for the format are\n \"RFC1779\", \"RFC2253\", and \"CANONICAL\" (case insensitive).\n\n  If \"RFC1779\" is specified as the format,\n this method emits the attribute type keywords defined in\n RFC 1779 (CN, L, ST, O, OU, C, STREET).\n Any other attribute type is emitted as an OID.\n\n  If \"RFC2253\" is specified as the format,\n this method emits the attribute type keywords defined in\n RFC 2253 (CN, L, ST, O, OU, C, STREET, DC, UID).\n Any other attribute type is emitted as an OID.\n Under a strict reading, RFC 2253 only specifies a UTF-8 string\n representation. The String returned by this method is the\n Unicode string achieved by decoding this UTF-8 representation.\n\n  If \"CANONICAL\" is specified as the format,\n this method returns an RFC 2253 conformant string representation\n with the following additional canonicalizations:\n\n \n Leading zeros are removed from attribute types\n          that are encoded as dotted decimal OIDs\n  DirectoryString attribute values of type\n          PrintableString and UTF8String are not\n          output in hexadecimal format\n  DirectoryString attribute values of types\n          other than PrintableString and UTF8String\n          are output in hexadecimal format\n  Leading and trailing white space characters\n          are removed from non-hexadecimal attribute values\n          (unless the value consists entirely of white space characters)\n  Internal substrings of one or more white space characters are\n          converted to a single space in non-hexadecimal\n          attribute values\n  Relative Distinguished Names containing more than one\n          Attribute Value Assertion (AVA) are output in the\n          following order: an alphabetical ordering of AVAs\n          containing standard keywords, followed by a numeric\n          ordering of AVAs containing OID keywords.\n  The only characters in attribute values that are escaped are\n          those which section 2.4 of RFC 2253 states must be escaped\n          (they are escaped using a preceding backslash character)\n  The entire name is converted to upper case\n          using String.toUpperCase(Locale.US)\n The entire name is converted to lower case\n          using String.toLowerCase(Locale.US)\n The name is finally normalized using normalization form KD,\n          as described in the Unicode Standard and UAX #15\n \n Additional standard formats may be introduced in the future."}, {"method_name": "getName", "method_sig": "public String getName (String format,\n                      Map<String, String> oidMap)", "description": "Returns a string representation of the X.500 distinguished name\n using the specified format. Valid values for the format are\n \"RFC1779\" and \"RFC2253\" (case insensitive). \"CANONICAL\" is not\n permitted and an IllegalArgumentException will be thrown.\n\n This method returns Strings in the format as specified in\n getName(String) and also emits additional attribute type\n keywords for OIDs that have entries in the oidMap\n parameter. OID entries in the oidMap take precedence over the default\n OIDs recognized by getName(String).\n Improperly specified OIDs are ignored; however if an OID\n in the name maps to an improperly specified keyword, an\n IllegalArgumentException is thrown.\n\n  Additional standard formats may be introduced in the future.\n\n  Warning: additional attribute type keywords may not be recognized\n by other implementations; therefore do not use this method if\n you are unsure if these keywords will be recognized by other\n implementations."}, {"method_name": "getEncoded", "method_sig": "public byte[] getEncoded()", "description": "Returns the distinguished name in ASN.1 DER encoded form. The ASN.1\n notation for this structure is supplied in the documentation for\n X500Principal(byte[] name).\n\n Note that the byte array returned is cloned to protect against\n subsequent modifications."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Return a user-friendly string representation of this\n X500Principal."}, {"method_name": "equals", "method_sig": "public boolean equals (Object o)", "description": "Compares the specified Object with this\n X500Principal for equality.\n\n  Specifically, this method returns true if\n the Object o is an X500Principal\n and if the respective canonical string representations\n (obtained via the getName(X500Principal.CANONICAL) method)\n of this object and o are equal.\n\n  This implementation is compliant with the requirements of RFC 5280."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Return a hash code for this X500Principal.\n\n  The hash code is calculated via:\n getName(X500Principal.CANONICAL).hashCode()"}]}