{"name": "Class Image", "module": "java.desktop", "package": "java.awt", "text": "The abstract class Image is the superclass of all\n classes that represent graphical images. The image must be\n obtained in a platform-specific manner.", "codes": ["public abstract class Image\nextends Object"], "fields": [{"field_name": "accelerationPriority", "field_sig": "protected\u00a0float accelerationPriority", "description": "Priority for accelerating this image.  Subclasses are free to\n set different default priorities and applications are free to\n set the priority for specific images via the\n setAccelerationPriority(float) method."}, {"field_name": "UndefinedProperty", "field_sig": "public static final\u00a0Object UndefinedProperty", "description": "The UndefinedProperty object should be returned whenever a\n property which was not defined for a particular image is fetched."}, {"field_name": "SCALE_DEFAULT", "field_sig": "public static final\u00a0int SCALE_DEFAULT", "description": "Use the default image-scaling algorithm."}, {"field_name": "SCALE_FAST", "field_sig": "public static final\u00a0int SCALE_FAST", "description": "Choose an image-scaling algorithm that gives higher priority\n to scaling speed than smoothness of the scaled image."}, {"field_name": "SCALE_SMOOTH", "field_sig": "public static final\u00a0int SCALE_SMOOTH", "description": "Choose an image-scaling algorithm that gives higher priority\n to image smoothness than scaling speed."}, {"field_name": "SCALE_REPLICATE", "field_sig": "public static final\u00a0int SCALE_REPLICATE", "description": "Use the image scaling algorithm embodied in the\n ReplicateScaleFilter class.\n The Image object is free to substitute a different filter\n that performs the same algorithm yet integrates more efficiently\n into the imaging infrastructure supplied by the toolkit."}, {"field_name": "SCALE_AREA_AVERAGING", "field_sig": "public static final\u00a0int SCALE_AREA_AVERAGING", "description": "Use the Area Averaging image scaling algorithm.  The\n image object is free to substitute a different filter that\n performs the same algorithm yet integrates more efficiently\n into the image infrastructure supplied by the toolkit."}], "methods": [{"method_name": "getWidth", "method_sig": "public abstract int getWidth (ImageObserver observer)", "description": "Determines the width of the image. If the width is not yet known,\n this method returns -1 and the specified\n ImageObserver object is notified later."}, {"method_name": "getHeight", "method_sig": "public abstract int getHeight (ImageObserver observer)", "description": "Determines the height of the image. If the height is not yet known,\n this method returns -1 and the specified\n ImageObserver object is notified later."}, {"method_name": "getSource", "method_sig": "public abstract ImageProducer getSource()", "description": "Gets the object that produces the pixels for the image.\n This method is called by the image filtering classes and by\n methods that perform image conversion and scaling."}, {"method_name": "getGraphics", "method_sig": "public abstract Graphics getGraphics()", "description": "Creates a graphics context for drawing to an off-screen image.\n This method can only be called for off-screen images."}, {"method_name": "getProperty", "method_sig": "public abstract Object getProperty (String name,\n                                   ImageObserver observer)", "description": "Gets a property of this image by name.\n \n Individual property names are defined by the various image\n formats. If a property is not defined for a particular image, this\n method returns the UndefinedProperty object.\n \n If the properties for this image are not yet known, this method\n returns null, and the ImageObserver\n object is notified later.\n \n The property name \"comment\" should be used to store\n an optional comment which can be presented to the application as a\n description of the image, its source, or its author."}, {"method_name": "getScaledInstance", "method_sig": "public Image getScaledInstance (int width,\n                               int height,\n                               int hints)", "description": "Creates a scaled version of this image.\n A new Image object is returned which will render\n the image at the specified width and\n height by default.  The new Image object\n may be loaded asynchronously even if the original source image\n has already been loaded completely.\n\n \n\n If either width\n or height is a negative number then a value is\n substituted to maintain the aspect ratio of the original image\n dimensions. If both width and height\n are negative, then the original image dimensions are used."}, {"method_name": "flush", "method_sig": "public void flush()", "description": "Flushes all reconstructable resources being used by this Image object.\n This includes any pixel data that is being cached for rendering to\n the screen as well as any system resources that are being used\n to store data or pixels for the image if they can be recreated.\n The image is reset to a state similar to when it was first created\n so that if it is again rendered, the image data will have to be\n recreated or fetched again from its source.\n \n Examples of how this method affects specific types of Image object:\n \n\n BufferedImage objects leave the primary Raster which stores their\n pixels untouched, but flush any information cached about those\n pixels such as copies uploaded to the display hardware for\n accelerated blits.\n \n Image objects created by the Component methods which take a\n width and height leave their primary buffer of pixels untouched,\n but have all cached information released much like is done for\n BufferedImage objects.\n \n VolatileImage objects release all of their pixel resources\n including their primary copy which is typically stored on\n the display hardware where resources are scarce.\n These objects can later be restored using their\n validate\n method.\n \n Image objects created by the Toolkit and Component classes which are\n loaded from files, URLs or produced by an ImageProducer\n are unloaded and all local resources are released.\n These objects can later be reloaded from their original source\n as needed when they are rendered, just as when they were first\n created.\n "}, {"method_name": "getCapabilities", "method_sig": "public ImageCapabilities getCapabilities (GraphicsConfiguration gc)", "description": "Returns an ImageCapabilities object which can be\n inquired as to the capabilities of this\n Image on the specified GraphicsConfiguration.\n This allows programmers to find\n out more runtime information on the specific Image\n object that they have created.  For example, the user\n might create a BufferedImage but the system may have\n no video memory left for creating an image of that\n size on the given GraphicsConfiguration, so although the object\n may be acceleratable in general, it\n does not have that capability on this GraphicsConfiguration."}, {"method_name": "setAccelerationPriority", "method_sig": "public void setAccelerationPriority (float priority)", "description": "Sets a hint for this image about how important acceleration is.\n This priority hint is used to compare to the priorities of other\n Image objects when determining how to use scarce acceleration\n resources such as video memory.  When and if it is possible to\n accelerate this Image, if there are not enough resources available\n to provide that acceleration but enough can be freed up by\n de-accelerating some other image of lower priority, then that other\n Image may be de-accelerated in deference to this one.  Images\n that have the same priority take up resources on a first-come,\n first-served basis."}, {"method_name": "getAccelerationPriority", "method_sig": "public float getAccelerationPriority()", "description": "Returns the current value of the acceleration priority hint."}]}