{"name": "Interface ActiveEvent", "module": "java.desktop", "package": "java.awt", "text": "An interface for events that know how to dispatch themselves.\n By implementing this interface an event can be placed upon the event\n queue and its dispatch() method will be called when the event\n is dispatched, using the EventDispatchThread.\n \n This is a very useful mechanism for avoiding deadlocks. If\n a thread is executing in a critical section (i.e., it has entered\n one or more monitors), calling other synchronized code may\n cause deadlocks. To avoid the potential deadlocks, an\n ActiveEvent can be created to run the second section of\n code at later time. If there is contention on the monitor,\n the second thread will simply block until the first thread\n has finished its work and exited its monitors.\n \n For security reasons, it is often desirable to use an ActiveEvent\n to avoid calling untrusted code from a critical thread. For\n instance, peer implementations can use this facility to avoid\n making calls into user code from a system thread. Doing so avoids\n potential deadlocks and denial-of-service attacks.", "codes": ["public interface ActiveEvent"], "fields": [], "methods": [{"method_name": "dispatch", "method_sig": "void dispatch()", "description": "Dispatch the event to its target, listeners of the events source,\n or do whatever it is this event is supposed to do."}]}