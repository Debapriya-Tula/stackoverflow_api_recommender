{"name": "Interface SQLData", "module": "java.sql", "package": "java.sql", "text": "The interface used for the custom mapping of an SQL user-defined type (UDT) to\n a class in the Java programming language. The class object for a class\n implementing the SQLData interface will be entered in the\n appropriate Connection object's type map along with the SQL\n name of the UDT for which it is a custom mapping.\n \n Typically, a SQLData implementation\n will define a field for each attribute of an SQL structured type or a\n single field for an SQL DISTINCT type. When the UDT is\n retrieved from a data source with the ResultSet.getObject\n method, it will be mapped as an instance of this class.  A programmer\n can operate on this class instance just as on any other object in the\n Java programming language and then store any changes made to it by\n calling the PreparedStatement.setObject method,\n which will map it back to the SQL type.\n \n It is expected that the implementation of the class for a custom\n mapping will be done by a tool.  In a typical implementation, the\n programmer would simply supply the name of the SQL UDT, the name of\n the class to which it is being mapped, and the names of the fields to\n which each of the attributes of the UDT is to be mapped.  The tool will use\n this information to implement the SQLData.readSQL and\n SQLData.writeSQL methods.  The readSQL method\n calls the appropriate SQLInput methods to read\n each attribute from an SQLInput object, and the\n writeSQL method calls SQLOutput methods\n to write each attribute back to the data source via an\n SQLOutput object.\n \n An application programmer will not normally call SQLData methods\n directly, and the SQLInput and SQLOutput methods\n are called internally by SQLData methods, not by application code.", "codes": ["public interface SQLData"], "fields": [], "methods": [{"method_name": "getSQLTypeName", "method_sig": "String getSQLTypeName()\n               throws SQLException", "description": "Returns the fully-qualified\n name of the SQL user-defined type that this object represents.\n This method is called by the JDBC driver to get the name of the\n UDT instance that is being mapped to this instance of\n SQLData."}, {"method_name": "readSQL", "method_sig": "void readSQL (SQLInput stream,\n             String typeName)\n      throws SQLException", "description": "Populates this object with data read from the database.\n The implementation of the method must follow this protocol:\n \nIt must read each of the attributes or elements of the SQL\n type  from the given input stream.  This is done\n by calling a method of the input stream to read each\n item, in the order that they appear in the SQL definition\n of the type.\n The method readSQL then\n assigns the data to appropriate fields or\n elements (of this or other objects).\n Specifically, it must call the appropriate reader method\n (SQLInput.readString, SQLInput.readBigDecimal,\n and so on) method(s) to do the following:\n for a distinct type, read its single data element;\n for a structured type, read a value for each attribute of the SQL type.\n \n The JDBC driver initializes the input stream with a type map\n before calling this method, which is used by the appropriate\n SQLInput reader method on the stream."}, {"method_name": "writeSQL", "method_sig": "void writeSQL (SQLOutput stream)\n       throws SQLException", "description": "Writes this object to the given SQL data stream, converting it back to\n its SQL value in the data source.\n The implementation of the method must follow this protocol:\n It must write each of the attributes of the SQL type\n to the given output stream.  This is done by calling a\n method of the output stream to write each item, in the order that\n they appear in the SQL definition of the type.\n Specifically, it must call the appropriate SQLOutput writer\n method(s) (writeInt, writeString, and so on)\n to do the following: for a Distinct Type, write its single data element;\n for a Structured Type, write a value for each attribute of the SQL type."}]}