{"name": "Class PKIXRevocationChecker", "module": "java.base", "package": "java.security.cert", "text": "A PKIXCertPathChecker for checking the revocation status of\n certificates with the PKIX algorithm.\n\n A PKIXRevocationChecker checks the revocation status of\n certificates with the Online Certificate Status Protocol (OCSP) or\n Certificate Revocation Lists (CRLs). OCSP is described in RFC 2560 and\n is a network protocol for determining the status of a certificate. A CRL\n is a time-stamped list identifying revoked certificates, and RFC 5280\n describes an algorithm for determining the revocation status of certificates\n using CRLs.\n\n Each PKIXRevocationChecker must be able to check the revocation\n status of certificates with OCSP and CRLs. By default, OCSP is the\n preferred mechanism for checking revocation status, with CRLs as the\n fallback mechanism. However, this preference can be switched to CRLs with\n the PREFER_CRLS option. In addition, the fallback\n mechanism can be disabled with the NO_FALLBACK\n option.\n\n A PKIXRevocationChecker is obtained by calling the\n getRevocationChecker method\n of a PKIX CertPathValidator. Additional parameters and options\n specific to revocation can be set (by calling the\n setOcspResponder method for instance). The\n PKIXRevocationChecker is added to a PKIXParameters object\n using the addCertPathChecker\n or setCertPathCheckers method,\n and then the PKIXParameters is passed along with the CertPath\n to be validated to the validate method\n of a PKIX CertPathValidator. When supplying a revocation checker in\n this manner, it will be used to check revocation irrespective of the setting\n of the RevocationEnabled flag.\n Similarly, a PKIXRevocationChecker may be added to a\n PKIXBuilderParameters object for use with a PKIX\n CertPathBuilder.\n\n Note that when a PKIXRevocationChecker is added to\n PKIXParameters, it clones the PKIXRevocationChecker;\n thus any subsequent modifications to the PKIXRevocationChecker\n have no effect.\n\n Any parameter that is not set (or is set to null) will be set to\n the default value for that parameter.\n\n Concurrent Access\nUnless otherwise specified, the methods defined in this class are not\n thread-safe. Multiple threads that need to access a single object\n concurrently should synchronize amongst themselves and provide the\n necessary locking. Multiple threads each manipulating separate objects\n need not synchronize.", "codes": ["public abstract class PKIXRevocationChecker\nextends PKIXCertPathChecker"], "fields": [], "methods": [{"method_name": "setOcspResponder", "method_sig": "public void setOcspResponder (URI uri)", "description": "Sets the URI that identifies the location of the OCSP responder. This\n overrides the ocsp.responderURL security property and any\n responder specified in a certificate's Authority Information Access\n Extension, as defined in RFC 5280."}, {"method_name": "getOcspResponder", "method_sig": "public URI getOcspResponder()", "description": "Gets the URI that identifies the location of the OCSP responder. This\n overrides the ocsp.responderURL security property. If this\n parameter or the ocsp.responderURL property is not set, the\n location is determined from the certificate's Authority Information\n Access Extension, as defined in RFC 5280."}, {"method_name": "setOcspResponderCert", "method_sig": "public void setOcspResponderCert (X509Certificate cert)", "description": "Sets the OCSP responder's certificate. This overrides the\n ocsp.responderCertSubjectName,\n ocsp.responderCertIssuerName,\n and ocsp.responderCertSerialNumber security properties."}, {"method_name": "getOcspResponderCert", "method_sig": "public X509Certificate getOcspResponderCert()", "description": "Gets the OCSP responder's certificate. This overrides the\n ocsp.responderCertSubjectName,\n ocsp.responderCertIssuerName,\n and ocsp.responderCertSerialNumber security properties. If this\n parameter or the aforementioned properties are not set, then the\n responder's certificate is determined as specified in RFC 2560."}, {"method_name": "setOcspExtensions", "method_sig": "public void setOcspExtensions (List<Extension> extensions)", "description": "Sets the optional OCSP request extensions."}, {"method_name": "getOcspExtensions", "method_sig": "public List<Extension> getOcspExtensions()", "description": "Gets the optional OCSP request extensions."}, {"method_name": "setOcspResponses", "method_sig": "public void setOcspResponses (Map<X509Certificate, byte[]> responses)", "description": "Sets the OCSP responses. These responses are used to determine\n the revocation status of the specified certificates when OCSP is used."}, {"method_name": "getOcspResponses", "method_sig": "public Map<X509Certificate, byte[]> getOcspResponses()", "description": "Gets the OCSP responses. These responses are used to determine\n the revocation status of the specified certificates when OCSP is used."}, {"method_name": "setOptions", "method_sig": "public void setOptions (Set<PKIXRevocationChecker.Option> options)", "description": "Sets the revocation options."}, {"method_name": "getOptions", "method_sig": "public Set<PKIXRevocationChecker.Option> getOptions()", "description": "Gets the revocation options."}, {"method_name": "getSoftFailExceptions", "method_sig": "public abstract List<CertPathValidatorException> getSoftFailExceptions()", "description": "Returns a list containing the exceptions that are ignored by the\n revocation checker when the SOFT_FAIL option\n is set. The list is cleared each time init is called.\n The list is ordered in ascending order according to the certificate\n index returned by getIndex\n method of each entry.\n \n An implementation of PKIXRevocationChecker is responsible for\n adding the ignored exceptions to the list."}]}