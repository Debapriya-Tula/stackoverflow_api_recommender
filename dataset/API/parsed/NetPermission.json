{"name": "Class NetPermission", "module": "java.base", "package": "java.net", "text": "This class is for various network permissions.\n A NetPermission contains a name (also referred to as a \"target name\") but\n no actions list; you either have the named permission\n or you don't.\n \n The target name is the name of the network permission (see below). The naming\n convention follows the  hierarchical property naming convention.\n Also, an asterisk\n may appear at the end of the name, following a \".\", or by itself, to\n signify a wildcard match. For example: \"foo.*\" and \"*\" signify a wildcard\n match, while \"*foo\" and \"a*b\" do not.\n \n The following table lists all the possible NetPermission target names,\n and for each provides a description of what the permission allows\n and a discussion of the risks of granting code the permission.\n\n \nPermission target name, what the permission allows, and associated risks\n\n\nPermission Target Name\nWhat the Permission Allows\nRisks of Allowing this Permission\n\n\n\n\nallowHttpTrace\nThe ability to use the HTTP TRACE method in HttpURLConnection.\nMalicious code using HTTP TRACE could get access to security sensitive\n   information in the HTTP headers (such as cookies) that it might not\n   otherwise have access to.\n\n\ngetCookieHandler\nThe ability to get the cookie handler that processes highly\n   security sensitive cookie information for an Http session.\nMalicious code can get a cookie handler to obtain access to\n   highly security sensitive cookie information. Some web servers\n   use cookies to save user private information such as access\n   control information, or to track user browsing habit.\n\n\ngetNetworkInformation\nThe ability to retrieve all information about local network interfaces.\nMalicious code can read information about network hardware such as\n   MAC addresses, which could be used to construct local IPv6 addresses.\n\n\ngetProxySelector\nThe ability to get the proxy selector used to make decisions\n   on which proxies to use when making network connections.\nMalicious code can get a ProxySelector to discover proxy\n   hosts and ports on internal networks, which could then become\n   targets for attack.\n\n\ngetResponseCache\nThe ability to get the response cache that provides\n   access to a local response cache.\nMalicious code getting access to the local response cache\n   could access security sensitive information.\n\n\nrequestPasswordAuthentication\nThe ability\n   to ask the authenticator registered with the system for\n   a password\nMalicious code may steal this password.\n\n\nsetCookieHandler\nThe ability to set the cookie handler that processes highly\n   security sensitive cookie information for an Http session.\nMalicious code can set a cookie handler to obtain access to\n   highly security sensitive cookie information. Some web servers\n   use cookies to save user private information such as access\n   control information, or to track user browsing habit.\n\n\nsetDefaultAuthenticator\nThe ability to set the\n   way authentication information is retrieved when\n   a proxy or HTTP server asks for authentication\nMalicious\n   code can set an authenticator that monitors and steals user\n   authentication input as it retrieves the input from the user.\n\n\nsetProxySelector\nThe ability to set the proxy selector used to make decisions\n   on which proxies to use when making network connections.\nMalicious code can set a ProxySelector that directs network\n   traffic to an arbitrary network host.\n\n\nsetResponseCache\nThe ability to set the response cache that provides access to\n   a local response cache.\nMalicious code getting access to the local response cache\n   could access security sensitive information, or create false\n   entries in the response cache.\n\n\nspecifyStreamHandler\nThe ability\n   to specify a stream handler when constructing a URL\nMalicious code may create a URL with resources that it would\n   normally not have access to (like file:/foo/fum/), specifying a\n   stream handler that gets the actual bytes from someplace it does\n   have access to. Thus it might be able to trick the system into\n   creating a ProtectionDomain/CodeSource for a class even though\n   that class really didn't come from that location.\n\n\n", "codes": ["public final class NetPermission\nextends BasicPermission"], "fields": [], "methods": []}