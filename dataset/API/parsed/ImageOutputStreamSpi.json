{"name": "Class ImageOutputStreamSpi", "module": "java.desktop", "package": "javax.imageio.spi", "text": "The service provider interface (SPI) for\n ImageOutputStreams.  For more information on service\n provider interfaces, see the class comment for the\n IIORegistry class.\n\n  This interface allows arbitrary objects to be \"wrapped\" by\n instances of ImageOutputStream.  For example, a\n particular ImageOutputStreamSpi might allow a generic\n OutputStream to be used as a destination; another\n might output to a File or to a device such as a serial\n port.\n\n  By treating the creation of ImageOutputStreams as\n a pluggable service, it becomes possible to handle future output\n destinations without changing the API.  Also, high-performance\n implementations of ImageOutputStream (for example,\n native implementations for a particular platform) can be installed\n and used transparently by applications.", "codes": ["public abstract class ImageOutputStreamSpi\nextends IIOServiceProvider"], "fields": [{"field_name": "outputClass", "field_sig": "protected\u00a0Class<?> outputClass", "description": "A Class object indicating the legal object type\n for use by the createInputStreamInstance method."}], "methods": [{"method_name": "getOutputClass", "method_sig": "public Class<?> getOutputClass()", "description": "Returns a Class object representing the class or\n interface type that must be implemented by an output\n destination in order to be \"wrapped\" in an\n ImageOutputStream via the\n createOutputStreamInstance method.\n\n  Typical return values might include\n OutputStream.class or File.class, but\n any class may be used."}, {"method_name": "canUseCacheFile", "method_sig": "public boolean canUseCacheFile()", "description": "Returns true if the ImageOutputStream\n implementation associated with this service provider can\n optionally make use of a cache File for improved\n performance and/or memory footrprint.  If false,\n the value of the cacheFile argument to\n createOutputStreamInstance will be ignored.\n\n  The default implementation returns false."}, {"method_name": "needsCacheFile", "method_sig": "public boolean needsCacheFile()", "description": "Returns true if the ImageOutputStream\n implementation associated with this service provider requires\n the use of a cache File.\n\n  The default implementation returns false."}, {"method_name": "createOutputStreamInstance", "method_sig": "public abstract ImageOutputStream createOutputStreamInstance (Object output,\n                                                             boolean useCache,\n                                                             File cacheDir)\n                                                      throws IOException", "description": "Returns an instance of the ImageOutputStream\n implementation associated with this service provider.  If the\n use of a cache file is optional, the useCache\n parameter will be consulted.  Where a cache is required, or\n not applicable, the value of useCache will be ignored."}, {"method_name": "createOutputStreamInstance", "method_sig": "public ImageOutputStream createOutputStreamInstance (Object output)\n                                             throws IOException", "description": "Returns an instance of the ImageOutputStream\n implementation associated with this service provider.  A cache\n file will be created in the system-dependent default\n temporary-file directory, if needed."}]}