{"name": "Class CompositeType", "module": "java.management", "package": "javax.management.openmbean", "text": "The CompositeType class is the open type class\n whose instances describe the types of CompositeData values.", "codes": ["public class CompositeType\nextends OpenType<CompositeData>"], "fields": [], "methods": [{"method_name": "containsKey", "method_sig": "public boolean containsKey (String itemName)", "description": "Returns true if this CompositeType instance defines an item\n whose name is itemName."}, {"method_name": "getDescription", "method_sig": "public String getDescription (String itemName)", "description": "Returns the description of the item whose name is itemName,\n or null if this CompositeType instance does not define any item\n whose name is itemName."}, {"method_name": "getType", "method_sig": "public OpenType<?> getType (String itemName)", "description": "Returns the open type of the item whose name is itemName,\n or null if this CompositeType instance does not define any item\n whose name is itemName."}, {"method_name": "keySet", "method_sig": "public Set<String> keySet()", "description": "Returns an unmodifiable Set view of all the item names defined by this CompositeType instance.\n The set's iterator will return the item names in ascending order."}, {"method_name": "isValue", "method_sig": "public boolean isValue (Object obj)", "description": "Tests whether obj is a value which could be\n described by this CompositeType instance.\n\n If obj is null or is not an instance of\n javax.management.openmbean.CompositeData,\n isValue returns false.\nIf obj is an instance of\n javax.management.openmbean.CompositeData, then let\n ct be its CompositeType as returned by CompositeData.getCompositeType().  The result is true if\n this is assignable from ct.  This\n means that:\n\nthis.getTypeName() equals\n ct.getTypeName(), and\n there are no item names present in this that are\n not also present in ct, and\n for every item in this, its type is assignable from\n the type of the corresponding item in ct.\n \nA TabularType is assignable from another \n TabularType if they have the same typeName and index name list, and the\n row type of the first is\n assignable from the row type of the second.\n\n An ArrayType is assignable from another \n ArrayType if they have the same dimension; and both are primitive arrays or neither is;\n and the element\n type of the first is assignable from the element type of the\n second.\n\n In every other case, an OpenType is assignable from\n another OpenType only if they are equal.\nThese rules mean that extra items can be added to a \n CompositeData without making it invalid for a CompositeType\n that does not have those items."}, {"method_name": "equals", "method_sig": "public boolean equals (Object obj)", "description": "Compares the specified obj parameter with this CompositeType instance for equality.\n \n Two CompositeType instances are equal if and only if all of the following statements are true:\n \ntheir type names are equal\ntheir items' names and types are equal\n"}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Returns the hash code value for this CompositeType instance.\n \n The hash code of a CompositeType instance is the sum of the hash codes\n of all elements of information used in equals comparisons\n (ie: name, items names, items types).\n This ensures that  t1.equals(t2)  implies that  t1.hashCode()==t2.hashCode() \n for any two CompositeType instances t1 and t2,\n as required by the general contract of the method\n Object.hashCode().\n \n As CompositeType instances are immutable, the hash code for this instance is calculated once,\n on the first call to hashCode, and then the same value is returned for subsequent calls."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a string representation of this CompositeType instance.\n \n The string representation consists of\n the name of this class (ie javax.management.openmbean.CompositeType), the type name for this instance,\n and the list of the items names and types string representation of this instance.\n \n As CompositeType instances are immutable, the string representation for this instance is calculated once,\n on the first call to toString, and then the same value is returned for subsequent calls."}]}