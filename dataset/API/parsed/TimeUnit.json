{"name": "Enum TimeUnit", "module": "java.base", "package": "java.util.concurrent", "text": "A TimeUnit represents time durations at a given unit of\n granularity and provides utility methods to convert across units,\n and to perform timing and delay operations in these units.  A\n TimeUnit does not maintain time information, but only\n helps organize and use time representations that may be maintained\n separately across various contexts.  A nanosecond is defined as one\n thousandth of a microsecond, a microsecond as one thousandth of a\n millisecond, a millisecond as one thousandth of a second, a minute\n as sixty seconds, an hour as sixty minutes, and a day as twenty four\n hours.\n\n A TimeUnit is mainly used to inform time-based methods\n how a given timing parameter should be interpreted. For example,\n the following code will timeout in 50 milliseconds if the lock is not available:\n\n  \n Lock lock = ...;\n if (lock.tryLock(50L, TimeUnit.MILLISECONDS)) ...\n\n while this code will timeout in 50 seconds:\n  \n Lock lock = ...;\n if (lock.tryLock(50L, TimeUnit.SECONDS)) ...\n\n Note however, that there is no guarantee that a particular timeout\n implementation will be able to notice the passage of time at the\n same granularity as the given TimeUnit.", "codes": ["public enum TimeUnit\nextends Enum<TimeUnit>"], "fields": [], "methods": [{"method_name": "values", "method_sig": "public static TimeUnit[] values()", "description": "Returns an array containing the constants of this enum type, in\nthe order they are declared. This method may be used to iterate\nover the constants as follows:\n\nfor (TimeUnit c : TimeUnit.values())\n\u00a0   System.out.println(c);\n"}, {"method_name": "valueOf", "method_sig": "public static TimeUnit valueOf (String name)", "description": "Returns the enum constant of this type with the specified name.\nThe string must match exactly an identifier used to declare an\nenum constant in this type.  (Extraneous whitespace characters are \nnot permitted.)"}, {"method_name": "convert", "method_sig": "public long convert (long sourceDuration,\n                    TimeUnit sourceUnit)", "description": "Converts the given time duration in the given unit to this unit.\n Conversions from finer to coarser granularities truncate, so\n lose precision. For example, converting 999 milliseconds\n to seconds results in 0. Conversions from coarser to\n finer granularities with arguments that would numerically\n overflow saturate to Long.MIN_VALUE if negative or\n Long.MAX_VALUE if positive.\n\n For example, to convert 10 minutes to milliseconds, use:\n TimeUnit.MILLISECONDS.convert(10L, TimeUnit.MINUTES)"}, {"method_name": "convert", "method_sig": "public long convert (Duration duration)", "description": "Converts the given time duration to this unit.\n\n For any TimeUnit unit,\n unit.convert(Duration.ofNanos(n))\n is equivalent to\n unit.convert(n, NANOSECONDS), and\n unit.convert(Duration.of(n, unit.toChronoUnit()))\n is equivalent to n (in the absence of overflow)."}, {"method_name": "toNanos", "method_sig": "public long toNanos (long duration)", "description": "Equivalent to\n NANOSECONDS.convert(duration, this)."}, {"method_name": "toMicros", "method_sig": "public long toMicros (long duration)", "description": "Equivalent to\n MICROSECONDS.convert(duration, this)."}, {"method_name": "toMillis", "method_sig": "public long toMillis (long duration)", "description": "Equivalent to\n MILLISECONDS.convert(duration, this)."}, {"method_name": "toSeconds", "method_sig": "public long toSeconds (long duration)", "description": "Equivalent to\n SECONDS.convert(duration, this)."}, {"method_name": "toMinutes", "method_sig": "public long toMinutes (long duration)", "description": "Equivalent to\n MINUTES.convert(duration, this)."}, {"method_name": "toHours", "method_sig": "public long toHours (long duration)", "description": "Equivalent to\n HOURS.convert(duration, this)."}, {"method_name": "toDays", "method_sig": "public long toDays (long duration)", "description": "Equivalent to\n DAYS.convert(duration, this)."}, {"method_name": "timedWait", "method_sig": "public void timedWait (Object obj,\n                      long timeout)\n               throws InterruptedException", "description": "Performs a timed Object.wait\n using this time unit.\n This is a convenience method that converts timeout arguments\n into the form required by the Object.wait method.\n\n For example, you could implement a blocking poll method\n (see BlockingQueue.poll)\n using:\n\n  \n public E poll(long timeout, TimeUnit unit)\n     throws InterruptedException {\n   synchronized (lock) {\n     while (isEmpty()) {\n       unit.timedWait(lock, timeout);\n       ...\n     }\n   }\n }"}, {"method_name": "timedJoin", "method_sig": "public void timedJoin (Thread thread,\n                      long timeout)\n               throws InterruptedException", "description": "Performs a timed Thread.join\n using this time unit.\n This is a convenience method that converts time arguments into the\n form required by the Thread.join method."}, {"method_name": "sleep", "method_sig": "public void sleep (long timeout)\n           throws InterruptedException", "description": "Performs a Thread.sleep using\n this time unit.\n This is a convenience method that converts time arguments into the\n form required by the Thread.sleep method."}, {"method_name": "toChronoUnit", "method_sig": "public ChronoUnit toChronoUnit()", "description": "Converts this TimeUnit to the equivalent ChronoUnit."}, {"method_name": "of", "method_sig": "public static TimeUnit of (ChronoUnit chronoUnit)", "description": "Converts a ChronoUnit to the equivalent TimeUnit."}]}