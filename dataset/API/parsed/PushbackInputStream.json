{"name": "Class PushbackInputStream", "module": "java.base", "package": "java.io", "text": "A PushbackInputStream adds\n functionality to another input stream, namely\n the  ability to \"push back\" or \"unread\" bytes,\n by storing pushed-back bytes in an internal buffer.\n This is useful in situations where\n it is convenient for a fragment of code\n to read an indefinite number of data bytes\n that  are delimited by a particular byte\n value; after reading the terminating byte,\n the  code fragment can \"unread\" it, so that\n the next read operation on the input stream\n will reread the byte that was pushed back.\n For example, bytes representing the  characters\n constituting an identifier might be terminated\n by a byte representing an  operator character;\n a method whose job is to read just an identifier\n can read until it  sees the operator and\n then push the operator back to be re-read.", "codes": ["public class PushbackInputStream\nextends FilterInputStream"], "fields": [{"field_name": "buf", "field_sig": "protected\u00a0byte[] buf", "description": "The pushback buffer."}, {"field_name": "pos", "field_sig": "protected\u00a0int pos", "description": "The position within the pushback buffer from which the next byte will\n be read.  When the buffer is empty, pos is equal to\n buf.length; when the buffer is full, pos is\n equal to zero."}], "methods": [{"method_name": "read", "method_sig": "public int read()\n         throws IOException", "description": "Reads the next byte of data from this input stream. The value\n byte is returned as an int in the range\n 0 to 255. If no byte is available\n because the end of the stream has been reached, the value\n -1 is returned. This method blocks until input data\n is available, the end of the stream is detected, or an exception\n is thrown.\n\n  This method returns the most recently pushed-back byte, if there is\n one, and otherwise calls the read method of its underlying\n input stream and returns whatever value that method returns."}, {"method_name": "read", "method_sig": "public int read (byte[] b,\n                int off,\n                int len)\n         throws IOException", "description": "Reads up to len bytes of data from this input stream into\n an array of bytes.  This method first reads any pushed-back bytes; after\n that, if fewer than len bytes have been read then it\n reads from the underlying input stream. If len is not zero, the method\n blocks until at least 1 byte of input is available; otherwise, no\n bytes are read and 0 is returned."}, {"method_name": "unread", "method_sig": "public void unread (int b)\n            throws IOException", "description": "Pushes back a byte by copying it to the front of the pushback buffer.\n After this method returns, the next byte to be read will have the value\n (byte)b."}, {"method_name": "unread", "method_sig": "public void unread (byte[] b,\n                   int off,\n                   int len)\n            throws IOException", "description": "Pushes back a portion of an array of bytes by copying it to the front\n of the pushback buffer.  After this method returns, the next byte to be\n read will have the value b[off], the byte after that will\n have the value b[off+1], and so forth."}, {"method_name": "unread", "method_sig": "public void unread (byte[] b)\n            throws IOException", "description": "Pushes back an array of bytes by copying it to the front of the\n pushback buffer.  After this method returns, the next byte to be read\n will have the value b[0], the byte after that will have the\n value b[1], and so forth."}, {"method_name": "available", "method_sig": "public int available()\n              throws IOException", "description": "Returns an estimate of the number of bytes that can be read (or\n skipped over) from this input stream without blocking by the next\n invocation of a method for this input stream. The next invocation might be\n the same thread or another thread.  A single read or skip of this\n many bytes will not block, but may read or skip fewer bytes.\n\n  The method returns the sum of the number of bytes that have been\n pushed back and the value returned by available."}, {"method_name": "skip", "method_sig": "public long skip (long n)\n          throws IOException", "description": "Skips over and discards n bytes of data from this\n input stream. The skip method may, for a variety of\n reasons, end up skipping over some smaller number of bytes,\n possibly zero.  If n is negative, no bytes are skipped.\n\n  The skip method of PushbackInputStream\n first skips over the bytes in the pushback buffer, if any.  It then\n calls the skip method of the underlying input stream if\n more bytes need to be skipped.  The actual number of bytes skipped\n is returned."}, {"method_name": "markSupported", "method_sig": "public boolean markSupported()", "description": "Tests if this input stream supports the mark and\n reset methods, which it does not."}, {"method_name": "mark", "method_sig": "public void mark (int readlimit)", "description": "Marks the current position in this input stream.\n\n  The mark method of PushbackInputStream\n does nothing."}, {"method_name": "reset", "method_sig": "public void reset()\n           throws IOException", "description": "Repositions this stream to the position at the time the\n mark method was last called on this input stream.\n\n  The method reset for class\n PushbackInputStream does nothing except throw an\n IOException."}, {"method_name": "close", "method_sig": "public void close()\n           throws IOException", "description": "Closes this input stream and releases any system resources\n associated with the stream.\n Once the stream has been closed, further read(), unread(),\n available(), reset(), or skip() invocations will throw an IOException.\n Closing a previously closed stream has no effect."}]}