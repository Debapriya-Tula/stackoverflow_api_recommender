{"name": "Interface Locator", "module": "java.xml", "package": "org.xml.sax", "text": "Interface for associating a SAX event with a document location.\n\n \nThis module, both source code and documentation, is in the\n Public Domain, and comes with NO WARRANTY.\n See http://www.saxproject.org\n for further information.\n \nIf a SAX parser provides location information to the SAX\n application, it does so by implementing this interface and then\n passing an instance to the application using the content\n handler's setDocumentLocator method.  The application can use the\n object to obtain the location of any other SAX event\n in the XML source document.\nNote that the results returned by the object will be valid only\n during the scope of each callback method: the application\n will receive unpredictable results if it attempts to use the\n locator at any other time, or after parsing completes.\nSAX parsers are not required to supply a locator, but they are\n very strongly encouraged to do so.  If the parser supplies a\n locator, it must do so before reporting any other document events.\n If no locator has been set by the time the application receives\n the startDocument\n event, the application should assume that a locator is not\n available.", "codes": ["public interface Locator"], "fields": [], "methods": [{"method_name": "getPublicId", "method_sig": "String getPublicId()", "description": "Return the public identifier for the current document event.\n\n The return value is the public identifier of the document\n entity or of the external parsed entity in which the markup\n triggering the event appears."}, {"method_name": "getSystemId", "method_sig": "String getSystemId()", "description": "Return the system identifier for the current document event.\n\n The return value is the system identifier of the document\n entity or of the external parsed entity in which the markup\n triggering the event appears.\nIf the system identifier is a URL, the parser must resolve it\n fully before passing it to the application.  For example, a file\n name must always be provided as a file:... URL, and other\n kinds of relative URI are also resolved against their bases."}, {"method_name": "getLineNumber", "method_sig": "int getLineNumber()", "description": "Return the line number where the current document event ends.\n Lines are delimited by line ends, which are defined in\n the XML specification.\n\n Warning: The return value from the method\n is intended only as an approximation for the sake of diagnostics;\n it is not intended to provide sufficient information\n to edit the character content of the original XML document.\n In some cases, these \"line\" numbers match what would be displayed\n as columns, and in others they may not match the source text\n due to internal entity expansion.  \nThe return value is an approximation of the line number\n in the document entity or external parsed entity where the\n markup triggering the event appears.\nIf possible, the SAX driver should provide the line position\n of the first character after the text associated with the document\n event.  The first line is line 1."}, {"method_name": "getColumnNumber", "method_sig": "int getColumnNumber()", "description": "Return the column number where the current document event ends.\n This is one-based number of Java char values since\n the last line end.\n\n Warning: The return value from the method\n is intended only as an approximation for the sake of diagnostics;\n it is not intended to provide sufficient information\n to edit the character content of the original XML document.\n For example, when lines contain combining character sequences, wide\n characters, surrogate pairs, or bi-directional text, the value may\n not correspond to the column in a text editor's display. \nThe return value is an approximation of the column number\n in the document entity or external parsed entity where the\n markup triggering the event appears.\nIf possible, the SAX driver should provide the line position\n of the first character after the text associated with the document\n event.  The first column in each line is column 1."}]}