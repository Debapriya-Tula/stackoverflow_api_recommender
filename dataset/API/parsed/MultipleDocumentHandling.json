{"name": "Class MultipleDocumentHandling", "module": "java.desktop", "package": "javax.print.attribute.standard", "text": "Class MultipleDocumentHandling is a printing attribute class, an\n enumeration, that controls finishing operations and the placement of one or\n more print-stream pages into impressions and onto media sheets. When the\n value of the Copies attribute exceeds 1,\n MultipleDocumentHandling also controls the order in which the copies\n that result from processing the documents are produced. This attribute is\n relevant only for a multidoc print job consisting of two or more individual\n docs.\n \n Briefly, MultipleDocumentHandling determines the relationship between\n the multiple input (electronic) documents fed into a multidoc print job and\n the output (physical) document or documents produced by the multidoc print\n job.\n There are two possibilities:\n \nThe multiple input documents are combined into a single output\n   document. Finishing operations (Finishings), are\n   performed on this single output document. The Copies\n   attribute tells how many copies of this single output document to produce.\n   The MultipleDocumentHandling values SINGLE_DOCUMENT and\n   SINGLE_DOCUMENT_NEW_SHEET specify two variations of this\n   possibility.\n   The multiple input documents remain separate output documents.\n   Finishing operations (Finishings), are performed on each\n   output document separately. The Copies attribute tells how\n   many copies of each separate output document to produce. The\n   MultipleDocumentHandling values\n   SEPARATE_DOCUMENTS_UNCOLLATED_COPIES and\n   SEPARATE_DOCUMENTS_COLLATED_COPIES specify two variations of this\n   possibility.\n \n In the detailed explanations below, if \"a\" represents an instance of\n document data, then the result of processing the data in document \"a\"\n is a sequence of media sheets represented by \"a(*)\".\n \n The standard MultipleDocumentHandling values are:\n \nSINGLE_DOCUMENT. If a\n   print job has multiple documents -- say, the document data is called\n   a and b -- then the result of processing all the document\n   data (a and then b) must be treated as a single sequence of\n   media sheets for finishing operations; that is, finishing would be\n   performed on the concatenation of the sequences a(*),b(*). The\n   printer must not force the data in each document instance to be formatted\n   onto a new print-stream page, nor to start a new impression on a new media\n   sheet. If more than one copy is made, the ordering of the sets of media\n   sheets resulting from processing the document data must be\n   a(*),b(*),a(*),b(*),..., and the printer object must force each\n   copy (a(*),b(*)) to start on a new media sheet.\n   SEPARATE_DOCUMENTS_UNCOLLATED_COPIES. If a print job has multiple\n   documents -- say, the document data is called a and b --\n   then the result of processing the data in each document instance must be\n   treated as a single sequence of media sheets for finishing operations; that\n   is, the sets a(*) and b(*) would each be finished\n   separately. The printer must force each copy of the result of processing\n   the data in a single document to start on a new media sheet. If more than\n   one copy is made, the ordering of the sets of media sheets resulting from\n   processing the document data must be a(*),a(*),...,b(*),b(*)....\n   SEPARATE_DOCUMENTS_COLLATED_COPIES. If a print job has multiple\n   documents -- say, the document data is called a and b --\n   then the result of processing the data in each document instance must be\n   treated as a single sequence of media sheets for finishing operations; that\n   is, the sets a(*) and b(*) would each be finished\n   separately. The printer must force each copy of the result of processing\n   the data in a single document to start on a new media sheet. If more than\n   one copy is made, the ordering of the sets of media sheets resulting from\n   processing the document data must be a(*),b(*),a(*),b(*),....\n   SINGLE_DOCUMENT_NEW_SHEET. Same as SINGLE_DOCUMENT, except that the\n   printer must ensure that the first impression of each document instance in\n   the job is placed on a new media sheet. This value allows multiple\n   documents to be stapled together with a single staple where each document\n   starts on a new sheet.\n \n\nSINGLE_DOCUMENT is the same as\n SEPARATE_DOCUMENTS_COLLATED_COPIES with respect to ordering of\n print-stream pages, but not media sheet generation, since\n SINGLE_DOCUMENT will put the first page of the next document on the\n back side of a sheet if an odd number of pages have been produced so far for\n the job, while SEPARATE_DOCUMENTS_COLLATED_COPIES always forces the\n next document or document copy on to a new sheet.\n \n In addition, if a Finishings attribute of\n STAPLE is specified, then:\n \nWith SINGLE_DOCUMENT, documents a and b are\n   stapled together as a single document with no regard to new sheets.\n   With SINGLE_DOCUMENT_NEW_SHEET, documents a and\n   b are stapled together as a single document, but document b\n   starts on a new sheet.\n   With SEPARATE_DOCUMENTS_UNCOLLATED_COPIES and\n   SEPARATE_DOCUMENTS_COLLATED_COPIES, documents a and\n   b are stapled separately.\n \nNote: None of these values provide means to produce uncollated sheets\n within a document, i.e., where multiple copies of sheet n are produced\n before sheet n+1 of the same document. To specify that, see the\n SheetCollate attribute.\n \nIPP Compatibility: The category name returned by getName() is\n the IPP attribute name. The enumeration's integer value is the IPP enum\n value. The toString() method returns the IPP string representation of\n the attribute value.", "codes": ["public class MultipleDocumentHandling\nextends EnumSyntax\nimplements PrintRequestAttribute, PrintJobAttribute"], "fields": [{"field_name": "SINGLE_DOCUMENT", "field_sig": "public static final\u00a0MultipleDocumentHandling SINGLE_DOCUMENT", "description": "Single document -- see above for further information."}, {"field_name": "SEPARATE_DOCUMENTS_UNCOLLATED_COPIES", "field_sig": "public static final\u00a0MultipleDocumentHandling SEPARATE_DOCUMENTS_UNCOLLATED_COPIES", "description": "Separate documents uncollated copies -- see above for\n further information."}, {"field_name": "SEPARATE_DOCUMENTS_COLLATED_COPIES", "field_sig": "public static final\u00a0MultipleDocumentHandling SEPARATE_DOCUMENTS_COLLATED_COPIES", "description": "Separate documents collated copies -- see above for\n further information."}, {"field_name": "SINGLE_DOCUMENT_NEW_SHEET", "field_sig": "public static final\u00a0MultipleDocumentHandling SINGLE_DOCUMENT_NEW_SHEET", "description": "Single document new sheet -- see above for further\n information."}], "methods": [{"method_name": "getStringTable", "method_sig": "protected String[] getStringTable()", "description": "Returns the string table for class MultipleDocumentHandling."}, {"method_name": "getEnumValueTable", "method_sig": "protected EnumSyntax[] getEnumValueTable()", "description": "Returns the enumeration value table for class\n MultipleDocumentHandling."}, {"method_name": "getCategory", "method_sig": "public final Class<? extends Attribute> getCategory()", "description": "Get the printing attribute class which is to be used as the \"category\"\n for this printing attribute value.\n \n For class MultipleDocumentHandling and any vendor-defined\n subclasses, the category is class MultipleDocumentHandling\n itself."}, {"method_name": "getName", "method_sig": "public final String getName()", "description": "Get the name of the category of which this attribute value is an\n instance.\n \n For class MultipleDocumentHandling and any vendor-defined\n subclasses, the category name is \"multiple-document-handling\"."}]}