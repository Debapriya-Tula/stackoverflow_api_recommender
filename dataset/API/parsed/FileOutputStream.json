{"name": "Class FileOutputStream", "module": "java.base", "package": "java.io", "text": "A file output stream is an output stream for writing data to a\n File or to a FileDescriptor. Whether or not\n a file is available or may be created depends upon the underlying\n platform.  Some platforms, in particular, allow a file to be opened\n for writing by only one FileOutputStream (or other\n file-writing object) at a time.  In such situations the constructors in\n this class will fail if the file involved is already open.\n\n FileOutputStream is meant for writing streams of raw bytes\n such as image data. For writing streams of characters, consider using\n FileWriter.", "codes": ["public class FileOutputStream\nextends OutputStream"], "fields": [], "methods": [{"method_name": "write", "method_sig": "public void write (int b)\n           throws IOException", "description": "Writes the specified byte to this file output stream. Implements\n the write method of OutputStream."}, {"method_name": "write", "method_sig": "public void write (byte[] b)\n           throws IOException", "description": "Writes b.length bytes from the specified byte array\n to this file output stream."}, {"method_name": "write", "method_sig": "public void write (byte[] b,\n                  int off,\n                  int len)\n           throws IOException", "description": "Writes len bytes from the specified byte array\n starting at offset off to this file output stream."}, {"method_name": "close", "method_sig": "public void close()\n           throws IOException", "description": "Closes this file output stream and releases any system resources\n associated with this stream. This file output stream may no longer\n be used for writing bytes.\n\n  If this stream has an associated channel then the channel is closed\n as well."}, {"method_name": "getFD", "method_sig": "public final FileDescriptor getFD()\n                           throws IOException", "description": "Returns the file descriptor associated with this stream."}, {"method_name": "getChannel", "method_sig": "public FileChannel getChannel()", "description": "Returns the unique FileChannel\n object associated with this file output stream.\n\n  The initial position of the returned channel will be equal to the\n number of bytes written to the file so far unless this stream is in\n append mode, in which case it will be equal to the size of the file.\n Writing bytes to this stream will increment the channel's position\n accordingly.  Changing the channel's position, either explicitly or by\n writing, will change this stream's file position."}, {"method_name": "finalize", "method_sig": "@Deprecated(since=\"9\",\n            forRemoval=true)\nprotected void finalize()\n                 throws IOException", "description": "Cleans up the connection to the file, and ensures that the\n close() method of this file output stream is\n called when there are no more references to this stream.\n The finalize() method does not call close() directly."}]}