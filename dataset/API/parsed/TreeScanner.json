{"name": "Class TreeScanner<R,\u200bP>", "module": "jdk.compiler", "package": "com.sun.source.util", "text": "A TreeVisitor that visits all the child tree nodes.\n To visit nodes of a particular type, just override the\n corresponding visitXYZ method.\n Inside your method, call super.visitXYZ to visit descendant\n nodes.\n\n The default implementation of the visitXYZ methods will determine\n a result as follows:\n \nIf the node being visited has no children, the result will be null.\n If the node being visited has one child, the result will be the\n result of calling scan on that child. The child may be a simple node\n or itself a list of nodes.\n  If the node being visited has more than one child, the result will\n be determined by calling scan each child in turn, and then combining the\n result of each scan after the first with the cumulative result\n so far, as determined by the reduce(R, R) method. Each child may be either\n a simple node of a list of nodes. The default behavior of the reduce\n method is such that the result of the visitXYZ method will be the result of\n the last child scanned.\n \nHere is an example to count the number of identifier nodes in a tree:\n \n   class CountIdentifiers extends TreeScanner<Integer,Void> {\n      @Override\n      public Integer visitIdentifier(IdentifierTree node, Void p) {\n          return 1;\n      }\n      @Override\n      public Integer reduce(Integer r1, Integer r2) {\n          return (r1 == null ? 0 : r1) + (r2 == null ? 0 : r2);\n      }\n   }\n ", "codes": ["public class TreeScanner<R, P>\nextends Object\nimplements TreeVisitor<R, P>"], "fields": [], "methods": [{"method_name": "scan", "method_sig": "public R scan (Tree tree,\n              P p)", "description": "Scans a single node."}, {"method_name": "scan", "method_sig": "public R scan (Iterable<? extends Tree> nodes,\n              P p)", "description": "Scans a sequence of nodes."}, {"method_name": "reduce", "method_sig": "public R reduce (R r1,\n                R r2)", "description": "Reduces two results into a combined result.\n The default implementation is to return the first parameter.\n The general contract of the method is that it may take any action whatsoever."}, {"method_name": "visitCompilationUnit", "method_sig": "public R visitCompilationUnit (CompilationUnitTree node,\n                              P p)", "description": "Visits a CompilationUnitTree node. This implementation scans the children in left to right order."}, {"method_name": "visitPackage", "method_sig": "public R visitPackage (PackageTree node,\n                      P p)", "description": "Visits a PackageTree node. This implementation scans the children in left to right order."}, {"method_name": "visitImport", "method_sig": "public R visitImport (ImportTree node,\n                     P p)", "description": "Visits an ImportTree node. This implementation scans the children in left to right order."}, {"method_name": "visitClass", "method_sig": "public R visitClass (ClassTree node,\n                    P p)", "description": "Visits a ClassTree node. This implementation scans the children in left to right order."}, {"method_name": "visitMethod", "method_sig": "public R visitMethod (MethodTree node,\n                     P p)", "description": "Visits a MethodTree node. This implementation scans the children in left to right order."}, {"method_name": "visitVariable", "method_sig": "public R visitVariable (VariableTree node,\n                       P p)", "description": "Visits a VariableTree node. This implementation scans the children in left to right order."}, {"method_name": "visitEmptyStatement", "method_sig": "public R visitEmptyStatement (EmptyStatementTree node,\n                             P p)", "description": "Visits an EmptyStatementTree node. This implementation returns null."}, {"method_name": "visitBlock", "method_sig": "public R visitBlock (BlockTree node,\n                    P p)", "description": "Visits a BlockTree node. This implementation scans the children in left to right order."}, {"method_name": "visitDoWhileLoop", "method_sig": "public R visitDoWhileLoop (DoWhileLoopTree node,\n                          P p)", "description": "Visits a DoWhileTree node. This implementation scans the children in left to right order."}, {"method_name": "visitWhileLoop", "method_sig": "public R visitWhileLoop (WhileLoopTree node,\n                        P p)", "description": "Visits a WhileLoopTree node. This implementation scans the children in left to right order."}, {"method_name": "visitForLoop", "method_sig": "public R visitForLoop (ForLoopTree node,\n                      P p)", "description": "Visits a ForLoopTree node. This implementation scans the children in left to right order."}, {"method_name": "visitEnhancedForLoop", "method_sig": "public R visitEnhancedForLoop (EnhancedForLoopTree node,\n                              P p)", "description": "Visits an EnhancedForLoopTree node. This implementation scans the children in left to right order."}, {"method_name": "visitLabeledStatement", "method_sig": "public R visitLabeledStatement (LabeledStatementTree node,\n                               P p)", "description": "Visits a LabeledStatementTree node. This implementation scans the children in left to right order."}, {"method_name": "visitSwitch", "method_sig": "public R visitSwitch (SwitchTree node,\n                     P p)", "description": "Visits a SwitchTree node. This implementation scans the children in left to right order."}, {"method_name": "visitCase", "method_sig": "public R visitCase (CaseTree node,\n                   P p)", "description": "Visits a CaseTree node. This implementation scans the children in left to right order."}, {"method_name": "visitSynchronized", "method_sig": "public R visitSynchronized (SynchronizedTree node,\n                           P p)", "description": "Visits a SynchronizedTree node. This implementation scans the children in left to right order."}, {"method_name": "visitTry", "method_sig": "public R visitTry (TryTree node,\n                  P p)", "description": "Visits a TryTree node. This implementation scans the children in left to right order."}, {"method_name": "visitCatch", "method_sig": "public R visitCatch (CatchTree node,\n                    P p)", "description": "Visits a CatchTree node. This implementation scans the children in left to right order."}, {"method_name": "visitConditionalExpression", "method_sig": "public R visitConditionalExpression (ConditionalExpressionTree node,\n                                    P p)", "description": "Visits a ConditionalExpressionTree node. This implementation scans the children in left to right order."}, {"method_name": "visitIf", "method_sig": "public R visitIf (IfTree node,\n                 P p)", "description": "Visits an IfTree node. This implementation scans the children in left to right order."}, {"method_name": "visitExpressionStatement", "method_sig": "public R visitExpressionStatement (ExpressionStatementTree node,\n                                  P p)", "description": "Visits an ExpressionStatementTree node. This implementation scans the children in left to right order."}, {"method_name": "visitBreak", "method_sig": "public R visitBreak (BreakTree node,\n                    P p)", "description": "Visits a BreakTree node. This implementation returns null."}, {"method_name": "visitContinue", "method_sig": "public R visitContinue (ContinueTree node,\n                       P p)", "description": "Visits a ContinueTree node. This implementation returns null."}, {"method_name": "visitReturn", "method_sig": "public R visitReturn (ReturnTree node,\n                     P p)", "description": "Visits a ReturnTree node. This implementation scans the children in left to right order."}, {"method_name": "visitThrow", "method_sig": "public R visitThrow (ThrowTree node,\n                    P p)", "description": "Visits a ThrowTree node. This implementation scans the children in left to right order."}, {"method_name": "visitAssert", "method_sig": "public R visitAssert (AssertTree node,\n                     P p)", "description": "Visits an AssertTree node. This implementation scans the children in left to right order."}, {"method_name": "visitMethodInvocation", "method_sig": "public R visitMethodInvocation (MethodInvocationTree node,\n                               P p)", "description": "Visits a MethodInvocationTree node. This implementation scans the children in left to right order."}, {"method_name": "visitNewClass", "method_sig": "public R visitNewClass (NewClassTree node,\n                       P p)", "description": "Visits a NewClassTree node. This implementation scans the children in left to right order."}, {"method_name": "visitNewArray", "method_sig": "public R visitNewArray (NewArrayTree node,\n                       P p)", "description": "Visits a NewArrayTree node. This implementation scans the children in left to right order."}, {"method_name": "visitLambdaExpression", "method_sig": "public R visitLambdaExpression (LambdaExpressionTree node,\n                               P p)", "description": "Visits a LambdaExpressionTree node. This implementation scans the children in left to right order."}, {"method_name": "visitParenthesized", "method_sig": "public R visitParenthesized (ParenthesizedTree node,\n                            P p)", "description": "Visits a ParenthesizedTree node. This implementation scans the children in left to right order."}, {"method_name": "visitAssignment", "method_sig": "public R visitAssignment (AssignmentTree node,\n                         P p)", "description": "Visits an AssignmentTree node. This implementation scans the children in left to right order."}, {"method_name": "visitCompoundAssignment", "method_sig": "public R visitCompoundAssignment (CompoundAssignmentTree node,\n                                 P p)", "description": "Visits a CompoundAssignmentTree node. This implementation scans the children in left to right order."}, {"method_name": "visitUnary", "method_sig": "public R visitUnary (UnaryTree node,\n                    P p)", "description": "Visits a UnaryTree node. This implementation scans the children in left to right order."}, {"method_name": "visitBinary", "method_sig": "public R visitBinary (BinaryTree node,\n                     P p)", "description": "Visits a BinaryTree node. This implementation scans the children in left to right order."}, {"method_name": "visitTypeCast", "method_sig": "public R visitTypeCast (TypeCastTree node,\n                       P p)", "description": "Visits a TypeCastTree node. This implementation scans the children in left to right order."}, {"method_name": "visitInstanceOf", "method_sig": "public R visitInstanceOf (InstanceOfTree node,\n                         P p)", "description": "Visits an InstanceOfTree node. This implementation scans the children in left to right order."}, {"method_name": "visitArrayAccess", "method_sig": "public R visitArrayAccess (ArrayAccessTree node,\n                          P p)", "description": "Visits an ArrayAccessTree node. This implementation scans the children in left to right order."}, {"method_name": "visitMemberSelect", "method_sig": "public R visitMemberSelect (MemberSelectTree node,\n                           P p)", "description": "Visits a MemberSelectTree node. This implementation scans the children in left to right order."}, {"method_name": "visitMemberReference", "method_sig": "public R visitMemberReference (MemberReferenceTree node,\n                              P p)", "description": "Visits a MemberReferenceTree node. This implementation scans the children in left to right order."}, {"method_name": "visitIdentifier", "method_sig": "public R visitIdentifier (IdentifierTree node,\n                         P p)", "description": "Visits an IdentifierTree node. This implementation returns null."}, {"method_name": "visitLiteral", "method_sig": "public R visitLiteral (LiteralTree node,\n                      P p)", "description": "Visits a LiteralTree node. This implementation returns null."}, {"method_name": "visitPrimitiveType", "method_sig": "public R visitPrimitiveType (PrimitiveTypeTree node,\n                            P p)", "description": "Visits a PrimitiveTypeTree node. This implementation returns null."}, {"method_name": "visitArrayType", "method_sig": "public R visitArrayType (ArrayTypeTree node,\n                        P p)", "description": "Visits an ArrayTypeTree node. This implementation scans the children in left to right order."}, {"method_name": "visitParameterizedType", "method_sig": "public R visitParameterizedType (ParameterizedTypeTree node,\n                                P p)", "description": "Visits a ParameterizedTypeTree node. This implementation scans the children in left to right order."}, {"method_name": "visitUnionType", "method_sig": "public R visitUnionType (UnionTypeTree node,\n                        P p)", "description": "Visits a UnionTypeTree node. This implementation scans the children in left to right order."}, {"method_name": "visitIntersectionType", "method_sig": "public R visitIntersectionType (IntersectionTypeTree node,\n                               P p)", "description": "Visits an IntersectionTypeTree node. This implementation scans the children in left to right order."}, {"method_name": "visitTypeParameter", "method_sig": "public R visitTypeParameter (TypeParameterTree node,\n                            P p)", "description": "Visits a TypeParameterTree node. This implementation scans the children in left to right order."}, {"method_name": "visitWildcard", "method_sig": "public R visitWildcard (WildcardTree node,\n                       P p)", "description": "Visits a WildcardTypeTree node. This implementation scans the children in left to right order."}, {"method_name": "visitModifiers", "method_sig": "public R visitModifiers (ModifiersTree node,\n                        P p)", "description": "Visits a ModifiersTree node. This implementation scans the children in left to right order."}, {"method_name": "visitAnnotation", "method_sig": "public R visitAnnotation (AnnotationTree node,\n                         P p)", "description": "Visits an AnnotatedTree node. This implementation scans the children in left to right order."}, {"method_name": "visitAnnotatedType", "method_sig": "public R visitAnnotatedType (AnnotatedTypeTree node,\n                            P p)", "description": "Visits an AnnotatedTypeTree node. This implementation scans the children in left to right order."}, {"method_name": "visitOther", "method_sig": "public R visitOther (Tree node,\n                    P p)", "description": "Visits an unknown type of Tree node.\n This can occur if the language evolves and new kinds\n of nodes are added to the Tree hierarchy. This implementation returns null."}, {"method_name": "visitErroneous", "method_sig": "public R visitErroneous (ErroneousTree node,\n                        P p)", "description": "Visits an ErroneousTree node. This implementation returns null."}]}