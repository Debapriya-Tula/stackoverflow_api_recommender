{"name": "Class FilterInputStream", "module": "java.base", "package": "java.io", "text": "A FilterInputStream contains\n some other input stream, which it uses as\n its  basic source of data, possibly transforming\n the data along the way or providing  additional\n functionality. The class FilterInputStream\n itself simply overrides all  methods of\n InputStream with versions that\n pass all requests to the contained  input\n stream. Subclasses of FilterInputStream\n may further override some of  these methods\n and may also provide additional methods\n and fields.", "codes": ["public class FilterInputStream\nextends InputStream"], "fields": [{"field_name": "in", "field_sig": "protected volatile\u00a0InputStream in", "description": "The input stream to be filtered."}], "methods": [{"method_name": "read", "method_sig": "public int read()\n         throws IOException", "description": "Reads the next byte of data from this input stream. The value\n byte is returned as an int in the range\n 0 to 255. If no byte is available\n because the end of the stream has been reached, the value\n -1 is returned. This method blocks until input data\n is available, the end of the stream is detected, or an exception\n is thrown.\n \n This method\n simply performs in.read() and returns the result."}, {"method_name": "read", "method_sig": "public int read (byte[] b)\n         throws IOException", "description": "Reads up to b.length bytes of data from this\n input stream into an array of bytes. This method blocks until some\n input is available.\n \n This method simply performs the call\n read(b, 0, b.length) and returns\n the  result. It is important that it does\n not do in.read(b) instead;\n certain subclasses of  FilterInputStream\n depend on the implementation strategy actually\n used."}, {"method_name": "read", "method_sig": "public int read (byte[] b,\n                int off,\n                int len)\n         throws IOException", "description": "Reads up to len bytes of data from this input stream\n into an array of bytes. If len is not zero, the method\n blocks until some input is available; otherwise, no\n bytes are read and 0 is returned.\n \n This method simply performs in.read(b, off, len)\n and returns the result."}, {"method_name": "skip", "method_sig": "public long skip (long n)\n          throws IOException", "description": "Skips over and discards n bytes of data from the\n input stream. The skip method may, for a variety of\n reasons, end up skipping over some smaller number of bytes,\n possibly 0. The actual number of bytes skipped is\n returned.\n \n This method simply performs in.skip(n)."}, {"method_name": "available", "method_sig": "public int available()\n              throws IOException", "description": "Returns an estimate of the number of bytes that can be read (or\n skipped over) from this input stream without blocking by the next\n caller of a method for this input stream. The next caller might be\n the same thread or another thread.  A single read or skip of this\n many bytes will not block, but may read or skip fewer bytes.\n \n This method returns the result of in.available()."}, {"method_name": "close", "method_sig": "public void close()\n           throws IOException", "description": "Closes this input stream and releases any system resources\n associated with the stream.\n This\n method simply performs in.close()."}, {"method_name": "mark", "method_sig": "public void mark (int readlimit)", "description": "Marks the current position in this input stream. A subsequent\n call to the reset method repositions this stream at\n the last marked position so that subsequent reads re-read the same bytes.\n \n The readlimit argument tells this input stream to\n allow that many bytes to be read before the mark position gets\n invalidated.\n \n This method simply performs in.mark(readlimit)."}, {"method_name": "reset", "method_sig": "public void reset()\n           throws IOException", "description": "Repositions this stream to the position at the time the\n mark method was last called on this input stream.\n \n This method\n simply performs in.reset().\n \n Stream marks are intended to be used in\n situations where you need to read ahead a little to see what's in\n the stream. Often this is most easily done by invoking some\n general parser. If the stream is of the type handled by the\n parse, it just chugs along happily. If the stream is not of\n that type, the parser should toss an exception when it fails.\n If this happens within readlimit bytes, it allows the outer\n code to reset the stream and try another parser."}, {"method_name": "markSupported", "method_sig": "public boolean markSupported()", "description": "Tests if this input stream supports the mark\n and reset methods.\n This method\n simply performs in.markSupported()."}]}