{"name": "Interface Wrapper", "module": "java.sql", "package": "java.sql", "text": "Interface for JDBC classes which provide the ability to retrieve the delegate instance when the instance\n in question is in fact a proxy class.\n \n The wrapper pattern is employed by many JDBC driver implementations to provide extensions beyond\n the traditional JDBC API that are specific to a data source. Developers may wish to gain access to\n these resources that are wrapped (the delegates) as  proxy class instances representing the\n the actual resources. This interface describes a standard mechanism to access\n these wrapped resources\n represented by their proxy, to permit direct access to the resource delegates.", "codes": ["public interface Wrapper"], "fields": [], "methods": [{"method_name": "unwrap", "method_sig": "<T> T unwrap (Class<T> iface)\n      throws SQLException", "description": "Returns an object that implements the given interface to allow access to\n non-standard methods, or standard methods not exposed by the proxy.\n\n If the receiver implements the interface then the result is the receiver\n or a proxy for the receiver. If the receiver is a wrapper\n and the wrapped object implements the interface then the result is the\n wrapped object or a proxy for the wrapped object. Otherwise return the\n the result of calling unwrap recursively on the wrapped object\n or a proxy for that result. If the receiver is not a\n wrapper and does not implement the interface, then an SQLException is thrown."}, {"method_name": "isWrapperFor", "method_sig": "boolean isWrapperFor (Class<?> iface)\n              throws SQLException", "description": "Returns true if this either implements the interface argument or is directly or indirectly a wrapper\n for an object that does. Returns false otherwise. If this implements the interface then return true,\n else if this is a wrapper then return the result of recursively calling isWrapperFor on the wrapped\n object. If this does not implement the interface and is not a wrapper, return false.\n This method should be implemented as a low-cost operation compared to unwrap so that\n callers can use this method to avoid expensive unwrap calls that may fail. If this method\n returns true then calling unwrap with the same argument should succeed."}]}