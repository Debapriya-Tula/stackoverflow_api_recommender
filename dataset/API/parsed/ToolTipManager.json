{"name": "Class ToolTipManager", "module": "java.desktop", "package": "javax.swing", "text": "Manages all the ToolTips in the system.\n \n ToolTipManager contains numerous properties for configuring how long it\n will take for the tooltips to become visible, and how long till they\n hide. Consider a component that has a different tooltip based on where\n the mouse is, such as JTree. When the mouse moves into the JTree and\n over a region that has a valid tooltip, the tooltip will become\n visible after initialDelay milliseconds. After\n dismissDelay milliseconds the tooltip will be hidden. If\n the mouse is over a region that has a valid tooltip, and the tooltip\n is currently visible, when the mouse moves to a region that doesn't have\n a valid tooltip the tooltip will be hidden. If the mouse then moves back\n into a region that has a valid tooltip within reshowDelay\n milliseconds, the tooltip will immediately be shown, otherwise the\n tooltip will be shown again after initialDelay milliseconds.", "codes": ["public class ToolTipManager\nextends MouseAdapter\nimplements MouseMotionListener"], "fields": [{"field_name": "lightWeightPopupEnabled", "field_sig": "protected\u00a0boolean lightWeightPopupEnabled", "description": "Lightweight popup enabled."}, {"field_name": "heavyWeightPopupEnabled", "field_sig": "protected\u00a0boolean heavyWeightPopupEnabled", "description": "Heavyweight popup enabled."}], "methods": [{"method_name": "setEnabled", "method_sig": "public void setEnabled (boolean flag)", "description": "Enables or disables the tooltip."}, {"method_name": "isEnabled", "method_sig": "public boolean isEnabled()", "description": "Returns true if this object is enabled."}, {"method_name": "setLightWeightPopupEnabled", "method_sig": "public void setLightWeightPopupEnabled (boolean aFlag)", "description": "When displaying the JToolTip, the\n ToolTipManager chooses to use a lightweight\n JPanel if it fits. This method allows you to\n disable this feature. You have to do disable it if your\n application mixes light weight and heavy weights components."}, {"method_name": "isLightWeightPopupEnabled", "method_sig": "public boolean isLightWeightPopupEnabled()", "description": "Returns true if lightweight (all-Java) Tooltips\n are in use, or false if heavyweight (native peer)\n Tooltips are being used."}, {"method_name": "setInitialDelay", "method_sig": "public void setInitialDelay (int milliseconds)", "description": "Specifies the initial delay value."}, {"method_name": "getInitialDelay", "method_sig": "public int getInitialDelay()", "description": "Returns the initial delay value."}, {"method_name": "setDismissDelay", "method_sig": "public void setDismissDelay (int milliseconds)", "description": "Specifies the dismissal delay value."}, {"method_name": "getDismissDelay", "method_sig": "public int getDismissDelay()", "description": "Returns the dismissal delay value."}, {"method_name": "setReshowDelay", "method_sig": "public void setReshowDelay (int milliseconds)", "description": "Used to specify the amount of time before the user has to wait\n initialDelay milliseconds before a tooltip will be\n shown. That is, if the tooltip is hidden, and the user moves into\n a region of the same Component that has a valid tooltip within\n milliseconds milliseconds the tooltip will immediately\n be shown. Otherwise, if the user moves into a region with a valid\n tooltip after milliseconds milliseconds, the user\n will have to wait an additional initialDelay\n milliseconds before the tooltip is shown again."}, {"method_name": "getReshowDelay", "method_sig": "public int getReshowDelay()", "description": "Returns the reshow delay property."}, {"method_name": "sharedInstance", "method_sig": "public static ToolTipManager sharedInstance()", "description": "Returns a shared ToolTipManager instance."}, {"method_name": "registerComponent", "method_sig": "public void registerComponent (JComponent component)", "description": "Registers a component for tooltip management.\n \n This will register key bindings to show and hide the tooltip text\n only if component has focus bindings. This is done\n so that components that are not normally focus traversable, such\n as JLabel, are not made focus traversable as a result\n of invoking this method."}, {"method_name": "unregisterComponent", "method_sig": "public void unregisterComponent (JComponent component)", "description": "Removes a component from tooltip control."}, {"method_name": "mouseEntered", "method_sig": "public void mouseEntered (MouseEvent event)", "description": "Called when the mouse enters the region of a component.\n  This determines whether the tool tip should be shown."}, {"method_name": "mouseExited", "method_sig": "public void mouseExited (MouseEvent event)", "description": "Called when the mouse exits the region of a component.\n  Any tool tip showing should be hidden."}, {"method_name": "mousePressed", "method_sig": "public void mousePressed (MouseEvent event)", "description": "Called when the mouse is pressed.\n  Any tool tip showing should be hidden."}, {"method_name": "mouseDragged", "method_sig": "public void mouseDragged (MouseEvent event)", "description": "Called when the mouse is pressed and dragged.\n  Does nothing."}, {"method_name": "mouseMoved", "method_sig": "public void mouseMoved (MouseEvent event)", "description": "Called when the mouse is moved.\n  Determines whether the tool tip should be displayed."}]}