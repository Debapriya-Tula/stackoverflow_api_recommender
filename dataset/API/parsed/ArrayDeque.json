{"name": "Class ArrayDeque<E>", "module": "java.base", "package": "java.util", "text": "Resizable-array implementation of the Deque interface.  Array\n deques have no capacity restrictions; they grow as necessary to support\n usage.  They are not thread-safe; in the absence of external\n synchronization, they do not support concurrent access by multiple threads.\n Null elements are prohibited.  This class is likely to be faster than\n Stack when used as a stack, and faster than LinkedList\n when used as a queue.\n\n Most ArrayDeque operations run in amortized constant time.\n Exceptions include\n remove,\n removeFirstOccurrence,\n removeLastOccurrence,\n contains,\n iterator.remove(),\n and the bulk operations, all of which run in linear time.\n\n The iterators returned by this class's iterator\n method are fail-fast: If the deque is modified at any time after\n the iterator is created, in any way except through the iterator's own\n remove method, the iterator will generally throw a ConcurrentModificationException.  Thus, in the face of concurrent\n modification, the iterator fails quickly and cleanly, rather than risking\n arbitrary, non-deterministic behavior at an undetermined time in the\n future.\n\n Note that the fail-fast behavior of an iterator cannot be guaranteed\n as it is, generally speaking, impossible to make any hard guarantees in the\n presence of unsynchronized concurrent modification.  Fail-fast iterators\n throw ConcurrentModificationException on a best-effort basis.\n Therefore, it would be wrong to write a program that depended on this\n exception for its correctness: the fail-fast behavior of iterators\n should be used only to detect bugs.\nThis class and its iterator implement all of the\n optional methods of the Collection and Iterator interfaces.\n\n This class is a member of the\n \n Java Collections Framework.", "codes": ["public class ArrayDeque<E>\nextends AbstractCollection<E>\nimplements Deque<E>, Cloneable, Serializable"], "fields": [], "methods": [{"method_name": "addFirst", "method_sig": "public void addFirst (E e)", "description": "Inserts the specified element at the front of this deque."}, {"method_name": "addLast", "method_sig": "public void addLast (E e)", "description": "Inserts the specified element at the end of this deque.\n\n This method is equivalent to add(E)."}, {"method_name": "addAll", "method_sig": "public boolean addAll (Collection<? extends E> c)", "description": "Adds all of the elements in the specified collection at the end\n of this deque, as if by calling addLast(E) on each one,\n in the order that they are returned by the collection's iterator."}, {"method_name": "offerFirst", "method_sig": "public boolean offerFirst (E e)", "description": "Inserts the specified element at the front of this deque."}, {"method_name": "offerLast", "method_sig": "public boolean offerLast (E e)", "description": "Inserts the specified element at the end of this deque."}, {"method_name": "removeFirst", "method_sig": "public E removeFirst()", "description": "Description copied from interface:\u00a0Deque"}, {"method_name": "removeLast", "method_sig": "public E removeLast()", "description": "Description copied from interface:\u00a0Deque"}, {"method_name": "getFirst", "method_sig": "public E getFirst()", "description": "Description copied from interface:\u00a0Deque"}, {"method_name": "getLast", "method_sig": "public E getLast()", "description": "Description copied from interface:\u00a0Deque"}, {"method_name": "removeFirstOccurrence", "method_sig": "public boolean removeFirstOccurrence (Object o)", "description": "Removes the first occurrence of the specified element in this\n deque (when traversing the deque from head to tail).\n If the deque does not contain the element, it is unchanged.\n More formally, removes the first element e such that\n o.equals(e) (if such an element exists).\n Returns true if this deque contained the specified element\n (or equivalently, if this deque changed as a result of the call)."}, {"method_name": "removeLastOccurrence", "method_sig": "public boolean removeLastOccurrence (Object o)", "description": "Removes the last occurrence of the specified element in this\n deque (when traversing the deque from head to tail).\n If the deque does not contain the element, it is unchanged.\n More formally, removes the last element e such that\n o.equals(e) (if such an element exists).\n Returns true if this deque contained the specified element\n (or equivalently, if this deque changed as a result of the call)."}, {"method_name": "add", "method_sig": "public boolean add (E e)", "description": "Inserts the specified element at the end of this deque.\n\n This method is equivalent to addLast(E)."}, {"method_name": "offer", "method_sig": "public boolean offer (E e)", "description": "Inserts the specified element at the end of this deque.\n\n This method is equivalent to offerLast(E)."}, {"method_name": "remove", "method_sig": "public E remove()", "description": "Retrieves and removes the head of the queue represented by this deque.\n\n This method differs from poll() only in that it\n throws an exception if this deque is empty.\n\n This method is equivalent to removeFirst()."}, {"method_name": "poll", "method_sig": "public E poll()", "description": "Retrieves and removes the head of the queue represented by this deque\n (in other words, the first element of this deque), or returns\n null if this deque is empty.\n\n This method is equivalent to Deque.pollFirst()."}, {"method_name": "element", "method_sig": "public E element()", "description": "Retrieves, but does not remove, the head of the queue represented by\n this deque.  This method differs from peek only in\n that it throws an exception if this deque is empty.\n\n This method is equivalent to getFirst()."}, {"method_name": "peek", "method_sig": "public E peek()", "description": "Retrieves, but does not remove, the head of the queue represented by\n this deque, or returns null if this deque is empty.\n\n This method is equivalent to Deque.peekFirst()."}, {"method_name": "push", "method_sig": "public void push (E e)", "description": "Pushes an element onto the stack represented by this deque.  In other\n words, inserts the element at the front of this deque.\n\n This method is equivalent to addFirst(E)."}, {"method_name": "pop", "method_sig": "public E pop()", "description": "Pops an element from the stack represented by this deque.  In other\n words, removes and returns the first element of this deque.\n\n This method is equivalent to removeFirst()."}, {"method_name": "size", "method_sig": "public int size()", "description": "Returns the number of elements in this deque."}, {"method_name": "isEmpty", "method_sig": "public boolean isEmpty()", "description": "Returns true if this deque contains no elements."}, {"method_name": "iterator", "method_sig": "public Iterator<E> iterator()", "description": "Returns an iterator over the elements in this deque.  The elements\n will be ordered from first (head) to last (tail).  This is the same\n order that elements would be dequeued (via successive calls to\n remove() or popped (via successive calls to pop())."}, {"method_name": "spliterator", "method_sig": "public Spliterator<E> spliterator()", "description": "Creates a late-binding\n and fail-fast Spliterator over the elements in this\n deque.\n\n The Spliterator reports Spliterator.SIZED,\n Spliterator.SUBSIZED, Spliterator.ORDERED, and\n Spliterator.NONNULL.  Overriding implementations should document\n the reporting of additional characteristic values."}, {"method_name": "forEach", "method_sig": "public void forEach (Consumer<? super E> action)", "description": "Description copied from interface:\u00a0Iterable"}, {"method_name": "removeIf", "method_sig": "public boolean removeIf (Predicate<? super E> filter)", "description": "Description copied from interface:\u00a0Collection"}, {"method_name": "removeAll", "method_sig": "public boolean removeAll (Collection<?> c)", "description": "Description copied from class:\u00a0AbstractCollection"}, {"method_name": "retainAll", "method_sig": "public boolean retainAll (Collection<?> c)", "description": "Description copied from class:\u00a0AbstractCollection"}, {"method_name": "contains", "method_sig": "public boolean contains (Object o)", "description": "Returns true if this deque contains the specified element.\n More formally, returns true if and only if this deque contains\n at least one element e such that o.equals(e)."}, {"method_name": "remove", "method_sig": "public boolean remove (Object o)", "description": "Removes a single instance of the specified element from this deque.\n If the deque does not contain the element, it is unchanged.\n More formally, removes the first element e such that\n o.equals(e) (if such an element exists).\n Returns true if this deque contained the specified element\n (or equivalently, if this deque changed as a result of the call).\n\n This method is equivalent to removeFirstOccurrence(Object)."}, {"method_name": "clear", "method_sig": "public void clear()", "description": "Removes all of the elements from this deque.\n The deque will be empty after this call returns."}, {"method_name": "toArray", "method_sig": "public Object[] toArray()", "description": "Returns an array containing all of the elements in this deque\n in proper sequence (from first to last element).\n\n The returned array will be \"safe\" in that no references to it are\n maintained by this deque.  (In other words, this method must allocate\n a new array).  The caller is thus free to modify the returned array.\n\n This method acts as bridge between array-based and collection-based\n APIs."}, {"method_name": "toArray", "method_sig": "public <T> T[] toArray (T[] a)", "description": "Returns an array containing all of the elements in this deque in\n proper sequence (from first to last element); the runtime type of the\n returned array is that of the specified array.  If the deque fits in\n the specified array, it is returned therein.  Otherwise, a new array\n is allocated with the runtime type of the specified array and the\n size of this deque.\n\n If this deque fits in the specified array with room to spare\n (i.e., the array has more elements than this deque), the element in\n the array immediately following the end of the deque is set to\n null.\n\n Like the toArray() method, this method acts as bridge between\n array-based and collection-based APIs.  Further, this method allows\n precise control over the runtime type of the output array, and may,\n under certain circumstances, be used to save allocation costs.\n\n Suppose x is a deque known to contain only strings.\n The following code can be used to dump the deque into a newly\n allocated array of String:\n\n  String[] y = x.toArray(new String[0]);\n\n Note that toArray(new Object[0]) is identical in function to\n toArray()."}, {"method_name": "clone", "method_sig": "public ArrayDeque<E> clone()", "description": "Returns a copy of this deque."}]}