{"name": "Interface NamingEnumeration<T>", "module": "java.naming", "package": "javax.naming", "text": "This interface is for enumerating lists returned by\n methods in the javax.naming and javax.naming.directory packages.\n It extends Enumeration to allow as exceptions to be thrown during\n the enumeration.\n\n When a method such as list(), listBindings(), or search() returns\n a NamingEnumeration, any exceptions encountered are reserved until\n all results have been returned. At the end of the enumeration, the\n exception is thrown (by hasMore());\n \n For example, if the list() is\n returning only a partial answer, the corresponding exception would\n be PartialResultException. list() would first return a NamingEnumeration.\n When the last of the results has been returned by the NamingEnumeration's\n next(), invoking hasMore() would result in PartialResultException being thrown.\n\n In another example, if a search() method was invoked with a specified\n size limit of 'n'. If the answer consists of more than 'n' results,\n search() would first return a NamingEnumeration.\n When the n'th result has been returned by invoking next() on the\n NamingEnumeration, a SizeLimitExceedException would then thrown when\n hasMore() is invoked.\n\n Note that if the program uses hasMoreElements() and nextElement() instead\n to iterate through the NamingEnumeration, because these methods\n cannot throw exceptions, no exception will be thrown. Instead,\n in the previous example, after the n'th result has been returned by\n nextElement(), invoking hasMoreElements() would return false.\n\n Note also that NoSuchElementException is thrown if the program invokes\n next() or nextElement() when there are no elements left in the enumeration.\n The program can always avoid this exception by using hasMore() and\n hasMoreElements() to check whether the end of the enumeration has been reached.\n\n If an exception is thrown during an enumeration,\n the enumeration becomes invalid.\n Subsequent invocation of any method on that enumeration\n will yield undefined results.", "codes": ["public interface NamingEnumeration<T>\nextends Enumeration<T>"], "fields": [], "methods": [{"method_name": "next", "method_sig": "T next()\nthrows NamingException", "description": "Retrieves the next element in the enumeration.\n This method allows naming exceptions encountered while\n retrieving the next element to be caught and handled\n by the application.\n \n Note that next() can also throw the runtime exception\n NoSuchElementException to indicate that the caller is\n attempting to enumerate beyond the end of the enumeration.\n This is different from a NamingException, which indicates\n that there was a problem in obtaining the next element,\n for example, due to a referral or server unavailability, etc."}, {"method_name": "hasMore", "method_sig": "boolean hasMore()\n         throws NamingException", "description": "Determines whether there are any more elements in the enumeration.\n This method allows naming exceptions encountered while\n determining whether there are more elements to be caught and handled\n by the application."}, {"method_name": "close", "method_sig": "void close()\n    throws NamingException", "description": "Closes this enumeration.\n\n After this method has been invoked on this enumeration, the\n enumeration becomes invalid and subsequent invocation of any of\n its methods will yield undefined results.\n This method is intended for aborting an enumeration to free up resources.\n If an enumeration proceeds to the end--that is, until\n hasMoreElements() or hasMore() returns false--\n resources will be freed up automatically and there is no need to\n explicitly call close().\n\n This method indicates to the service provider that it is free\n to release resources associated with the enumeration, and can\n notify servers to cancel any outstanding requests. The close()\n method is a hint to implementations for managing their resources.\n Implementations are encouraged to use appropriate algorithms to\n manage their resources when client omits the close() calls."}]}