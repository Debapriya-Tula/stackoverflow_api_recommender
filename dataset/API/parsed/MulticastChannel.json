{"name": "Interface MulticastChannel", "module": "java.base", "package": "java.nio.channels", "text": "A network channel that supports Internet Protocol (IP) multicasting.\n\n  IP multicasting is the transmission of IP datagrams to members of\n a group that is zero or more hosts identified by a single destination\n address.\n\n  In the case of a channel to an IPv4 socket,\n the underlying operating system optionally supports\n  RFC\u00a02236: Internet Group\n Management Protocol, Version 2 (IGMPv2). When IGMPv2 is supported then\n the operating system may additionally support source filtering as specified by\n  RFC\u00a03376: Internet Group\n Management Protocol, Version 3 (IGMPv3).\n For channels to an IPv6 socket, the equivalent\n standards are  RFC\u00a02710:\n Multicast Listener Discovery (MLD) for IPv6 and  RFC\u00a03810: Multicast Listener\n Discovery Version 2 (MLDv2) for IPv6.\n\n  The join(InetAddress,NetworkInterface) method is used to\n join a group and receive all multicast datagrams sent to the group. A channel\n may join several multicast groups and may join the same group on several\n interfaces. Membership is dropped by invoking the drop method on the returned MembershipKey. If the\n underlying platform supports source filtering then the block and unblock methods can be used to block or\n unblock multicast datagrams from particular source addresses.\n\n  The join(InetAddress,NetworkInterface,InetAddress) method\n is used to begin receiving datagrams sent to a group whose source address matches\n a given source address. This method throws UnsupportedOperationException\n if the underlying platform does not support source filtering.  Membership is\n cumulative and this method may be invoked again with the same group\n and interface to allow receiving datagrams from other source addresses. The\n method returns a MembershipKey that represents membership to receive\n datagrams from the given source address. Invoking the key's drop method drops membership so that datagrams from the\n source address can no longer be received.\n\n Platform dependencies\n\n The multicast implementation is intended to map directly to the native\n multicasting facility. Consequently, the following items should be considered\n when developing an application that receives IP multicast datagrams:\n\n \n The creation of the channel should specify the ProtocolFamily\n that corresponds to the address type of the multicast groups that the channel\n will join. There is no guarantee that a channel to a socket in one protocol\n family can join and receive multicast datagrams when the address of the\n multicast group corresponds to another protocol family. For example, it is\n implementation specific if a channel to an IPv6\n socket can join an IPv4 multicast group and receive\n multicast datagrams sent to the group. \n The channel's socket should be bound to the wildcard address. If the socket is bound to\n a specific address, rather than the wildcard address then it is implementation\n specific if multicast datagrams are received by the socket. \n The SO_REUSEADDR option should be\n enabled prior to binding the socket. This is\n required to allow multiple members of the group to bind to the same\n address. \n\n Usage Example:\n\n     // join multicast group on this interface, and also use this\n     // interface for outgoing multicast datagrams\n     NetworkInterface ni = NetworkInterface.getByName(\"hme0\");\n\n     DatagramChannel dc = DatagramChannel.open(StandardProtocolFamily.INET)\n         .setOption(StandardSocketOptions.SO_REUSEADDR, true)\n         .bind(new InetSocketAddress(5000))\n         .setOption(StandardSocketOptions.IP_MULTICAST_IF, ni);\n\n     InetAddress group = InetAddress.getByName(\"225.4.5.6\");\n\n     MembershipKey key = dc.join(group, ni);\n ", "codes": ["public interface MulticastChannel\nextends NetworkChannel"], "fields": [], "methods": [{"method_name": "close", "method_sig": "void close()\n    throws IOException", "description": "Closes this channel.\n\n  If the channel is a member of a multicast group then the membership\n is dropped. Upon return, the membership-key will be invalid.\n\n  This method otherwise behaves exactly as specified by the Channel interface."}, {"method_name": "join", "method_sig": "MembershipKey join (InetAddress group,\n                   NetworkInterface interf)\n            throws IOException", "description": "Joins a multicast group to begin receiving all datagrams sent to the group,\n returning a membership key.\n\n  If this channel is currently a member of the group on the given\n interface to receive all datagrams then the membership key, representing\n that membership, is returned. Otherwise this channel joins the group and\n the resulting new membership key is returned. The resulting membership key\n is not source-specific.\n\n  A multicast channel may join several multicast groups, including\n the same group on more than one interface. An implementation may impose a\n limit on the number of groups that may be joined at the same time."}, {"method_name": "join", "method_sig": "MembershipKey join (InetAddress group,\n                   NetworkInterface interf,\n                   InetAddress source)\n            throws IOException", "description": "Joins a multicast group to begin receiving datagrams sent to the group\n from a given source address.\n\n  If this channel is currently a member of the group on the given\n interface to receive datagrams from the given source address then the\n membership key, representing that membership, is returned. Otherwise this\n channel joins the group and the resulting new membership key is returned.\n The resulting membership key is source-specific.\n\n  Membership is cumulative and this method may be invoked\n again with the same group and interface to allow receiving datagrams sent\n by other source addresses to the group."}]}