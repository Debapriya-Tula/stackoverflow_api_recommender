{"name": "Class InitialContext", "module": "java.naming", "package": "javax.naming", "text": "This class is the starting context for performing naming operations.\n\n All naming operations are relative to a context.\n The initial context implements the Context interface and\n provides the starting point for resolution of names.\n\n\n When the initial context is constructed, its environment\n is initialized with properties defined in the environment parameter\n passed to the constructor, and in any\n application resource files.\n\n JNDI determines each property's value by merging\n the values from the following two sources, in order:\n \n\n The first occurrence of the property from the constructor's\n environment parameter and system properties.\n \n The application resource files (jndi.properties).\n \n For each property found in both of these two sources, or in\n more than one application resource file, the property's value\n is determined as follows.  If the property is\n one of the standard JNDI properties that specify a list of JNDI\n factories (see Context),\n all of the values are\n concatenated into a single colon-separated list.  For other\n properties, only the first value found is used.\n\n\n The initial context implementation is determined at runtime.\n The default policy uses the environment property\n \"java.naming.factory.initial\",\n which contains the class name of the initial context factory.\n An exception to this policy is made when resolving URL strings, as described\n below.\n\n When a URL string (a String of the form\n scheme_id:rest_of_name) is passed as a name parameter to\n any method, a URL context factory for handling that scheme is\n located and used to resolve the URL.  If no such factory is found,\n the initial context specified by\n \"java.naming.factory.initial\" is used.  Similarly, when a\n CompositeName object whose first component is a URL string is\n passed as a name parameter to any method, a URL context factory is\n located and used to resolve the first name component.\n See NamingManager.getURLContext() for a description of how URL\n context factories are located.\n\n This default policy of locating the initial context and URL context\n factories may be overridden\n by calling\n NamingManager.setInitialContextFactoryBuilder().\n\n NoInitialContextException is thrown when an initial context cannot\n be instantiated. This exception can be thrown during any interaction\n with the InitialContext, not only when the InitialContext is constructed.\n For example, the implementation of the initial context might lazily\n retrieve the context only when actual methods are invoked on it.\n The application should not have any dependency on when the existence\n of an initial context is determined.\n\n When the environment property \"java.naming.factory.initial\" is\n non-null, the InitialContext constructor will attempt to create the\n initial context specified therein. At that time, the initial context factory\n involved might throw an exception if a problem is encountered. However,\n it is provider implementation-dependent when it verifies and indicates\n to the users of the initial context any environment property- or\n connection- related problems. It can do so lazily--delaying until\n an operation is performed on the context, or eagerly, at the time\n the context is constructed.\n\n An InitialContext instance is not synchronized against concurrent\n access by multiple threads. Multiple threads each manipulating a\n different InitialContext instance need not synchronize.\n Threads that need to access a single InitialContext instance\n concurrently should synchronize amongst themselves and provide the\n necessary locking.", "codes": ["public class InitialContext\nextends Object\nimplements Context"], "fields": [{"field_name": "myProps", "field_sig": "protected\u00a0Hashtable<Object,\u200bObject> myProps", "description": "The environment associated with this InitialContext.\n It is initialized to null and is updated by the constructor\n that accepts an environment or by the init() method."}, {"field_name": "defaultInitCtx", "field_sig": "protected\u00a0Context defaultInitCtx", "description": "Field holding the result of calling NamingManager.getInitialContext().\n It is set by getDefaultInitCtx() the first time getDefaultInitCtx()\n is called. Subsequent invocations of getDefaultInitCtx() return\n the value of defaultInitCtx."}, {"field_name": "gotDefault", "field_sig": "protected\u00a0boolean gotDefault", "description": "Field indicating whether the initial context has been obtained\n by calling NamingManager.getInitialContext().\n If true, its result is in defaultInitCtx."}], "methods": [{"method_name": "init", "method_sig": "protected void init (Hashtable<?, ?> environment)\n             throws NamingException", "description": "Initializes the initial context using the supplied environment.\n Environment properties are discussed in the class description.\n\n  This method will modify environment and save\n a reference to it.  The caller may no longer modify it."}, {"method_name": "doLookup", "method_sig": "public static <T> T doLookup (Name name)\n                      throws NamingException", "description": "A static method to retrieve the named object.\n This is a shortcut method equivalent to invoking:\n \n\n        InitialContext ic = new InitialContext();\n        Object obj = ic.lookup();\n \n If name is empty, returns a new instance of this context\n (which represents the same naming context as this context, but its\n environment may be modified independently and it may be accessed\n concurrently)."}, {"method_name": "doLookup", "method_sig": "public static <T> T doLookup (String name)\n                      throws NamingException", "description": "A static method to retrieve the named object.\n See doLookup(Name) for details."}, {"method_name": "getDefaultInitCtx", "method_sig": "protected Context getDefaultInitCtx()\n                             throws NamingException", "description": "Retrieves the initial context by calling\n NamingManager.getInitialContext()\n and cache it in defaultInitCtx.\n Set gotDefault so that we know we've tried this before."}, {"method_name": "getURLOrDefaultInitCtx", "method_sig": "protected Context getURLOrDefaultInitCtx (String name)\n                                  throws NamingException", "description": "Retrieves a context for resolving the string name name.\n If name name is a URL string, then attempt\n to find a URL context for it. If none is found, or if\n name is not a URL string, then return\n getDefaultInitCtx().\n\n See getURLOrDefaultInitCtx(Name) for description\n of how a subclass should use this method."}, {"method_name": "getURLOrDefaultInitCtx", "method_sig": "protected Context getURLOrDefaultInitCtx (Name name)\n                                  throws NamingException", "description": "Retrieves a context for resolving name.\n If the first component of name name is a URL string,\n then attempt to find a URL context for it. If none is found, or if\n the first component of name is not a URL string,\n then return getDefaultInitCtx().\n\n When creating a subclass of InitialContext, use this method as\n follows.\n Define a new method that uses this method to get an initial\n context of the desired subclass.\n \n protected XXXContext getURLOrDefaultInitXXXCtx(Name name)\n throws NamingException {\n  Context answer = getURLOrDefaultInitCtx(name);\n  if (!(answer instanceof XXXContext)) {\n    if (answer == null) {\n      throw new NoInitialContextException();\n    } else {\n      throw new NotContextException(\"Not an XXXContext\");\n    }\n  }\n  return (XXXContext)answer;\n }\n \n When providing implementations for the new methods in the subclass,\n use this newly defined method to get the initial context.\n \n public Object XXXMethod1(Name name, ...) {\n  throws NamingException {\n    return getURLOrDefaultInitXXXCtx(name).XXXMethod1(name, ...);\n }\n "}, {"method_name": "composeName", "method_sig": "public String composeName (String name,\n                          String prefix)\n                   throws NamingException", "description": "Composes the name of this context with a name relative to\n this context.\n Since an initial context may never be named relative\n to any context other than itself, the value of the\n prefix parameter must be an empty name (\"\")."}, {"method_name": "composeName", "method_sig": "public Name composeName (Name name,\n                        Name prefix)\n                 throws NamingException", "description": "Composes the name of this context with a name relative to\n this context.\n Since an initial context may never be named relative\n to any context other than itself, the value of the\n prefix parameter must be an empty name."}]}