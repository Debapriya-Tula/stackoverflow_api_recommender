{"name": "Class TextHitInfo", "module": "java.desktop", "package": "java.awt.font", "text": "The TextHitInfo class represents a character position in a\n text model, and a bias, or \"side,\" of the character.  Biases are\n either leading (the left edge, for a left-to-right character)\n or trailing (the right edge, for a left-to-right character).\n Instances of TextHitInfo are used to specify caret and\n insertion positions within text.\n \n For example, consider the text \"abc\".  TextHitInfo.trailing(1)\n corresponds to the right side of the 'b' in the text.\n \nTextHitInfo is used primarily by TextLayout and\n clients of TextLayout.  Clients of TextLayout\n query TextHitInfo instances for an insertion offset, where\n new text is inserted into the text model.  The insertion offset is equal\n to the character position in the TextHitInfo if the bias\n is leading, and one character after if the bias is trailing.  The\n insertion offset for TextHitInfo.trailing(1) is 2.\n \n Sometimes it is convenient to construct a TextHitInfo with\n the same insertion offset as an existing one, but on the opposite\n character.  The getOtherHit method constructs a new\n TextHitInfo with the same insertion offset as an existing\n one, with a hit on the character on the other side of the insertion offset.\n Calling getOtherHit on trailing(1) would return leading(2).\n In general, getOtherHit for trailing(n) returns\n leading(n+1) and getOtherHit for leading(n)\n returns trailing(n-1).\n \nExample:\n Converting a graphical point to an insertion point within a text\n model\n \n TextLayout layout = ...;\n Point2D.Float hitPoint = ...;\n TextHitInfo hitInfo = layout.hitTestChar(hitPoint.x, hitPoint.y);\n int insPoint = hitInfo.getInsertionIndex();\n // insPoint is relative to layout;  may need to adjust for use\n // in a text model\n ", "codes": ["public final class TextHitInfo\nextends Object"], "fields": [], "methods": [{"method_name": "getCharIndex", "method_sig": "public int getCharIndex()", "description": "Returns the index of the character hit."}, {"method_name": "isLeadingEdge", "method_sig": "public boolean isLeadingEdge()", "description": "Returns true if the leading edge of the character was\n hit."}, {"method_name": "getInsertionIndex", "method_sig": "public int getInsertionIndex()", "description": "Returns the insertion index.  This is the character index if\n the leading edge of the character was hit, and one greater\n than the character index if the trailing edge was hit."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Returns the hash code."}, {"method_name": "equals", "method_sig": "public boolean equals (Object obj)", "description": "Returns true if the specified Object is a\n TextHitInfo and equals this TextHitInfo."}, {"method_name": "equals", "method_sig": "public boolean equals (TextHitInfo hitInfo)", "description": "Returns true if the specified TextHitInfo\n has the same charIndex and isLeadingEdge\n as this TextHitInfo.  This is not the same as having\n the same insertion offset."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a String representing the hit for debugging\n use only."}, {"method_name": "leading", "method_sig": "public static TextHitInfo leading (int charIndex)", "description": "Creates a TextHitInfo on the leading edge of the\n character at the specified charIndex."}, {"method_name": "trailing", "method_sig": "public static TextHitInfo trailing (int charIndex)", "description": "Creates a hit on the trailing edge of the character at\n the specified charIndex."}, {"method_name": "beforeOffset", "method_sig": "public static TextHitInfo beforeOffset (int offset)", "description": "Creates a TextHitInfo at the specified offset,\n associated with the character before the offset."}, {"method_name": "afterOffset", "method_sig": "public static TextHitInfo afterOffset (int offset)", "description": "Creates a TextHitInfo at the specified offset,\n associated with the character after the offset."}, {"method_name": "getOtherHit", "method_sig": "public TextHitInfo getOtherHit()", "description": "Creates a TextHitInfo on the other side of the\n insertion point.  This TextHitInfo remains unchanged."}, {"method_name": "getOffsetHit", "method_sig": "public TextHitInfo getOffsetHit (int delta)", "description": "Creates a TextHitInfo whose character index is offset\n by delta from the charIndex of this\n TextHitInfo. This TextHitInfo remains\n unchanged."}]}