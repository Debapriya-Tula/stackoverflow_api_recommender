{"name": "Class RemoteObjectInvocationHandler", "module": "java.rmi", "package": "java.rmi.server", "text": "An implementation of the InvocationHandler interface for\n use with Java Remote Method Invocation (Java RMI).  This invocation\n handler can be used in conjunction with a dynamic proxy instance as a\n replacement for a pregenerated stub class.\n\n Applications are not expected to use this class directly.  A remote\n object exported to use a dynamic proxy with UnicastRemoteObject\n or Activatable has an instance of this class as that proxy's\n invocation handler.", "codes": ["public class RemoteObjectInvocationHandler\nextends RemoteObject\nimplements InvocationHandler"], "fields": [], "methods": [{"method_name": "invoke", "method_sig": "public Object invoke (Object proxy,\n                     Method method,\n                     Object[] args)\n              throws Throwable", "description": "Processes a method invocation made on the encapsulating\n proxy instance, proxy, and returns the result.\n\n RemoteObjectInvocationHandler implements this method\n as follows:\n\n If method is one of the following methods, it\n is processed as described below:\n\n \nObject.hashCode: Returns the hash\n code value for the proxy.\n\n Object.equals: Returns true\n if the argument (args[0]) is an instance of a dynamic\n proxy class and this invocation handler is equal to the invocation\n handler of that argument, and returns false otherwise.\n\n Object.toString: Returns a string\n representation of the proxy.\n \nIf method overrides Object.finalize,\n it is ignored.\n\n Otherwise, a remote call is made as follows:\n\n \nIf proxy is not an instance of the interface\n Remote, then an IllegalArgumentException is thrown.\n\n Otherwise, the invoke method is invoked\n on this invocation handler's RemoteRef, passing\n proxy, method, args, and the\n method hash (defined in section 8.3 of the \"Java Remote Method\n Invocation (RMI) Specification\") for method, and the\n result is returned.\n\n If an exception is thrown by RemoteRef.invoke and\n that exception is a checked exception that is not assignable to any\n exception in the throws clause of the method\n implemented by the proxy's class, then that exception\n is wrapped in an UnexpectedException and the wrapped\n exception is thrown.  Otherwise, the exception thrown by\n invoke is thrown by this method.\n \nThe semantics of this method are unspecified if the\n arguments could not have been produced by an instance of some\n valid dynamic proxy class containing this invocation handler."}]}