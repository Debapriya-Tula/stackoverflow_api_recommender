{"name": "Interface ShardingKey", "module": "java.sql", "package": "java.sql", "text": "Interface used to indicate that this object represents a Sharding Key. A\n ShardingKey instance is only guaranteed to be compatible with the\n data source instance that it was derived from. A ShardingKey is\n created using ShardingKeyBuilder.\n \n The following example illustrates the use of ShardingKeyBuilder to\n create a ShardingKey:\n \n \n\n     DataSource ds = new MyDataSource();\n     ShardingKey shardingKey = ds.createShardingKeyBuilder()\n                           .subkey(\"abc\", JDBCType.VARCHAR)\n                           .subkey(94002, JDBCType.INTEGER)\n                           .build();\n \n \n\n\n A ShardingKey may also be used for specifying a\n superShardingKey. Databases that support composite Sharding may use a\n superShardingKey to specify a additional level of partitioning within\n the Shard.\n \n The following example illustrates the use of ShardingKeyBuilder to\n create a superShardingKey for an eastern region with a\n ShardingKey specified for the Pittsburgh branch office:\n \n \n\n     DataSource ds = new MyDataSource();\n     ShardingKey superShardingKey = ds.createShardingKeyBuilder()\n                           .subkey(\"EASTERN_REGION\", JDBCType.VARCHAR)\n                           .build();\n     ShardingKey shardingKey = ds.createShardingKeyBuilder()\n                           .subkey(\"PITTSBURGH_BRANCH\", JDBCType.VARCHAR)\n                           .build();\n     Connection con = ds.createConnectionBuilder()\n                           .superShardingKey(superShardingKey)\n                           .shardingKey(shardingKey)\n                           .build();\n \n ", "codes": ["public interface ShardingKey"], "fields": [], "methods": []}