{"name": "Class SctpServerChannel", "module": "jdk.sctp", "package": "com.sun.nio.sctp", "text": "A selectable channel for message-oriented listening SCTP sockets.\n\n  An SCTPServerChannel is created by invoking the\n open method of this class. A newly-created SCTP server\n channel is open but not yet bound. An attempt to invoke the\n accept method of an unbound channel will cause the\n NotYetBoundException to be thrown. An SCTP server\n channel can be bound by invoking one of the\n bind methods defined by this class.\n\n  Socket options are configured using the\n setOption method. SCTP server socket\n channels support the following options:\n \n\nSocket options\n\n\nOption Name\nDescription\n\n\n\n\n SCTP_INIT_MAXSTREAMS \n The maximum number of streams requested by the local endpoint during\n          association initialization \n\n\n\n\n Additional (implementation specific) options may also be supported. The list\n of options supported is obtained by invoking the supportedOptions method.\n\n SCTP server channels are safe for use by multiple concurrent threads.", "codes": ["public abstract class SctpServerChannel\nextends AbstractSelectableChannel"], "fields": [], "methods": [{"method_name": "open", "method_sig": "public static SctpServerChannel open()\n                              throws IOException", "description": "Opens an SCTP server channel.\n\n  The new channel's socket is initially unbound; it must be bound\n to a specific address via one of its socket's bind\n methods before associations can be accepted."}, {"method_name": "accept", "method_sig": "public abstract SctpChannel accept()\n                            throws IOException", "description": "Accepts an association on this channel's socket.\n\n  If this channel is in non-blocking mode then this method will\n immediately return null if there are no pending associations.\n Otherwise it will block indefinitely until a new association is\n available or an I/O error occurs.\n\n  The SCTPChannel returned by this method, if any, will be in\n  blocking mode regardless of the blocking mode of this channel.\n\n  If a security manager has been installed then for each new\n association this method verifies that the address and port number of the\n assocaitions's remote peer are permitted by the security manager's checkAccept method."}, {"method_name": "bind", "method_sig": "public final SctpServerChannel bind (SocketAddress local)\n                             throws IOException", "description": "Binds the channel's socket to a local address and configures the socket\n to listen for associations.\n\n  This method works as if invoking it were equivalent to evaluating the\n expression:\n \n bind(local, 0);\n "}, {"method_name": "bind", "method_sig": "public abstract SctpServerChannel bind (SocketAddress local,\n                                       int backlog)\n                                throws IOException", "description": "Binds the channel's socket to a local address and configures the socket\n to listen for associations.\n\n  This method is used to establish a relationship between the socket\n and the local address. Once a relationship is established then\n the socket remains bound until the channel is closed. This relationship\n may not necesssarily be with the address local as it may be\n removed by unbindAddress, but there will always be\n at least one local address bound to the channel's socket once an\n invocation of this method successfully completes.\n\n  Once the channel's socket has been successfully bound to a specific\n address, that is not automatically assigned, more addresses\n may be bound to it using bindAddress, or removed\n using unbindAddress.\n\n  The backlog parameter is the maximum number of pending associations\n on the socket. Its exact semantics are implementation specific. An\n implementation may impose an implementation specific maximum length or\n may choose to ignore the parameter. If the backlog parameter has the\n value 0, or a negative value, then an implementation specific\n default is used."}, {"method_name": "bindAddress", "method_sig": "public abstract SctpServerChannel bindAddress (InetAddress address)\n                                       throws IOException", "description": "Adds the given address to the bound addresses for the channel's\n socket.\n\n  The given address must not be the wildcard address.\n The channel must be first bound using bind before\n invoking this method, otherwise NotYetBoundException is thrown. The bind\n method takes a SocketAddress as its argument which typically\n contains a port number as well as an address. Addresses subquently bound\n using this method are simply addresses as the SCTP port number remains\n the same for the lifetime of the channel.\n\n  New associations accepted after this method successfully completes\n will be associated with the given address."}, {"method_name": "unbindAddress", "method_sig": "public abstract SctpServerChannel unbindAddress (InetAddress address)\n                                         throws IOException", "description": "Removes the given address from the bound addresses for the channel's\n socket.\n\n  The given address must not be the wildcard address.\n The channel must be first bound using bind before\n invoking this method, otherwise\n NotYetBoundException is thrown.\n If this method is invoked on a channel that does not have\n address as one of its bound addresses, or that has only one\n local address bound to it, then this method throws IllegalUnbindException.\n The initial address that the channel's socket is bound to using\n bind may be removed from the bound addresses for the\n channel's socket.\n\n  New associations accepted after this method successfully completes\n will not be associated with the given address."}, {"method_name": "getAllLocalAddresses", "method_sig": "public abstract Set<SocketAddress> getAllLocalAddresses()\n                                                 throws IOException", "description": "Returns all of the socket addresses to which this channel's socket is\n bound."}, {"method_name": "getOption", "method_sig": "public abstract <T> T getOption (SctpSocketOption<T> name)\n                         throws IOException", "description": "Returns the value of a socket option."}, {"method_name": "setOption", "method_sig": "public abstract <T> SctpServerChannel setOption (SctpSocketOption<T> name,\n                                                T value)\n                                         throws IOException", "description": "Sets the value of a socket option."}, {"method_name": "supportedOptions", "method_sig": "public abstract Set<SctpSocketOption<?>> supportedOptions()", "description": "Returns a set of the socket options supported by this channel.\n\n  This method will continue to return the set of options even after the\n channel has been closed."}, {"method_name": "validOps", "method_sig": "public final int validOps()", "description": "Returns an operation set identifying this channel's supported\n operations.\n\n  SCTP server channels only support the accepting of new\n associations, so this method returns\n SelectionKey.OP_ACCEPT."}]}