{"name": "Class NotificationBroadcasterSupport", "module": "java.management", "package": "javax.management", "text": "Provides an implementation of NotificationEmitter\n interface.  This can be used as the super class of an MBean that\n sends notifications.\nBy default, the notification dispatch model is synchronous.\n That is, when a thread calls sendNotification, the\n NotificationListener.handleNotification method of each listener\n is called within that thread. You can override this default\n by overriding handleNotification in a subclass, or by passing an\n Executor to the constructor.\nIf the method call of a filter or listener throws an Exception,\n then that exception does not prevent other listeners from being invoked.  However,\n if the method call of a filter or of Executor.execute or of\n handleNotification (when no Excecutor is specified) throws an\n Error, then that Error is propagated to the caller of\n sendNotification.\nRemote listeners added using the JMX Remote API (see JMXConnector) are not\n usually called synchronously.  That is, when sendNotification returns, it is\n not guaranteed that any remote listeners have yet received the notification.", "codes": ["public class NotificationBroadcasterSupport\nextends Object\nimplements NotificationEmitter"], "fields": [], "methods": [{"method_name": "addNotificationListener", "method_sig": "public void addNotificationListener (NotificationListener listener,\n                                    NotificationFilter filter,\n                                    Object handback)", "description": "Adds a listener."}, {"method_name": "sendNotification", "method_sig": "public void sendNotification (Notification notification)", "description": "Sends a notification.\n\n If an Executor was specified in the constructor, it will be given one\n task per selected listener to deliver the notification to that listener."}, {"method_name": "handleNotification", "method_sig": "protected void handleNotification (NotificationListener listener,\n                                  Notification notif,\n                                  Object handback)", "description": "This method is called by sendNotification for each listener in order to send the\n notification to that listener.  It can be overridden in\n subclasses to change the behavior of notification delivery,\n for instance to deliver the notification in a separate\n thread.\nThe default implementation of this method is equivalent to\n \n listener.handleNotification(notif, handback);\n "}]}