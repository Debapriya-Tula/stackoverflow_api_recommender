{"name": "Class MarshalledObject<T>", "module": "java.rmi", "package": "java.rmi", "text": "A MarshalledObject contains a byte stream with the serialized\n representation of an object given to its constructor.  The get\n method returns a new copy of the original object, as deserialized from\n the contained byte stream.  The contained object is serialized and\n deserialized with the same serialization semantics used for marshaling\n and unmarshaling parameters and return values of RMI calls:  When the\n serialized form is created:\n\n \n classes are annotated with a codebase URL from where the class\n      can be loaded (if available), and\n  any remote object in the MarshalledObject is\n      represented by a serialized instance of its stub.\n \nWhen copy of the object is retrieved (via the get method),\n if the class is not available locally, it will be loaded from the\n appropriate location (specified the URL annotated with the class descriptor\n when the class was serialized.\n\n MarshalledObject facilitates passing objects in RMI calls\n that are not automatically deserialized immediately by the remote peer.", "codes": ["public final class MarshalledObject<T>\nextends Object\nimplements Serializable"], "fields": [], "methods": [{"method_name": "get", "method_sig": "public T get()\n      throws IOException,\n             ClassNotFoundException", "description": "Returns a new copy of the contained marshalledobject.  The internal\n representation is deserialized with the semantics used for\n unmarshaling parameters for RMI calls.\n If the MarshalledObject was read from an ObjectInputStream,\n the filter from that stream is used to deserialize the object."}, {"method_name": "hashCode", "method_sig": "public int hashCode()", "description": "Return a hash code for this MarshalledObject."}, {"method_name": "equals", "method_sig": "public boolean equals (Object obj)", "description": "Compares this MarshalledObject to another object.\n Returns true if and only if the argument refers to a\n MarshalledObject that contains exactly the same\n serialized representation of an object as this one does. The\n comparison ignores any class codebase annotation, meaning that\n two objects are equivalent if they have the same serialized\n representation except for the codebase of each class\n in the serialized representation."}]}