{"name": "Class UnicastRemoteObject", "module": "java.rmi", "package": "java.rmi.server", "text": "Used for exporting a remote object with JRMP and obtaining a stub\n that communicates to the remote object. Stubs are either generated\n at runtime using dynamic proxy objects, or they are generated statically\n at build time, typically using the rmic tool.\n\n Deprecated: Static Stubs. Support for statically\n generated stubs is deprecated. This includes the API in this class that\n requires the use of static stubs, as well as the runtime support for\n loading static stubs.  Generating stubs dynamically is preferred, using one\n of the non-deprecated ways of exporting objects as listed below. Do\n not run rmic to generate static stub classes. It is unnecessary, and\n it is also deprecated.\nThere are eight ways to export remote objects:\n\n \nSubclassing UnicastRemoteObject and calling the\n UnicastRemoteObject() constructor.\n\n Subclassing UnicastRemoteObject and calling the\n UnicastRemoteObject(port) constructor.\n\n Subclassing UnicastRemoteObject and calling the\n UnicastRemoteObject(port, csf, ssf) constructor.\n\n Calling the\n exportObject(Remote) method.\n Deprecated.\nCalling the\n exportObject(Remote, port) method.\n\n Calling the\n exportObject(Remote, port, csf, ssf) method.\n\n Calling the\n exportObject(Remote, port, filter) method.\n\n Calling the\n exportObject(Remote, port, csf, ssf, filter) method.\n\n \nThe fourth technique, exportObject(Remote),\n always uses statically generated stubs and is deprecated.\n\n The other techniques all use the following approach: if the\n java.rmi.server.ignoreStubClasses property is true\n (case insensitive) or if a static stub cannot be found, stubs are generated\n dynamically using Proxy objects. Otherwise,\n static stubs are used.\n\n The default value of the\n java.rmi.server.ignoreStubClasses property is false.\n\n Statically generated stubs are typically pregenerated from the\n remote object's class using the rmic tool. A static stub is\n loaded and an instance of that stub class is constructed as described\n below.\n\n \nA \"root class\" is determined as follows: if the remote object's\n class directly implements an interface that extends Remote, then\n the remote object's class is the root class; otherwise, the root class is\n the most derived superclass of the remote object's class that directly\n implements an interface that extends Remote.\n\n The name of the stub class to load is determined by concatenating\n the binary name of the root class with the suffix _Stub.\n\n The stub class is loaded by name using the class loader of the root\n class. The stub class must be public, it must extend RemoteStub, it must\n reside in a package that is exported to at least the java.rmi module, and it\n must have a public constructor that has one parameter of type RemoteRef.\n\n Finally, an instance of the stub class is constructed with a\n RemoteRef.\n\n If the appropriate stub class could not be found, or if the stub class\n could not be loaded, or if a problem occurs creating the stub instance, a\n StubNotFoundException is thrown.\n\n \nStubs are dynamically generated by constructing an instance of\n a Proxy with the following characteristics:\n\n \nThe proxy's class is defined according to the specifications for the\n \nProxy\n\n class, using the class loader of the remote object's class.\n\n The proxy implements all the remote interfaces implemented by the\n remote object's class.\n\n Each remote interface must either be public and reside in a package that is\n exported\n to at least the java.rmi module, or it must reside in a package that is\n open\n to at least the java.rmi module.\n\n The proxy's invocation handler is a RemoteObjectInvocationHandler instance constructed with a\n RemoteRef.\n\n If the proxy could not be created, a StubNotFoundException\n will be thrown.\n\n \n\n Exported remote objects receive method invocations from the stubs\n as described in the RMI specification. Each invocation's operation and\n parameters are unmarshaled using a custom ObjectInputStream.\n If an ObjectInputFilter is provided and is not null when the object\n is exported, it is used to filter the parameters as they are unmarshaled from the stream.\n The filter is used for all invocations and all parameters regardless of\n the method being invoked or the parameter values.\n If no filter is provided or is null for the exported object then the\n ObjectInputStream default filter, if any, is used. The default filter is\n configured with ObjectInputFilter.Config.setSerialFilter.\n If the filter rejects any of the parameters, the InvalidClassException\n thrown by ObjectInputStream is reported as the cause of an\n UnmarshalException.", "codes": ["public class UnicastRemoteObject\nextends RemoteServer"], "fields": [], "methods": [{"method_name": "clone", "method_sig": "public Object clone()\n             throws CloneNotSupportedException", "description": "Returns a clone of the remote object that is distinct from\n the original."}, {"method_name": "exportObject", "method_sig": "@Deprecated\npublic static RemoteStub exportObject (Remote obj)\n                               throws RemoteException", "description": "Exports the remote object to make it available to receive incoming\n calls using an anonymous port. This method will always return a\n statically generated stub.\n\n The object is exported with a server socket\n created using the RMISocketFactory class."}, {"method_name": "exportObject", "method_sig": "public static Remote exportObject (Remote obj,\n                                  int port)\n                           throws RemoteException", "description": "Exports the remote object to make it available to receive incoming\n calls, using the particular supplied port.\n\n The object is exported with a server socket\n created using the RMISocketFactory class."}, {"method_name": "exportObject", "method_sig": "public static Remote exportObject (Remote obj,\n                                  int port,\n                                  RMIClientSocketFactory csf,\n                                  RMIServerSocketFactory ssf)\n                           throws RemoteException", "description": "Exports the remote object to make it available to receive incoming\n calls, using a transport specified by the given socket factory.\n\n Either socket factory may be null, in which case\n the corresponding client or server socket creation method of\n RMISocketFactory is used instead."}, {"method_name": "exportObject", "method_sig": "public static Remote exportObject (Remote obj,\n                                  int port,\n                                  ObjectInputFilter filter)\n                           throws RemoteException", "description": "Exports the remote object to make it available to receive incoming\n calls, using the particular supplied port\n and filter.\n\n The object is exported with a server socket\n created using the RMISocketFactory class."}, {"method_name": "exportObject", "method_sig": "public static Remote exportObject (Remote obj,\n                                  int port,\n                                  RMIClientSocketFactory csf,\n                                  RMIServerSocketFactory ssf,\n                                  ObjectInputFilter filter)\n                           throws RemoteException", "description": "Exports the remote object to make it available to receive incoming\n calls, using a transport specified by the given socket factory\n and filter.\n\n Either socket factory may be null, in which case\n the corresponding client or server socket creation method of\n RMISocketFactory is used instead."}, {"method_name": "unexportObject", "method_sig": "public static boolean unexportObject (Remote obj,\n                                     boolean force)\n                              throws NoSuchObjectException", "description": "Removes the remote object, obj, from the RMI runtime. If\n successful, the object can no longer accept incoming RMI calls.\n If the force parameter is true, the object is forcibly unexported\n even if there are pending calls to the remote object or the\n remote object still has calls in progress.  If the force\n parameter is false, the object is only unexported if there are\n no pending or in progress calls to the object."}]}