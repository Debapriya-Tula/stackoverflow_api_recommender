{"name": "Class StreamTokenizer", "module": "java.base", "package": "java.io", "text": "The StreamTokenizer class takes an input stream and\n parses it into \"tokens\", allowing the tokens to be\n read one at a time. The parsing process is controlled by a table\n and a number of flags that can be set to various states. The\n stream tokenizer can recognize identifiers, numbers, quoted\n strings, and various comment styles.\n \n Each byte read from the input stream is regarded as a character\n in the range '\\u0000' through '\\u00FF'.\n The character value is used to look up five possible attributes of\n the character: white space, alphabetic,\n numeric, string quote, and comment character.\n Each character can have zero or more of these attributes.\n \n In addition, an instance has four flags. These flags indicate:\n \nWhether line terminators are to be returned as tokens or treated\n     as white space that merely separates tokens.\n Whether C-style comments are to be recognized and skipped.\n Whether C++-style comments are to be recognized and skipped.\n Whether the characters of identifiers are converted to lowercase.\n \n\n A typical application first constructs an instance of this class,\n sets up the syntax tables, and then repeatedly loops calling the\n nextToken method in each iteration of the loop until\n it returns the value TT_EOF.", "codes": ["public class StreamTokenizer\nextends Object"], "fields": [{"field_name": "ttype", "field_sig": "public\u00a0int ttype", "description": "After a call to the nextToken method, this field\n contains the type of the token just read. For a single character\n token, its value is the single character, converted to an integer.\n For a quoted string token, its value is the quote character.\n Otherwise, its value is one of the following:\n \nTT_WORD indicates that the token is a word.\n TT_NUMBER indicates that the token is a number.\n TT_EOL indicates that the end of line has been read.\n     The field can only have this value if the\n     eolIsSignificant method has been called with the\n     argument true.\n TT_EOF indicates that the end of the input stream\n     has been reached.\n \n\n The initial value of this field is -4."}, {"field_name": "TT_EOF", "field_sig": "public static final\u00a0int TT_EOF", "description": "A constant indicating that the end of the stream has been read."}, {"field_name": "TT_EOL", "field_sig": "public static final\u00a0int TT_EOL", "description": "A constant indicating that the end of the line has been read."}, {"field_name": "TT_NUMBER", "field_sig": "public static final\u00a0int TT_NUMBER", "description": "A constant indicating that a number token has been read."}, {"field_name": "TT_WORD", "field_sig": "public static final\u00a0int TT_WORD", "description": "A constant indicating that a word token has been read."}, {"field_name": "sval", "field_sig": "public\u00a0String sval", "description": "If the current token is a word token, this field contains a\n string giving the characters of the word token. When the current\n token is a quoted string token, this field contains the body of\n the string.\n \n The current token is a word when the value of the\n ttype field is TT_WORD. The current token is\n a quoted string token when the value of the ttype field is\n a quote character.\n \n The initial value of this field is null."}, {"field_name": "nval", "field_sig": "public\u00a0double nval", "description": "If the current token is a number, this field contains the value\n of that number. The current token is a number when the value of\n the ttype field is TT_NUMBER.\n \n The initial value of this field is 0.0."}], "methods": [{"method_name": "resetSyntax", "method_sig": "public void resetSyntax()", "description": "Resets this tokenizer's syntax table so that all characters are\n \"ordinary.\" See the ordinaryChar method\n for more information on a character being ordinary."}, {"method_name": "wordChars", "method_sig": "public void wordChars (int low,\n                      int hi)", "description": "Specifies that all characters c in the range\n low\u00a0<=\u00a0c\u00a0<=\u00a0high\n are word constituents. A word token consists of a word constituent\n followed by zero or more word constituents or number constituents."}, {"method_name": "whitespaceChars", "method_sig": "public void whitespaceChars (int low,\n                            int hi)", "description": "Specifies that all characters c in the range\n low\u00a0<=\u00a0c\u00a0<=\u00a0high\n are white space characters. White space characters serve only to\n separate tokens in the input stream.\n\n Any other attribute settings for the characters in the specified\n range are cleared."}, {"method_name": "ordinaryChars", "method_sig": "public void ordinaryChars (int low,\n                          int hi)", "description": "Specifies that all characters c in the range\n low\u00a0<=\u00a0c\u00a0<=\u00a0high\n are \"ordinary\" in this tokenizer. See the\n ordinaryChar method for more information on a\n character being ordinary."}, {"method_name": "ordinaryChar", "method_sig": "public void ordinaryChar (int ch)", "description": "Specifies that the character argument is \"ordinary\"\n in this tokenizer. It removes any special significance the\n character has as a comment character, word component, string\n delimiter, white space, or number character. When such a character\n is encountered by the parser, the parser treats it as a\n single-character token and sets ttype field to the\n character value.\n\n Making a line terminator character \"ordinary\" may interfere\n with the ability of a StreamTokenizer to count\n lines. The lineno method may no longer reflect\n the presence of such terminator characters in its line count."}, {"method_name": "commentChar", "method_sig": "public void commentChar (int ch)", "description": "Specified that the character argument starts a single-line\n comment. All characters from the comment character to the end of\n the line are ignored by this stream tokenizer.\n\n Any other attribute settings for the specified character are cleared."}, {"method_name": "quoteChar", "method_sig": "public void quoteChar (int ch)", "description": "Specifies that matching pairs of this character delimit string\n constants in this tokenizer.\n \n When the nextToken method encounters a string\n constant, the ttype field is set to the string\n delimiter and the sval field is set to the body of\n the string.\n \n If a string quote character is encountered, then a string is\n recognized, consisting of all characters after (but not including)\n the string quote character, up to (but not including) the next\n occurrence of that same string quote character, or a line\n terminator, or end of file. The usual escape sequences such as\n \"\\n\" and \"\\t\" are recognized and\n converted to single characters as the string is parsed.\n\n Any other attribute settings for the specified character are cleared."}, {"method_name": "parseNumbers", "method_sig": "public void parseNumbers()", "description": "Specifies that numbers should be parsed by this tokenizer. The\n syntax table of this tokenizer is modified so that each of the twelve\n characters:\n \n      0 1 2 3 4 5 6 7 8 9 . -\n \n\n has the \"numeric\" attribute.\n \n When the parser encounters a word token that has the format of a\n double precision floating-point number, it treats the token as a\n number rather than a word, by setting the ttype\n field to the value TT_NUMBER and putting the numeric\n value of the token into the nval field."}, {"method_name": "eolIsSignificant", "method_sig": "public void eolIsSignificant (boolean flag)", "description": "Determines whether or not ends of line are treated as tokens.\n If the flag argument is true, this tokenizer treats end of lines\n as tokens; the nextToken method returns\n TT_EOL and also sets the ttype field to\n this value when an end of line is read.\n \n A line is a sequence of characters ending with either a\n carriage-return character ('\\r') or a newline\n character ('\\n'). In addition, a carriage-return\n character followed immediately by a newline character is treated\n as a single end-of-line token.\n \n If the flag is false, end-of-line characters are\n treated as white space and serve only to separate tokens."}, {"method_name": "slashStarComments", "method_sig": "public void slashStarComments (boolean flag)", "description": "Determines whether or not the tokenizer recognizes C-style comments.\n If the flag argument is true, this stream tokenizer\n recognizes C-style comments. All text between successive\n occurrences of /* and */ are discarded.\n \n If the flag argument is false, then C-style comments\n are not treated specially."}, {"method_name": "slashSlashComments", "method_sig": "public void slashSlashComments (boolean flag)", "description": "Determines whether or not the tokenizer recognizes C++-style comments.\n If the flag argument is true, this stream tokenizer\n recognizes C++-style comments. Any occurrence of two consecutive\n slash characters ('/') is treated as the beginning of\n a comment that extends to the end of the line.\n \n If the flag argument is false, then C++-style\n comments are not treated specially."}, {"method_name": "lowerCaseMode", "method_sig": "public void lowerCaseMode (boolean fl)", "description": "Determines whether or not word token are automatically lowercased.\n If the flag argument is true, then the value in the\n sval field is lowercased whenever a word token is\n returned (the ttype field has the\n value TT_WORD by the nextToken method\n of this tokenizer.\n \n If the flag argument is false, then the\n sval field is not modified."}, {"method_name": "nextToken", "method_sig": "public int nextToken()\n              throws IOException", "description": "Parses the next token from the input stream of this tokenizer.\n The type of the next token is returned in the ttype\n field. Additional information about the token may be in the\n nval field or the sval field of this\n tokenizer.\n \n Typical clients of this\n class first set up the syntax tables and then sit in a loop\n calling nextToken to parse successive tokens until TT_EOF\n is returned."}, {"method_name": "pushBack", "method_sig": "public void pushBack()", "description": "Causes the next call to the nextToken method of this\n tokenizer to return the current value in the ttype\n field, and not to modify the value in the nval or\n sval field."}, {"method_name": "lineno", "method_sig": "public int lineno()", "description": "Return the current line number."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns the string representation of the current stream token and\n the line number it occurs on.\n\n The precise string returned is unspecified, although the following\n example can be considered typical:\n\n Token['a'], line 10"}]}