{"name": "Class AbstractCollection<E>", "module": "java.base", "package": "java.util", "text": "This class provides a skeletal implementation of the Collection\n interface, to minimize the effort required to implement this interface. \n\n To implement an unmodifiable collection, the programmer needs only to\n extend this class and provide implementations for the iterator and\n size methods.  (The iterator returned by the iterator\n method must implement hasNext and next.)\n\n To implement a modifiable collection, the programmer must additionally\n override this class's add method (which otherwise throws an\n UnsupportedOperationException), and the iterator returned by the\n iterator method must additionally implement its remove\n method.\n\n The programmer should generally provide a void (no argument) and\n Collection constructor, as per the recommendation in the\n Collection interface specification.\n\n The documentation for each non-abstract method in this class describes its\n implementation in detail.  Each of these methods may be overridden if\n the collection being implemented admits a more efficient implementation.\n\n This class is a member of the\n \n Java Collections Framework.", "codes": ["public abstract class AbstractCollection<E>\nextends Object\nimplements Collection<E>"], "fields": [], "methods": [{"method_name": "iterator", "method_sig": "public abstract Iterator<E> iterator()", "description": "Returns an iterator over the elements contained in this collection."}, {"method_name": "isEmpty", "method_sig": "public boolean isEmpty()", "description": "Returns true if this collection contains no elements."}, {"method_name": "contains", "method_sig": "public boolean contains (Object o)", "description": "Returns true if this collection contains the specified element.\n More formally, returns true if and only if this collection\n contains at least one element e such that\n Objects.equals(o, e)."}, {"method_name": "toArray", "method_sig": "public Object[] toArray()", "description": "Returns an array containing all of the elements in this collection.\n If this collection makes any guarantees as to what order its elements\n are returned by its iterator, this method must return the elements in\n the same order. The returned array's runtime component type is Object.\n\n The returned array will be \"safe\" in that no references to it are\n maintained by this collection.  (In other words, this method must\n allocate a new array even if this collection is backed by an array).\n The caller is thus free to modify the returned array."}, {"method_name": "toArray", "method_sig": "public <T> T[] toArray (T[] a)", "description": "Returns an array containing all of the elements in this collection;\n the runtime type of the returned array is that of the specified array.\n If the collection fits in the specified array, it is returned therein.\n Otherwise, a new array is allocated with the runtime type of the\n specified array and the size of this collection.\n\n If this collection fits in the specified array with room to spare\n (i.e., the array has more elements than this collection), the element\n in the array immediately following the end of the collection is set to\n null.  (This is useful in determining the length of this\n collection only if the caller knows that this collection does\n not contain any null elements.)\n\n If this collection makes any guarantees as to what order its elements\n are returned by its iterator, this method must return the elements in\n the same order."}, {"method_name": "add", "method_sig": "public boolean add (E e)", "description": "Ensures that this collection contains the specified element (optional\n operation).  Returns true if this collection changed as a\n result of the call.  (Returns false if this collection does\n not permit duplicates and already contains the specified element.)\n\n Collections that support this operation may place limitations on what\n elements may be added to this collection.  In particular, some\n collections will refuse to add null elements, and others will\n impose restrictions on the type of elements that may be added.\n Collection classes should clearly specify in their documentation any\n restrictions on what elements may be added.\n\n If a collection refuses to add a particular element for any reason\n other than that it already contains the element, it must throw\n an exception (rather than returning false).  This preserves\n the invariant that a collection always contains the specified element\n after this call returns."}, {"method_name": "remove", "method_sig": "public boolean remove (Object o)", "description": "Removes a single instance of the specified element from this\n collection, if it is present (optional operation).  More formally,\n removes an element e such that\n Objects.equals(o, e), if\n this collection contains one or more such elements.  Returns\n true if this collection contained the specified element (or\n equivalently, if this collection changed as a result of the call)."}, {"method_name": "containsAll", "method_sig": "public boolean containsAll (Collection<?> c)", "description": "Returns true if this collection contains all of the elements\n in the specified collection."}, {"method_name": "addAll", "method_sig": "public boolean addAll (Collection<? extends E> c)", "description": "Adds all of the elements in the specified collection to this collection\n (optional operation).  The behavior of this operation is undefined if\n the specified collection is modified while the operation is in progress.\n (This implies that the behavior of this call is undefined if the\n specified collection is this collection, and this collection is\n nonempty.)"}, {"method_name": "removeAll", "method_sig": "public boolean removeAll (Collection<?> c)", "description": "Removes all of this collection's elements that are also contained in the\n specified collection (optional operation).  After this call returns,\n this collection will contain no elements in common with the specified\n collection."}, {"method_name": "retainAll", "method_sig": "public boolean retainAll (Collection<?> c)", "description": "Retains only the elements in this collection that are contained in the\n specified collection (optional operation).  In other words, removes from\n this collection all of its elements that are not contained in the\n specified collection."}, {"method_name": "clear", "method_sig": "public void clear()", "description": "Removes all of the elements from this collection (optional operation).\n The collection will be empty after this method returns."}, {"method_name": "toString", "method_sig": "public String toString()", "description": "Returns a string representation of this collection.  The string\n representation consists of a list of the collection's elements in the\n order they are returned by its iterator, enclosed in square brackets\n (\"[]\").  Adjacent elements are separated by the characters\n \", \" (comma and space).  Elements are converted to strings as\n by String.valueOf(Object)."}]}