{"name": "Class MemoryImageSource", "module": "java.desktop", "package": "java.awt.image", "text": "This class is an implementation of the ImageProducer interface which\n uses an array to produce pixel values for an Image.  Here is an example\n which calculates a 100x100 image representing a fade from black to blue\n along the X axis and a fade from black to red along the Y axis:\n \n\n      int w = 100;\n      int h = 100;\n      int pix[] = new int[w * h];\n      int index = 0;\n      for (int y = 0; y < h; y++) {\n          int red = (y * 255) / (h - 1);\n          for (int x = 0; x < w; x++) {\n              int blue = (x * 255) / (w - 1);\n              pix[index++] = (255 << 24) | (red << 16) | blue;\n          }\n      }\n      Image img = createImage(new MemoryImageSource(w, h, pix, 0, w));\n\n \n The MemoryImageSource is also capable of managing a memory image which\n varies over time to allow animation or custom rendering.  Here is an\n example showing how to set up the animation source and signal changes\n in the data (adapted from the MemoryAnimationSourceDemo by Garth Dickie):\n \n\n      int pixels[];\n      MemoryImageSource source;\n\n      public void init() {\n          int width = 50;\n          int height = 50;\n          int size = width * height;\n          pixels = new int[size];\n\n          int value = getBackground().getRGB();\n          for (int i = 0; i < size; i++) {\n              pixels[i] = value;\n          }\n\n          source = new MemoryImageSource(width, height, pixels, 0, width);\n          source.setAnimated(true);\n          image = createImage(source);\n      }\n\n      public void run() {\n          Thread me = Thread.currentThread( );\n          me.setPriority(Thread.MIN_PRIORITY);\n\n          while (true) {\n              try {\n                  Thread.sleep(10);\n              } catch( InterruptedException e ) {\n                  return;\n              }\n\n              // Modify the values in the pixels array at (x, y, w, h)\n\n              // Send the new data to the interested ImageConsumers\n              source.newPixels(x, y, w, h);\n          }\n      }\n\n ", "codes": ["public class MemoryImageSource\nextends Object\nimplements ImageProducer"], "fields": [], "methods": [{"method_name": "addConsumer", "method_sig": "public void addConsumer (ImageConsumer ic)", "description": "Adds an ImageConsumer to the list of consumers interested in\n data for this image."}, {"method_name": "isConsumer", "method_sig": "public boolean isConsumer (ImageConsumer ic)", "description": "Determines if an ImageConsumer is on the list of consumers currently\n interested in data for this image."}, {"method_name": "removeConsumer", "method_sig": "public void removeConsumer (ImageConsumer ic)", "description": "Removes an ImageConsumer from the list of consumers interested in\n data for this image."}, {"method_name": "startProduction", "method_sig": "public void startProduction (ImageConsumer ic)", "description": "Adds an ImageConsumer to the list of consumers interested in\n data for this image and immediately starts delivery of the\n image data through the ImageConsumer interface."}, {"method_name": "requestTopDownLeftRightResend", "method_sig": "public void requestTopDownLeftRightResend (ImageConsumer ic)", "description": "Requests that a given ImageConsumer have the image data delivered\n one more time in top-down, left-right order."}, {"method_name": "setAnimated", "method_sig": "public void setAnimated (boolean animated)", "description": "Changes this memory image into a multi-frame animation or a\n single-frame static image depending on the animated parameter.\n This method should be called immediately after the\n MemoryImageSource is constructed and before an image is\n created with it to ensure that all ImageConsumers will\n receive the correct multi-frame data.  If an ImageConsumer\n is added to this ImageProducer before this flag is set then\n that ImageConsumer will see only a snapshot of the pixel\n data that was available when it connected."}, {"method_name": "setFullBufferUpdates", "method_sig": "public void setFullBufferUpdates (boolean fullbuffers)", "description": "Specifies whether this animated memory image should always be\n updated by sending the complete buffer of pixels whenever\n there is a change.\n This flag is ignored if the animation flag is not turned on\n through the setAnimated() method.\n This method should be called immediately after the\n MemoryImageSource is constructed and before an image is\n created with it to ensure that all ImageConsumers will\n receive the correct pixel delivery hints."}, {"method_name": "newPixels", "method_sig": "public void newPixels()", "description": "Sends a whole new buffer of pixels to any ImageConsumers that\n are currently interested in the data for this image and notify\n them that an animation frame is complete.\n This method only has effect if the animation flag has been\n turned on through the setAnimated() method."}, {"method_name": "newPixels", "method_sig": "public void newPixels (int x,\n                      int y,\n                      int w,\n                      int h)", "description": "Sends a rectangular region of the buffer of pixels to any\n ImageConsumers that are currently interested in the data for\n this image and notify them that an animation frame is complete.\n This method only has effect if the animation flag has been\n turned on through the setAnimated() method.\n If the full buffer update flag was turned on with the\n setFullBufferUpdates() method then the rectangle parameters\n will be ignored and the entire buffer will always be sent."}, {"method_name": "newPixels", "method_sig": "public void newPixels (int x,\n                      int y,\n                      int w,\n                      int h,\n                      boolean framenotify)", "description": "Sends a rectangular region of the buffer of pixels to any\n ImageConsumers that are currently interested in the data for\n this image.\n If the framenotify parameter is true then the consumers are\n also notified that an animation frame is complete.\n This method only has effect if the animation flag has been\n turned on through the setAnimated() method.\n If the full buffer update flag was turned on with the\n setFullBufferUpdates() method then the rectangle parameters\n will be ignored and the entire buffer will always be sent."}, {"method_name": "newPixels", "method_sig": "public void newPixels (byte[] newpix,\n                      ColorModel newmodel,\n                      int offset,\n                      int scansize)", "description": "Changes to a new byte array to hold the pixels for this image.\n If the animation flag has been turned on through the setAnimated()\n method, then the new pixels will be immediately delivered to any\n ImageConsumers that are currently interested in the data for\n this image."}, {"method_name": "newPixels", "method_sig": "public void newPixels (int[] newpix,\n                      ColorModel newmodel,\n                      int offset,\n                      int scansize)", "description": "Changes to a new int array to hold the pixels for this image.\n If the animation flag has been turned on through the setAnimated()\n method, then the new pixels will be immediately delivered to any\n ImageConsumers that are currently interested in the data for\n this image."}]}