{"name": "Class ActionEvent", "module": "java.desktop", "package": "java.awt.event", "text": "A semantic event which indicates that a component-defined action occurred.\n This high-level event is generated by a component (such as a\n Button) when\n the component-specific action occurs (such as being pressed).\n The event is passed to every ActionListener object\n that registered to receive such events using the component's\n addActionListener method.\n \nNote: To invoke an ActionEvent on a\n Button using the keyboard, use the Space bar.\n \n The object that implements the ActionListener interface\n gets this ActionEvent when the event occurs. The listener\n is therefore spared the details of processing individual mouse movements\n and mouse clicks, and can instead process a \"meaningful\" (semantic)\n event like \"button pressed\".\n \n An unspecified behavior will be caused if the id parameter\n of any particular ActionEvent instance is not\n in the range from ACTION_FIRST to ACTION_LAST.", "codes": ["public class ActionEvent\nextends AWTEvent"], "fields": [{"field_name": "SHIFT_MASK", "field_sig": "public static final\u00a0int SHIFT_MASK", "description": "The shift modifier. An indicator that the shift key was held\n down during the event."}, {"field_name": "CTRL_MASK", "field_sig": "public static final\u00a0int CTRL_MASK", "description": "The control modifier. An indicator that the control key was held\n down during the event."}, {"field_name": "META_MASK", "field_sig": "public static final\u00a0int META_MASK", "description": "The meta modifier. An indicator that the meta key was held\n down during the event."}, {"field_name": "ALT_MASK", "field_sig": "public static final\u00a0int ALT_MASK", "description": "The alt modifier. An indicator that the alt key was held\n down during the event."}, {"field_name": "ACTION_FIRST", "field_sig": "public static final\u00a0int ACTION_FIRST", "description": "The first number in the range of ids used for action events."}, {"field_name": "ACTION_LAST", "field_sig": "public static final\u00a0int ACTION_LAST", "description": "The last number in the range of ids used for action events."}, {"field_name": "ACTION_PERFORMED", "field_sig": "@Native\npublic static final\u00a0int ACTION_PERFORMED", "description": "This event id indicates that a meaningful action occurred."}], "methods": [{"method_name": "getActionCommand", "method_sig": "public String getActionCommand()", "description": "Returns the command string associated with this action.\n This string allows a \"modal\" component to specify one of several\n commands, depending on its state. For example, a single button might\n toggle between \"show details\" and \"hide details\". The source object\n and the event would be the same in each case, but the command string\n would identify the intended action.\n \n Note that if a null command string was passed\n to the constructor for this ActionEvent, this\n this method returns null."}, {"method_name": "getWhen", "method_sig": "public long getWhen()", "description": "Returns the timestamp of when this event occurred. Because an\n ActionEvent is a high-level, semantic event, the timestamp is typically\n the same as an underlying InputEvent."}, {"method_name": "getModifiers", "method_sig": "public int getModifiers()", "description": "Returns the modifier keys held down during this action event."}, {"method_name": "paramString", "method_sig": "public String paramString()", "description": "Returns a parameter string identifying this action event.\n This method is useful for event-logging and for debugging."}]}