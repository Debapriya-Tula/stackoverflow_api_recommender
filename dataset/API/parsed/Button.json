{"name": "Class Button", "module": "java.desktop", "package": "java.awt", "text": "This class creates a labeled button. The application can cause\n some action to happen when the button is pushed. This image\n depicts three views of a \"Quit\" button as it appears\n under the Solaris operating system:\n \n\n\n The first view shows the button as it appears normally.\n The second view shows the button\n when it has input focus. Its outline is darkened to let the\n user know that it is an active object. The third view shows the\n button when the user clicks the mouse over the button, and thus\n requests that an action be performed.\n \n The gesture of clicking on a button with the mouse\n is associated with one instance of ActionEvent,\n which is sent out when the mouse is both pressed and released\n over the button. If an application is interested in knowing\n when the button has been pressed but not released, as a separate\n gesture, it can specialize processMouseEvent,\n or it can register itself as a listener for mouse events by\n calling addMouseListener. Both of these methods are\n defined by Component, the abstract superclass of\n all components.\n \n When a button is pressed and released, AWT sends an instance\n of ActionEvent to the button, by calling\n processEvent on the button. The button's\n processEvent method receives all events\n for the button; it passes an action event along by\n calling its own processActionEvent method.\n The latter method passes the action event on to any action\n listeners that have registered an interest in action\n events generated by this button.\n \n If an application wants to perform some action based on\n a button being pressed and released, it should implement\n ActionListener and register the new listener\n to receive events from this button, by calling the button's\n addActionListener method. The application can\n make use of the button's action command as a messaging protocol.", "codes": ["public class Button\nextends Component\nimplements Accessible"], "fields": [], "methods": [{"method_name": "addNotify", "method_sig": "public void addNotify()", "description": "Creates the peer of the button.  The button's peer allows the\n application to change the look of the button without changing\n its functionality."}, {"method_name": "getLabel", "method_sig": "public String getLabel()", "description": "Gets the label of this button."}, {"method_name": "setLabel", "method_sig": "public void setLabel (String label)", "description": "Sets the button's label to be the specified string."}, {"method_name": "setActionCommand", "method_sig": "public void setActionCommand (String command)", "description": "Sets the command name for the action event fired\n by this button. By default this action command is\n set to match the label of the button."}, {"method_name": "getActionCommand", "method_sig": "public String getActionCommand()", "description": "Returns the command name of the action event fired by this button.\n If the command name is null (default) then this method\n returns the label of the button."}, {"method_name": "addActionListener", "method_sig": "public void addActionListener (ActionListener l)", "description": "Adds the specified action listener to receive action events from\n this button. Action events occur when a user presses or releases\n the mouse over this button.\n If l is null, no exception is thrown and no action is performed.\n Refer to AWT Threading Issues for details on AWT's threading model."}, {"method_name": "removeActionListener", "method_sig": "public void removeActionListener (ActionListener l)", "description": "Removes the specified action listener so that it no longer\n receives action events from this button. Action events occur\n when a user presses or releases the mouse over this button.\n If l is null, no exception is thrown and no action is performed.\n Refer to AWT Threading Issues for details on AWT's threading model."}, {"method_name": "getActionListeners", "method_sig": "public ActionListener[] getActionListeners()", "description": "Returns an array of all the action listeners\n registered on this button."}, {"method_name": "getListeners", "method_sig": "public <T extends EventListener> T[] getListeners (Class<T> listenerType)", "description": "Returns an array of all the objects currently registered\n as FooListeners\n upon this Button.\n FooListeners are registered using the\n addFooListener method.\n\n \n You can specify the listenerType argument\n with a class literal, such as\n FooListener.class.\n For example, you can query a\n Button b\n for its action listeners with the following code:\n\n ActionListener[] als = (ActionListener[])(b.getListeners(ActionListener.class));\n\n If no such listeners exist, this method returns an empty array."}, {"method_name": "processEvent", "method_sig": "protected void processEvent (AWTEvent e)", "description": "Processes events on this button. If an event is\n an instance of ActionEvent, this method invokes\n the processActionEvent method. Otherwise,\n it invokes processEvent on the superclass.\n Note that if the event parameter is null\n the behavior is unspecified and may result in an\n exception."}, {"method_name": "processActionEvent", "method_sig": "protected void processActionEvent (ActionEvent e)", "description": "Processes action events occurring on this button\n by dispatching them to any registered\n ActionListener objects.\n \n This method is not called unless action events are\n enabled for this button. Action events are enabled\n when one of the following occurs:\n \nAn ActionListener object is registered\n via addActionListener.\n Action events are enabled via enableEvents.\n \nNote that if the event parameter is null\n the behavior is unspecified and may result in an\n exception."}, {"method_name": "paramString", "method_sig": "protected String paramString()", "description": "Returns a string representing the state of this Button.\n This method is intended to be used only for debugging purposes, and the\n content and format of the returned string may vary between\n implementations. The returned string may be empty but may not be\n null."}, {"method_name": "getAccessibleContext", "method_sig": "@BeanProperty(expert=true,\n              description=\"The AccessibleContext associated with this Button.\")\npublic AccessibleContext getAccessibleContext()", "description": "Gets the AccessibleContext associated with\n this Button. For buttons, the\n AccessibleContext takes the form of an\n AccessibleAWTButton.\n A new AccessibleAWTButton instance is\n created if necessary."}]}