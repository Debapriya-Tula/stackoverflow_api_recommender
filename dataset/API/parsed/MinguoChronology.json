{"name": "Class MinguoChronology", "module": "java.base", "package": "java.time.chrono", "text": "The Minguo calendar system.\n \n This chronology defines the rules of the Minguo calendar system.\n This calendar system is primarily used in the Republic of China, often known as Taiwan.\n Dates are aligned such that 0001-01-01 (Minguo) is 1912-01-01 (ISO).\n \n The fields are defined as follows:\n \nera - There are two eras, the current 'Republic' (ERA_ROC) and the previous era (ERA_BEFORE_ROC).\n year-of-era - The year-of-era for the current era increases uniformly from the epoch at year one.\n  For the previous era the year increases from one as time goes backwards.\n  The value for the current era is equal to the ISO proleptic-year minus 1911.\n proleptic-year - The proleptic year is the same as the year-of-era for the\n  current era. For the previous era, years have zero, then negative values.\n  The value is equal to the ISO proleptic-year minus 1911.\n month-of-year - The Minguo month-of-year exactly matches ISO.\n day-of-month - The Minguo day-of-month exactly matches ISO.\n day-of-year - The Minguo day-of-year exactly matches ISO.\n leap-year - The Minguo leap-year pattern exactly matches ISO, such that the two calendars\n  are never out of step.\n ", "codes": ["public final class MinguoChronology\nextends AbstractChronology\nimplements Serializable"], "fields": [{"field_name": "INSTANCE", "field_sig": "public static final\u00a0MinguoChronology INSTANCE", "description": "Singleton instance for the Minguo chronology."}], "methods": [{"method_name": "getId", "method_sig": "public String getId()", "description": "Gets the ID of the chronology - 'Minguo'.\n \n The ID uniquely identifies the Chronology.\n It can be used to lookup the Chronology using Chronology.of(String)."}, {"method_name": "getCalendarType", "method_sig": "public String getCalendarType()", "description": "Gets the calendar type of the underlying calendar system - 'roc'.\n \n The calendar type is an identifier defined by the\n Unicode Locale Data Markup Language (LDML) specification.\n It can be used to lookup the Chronology using Chronology.of(String).\n It can also be used as part of a locale, accessible via\n Locale.getUnicodeLocaleType(String) with the key 'ca'."}, {"method_name": "date", "method_sig": "public MinguoDate date (Era era,\n                       int yearOfEra,\n                       int month,\n                       int dayOfMonth)", "description": "Obtains a local date in Minguo calendar system from the\n era, year-of-era, month-of-year and day-of-month fields."}, {"method_name": "date", "method_sig": "public MinguoDate date (int prolepticYear,\n                       int month,\n                       int dayOfMonth)", "description": "Obtains a local date in Minguo calendar system from the\n proleptic-year, month-of-year and day-of-month fields."}, {"method_name": "dateYearDay", "method_sig": "public MinguoDate dateYearDay (Era era,\n                              int yearOfEra,\n                              int dayOfYear)", "description": "Obtains a local date in Minguo calendar system from the\n era, year-of-era and day-of-year fields."}, {"method_name": "dateYearDay", "method_sig": "public MinguoDate dateYearDay (int prolepticYear,\n                              int dayOfYear)", "description": "Obtains a local date in Minguo calendar system from the\n proleptic-year and day-of-year fields."}, {"method_name": "dateEpochDay", "method_sig": "public MinguoDate dateEpochDay (long epochDay)", "description": "Obtains a local date in the Minguo calendar system from the epoch-day."}, {"method_name": "isLeapYear", "method_sig": "public boolean isLeapYear (long prolepticYear)", "description": "Checks if the specified year is a leap year.\n \n Minguo leap years occur exactly in line with ISO leap years.\n This method does not validate the year passed in, and only has a\n well-defined result for years in the supported range."}]}